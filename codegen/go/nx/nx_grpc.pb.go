/*
Copyright 2019 Cisco Systems

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: nx_grpc.proto

package NXOSExtensibleManagabilityService

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type GetConfigArgs struct {
	// JSON-encoded YANG data to be retrieved
	YangPath string `protobuf:"bytes,1,opt,name=YangPath,proto3" json:"YangPath,omitempty"`
	// (Optional) Specifies the request ID.  Default value is 0.
	ReqID int64 `protobuf:"varint,2,opt,name=ReqID,proto3" json:"ReqID,omitempty"`
	// (Optional) Specifies the source datastore; only "running" is supported.
	// Default is "running".
	Source               string   `protobuf:"bytes,3,opt,name=Source,proto3" json:"Source,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetConfigArgs) Reset()         { *m = GetConfigArgs{} }
func (m *GetConfigArgs) String() string { return proto.CompactTextString(m) }
func (*GetConfigArgs) ProtoMessage()    {}
func (*GetConfigArgs) Descriptor() ([]byte, []int) {
	return fileDescriptor_218c58c19b2b3115, []int{0}
}

func (m *GetConfigArgs) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetConfigArgs.Unmarshal(m, b)
}
func (m *GetConfigArgs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetConfigArgs.Marshal(b, m, deterministic)
}
func (m *GetConfigArgs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetConfigArgs.Merge(m, src)
}
func (m *GetConfigArgs) XXX_Size() int {
	return xxx_messageInfo_GetConfigArgs.Size(m)
}
func (m *GetConfigArgs) XXX_DiscardUnknown() {
	xxx_messageInfo_GetConfigArgs.DiscardUnknown(m)
}

var xxx_messageInfo_GetConfigArgs proto.InternalMessageInfo

func (m *GetConfigArgs) GetYangPath() string {
	if m != nil {
		return m.YangPath
	}
	return ""
}

func (m *GetConfigArgs) GetReqID() int64 {
	if m != nil {
		return m.ReqID
	}
	return 0
}

func (m *GetConfigArgs) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

type GetConfigReply struct {
	// The request ID specified in the request.
	ReqID int64 `protobuf:"varint,1,opt,name=ReqID,proto3" json:"ReqID,omitempty"`
	// JSON-encoded YANG data that was retrieved
	YangData string `protobuf:"bytes,2,opt,name=YangData,proto3" json:"YangData,omitempty"`
	// JSON-encoded error information when request fails
	Errors               string   `protobuf:"bytes,3,opt,name=Errors,proto3" json:"Errors,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetConfigReply) Reset()         { *m = GetConfigReply{} }
func (m *GetConfigReply) String() string { return proto.CompactTextString(m) }
func (*GetConfigReply) ProtoMessage()    {}
func (*GetConfigReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_218c58c19b2b3115, []int{1}
}

func (m *GetConfigReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetConfigReply.Unmarshal(m, b)
}
func (m *GetConfigReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetConfigReply.Marshal(b, m, deterministic)
}
func (m *GetConfigReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetConfigReply.Merge(m, src)
}
func (m *GetConfigReply) XXX_Size() int {
	return xxx_messageInfo_GetConfigReply.Size(m)
}
func (m *GetConfigReply) XXX_DiscardUnknown() {
	xxx_messageInfo_GetConfigReply.DiscardUnknown(m)
}

var xxx_messageInfo_GetConfigReply proto.InternalMessageInfo

func (m *GetConfigReply) GetReqID() int64 {
	if m != nil {
		return m.ReqID
	}
	return 0
}

func (m *GetConfigReply) GetYangData() string {
	if m != nil {
		return m.YangData
	}
	return ""
}

func (m *GetConfigReply) GetErrors() string {
	if m != nil {
		return m.Errors
	}
	return ""
}

type GetOperArgs struct {
	// JSON-encoded YANG data to be retrieved
	YangPath string `protobuf:"bytes,1,opt,name=YangPath,proto3" json:"YangPath,omitempty"`
	// (Optional) Specifies the request ID.  Default value is 0.
	ReqID                int64    `protobuf:"varint,2,opt,name=ReqID,proto3" json:"ReqID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetOperArgs) Reset()         { *m = GetOperArgs{} }
func (m *GetOperArgs) String() string { return proto.CompactTextString(m) }
func (*GetOperArgs) ProtoMessage()    {}
func (*GetOperArgs) Descriptor() ([]byte, []int) {
	return fileDescriptor_218c58c19b2b3115, []int{2}
}

func (m *GetOperArgs) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetOperArgs.Unmarshal(m, b)
}
func (m *GetOperArgs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetOperArgs.Marshal(b, m, deterministic)
}
func (m *GetOperArgs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetOperArgs.Merge(m, src)
}
func (m *GetOperArgs) XXX_Size() int {
	return xxx_messageInfo_GetOperArgs.Size(m)
}
func (m *GetOperArgs) XXX_DiscardUnknown() {
	xxx_messageInfo_GetOperArgs.DiscardUnknown(m)
}

var xxx_messageInfo_GetOperArgs proto.InternalMessageInfo

func (m *GetOperArgs) GetYangPath() string {
	if m != nil {
		return m.YangPath
	}
	return ""
}

func (m *GetOperArgs) GetReqID() int64 {
	if m != nil {
		return m.ReqID
	}
	return 0
}

type GetOperReply struct {
	// The request ID specified in the request.
	ReqID int64 `protobuf:"varint,1,opt,name=ReqID,proto3" json:"ReqID,omitempty"`
	// JSON-encoded YANG data that was retrieved
	YangData string `protobuf:"bytes,2,opt,name=YangData,proto3" json:"YangData,omitempty"`
	// JSON-encoded error information when request fails
	Errors               string   `protobuf:"bytes,3,opt,name=Errors,proto3" json:"Errors,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetOperReply) Reset()         { *m = GetOperReply{} }
func (m *GetOperReply) String() string { return proto.CompactTextString(m) }
func (*GetOperReply) ProtoMessage()    {}
func (*GetOperReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_218c58c19b2b3115, []int{3}
}

func (m *GetOperReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetOperReply.Unmarshal(m, b)
}
func (m *GetOperReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetOperReply.Marshal(b, m, deterministic)
}
func (m *GetOperReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetOperReply.Merge(m, src)
}
func (m *GetOperReply) XXX_Size() int {
	return xxx_messageInfo_GetOperReply.Size(m)
}
func (m *GetOperReply) XXX_DiscardUnknown() {
	xxx_messageInfo_GetOperReply.DiscardUnknown(m)
}

var xxx_messageInfo_GetOperReply proto.InternalMessageInfo

func (m *GetOperReply) GetReqID() int64 {
	if m != nil {
		return m.ReqID
	}
	return 0
}

func (m *GetOperReply) GetYangData() string {
	if m != nil {
		return m.YangData
	}
	return ""
}

func (m *GetOperReply) GetErrors() string {
	if m != nil {
		return m.Errors
	}
	return ""
}

type GetArgs struct {
	// JSON-encoded YANG data to be retrieved
	YangPath string `protobuf:"bytes,1,opt,name=YangPath,proto3" json:"YangPath,omitempty"`
	// (Optional) Specifies the request ID.  Default value is 0.
	ReqID                int64    `protobuf:"varint,2,opt,name=ReqID,proto3" json:"ReqID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetArgs) Reset()         { *m = GetArgs{} }
func (m *GetArgs) String() string { return proto.CompactTextString(m) }
func (*GetArgs) ProtoMessage()    {}
func (*GetArgs) Descriptor() ([]byte, []int) {
	return fileDescriptor_218c58c19b2b3115, []int{4}
}

func (m *GetArgs) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetArgs.Unmarshal(m, b)
}
func (m *GetArgs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetArgs.Marshal(b, m, deterministic)
}
func (m *GetArgs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetArgs.Merge(m, src)
}
func (m *GetArgs) XXX_Size() int {
	return xxx_messageInfo_GetArgs.Size(m)
}
func (m *GetArgs) XXX_DiscardUnknown() {
	xxx_messageInfo_GetArgs.DiscardUnknown(m)
}

var xxx_messageInfo_GetArgs proto.InternalMessageInfo

func (m *GetArgs) GetYangPath() string {
	if m != nil {
		return m.YangPath
	}
	return ""
}

func (m *GetArgs) GetReqID() int64 {
	if m != nil {
		return m.ReqID
	}
	return 0
}

type GetReply struct {
	// The request ID specified in the request.
	ReqID int64 `protobuf:"varint,1,opt,name=ReqID,proto3" json:"ReqID,omitempty"`
	// JSON-encoded YANG data that was retrieved
	YangData string `protobuf:"bytes,2,opt,name=YangData,proto3" json:"YangData,omitempty"`
	// JSON-encoded error information when request fails
	Errors               string   `protobuf:"bytes,3,opt,name=Errors,proto3" json:"Errors,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetReply) Reset()         { *m = GetReply{} }
func (m *GetReply) String() string { return proto.CompactTextString(m) }
func (*GetReply) ProtoMessage()    {}
func (*GetReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_218c58c19b2b3115, []int{5}
}

func (m *GetReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetReply.Unmarshal(m, b)
}
func (m *GetReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetReply.Marshal(b, m, deterministic)
}
func (m *GetReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetReply.Merge(m, src)
}
func (m *GetReply) XXX_Size() int {
	return xxx_messageInfo_GetReply.Size(m)
}
func (m *GetReply) XXX_DiscardUnknown() {
	xxx_messageInfo_GetReply.DiscardUnknown(m)
}

var xxx_messageInfo_GetReply proto.InternalMessageInfo

func (m *GetReply) GetReqID() int64 {
	if m != nil {
		return m.ReqID
	}
	return 0
}

func (m *GetReply) GetYangData() string {
	if m != nil {
		return m.YangData
	}
	return ""
}

func (m *GetReply) GetErrors() string {
	if m != nil {
		return m.Errors
	}
	return ""
}

type EditConfigArgs struct {
	// JSON-encoded YANG data to be edited
	YangPath string `protobuf:"bytes,1,opt,name=YangPath,proto3" json:"YangPath,omitempty"`
	// Specifies the operation to perform on teh configuration datastore with
	// the YangPath data.  Possible values are:
	//   create
	//   merge
	//   replace
	//   delete
	//   remove
	// If not specified, default value is "merge".
	Operation string `protobuf:"bytes,2,opt,name=Operation,proto3" json:"Operation,omitempty"`
	// A unique session ID acquired from a call to StartSession().
	// For stateless operation, this value should be set to 0.
	SessionID int64 `protobuf:"varint,3,opt,name=SessionID,proto3" json:"SessionID,omitempty"`
	// (Optional) Specifies the request ID.  Default value is 0.
	ReqID int64 `protobuf:"varint,4,opt,name=ReqID,proto3" json:"ReqID,omitempty"`
	// (Optional) Specifies the target datastore; only "running" is supported.
	// Default is "running".
	Target string `protobuf:"bytes,5,opt,name=Target,proto3" json:"Target,omitempty"`
	// Specifies the default operation on the given object while traversing
	// the configuration tree.
	// The following operations are possible:
	//   merge:     merges the configuration data with the target datastore;
	//              this is the default.
	//   replace:   replaces the configuration data with the target datastore.
	//   none:      target datastore is unaffected during the traversal until
	//              the specified object is reached.
	DefOp string `protobuf:"bytes,6,opt,name=DefOp,proto3" json:"DefOp,omitempty"`
	// Specifies the action to be performed in the event of an error during
	// configuration.  Possible values are:
	//   stop
	//   roll-back
	//   continue
	// Default is "roll-back".
	ErrorOp              string   `protobuf:"bytes,7,opt,name=ErrorOp,proto3" json:"ErrorOp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EditConfigArgs) Reset()         { *m = EditConfigArgs{} }
func (m *EditConfigArgs) String() string { return proto.CompactTextString(m) }
func (*EditConfigArgs) ProtoMessage()    {}
func (*EditConfigArgs) Descriptor() ([]byte, []int) {
	return fileDescriptor_218c58c19b2b3115, []int{6}
}

func (m *EditConfigArgs) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EditConfigArgs.Unmarshal(m, b)
}
func (m *EditConfigArgs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EditConfigArgs.Marshal(b, m, deterministic)
}
func (m *EditConfigArgs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EditConfigArgs.Merge(m, src)
}
func (m *EditConfigArgs) XXX_Size() int {
	return xxx_messageInfo_EditConfigArgs.Size(m)
}
func (m *EditConfigArgs) XXX_DiscardUnknown() {
	xxx_messageInfo_EditConfigArgs.DiscardUnknown(m)
}

var xxx_messageInfo_EditConfigArgs proto.InternalMessageInfo

func (m *EditConfigArgs) GetYangPath() string {
	if m != nil {
		return m.YangPath
	}
	return ""
}

func (m *EditConfigArgs) GetOperation() string {
	if m != nil {
		return m.Operation
	}
	return ""
}

func (m *EditConfigArgs) GetSessionID() int64 {
	if m != nil {
		return m.SessionID
	}
	return 0
}

func (m *EditConfigArgs) GetReqID() int64 {
	if m != nil {
		return m.ReqID
	}
	return 0
}

func (m *EditConfigArgs) GetTarget() string {
	if m != nil {
		return m.Target
	}
	return ""
}

func (m *EditConfigArgs) GetDefOp() string {
	if m != nil {
		return m.DefOp
	}
	return ""
}

func (m *EditConfigArgs) GetErrorOp() string {
	if m != nil {
		return m.ErrorOp
	}
	return ""
}

type EditConfigReply struct {
	// The request ID specified in the request.
	ReqID int64 `protobuf:"varint,1,opt,name=ReqID,proto3" json:"ReqID,omitempty"`
	// If EditConfig is successful, YangData contains a JSON-encoded "ok" response.
	YangData string `protobuf:"bytes,2,opt,name=YangData,proto3" json:"YangData,omitempty"`
	// JSON-encoded error information when request fails
	Errors               string   `protobuf:"bytes,3,opt,name=Errors,proto3" json:"Errors,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EditConfigReply) Reset()         { *m = EditConfigReply{} }
func (m *EditConfigReply) String() string { return proto.CompactTextString(m) }
func (*EditConfigReply) ProtoMessage()    {}
func (*EditConfigReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_218c58c19b2b3115, []int{7}
}

func (m *EditConfigReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EditConfigReply.Unmarshal(m, b)
}
func (m *EditConfigReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EditConfigReply.Marshal(b, m, deterministic)
}
func (m *EditConfigReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EditConfigReply.Merge(m, src)
}
func (m *EditConfigReply) XXX_Size() int {
	return xxx_messageInfo_EditConfigReply.Size(m)
}
func (m *EditConfigReply) XXX_DiscardUnknown() {
	xxx_messageInfo_EditConfigReply.DiscardUnknown(m)
}

var xxx_messageInfo_EditConfigReply proto.InternalMessageInfo

func (m *EditConfigReply) GetReqID() int64 {
	if m != nil {
		return m.ReqID
	}
	return 0
}

func (m *EditConfigReply) GetYangData() string {
	if m != nil {
		return m.YangData
	}
	return ""
}

func (m *EditConfigReply) GetErrors() string {
	if m != nil {
		return m.Errors
	}
	return ""
}

type DeleteConfigArgs struct {
	// A unique session ID acquired from a call to StartSession().
	// For stateless operation, this value should be set to 0.
	SessionID int64 `protobuf:"varint,1,opt,name=SessionID,proto3" json:"SessionID,omitempty"`
	// (Optional) Specifies the request ID.  Default value is 0.
	ReqID int64 `protobuf:"varint,2,opt,name=ReqID,proto3" json:"ReqID,omitempty"`
	// (Optional) Specifies the target datastore; only "running" is supported.
	// Default is "running".
	Target               string   `protobuf:"bytes,3,opt,name=Target,proto3" json:"Target,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteConfigArgs) Reset()         { *m = DeleteConfigArgs{} }
func (m *DeleteConfigArgs) String() string { return proto.CompactTextString(m) }
func (*DeleteConfigArgs) ProtoMessage()    {}
func (*DeleteConfigArgs) Descriptor() ([]byte, []int) {
	return fileDescriptor_218c58c19b2b3115, []int{8}
}

func (m *DeleteConfigArgs) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteConfigArgs.Unmarshal(m, b)
}
func (m *DeleteConfigArgs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteConfigArgs.Marshal(b, m, deterministic)
}
func (m *DeleteConfigArgs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteConfigArgs.Merge(m, src)
}
func (m *DeleteConfigArgs) XXX_Size() int {
	return xxx_messageInfo_DeleteConfigArgs.Size(m)
}
func (m *DeleteConfigArgs) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteConfigArgs.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteConfigArgs proto.InternalMessageInfo

func (m *DeleteConfigArgs) GetSessionID() int64 {
	if m != nil {
		return m.SessionID
	}
	return 0
}

func (m *DeleteConfigArgs) GetReqID() int64 {
	if m != nil {
		return m.ReqID
	}
	return 0
}

func (m *DeleteConfigArgs) GetTarget() string {
	if m != nil {
		return m.Target
	}
	return ""
}

type DeleteConfigReply struct {
	// The request ID specified in the request.
	ReqID int64 `protobuf:"varint,1,opt,name=ReqID,proto3" json:"ReqID,omitempty"`
	// If DeleteConfig is successful, YangData contains a JSON-encoded "ok" response.
	YangData string `protobuf:"bytes,2,opt,name=YangData,proto3" json:"YangData,omitempty"`
	// JSON-encoded error information when request fails
	Errors               string   `protobuf:"bytes,3,opt,name=Errors,proto3" json:"Errors,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteConfigReply) Reset()         { *m = DeleteConfigReply{} }
func (m *DeleteConfigReply) String() string { return proto.CompactTextString(m) }
func (*DeleteConfigReply) ProtoMessage()    {}
func (*DeleteConfigReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_218c58c19b2b3115, []int{9}
}

func (m *DeleteConfigReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteConfigReply.Unmarshal(m, b)
}
func (m *DeleteConfigReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteConfigReply.Marshal(b, m, deterministic)
}
func (m *DeleteConfigReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteConfigReply.Merge(m, src)
}
func (m *DeleteConfigReply) XXX_Size() int {
	return xxx_messageInfo_DeleteConfigReply.Size(m)
}
func (m *DeleteConfigReply) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteConfigReply.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteConfigReply proto.InternalMessageInfo

func (m *DeleteConfigReply) GetReqID() int64 {
	if m != nil {
		return m.ReqID
	}
	return 0
}

func (m *DeleteConfigReply) GetYangData() string {
	if m != nil {
		return m.YangData
	}
	return ""
}

func (m *DeleteConfigReply) GetErrors() string {
	if m != nil {
		return m.Errors
	}
	return ""
}

type CopyConfigArgs struct {
	// A unique session ID acquired from a call to StartSession().
	// For stateless operation, this value should be set to 0.
	SessionID int64 `protobuf:"varint,1,opt,name=SessionID,proto3" json:"SessionID,omitempty"`
	// (Optional) Specifies the request ID.  Default value is 0.
	ReqID int64 `protobuf:"varint,2,opt,name=ReqID,proto3" json:"ReqID,omitempty"`
	// (Optional) Specifies the source datastore; only "running" is supported.
	// Default is "running".
	Source string `protobuf:"bytes,3,opt,name=Source,proto3" json:"Source,omitempty"`
	// (Optional) Specifies the target datastore; only "running" is supported.
	// Default is "running".
	Target               string   `protobuf:"bytes,4,opt,name=Target,proto3" json:"Target,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CopyConfigArgs) Reset()         { *m = CopyConfigArgs{} }
func (m *CopyConfigArgs) String() string { return proto.CompactTextString(m) }
func (*CopyConfigArgs) ProtoMessage()    {}
func (*CopyConfigArgs) Descriptor() ([]byte, []int) {
	return fileDescriptor_218c58c19b2b3115, []int{10}
}

func (m *CopyConfigArgs) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CopyConfigArgs.Unmarshal(m, b)
}
func (m *CopyConfigArgs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CopyConfigArgs.Marshal(b, m, deterministic)
}
func (m *CopyConfigArgs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CopyConfigArgs.Merge(m, src)
}
func (m *CopyConfigArgs) XXX_Size() int {
	return xxx_messageInfo_CopyConfigArgs.Size(m)
}
func (m *CopyConfigArgs) XXX_DiscardUnknown() {
	xxx_messageInfo_CopyConfigArgs.DiscardUnknown(m)
}

var xxx_messageInfo_CopyConfigArgs proto.InternalMessageInfo

func (m *CopyConfigArgs) GetSessionID() int64 {
	if m != nil {
		return m.SessionID
	}
	return 0
}

func (m *CopyConfigArgs) GetReqID() int64 {
	if m != nil {
		return m.ReqID
	}
	return 0
}

func (m *CopyConfigArgs) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *CopyConfigArgs) GetTarget() string {
	if m != nil {
		return m.Target
	}
	return ""
}

type CopyConfigReply struct {
	// The request ID specified in the request.
	ReqID int64 `protobuf:"varint,1,opt,name=ReqID,proto3" json:"ReqID,omitempty"`
	// If CopyConfig is successful, YangData contains a JSON-encoded "ok" response.
	YangData string `protobuf:"bytes,2,opt,name=YangData,proto3" json:"YangData,omitempty"`
	// JSON-encoded error information when request fails
	Errors               string   `protobuf:"bytes,3,opt,name=Errors,proto3" json:"Errors,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CopyConfigReply) Reset()         { *m = CopyConfigReply{} }
func (m *CopyConfigReply) String() string { return proto.CompactTextString(m) }
func (*CopyConfigReply) ProtoMessage()    {}
func (*CopyConfigReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_218c58c19b2b3115, []int{11}
}

func (m *CopyConfigReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CopyConfigReply.Unmarshal(m, b)
}
func (m *CopyConfigReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CopyConfigReply.Marshal(b, m, deterministic)
}
func (m *CopyConfigReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CopyConfigReply.Merge(m, src)
}
func (m *CopyConfigReply) XXX_Size() int {
	return xxx_messageInfo_CopyConfigReply.Size(m)
}
func (m *CopyConfigReply) XXX_DiscardUnknown() {
	xxx_messageInfo_CopyConfigReply.DiscardUnknown(m)
}

var xxx_messageInfo_CopyConfigReply proto.InternalMessageInfo

func (m *CopyConfigReply) GetReqID() int64 {
	if m != nil {
		return m.ReqID
	}
	return 0
}

func (m *CopyConfigReply) GetYangData() string {
	if m != nil {
		return m.YangData
	}
	return ""
}

func (m *CopyConfigReply) GetErrors() string {
	if m != nil {
		return m.Errors
	}
	return ""
}

type LockArgs struct {
	// A unique session ID acquired from a call to StartSession().
	SessionID int64 `protobuf:"varint,1,opt,name=SessionID,proto3" json:"SessionID,omitempty"`
	// (Optional) Specifies the request ID.  Default value is 0.
	ReqID int64 `protobuf:"varint,2,opt,name=ReqID,proto3" json:"ReqID,omitempty"`
	// (Optional) Specifies the target datastore; only "running" is supported.
	// Default is "running".
	Target               string   `protobuf:"bytes,3,opt,name=Target,proto3" json:"Target,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LockArgs) Reset()         { *m = LockArgs{} }
func (m *LockArgs) String() string { return proto.CompactTextString(m) }
func (*LockArgs) ProtoMessage()    {}
func (*LockArgs) Descriptor() ([]byte, []int) {
	return fileDescriptor_218c58c19b2b3115, []int{12}
}

func (m *LockArgs) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LockArgs.Unmarshal(m, b)
}
func (m *LockArgs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LockArgs.Marshal(b, m, deterministic)
}
func (m *LockArgs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LockArgs.Merge(m, src)
}
func (m *LockArgs) XXX_Size() int {
	return xxx_messageInfo_LockArgs.Size(m)
}
func (m *LockArgs) XXX_DiscardUnknown() {
	xxx_messageInfo_LockArgs.DiscardUnknown(m)
}

var xxx_messageInfo_LockArgs proto.InternalMessageInfo

func (m *LockArgs) GetSessionID() int64 {
	if m != nil {
		return m.SessionID
	}
	return 0
}

func (m *LockArgs) GetReqID() int64 {
	if m != nil {
		return m.ReqID
	}
	return 0
}

func (m *LockArgs) GetTarget() string {
	if m != nil {
		return m.Target
	}
	return ""
}

type LockReply struct {
	// The request ID specified in the request.
	ReqID int64 `protobuf:"varint,1,opt,name=ReqID,proto3" json:"ReqID,omitempty"`
	// If Lock is successful, YangData contains a JSON-encoded "ok" response.
	YangData string `protobuf:"bytes,2,opt,name=YangData,proto3" json:"YangData,omitempty"`
	// JSON-encoded error information when request fails
	Errors               string   `protobuf:"bytes,3,opt,name=Errors,proto3" json:"Errors,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LockReply) Reset()         { *m = LockReply{} }
func (m *LockReply) String() string { return proto.CompactTextString(m) }
func (*LockReply) ProtoMessage()    {}
func (*LockReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_218c58c19b2b3115, []int{13}
}

func (m *LockReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LockReply.Unmarshal(m, b)
}
func (m *LockReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LockReply.Marshal(b, m, deterministic)
}
func (m *LockReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LockReply.Merge(m, src)
}
func (m *LockReply) XXX_Size() int {
	return xxx_messageInfo_LockReply.Size(m)
}
func (m *LockReply) XXX_DiscardUnknown() {
	xxx_messageInfo_LockReply.DiscardUnknown(m)
}

var xxx_messageInfo_LockReply proto.InternalMessageInfo

func (m *LockReply) GetReqID() int64 {
	if m != nil {
		return m.ReqID
	}
	return 0
}

func (m *LockReply) GetYangData() string {
	if m != nil {
		return m.YangData
	}
	return ""
}

func (m *LockReply) GetErrors() string {
	if m != nil {
		return m.Errors
	}
	return ""
}

type UnLockArgs struct {
	// A unique session ID acquired from a call to StartSession().
	SessionID int64 `protobuf:"varint,1,opt,name=SessionID,proto3" json:"SessionID,omitempty"`
	// (Optional) Specifies the request ID.  Default value is 0.
	ReqID int64 `protobuf:"varint,2,opt,name=ReqID,proto3" json:"ReqID,omitempty"`
	// (Optional) Specifies the target datastore; only "running" is supported.
	// Default is "running".
	Target               string   `protobuf:"bytes,3,opt,name=Target,proto3" json:"Target,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UnLockArgs) Reset()         { *m = UnLockArgs{} }
func (m *UnLockArgs) String() string { return proto.CompactTextString(m) }
func (*UnLockArgs) ProtoMessage()    {}
func (*UnLockArgs) Descriptor() ([]byte, []int) {
	return fileDescriptor_218c58c19b2b3115, []int{14}
}

func (m *UnLockArgs) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UnLockArgs.Unmarshal(m, b)
}
func (m *UnLockArgs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UnLockArgs.Marshal(b, m, deterministic)
}
func (m *UnLockArgs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnLockArgs.Merge(m, src)
}
func (m *UnLockArgs) XXX_Size() int {
	return xxx_messageInfo_UnLockArgs.Size(m)
}
func (m *UnLockArgs) XXX_DiscardUnknown() {
	xxx_messageInfo_UnLockArgs.DiscardUnknown(m)
}

var xxx_messageInfo_UnLockArgs proto.InternalMessageInfo

func (m *UnLockArgs) GetSessionID() int64 {
	if m != nil {
		return m.SessionID
	}
	return 0
}

func (m *UnLockArgs) GetReqID() int64 {
	if m != nil {
		return m.ReqID
	}
	return 0
}

func (m *UnLockArgs) GetTarget() string {
	if m != nil {
		return m.Target
	}
	return ""
}

type UnLockReply struct {
	// The request ID specified in the request.
	ReqID int64 `protobuf:"varint,1,opt,name=ReqID,proto3" json:"ReqID,omitempty"`
	// If UnLock is successful, YangData contains a JSON-encoded "ok" response.
	YangData string `protobuf:"bytes,2,opt,name=YangData,proto3" json:"YangData,omitempty"`
	// JSON-encoded error information when request fails
	Errors               string   `protobuf:"bytes,3,opt,name=Errors,proto3" json:"Errors,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UnLockReply) Reset()         { *m = UnLockReply{} }
func (m *UnLockReply) String() string { return proto.CompactTextString(m) }
func (*UnLockReply) ProtoMessage()    {}
func (*UnLockReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_218c58c19b2b3115, []int{15}
}

func (m *UnLockReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UnLockReply.Unmarshal(m, b)
}
func (m *UnLockReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UnLockReply.Marshal(b, m, deterministic)
}
func (m *UnLockReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnLockReply.Merge(m, src)
}
func (m *UnLockReply) XXX_Size() int {
	return xxx_messageInfo_UnLockReply.Size(m)
}
func (m *UnLockReply) XXX_DiscardUnknown() {
	xxx_messageInfo_UnLockReply.DiscardUnknown(m)
}

var xxx_messageInfo_UnLockReply proto.InternalMessageInfo

func (m *UnLockReply) GetReqID() int64 {
	if m != nil {
		return m.ReqID
	}
	return 0
}

func (m *UnLockReply) GetYangData() string {
	if m != nil {
		return m.YangData
	}
	return ""
}

func (m *UnLockReply) GetErrors() string {
	if m != nil {
		return m.Errors
	}
	return ""
}

type SessionArgs struct {
	// (Optional) Specifies the request ID.  Default value is 0.
	ReqID                int64    `protobuf:"varint,1,opt,name=ReqID,proto3" json:"ReqID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SessionArgs) Reset()         { *m = SessionArgs{} }
func (m *SessionArgs) String() string { return proto.CompactTextString(m) }
func (*SessionArgs) ProtoMessage()    {}
func (*SessionArgs) Descriptor() ([]byte, []int) {
	return fileDescriptor_218c58c19b2b3115, []int{16}
}

func (m *SessionArgs) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SessionArgs.Unmarshal(m, b)
}
func (m *SessionArgs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SessionArgs.Marshal(b, m, deterministic)
}
func (m *SessionArgs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SessionArgs.Merge(m, src)
}
func (m *SessionArgs) XXX_Size() int {
	return xxx_messageInfo_SessionArgs.Size(m)
}
func (m *SessionArgs) XXX_DiscardUnknown() {
	xxx_messageInfo_SessionArgs.DiscardUnknown(m)
}

var xxx_messageInfo_SessionArgs proto.InternalMessageInfo

func (m *SessionArgs) GetReqID() int64 {
	if m != nil {
		return m.ReqID
	}
	return 0
}

type SessionReply struct {
	// The request ID specified in the request.
	ReqID     int64 `protobuf:"varint,1,opt,name=ReqID,proto3" json:"ReqID,omitempty"`
	SessionID int64 `protobuf:"varint,2,opt,name=SessionID,proto3" json:"SessionID,omitempty"`
	// JSON-encoded error information when request fails
	Errors               string   `protobuf:"bytes,3,opt,name=Errors,proto3" json:"Errors,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SessionReply) Reset()         { *m = SessionReply{} }
func (m *SessionReply) String() string { return proto.CompactTextString(m) }
func (*SessionReply) ProtoMessage()    {}
func (*SessionReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_218c58c19b2b3115, []int{17}
}

func (m *SessionReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SessionReply.Unmarshal(m, b)
}
func (m *SessionReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SessionReply.Marshal(b, m, deterministic)
}
func (m *SessionReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SessionReply.Merge(m, src)
}
func (m *SessionReply) XXX_Size() int {
	return xxx_messageInfo_SessionReply.Size(m)
}
func (m *SessionReply) XXX_DiscardUnknown() {
	xxx_messageInfo_SessionReply.DiscardUnknown(m)
}

var xxx_messageInfo_SessionReply proto.InternalMessageInfo

func (m *SessionReply) GetReqID() int64 {
	if m != nil {
		return m.ReqID
	}
	return 0
}

func (m *SessionReply) GetSessionID() int64 {
	if m != nil {
		return m.SessionID
	}
	return 0
}

func (m *SessionReply) GetErrors() string {
	if m != nil {
		return m.Errors
	}
	return ""
}

type CloseSessionArgs struct {
	// (Optional) Specifies the request ID.  Default value is 0.
	ReqID int64 `protobuf:"varint,1,opt,name=ReqID,proto3" json:"ReqID,omitempty"`
	// A unique session ID acquired from a call to StartSession().
	SessionID            int64    `protobuf:"varint,2,opt,name=SessionID,proto3" json:"SessionID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CloseSessionArgs) Reset()         { *m = CloseSessionArgs{} }
func (m *CloseSessionArgs) String() string { return proto.CompactTextString(m) }
func (*CloseSessionArgs) ProtoMessage()    {}
func (*CloseSessionArgs) Descriptor() ([]byte, []int) {
	return fileDescriptor_218c58c19b2b3115, []int{18}
}

func (m *CloseSessionArgs) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CloseSessionArgs.Unmarshal(m, b)
}
func (m *CloseSessionArgs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CloseSessionArgs.Marshal(b, m, deterministic)
}
func (m *CloseSessionArgs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CloseSessionArgs.Merge(m, src)
}
func (m *CloseSessionArgs) XXX_Size() int {
	return xxx_messageInfo_CloseSessionArgs.Size(m)
}
func (m *CloseSessionArgs) XXX_DiscardUnknown() {
	xxx_messageInfo_CloseSessionArgs.DiscardUnknown(m)
}

var xxx_messageInfo_CloseSessionArgs proto.InternalMessageInfo

func (m *CloseSessionArgs) GetReqID() int64 {
	if m != nil {
		return m.ReqID
	}
	return 0
}

func (m *CloseSessionArgs) GetSessionID() int64 {
	if m != nil {
		return m.SessionID
	}
	return 0
}

type CloseSessionReply struct {
	// The request ID specified in the request.
	ReqID int64 `protobuf:"varint,1,opt,name=ReqID,proto3" json:"ReqID,omitempty"`
	// If CloseSession is successful, YangData contains a JSON-encoded "ok" response.
	YangData string `protobuf:"bytes,2,opt,name=YangData,proto3" json:"YangData,omitempty"`
	// JSON-encoded error information when request fails
	Errors               string   `protobuf:"bytes,3,opt,name=Errors,proto3" json:"Errors,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CloseSessionReply) Reset()         { *m = CloseSessionReply{} }
func (m *CloseSessionReply) String() string { return proto.CompactTextString(m) }
func (*CloseSessionReply) ProtoMessage()    {}
func (*CloseSessionReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_218c58c19b2b3115, []int{19}
}

func (m *CloseSessionReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CloseSessionReply.Unmarshal(m, b)
}
func (m *CloseSessionReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CloseSessionReply.Marshal(b, m, deterministic)
}
func (m *CloseSessionReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CloseSessionReply.Merge(m, src)
}
func (m *CloseSessionReply) XXX_Size() int {
	return xxx_messageInfo_CloseSessionReply.Size(m)
}
func (m *CloseSessionReply) XXX_DiscardUnknown() {
	xxx_messageInfo_CloseSessionReply.DiscardUnknown(m)
}

var xxx_messageInfo_CloseSessionReply proto.InternalMessageInfo

func (m *CloseSessionReply) GetReqID() int64 {
	if m != nil {
		return m.ReqID
	}
	return 0
}

func (m *CloseSessionReply) GetYangData() string {
	if m != nil {
		return m.YangData
	}
	return ""
}

func (m *CloseSessionReply) GetErrors() string {
	if m != nil {
		return m.Errors
	}
	return ""
}

type KillArgs struct {
	// A unique session ID acquired from a call to StartSession().
	SessionID       int64 `protobuf:"varint,1,opt,name=SessionID,proto3" json:"SessionID,omitempty"`
	SessionIDToKill int64 `protobuf:"varint,2,opt,name=SessionIDToKill,proto3" json:"SessionIDToKill,omitempty"`
	// (Optional) Specifies the request ID.  Default value is 0.
	ReqID                int64    `protobuf:"varint,3,opt,name=ReqID,proto3" json:"ReqID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *KillArgs) Reset()         { *m = KillArgs{} }
func (m *KillArgs) String() string { return proto.CompactTextString(m) }
func (*KillArgs) ProtoMessage()    {}
func (*KillArgs) Descriptor() ([]byte, []int) {
	return fileDescriptor_218c58c19b2b3115, []int{20}
}

func (m *KillArgs) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_KillArgs.Unmarshal(m, b)
}
func (m *KillArgs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_KillArgs.Marshal(b, m, deterministic)
}
func (m *KillArgs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KillArgs.Merge(m, src)
}
func (m *KillArgs) XXX_Size() int {
	return xxx_messageInfo_KillArgs.Size(m)
}
func (m *KillArgs) XXX_DiscardUnknown() {
	xxx_messageInfo_KillArgs.DiscardUnknown(m)
}

var xxx_messageInfo_KillArgs proto.InternalMessageInfo

func (m *KillArgs) GetSessionID() int64 {
	if m != nil {
		return m.SessionID
	}
	return 0
}

func (m *KillArgs) GetSessionIDToKill() int64 {
	if m != nil {
		return m.SessionIDToKill
	}
	return 0
}

func (m *KillArgs) GetReqID() int64 {
	if m != nil {
		return m.ReqID
	}
	return 0
}

type KillReply struct {
	// The request ID specified in the request.
	ReqID int64 `protobuf:"varint,1,opt,name=ReqID,proto3" json:"ReqID,omitempty"`
	// If Kill is successful, YangData contains a JSON-encoded "ok" response.
	YangData string `protobuf:"bytes,2,opt,name=YangData,proto3" json:"YangData,omitempty"`
	// JSON-encoded error information when request fails
	Errors               string   `protobuf:"bytes,3,opt,name=Errors,proto3" json:"Errors,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *KillReply) Reset()         { *m = KillReply{} }
func (m *KillReply) String() string { return proto.CompactTextString(m) }
func (*KillReply) ProtoMessage()    {}
func (*KillReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_218c58c19b2b3115, []int{21}
}

func (m *KillReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_KillReply.Unmarshal(m, b)
}
func (m *KillReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_KillReply.Marshal(b, m, deterministic)
}
func (m *KillReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KillReply.Merge(m, src)
}
func (m *KillReply) XXX_Size() int {
	return xxx_messageInfo_KillReply.Size(m)
}
func (m *KillReply) XXX_DiscardUnknown() {
	xxx_messageInfo_KillReply.DiscardUnknown(m)
}

var xxx_messageInfo_KillReply proto.InternalMessageInfo

func (m *KillReply) GetReqID() int64 {
	if m != nil {
		return m.ReqID
	}
	return 0
}

func (m *KillReply) GetYangData() string {
	if m != nil {
		return m.YangData
	}
	return ""
}

func (m *KillReply) GetErrors() string {
	if m != nil {
		return m.Errors
	}
	return ""
}

type ValidateArgs struct {
	// A unique session ID acquired from a call to StartSession().
	SessionID int64 `protobuf:"varint,1,opt,name=SessionID,proto3" json:"SessionID,omitempty"`
	// (Optional) Specifies the request ID.  Default value is 0.
	ReqID                int64    `protobuf:"varint,2,opt,name=ReqID,proto3" json:"ReqID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ValidateArgs) Reset()         { *m = ValidateArgs{} }
func (m *ValidateArgs) String() string { return proto.CompactTextString(m) }
func (*ValidateArgs) ProtoMessage()    {}
func (*ValidateArgs) Descriptor() ([]byte, []int) {
	return fileDescriptor_218c58c19b2b3115, []int{22}
}

func (m *ValidateArgs) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ValidateArgs.Unmarshal(m, b)
}
func (m *ValidateArgs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ValidateArgs.Marshal(b, m, deterministic)
}
func (m *ValidateArgs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidateArgs.Merge(m, src)
}
func (m *ValidateArgs) XXX_Size() int {
	return xxx_messageInfo_ValidateArgs.Size(m)
}
func (m *ValidateArgs) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidateArgs.DiscardUnknown(m)
}

var xxx_messageInfo_ValidateArgs proto.InternalMessageInfo

func (m *ValidateArgs) GetSessionID() int64 {
	if m != nil {
		return m.SessionID
	}
	return 0
}

func (m *ValidateArgs) GetReqID() int64 {
	if m != nil {
		return m.ReqID
	}
	return 0
}

type ValidateReply struct {
	// The request ID specified in the request.
	ReqID int64 `protobuf:"varint,1,opt,name=ReqID,proto3" json:"ReqID,omitempty"`
	// If Validate is successful, YangData contains a JSON-encoded "ok" response.
	YangData string `protobuf:"bytes,2,opt,name=YangData,proto3" json:"YangData,omitempty"`
	// JSON-encoded error information when request fails
	Errors               string   `protobuf:"bytes,3,opt,name=Errors,proto3" json:"Errors,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ValidateReply) Reset()         { *m = ValidateReply{} }
func (m *ValidateReply) String() string { return proto.CompactTextString(m) }
func (*ValidateReply) ProtoMessage()    {}
func (*ValidateReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_218c58c19b2b3115, []int{23}
}

func (m *ValidateReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ValidateReply.Unmarshal(m, b)
}
func (m *ValidateReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ValidateReply.Marshal(b, m, deterministic)
}
func (m *ValidateReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidateReply.Merge(m, src)
}
func (m *ValidateReply) XXX_Size() int {
	return xxx_messageInfo_ValidateReply.Size(m)
}
func (m *ValidateReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidateReply.DiscardUnknown(m)
}

var xxx_messageInfo_ValidateReply proto.InternalMessageInfo

func (m *ValidateReply) GetReqID() int64 {
	if m != nil {
		return m.ReqID
	}
	return 0
}

func (m *ValidateReply) GetYangData() string {
	if m != nil {
		return m.YangData
	}
	return ""
}

func (m *ValidateReply) GetErrors() string {
	if m != nil {
		return m.Errors
	}
	return ""
}

type CommitArgs struct {
	// A unique session ID acquired from a call to StartSession().
	SessionID int64 `protobuf:"varint,1,opt,name=SessionID,proto3" json:"SessionID,omitempty"`
	// (Optional) Specifies the request ID.  Default value is 0.
	ReqID                int64    `protobuf:"varint,2,opt,name=ReqID,proto3" json:"ReqID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CommitArgs) Reset()         { *m = CommitArgs{} }
func (m *CommitArgs) String() string { return proto.CompactTextString(m) }
func (*CommitArgs) ProtoMessage()    {}
func (*CommitArgs) Descriptor() ([]byte, []int) {
	return fileDescriptor_218c58c19b2b3115, []int{24}
}

func (m *CommitArgs) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CommitArgs.Unmarshal(m, b)
}
func (m *CommitArgs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CommitArgs.Marshal(b, m, deterministic)
}
func (m *CommitArgs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommitArgs.Merge(m, src)
}
func (m *CommitArgs) XXX_Size() int {
	return xxx_messageInfo_CommitArgs.Size(m)
}
func (m *CommitArgs) XXX_DiscardUnknown() {
	xxx_messageInfo_CommitArgs.DiscardUnknown(m)
}

var xxx_messageInfo_CommitArgs proto.InternalMessageInfo

func (m *CommitArgs) GetSessionID() int64 {
	if m != nil {
		return m.SessionID
	}
	return 0
}

func (m *CommitArgs) GetReqID() int64 {
	if m != nil {
		return m.ReqID
	}
	return 0
}

type CommitReply struct {
	// (Optional) Specifies the request ID.  Default value is 0.
	ReqID int64 `protobuf:"varint,1,opt,name=ReqID,proto3" json:"ReqID,omitempty"`
	// If Commit is successful, YangData contains a JSON-encoded "ok" response.
	YangData string `protobuf:"bytes,2,opt,name=YangData,proto3" json:"YangData,omitempty"`
	// JSON-encoded error information when request fails
	Errors               string   `protobuf:"bytes,3,opt,name=Errors,proto3" json:"Errors,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CommitReply) Reset()         { *m = CommitReply{} }
func (m *CommitReply) String() string { return proto.CompactTextString(m) }
func (*CommitReply) ProtoMessage()    {}
func (*CommitReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_218c58c19b2b3115, []int{25}
}

func (m *CommitReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CommitReply.Unmarshal(m, b)
}
func (m *CommitReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CommitReply.Marshal(b, m, deterministic)
}
func (m *CommitReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommitReply.Merge(m, src)
}
func (m *CommitReply) XXX_Size() int {
	return xxx_messageInfo_CommitReply.Size(m)
}
func (m *CommitReply) XXX_DiscardUnknown() {
	xxx_messageInfo_CommitReply.DiscardUnknown(m)
}

var xxx_messageInfo_CommitReply proto.InternalMessageInfo

func (m *CommitReply) GetReqID() int64 {
	if m != nil {
		return m.ReqID
	}
	return 0
}

func (m *CommitReply) GetYangData() string {
	if m != nil {
		return m.YangData
	}
	return ""
}

func (m *CommitReply) GetErrors() string {
	if m != nil {
		return m.Errors
	}
	return ""
}

type AbortArgs struct {
	// A unique session ID acquired from a call to StartSession().
	SessionID int64 `protobuf:"varint,1,opt,name=SessionID,proto3" json:"SessionID,omitempty"`
	// (Optional) Specifies the request ID.  Default value is 0.
	ReqID                int64    `protobuf:"varint,2,opt,name=ReqID,proto3" json:"ReqID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AbortArgs) Reset()         { *m = AbortArgs{} }
func (m *AbortArgs) String() string { return proto.CompactTextString(m) }
func (*AbortArgs) ProtoMessage()    {}
func (*AbortArgs) Descriptor() ([]byte, []int) {
	return fileDescriptor_218c58c19b2b3115, []int{26}
}

func (m *AbortArgs) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AbortArgs.Unmarshal(m, b)
}
func (m *AbortArgs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AbortArgs.Marshal(b, m, deterministic)
}
func (m *AbortArgs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AbortArgs.Merge(m, src)
}
func (m *AbortArgs) XXX_Size() int {
	return xxx_messageInfo_AbortArgs.Size(m)
}
func (m *AbortArgs) XXX_DiscardUnknown() {
	xxx_messageInfo_AbortArgs.DiscardUnknown(m)
}

var xxx_messageInfo_AbortArgs proto.InternalMessageInfo

func (m *AbortArgs) GetSessionID() int64 {
	if m != nil {
		return m.SessionID
	}
	return 0
}

func (m *AbortArgs) GetReqID() int64 {
	if m != nil {
		return m.ReqID
	}
	return 0
}

type AbortReply struct {
	// (Optional) Specifies the request ID.  Default value is 0.
	ReqID int64 `protobuf:"varint,1,opt,name=ReqID,proto3" json:"ReqID,omitempty"`
	// If Abort is successful, YangData contains a JSON-encoded "ok" response.
	YangData string `protobuf:"bytes,2,opt,name=YangData,proto3" json:"YangData,omitempty"`
	// JSON-encoded error information when request fails
	Errors               string   `protobuf:"bytes,3,opt,name=Errors,proto3" json:"Errors,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AbortReply) Reset()         { *m = AbortReply{} }
func (m *AbortReply) String() string { return proto.CompactTextString(m) }
func (*AbortReply) ProtoMessage()    {}
func (*AbortReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_218c58c19b2b3115, []int{27}
}

func (m *AbortReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AbortReply.Unmarshal(m, b)
}
func (m *AbortReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AbortReply.Marshal(b, m, deterministic)
}
func (m *AbortReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AbortReply.Merge(m, src)
}
func (m *AbortReply) XXX_Size() int {
	return xxx_messageInfo_AbortReply.Size(m)
}
func (m *AbortReply) XXX_DiscardUnknown() {
	xxx_messageInfo_AbortReply.DiscardUnknown(m)
}

var xxx_messageInfo_AbortReply proto.InternalMessageInfo

func (m *AbortReply) GetReqID() int64 {
	if m != nil {
		return m.ReqID
	}
	return 0
}

func (m *AbortReply) GetYangData() string {
	if m != nil {
		return m.YangData
	}
	return ""
}

func (m *AbortReply) GetErrors() string {
	if m != nil {
		return m.Errors
	}
	return ""
}

func init() {
	proto.RegisterType((*GetConfigArgs)(nil), "NXOSExtensibleManagabilityService.GetConfigArgs")
	proto.RegisterType((*GetConfigReply)(nil), "NXOSExtensibleManagabilityService.GetConfigReply")
	proto.RegisterType((*GetOperArgs)(nil), "NXOSExtensibleManagabilityService.GetOperArgs")
	proto.RegisterType((*GetOperReply)(nil), "NXOSExtensibleManagabilityService.GetOperReply")
	proto.RegisterType((*GetArgs)(nil), "NXOSExtensibleManagabilityService.GetArgs")
	proto.RegisterType((*GetReply)(nil), "NXOSExtensibleManagabilityService.GetReply")
	proto.RegisterType((*EditConfigArgs)(nil), "NXOSExtensibleManagabilityService.EditConfigArgs")
	proto.RegisterType((*EditConfigReply)(nil), "NXOSExtensibleManagabilityService.EditConfigReply")
	proto.RegisterType((*DeleteConfigArgs)(nil), "NXOSExtensibleManagabilityService.DeleteConfigArgs")
	proto.RegisterType((*DeleteConfigReply)(nil), "NXOSExtensibleManagabilityService.DeleteConfigReply")
	proto.RegisterType((*CopyConfigArgs)(nil), "NXOSExtensibleManagabilityService.CopyConfigArgs")
	proto.RegisterType((*CopyConfigReply)(nil), "NXOSExtensibleManagabilityService.CopyConfigReply")
	proto.RegisterType((*LockArgs)(nil), "NXOSExtensibleManagabilityService.LockArgs")
	proto.RegisterType((*LockReply)(nil), "NXOSExtensibleManagabilityService.LockReply")
	proto.RegisterType((*UnLockArgs)(nil), "NXOSExtensibleManagabilityService.UnLockArgs")
	proto.RegisterType((*UnLockReply)(nil), "NXOSExtensibleManagabilityService.UnLockReply")
	proto.RegisterType((*SessionArgs)(nil), "NXOSExtensibleManagabilityService.SessionArgs")
	proto.RegisterType((*SessionReply)(nil), "NXOSExtensibleManagabilityService.SessionReply")
	proto.RegisterType((*CloseSessionArgs)(nil), "NXOSExtensibleManagabilityService.CloseSessionArgs")
	proto.RegisterType((*CloseSessionReply)(nil), "NXOSExtensibleManagabilityService.CloseSessionReply")
	proto.RegisterType((*KillArgs)(nil), "NXOSExtensibleManagabilityService.KillArgs")
	proto.RegisterType((*KillReply)(nil), "NXOSExtensibleManagabilityService.KillReply")
	proto.RegisterType((*ValidateArgs)(nil), "NXOSExtensibleManagabilityService.ValidateArgs")
	proto.RegisterType((*ValidateReply)(nil), "NXOSExtensibleManagabilityService.ValidateReply")
	proto.RegisterType((*CommitArgs)(nil), "NXOSExtensibleManagabilityService.CommitArgs")
	proto.RegisterType((*CommitReply)(nil), "NXOSExtensibleManagabilityService.CommitReply")
	proto.RegisterType((*AbortArgs)(nil), "NXOSExtensibleManagabilityService.AbortArgs")
	proto.RegisterType((*AbortReply)(nil), "NXOSExtensibleManagabilityService.AbortReply")
}

func init() { proto.RegisterFile("nx_grpc.proto", fileDescriptor_218c58c19b2b3115) }

var fileDescriptor_218c58c19b2b3115 = []byte{
	// 785 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x58, 0x5d, 0x6f, 0xd3, 0x30,
	0x14, 0x6d, 0xd6, 0xad, 0x6b, 0x6f, 0xbb, 0x6e, 0x58, 0x08, 0x45, 0x11, 0x0f, 0xc3, 0xbc, 0x4c,
	0xc0, 0xca, 0xd8, 0x78, 0xe3, 0x01, 0x46, 0x3b, 0xaa, 0x89, 0x8f, 0x4e, 0xed, 0xbe, 0x27, 0x40,
	0x69, 0xe7, 0x65, 0x81, 0x2c, 0xce, 0x52, 0x0f, 0x6d, 0xe2, 0x77, 0xf1, 0x17, 0xf8, 0x5d, 0xc8,
	0x4e, 0x52, 0xbb, 0x65, 0x1f, 0x6e, 0x31, 0x8f, 0xd7, 0xf5, 0x3d, 0xe7, 0xdc, 0x6b, 0xe7, 0xfa,
	0xa8, 0x30, 0x17, 0x5e, 0x7e, 0xf5, 0xe2, 0xa8, 0x57, 0x8b, 0x62, 0xca, 0x28, 0x7a, 0xf4, 0x69,
	0xbf, 0xd5, 0xd9, 0xb8, 0x64, 0x24, 0xec, 0xfb, 0xdd, 0x80, 0x7c, 0x74, 0x43, 0xd7, 0x73, 0xbb,
	0x7e, 0xe0, 0xb3, 0xab, 0x0e, 0x89, 0x7f, 0xf8, 0x3d, 0x82, 0x0f, 0x60, 0xae, 0x49, 0x58, 0x9d,
	0x86, 0x27, 0xbe, 0xb7, 0x1e, 0x7b, 0x7d, 0xe4, 0x40, 0xf1, 0xc0, 0x0d, 0xbd, 0x2d, 0x97, 0x9d,
	0xda, 0xd6, 0xa2, 0xb5, 0x54, 0x6a, 0x0f, 0x62, 0x74, 0x1f, 0x66, 0xda, 0xe4, 0x7c, 0xb3, 0x61,
	0x4f, 0x2d, 0x5a, 0x4b, 0xf9, 0x76, 0x12, 0xa0, 0x07, 0x50, 0xe8, 0xd0, 0x8b, 0xb8, 0x47, 0xec,
	0xbc, 0xd8, 0x9f, 0x46, 0xf8, 0x10, 0xaa, 0x03, 0xe8, 0x36, 0x89, 0x82, 0x2b, 0x99, 0x6f, 0xa9,
	0xf9, 0x29, 0x63, 0xc3, 0x65, 0xae, 0x00, 0x4e, 0x19, 0x79, 0xcc, 0xb1, 0x37, 0xe2, 0x98, 0xc6,
	0xfd, 0x0c, 0x3b, 0x89, 0xf0, 0x6b, 0x28, 0x37, 0x09, 0x6b, 0x45, 0x24, 0x9e, 0x4c, 0x34, 0xde,
	0x87, 0x4a, 0x0a, 0x60, 0x5a, 0xda, 0x2b, 0x98, 0x6d, 0x12, 0x36, 0xa1, 0xac, 0x6d, 0x28, 0x36,
	0x09, 0x33, 0x2d, 0xe9, 0xb7, 0x05, 0xd5, 0x8d, 0x63, 0x5f, 0xf7, 0x98, 0x1f, 0x42, 0x89, 0x37,
	0xc6, 0x65, 0x3e, 0x0d, 0x53, 0x0e, 0xb9, 0xc0, 0x7f, 0xed, 0x90, 0x7e, 0xdf, 0xa7, 0xe1, 0x66,
	0x43, 0xf0, 0xe4, 0xdb, 0x72, 0x41, 0x8a, 0x9e, 0x1e, 0xb9, 0x22, 0xdb, 0x6e, 0xec, 0x11, 0x66,
	0xcf, 0x24, 0xc2, 0x92, 0x88, 0xef, 0x6e, 0x90, 0x93, 0x56, 0x64, 0x17, 0xc4, 0x72, 0x12, 0x20,
	0x1b, 0x66, 0x85, 0xf0, 0x56, 0x64, 0xcf, 0x8a, 0xf5, 0x2c, 0xc4, 0x47, 0x30, 0x2f, 0xeb, 0x30,
	0xdd, 0xa5, 0x2f, 0xb0, 0xd0, 0x20, 0x01, 0x61, 0x44, 0x69, 0xd3, 0x50, 0xb1, 0xd6, 0x8d, 0xc5,
	0x4e, 0x5d, 0x5f, 0x6c, 0x5e, 0x2d, 0x16, 0x7f, 0x86, 0x7b, 0x2a, 0xbe, 0x69, 0xf9, 0x0c, 0xaa,
	0x75, 0x1a, 0x5d, 0xfd, 0xbb, 0xf8, 0xeb, 0x3e, 0x66, 0xa5, 0xa8, 0xe9, 0xa1, 0xa2, 0x8e, 0x60,
	0x5e, 0xb2, 0x9a, 0x2e, 0x69, 0x17, 0x8a, 0x1f, 0x68, 0xef, 0xbb, 0xf1, 0x93, 0xd8, 0x81, 0x12,
	0xc7, 0x35, 0x2d, 0x77, 0x1f, 0x60, 0x27, 0xfc, 0x2f, 0x82, 0xf7, 0xa0, 0x9c, 0x20, 0x9b, 0x96,
	0xfc, 0x18, 0xca, 0xa9, 0x26, 0xa1, 0xf9, 0x5a, 0x60, 0x7c, 0x08, 0x95, 0x74, 0xd3, 0x6d, 0xf4,
	0x43, 0xf5, 0x4e, 0x8d, 0xd6, 0x7b, 0x93, 0x80, 0x77, 0xb0, 0x50, 0x0f, 0x68, 0x9f, 0xdc, 0xa9,
	0xe2, 0x76, 0x7c, 0xfe, 0x71, 0xa9, 0x38, 0xa6, 0xfb, 0x74, 0x0a, 0xc5, 0xf7, 0x7e, 0x10, 0x68,
	0x1c, 0xec, 0x12, 0xcc, 0x0f, 0x82, 0x6d, 0xca, 0x93, 0x52, 0xb1, 0xa3, 0xcb, 0x52, 0x5d, 0x5e,
	0x6d, 0xf6, 0x0e, 0x94, 0xf8, 0xaf, 0xa6, 0x0b, 0x78, 0x0b, 0x95, 0x5d, 0x37, 0xf0, 0x8f, 0x5d,
	0x46, 0x26, 0xbd, 0x9d, 0xdc, 0x2b, 0x64, 0x18, 0xa6, 0xe5, 0xbd, 0x01, 0xa8, 0xd3, 0xb3, 0x33,
	0x9f, 0x4d, 0x2c, 0x6e, 0x0f, 0xca, 0x09, 0x82, 0x79, 0xab, 0x51, 0x5a, 0xef, 0xd2, 0x78, 0x72,
	0x65, 0xbb, 0x00, 0x02, 0xc0, 0xb0, 0xb0, 0xd5, 0x5f, 0x15, 0xa8, 0x7a, 0xed, 0xad, 0x7a, 0x32,
	0x7b, 0xf9, 0x03, 0x8d, 0x18, 0x94, 0x06, 0x96, 0x0b, 0xad, 0xd4, 0xee, 0xb4, 0x7f, 0xb5, 0x21,
	0xef, 0xe7, 0xbc, 0x18, 0x27, 0x43, 0x94, 0x83, 0x73, 0x2b, 0x16, 0x0a, 0x85, 0xe3, 0x11, 0x02,
	0x6a, 0x7a, 0x08, 0x99, 0x71, 0x73, 0x9e, 0xeb, 0xef, 0x97, 0x7c, 0x5d, 0xc8, 0x37, 0x09, 0x43,
	0x4f, 0xf4, 0x72, 0x05, 0xcf, 0x53, 0xbd, 0xbd, 0x92, 0xe3, 0x02, 0x40, 0x3a, 0x0d, 0xa4, 0xd3,
	0x98, 0x61, 0x83, 0xe5, 0xac, 0x8e, 0x95, 0x92, 0x12, 0xa3, 0x73, 0xa8, 0x74, 0x98, 0x1b, 0xb3,
	0xf4, 0x4e, 0x69, 0xf5, 0x53, 0x19, 0x9d, 0x5a, 0xfd, 0x54, 0x47, 0x24, 0xce, 0xa1, 0x9f, 0x50,
	0x51, 0x27, 0x27, 0x5a, 0xd3, 0x80, 0x18, 0x1d, 0xd9, 0xce, 0xcb, 0x31, 0x93, 0x32, 0xf2, 0x6f,
	0x50, 0xe6, 0xd3, 0x2e, 0xe3, 0xd6, 0x39, 0xa6, 0x6c, 0x0e, 0x3b, 0xcf, 0x34, 0x37, 0x2b, 0x85,
	0xaa, 0xfe, 0x4b, 0xab, 0xd0, 0x51, 0x43, 0xa8, 0x55, 0xe8, 0x5f, 0x2e, 0x0f, 0xe7, 0xf8, 0x7d,
	0x92, 0x3e, 0x49, 0xeb, 0x3e, 0x0d, 0x9b, 0x39, 0xad, 0xfb, 0x34, 0xe2, 0xc4, 0x70, 0x0e, 0xf5,
	0x60, 0x9a, 0xdb, 0x06, 0xad, 0xc6, 0x66, 0xce, 0x45, 0xab, 0xb1, 0x03, 0x33, 0x82, 0x73, 0xc8,
	0x87, 0x42, 0xe2, 0x4e, 0xd0, 0xb2, 0x46, 0xa6, 0xb4, 0x48, 0x4e, 0x4d, 0x7b, 0xbb, 0x42, 0x95,
	0x4c, 0x79, 0x2d, 0x2a, 0xf9, 0xa4, 0x68, 0x51, 0x29, 0xef, 0x07, 0xce, 0x21, 0x0a, 0xc5, 0xec,
	0xb5, 0x43, 0x3a, 0x9f, 0x95, 0xfa, 0xbc, 0x3a, 0x2b, 0x63, 0x24, 0x64, 0x84, 0x27, 0x30, 0x23,
	0xde, 0x09, 0xa4, 0xd3, 0xff, 0xc1, 0x93, 0xe4, 0x2c, 0xeb, 0xee, 0x4e, 0x79, 0xba, 0x05, 0xf1,
	0xe7, 0xc0, 0xda, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x3c, 0xe6, 0x7f, 0x1d, 0x2d, 0x10, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GRPCConfigOperClient is the client API for GRPCConfigOper service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GRPCConfigOperClient interface {
	// Retrieves the specified YANG configuration data subset from the
	// source datastore
	GetConfig(ctx context.Context, in *GetConfigArgs, opts ...grpc.CallOption) (GRPCConfigOper_GetConfigClient, error)
	// Retrieves the specified YANG operational data from the source datastore
	GetOper(ctx context.Context, in *GetOperArgs, opts ...grpc.CallOption) (GRPCConfigOper_GetOperClient, error)
	// Retrieves the specified YANG configuration and operational data
	// subset from the source datastore
	Get(ctx context.Context, in *GetArgs, opts ...grpc.CallOption) (GRPCConfigOper_GetClient, error)
	// Writes the specified YANG data subset to the target datastore
	EditConfig(ctx context.Context, in *EditConfigArgs, opts ...grpc.CallOption) (*EditConfigReply, error)
	// Starts a new session between the client and server and acquires a
	// unique session ID
	StartSession(ctx context.Context, in *SessionArgs, opts ...grpc.CallOption) (*SessionReply, error)
	// Requests graceful termination of a session
	CloseSession(ctx context.Context, in *CloseSessionArgs, opts ...grpc.CallOption) (*CloseSessionReply, error)
	// Forces the termination of a session
	KillSession(ctx context.Context, in *KillArgs, opts ...grpc.CallOption) (*KillReply, error)
	// Unsupported; reserved for future
	DeleteConfig(ctx context.Context, in *DeleteConfigArgs, opts ...grpc.CallOption) (*DeleteConfigReply, error)
	// Unsupported; reserved for future
	CopyConfig(ctx context.Context, in *CopyConfigArgs, opts ...grpc.CallOption) (*CopyConfigReply, error)
	// Unsupported; reserved for future
	Lock(ctx context.Context, in *LockArgs, opts ...grpc.CallOption) (*LockReply, error)
	// Unsupported; reserved for future
	UnLock(ctx context.Context, in *UnLockArgs, opts ...grpc.CallOption) (*UnLockReply, error)
	// Unsupported; reserved for future
	Commit(ctx context.Context, in *CommitArgs, opts ...grpc.CallOption) (*CommitReply, error)
	// Unsupported; reserved for future
	Validate(ctx context.Context, in *ValidateArgs, opts ...grpc.CallOption) (*ValidateReply, error)
	// Unsupported; reserved for future
	Abort(ctx context.Context, in *AbortArgs, opts ...grpc.CallOption) (*AbortReply, error)
}

type gRPCConfigOperClient struct {
	cc *grpc.ClientConn
}

func NewGRPCConfigOperClient(cc *grpc.ClientConn) GRPCConfigOperClient {
	return &gRPCConfigOperClient{cc}
}

func (c *gRPCConfigOperClient) GetConfig(ctx context.Context, in *GetConfigArgs, opts ...grpc.CallOption) (GRPCConfigOper_GetConfigClient, error) {
	stream, err := c.cc.NewStream(ctx, &_GRPCConfigOper_serviceDesc.Streams[0], "/NXOSExtensibleManagabilityService.gRPCConfigOper/GetConfig", opts...)
	if err != nil {
		return nil, err
	}
	x := &gRPCConfigOperGetConfigClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GRPCConfigOper_GetConfigClient interface {
	Recv() (*GetConfigReply, error)
	grpc.ClientStream
}

type gRPCConfigOperGetConfigClient struct {
	grpc.ClientStream
}

func (x *gRPCConfigOperGetConfigClient) Recv() (*GetConfigReply, error) {
	m := new(GetConfigReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gRPCConfigOperClient) GetOper(ctx context.Context, in *GetOperArgs, opts ...grpc.CallOption) (GRPCConfigOper_GetOperClient, error) {
	stream, err := c.cc.NewStream(ctx, &_GRPCConfigOper_serviceDesc.Streams[1], "/NXOSExtensibleManagabilityService.gRPCConfigOper/GetOper", opts...)
	if err != nil {
		return nil, err
	}
	x := &gRPCConfigOperGetOperClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GRPCConfigOper_GetOperClient interface {
	Recv() (*GetOperReply, error)
	grpc.ClientStream
}

type gRPCConfigOperGetOperClient struct {
	grpc.ClientStream
}

func (x *gRPCConfigOperGetOperClient) Recv() (*GetOperReply, error) {
	m := new(GetOperReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gRPCConfigOperClient) Get(ctx context.Context, in *GetArgs, opts ...grpc.CallOption) (GRPCConfigOper_GetClient, error) {
	stream, err := c.cc.NewStream(ctx, &_GRPCConfigOper_serviceDesc.Streams[2], "/NXOSExtensibleManagabilityService.gRPCConfigOper/Get", opts...)
	if err != nil {
		return nil, err
	}
	x := &gRPCConfigOperGetClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GRPCConfigOper_GetClient interface {
	Recv() (*GetReply, error)
	grpc.ClientStream
}

type gRPCConfigOperGetClient struct {
	grpc.ClientStream
}

func (x *gRPCConfigOperGetClient) Recv() (*GetReply, error) {
	m := new(GetReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gRPCConfigOperClient) EditConfig(ctx context.Context, in *EditConfigArgs, opts ...grpc.CallOption) (*EditConfigReply, error) {
	out := new(EditConfigReply)
	err := c.cc.Invoke(ctx, "/NXOSExtensibleManagabilityService.gRPCConfigOper/EditConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRPCConfigOperClient) StartSession(ctx context.Context, in *SessionArgs, opts ...grpc.CallOption) (*SessionReply, error) {
	out := new(SessionReply)
	err := c.cc.Invoke(ctx, "/NXOSExtensibleManagabilityService.gRPCConfigOper/StartSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRPCConfigOperClient) CloseSession(ctx context.Context, in *CloseSessionArgs, opts ...grpc.CallOption) (*CloseSessionReply, error) {
	out := new(CloseSessionReply)
	err := c.cc.Invoke(ctx, "/NXOSExtensibleManagabilityService.gRPCConfigOper/CloseSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRPCConfigOperClient) KillSession(ctx context.Context, in *KillArgs, opts ...grpc.CallOption) (*KillReply, error) {
	out := new(KillReply)
	err := c.cc.Invoke(ctx, "/NXOSExtensibleManagabilityService.gRPCConfigOper/KillSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRPCConfigOperClient) DeleteConfig(ctx context.Context, in *DeleteConfigArgs, opts ...grpc.CallOption) (*DeleteConfigReply, error) {
	out := new(DeleteConfigReply)
	err := c.cc.Invoke(ctx, "/NXOSExtensibleManagabilityService.gRPCConfigOper/DeleteConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRPCConfigOperClient) CopyConfig(ctx context.Context, in *CopyConfigArgs, opts ...grpc.CallOption) (*CopyConfigReply, error) {
	out := new(CopyConfigReply)
	err := c.cc.Invoke(ctx, "/NXOSExtensibleManagabilityService.gRPCConfigOper/CopyConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRPCConfigOperClient) Lock(ctx context.Context, in *LockArgs, opts ...grpc.CallOption) (*LockReply, error) {
	out := new(LockReply)
	err := c.cc.Invoke(ctx, "/NXOSExtensibleManagabilityService.gRPCConfigOper/Lock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRPCConfigOperClient) UnLock(ctx context.Context, in *UnLockArgs, opts ...grpc.CallOption) (*UnLockReply, error) {
	out := new(UnLockReply)
	err := c.cc.Invoke(ctx, "/NXOSExtensibleManagabilityService.gRPCConfigOper/UnLock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRPCConfigOperClient) Commit(ctx context.Context, in *CommitArgs, opts ...grpc.CallOption) (*CommitReply, error) {
	out := new(CommitReply)
	err := c.cc.Invoke(ctx, "/NXOSExtensibleManagabilityService.gRPCConfigOper/Commit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRPCConfigOperClient) Validate(ctx context.Context, in *ValidateArgs, opts ...grpc.CallOption) (*ValidateReply, error) {
	out := new(ValidateReply)
	err := c.cc.Invoke(ctx, "/NXOSExtensibleManagabilityService.gRPCConfigOper/Validate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRPCConfigOperClient) Abort(ctx context.Context, in *AbortArgs, opts ...grpc.CallOption) (*AbortReply, error) {
	out := new(AbortReply)
	err := c.cc.Invoke(ctx, "/NXOSExtensibleManagabilityService.gRPCConfigOper/Abort", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GRPCConfigOperServer is the server API for GRPCConfigOper service.
type GRPCConfigOperServer interface {
	// Retrieves the specified YANG configuration data subset from the
	// source datastore
	GetConfig(*GetConfigArgs, GRPCConfigOper_GetConfigServer) error
	// Retrieves the specified YANG operational data from the source datastore
	GetOper(*GetOperArgs, GRPCConfigOper_GetOperServer) error
	// Retrieves the specified YANG configuration and operational data
	// subset from the source datastore
	Get(*GetArgs, GRPCConfigOper_GetServer) error
	// Writes the specified YANG data subset to the target datastore
	EditConfig(context.Context, *EditConfigArgs) (*EditConfigReply, error)
	// Starts a new session between the client and server and acquires a
	// unique session ID
	StartSession(context.Context, *SessionArgs) (*SessionReply, error)
	// Requests graceful termination of a session
	CloseSession(context.Context, *CloseSessionArgs) (*CloseSessionReply, error)
	// Forces the termination of a session
	KillSession(context.Context, *KillArgs) (*KillReply, error)
	// Unsupported; reserved for future
	DeleteConfig(context.Context, *DeleteConfigArgs) (*DeleteConfigReply, error)
	// Unsupported; reserved for future
	CopyConfig(context.Context, *CopyConfigArgs) (*CopyConfigReply, error)
	// Unsupported; reserved for future
	Lock(context.Context, *LockArgs) (*LockReply, error)
	// Unsupported; reserved for future
	UnLock(context.Context, *UnLockArgs) (*UnLockReply, error)
	// Unsupported; reserved for future
	Commit(context.Context, *CommitArgs) (*CommitReply, error)
	// Unsupported; reserved for future
	Validate(context.Context, *ValidateArgs) (*ValidateReply, error)
	// Unsupported; reserved for future
	Abort(context.Context, *AbortArgs) (*AbortReply, error)
}

// UnimplementedGRPCConfigOperServer can be embedded to have forward compatible implementations.
type UnimplementedGRPCConfigOperServer struct {
}

func (*UnimplementedGRPCConfigOperServer) GetConfig(req *GetConfigArgs, srv GRPCConfigOper_GetConfigServer) error {
	return status.Errorf(codes.Unimplemented, "method GetConfig not implemented")
}
func (*UnimplementedGRPCConfigOperServer) GetOper(req *GetOperArgs, srv GRPCConfigOper_GetOperServer) error {
	return status.Errorf(codes.Unimplemented, "method GetOper not implemented")
}
func (*UnimplementedGRPCConfigOperServer) Get(req *GetArgs, srv GRPCConfigOper_GetServer) error {
	return status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedGRPCConfigOperServer) EditConfig(ctx context.Context, req *EditConfigArgs) (*EditConfigReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditConfig not implemented")
}
func (*UnimplementedGRPCConfigOperServer) StartSession(ctx context.Context, req *SessionArgs) (*SessionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartSession not implemented")
}
func (*UnimplementedGRPCConfigOperServer) CloseSession(ctx context.Context, req *CloseSessionArgs) (*CloseSessionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseSession not implemented")
}
func (*UnimplementedGRPCConfigOperServer) KillSession(ctx context.Context, req *KillArgs) (*KillReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KillSession not implemented")
}
func (*UnimplementedGRPCConfigOperServer) DeleteConfig(ctx context.Context, req *DeleteConfigArgs) (*DeleteConfigReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteConfig not implemented")
}
func (*UnimplementedGRPCConfigOperServer) CopyConfig(ctx context.Context, req *CopyConfigArgs) (*CopyConfigReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CopyConfig not implemented")
}
func (*UnimplementedGRPCConfigOperServer) Lock(ctx context.Context, req *LockArgs) (*LockReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Lock not implemented")
}
func (*UnimplementedGRPCConfigOperServer) UnLock(ctx context.Context, req *UnLockArgs) (*UnLockReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnLock not implemented")
}
func (*UnimplementedGRPCConfigOperServer) Commit(ctx context.Context, req *CommitArgs) (*CommitReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Commit not implemented")
}
func (*UnimplementedGRPCConfigOperServer) Validate(ctx context.Context, req *ValidateArgs) (*ValidateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Validate not implemented")
}
func (*UnimplementedGRPCConfigOperServer) Abort(ctx context.Context, req *AbortArgs) (*AbortReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Abort not implemented")
}

func RegisterGRPCConfigOperServer(s *grpc.Server, srv GRPCConfigOperServer) {
	s.RegisterService(&_GRPCConfigOper_serviceDesc, srv)
}

func _GRPCConfigOper_GetConfig_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetConfigArgs)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GRPCConfigOperServer).GetConfig(m, &gRPCConfigOperGetConfigServer{stream})
}

type GRPCConfigOper_GetConfigServer interface {
	Send(*GetConfigReply) error
	grpc.ServerStream
}

type gRPCConfigOperGetConfigServer struct {
	grpc.ServerStream
}

func (x *gRPCConfigOperGetConfigServer) Send(m *GetConfigReply) error {
	return x.ServerStream.SendMsg(m)
}

func _GRPCConfigOper_GetOper_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetOperArgs)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GRPCConfigOperServer).GetOper(m, &gRPCConfigOperGetOperServer{stream})
}

type GRPCConfigOper_GetOperServer interface {
	Send(*GetOperReply) error
	grpc.ServerStream
}

type gRPCConfigOperGetOperServer struct {
	grpc.ServerStream
}

func (x *gRPCConfigOperGetOperServer) Send(m *GetOperReply) error {
	return x.ServerStream.SendMsg(m)
}

func _GRPCConfigOper_Get_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetArgs)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GRPCConfigOperServer).Get(m, &gRPCConfigOperGetServer{stream})
}

type GRPCConfigOper_GetServer interface {
	Send(*GetReply) error
	grpc.ServerStream
}

type gRPCConfigOperGetServer struct {
	grpc.ServerStream
}

func (x *gRPCConfigOperGetServer) Send(m *GetReply) error {
	return x.ServerStream.SendMsg(m)
}

func _GRPCConfigOper_EditConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditConfigArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCConfigOperServer).EditConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NXOSExtensibleManagabilityService.gRPCConfigOper/EditConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCConfigOperServer).EditConfig(ctx, req.(*EditConfigArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _GRPCConfigOper_StartSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCConfigOperServer).StartSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NXOSExtensibleManagabilityService.gRPCConfigOper/StartSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCConfigOperServer).StartSession(ctx, req.(*SessionArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _GRPCConfigOper_CloseSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseSessionArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCConfigOperServer).CloseSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NXOSExtensibleManagabilityService.gRPCConfigOper/CloseSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCConfigOperServer).CloseSession(ctx, req.(*CloseSessionArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _GRPCConfigOper_KillSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KillArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCConfigOperServer).KillSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NXOSExtensibleManagabilityService.gRPCConfigOper/KillSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCConfigOperServer).KillSession(ctx, req.(*KillArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _GRPCConfigOper_DeleteConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteConfigArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCConfigOperServer).DeleteConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NXOSExtensibleManagabilityService.gRPCConfigOper/DeleteConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCConfigOperServer).DeleteConfig(ctx, req.(*DeleteConfigArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _GRPCConfigOper_CopyConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CopyConfigArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCConfigOperServer).CopyConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NXOSExtensibleManagabilityService.gRPCConfigOper/CopyConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCConfigOperServer).CopyConfig(ctx, req.(*CopyConfigArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _GRPCConfigOper_Lock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LockArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCConfigOperServer).Lock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NXOSExtensibleManagabilityService.gRPCConfigOper/Lock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCConfigOperServer).Lock(ctx, req.(*LockArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _GRPCConfigOper_UnLock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnLockArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCConfigOperServer).UnLock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NXOSExtensibleManagabilityService.gRPCConfigOper/UnLock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCConfigOperServer).UnLock(ctx, req.(*UnLockArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _GRPCConfigOper_Commit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCConfigOperServer).Commit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NXOSExtensibleManagabilityService.gRPCConfigOper/Commit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCConfigOperServer).Commit(ctx, req.(*CommitArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _GRPCConfigOper_Validate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCConfigOperServer).Validate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NXOSExtensibleManagabilityService.gRPCConfigOper/Validate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCConfigOperServer).Validate(ctx, req.(*ValidateArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _GRPCConfigOper_Abort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AbortArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCConfigOperServer).Abort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NXOSExtensibleManagabilityService.gRPCConfigOper/Abort",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCConfigOperServer).Abort(ctx, req.(*AbortArgs))
	}
	return interceptor(ctx, in, info, handler)
}

var _GRPCConfigOper_serviceDesc = grpc.ServiceDesc{
	ServiceName: "NXOSExtensibleManagabilityService.gRPCConfigOper",
	HandlerType: (*GRPCConfigOperServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EditConfig",
			Handler:    _GRPCConfigOper_EditConfig_Handler,
		},
		{
			MethodName: "StartSession",
			Handler:    _GRPCConfigOper_StartSession_Handler,
		},
		{
			MethodName: "CloseSession",
			Handler:    _GRPCConfigOper_CloseSession_Handler,
		},
		{
			MethodName: "KillSession",
			Handler:    _GRPCConfigOper_KillSession_Handler,
		},
		{
			MethodName: "DeleteConfig",
			Handler:    _GRPCConfigOper_DeleteConfig_Handler,
		},
		{
			MethodName: "CopyConfig",
			Handler:    _GRPCConfigOper_CopyConfig_Handler,
		},
		{
			MethodName: "Lock",
			Handler:    _GRPCConfigOper_Lock_Handler,
		},
		{
			MethodName: "UnLock",
			Handler:    _GRPCConfigOper_UnLock_Handler,
		},
		{
			MethodName: "Commit",
			Handler:    _GRPCConfigOper_Commit_Handler,
		},
		{
			MethodName: "Validate",
			Handler:    _GRPCConfigOper_Validate_Handler,
		},
		{
			MethodName: "Abort",
			Handler:    _GRPCConfigOper_Abort_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetConfig",
			Handler:       _GRPCConfigOper_GetConfig_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetOper",
			Handler:       _GRPCConfigOper_GetOper_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Get",
			Handler:       _GRPCConfigOper_Get_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "nx_grpc.proto",
}
