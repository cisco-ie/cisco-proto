/*
Copyright 2019 Cisco Systems

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: es_acl_edm_ace.proto

package cisco_ios_xr_es_acl_oper_es_acl_active_list_acls_acl_acl_sequence_numbers_acl_sequence_number

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type EsAclEdmAce_KEYS struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	SequenceNumber       uint32   `protobuf:"varint,2,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EsAclEdmAce_KEYS) Reset()         { *m = EsAclEdmAce_KEYS{} }
func (m *EsAclEdmAce_KEYS) String() string { return proto.CompactTextString(m) }
func (*EsAclEdmAce_KEYS) ProtoMessage()    {}
func (*EsAclEdmAce_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_cac6cdf8c0804632, []int{0}
}

func (m *EsAclEdmAce_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EsAclEdmAce_KEYS.Unmarshal(m, b)
}
func (m *EsAclEdmAce_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EsAclEdmAce_KEYS.Marshal(b, m, deterministic)
}
func (m *EsAclEdmAce_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EsAclEdmAce_KEYS.Merge(m, src)
}
func (m *EsAclEdmAce_KEYS) XXX_Size() int {
	return xxx_messageInfo_EsAclEdmAce_KEYS.Size(m)
}
func (m *EsAclEdmAce_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_EsAclEdmAce_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_EsAclEdmAce_KEYS proto.InternalMessageInfo

func (m *EsAclEdmAce_KEYS) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *EsAclEdmAce_KEYS) GetSequenceNumber() uint32 {
	if m != nil {
		return m.SequenceNumber
	}
	return 0
}

type EsAclEdmAce struct {
	AceType                 string   `protobuf:"bytes,50,opt,name=ace_type,json=aceType,proto3" json:"ace_type,omitempty"`
	AceSequenceNumber       uint32   `protobuf:"varint,51,opt,name=ace_sequence_number,json=aceSequenceNumber,proto3" json:"ace_sequence_number,omitempty"`
	Hits                    uint64   `protobuf:"varint,52,opt,name=hits,proto3" json:"hits,omitempty"`
	Grant                   string   `protobuf:"bytes,53,opt,name=grant,proto3" json:"grant,omitempty"`
	SourceAddress           string   `protobuf:"bytes,54,opt,name=source_address,json=sourceAddress,proto3" json:"source_address,omitempty"`
	SourceWildCardBits      string   `protobuf:"bytes,55,opt,name=source_wild_card_bits,json=sourceWildCardBits,proto3" json:"source_wild_card_bits,omitempty"`
	DestinationAddress      string   `protobuf:"bytes,56,opt,name=destination_address,json=destinationAddress,proto3" json:"destination_address,omitempty"`
	DestinationWildCardBits string   `protobuf:"bytes,57,opt,name=destination_wild_card_bits,json=destinationWildCardBits,proto3" json:"destination_wild_card_bits,omitempty"`
	EtherTypeNumber         uint32   `protobuf:"varint,58,opt,name=ether_type_number,json=etherTypeNumber,proto3" json:"ether_type_number,omitempty"`
	Vlan1                   uint32   `protobuf:"varint,59,opt,name=vlan1,proto3" json:"vlan1,omitempty"`
	Vlan2                   uint32   `protobuf:"varint,60,opt,name=vlan2,proto3" json:"vlan2,omitempty"`
	Cos                     uint32   `protobuf:"varint,61,opt,name=cos,proto3" json:"cos,omitempty"`
	Dei                     uint32   `protobuf:"varint,62,opt,name=dei,proto3" json:"dei,omitempty"`
	InnerHeaderVlan1        uint32   `protobuf:"varint,63,opt,name=inner_header_vlan1,json=innerHeaderVlan1,proto3" json:"inner_header_vlan1,omitempty"`
	InnerHeaderVlan2        uint32   `protobuf:"varint,64,opt,name=inner_header_vlan2,json=innerHeaderVlan2,proto3" json:"inner_header_vlan2,omitempty"`
	InnerHeaderCos          uint32   `protobuf:"varint,65,opt,name=inner_header_cos,json=innerHeaderCos,proto3" json:"inner_header_cos,omitempty"`
	InnerHeaderDei          uint32   `protobuf:"varint,66,opt,name=inner_header_dei,json=innerHeaderDei,proto3" json:"inner_header_dei,omitempty"`
	Capture                 bool     `protobuf:"varint,67,opt,name=capture,proto3" json:"capture,omitempty"`
	LogOption               uint32   `protobuf:"varint,68,opt,name=log_option,json=logOption,proto3" json:"log_option,omitempty"`
	Remark                  string   `protobuf:"bytes,69,opt,name=remark,proto3" json:"remark,omitempty"`
	AclName                 string   `protobuf:"bytes,70,opt,name=acl_name,json=aclName,proto3" json:"acl_name,omitempty"`
	SequenceString          string   `protobuf:"bytes,71,opt,name=sequence_string,json=sequenceString,proto3" json:"sequence_string,omitempty"`
	XXX_NoUnkeyedLiteral    struct{} `json:"-"`
	XXX_unrecognized        []byte   `json:"-"`
	XXX_sizecache           int32    `json:"-"`
}

func (m *EsAclEdmAce) Reset()         { *m = EsAclEdmAce{} }
func (m *EsAclEdmAce) String() string { return proto.CompactTextString(m) }
func (*EsAclEdmAce) ProtoMessage()    {}
func (*EsAclEdmAce) Descriptor() ([]byte, []int) {
	return fileDescriptor_cac6cdf8c0804632, []int{1}
}

func (m *EsAclEdmAce) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EsAclEdmAce.Unmarshal(m, b)
}
func (m *EsAclEdmAce) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EsAclEdmAce.Marshal(b, m, deterministic)
}
func (m *EsAclEdmAce) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EsAclEdmAce.Merge(m, src)
}
func (m *EsAclEdmAce) XXX_Size() int {
	return xxx_messageInfo_EsAclEdmAce.Size(m)
}
func (m *EsAclEdmAce) XXX_DiscardUnknown() {
	xxx_messageInfo_EsAclEdmAce.DiscardUnknown(m)
}

var xxx_messageInfo_EsAclEdmAce proto.InternalMessageInfo

func (m *EsAclEdmAce) GetAceType() string {
	if m != nil {
		return m.AceType
	}
	return ""
}

func (m *EsAclEdmAce) GetAceSequenceNumber() uint32 {
	if m != nil {
		return m.AceSequenceNumber
	}
	return 0
}

func (m *EsAclEdmAce) GetHits() uint64 {
	if m != nil {
		return m.Hits
	}
	return 0
}

func (m *EsAclEdmAce) GetGrant() string {
	if m != nil {
		return m.Grant
	}
	return ""
}

func (m *EsAclEdmAce) GetSourceAddress() string {
	if m != nil {
		return m.SourceAddress
	}
	return ""
}

func (m *EsAclEdmAce) GetSourceWildCardBits() string {
	if m != nil {
		return m.SourceWildCardBits
	}
	return ""
}

func (m *EsAclEdmAce) GetDestinationAddress() string {
	if m != nil {
		return m.DestinationAddress
	}
	return ""
}

func (m *EsAclEdmAce) GetDestinationWildCardBits() string {
	if m != nil {
		return m.DestinationWildCardBits
	}
	return ""
}

func (m *EsAclEdmAce) GetEtherTypeNumber() uint32 {
	if m != nil {
		return m.EtherTypeNumber
	}
	return 0
}

func (m *EsAclEdmAce) GetVlan1() uint32 {
	if m != nil {
		return m.Vlan1
	}
	return 0
}

func (m *EsAclEdmAce) GetVlan2() uint32 {
	if m != nil {
		return m.Vlan2
	}
	return 0
}

func (m *EsAclEdmAce) GetCos() uint32 {
	if m != nil {
		return m.Cos
	}
	return 0
}

func (m *EsAclEdmAce) GetDei() uint32 {
	if m != nil {
		return m.Dei
	}
	return 0
}

func (m *EsAclEdmAce) GetInnerHeaderVlan1() uint32 {
	if m != nil {
		return m.InnerHeaderVlan1
	}
	return 0
}

func (m *EsAclEdmAce) GetInnerHeaderVlan2() uint32 {
	if m != nil {
		return m.InnerHeaderVlan2
	}
	return 0
}

func (m *EsAclEdmAce) GetInnerHeaderCos() uint32 {
	if m != nil {
		return m.InnerHeaderCos
	}
	return 0
}

func (m *EsAclEdmAce) GetInnerHeaderDei() uint32 {
	if m != nil {
		return m.InnerHeaderDei
	}
	return 0
}

func (m *EsAclEdmAce) GetCapture() bool {
	if m != nil {
		return m.Capture
	}
	return false
}

func (m *EsAclEdmAce) GetLogOption() uint32 {
	if m != nil {
		return m.LogOption
	}
	return 0
}

func (m *EsAclEdmAce) GetRemark() string {
	if m != nil {
		return m.Remark
	}
	return ""
}

func (m *EsAclEdmAce) GetAclName() string {
	if m != nil {
		return m.AclName
	}
	return ""
}

func (m *EsAclEdmAce) GetSequenceString() string {
	if m != nil {
		return m.SequenceString
	}
	return ""
}

func init() {
	proto.RegisterType((*EsAclEdmAce_KEYS)(nil), "cisco_ios_xr_es_acl_oper.es_acl.active.list.acls.acl.acl_sequence_numbers.acl_sequence_number.es_acl_edm_ace_KEYS")
	proto.RegisterType((*EsAclEdmAce)(nil), "cisco_ios_xr_es_acl_oper.es_acl.active.list.acls.acl.acl_sequence_numbers.acl_sequence_number.es_acl_edm_ace")
}

func init() { proto.RegisterFile("es_acl_edm_ace.proto", fileDescriptor_cac6cdf8c0804632) }

var fileDescriptor_cac6cdf8c0804632 = []byte{
	// 509 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x53, 0x7f, 0x6b, 0x53, 0x31,
	0x14, 0xa5, 0xba, 0x75, 0x5b, 0x60, 0x5d, 0x97, 0x56, 0x8d, 0x82, 0x50, 0x04, 0xb1, 0x88, 0x3c,
	0x59, 0xe7, 0xef, 0xf9, 0x6b, 0xeb, 0xa6, 0x82, 0x30, 0xa1, 0x15, 0xc5, 0x3f, 0x24, 0xa4, 0xc9,
	0xa5, 0x0d, 0xa6, 0x2f, 0xcf, 0x24, 0x9d, 0xee, 0x4b, 0xf8, 0x99, 0x25, 0x37, 0x7d, 0x5b, 0x5f,
	0xd7, 0xff, 0xee, 0x3d, 0xe7, 0xdc, 0x73, 0x1e, 0xf7, 0xe5, 0x92, 0x36, 0x78, 0x2e, 0xa4, 0xe1,
	0xa0, 0xa6, 0x5c, 0x48, 0xc8, 0x0a, 0x67, 0x83, 0xa5, 0x3f, 0xa5, 0xf6, 0xd2, 0x72, 0x6d, 0x3d,
	0xff, 0xeb, 0xf8, 0x5c, 0x62, 0x0b, 0x70, 0x59, 0xaa, 0x33, 0x21, 0x83, 0x3e, 0x83, 0xcc, 0x68,
	0x1f, 0x32, 0x21, 0x8d, 0xcf, 0x12, 0x68, 0xb8, 0x87, 0xdf, 0x33, 0xc8, 0x25, 0xf0, 0x7c, 0x36,
	0x1d, 0x81, 0xf3, 0xab, 0xc0, 0x7b, 0x03, 0xd2, 0xaa, 0xc6, 0xf2, 0xcf, 0x27, 0x3f, 0x86, 0x94,
	0x92, 0xb5, 0x5c, 0x4c, 0x81, 0xd5, 0x3a, 0xb5, 0xee, 0xd6, 0x00, 0x6b, 0xfa, 0x80, 0xec, 0x2c,
	0x4d, 0xb3, 0x6b, 0x9d, 0x5a, 0x77, 0x7b, 0xd0, 0x28, 0xe1, 0xd3, 0xe4, 0xf9, 0xaf, 0x4e, 0x1a,
	0x55, 0x53, 0x7a, 0x9b, 0x6c, 0x46, 0xef, 0x70, 0x5e, 0x00, 0xeb, 0xa1, 0xe7, 0x86, 0x90, 0xf0,
	0xf5, 0xbc, 0x00, 0x9a, 0x91, 0x56, 0xa4, 0x96, 0xad, 0xf7, 0xd1, 0x7a, 0x57, 0x48, 0x18, 0x56,
	0xdc, 0xe3, 0xa7, 0x4d, 0x74, 0xf0, 0xec, 0x49, 0xa7, 0xd6, 0x5d, 0x1b, 0x60, 0x4d, 0xdb, 0x64,
	0x7d, 0xec, 0x44, 0x1e, 0xd8, 0x53, 0xf4, 0x4e, 0x0d, 0xbd, 0x4f, 0x1a, 0xde, 0xce, 0x9c, 0x04,
	0x2e, 0x94, 0x72, 0xe0, 0x3d, 0x7b, 0x86, 0xf4, 0x76, 0x42, 0x0f, 0x13, 0x48, 0xf7, 0xc8, 0x8d,
	0xb9, 0xec, 0x8f, 0x36, 0x8a, 0x4b, 0xe1, 0x14, 0x1f, 0xc5, 0x84, 0xe7, 0xa8, 0xa6, 0x89, 0xfc,
	0xae, 0x8d, 0xea, 0x0b, 0xa7, 0x8e, 0x62, 0xde, 0x63, 0xd2, 0x52, 0xe0, 0x83, 0xce, 0x45, 0xd0,
	0x36, 0xbf, 0xb0, 0x7f, 0x91, 0x06, 0x16, 0xa8, 0x32, 0xe3, 0x80, 0xdc, 0x59, 0x1c, 0x58, 0x0a,
	0x7a, 0x89, 0x73, 0xb7, 0x16, 0x14, 0x95, 0xb4, 0x87, 0x64, 0x17, 0xc2, 0x04, 0x1c, 0xae, 0xaf,
	0xdc, 0xcf, 0x2b, 0xdc, 0xcf, 0x0e, 0x12, 0x71, 0x8f, 0xf3, 0xed, 0xb4, 0xc9, 0xfa, 0x99, 0x11,
	0xf9, 0x1e, 0x3b, 0x40, 0x3e, 0x35, 0x25, 0xda, 0x63, 0xaf, 0x2f, 0xd1, 0x1e, 0x6d, 0x92, 0xeb,
	0xd2, 0x7a, 0xf6, 0x06, 0xb1, 0x58, 0x46, 0x44, 0x81, 0x66, 0x6f, 0x13, 0xa2, 0x40, 0xd3, 0x47,
	0x84, 0xea, 0x3c, 0x07, 0xc7, 0x27, 0x20, 0x14, 0x38, 0x9e, 0xcc, 0xdf, 0xa1, 0xa0, 0x89, 0xcc,
	0x27, 0x24, 0xbe, 0x61, 0xce, 0x2a, 0x75, 0x8f, 0xbd, 0x5f, 0xa9, 0xee, 0xd1, 0x2e, 0x69, 0x56,
	0xd4, 0xf1, 0x63, 0x0e, 0xd3, 0x8b, 0x5a, 0xd0, 0xf6, 0xad, 0xbf, 0xa2, 0x8c, 0x1f, 0x79, 0x74,
	0x45, 0x79, 0x0c, 0x9a, 0x32, 0xb2, 0x21, 0x45, 0x11, 0x66, 0x0e, 0x58, 0xbf, 0x53, 0xeb, 0x6e,
	0x0e, 0xca, 0x96, 0xde, 0x25, 0xc4, 0xd8, 0x31, 0xb7, 0x45, 0xdc, 0x2f, 0x3b, 0xc6, 0xe9, 0x2d,
	0x63, 0xc7, 0x5f, 0x10, 0xa0, 0x37, 0x49, 0xdd, 0xc1, 0x54, 0xb8, 0x5f, 0xec, 0x04, 0xff, 0xc6,
	0xbc, 0x4b, 0x2f, 0xd7, 0x70, 0xbc, 0x86, 0x0f, 0xe5, 0xcb, 0x35, 0xa7, 0xcb, 0x07, 0xe1, 0x83,
	0xd3, 0xf9, 0x98, 0x7d, 0x44, 0xc5, 0xc5, 0x41, 0x0c, 0x11, 0x1d, 0xd5, 0xf1, 0x94, 0xf7, 0xff,
	0x07, 0x00, 0x00, 0xff, 0xff, 0x99, 0xe1, 0x24, 0x5d, 0xe2, 0x03, 0x00, 0x00,
}
