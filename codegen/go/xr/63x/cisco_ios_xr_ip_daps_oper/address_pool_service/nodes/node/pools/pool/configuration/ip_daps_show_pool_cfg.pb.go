/*
Copyright 2019 Cisco Systems

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ip_daps_show_pool_cfg.proto

package cisco_ios_xr_ip_daps_oper_address_pool_service_nodes_node_pools_pool_configuration

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type IpDapsShowPoolCfg_KEYS struct {
	NodeName             string   `protobuf:"bytes,1,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	PoolName             string   `protobuf:"bytes,2,opt,name=pool_name,json=poolName,proto3" json:"pool_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IpDapsShowPoolCfg_KEYS) Reset()         { *m = IpDapsShowPoolCfg_KEYS{} }
func (m *IpDapsShowPoolCfg_KEYS) String() string { return proto.CompactTextString(m) }
func (*IpDapsShowPoolCfg_KEYS) ProtoMessage()    {}
func (*IpDapsShowPoolCfg_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_85df0f33f2660e35, []int{0}
}

func (m *IpDapsShowPoolCfg_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IpDapsShowPoolCfg_KEYS.Unmarshal(m, b)
}
func (m *IpDapsShowPoolCfg_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IpDapsShowPoolCfg_KEYS.Marshal(b, m, deterministic)
}
func (m *IpDapsShowPoolCfg_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IpDapsShowPoolCfg_KEYS.Merge(m, src)
}
func (m *IpDapsShowPoolCfg_KEYS) XXX_Size() int {
	return xxx_messageInfo_IpDapsShowPoolCfg_KEYS.Size(m)
}
func (m *IpDapsShowPoolCfg_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_IpDapsShowPoolCfg_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_IpDapsShowPoolCfg_KEYS proto.InternalMessageInfo

func (m *IpDapsShowPoolCfg_KEYS) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

func (m *IpDapsShowPoolCfg_KEYS) GetPoolName() string {
	if m != nil {
		return m.PoolName
	}
	return ""
}

type IpDapsShowPoolCfg struct {
	PoolName             string   `protobuf:"bytes,50,opt,name=pool_name,json=poolName,proto3" json:"pool_name,omitempty"`
	PoolId               uint32   `protobuf:"varint,51,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	VrfName              string   `protobuf:"bytes,52,opt,name=vrf_name,json=vrfName,proto3" json:"vrf_name,omitempty"`
	PoolScope            string   `protobuf:"bytes,53,opt,name=pool_scope,json=poolScope,proto3" json:"pool_scope,omitempty"`
	PoolPrefixLength     uint32   `protobuf:"varint,54,opt,name=pool_prefix_length,json=poolPrefixLength,proto3" json:"pool_prefix_length,omitempty"`
	HighUtilizationMark  uint32   `protobuf:"varint,55,opt,name=high_utilization_mark,json=highUtilizationMark,proto3" json:"high_utilization_mark,omitempty"`
	LowUtilizationMark   uint32   `protobuf:"varint,56,opt,name=low_utilization_mark,json=lowUtilizationMark,proto3" json:"low_utilization_mark,omitempty"`
	CurrentUtilization   uint32   `protobuf:"varint,57,opt,name=current_utilization,json=currentUtilization,proto3" json:"current_utilization,omitempty"`
	UtilizationHighCount uint32   `protobuf:"varint,58,opt,name=utilization_high_count,json=utilizationHighCount,proto3" json:"utilization_high_count,omitempty"`
	UtilizationLowCount  uint32   `protobuf:"varint,59,opt,name=utilization_low_count,json=utilizationLowCount,proto3" json:"utilization_low_count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IpDapsShowPoolCfg) Reset()         { *m = IpDapsShowPoolCfg{} }
func (m *IpDapsShowPoolCfg) String() string { return proto.CompactTextString(m) }
func (*IpDapsShowPoolCfg) ProtoMessage()    {}
func (*IpDapsShowPoolCfg) Descriptor() ([]byte, []int) {
	return fileDescriptor_85df0f33f2660e35, []int{1}
}

func (m *IpDapsShowPoolCfg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IpDapsShowPoolCfg.Unmarshal(m, b)
}
func (m *IpDapsShowPoolCfg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IpDapsShowPoolCfg.Marshal(b, m, deterministic)
}
func (m *IpDapsShowPoolCfg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IpDapsShowPoolCfg.Merge(m, src)
}
func (m *IpDapsShowPoolCfg) XXX_Size() int {
	return xxx_messageInfo_IpDapsShowPoolCfg.Size(m)
}
func (m *IpDapsShowPoolCfg) XXX_DiscardUnknown() {
	xxx_messageInfo_IpDapsShowPoolCfg.DiscardUnknown(m)
}

var xxx_messageInfo_IpDapsShowPoolCfg proto.InternalMessageInfo

func (m *IpDapsShowPoolCfg) GetPoolName() string {
	if m != nil {
		return m.PoolName
	}
	return ""
}

func (m *IpDapsShowPoolCfg) GetPoolId() uint32 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

func (m *IpDapsShowPoolCfg) GetVrfName() string {
	if m != nil {
		return m.VrfName
	}
	return ""
}

func (m *IpDapsShowPoolCfg) GetPoolScope() string {
	if m != nil {
		return m.PoolScope
	}
	return ""
}

func (m *IpDapsShowPoolCfg) GetPoolPrefixLength() uint32 {
	if m != nil {
		return m.PoolPrefixLength
	}
	return 0
}

func (m *IpDapsShowPoolCfg) GetHighUtilizationMark() uint32 {
	if m != nil {
		return m.HighUtilizationMark
	}
	return 0
}

func (m *IpDapsShowPoolCfg) GetLowUtilizationMark() uint32 {
	if m != nil {
		return m.LowUtilizationMark
	}
	return 0
}

func (m *IpDapsShowPoolCfg) GetCurrentUtilization() uint32 {
	if m != nil {
		return m.CurrentUtilization
	}
	return 0
}

func (m *IpDapsShowPoolCfg) GetUtilizationHighCount() uint32 {
	if m != nil {
		return m.UtilizationHighCount
	}
	return 0
}

func (m *IpDapsShowPoolCfg) GetUtilizationLowCount() uint32 {
	if m != nil {
		return m.UtilizationLowCount
	}
	return 0
}

func init() {
	proto.RegisterType((*IpDapsShowPoolCfg_KEYS)(nil), "cisco_ios_xr_ip_daps_oper.address_pool_service.nodes.node.pools.pool.configuration.ip_daps_show_pool_cfg_KEYS")
	proto.RegisterType((*IpDapsShowPoolCfg)(nil), "cisco_ios_xr_ip_daps_oper.address_pool_service.nodes.node.pools.pool.configuration.ip_daps_show_pool_cfg")
}

func init() { proto.RegisterFile("ip_daps_show_pool_cfg.proto", fileDescriptor_85df0f33f2660e35) }

var fileDescriptor_85df0f33f2660e35 = []byte{
	// 362 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x92, 0x5d, 0x4b, 0xeb, 0x30,
	0x18, 0xc7, 0xd9, 0x39, 0xb0, 0x97, 0xc0, 0x81, 0x43, 0xb6, 0x9d, 0x53, 0x1d, 0xc2, 0xd8, 0xd5,
	0x2e, 0xa4, 0xca, 0x36, 0xdf, 0x2f, 0x45, 0x50, 0x9c, 0x22, 0x1b, 0x0a, 0x5e, 0x85, 0x9a, 0xa6,
	0x6d, 0x58, 0xd7, 0x27, 0x24, 0xed, 0x3a, 0xfc, 0x60, 0x7e, 0x3e, 0xc9, 0x13, 0xc5, 0x4e, 0x77,
	0x13, 0xe8, 0xff, 0x97, 0xdf, 0xf3, 0x52, 0x42, 0x7a, 0x52, 0xb1, 0x30, 0x50, 0x86, 0x99, 0x04,
	0x4a, 0xa6, 0x00, 0x52, 0xc6, 0xa3, 0xd8, 0x57, 0x1a, 0x72, 0xa0, 0x33, 0x2e, 0x0d, 0x07, 0x26,
	0xc1, 0xb0, 0xb5, 0x66, 0x9f, 0x37, 0x41, 0x09, 0xed, 0x07, 0x61, 0xa8, 0x85, 0x31, 0xce, 0x30,
	0x42, 0xaf, 0x24, 0x17, 0x7e, 0x06, 0xa1, 0x30, 0x78, 0xfa, 0x36, 0x37, 0x78, 0xfa, 0x1c, 0xb2,
	0x48, 0xc6, 0x85, 0x0e, 0x72, 0x09, 0xd9, 0xe0, 0x89, 0xec, 0x6e, 0x6d, 0xc9, 0x6e, 0xaf, 0x9e,
	0xe7, 0xb4, 0x47, 0x5a, 0x56, 0x67, 0x59, 0xb0, 0x14, 0x5e, 0xad, 0x5f, 0x1b, 0xb6, 0x66, 0x4d,
	0x1b, 0xdc, 0x07, 0x4b, 0x61, 0x21, 0xde, 0x46, 0xf8, 0xcb, 0x41, 0x1b, 0x58, 0x38, 0x78, 0xfb,
	0x4d, 0xba, 0x5b, 0x0b, 0x6f, 0x6a, 0xa3, 0x4d, 0x8d, 0xfe, 0x27, 0x0d, 0x84, 0x32, 0xf4, 0xc6,
	0xfd, 0xda, 0xf0, 0xcf, 0xac, 0x6e, 0x3f, 0x6f, 0x42, 0xba, 0x43, 0x9a, 0x2b, 0x1d, 0x39, 0x69,
	0x82, 0x52, 0x63, 0xa5, 0x23, 0x74, 0xf6, 0x08, 0x71, 0x6b, 0x73, 0x50, 0xc2, 0x3b, 0x42, 0x88,
	0x2d, 0xe6, 0x36, 0xa0, 0xfb, 0x84, 0x22, 0x56, 0x5a, 0x44, 0x72, 0xcd, 0x52, 0x91, 0xc5, 0x79,
	0xe2, 0x1d, 0x63, 0xf5, 0xbf, 0x96, 0x3c, 0x20, 0x98, 0x62, 0x4e, 0x47, 0xa4, 0x9b, 0xc8, 0x38,
	0x61, 0x45, 0x2e, 0x53, 0xf9, 0x8a, 0xff, 0x88, 0x2d, 0x03, 0xbd, 0xf0, 0x4e, 0x50, 0x68, 0x5b,
	0xf8, 0xf8, 0xc5, 0xee, 0x02, 0xbd, 0xa0, 0x87, 0xa4, 0x93, 0x42, 0xf9, 0x53, 0x39, 0x45, 0x85,
	0xa6, 0x50, 0x7e, 0x37, 0x0e, 0x48, 0x9b, 0x17, 0x5a, 0x8b, 0x2c, 0xaf, 0x5a, 0xde, 0x99, 0x13,
	0x3e, 0x50, 0x45, 0xa2, 0x13, 0xf2, 0xaf, 0x5a, 0x1e, 0x47, 0xe4, 0x50, 0x64, 0xb9, 0x77, 0x8e,
	0x4e, 0xa7, 0x42, 0xaf, 0x65, 0x9c, 0x5c, 0x5a, 0x66, 0x97, 0xa9, 0x5a, 0x76, 0x48, 0x27, 0x5d,
	0xb8, 0x65, 0x2a, 0x70, 0x0a, 0x25, 0x3a, 0x2f, 0x75, 0x7c, 0x6b, 0xe3, 0xf7, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xa1, 0x82, 0xd0, 0xa2, 0x8a, 0x02, 0x00, 0x00,
}
