/*
Copyright 2019 Cisco Systems

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: sse_pfilter_ea_ace_brief.proto

package cisco_ios_xr_ncs6k_acl_oper_access_list_hardware_nodes_node_egress_ipv4_accesses_access_sequence_briefs_sequence_brief

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type SsePfilterEaAceBrief_KEYS struct {
	NodeName             string   `protobuf:"bytes,1,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	AccessListName       string   `protobuf:"bytes,2,opt,name=access_list_name,json=accessListName,proto3" json:"access_list_name,omitempty"`
	SequenceNumber       uint32   `protobuf:"varint,3,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SsePfilterEaAceBrief_KEYS) Reset()         { *m = SsePfilterEaAceBrief_KEYS{} }
func (m *SsePfilterEaAceBrief_KEYS) String() string { return proto.CompactTextString(m) }
func (*SsePfilterEaAceBrief_KEYS) ProtoMessage()    {}
func (*SsePfilterEaAceBrief_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_d28c04556ed158c8, []int{0}
}

func (m *SsePfilterEaAceBrief_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SsePfilterEaAceBrief_KEYS.Unmarshal(m, b)
}
func (m *SsePfilterEaAceBrief_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SsePfilterEaAceBrief_KEYS.Marshal(b, m, deterministic)
}
func (m *SsePfilterEaAceBrief_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SsePfilterEaAceBrief_KEYS.Merge(m, src)
}
func (m *SsePfilterEaAceBrief_KEYS) XXX_Size() int {
	return xxx_messageInfo_SsePfilterEaAceBrief_KEYS.Size(m)
}
func (m *SsePfilterEaAceBrief_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_SsePfilterEaAceBrief_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_SsePfilterEaAceBrief_KEYS proto.InternalMessageInfo

func (m *SsePfilterEaAceBrief_KEYS) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

func (m *SsePfilterEaAceBrief_KEYS) GetAccessListName() string {
	if m != nil {
		return m.AccessListName
	}
	return ""
}

func (m *SsePfilterEaAceBrief_KEYS) GetSequenceNumber() uint32 {
	if m != nil {
		return m.SequenceNumber
	}
	return 0
}

type SsePfilterNextHopAddrType struct {
	AddressType          string   `protobuf:"bytes,1,opt,name=address_type,json=addressType,proto3" json:"address_type,omitempty"`
	Ipv4Address          string   `protobuf:"bytes,2,opt,name=ipv4_address,json=ipv4Address,proto3" json:"ipv4_address,omitempty"`
	Ipv6Address          string   `protobuf:"bytes,3,opt,name=ipv6_address,json=ipv6Address,proto3" json:"ipv6_address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SsePfilterNextHopAddrType) Reset()         { *m = SsePfilterNextHopAddrType{} }
func (m *SsePfilterNextHopAddrType) String() string { return proto.CompactTextString(m) }
func (*SsePfilterNextHopAddrType) ProtoMessage()    {}
func (*SsePfilterNextHopAddrType) Descriptor() ([]byte, []int) {
	return fileDescriptor_d28c04556ed158c8, []int{1}
}

func (m *SsePfilterNextHopAddrType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SsePfilterNextHopAddrType.Unmarshal(m, b)
}
func (m *SsePfilterNextHopAddrType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SsePfilterNextHopAddrType.Marshal(b, m, deterministic)
}
func (m *SsePfilterNextHopAddrType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SsePfilterNextHopAddrType.Merge(m, src)
}
func (m *SsePfilterNextHopAddrType) XXX_Size() int {
	return xxx_messageInfo_SsePfilterNextHopAddrType.Size(m)
}
func (m *SsePfilterNextHopAddrType) XXX_DiscardUnknown() {
	xxx_messageInfo_SsePfilterNextHopAddrType.DiscardUnknown(m)
}

var xxx_messageInfo_SsePfilterNextHopAddrType proto.InternalMessageInfo

func (m *SsePfilterNextHopAddrType) GetAddressType() string {
	if m != nil {
		return m.AddressType
	}
	return ""
}

func (m *SsePfilterNextHopAddrType) GetIpv4Address() string {
	if m != nil {
		return m.Ipv4Address
	}
	return ""
}

func (m *SsePfilterNextHopAddrType) GetIpv6Address() string {
	if m != nil {
		return m.Ipv6Address
	}
	return ""
}

type SsePfilterEaAceDataBrief struct {
	Grant                 string                     `protobuf:"bytes,1,opt,name=grant,proto3" json:"grant,omitempty"`
	LoggingEnabled        bool                       `protobuf:"varint,2,opt,name=logging_enabled,json=loggingEnabled,proto3" json:"logging_enabled,omitempty"`
	PerAceIcmpEnabled     bool                       `protobuf:"varint,3,opt,name=per_ace_icmp_enabled,json=perAceIcmpEnabled,proto3" json:"per_ace_icmp_enabled,omitempty"`
	NextHopEnabled        bool                       `protobuf:"varint,4,opt,name=next_hop_enabled,json=nextHopEnabled,proto3" json:"next_hop_enabled,omitempty"`
	DefaultNextHopEnabled bool                       `protobuf:"varint,5,opt,name=default_next_hop_enabled,json=defaultNextHopEnabled,proto3" json:"default_next_hop_enabled,omitempty"`
	TotalTcamEntries      uint32                     `protobuf:"varint,6,opt,name=total_tcam_entries,json=totalTcamEntries,proto3" json:"total_tcam_entries,omitempty"`
	Hits                  uint64                     `protobuf:"varint,7,opt,name=hits,proto3" json:"hits,omitempty"`
	NextHopAddress        *SsePfilterNextHopAddrType `protobuf:"bytes,8,opt,name=next_hop_address,json=nextHopAddress,proto3" json:"next_hop_address,omitempty"`
	NpuId                 uint32                     `protobuf:"varint,9,opt,name=npu_id,json=npuId,proto3" json:"npu_id,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}                   `json:"-"`
	XXX_unrecognized      []byte                     `json:"-"`
	XXX_sizecache         int32                      `json:"-"`
}

func (m *SsePfilterEaAceDataBrief) Reset()         { *m = SsePfilterEaAceDataBrief{} }
func (m *SsePfilterEaAceDataBrief) String() string { return proto.CompactTextString(m) }
func (*SsePfilterEaAceDataBrief) ProtoMessage()    {}
func (*SsePfilterEaAceDataBrief) Descriptor() ([]byte, []int) {
	return fileDescriptor_d28c04556ed158c8, []int{2}
}

func (m *SsePfilterEaAceDataBrief) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SsePfilterEaAceDataBrief.Unmarshal(m, b)
}
func (m *SsePfilterEaAceDataBrief) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SsePfilterEaAceDataBrief.Marshal(b, m, deterministic)
}
func (m *SsePfilterEaAceDataBrief) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SsePfilterEaAceDataBrief.Merge(m, src)
}
func (m *SsePfilterEaAceDataBrief) XXX_Size() int {
	return xxx_messageInfo_SsePfilterEaAceDataBrief.Size(m)
}
func (m *SsePfilterEaAceDataBrief) XXX_DiscardUnknown() {
	xxx_messageInfo_SsePfilterEaAceDataBrief.DiscardUnknown(m)
}

var xxx_messageInfo_SsePfilterEaAceDataBrief proto.InternalMessageInfo

func (m *SsePfilterEaAceDataBrief) GetGrant() string {
	if m != nil {
		return m.Grant
	}
	return ""
}

func (m *SsePfilterEaAceDataBrief) GetLoggingEnabled() bool {
	if m != nil {
		return m.LoggingEnabled
	}
	return false
}

func (m *SsePfilterEaAceDataBrief) GetPerAceIcmpEnabled() bool {
	if m != nil {
		return m.PerAceIcmpEnabled
	}
	return false
}

func (m *SsePfilterEaAceDataBrief) GetNextHopEnabled() bool {
	if m != nil {
		return m.NextHopEnabled
	}
	return false
}

func (m *SsePfilterEaAceDataBrief) GetDefaultNextHopEnabled() bool {
	if m != nil {
		return m.DefaultNextHopEnabled
	}
	return false
}

func (m *SsePfilterEaAceDataBrief) GetTotalTcamEntries() uint32 {
	if m != nil {
		return m.TotalTcamEntries
	}
	return 0
}

func (m *SsePfilterEaAceDataBrief) GetHits() uint64 {
	if m != nil {
		return m.Hits
	}
	return 0
}

func (m *SsePfilterEaAceDataBrief) GetNextHopAddress() *SsePfilterNextHopAddrType {
	if m != nil {
		return m.NextHopAddress
	}
	return nil
}

func (m *SsePfilterEaAceDataBrief) GetNpuId() uint32 {
	if m != nil {
		return m.NpuId
	}
	return 0
}

type SsePfilterEaAceBrief struct {
	CommonAcl            []*SsePfilterEaAceDataBrief `protobuf:"bytes,50,rep,name=common_acl,json=commonAcl,proto3" json:"common_acl,omitempty"`
	InterfaceAcl         []*SsePfilterEaAceDataBrief `protobuf:"bytes,51,rep,name=interface_acl,json=interfaceAcl,proto3" json:"interface_acl,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *SsePfilterEaAceBrief) Reset()         { *m = SsePfilterEaAceBrief{} }
func (m *SsePfilterEaAceBrief) String() string { return proto.CompactTextString(m) }
func (*SsePfilterEaAceBrief) ProtoMessage()    {}
func (*SsePfilterEaAceBrief) Descriptor() ([]byte, []int) {
	return fileDescriptor_d28c04556ed158c8, []int{3}
}

func (m *SsePfilterEaAceBrief) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SsePfilterEaAceBrief.Unmarshal(m, b)
}
func (m *SsePfilterEaAceBrief) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SsePfilterEaAceBrief.Marshal(b, m, deterministic)
}
func (m *SsePfilterEaAceBrief) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SsePfilterEaAceBrief.Merge(m, src)
}
func (m *SsePfilterEaAceBrief) XXX_Size() int {
	return xxx_messageInfo_SsePfilterEaAceBrief.Size(m)
}
func (m *SsePfilterEaAceBrief) XXX_DiscardUnknown() {
	xxx_messageInfo_SsePfilterEaAceBrief.DiscardUnknown(m)
}

var xxx_messageInfo_SsePfilterEaAceBrief proto.InternalMessageInfo

func (m *SsePfilterEaAceBrief) GetCommonAcl() []*SsePfilterEaAceDataBrief {
	if m != nil {
		return m.CommonAcl
	}
	return nil
}

func (m *SsePfilterEaAceBrief) GetInterfaceAcl() []*SsePfilterEaAceDataBrief {
	if m != nil {
		return m.InterfaceAcl
	}
	return nil
}

func init() {
	proto.RegisterType((*SsePfilterEaAceBrief_KEYS)(nil), "cisco_ios_xr_ncs6k_acl_oper.access_list_hardware.nodes.node.egress.ipv4.accesses.access.sequence_briefs.sequence_brief.sse_pfilter_ea_ace_brief_KEYS")
	proto.RegisterType((*SsePfilterNextHopAddrType)(nil), "cisco_ios_xr_ncs6k_acl_oper.access_list_hardware.nodes.node.egress.ipv4.accesses.access.sequence_briefs.sequence_brief.sse_pfilter_next_hop_addr_type")
	proto.RegisterType((*SsePfilterEaAceDataBrief)(nil), "cisco_ios_xr_ncs6k_acl_oper.access_list_hardware.nodes.node.egress.ipv4.accesses.access.sequence_briefs.sequence_brief.sse_pfilter_ea_ace_data_brief")
	proto.RegisterType((*SsePfilterEaAceBrief)(nil), "cisco_ios_xr_ncs6k_acl_oper.access_list_hardware.nodes.node.egress.ipv4.accesses.access.sequence_briefs.sequence_brief.sse_pfilter_ea_ace_brief")
}

func init() { proto.RegisterFile("sse_pfilter_ea_ace_brief.proto", fileDescriptor_d28c04556ed158c8) }

var fileDescriptor_d28c04556ed158c8 = []byte{
	// 529 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x94, 0xcf, 0x6e, 0x13, 0x31,
	0x10, 0xc6, 0x65, 0xf2, 0x87, 0xc4, 0x69, 0x43, 0xb0, 0x5a, 0x69, 0x25, 0x04, 0x0a, 0xb9, 0xb0,
	0x07, 0xb4, 0x48, 0x29, 0x0a, 0xe7, 0x1c, 0x22, 0x51, 0x81, 0x72, 0x08, 0xbd, 0x70, 0xb2, 0x1c,
	0xef, 0x24, 0xb1, 0xd8, 0xb5, 0x8d, 0xed, 0x94, 0xf2, 0x08, 0x9c, 0xca, 0x05, 0xde, 0x84, 0x13,
	0x27, 0xde, 0x0c, 0xd9, 0xeb, 0x5d, 0xb5, 0x94, 0x72, 0xa5, 0x97, 0xc8, 0xf3, 0xf9, 0x37, 0x9e,
	0x6f, 0x26, 0x93, 0xe0, 0x27, 0xd6, 0x02, 0xd5, 0x1b, 0x51, 0x38, 0x30, 0x14, 0x18, 0x65, 0x1c,
	0xe8, 0xda, 0x08, 0xd8, 0x64, 0xda, 0x28, 0xa7, 0xc8, 0x39, 0x17, 0x96, 0x2b, 0x2a, 0x94, 0xa5,
	0x17, 0x86, 0x4a, 0x6e, 0x67, 0x1f, 0x28, 0xe3, 0x05, 0x55, 0x1a, 0x4c, 0xc6, 0x38, 0x07, 0x6b,
	0x69, 0x21, 0xac, 0xa3, 0x3b, 0x66, 0xf2, 0x4f, 0xcc, 0x40, 0x26, 0x55, 0x0e, 0x36, 0x7c, 0x66,
	0xb0, 0x35, 0x60, 0x6d, 0x26, 0xf4, 0xf9, 0xcb, 0xc8, 0x82, 0x8d, 0x87, 0xcc, 0xc2, 0xc7, 0x3d,
	0xc8, 0xba, 0xda, 0x9f, 0xf1, 0xe4, 0x12, 0xe1, 0xc7, 0xb7, 0x59, 0xa3, 0x6f, 0x16, 0xef, 0xdf,
	0x91, 0x47, 0xb8, 0xef, 0x8b, 0x50, 0xc9, 0x4a, 0x48, 0xd0, 0x18, 0xa5, 0xfd, 0x55, 0xcf, 0x0b,
	0x4b, 0x56, 0x02, 0x49, 0xf1, 0xe8, 0xaa, 0xb9, 0xc0, 0xdc, 0x0b, 0xcc, 0xb0, 0xd2, 0xdf, 0x0a,
	0xeb, 0x02, 0xf9, 0x0c, 0x3f, 0x68, 0x4a, 0xcb, 0x7d, 0xb9, 0x06, 0x93, 0xb4, 0xc6, 0x28, 0x3d,
	0x5c, 0x0d, 0x6b, 0x79, 0x19, 0xd4, 0xc9, 0x17, 0x74, 0x7d, 0x58, 0x12, 0x2e, 0x1c, 0xdd, 0x29,
	0x4d, 0x59, 0x9e, 0x1b, 0xea, 0x3e, 0x6b, 0x20, 0x4f, 0xf1, 0x81, 0x0f, 0x7c, 0x59, 0x1f, 0x47,
	0x57, 0x83, 0xa8, 0x9d, 0x45, 0xc4, 0x8f, 0x83, 0x46, 0x2d, 0x9a, 0x1a, 0x78, 0x6d, 0x5e, 0x49,
	0x11, 0x99, 0x35, 0x48, 0xab, 0x41, 0x66, 0x11, 0x99, 0x5c, 0xb6, 0xff, 0x3a, 0x9d, 0x9c, 0x39,
	0x56, 0x8d, 0x88, 0x1c, 0xe1, 0xce, 0xd6, 0x30, 0xe9, 0xa2, 0x87, 0x2a, 0xf0, 0xcd, 0x16, 0x6a,
	0xbb, 0x15, 0x72, 0x4b, 0x41, 0xb2, 0x75, 0x01, 0x79, 0x30, 0xd0, 0x5b, 0x0d, 0xa3, 0xbc, 0xa8,
	0x54, 0xf2, 0x02, 0x1f, 0x69, 0x30, 0xe1, 0x51, 0xc1, 0x4b, 0xdd, 0xd0, 0xad, 0x40, 0x3f, 0xd4,
	0x60, 0xe6, 0x1c, 0x4e, 0x79, 0xa9, 0xeb, 0x84, 0x14, 0x8f, 0x9a, 0x81, 0xd4, 0x70, 0xbb, 0x7a,
	0xda, 0xeb, 0xaf, 0x55, 0x43, 0xbe, 0xc2, 0x49, 0x0e, 0x1b, 0xb6, 0x2f, 0x1c, 0xbd, 0x91, 0xd1,
	0x09, 0x19, 0xc7, 0xf1, 0x7e, 0x79, 0x3d, 0xf1, 0x39, 0x26, 0x4e, 0x39, 0x56, 0x50, 0xc7, 0x59,
	0x49, 0x41, 0x3a, 0x23, 0xc0, 0x26, 0xdd, 0xf0, 0x65, 0x8d, 0xc2, 0xcd, 0x19, 0x67, 0xe5, 0xa2,
	0xd2, 0x09, 0xc1, 0xed, 0x9d, 0x70, 0x36, 0xb9, 0x3f, 0x46, 0x69, 0x7b, 0x15, 0xce, 0xe4, 0x17,
	0xba, 0xe2, 0xb2, 0x1e, 0x6f, 0x6f, 0x8c, 0xd2, 0xc1, 0xf4, 0x3b, 0xca, 0xfe, 0xcf, 0xa6, 0x67,
	0xff, 0xde, 0xa9, 0x66, 0x7c, 0xf5, 0x76, 0x1c, 0xe3, 0xae, 0xd4, 0x7b, 0x2a, 0xf2, 0xa4, 0x1f,
	0x3a, 0xef, 0x48, 0xbd, 0x3f, 0xcd, 0x27, 0x5f, 0x5b, 0x38, 0xb9, 0xed, 0xf7, 0x42, 0x7e, 0x20,
	0x8c, 0xb9, 0x2a, 0x4b, 0x25, 0x7d, 0x47, 0xc9, 0x74, 0xdc, 0x4a, 0x07, 0xd3, 0x6f, 0x77, 0xa2,
	0xe3, 0x1b, 0x9b, 0xbb, 0xea, 0x57, 0x4e, 0xe7, 0xbc, 0x20, 0x3f, 0x11, 0x3e, 0x14, 0xd2, 0x81,
	0xd9, 0x78, 0xc6, 0x5b, 0x3f, 0xb9, 0xd3, 0xd6, 0x0f, 0x1a, 0xb3, 0x73, 0x5e, 0xac, 0xbb, 0xe1,
	0x1f, 0xf4, 0xe4, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0xbf, 0x77, 0xef, 0x26, 0x63, 0x05, 0x00,
	0x00,
}
