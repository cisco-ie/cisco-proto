/*
Copyright 2019 Cisco Systems

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: l2vpn_evpn_label.proto

package cisco_ios_xr_evpn_oper_evpn_active_internal_labels_internal_label

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type L2VpnEvpnLabel_KEYS struct {
	Evi                  uint32   `protobuf:"varint,1,opt,name=evi,proto3" json:"evi,omitempty"`
	Esi1                 string   `protobuf:"bytes,2,opt,name=esi1,proto3" json:"esi1,omitempty"`
	Esi2                 string   `protobuf:"bytes,3,opt,name=esi2,proto3" json:"esi2,omitempty"`
	Esi3                 string   `protobuf:"bytes,4,opt,name=esi3,proto3" json:"esi3,omitempty"`
	Esi4                 string   `protobuf:"bytes,5,opt,name=esi4,proto3" json:"esi4,omitempty"`
	Esi5                 string   `protobuf:"bytes,6,opt,name=esi5,proto3" json:"esi5,omitempty"`
	EthernetTag          uint32   `protobuf:"varint,7,opt,name=ethernet_tag,json=ethernetTag,proto3" json:"ethernet_tag,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *L2VpnEvpnLabel_KEYS) Reset()         { *m = L2VpnEvpnLabel_KEYS{} }
func (m *L2VpnEvpnLabel_KEYS) String() string { return proto.CompactTextString(m) }
func (*L2VpnEvpnLabel_KEYS) ProtoMessage()    {}
func (*L2VpnEvpnLabel_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_da030edbf6bf8249, []int{0}
}

func (m *L2VpnEvpnLabel_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2VpnEvpnLabel_KEYS.Unmarshal(m, b)
}
func (m *L2VpnEvpnLabel_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2VpnEvpnLabel_KEYS.Marshal(b, m, deterministic)
}
func (m *L2VpnEvpnLabel_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2VpnEvpnLabel_KEYS.Merge(m, src)
}
func (m *L2VpnEvpnLabel_KEYS) XXX_Size() int {
	return xxx_messageInfo_L2VpnEvpnLabel_KEYS.Size(m)
}
func (m *L2VpnEvpnLabel_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_L2VpnEvpnLabel_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_L2VpnEvpnLabel_KEYS proto.InternalMessageInfo

func (m *L2VpnEvpnLabel_KEYS) GetEvi() uint32 {
	if m != nil {
		return m.Evi
	}
	return 0
}

func (m *L2VpnEvpnLabel_KEYS) GetEsi1() string {
	if m != nil {
		return m.Esi1
	}
	return ""
}

func (m *L2VpnEvpnLabel_KEYS) GetEsi2() string {
	if m != nil {
		return m.Esi2
	}
	return ""
}

func (m *L2VpnEvpnLabel_KEYS) GetEsi3() string {
	if m != nil {
		return m.Esi3
	}
	return ""
}

func (m *L2VpnEvpnLabel_KEYS) GetEsi4() string {
	if m != nil {
		return m.Esi4
	}
	return ""
}

func (m *L2VpnEvpnLabel_KEYS) GetEsi5() string {
	if m != nil {
		return m.Esi5
	}
	return ""
}

func (m *L2VpnEvpnLabel_KEYS) GetEthernetTag() uint32 {
	if m != nil {
		return m.EthernetTag
	}
	return 0
}

type L2VpnLabelPathBuffer struct {
	NextHop              string   `protobuf:"bytes,1,opt,name=next_hop,json=nextHop,proto3" json:"next_hop,omitempty"`
	OutputLabel          uint32   `protobuf:"varint,2,opt,name=output_label,json=outputLabel,proto3" json:"output_label,omitempty"`
	SrteTunnel           string   `protobuf:"bytes,3,opt,name=srte_tunnel,json=srteTunnel,proto3" json:"srte_tunnel,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *L2VpnLabelPathBuffer) Reset()         { *m = L2VpnLabelPathBuffer{} }
func (m *L2VpnLabelPathBuffer) String() string { return proto.CompactTextString(m) }
func (*L2VpnLabelPathBuffer) ProtoMessage()    {}
func (*L2VpnLabelPathBuffer) Descriptor() ([]byte, []int) {
	return fileDescriptor_da030edbf6bf8249, []int{1}
}

func (m *L2VpnLabelPathBuffer) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2VpnLabelPathBuffer.Unmarshal(m, b)
}
func (m *L2VpnLabelPathBuffer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2VpnLabelPathBuffer.Marshal(b, m, deterministic)
}
func (m *L2VpnLabelPathBuffer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2VpnLabelPathBuffer.Merge(m, src)
}
func (m *L2VpnLabelPathBuffer) XXX_Size() int {
	return xxx_messageInfo_L2VpnLabelPathBuffer.Size(m)
}
func (m *L2VpnLabelPathBuffer) XXX_DiscardUnknown() {
	xxx_messageInfo_L2VpnLabelPathBuffer.DiscardUnknown(m)
}

var xxx_messageInfo_L2VpnLabelPathBuffer proto.InternalMessageInfo

func (m *L2VpnLabelPathBuffer) GetNextHop() string {
	if m != nil {
		return m.NextHop
	}
	return ""
}

func (m *L2VpnLabelPathBuffer) GetOutputLabel() uint32 {
	if m != nil {
		return m.OutputLabel
	}
	return 0
}

func (m *L2VpnLabelPathBuffer) GetSrteTunnel() string {
	if m != nil {
		return m.SrteTunnel
	}
	return ""
}

type L2VpnEvpnLabel struct {
	EviXr                      uint32                  `protobuf:"varint,50,opt,name=evi_xr,json=eviXr,proto3" json:"evi_xr,omitempty"`
	Esi                        []uint32                `protobuf:"varint,51,rep,packed,name=esi,proto3" json:"esi,omitempty"`
	Tag                        uint32                  `protobuf:"varint,52,opt,name=tag,proto3" json:"tag,omitempty"`
	InternalLabel              uint32                  `protobuf:"varint,53,opt,name=internal_label,json=internalLabel,proto3" json:"internal_label,omitempty"`
	Encap                      uint32                  `protobuf:"varint,54,opt,name=encap,proto3" json:"encap,omitempty"`
	MacNumPaths                uint32                  `protobuf:"varint,55,opt,name=mac_num_paths,json=macNumPaths,proto3" json:"mac_num_paths,omitempty"`
	MacPathBuffer              []*L2VpnLabelPathBuffer `protobuf:"bytes,56,rep,name=mac_path_buffer,json=macPathBuffer,proto3" json:"mac_path_buffer,omitempty"`
	EadNumPaths                uint32                  `protobuf:"varint,57,opt,name=ead_num_paths,json=eadNumPaths,proto3" json:"ead_num_paths,omitempty"`
	EadPathBuffer              []*L2VpnLabelPathBuffer `protobuf:"bytes,58,rep,name=ead_path_buffer,json=eadPathBuffer,proto3" json:"ead_path_buffer,omitempty"`
	EviNumPaths                uint32                  `protobuf:"varint,59,opt,name=evi_num_paths,json=eviNumPaths,proto3" json:"evi_num_paths,omitempty"`
	EviPathBuffer              []*L2VpnLabelPathBuffer `protobuf:"bytes,60,rep,name=evi_path_buffer,json=eviPathBuffer,proto3" json:"evi_path_buffer,omitempty"`
	SumNumPaths                uint32                  `protobuf:"varint,61,opt,name=sum_num_paths,json=sumNumPaths,proto3" json:"sum_num_paths,omitempty"`
	SumNumActivePaths          uint32                  `protobuf:"varint,62,opt,name=sum_num_active_paths,json=sumNumActivePaths,proto3" json:"sum_num_active_paths,omitempty"`
	SummaryPathBuffer          []*L2VpnLabelPathBuffer `protobuf:"bytes,63,rep,name=summary_path_buffer,json=summaryPathBuffer,proto3" json:"summary_path_buffer,omitempty"`
	Resolved                   bool                    `protobuf:"varint,64,opt,name=resolved,proto3" json:"resolved,omitempty"`
	EcmpDisable                bool                    `protobuf:"varint,65,opt,name=ecmp_disable,json=ecmpDisable,proto3" json:"ecmp_disable,omitempty"`
	RedundancySingleActive     bool                    `protobuf:"varint,66,opt,name=redundancy_single_active,json=redundancySingleActive,proto3" json:"redundancy_single_active,omitempty"`
	RedundancySingleFlowActive bool                    `protobuf:"varint,67,opt,name=redundancy_single_flow_active,json=redundancySingleFlowActive,proto3" json:"redundancy_single_flow_active,omitempty"`
	XXX_NoUnkeyedLiteral       struct{}                `json:"-"`
	XXX_unrecognized           []byte                  `json:"-"`
	XXX_sizecache              int32                   `json:"-"`
}

func (m *L2VpnEvpnLabel) Reset()         { *m = L2VpnEvpnLabel{} }
func (m *L2VpnEvpnLabel) String() string { return proto.CompactTextString(m) }
func (*L2VpnEvpnLabel) ProtoMessage()    {}
func (*L2VpnEvpnLabel) Descriptor() ([]byte, []int) {
	return fileDescriptor_da030edbf6bf8249, []int{2}
}

func (m *L2VpnEvpnLabel) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2VpnEvpnLabel.Unmarshal(m, b)
}
func (m *L2VpnEvpnLabel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2VpnEvpnLabel.Marshal(b, m, deterministic)
}
func (m *L2VpnEvpnLabel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2VpnEvpnLabel.Merge(m, src)
}
func (m *L2VpnEvpnLabel) XXX_Size() int {
	return xxx_messageInfo_L2VpnEvpnLabel.Size(m)
}
func (m *L2VpnEvpnLabel) XXX_DiscardUnknown() {
	xxx_messageInfo_L2VpnEvpnLabel.DiscardUnknown(m)
}

var xxx_messageInfo_L2VpnEvpnLabel proto.InternalMessageInfo

func (m *L2VpnEvpnLabel) GetEviXr() uint32 {
	if m != nil {
		return m.EviXr
	}
	return 0
}

func (m *L2VpnEvpnLabel) GetEsi() []uint32 {
	if m != nil {
		return m.Esi
	}
	return nil
}

func (m *L2VpnEvpnLabel) GetTag() uint32 {
	if m != nil {
		return m.Tag
	}
	return 0
}

func (m *L2VpnEvpnLabel) GetInternalLabel() uint32 {
	if m != nil {
		return m.InternalLabel
	}
	return 0
}

func (m *L2VpnEvpnLabel) GetEncap() uint32 {
	if m != nil {
		return m.Encap
	}
	return 0
}

func (m *L2VpnEvpnLabel) GetMacNumPaths() uint32 {
	if m != nil {
		return m.MacNumPaths
	}
	return 0
}

func (m *L2VpnEvpnLabel) GetMacPathBuffer() []*L2VpnLabelPathBuffer {
	if m != nil {
		return m.MacPathBuffer
	}
	return nil
}

func (m *L2VpnEvpnLabel) GetEadNumPaths() uint32 {
	if m != nil {
		return m.EadNumPaths
	}
	return 0
}

func (m *L2VpnEvpnLabel) GetEadPathBuffer() []*L2VpnLabelPathBuffer {
	if m != nil {
		return m.EadPathBuffer
	}
	return nil
}

func (m *L2VpnEvpnLabel) GetEviNumPaths() uint32 {
	if m != nil {
		return m.EviNumPaths
	}
	return 0
}

func (m *L2VpnEvpnLabel) GetEviPathBuffer() []*L2VpnLabelPathBuffer {
	if m != nil {
		return m.EviPathBuffer
	}
	return nil
}

func (m *L2VpnEvpnLabel) GetSumNumPaths() uint32 {
	if m != nil {
		return m.SumNumPaths
	}
	return 0
}

func (m *L2VpnEvpnLabel) GetSumNumActivePaths() uint32 {
	if m != nil {
		return m.SumNumActivePaths
	}
	return 0
}

func (m *L2VpnEvpnLabel) GetSummaryPathBuffer() []*L2VpnLabelPathBuffer {
	if m != nil {
		return m.SummaryPathBuffer
	}
	return nil
}

func (m *L2VpnEvpnLabel) GetResolved() bool {
	if m != nil {
		return m.Resolved
	}
	return false
}

func (m *L2VpnEvpnLabel) GetEcmpDisable() bool {
	if m != nil {
		return m.EcmpDisable
	}
	return false
}

func (m *L2VpnEvpnLabel) GetRedundancySingleActive() bool {
	if m != nil {
		return m.RedundancySingleActive
	}
	return false
}

func (m *L2VpnEvpnLabel) GetRedundancySingleFlowActive() bool {
	if m != nil {
		return m.RedundancySingleFlowActive
	}
	return false
}

func init() {
	proto.RegisterType((*L2VpnEvpnLabel_KEYS)(nil), "cisco_ios_xr_evpn_oper.evpn.active.internal_labels.internal_label.l2vpn_evpn_label_KEYS")
	proto.RegisterType((*L2VpnLabelPathBuffer)(nil), "cisco_ios_xr_evpn_oper.evpn.active.internal_labels.internal_label.l2vpn_label_path_buffer")
	proto.RegisterType((*L2VpnEvpnLabel)(nil), "cisco_ios_xr_evpn_oper.evpn.active.internal_labels.internal_label.l2vpn_evpn_label")
}

func init() { proto.RegisterFile("l2vpn_evpn_label.proto", fileDescriptor_da030edbf6bf8249) }

var fileDescriptor_da030edbf6bf8249 = []byte{
	// 584 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x94, 0x5d, 0x6f, 0xd3, 0x3c,
	0x14, 0x80, 0x95, 0xb7, 0xfb, 0xe8, 0xdc, 0xb7, 0xb0, 0x99, 0x6d, 0x98, 0x49, 0x88, 0x52, 0x09,
	0xa9, 0x57, 0x41, 0xb4, 0x1b, 0x8c, 0x6f, 0x3a, 0x3e, 0x84, 0x04, 0x42, 0x28, 0xdb, 0x05, 0x70,
	0x63, 0xb9, 0xc9, 0x69, 0x6b, 0x29, 0x71, 0x22, 0xdb, 0xc9, 0xba, 0x5b, 0x2e, 0xf9, 0x1b, 0xfc,
	0x01, 0x7e, 0x22, 0xb2, 0x9d, 0x86, 0xa4, 0x88, 0x2b, 0x34, 0x6e, 0x2a, 0xfb, 0x39, 0xe7, 0xd8,
	0xcf, 0x39, 0xae, 0x82, 0xf6, 0xe3, 0x61, 0x91, 0x09, 0x0a, 0xe6, 0x27, 0x66, 0x13, 0x88, 0xfd,
	0x4c, 0xa6, 0x3a, 0xc5, 0xe3, 0x90, 0xab, 0x30, 0xa5, 0x3c, 0x55, 0x74, 0x21, 0x5d, 0x38, 0xcd,
	0x40, 0xfa, 0x66, 0xe5, 0xb3, 0x50, 0xf3, 0x02, 0x7c, 0x2e, 0x34, 0x48, 0xc1, 0x62, 0x57, 0xa8,
	0x56, 0xf6, 0xfd, 0x1f, 0x1e, 0xda, 0x5b, 0x3d, 0x9d, 0xbe, 0x7b, 0xfd, 0xf9, 0x14, 0x6f, 0xa3,
	0x16, 0x14, 0x9c, 0x78, 0x3d, 0x6f, 0xd0, 0x0d, 0xcc, 0x12, 0x63, 0xb4, 0x06, 0x8a, 0xdf, 0x23,
	0xff, 0xf5, 0xbc, 0xc1, 0x56, 0x60, 0xd7, 0x25, 0x1b, 0x92, 0x56, 0xc5, 0x86, 0x25, 0x1b, 0x91,
	0xb5, 0x8a, 0x8d, 0x4a, 0x76, 0x48, 0xd6, 0x2b, 0x76, 0x58, 0xb2, 0x23, 0xb2, 0x51, 0xb1, 0x23,
	0x7c, 0x1b, 0xfd, 0x0f, 0x7a, 0x0e, 0x52, 0x80, 0xa6, 0x9a, 0xcd, 0xc8, 0xa6, 0xbd, 0xbe, 0xb3,
	0x64, 0x67, 0x6c, 0xd6, 0x5f, 0xa0, 0xeb, 0xce, 0xd8, 0xc9, 0x66, 0x4c, 0xcf, 0xe9, 0x24, 0x9f,
	0x4e, 0x41, 0xe2, 0x1b, 0xa8, 0x2d, 0x60, 0xa1, 0xe9, 0x3c, 0xcd, 0xac, 0xf8, 0x56, 0xb0, 0x69,
	0xf6, 0x6f, 0xd3, 0xcc, 0x1c, 0x9c, 0xe6, 0x3a, 0xcb, 0xb5, 0x2b, 0xb3, 0x4d, 0x74, 0x83, 0x8e,
	0x63, 0xef, 0x0d, 0xc2, 0xb7, 0x50, 0x47, 0x49, 0x0d, 0x54, 0xe7, 0x42, 0x40, 0x5c, 0xb6, 0x84,
	0x0c, 0x3a, 0xb3, 0xa4, 0xff, 0xbd, 0x8d, 0xb6, 0x57, 0x87, 0x85, 0xf7, 0xd0, 0x06, 0x14, 0x9c,
	0x2e, 0x24, 0x19, 0xda, 0x23, 0xd7, 0xa1, 0xe0, 0x9f, 0xa4, 0x1d, 0x9f, 0xe2, 0x64, 0xd4, 0x6b,
	0xd9, 0xf1, 0x29, 0x6e, 0x88, 0xe9, 0xe8, 0xd0, 0x0d, 0x54, 0xb3, 0x19, 0xbe, 0x83, 0xae, 0x34,
	0x9f, 0x83, 0x1c, 0xd9, 0x60, 0x77, 0x49, 0x9d, 0xd7, 0x2e, 0x5a, 0x07, 0x11, 0xb2, 0x8c, 0xdc,
	0x2f, 0x2f, 0x30, 0x1b, 0xdc, 0x47, 0xdd, 0x84, 0x85, 0x54, 0xe4, 0x89, 0x1d, 0x81, 0x22, 0x0f,
	0x5c, 0x47, 0x09, 0x0b, 0x3f, 0xe4, 0xc9, 0x47, 0x83, 0xf0, 0x57, 0x0f, 0x5d, 0x35, 0x49, 0xb5,
	0x19, 0x91, 0xe3, 0x5e, 0x6b, 0xd0, 0x19, 0x7e, 0xf1, 0xff, 0xfa, 0xbf, 0xe3, 0xff, 0xe1, 0x15,
	0x02, 0xe3, 0x65, 0xee, 0x3f, 0x71, 0x8f, 0xd2, 0x47, 0x5d, 0x60, 0x51, 0x4d, 0xf4, 0x61, 0xf9,
	0xa6, 0x2c, 0x6a, 0x88, 0x9a, 0xa4, 0xba, 0xe8, 0xa3, 0xcb, 0x17, 0x05, 0x16, 0xad, 0x88, 0x16,
	0xbc, 0x26, 0xfa, 0xb8, 0x14, 0x2d, 0x78, 0x53, 0xb4, 0xe0, 0x0d, 0xd1, 0x27, 0xff, 0x40, 0xb4,
	0xe0, 0x4d, 0x51, 0x95, 0x27, 0x35, 0xd1, 0xa7, 0x4e, 0x54, 0xe5, 0x49, 0x25, 0x7a, 0x17, 0xed,
	0x2e, 0x73, 0xdc, 0xdd, 0x65, 0xea, 0x33, 0x9b, 0xba, 0xe3, 0x52, 0xc7, 0x36, 0xe2, 0x0a, 0xbe,
	0x79, 0xe8, 0x9a, 0xca, 0x93, 0x84, 0xc9, 0x8b, 0x46, 0x77, 0xcf, 0x2f, 0xbd, 0xbb, 0x9d, 0xf2,
	0xda, 0x5a, 0x87, 0x07, 0xa8, 0x2d, 0x41, 0xa5, 0x71, 0x01, 0x11, 0x79, 0xd1, 0xf3, 0x06, 0xed,
	0xa0, 0xda, 0xdb, 0x4f, 0x44, 0x98, 0x64, 0x34, 0xe2, 0x8a, 0x4d, 0x62, 0x20, 0x63, 0x1b, 0xef,
	0x18, 0xf6, 0xca, 0x21, 0x7c, 0x8c, 0x88, 0x84, 0x28, 0x17, 0x11, 0x13, 0xe1, 0x05, 0x55, 0x5c,
	0xcc, 0x62, 0x28, 0xc7, 0x40, 0x4e, 0x6c, 0xfa, 0xfe, 0xaf, 0xf8, 0xa9, 0x0d, 0xbb, 0x51, 0xe0,
	0x31, 0xba, 0xf9, 0x7b, 0xe5, 0x34, 0x4e, 0xcf, 0x97, 0xe5, 0x2f, 0x6d, 0xf9, 0xc1, 0x6a, 0xf9,
	0x9b, 0x38, 0x3d, 0x77, 0x47, 0x4c, 0x36, 0xec, 0xc7, 0x79, 0xf4, 0x33, 0x00, 0x00, 0xff, 0xff,
	0xf8, 0xc3, 0xda, 0x66, 0xb6, 0x05, 0x00, 0x00,
}
