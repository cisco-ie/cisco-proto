/*
Copyright 2019 Cisco Systems

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: crypto_log.proto

package cisco_ios_xr_crypto_sam_oper_sam_log_contents_log_content

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type CryptoLog_KEYS struct {
	NumberOfLines        uint32   `protobuf:"varint,1,opt,name=number_of_lines,json=numberOfLines,proto3" json:"number_of_lines,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CryptoLog_KEYS) Reset()         { *m = CryptoLog_KEYS{} }
func (m *CryptoLog_KEYS) String() string { return proto.CompactTextString(m) }
func (*CryptoLog_KEYS) ProtoMessage()    {}
func (*CryptoLog_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_d541b035a20625d5, []int{0}
}

func (m *CryptoLog_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CryptoLog_KEYS.Unmarshal(m, b)
}
func (m *CryptoLog_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CryptoLog_KEYS.Marshal(b, m, deterministic)
}
func (m *CryptoLog_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CryptoLog_KEYS.Merge(m, src)
}
func (m *CryptoLog_KEYS) XXX_Size() int {
	return xxx_messageInfo_CryptoLog_KEYS.Size(m)
}
func (m *CryptoLog_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_CryptoLog_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_CryptoLog_KEYS proto.InternalMessageInfo

func (m *CryptoLog_KEYS) GetNumberOfLines() uint32 {
	if m != nil {
		return m.NumberOfLines
	}
	return 0
}

type LogSamInfo struct {
	Time                 string   `protobuf:"bytes,1,opt,name=time,proto3" json:"time,omitempty"`
	Code                 string   `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	TargetDevice         string   `protobuf:"bytes,3,opt,name=target_device,json=targetDevice,proto3" json:"target_device,omitempty"`
	Index                uint32   `protobuf:"varint,4,opt,name=index,proto3" json:"index,omitempty"`
	Error                string   `protobuf:"bytes,5,opt,name=error,proto3" json:"error,omitempty"`
	Issuer               string   `protobuf:"bytes,6,opt,name=issuer,proto3" json:"issuer,omitempty"`
	SerialNo             string   `protobuf:"bytes,7,opt,name=serial_no,json=serialNo,proto3" json:"serial_no,omitempty"`
	SamTableIndex        uint32   `protobuf:"varint,8,opt,name=sam_table_index,json=samTableIndex,proto3" json:"sam_table_index,omitempty"`
	UpdateTime           string   `protobuf:"bytes,9,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	SourceDevice         string   `protobuf:"bytes,10,opt,name=source_device,json=sourceDevice,proto3" json:"source_device,omitempty"`
	Table                string   `protobuf:"bytes,11,opt,name=table,proto3" json:"table,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LogSamInfo) Reset()         { *m = LogSamInfo{} }
func (m *LogSamInfo) String() string { return proto.CompactTextString(m) }
func (*LogSamInfo) ProtoMessage()    {}
func (*LogSamInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d541b035a20625d5, []int{1}
}

func (m *LogSamInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LogSamInfo.Unmarshal(m, b)
}
func (m *LogSamInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LogSamInfo.Marshal(b, m, deterministic)
}
func (m *LogSamInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogSamInfo.Merge(m, src)
}
func (m *LogSamInfo) XXX_Size() int {
	return xxx_messageInfo_LogSamInfo.Size(m)
}
func (m *LogSamInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_LogSamInfo.DiscardUnknown(m)
}

var xxx_messageInfo_LogSamInfo proto.InternalMessageInfo

func (m *LogSamInfo) GetTime() string {
	if m != nil {
		return m.Time
	}
	return ""
}

func (m *LogSamInfo) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *LogSamInfo) GetTargetDevice() string {
	if m != nil {
		return m.TargetDevice
	}
	return ""
}

func (m *LogSamInfo) GetIndex() uint32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *LogSamInfo) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *LogSamInfo) GetIssuer() string {
	if m != nil {
		return m.Issuer
	}
	return ""
}

func (m *LogSamInfo) GetSerialNo() string {
	if m != nil {
		return m.SerialNo
	}
	return ""
}

func (m *LogSamInfo) GetSamTableIndex() uint32 {
	if m != nil {
		return m.SamTableIndex
	}
	return 0
}

func (m *LogSamInfo) GetUpdateTime() string {
	if m != nil {
		return m.UpdateTime
	}
	return ""
}

func (m *LogSamInfo) GetSourceDevice() string {
	if m != nil {
		return m.SourceDevice
	}
	return ""
}

func (m *LogSamInfo) GetTable() string {
	if m != nil {
		return m.Table
	}
	return ""
}

type CryptoLog struct {
	Logs                 []*LogSamInfo `protobuf:"bytes,50,rep,name=logs,proto3" json:"logs,omitempty"`
	TotalEntries         uint32        `protobuf:"varint,51,opt,name=total_entries,json=totalEntries,proto3" json:"total_entries,omitempty"`
	EntriesShown         uint32        `protobuf:"varint,52,opt,name=entries_shown,json=entriesShown,proto3" json:"entries_shown,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *CryptoLog) Reset()         { *m = CryptoLog{} }
func (m *CryptoLog) String() string { return proto.CompactTextString(m) }
func (*CryptoLog) ProtoMessage()    {}
func (*CryptoLog) Descriptor() ([]byte, []int) {
	return fileDescriptor_d541b035a20625d5, []int{2}
}

func (m *CryptoLog) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CryptoLog.Unmarshal(m, b)
}
func (m *CryptoLog) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CryptoLog.Marshal(b, m, deterministic)
}
func (m *CryptoLog) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CryptoLog.Merge(m, src)
}
func (m *CryptoLog) XXX_Size() int {
	return xxx_messageInfo_CryptoLog.Size(m)
}
func (m *CryptoLog) XXX_DiscardUnknown() {
	xxx_messageInfo_CryptoLog.DiscardUnknown(m)
}

var xxx_messageInfo_CryptoLog proto.InternalMessageInfo

func (m *CryptoLog) GetLogs() []*LogSamInfo {
	if m != nil {
		return m.Logs
	}
	return nil
}

func (m *CryptoLog) GetTotalEntries() uint32 {
	if m != nil {
		return m.TotalEntries
	}
	return 0
}

func (m *CryptoLog) GetEntriesShown() uint32 {
	if m != nil {
		return m.EntriesShown
	}
	return 0
}

func init() {
	proto.RegisterType((*CryptoLog_KEYS)(nil), "cisco_ios_xr_crypto_sam_oper.sam.log_contents.log_content.crypto_log_KEYS")
	proto.RegisterType((*LogSamInfo)(nil), "cisco_ios_xr_crypto_sam_oper.sam.log_contents.log_content.log_sam_info")
	proto.RegisterType((*CryptoLog)(nil), "cisco_ios_xr_crypto_sam_oper.sam.log_contents.log_content.crypto_log")
}

func init() { proto.RegisterFile("crypto_log.proto", fileDescriptor_d541b035a20625d5) }

var fileDescriptor_d541b035a20625d5 = []byte{
	// 375 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x92, 0x41, 0xcb, 0x13, 0x31,
	0x10, 0x86, 0xe9, 0xf7, 0xf5, 0xab, 0xed, 0xb4, 0x4b, 0x25, 0x88, 0x04, 0x3c, 0x58, 0x5a, 0x90,
	0x9e, 0xf6, 0xd0, 0x7a, 0xe9, 0xdd, 0x22, 0xa2, 0x28, 0xb4, 0xbd, 0x88, 0x87, 0x90, 0xee, 0x4e,
	0xd7, 0xc0, 0x6e, 0x66, 0x49, 0xb2, 0x5a, 0x7f, 0x97, 0x7f, 0xc0, 0x9f, 0x26, 0x99, 0xac, 0xb4,
	0x67, 0x6f, 0x79, 0x9f, 0x99, 0xcc, 0x9b, 0x37, 0x09, 0x3c, 0x2f, 0xdc, 0xaf, 0x36, 0x90, 0xaa,
	0xa9, 0xca, 0x5b, 0x47, 0x81, 0xc4, 0xae, 0x30, 0xbe, 0x20, 0x65, 0xc8, 0xab, 0xab, 0x53, 0x7d,
	0xd9, 0xeb, 0x46, 0x51, 0x8b, 0x2e, 0xf7, 0xba, 0xc9, 0x6b, 0xaa, 0x54, 0x41, 0x36, 0xa0, 0x0d,
	0xfe, 0x5e, 0x2c, 0x77, 0x30, 0xbf, 0x8d, 0x53, 0x1f, 0xf7, 0x5f, 0x8f, 0xe2, 0x0d, 0xcc, 0x6d,
	0xd7, 0x9c, 0xd1, 0x29, 0xba, 0xa8, 0xda, 0x58, 0xf4, 0x72, 0xb0, 0x18, 0xac, 0xb3, 0x43, 0x96,
	0xf0, 0x97, 0xcb, 0xa7, 0x08, 0x97, 0x7f, 0x1e, 0x60, 0x16, 0x37, 0x45, 0x23, 0x63, 0x2f, 0x24,
	0x04, 0x0c, 0x83, 0x69, 0x90, 0xbb, 0x27, 0x07, 0x5e, 0x47, 0x56, 0x50, 0x89, 0xf2, 0x21, 0xb1,
	0xb8, 0x16, 0x2b, 0xc8, 0x82, 0x76, 0x15, 0x06, 0x55, 0xe2, 0x0f, 0x53, 0xa0, 0x7c, 0xe4, 0xe2,
	0x2c, 0xc1, 0x77, 0xcc, 0xc4, 0x0b, 0x78, 0x32, 0xb6, 0xc4, 0xab, 0x1c, 0xb2, 0x77, 0x12, 0x91,
	0xa2, 0x73, 0xe4, 0xe4, 0x13, 0x6f, 0x49, 0x42, 0xbc, 0x84, 0x91, 0xf1, 0xbe, 0x43, 0x27, 0x47,
	0x8c, 0x7b, 0x25, 0x5e, 0xc1, 0xc4, 0xa3, 0x33, 0xba, 0x56, 0x96, 0xe4, 0x33, 0x2e, 0x8d, 0x13,
	0xf8, 0x4c, 0x31, 0x66, 0x3c, 0x79, 0xd0, 0xe7, 0x1a, 0x55, 0xb2, 0x1a, 0xa7, 0x98, 0x5e, 0x37,
	0xa7, 0x48, 0x3f, 0xb0, 0xe5, 0x6b, 0x98, 0x76, 0x6d, 0xa9, 0x03, 0x2a, 0x0e, 0x37, 0xe1, 0x31,
	0x90, 0xd0, 0x29, 0x46, 0x5c, 0x41, 0xe6, 0xa9, 0x73, 0x05, 0xfe, 0x8b, 0x03, 0x29, 0x4e, 0x82,
	0xb7, 0x38, 0xec, 0x24, 0xa7, 0xe9, 0xe0, 0x2c, 0x96, 0xbf, 0x07, 0x00, 0xb7, 0xeb, 0x17, 0xdf,
	0x60, 0x58, 0x53, 0xe5, 0xe5, 0x66, 0xf1, 0xb8, 0x9e, 0x6e, 0xde, 0xe7, 0xff, 0xfd, 0xac, 0xf9,
	0xfd, 0xbb, 0x1c, 0x78, 0x28, 0xdf, 0x3a, 0x05, 0x5d, 0x2b, 0xb4, 0xc1, 0x19, 0xf4, 0x72, 0xcb,
	0x69, 0x67, 0x0c, 0xf7, 0x89, 0xc5, 0xa6, 0xbe, 0xac, 0xfc, 0x77, 0xfa, 0x69, 0xe5, 0xdb, 0xd4,
	0xd4, 0xc3, 0x63, 0x64, 0xe7, 0x11, 0xff, 0xba, 0xed, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x67,
	0x52, 0xa5, 0x97, 0x89, 0x02, 0x00, 0x00,
}
