/*
Copyright 2019 Cisco Systems

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ipsla_lpd_state_bag.proto

package cisco_ios_xr_man_ipsla_oper_ipsla_operation_data_operations_operation_lpd_status_state

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type IpslaLpdStateBag_KEYS struct {
	OperationId          int32    `protobuf:"varint,1,opt,name=operation_id,json=operationId,proto3" json:"operation_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IpslaLpdStateBag_KEYS) Reset()         { *m = IpslaLpdStateBag_KEYS{} }
func (m *IpslaLpdStateBag_KEYS) String() string { return proto.CompactTextString(m) }
func (*IpslaLpdStateBag_KEYS) ProtoMessage()    {}
func (*IpslaLpdStateBag_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_63c4243c7a2c0ecf, []int{0}
}

func (m *IpslaLpdStateBag_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IpslaLpdStateBag_KEYS.Unmarshal(m, b)
}
func (m *IpslaLpdStateBag_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IpslaLpdStateBag_KEYS.Marshal(b, m, deterministic)
}
func (m *IpslaLpdStateBag_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IpslaLpdStateBag_KEYS.Merge(m, src)
}
func (m *IpslaLpdStateBag_KEYS) XXX_Size() int {
	return xxx_messageInfo_IpslaLpdStateBag_KEYS.Size(m)
}
func (m *IpslaLpdStateBag_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_IpslaLpdStateBag_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_IpslaLpdStateBag_KEYS proto.InternalMessageInfo

func (m *IpslaLpdStateBag_KEYS) GetOperationId() int32 {
	if m != nil {
		return m.OperationId
	}
	return 0
}

type IpslaIpv4PrefixT struct {
	Address              string   `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	MaskLength           uint32   `protobuf:"varint,2,opt,name=mask_length,json=maskLength,proto3" json:"mask_length,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IpslaIpv4PrefixT) Reset()         { *m = IpslaIpv4PrefixT{} }
func (m *IpslaIpv4PrefixT) String() string { return proto.CompactTextString(m) }
func (*IpslaIpv4PrefixT) ProtoMessage()    {}
func (*IpslaIpv4PrefixT) Descriptor() ([]byte, []int) {
	return fileDescriptor_63c4243c7a2c0ecf, []int{1}
}

func (m *IpslaIpv4PrefixT) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IpslaIpv4PrefixT.Unmarshal(m, b)
}
func (m *IpslaIpv4PrefixT) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IpslaIpv4PrefixT.Marshal(b, m, deterministic)
}
func (m *IpslaIpv4PrefixT) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IpslaIpv4PrefixT.Merge(m, src)
}
func (m *IpslaIpv4PrefixT) XXX_Size() int {
	return xxx_messageInfo_IpslaIpv4PrefixT.Size(m)
}
func (m *IpslaIpv4PrefixT) XXX_DiscardUnknown() {
	xxx_messageInfo_IpslaIpv4PrefixT.DiscardUnknown(m)
}

var xxx_messageInfo_IpslaIpv4PrefixT proto.InternalMessageInfo

func (m *IpslaIpv4PrefixT) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *IpslaIpv4PrefixT) GetMaskLength() uint32 {
	if m != nil {
		return m.MaskLength
	}
	return 0
}

type IpslaTunnelIdT struct {
	TunnelId             uint32   `protobuf:"varint,1,opt,name=tunnel_id,json=tunnelId,proto3" json:"tunnel_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IpslaTunnelIdT) Reset()         { *m = IpslaTunnelIdT{} }
func (m *IpslaTunnelIdT) String() string { return proto.CompactTextString(m) }
func (*IpslaTunnelIdT) ProtoMessage()    {}
func (*IpslaTunnelIdT) Descriptor() ([]byte, []int) {
	return fileDescriptor_63c4243c7a2c0ecf, []int{2}
}

func (m *IpslaTunnelIdT) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IpslaTunnelIdT.Unmarshal(m, b)
}
func (m *IpslaTunnelIdT) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IpslaTunnelIdT.Marshal(b, m, deterministic)
}
func (m *IpslaTunnelIdT) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IpslaTunnelIdT.Merge(m, src)
}
func (m *IpslaTunnelIdT) XXX_Size() int {
	return xxx_messageInfo_IpslaTunnelIdT.Size(m)
}
func (m *IpslaTunnelIdT) XXX_DiscardUnknown() {
	xxx_messageInfo_IpslaTunnelIdT.DiscardUnknown(m)
}

var xxx_messageInfo_IpslaTunnelIdT proto.InternalMessageInfo

func (m *IpslaTunnelIdT) GetTunnelId() uint32 {
	if m != nil {
		return m.TunnelId
	}
	return 0
}

type IpslaIpv4PwT struct {
	Address              string   `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	VirtualCircuitId     uint32   `protobuf:"varint,2,opt,name=virtual_circuit_id,json=virtualCircuitId,proto3" json:"virtual_circuit_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IpslaIpv4PwT) Reset()         { *m = IpslaIpv4PwT{} }
func (m *IpslaIpv4PwT) String() string { return proto.CompactTextString(m) }
func (*IpslaIpv4PwT) ProtoMessage()    {}
func (*IpslaIpv4PwT) Descriptor() ([]byte, []int) {
	return fileDescriptor_63c4243c7a2c0ecf, []int{3}
}

func (m *IpslaIpv4PwT) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IpslaIpv4PwT.Unmarshal(m, b)
}
func (m *IpslaIpv4PwT) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IpslaIpv4PwT.Marshal(b, m, deterministic)
}
func (m *IpslaIpv4PwT) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IpslaIpv4PwT.Merge(m, src)
}
func (m *IpslaIpv4PwT) XXX_Size() int {
	return xxx_messageInfo_IpslaIpv4PwT.Size(m)
}
func (m *IpslaIpv4PwT) XXX_DiscardUnknown() {
	xxx_messageInfo_IpslaIpv4PwT.DiscardUnknown(m)
}

var xxx_messageInfo_IpslaIpv4PwT proto.InternalMessageInfo

func (m *IpslaIpv4PwT) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *IpslaIpv4PwT) GetVirtualCircuitId() uint32 {
	if m != nil {
		return m.VirtualCircuitId
	}
	return 0
}

type IpslaTargetUnion struct {
	TargetType           string            `protobuf:"bytes,1,opt,name=target_type,json=targetType,proto3" json:"target_type,omitempty"`
	Ipv4AddressTarget    string            `protobuf:"bytes,2,opt,name=ipv4_address_target,json=ipv4AddressTarget,proto3" json:"ipv4_address_target,omitempty"`
	Ipv4PrefixTarget     *IpslaIpv4PrefixT `protobuf:"bytes,3,opt,name=ipv4_prefix_target,json=ipv4PrefixTarget,proto3" json:"ipv4_prefix_target,omitempty"`
	TunnelIdTarget       *IpslaTunnelIdT   `protobuf:"bytes,4,opt,name=tunnel_id_target,json=tunnelIdTarget,proto3" json:"tunnel_id_target,omitempty"`
	Ipv4PseudowireTarget *IpslaIpv4PwT     `protobuf:"bytes,5,opt,name=ipv4_pseudowire_target,json=ipv4PseudowireTarget,proto3" json:"ipv4_pseudowire_target,omitempty"`
	Ipv6AddressTarget    string            `protobuf:"bytes,6,opt,name=ipv6_address_target,json=ipv6AddressTarget,proto3" json:"ipv6_address_target,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *IpslaTargetUnion) Reset()         { *m = IpslaTargetUnion{} }
func (m *IpslaTargetUnion) String() string { return proto.CompactTextString(m) }
func (*IpslaTargetUnion) ProtoMessage()    {}
func (*IpslaTargetUnion) Descriptor() ([]byte, []int) {
	return fileDescriptor_63c4243c7a2c0ecf, []int{4}
}

func (m *IpslaTargetUnion) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IpslaTargetUnion.Unmarshal(m, b)
}
func (m *IpslaTargetUnion) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IpslaTargetUnion.Marshal(b, m, deterministic)
}
func (m *IpslaTargetUnion) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IpslaTargetUnion.Merge(m, src)
}
func (m *IpslaTargetUnion) XXX_Size() int {
	return xxx_messageInfo_IpslaTargetUnion.Size(m)
}
func (m *IpslaTargetUnion) XXX_DiscardUnknown() {
	xxx_messageInfo_IpslaTargetUnion.DiscardUnknown(m)
}

var xxx_messageInfo_IpslaTargetUnion proto.InternalMessageInfo

func (m *IpslaTargetUnion) GetTargetType() string {
	if m != nil {
		return m.TargetType
	}
	return ""
}

func (m *IpslaTargetUnion) GetIpv4AddressTarget() string {
	if m != nil {
		return m.Ipv4AddressTarget
	}
	return ""
}

func (m *IpslaTargetUnion) GetIpv4PrefixTarget() *IpslaIpv4PrefixT {
	if m != nil {
		return m.Ipv4PrefixTarget
	}
	return nil
}

func (m *IpslaTargetUnion) GetTunnelIdTarget() *IpslaTunnelIdT {
	if m != nil {
		return m.TunnelIdTarget
	}
	return nil
}

func (m *IpslaTargetUnion) GetIpv4PseudowireTarget() *IpslaIpv4PwT {
	if m != nil {
		return m.Ipv4PseudowireTarget
	}
	return nil
}

func (m *IpslaTargetUnion) GetIpv6AddressTarget() string {
	if m != nil {
		return m.Ipv6AddressTarget
	}
	return ""
}

type IpslaLpdStateBag struct {
	MonitorId            uint32            `protobuf:"varint,50,opt,name=monitor_id,json=monitorId,proto3" json:"monitor_id,omitempty"`
	TargetAddress        *IpslaTargetUnion `protobuf:"bytes,51,opt,name=target_address,json=targetAddress,proto3" json:"target_address,omitempty"`
	DiscoveryMode        string            `protobuf:"bytes,52,opt,name=discovery_mode,json=discoveryMode,proto3" json:"discovery_mode,omitempty"`
	StartTime            uint64            `protobuf:"varint,53,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	ReturnCode           string            `protobuf:"bytes,54,opt,name=return_code,json=returnCode,proto3" json:"return_code,omitempty"`
	CompletionTime       uint32            `protobuf:"varint,55,opt,name=completion_time,json=completionTime,proto3" json:"completion_time,omitempty"`
	PathCount            uint32            `protobuf:"varint,56,opt,name=path_count,json=pathCount,proto3" json:"path_count,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *IpslaLpdStateBag) Reset()         { *m = IpslaLpdStateBag{} }
func (m *IpslaLpdStateBag) String() string { return proto.CompactTextString(m) }
func (*IpslaLpdStateBag) ProtoMessage()    {}
func (*IpslaLpdStateBag) Descriptor() ([]byte, []int) {
	return fileDescriptor_63c4243c7a2c0ecf, []int{5}
}

func (m *IpslaLpdStateBag) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IpslaLpdStateBag.Unmarshal(m, b)
}
func (m *IpslaLpdStateBag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IpslaLpdStateBag.Marshal(b, m, deterministic)
}
func (m *IpslaLpdStateBag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IpslaLpdStateBag.Merge(m, src)
}
func (m *IpslaLpdStateBag) XXX_Size() int {
	return xxx_messageInfo_IpslaLpdStateBag.Size(m)
}
func (m *IpslaLpdStateBag) XXX_DiscardUnknown() {
	xxx_messageInfo_IpslaLpdStateBag.DiscardUnknown(m)
}

var xxx_messageInfo_IpslaLpdStateBag proto.InternalMessageInfo

func (m *IpslaLpdStateBag) GetMonitorId() uint32 {
	if m != nil {
		return m.MonitorId
	}
	return 0
}

func (m *IpslaLpdStateBag) GetTargetAddress() *IpslaTargetUnion {
	if m != nil {
		return m.TargetAddress
	}
	return nil
}

func (m *IpslaLpdStateBag) GetDiscoveryMode() string {
	if m != nil {
		return m.DiscoveryMode
	}
	return ""
}

func (m *IpslaLpdStateBag) GetStartTime() uint64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *IpslaLpdStateBag) GetReturnCode() string {
	if m != nil {
		return m.ReturnCode
	}
	return ""
}

func (m *IpslaLpdStateBag) GetCompletionTime() uint32 {
	if m != nil {
		return m.CompletionTime
	}
	return 0
}

func (m *IpslaLpdStateBag) GetPathCount() uint32 {
	if m != nil {
		return m.PathCount
	}
	return 0
}

func init() {
	proto.RegisterType((*IpslaLpdStateBag_KEYS)(nil), "cisco_ios_xr_man_ipsla_oper.ipsla.operation_data.operations.operation.lpd.status.state.ipsla_lpd_state_bag_KEYS")
	proto.RegisterType((*IpslaIpv4PrefixT)(nil), "cisco_ios_xr_man_ipsla_oper.ipsla.operation_data.operations.operation.lpd.status.state.ipsla_ipv4_prefix_t")
	proto.RegisterType((*IpslaTunnelIdT)(nil), "cisco_ios_xr_man_ipsla_oper.ipsla.operation_data.operations.operation.lpd.status.state.ipsla_tunnel_id_t")
	proto.RegisterType((*IpslaIpv4PwT)(nil), "cisco_ios_xr_man_ipsla_oper.ipsla.operation_data.operations.operation.lpd.status.state.ipsla_ipv4_pw_t")
	proto.RegisterType((*IpslaTargetUnion)(nil), "cisco_ios_xr_man_ipsla_oper.ipsla.operation_data.operations.operation.lpd.status.state.ipsla_target_union")
	proto.RegisterType((*IpslaLpdStateBag)(nil), "cisco_ios_xr_man_ipsla_oper.ipsla.operation_data.operations.operation.lpd.status.state.ipsla_lpd_state_bag")
}

func init() { proto.RegisterFile("ipsla_lpd_state_bag.proto", fileDescriptor_63c4243c7a2c0ecf) }

var fileDescriptor_63c4243c7a2c0ecf = []byte{
	// 567 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x54, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0x96, 0x4b, 0x5b, 0xc8, 0x84, 0xa4, 0xe9, 0x82, 0x90, 0x11, 0xaa, 0x08, 0x96, 0x10, 0x39,
	0x20, 0x0b, 0xb5, 0x21, 0x70, 0xe1, 0x80, 0x22, 0x0e, 0x11, 0x20, 0x55, 0x26, 0x42, 0xea, 0x69,
	0xb4, 0xf5, 0x2e, 0xe9, 0x52, 0xdb, 0x6b, 0xad, 0xd7, 0x49, 0xf3, 0x18, 0x88, 0x13, 0x07, 0x9e,
	0x8f, 0x47, 0xe0, 0x8a, 0xf6, 0x27, 0x89, 0x8b, 0x2a, 0x6e, 0xe1, 0x94, 0x9d, 0x6f, 0x3c, 0x33,
	0xdf, 0xcc, 0x7c, 0x13, 0x78, 0x28, 0xca, 0x2a, 0xa3, 0x98, 0x95, 0x0c, 0x2b, 0x4d, 0x35, 0xc7,
	0x73, 0x3a, 0x8b, 0x4b, 0x25, 0xb5, 0x24, 0x9f, 0x53, 0x51, 0xa5, 0x12, 0x85, 0xac, 0xf0, 0x4a,
	0x61, 0x4e, 0x0b, 0x74, 0xdf, 0xca, 0x92, 0xab, 0xd8, 0x3e, 0x63, 0xf3, 0xa4, 0x5a, 0xc8, 0x02,
	0x19, 0xd5, 0x0d, 0xb3, 0xda, 0x3c, 0xe3, 0xac, 0x64, 0xb1, 0x49, 0x5d, 0x57, 0xf6, 0x87, 0x47,
	0x6f, 0x20, 0xbc, 0xa1, 0x28, 0xbe, 0x7f, 0x77, 0xf6, 0x89, 0x3c, 0x81, 0xbb, 0x9b, 0x9c, 0x82,
	0x85, 0x41, 0x3f, 0x18, 0xec, 0x25, 0xed, 0x35, 0x36, 0x61, 0xd1, 0x29, 0xdc, 0x73, 0xe1, 0xa2,
	0x9c, 0x0f, 0xb1, 0x54, 0xfc, 0x8b, 0xb8, 0x42, 0x4d, 0x42, 0xb8, 0x4d, 0x19, 0x53, 0xbc, 0xaa,
	0x6c, 0x50, 0x2b, 0x59, 0x99, 0xe4, 0x31, 0xb4, 0x73, 0x5a, 0x5d, 0x62, 0xc6, 0x8b, 0x99, 0xbe,
	0x08, 0x77, 0xfa, 0xc1, 0xa0, 0x93, 0x80, 0x81, 0x3e, 0x58, 0x24, 0x7a, 0x01, 0x87, 0x2e, 0xa3,
	0xae, 0x8b, 0x82, 0x67, 0x28, 0x18, 0x6a, 0xf2, 0x08, 0x5a, 0x6b, 0xd3, 0x66, 0xec, 0x24, 0x77,
	0x1c, 0x30, 0x61, 0xd1, 0x19, 0x1c, 0x34, 0x39, 0x2c, 0xfe, 0x59, 0xff, 0x39, 0x90, 0xb9, 0x50,
	0xba, 0xa6, 0x19, 0xa6, 0x42, 0xa5, 0xb5, 0xd0, 0x26, 0xa5, 0xa3, 0xd1, 0xf3, 0x9e, 0xb1, 0x73,
	0x4c, 0x58, 0xf4, 0x6b, 0x17, 0x88, 0x67, 0x43, 0xd5, 0x8c, 0x6b, 0xac, 0x0b, 0x21, 0x0b, 0xd3,
	0x84, 0xb7, 0xf5, 0xb2, 0xe4, 0xbe, 0x04, 0x38, 0x68, 0xba, 0x2c, 0x39, 0x89, 0xcd, 0x58, 0xe6,
	0x43, 0xf4, 0x55, 0x7d, 0xb4, 0x2d, 0xd3, 0x4a, 0x0e, 0x8d, 0xeb, 0xad, 0xf3, 0x4c, 0xad, 0x83,
	0xfc, 0x08, 0x4c, 0x9d, 0xc6, 0x04, 0xdd, 0xf7, 0xb7, 0xfa, 0xc1, 0xa0, 0x7d, 0x7c, 0x19, 0x6f,
	0x67, 0xf7, 0xf1, 0x0d, 0x9b, 0x4b, 0x7a, 0xc6, 0x3c, 0xb5, 0x96, 0xe7, 0xf6, 0x3d, 0x80, 0x5e,
	0x63, 0x17, 0x8e, 0xd9, 0xae, 0x65, 0x26, 0xb6, 0xcb, 0xac, 0x51, 0x35, 0xe9, 0xae, 0xd6, 0xed,
	0x59, 0xfd, 0x0c, 0xe0, 0x81, 0x63, 0x5e, 0xf1, 0x9a, 0xc9, 0x85, 0x50, 0x7c, 0xc5, 0x6d, 0xcf,
	0x72, 0x9b, 0xfd, 0x8f, 0xa9, 0x2d, 0x50, 0x27, 0xf7, 0xed, 0xc4, 0xd6, 0x2c, 0x3c, 0x3f, 0xa7,
	0x80, 0xd1, 0xdf, 0x0a, 0xd8, 0x5f, 0x2b, 0x60, 0x74, 0x4d, 0x01, 0xd1, 0xef, 0x9d, 0xd5, 0x25,
	0x5d, 0x3b, 0x44, 0x72, 0x04, 0x90, 0xcb, 0x42, 0x68, 0xa9, 0x8c, 0x4e, 0x8f, 0xad, 0x4e, 0x5b,
	0x1e, 0x99, 0x30, 0xf2, 0x2d, 0x80, 0xae, 0x97, 0xe2, 0x4a, 0xf0, 0x27, 0xb6, 0xfd, 0xaf, 0x5b,
	0x5e, 0x4d, 0xe3, 0x1c, 0x92, 0x8e, 0xb3, 0x7c, 0x43, 0xe4, 0x29, 0x74, 0x99, 0xa9, 0x3d, 0xe7,
	0x6a, 0x89, 0xb9, 0x64, 0x3c, 0x1c, 0xda, 0xae, 0x3b, 0x6b, 0xf4, 0xa3, 0x64, 0xdc, 0x74, 0x56,
	0x69, 0xaa, 0x34, 0x6a, 0x91, 0xf3, 0xf0, 0x65, 0x3f, 0x18, 0xec, 0x26, 0x2d, 0x8b, 0x4c, 0x45,
	0xce, 0xcd, 0x8d, 0x29, 0xae, 0x6b, 0x55, 0x60, 0x6a, 0x52, 0x8c, 0xdc, 0x8d, 0x39, 0x68, 0x6c,
	0xe2, 0x9f, 0xc1, 0x41, 0x2a, 0xf3, 0x32, 0xe3, 0xb6, 0x03, 0x9b, 0xe4, 0x95, 0x1d, 0x4f, 0x77,
	0x03, 0xdb, 0x4c, 0x47, 0x00, 0x25, 0xd5, 0x17, 0x98, 0xca, 0xba, 0xd0, 0xe1, 0x6b, 0x37, 0x42,
	0x83, 0x8c, 0x0d, 0x70, 0xbe, 0x6f, 0xff, 0x60, 0x4f, 0xfe, 0x04, 0x00, 0x00, 0xff, 0xff, 0x82,
	0x97, 0x67, 0xd6, 0x7d, 0x05, 0x00, 0x00,
}
