/*
Copyright 2019 Cisco Systems

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ipsla_lpd_stats_bag.proto

package cisco_ios_xr_man_ipsla_oper_ipsla_operation_data_operations_operation_lpd_statistics_latest_target

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type IpslaLpdStatsBag_KEYS struct {
	OperationId          int32    `protobuf:"varint,1,opt,name=operation_id,json=operationId,proto3" json:"operation_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IpslaLpdStatsBag_KEYS) Reset()         { *m = IpslaLpdStatsBag_KEYS{} }
func (m *IpslaLpdStatsBag_KEYS) String() string { return proto.CompactTextString(m) }
func (*IpslaLpdStatsBag_KEYS) ProtoMessage()    {}
func (*IpslaLpdStatsBag_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_339bc46b79c6d275, []int{0}
}

func (m *IpslaLpdStatsBag_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IpslaLpdStatsBag_KEYS.Unmarshal(m, b)
}
func (m *IpslaLpdStatsBag_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IpslaLpdStatsBag_KEYS.Marshal(b, m, deterministic)
}
func (m *IpslaLpdStatsBag_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IpslaLpdStatsBag_KEYS.Merge(m, src)
}
func (m *IpslaLpdStatsBag_KEYS) XXX_Size() int {
	return xxx_messageInfo_IpslaLpdStatsBag_KEYS.Size(m)
}
func (m *IpslaLpdStatsBag_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_IpslaLpdStatsBag_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_IpslaLpdStatsBag_KEYS proto.InternalMessageInfo

func (m *IpslaLpdStatsBag_KEYS) GetOperationId() int32 {
	if m != nil {
		return m.OperationId
	}
	return 0
}

type IpslaIpv4PrefixT struct {
	Address              string   `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	MaskLength           uint32   `protobuf:"varint,2,opt,name=mask_length,json=maskLength,proto3" json:"mask_length,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IpslaIpv4PrefixT) Reset()         { *m = IpslaIpv4PrefixT{} }
func (m *IpslaIpv4PrefixT) String() string { return proto.CompactTextString(m) }
func (*IpslaIpv4PrefixT) ProtoMessage()    {}
func (*IpslaIpv4PrefixT) Descriptor() ([]byte, []int) {
	return fileDescriptor_339bc46b79c6d275, []int{1}
}

func (m *IpslaIpv4PrefixT) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IpslaIpv4PrefixT.Unmarshal(m, b)
}
func (m *IpslaIpv4PrefixT) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IpslaIpv4PrefixT.Marshal(b, m, deterministic)
}
func (m *IpslaIpv4PrefixT) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IpslaIpv4PrefixT.Merge(m, src)
}
func (m *IpslaIpv4PrefixT) XXX_Size() int {
	return xxx_messageInfo_IpslaIpv4PrefixT.Size(m)
}
func (m *IpslaIpv4PrefixT) XXX_DiscardUnknown() {
	xxx_messageInfo_IpslaIpv4PrefixT.DiscardUnknown(m)
}

var xxx_messageInfo_IpslaIpv4PrefixT proto.InternalMessageInfo

func (m *IpslaIpv4PrefixT) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *IpslaIpv4PrefixT) GetMaskLength() uint32 {
	if m != nil {
		return m.MaskLength
	}
	return 0
}

type IpslaTunnelIdT struct {
	TunnelId             uint32   `protobuf:"varint,1,opt,name=tunnel_id,json=tunnelId,proto3" json:"tunnel_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IpslaTunnelIdT) Reset()         { *m = IpslaTunnelIdT{} }
func (m *IpslaTunnelIdT) String() string { return proto.CompactTextString(m) }
func (*IpslaTunnelIdT) ProtoMessage()    {}
func (*IpslaTunnelIdT) Descriptor() ([]byte, []int) {
	return fileDescriptor_339bc46b79c6d275, []int{2}
}

func (m *IpslaTunnelIdT) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IpslaTunnelIdT.Unmarshal(m, b)
}
func (m *IpslaTunnelIdT) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IpslaTunnelIdT.Marshal(b, m, deterministic)
}
func (m *IpslaTunnelIdT) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IpslaTunnelIdT.Merge(m, src)
}
func (m *IpslaTunnelIdT) XXX_Size() int {
	return xxx_messageInfo_IpslaTunnelIdT.Size(m)
}
func (m *IpslaTunnelIdT) XXX_DiscardUnknown() {
	xxx_messageInfo_IpslaTunnelIdT.DiscardUnknown(m)
}

var xxx_messageInfo_IpslaTunnelIdT proto.InternalMessageInfo

func (m *IpslaTunnelIdT) GetTunnelId() uint32 {
	if m != nil {
		return m.TunnelId
	}
	return 0
}

type IpslaIpv4PwT struct {
	Address              string   `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	VirtualCircuitId     uint32   `protobuf:"varint,2,opt,name=virtual_circuit_id,json=virtualCircuitId,proto3" json:"virtual_circuit_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IpslaIpv4PwT) Reset()         { *m = IpslaIpv4PwT{} }
func (m *IpslaIpv4PwT) String() string { return proto.CompactTextString(m) }
func (*IpslaIpv4PwT) ProtoMessage()    {}
func (*IpslaIpv4PwT) Descriptor() ([]byte, []int) {
	return fileDescriptor_339bc46b79c6d275, []int{3}
}

func (m *IpslaIpv4PwT) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IpslaIpv4PwT.Unmarshal(m, b)
}
func (m *IpslaIpv4PwT) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IpslaIpv4PwT.Marshal(b, m, deterministic)
}
func (m *IpslaIpv4PwT) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IpslaIpv4PwT.Merge(m, src)
}
func (m *IpslaIpv4PwT) XXX_Size() int {
	return xxx_messageInfo_IpslaIpv4PwT.Size(m)
}
func (m *IpslaIpv4PwT) XXX_DiscardUnknown() {
	xxx_messageInfo_IpslaIpv4PwT.DiscardUnknown(m)
}

var xxx_messageInfo_IpslaIpv4PwT proto.InternalMessageInfo

func (m *IpslaIpv4PwT) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *IpslaIpv4PwT) GetVirtualCircuitId() uint32 {
	if m != nil {
		return m.VirtualCircuitId
	}
	return 0
}

type IpslaTargetUnion struct {
	TargetType           string            `protobuf:"bytes,1,opt,name=target_type,json=targetType,proto3" json:"target_type,omitempty"`
	Ipv4AddressTarget    string            `protobuf:"bytes,2,opt,name=ipv4_address_target,json=ipv4AddressTarget,proto3" json:"ipv4_address_target,omitempty"`
	Ipv4PrefixTarget     *IpslaIpv4PrefixT `protobuf:"bytes,3,opt,name=ipv4_prefix_target,json=ipv4PrefixTarget,proto3" json:"ipv4_prefix_target,omitempty"`
	TunnelIdTarget       *IpslaTunnelIdT   `protobuf:"bytes,4,opt,name=tunnel_id_target,json=tunnelIdTarget,proto3" json:"tunnel_id_target,omitempty"`
	Ipv4PseudowireTarget *IpslaIpv4PwT     `protobuf:"bytes,5,opt,name=ipv4_pseudowire_target,json=ipv4PseudowireTarget,proto3" json:"ipv4_pseudowire_target,omitempty"`
	Ipv6AddressTarget    string            `protobuf:"bytes,6,opt,name=ipv6_address_target,json=ipv6AddressTarget,proto3" json:"ipv6_address_target,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *IpslaTargetUnion) Reset()         { *m = IpslaTargetUnion{} }
func (m *IpslaTargetUnion) String() string { return proto.CompactTextString(m) }
func (*IpslaTargetUnion) ProtoMessage()    {}
func (*IpslaTargetUnion) Descriptor() ([]byte, []int) {
	return fileDescriptor_339bc46b79c6d275, []int{4}
}

func (m *IpslaTargetUnion) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IpslaTargetUnion.Unmarshal(m, b)
}
func (m *IpslaTargetUnion) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IpslaTargetUnion.Marshal(b, m, deterministic)
}
func (m *IpslaTargetUnion) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IpslaTargetUnion.Merge(m, src)
}
func (m *IpslaTargetUnion) XXX_Size() int {
	return xxx_messageInfo_IpslaTargetUnion.Size(m)
}
func (m *IpslaTargetUnion) XXX_DiscardUnknown() {
	xxx_messageInfo_IpslaTargetUnion.DiscardUnknown(m)
}

var xxx_messageInfo_IpslaTargetUnion proto.InternalMessageInfo

func (m *IpslaTargetUnion) GetTargetType() string {
	if m != nil {
		return m.TargetType
	}
	return ""
}

func (m *IpslaTargetUnion) GetIpv4AddressTarget() string {
	if m != nil {
		return m.Ipv4AddressTarget
	}
	return ""
}

func (m *IpslaTargetUnion) GetIpv4PrefixTarget() *IpslaIpv4PrefixT {
	if m != nil {
		return m.Ipv4PrefixTarget
	}
	return nil
}

func (m *IpslaTargetUnion) GetTunnelIdTarget() *IpslaTunnelIdT {
	if m != nil {
		return m.TunnelIdTarget
	}
	return nil
}

func (m *IpslaTargetUnion) GetIpv4PseudowireTarget() *IpslaIpv4PwT {
	if m != nil {
		return m.Ipv4PseudowireTarget
	}
	return nil
}

func (m *IpslaTargetUnion) GetIpv6AddressTarget() string {
	if m != nil {
		return m.Ipv6AddressTarget
	}
	return ""
}

type IpslaLpdStatsBag struct {
	StartTime                         uint64            `protobuf:"varint,50,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	TargetAddress                     *IpslaTargetUnion `protobuf:"bytes,51,opt,name=target_address,json=targetAddress,proto3" json:"target_address,omitempty"`
	ReturnCode                        string            `protobuf:"bytes,52,opt,name=return_code,json=returnCode,proto3" json:"return_code,omitempty"`
	CompletionTimeCount               uint32            `protobuf:"varint,53,opt,name=completion_time_count,json=completionTimeCount,proto3" json:"completion_time_count,omitempty"`
	CompletionTime                    uint32            `protobuf:"varint,54,opt,name=completion_time,json=completionTime,proto3" json:"completion_time,omitempty"`
	MinCompletionTime                 uint32            `protobuf:"varint,55,opt,name=min_completion_time,json=minCompletionTime,proto3" json:"min_completion_time,omitempty"`
	MaxCompletionTime                 uint32            `protobuf:"varint,56,opt,name=max_completion_time,json=maxCompletionTime,proto3" json:"max_completion_time,omitempty"`
	SumCompletionTime                 uint32            `protobuf:"varint,57,opt,name=sum_completion_time,json=sumCompletionTime,proto3" json:"sum_completion_time,omitempty"`
	PathCount                         uint32            `protobuf:"varint,58,opt,name=path_count,json=pathCount,proto3" json:"path_count,omitempty"`
	MinPathCount                      uint32            `protobuf:"varint,59,opt,name=min_path_count,json=minPathCount,proto3" json:"min_path_count,omitempty"`
	MaxPathCount                      uint32            `protobuf:"varint,60,opt,name=max_path_count,json=maxPathCount,proto3" json:"max_path_count,omitempty"`
	OkCount                           uint32            `protobuf:"varint,61,opt,name=ok_count,json=okCount,proto3" json:"ok_count,omitempty"`
	NoPathCount                       uint32            `protobuf:"varint,62,opt,name=no_path_count,json=noPathCount,proto3" json:"no_path_count,omitempty"`
	AllPathsBrokenCount               uint32            `protobuf:"varint,63,opt,name=all_paths_broken_count,json=allPathsBrokenCount,proto3" json:"all_paths_broken_count,omitempty"`
	AllPathsUnexplorableCount         uint32            `protobuf:"varint,64,opt,name=all_paths_unexplorable_count,json=allPathsUnexplorableCount,proto3" json:"all_paths_unexplorable_count,omitempty"`
	AllPathsBrokenOrUnexplorableCount uint32            `protobuf:"varint,65,opt,name=all_paths_broken_or_unexplorable_count,json=allPathsBrokenOrUnexplorableCount,proto3" json:"all_paths_broken_or_unexplorable_count,omitempty"`
	TimeoutCount                      uint32            `protobuf:"varint,66,opt,name=timeout_count,json=timeoutCount,proto3" json:"timeout_count,omitempty"`
	InternalErrorCount                uint32            `protobuf:"varint,67,opt,name=internal_error_count,json=internalErrorCount,proto3" json:"internal_error_count,omitempty"`
	UnknownCount                      uint32            `protobuf:"varint,68,opt,name=unknown_count,json=unknownCount,proto3" json:"unknown_count,omitempty"`
	XXX_NoUnkeyedLiteral              struct{}          `json:"-"`
	XXX_unrecognized                  []byte            `json:"-"`
	XXX_sizecache                     int32             `json:"-"`
}

func (m *IpslaLpdStatsBag) Reset()         { *m = IpslaLpdStatsBag{} }
func (m *IpslaLpdStatsBag) String() string { return proto.CompactTextString(m) }
func (*IpslaLpdStatsBag) ProtoMessage()    {}
func (*IpslaLpdStatsBag) Descriptor() ([]byte, []int) {
	return fileDescriptor_339bc46b79c6d275, []int{5}
}

func (m *IpslaLpdStatsBag) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IpslaLpdStatsBag.Unmarshal(m, b)
}
func (m *IpslaLpdStatsBag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IpslaLpdStatsBag.Marshal(b, m, deterministic)
}
func (m *IpslaLpdStatsBag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IpslaLpdStatsBag.Merge(m, src)
}
func (m *IpslaLpdStatsBag) XXX_Size() int {
	return xxx_messageInfo_IpslaLpdStatsBag.Size(m)
}
func (m *IpslaLpdStatsBag) XXX_DiscardUnknown() {
	xxx_messageInfo_IpslaLpdStatsBag.DiscardUnknown(m)
}

var xxx_messageInfo_IpslaLpdStatsBag proto.InternalMessageInfo

func (m *IpslaLpdStatsBag) GetStartTime() uint64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *IpslaLpdStatsBag) GetTargetAddress() *IpslaTargetUnion {
	if m != nil {
		return m.TargetAddress
	}
	return nil
}

func (m *IpslaLpdStatsBag) GetReturnCode() string {
	if m != nil {
		return m.ReturnCode
	}
	return ""
}

func (m *IpslaLpdStatsBag) GetCompletionTimeCount() uint32 {
	if m != nil {
		return m.CompletionTimeCount
	}
	return 0
}

func (m *IpslaLpdStatsBag) GetCompletionTime() uint32 {
	if m != nil {
		return m.CompletionTime
	}
	return 0
}

func (m *IpslaLpdStatsBag) GetMinCompletionTime() uint32 {
	if m != nil {
		return m.MinCompletionTime
	}
	return 0
}

func (m *IpslaLpdStatsBag) GetMaxCompletionTime() uint32 {
	if m != nil {
		return m.MaxCompletionTime
	}
	return 0
}

func (m *IpslaLpdStatsBag) GetSumCompletionTime() uint32 {
	if m != nil {
		return m.SumCompletionTime
	}
	return 0
}

func (m *IpslaLpdStatsBag) GetPathCount() uint32 {
	if m != nil {
		return m.PathCount
	}
	return 0
}

func (m *IpslaLpdStatsBag) GetMinPathCount() uint32 {
	if m != nil {
		return m.MinPathCount
	}
	return 0
}

func (m *IpslaLpdStatsBag) GetMaxPathCount() uint32 {
	if m != nil {
		return m.MaxPathCount
	}
	return 0
}

func (m *IpslaLpdStatsBag) GetOkCount() uint32 {
	if m != nil {
		return m.OkCount
	}
	return 0
}

func (m *IpslaLpdStatsBag) GetNoPathCount() uint32 {
	if m != nil {
		return m.NoPathCount
	}
	return 0
}

func (m *IpslaLpdStatsBag) GetAllPathsBrokenCount() uint32 {
	if m != nil {
		return m.AllPathsBrokenCount
	}
	return 0
}

func (m *IpslaLpdStatsBag) GetAllPathsUnexplorableCount() uint32 {
	if m != nil {
		return m.AllPathsUnexplorableCount
	}
	return 0
}

func (m *IpslaLpdStatsBag) GetAllPathsBrokenOrUnexplorableCount() uint32 {
	if m != nil {
		return m.AllPathsBrokenOrUnexplorableCount
	}
	return 0
}

func (m *IpslaLpdStatsBag) GetTimeoutCount() uint32 {
	if m != nil {
		return m.TimeoutCount
	}
	return 0
}

func (m *IpslaLpdStatsBag) GetInternalErrorCount() uint32 {
	if m != nil {
		return m.InternalErrorCount
	}
	return 0
}

func (m *IpslaLpdStatsBag) GetUnknownCount() uint32 {
	if m != nil {
		return m.UnknownCount
	}
	return 0
}

func init() {
	proto.RegisterType((*IpslaLpdStatsBag_KEYS)(nil), "cisco_ios_xr_man_ipsla_oper.ipsla.operation_data.operations.operation.lpd.statistics.latest.target.ipsla_lpd_stats_bag_KEYS")
	proto.RegisterType((*IpslaIpv4PrefixT)(nil), "cisco_ios_xr_man_ipsla_oper.ipsla.operation_data.operations.operation.lpd.statistics.latest.target.ipsla_ipv4_prefix_t")
	proto.RegisterType((*IpslaTunnelIdT)(nil), "cisco_ios_xr_man_ipsla_oper.ipsla.operation_data.operations.operation.lpd.statistics.latest.target.ipsla_tunnel_id_t")
	proto.RegisterType((*IpslaIpv4PwT)(nil), "cisco_ios_xr_man_ipsla_oper.ipsla.operation_data.operations.operation.lpd.statistics.latest.target.ipsla_ipv4_pw_t")
	proto.RegisterType((*IpslaTargetUnion)(nil), "cisco_ios_xr_man_ipsla_oper.ipsla.operation_data.operations.operation.lpd.statistics.latest.target.ipsla_target_union")
	proto.RegisterType((*IpslaLpdStatsBag)(nil), "cisco_ios_xr_man_ipsla_oper.ipsla.operation_data.operations.operation.lpd.statistics.latest.target.ipsla_lpd_stats_bag")
}

func init() { proto.RegisterFile("ipsla_lpd_stats_bag.proto", fileDescriptor_339bc46b79c6d275) }

var fileDescriptor_339bc46b79c6d275 = []byte{
	// 768 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x95, 0xdd, 0x4e, 0x1b, 0x39,
	0x14, 0xc7, 0x35, 0xbb, 0x7c, 0xe5, 0x84, 0x04, 0x18, 0x58, 0x34, 0x68, 0x17, 0x6d, 0xc8, 0xae,
	0x76, 0x73, 0xb1, 0x1a, 0x21, 0x60, 0xd9, 0xed, 0x07, 0xa5, 0x90, 0x72, 0x81, 0x5a, 0xa9, 0x74,
	0x4a, 0x2f, 0xb8, 0xb2, 0x9c, 0x19, 0x17, 0xac, 0xcc, 0xd8, 0x23, 0xdb, 0x93, 0x84, 0x67, 0xe8,
	0x33, 0x54, 0xbd, 0xea, 0x45, 0x1f, 0xa7, 0x6f, 0x54, 0xf9, 0x63, 0x92, 0x09, 0x41, 0xbd, 0x2b,
	0x77, 0xe3, 0xf3, 0xff, 0x9d, 0xe3, 0xbf, 0x8f, 0x8f, 0x13, 0xd8, 0xa2, 0xb9, 0x4c, 0x31, 0x4a,
	0xf3, 0x04, 0x49, 0x85, 0x95, 0x44, 0x3d, 0x7c, 0x1d, 0xe6, 0x82, 0x2b, 0xee, 0xf7, 0x62, 0x2a,
	0x63, 0x8e, 0x28, 0x97, 0x68, 0x24, 0x50, 0x86, 0x19, 0xb2, 0x2c, 0xcf, 0x89, 0x08, 0xcd, 0x67,
	0xa8, 0x3f, 0xb1, 0xa2, 0x9c, 0xa1, 0x04, 0xab, 0xca, 0x52, 0x4e, 0x3e, 0xc3, 0x34, 0x4f, 0x42,
	0x5d, 0x9a, 0x4a, 0x45, 0x63, 0x19, 0xa6, 0x58, 0x11, 0xa9, 0x42, 0x85, 0xc5, 0x35, 0x51, 0xed,
	0x23, 0x08, 0xee, 0x31, 0x80, 0x5e, 0x9e, 0x5d, 0xbd, 0xf5, 0x77, 0x60, 0x79, 0x52, 0x9f, 0x26,
	0x81, 0xd7, 0xf2, 0x3a, 0xf3, 0x51, 0x7d, 0x1c, 0x3b, 0x4f, 0xda, 0x17, 0xb0, 0x6e, 0xd3, 0x69,
	0x3e, 0x38, 0x40, 0xb9, 0x20, 0xef, 0xe9, 0x08, 0x29, 0x3f, 0x80, 0x45, 0x9c, 0x24, 0x82, 0x48,
	0x69, 0x92, 0x6a, 0x51, 0xb9, 0xf4, 0x7f, 0x87, 0x7a, 0x86, 0x65, 0x1f, 0xa5, 0x84, 0x5d, 0xab,
	0x9b, 0xe0, 0xa7, 0x96, 0xd7, 0x69, 0x44, 0xa0, 0x43, 0xaf, 0x4c, 0xa4, 0xbd, 0x0b, 0x6b, 0xb6,
	0xa2, 0x2a, 0x18, 0x23, 0x29, 0xa2, 0x09, 0x52, 0xfe, 0xaf, 0x50, 0x1b, 0x2f, 0x4d, 0xc5, 0x46,
	0xb4, 0x64, 0x03, 0xe7, 0x49, 0xfb, 0x0a, 0x56, 0xaa, 0x1e, 0x86, 0xdf, 0xdd, 0xff, 0x1f, 0xf0,
	0x07, 0x54, 0xa8, 0x02, 0xa7, 0x28, 0xa6, 0x22, 0x2e, 0xa8, 0xd2, 0x25, 0xad, 0x8d, 0x55, 0xa7,
	0x74, 0xad, 0x70, 0x9e, 0xb4, 0x3f, 0xcc, 0x83, 0xef, 0xdc, 0x98, 0x76, 0xa1, 0x82, 0x51, 0xce,
	0xf4, 0x21, 0xdc, 0x5a, 0xdd, 0xe6, 0xc4, 0x6d, 0x01, 0x36, 0x74, 0x79, 0x9b, 0x13, 0x3f, 0xd4,
	0x6d, 0x19, 0x1c, 0x20, 0xb7, 0xab, 0xcb, 0x36, 0xdb, 0xd4, 0xa2, 0x35, 0x2d, 0x9d, 0x58, 0xe5,
	0xd2, 0x08, 0xfe, 0x67, 0x4f, 0xef, 0x53, 0xe9, 0xa0, 0xe5, 0x7f, 0x6e, 0x79, 0x9d, 0xfa, 0xde,
	0x30, 0xfc, 0xf1, 0x73, 0x10, 0xde, 0x73, 0x8b, 0xd1, 0xaa, 0x5e, 0x5e, 0x98, 0x95, 0xf3, 0xf9,
	0xc9, 0x83, 0xd5, 0xca, 0xbd, 0x58, 0x97, 0x73, 0xc6, 0x65, 0xf1, 0x70, 0x2e, 0x2b, 0x0e, 0xa2,
	0x66, 0x39, 0x06, 0xce, 0xe1, 0x17, 0x0f, 0x36, 0xed, 0x29, 0x24, 0x29, 0x12, 0x3e, 0xa4, 0x82,
	0x94, 0x3e, 0xe7, 0x8d, 0x4f, 0xf9, 0xd0, 0xdd, 0x1c, 0x22, 0x15, 0x6d, 0x98, 0x4e, 0x8e, 0x1d,
	0x39, 0xaf, 0x76, 0x4a, 0x0e, 0xef, 0x4e, 0xc9, 0xc2, 0x78, 0x4a, 0x0e, 0xa7, 0xa6, 0xa4, 0xfd,
	0x75, 0xb1, 0x7c, 0x6d, 0x53, 0x8f, 0xd5, 0xdf, 0x06, 0x90, 0x0a, 0x0b, 0x85, 0x14, 0xcd, 0x48,
	0xb0, 0xd7, 0xf2, 0x3a, 0x73, 0x51, 0xcd, 0x44, 0x2e, 0x69, 0x46, 0xfc, 0x8f, 0x1e, 0x34, 0xdd,
	0xb8, 0x96, 0x8f, 0x62, 0xdf, 0xb4, 0x62, 0xf0, 0x80, 0x57, 0x56, 0x79, 0x3e, 0x51, 0xc3, 0xae,
	0x4e, 0x26, 0x3f, 0x09, 0x82, 0xa8, 0x42, 0x30, 0x14, 0xf3, 0x84, 0x04, 0x07, 0xf6, 0x35, 0xd9,
	0x50, 0x97, 0x27, 0xc4, 0xdf, 0x83, 0x5f, 0x62, 0x9e, 0xe5, 0x29, 0x31, 0x3e, 0xf4, 0x21, 0x51,
	0xcc, 0x0b, 0xa6, 0x82, 0x7f, 0xcd, 0xb3, 0x5d, 0x9f, 0x88, 0xfa, 0xbc, 0x5d, 0x2d, 0xf9, 0x7f,
	0xc3, 0xca, 0x9d, 0x9c, 0xe0, 0xd0, 0xd0, 0xcd, 0x69, 0x5a, 0x5f, 0x42, 0x46, 0xf5, 0xd6, 0xd3,
	0xf0, 0x7f, 0x06, 0x5e, 0xcb, 0x28, 0xeb, 0xce, 0xf2, 0x78, 0x34, 0xc3, 0xff, 0xef, 0x78, 0x3c,
	0x9a, 0xe5, 0x65, 0x91, 0xcd, 0xf0, 0x8f, 0x2c, 0x2f, 0x8b, 0xec, 0x0e, 0xbf, 0x0d, 0x90, 0x63,
	0x75, 0xe3, 0x4e, 0xf8, 0xd8, 0x60, 0x35, 0x1d, 0xb1, 0xe7, 0xfa, 0x13, 0x9a, 0xda, 0x6e, 0x05,
	0x79, 0x62, 0x90, 0xe5, 0x8c, 0xb2, 0x8b, 0x29, 0x0a, 0x8f, 0xaa, 0xd4, 0x53, 0x47, 0xe1, 0xd1,
	0x84, 0xda, 0x82, 0x25, 0xde, 0x77, 0xfa, 0x91, 0xd1, 0x17, 0x79, 0xdf, 0x4a, 0x6d, 0x68, 0x30,
	0x5e, 0xcd, 0x7f, 0x66, 0xf4, 0x3a, 0xe3, 0x93, 0xf4, 0x7d, 0xd8, 0xc4, 0x69, 0x6a, 0x20, 0x89,
	0x7a, 0x82, 0xf7, 0x09, 0x73, 0xf0, 0xb1, 0xbd, 0x17, 0x9c, 0xa6, 0x9a, 0x96, 0xa7, 0x46, 0xb3,
	0x49, 0xc7, 0xf0, 0xdb, 0x24, 0xa9, 0x60, 0x64, 0x94, 0xa7, 0x5c, 0xe0, 0x5e, 0x5a, 0x5e, 0xe9,
	0x73, 0x93, 0xba, 0x55, 0xa6, 0xbe, 0xab, 0x10, 0xb6, 0xc0, 0x1b, 0xf8, 0x6b, 0x66, 0x57, 0x2e,
	0xee, 0x2b, 0x75, 0x62, 0x4a, 0xed, 0x4c, 0xbb, 0x78, 0x2d, 0x66, 0x4b, 0xfe, 0x01, 0x0d, 0x7d,
	0x27, 0xbc, 0x50, 0x2e, 0xf3, 0xd4, 0x36, 0xcb, 0x05, 0x2d, 0xb4, 0x0b, 0x1b, 0x94, 0x29, 0x22,
	0x18, 0x4e, 0x11, 0x11, 0x82, 0x0b, 0xc7, 0x76, 0x0d, 0xeb, 0x97, 0xda, 0x99, 0x96, 0xc6, 0x65,
	0x0b, 0xd6, 0x67, 0x7c, 0x58, 0xb6, 0xe5, 0x85, 0x2d, 0xeb, 0x82, 0x06, 0xea, 0x2d, 0x98, 0xbf,
	0xfa, 0xfd, 0x6f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x95, 0xb2, 0x6c, 0x75, 0x07, 0x08, 0x00, 0x00,
}
