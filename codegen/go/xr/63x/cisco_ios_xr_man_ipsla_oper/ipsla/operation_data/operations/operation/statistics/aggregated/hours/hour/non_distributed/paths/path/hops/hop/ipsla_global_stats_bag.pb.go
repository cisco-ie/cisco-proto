/*
Copyright 2019 Cisco Systems

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ipsla_global_stats_bag.proto

package cisco_ios_xr_man_ipsla_oper_ipsla_operation_data_operations_operation_statistics_aggregated_hours_hour_non_distributed_paths_path_hops_hop

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type IpslaGlobalStatsBag_KEYS struct {
	OperationId          int32    `protobuf:"varint,1,opt,name=operation_id,json=operationId,proto3" json:"operation_id,omitempty"`
	HourIndex            int32    `protobuf:"varint,2,opt,name=hour_index,json=hourIndex,proto3" json:"hour_index,omitempty"`
	PathIndex            int32    `protobuf:"varint,3,opt,name=path_index,json=pathIndex,proto3" json:"path_index,omitempty"`
	HopIndex             int32    `protobuf:"varint,4,opt,name=hop_index,json=hopIndex,proto3" json:"hop_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IpslaGlobalStatsBag_KEYS) Reset()         { *m = IpslaGlobalStatsBag_KEYS{} }
func (m *IpslaGlobalStatsBag_KEYS) String() string { return proto.CompactTextString(m) }
func (*IpslaGlobalStatsBag_KEYS) ProtoMessage()    {}
func (*IpslaGlobalStatsBag_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_897195338539467e, []int{0}
}

func (m *IpslaGlobalStatsBag_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IpslaGlobalStatsBag_KEYS.Unmarshal(m, b)
}
func (m *IpslaGlobalStatsBag_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IpslaGlobalStatsBag_KEYS.Marshal(b, m, deterministic)
}
func (m *IpslaGlobalStatsBag_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IpslaGlobalStatsBag_KEYS.Merge(m, src)
}
func (m *IpslaGlobalStatsBag_KEYS) XXX_Size() int {
	return xxx_messageInfo_IpslaGlobalStatsBag_KEYS.Size(m)
}
func (m *IpslaGlobalStatsBag_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_IpslaGlobalStatsBag_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_IpslaGlobalStatsBag_KEYS proto.InternalMessageInfo

func (m *IpslaGlobalStatsBag_KEYS) GetOperationId() int32 {
	if m != nil {
		return m.OperationId
	}
	return 0
}

func (m *IpslaGlobalStatsBag_KEYS) GetHourIndex() int32 {
	if m != nil {
		return m.HourIndex
	}
	return 0
}

func (m *IpslaGlobalStatsBag_KEYS) GetPathIndex() int32 {
	if m != nil {
		return m.PathIndex
	}
	return 0
}

func (m *IpslaGlobalStatsBag_KEYS) GetHopIndex() int32 {
	if m != nil {
		return m.HopIndex
	}
	return 0
}

type IpslaCommonStatsBag struct {
	OperationTime        uint64   `protobuf:"varint,1,opt,name=operation_time,json=operationTime,proto3" json:"operation_time,omitempty"`
	ReturnCode           string   `protobuf:"bytes,2,opt,name=return_code,json=returnCode,proto3" json:"return_code,omitempty"`
	ResponseTimeCount    uint32   `protobuf:"varint,3,opt,name=response_time_count,json=responseTimeCount,proto3" json:"response_time_count,omitempty"`
	ResponseTime         uint32   `protobuf:"varint,4,opt,name=response_time,json=responseTime,proto3" json:"response_time,omitempty"`
	MinResponseTime      uint32   `protobuf:"varint,5,opt,name=min_response_time,json=minResponseTime,proto3" json:"min_response_time,omitempty"`
	MaxResponseTime      uint32   `protobuf:"varint,6,opt,name=max_response_time,json=maxResponseTime,proto3" json:"max_response_time,omitempty"`
	SumResponseTime      uint32   `protobuf:"varint,7,opt,name=sum_response_time,json=sumResponseTime,proto3" json:"sum_response_time,omitempty"`
	Sum2ResponseTime     uint64   `protobuf:"varint,8,opt,name=sum2_response_time,json=sum2ResponseTime,proto3" json:"sum2_response_time,omitempty"`
	UpdateCount          uint32   `protobuf:"varint,9,opt,name=update_count,json=updateCount,proto3" json:"update_count,omitempty"`
	OkCount              uint32   `protobuf:"varint,10,opt,name=ok_count,json=okCount,proto3" json:"ok_count,omitempty"`
	DisconnectCount      uint32   `protobuf:"varint,11,opt,name=disconnect_count,json=disconnectCount,proto3" json:"disconnect_count,omitempty"`
	TimeoutCount         uint32   `protobuf:"varint,12,opt,name=timeout_count,json=timeoutCount,proto3" json:"timeout_count,omitempty"`
	BusyCount            uint32   `protobuf:"varint,13,opt,name=busy_count,json=busyCount,proto3" json:"busy_count,omitempty"`
	NoConnectionCount    uint32   `protobuf:"varint,14,opt,name=no_connection_count,json=noConnectionCount,proto3" json:"no_connection_count,omitempty"`
	DroppedCount         uint32   `protobuf:"varint,15,opt,name=dropped_count,json=droppedCount,proto3" json:"dropped_count,omitempty"`
	InternalErrorCount   uint32   `protobuf:"varint,16,opt,name=internal_error_count,json=internalErrorCount,proto3" json:"internal_error_count,omitempty"`
	SequenceErrorCount   uint32   `protobuf:"varint,17,opt,name=sequence_error_count,json=sequenceErrorCount,proto3" json:"sequence_error_count,omitempty"`
	VerifyErrorCount     uint32   `protobuf:"varint,18,opt,name=verify_error_count,json=verifyErrorCount,proto3" json:"verify_error_count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IpslaCommonStatsBag) Reset()         { *m = IpslaCommonStatsBag{} }
func (m *IpslaCommonStatsBag) String() string { return proto.CompactTextString(m) }
func (*IpslaCommonStatsBag) ProtoMessage()    {}
func (*IpslaCommonStatsBag) Descriptor() ([]byte, []int) {
	return fileDescriptor_897195338539467e, []int{1}
}

func (m *IpslaCommonStatsBag) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IpslaCommonStatsBag.Unmarshal(m, b)
}
func (m *IpslaCommonStatsBag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IpslaCommonStatsBag.Marshal(b, m, deterministic)
}
func (m *IpslaCommonStatsBag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IpslaCommonStatsBag.Merge(m, src)
}
func (m *IpslaCommonStatsBag) XXX_Size() int {
	return xxx_messageInfo_IpslaCommonStatsBag.Size(m)
}
func (m *IpslaCommonStatsBag) XXX_DiscardUnknown() {
	xxx_messageInfo_IpslaCommonStatsBag.DiscardUnknown(m)
}

var xxx_messageInfo_IpslaCommonStatsBag proto.InternalMessageInfo

func (m *IpslaCommonStatsBag) GetOperationTime() uint64 {
	if m != nil {
		return m.OperationTime
	}
	return 0
}

func (m *IpslaCommonStatsBag) GetReturnCode() string {
	if m != nil {
		return m.ReturnCode
	}
	return ""
}

func (m *IpslaCommonStatsBag) GetResponseTimeCount() uint32 {
	if m != nil {
		return m.ResponseTimeCount
	}
	return 0
}

func (m *IpslaCommonStatsBag) GetResponseTime() uint32 {
	if m != nil {
		return m.ResponseTime
	}
	return 0
}

func (m *IpslaCommonStatsBag) GetMinResponseTime() uint32 {
	if m != nil {
		return m.MinResponseTime
	}
	return 0
}

func (m *IpslaCommonStatsBag) GetMaxResponseTime() uint32 {
	if m != nil {
		return m.MaxResponseTime
	}
	return 0
}

func (m *IpslaCommonStatsBag) GetSumResponseTime() uint32 {
	if m != nil {
		return m.SumResponseTime
	}
	return 0
}

func (m *IpslaCommonStatsBag) GetSum2ResponseTime() uint64 {
	if m != nil {
		return m.Sum2ResponseTime
	}
	return 0
}

func (m *IpslaCommonStatsBag) GetUpdateCount() uint32 {
	if m != nil {
		return m.UpdateCount
	}
	return 0
}

func (m *IpslaCommonStatsBag) GetOkCount() uint32 {
	if m != nil {
		return m.OkCount
	}
	return 0
}

func (m *IpslaCommonStatsBag) GetDisconnectCount() uint32 {
	if m != nil {
		return m.DisconnectCount
	}
	return 0
}

func (m *IpslaCommonStatsBag) GetTimeoutCount() uint32 {
	if m != nil {
		return m.TimeoutCount
	}
	return 0
}

func (m *IpslaCommonStatsBag) GetBusyCount() uint32 {
	if m != nil {
		return m.BusyCount
	}
	return 0
}

func (m *IpslaCommonStatsBag) GetNoConnectionCount() uint32 {
	if m != nil {
		return m.NoConnectionCount
	}
	return 0
}

func (m *IpslaCommonStatsBag) GetDroppedCount() uint32 {
	if m != nil {
		return m.DroppedCount
	}
	return 0
}

func (m *IpslaCommonStatsBag) GetInternalErrorCount() uint32 {
	if m != nil {
		return m.InternalErrorCount
	}
	return 0
}

func (m *IpslaCommonStatsBag) GetSequenceErrorCount() uint32 {
	if m != nil {
		return m.SequenceErrorCount
	}
	return 0
}

func (m *IpslaCommonStatsBag) GetVerifyErrorCount() uint32 {
	if m != nil {
		return m.VerifyErrorCount
	}
	return 0
}

type IpslaIcmpPathJitterSpecStatsBag struct {
	SourceAddress        string   `protobuf:"bytes,1,opt,name=source_address,json=sourceAddress,proto3" json:"source_address,omitempty"`
	DestAddress          string   `protobuf:"bytes,2,opt,name=dest_address,json=destAddress,proto3" json:"dest_address,omitempty"`
	HopAddress           string   `protobuf:"bytes,3,opt,name=hop_address,json=hopAddress,proto3" json:"hop_address,omitempty"`
	PacketInterval       uint32   `protobuf:"varint,4,opt,name=packet_interval,json=packetInterval,proto3" json:"packet_interval,omitempty"`
	ResponseTimeCount    uint32   `protobuf:"varint,5,opt,name=response_time_count,json=responseTimeCount,proto3" json:"response_time_count,omitempty"`
	ResponseTime         uint32   `protobuf:"varint,6,opt,name=response_time,json=responseTime,proto3" json:"response_time,omitempty"`
	MinResponseTime      uint32   `protobuf:"varint,7,opt,name=min_response_time,json=minResponseTime,proto3" json:"min_response_time,omitempty"`
	MaxResponseTime      uint32   `protobuf:"varint,8,opt,name=max_response_time,json=maxResponseTime,proto3" json:"max_response_time,omitempty"`
	SumResponseTime      uint32   `protobuf:"varint,9,opt,name=sum_response_time,json=sumResponseTime,proto3" json:"sum_response_time,omitempty"`
	Sum2ResponseTime     uint64   `protobuf:"varint,10,opt,name=sum2_response_time,json=sum2ResponseTime,proto3" json:"sum2_response_time,omitempty"`
	PacketCount          uint32   `protobuf:"varint,11,opt,name=packet_count,json=packetCount,proto3" json:"packet_count,omitempty"`
	PacketLossCount      uint32   `protobuf:"varint,12,opt,name=packet_loss_count,json=packetLossCount,proto3" json:"packet_loss_count,omitempty"`
	OutOfSequenceCount   uint32   `protobuf:"varint,13,opt,name=out_of_sequence_count,json=outOfSequenceCount,proto3" json:"out_of_sequence_count,omitempty"`
	DiscardedSampleCount uint32   `protobuf:"varint,14,opt,name=discarded_sample_count,json=discardedSampleCount,proto3" json:"discarded_sample_count,omitempty"`
	VerifyErrorsCount    uint32   `protobuf:"varint,15,opt,name=verify_errors_count,json=verifyErrorsCount,proto3" json:"verify_errors_count,omitempty"`
	DroppedErrorCount    uint32   `protobuf:"varint,16,opt,name=dropped_error_count,json=droppedErrorCount,proto3" json:"dropped_error_count,omitempty"`
	Jitter               uint32   `protobuf:"varint,17,opt,name=jitter,proto3" json:"jitter,omitempty"`
	PosJitterSum         uint32   `protobuf:"varint,18,opt,name=pos_jitter_sum,json=posJitterSum,proto3" json:"pos_jitter_sum,omitempty"`
	PosJitterSum2        uint64   `protobuf:"varint,19,opt,name=pos_jitter_sum2,json=posJitterSum2,proto3" json:"pos_jitter_sum2,omitempty"`
	PosJitterMin         uint32   `protobuf:"varint,20,opt,name=pos_jitter_min,json=posJitterMin,proto3" json:"pos_jitter_min,omitempty"`
	PosJitterMax         uint32   `protobuf:"varint,21,opt,name=pos_jitter_max,json=posJitterMax,proto3" json:"pos_jitter_max,omitempty"`
	PosJitterCount       uint32   `protobuf:"varint,22,opt,name=pos_jitter_count,json=posJitterCount,proto3" json:"pos_jitter_count,omitempty"`
	NegJitterSum         uint32   `protobuf:"varint,23,opt,name=neg_jitter_sum,json=negJitterSum,proto3" json:"neg_jitter_sum,omitempty"`
	NegJitterMin         uint32   `protobuf:"varint,24,opt,name=neg_jitter_min,json=negJitterMin,proto3" json:"neg_jitter_min,omitempty"`
	NegJitterMax         uint32   `protobuf:"varint,25,opt,name=neg_jitter_max,json=negJitterMax,proto3" json:"neg_jitter_max,omitempty"`
	NegJitterSum2        uint64   `protobuf:"varint,26,opt,name=neg_jitter_sum2,json=negJitterSum2,proto3" json:"neg_jitter_sum2,omitempty"`
	NegJitterCount       uint32   `protobuf:"varint,27,opt,name=neg_jitter_count,json=negJitterCount,proto3" json:"neg_jitter_count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IpslaIcmpPathJitterSpecStatsBag) Reset()         { *m = IpslaIcmpPathJitterSpecStatsBag{} }
func (m *IpslaIcmpPathJitterSpecStatsBag) String() string { return proto.CompactTextString(m) }
func (*IpslaIcmpPathJitterSpecStatsBag) ProtoMessage()    {}
func (*IpslaIcmpPathJitterSpecStatsBag) Descriptor() ([]byte, []int) {
	return fileDescriptor_897195338539467e, []int{2}
}

func (m *IpslaIcmpPathJitterSpecStatsBag) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IpslaIcmpPathJitterSpecStatsBag.Unmarshal(m, b)
}
func (m *IpslaIcmpPathJitterSpecStatsBag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IpslaIcmpPathJitterSpecStatsBag.Marshal(b, m, deterministic)
}
func (m *IpslaIcmpPathJitterSpecStatsBag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IpslaIcmpPathJitterSpecStatsBag.Merge(m, src)
}
func (m *IpslaIcmpPathJitterSpecStatsBag) XXX_Size() int {
	return xxx_messageInfo_IpslaIcmpPathJitterSpecStatsBag.Size(m)
}
func (m *IpslaIcmpPathJitterSpecStatsBag) XXX_DiscardUnknown() {
	xxx_messageInfo_IpslaIcmpPathJitterSpecStatsBag.DiscardUnknown(m)
}

var xxx_messageInfo_IpslaIcmpPathJitterSpecStatsBag proto.InternalMessageInfo

func (m *IpslaIcmpPathJitterSpecStatsBag) GetSourceAddress() string {
	if m != nil {
		return m.SourceAddress
	}
	return ""
}

func (m *IpslaIcmpPathJitterSpecStatsBag) GetDestAddress() string {
	if m != nil {
		return m.DestAddress
	}
	return ""
}

func (m *IpslaIcmpPathJitterSpecStatsBag) GetHopAddress() string {
	if m != nil {
		return m.HopAddress
	}
	return ""
}

func (m *IpslaIcmpPathJitterSpecStatsBag) GetPacketInterval() uint32 {
	if m != nil {
		return m.PacketInterval
	}
	return 0
}

func (m *IpslaIcmpPathJitterSpecStatsBag) GetResponseTimeCount() uint32 {
	if m != nil {
		return m.ResponseTimeCount
	}
	return 0
}

func (m *IpslaIcmpPathJitterSpecStatsBag) GetResponseTime() uint32 {
	if m != nil {
		return m.ResponseTime
	}
	return 0
}

func (m *IpslaIcmpPathJitterSpecStatsBag) GetMinResponseTime() uint32 {
	if m != nil {
		return m.MinResponseTime
	}
	return 0
}

func (m *IpslaIcmpPathJitterSpecStatsBag) GetMaxResponseTime() uint32 {
	if m != nil {
		return m.MaxResponseTime
	}
	return 0
}

func (m *IpslaIcmpPathJitterSpecStatsBag) GetSumResponseTime() uint32 {
	if m != nil {
		return m.SumResponseTime
	}
	return 0
}

func (m *IpslaIcmpPathJitterSpecStatsBag) GetSum2ResponseTime() uint64 {
	if m != nil {
		return m.Sum2ResponseTime
	}
	return 0
}

func (m *IpslaIcmpPathJitterSpecStatsBag) GetPacketCount() uint32 {
	if m != nil {
		return m.PacketCount
	}
	return 0
}

func (m *IpslaIcmpPathJitterSpecStatsBag) GetPacketLossCount() uint32 {
	if m != nil {
		return m.PacketLossCount
	}
	return 0
}

func (m *IpslaIcmpPathJitterSpecStatsBag) GetOutOfSequenceCount() uint32 {
	if m != nil {
		return m.OutOfSequenceCount
	}
	return 0
}

func (m *IpslaIcmpPathJitterSpecStatsBag) GetDiscardedSampleCount() uint32 {
	if m != nil {
		return m.DiscardedSampleCount
	}
	return 0
}

func (m *IpslaIcmpPathJitterSpecStatsBag) GetVerifyErrorsCount() uint32 {
	if m != nil {
		return m.VerifyErrorsCount
	}
	return 0
}

func (m *IpslaIcmpPathJitterSpecStatsBag) GetDroppedErrorCount() uint32 {
	if m != nil {
		return m.DroppedErrorCount
	}
	return 0
}

func (m *IpslaIcmpPathJitterSpecStatsBag) GetJitter() uint32 {
	if m != nil {
		return m.Jitter
	}
	return 0
}

func (m *IpslaIcmpPathJitterSpecStatsBag) GetPosJitterSum() uint32 {
	if m != nil {
		return m.PosJitterSum
	}
	return 0
}

func (m *IpslaIcmpPathJitterSpecStatsBag) GetPosJitterSum2() uint64 {
	if m != nil {
		return m.PosJitterSum2
	}
	return 0
}

func (m *IpslaIcmpPathJitterSpecStatsBag) GetPosJitterMin() uint32 {
	if m != nil {
		return m.PosJitterMin
	}
	return 0
}

func (m *IpslaIcmpPathJitterSpecStatsBag) GetPosJitterMax() uint32 {
	if m != nil {
		return m.PosJitterMax
	}
	return 0
}

func (m *IpslaIcmpPathJitterSpecStatsBag) GetPosJitterCount() uint32 {
	if m != nil {
		return m.PosJitterCount
	}
	return 0
}

func (m *IpslaIcmpPathJitterSpecStatsBag) GetNegJitterSum() uint32 {
	if m != nil {
		return m.NegJitterSum
	}
	return 0
}

func (m *IpslaIcmpPathJitterSpecStatsBag) GetNegJitterMin() uint32 {
	if m != nil {
		return m.NegJitterMin
	}
	return 0
}

func (m *IpslaIcmpPathJitterSpecStatsBag) GetNegJitterMax() uint32 {
	if m != nil {
		return m.NegJitterMax
	}
	return 0
}

func (m *IpslaIcmpPathJitterSpecStatsBag) GetNegJitterSum2() uint64 {
	if m != nil {
		return m.NegJitterSum2
	}
	return 0
}

func (m *IpslaIcmpPathJitterSpecStatsBag) GetNegJitterCount() uint32 {
	if m != nil {
		return m.NegJitterCount
	}
	return 0
}

type IpslaUdpJitterSpecStatsBag struct {
	JitterIn             uint32   `protobuf:"varint,1,opt,name=jitter_in,json=jitterIn,proto3" json:"jitter_in,omitempty"`
	JitterOut            uint32   `protobuf:"varint,2,opt,name=jitter_out,json=jitterOut,proto3" json:"jitter_out,omitempty"`
	PacketLossSd         uint32   `protobuf:"varint,3,opt,name=packet_loss_sd,json=packetLossSd,proto3" json:"packet_loss_sd,omitempty"`
	PacketLossDs         uint32   `protobuf:"varint,4,opt,name=packet_loss_ds,json=packetLossDs,proto3" json:"packet_loss_ds,omitempty"`
	PacketOutOfSequence  uint32   `protobuf:"varint,5,opt,name=packet_out_of_sequence,json=packetOutOfSequence,proto3" json:"packet_out_of_sequence,omitempty"`
	PacketMia            uint32   `protobuf:"varint,6,opt,name=packet_mia,json=packetMia,proto3" json:"packet_mia,omitempty"`
	PacketSkipped        uint32   `protobuf:"varint,7,opt,name=packet_skipped,json=packetSkipped,proto3" json:"packet_skipped,omitempty"`
	PacketLateArrivals   uint32   `protobuf:"varint,8,opt,name=packet_late_arrivals,json=packetLateArrivals,proto3" json:"packet_late_arrivals,omitempty"`
	PacketInvalidTstamp  uint32   `protobuf:"varint,9,opt,name=packet_invalid_tstamp,json=packetInvalidTstamp,proto3" json:"packet_invalid_tstamp,omitempty"`
	InternalErrorsCount  uint32   `protobuf:"varint,10,opt,name=internal_errors_count,json=internalErrorsCount,proto3" json:"internal_errors_count,omitempty"`
	BusiesCount          uint32   `protobuf:"varint,11,opt,name=busies_count,json=busiesCount,proto3" json:"busies_count,omitempty"`
	PositiveSdSum        uint32   `protobuf:"varint,12,opt,name=positive_sd_sum,json=positiveSdSum,proto3" json:"positive_sd_sum,omitempty"`
	PositiveSdSum2       uint64   `protobuf:"varint,13,opt,name=positive_sd_sum2,json=positiveSdSum2,proto3" json:"positive_sd_sum2,omitempty"`
	PositiveSdMin        uint32   `protobuf:"varint,14,opt,name=positive_sd_min,json=positiveSdMin,proto3" json:"positive_sd_min,omitempty"`
	PositiveSdMax        uint32   `protobuf:"varint,15,opt,name=positive_sd_max,json=positiveSdMax,proto3" json:"positive_sd_max,omitempty"`
	PositiveSdCount      uint32   `protobuf:"varint,16,opt,name=positive_sd_count,json=positiveSdCount,proto3" json:"positive_sd_count,omitempty"`
	NegativeSdSum        uint32   `protobuf:"varint,17,opt,name=negative_sd_sum,json=negativeSdSum,proto3" json:"negative_sd_sum,omitempty"`
	NegativeSdSum2       uint64   `protobuf:"varint,18,opt,name=negative_sd_sum2,json=negativeSdSum2,proto3" json:"negative_sd_sum2,omitempty"`
	NegativeSdMin        uint32   `protobuf:"varint,19,opt,name=negative_sd_min,json=negativeSdMin,proto3" json:"negative_sd_min,omitempty"`
	NegativeSdMax        uint32   `protobuf:"varint,20,opt,name=negative_sd_max,json=negativeSdMax,proto3" json:"negative_sd_max,omitempty"`
	NegativeSdCount      uint32   `protobuf:"varint,21,opt,name=negative_sd_count,json=negativeSdCount,proto3" json:"negative_sd_count,omitempty"`
	PositiveDsSum        uint32   `protobuf:"varint,22,opt,name=positive_ds_sum,json=positiveDsSum,proto3" json:"positive_ds_sum,omitempty"`
	PositiveDsSum2       uint64   `protobuf:"varint,23,opt,name=positive_ds_sum2,json=positiveDsSum2,proto3" json:"positive_ds_sum2,omitempty"`
	PositiveDsMin        uint32   `protobuf:"varint,24,opt,name=positive_ds_min,json=positiveDsMin,proto3" json:"positive_ds_min,omitempty"`
	PositiveDsMax        uint32   `protobuf:"varint,25,opt,name=positive_ds_max,json=positiveDsMax,proto3" json:"positive_ds_max,omitempty"`
	PositiveDsCount      uint32   `protobuf:"varint,26,opt,name=positive_ds_count,json=positiveDsCount,proto3" json:"positive_ds_count,omitempty"`
	NegativeDsSum        uint32   `protobuf:"varint,27,opt,name=negative_ds_sum,json=negativeDsSum,proto3" json:"negative_ds_sum,omitempty"`
	NegativeDsSum2       uint64   `protobuf:"varint,28,opt,name=negative_ds_sum2,json=negativeDsSum2,proto3" json:"negative_ds_sum2,omitempty"`
	NegativeDsMin        uint32   `protobuf:"varint,29,opt,name=negative_ds_min,json=negativeDsMin,proto3" json:"negative_ds_min,omitempty"`
	NegativeDsMax        uint32   `protobuf:"varint,30,opt,name=negative_ds_max,json=negativeDsMax,proto3" json:"negative_ds_max,omitempty"`
	NegativeDsCount      uint32   `protobuf:"varint,31,opt,name=negative_ds_count,json=negativeDsCount,proto3" json:"negative_ds_count,omitempty"`
	OneWayCount          uint32   `protobuf:"varint,32,opt,name=one_way_count,json=oneWayCount,proto3" json:"one_way_count,omitempty"`
	OneWaySdMin          uint32   `protobuf:"varint,33,opt,name=one_way_sd_min,json=oneWaySdMin,proto3" json:"one_way_sd_min,omitempty"`
	OneWaySdMax          uint32   `protobuf:"varint,34,opt,name=one_way_sd_max,json=oneWaySdMax,proto3" json:"one_way_sd_max,omitempty"`
	OneWaySdSum          uint32   `protobuf:"varint,35,opt,name=one_way_sd_sum,json=oneWaySdSum,proto3" json:"one_way_sd_sum,omitempty"`
	OneWaySdSum2         uint64   `protobuf:"varint,36,opt,name=one_way_sd_sum2,json=oneWaySdSum2,proto3" json:"one_way_sd_sum2,omitempty"`
	OneWayDsMin          uint32   `protobuf:"varint,37,opt,name=one_way_ds_min,json=oneWayDsMin,proto3" json:"one_way_ds_min,omitempty"`
	OneWayDsMax          uint32   `protobuf:"varint,38,opt,name=one_way_ds_max,json=oneWayDsMax,proto3" json:"one_way_ds_max,omitempty"`
	OneWayDsSum          uint32   `protobuf:"varint,39,opt,name=one_way_ds_sum,json=oneWayDsSum,proto3" json:"one_way_ds_sum,omitempty"`
	OneWayDsSum2         uint64   `protobuf:"varint,40,opt,name=one_way_ds_sum2,json=oneWayDsSum2,proto3" json:"one_way_ds_sum2,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IpslaUdpJitterSpecStatsBag) Reset()         { *m = IpslaUdpJitterSpecStatsBag{} }
func (m *IpslaUdpJitterSpecStatsBag) String() string { return proto.CompactTextString(m) }
func (*IpslaUdpJitterSpecStatsBag) ProtoMessage()    {}
func (*IpslaUdpJitterSpecStatsBag) Descriptor() ([]byte, []int) {
	return fileDescriptor_897195338539467e, []int{3}
}

func (m *IpslaUdpJitterSpecStatsBag) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IpslaUdpJitterSpecStatsBag.Unmarshal(m, b)
}
func (m *IpslaUdpJitterSpecStatsBag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IpslaUdpJitterSpecStatsBag.Marshal(b, m, deterministic)
}
func (m *IpslaUdpJitterSpecStatsBag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IpslaUdpJitterSpecStatsBag.Merge(m, src)
}
func (m *IpslaUdpJitterSpecStatsBag) XXX_Size() int {
	return xxx_messageInfo_IpslaUdpJitterSpecStatsBag.Size(m)
}
func (m *IpslaUdpJitterSpecStatsBag) XXX_DiscardUnknown() {
	xxx_messageInfo_IpslaUdpJitterSpecStatsBag.DiscardUnknown(m)
}

var xxx_messageInfo_IpslaUdpJitterSpecStatsBag proto.InternalMessageInfo

func (m *IpslaUdpJitterSpecStatsBag) GetJitterIn() uint32 {
	if m != nil {
		return m.JitterIn
	}
	return 0
}

func (m *IpslaUdpJitterSpecStatsBag) GetJitterOut() uint32 {
	if m != nil {
		return m.JitterOut
	}
	return 0
}

func (m *IpslaUdpJitterSpecStatsBag) GetPacketLossSd() uint32 {
	if m != nil {
		return m.PacketLossSd
	}
	return 0
}

func (m *IpslaUdpJitterSpecStatsBag) GetPacketLossDs() uint32 {
	if m != nil {
		return m.PacketLossDs
	}
	return 0
}

func (m *IpslaUdpJitterSpecStatsBag) GetPacketOutOfSequence() uint32 {
	if m != nil {
		return m.PacketOutOfSequence
	}
	return 0
}

func (m *IpslaUdpJitterSpecStatsBag) GetPacketMia() uint32 {
	if m != nil {
		return m.PacketMia
	}
	return 0
}

func (m *IpslaUdpJitterSpecStatsBag) GetPacketSkipped() uint32 {
	if m != nil {
		return m.PacketSkipped
	}
	return 0
}

func (m *IpslaUdpJitterSpecStatsBag) GetPacketLateArrivals() uint32 {
	if m != nil {
		return m.PacketLateArrivals
	}
	return 0
}

func (m *IpslaUdpJitterSpecStatsBag) GetPacketInvalidTstamp() uint32 {
	if m != nil {
		return m.PacketInvalidTstamp
	}
	return 0
}

func (m *IpslaUdpJitterSpecStatsBag) GetInternalErrorsCount() uint32 {
	if m != nil {
		return m.InternalErrorsCount
	}
	return 0
}

func (m *IpslaUdpJitterSpecStatsBag) GetBusiesCount() uint32 {
	if m != nil {
		return m.BusiesCount
	}
	return 0
}

func (m *IpslaUdpJitterSpecStatsBag) GetPositiveSdSum() uint32 {
	if m != nil {
		return m.PositiveSdSum
	}
	return 0
}

func (m *IpslaUdpJitterSpecStatsBag) GetPositiveSdSum2() uint64 {
	if m != nil {
		return m.PositiveSdSum2
	}
	return 0
}

func (m *IpslaUdpJitterSpecStatsBag) GetPositiveSdMin() uint32 {
	if m != nil {
		return m.PositiveSdMin
	}
	return 0
}

func (m *IpslaUdpJitterSpecStatsBag) GetPositiveSdMax() uint32 {
	if m != nil {
		return m.PositiveSdMax
	}
	return 0
}

func (m *IpslaUdpJitterSpecStatsBag) GetPositiveSdCount() uint32 {
	if m != nil {
		return m.PositiveSdCount
	}
	return 0
}

func (m *IpslaUdpJitterSpecStatsBag) GetNegativeSdSum() uint32 {
	if m != nil {
		return m.NegativeSdSum
	}
	return 0
}

func (m *IpslaUdpJitterSpecStatsBag) GetNegativeSdSum2() uint64 {
	if m != nil {
		return m.NegativeSdSum2
	}
	return 0
}

func (m *IpslaUdpJitterSpecStatsBag) GetNegativeSdMin() uint32 {
	if m != nil {
		return m.NegativeSdMin
	}
	return 0
}

func (m *IpslaUdpJitterSpecStatsBag) GetNegativeSdMax() uint32 {
	if m != nil {
		return m.NegativeSdMax
	}
	return 0
}

func (m *IpslaUdpJitterSpecStatsBag) GetNegativeSdCount() uint32 {
	if m != nil {
		return m.NegativeSdCount
	}
	return 0
}

func (m *IpslaUdpJitterSpecStatsBag) GetPositiveDsSum() uint32 {
	if m != nil {
		return m.PositiveDsSum
	}
	return 0
}

func (m *IpslaUdpJitterSpecStatsBag) GetPositiveDsSum2() uint64 {
	if m != nil {
		return m.PositiveDsSum2
	}
	return 0
}

func (m *IpslaUdpJitterSpecStatsBag) GetPositiveDsMin() uint32 {
	if m != nil {
		return m.PositiveDsMin
	}
	return 0
}

func (m *IpslaUdpJitterSpecStatsBag) GetPositiveDsMax() uint32 {
	if m != nil {
		return m.PositiveDsMax
	}
	return 0
}

func (m *IpslaUdpJitterSpecStatsBag) GetPositiveDsCount() uint32 {
	if m != nil {
		return m.PositiveDsCount
	}
	return 0
}

func (m *IpslaUdpJitterSpecStatsBag) GetNegativeDsSum() uint32 {
	if m != nil {
		return m.NegativeDsSum
	}
	return 0
}

func (m *IpslaUdpJitterSpecStatsBag) GetNegativeDsSum2() uint64 {
	if m != nil {
		return m.NegativeDsSum2
	}
	return 0
}

func (m *IpslaUdpJitterSpecStatsBag) GetNegativeDsMin() uint32 {
	if m != nil {
		return m.NegativeDsMin
	}
	return 0
}

func (m *IpslaUdpJitterSpecStatsBag) GetNegativeDsMax() uint32 {
	if m != nil {
		return m.NegativeDsMax
	}
	return 0
}

func (m *IpslaUdpJitterSpecStatsBag) GetNegativeDsCount() uint32 {
	if m != nil {
		return m.NegativeDsCount
	}
	return 0
}

func (m *IpslaUdpJitterSpecStatsBag) GetOneWayCount() uint32 {
	if m != nil {
		return m.OneWayCount
	}
	return 0
}

func (m *IpslaUdpJitterSpecStatsBag) GetOneWaySdMin() uint32 {
	if m != nil {
		return m.OneWaySdMin
	}
	return 0
}

func (m *IpslaUdpJitterSpecStatsBag) GetOneWaySdMax() uint32 {
	if m != nil {
		return m.OneWaySdMax
	}
	return 0
}

func (m *IpslaUdpJitterSpecStatsBag) GetOneWaySdSum() uint32 {
	if m != nil {
		return m.OneWaySdSum
	}
	return 0
}

func (m *IpslaUdpJitterSpecStatsBag) GetOneWaySdSum2() uint64 {
	if m != nil {
		return m.OneWaySdSum2
	}
	return 0
}

func (m *IpslaUdpJitterSpecStatsBag) GetOneWayDsMin() uint32 {
	if m != nil {
		return m.OneWayDsMin
	}
	return 0
}

func (m *IpslaUdpJitterSpecStatsBag) GetOneWayDsMax() uint32 {
	if m != nil {
		return m.OneWayDsMax
	}
	return 0
}

func (m *IpslaUdpJitterSpecStatsBag) GetOneWayDsSum() uint32 {
	if m != nil {
		return m.OneWayDsSum
	}
	return 0
}

func (m *IpslaUdpJitterSpecStatsBag) GetOneWayDsSum2() uint64 {
	if m != nil {
		return m.OneWayDsSum2
	}
	return 0
}

type IpslaUnionStatsBag struct {
	OpType               string                           `protobuf:"bytes,1,opt,name=op_type,json=opType,proto3" json:"op_type,omitempty"`
	IcmpPathJitterStats  *IpslaIcmpPathJitterSpecStatsBag `protobuf:"bytes,2,opt,name=icmp_path_jitter_stats,json=icmpPathJitterStats,proto3" json:"icmp_path_jitter_stats,omitempty"`
	UdpJitterStats       *IpslaUdpJitterSpecStatsBag      `protobuf:"bytes,3,opt,name=udp_jitter_stats,json=udpJitterStats,proto3" json:"udp_jitter_stats,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                         `json:"-"`
	XXX_unrecognized     []byte                           `json:"-"`
	XXX_sizecache        int32                            `json:"-"`
}

func (m *IpslaUnionStatsBag) Reset()         { *m = IpslaUnionStatsBag{} }
func (m *IpslaUnionStatsBag) String() string { return proto.CompactTextString(m) }
func (*IpslaUnionStatsBag) ProtoMessage()    {}
func (*IpslaUnionStatsBag) Descriptor() ([]byte, []int) {
	return fileDescriptor_897195338539467e, []int{4}
}

func (m *IpslaUnionStatsBag) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IpslaUnionStatsBag.Unmarshal(m, b)
}
func (m *IpslaUnionStatsBag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IpslaUnionStatsBag.Marshal(b, m, deterministic)
}
func (m *IpslaUnionStatsBag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IpslaUnionStatsBag.Merge(m, src)
}
func (m *IpslaUnionStatsBag) XXX_Size() int {
	return xxx_messageInfo_IpslaUnionStatsBag.Size(m)
}
func (m *IpslaUnionStatsBag) XXX_DiscardUnknown() {
	xxx_messageInfo_IpslaUnionStatsBag.DiscardUnknown(m)
}

var xxx_messageInfo_IpslaUnionStatsBag proto.InternalMessageInfo

func (m *IpslaUnionStatsBag) GetOpType() string {
	if m != nil {
		return m.OpType
	}
	return ""
}

func (m *IpslaUnionStatsBag) GetIcmpPathJitterStats() *IpslaIcmpPathJitterSpecStatsBag {
	if m != nil {
		return m.IcmpPathJitterStats
	}
	return nil
}

func (m *IpslaUnionStatsBag) GetUdpJitterStats() *IpslaUdpJitterSpecStatsBag {
	if m != nil {
		return m.UdpJitterStats
	}
	return nil
}

type IpslaGlobalStatsBag struct {
	CommonStats          *IpslaCommonStatsBag `protobuf:"bytes,50,opt,name=common_stats,json=commonStats,proto3" json:"common_stats,omitempty"`
	SpecificStats        *IpslaUnionStatsBag  `protobuf:"bytes,51,opt,name=specific_stats,json=specificStats,proto3" json:"specific_stats,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *IpslaGlobalStatsBag) Reset()         { *m = IpslaGlobalStatsBag{} }
func (m *IpslaGlobalStatsBag) String() string { return proto.CompactTextString(m) }
func (*IpslaGlobalStatsBag) ProtoMessage()    {}
func (*IpslaGlobalStatsBag) Descriptor() ([]byte, []int) {
	return fileDescriptor_897195338539467e, []int{5}
}

func (m *IpslaGlobalStatsBag) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IpslaGlobalStatsBag.Unmarshal(m, b)
}
func (m *IpslaGlobalStatsBag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IpslaGlobalStatsBag.Marshal(b, m, deterministic)
}
func (m *IpslaGlobalStatsBag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IpslaGlobalStatsBag.Merge(m, src)
}
func (m *IpslaGlobalStatsBag) XXX_Size() int {
	return xxx_messageInfo_IpslaGlobalStatsBag.Size(m)
}
func (m *IpslaGlobalStatsBag) XXX_DiscardUnknown() {
	xxx_messageInfo_IpslaGlobalStatsBag.DiscardUnknown(m)
}

var xxx_messageInfo_IpslaGlobalStatsBag proto.InternalMessageInfo

func (m *IpslaGlobalStatsBag) GetCommonStats() *IpslaCommonStatsBag {
	if m != nil {
		return m.CommonStats
	}
	return nil
}

func (m *IpslaGlobalStatsBag) GetSpecificStats() *IpslaUnionStatsBag {
	if m != nil {
		return m.SpecificStats
	}
	return nil
}

func init() {
	proto.RegisterType((*IpslaGlobalStatsBag_KEYS)(nil), "cisco_ios_xr_man_ipsla_oper.ipsla.operation_data.operations.operation.statistics.aggregated.hours.hour.non_distributed.paths.path.hops.hop.ipsla_global_stats_bag_KEYS")
	proto.RegisterType((*IpslaCommonStatsBag)(nil), "cisco_ios_xr_man_ipsla_oper.ipsla.operation_data.operations.operation.statistics.aggregated.hours.hour.non_distributed.paths.path.hops.hop.ipsla_common_stats_bag")
	proto.RegisterType((*IpslaIcmpPathJitterSpecStatsBag)(nil), "cisco_ios_xr_man_ipsla_oper.ipsla.operation_data.operations.operation.statistics.aggregated.hours.hour.non_distributed.paths.path.hops.hop.ipsla_icmp_path_jitter_spec_stats_bag")
	proto.RegisterType((*IpslaUdpJitterSpecStatsBag)(nil), "cisco_ios_xr_man_ipsla_oper.ipsla.operation_data.operations.operation.statistics.aggregated.hours.hour.non_distributed.paths.path.hops.hop.ipsla_udp_jitter_spec_stats_bag")
	proto.RegisterType((*IpslaUnionStatsBag)(nil), "cisco_ios_xr_man_ipsla_oper.ipsla.operation_data.operations.operation.statistics.aggregated.hours.hour.non_distributed.paths.path.hops.hop.ipsla_union_stats_bag")
	proto.RegisterType((*IpslaGlobalStatsBag)(nil), "cisco_ios_xr_man_ipsla_oper.ipsla.operation_data.operations.operation.statistics.aggregated.hours.hour.non_distributed.paths.path.hops.hop.ipsla_global_stats_bag")
}

func init() { proto.RegisterFile("ipsla_global_stats_bag.proto", fileDescriptor_897195338539467e) }

var fileDescriptor_897195338539467e = []byte{
	// 1483 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x98, 0xdd, 0x6e, 0x1c, 0x35,
	0x14, 0xc7, 0xb5, 0xe4, 0x73, 0xbd, 0x5f, 0xc9, 0x6c, 0xb3, 0x9d, 0x36, 0x2d, 0x69, 0xb6, 0x4d,
	0x5b, 0xaa, 0x6a, 0x05, 0x53, 0x5e, 0xa0, 0x6a, 0x7b, 0x11, 0xa0, 0x2a, 0xda, 0xad, 0x84, 0xb8,
	0x1a, 0x39, 0x3b, 0xce, 0xae, 0xc9, 0x8e, 0x3d, 0x8c, 0x3d, 0x61, 0xf2, 0x0a, 0xbc, 0x02, 0x57,
	0x70, 0x8b, 0xb8, 0xe0, 0x25, 0x90, 0x78, 0x01, 0x5e, 0x01, 0x71, 0xcd, 0x1d, 0xdc, 0x20, 0xfb,
	0x78, 0x66, 0x6c, 0x87, 0x48, 0xed, 0x5d, 0x6e, 0xa2, 0xcd, 0x39, 0x3f, 0x7b, 0xce, 0xdf, 0xe7,
	0xc3, 0xb3, 0x8b, 0xee, 0xd0, 0x4c, 0xac, 0x70, 0xbc, 0x58, 0xf1, 0x13, 0xbc, 0x8a, 0x85, 0xc4,
	0x52, 0xc4, 0x27, 0x78, 0x31, 0xc9, 0x72, 0x2e, 0x79, 0xf0, 0x7d, 0x6b, 0x4e, 0xc5, 0x9c, 0xc7,
	0x94, 0x8b, 0xb8, 0xcc, 0xe3, 0x14, 0xb3, 0x18, 0x78, 0x9e, 0x91, 0x7c, 0xa2, 0x3f, 0x4e, 0xd4,
	0x47, 0x2c, 0x29, 0x67, 0x71, 0x82, 0xa5, 0xf5, 0xaf, 0x68, 0x3e, 0x4e, 0xd4, 0xbe, 0x54, 0x48,
	0x3a, 0x17, 0x13, 0xbc, 0x58, 0xe4, 0x64, 0x81, 0x25, 0x49, 0x26, 0x4b, 0x5e, 0xe4, 0x42, 0xff,
	0x9d, 0x30, 0xb5, 0x9c, 0x0a, 0x99, 0xd3, 0x93, 0x42, 0xb9, 0x32, 0x2c, 0x97, 0x42, 0xff, 0x9d,
	0x2c, 0x79, 0xa6, 0xa0, 0x6c, 0xfc, 0x43, 0x0b, 0xed, 0xff, 0x7f, 0xb4, 0xf1, 0xe7, 0xaf, 0xbe,
	0x9e, 0x05, 0x87, 0xa8, 0xdb, 0xc4, 0x42, 0x93, 0xb0, 0x75, 0xaf, 0xf5, 0x78, 0x63, 0xda, 0xa9,
	0x6d, 0xc7, 0x49, 0x70, 0x17, 0x21, 0xf5, 0xb8, 0x98, 0xb2, 0x84, 0x94, 0xe1, 0x07, 0x1a, 0x68,
	0x2b, 0xcb, 0xb1, 0x32, 0x28, 0xb7, 0x7a, 0xa4, 0x71, 0xaf, 0x81, 0x5b, 0x59, 0xc0, 0xbd, 0x8f,
	0xda, 0x4b, 0x9e, 0x19, 0xef, 0xba, 0xf6, 0x6e, 0x2f, 0x79, 0xa6, 0x9d, 0xe3, 0x7f, 0x37, 0xd0,
	0x08, 0xa2, 0x9b, 0xf3, 0x34, 0xe5, 0xac, 0x89, 0x2e, 0x38, 0x42, 0xfd, 0x26, 0x30, 0x49, 0x53,
	0xa2, 0x43, 0x5b, 0x9f, 0xf6, 0x6a, 0xeb, 0x5b, 0x9a, 0x92, 0xe0, 0x00, 0x75, 0x72, 0x22, 0x8b,
	0x9c, 0xc5, 0x73, 0x9e, 0x10, 0x1d, 0x5d, 0x7b, 0x8a, 0xc0, 0xf4, 0x82, 0x27, 0x24, 0x98, 0xa0,
	0x61, 0x4e, 0x44, 0xc6, 0x99, 0x20, 0x7a, 0x9b, 0x78, 0xce, 0x0b, 0x26, 0x75, 0x9c, 0xbd, 0xe9,
	0x6e, 0xe5, 0x52, 0x7b, 0xbd, 0x50, 0x8e, 0xe0, 0x3e, 0xea, 0x39, 0xbc, 0x8e, 0xb9, 0x37, 0xed,
	0xda, 0x64, 0xf0, 0x04, 0xed, 0xa6, 0x94, 0xc5, 0x2e, 0xb8, 0xa1, 0xc1, 0x41, 0x4a, 0xd9, 0xd4,
	0x67, 0x71, 0xe9, 0xb1, 0x9b, 0x86, 0xc5, 0xa5, 0xcf, 0x8a, 0x22, 0xf5, 0xd8, 0x2d, 0x60, 0x45,
	0x91, 0x3a, 0xec, 0x53, 0x14, 0x88, 0x22, 0x8d, 0x3c, 0x78, 0x5b, 0x1f, 0xd2, 0x8e, 0xf2, 0x38,
	0xf4, 0x21, 0xea, 0x16, 0x59, 0x82, 0x65, 0xa5, 0xbf, 0xad, 0x37, 0xed, 0x80, 0x0d, 0x94, 0xdf,
	0x42, 0xdb, 0xfc, 0xcc, 0xb8, 0x91, 0x76, 0x6f, 0xf1, 0x33, 0x70, 0x7d, 0x84, 0x76, 0x12, 0x55,
	0xd3, 0x8c, 0x91, 0xb9, 0x34, 0x48, 0x07, 0xc2, 0x6a, 0xec, 0xf5, 0xf9, 0xa9, 0x40, 0x78, 0x51,
	0x71, 0x5d, 0x38, 0x3f, 0x63, 0x04, 0xe8, 0x2e, 0x42, 0x27, 0x85, 0xb8, 0x30, 0x44, 0x4f, 0x13,
	0x6d, 0x65, 0x01, 0xf7, 0x04, 0x0d, 0x19, 0x8f, 0xcd, 0xb6, 0x2a, 0xff, 0xc0, 0xf5, 0x21, 0x67,
	0x8c, 0xbf, 0xa8, 0x3d, 0xf5, 0x33, 0x93, 0x9c, 0x67, 0x19, 0x49, 0x0c, 0x39, 0x80, 0x67, 0x1a,
	0x23, 0x40, 0x1f, 0xa3, 0x1b, 0x94, 0x49, 0x92, 0x33, 0xbc, 0x8a, 0x49, 0x9e, 0xf3, 0xdc, 0xb0,
	0x3b, 0x9a, 0x0d, 0x2a, 0xdf, 0x2b, 0xe5, 0xaa, 0x57, 0x08, 0xf2, 0x6d, 0x41, 0xd8, 0x9c, 0x38,
	0x2b, 0x76, 0x61, 0x45, 0xe5, 0xb3, 0x56, 0x3c, 0x45, 0xc1, 0x39, 0xc9, 0xe9, 0xe9, 0x85, 0xc3,
	0x07, 0x9a, 0xdf, 0x01, 0x4f, 0x43, 0x8f, 0xff, 0xd9, 0x46, 0x47, 0x50, 0xfd, 0x74, 0x9e, 0x66,
	0xb1, 0xee, 0xa2, 0x6f, 0xa8, 0x94, 0x24, 0x8f, 0x45, 0x46, 0xe6, 0x6e, 0x33, 0x08, 0x5e, 0xe4,
	0x73, 0x12, 0xe3, 0x24, 0xc9, 0x89, 0x10, 0xba, 0x19, 0xda, 0xd3, 0x1e, 0x58, 0x9f, 0x83, 0x51,
	0x25, 0x39, 0x21, 0x42, 0xd6, 0x10, 0x74, 0x43, 0x47, 0xd9, 0x2a, 0xe4, 0x00, 0x75, 0x54, 0x3b,
	0x56, 0xc4, 0x1a, 0xf4, 0xcb, 0x92, 0x67, 0x15, 0xf0, 0x08, 0x0d, 0x32, 0x3c, 0x3f, 0x23, 0x32,
	0xd6, 0x27, 0x72, 0x8e, 0x57, 0xa6, 0x03, 0xfa, 0x60, 0x3e, 0x36, 0xd6, 0xab, 0x1a, 0x6b, 0xe3,
	0x9d, 0x1b, 0x6b, 0xf3, 0x5d, 0x1b, 0x6b, 0xeb, 0x3d, 0x1a, 0x6b, 0xfb, 0x3d, 0x1a, 0xab, 0xfd,
	0x3e, 0x8d, 0x85, 0xae, 0x6e, 0x2c, 0x73, 0x5e, 0x76, 0x5b, 0x74, 0xc0, 0x06, 0xca, 0x9f, 0xa0,
	0x5d, 0x83, 0xac, 0xb8, 0x10, 0x4e, 0x5b, 0x98, 0xb3, 0xfe, 0x82, 0x0b, 0x01, 0xec, 0x27, 0x68,
	0x4f, 0xb5, 0x0e, 0x3f, 0x8d, 0xeb, 0xd2, 0xb3, 0x9b, 0x24, 0xe0, 0x85, 0x7c, 0x73, 0x3a, 0x33,
	0x2e, 0x58, 0xf2, 0x29, 0x1a, 0xa9, 0x26, 0xc4, 0x79, 0x42, 0x92, 0x58, 0xe0, 0x34, 0x5b, 0x11,
	0xa7, 0x61, 0x6e, 0xd4, 0xde, 0x99, 0x76, 0xd6, 0x3d, 0x66, 0x97, 0xaa, 0x70, 0x3a, 0x67, 0xd7,
	0xaa, 0x55, 0x51, 0xf3, 0x55, 0x8f, 0x5d, 0xee, 0x9e, 0x5d, 0xe3, 0xb2, 0x5a, 0x61, 0x84, 0x36,
	0xa1, 0x96, 0x4d, 0xbb, 0x98, 0xff, 0x82, 0x07, 0xa8, 0x9f, 0x71, 0x51, 0xd7, 0x79, 0x91, 0x9a,
	0xf6, 0xe8, 0x66, 0x5c, 0x7c, 0xa6, 0x8d, 0xb3, 0x22, 0x0d, 0x1e, 0xa2, 0x81, 0x4b, 0x45, 0xe1,
	0x10, 0xc6, 0xbf, 0x8d, 0x45, 0xde, 0x6e, 0x29, 0x65, 0xe1, 0x0d, 0x6f, 0xb7, 0xd7, 0x94, 0xf9,
	0x14, 0x2e, 0xc3, 0x3d, 0x9f, 0xc2, 0x65, 0xf0, 0x18, 0xed, 0x58, 0x14, 0xc8, 0x1b, 0x99, 0xd2,
	0xaf, 0x38, 0xd0, 0xf6, 0x00, 0xf5, 0x19, 0x59, 0xd8, 0x1a, 0x6e, 0xc2, 0x7e, 0x8c, 0x2c, 0x1a,
	0x0d, 0x2e, 0xa5, 0x62, 0x0b, 0x3d, 0xca, 0xc4, 0x66, 0x53, 0xb8, 0x0c, 0x6f, 0xf9, 0x14, 0x2e,
	0xd5, 0x79, 0xb8, 0x4f, 0x8c, 0xc2, 0xdb, 0x70, 0x1e, 0xf6, 0x23, 0x23, 0xa5, 0xc1, 0xe2, 0x40,
	0xc3, 0x3e, 0x68, 0xa8, 0x41, 0x18, 0x3e, 0x7f, 0x75, 0xd1, 0x01, 0x0c, 0x9f, 0x22, 0xc9, 0xae,
	0x18, 0x3b, 0xfb, 0xa8, 0x6d, 0x1c, 0x94, 0xe9, 0x89, 0xd3, 0x9b, 0x6e, 0x83, 0xe1, 0x98, 0xa9,
	0x19, 0x6e, 0x9c, 0xbc, 0x90, 0x7a, 0xd4, 0xf4, 0xa6, 0x06, 0x7f, 0x53, 0xe8, 0x33, 0xb2, 0x8b,
	0x5e, 0x24, 0xe6, 0xca, 0xed, 0x36, 0x15, 0x3f, 0x4b, 0x7c, 0x2a, 0x11, 0xd5, 0x75, 0xdb, 0x50,
	0x2f, 0x45, 0xf0, 0x0c, 0x8d, 0x0c, 0xe5, 0xf5, 0x86, 0x99, 0x36, 0x43, 0xf0, 0xbe, 0xb1, 0x7b,
	0x03, 0xde, 0x4b, 0xf4, 0xa2, 0x94, 0x62, 0x33, 0x6c, 0xda, 0x60, 0x79, 0x4d, 0xb1, 0x1a, 0xa9,
	0xc6, 0x2d, 0xce, 0xa8, 0xaa, 0x5d, 0x33, 0x66, 0x7a, 0x60, 0x9d, 0x81, 0x51, 0xdd, 0x01, 0x55,
	0x80, 0xea, 0xf2, 0xc4, 0x79, 0x4e, 0xcf, 0xf1, 0x4a, 0x98, 0x39, 0x13, 0x98, 0x30, 0xb1, 0x24,
	0xcf, 0x8d, 0x27, 0x88, 0xd0, 0x5e, 0x3d, 0x40, 0xcf, 0xf1, 0x8a, 0x26, 0xb1, 0x14, 0x12, 0xa7,
	0x99, 0x19, 0x37, 0xc3, 0x6a, 0x8c, 0x6a, 0xdf, 0x5b, 0xed, 0x52, 0x6b, 0xdc, 0xbb, 0x49, 0x38,
	0xf7, 0xf0, 0xd0, 0xb9, 0x9c, 0x4c, 0x43, 0x1e, 0xa2, 0xee, 0x49, 0x21, 0x28, 0x11, 0xee, 0xe0,
	0x01, 0x1b, 0x20, 0xd0, 0x45, 0x54, 0xd2, 0x73, 0x12, 0x8b, 0x44, 0x17, 0x6a, 0xd7, 0x88, 0x34,
	0xe6, 0x59, 0xa2, 0x2a, 0x15, 0x2a, 0xdf, 0xe6, 0x22, 0x3d, 0x6f, 0xd6, 0x75, 0xe5, 0x37, 0x60,
	0xe4, 0xef, 0xa8, 0x8a, 0xba, 0xef, 0xef, 0xa8, 0xaa, 0xda, 0xe7, 0x70, 0x69, 0x26, 0x8b, 0xcd,
	0xe1, 0x52, 0x8f, 0x46, 0x8b, 0xb3, 0x67, 0xca, 0xa0, 0x21, 0x6b, 0x35, 0x4c, 0xbd, 0x04, 0x5b,
	0x6a, 0x60, 0xb4, 0xf4, 0x2a, 0x73, 0xad, 0xc6, 0xe3, 0x22, 0x3d, 0x63, 0xd6, 0x75, 0x0f, 0x60,
	0x57, 0x8d, 0x4d, 0x2a, 0x35, 0x43, 0x7f, 0x47, 0xa3, 0xc6, 0xe1, 0x70, 0x69, 0xc6, 0x8c, 0xcd,
	0x81, 0x1a, 0x9b, 0x03, 0x35, 0x30, 0x6a, 0x06, 0x0d, 0x79, 0x39, 0x37, 0x89, 0xd0, 0x6a, 0x46,
	0xee, 0x09, 0xbd, 0x14, 0x7e, 0x6e, 0x80, 0x8b, 0xf4, 0xb4, 0xb1, 0x72, 0xa3, 0xc1, 0xc8, 0xdf,
	0xb1, 0x19, 0x38, 0xd6, 0x8e, 0x7e, 0x6e, 0x14, 0x57, 0x8f, 0x1c, 0x9b, 0xf3, 0x72, 0x93, 0x54,
	0x55, 0x76, 0xdb, 0xcd, 0xcd, 0x4b, 0x71, 0x39, 0x37, 0x46, 0xcd, 0xbe, 0x7b, 0x42, 0xb5, 0x1a,
	0x8f, 0x8b, 0xc2, 0x3b, 0x6e, 0x6e, 0x1a, 0x35, 0x36, 0xa9, 0xd4, 0xdc, 0xf5, 0x77, 0xf4, 0x73,
	0x63, 0xd4, 0x7c, 0x78, 0x89, 0xf3, 0x72, 0x53, 0xab, 0x39, 0x70, 0x73, 0x53, 0xa9, 0x19, 0xa3,
	0x1e, 0x67, 0x24, 0xfe, 0x0e, 0x57, 0x6f, 0xa8, 0xf7, 0xa0, 0xb7, 0x38, 0x23, 0x5f, 0xe1, 0x8b,
	0xea, 0x75, 0xa6, 0x5f, 0x31, 0xa6, 0x74, 0x0e, 0x6d, 0x08, 0x0a, 0xc7, 0x83, 0x70, 0x19, 0x8e,
	0x3d, 0x08, 0x97, 0x1e, 0xa4, 0x8e, 0xee, 0xbe, 0x0b, 0xa9, 0x83, 0x3b, 0x42, 0x03, 0x17, 0x8a,
	0xc2, 0x07, 0xfa, 0xdc, 0xba, 0x16, 0x15, 0xd9, 0x7b, 0x99, 0x43, 0x3b, 0xb2, 0xf7, 0x82, 0x23,
	0xf3, 0x20, 0x5c, 0x86, 0x0f, 0x3d, 0xc8, 0x8d, 0xca, 0x24, 0xf4, 0x91, 0x0b, 0x79, 0x51, 0x55,
	0xd9, 0x7c, 0x6c, 0x47, 0x05, 0xb9, 0x1c, 0xff, 0xbd, 0x86, 0xf6, 0xcc, 0x5d, 0xc3, 0xa8, 0xf3,
	0x2d, 0xef, 0x26, 0xda, 0xe2, 0x59, 0x2c, 0x2f, 0x32, 0x62, 0xde, 0x68, 0x37, 0x79, 0xf6, 0xf6,
	0x22, 0x23, 0xc1, 0x9f, 0x2d, 0x34, 0xba, 0xfc, 0x56, 0xac, 0xd6, 0xe9, 0xab, 0xa6, 0x13, 0xfd,
	0xda, 0x9a, 0x5c, 0x9f, 0xaf, 0xd9, 0x93, 0x77, 0x7a, 0x8d, 0x9f, 0x0e, 0x15, 0xf0, 0x25, 0x96,
	0x4b, 0x73, 0x63, 0x2b, 0x47, 0xf0, 0x47, 0x0b, 0xed, 0xd8, 0x57, 0xb0, 0xd6, 0xb8, 0xa6, 0x35,
	0xfe, 0x7c, 0x0d, 0x35, 0x5e, 0xf9, 0xb6, 0x30, 0xed, 0x17, 0x49, 0x66, 0x09, 0x1b, 0xff, 0xb2,
	0x56, 0x7d, 0xb9, 0xf7, 0x7f, 0x7a, 0x08, 0x7e, 0x6b, 0xa1, 0xae, 0xfd, 0x8d, 0x3f, 0x8c, 0xb4,
	0xde, 0x9f, 0xae, 0xa1, 0x5e, 0xff, 0x87, 0x89, 0x69, 0x07, 0x2c, 0x90, 0xbc, 0xdf, 0x5b, 0xa8,
	0xaf, 0x8e, 0x81, 0x9e, 0x52, 0x73, 0x14, 0xe1, 0x33, 0x2d, 0xe5, 0xc7, 0xeb, 0x98, 0x3a, 0xb7,
	0xf9, 0xa6, 0xbd, 0x2a, 0x72, 0xad, 0xe5, 0x64, 0x53, 0xff, 0x7c, 0xf5, 0xec, 0xbf, 0x00, 0x00,
	0x00, 0xff, 0xff, 0xb0, 0xea, 0x28, 0x5d, 0xde, 0x12, 0x00, 0x00,
}
