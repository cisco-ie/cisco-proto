/*
Copyright 2019 Cisco Systems

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pppoe_ma_throttle_config_info.proto

package cisco_ios_xr_subscriber_pppoe_ma_oper_pppoe_nodes_node_bba_groups_bba_group_throttle_config

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type PppoeMaThrottleConfigInfo_KEYS struct {
	NodeName             string   `protobuf:"bytes,1,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	BbaGroupName         string   `protobuf:"bytes,2,opt,name=bba_group_name,json=bbaGroupName,proto3" json:"bba_group_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PppoeMaThrottleConfigInfo_KEYS) Reset()         { *m = PppoeMaThrottleConfigInfo_KEYS{} }
func (m *PppoeMaThrottleConfigInfo_KEYS) String() string { return proto.CompactTextString(m) }
func (*PppoeMaThrottleConfigInfo_KEYS) ProtoMessage()    {}
func (*PppoeMaThrottleConfigInfo_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a9ab1c20379aced, []int{0}
}

func (m *PppoeMaThrottleConfigInfo_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PppoeMaThrottleConfigInfo_KEYS.Unmarshal(m, b)
}
func (m *PppoeMaThrottleConfigInfo_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PppoeMaThrottleConfigInfo_KEYS.Marshal(b, m, deterministic)
}
func (m *PppoeMaThrottleConfigInfo_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PppoeMaThrottleConfigInfo_KEYS.Merge(m, src)
}
func (m *PppoeMaThrottleConfigInfo_KEYS) XXX_Size() int {
	return xxx_messageInfo_PppoeMaThrottleConfigInfo_KEYS.Size(m)
}
func (m *PppoeMaThrottleConfigInfo_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_PppoeMaThrottleConfigInfo_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_PppoeMaThrottleConfigInfo_KEYS proto.InternalMessageInfo

func (m *PppoeMaThrottleConfigInfo_KEYS) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

func (m *PppoeMaThrottleConfigInfo_KEYS) GetBbaGroupName() string {
	if m != nil {
		return m.BbaGroupName
	}
	return ""
}

type PppoeMaThrottleConfigSingle struct {
	Limit                uint32   `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	RequestPeriod        uint32   `protobuf:"varint,2,opt,name=request_period,json=requestPeriod,proto3" json:"request_period,omitempty"`
	BlockingPeriod       uint32   `protobuf:"varint,3,opt,name=blocking_period,json=blockingPeriod,proto3" json:"blocking_period,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PppoeMaThrottleConfigSingle) Reset()         { *m = PppoeMaThrottleConfigSingle{} }
func (m *PppoeMaThrottleConfigSingle) String() string { return proto.CompactTextString(m) }
func (*PppoeMaThrottleConfigSingle) ProtoMessage()    {}
func (*PppoeMaThrottleConfigSingle) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a9ab1c20379aced, []int{1}
}

func (m *PppoeMaThrottleConfigSingle) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PppoeMaThrottleConfigSingle.Unmarshal(m, b)
}
func (m *PppoeMaThrottleConfigSingle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PppoeMaThrottleConfigSingle.Marshal(b, m, deterministic)
}
func (m *PppoeMaThrottleConfigSingle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PppoeMaThrottleConfigSingle.Merge(m, src)
}
func (m *PppoeMaThrottleConfigSingle) XXX_Size() int {
	return xxx_messageInfo_PppoeMaThrottleConfigSingle.Size(m)
}
func (m *PppoeMaThrottleConfigSingle) XXX_DiscardUnknown() {
	xxx_messageInfo_PppoeMaThrottleConfigSingle.DiscardUnknown(m)
}

var xxx_messageInfo_PppoeMaThrottleConfigSingle proto.InternalMessageInfo

func (m *PppoeMaThrottleConfigSingle) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *PppoeMaThrottleConfigSingle) GetRequestPeriod() uint32 {
	if m != nil {
		return m.RequestPeriod
	}
	return 0
}

func (m *PppoeMaThrottleConfigSingle) GetBlockingPeriod() uint32 {
	if m != nil {
		return m.BlockingPeriod
	}
	return 0
}

type PppoeMaThrottleConfigInfo struct {
	Mac                   *PppoeMaThrottleConfigSingle `protobuf:"bytes,50,opt,name=mac,proto3" json:"mac,omitempty"`
	MacAccessInterface    *PppoeMaThrottleConfigSingle `protobuf:"bytes,51,opt,name=mac_access_interface,json=macAccessInterface,proto3" json:"mac_access_interface,omitempty"`
	MacIwfAccessInterface *PppoeMaThrottleConfigSingle `protobuf:"bytes,52,opt,name=mac_iwf_access_interface,json=macIwfAccessInterface,proto3" json:"mac_iwf_access_interface,omitempty"`
	CircuitId             *PppoeMaThrottleConfigSingle `protobuf:"bytes,53,opt,name=circuit_id,json=circuitId,proto3" json:"circuit_id,omitempty"`
	RemoteId              *PppoeMaThrottleConfigSingle `protobuf:"bytes,54,opt,name=remote_id,json=remoteId,proto3" json:"remote_id,omitempty"`
	CircuitIdAndRemoteId  *PppoeMaThrottleConfigSingle `protobuf:"bytes,55,opt,name=circuit_id_and_remote_id,json=circuitIdAndRemoteId,proto3" json:"circuit_id_and_remote_id,omitempty"`
	OuterVlanId           *PppoeMaThrottleConfigSingle `protobuf:"bytes,56,opt,name=outer_vlan_id,json=outerVlanId,proto3" json:"outer_vlan_id,omitempty"`
	InnerVlanId           *PppoeMaThrottleConfigSingle `protobuf:"bytes,57,opt,name=inner_vlan_id,json=innerVlanId,proto3" json:"inner_vlan_id,omitempty"`
	VlanId                *PppoeMaThrottleConfigSingle `protobuf:"bytes,58,opt,name=vlan_id,json=vlanId,proto3" json:"vlan_id,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}                     `json:"-"`
	XXX_unrecognized      []byte                       `json:"-"`
	XXX_sizecache         int32                        `json:"-"`
}

func (m *PppoeMaThrottleConfigInfo) Reset()         { *m = PppoeMaThrottleConfigInfo{} }
func (m *PppoeMaThrottleConfigInfo) String() string { return proto.CompactTextString(m) }
func (*PppoeMaThrottleConfigInfo) ProtoMessage()    {}
func (*PppoeMaThrottleConfigInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a9ab1c20379aced, []int{2}
}

func (m *PppoeMaThrottleConfigInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PppoeMaThrottleConfigInfo.Unmarshal(m, b)
}
func (m *PppoeMaThrottleConfigInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PppoeMaThrottleConfigInfo.Marshal(b, m, deterministic)
}
func (m *PppoeMaThrottleConfigInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PppoeMaThrottleConfigInfo.Merge(m, src)
}
func (m *PppoeMaThrottleConfigInfo) XXX_Size() int {
	return xxx_messageInfo_PppoeMaThrottleConfigInfo.Size(m)
}
func (m *PppoeMaThrottleConfigInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PppoeMaThrottleConfigInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PppoeMaThrottleConfigInfo proto.InternalMessageInfo

func (m *PppoeMaThrottleConfigInfo) GetMac() *PppoeMaThrottleConfigSingle {
	if m != nil {
		return m.Mac
	}
	return nil
}

func (m *PppoeMaThrottleConfigInfo) GetMacAccessInterface() *PppoeMaThrottleConfigSingle {
	if m != nil {
		return m.MacAccessInterface
	}
	return nil
}

func (m *PppoeMaThrottleConfigInfo) GetMacIwfAccessInterface() *PppoeMaThrottleConfigSingle {
	if m != nil {
		return m.MacIwfAccessInterface
	}
	return nil
}

func (m *PppoeMaThrottleConfigInfo) GetCircuitId() *PppoeMaThrottleConfigSingle {
	if m != nil {
		return m.CircuitId
	}
	return nil
}

func (m *PppoeMaThrottleConfigInfo) GetRemoteId() *PppoeMaThrottleConfigSingle {
	if m != nil {
		return m.RemoteId
	}
	return nil
}

func (m *PppoeMaThrottleConfigInfo) GetCircuitIdAndRemoteId() *PppoeMaThrottleConfigSingle {
	if m != nil {
		return m.CircuitIdAndRemoteId
	}
	return nil
}

func (m *PppoeMaThrottleConfigInfo) GetOuterVlanId() *PppoeMaThrottleConfigSingle {
	if m != nil {
		return m.OuterVlanId
	}
	return nil
}

func (m *PppoeMaThrottleConfigInfo) GetInnerVlanId() *PppoeMaThrottleConfigSingle {
	if m != nil {
		return m.InnerVlanId
	}
	return nil
}

func (m *PppoeMaThrottleConfigInfo) GetVlanId() *PppoeMaThrottleConfigSingle {
	if m != nil {
		return m.VlanId
	}
	return nil
}

func init() {
	proto.RegisterType((*PppoeMaThrottleConfigInfo_KEYS)(nil), "cisco_ios_xr_subscriber_pppoe_ma_oper.pppoe.nodes.node.bba_groups.bba_group.throttle_config.pppoe_ma_throttle_config_info_KEYS")
	proto.RegisterType((*PppoeMaThrottleConfigSingle)(nil), "cisco_ios_xr_subscriber_pppoe_ma_oper.pppoe.nodes.node.bba_groups.bba_group.throttle_config.pppoe_ma_throttle_config_single")
	proto.RegisterType((*PppoeMaThrottleConfigInfo)(nil), "cisco_ios_xr_subscriber_pppoe_ma_oper.pppoe.nodes.node.bba_groups.bba_group.throttle_config.pppoe_ma_throttle_config_info")
}

func init() {
	proto.RegisterFile("pppoe_ma_throttle_config_info.proto", fileDescriptor_8a9ab1c20379aced)
}

var fileDescriptor_8a9ab1c20379aced = []byte{
	// 458 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0xd5, 0xbf, 0x8b, 0xd4, 0x40,
	0x14, 0x07, 0x70, 0xc6, 0xc3, 0xf3, 0xf6, 0xad, 0xbb, 0xc2, 0xb0, 0x42, 0x40, 0xc4, 0x63, 0x55,
	0xbc, 0x2a, 0xc5, 0x9d, 0xbf, 0xbb, 0x2b, 0x44, 0x16, 0x41, 0x24, 0x82, 0x20, 0x16, 0x8f, 0xc9,
	0xe4, 0x25, 0x0e, 0x66, 0x66, 0xe2, 0xcc, 0xe4, 0xce, 0xc2, 0xde, 0xce, 0xce, 0x42, 0x6c, 0xfc,
	0x0b, 0xac, 0xf4, 0x7f, 0xf2, 0xcf, 0x90, 0xcc, 0x6e, 0x76, 0xe5, 0xc4, 0xb5, 0x12, 0xd2, 0x84,
	0xcc, 0xe3, 0x9b, 0xf7, 0x3e, 0x79, 0x29, 0x02, 0xd7, 0x9b, 0xa6, 0xb1, 0x84, 0x5a, 0x60, 0x78,
	0xed, 0x6c, 0x08, 0x35, 0xa1, 0xb4, 0xa6, 0x54, 0x15, 0x2a, 0x53, 0xda, 0xb4, 0x71, 0x36, 0x58,
	0xfe, 0x4a, 0x2a, 0x2f, 0x2d, 0x2a, 0xeb, 0xf1, 0x9d, 0x43, 0xdf, 0xe6, 0x5e, 0x3a, 0x95, 0x93,
	0xc3, 0xf5, 0xc3, 0xb6, 0x21, 0x97, 0xc6, 0x53, 0x6a, 0x6c, 0x41, 0x3e, 0x5e, 0xd3, 0x3c, 0x17,
	0x58, 0x39, 0xdb, 0x36, 0x7e, 0x73, 0x9b, 0x9e, 0x99, 0x33, 0xaf, 0x60, 0xbe, 0xd5, 0x80, 0x4f,
	0x1e, 0xbd, 0x7c, 0xce, 0xaf, 0xc0, 0xa8, 0x6b, 0x89, 0x46, 0x68, 0x4a, 0xd8, 0x3e, 0x3b, 0x18,
	0x65, 0x7b, 0x5d, 0xe1, 0xa9, 0xd0, 0xc4, 0x6f, 0xc0, 0x74, 0xdd, 0x7f, 0x99, 0x38, 0x17, 0x13,
	0x17, 0xf3, 0x5c, 0x3c, 0xee, 0x8a, 0x5d, 0x6a, 0xfe, 0x81, 0xc1, 0xb5, 0xbf, 0x4e, 0xf2, 0xca,
	0x54, 0x35, 0xf1, 0x19, 0x9c, 0xaf, 0x95, 0x56, 0x21, 0x8e, 0x98, 0x64, 0xcb, 0x03, 0xbf, 0x09,
	0x53, 0x47, 0x6f, 0x5b, 0xf2, 0x01, 0x1b, 0x72, 0xca, 0x16, 0xb1, 0xff, 0x24, 0x9b, 0xac, 0xaa,
	0xcf, 0x62, 0x91, 0xdf, 0x82, 0x4b, 0x79, 0x6d, 0xe5, 0x1b, 0x65, 0xaa, 0x3e, 0xb7, 0x13, 0x73,
	0xd3, 0xbe, 0xbc, 0x0c, 0xce, 0x7f, 0x8e, 0xe1, 0xea, 0xd6, 0x77, 0xe6, 0x1f, 0x19, 0xec, 0x68,
	0x21, 0x93, 0xc3, 0x7d, 0x76, 0x30, 0x3e, 0x7c, 0x9f, 0xfe, 0xc7, 0x0f, 0x90, 0xfe, 0x63, 0x27,
	0x59, 0x07, 0xe1, 0xdf, 0x18, 0xcc, 0xb4, 0x90, 0x28, 0xa4, 0x24, 0xef, 0x51, 0x99, 0x40, 0xae,
	0x14, 0x92, 0x92, 0xa3, 0x01, 0x08, 0xb9, 0x16, 0xf2, 0x38, 0xc2, 0x16, 0xbd, 0x8b, 0xff, 0x60,
	0x90, 0x74, 0x60, 0x75, 0x5a, 0xfe, 0x89, 0xbe, 0x3d, 0x00, 0xf4, 0x65, 0x2d, 0xe4, 0xe2, 0xb4,
	0x3c, 0xeb, 0xfe, 0xc2, 0x00, 0xa4, 0x72, 0xb2, 0x55, 0x01, 0x55, 0x91, 0xdc, 0x19, 0x80, 0x74,
	0xb4, 0xf2, 0x2c, 0x0a, 0xfe, 0x99, 0xc1, 0xc8, 0x91, 0xb6, 0x81, 0x3a, 0xdc, 0xdd, 0x01, 0xe0,
	0xf6, 0x96, 0x9c, 0x45, 0xc1, 0xbf, 0x33, 0x48, 0x36, 0x9b, 0x43, 0x61, 0x0a, 0xdc, 0x50, 0xef,
	0x0d, 0x80, 0x3a, 0x5b, 0xef, 0xf1, 0xd8, 0x14, 0x59, 0xcf, 0xfe, 0xca, 0x60, 0x62, 0xdb, 0x40,
	0x0e, 0x4f, 0x6a, 0x61, 0x3a, 0xeb, 0xfd, 0x01, 0x58, 0xc7, 0x91, 0xf4, 0xa2, 0x16, 0x66, 0x45,
	0x54, 0xc6, 0xfc, 0x46, 0x7c, 0x30, 0x04, 0x62, 0x24, 0xad, 0x88, 0x9f, 0x18, 0x5c, 0xe8, 0x71,
	0x0f, 0x07, 0x80, 0xdb, 0x3d, 0x89, 0xae, 0x7c, 0x37, 0xfe, 0x41, 0x8f, 0x7e, 0x05, 0x00, 0x00,
	0xff, 0xff, 0x91, 0x5c, 0x0d, 0x5a, 0x68, 0x07, 0x00, 0x00,
}
