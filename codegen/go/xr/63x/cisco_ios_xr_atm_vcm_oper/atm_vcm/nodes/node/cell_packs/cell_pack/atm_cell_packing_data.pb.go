/*
Copyright 2019 Cisco Systems

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: atm_cell_packing_data.proto

package cisco_ios_xr_atm_vcm_oper_atm_vcm_nodes_node_cell_packs_cell_pack

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type AtmCellPackingData_KEYS struct {
	NodeName             string   `protobuf:"bytes,1,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	InterfaceName        string   `protobuf:"bytes,2,opt,name=interface_name,json=interfaceName,proto3" json:"interface_name,omitempty"`
	Pci                  uint32   `protobuf:"varint,3,opt,name=pci,proto3" json:"pci,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AtmCellPackingData_KEYS) Reset()         { *m = AtmCellPackingData_KEYS{} }
func (m *AtmCellPackingData_KEYS) String() string { return proto.CompactTextString(m) }
func (*AtmCellPackingData_KEYS) ProtoMessage()    {}
func (*AtmCellPackingData_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_ab89bda4d1d55e88, []int{0}
}

func (m *AtmCellPackingData_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AtmCellPackingData_KEYS.Unmarshal(m, b)
}
func (m *AtmCellPackingData_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AtmCellPackingData_KEYS.Marshal(b, m, deterministic)
}
func (m *AtmCellPackingData_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AtmCellPackingData_KEYS.Merge(m, src)
}
func (m *AtmCellPackingData_KEYS) XXX_Size() int {
	return xxx_messageInfo_AtmCellPackingData_KEYS.Size(m)
}
func (m *AtmCellPackingData_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_AtmCellPackingData_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_AtmCellPackingData_KEYS proto.InternalMessageInfo

func (m *AtmCellPackingData_KEYS) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

func (m *AtmCellPackingData_KEYS) GetInterfaceName() string {
	if m != nil {
		return m.InterfaceName
	}
	return ""
}

func (m *AtmCellPackingData_KEYS) GetPci() uint32 {
	if m != nil {
		return m.Pci
	}
	return 0
}

type AtmVcmCellPackingInfo struct {
	LocalMaxCellsPackedPerPacket      uint32   `protobuf:"varint,1,opt,name=local_max_cells_packed_per_packet,json=localMaxCellsPackedPerPacket,proto3" json:"local_max_cells_packed_per_packet,omitempty"`
	NegotiatedMaxCellsPackedPerPacket uint32   `protobuf:"varint,2,opt,name=negotiated_max_cells_packed_per_packet,json=negotiatedMaxCellsPackedPerPacket,proto3" json:"negotiated_max_cells_packed_per_packet,omitempty"`
	MaxCellPackedTimeout              uint32   `protobuf:"varint,3,opt,name=max_cell_packed_timeout,json=maxCellPackedTimeout,proto3" json:"max_cell_packed_timeout,omitempty"`
	XXX_NoUnkeyedLiteral              struct{} `json:"-"`
	XXX_unrecognized                  []byte   `json:"-"`
	XXX_sizecache                     int32    `json:"-"`
}

func (m *AtmVcmCellPackingInfo) Reset()         { *m = AtmVcmCellPackingInfo{} }
func (m *AtmVcmCellPackingInfo) String() string { return proto.CompactTextString(m) }
func (*AtmVcmCellPackingInfo) ProtoMessage()    {}
func (*AtmVcmCellPackingInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_ab89bda4d1d55e88, []int{1}
}

func (m *AtmVcmCellPackingInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AtmVcmCellPackingInfo.Unmarshal(m, b)
}
func (m *AtmVcmCellPackingInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AtmVcmCellPackingInfo.Marshal(b, m, deterministic)
}
func (m *AtmVcmCellPackingInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AtmVcmCellPackingInfo.Merge(m, src)
}
func (m *AtmVcmCellPackingInfo) XXX_Size() int {
	return xxx_messageInfo_AtmVcmCellPackingInfo.Size(m)
}
func (m *AtmVcmCellPackingInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_AtmVcmCellPackingInfo.DiscardUnknown(m)
}

var xxx_messageInfo_AtmVcmCellPackingInfo proto.InternalMessageInfo

func (m *AtmVcmCellPackingInfo) GetLocalMaxCellsPackedPerPacket() uint32 {
	if m != nil {
		return m.LocalMaxCellsPackedPerPacket
	}
	return 0
}

func (m *AtmVcmCellPackingInfo) GetNegotiatedMaxCellsPackedPerPacket() uint32 {
	if m != nil {
		return m.NegotiatedMaxCellsPackedPerPacket
	}
	return 0
}

func (m *AtmVcmCellPackingInfo) GetMaxCellPackedTimeout() uint32 {
	if m != nil {
		return m.MaxCellPackedTimeout
	}
	return 0
}

type AtmCellPackingData struct {
	SubInterfaceName            string                 `protobuf:"bytes,50,opt,name=sub_interface_name,json=subInterfaceName,proto3" json:"sub_interface_name,omitempty"`
	CellPackingMode             string                 `protobuf:"bytes,51,opt,name=cell_packing_mode,json=cellPackingMode,proto3" json:"cell_packing_mode,omitempty"`
	Vpi                         uint32                 `protobuf:"varint,52,opt,name=vpi,proto3" json:"vpi,omitempty"`
	Vci                         uint32                 `protobuf:"varint,53,opt,name=vci,proto3" json:"vci,omitempty"`
	CellPacking                 *AtmVcmCellPackingInfo `protobuf:"bytes,54,opt,name=cell_packing,json=cellPacking,proto3" json:"cell_packing,omitempty"`
	ReceivedAverageCellsPackets uint64                 `protobuf:"varint,55,opt,name=received_average_cells_packets,json=receivedAverageCellsPackets,proto3" json:"received_average_cells_packets,omitempty"`
	SentCellsPackets            uint64                 `protobuf:"varint,56,opt,name=sent_cells_packets,json=sentCellsPackets,proto3" json:"sent_cells_packets,omitempty"`
	XXX_NoUnkeyedLiteral        struct{}               `json:"-"`
	XXX_unrecognized            []byte                 `json:"-"`
	XXX_sizecache               int32                  `json:"-"`
}

func (m *AtmCellPackingData) Reset()         { *m = AtmCellPackingData{} }
func (m *AtmCellPackingData) String() string { return proto.CompactTextString(m) }
func (*AtmCellPackingData) ProtoMessage()    {}
func (*AtmCellPackingData) Descriptor() ([]byte, []int) {
	return fileDescriptor_ab89bda4d1d55e88, []int{2}
}

func (m *AtmCellPackingData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AtmCellPackingData.Unmarshal(m, b)
}
func (m *AtmCellPackingData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AtmCellPackingData.Marshal(b, m, deterministic)
}
func (m *AtmCellPackingData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AtmCellPackingData.Merge(m, src)
}
func (m *AtmCellPackingData) XXX_Size() int {
	return xxx_messageInfo_AtmCellPackingData.Size(m)
}
func (m *AtmCellPackingData) XXX_DiscardUnknown() {
	xxx_messageInfo_AtmCellPackingData.DiscardUnknown(m)
}

var xxx_messageInfo_AtmCellPackingData proto.InternalMessageInfo

func (m *AtmCellPackingData) GetSubInterfaceName() string {
	if m != nil {
		return m.SubInterfaceName
	}
	return ""
}

func (m *AtmCellPackingData) GetCellPackingMode() string {
	if m != nil {
		return m.CellPackingMode
	}
	return ""
}

func (m *AtmCellPackingData) GetVpi() uint32 {
	if m != nil {
		return m.Vpi
	}
	return 0
}

func (m *AtmCellPackingData) GetVci() uint32 {
	if m != nil {
		return m.Vci
	}
	return 0
}

func (m *AtmCellPackingData) GetCellPacking() *AtmVcmCellPackingInfo {
	if m != nil {
		return m.CellPacking
	}
	return nil
}

func (m *AtmCellPackingData) GetReceivedAverageCellsPackets() uint64 {
	if m != nil {
		return m.ReceivedAverageCellsPackets
	}
	return 0
}

func (m *AtmCellPackingData) GetSentCellsPackets() uint64 {
	if m != nil {
		return m.SentCellsPackets
	}
	return 0
}

func init() {
	proto.RegisterType((*AtmCellPackingData_KEYS)(nil), "cisco_ios_xr_atm_vcm_oper.atm_vcm.nodes.node.cell_packs.cell_pack.atm_cell_packing_data_KEYS")
	proto.RegisterType((*AtmVcmCellPackingInfo)(nil), "cisco_ios_xr_atm_vcm_oper.atm_vcm.nodes.node.cell_packs.cell_pack.atm_vcm_cell_packing_info")
	proto.RegisterType((*AtmCellPackingData)(nil), "cisco_ios_xr_atm_vcm_oper.atm_vcm.nodes.node.cell_packs.cell_pack.atm_cell_packing_data")
}

func init() { proto.RegisterFile("atm_cell_packing_data.proto", fileDescriptor_ab89bda4d1d55e88) }

var fileDescriptor_ab89bda4d1d55e88 = []byte{
	// 418 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x93, 0x51, 0x8b, 0xd3, 0x40,
	0x10, 0xc7, 0xc9, 0x55, 0xc4, 0xdb, 0xb3, 0x5a, 0x17, 0xc5, 0x68, 0x45, 0x72, 0x05, 0x25, 0x88,
	0xe4, 0xe1, 0xce, 0x53, 0x5f, 0x8f, 0x22, 0x22, 0x52, 0xa9, 0xd1, 0x17, 0x41, 0x58, 0xb6, 0x9b,
	0x69, 0x58, 0xcc, 0xee, 0x86, 0xdd, 0x6d, 0xe8, 0x9b, 0xcf, 0x7e, 0x59, 0x3f, 0x83, 0x64, 0x92,
	0xb4, 0x69, 0x69, 0x7d, 0xb9, 0x97, 0x32, 0x9d, 0xf9, 0xcd, 0x7f, 0x26, 0xff, 0x49, 0xc8, 0x98,
	0x7b, 0xc5, 0x04, 0x14, 0x05, 0x2b, 0xb9, 0xf8, 0x25, 0x75, 0xce, 0x32, 0xee, 0x79, 0x52, 0x5a,
	0xe3, 0x0d, 0xbd, 0x16, 0xd2, 0x09, 0xc3, 0xa4, 0x71, 0x6c, 0x6d, 0x59, 0x4d, 0x56, 0x42, 0x31,
	0x53, 0x82, 0x4d, 0xda, 0x3f, 0x89, 0x36, 0x19, 0x38, 0xfc, 0x4d, 0x36, 0x2a, 0x6e, 0x1b, 0x4e,
	0x2c, 0x79, 0x7a, 0x70, 0x02, 0xfb, 0xfc, 0xe1, 0xc7, 0x37, 0x3a, 0x26, 0xa7, 0x75, 0x2b, 0xd3,
	0x5c, 0x41, 0x18, 0x44, 0x41, 0x7c, 0x9a, 0xde, 0xa9, 0x13, 0x5f, 0xb8, 0x02, 0xfa, 0x82, 0xdc,
	0x93, 0xda, 0x83, 0x5d, 0x72, 0xd1, 0x12, 0x27, 0x48, 0x0c, 0x37, 0x59, 0xc4, 0x46, 0x64, 0x50,
	0x0a, 0x19, 0x0e, 0xa2, 0x20, 0x1e, 0xa6, 0x75, 0x38, 0xf9, 0x1b, 0x90, 0x27, 0xdd, 0xb2, 0x3b,
	0x83, 0xa5, 0x5e, 0x1a, 0xfa, 0x91, 0x9c, 0x17, 0x46, 0xf0, 0x82, 0x29, 0xbe, 0xc6, 0xb2, 0xc3,
	0x3a, 0x64, 0xac, 0x04, 0xdb, 0x84, 0x1e, 0x77, 0x19, 0xa6, 0xcf, 0x10, 0x9c, 0xf1, 0xf5, 0xb4,
	0xc6, 0xe6, 0x48, 0xcd, 0xc1, 0x62, 0xe0, 0xe9, 0x57, 0xf2, 0x52, 0x43, 0x6e, 0xbc, 0xe4, 0x1e,
	0xb2, 0xff, 0xaa, 0x9d, 0xa0, 0xda, 0xf9, 0x96, 0x3e, 0x26, 0x79, 0x45, 0x1e, 0x77, 0x3a, 0x9d,
	0x8c, 0x97, 0x0a, 0xcc, 0xca, 0xb7, 0xcf, 0xf7, 0x50, 0x35, 0x9d, 0x4d, 0xe3, 0xf7, 0xa6, 0x36,
	0xf9, 0x33, 0x20, 0x8f, 0x0e, 0xba, 0x4c, 0x5f, 0x13, 0xea, 0x56, 0x0b, 0xb6, 0xe7, 0xe3, 0x05,
	0xfa, 0x38, 0x72, 0xab, 0xc5, 0xa7, 0x1d, 0x2b, 0x5f, 0x91, 0x07, 0x3b, 0x12, 0xca, 0x64, 0x10,
	0x5e, 0x22, 0x7c, 0x5f, 0xb4, 0x53, 0xa5, 0xce, 0x67, 0x26, 0x43, 0xdb, 0xab, 0x52, 0x86, 0x6f,
	0x1a, 0xdb, 0xab, 0x52, 0x62, 0x46, 0xc8, 0xf0, 0xaa, 0xcd, 0x08, 0x49, 0x7f, 0x93, 0xbb, 0x7d,
	0xbd, 0xf0, 0x6d, 0x14, 0xc4, 0x67, 0x17, 0x3f, 0x93, 0x1b, 0xbf, 0x56, 0xc9, 0xd1, 0xf3, 0xa6,
	0x67, 0xbd, 0x45, 0xe9, 0x94, 0x3c, 0xb7, 0x20, 0x40, 0x56, 0x90, 0x31, 0x5e, 0x81, 0xe5, 0x39,
	0xf4, 0x8f, 0xe4, 0x5d, 0xf8, 0x2e, 0x0a, 0xe2, 0x5b, 0xe9, 0xb8, 0xa3, 0xae, 0x1b, 0x68, 0x7b,
	0x1c, 0xef, 0xd0, 0x43, 0xd0, 0x7e, 0xaf, 0xf1, 0x3d, 0x36, 0x8e, 0xea, 0x4a, 0x9f, 0x5e, 0xdc,
	0xc6, 0x4f, 0xe7, 0xf2, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xd0, 0x73, 0xfc, 0x0f, 0x59, 0x03,
	0x00, 0x00,
}
