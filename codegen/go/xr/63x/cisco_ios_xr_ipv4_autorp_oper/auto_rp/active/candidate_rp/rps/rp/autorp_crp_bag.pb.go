/*
Copyright 2019 Cisco Systems

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: autorp_crp_bag.proto

package cisco_ios_xr_ipv4_autorp_oper_auto_rp_active_candidate_rp_rps_rp

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type AutorpCrpBag_KEYS struct {
	InterfaceName        string   `protobuf:"bytes,1,opt,name=interface_name,json=interfaceName,proto3" json:"interface_name,omitempty"`
	ProtocolMode         string   `protobuf:"bytes,2,opt,name=protocol_mode,json=protocolMode,proto3" json:"protocol_mode,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AutorpCrpBag_KEYS) Reset()         { *m = AutorpCrpBag_KEYS{} }
func (m *AutorpCrpBag_KEYS) String() string { return proto.CompactTextString(m) }
func (*AutorpCrpBag_KEYS) ProtoMessage()    {}
func (*AutorpCrpBag_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_d1cebe0979ae3fd9, []int{0}
}

func (m *AutorpCrpBag_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AutorpCrpBag_KEYS.Unmarshal(m, b)
}
func (m *AutorpCrpBag_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AutorpCrpBag_KEYS.Marshal(b, m, deterministic)
}
func (m *AutorpCrpBag_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AutorpCrpBag_KEYS.Merge(m, src)
}
func (m *AutorpCrpBag_KEYS) XXX_Size() int {
	return xxx_messageInfo_AutorpCrpBag_KEYS.Size(m)
}
func (m *AutorpCrpBag_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_AutorpCrpBag_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_AutorpCrpBag_KEYS proto.InternalMessageInfo

func (m *AutorpCrpBag_KEYS) GetInterfaceName() string {
	if m != nil {
		return m.InterfaceName
	}
	return ""
}

func (m *AutorpCrpBag_KEYS) GetProtocolMode() string {
	if m != nil {
		return m.ProtocolMode
	}
	return ""
}

type AutorpCrpBag struct {
	AccessListName       string   `protobuf:"bytes,50,opt,name=access_list_name,json=accessListName,proto3" json:"access_list_name,omitempty"`
	CandidateRpAddress   string   `protobuf:"bytes,51,opt,name=candidate_rp_address,json=candidateRpAddress,proto3" json:"candidate_rp_address,omitempty"`
	Ttl                  int32    `protobuf:"zigzag32,52,opt,name=ttl,proto3" json:"ttl,omitempty"`
	AnnouncePeriod       int32    `protobuf:"zigzag32,53,opt,name=announce_period,json=announcePeriod,proto3" json:"announce_period,omitempty"`
	ProtocolModeXr       string   `protobuf:"bytes,54,opt,name=protocol_mode_xr,json=protocolModeXr,proto3" json:"protocol_mode_xr,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AutorpCrpBag) Reset()         { *m = AutorpCrpBag{} }
func (m *AutorpCrpBag) String() string { return proto.CompactTextString(m) }
func (*AutorpCrpBag) ProtoMessage()    {}
func (*AutorpCrpBag) Descriptor() ([]byte, []int) {
	return fileDescriptor_d1cebe0979ae3fd9, []int{1}
}

func (m *AutorpCrpBag) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AutorpCrpBag.Unmarshal(m, b)
}
func (m *AutorpCrpBag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AutorpCrpBag.Marshal(b, m, deterministic)
}
func (m *AutorpCrpBag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AutorpCrpBag.Merge(m, src)
}
func (m *AutorpCrpBag) XXX_Size() int {
	return xxx_messageInfo_AutorpCrpBag.Size(m)
}
func (m *AutorpCrpBag) XXX_DiscardUnknown() {
	xxx_messageInfo_AutorpCrpBag.DiscardUnknown(m)
}

var xxx_messageInfo_AutorpCrpBag proto.InternalMessageInfo

func (m *AutorpCrpBag) GetAccessListName() string {
	if m != nil {
		return m.AccessListName
	}
	return ""
}

func (m *AutorpCrpBag) GetCandidateRpAddress() string {
	if m != nil {
		return m.CandidateRpAddress
	}
	return ""
}

func (m *AutorpCrpBag) GetTtl() int32 {
	if m != nil {
		return m.Ttl
	}
	return 0
}

func (m *AutorpCrpBag) GetAnnouncePeriod() int32 {
	if m != nil {
		return m.AnnouncePeriod
	}
	return 0
}

func (m *AutorpCrpBag) GetProtocolModeXr() string {
	if m != nil {
		return m.ProtocolModeXr
	}
	return ""
}

func init() {
	proto.RegisterType((*AutorpCrpBag_KEYS)(nil), "cisco_ios_xr_ipv4_autorp_oper.auto_rp.active.candidate_rp.rps.rp.autorp_crp_bag_KEYS")
	proto.RegisterType((*AutorpCrpBag)(nil), "cisco_ios_xr_ipv4_autorp_oper.auto_rp.active.candidate_rp.rps.rp.autorp_crp_bag")
}

func init() { proto.RegisterFile("autorp_crp_bag.proto", fileDescriptor_d1cebe0979ae3fd9) }

var fileDescriptor_d1cebe0979ae3fd9 = []byte{
	// 275 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x8f, 0xcf, 0x4b, 0x3b, 0x31,
	0x10, 0xc5, 0xd9, 0xef, 0x17, 0x04, 0x83, 0x5d, 0x6b, 0xec, 0x21, 0xc7, 0x52, 0x11, 0x7b, 0x5a,
	0xc4, 0x56, 0xcf, 0x7a, 0xf0, 0xe4, 0x0f, 0x64, 0xbd, 0xe8, 0x69, 0x98, 0x26, 0xa3, 0x04, 0x76,
	0x93, 0x30, 0x49, 0x4b, 0xff, 0x4d, 0xff, 0x23, 0xd9, 0xac, 0x2d, 0xdd, 0xdb, 0xe4, 0xf3, 0x5e,
	0xe6, 0xbd, 0x11, 0x13, 0x5c, 0x27, 0xcf, 0x01, 0x34, 0x07, 0x58, 0xe1, 0x77, 0x15, 0xd8, 0x27,
	0x2f, 0xef, 0xb5, 0x8d, 0xda, 0x83, 0xf5, 0x11, 0xb6, 0x0c, 0x36, 0x6c, 0x96, 0xf0, 0xe7, 0xf3,
	0x81, 0xb8, 0xea, 0x66, 0xe0, 0x50, 0xa1, 0x4e, 0x76, 0x43, 0x95, 0x46, 0x67, 0xac, 0xc1, 0x44,
	0x1d, 0xe3, 0x10, 0x2b, 0x0e, 0x33, 0x14, 0xe7, 0xc3, 0xcd, 0xf0, 0xf4, 0xf8, 0xf9, 0x2e, 0x2f,
	0x45, 0x69, 0x5d, 0x22, 0xfe, 0x42, 0x4d, 0xe0, 0xb0, 0x25, 0x55, 0x4c, 0x8b, 0xf9, 0x71, 0x3d,
	0xda, 0xd3, 0x57, 0x6c, 0x49, 0x5e, 0x88, 0x51, 0x2e, 0xa2, 0x7d, 0x03, 0xad, 0x37, 0xa4, 0xfe,
	0x65, 0xd7, 0xc9, 0x0e, 0xbe, 0x78, 0x43, 0xb3, 0x9f, 0x42, 0x94, 0xc3, 0x0c, 0x39, 0x17, 0x63,
	0xd4, 0x9a, 0x62, 0x84, 0xc6, 0xc6, 0xd4, 0x07, 0xdc, 0xe4, 0xaf, 0x65, 0xcf, 0x9f, 0x6d, 0x4c,
	0x39, 0xe1, 0x5a, 0x4c, 0x0e, 0x6b, 0x03, 0x1a, 0xc3, 0x14, 0xa3, 0x5a, 0x64, 0xb7, 0xdc, 0x6b,
	0x75, 0x78, 0xe8, 0x15, 0x39, 0x16, 0xff, 0x53, 0x6a, 0xd4, 0x72, 0x5a, 0xcc, 0xcf, 0xea, 0x6e,
	0x94, 0x57, 0xe2, 0x14, 0x9d, 0xf3, 0x6b, 0xa7, 0x09, 0x02, 0xb1, 0xf5, 0x46, 0xdd, 0x66, 0xb5,
	0xdc, 0xe1, 0xb7, 0x4c, 0xbb, 0x5a, 0x83, 0x73, 0x60, 0xcb, 0xea, 0xae, 0xaf, 0x75, 0x78, 0xd1,
	0x07, 0xaf, 0x8e, 0xf2, 0x7b, 0xf1, 0x1b, 0x00, 0x00, 0xff, 0xff, 0xb3, 0x7f, 0x8c, 0x7f, 0x97,
	0x01, 0x00, 0x00,
}
