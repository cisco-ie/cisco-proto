/*
Copyright 2019 Cisco Systems

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: optics_edm_spectrum_info.proto

package cisco_ios_xr_controller_optics_oper_optics_oper_optics_ports_optics_port_ots_spectrum_info

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type OpticsEdmSpectrumInfo_KEYS struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OpticsEdmSpectrumInfo_KEYS) Reset()         { *m = OpticsEdmSpectrumInfo_KEYS{} }
func (m *OpticsEdmSpectrumInfo_KEYS) String() string { return proto.CompactTextString(m) }
func (*OpticsEdmSpectrumInfo_KEYS) ProtoMessage()    {}
func (*OpticsEdmSpectrumInfo_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_a1505249cef57b29, []int{0}
}

func (m *OpticsEdmSpectrumInfo_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OpticsEdmSpectrumInfo_KEYS.Unmarshal(m, b)
}
func (m *OpticsEdmSpectrumInfo_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OpticsEdmSpectrumInfo_KEYS.Marshal(b, m, deterministic)
}
func (m *OpticsEdmSpectrumInfo_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OpticsEdmSpectrumInfo_KEYS.Merge(m, src)
}
func (m *OpticsEdmSpectrumInfo_KEYS) XXX_Size() int {
	return xxx_messageInfo_OpticsEdmSpectrumInfo_KEYS.Size(m)
}
func (m *OpticsEdmSpectrumInfo_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_OpticsEdmSpectrumInfo_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_OpticsEdmSpectrumInfo_KEYS proto.InternalMessageInfo

func (m *OpticsEdmSpectrumInfo_KEYS) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type OtsEdmSpectrumPowerInfo struct {
	SliceNum             uint32   `protobuf:"varint,1,opt,name=slice_num,json=sliceNum,proto3" json:"slice_num,omitempty"`
	LowerFrequency       uint64   `protobuf:"varint,2,opt,name=lower_frequency,json=lowerFrequency,proto3" json:"lower_frequency,omitempty"`
	UpperFrequency       uint64   `protobuf:"varint,3,opt,name=upper_frequency,json=upperFrequency,proto3" json:"upper_frequency,omitempty"`
	RxPower              int32    `protobuf:"zigzag32,4,opt,name=rx_power,json=rxPower,proto3" json:"rx_power,omitempty"`
	TxPower              int32    `protobuf:"zigzag32,5,opt,name=tx_power,json=txPower,proto3" json:"tx_power,omitempty"`
	RxPsd                string   `protobuf:"bytes,6,opt,name=rx_psd,json=rxPsd,proto3" json:"rx_psd,omitempty"`
	TxPsd                string   `protobuf:"bytes,7,opt,name=tx_psd,json=txPsd,proto3" json:"tx_psd,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OtsEdmSpectrumPowerInfo) Reset()         { *m = OtsEdmSpectrumPowerInfo{} }
func (m *OtsEdmSpectrumPowerInfo) String() string { return proto.CompactTextString(m) }
func (*OtsEdmSpectrumPowerInfo) ProtoMessage()    {}
func (*OtsEdmSpectrumPowerInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_a1505249cef57b29, []int{1}
}

func (m *OtsEdmSpectrumPowerInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OtsEdmSpectrumPowerInfo.Unmarshal(m, b)
}
func (m *OtsEdmSpectrumPowerInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OtsEdmSpectrumPowerInfo.Marshal(b, m, deterministic)
}
func (m *OtsEdmSpectrumPowerInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OtsEdmSpectrumPowerInfo.Merge(m, src)
}
func (m *OtsEdmSpectrumPowerInfo) XXX_Size() int {
	return xxx_messageInfo_OtsEdmSpectrumPowerInfo.Size(m)
}
func (m *OtsEdmSpectrumPowerInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_OtsEdmSpectrumPowerInfo.DiscardUnknown(m)
}

var xxx_messageInfo_OtsEdmSpectrumPowerInfo proto.InternalMessageInfo

func (m *OtsEdmSpectrumPowerInfo) GetSliceNum() uint32 {
	if m != nil {
		return m.SliceNum
	}
	return 0
}

func (m *OtsEdmSpectrumPowerInfo) GetLowerFrequency() uint64 {
	if m != nil {
		return m.LowerFrequency
	}
	return 0
}

func (m *OtsEdmSpectrumPowerInfo) GetUpperFrequency() uint64 {
	if m != nil {
		return m.UpperFrequency
	}
	return 0
}

func (m *OtsEdmSpectrumPowerInfo) GetRxPower() int32 {
	if m != nil {
		return m.RxPower
	}
	return 0
}

func (m *OtsEdmSpectrumPowerInfo) GetTxPower() int32 {
	if m != nil {
		return m.TxPower
	}
	return 0
}

func (m *OtsEdmSpectrumPowerInfo) GetRxPsd() string {
	if m != nil {
		return m.RxPsd
	}
	return ""
}

func (m *OtsEdmSpectrumPowerInfo) GetTxPsd() string {
	if m != nil {
		return m.TxPsd
	}
	return ""
}

type OtsEdmSpectrumInfo struct {
	TotalSpectrumSliceCount uint32                     `protobuf:"varint,1,opt,name=total_spectrum_slice_count,json=totalSpectrumSliceCount,proto3" json:"total_spectrum_slice_count,omitempty"`
	SpectrumSliceSpacing    uint32                     `protobuf:"varint,2,opt,name=spectrum_slice_spacing,json=spectrumSliceSpacing,proto3" json:"spectrum_slice_spacing,omitempty"`
	FirstSliceWavelength    string                     `protobuf:"bytes,3,opt,name=first_slice_wavelength,json=firstSliceWavelength,proto3" json:"first_slice_wavelength,omitempty"`
	SpectrumSlicePowerInfo  []*OtsEdmSpectrumPowerInfo `protobuf:"bytes,4,rep,name=spectrum_slice_power_info,json=spectrumSlicePowerInfo,proto3" json:"spectrum_slice_power_info,omitempty"`
	XXX_NoUnkeyedLiteral    struct{}                   `json:"-"`
	XXX_unrecognized        []byte                     `json:"-"`
	XXX_sizecache           int32                      `json:"-"`
}

func (m *OtsEdmSpectrumInfo) Reset()         { *m = OtsEdmSpectrumInfo{} }
func (m *OtsEdmSpectrumInfo) String() string { return proto.CompactTextString(m) }
func (*OtsEdmSpectrumInfo) ProtoMessage()    {}
func (*OtsEdmSpectrumInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_a1505249cef57b29, []int{2}
}

func (m *OtsEdmSpectrumInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OtsEdmSpectrumInfo.Unmarshal(m, b)
}
func (m *OtsEdmSpectrumInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OtsEdmSpectrumInfo.Marshal(b, m, deterministic)
}
func (m *OtsEdmSpectrumInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OtsEdmSpectrumInfo.Merge(m, src)
}
func (m *OtsEdmSpectrumInfo) XXX_Size() int {
	return xxx_messageInfo_OtsEdmSpectrumInfo.Size(m)
}
func (m *OtsEdmSpectrumInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_OtsEdmSpectrumInfo.DiscardUnknown(m)
}

var xxx_messageInfo_OtsEdmSpectrumInfo proto.InternalMessageInfo

func (m *OtsEdmSpectrumInfo) GetTotalSpectrumSliceCount() uint32 {
	if m != nil {
		return m.TotalSpectrumSliceCount
	}
	return 0
}

func (m *OtsEdmSpectrumInfo) GetSpectrumSliceSpacing() uint32 {
	if m != nil {
		return m.SpectrumSliceSpacing
	}
	return 0
}

func (m *OtsEdmSpectrumInfo) GetFirstSliceWavelength() string {
	if m != nil {
		return m.FirstSliceWavelength
	}
	return ""
}

func (m *OtsEdmSpectrumInfo) GetSpectrumSlicePowerInfo() []*OtsEdmSpectrumPowerInfo {
	if m != nil {
		return m.SpectrumSlicePowerInfo
	}
	return nil
}

type OpticsEdmSpectrumInfo struct {
	SpectrumInfo         *OtsEdmSpectrumInfo `protobuf:"bytes,50,opt,name=spectrum_info,json=spectrumInfo,proto3" json:"spectrum_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *OpticsEdmSpectrumInfo) Reset()         { *m = OpticsEdmSpectrumInfo{} }
func (m *OpticsEdmSpectrumInfo) String() string { return proto.CompactTextString(m) }
func (*OpticsEdmSpectrumInfo) ProtoMessage()    {}
func (*OpticsEdmSpectrumInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_a1505249cef57b29, []int{3}
}

func (m *OpticsEdmSpectrumInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OpticsEdmSpectrumInfo.Unmarshal(m, b)
}
func (m *OpticsEdmSpectrumInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OpticsEdmSpectrumInfo.Marshal(b, m, deterministic)
}
func (m *OpticsEdmSpectrumInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OpticsEdmSpectrumInfo.Merge(m, src)
}
func (m *OpticsEdmSpectrumInfo) XXX_Size() int {
	return xxx_messageInfo_OpticsEdmSpectrumInfo.Size(m)
}
func (m *OpticsEdmSpectrumInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_OpticsEdmSpectrumInfo.DiscardUnknown(m)
}

var xxx_messageInfo_OpticsEdmSpectrumInfo proto.InternalMessageInfo

func (m *OpticsEdmSpectrumInfo) GetSpectrumInfo() *OtsEdmSpectrumInfo {
	if m != nil {
		return m.SpectrumInfo
	}
	return nil
}

func init() {
	proto.RegisterType((*OpticsEdmSpectrumInfo_KEYS)(nil), "cisco_ios_xr_controller_optics_oper.optics_oper.optics_ports.optics_port.ots_spectrum_info.optics_edm_spectrum_info_KEYS")
	proto.RegisterType((*OtsEdmSpectrumPowerInfo)(nil), "cisco_ios_xr_controller_optics_oper.optics_oper.optics_ports.optics_port.ots_spectrum_info.ots_edm_spectrum_power_info")
	proto.RegisterType((*OtsEdmSpectrumInfo)(nil), "cisco_ios_xr_controller_optics_oper.optics_oper.optics_ports.optics_port.ots_spectrum_info.ots_edm_spectrum_info")
	proto.RegisterType((*OpticsEdmSpectrumInfo)(nil), "cisco_ios_xr_controller_optics_oper.optics_oper.optics_ports.optics_port.ots_spectrum_info.optics_edm_spectrum_info")
}

func init() { proto.RegisterFile("optics_edm_spectrum_info.proto", fileDescriptor_a1505249cef57b29) }

var fileDescriptor_a1505249cef57b29 = []byte{
	// 415 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x53, 0x3d, 0xcf, 0xd3, 0x30,
	0x10, 0x96, 0xdf, 0x37, 0xfd, 0x72, 0x29, 0x08, 0xab, 0x2d, 0x29, 0x15, 0x28, 0xea, 0x42, 0xa6,
	0x0c, 0x2d, 0x1b, 0x23, 0x02, 0x09, 0x21, 0xa1, 0x2a, 0x19, 0x10, 0x2c, 0x56, 0x70, 0xdd, 0x12,
	0x29, 0xb1, 0x5d, 0xdb, 0xa1, 0xe1, 0x8f, 0xf0, 0x43, 0xe0, 0x8f, 0xb1, 0xb0, 0x23, 0x5f, 0x52,
	0xda, 0x14, 0xca, 0x06, 0x9b, 0xef, 0xf9, 0xc8, 0xf9, 0xf1, 0x5d, 0xf0, 0x63, 0xa9, 0x6c, 0xc6,
	0x0c, 0xe5, 0x9b, 0x82, 0x1a, 0xc5, 0x99, 0xd5, 0x65, 0x41, 0x33, 0xb1, 0x95, 0x91, 0xd2, 0xd2,
	0x4a, 0xf2, 0x9e, 0x65, 0x86, 0x49, 0x9a, 0x49, 0x43, 0x2b, 0x4d, 0x99, 0x14, 0x56, 0xcb, 0x3c,
	0xe7, 0x9a, 0x36, 0x3e, 0xa9, 0xb8, 0x8e, 0xfe, 0x70, 0x56, 0x52, 0x5b, 0x73, 0x5e, 0x44, 0xd2,
	0x9a, 0x76, 0x87, 0xc5, 0x0a, 0x3f, 0xba, 0xd6, 0x9d, 0xbe, 0x7e, 0xf1, 0x2e, 0x21, 0x04, 0x7b,
	0x22, 0x2d, 0xb8, 0x8f, 0x02, 0x14, 0x0e, 0x62, 0x38, 0x2f, 0xbe, 0x23, 0x3c, 0x77, 0x9f, 0x6a,
	0x59, 0x94, 0x3c, 0x70, 0x0d, 0x46, 0x32, 0xc7, 0x03, 0x93, 0x67, 0x8c, 0x53, 0x51, 0x16, 0x60,
	0x1c, 0xc5, 0x7d, 0x00, 0xde, 0x94, 0x05, 0x79, 0x82, 0xef, 0xe5, 0x20, 0xdd, 0x6a, 0xbe, 0x2f,
	0xb9, 0x60, 0x9f, 0xfd, 0x9b, 0x00, 0x85, 0x5e, 0x7c, 0x17, 0xe0, 0x97, 0x47, 0xd4, 0x09, 0x4b,
	0xa5, 0x5a, 0xc2, 0xdb, 0x5a, 0x08, 0xf0, 0x49, 0x38, 0xc3, 0x7d, 0x5d, 0xd5, 0xfd, 0x7d, 0x2f,
	0x40, 0xe1, 0xfd, 0xb8, 0xa7, 0xab, 0xb5, 0x2b, 0x1d, 0x65, 0x8f, 0x54, 0xa7, 0xa6, 0x6c, 0x43,
	0x4d, 0x70, 0xd7, 0xb9, 0xcc, 0xc6, 0xef, 0x42, 0xb4, 0x8e, 0xae, 0xd6, 0x66, 0xe3, 0x60, 0x5b,
	0xc3, 0xbd, 0x1a, 0xb6, 0x0e, 0x5e, 0xfc, 0xb8, 0xc1, 0x93, 0xdf, 0x22, 0x43, 0xd8, 0x67, 0xf8,
	0xa1, 0x95, 0x36, 0xcd, 0x4f, 0x70, 0x9d, 0x9d, 0xc9, 0x52, 0xd8, 0x26, 0xfd, 0x03, 0x50, 0x24,
	0x8d, 0x20, 0x71, 0xfc, 0x73, 0x47, 0x93, 0xa7, 0x78, 0x7a, 0x61, 0x33, 0x2a, 0x65, 0x99, 0xd8,
	0xc1, 0x9b, 0x8c, 0xe2, 0xb1, 0x39, 0xf7, 0x24, 0x35, 0xe7, 0x5c, 0xdb, 0x4c, 0x1b, 0xdb, 0x58,
	0x0e, 0xe9, 0x27, 0x9e, 0x73, 0xb1, 0xb3, 0x1f, 0xe1, 0x81, 0x06, 0xf1, 0x18, 0x58, 0xb0, 0xbc,
	0xfd, 0xc5, 0x91, 0xaf, 0x08, 0xcf, 0x2e, 0x9a, 0x9d, 0x66, 0xe6, 0x7b, 0xc1, 0x6d, 0x38, 0x5c,
	0x1e, 0xa2, 0x7f, 0xb7, 0x6b, 0xd1, 0x5f, 0x56, 0x26, 0x9e, 0xb6, 0x82, 0xc2, 0x84, 0x5e, 0xb9,
	0xfd, 0xfc, 0x86, 0xb0, 0x7f, 0x6d, 0x41, 0xc9, 0x17, 0x84, 0x47, 0x2d, 0xc4, 0x5f, 0x06, 0x28,
	0x1c, 0x2e, 0xf7, 0xff, 0x35, 0x05, 0xdc, 0xff, 0xce, 0xb1, 0x74, 0xb7, 0xfe, 0xd0, 0x85, 0x1f,
	0x77, 0xf5, 0x33, 0x00, 0x00, 0xff, 0xff, 0xdd, 0xc4, 0xcf, 0x97, 0xda, 0x03, 0x00, 0x00,
}
