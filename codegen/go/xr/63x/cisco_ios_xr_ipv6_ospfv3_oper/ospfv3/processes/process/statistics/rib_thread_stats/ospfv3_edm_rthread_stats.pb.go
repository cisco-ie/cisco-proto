/*
Copyright 2019 Cisco Systems

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ospfv3_edm_rthread_stats.proto

package cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_statistics_rib_thread_stats

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Ospfv3EdmRthreadStats_KEYS struct {
	ProcessName          string   `protobuf:"bytes,1,opt,name=process_name,json=processName,proto3" json:"process_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Ospfv3EdmRthreadStats_KEYS) Reset()         { *m = Ospfv3EdmRthreadStats_KEYS{} }
func (m *Ospfv3EdmRthreadStats_KEYS) String() string { return proto.CompactTextString(m) }
func (*Ospfv3EdmRthreadStats_KEYS) ProtoMessage()    {}
func (*Ospfv3EdmRthreadStats_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_8c1bb20a0129d255, []int{0}
}

func (m *Ospfv3EdmRthreadStats_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Ospfv3EdmRthreadStats_KEYS.Unmarshal(m, b)
}
func (m *Ospfv3EdmRthreadStats_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Ospfv3EdmRthreadStats_KEYS.Marshal(b, m, deterministic)
}
func (m *Ospfv3EdmRthreadStats_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ospfv3EdmRthreadStats_KEYS.Merge(m, src)
}
func (m *Ospfv3EdmRthreadStats_KEYS) XXX_Size() int {
	return xxx_messageInfo_Ospfv3EdmRthreadStats_KEYS.Size(m)
}
func (m *Ospfv3EdmRthreadStats_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_Ospfv3EdmRthreadStats_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_Ospfv3EdmRthreadStats_KEYS proto.InternalMessageInfo

func (m *Ospfv3EdmRthreadStats_KEYS) GetProcessName() string {
	if m != nil {
		return m.ProcessName
	}
	return ""
}

type Ospfv3EdmRthreadQueueStats struct {
	WqEqtime             uint64   `protobuf:"varint,1,opt,name=wq_eqtime,json=wqEqtime,proto3" json:"wq_eqtime,omitempty"`
	WqDqtime             uint64   `protobuf:"varint,2,opt,name=wq_dqtime,json=wqDqtime,proto3" json:"wq_dqtime,omitempty"`
	WqFirstEqtime        uint64   `protobuf:"varint,3,opt,name=wq_first_eqtime,json=wqFirstEqtime,proto3" json:"wq_first_eqtime,omitempty"`
	WqLenCur             int32    `protobuf:"zigzag32,4,opt,name=wq_len_cur,json=wqLenCur,proto3" json:"wq_len_cur,omitempty"`
	WqLenMax             int32    `protobuf:"zigzag32,5,opt,name=wq_len_max,json=wqLenMax,proto3" json:"wq_len_max,omitempty"`
	WqTotalEnqueued      uint32   `protobuf:"varint,6,opt,name=wq_total_enqueued,json=wqTotalEnqueued,proto3" json:"wq_total_enqueued,omitempty"`
	WqTotalDequeued      uint32   `protobuf:"varint,7,opt,name=wq_total_dequeued,json=wqTotalDequeued,proto3" json:"wq_total_dequeued,omitempty"`
	WqEneueueErrs        uint32   `protobuf:"varint,8,opt,name=wq_eneueue_errs,json=wqEneueueErrs,proto3" json:"wq_eneueue_errs,omitempty"`
	WqDequeueErrs        uint32   `protobuf:"varint,9,opt,name=wq_dequeue_errs,json=wqDequeueErrs,proto3" json:"wq_dequeue_errs,omitempty"`
	WqMaxLatency         uint64   `protobuf:"varint,10,opt,name=wq_max_latency,json=wqMaxLatency,proto3" json:"wq_max_latency,omitempty"`
	WqSumLatency         uint64   `protobuf:"varint,11,opt,name=wq_sum_latency,json=wqSumLatency,proto3" json:"wq_sum_latency,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Ospfv3EdmRthreadQueueStats) Reset()         { *m = Ospfv3EdmRthreadQueueStats{} }
func (m *Ospfv3EdmRthreadQueueStats) String() string { return proto.CompactTextString(m) }
func (*Ospfv3EdmRthreadQueueStats) ProtoMessage()    {}
func (*Ospfv3EdmRthreadQueueStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_8c1bb20a0129d255, []int{1}
}

func (m *Ospfv3EdmRthreadQueueStats) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Ospfv3EdmRthreadQueueStats.Unmarshal(m, b)
}
func (m *Ospfv3EdmRthreadQueueStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Ospfv3EdmRthreadQueueStats.Marshal(b, m, deterministic)
}
func (m *Ospfv3EdmRthreadQueueStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ospfv3EdmRthreadQueueStats.Merge(m, src)
}
func (m *Ospfv3EdmRthreadQueueStats) XXX_Size() int {
	return xxx_messageInfo_Ospfv3EdmRthreadQueueStats.Size(m)
}
func (m *Ospfv3EdmRthreadQueueStats) XXX_DiscardUnknown() {
	xxx_messageInfo_Ospfv3EdmRthreadQueueStats.DiscardUnknown(m)
}

var xxx_messageInfo_Ospfv3EdmRthreadQueueStats proto.InternalMessageInfo

func (m *Ospfv3EdmRthreadQueueStats) GetWqEqtime() uint64 {
	if m != nil {
		return m.WqEqtime
	}
	return 0
}

func (m *Ospfv3EdmRthreadQueueStats) GetWqDqtime() uint64 {
	if m != nil {
		return m.WqDqtime
	}
	return 0
}

func (m *Ospfv3EdmRthreadQueueStats) GetWqFirstEqtime() uint64 {
	if m != nil {
		return m.WqFirstEqtime
	}
	return 0
}

func (m *Ospfv3EdmRthreadQueueStats) GetWqLenCur() int32 {
	if m != nil {
		return m.WqLenCur
	}
	return 0
}

func (m *Ospfv3EdmRthreadQueueStats) GetWqLenMax() int32 {
	if m != nil {
		return m.WqLenMax
	}
	return 0
}

func (m *Ospfv3EdmRthreadQueueStats) GetWqTotalEnqueued() uint32 {
	if m != nil {
		return m.WqTotalEnqueued
	}
	return 0
}

func (m *Ospfv3EdmRthreadQueueStats) GetWqTotalDequeued() uint32 {
	if m != nil {
		return m.WqTotalDequeued
	}
	return 0
}

func (m *Ospfv3EdmRthreadQueueStats) GetWqEneueueErrs() uint32 {
	if m != nil {
		return m.WqEneueueErrs
	}
	return 0
}

func (m *Ospfv3EdmRthreadQueueStats) GetWqDequeueErrs() uint32 {
	if m != nil {
		return m.WqDequeueErrs
	}
	return 0
}

func (m *Ospfv3EdmRthreadQueueStats) GetWqMaxLatency() uint64 {
	if m != nil {
		return m.WqMaxLatency
	}
	return 0
}

func (m *Ospfv3EdmRthreadQueueStats) GetWqSumLatency() uint64 {
	if m != nil {
		return m.WqSumLatency
	}
	return 0
}

type Ospfv3EdmTime struct {
	Second               uint32   `protobuf:"varint,1,opt,name=second,proto3" json:"second,omitempty"`
	Nanosecond           uint32   `protobuf:"varint,2,opt,name=nanosecond,proto3" json:"nanosecond,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Ospfv3EdmTime) Reset()         { *m = Ospfv3EdmTime{} }
func (m *Ospfv3EdmTime) String() string { return proto.CompactTextString(m) }
func (*Ospfv3EdmTime) ProtoMessage()    {}
func (*Ospfv3EdmTime) Descriptor() ([]byte, []int) {
	return fileDescriptor_8c1bb20a0129d255, []int{2}
}

func (m *Ospfv3EdmTime) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Ospfv3EdmTime.Unmarshal(m, b)
}
func (m *Ospfv3EdmTime) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Ospfv3EdmTime.Marshal(b, m, deterministic)
}
func (m *Ospfv3EdmTime) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ospfv3EdmTime.Merge(m, src)
}
func (m *Ospfv3EdmTime) XXX_Size() int {
	return xxx_messageInfo_Ospfv3EdmTime.Size(m)
}
func (m *Ospfv3EdmTime) XXX_DiscardUnknown() {
	xxx_messageInfo_Ospfv3EdmTime.DiscardUnknown(m)
}

var xxx_messageInfo_Ospfv3EdmTime proto.InternalMessageInfo

func (m *Ospfv3EdmTime) GetSecond() uint32 {
	if m != nil {
		return m.Second
	}
	return 0
}

func (m *Ospfv3EdmTime) GetNanosecond() uint32 {
	if m != nil {
		return m.Nanosecond
	}
	return 0
}

type Ospfv3EdmRthreadStats struct {
	ThreadQ              *Ospfv3EdmRthreadQueueStats   `protobuf:"bytes,50,opt,name=thread_q,json=threadQ,proto3" json:"thread_q,omitempty"`
	Holdq                []*Ospfv3EdmRthreadQueueStats `protobuf:"bytes,51,rep,name=holdq,proto3" json:"holdq,omitempty"`
	WqThreadActive       bool                          `protobuf:"varint,52,opt,name=wq_thread_active,json=wqThreadActive,proto3" json:"wq_thread_active,omitempty"`
	WqSignals            uint32                        `protobuf:"varint,53,opt,name=wq_signals,json=wqSignals,proto3" json:"wq_signals,omitempty"`
	RibBaseTime          *Ospfv3EdmTime                `protobuf:"bytes,54,opt,name=rib_base_time,json=ribBaseTime,proto3" json:"rib_base_time,omitempty"`
	RibBaseClock         uint64                        `protobuf:"varint,55,opt,name=rib_base_clock,json=ribBaseClock,proto3" json:"rib_base_clock,omitempty"`
	RibBatchSent         uint32                        `protobuf:"varint,56,opt,name=rib_batch_sent,json=ribBatchSent,proto3" json:"rib_batch_sent,omitempty"`
	RibBatchPurged       uint32                        `protobuf:"varint,57,opt,name=rib_batch_purged,json=ribBatchPurged,proto3" json:"rib_batch_purged,omitempty"`
	RibDropVersion       uint32                        `protobuf:"varint,58,opt,name=rib_drop_version,json=ribDropVersion,proto3" json:"rib_drop_version,omitempty"`
	RibDropConn          uint32                        `protobuf:"varint,59,opt,name=rib_drop_conn,json=ribDropConn,proto3" json:"rib_drop_conn,omitempty"`
	RibBatchOk           uint32                        `protobuf:"varint,60,opt,name=rib_batch_ok,json=ribBatchOk,proto3" json:"rib_batch_ok,omitempty"`
	RibBatchBackup       uint32                        `protobuf:"varint,61,opt,name=rib_batch_backup,json=ribBatchBackup,proto3" json:"rib_batch_backup,omitempty"`
	RibBatchLimit        uint32                        `protobuf:"varint,62,opt,name=rib_batch_limit,json=ribBatchLimit,proto3" json:"rib_batch_limit,omitempty"`
	RibBatchNoTable      uint32                        `protobuf:"varint,63,opt,name=rib_batch_no_table,json=ribBatchNoTable,proto3" json:"rib_batch_no_table,omitempty"`
	RibBatchSomeErr      uint32                        `protobuf:"varint,64,opt,name=rib_batch_some_err,json=ribBatchSomeErr,proto3" json:"rib_batch_some_err,omitempty"`
	RibBatchErr          uint32                        `protobuf:"varint,65,opt,name=rib_batch_err,json=ribBatchErr,proto3" json:"rib_batch_err,omitempty"`
	RibRouteLimit        uint32                        `protobuf:"varint,66,opt,name=rib_route_limit,json=ribRouteLimit,proto3" json:"rib_route_limit,omitempty"`
	RibRouteSomeErr      uint32                        `protobuf:"varint,67,opt,name=rib_route_some_err,json=ribRouteSomeErr,proto3" json:"rib_route_some_err,omitempty"`
	RibRouteErr          uint32                        `protobuf:"varint,68,opt,name=rib_route_err,json=ribRouteErr,proto3" json:"rib_route_err,omitempty"`
	RibPathLimit         uint32                        `protobuf:"varint,69,opt,name=rib_path_limit,json=ribPathLimit,proto3" json:"rib_path_limit,omitempty"`
	RibPathErr           uint32                        `protobuf:"varint,70,opt,name=rib_path_err,json=ribPathErr,proto3" json:"rib_path_err,omitempty"`
	RibMaxLatency        uint64                        `protobuf:"varint,71,opt,name=rib_max_latency,json=ribMaxLatency,proto3" json:"rib_max_latency,omitempty"`
	RibSumLatency        uint64                        `protobuf:"varint,72,opt,name=rib_sum_latency,json=ribSumLatency,proto3" json:"rib_sum_latency,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *Ospfv3EdmRthreadStats) Reset()         { *m = Ospfv3EdmRthreadStats{} }
func (m *Ospfv3EdmRthreadStats) String() string { return proto.CompactTextString(m) }
func (*Ospfv3EdmRthreadStats) ProtoMessage()    {}
func (*Ospfv3EdmRthreadStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_8c1bb20a0129d255, []int{3}
}

func (m *Ospfv3EdmRthreadStats) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Ospfv3EdmRthreadStats.Unmarshal(m, b)
}
func (m *Ospfv3EdmRthreadStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Ospfv3EdmRthreadStats.Marshal(b, m, deterministic)
}
func (m *Ospfv3EdmRthreadStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ospfv3EdmRthreadStats.Merge(m, src)
}
func (m *Ospfv3EdmRthreadStats) XXX_Size() int {
	return xxx_messageInfo_Ospfv3EdmRthreadStats.Size(m)
}
func (m *Ospfv3EdmRthreadStats) XXX_DiscardUnknown() {
	xxx_messageInfo_Ospfv3EdmRthreadStats.DiscardUnknown(m)
}

var xxx_messageInfo_Ospfv3EdmRthreadStats proto.InternalMessageInfo

func (m *Ospfv3EdmRthreadStats) GetThreadQ() *Ospfv3EdmRthreadQueueStats {
	if m != nil {
		return m.ThreadQ
	}
	return nil
}

func (m *Ospfv3EdmRthreadStats) GetHoldq() []*Ospfv3EdmRthreadQueueStats {
	if m != nil {
		return m.Holdq
	}
	return nil
}

func (m *Ospfv3EdmRthreadStats) GetWqThreadActive() bool {
	if m != nil {
		return m.WqThreadActive
	}
	return false
}

func (m *Ospfv3EdmRthreadStats) GetWqSignals() uint32 {
	if m != nil {
		return m.WqSignals
	}
	return 0
}

func (m *Ospfv3EdmRthreadStats) GetRibBaseTime() *Ospfv3EdmTime {
	if m != nil {
		return m.RibBaseTime
	}
	return nil
}

func (m *Ospfv3EdmRthreadStats) GetRibBaseClock() uint64 {
	if m != nil {
		return m.RibBaseClock
	}
	return 0
}

func (m *Ospfv3EdmRthreadStats) GetRibBatchSent() uint32 {
	if m != nil {
		return m.RibBatchSent
	}
	return 0
}

func (m *Ospfv3EdmRthreadStats) GetRibBatchPurged() uint32 {
	if m != nil {
		return m.RibBatchPurged
	}
	return 0
}

func (m *Ospfv3EdmRthreadStats) GetRibDropVersion() uint32 {
	if m != nil {
		return m.RibDropVersion
	}
	return 0
}

func (m *Ospfv3EdmRthreadStats) GetRibDropConn() uint32 {
	if m != nil {
		return m.RibDropConn
	}
	return 0
}

func (m *Ospfv3EdmRthreadStats) GetRibBatchOk() uint32 {
	if m != nil {
		return m.RibBatchOk
	}
	return 0
}

func (m *Ospfv3EdmRthreadStats) GetRibBatchBackup() uint32 {
	if m != nil {
		return m.RibBatchBackup
	}
	return 0
}

func (m *Ospfv3EdmRthreadStats) GetRibBatchLimit() uint32 {
	if m != nil {
		return m.RibBatchLimit
	}
	return 0
}

func (m *Ospfv3EdmRthreadStats) GetRibBatchNoTable() uint32 {
	if m != nil {
		return m.RibBatchNoTable
	}
	return 0
}

func (m *Ospfv3EdmRthreadStats) GetRibBatchSomeErr() uint32 {
	if m != nil {
		return m.RibBatchSomeErr
	}
	return 0
}

func (m *Ospfv3EdmRthreadStats) GetRibBatchErr() uint32 {
	if m != nil {
		return m.RibBatchErr
	}
	return 0
}

func (m *Ospfv3EdmRthreadStats) GetRibRouteLimit() uint32 {
	if m != nil {
		return m.RibRouteLimit
	}
	return 0
}

func (m *Ospfv3EdmRthreadStats) GetRibRouteSomeErr() uint32 {
	if m != nil {
		return m.RibRouteSomeErr
	}
	return 0
}

func (m *Ospfv3EdmRthreadStats) GetRibRouteErr() uint32 {
	if m != nil {
		return m.RibRouteErr
	}
	return 0
}

func (m *Ospfv3EdmRthreadStats) GetRibPathLimit() uint32 {
	if m != nil {
		return m.RibPathLimit
	}
	return 0
}

func (m *Ospfv3EdmRthreadStats) GetRibPathErr() uint32 {
	if m != nil {
		return m.RibPathErr
	}
	return 0
}

func (m *Ospfv3EdmRthreadStats) GetRibMaxLatency() uint64 {
	if m != nil {
		return m.RibMaxLatency
	}
	return 0
}

func (m *Ospfv3EdmRthreadStats) GetRibSumLatency() uint64 {
	if m != nil {
		return m.RibSumLatency
	}
	return 0
}

func init() {
	proto.RegisterType((*Ospfv3EdmRthreadStats_KEYS)(nil), "cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.statistics.rib_thread_stats.ospfv3_edm_rthread_stats_KEYS")
	proto.RegisterType((*Ospfv3EdmRthreadQueueStats)(nil), "cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.statistics.rib_thread_stats.ospfv3_edm_rthread_queue_stats")
	proto.RegisterType((*Ospfv3EdmTime)(nil), "cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.statistics.rib_thread_stats.ospfv3_edm_time")
	proto.RegisterType((*Ospfv3EdmRthreadStats)(nil), "cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.statistics.rib_thread_stats.ospfv3_edm_rthread_stats")
}

func init() { proto.RegisterFile("ospfv3_edm_rthread_stats.proto", fileDescriptor_8c1bb20a0129d255) }

var fileDescriptor_8c1bb20a0129d255 = []byte{
	// 784 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x95, 0xcb, 0x6e, 0xdb, 0x38,
	0x14, 0x86, 0xa1, 0x5c, 0x6d, 0x3a, 0x76, 0x26, 0x5a, 0x0c, 0x08, 0xcc, 0x24, 0xf0, 0x18, 0xc1,
	0xc0, 0x98, 0x01, 0xbc, 0x48, 0x66, 0x32, 0xf7, 0x69, 0xe3, 0x4b, 0xda, 0xa2, 0x49, 0x9a, 0xca,
	0x46, 0x81, 0xae, 0x08, 0x5a, 0x62, 0x62, 0xc1, 0x12, 0x29, 0x91, 0x94, 0xe5, 0x3e, 0x41, 0xbb,
	0xe9, 0xcb, 0xf4, 0x45, 0xfa, 0x4a, 0x05, 0x2f, 0x92, 0xe5, 0xa2, 0xe9, 0xaa, 0x45, 0x77, 0xf6,
	0x7f, 0x3e, 0x9d, 0xf3, 0xf3, 0xf0, 0xe8, 0x08, 0x1c, 0x31, 0x91, 0xdc, 0x2e, 0x4e, 0x11, 0x09,
	0x62, 0xc4, 0xe5, 0x8c, 0x13, 0x1c, 0x20, 0x21, 0xb1, 0x14, 0xbd, 0x84, 0x33, 0xc9, 0x5c, 0xcf,
	0x0f, 0x85, 0xcf, 0x50, 0xc8, 0x04, 0x5a, 0x72, 0x14, 0x26, 0x8b, 0x33, 0x64, 0x9f, 0x60, 0x09,
	0xe1, 0x3d, 0xf3, 0x5b, 0xb1, 0x3e, 0x11, 0x82, 0x88, 0xe2, 0x57, 0x4f, 0xe5, 0x08, 0x85, 0x0c,
	0x7d, 0xd1, 0xe3, 0xe1, 0x14, 0x55, 0x33, 0x77, 0xfa, 0xe0, 0xf0, 0xbe, 0xaa, 0xe8, 0xe9, 0xe8,
	0xe5, 0xd8, 0xfd, 0x09, 0xec, 0xd9, 0x3c, 0x88, 0xe2, 0x98, 0x40, 0xa7, 0xed, 0x74, 0xeb, 0x5e,
	0xc3, 0x6a, 0xd7, 0x38, 0x26, 0x9d, 0x77, 0x9b, 0x9f, 0xb4, 0x9e, 0x66, 0x24, 0x23, 0x26, 0x95,
	0xfb, 0x03, 0xa8, 0xe7, 0x29, 0x22, 0xa9, 0x0c, 0x6d, 0x8a, 0x2d, 0xaf, 0x96, 0xa7, 0x23, 0xfd,
	0xdf, 0x06, 0x03, 0x13, 0xdc, 0x28, 0x82, 0x43, 0x13, 0xfc, 0x19, 0xec, 0xe7, 0x29, 0xba, 0x0d,
	0xb9, 0x90, 0xc5, 0xf3, 0x9b, 0x1a, 0x69, 0xe6, 0xe9, 0x85, 0x52, 0x6d, 0x92, 0x1f, 0x01, 0xc8,
	0x53, 0x14, 0x11, 0x8a, 0xfc, 0x8c, 0xc3, 0xad, 0xb6, 0xd3, 0x3d, 0x50, 0x59, 0x2e, 0x09, 0x1d,
	0x64, 0xbc, 0x12, 0x8d, 0xf1, 0x12, 0x6e, 0x57, 0xa2, 0x57, 0x78, 0xe9, 0xfe, 0x02, 0x0e, 0xf2,
	0x14, 0x49, 0x26, 0x71, 0x84, 0x08, 0xd5, 0xbe, 0x03, 0xb8, 0xd3, 0x76, 0xba, 0x4d, 0x6f, 0x3f,
	0x4f, 0x27, 0x4a, 0x1f, 0x59, 0x79, 0x8d, 0x0d, 0x88, 0x65, 0x77, 0xd7, 0xd8, 0xa1, 0x95, 0xad,
	0x77, 0x42, 0x89, 0xee, 0x04, 0xe1, 0x5c, 0xc0, 0x9a, 0x26, 0x9b, 0x79, 0x3a, 0x32, 0xea, 0x88,
	0x73, 0x61, 0x39, 0x9b, 0xcd, 0x70, 0xf5, 0x82, 0xb3, 0xc9, 0x34, 0x77, 0x0c, 0x5a, 0x79, 0xaa,
	0x4e, 0x80, 0x22, 0x2c, 0x09, 0xf5, 0x5f, 0x41, 0xa0, 0x5b, 0xb1, 0x97, 0xa7, 0x57, 0x78, 0x79,
	0x69, 0x34, 0x4b, 0x89, 0x2c, 0x2e, 0xa9, 0x46, 0x41, 0x8d, 0xb3, 0xd8, 0x52, 0x9d, 0x27, 0x60,
	0xbf, 0x72, 0x67, 0xba, 0x85, 0xdf, 0x83, 0x1d, 0x41, 0x7c, 0x46, 0x03, 0x7d, 0x43, 0x4d, 0xcf,
	0xfe, 0x73, 0x8f, 0x00, 0xa0, 0x98, 0x32, 0x1b, 0xdb, 0xd0, 0xb1, 0x8a, 0xd2, 0x79, 0x5f, 0x07,
	0xf0, 0xbe, 0x21, 0x72, 0xdf, 0x3a, 0xa0, 0x56, 0x0c, 0x04, 0x3c, 0x69, 0x3b, 0xdd, 0xc6, 0x09,
	0xef, 0x7d, 0xf9, 0x41, 0xee, 0x7d, 0x7e, 0x00, 0xbd, 0x5d, 0xa3, 0x3d, 0x77, 0xdf, 0x38, 0x60,
	0x7b, 0xc6, 0xa2, 0x20, 0x85, 0xa7, 0xed, 0xcd, 0x6f, 0x64, 0xc6, 0x18, 0x70, 0xbb, 0xe0, 0x3b,
	0x35, 0x4a, 0x26, 0x8e, 0x7d, 0x19, 0x2e, 0x08, 0xfc, 0xad, 0xed, 0x74, 0x6b, 0x5e, 0x2b, 0x4f,
	0x27, 0x5a, 0x3e, 0xd7, 0xaa, 0x7b, 0xa8, 0xc7, 0x57, 0x84, 0x77, 0x14, 0x47, 0x02, 0xfe, 0xae,
	0x6f, 0xa0, 0x9e, 0xa7, 0x63, 0x23, 0xb8, 0xaf, 0x1d, 0xd0, 0x54, 0x1e, 0xa6, 0x58, 0x10, 0x7d,
	0x95, 0xf0, 0x4c, 0x37, 0xda, 0xff, 0xca, 0x67, 0x53, 0xa5, 0xbc, 0x06, 0x0f, 0xa7, 0x7d, 0x2c,
	0xc8, 0x44, 0x8d, 0xd0, 0x31, 0x68, 0x95, 0x46, 0xfc, 0x88, 0xf9, 0x73, 0xf8, 0x87, 0x99, 0x3d,
	0x0b, 0x0d, 0x94, 0xb6, 0xa2, 0xa4, 0x3f, 0x43, 0x82, 0x50, 0x09, 0xff, 0xd4, 0x47, 0x32, 0x94,
	0xf4, 0x67, 0x63, 0x42, 0xa5, 0x6a, 0xcf, 0x8a, 0x4a, 0x32, 0x7e, 0x47, 0x02, 0xf8, 0x97, 0xe6,
	0x5a, 0x05, 0x77, 0xa3, 0xd5, 0x82, 0x0c, 0x38, 0x4b, 0xd0, 0x82, 0x70, 0x11, 0x32, 0x0a, 0xff,
	0x2e, 0xc9, 0x21, 0x67, 0xc9, 0x0b, 0xa3, 0xba, 0x1d, 0xd3, 0x28, 0x4d, 0xfa, 0x8c, 0x52, 0xf8,
	0x8f, 0xc6, 0x1a, 0x16, 0x1b, 0x30, 0x4a, 0xdd, 0x36, 0xd8, 0x5b, 0xd5, 0x65, 0x73, 0xf8, 0xaf,
	0x19, 0xf8, 0xa2, 0xe6, 0xb3, 0xf9, 0xba, 0xb3, 0x29, 0xf6, 0xe7, 0x59, 0x02, 0xff, 0x5b, 0x77,
	0xd6, 0xd7, 0xaa, 0x7a, 0xb3, 0x57, 0x64, 0x14, 0xc6, 0xa1, 0x84, 0xff, 0x9b, 0x37, 0xbb, 0x00,
	0x2f, 0x95, 0xe8, 0xfe, 0x0a, 0xdc, 0x15, 0x47, 0x19, 0x92, 0x78, 0x1a, 0x11, 0xf8, 0xc0, 0xac,
	0x95, 0x02, 0xbd, 0x66, 0x13, 0x25, 0xaf, 0xc3, 0x82, 0xc5, 0x7a, 0x65, 0xc0, 0x87, 0xeb, 0xf0,
	0x98, 0xc5, 0x6a, 0x69, 0x14, 0x27, 0x36, 0xb0, 0xe2, 0xce, 0xcb, 0x13, 0x6b, 0x4e, 0x31, 0xd6,
	0x25, 0x67, 0x99, 0x24, 0xd6, 0x65, 0xbf, 0x74, 0xe9, 0x29, 0x75, 0xcd, 0xa5, 0xe1, 0xca, 0xc2,
	0x83, 0xb2, 0xb0, 0x46, 0x3f, 0x2a, 0x6c, 0x60, 0xc5, 0x0d, 0xcb, 0xc2, 0x9a, 0x53, 0x8c, 0x1d,
	0x84, 0x04, 0xcb, 0xa2, 0x3b, 0xa3, 0x72, 0x10, 0x6e, 0xb0, 0xb4, 0xcd, 0xb1, 0x17, 0xa2, 0x29,
	0x95, 0xe8, 0xa2, 0xbc, 0x10, 0xc5, 0x54, 0x0e, 0x50, 0xdd, 0x8c, 0x8f, 0xcc, 0x47, 0x82, 0x87,
	0xd3, 0xca, 0x6a, 0xb4, 0x5c, 0x75, 0x37, 0x3e, 0x2e, 0xb9, 0xd5, 0x72, 0x9c, 0xee, 0xe8, 0x0f,
	0xee, 0xe9, 0x87, 0x00, 0x00, 0x00, 0xff, 0xff, 0x82, 0x3e, 0xe0, 0x7c, 0x92, 0x07, 0x00, 0x00,
}
