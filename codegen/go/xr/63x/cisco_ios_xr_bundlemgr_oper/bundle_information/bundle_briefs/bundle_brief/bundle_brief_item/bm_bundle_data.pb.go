/*
Copyright 2019 Cisco Systems

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: bm_bundle_data.proto

package cisco_ios_xr_bundlemgr_oper_bundle_information_bundle_briefs_bundle_brief_bundle_brief_item

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type BmBundleData_KEYS struct {
	BundleInterface      string   `protobuf:"bytes,1,opt,name=bundle_interface,json=bundleInterface,proto3" json:"bundle_interface,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BmBundleData_KEYS) Reset()         { *m = BmBundleData_KEYS{} }
func (m *BmBundleData_KEYS) String() string { return proto.CompactTextString(m) }
func (*BmBundleData_KEYS) ProtoMessage()    {}
func (*BmBundleData_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_faeef7a164208cb2, []int{0}
}

func (m *BmBundleData_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BmBundleData_KEYS.Unmarshal(m, b)
}
func (m *BmBundleData_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BmBundleData_KEYS.Marshal(b, m, deterministic)
}
func (m *BmBundleData_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BmBundleData_KEYS.Merge(m, src)
}
func (m *BmBundleData_KEYS) XXX_Size() int {
	return xxx_messageInfo_BmBundleData_KEYS.Size(m)
}
func (m *BmBundleData_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_BmBundleData_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_BmBundleData_KEYS proto.InternalMessageInfo

func (m *BmBundleData_KEYS) GetBundleInterface() string {
	if m != nil {
		return m.BundleInterface
	}
	return ""
}

type BmMacAddrSt struct {
	Address              string   `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BmMacAddrSt) Reset()         { *m = BmMacAddrSt{} }
func (m *BmMacAddrSt) String() string { return proto.CompactTextString(m) }
func (*BmMacAddrSt) ProtoMessage()    {}
func (*BmMacAddrSt) Descriptor() ([]byte, []int) {
	return fileDescriptor_faeef7a164208cb2, []int{1}
}

func (m *BmMacAddrSt) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BmMacAddrSt.Unmarshal(m, b)
}
func (m *BmMacAddrSt) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BmMacAddrSt.Marshal(b, m, deterministic)
}
func (m *BmMacAddrSt) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BmMacAddrSt.Merge(m, src)
}
func (m *BmMacAddrSt) XXX_Size() int {
	return xxx_messageInfo_BmMacAddrSt.Size(m)
}
func (m *BmMacAddrSt) XXX_DiscardUnknown() {
	xxx_messageInfo_BmMacAddrSt.DiscardUnknown(m)
}

var xxx_messageInfo_BmMacAddrSt proto.InternalMessageInfo

func (m *BmMacAddrSt) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type BmAddr struct {
	Af                   string   `protobuf:"bytes,1,opt,name=af,proto3" json:"af,omitempty"`
	Ipv4                 string   `protobuf:"bytes,2,opt,name=ipv4,proto3" json:"ipv4,omitempty"`
	Ipv6                 string   `protobuf:"bytes,3,opt,name=ipv6,proto3" json:"ipv6,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BmAddr) Reset()         { *m = BmAddr{} }
func (m *BmAddr) String() string { return proto.CompactTextString(m) }
func (*BmAddr) ProtoMessage()    {}
func (*BmAddr) Descriptor() ([]byte, []int) {
	return fileDescriptor_faeef7a164208cb2, []int{2}
}

func (m *BmAddr) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BmAddr.Unmarshal(m, b)
}
func (m *BmAddr) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BmAddr.Marshal(b, m, deterministic)
}
func (m *BmAddr) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BmAddr.Merge(m, src)
}
func (m *BmAddr) XXX_Size() int {
	return xxx_messageInfo_BmAddr.Size(m)
}
func (m *BmAddr) XXX_DiscardUnknown() {
	xxx_messageInfo_BmAddr.DiscardUnknown(m)
}

var xxx_messageInfo_BmAddr proto.InternalMessageInfo

func (m *BmAddr) GetAf() string {
	if m != nil {
		return m.Af
	}
	return ""
}

func (m *BmAddr) GetIpv4() string {
	if m != nil {
		return m.Ipv4
	}
	return ""
}

func (m *BmAddr) GetIpv6() string {
	if m != nil {
		return m.Ipv6
	}
	return ""
}

type BmBundleBfdData struct {
	BundleStatus         string   `protobuf:"bytes,1,opt,name=bundle_status,json=bundleStatus,proto3" json:"bundle_status,omitempty"`
	StartTimer           uint32   `protobuf:"varint,2,opt,name=start_timer,json=startTimer,proto3" json:"start_timer,omitempty"`
	NbrUnconfigTimer     uint32   `protobuf:"varint,3,opt,name=nbr_unconfig_timer,json=nbrUnconfigTimer,proto3" json:"nbr_unconfig_timer,omitempty"`
	PrefMultiplier       uint32   `protobuf:"varint,4,opt,name=pref_multiplier,json=prefMultiplier,proto3" json:"pref_multiplier,omitempty"`
	PrefMinInterval      uint32   `protobuf:"varint,5,opt,name=pref_min_interval,json=prefMinInterval,proto3" json:"pref_min_interval,omitempty"`
	PrefEchoMinInterval  uint32   `protobuf:"varint,6,opt,name=pref_echo_min_interval,json=prefEchoMinInterval,proto3" json:"pref_echo_min_interval,omitempty"`
	FastDetect           uint32   `protobuf:"varint,7,opt,name=fast_detect,json=fastDetect,proto3" json:"fast_detect,omitempty"`
	DestinationAddress   *BmAddr  `protobuf:"bytes,8,opt,name=destination_address,json=destinationAddress,proto3" json:"destination_address,omitempty"`
	ModeInfo             uint32   `protobuf:"varint,9,opt,name=mode_info,json=modeInfo,proto3" json:"mode_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BmBundleBfdData) Reset()         { *m = BmBundleBfdData{} }
func (m *BmBundleBfdData) String() string { return proto.CompactTextString(m) }
func (*BmBundleBfdData) ProtoMessage()    {}
func (*BmBundleBfdData) Descriptor() ([]byte, []int) {
	return fileDescriptor_faeef7a164208cb2, []int{3}
}

func (m *BmBundleBfdData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BmBundleBfdData.Unmarshal(m, b)
}
func (m *BmBundleBfdData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BmBundleBfdData.Marshal(b, m, deterministic)
}
func (m *BmBundleBfdData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BmBundleBfdData.Merge(m, src)
}
func (m *BmBundleBfdData) XXX_Size() int {
	return xxx_messageInfo_BmBundleBfdData.Size(m)
}
func (m *BmBundleBfdData) XXX_DiscardUnknown() {
	xxx_messageInfo_BmBundleBfdData.DiscardUnknown(m)
}

var xxx_messageInfo_BmBundleBfdData proto.InternalMessageInfo

func (m *BmBundleBfdData) GetBundleStatus() string {
	if m != nil {
		return m.BundleStatus
	}
	return ""
}

func (m *BmBundleBfdData) GetStartTimer() uint32 {
	if m != nil {
		return m.StartTimer
	}
	return 0
}

func (m *BmBundleBfdData) GetNbrUnconfigTimer() uint32 {
	if m != nil {
		return m.NbrUnconfigTimer
	}
	return 0
}

func (m *BmBundleBfdData) GetPrefMultiplier() uint32 {
	if m != nil {
		return m.PrefMultiplier
	}
	return 0
}

func (m *BmBundleBfdData) GetPrefMinInterval() uint32 {
	if m != nil {
		return m.PrefMinInterval
	}
	return 0
}

func (m *BmBundleBfdData) GetPrefEchoMinInterval() uint32 {
	if m != nil {
		return m.PrefEchoMinInterval
	}
	return 0
}

func (m *BmBundleBfdData) GetFastDetect() uint32 {
	if m != nil {
		return m.FastDetect
	}
	return 0
}

func (m *BmBundleBfdData) GetDestinationAddress() *BmAddr {
	if m != nil {
		return m.DestinationAddress
	}
	return nil
}

func (m *BmBundleBfdData) GetModeInfo() uint32 {
	if m != nil {
		return m.ModeInfo
	}
	return 0
}

type BmBundleData struct {
	BundleInterfaceName             string             `protobuf:"bytes,50,opt,name=bundle_interface_name,json=bundleInterfaceName,proto3" json:"bundle_interface_name,omitempty"`
	MacAddress                      *BmMacAddrSt       `protobuf:"bytes,51,opt,name=mac_address,json=macAddress,proto3" json:"mac_address,omitempty"`
	AvailableBandwidth              uint32             `protobuf:"varint,52,opt,name=available_bandwidth,json=availableBandwidth,proto3" json:"available_bandwidth,omitempty"`
	EffectiveBandwidth              uint32             `protobuf:"varint,53,opt,name=effective_bandwidth,json=effectiveBandwidth,proto3" json:"effective_bandwidth,omitempty"`
	ConfiguredBandwidth             uint32             `protobuf:"varint,54,opt,name=configured_bandwidth,json=configuredBandwidth,proto3" json:"configured_bandwidth,omitempty"`
	MinimumActiveLinks              uint32             `protobuf:"varint,55,opt,name=minimum_active_links,json=minimumActiveLinks,proto3" json:"minimum_active_links,omitempty"`
	MaximumActiveLinks              uint32             `protobuf:"varint,56,opt,name=maximum_active_links,json=maximumActiveLinks,proto3" json:"maximum_active_links,omitempty"`
	MaximumActiveLinksSource        string             `protobuf:"bytes,57,opt,name=maximum_active_links_source,json=maximumActiveLinksSource,proto3" json:"maximum_active_links_source,omitempty"`
	MinimumBandwidth                uint32             `protobuf:"varint,58,opt,name=minimum_bandwidth,json=minimumBandwidth,proto3" json:"minimum_bandwidth,omitempty"`
	PrimaryMember                   string             `protobuf:"bytes,59,opt,name=primary_member,json=primaryMember,proto3" json:"primary_member,omitempty"`
	BfdConfig                       []*BmBundleBfdData `protobuf:"bytes,60,rep,name=bfd_config,json=bfdConfig,proto3" json:"bfd_config,omitempty"`
	BundleStatus                    string             `protobuf:"bytes,61,opt,name=bundle_status,json=bundleStatus,proto3" json:"bundle_status,omitempty"`
	ActiveMemberCount               uint32             `protobuf:"varint,62,opt,name=active_member_count,json=activeMemberCount,proto3" json:"active_member_count,omitempty"`
	StandbyMemberCount              uint32             `protobuf:"varint,63,opt,name=standby_member_count,json=standbyMemberCount,proto3" json:"standby_member_count,omitempty"`
	ConfiguredMemberCount           uint32             `protobuf:"varint,64,opt,name=configured_member_count,json=configuredMemberCount,proto3" json:"configured_member_count,omitempty"`
	MacSource                       string             `protobuf:"bytes,65,opt,name=mac_source,json=macSource,proto3" json:"mac_source,omitempty"`
	MacSourceMember                 string             `protobuf:"bytes,66,opt,name=mac_source_member,json=macSourceMember,proto3" json:"mac_source_member,omitempty"`
	InterChassis                    uint32             `protobuf:"varint,67,opt,name=inter_chassis,json=interChassis,proto3" json:"inter_chassis,omitempty"`
	IsActive                        uint32             `protobuf:"varint,68,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
	LacpStatus                      string             `protobuf:"bytes,69,opt,name=lacp_status,json=lacpStatus,proto3" json:"lacp_status,omitempty"`
	MlacpStatus                     string             `protobuf:"bytes,70,opt,name=mlacp_status,json=mlacpStatus,proto3" json:"mlacp_status,omitempty"`
	Ipv4BfdStatus                   string             `protobuf:"bytes,71,opt,name=ipv4bfd_status,json=ipv4bfdStatus,proto3" json:"ipv4bfd_status,omitempty"`
	LinkOrderStatus                 string             `protobuf:"bytes,72,opt,name=link_order_status,json=linkOrderStatus,proto3" json:"link_order_status,omitempty"`
	Ipv6BfdStatus                   string             `protobuf:"bytes,73,opt,name=ipv6bfd_status,json=ipv6bfdStatus,proto3" json:"ipv6bfd_status,omitempty"`
	LoadBalanceHashType             string             `protobuf:"bytes,74,opt,name=load_balance_hash_type,json=loadBalanceHashType,proto3" json:"load_balance_hash_type,omitempty"`
	LoadBalanceLocalityThreshold    uint32             `protobuf:"varint,75,opt,name=load_balance_locality_threshold,json=loadBalanceLocalityThreshold,proto3" json:"load_balance_locality_threshold,omitempty"`
	SuppressionTimer                uint32             `protobuf:"varint,76,opt,name=suppression_timer,json=suppressionTimer,proto3" json:"suppression_timer,omitempty"`
	WaitWhileTimer                  uint32             `protobuf:"varint,77,opt,name=wait_while_timer,json=waitWhileTimer,proto3" json:"wait_while_timer,omitempty"`
	CollectorMaxDelay               uint32             `protobuf:"varint,78,opt,name=collector_max_delay,json=collectorMaxDelay,proto3" json:"collector_max_delay,omitempty"`
	CiscoExtensions                 uint32             `protobuf:"varint,79,opt,name=cisco_extensions,json=ciscoExtensions,proto3" json:"cisco_extensions,omitempty"`
	LacpNonrevertive                uint32             `protobuf:"varint,80,opt,name=lacp_nonrevertive,json=lacpNonrevertive,proto3" json:"lacp_nonrevertive,omitempty"`
	IccpGroupId                     uint32             `protobuf:"varint,81,opt,name=iccp_group_id,json=iccpGroupId,proto3" json:"iccp_group_id,omitempty"`
	ActiveForeignMemberCount        uint32             `protobuf:"varint,82,opt,name=active_foreign_member_count,json=activeForeignMemberCount,proto3" json:"active_foreign_member_count,omitempty"`
	ConfiguredForeignMemberCount    uint32             `protobuf:"varint,83,opt,name=configured_foreign_member_count,json=configuredForeignMemberCount,proto3" json:"configured_foreign_member_count,omitempty"`
	SwitchoverType                  string             `protobuf:"bytes,84,opt,name=switchover_type,json=switchoverType,proto3" json:"switchover_type,omitempty"`
	MaximizeThresholdValueLinks     uint32             `protobuf:"varint,85,opt,name=maximize_threshold_value_links,json=maximizeThresholdValueLinks,proto3" json:"maximize_threshold_value_links,omitempty"`
	MaximizeThresholdValueBandWidth uint32             `protobuf:"varint,86,opt,name=maximize_threshold_value_band_width,json=maximizeThresholdValueBandWidth,proto3" json:"maximize_threshold_value_band_width,omitempty"`
	MlacpMode                       string             `protobuf:"bytes,87,opt,name=mlacp_mode,json=mlacpMode,proto3" json:"mlacp_mode,omitempty"`
	RecoveryDelay                   uint32             `protobuf:"varint,88,opt,name=recovery_delay,json=recoveryDelay,proto3" json:"recovery_delay,omitempty"`
	Singleton                       uint32             `protobuf:"varint,89,opt,name=singleton,proto3" json:"singleton,omitempty"`
	XXX_NoUnkeyedLiteral            struct{}           `json:"-"`
	XXX_unrecognized                []byte             `json:"-"`
	XXX_sizecache                   int32              `json:"-"`
}

func (m *BmBundleData) Reset()         { *m = BmBundleData{} }
func (m *BmBundleData) String() string { return proto.CompactTextString(m) }
func (*BmBundleData) ProtoMessage()    {}
func (*BmBundleData) Descriptor() ([]byte, []int) {
	return fileDescriptor_faeef7a164208cb2, []int{4}
}

func (m *BmBundleData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BmBundleData.Unmarshal(m, b)
}
func (m *BmBundleData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BmBundleData.Marshal(b, m, deterministic)
}
func (m *BmBundleData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BmBundleData.Merge(m, src)
}
func (m *BmBundleData) XXX_Size() int {
	return xxx_messageInfo_BmBundleData.Size(m)
}
func (m *BmBundleData) XXX_DiscardUnknown() {
	xxx_messageInfo_BmBundleData.DiscardUnknown(m)
}

var xxx_messageInfo_BmBundleData proto.InternalMessageInfo

func (m *BmBundleData) GetBundleInterfaceName() string {
	if m != nil {
		return m.BundleInterfaceName
	}
	return ""
}

func (m *BmBundleData) GetMacAddress() *BmMacAddrSt {
	if m != nil {
		return m.MacAddress
	}
	return nil
}

func (m *BmBundleData) GetAvailableBandwidth() uint32 {
	if m != nil {
		return m.AvailableBandwidth
	}
	return 0
}

func (m *BmBundleData) GetEffectiveBandwidth() uint32 {
	if m != nil {
		return m.EffectiveBandwidth
	}
	return 0
}

func (m *BmBundleData) GetConfiguredBandwidth() uint32 {
	if m != nil {
		return m.ConfiguredBandwidth
	}
	return 0
}

func (m *BmBundleData) GetMinimumActiveLinks() uint32 {
	if m != nil {
		return m.MinimumActiveLinks
	}
	return 0
}

func (m *BmBundleData) GetMaximumActiveLinks() uint32 {
	if m != nil {
		return m.MaximumActiveLinks
	}
	return 0
}

func (m *BmBundleData) GetMaximumActiveLinksSource() string {
	if m != nil {
		return m.MaximumActiveLinksSource
	}
	return ""
}

func (m *BmBundleData) GetMinimumBandwidth() uint32 {
	if m != nil {
		return m.MinimumBandwidth
	}
	return 0
}

func (m *BmBundleData) GetPrimaryMember() string {
	if m != nil {
		return m.PrimaryMember
	}
	return ""
}

func (m *BmBundleData) GetBfdConfig() []*BmBundleBfdData {
	if m != nil {
		return m.BfdConfig
	}
	return nil
}

func (m *BmBundleData) GetBundleStatus() string {
	if m != nil {
		return m.BundleStatus
	}
	return ""
}

func (m *BmBundleData) GetActiveMemberCount() uint32 {
	if m != nil {
		return m.ActiveMemberCount
	}
	return 0
}

func (m *BmBundleData) GetStandbyMemberCount() uint32 {
	if m != nil {
		return m.StandbyMemberCount
	}
	return 0
}

func (m *BmBundleData) GetConfiguredMemberCount() uint32 {
	if m != nil {
		return m.ConfiguredMemberCount
	}
	return 0
}

func (m *BmBundleData) GetMacSource() string {
	if m != nil {
		return m.MacSource
	}
	return ""
}

func (m *BmBundleData) GetMacSourceMember() string {
	if m != nil {
		return m.MacSourceMember
	}
	return ""
}

func (m *BmBundleData) GetInterChassis() uint32 {
	if m != nil {
		return m.InterChassis
	}
	return 0
}

func (m *BmBundleData) GetIsActive() uint32 {
	if m != nil {
		return m.IsActive
	}
	return 0
}

func (m *BmBundleData) GetLacpStatus() string {
	if m != nil {
		return m.LacpStatus
	}
	return ""
}

func (m *BmBundleData) GetMlacpStatus() string {
	if m != nil {
		return m.MlacpStatus
	}
	return ""
}

func (m *BmBundleData) GetIpv4BfdStatus() string {
	if m != nil {
		return m.Ipv4BfdStatus
	}
	return ""
}

func (m *BmBundleData) GetLinkOrderStatus() string {
	if m != nil {
		return m.LinkOrderStatus
	}
	return ""
}

func (m *BmBundleData) GetIpv6BfdStatus() string {
	if m != nil {
		return m.Ipv6BfdStatus
	}
	return ""
}

func (m *BmBundleData) GetLoadBalanceHashType() string {
	if m != nil {
		return m.LoadBalanceHashType
	}
	return ""
}

func (m *BmBundleData) GetLoadBalanceLocalityThreshold() uint32 {
	if m != nil {
		return m.LoadBalanceLocalityThreshold
	}
	return 0
}

func (m *BmBundleData) GetSuppressionTimer() uint32 {
	if m != nil {
		return m.SuppressionTimer
	}
	return 0
}

func (m *BmBundleData) GetWaitWhileTimer() uint32 {
	if m != nil {
		return m.WaitWhileTimer
	}
	return 0
}

func (m *BmBundleData) GetCollectorMaxDelay() uint32 {
	if m != nil {
		return m.CollectorMaxDelay
	}
	return 0
}

func (m *BmBundleData) GetCiscoExtensions() uint32 {
	if m != nil {
		return m.CiscoExtensions
	}
	return 0
}

func (m *BmBundleData) GetLacpNonrevertive() uint32 {
	if m != nil {
		return m.LacpNonrevertive
	}
	return 0
}

func (m *BmBundleData) GetIccpGroupId() uint32 {
	if m != nil {
		return m.IccpGroupId
	}
	return 0
}

func (m *BmBundleData) GetActiveForeignMemberCount() uint32 {
	if m != nil {
		return m.ActiveForeignMemberCount
	}
	return 0
}

func (m *BmBundleData) GetConfiguredForeignMemberCount() uint32 {
	if m != nil {
		return m.ConfiguredForeignMemberCount
	}
	return 0
}

func (m *BmBundleData) GetSwitchoverType() string {
	if m != nil {
		return m.SwitchoverType
	}
	return ""
}

func (m *BmBundleData) GetMaximizeThresholdValueLinks() uint32 {
	if m != nil {
		return m.MaximizeThresholdValueLinks
	}
	return 0
}

func (m *BmBundleData) GetMaximizeThresholdValueBandWidth() uint32 {
	if m != nil {
		return m.MaximizeThresholdValueBandWidth
	}
	return 0
}

func (m *BmBundleData) GetMlacpMode() string {
	if m != nil {
		return m.MlacpMode
	}
	return ""
}

func (m *BmBundleData) GetRecoveryDelay() uint32 {
	if m != nil {
		return m.RecoveryDelay
	}
	return 0
}

func (m *BmBundleData) GetSingleton() uint32 {
	if m != nil {
		return m.Singleton
	}
	return 0
}

func init() {
	proto.RegisterType((*BmBundleData_KEYS)(nil), "cisco_ios_xr_bundlemgr_oper.bundle_information.bundle_briefs.bundle_brief.bundle_brief_item.bm_bundle_data_KEYS")
	proto.RegisterType((*BmMacAddrSt)(nil), "cisco_ios_xr_bundlemgr_oper.bundle_information.bundle_briefs.bundle_brief.bundle_brief_item.bm_mac_addr_st")
	proto.RegisterType((*BmAddr)(nil), "cisco_ios_xr_bundlemgr_oper.bundle_information.bundle_briefs.bundle_brief.bundle_brief_item.bm_addr")
	proto.RegisterType((*BmBundleBfdData)(nil), "cisco_ios_xr_bundlemgr_oper.bundle_information.bundle_briefs.bundle_brief.bundle_brief_item.bm_bundle_bfd_data")
	proto.RegisterType((*BmBundleData)(nil), "cisco_ios_xr_bundlemgr_oper.bundle_information.bundle_briefs.bundle_brief.bundle_brief_item.bm_bundle_data")
}

func init() { proto.RegisterFile("bm_bundle_data.proto", fileDescriptor_faeef7a164208cb2) }

var fileDescriptor_faeef7a164208cb2 = []byte{
	// 1182 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x56, 0x5b, 0x73, 0x13, 0xb7,
	0x17, 0x9f, 0x10, 0xfe, 0x40, 0x8e, 0x49, 0x48, 0xd6, 0xc0, 0x5f, 0x33, 0xd0, 0x86, 0x9a, 0x61,
	0x48, 0xd3, 0x8e, 0xdb, 0x26, 0xd4, 0xbd, 0xd2, 0x12, 0x82, 0x81, 0x94, 0x18, 0x5a, 0x27, 0x40,
	0x99, 0x3e, 0x68, 0xb4, 0xbb, 0xda, 0x58, 0xc3, 0xae, 0xb4, 0x23, 0xc9, 0x4e, 0xdc, 0xcf, 0xd0,
	0xe9, 0x5b, 0x9f, 0xfb, 0xf5, 0xfa, 0x31, 0x3a, 0x3a, 0xd2, 0x7a, 0xd7, 0x90, 0x3e, 0xe6, 0xcd,
	0xfb, 0xbb, 0x1c, 0x5d, 0xce, 0x45, 0x86, 0xab, 0x71, 0x41, 0xe3, 0xb1, 0x4c, 0x73, 0x4e, 0x53,
	0x66, 0x59, 0xb7, 0xd4, 0xca, 0xaa, 0xe8, 0xb7, 0x44, 0x98, 0x44, 0x51, 0xa1, 0x0c, 0x3d, 0xd1,
	0x81, 0x2f, 0x8e, 0x34, 0x55, 0x25, 0xd7, 0xdd, 0x20, 0x17, 0x32, 0x53, 0xba, 0x60, 0x56, 0x28,
	0x59, 0x41, 0xb1, 0x16, 0x3c, 0x33, 0x73, 0x5f, 0x73, 0x1f, 0x54, 0x58, 0x5e, 0x74, 0x1e, 0x40,
	0x7b, 0x7e, 0x51, 0xfa, 0xac, 0xff, 0xe6, 0x20, 0xfa, 0x18, 0x56, 0x67, 0x91, 0x2d, 0xd7, 0x19,
	0x4b, 0x38, 0x59, 0xb8, 0xb5, 0xb0, 0xb1, 0x34, 0xbc, 0xe2, 0xf1, 0xbd, 0x0a, 0xee, 0x6c, 0xc2,
	0x4a, 0x5c, 0xd0, 0x82, 0x25, 0x94, 0xa5, 0xa9, 0xa6, 0xc6, 0x46, 0x04, 0x2e, 0xba, 0x9f, 0xdc,
	0x98, 0xe0, 0xa9, 0x3e, 0x3b, 0x3b, 0x70, 0x31, 0x2e, 0x50, 0x17, 0xad, 0xc0, 0x39, 0x96, 0x05,
	0xfe, 0x1c, 0xcb, 0xa2, 0x08, 0xce, 0x8b, 0x72, 0x72, 0x8f, 0x9c, 0x43, 0x04, 0x7f, 0x07, 0xac,
	0x47, 0x16, 0x67, 0x58, 0xaf, 0xf3, 0xcf, 0x22, 0x44, 0xf5, 0x8e, 0xe3, 0x2c, 0xc5, 0x5d, 0x47,
	0xb7, 0x61, 0x39, 0x40, 0xc6, 0x32, 0x3b, 0xae, 0x56, 0xbe, 0xec, 0xc1, 0x03, 0xc4, 0xa2, 0x75,
	0x68, 0x19, 0xcb, 0xb4, 0xa5, 0x56, 0x14, 0x5c, 0xe3, 0x52, 0xcb, 0x43, 0x40, 0xe8, 0xd0, 0x21,
	0xd1, 0xa7, 0x10, 0xc9, 0x58, 0xd3, 0xb1, 0x4c, 0x94, 0xcc, 0xc4, 0x51, 0xd0, 0x2d, 0xa2, 0x6e,
	0x55, 0xc6, 0xfa, 0x65, 0x20, 0xbc, 0xfa, 0x2e, 0x5c, 0x29, 0x35, 0xcf, 0x68, 0x31, 0xce, 0xad,
	0x28, 0x73, 0xc1, 0x35, 0x39, 0x8f, 0xd2, 0x15, 0x07, 0x0f, 0x66, 0x68, 0xb4, 0x09, 0x6b, 0x5e,
	0x28, 0xa4, 0xbf, 0xcf, 0x09, 0xcb, 0xc9, 0xff, 0x50, 0x8a, 0x11, 0x06, 0x42, 0xee, 0x05, 0x38,
	0xda, 0x86, 0xeb, 0xa8, 0xe5, 0xc9, 0x48, 0xcd, 0x1b, 0x2e, 0xa0, 0xa1, 0xed, 0xd8, 0x7e, 0x32,
	0x52, 0x4d, 0xd3, 0x3a, 0xb4, 0x32, 0x66, 0x2c, 0x4d, 0xb9, 0xe5, 0x89, 0x25, 0x17, 0xfd, 0xc1,
	0x1c, 0xf4, 0x08, 0x91, 0xe8, 0xaf, 0x05, 0x68, 0xa7, 0xdc, 0x58, 0x21, 0xb1, 0x46, 0x68, 0x95,
	0x9f, 0x4b, 0xb7, 0x16, 0x36, 0x5a, 0x5b, 0x69, 0xf7, 0x0c, 0x4b, 0xac, 0x1b, 0x32, 0x3e, 0x8c,
	0x1a, 0x1b, 0xd8, 0xf1, 0xeb, 0x47, 0x37, 0x60, 0xa9, 0x50, 0xa9, 0x0f, 0x4e, 0x96, 0x70, 0xdb,
	0x97, 0x1c, 0xb0, 0x27, 0x33, 0xd5, 0xf9, 0x7b, 0x15, 0x4b, 0xab, 0x51, 0x9c, 0xd1, 0x16, 0x5c,
	0x7b, 0xb7, 0x2e, 0xa9, 0x64, 0x05, 0x27, 0x5b, 0x98, 0xee, 0xf6, 0x3b, 0xc5, 0xf9, 0x9c, 0x15,
	0x3c, 0xfa, 0x63, 0x01, 0x5a, 0x55, 0x79, 0xba, 0x33, 0x6f, 0xe3, 0x99, 0xdf, 0x9e, 0xf5, 0x99,
	0x1b, 0x1d, 0x31, 0x84, 0x82, 0x25, 0xd5, 0x91, 0x3f, 0x83, 0x36, 0x9b, 0x30, 0x91, 0xb3, 0xd8,
	0x59, 0x98, 0x4c, 0x8f, 0x45, 0x6a, 0x47, 0xe4, 0x1e, 0x1e, 0x3e, 0x9a, 0x51, 0x0f, 0x2b, 0xc6,
	0x19, 0x78, 0x96, 0xf1, 0xc4, 0x8a, 0x49, 0xd3, 0xf0, 0xa5, 0x37, 0xcc, 0xa8, 0xda, 0xf0, 0x05,
	0x5c, 0xf5, 0x65, 0x3a, 0xd6, 0x3c, 0x6d, 0x38, 0x7a, 0xbe, 0x80, 0x6a, 0xae, 0xb6, 0x7c, 0x0e,
	0x57, 0x0b, 0x21, 0x45, 0x31, 0x2e, 0x28, 0xf3, 0x0b, 0xe5, 0x42, 0xbe, 0x35, 0xe4, 0x2b, 0xbf,
	0x48, 0xe0, 0x76, 0x90, 0xda, 0x77, 0x0c, 0x3a, 0xd8, 0xc9, 0xfb, 0x8e, 0xaf, 0x83, 0xc3, 0x73,
	0x4d, 0xc7, 0x7d, 0xb8, 0x71, 0x9a, 0x83, 0x1a, 0x35, 0xd6, 0x09, 0x27, 0xdf, 0x60, 0x06, 0xc9,
	0xfb, 0xc6, 0x03, 0xe4, 0xa3, 0x4f, 0x60, 0xad, 0xda, 0x62, 0x7d, 0xa4, 0x6f, 0x7d, 0x6b, 0x06,
	0xa2, 0x3e, 0xcf, 0x1d, 0x58, 0x29, 0xb5, 0x28, 0x98, 0x9e, 0xd2, 0x82, 0x17, 0x31, 0xd7, 0xe4,
	0x3b, 0x0c, 0xbf, 0x1c, 0xd0, 0x01, 0x82, 0xd1, 0x9f, 0x0b, 0x00, 0x6e, 0x84, 0xf8, 0x2b, 0x21,
	0xdf, 0xdf, 0x5a, 0xdc, 0x68, 0x6d, 0xa9, 0xb3, 0xae, 0x8c, 0x77, 0x66, 0xd7, 0x70, 0x29, 0xce,
	0xd2, 0x5d, 0xdc, 0xc1, 0xfb, 0x63, 0xec, 0xfe, 0x29, 0x63, 0xac, 0x0b, 0xed, 0x70, 0x81, 0xfe,
	0x6c, 0x34, 0x51, 0x63, 0x69, 0xc9, 0x0f, 0x78, 0x17, 0x6b, 0x9e, 0xf2, 0x07, 0xdc, 0x75, 0x84,
	0x4b, 0x95, 0xb1, 0x4c, 0xa6, 0xf1, 0x74, 0xde, 0xf0, 0xa3, 0x4f, 0x55, 0xe0, 0x9a, 0x8e, 0x1e,
	0xfc, 0xbf, 0x51, 0x41, 0x73, 0xa6, 0x07, 0x68, 0xba, 0x56, 0xd3, 0x4d, 0xdf, 0x07, 0xe0, 0x2a,
	0xbd, 0xca, 0xe8, 0x0e, 0xee, 0x7d, 0xa9, 0x60, 0x49, 0x48, 0xe1, 0x26, 0xac, 0xd5, 0x74, 0x95,
	0x98, 0x87, 0xfe, 0x59, 0x99, 0xa9, 0x42, 0x6a, 0x6e, 0xc3, 0x32, 0xb6, 0x38, 0x4d, 0x46, 0xcc,
	0x18, 0x61, 0xc8, 0x2e, 0x2e, 0x7c, 0x19, 0xc1, 0x5d, 0x8f, 0xb9, 0xf1, 0x21, 0x4c, 0xa8, 0x26,
	0xf2, 0xc8, 0x8f, 0x0f, 0x61, 0x7c, 0xed, 0xb8, 0xa1, 0x98, 0xb3, 0xa4, 0xac, 0x6e, 0xb2, 0x8f,
	0xeb, 0x80, 0x83, 0xc2, 0x3d, 0x7e, 0x04, 0x97, 0x8b, 0xa6, 0xe2, 0x31, 0x2a, 0x5a, 0x45, 0x43,
	0x72, 0x07, 0x56, 0xdc, 0x4b, 0xe4, 0x52, 0x15, 0x44, 0x4f, 0x7c, 0x1d, 0x05, 0x34, 0xc8, 0x36,
	0x61, 0xcd, 0xd5, 0x32, 0x55, 0x3a, 0xe5, 0xba, 0x52, 0x3e, 0xf5, 0x07, 0x73, 0xc4, 0x0b, 0x87,
	0xcf, 0x85, 0xec, 0x35, 0x42, 0xee, 0xcd, 0x42, 0xf6, 0xea, 0x90, 0xdb, 0x70, 0x3d, 0x57, 0xcc,
	0xb5, 0x6f, 0xce, 0x64, 0xc2, 0xe9, 0x88, 0x99, 0x11, 0xb5, 0xd3, 0x92, 0x93, 0x9f, 0xfc, 0xa8,
	0x73, 0xec, 0x43, 0x4f, 0x3e, 0x65, 0x66, 0x74, 0x38, 0x2d, 0x79, 0xd4, 0x87, 0xf5, 0x39, 0x53,
	0xae, 0x12, 0x96, 0x0b, 0x3b, 0xa5, 0x76, 0xa4, 0xb9, 0x19, 0xa9, 0x3c, 0x25, 0xcf, 0xf0, 0x96,
	0x6e, 0x36, 0xdc, 0xfb, 0x41, 0x74, 0x58, 0x69, 0x5c, 0xab, 0x99, 0x71, 0x59, 0xba, 0x71, 0xe5,
	0x1e, 0x0b, 0xff, 0x0a, 0xee, 0xfb, 0x56, 0x6b, 0x10, 0xfe, 0x15, 0xdc, 0x80, 0xd5, 0x63, 0x26,
	0x2c, 0x3d, 0x1e, 0x89, 0x9c, 0x07, 0xed, 0xc0, 0x3f, 0x83, 0x0e, 0x7f, 0xed, 0x60, 0xaf, 0xec,
	0x42, 0x3b, 0x51, 0x79, 0xce, 0x13, 0xab, 0x34, 0x2d, 0xd8, 0x09, 0x4d, 0x79, 0xce, 0xa6, 0xe4,
	0xb9, 0xaf, 0xdb, 0x19, 0x35, 0x60, 0x27, 0x8f, 0x1c, 0xe1, 0xfe, 0x84, 0xf8, 0x4e, 0xe4, 0x27,
	0x96, 0x4b, 0xb7, 0xa2, 0x21, 0x2f, 0xfc, 0xab, 0x89, 0x78, 0x7f, 0x06, 0xbb, 0x1d, 0x63, 0x26,
	0xa5, 0x92, 0x9a, 0x4f, 0xb8, 0xc6, 0x82, 0xf8, 0xd9, 0xef, 0xd8, 0x11, 0xcf, 0x1b, 0x78, 0xd4,
	0x81, 0x65, 0x91, 0x24, 0x25, 0x3d, 0xd2, 0x6a, 0x5c, 0x52, 0x91, 0x92, 0x5f, 0x50, 0xd8, 0x72,
	0xe0, 0x13, 0x87, 0xed, 0xa5, 0x6e, 0x58, 0x85, 0x1e, 0xcb, 0x94, 0xe6, 0xe2, 0x48, 0xce, 0x77,
	0xc1, 0x10, 0x1d, 0xc4, 0x4b, 0x1e, 0x7b, 0x45, 0xb3, 0x11, 0xfa, 0xb0, 0xde, 0x68, 0xa0, 0x53,
	0x43, 0x1c, 0xf8, 0x44, 0xd4, 0xb2, 0x53, 0xc2, 0xdc, 0x85, 0x2b, 0xe6, 0x58, 0xd8, 0x64, 0xa4,
	0x26, 0x5c, 0xfb, 0xec, 0x1f, 0x62, 0xf6, 0x57, 0x6a, 0x18, 0x13, 0xbf, 0x0b, 0x1f, 0xe2, 0xe0,
	0x14, 0xbf, 0xf3, 0x3a, 0xd7, 0x74, 0xc2, 0xf2, 0x71, 0x35, 0x97, 0x5f, 0xe2, 0x72, 0x37, 0x2a,
	0xd5, 0x2c, 0xd9, 0xaf, 0x9c, 0xc6, 0x0f, 0xe8, 0x7d, 0xb8, 0xfd, 0x9f, 0x41, 0xdc, 0xc8, 0xa5,
	0x7e, 0xe6, 0xbe, 0xc2, 0x48, 0xeb, 0xa7, 0x47, 0x72, 0x23, 0xf8, 0x35, 0x8e, 0x60, 0x37, 0x0b,
	0x30, 0x27, 0xee, 0x3d, 0x27, 0xaf, 0xc3, 0x2c, 0x70, 0xc8, 0x40, 0xa5, 0xdc, 0xb5, 0x81, 0xe6,
	0x89, 0x3b, 0xc0, 0x34, 0xd4, 0xc1, 0xaf, 0x18, 0x77, 0xb9, 0x42, 0x7d, 0x0d, 0xdc, 0x84, 0x25,
	0x23, 0xe4, 0x51, 0xce, 0xad, 0x92, 0xe4, 0x0d, 0x2a, 0x6a, 0x20, 0xbe, 0x80, 0xff, 0x90, 0xb7,
	0xff, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x5e, 0x1c, 0x99, 0x78, 0x39, 0x0b, 0x00, 0x00,
}
