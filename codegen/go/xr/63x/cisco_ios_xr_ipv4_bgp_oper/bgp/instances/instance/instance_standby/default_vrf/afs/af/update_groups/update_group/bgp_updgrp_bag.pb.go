/*
Copyright 2019 Cisco Systems

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: bgp_updgrp_bag.proto

package cisco_ios_xr_ipv4_bgp_oper_bgp_instances_instance_instance_standby_default_vrf_afs_af_update_groups_update_group

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type BgpUpdgrpBag_KEYS struct {
	InstanceName         string   `protobuf:"bytes,1,opt,name=instance_name,json=instanceName,proto3" json:"instance_name,omitempty"`
	AfName               string   `protobuf:"bytes,2,opt,name=af_name,json=afName,proto3" json:"af_name,omitempty"`
	UpdateGroupId        uint32   `protobuf:"varint,3,opt,name=update_group_id,json=updateGroupId,proto3" json:"update_group_id,omitempty"`
	FilterGroupId        uint32   `protobuf:"varint,4,opt,name=filter_group_id,json=filterGroupId,proto3" json:"filter_group_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BgpUpdgrpBag_KEYS) Reset()         { *m = BgpUpdgrpBag_KEYS{} }
func (m *BgpUpdgrpBag_KEYS) String() string { return proto.CompactTextString(m) }
func (*BgpUpdgrpBag_KEYS) ProtoMessage()    {}
func (*BgpUpdgrpBag_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_f25e9a8ba9c23b14, []int{0}
}

func (m *BgpUpdgrpBag_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BgpUpdgrpBag_KEYS.Unmarshal(m, b)
}
func (m *BgpUpdgrpBag_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BgpUpdgrpBag_KEYS.Marshal(b, m, deterministic)
}
func (m *BgpUpdgrpBag_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpUpdgrpBag_KEYS.Merge(m, src)
}
func (m *BgpUpdgrpBag_KEYS) XXX_Size() int {
	return xxx_messageInfo_BgpUpdgrpBag_KEYS.Size(m)
}
func (m *BgpUpdgrpBag_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpUpdgrpBag_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_BgpUpdgrpBag_KEYS proto.InternalMessageInfo

func (m *BgpUpdgrpBag_KEYS) GetInstanceName() string {
	if m != nil {
		return m.InstanceName
	}
	return ""
}

func (m *BgpUpdgrpBag_KEYS) GetAfName() string {
	if m != nil {
		return m.AfName
	}
	return ""
}

func (m *BgpUpdgrpBag_KEYS) GetUpdateGroupId() uint32 {
	if m != nil {
		return m.UpdateGroupId
	}
	return 0
}

func (m *BgpUpdgrpBag_KEYS) GetFilterGroupId() uint32 {
	if m != nil {
		return m.FilterGroupId
	}
	return 0
}

type BgpL2VpnAddrT struct {
	L2VpnAddress         []uint32 `protobuf:"varint,1,rep,packed,name=l2vpn_address,json=l2vpnAddress,proto3" json:"l2vpn_address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BgpL2VpnAddrT) Reset()         { *m = BgpL2VpnAddrT{} }
func (m *BgpL2VpnAddrT) String() string { return proto.CompactTextString(m) }
func (*BgpL2VpnAddrT) ProtoMessage()    {}
func (*BgpL2VpnAddrT) Descriptor() ([]byte, []int) {
	return fileDescriptor_f25e9a8ba9c23b14, []int{1}
}

func (m *BgpL2VpnAddrT) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BgpL2VpnAddrT.Unmarshal(m, b)
}
func (m *BgpL2VpnAddrT) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BgpL2VpnAddrT.Marshal(b, m, deterministic)
}
func (m *BgpL2VpnAddrT) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpL2VpnAddrT.Merge(m, src)
}
func (m *BgpL2VpnAddrT) XXX_Size() int {
	return xxx_messageInfo_BgpL2VpnAddrT.Size(m)
}
func (m *BgpL2VpnAddrT) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpL2VpnAddrT.DiscardUnknown(m)
}

var xxx_messageInfo_BgpL2VpnAddrT proto.InternalMessageInfo

func (m *BgpL2VpnAddrT) GetL2VpnAddress() []uint32 {
	if m != nil {
		return m.L2VpnAddress
	}
	return nil
}

type BgpL2VpnMspwAddrT struct {
	L2VpnAddress         []uint32 `protobuf:"varint,1,rep,packed,name=l2vpn_address,json=l2vpnAddress,proto3" json:"l2vpn_address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BgpL2VpnMspwAddrT) Reset()         { *m = BgpL2VpnMspwAddrT{} }
func (m *BgpL2VpnMspwAddrT) String() string { return proto.CompactTextString(m) }
func (*BgpL2VpnMspwAddrT) ProtoMessage()    {}
func (*BgpL2VpnMspwAddrT) Descriptor() ([]byte, []int) {
	return fileDescriptor_f25e9a8ba9c23b14, []int{2}
}

func (m *BgpL2VpnMspwAddrT) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BgpL2VpnMspwAddrT.Unmarshal(m, b)
}
func (m *BgpL2VpnMspwAddrT) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BgpL2VpnMspwAddrT.Marshal(b, m, deterministic)
}
func (m *BgpL2VpnMspwAddrT) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpL2VpnMspwAddrT.Merge(m, src)
}
func (m *BgpL2VpnMspwAddrT) XXX_Size() int {
	return xxx_messageInfo_BgpL2VpnMspwAddrT.Size(m)
}
func (m *BgpL2VpnMspwAddrT) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpL2VpnMspwAddrT.DiscardUnknown(m)
}

var xxx_messageInfo_BgpL2VpnMspwAddrT proto.InternalMessageInfo

func (m *BgpL2VpnMspwAddrT) GetL2VpnAddress() []uint32 {
	if m != nil {
		return m.L2VpnAddress
	}
	return nil
}

type BgpIpv4SrpolicyAddrT struct {
	Ipv4SrpolicyAddress  []uint32 `protobuf:"varint,1,rep,packed,name=ipv4_srpolicy_address,json=ipv4SrpolicyAddress,proto3" json:"ipv4_srpolicy_address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BgpIpv4SrpolicyAddrT) Reset()         { *m = BgpIpv4SrpolicyAddrT{} }
func (m *BgpIpv4SrpolicyAddrT) String() string { return proto.CompactTextString(m) }
func (*BgpIpv4SrpolicyAddrT) ProtoMessage()    {}
func (*BgpIpv4SrpolicyAddrT) Descriptor() ([]byte, []int) {
	return fileDescriptor_f25e9a8ba9c23b14, []int{3}
}

func (m *BgpIpv4SrpolicyAddrT) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BgpIpv4SrpolicyAddrT.Unmarshal(m, b)
}
func (m *BgpIpv4SrpolicyAddrT) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BgpIpv4SrpolicyAddrT.Marshal(b, m, deterministic)
}
func (m *BgpIpv4SrpolicyAddrT) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpIpv4SrpolicyAddrT.Merge(m, src)
}
func (m *BgpIpv4SrpolicyAddrT) XXX_Size() int {
	return xxx_messageInfo_BgpIpv4SrpolicyAddrT.Size(m)
}
func (m *BgpIpv4SrpolicyAddrT) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpIpv4SrpolicyAddrT.DiscardUnknown(m)
}

var xxx_messageInfo_BgpIpv4SrpolicyAddrT proto.InternalMessageInfo

func (m *BgpIpv4SrpolicyAddrT) GetIpv4SrpolicyAddress() []uint32 {
	if m != nil {
		return m.Ipv4SrpolicyAddress
	}
	return nil
}

type BgpIpv6SrpolicyAddrT struct {
	Ipv6SrpolicyAddress  []uint32 `protobuf:"varint,1,rep,packed,name=ipv6_srpolicy_address,json=ipv6SrpolicyAddress,proto3" json:"ipv6_srpolicy_address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BgpIpv6SrpolicyAddrT) Reset()         { *m = BgpIpv6SrpolicyAddrT{} }
func (m *BgpIpv6SrpolicyAddrT) String() string { return proto.CompactTextString(m) }
func (*BgpIpv6SrpolicyAddrT) ProtoMessage()    {}
func (*BgpIpv6SrpolicyAddrT) Descriptor() ([]byte, []int) {
	return fileDescriptor_f25e9a8ba9c23b14, []int{4}
}

func (m *BgpIpv6SrpolicyAddrT) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BgpIpv6SrpolicyAddrT.Unmarshal(m, b)
}
func (m *BgpIpv6SrpolicyAddrT) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BgpIpv6SrpolicyAddrT.Marshal(b, m, deterministic)
}
func (m *BgpIpv6SrpolicyAddrT) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpIpv6SrpolicyAddrT.Merge(m, src)
}
func (m *BgpIpv6SrpolicyAddrT) XXX_Size() int {
	return xxx_messageInfo_BgpIpv6SrpolicyAddrT.Size(m)
}
func (m *BgpIpv6SrpolicyAddrT) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpIpv6SrpolicyAddrT.DiscardUnknown(m)
}

var xxx_messageInfo_BgpIpv6SrpolicyAddrT proto.InternalMessageInfo

func (m *BgpIpv6SrpolicyAddrT) GetIpv6SrpolicyAddress() []uint32 {
	if m != nil {
		return m.Ipv6SrpolicyAddress
	}
	return nil
}

type BgpAddrtype struct {
	Afi                    string                `protobuf:"bytes,1,opt,name=afi,proto3" json:"afi,omitempty"`
	Ipv4Address            string                `protobuf:"bytes,2,opt,name=ipv4_address,json=ipv4Address,proto3" json:"ipv4_address,omitempty"`
	Ipv4McastAddress       string                `protobuf:"bytes,3,opt,name=ipv4_mcast_address,json=ipv4McastAddress,proto3" json:"ipv4_mcast_address,omitempty"`
	Ipv4LabelAddress       string                `protobuf:"bytes,4,opt,name=ipv4_label_address,json=ipv4LabelAddress,proto3" json:"ipv4_label_address,omitempty"`
	Ipv4TunnelAddress      string                `protobuf:"bytes,5,opt,name=ipv4_tunnel_address,json=ipv4TunnelAddress,proto3" json:"ipv4_tunnel_address,omitempty"`
	Ipv4MdtAddress         string                `protobuf:"bytes,6,opt,name=ipv4_mdt_address,json=ipv4MdtAddress,proto3" json:"ipv4_mdt_address,omitempty"`
	Ipv4VpnAddress         string                `protobuf:"bytes,7,opt,name=ipv4vpn_address,json=ipv4vpnAddress,proto3" json:"ipv4vpn_address,omitempty"`
	Ipv4VpnaMcastddress    string                `protobuf:"bytes,8,opt,name=ipv4vpna_mcastddress,json=ipv4vpnaMcastddress,proto3" json:"ipv4vpna_mcastddress,omitempty"`
	Ipv6Address            string                `protobuf:"bytes,9,opt,name=ipv6_address,json=ipv6Address,proto3" json:"ipv6_address,omitempty"`
	Ipv6McastAddress       string                `protobuf:"bytes,10,opt,name=ipv6_mcast_address,json=ipv6McastAddress,proto3" json:"ipv6_mcast_address,omitempty"`
	Ipv6LabelAddress       string                `protobuf:"bytes,11,opt,name=ipv6_label_address,json=ipv6LabelAddress,proto3" json:"ipv6_label_address,omitempty"`
	Ipv6VpnAddress         string                `protobuf:"bytes,12,opt,name=ipv6vpn_address,json=ipv6vpnAddress,proto3" json:"ipv6vpn_address,omitempty"`
	Ipv6VpnMcastAddress    string                `protobuf:"bytes,13,opt,name=ipv6vpn_mcast_address,json=ipv6vpnMcastAddress,proto3" json:"ipv6vpn_mcast_address,omitempty"`
	L2VpnVplsAddress       *BgpL2VpnAddrT        `protobuf:"bytes,14,opt,name=l2vpn_vpls_address,json=l2vpnVplsAddress,proto3" json:"l2vpn_vpls_address,omitempty"`
	RtConstraintAddress    string                `protobuf:"bytes,15,opt,name=rt_constraint_address,json=rtConstraintAddress,proto3" json:"rt_constraint_address,omitempty"`
	Ipv6MvpnAddress        string                `protobuf:"bytes,16,opt,name=ipv6mvpn_address,json=ipv6mvpnAddress,proto3" json:"ipv6mvpn_address,omitempty"`
	Ipv4MvpnAddress        string                `protobuf:"bytes,17,opt,name=ipv4mvpn_address,json=ipv4mvpnAddress,proto3" json:"ipv4mvpn_address,omitempty"`
	L2VpnEvpnAddress       string                `protobuf:"bytes,18,opt,name=l2vpn_evpn_address,json=l2vpnEvpnAddress,proto3" json:"l2vpn_evpn_address,omitempty"`
	LsLsAddress            string                `protobuf:"bytes,19,opt,name=ls_ls_address,json=lsLsAddress,proto3" json:"ls_ls_address,omitempty"`
	L2VpnMspwAddress       *BgpL2VpnMspwAddrT    `protobuf:"bytes,20,opt,name=l2vpn_mspw_address,json=l2vpnMspwAddress,proto3" json:"l2vpn_mspw_address,omitempty"`
	Ipv4FlowspecAddress    string                `protobuf:"bytes,21,opt,name=ipv4_flowspec_address,json=ipv4FlowspecAddress,proto3" json:"ipv4_flowspec_address,omitempty"`
	Ipv6FlowspecAddress    string                `protobuf:"bytes,22,opt,name=ipv6_flowspec_address,json=ipv6FlowspecAddress,proto3" json:"ipv6_flowspec_address,omitempty"`
	Ipv4VpnFlowspecAddress string                `protobuf:"bytes,23,opt,name=ipv4vpn_flowspec_address,json=ipv4vpnFlowspecAddress,proto3" json:"ipv4vpn_flowspec_address,omitempty"`
	Ipv6VpnFlowspecAddress string                `protobuf:"bytes,24,opt,name=ipv6vpn_flowspec_address,json=ipv6vpnFlowspecAddress,proto3" json:"ipv6vpn_flowspec_address,omitempty"`
	Ipv4SrPolicyAddress    *BgpIpv4SrpolicyAddrT `protobuf:"bytes,25,opt,name=ipv4_sr_policy_address,json=ipv4SrPolicyAddress,proto3" json:"ipv4_sr_policy_address,omitempty"`
	Ipv6SrPolicyAddress    *BgpIpv6SrpolicyAddrT `protobuf:"bytes,26,opt,name=ipv6_sr_policy_address,json=ipv6SrPolicyAddress,proto3" json:"ipv6_sr_policy_address,omitempty"`
	XXX_NoUnkeyedLiteral   struct{}              `json:"-"`
	XXX_unrecognized       []byte                `json:"-"`
	XXX_sizecache          int32                 `json:"-"`
}

func (m *BgpAddrtype) Reset()         { *m = BgpAddrtype{} }
func (m *BgpAddrtype) String() string { return proto.CompactTextString(m) }
func (*BgpAddrtype) ProtoMessage()    {}
func (*BgpAddrtype) Descriptor() ([]byte, []int) {
	return fileDescriptor_f25e9a8ba9c23b14, []int{5}
}

func (m *BgpAddrtype) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BgpAddrtype.Unmarshal(m, b)
}
func (m *BgpAddrtype) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BgpAddrtype.Marshal(b, m, deterministic)
}
func (m *BgpAddrtype) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpAddrtype.Merge(m, src)
}
func (m *BgpAddrtype) XXX_Size() int {
	return xxx_messageInfo_BgpAddrtype.Size(m)
}
func (m *BgpAddrtype) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpAddrtype.DiscardUnknown(m)
}

var xxx_messageInfo_BgpAddrtype proto.InternalMessageInfo

func (m *BgpAddrtype) GetAfi() string {
	if m != nil {
		return m.Afi
	}
	return ""
}

func (m *BgpAddrtype) GetIpv4Address() string {
	if m != nil {
		return m.Ipv4Address
	}
	return ""
}

func (m *BgpAddrtype) GetIpv4McastAddress() string {
	if m != nil {
		return m.Ipv4McastAddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv4LabelAddress() string {
	if m != nil {
		return m.Ipv4LabelAddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv4TunnelAddress() string {
	if m != nil {
		return m.Ipv4TunnelAddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv4MdtAddress() string {
	if m != nil {
		return m.Ipv4MdtAddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv4VpnAddress() string {
	if m != nil {
		return m.Ipv4VpnAddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv4VpnaMcastddress() string {
	if m != nil {
		return m.Ipv4VpnaMcastddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv6Address() string {
	if m != nil {
		return m.Ipv6Address
	}
	return ""
}

func (m *BgpAddrtype) GetIpv6McastAddress() string {
	if m != nil {
		return m.Ipv6McastAddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv6LabelAddress() string {
	if m != nil {
		return m.Ipv6LabelAddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv6VpnAddress() string {
	if m != nil {
		return m.Ipv6VpnAddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv6VpnMcastAddress() string {
	if m != nil {
		return m.Ipv6VpnMcastAddress
	}
	return ""
}

func (m *BgpAddrtype) GetL2VpnVplsAddress() *BgpL2VpnAddrT {
	if m != nil {
		return m.L2VpnVplsAddress
	}
	return nil
}

func (m *BgpAddrtype) GetRtConstraintAddress() string {
	if m != nil {
		return m.RtConstraintAddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv6MvpnAddress() string {
	if m != nil {
		return m.Ipv6MvpnAddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv4MvpnAddress() string {
	if m != nil {
		return m.Ipv4MvpnAddress
	}
	return ""
}

func (m *BgpAddrtype) GetL2VpnEvpnAddress() string {
	if m != nil {
		return m.L2VpnEvpnAddress
	}
	return ""
}

func (m *BgpAddrtype) GetLsLsAddress() string {
	if m != nil {
		return m.LsLsAddress
	}
	return ""
}

func (m *BgpAddrtype) GetL2VpnMspwAddress() *BgpL2VpnMspwAddrT {
	if m != nil {
		return m.L2VpnMspwAddress
	}
	return nil
}

func (m *BgpAddrtype) GetIpv4FlowspecAddress() string {
	if m != nil {
		return m.Ipv4FlowspecAddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv6FlowspecAddress() string {
	if m != nil {
		return m.Ipv6FlowspecAddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv4VpnFlowspecAddress() string {
	if m != nil {
		return m.Ipv4VpnFlowspecAddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv6VpnFlowspecAddress() string {
	if m != nil {
		return m.Ipv6VpnFlowspecAddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv4SrPolicyAddress() *BgpIpv4SrpolicyAddrT {
	if m != nil {
		return m.Ipv4SrPolicyAddress
	}
	return nil
}

func (m *BgpAddrtype) GetIpv6SrPolicyAddress() *BgpIpv6SrpolicyAddrT {
	if m != nil {
		return m.Ipv6SrPolicyAddress
	}
	return nil
}

type BgpPerfUpdgrp_ struct {
	UpdateGenerationCalls           uint32   `protobuf:"varint,1,opt,name=update_generation_calls,json=updateGenerationCalls,proto3" json:"update_generation_calls,omitempty"`
	UpdateGenerationPrefixesCount   uint32   `protobuf:"varint,2,opt,name=update_generation_prefixes_count,json=updateGenerationPrefixesCount,proto3" json:"update_generation_prefixes_count,omitempty"`
	UpdateGenerationBePrefixesCount uint32   `protobuf:"varint,3,opt,name=update_generation_be_prefixes_count,json=updateGenerationBePrefixesCount,proto3" json:"update_generation_be_prefixes_count,omitempty"`
	UpdateGenerationMessagesCount   uint32   `protobuf:"varint,4,opt,name=update_generation_messages_count,json=updateGenerationMessagesCount,proto3" json:"update_generation_messages_count,omitempty"`
	UpdateGenerationTime            uint32   `protobuf:"varint,5,opt,name=update_generation_time,json=updateGenerationTime,proto3" json:"update_generation_time,omitempty"`
	UpdgenTimerStartTime            uint64   `protobuf:"varint,6,opt,name=updgen_timer_start_time,json=updgenTimerStartTime,proto3" json:"updgen_timer_start_time,omitempty"`
	UpdgenTimerStopTime             uint64   `protobuf:"varint,7,opt,name=updgen_timer_stop_time,json=updgenTimerStopTime,proto3" json:"updgen_timer_stop_time,omitempty"`
	UpdgenTimerProcessTime          uint64   `protobuf:"varint,8,opt,name=updgen_timer_process_time,json=updgenTimerProcessTime,proto3" json:"updgen_timer_process_time,omitempty"`
	XXX_NoUnkeyedLiteral            struct{} `json:"-"`
	XXX_unrecognized                []byte   `json:"-"`
	XXX_sizecache                   int32    `json:"-"`
}

func (m *BgpPerfUpdgrp_) Reset()         { *m = BgpPerfUpdgrp_{} }
func (m *BgpPerfUpdgrp_) String() string { return proto.CompactTextString(m) }
func (*BgpPerfUpdgrp_) ProtoMessage()    {}
func (*BgpPerfUpdgrp_) Descriptor() ([]byte, []int) {
	return fileDescriptor_f25e9a8ba9c23b14, []int{6}
}

func (m *BgpPerfUpdgrp_) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BgpPerfUpdgrp_.Unmarshal(m, b)
}
func (m *BgpPerfUpdgrp_) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BgpPerfUpdgrp_.Marshal(b, m, deterministic)
}
func (m *BgpPerfUpdgrp_) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpPerfUpdgrp_.Merge(m, src)
}
func (m *BgpPerfUpdgrp_) XXX_Size() int {
	return xxx_messageInfo_BgpPerfUpdgrp_.Size(m)
}
func (m *BgpPerfUpdgrp_) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpPerfUpdgrp_.DiscardUnknown(m)
}

var xxx_messageInfo_BgpPerfUpdgrp_ proto.InternalMessageInfo

func (m *BgpPerfUpdgrp_) GetUpdateGenerationCalls() uint32 {
	if m != nil {
		return m.UpdateGenerationCalls
	}
	return 0
}

func (m *BgpPerfUpdgrp_) GetUpdateGenerationPrefixesCount() uint32 {
	if m != nil {
		return m.UpdateGenerationPrefixesCount
	}
	return 0
}

func (m *BgpPerfUpdgrp_) GetUpdateGenerationBePrefixesCount() uint32 {
	if m != nil {
		return m.UpdateGenerationBePrefixesCount
	}
	return 0
}

func (m *BgpPerfUpdgrp_) GetUpdateGenerationMessagesCount() uint32 {
	if m != nil {
		return m.UpdateGenerationMessagesCount
	}
	return 0
}

func (m *BgpPerfUpdgrp_) GetUpdateGenerationTime() uint32 {
	if m != nil {
		return m.UpdateGenerationTime
	}
	return 0
}

func (m *BgpPerfUpdgrp_) GetUpdgenTimerStartTime() uint64 {
	if m != nil {
		return m.UpdgenTimerStartTime
	}
	return 0
}

func (m *BgpPerfUpdgrp_) GetUpdgenTimerStopTime() uint64 {
	if m != nil {
		return m.UpdgenTimerStopTime
	}
	return 0
}

func (m *BgpPerfUpdgrp_) GetUpdgenTimerProcessTime() uint64 {
	if m != nil {
		return m.UpdgenTimerProcessTime
	}
	return 0
}

type BgpUpdFiltergrp_ struct {
	UpdateFilterGroupNumber         uint32         `protobuf:"varint,1,opt,name=update_filter_group_number,json=updateFilterGroupNumber,proto3" json:"update_filter_group_number,omitempty"`
	Neighbor                        []*BgpAddrtype `protobuf:"bytes,2,rep,name=neighbor,proto3" json:"neighbor,omitempty"`
	Rts                             uint32         `protobuf:"varint,3,opt,name=rts,proto3" json:"rts,omitempty"`
	FgroupFlags                     uint32         `protobuf:"varint,4,opt,name=fgroup_flags,json=fgroupFlags,proto3" json:"fgroup_flags,omitempty"`
	FgroupNeighbors                 uint32         `protobuf:"varint,5,opt,name=fgroup_neighbors,json=fgroupNeighbors,proto3" json:"fgroup_neighbors,omitempty"`
	FgroupCreatedMessageElements    uint32         `protobuf:"varint,6,opt,name=fgroup_created_message_elements,json=fgroupCreatedMessageElements,proto3" json:"fgroup_created_message_elements,omitempty"`
	FgroupDeletedMessageElements    uint32         `protobuf:"varint,7,opt,name=fgroup_deleted_message_elements,json=fgroupDeletedMessageElements,proto3" json:"fgroup_deleted_message_elements,omitempty"`
	FgroupQueuedMessageElements     uint32         `protobuf:"varint,8,opt,name=fgroup_queued_message_elements,json=fgroupQueuedMessageElements,proto3" json:"fgroup_queued_message_elements,omitempty"`
	FgroupAdvertisedPrefixes        uint32         `protobuf:"varint,9,opt,name=fgroup_advertised_prefixes,json=fgroupAdvertisedPrefixes,proto3" json:"fgroup_advertised_prefixes,omitempty"`
	FgroupTotalAdvertisedPrefixes   uint32         `protobuf:"varint,10,opt,name=fgroup_total_advertised_prefixes,json=fgroupTotalAdvertisedPrefixes,proto3" json:"fgroup_total_advertised_prefixes,omitempty"`
	FgroupWithdrawnPrefixes         uint32         `protobuf:"varint,11,opt,name=fgroup_withdrawn_prefixes,json=fgroupWithdrawnPrefixes,proto3" json:"fgroup_withdrawn_prefixes,omitempty"`
	FgroupTotalWithdrawnPrefixes    uint32         `protobuf:"varint,12,opt,name=fgroup_total_withdrawn_prefixes,json=fgroupTotalWithdrawnPrefixes,proto3" json:"fgroup_total_withdrawn_prefixes,omitempty"`
	FgroupTotalNonOptimisedPrefixes uint32         `protobuf:"varint,13,opt,name=fgroup_total_non_optimised_prefixes,json=fgroupTotalNonOptimisedPrefixes,proto3" json:"fgroup_total_non_optimised_prefixes,omitempty"`
	FgroupSkippedPrefixes           uint32         `protobuf:"varint,14,opt,name=fgroup_skipped_prefixes,json=fgroupSkippedPrefixes,proto3" json:"fgroup_skipped_prefixes,omitempty"`
	FgroupSuppressedPrefixes        uint32         `protobuf:"varint,15,opt,name=fgroup_suppressed_prefixes,json=fgroupSuppressedPrefixes,proto3" json:"fgroup_suppressed_prefixes,omitempty"`
	IsRtPresent                     bool           `protobuf:"varint,16,opt,name=is_rt_present,json=isRtPresent,proto3" json:"is_rt_present,omitempty"`
	ExtendedCommunity               []uint32       `protobuf:"varint,17,rep,packed,name=extended_community,json=extendedCommunity,proto3" json:"extended_community,omitempty"`
	XXX_NoUnkeyedLiteral            struct{}       `json:"-"`
	XXX_unrecognized                []byte         `json:"-"`
	XXX_sizecache                   int32          `json:"-"`
}

func (m *BgpUpdFiltergrp_) Reset()         { *m = BgpUpdFiltergrp_{} }
func (m *BgpUpdFiltergrp_) String() string { return proto.CompactTextString(m) }
func (*BgpUpdFiltergrp_) ProtoMessage()    {}
func (*BgpUpdFiltergrp_) Descriptor() ([]byte, []int) {
	return fileDescriptor_f25e9a8ba9c23b14, []int{7}
}

func (m *BgpUpdFiltergrp_) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BgpUpdFiltergrp_.Unmarshal(m, b)
}
func (m *BgpUpdFiltergrp_) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BgpUpdFiltergrp_.Marshal(b, m, deterministic)
}
func (m *BgpUpdFiltergrp_) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpUpdFiltergrp_.Merge(m, src)
}
func (m *BgpUpdFiltergrp_) XXX_Size() int {
	return xxx_messageInfo_BgpUpdFiltergrp_.Size(m)
}
func (m *BgpUpdFiltergrp_) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpUpdFiltergrp_.DiscardUnknown(m)
}

var xxx_messageInfo_BgpUpdFiltergrp_ proto.InternalMessageInfo

func (m *BgpUpdFiltergrp_) GetUpdateFilterGroupNumber() uint32 {
	if m != nil {
		return m.UpdateFilterGroupNumber
	}
	return 0
}

func (m *BgpUpdFiltergrp_) GetNeighbor() []*BgpAddrtype {
	if m != nil {
		return m.Neighbor
	}
	return nil
}

func (m *BgpUpdFiltergrp_) GetRts() uint32 {
	if m != nil {
		return m.Rts
	}
	return 0
}

func (m *BgpUpdFiltergrp_) GetFgroupFlags() uint32 {
	if m != nil {
		return m.FgroupFlags
	}
	return 0
}

func (m *BgpUpdFiltergrp_) GetFgroupNeighbors() uint32 {
	if m != nil {
		return m.FgroupNeighbors
	}
	return 0
}

func (m *BgpUpdFiltergrp_) GetFgroupCreatedMessageElements() uint32 {
	if m != nil {
		return m.FgroupCreatedMessageElements
	}
	return 0
}

func (m *BgpUpdFiltergrp_) GetFgroupDeletedMessageElements() uint32 {
	if m != nil {
		return m.FgroupDeletedMessageElements
	}
	return 0
}

func (m *BgpUpdFiltergrp_) GetFgroupQueuedMessageElements() uint32 {
	if m != nil {
		return m.FgroupQueuedMessageElements
	}
	return 0
}

func (m *BgpUpdFiltergrp_) GetFgroupAdvertisedPrefixes() uint32 {
	if m != nil {
		return m.FgroupAdvertisedPrefixes
	}
	return 0
}

func (m *BgpUpdFiltergrp_) GetFgroupTotalAdvertisedPrefixes() uint32 {
	if m != nil {
		return m.FgroupTotalAdvertisedPrefixes
	}
	return 0
}

func (m *BgpUpdFiltergrp_) GetFgroupWithdrawnPrefixes() uint32 {
	if m != nil {
		return m.FgroupWithdrawnPrefixes
	}
	return 0
}

func (m *BgpUpdFiltergrp_) GetFgroupTotalWithdrawnPrefixes() uint32 {
	if m != nil {
		return m.FgroupTotalWithdrawnPrefixes
	}
	return 0
}

func (m *BgpUpdFiltergrp_) GetFgroupTotalNonOptimisedPrefixes() uint32 {
	if m != nil {
		return m.FgroupTotalNonOptimisedPrefixes
	}
	return 0
}

func (m *BgpUpdFiltergrp_) GetFgroupSkippedPrefixes() uint32 {
	if m != nil {
		return m.FgroupSkippedPrefixes
	}
	return 0
}

func (m *BgpUpdFiltergrp_) GetFgroupSuppressedPrefixes() uint32 {
	if m != nil {
		return m.FgroupSuppressedPrefixes
	}
	return 0
}

func (m *BgpUpdFiltergrp_) GetIsRtPresent() bool {
	if m != nil {
		return m.IsRtPresent
	}
	return false
}

func (m *BgpUpdFiltergrp_) GetExtendedCommunity() []uint32 {
	if m != nil {
		return m.ExtendedCommunity
	}
	return nil
}

type BgpUpdSubgrp_ struct {
	UpdateSubGroupNumber uint32              `protobuf:"varint,1,opt,name=update_sub_group_number,json=updateSubGroupNumber,proto3" json:"update_sub_group_number,omitempty"`
	FilterGroup          uint32              `protobuf:"varint,2,opt,name=filter_group,json=filterGroup,proto3" json:"filter_group,omitempty"`
	WaitForEoRs          bool                `protobuf:"varint,3,opt,name=wait_for_eo_rs,json=waitForEoRs,proto3" json:"wait_for_eo_rs,omitempty"`
	UpdateFilterGroup    []*BgpUpdFiltergrp_ `protobuf:"bytes,4,rep,name=update_filter_group,json=updateFilterGroup,proto3" json:"update_filter_group,omitempty"`
	Neighbor             []*BgpAddrtype      `protobuf:"bytes,5,rep,name=neighbor,proto3" json:"neighbor,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *BgpUpdSubgrp_) Reset()         { *m = BgpUpdSubgrp_{} }
func (m *BgpUpdSubgrp_) String() string { return proto.CompactTextString(m) }
func (*BgpUpdSubgrp_) ProtoMessage()    {}
func (*BgpUpdSubgrp_) Descriptor() ([]byte, []int) {
	return fileDescriptor_f25e9a8ba9c23b14, []int{8}
}

func (m *BgpUpdSubgrp_) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BgpUpdSubgrp_.Unmarshal(m, b)
}
func (m *BgpUpdSubgrp_) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BgpUpdSubgrp_.Marshal(b, m, deterministic)
}
func (m *BgpUpdSubgrp_) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpUpdSubgrp_.Merge(m, src)
}
func (m *BgpUpdSubgrp_) XXX_Size() int {
	return xxx_messageInfo_BgpUpdSubgrp_.Size(m)
}
func (m *BgpUpdSubgrp_) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpUpdSubgrp_.DiscardUnknown(m)
}

var xxx_messageInfo_BgpUpdSubgrp_ proto.InternalMessageInfo

func (m *BgpUpdSubgrp_) GetUpdateSubGroupNumber() uint32 {
	if m != nil {
		return m.UpdateSubGroupNumber
	}
	return 0
}

func (m *BgpUpdSubgrp_) GetFilterGroup() uint32 {
	if m != nil {
		return m.FilterGroup
	}
	return 0
}

func (m *BgpUpdSubgrp_) GetWaitForEoRs() bool {
	if m != nil {
		return m.WaitForEoRs
	}
	return false
}

func (m *BgpUpdSubgrp_) GetUpdateFilterGroup() []*BgpUpdFiltergrp_ {
	if m != nil {
		return m.UpdateFilterGroup
	}
	return nil
}

func (m *BgpUpdSubgrp_) GetNeighbor() []*BgpAddrtype {
	if m != nil {
		return m.Neighbor
	}
	return nil
}

type BgpUpdgrpBag struct {
	ProcessInstanceId                 uint32           `protobuf:"varint,50,opt,name=process_instance_id,json=processInstanceId,proto3" json:"process_instance_id,omitempty"`
	SessionAfName                     uint32           `protobuf:"varint,51,opt,name=session_af_name,json=sessionAfName,proto3" json:"session_af_name,omitempty"`
	UpdateGroupNumber                 uint32           `protobuf:"varint,52,opt,name=update_group_number,json=updateGroupNumber,proto3" json:"update_group_number,omitempty"`
	UpdateGroupAfName                 string           `protobuf:"bytes,53,opt,name=update_group_af_name,json=updateGroupAfName,proto3" json:"update_group_af_name,omitempty"`
	ShouldSendCommunities             bool             `protobuf:"varint,54,opt,name=should_send_communities,json=shouldSendCommunities,proto3" json:"should_send_communities,omitempty"`
	ShouldSendExtCommunities          bool             `protobuf:"varint,55,opt,name=should_send_ext_communities,json=shouldSendExtCommunities,proto3" json:"should_send_ext_communities,omitempty"`
	ShouldSendStitchingRt             bool             `protobuf:"varint,56,opt,name=should_send_stitching_rt,json=shouldSendStitchingRt,proto3" json:"should_send_stitching_rt,omitempty"`
	HasOrfReceiveCapability           bool             `protobuf:"varint,57,opt,name=has_orf_receive_capability,json=hasOrfReceiveCapability,proto3" json:"has_orf_receive_capability,omitempty"`
	IsRouteReflectorClient            bool             `protobuf:"varint,58,opt,name=is_route_reflector_client,json=isRouteReflectorClient,proto3" json:"is_route_reflector_client,omitempty"`
	IsClientReflectionDisabled        bool             `protobuf:"varint,59,opt,name=is_client_reflection_disabled,json=isClientReflectionDisabled,proto3" json:"is_client_reflection_disabled,omitempty"`
	AcceptsLegacyPeRtRoute            bool             `protobuf:"varint,60,opt,name=accepts_legacy_pe_rt_route,json=acceptsLegacyPeRtRoute,proto3" json:"accepts_legacy_pe_rt_route,omitempty"`
	UpdgrpClusterId                   uint32           `protobuf:"varint,61,opt,name=updgrp_cluster_id,json=updgrpClusterId,proto3" json:"updgrp_cluster_id,omitempty"`
	UpdgrpClusterType                 uint32           `protobuf:"varint,62,opt,name=updgrp_cluster_type,json=updgrpClusterType,proto3" json:"updgrp_cluster_type,omitempty"`
	OrrGroupName                      string           `protobuf:"bytes,63,opt,name=orr_group_name,json=orrGroupName,proto3" json:"orr_group_name,omitempty"`
	OrrGroupIndex                     uint32           `protobuf:"varint,64,opt,name=orr_group_index,json=orrGroupIndex,proto3" json:"orr_group_index,omitempty"`
	IsOrrRootAddressConfigured        bool             `protobuf:"varint,65,opt,name=is_orr_root_address_configured,json=isOrrRootAddressConfigured,proto3" json:"is_orr_root_address_configured,omitempty"`
	ShouldRemovePrivateASs            bool             `protobuf:"varint,66,opt,name=should_remove_private_a_ss,json=shouldRemovePrivateASs,proto3" json:"should_remove_private_a_ss,omitempty"`
	ShouldRemovePrivateAsEntPath      bool             `protobuf:"varint,67,opt,name=should_remove_private_as_ent_path,json=shouldRemovePrivateAsEntPath,proto3" json:"should_remove_private_as_ent_path,omitempty"`
	UseNextHopSelf                    bool             `protobuf:"varint,68,opt,name=use_next_hop_self,json=useNextHopSelf,proto3" json:"use_next_hop_self,omitempty"`
	UseNextHopUnchangedMpath          bool             `protobuf:"varint,69,opt,name=use_next_hop_unchanged_mpath,json=useNextHopUnchangedMpath,proto3" json:"use_next_hop_unchanged_mpath,omitempty"`
	IsInternalPeers                   bool             `protobuf:"varint,70,opt,name=is_internal_peers,json=isInternalPeers,proto3" json:"is_internal_peers,omitempty"`
	IsCommonAdminPeers                bool             `protobuf:"varint,71,opt,name=is_common_admin_peers,json=isCommonAdminPeers,proto3" json:"is_common_admin_peers,omitempty"`
	Is4ByteAsPeer                     bool             `protobuf:"varint,72,opt,name=is4_byte_as_peer,json=is4ByteAsPeer,proto3" json:"is4_byte_as_peer,omitempty"`
	IsAddpathCapable                  bool             `protobuf:"varint,73,opt,name=is_addpath_capable,json=isAddpathCapable,proto3" json:"is_addpath_capable,omitempty"`
	IsSendMcastAttrEnabled            bool             `protobuf:"varint,74,opt,name=is_send_mcast_attr_enabled,json=isSendMcastAttrEnabled,proto3" json:"is_send_mcast_attr_enabled,omitempty"`
	IsAigpCapable                     bool             `protobuf:"varint,75,opt,name=is_aigp_capable,json=isAigpCapable,proto3" json:"is_aigp_capable,omitempty"`
	IsAigpCostCommunityCapable        bool             `protobuf:"varint,76,opt,name=is_aigp_cost_community_capable,json=isAigpCostCommunityCapable,proto3" json:"is_aigp_cost_community_capable,omitempty"`
	IsAigpMedCapable                  bool             `protobuf:"varint,77,opt,name=is_aigp_med_capable,json=isAigpMedCapable,proto3" json:"is_aigp_med_capable,omitempty"`
	IsLlgrCapable                     bool             `protobuf:"varint,78,opt,name=is_llgr_capable,json=isLlgrCapable,proto3" json:"is_llgr_capable,omitempty"`
	IsAdvCapable                      bool             `protobuf:"varint,79,opt,name=is_adv_capable,json=isAdvCapable,proto3" json:"is_adv_capable,omitempty"`
	IsAdvReorgCapable                 bool             `protobuf:"varint,80,opt,name=is_adv_reorg_capable,json=isAdvReorgCapable,proto3" json:"is_adv_reorg_capable,omitempty"`
	DisableNativeAdvertisement        bool             `protobuf:"varint,81,opt,name=disable_native_advertisement,json=disableNativeAdvertisement,proto3" json:"disable_native_advertisement,omitempty"`
	DisableDefVrfImpAdvertisement     bool             `protobuf:"varint,82,opt,name=disable_def_vrf_imp_advertisement,json=disableDefVrfImpAdvertisement,proto3" json:"disable_def_vrf_imp_advertisement,omitempty"`
	DisableVrfReImpAdvertisement      bool             `protobuf:"varint,83,opt,name=disable_vrf_re_imp_advertisement,json=disableVrfReImpAdvertisement,proto3" json:"disable_vrf_re_imp_advertisement,omitempty"`
	EncapsulationType                 uint32           `protobuf:"varint,84,opt,name=encapsulation_type,json=encapsulationType,proto3" json:"encapsulation_type,omitempty"`
	AdvertiseRtType                   uint32           `protobuf:"varint,85,opt,name=advertise_rt_type,json=advertiseRtType,proto3" json:"advertise_rt_type,omitempty"`
	IsDirectlyConnectedEbgpV6Peers    bool             `protobuf:"varint,86,opt,name=is_directly_connected_ebgp_v6_peers,json=isDirectlyConnectedEbgpV6Peers,proto3" json:"is_directly_connected_ebgp_v6_peers,omitempty"`
	MinimumAdvertisementInterval      uint32           `protobuf:"varint,87,opt,name=minimum_advertisement_interval,json=minimumAdvertisementInterval,proto3" json:"minimum_advertisement_interval,omitempty"`
	MinimumAdvertisementIntervalMsecs uint32           `protobuf:"varint,88,opt,name=minimum_advertisement_interval_msecs,json=minimumAdvertisementIntervalMsecs,proto3" json:"minimum_advertisement_interval_msecs,omitempty"`
	LocalAs                           uint32           `protobuf:"varint,89,opt,name=local_as,json=localAs,proto3" json:"local_as,omitempty"`
	RoutePolicyOut                    string           `protobuf:"bytes,90,opt,name=route_policy_out,json=routePolicyOut,proto3" json:"route_policy_out,omitempty"`
	DesyncCount                       uint32           `protobuf:"varint,91,opt,name=desync_count,json=desyncCount,proto3" json:"desync_count,omitempty"`
	SubgrpMergeCount                  uint32           `protobuf:"varint,92,opt,name=subgrp_merge_count,json=subgrpMergeCount,proto3" json:"subgrp_merge_count,omitempty"`
	RefreshSubgrpCount                uint32           `protobuf:"varint,93,opt,name=refresh_subgrp_count,json=refreshSubgrpCount,proto3" json:"refresh_subgrp_count,omitempty"`
	UpdatesFormatted                  uint32           `protobuf:"varint,94,opt,name=updates_formatted,json=updatesFormatted,proto3" json:"updates_formatted,omitempty"`
	UpdatesReplicated                 uint32           `protobuf:"varint,95,opt,name=updates_replicated,json=updatesReplicated,proto3" json:"updates_replicated,omitempty"`
	Neighbor                          []*BgpAddrtype   `protobuf:"bytes,96,rep,name=neighbor,proto3" json:"neighbor,omitempty"`
	PerformanceStatistics             *BgpPerfUpdgrp_  `protobuf:"bytes,97,opt,name=performance_statistics,json=performanceStatistics,proto3" json:"performance_statistics,omitempty"`
	UpdateSubGroup                    []*BgpUpdSubgrp_ `protobuf:"bytes,98,rep,name=update_sub_group,json=updateSubGroup,proto3" json:"update_sub_group,omitempty"`
	LocalAsReplaceAs                  bool             `protobuf:"varint,99,opt,name=local_as_replace_as,json=localAsReplaceAs,proto3" json:"local_as_replace_as,omitempty"`
	AsOverride                        bool             `protobuf:"varint,100,opt,name=as_override,json=asOverride,proto3" json:"as_override,omitempty"`
	SooValue                          string           `protobuf:"bytes,101,opt,name=soo_value,json=sooValue,proto3" json:"soo_value,omitempty"`
	SplitHorizon                      bool             `protobuf:"varint,102,opt,name=split_horizon,json=splitHorizon,proto3" json:"split_horizon,omitempty"`
	IsLabeledAfiEnabled               bool             `protobuf:"varint,103,opt,name=is_labeled_afi_enabled,json=isLabeledAfiEnabled,proto3" json:"is_labeled_afi_enabled,omitempty"`
	IsUnlabeledAfiEnabled             bool             `protobuf:"varint,104,opt,name=is_unlabeled_afi_enabled,json=isUnlabeledAfiEnabled,proto3" json:"is_unlabeled_afi_enabled,omitempty"`
	ExtNhEncoding                     bool             `protobuf:"varint,105,opt,name=ext_nh_encoding,json=extNhEncoding,proto3" json:"ext_nh_encoding,omitempty"`
	RemoteAs                          uint32           `protobuf:"varint,106,opt,name=remote_as,json=remoteAs,proto3" json:"remote_as,omitempty"`
	IsAdvPermNetCapable               bool             `protobuf:"varint,107,opt,name=is_adv_perm_net_capable,json=isAdvPermNetCapable,proto3" json:"is_adv_perm_net_capable,omitempty"`
	ShouldSendGshutCommunity          bool             `protobuf:"varint,108,opt,name=should_send_gshut_community,json=shouldSendGshutCommunity,proto3" json:"should_send_gshut_community,omitempty"`
	GshutActive                       bool             `protobuf:"varint,109,opt,name=gshut_active,json=gshutActive,proto3" json:"gshut_active,omitempty"`
	GshutLocprefSet                   bool             `protobuf:"varint,110,opt,name=gshut_locpref_set,json=gshutLocprefSet,proto3" json:"gshut_locpref_set,omitempty"`
	GshutLocpref                      uint32           `protobuf:"varint,111,opt,name=gshut_locpref,json=gshutLocpref,proto3" json:"gshut_locpref,omitempty"`
	GshutPrepends                     uint32           `protobuf:"varint,112,opt,name=gshut_prepends,json=gshutPrepends,proto3" json:"gshut_prepends,omitempty"`
	AdvertiseLocalLabeledRouteUnicast bool             `protobuf:"varint,113,opt,name=advertise_local_labeled_route_unicast,json=advertiseLocalLabeledRouteUnicast,proto3" json:"advertise_local_labeled_route_unicast,omitempty"`
	EnableLabelStack                  bool             `protobuf:"varint,114,opt,name=enable_label_stack,json=enableLabelStack,proto3" json:"enable_label_stack,omitempty"`
	XXX_NoUnkeyedLiteral              struct{}         `json:"-"`
	XXX_unrecognized                  []byte           `json:"-"`
	XXX_sizecache                     int32            `json:"-"`
}

func (m *BgpUpdgrpBag) Reset()         { *m = BgpUpdgrpBag{} }
func (m *BgpUpdgrpBag) String() string { return proto.CompactTextString(m) }
func (*BgpUpdgrpBag) ProtoMessage()    {}
func (*BgpUpdgrpBag) Descriptor() ([]byte, []int) {
	return fileDescriptor_f25e9a8ba9c23b14, []int{9}
}

func (m *BgpUpdgrpBag) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BgpUpdgrpBag.Unmarshal(m, b)
}
func (m *BgpUpdgrpBag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BgpUpdgrpBag.Marshal(b, m, deterministic)
}
func (m *BgpUpdgrpBag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpUpdgrpBag.Merge(m, src)
}
func (m *BgpUpdgrpBag) XXX_Size() int {
	return xxx_messageInfo_BgpUpdgrpBag.Size(m)
}
func (m *BgpUpdgrpBag) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpUpdgrpBag.DiscardUnknown(m)
}

var xxx_messageInfo_BgpUpdgrpBag proto.InternalMessageInfo

func (m *BgpUpdgrpBag) GetProcessInstanceId() uint32 {
	if m != nil {
		return m.ProcessInstanceId
	}
	return 0
}

func (m *BgpUpdgrpBag) GetSessionAfName() uint32 {
	if m != nil {
		return m.SessionAfName
	}
	return 0
}

func (m *BgpUpdgrpBag) GetUpdateGroupNumber() uint32 {
	if m != nil {
		return m.UpdateGroupNumber
	}
	return 0
}

func (m *BgpUpdgrpBag) GetUpdateGroupAfName() string {
	if m != nil {
		return m.UpdateGroupAfName
	}
	return ""
}

func (m *BgpUpdgrpBag) GetShouldSendCommunities() bool {
	if m != nil {
		return m.ShouldSendCommunities
	}
	return false
}

func (m *BgpUpdgrpBag) GetShouldSendExtCommunities() bool {
	if m != nil {
		return m.ShouldSendExtCommunities
	}
	return false
}

func (m *BgpUpdgrpBag) GetShouldSendStitchingRt() bool {
	if m != nil {
		return m.ShouldSendStitchingRt
	}
	return false
}

func (m *BgpUpdgrpBag) GetHasOrfReceiveCapability() bool {
	if m != nil {
		return m.HasOrfReceiveCapability
	}
	return false
}

func (m *BgpUpdgrpBag) GetIsRouteReflectorClient() bool {
	if m != nil {
		return m.IsRouteReflectorClient
	}
	return false
}

func (m *BgpUpdgrpBag) GetIsClientReflectionDisabled() bool {
	if m != nil {
		return m.IsClientReflectionDisabled
	}
	return false
}

func (m *BgpUpdgrpBag) GetAcceptsLegacyPeRtRoute() bool {
	if m != nil {
		return m.AcceptsLegacyPeRtRoute
	}
	return false
}

func (m *BgpUpdgrpBag) GetUpdgrpClusterId() uint32 {
	if m != nil {
		return m.UpdgrpClusterId
	}
	return 0
}

func (m *BgpUpdgrpBag) GetUpdgrpClusterType() uint32 {
	if m != nil {
		return m.UpdgrpClusterType
	}
	return 0
}

func (m *BgpUpdgrpBag) GetOrrGroupName() string {
	if m != nil {
		return m.OrrGroupName
	}
	return ""
}

func (m *BgpUpdgrpBag) GetOrrGroupIndex() uint32 {
	if m != nil {
		return m.OrrGroupIndex
	}
	return 0
}

func (m *BgpUpdgrpBag) GetIsOrrRootAddressConfigured() bool {
	if m != nil {
		return m.IsOrrRootAddressConfigured
	}
	return false
}

func (m *BgpUpdgrpBag) GetShouldRemovePrivateASs() bool {
	if m != nil {
		return m.ShouldRemovePrivateASs
	}
	return false
}

func (m *BgpUpdgrpBag) GetShouldRemovePrivateAsEntPath() bool {
	if m != nil {
		return m.ShouldRemovePrivateAsEntPath
	}
	return false
}

func (m *BgpUpdgrpBag) GetUseNextHopSelf() bool {
	if m != nil {
		return m.UseNextHopSelf
	}
	return false
}

func (m *BgpUpdgrpBag) GetUseNextHopUnchangedMpath() bool {
	if m != nil {
		return m.UseNextHopUnchangedMpath
	}
	return false
}

func (m *BgpUpdgrpBag) GetIsInternalPeers() bool {
	if m != nil {
		return m.IsInternalPeers
	}
	return false
}

func (m *BgpUpdgrpBag) GetIsCommonAdminPeers() bool {
	if m != nil {
		return m.IsCommonAdminPeers
	}
	return false
}

func (m *BgpUpdgrpBag) GetIs4ByteAsPeer() bool {
	if m != nil {
		return m.Is4ByteAsPeer
	}
	return false
}

func (m *BgpUpdgrpBag) GetIsAddpathCapable() bool {
	if m != nil {
		return m.IsAddpathCapable
	}
	return false
}

func (m *BgpUpdgrpBag) GetIsSendMcastAttrEnabled() bool {
	if m != nil {
		return m.IsSendMcastAttrEnabled
	}
	return false
}

func (m *BgpUpdgrpBag) GetIsAigpCapable() bool {
	if m != nil {
		return m.IsAigpCapable
	}
	return false
}

func (m *BgpUpdgrpBag) GetIsAigpCostCommunityCapable() bool {
	if m != nil {
		return m.IsAigpCostCommunityCapable
	}
	return false
}

func (m *BgpUpdgrpBag) GetIsAigpMedCapable() bool {
	if m != nil {
		return m.IsAigpMedCapable
	}
	return false
}

func (m *BgpUpdgrpBag) GetIsLlgrCapable() bool {
	if m != nil {
		return m.IsLlgrCapable
	}
	return false
}

func (m *BgpUpdgrpBag) GetIsAdvCapable() bool {
	if m != nil {
		return m.IsAdvCapable
	}
	return false
}

func (m *BgpUpdgrpBag) GetIsAdvReorgCapable() bool {
	if m != nil {
		return m.IsAdvReorgCapable
	}
	return false
}

func (m *BgpUpdgrpBag) GetDisableNativeAdvertisement() bool {
	if m != nil {
		return m.DisableNativeAdvertisement
	}
	return false
}

func (m *BgpUpdgrpBag) GetDisableDefVrfImpAdvertisement() bool {
	if m != nil {
		return m.DisableDefVrfImpAdvertisement
	}
	return false
}

func (m *BgpUpdgrpBag) GetDisableVrfReImpAdvertisement() bool {
	if m != nil {
		return m.DisableVrfReImpAdvertisement
	}
	return false
}

func (m *BgpUpdgrpBag) GetEncapsulationType() uint32 {
	if m != nil {
		return m.EncapsulationType
	}
	return 0
}

func (m *BgpUpdgrpBag) GetAdvertiseRtType() uint32 {
	if m != nil {
		return m.AdvertiseRtType
	}
	return 0
}

func (m *BgpUpdgrpBag) GetIsDirectlyConnectedEbgpV6Peers() bool {
	if m != nil {
		return m.IsDirectlyConnectedEbgpV6Peers
	}
	return false
}

func (m *BgpUpdgrpBag) GetMinimumAdvertisementInterval() uint32 {
	if m != nil {
		return m.MinimumAdvertisementInterval
	}
	return 0
}

func (m *BgpUpdgrpBag) GetMinimumAdvertisementIntervalMsecs() uint32 {
	if m != nil {
		return m.MinimumAdvertisementIntervalMsecs
	}
	return 0
}

func (m *BgpUpdgrpBag) GetLocalAs() uint32 {
	if m != nil {
		return m.LocalAs
	}
	return 0
}

func (m *BgpUpdgrpBag) GetRoutePolicyOut() string {
	if m != nil {
		return m.RoutePolicyOut
	}
	return ""
}

func (m *BgpUpdgrpBag) GetDesyncCount() uint32 {
	if m != nil {
		return m.DesyncCount
	}
	return 0
}

func (m *BgpUpdgrpBag) GetSubgrpMergeCount() uint32 {
	if m != nil {
		return m.SubgrpMergeCount
	}
	return 0
}

func (m *BgpUpdgrpBag) GetRefreshSubgrpCount() uint32 {
	if m != nil {
		return m.RefreshSubgrpCount
	}
	return 0
}

func (m *BgpUpdgrpBag) GetUpdatesFormatted() uint32 {
	if m != nil {
		return m.UpdatesFormatted
	}
	return 0
}

func (m *BgpUpdgrpBag) GetUpdatesReplicated() uint32 {
	if m != nil {
		return m.UpdatesReplicated
	}
	return 0
}

func (m *BgpUpdgrpBag) GetNeighbor() []*BgpAddrtype {
	if m != nil {
		return m.Neighbor
	}
	return nil
}

func (m *BgpUpdgrpBag) GetPerformanceStatistics() *BgpPerfUpdgrp_ {
	if m != nil {
		return m.PerformanceStatistics
	}
	return nil
}

func (m *BgpUpdgrpBag) GetUpdateSubGroup() []*BgpUpdSubgrp_ {
	if m != nil {
		return m.UpdateSubGroup
	}
	return nil
}

func (m *BgpUpdgrpBag) GetLocalAsReplaceAs() bool {
	if m != nil {
		return m.LocalAsReplaceAs
	}
	return false
}

func (m *BgpUpdgrpBag) GetAsOverride() bool {
	if m != nil {
		return m.AsOverride
	}
	return false
}

func (m *BgpUpdgrpBag) GetSooValue() string {
	if m != nil {
		return m.SooValue
	}
	return ""
}

func (m *BgpUpdgrpBag) GetSplitHorizon() bool {
	if m != nil {
		return m.SplitHorizon
	}
	return false
}

func (m *BgpUpdgrpBag) GetIsLabeledAfiEnabled() bool {
	if m != nil {
		return m.IsLabeledAfiEnabled
	}
	return false
}

func (m *BgpUpdgrpBag) GetIsUnlabeledAfiEnabled() bool {
	if m != nil {
		return m.IsUnlabeledAfiEnabled
	}
	return false
}

func (m *BgpUpdgrpBag) GetExtNhEncoding() bool {
	if m != nil {
		return m.ExtNhEncoding
	}
	return false
}

func (m *BgpUpdgrpBag) GetRemoteAs() uint32 {
	if m != nil {
		return m.RemoteAs
	}
	return 0
}

func (m *BgpUpdgrpBag) GetIsAdvPermNetCapable() bool {
	if m != nil {
		return m.IsAdvPermNetCapable
	}
	return false
}

func (m *BgpUpdgrpBag) GetShouldSendGshutCommunity() bool {
	if m != nil {
		return m.ShouldSendGshutCommunity
	}
	return false
}

func (m *BgpUpdgrpBag) GetGshutActive() bool {
	if m != nil {
		return m.GshutActive
	}
	return false
}

func (m *BgpUpdgrpBag) GetGshutLocprefSet() bool {
	if m != nil {
		return m.GshutLocprefSet
	}
	return false
}

func (m *BgpUpdgrpBag) GetGshutLocpref() uint32 {
	if m != nil {
		return m.GshutLocpref
	}
	return 0
}

func (m *BgpUpdgrpBag) GetGshutPrepends() uint32 {
	if m != nil {
		return m.GshutPrepends
	}
	return 0
}

func (m *BgpUpdgrpBag) GetAdvertiseLocalLabeledRouteUnicast() bool {
	if m != nil {
		return m.AdvertiseLocalLabeledRouteUnicast
	}
	return false
}

func (m *BgpUpdgrpBag) GetEnableLabelStack() bool {
	if m != nil {
		return m.EnableLabelStack
	}
	return false
}

func init() {
	proto.RegisterType((*BgpUpdgrpBag_KEYS)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.default_vrf.afs.af.update_groups.update_group.bgp_updgrp_bag_KEYS")
	proto.RegisterType((*BgpL2VpnAddrT)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.default_vrf.afs.af.update_groups.update_group.bgp_l2vpn_addr_t")
	proto.RegisterType((*BgpL2VpnMspwAddrT)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.default_vrf.afs.af.update_groups.update_group.bgp_l2vpn_mspw_addr_t")
	proto.RegisterType((*BgpIpv4SrpolicyAddrT)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.default_vrf.afs.af.update_groups.update_group.bgp_ipv4_srpolicy_addr_t")
	proto.RegisterType((*BgpIpv6SrpolicyAddrT)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.default_vrf.afs.af.update_groups.update_group.bgp_ipv6_srpolicy_addr_t")
	proto.RegisterType((*BgpAddrtype)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.default_vrf.afs.af.update_groups.update_group.bgp_addrtype")
	proto.RegisterType((*BgpPerfUpdgrp_)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.default_vrf.afs.af.update_groups.update_group.bgp_perf_updgrp_")
	proto.RegisterType((*BgpUpdFiltergrp_)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.default_vrf.afs.af.update_groups.update_group.bgp_upd_filtergrp_")
	proto.RegisterType((*BgpUpdSubgrp_)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.default_vrf.afs.af.update_groups.update_group.bgp_upd_subgrp_")
	proto.RegisterType((*BgpUpdgrpBag)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.default_vrf.afs.af.update_groups.update_group.bgp_updgrp_bag")
}

func init() { proto.RegisterFile("bgp_updgrp_bag.proto", fileDescriptor_f25e9a8ba9c23b14) }

var fileDescriptor_f25e9a8ba9c23b14 = []byte{
	// 2779 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x59, 0x4b, 0x73, 0x1c, 0xb7,
	0xf1, 0x2f, 0x5a, 0xb2, 0x45, 0x83, 0x5c, 0x3e, 0x86, 0x22, 0x39, 0x92, 0x65, 0x99, 0xa2, 0xfc,
	0x90, 0xfd, 0xb7, 0xe9, 0xbf, 0x25, 0x7a, 0xe5, 0x77, 0xbc, 0x5a, 0x91, 0x12, 0x63, 0xbe, 0x3c,
	0x2b, 0xc9, 0x71, 0x5e, 0xc8, 0xec, 0x0c, 0x66, 0x17, 0xf1, 0xbc, 0x0c, 0x60, 0x56, 0x64, 0x0e,
	0xa9, 0x4a, 0x2a, 0x55, 0xae, 0xca, 0x47, 0xc8, 0x35, 0xd7, 0x5c, 0x72, 0x48, 0x0e, 0x39, 0xa5,
	0xf2, 0x39, 0x72, 0xcd, 0x39, 0x5f, 0x21, 0xd5, 0x68, 0x00, 0x3b, 0xb3, 0x5c, 0xbb, 0x2a, 0x97,
	0xd0, 0x27, 0x71, 0xbb, 0x7f, 0xbf, 0xdf, 0xe0, 0xd1, 0xe8, 0x6e, 0x40, 0xe4, 0x72, 0x7f, 0x50,
	0xd2, 0xaa, 0x8c, 0x07, 0xa2, 0xa4, 0xfd, 0x70, 0xb0, 0x55, 0x8a, 0x42, 0x15, 0x5e, 0x19, 0x71,
	0x19, 0x15, 0x94, 0x17, 0x92, 0x9e, 0x08, 0xca, 0xcb, 0xd1, 0x36, 0x05, 0x5c, 0x51, 0x32, 0xb1,
	0xd5, 0x1f, 0x94, 0x5b, 0x3c, 0x97, 0x2a, 0xcc, 0x23, 0x26, 0xdd, 0x5f, 0xee, 0x0f, 0x0a, 0xff,
	0xc4, 0xfd, 0xd3, 0xad, 0x98, 0x25, 0x61, 0x95, 0x2a, 0x3a, 0x12, 0xc9, 0x56, 0x98, 0xc8, 0xad,
	0x30, 0xd9, 0xaa, 0xca, 0x38, 0x54, 0x8c, 0x0e, 0x44, 0x51, 0x95, 0xb2, 0xf1, 0x6b, 0xf3, 0x8f,
	0x33, 0x64, 0xa5, 0x39, 0x14, 0xfa, 0xd9, 0xce, 0x97, 0x3d, 0xef, 0x26, 0x69, 0x39, 0xe5, 0x3c,
	0xcc, 0x98, 0x3f, 0xb3, 0x31, 0x73, 0xeb, 0xf9, 0x60, 0xde, 0x1a, 0x0f, 0xc3, 0x8c, 0x79, 0xeb,
	0xe4, 0x52, 0x98, 0xa0, 0xfb, 0x19, 0xed, 0x7e, 0x2e, 0x4c, 0xb4, 0xe3, 0x55, 0xb2, 0x58, 0xff,
	0x0a, 0xe5, 0xb1, 0x7f, 0x61, 0x63, 0xe6, 0x56, 0x2b, 0x68, 0xa1, 0xf9, 0x01, 0x58, 0xf7, 0x62,
	0xc0, 0x25, 0x3c, 0x55, 0x4c, 0x8c, 0x71, 0x17, 0x11, 0x87, 0x66, 0x83, 0xdb, 0xbc, 0x4b, 0x96,
	0x60, 0x90, 0xe9, 0xed, 0x51, 0x99, 0xd3, 0x30, 0x8e, 0x05, 0x55, 0x30, 0xc2, 0xf1, 0x6f, 0x26,
	0xa5, 0x3f, 0xb3, 0x71, 0xe1, 0x56, 0x2b, 0x98, 0xd7, 0xc6, 0x0e, 0xda, 0x36, 0x3f, 0x22, 0xab,
	0x63, 0x62, 0x26, 0xcb, 0xa7, 0xff, 0x15, 0xfb, 0x90, 0xf8, 0xc0, 0xd6, 0xfb, 0x20, 0x45, 0x59,
	0xa4, 0x3c, 0x3a, 0xb5, 0x02, 0xb7, 0xc9, 0xea, 0x59, 0xfb, 0x58, 0x68, 0x05, 0x9c, 0x3d, 0xe3,
	0x3b, 0xab, 0xd7, 0xfe, 0x16, 0xbd, 0xf6, 0x77, 0xe9, 0xb5, 0x27, 0xf5, 0xfe, 0xd9, 0x22, 0xf3,
	0x20, 0x08, 0x50, 0x75, 0x5a, 0x32, 0x6f, 0x89, 0x5c, 0x08, 0x13, 0x6e, 0xf6, 0x0a, 0xfe, 0xf4,
	0x6e, 0x90, 0x79, 0x3d, 0x4c, 0xab, 0x86, 0xfb, 0x34, 0x07, 0x36, 0xa3, 0xe2, 0xbd, 0x49, 0x3c,
	0x0d, 0xc9, 0xa2, 0x50, 0x2a, 0x07, 0xbc, 0xa0, 0x81, 0x4b, 0xe0, 0x39, 0x00, 0xc7, 0x24, 0x3a,
	0x0d, 0xfb, 0x2c, 0x75, 0xe8, 0x8b, 0x63, 0xf4, 0x3e, 0x38, 0x2c, 0x7a, 0x8b, 0xe8, 0x85, 0xa0,
	0xaa, 0xca, 0xf3, 0x1a, 0xfc, 0x59, 0x0d, 0x5f, 0x06, 0xd7, 0x23, 0xed, 0xb1, 0xf8, 0x5b, 0x64,
	0x09, 0xc7, 0x12, 0x8f, 0x47, 0xf2, 0x9c, 0x06, 0x2f, 0xe8, 0x91, 0xc4, 0x6e, 0x1c, 0xaf, 0x91,
	0x45, 0xb0, 0xd4, 0xb7, 0xf0, 0xd2, 0x18, 0x38, 0xde, 0x44, 0xef, 0x1d, 0x72, 0xd9, 0x58, 0x42,
	0x9c, 0xa2, 0x41, 0xcf, 0x6a, 0xf4, 0x8a, 0xf5, 0x1d, 0x8c, 0x5d, 0x66, 0xd1, 0xda, 0x4e, 0xf8,
	0x79, 0xb7, 0x68, 0xed, 0xe6, 0x32, 0xb4, 0x27, 0x16, 0x8d, 0xb8, 0x65, 0x68, 0x4f, 0x59, 0xb4,
	0xf6, 0xc4, 0xa2, 0xcd, 0x8d, 0xd1, 0x8d, 0x45, 0xc3, 0xa9, 0xb5, 0xeb, 0x53, 0x9b, 0x77, 0x53,
	0x6b, 0xd7, 0xa6, 0x66, 0x62, 0x46, 0xc7, 0x76, 0x63, 0x1c, 0x2d, 0x37, 0x37, 0x70, 0x36, 0x86,
	0xf2, 0xe7, 0x19, 0xe2, 0x61, 0xe4, 0x8f, 0xca, 0x54, 0x3a, 0xc6, 0xc2, 0xc6, 0xcc, 0xad, 0xb9,
	0xdb, 0xbf, 0x9d, 0xd9, 0xfa, 0x5f, 0x67, 0xa0, 0xad, 0xc9, 0x83, 0x1d, 0x2c, 0xe9, 0x5f, 0x4f,
	0xca, 0x54, 0xd6, 0xe6, 0x29, 0x14, 0x8d, 0x8a, 0x5c, 0x2a, 0x11, 0xf2, 0x7c, 0x3c, 0xcf, 0x45,
	0x9c, 0xa7, 0x50, 0x5d, 0xe7, 0xb3, 0x9c, 0xd7, 0x75, 0x24, 0xb5, 0xb3, 0xfa, 0x2a, 0x2e, 0x69,
	0xf8, 0xa2, 0xb5, 0x37, 0xa1, 0xdb, 0x0d, 0xe8, 0xb2, 0x83, 0x6e, 0xd7, 0xa1, 0x6f, 0xda, 0xc5,
	0x63, 0x75, 0xb0, 0x87, 0x1b, 0xa9, 0x3d, 0x3b, 0x35, 0xf4, 0x26, 0x69, 0xa5, 0x92, 0xd6, 0x56,
	0x79, 0x05, 0x03, 0x29, 0x95, 0xfb, 0x6e, 0x6e, 0x7f, 0x75, 0xfb, 0xe1, 0xd2, 0x13, 0x20, 0x2f,
	0xeb, 0xfd, 0xf8, 0xe6, 0x5c, 0xf7, 0xa3, 0x96, 0x2f, 0xcd, 0xe4, 0x0e, 0x64, 0xf9, 0xb4, 0x19,
	0x7c, 0xdb, 0x34, 0x49, 0x8b, 0xa7, 0xb2, 0x64, 0x91, 0x1b, 0xfa, 0xea, 0xf8, 0x60, 0xed, 0x1a,
	0xdf, 0x44, 0xc0, 0x9e, 0xe5, 0xac, 0x8d, 0x03, 0x76, 0x92, 0xf3, 0x1e, 0xf1, 0xed, 0x41, 0x3f,
	0x43, 0x5b, 0xd7, 0xb4, 0x35, 0xe3, 0x9f, 0xce, 0x6c, 0x4f, 0x65, 0xfa, 0x8e, 0xd9, 0x9e, 0xc2,
	0xfc, 0xfb, 0x0c, 0x59, 0x33, 0xd9, 0x9d, 0x4e, 0xa4, 0xe3, 0x2b, 0x7a, 0x63, 0x7e, 0x7f, 0x4e,
	0x1b, 0x33, 0xad, 0x14, 0xd9, 0x5a, 0x73, 0x5c, 0xaf, 0x0d, 0x76, 0x0a, 0xed, 0x29, 0x53, 0xb8,
	0x7a, 0xde, 0x53, 0x68, 0x4f, 0x9d, 0x42, 0x7b, 0x62, 0x0a, 0x9b, 0xdf, 0x5c, 0xc4, 0xb2, 0x5f,
	0x32, 0x91, 0xd8, 0x06, 0xc5, 0x6b, 0x93, 0x75, 0x2b, 0xc9, 0x72, 0x26, 0x42, 0xc5, 0x8b, 0x9c,
	0x46, 0x61, 0x9a, 0x4a, 0x5d, 0xf6, 0x5a, 0xc1, 0xaa, 0x69, 0x31, 0x9c, 0xb7, 0x0b, 0x4e, 0xef,
	0x01, 0xd9, 0x38, 0xcb, 0x2b, 0x05, 0x4b, 0xf8, 0x09, 0x93, 0x34, 0x2a, 0xaa, 0x5c, 0xe9, 0xe2,
	0xd8, 0x0a, 0x5e, 0x9c, 0x14, 0x38, 0x36, 0xa8, 0x2e, 0x80, 0xbc, 0x7d, 0x72, 0xf3, 0xac, 0x50,
	0x9f, 0x4d, 0x6a, 0x61, 0xbf, 0xf3, 0xd2, 0xa4, 0xd6, 0x3d, 0xd6, 0x54, 0x9b, 0x3a, 0xac, 0x8c,
	0x49, 0x19, 0x0e, 0x9c, 0xd4, 0xc5, 0xe9, 0xc3, 0x3a, 0x30, 0x28, 0x14, 0xda, 0x26, 0x6b, 0x67,
	0x85, 0x14, 0xcf, 0x98, 0x2e, 0xb6, 0xad, 0xe0, 0xf2, 0x24, 0xfd, 0x11, 0xcf, 0x98, 0xf7, 0xae,
	0x5e, 0xcd, 0x01, 0x43, 0xa8, 0x80, 0x6d, 0x15, 0x0a, 0x69, 0x50, 0x76, 0x2f, 0x6a, 0xda, 0x80,
	0x69, 0xb0, 0xe8, 0x81, 0x53, 0xd3, 0xee, 0xe8, 0x8f, 0xd5, 0x69, 0x45, 0x89, 0xac, 0x4b, 0x9a,
	0xb5, 0xd2, 0x60, 0x15, 0xa5, 0x26, 0xbd, 0x4f, 0xae, 0x34, 0x48, 0xa5, 0x28, 0x22, 0x26, 0x25,
	0xf2, 0x66, 0x35, 0x6f, 0xad, 0xc6, 0x3b, 0x46, 0x37, 0xfc, 0xbd, 0xf9, 0x8f, 0x59, 0xe2, 0x99,
	0x2e, 0x95, 0x62, 0x67, 0xa8, 0x63, 0xe1, 0x43, 0x72, 0xd5, 0xcc, 0xb9, 0xd1, 0x45, 0xe6, 0x55,
	0xd6, 0x67, 0xc2, 0x84, 0x83, 0x89, 0x96, 0xdd, 0x71, 0x3f, 0x79, 0xa8, 0xdd, 0xde, 0x1f, 0x66,
	0xc8, 0x6c, 0xce, 0xf8, 0x60, 0xd8, 0x2f, 0x84, 0xff, 0xcc, 0xc6, 0x85, 0x5b, 0x73, 0xb7, 0x7f,
	0x7d, 0x3e, 0x27, 0xc2, 0xb6, 0x6f, 0x81, 0x1b, 0x0f, 0x34, 0x72, 0x42, 0x49, 0x13, 0x44, 0xf0,
	0x27, 0xf4, 0x24, 0x09, 0x4e, 0x2f, 0x49, 0xc3, 0x81, 0x34, 0x41, 0x31, 0x87, 0xb6, 0x5d, 0x30,
	0x41, 0x1d, 0x33, 0x10, 0xab, 0x23, 0xcd, 0xe6, 0x2f, 0xa2, 0xfd, 0xd0, 0x9a, 0xbd, 0x1d, 0xf2,
	0x92, 0x81, 0x46, 0x82, 0x85, 0x8a, 0xc5, 0x36, 0xe6, 0x28, 0x4b, 0x59, 0xc6, 0x72, 0x85, 0x6d,
	0x57, 0x2b, 0xb8, 0x86, 0xb0, 0x2e, 0xa2, 0x4c, 0xc8, 0xed, 0x18, 0x4c, 0x4d, 0x26, 0x66, 0x29,
	0x9b, 0x2a, 0x73, 0xa9, 0x2e, 0x73, 0x1f, 0x51, 0x93, 0x32, 0x5d, 0x72, 0xdd, 0xc8, 0x7c, 0x5d,
	0xb1, 0x6a, 0x9a, 0xca, 0xac, 0x56, 0x79, 0x01, 0x51, 0x9f, 0x6b, 0xd0, 0xa4, 0xc8, 0x47, 0xe4,
	0xaa, 0x11, 0x09, 0xe3, 0x11, 0x13, 0x8a, 0x4b, 0x16, 0xbb, 0x43, 0xa9, 0x5b, 0xb8, 0x56, 0xe0,
	0x23, 0xa2, 0xe3, 0x00, 0xf6, 0x30, 0xc2, 0x39, 0x34, 0x6c, 0x55, 0xa8, 0x30, 0x9d, 0xaa, 0x41,
	0xf0, 0x1c, 0x22, 0xee, 0x11, 0xc0, 0xa6, 0x08, 0x7d, 0x40, 0xae, 0x18, 0xa1, 0xa7, 0x5c, 0x0d,
	0x63, 0x11, 0x3e, 0x1d, 0xa7, 0x19, 0xdd, 0xf1, 0xb5, 0x82, 0x75, 0x04, 0x7c, 0x61, 0xfd, 0x8e,
	0x3b, 0x5e, 0x4e, 0x1c, 0xc4, 0x14, 0x85, 0xf9, 0xfa, 0x72, 0xea, 0x31, 0x9c, 0x95, 0xd9, 0x27,
	0x37, 0x1b, 0x32, 0x79, 0x91, 0xd3, 0xa2, 0x54, 0x3c, 0x6b, 0x4e, 0xa7, 0x85, 0x19, 0xaa, 0x26,
	0x75, 0x58, 0xe4, 0x47, 0x16, 0xe7, 0xd4, 0xda, 0xc4, 0x8c, 0x97, 0xca, 0xaf, 0x78, 0x59, 0xd6,
	0x15, 0x16, 0x30, 0xe1, 0xa2, 0xbb, 0x87, 0x5e, 0xc7, 0x1b, 0xef, 0x87, 0xac, 0xca, 0x12, 0x12,
	0x7a, 0x9d, 0xba, 0x58, 0xdf, 0x8f, 0x9e, 0x03, 0x38, 0xf6, 0x26, 0x69, 0x71, 0x49, 0x85, 0x02,
	0x86, 0x64, 0xb9, 0xd2, 0xbd, 0xdb, 0x6c, 0x30, 0xc7, 0x65, 0xa0, 0x8e, 0xd1, 0xe4, 0xbd, 0x45,
	0x3c, 0x76, 0xa2, 0x58, 0x1e, 0xb3, 0x98, 0x46, 0x45, 0x96, 0x55, 0x39, 0x57, 0xa7, 0xfe, 0xb2,
	0xbe, 0x2f, 0x2d, 0x5b, 0x4f, 0xd7, 0x3a, 0x36, 0xff, 0x75, 0x81, 0x2c, 0xda, 0x24, 0x22, 0xab,
	0xbe, 0xce, 0x20, 0xef, 0xba, 0x6a, 0x22, 0xab, 0xfe, 0xb4, 0xf4, 0x61, 0xd2, 0x66, 0xaf, 0xea,
	0xd7, 0x73, 0x07, 0x1c, 0xc6, 0x5a, 0xc6, 0x31, 0x85, 0x63, 0xae, 0x76, 0x69, 0xf5, 0x6e, 0x92,
	0x85, 0xa7, 0x21, 0x57, 0x34, 0x29, 0x04, 0x65, 0x05, 0x15, 0x78, 0x98, 0x67, 0x83, 0x39, 0xb0,
	0xee, 0x16, 0x62, 0xa7, 0x08, 0xa4, 0xf7, 0x97, 0x19, 0xb2, 0x32, 0x25, 0x83, 0xf9, 0x17, 0x75,
	0x3a, 0xfa, 0xdd, 0x39, 0x55, 0xe8, 0x66, 0x96, 0x0d, 0x96, 0xcf, 0x64, 0xd0, 0x66, 0xee, 0x7c,
	0xf6, 0xfb, 0x95, 0x3b, 0x37, 0xff, 0x7d, 0x8d, 0x2c, 0x34, 0x9f, 0x34, 0xe0, 0x1a, 0x6a, 0xab,
	0x8d, 0xfb, 0x26, 0x8f, 0xfd, 0xdb, 0x7a, 0xdb, 0x96, 0x8d, 0x6b, 0xcf, 0x78, 0xf0, 0x5d, 0x42,
	0x32, 0x29, 0xa1, 0x84, 0xda, 0x07, 0x8e, 0x3b, 0xf8, 0x2e, 0x61, 0xcc, 0x1d, 0x7c, 0xe7, 0xd8,
	0x72, 0xdb, 0xd7, 0x08, 0x9d, 0x6d, 0xd4, 0xad, 0xbd, 0x75, 0x98, 0xb8, 0x79, 0x9b, 0x5c, 0x6e,
	0xe0, 0xad, 0xf8, 0xbb, 0x78, 0x1f, 0xae, 0x11, 0xcc, 0x07, 0xda, 0x64, 0x5d, 0x0e, 0x8b, 0x2a,
	0x8d, 0xa9, 0x64, 0xf9, 0x38, 0xca, 0x39, 0x93, 0x7e, 0x5b, 0x87, 0xd3, 0x2a, 0xba, 0x7b, 0x2c,
	0x77, 0x91, 0xce, 0x99, 0xf4, 0x3e, 0x26, 0x2f, 0xd4, 0x79, 0xec, 0x44, 0x35, 0xb8, 0x77, 0x35,
	0xd7, 0x1f, 0x73, 0x77, 0x4e, 0x54, 0x9d, 0x7e, 0x97, 0xf8, 0x75, 0xba, 0x54, 0x5c, 0x45, 0x43,
	0x9e, 0x0f, 0xa8, 0x50, 0xfe, 0x7b, 0x93, 0xdf, 0xed, 0x59, 0x6f, 0xa0, 0xa0, 0x22, 0x0f, 0x43,
	0x49, 0x0b, 0x91, 0x50, 0xc1, 0x22, 0xc6, 0x47, 0x8c, 0x46, 0x61, 0x19, 0xf6, 0x79, 0x0a, 0x47,
	0xf3, 0x7d, 0x4d, 0x5d, 0x1f, 0x86, 0xf2, 0x48, 0x24, 0x01, 0xfa, 0xbb, 0xce, 0x0d, 0x0d, 0x02,
	0x9c, 0xf9, 0xa2, 0x52, 0x8c, 0x0a, 0x96, 0xa4, 0x2c, 0x52, 0x85, 0xa0, 0x51, 0xca, 0xe1, 0xfc,
	0x7f, 0xa0, 0xb9, 0x6b, 0x5c, 0x06, 0xe0, 0x0f, 0xac, 0xbb, 0xab, 0xbd, 0x5e, 0x87, 0xbc, 0xc8,
	0xa5, 0x81, 0x5a, 0x2e, 0xec, 0x5e, 0xcc, 0x65, 0xd8, 0x4f, 0x59, 0xec, 0x7f, 0xa8, 0xe9, 0x57,
	0xb9, 0x44, 0x42, 0xe0, 0x20, 0xf7, 0x0d, 0xc2, 0xfb, 0x80, 0x5c, 0x0d, 0xa3, 0x88, 0x95, 0x4a,
	0xd2, 0x94, 0x0d, 0xc2, 0xe8, 0x94, 0x96, 0x0c, 0x12, 0x90, 0x1e, 0x8f, 0xff, 0x11, 0x7e, 0xde,
	0x20, 0xf6, 0x35, 0xe0, 0x98, 0x05, 0x4a, 0x8f, 0xc6, 0x7b, 0x83, 0x2c, 0x9b, 0x68, 0x8b, 0xd2,
	0x4a, 0xc2, 0x39, 0xe6, 0xb1, 0xff, 0x31, 0x96, 0x5e, 0x74, 0x74, 0xd1, 0xbe, 0x17, 0x9b, 0x98,
	0xa9, 0x63, 0x21, 0x7e, 0xfd, 0x4f, 0x5c, 0xcc, 0x8c, 0xd1, 0x8f, 0x4e, 0x4b, 0xe6, 0xbd, 0x4c,
	0x16, 0x0a, 0xe1, 0x5a, 0x1b, 0x88, 0x96, 0x1f, 0xe0, 0x53, 0x5c, 0x21, 0x4c, 0x3f, 0x63, 0x5e,
	0xdc, 0xc6, 0x28, 0x9e, 0xc7, 0xec, 0xc4, 0xff, 0x14, 0x23, 0xd6, 0xc2, 0xf6, 0xc0, 0xe8, 0xdd,
	0x23, 0xd7, 0x39, 0xec, 0x8f, 0xa0, 0xa2, 0x28, 0xdc, 0x45, 0x1a, 0xee, 0xd6, 0x09, 0x1f, 0x54,
	0x82, 0xc5, 0x7e, 0xc7, 0xae, 0xd4, 0x91, 0x10, 0x41, 0x51, 0xd8, 0x0b, 0x75, 0xd7, 0x21, 0x60,
	0xa5, 0x4c, 0x74, 0x08, 0x96, 0x15, 0x23, 0x68, 0x7d, 0xf9, 0x08, 0x82, 0x3a, 0xa4, 0x52, 0xfa,
	0xf7, 0x70, 0xa5, 0x10, 0x11, 0x68, 0xc0, 0x31, 0xfa, 0x3b, 0x3d, 0xa8, 0xb3, 0x37, 0xbe, 0x85,
	0x2b, 0x29, 0xec, 0x5d, 0x19, 0xaa, 0xa1, 0xdf, 0xd5, 0x12, 0xd7, 0xa6, 0x49, 0xc8, 0x9d, 0x5c,
	0x1d, 0x87, 0x6a, 0xe8, 0xbd, 0x4e, 0x96, 0x2b, 0xc9, 0x68, 0x0e, 0xa1, 0x3d, 0x2c, 0x4a, 0x2a,
	0x59, 0x9a, 0xf8, 0xf7, 0x35, 0x71, 0xa1, 0x92, 0xec, 0x90, 0x9d, 0xa8, 0x87, 0x45, 0xd9, 0x63,
	0x69, 0xe2, 0x7d, 0x42, 0xae, 0x35, 0xa0, 0x55, 0x1e, 0x0d, 0xc3, 0x7c, 0x00, 0x7d, 0x86, 0xfe,
	0xdc, 0x0e, 0x9e, 0x86, 0x31, 0xeb, 0xb1, 0x05, 0x1c, 0x80, 0x1f, 0x76, 0x97, 0x43, 0xe2, 0x50,
	0x4c, 0xe4, 0x61, 0x4a, 0x4b, 0xc6, 0x84, 0xf4, 0x77, 0x35, 0x69, 0x91, 0xcb, 0x3d, 0x63, 0x3f,
	0x06, 0xb3, 0xf7, 0x0e, 0x59, 0x85, 0x40, 0x2c, 0xb2, 0x0c, 0x72, 0x47, 0x9c, 0xf1, 0xdc, 0xe0,
	0x1f, 0x68, 0xbc, 0xc7, 0x65, 0x57, 0xfb, 0x3a, 0xe0, 0x42, 0xca, 0x6b, 0x64, 0x89, 0xcb, 0x6d,
	0xda, 0x3f, 0xc5, 0x55, 0x00, 0xb8, 0xff, 0x50, 0xa3, 0x5b, 0x5c, 0x6e, 0xdf, 0x3b, 0x85, 0x59,
	0x03, 0x52, 0xbf, 0x22, 0xe9, 0xb7, 0x04, 0x18, 0x15, 0x9e, 0xab, 0x94, 0xf9, 0x7b, 0x1a, 0xba,
	0xc4, 0x65, 0x07, 0x1d, 0x5d, 0xb4, 0xc3, 0x2e, 0x71, 0x89, 0xe7, 0xd7, 0x3c, 0x0e, 0x29, 0x25,
	0x28, 0xcb, 0xf1, 0x3c, 0xfc, 0xd0, 0x1e, 0x27, 0x38, 0xc1, 0xf8, 0x40, 0xa4, 0x94, 0xd8, 0x41,
	0x2f, 0x44, 0x13, 0x7c, 0x89, 0x0f, 0x4a, 0xf7, 0x99, 0xcf, 0xec, 0x88, 0x3a, 0x7c, 0x50, 0xda,
	0x6f, 0x60, 0x34, 0x21, 0xae, 0x90, 0xe3, 0x1c, 0x73, 0xea, 0x68, 0xfb, 0x36, 0x9a, 0x34, 0xad,
	0x90, 0x2e, 0xcd, 0x9c, 0x5a, 0x8d, 0xb7, 0xc8, 0x8a, 0xd5, 0xc8, 0xa0, 0x90, 0x1b, 0xe2, 0x81,
	0x9b, 0x16, 0x1f, 0x94, 0x07, 0x2c, 0xb6, 0x70, 0x1c, 0x5a, 0x9a, 0x0e, 0x84, 0x83, 0x1e, 0xda,
	0xa1, 0xed, 0xa7, 0x03, 0x61, 0x71, 0x2f, 0x93, 0x05, 0xbd, 0x58, 0x23, 0x07, 0x3b, 0xd2, 0xb0,
	0x79, 0x58, 0xa8, 0x91, 0x45, 0xbd, 0x4d, 0x2e, 0x1b, 0x94, 0x60, 0x85, 0x18, 0x38, 0xec, 0xb1,
	0xc6, 0x2e, 0x6b, 0x6c, 0x00, 0x1e, 0x4b, 0xf8, 0x94, 0x5c, 0x33, 0x39, 0x85, 0xe6, 0xa1, 0x82,
	0xfc, 0xe6, 0x3a, 0x45, 0x68, 0x43, 0xfd, 0xcf, 0x71, 0xbe, 0x06, 0x73, 0xa8, 0x21, 0x9d, 0x3a,
	0xc2, 0x7b, 0x48, 0x6e, 0x58, 0x85, 0x98, 0x25, 0x50, 0xea, 0x28, 0xcf, 0xca, 0x09, 0x99, 0x40,
	0xcb, 0xbc, 0x68, 0x80, 0xf7, 0x59, 0xf2, 0x44, 0x24, 0x7b, 0x59, 0xd9, 0x54, 0xda, 0x25, 0x1b,
	0x56, 0x69, 0xa4, 0x13, 0xee, 0x14, 0xa1, 0x1e, 0x1e, 0x25, 0x83, 0x7b, 0x02, 0x69, 0xf7, 0x8c,
	0x0e, 0xf4, 0x51, 0x79, 0x14, 0x96, 0xb2, 0x4a, 0xcd, 0xb5, 0x11, 0x12, 0xd2, 0x23, 0x4c, 0x48,
	0x0d, 0x8f, 0x4e, 0x48, 0x6f, 0x90, 0x65, 0xf7, 0x0d, 0x48, 0x90, 0x1a, 0xfd, 0x18, 0x93, 0x9d,
	0x73, 0x04, 0x4a, 0x63, 0x3f, 0x23, 0x37, 0xb9, 0xa4, 0x31, 0x17, 0x2c, 0x52, 0xe9, 0x29, 0xa4,
	0x99, 0x9c, 0x45, 0x70, 0x4f, 0x60, 0x50, 0xa1, 0x47, 0x6d, 0x73, 0x38, 0x9e, 0xe8, 0x51, 0x5e,
	0xe7, 0xf2, 0xbe, 0x41, 0x76, 0x2d, 0x70, 0xa7, 0x3f, 0x28, 0x9f, 0xb4, 0xf1, 0xa0, 0xdc, 0x27,
	0xd7, 0x33, 0x9e, 0xf3, 0xac, 0xca, 0x9a, 0x93, 0xc4, 0xa3, 0x39, 0x0a, 0x53, 0xff, 0x0b, 0xec,
	0x8e, 0x0d, 0xaa, 0x31, 0xcb, 0x3d, 0x83, 0xf1, 0x8e, 0xc8, 0xcb, 0xdf, 0xad, 0x42, 0x33, 0xc9,
	0x22, 0xe9, 0xff, 0x48, 0x6b, 0xdd, 0xf8, 0x2e, 0xad, 0x03, 0x00, 0x7a, 0x57, 0xc8, 0x6c, 0x5a,
	0x44, 0x70, 0x67, 0x90, 0xfe, 0x97, 0x9a, 0x74, 0x49, 0xff, 0xee, 0xe8, 0xe7, 0x6c, 0x2c, 0x67,
	0xe6, 0xb5, 0xa3, 0xa8, 0x94, 0xff, 0x63, 0x7c, 0xca, 0xd5, 0x76, 0x7c, 0xef, 0x38, 0xaa, 0x14,
	0x74, 0x94, 0x31, 0x93, 0xa7, 0x79, 0x64, 0xee, 0xfc, 0x3f, 0xc1, 0x8e, 0x12, 0x6d, 0x78, 0xc3,
	0x7f, 0x93, 0x78, 0xa6, 0x6d, 0xcd, 0x98, 0x18, 0x30, 0x03, 0xfc, 0xa9, 0x06, 0x2e, 0xa1, 0xe7,
	0x00, 0x1c, 0x88, 0xfe, 0x7f, 0x72, 0x59, 0xb0, 0x44, 0x30, 0x39, 0xb4, 0xcd, 0x2e, 0xe2, 0x7f,
	0xa6, 0xf1, 0x9e, 0xf1, 0xf5, 0xb4, 0x0b, 0x19, 0xff, 0x47, 0x4c, 0x03, 0x22, 0xa1, 0x69, 0xcd,
	0x42, 0xa5, 0x58, 0xec, 0xff, 0x1c, 0xe5, 0x8d, 0x63, 0xd7, 0xda, 0x21, 0x66, 0x2c, 0x58, 0xb0,
	0x32, 0xe5, 0x11, 0x5c, 0x0f, 0x7d, 0x5a, 0x6f, 0x7c, 0x64, 0xe0, 0x1c, 0xcd, 0x86, 0xf1, 0x17,
	0xdf, 0xb3, 0xcb, 0xf6, 0xdf, 0x66, 0xc8, 0x5a, 0xc9, 0x84, 0x9e, 0xb4, 0x11, 0x57, 0x5c, 0x2a,
	0x1e, 0x49, 0x3f, 0x3c, 0xd7, 0x67, 0xf1, 0xfa, 0xc3, 0x57, 0xb0, 0x5a, 0x1b, 0x62, 0xcf, 0x8d,
	0xd0, 0xfb, 0xd3, 0x0c, 0x59, 0x9a, 0xbc, 0xc2, 0xf8, 0x7d, 0xbd, 0xc2, 0xbf, 0x39, 0xc7, 0xfb,
	0x83, 0x89, 0xb9, 0x60, 0xa1, 0x79, 0x7f, 0x82, 0x6c, 0x6f, 0x0f, 0x8b, 0x0e, 0x9c, 0x30, 0x82,
	0xa2, 0xe7, 0x47, 0x98, 0xed, 0xcd, 0xb9, 0x09, 0xd0, 0xd1, 0x91, 0xde, 0x4b, 0x64, 0x0e, 0xda,
	0xc9, 0x11, 0x13, 0x82, 0xc7, 0xcc, 0x8f, 0x35, 0x8c, 0x84, 0xf2, 0xc8, 0x58, 0xbc, 0x17, 0xc8,
	0xf3, 0xb2, 0x28, 0xe8, 0x28, 0x4c, 0x2b, 0xe6, 0x33, 0x7d, 0xb4, 0x66, 0x65, 0x51, 0x3c, 0x81,
	0xdf, 0xde, 0x4d, 0xd2, 0x92, 0x65, 0xca, 0xa1, 0xea, 0x0b, 0xfe, 0xab, 0x22, 0xf7, 0x13, 0x2c,
	0x01, 0xda, 0xf8, 0x10, 0x6d, 0xde, 0x1d, 0xb2, 0x06, 0x05, 0x25, 0xec, 0xb3, 0x94, 0xc5, 0x34,
	0x4c, 0xb8, 0xab, 0x91, 0x03, 0x8d, 0x5e, 0xe1, 0x72, 0x1f, 0x9d, 0x9d, 0x84, 0xdb, 0x02, 0x79,
	0x97, 0xf8, 0x5c, 0xd2, 0x2a, 0x9f, 0x46, 0x1b, 0x62, 0x83, 0xcc, 0xe5, 0x63, 0xeb, 0xae, 0x11,
	0x5f, 0x25, 0x8b, 0xd0, 0x86, 0xe4, 0x43, 0xca, 0xf2, 0xa8, 0x88, 0x79, 0x3e, 0xf0, 0x39, 0x96,
	0x2f, 0x76, 0xa2, 0x0e, 0x87, 0x3b, 0xc6, 0x08, 0xf3, 0x82, 0x06, 0x49, 0xb7, 0x04, 0xfe, 0x2f,
	0xf5, 0xb1, 0x9a, 0x45, 0x43, 0x47, 0x7a, 0xdb, 0x64, 0xdd, 0x54, 0xad, 0x92, 0x89, 0x8c, 0xe6,
	0x4c, 0xb9, 0xc2, 0xf5, 0x95, 0x1d, 0x73, 0x27, 0x1e, 0x1d, 0x33, 0x91, 0x1d, 0x32, 0x65, 0x4b,
	0xd7, 0xc4, 0x9d, 0x60, 0x20, 0x87, 0x55, 0xad, 0x62, 0xfb, 0xe9, 0xe4, 0x9d, 0xe0, 0x01, 0x00,
	0x5c, 0xb9, 0x86, 0x0c, 0x85, 0x94, 0x30, 0x82, 0xa2, 0xe6, 0x67, 0x78, 0x9d, 0xd5, 0xb6, 0x8e,
	0x36, 0x41, 0x65, 0x40, 0x48, 0x5a, 0x44, 0x70, 0xd3, 0xa7, 0x92, 0x29, 0x3f, 0xc7, 0x46, 0x49,
	0x3b, 0xf6, 0xd1, 0xde, 0x63, 0xfa, 0x3f, 0x60, 0x1b, 0x58, 0xbf, 0xd0, 0x93, 0x9c, 0xaf, 0xe3,
	0xbc, 0x57, 0xc8, 0x02, 0x82, 0x4a, 0xc1, 0x4a, 0x96, 0xc7, 0xd2, 0x2f, 0xb1, 0xa9, 0xd5, 0xd6,
	0x63, 0x63, 0xf4, 0x8e, 0xc9, 0x2b, 0xe3, 0x8a, 0x84, 0xe1, 0x65, 0x37, 0x06, 0xd3, 0x6f, 0x95,
	0x73, 0x68, 0x71, 0xfc, 0xaf, 0xf5, 0x58, 0x6e, 0x38, 0xf0, 0x3e, 0x60, 0xcd, 0xee, 0xea, 0x4e,
	0xfe, 0x31, 0x02, 0x21, 0xd7, 0xe2, 0x76, 0x9a, 0xff, 0xb2, 0x93, 0x2a, 0x8c, 0xbe, 0xf2, 0x05,
	0x46, 0x29, 0x7a, 0x34, 0xad, 0x07, 0xf6, 0xfe, 0x73, 0xfa, 0x7f, 0xef, 0xef, 0xfc, 0x27, 0x00,
	0x00, 0xff, 0xff, 0x25, 0x68, 0xb9, 0xd1, 0xd5, 0x1f, 0x00, 0x00,
}
