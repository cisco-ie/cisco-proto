/*
Copyright 2019 Cisco Systems

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: bgp_global_process_info_bag.proto

package cisco_ios_xr_ipv4_bgp_oper_bgp_instances_instance_instance_active_vrfs_vrf_global_process_info

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type BgpGlobalProcessInfoBag_KEYS struct {
	InstanceName         string   `protobuf:"bytes,1,opt,name=instance_name,json=instanceName,proto3" json:"instance_name,omitempty"`
	VrfName              string   `protobuf:"bytes,2,opt,name=vrf_name,json=vrfName,proto3" json:"vrf_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BgpGlobalProcessInfoBag_KEYS) Reset()         { *m = BgpGlobalProcessInfoBag_KEYS{} }
func (m *BgpGlobalProcessInfoBag_KEYS) String() string { return proto.CompactTextString(m) }
func (*BgpGlobalProcessInfoBag_KEYS) ProtoMessage()    {}
func (*BgpGlobalProcessInfoBag_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_99316a6dde1b0219, []int{0}
}

func (m *BgpGlobalProcessInfoBag_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BgpGlobalProcessInfoBag_KEYS.Unmarshal(m, b)
}
func (m *BgpGlobalProcessInfoBag_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BgpGlobalProcessInfoBag_KEYS.Marshal(b, m, deterministic)
}
func (m *BgpGlobalProcessInfoBag_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpGlobalProcessInfoBag_KEYS.Merge(m, src)
}
func (m *BgpGlobalProcessInfoBag_KEYS) XXX_Size() int {
	return xxx_messageInfo_BgpGlobalProcessInfoBag_KEYS.Size(m)
}
func (m *BgpGlobalProcessInfoBag_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpGlobalProcessInfoBag_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_BgpGlobalProcessInfoBag_KEYS proto.InternalMessageInfo

func (m *BgpGlobalProcessInfoBag_KEYS) GetInstanceName() string {
	if m != nil {
		return m.InstanceName
	}
	return ""
}

func (m *BgpGlobalProcessInfoBag_KEYS) GetVrfName() string {
	if m != nil {
		return m.VrfName
	}
	return ""
}

type ClusterIdBag_ struct {
	ClusterIdVal         uint32   `protobuf:"varint,1,opt,name=cluster_id_val,json=clusterIdVal,proto3" json:"cluster_id_val,omitempty"`
	ClusterIdType        uint32   `protobuf:"varint,2,opt,name=cluster_id_type,json=clusterIdType,proto3" json:"cluster_id_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClusterIdBag_) Reset()         { *m = ClusterIdBag_{} }
func (m *ClusterIdBag_) String() string { return proto.CompactTextString(m) }
func (*ClusterIdBag_) ProtoMessage()    {}
func (*ClusterIdBag_) Descriptor() ([]byte, []int) {
	return fileDescriptor_99316a6dde1b0219, []int{1}
}

func (m *ClusterIdBag_) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClusterIdBag_.Unmarshal(m, b)
}
func (m *ClusterIdBag_) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClusterIdBag_.Marshal(b, m, deterministic)
}
func (m *ClusterIdBag_) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClusterIdBag_.Merge(m, src)
}
func (m *ClusterIdBag_) XXX_Size() int {
	return xxx_messageInfo_ClusterIdBag_.Size(m)
}
func (m *ClusterIdBag_) XXX_DiscardUnknown() {
	xxx_messageInfo_ClusterIdBag_.DiscardUnknown(m)
}

var xxx_messageInfo_ClusterIdBag_ proto.InternalMessageInfo

func (m *ClusterIdBag_) GetClusterIdVal() uint32 {
	if m != nil {
		return m.ClusterIdVal
	}
	return 0
}

func (m *ClusterIdBag_) GetClusterIdType() uint32 {
	if m != nil {
		return m.ClusterIdType
	}
	return 0
}

type ColorIdBag_ struct {
	ColorIdVal           uint32   `protobuf:"varint,1,opt,name=color_id_val,json=colorIdVal,proto3" json:"color_id_val,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ColorIdBag_) Reset()         { *m = ColorIdBag_{} }
func (m *ColorIdBag_) String() string { return proto.CompactTextString(m) }
func (*ColorIdBag_) ProtoMessage()    {}
func (*ColorIdBag_) Descriptor() ([]byte, []int) {
	return fileDescriptor_99316a6dde1b0219, []int{2}
}

func (m *ColorIdBag_) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ColorIdBag_.Unmarshal(m, b)
}
func (m *ColorIdBag_) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ColorIdBag_.Marshal(b, m, deterministic)
}
func (m *ColorIdBag_) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ColorIdBag_.Merge(m, src)
}
func (m *ColorIdBag_) XXX_Size() int {
	return xxx_messageInfo_ColorIdBag_.Size(m)
}
func (m *ColorIdBag_) XXX_DiscardUnknown() {
	xxx_messageInfo_ColorIdBag_.DiscardUnknown(m)
}

var xxx_messageInfo_ColorIdBag_ proto.InternalMessageInfo

func (m *ColorIdBag_) GetColorIdVal() uint32 {
	if m != nil {
		return m.ColorIdVal
	}
	return 0
}

type BgpGlobalProcessInfoGbl_ struct {
	InStandaloneMode          bool             `protobuf:"varint,1,opt,name=in_standalone_mode,json=inStandaloneMode,proto3" json:"in_standalone_mode,omitempty"`
	LocalAs                   uint32           `protobuf:"varint,2,opt,name=local_as,json=localAs,proto3" json:"local_as,omitempty"`
	InstanceName              string           `protobuf:"bytes,3,opt,name=instance_name,json=instanceName,proto3" json:"instance_name,omitempty"`
	RestartCount              uint32           `protobuf:"varint,4,opt,name=restart_count,json=restartCount,proto3" json:"restart_count,omitempty"`
	UpdateDelay               uint32           `protobuf:"varint,5,opt,name=update_delay,json=updateDelay,proto3" json:"update_delay,omitempty"`
	GenericScanPeriod         uint32           `protobuf:"varint,6,opt,name=generic_scan_period,json=genericScanPeriod,proto3" json:"generic_scan_period,omitempty"`
	ConfederationId           uint32           `protobuf:"varint,7,opt,name=confederation_id,json=confederationId,proto3" json:"confederation_id,omitempty"`
	ClusterId                 uint32           `protobuf:"varint,8,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	ConfiguredClusterId       uint32           `protobuf:"varint,9,opt,name=configured_cluster_id,json=configuredClusterId,proto3" json:"configured_cluster_id,omitempty"`
	IsClusterIdSpecifiedAsIp  bool             `protobuf:"varint,10,opt,name=is_cluster_id_specified_as_ip,json=isClusterIdSpecifiedAsIp,proto3" json:"is_cluster_id_specified_as_ip,omitempty"`
	ClusterIdEntry            []*ClusterIdBag_ `protobuf:"bytes,11,rep,name=cluster_id_entry,json=clusterIdEntry,proto3" json:"cluster_id_entry,omitempty"`
	ColorId                   []*ColorIdBag_   `protobuf:"bytes,12,rep,name=color_id,json=colorId,proto3" json:"color_id,omitempty"`
	AsnFormat                 uint32           `protobuf:"varint,13,opt,name=asn_format,json=asnFormat,proto3" json:"asn_format,omitempty"`
	SrgbStartConfigured       uint32           `protobuf:"varint,14,opt,name=srgb_start_configured,json=srgbStartConfigured,proto3" json:"srgb_start_configured,omitempty"`
	SrgbEndConfigured         uint32           `protobuf:"varint,15,opt,name=srgb_end_configured,json=srgbEndConfigured,proto3" json:"srgb_end_configured,omitempty"`
	SrgbStart                 uint32           `protobuf:"varint,16,opt,name=srgb_start,json=srgbStart,proto3" json:"srgb_start,omitempty"`
	SrgbEnd                   uint32           `protobuf:"varint,17,opt,name=srgb_end,json=srgbEnd,proto3" json:"srgb_end,omitempty"`
	GracefulMaintenance       bool             `protobuf:"varint,18,opt,name=graceful_maintenance,json=gracefulMaintenance,proto3" json:"graceful_maintenance,omitempty"`
	GracefulMaintAllNbrs      bool             `protobuf:"varint,19,opt,name=graceful_maint_all_nbrs,json=gracefulMaintAllNbrs,proto3" json:"graceful_maint_all_nbrs,omitempty"`
	GracefulMaintRetainRoutes bool             `protobuf:"varint,20,opt,name=graceful_maint_retain_routes,json=gracefulMaintRetainRoutes,proto3" json:"graceful_maint_retain_routes,omitempty"`
	ProcessRlimit             uint64           `protobuf:"varint,21,opt,name=process_rlimit,json=processRlimit,proto3" json:"process_rlimit,omitempty"`
	BmpMaximumBufferSize      uint64           `protobuf:"varint,22,opt,name=bmp_maximum_buffer_size,json=bmpMaximumBufferSize,proto3" json:"bmp_maximum_buffer_size,omitempty"`
	BmpDefaultBufferSize      uint64           `protobuf:"varint,23,opt,name=bmp_default_buffer_size,json=bmpDefaultBufferSize,proto3" json:"bmp_default_buffer_size,omitempty"`
	BmpCurrentBufferSize      uint64           `protobuf:"varint,24,opt,name=bmp_current_buffer_size,json=bmpCurrentBufferSize,proto3" json:"bmp_current_buffer_size,omitempty"`
	BmpCurMaximumBufferSize   uint64           `protobuf:"varint,25,opt,name=bmp_cur_maximum_buffer_size,json=bmpCurMaximumBufferSize,proto3" json:"bmp_cur_maximum_buffer_size,omitempty"`
	XXX_NoUnkeyedLiteral      struct{}         `json:"-"`
	XXX_unrecognized          []byte           `json:"-"`
	XXX_sizecache             int32            `json:"-"`
}

func (m *BgpGlobalProcessInfoGbl_) Reset()         { *m = BgpGlobalProcessInfoGbl_{} }
func (m *BgpGlobalProcessInfoGbl_) String() string { return proto.CompactTextString(m) }
func (*BgpGlobalProcessInfoGbl_) ProtoMessage()    {}
func (*BgpGlobalProcessInfoGbl_) Descriptor() ([]byte, []int) {
	return fileDescriptor_99316a6dde1b0219, []int{3}
}

func (m *BgpGlobalProcessInfoGbl_) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BgpGlobalProcessInfoGbl_.Unmarshal(m, b)
}
func (m *BgpGlobalProcessInfoGbl_) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BgpGlobalProcessInfoGbl_.Marshal(b, m, deterministic)
}
func (m *BgpGlobalProcessInfoGbl_) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpGlobalProcessInfoGbl_.Merge(m, src)
}
func (m *BgpGlobalProcessInfoGbl_) XXX_Size() int {
	return xxx_messageInfo_BgpGlobalProcessInfoGbl_.Size(m)
}
func (m *BgpGlobalProcessInfoGbl_) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpGlobalProcessInfoGbl_.DiscardUnknown(m)
}

var xxx_messageInfo_BgpGlobalProcessInfoGbl_ proto.InternalMessageInfo

func (m *BgpGlobalProcessInfoGbl_) GetInStandaloneMode() bool {
	if m != nil {
		return m.InStandaloneMode
	}
	return false
}

func (m *BgpGlobalProcessInfoGbl_) GetLocalAs() uint32 {
	if m != nil {
		return m.LocalAs
	}
	return 0
}

func (m *BgpGlobalProcessInfoGbl_) GetInstanceName() string {
	if m != nil {
		return m.InstanceName
	}
	return ""
}

func (m *BgpGlobalProcessInfoGbl_) GetRestartCount() uint32 {
	if m != nil {
		return m.RestartCount
	}
	return 0
}

func (m *BgpGlobalProcessInfoGbl_) GetUpdateDelay() uint32 {
	if m != nil {
		return m.UpdateDelay
	}
	return 0
}

func (m *BgpGlobalProcessInfoGbl_) GetGenericScanPeriod() uint32 {
	if m != nil {
		return m.GenericScanPeriod
	}
	return 0
}

func (m *BgpGlobalProcessInfoGbl_) GetConfederationId() uint32 {
	if m != nil {
		return m.ConfederationId
	}
	return 0
}

func (m *BgpGlobalProcessInfoGbl_) GetClusterId() uint32 {
	if m != nil {
		return m.ClusterId
	}
	return 0
}

func (m *BgpGlobalProcessInfoGbl_) GetConfiguredClusterId() uint32 {
	if m != nil {
		return m.ConfiguredClusterId
	}
	return 0
}

func (m *BgpGlobalProcessInfoGbl_) GetIsClusterIdSpecifiedAsIp() bool {
	if m != nil {
		return m.IsClusterIdSpecifiedAsIp
	}
	return false
}

func (m *BgpGlobalProcessInfoGbl_) GetClusterIdEntry() []*ClusterIdBag_ {
	if m != nil {
		return m.ClusterIdEntry
	}
	return nil
}

func (m *BgpGlobalProcessInfoGbl_) GetColorId() []*ColorIdBag_ {
	if m != nil {
		return m.ColorId
	}
	return nil
}

func (m *BgpGlobalProcessInfoGbl_) GetAsnFormat() uint32 {
	if m != nil {
		return m.AsnFormat
	}
	return 0
}

func (m *BgpGlobalProcessInfoGbl_) GetSrgbStartConfigured() uint32 {
	if m != nil {
		return m.SrgbStartConfigured
	}
	return 0
}

func (m *BgpGlobalProcessInfoGbl_) GetSrgbEndConfigured() uint32 {
	if m != nil {
		return m.SrgbEndConfigured
	}
	return 0
}

func (m *BgpGlobalProcessInfoGbl_) GetSrgbStart() uint32 {
	if m != nil {
		return m.SrgbStart
	}
	return 0
}

func (m *BgpGlobalProcessInfoGbl_) GetSrgbEnd() uint32 {
	if m != nil {
		return m.SrgbEnd
	}
	return 0
}

func (m *BgpGlobalProcessInfoGbl_) GetGracefulMaintenance() bool {
	if m != nil {
		return m.GracefulMaintenance
	}
	return false
}

func (m *BgpGlobalProcessInfoGbl_) GetGracefulMaintAllNbrs() bool {
	if m != nil {
		return m.GracefulMaintAllNbrs
	}
	return false
}

func (m *BgpGlobalProcessInfoGbl_) GetGracefulMaintRetainRoutes() bool {
	if m != nil {
		return m.GracefulMaintRetainRoutes
	}
	return false
}

func (m *BgpGlobalProcessInfoGbl_) GetProcessRlimit() uint64 {
	if m != nil {
		return m.ProcessRlimit
	}
	return 0
}

func (m *BgpGlobalProcessInfoGbl_) GetBmpMaximumBufferSize() uint64 {
	if m != nil {
		return m.BmpMaximumBufferSize
	}
	return 0
}

func (m *BgpGlobalProcessInfoGbl_) GetBmpDefaultBufferSize() uint64 {
	if m != nil {
		return m.BmpDefaultBufferSize
	}
	return 0
}

func (m *BgpGlobalProcessInfoGbl_) GetBmpCurrentBufferSize() uint64 {
	if m != nil {
		return m.BmpCurrentBufferSize
	}
	return 0
}

func (m *BgpGlobalProcessInfoGbl_) GetBmpCurMaximumBufferSize() uint64 {
	if m != nil {
		return m.BmpCurMaximumBufferSize
	}
	return 0
}

type BgpGlobalProcessInfoVrf_ struct {
	VrfIsActive                                  bool     `protobuf:"varint,1,opt,name=vrf_is_active,json=vrfIsActive,proto3" json:"vrf_is_active,omitempty"`
	RouteDistinguisher                           []uint32 `protobuf:"varint,2,rep,packed,name=route_distinguisher,json=routeDistinguisher,proto3" json:"route_distinguisher,omitempty"`
	RouterId                                     string   `protobuf:"bytes,3,opt,name=router_id,json=routerId,proto3" json:"router_id,omitempty"`
	ConfiguredRouterId                           string   `protobuf:"bytes,4,opt,name=configured_router_id,json=configuredRouterId,proto3" json:"configured_router_id,omitempty"`
	IsRedistributeIbgpToIgPsEnabled              bool     `protobuf:"varint,5,opt,name=is_redistribute_ibgp_to_ig_ps_enabled,json=isRedistributeIbgpToIgPsEnabled,proto3" json:"is_redistribute_ibgp_to_ig_ps_enabled,omitempty"`
	IsFastExternalFalloverEnabled                bool     `protobuf:"varint,6,opt,name=is_fast_external_fallover_enabled,json=isFastExternalFalloverEnabled,proto3" json:"is_fast_external_fallover_enabled,omitempty"`
	IsBestpathMissingMedIsWorstEnabled           bool     `protobuf:"varint,7,opt,name=is_bestpath_missing_med_is_worst_enabled,json=isBestpathMissingMedIsWorstEnabled,proto3" json:"is_bestpath_missing_med_is_worst_enabled,omitempty"`
	IsBestpathAlwaysCompareMedEnabled            bool     `protobuf:"varint,8,opt,name=is_bestpath_always_compare_med_enabled,json=isBestpathAlwaysCompareMedEnabled,proto3" json:"is_bestpath_always_compare_med_enabled,omitempty"`
	IsBestpathIgnoreAsPathEnabled                bool     `protobuf:"varint,9,opt,name=is_bestpath_ignore_as_path_enabled,json=isBestpathIgnoreAsPathEnabled,proto3" json:"is_bestpath_ignore_as_path_enabled,omitempty"`
	IsBestpathAsPathMpathRelaxEnabled            bool     `protobuf:"varint,10,opt,name=is_bestpath_as_path_mpath_relax_enabled,json=isBestpathAsPathMpathRelaxEnabled,proto3" json:"is_bestpath_as_path_mpath_relax_enabled,omitempty"`
	IsBestpathCompareMedFromConfedPeerEnabled    bool     `protobuf:"varint,11,opt,name=is_bestpath_compare_med_from_confed_peer_enabled,json=isBestpathCompareMedFromConfedPeerEnabled,proto3" json:"is_bestpath_compare_med_from_confed_peer_enabled,omitempty"`
	IsBestpathCompareRouterIdForEbgpPeersEnabled bool     `protobuf:"varint,12,opt,name=is_bestpath_compare_router_id_for_ebgp_peers_enabled,json=isBestpathCompareRouterIdForEbgpPeersEnabled,proto3" json:"is_bestpath_compare_router_id_for_ebgp_peers_enabled,omitempty"`
	IsBestpathAigpIgnoreEnabled                  bool     `protobuf:"varint,13,opt,name=is_bestpath_aigp_ignore_enabled,json=isBestpathAigpIgnoreEnabled,proto3" json:"is_bestpath_aigp_ignore_enabled,omitempty"`
	IsMultipathAsPathIgnoreOnwardsEnabled        bool     `protobuf:"varint,14,opt,name=is_multipath_as_path_ignore_onwards_enabled,json=isMultipathAsPathIgnoreOnwardsEnabled,proto3" json:"is_multipath_as_path_ignore_onwards_enabled,omitempty"`
	IsEnforceFirstAsEnabled                      bool     `protobuf:"varint,15,opt,name=is_enforce_first_as_enabled,json=isEnforceFirstAsEnabled,proto3" json:"is_enforce_first_as_enabled,omitempty"`
	DefaultLocalPreference                       uint32   `protobuf:"varint,16,opt,name=default_local_preference,json=defaultLocalPreference,proto3" json:"default_local_preference,omitempty"`
	KeepAliveTime                                uint32   `protobuf:"varint,17,opt,name=keep_alive_time,json=keepAliveTime,proto3" json:"keep_alive_time,omitempty"`
	HoldTime                                     uint32   `protobuf:"varint,18,opt,name=hold_time,json=holdTime,proto3" json:"hold_time,omitempty"`
	MinAcceptableHoldTime                        uint32   `protobuf:"varint,19,opt,name=min_acceptable_hold_time,json=minAcceptableHoldTime,proto3" json:"min_acceptable_hold_time,omitempty"`
	IsNeighborLogging                            bool     `protobuf:"varint,20,opt,name=is_neighbor_logging,json=isNeighborLogging,proto3" json:"is_neighbor_logging,omitempty"`
	IsDefaultMetricConfigured                    bool     `protobuf:"varint,21,opt,name=is_default_metric_configured,json=isDefaultMetricConfigured,proto3" json:"is_default_metric_configured,omitempty"`
	DefaultMetric                                uint32   `protobuf:"varint,22,opt,name=default_metric,json=defaultMetric,proto3" json:"default_metric,omitempty"`
	IsDefaultOriginateConfigured                 bool     `protobuf:"varint,23,opt,name=is_default_originate_configured,json=isDefaultOriginateConfigured,proto3" json:"is_default_originate_configured,omitempty"`
	IsGracefulRestart                            bool     `protobuf:"varint,24,opt,name=is_graceful_restart,json=isGracefulRestart,proto3" json:"is_graceful_restart,omitempty"`
	IsNsr                                        bool     `protobuf:"varint,25,opt,name=is_nsr,json=isNsr,proto3" json:"is_nsr,omitempty"`
	RestartTime                                  uint32   `protobuf:"varint,26,opt,name=restart_time,json=restartTime,proto3" json:"restart_time,omitempty"`
	StalePathTime                                uint32   `protobuf:"varint,27,opt,name=stale_path_time,json=stalePathTime,proto3" json:"stale_path_time,omitempty"`
	RibPurgeTimeout                              uint32   `protobuf:"varint,28,opt,name=rib_purge_timeout,json=ribPurgeTimeout,proto3" json:"rib_purge_timeout,omitempty"`
	XXX_NoUnkeyedLiteral                         struct{} `json:"-"`
	XXX_unrecognized                             []byte   `json:"-"`
	XXX_sizecache                                int32    `json:"-"`
}

func (m *BgpGlobalProcessInfoVrf_) Reset()         { *m = BgpGlobalProcessInfoVrf_{} }
func (m *BgpGlobalProcessInfoVrf_) String() string { return proto.CompactTextString(m) }
func (*BgpGlobalProcessInfoVrf_) ProtoMessage()    {}
func (*BgpGlobalProcessInfoVrf_) Descriptor() ([]byte, []int) {
	return fileDescriptor_99316a6dde1b0219, []int{4}
}

func (m *BgpGlobalProcessInfoVrf_) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BgpGlobalProcessInfoVrf_.Unmarshal(m, b)
}
func (m *BgpGlobalProcessInfoVrf_) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BgpGlobalProcessInfoVrf_.Marshal(b, m, deterministic)
}
func (m *BgpGlobalProcessInfoVrf_) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpGlobalProcessInfoVrf_.Merge(m, src)
}
func (m *BgpGlobalProcessInfoVrf_) XXX_Size() int {
	return xxx_messageInfo_BgpGlobalProcessInfoVrf_.Size(m)
}
func (m *BgpGlobalProcessInfoVrf_) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpGlobalProcessInfoVrf_.DiscardUnknown(m)
}

var xxx_messageInfo_BgpGlobalProcessInfoVrf_ proto.InternalMessageInfo

func (m *BgpGlobalProcessInfoVrf_) GetVrfIsActive() bool {
	if m != nil {
		return m.VrfIsActive
	}
	return false
}

func (m *BgpGlobalProcessInfoVrf_) GetRouteDistinguisher() []uint32 {
	if m != nil {
		return m.RouteDistinguisher
	}
	return nil
}

func (m *BgpGlobalProcessInfoVrf_) GetRouterId() string {
	if m != nil {
		return m.RouterId
	}
	return ""
}

func (m *BgpGlobalProcessInfoVrf_) GetConfiguredRouterId() string {
	if m != nil {
		return m.ConfiguredRouterId
	}
	return ""
}

func (m *BgpGlobalProcessInfoVrf_) GetIsRedistributeIbgpToIgPsEnabled() bool {
	if m != nil {
		return m.IsRedistributeIbgpToIgPsEnabled
	}
	return false
}

func (m *BgpGlobalProcessInfoVrf_) GetIsFastExternalFalloverEnabled() bool {
	if m != nil {
		return m.IsFastExternalFalloverEnabled
	}
	return false
}

func (m *BgpGlobalProcessInfoVrf_) GetIsBestpathMissingMedIsWorstEnabled() bool {
	if m != nil {
		return m.IsBestpathMissingMedIsWorstEnabled
	}
	return false
}

func (m *BgpGlobalProcessInfoVrf_) GetIsBestpathAlwaysCompareMedEnabled() bool {
	if m != nil {
		return m.IsBestpathAlwaysCompareMedEnabled
	}
	return false
}

func (m *BgpGlobalProcessInfoVrf_) GetIsBestpathIgnoreAsPathEnabled() bool {
	if m != nil {
		return m.IsBestpathIgnoreAsPathEnabled
	}
	return false
}

func (m *BgpGlobalProcessInfoVrf_) GetIsBestpathAsPathMpathRelaxEnabled() bool {
	if m != nil {
		return m.IsBestpathAsPathMpathRelaxEnabled
	}
	return false
}

func (m *BgpGlobalProcessInfoVrf_) GetIsBestpathCompareMedFromConfedPeerEnabled() bool {
	if m != nil {
		return m.IsBestpathCompareMedFromConfedPeerEnabled
	}
	return false
}

func (m *BgpGlobalProcessInfoVrf_) GetIsBestpathCompareRouterIdForEbgpPeersEnabled() bool {
	if m != nil {
		return m.IsBestpathCompareRouterIdForEbgpPeersEnabled
	}
	return false
}

func (m *BgpGlobalProcessInfoVrf_) GetIsBestpathAigpIgnoreEnabled() bool {
	if m != nil {
		return m.IsBestpathAigpIgnoreEnabled
	}
	return false
}

func (m *BgpGlobalProcessInfoVrf_) GetIsMultipathAsPathIgnoreOnwardsEnabled() bool {
	if m != nil {
		return m.IsMultipathAsPathIgnoreOnwardsEnabled
	}
	return false
}

func (m *BgpGlobalProcessInfoVrf_) GetIsEnforceFirstAsEnabled() bool {
	if m != nil {
		return m.IsEnforceFirstAsEnabled
	}
	return false
}

func (m *BgpGlobalProcessInfoVrf_) GetDefaultLocalPreference() uint32 {
	if m != nil {
		return m.DefaultLocalPreference
	}
	return 0
}

func (m *BgpGlobalProcessInfoVrf_) GetKeepAliveTime() uint32 {
	if m != nil {
		return m.KeepAliveTime
	}
	return 0
}

func (m *BgpGlobalProcessInfoVrf_) GetHoldTime() uint32 {
	if m != nil {
		return m.HoldTime
	}
	return 0
}

func (m *BgpGlobalProcessInfoVrf_) GetMinAcceptableHoldTime() uint32 {
	if m != nil {
		return m.MinAcceptableHoldTime
	}
	return 0
}

func (m *BgpGlobalProcessInfoVrf_) GetIsNeighborLogging() bool {
	if m != nil {
		return m.IsNeighborLogging
	}
	return false
}

func (m *BgpGlobalProcessInfoVrf_) GetIsDefaultMetricConfigured() bool {
	if m != nil {
		return m.IsDefaultMetricConfigured
	}
	return false
}

func (m *BgpGlobalProcessInfoVrf_) GetDefaultMetric() uint32 {
	if m != nil {
		return m.DefaultMetric
	}
	return 0
}

func (m *BgpGlobalProcessInfoVrf_) GetIsDefaultOriginateConfigured() bool {
	if m != nil {
		return m.IsDefaultOriginateConfigured
	}
	return false
}

func (m *BgpGlobalProcessInfoVrf_) GetIsGracefulRestart() bool {
	if m != nil {
		return m.IsGracefulRestart
	}
	return false
}

func (m *BgpGlobalProcessInfoVrf_) GetIsNsr() bool {
	if m != nil {
		return m.IsNsr
	}
	return false
}

func (m *BgpGlobalProcessInfoVrf_) GetRestartTime() uint32 {
	if m != nil {
		return m.RestartTime
	}
	return 0
}

func (m *BgpGlobalProcessInfoVrf_) GetStalePathTime() uint32 {
	if m != nil {
		return m.StalePathTime
	}
	return 0
}

func (m *BgpGlobalProcessInfoVrf_) GetRibPurgeTimeout() uint32 {
	if m != nil {
		return m.RibPurgeTimeout
	}
	return 0
}

type BgpGlobalProcessInfoBag struct {
	VrfName              string                    `protobuf:"bytes,50,opt,name=vrf_name,json=vrfName,proto3" json:"vrf_name,omitempty"`
	Vrfid                uint32                    `protobuf:"varint,51,opt,name=vrfid,proto3" json:"vrfid,omitempty"`
	Global               *BgpGlobalProcessInfoGbl_ `protobuf:"bytes,52,opt,name=global,proto3" json:"global,omitempty"`
	Vrf                  *BgpGlobalProcessInfoVrf_ `protobuf:"bytes,53,opt,name=vrf,proto3" json:"vrf,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *BgpGlobalProcessInfoBag) Reset()         { *m = BgpGlobalProcessInfoBag{} }
func (m *BgpGlobalProcessInfoBag) String() string { return proto.CompactTextString(m) }
func (*BgpGlobalProcessInfoBag) ProtoMessage()    {}
func (*BgpGlobalProcessInfoBag) Descriptor() ([]byte, []int) {
	return fileDescriptor_99316a6dde1b0219, []int{5}
}

func (m *BgpGlobalProcessInfoBag) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BgpGlobalProcessInfoBag.Unmarshal(m, b)
}
func (m *BgpGlobalProcessInfoBag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BgpGlobalProcessInfoBag.Marshal(b, m, deterministic)
}
func (m *BgpGlobalProcessInfoBag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpGlobalProcessInfoBag.Merge(m, src)
}
func (m *BgpGlobalProcessInfoBag) XXX_Size() int {
	return xxx_messageInfo_BgpGlobalProcessInfoBag.Size(m)
}
func (m *BgpGlobalProcessInfoBag) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpGlobalProcessInfoBag.DiscardUnknown(m)
}

var xxx_messageInfo_BgpGlobalProcessInfoBag proto.InternalMessageInfo

func (m *BgpGlobalProcessInfoBag) GetVrfName() string {
	if m != nil {
		return m.VrfName
	}
	return ""
}

func (m *BgpGlobalProcessInfoBag) GetVrfid() uint32 {
	if m != nil {
		return m.Vrfid
	}
	return 0
}

func (m *BgpGlobalProcessInfoBag) GetGlobal() *BgpGlobalProcessInfoGbl_ {
	if m != nil {
		return m.Global
	}
	return nil
}

func (m *BgpGlobalProcessInfoBag) GetVrf() *BgpGlobalProcessInfoVrf_ {
	if m != nil {
		return m.Vrf
	}
	return nil
}

func init() {
	proto.RegisterType((*BgpGlobalProcessInfoBag_KEYS)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.vrfs.vrf.global_process_info.bgp_global_process_info_bag_KEYS")
	proto.RegisterType((*ClusterIdBag_)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.vrfs.vrf.global_process_info.cluster_id_bag_")
	proto.RegisterType((*ColorIdBag_)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.vrfs.vrf.global_process_info.color_id_bag_")
	proto.RegisterType((*BgpGlobalProcessInfoGbl_)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.vrfs.vrf.global_process_info.bgp_global_process_info_gbl_")
	proto.RegisterType((*BgpGlobalProcessInfoVrf_)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.vrfs.vrf.global_process_info.bgp_global_process_info_vrf_")
	proto.RegisterType((*BgpGlobalProcessInfoBag)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.vrfs.vrf.global_process_info.bgp_global_process_info_bag")
}

func init() { proto.RegisterFile("bgp_global_process_info_bag.proto", fileDescriptor_99316a6dde1b0219) }

var fileDescriptor_99316a6dde1b0219 = []byte{
	// 1554 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x57, 0x4f, 0x53, 0x1c, 0xb9,
	0x15, 0xaf, 0x31, 0x36, 0x0c, 0x82, 0xe1, 0x8f, 0x80, 0xa5, 0x1d, 0xa0, 0x16, 0x66, 0x83, 0xc3,
	0x26, 0x5b, 0x93, 0x5d, 0xd6, 0x5b, 0xc9, 0x61, 0xab, 0xb6, 0x66, 0x61, 0x88, 0xa7, 0xe2, 0xc1,
	0xa4, 0xa1, 0x92, 0x4a, 0x0e, 0x51, 0xa9, 0xbb, 0xd5, 0xcd, 0x4b, 0xba, 0xa5, 0x2e, 0xa9, 0x67,
	0x0c, 0xae, 0x7c, 0x80, 0x9c, 0x72, 0xca, 0x25, 0x5f, 0x21, 0x9f, 0x29, 0x9f, 0x23, 0xe7, 0x94,
	0x9e, 0xfa, 0xdf, 0x18, 0xec, 0x9b, 0x2b, 0x17, 0x98, 0x7e, 0xbf, 0x3f, 0x7a, 0x7a, 0x7a, 0x2d,
	0xa9, 0xc9, 0x51, 0x90, 0xe4, 0x2c, 0x49, 0x55, 0xc0, 0x53, 0x96, 0x6b, 0x15, 0x0a, 0x63, 0x18,
	0xc8, 0x58, 0xb1, 0x80, 0x27, 0x83, 0x5c, 0xab, 0x42, 0xd1, 0x3f, 0x87, 0x60, 0x42, 0xc5, 0x40,
	0x19, 0x76, 0xa7, 0x19, 0xe4, 0xb3, 0x97, 0xcc, 0x8a, 0x54, 0x2e, 0xf4, 0x20, 0x48, 0xf2, 0x01,
	0x48, 0x53, 0x70, 0x19, 0x0a, 0x53, 0xff, 0xaa, 0x7f, 0x30, 0x1e, 0x16, 0x30, 0x13, 0x83, 0x99,
	0x8e, 0x8d, 0xfd, 0x33, 0x78, 0x64, 0xa4, 0x7e, 0x40, 0x0e, 0x3f, 0x92, 0x04, 0xfb, 0xed, 0xe8,
	0x8f, 0xd7, 0xf4, 0x0b, 0xd2, 0xab, 0x3d, 0x25, 0xcf, 0x84, 0xd7, 0x39, 0xec, 0x9c, 0x2c, 0xfb,
	0xab, 0x55, 0xf0, 0x92, 0x67, 0x82, 0x3e, 0x27, 0xdd, 0x99, 0x8e, 0x1d, 0xfe, 0x04, 0xf1, 0xa5,
	0x99, 0x8e, 0x2d, 0xd4, 0x67, 0x64, 0x3d, 0x4c, 0xa7, 0xa6, 0x10, 0x9a, 0x41, 0x84, 0xb6, 0xf4,
	0xa7, 0x64, 0xad, 0x15, 0x9a, 0xf1, 0x14, 0x3d, 0x7b, 0xfe, 0x6a, 0x19, 0x1d, 0x47, 0xbf, 0xe7,
	0x29, 0x7d, 0x31, 0x27, 0x2c, 0xee, 0x73, 0x67, 0xdd, 0xf3, 0x7b, 0x35, 0xed, 0xe6, 0x3e, 0x17,
	0xfd, 0x6f, 0x48, 0x2f, 0x54, 0xa9, 0x6a, 0xec, 0x0f, 0xc9, 0x6a, 0x1d, 0x68, 0xcc, 0x09, 0xc6,
	0xd0, 0xba, 0xff, 0x1f, 0x42, 0xf6, 0x3f, 0x34, 0xf1, 0x24, 0x48, 0x19, 0xfd, 0x8a, 0x50, 0x90,
	0xcc, 0x4e, 0x30, 0xe2, 0xa9, 0x92, 0x82, 0x65, 0x2a, 0x72, 0x33, 0xef, 0xfa, 0x1b, 0x20, 0xaf,
	0x6b, 0x60, 0xa2, 0x22, 0x9c, 0x7d, 0xaa, 0x42, 0x9e, 0x32, 0x6e, 0xca, 0x14, 0x97, 0xf0, 0x79,
	0x68, 0x1e, 0x56, 0x6f, 0xe1, 0x91, 0xea, 0x7d, 0x41, 0x7a, 0x5a, 0x98, 0x82, 0xeb, 0x82, 0x85,
	0x6a, 0x2a, 0x0b, 0xef, 0xa9, 0x2b, 0x47, 0x19, 0x3c, 0xb3, 0x31, 0x7a, 0x44, 0x56, 0xa7, 0x79,
	0xc4, 0x0b, 0xc1, 0x22, 0x91, 0xf2, 0x7b, 0xef, 0x19, 0x72, 0x56, 0x5c, 0xec, 0xdc, 0x86, 0xe8,
	0x80, 0x6c, 0x25, 0x42, 0x0a, 0x0d, 0x21, 0x33, 0x21, 0x97, 0x2c, 0x17, 0x1a, 0x54, 0xe4, 0x2d,
	0x22, 0x73, 0xb3, 0x84, 0xae, 0x43, 0x2e, 0xaf, 0x10, 0xa0, 0x5f, 0x92, 0x8d, 0x50, 0xc9, 0x58,
	0x44, 0x42, 0xf3, 0x02, 0x94, 0x64, 0x10, 0x79, 0x4b, 0x48, 0x5e, 0x9f, 0x8b, 0x8f, 0x23, 0x7a,
	0x40, 0x48, 0xb3, 0x18, 0x5e, 0x17, 0x49, 0xcb, 0xf5, 0x3a, 0xd0, 0x53, 0xb2, 0x63, 0x15, 0x90,
	0x4c, 0xb5, 0x88, 0x58, 0x8b, 0xb9, 0x8c, 0xcc, 0xad, 0x06, 0x3c, 0xab, 0x35, 0x3f, 0x90, 0x03,
	0x30, 0x2d, 0x2e, 0x33, 0xb9, 0x08, 0x21, 0x06, 0x11, 0x31, 0x6e, 0x18, 0xe4, 0x1e, 0xc1, 0x72,
	0x7b, 0x60, 0x6a, 0xcd, 0x75, 0xc5, 0x18, 0x9a, 0x71, 0x4e, 0xff, 0xd5, 0x21, 0x1b, 0x2d, 0xb9,
	0x90, 0x85, 0xbe, 0xf7, 0x56, 0x0e, 0x17, 0x4e, 0x56, 0x4e, 0xd5, 0xe0, 0xd3, 0xbe, 0x39, 0x83,
	0xf7, 0x5a, 0xda, 0x5f, 0xab, 0x6b, 0x31, 0xb2, 0x69, 0xd0, 0xbf, 0x77, 0x48, 0xb7, 0x6a, 0x42,
	0x6f, 0x15, 0x73, 0xca, 0x3e, 0x79, 0x4e, 0xed, 0xb7, 0xc0, 0x5f, 0x2a, 0xfb, 0xdd, 0x2e, 0x1d,
	0x37, 0x92, 0xc5, 0x4a, 0x67, 0xbc, 0xf0, 0x7a, 0x6e, 0xe9, 0xb8, 0x91, 0x17, 0x18, 0xb0, 0x4b,
	0x67, 0x74, 0x12, 0xb0, 0xaa, 0xff, 0xaa, 0x85, 0xf2, 0xd6, 0xdc, 0xd2, 0x59, 0xf0, 0xda, 0xb5,
	0x61, 0x05, 0xd9, 0x46, 0x43, 0x8d, 0x90, 0x51, 0x5b, 0xb1, 0xee, 0x1a, 0xcd, 0x42, 0x23, 0x19,
	0xb5, 0xf8, 0x07, 0x84, 0x34, 0x63, 0x78, 0x1b, 0x2e, 0x85, 0xda, 0xd8, 0xbe, 0x3f, 0x95, 0x9d,
	0xb7, 0xe9, 0xde, 0x9f, 0xd2, 0x83, 0x7e, 0x43, 0xb6, 0x13, 0xcd, 0x43, 0x11, 0x4f, 0x53, 0x96,
	0x71, 0x90, 0x85, 0x90, 0xb6, 0x1e, 0x1e, 0xc5, 0xde, 0xd8, 0xaa, 0xb0, 0x49, 0x03, 0xd1, 0xef,
	0xc8, 0xee, 0xbc, 0x84, 0xf1, 0x34, 0x65, 0x32, 0xd0, 0xc6, 0xdb, 0x42, 0xd5, 0xf6, 0x9c, 0x6a,
	0x98, 0xa6, 0x97, 0x81, 0x36, 0xf4, 0x07, 0xb2, 0xff, 0x9e, 0x4c, 0x8b, 0x82, 0x83, 0x64, 0x5a,
	0x4d, 0x0b, 0x61, 0xbc, 0x6d, 0xd4, 0x3e, 0x9f, 0xd3, 0xfa, 0xc8, 0xf0, 0x91, 0x40, 0x8f, 0xc9,
	0x5a, 0xb5, 0x1c, 0x3a, 0x85, 0x0c, 0x0a, 0x6f, 0xe7, 0xb0, 0x73, 0xf2, 0xd4, 0xef, 0x95, 0x51,
	0x1f, 0x83, 0x36, 0xbd, 0x20, 0xcb, 0x59, 0xc6, 0xef, 0x20, 0x9b, 0x66, 0x2c, 0x98, 0xc6, 0xb1,
	0xd0, 0xcc, 0xc0, 0x3b, 0xe1, 0x7d, 0x86, 0xfc, 0xed, 0x20, 0xcb, 0x27, 0x0e, 0xfd, 0x11, 0xc1,
	0x6b, 0x78, 0x27, 0x2a, 0x59, 0x24, 0x62, 0x3e, 0x4d, 0x8b, 0x39, 0xd9, 0x6e, 0x2d, 0x3b, 0x77,
	0xe8, 0x43, 0x59, 0x38, 0xd5, 0x5a, 0xc8, 0x79, 0x99, 0x57, 0xcb, 0xce, 0x1c, 0xda, 0x92, 0x7d,
	0x4f, 0xf6, 0x4a, 0xd9, 0xa3, 0x89, 0x3e, 0x47, 0xe9, 0xae, 0x93, 0x3e, 0xc8, 0xb5, 0xff, 0xef,
	0xde, 0x87, 0xb7, 0x57, 0x7b, 0x4c, 0xd0, 0x3e, 0xe9, 0xd9, 0xff, 0x60, 0xca, 0xbe, 0x2e, 0x77,
	0xd6, 0x95, 0x99, 0x8e, 0xc7, 0x66, 0x88, 0x21, 0xfa, 0x4b, 0xb2, 0x85, 0x95, 0x67, 0x11, 0x98,
	0x02, 0x64, 0x32, 0x05, 0x73, 0x2b, 0xb4, 0xf7, 0xe4, 0x70, 0xe1, 0xa4, 0xe7, 0x53, 0x84, 0xce,
	0xdb, 0x08, 0xdd, 0x23, 0xcb, 0x18, 0xc5, 0x57, 0xce, 0x6d, 0xb3, 0x5d, 0x17, 0x18, 0x47, 0xf4,
	0x6b, 0xb2, 0xdd, 0xda, 0xa0, 0x1a, 0xde, 0x53, 0xe4, 0xd1, 0x06, 0xf3, 0x2b, 0xc5, 0x25, 0x39,
	0x06, 0xc3, 0xb4, 0xb0, 0xc3, 0x6b, 0x08, 0x6c, 0x26, 0x60, 0x27, 0x55, 0x28, 0x06, 0x09, 0xcb,
	0x0d, 0x13, 0x92, 0x07, 0xa9, 0x88, 0x70, 0x23, 0xee, 0xfa, 0x9f, 0x83, 0xf1, 0x5b, 0xdc, 0x71,
	0x90, 0xe4, 0x37, 0x6a, 0x9c, 0x5c, 0x99, 0x91, 0xa3, 0xd1, 0x57, 0xe4, 0x08, 0x0c, 0x8b, 0xb9,
	0x29, 0x98, 0xb8, 0x2b, 0x84, 0x96, 0x3c, 0x65, 0x31, 0x4f, 0x53, 0x35, 0x13, 0xba, 0xf6, 0x5a,
	0x44, 0xaf, 0x03, 0x30, 0x17, 0xdc, 0x14, 0xa3, 0x92, 0x76, 0x51, 0xb2, 0x2a, 0xa7, 0x1b, 0x72,
	0x02, 0x86, 0x05, 0xc2, 0x14, 0x39, 0x2f, 0x6e, 0x59, 0x06, 0xc6, 0x80, 0x4c, 0x58, 0x26, 0x22,
	0x5b, 0xd1, 0xb7, 0x4a, 0xdb, 0x21, 0x4a, 0xc3, 0x25, 0x34, 0xec, 0x83, 0xf9, 0xb1, 0xa4, 0x4f,
	0x1c, 0x7b, 0x22, 0xa2, 0xb1, 0xf9, 0x83, 0xa5, 0x56, 0xae, 0xbf, 0x23, 0x2f, 0xda, 0xae, 0x3c,
	0x7d, 0xcb, 0xef, 0x0d, 0x0b, 0x55, 0x96, 0x73, 0x2d, 0xd0, 0xbc, 0xf2, 0xec, 0xa2, 0xe7, 0x51,
	0xe3, 0x39, 0x44, 0xee, 0x99, 0xa3, 0x4e, 0x44, 0x54, 0x59, 0x8e, 0x49, 0xbf, 0x6d, 0x09, 0x89,
	0x54, 0x5a, 0xd8, 0xcd, 0x1d, 0x1f, 0x2b, 0xbb, 0xe5, 0x6a, 0xce, 0x95, 0xdd, 0x18, 0x79, 0x43,
	0x73, 0xc5, 0x8b, 0xdb, 0xca, 0xca, 0x27, 0x3f, 0x9b, 0xcb, 0xae, 0xf4, 0xc8, 0xf0, 0xaf, 0x16,
	0x29, 0xbf, 0xab, 0xfd, 0xc8, 0x83, 0xf4, 0xd0, 0x69, 0x62, 0x7f, 0xfa, 0x96, 0x59, 0x79, 0x86,
	0xe4, 0xeb, 0xb6, 0x67, 0x7b, 0xaa, 0xb1, 0x56, 0x19, 0x73, 0x67, 0x20, 0xcb, 0x45, 0x6b, 0x81,
	0x56, 0xd0, 0xfc, 0xcb, 0xc6, 0xbc, 0x99, 0xf5, 0x85, 0x56, 0xd9, 0x19, 0x4a, 0xae, 0x44, 0xb3,
	0x58, 0x7f, 0x21, 0x2f, 0x1f, 0x1b, 0xa4, 0xee, 0x40, 0xbb, 0x2f, 0x33, 0x61, 0x1b, 0xcb, 0x8e,
	0xd3, 0x74, 0xd5, 0x2a, 0x0e, 0xf4, 0xd5, 0x83, 0x81, 0xaa, 0xfe, 0xbc, 0x50, 0x7a, 0x14, 0x24,
	0xb9, 0x1d, 0xaa, 0x6e, 0xb1, 0x73, 0xf2, 0xf9, 0x5c, 0x91, 0x20, 0xc9, 0xab, 0xa2, 0x57, 0xb6,
	0x3d, 0xb4, 0xdd, 0x6b, 0x15, 0x07, 0x92, 0xdc, 0x15, 0xbc, 0x72, 0xf9, 0x13, 0xf9, 0x05, 0x18,
	0x96, 0x4d, 0xd3, 0x02, 0xe6, 0x6a, 0x5d, 0x3a, 0x29, 0xf9, 0x96, 0xeb, 0xa8, 0x49, 0x74, 0x0d,
	0x1d, 0x8f, 0xc1, 0x4c, 0x2a, 0x85, 0xab, 0xb7, 0x33, 0x7d, 0xe3, 0xd8, 0x95, 0xf7, 0xf7, 0x64,
	0x0f, 0xac, 0x34, 0x56, 0x3a, 0x14, 0x2c, 0x06, 0xdb, 0xaa, 0xbc, 0xf1, 0x5a, 0x47, 0xaf, 0x5d,
	0x30, 0x23, 0xc7, 0xb8, 0xb0, 0x84, 0x61, 0xad, 0xfe, 0x35, 0xf1, 0xaa, 0xfd, 0xcf, 0xdd, 0xb7,
	0x72, 0x2d, 0x62, 0xa1, 0x85, 0x3d, 0x10, 0xdc, 0xa1, 0xf2, 0x59, 0x89, 0xbf, 0xb6, 0xf0, 0x55,
	0x8d, 0xda, 0xbb, 0xe4, 0x5f, 0x85, 0xc8, 0x19, 0x4f, 0x61, 0x26, 0x58, 0x01, 0x99, 0x28, 0x0f,
	0x9a, 0x9e, 0x0d, 0x0f, 0x6d, 0xf4, 0x06, 0x32, 0x61, 0xf7, 0x90, 0x5b, 0x95, 0x46, 0x8e, 0x41,
	0x91, 0xd1, 0xb5, 0x01, 0x04, 0x7f, 0x45, 0xbc, 0x0c, 0x24, 0xe3, 0x61, 0x28, 0xf2, 0xc2, 0x66,
	0xc4, 0x1a, 0xee, 0x16, 0x72, 0x77, 0x32, 0x90, 0xc3, 0x1a, 0x7e, 0x55, 0x09, 0x07, 0x64, 0x0b,
	0x0c, 0x93, 0x02, 0x92, 0xdb, 0x40, 0x69, 0x96, 0xaa, 0x24, 0x01, 0x99, 0x94, 0x27, 0xca, 0x26,
	0x98, 0xcb, 0x12, 0x79, 0xed, 0x00, 0x7b, 0x14, 0x81, 0xa9, 0xb7, 0xfa, 0x4c, 0x14, 0xf6, 0x46,
	0xd7, 0x3a, 0x67, 0x77, 0xdc, 0x51, 0x04, 0xa6, 0xdc, 0xef, 0x27, 0xc8, 0x68, 0x9d, 0xb7, 0xc7,
	0x64, 0x6d, 0x5e, 0x8d, 0x47, 0x4b, 0xcf, 0xef, 0x45, 0x6d, 0x01, 0x1d, 0x61, 0xbf, 0x54, 0x4c,
	0xa5, 0x21, 0x01, 0x69, 0x2f, 0x98, 0xad, 0xa1, 0x76, 0x71, 0xa8, 0xfd, 0x7a, 0xa8, 0x37, 0x15,
	0x69, 0xfe, 0x36, 0x00, 0x86, 0xd5, 0x87, 0x67, 0x79, 0x6b, 0xc5, 0xf3, 0x05, 0xa7, 0xf7, 0x9b,
	0x12, 0xf1, 0x1d, 0x40, 0x77, 0xc8, 0xa2, 0x2d, 0x87, 0xd1, 0x78, 0x8e, 0x74, 0xfd, 0x67, 0x60,
	0x2e, 0x8d, 0xb6, 0x17, 0xdc, 0xea, 0x16, 0x8c, 0x25, 0xfd, 0x89, 0xbb, 0xe0, 0x96, 0x31, 0x2c,
	0xe4, 0x0b, 0xb2, 0x6e, 0x0a, 0x9e, 0x0a, 0xd7, 0x90, 0xc8, 0xda, 0x73, 0x13, 0xc3, 0xb0, 0x6d,
	0x3b, 0xe4, 0xfd, 0x9c, 0x6c, 0x6a, 0x08, 0x58, 0x3e, 0xd5, 0x89, 0x5b, 0x6d, 0x35, 0x2d, 0xbc,
	0x7d, 0x77, 0xb3, 0xd5, 0x10, 0x5c, 0xd9, 0xf8, 0x8d, 0x0b, 0xf7, 0xff, 0xfb, 0x84, 0xec, 0x7d,
	0xe4, 0x23, 0x68, 0xee, 0xd3, 0xe6, 0x74, 0xee, 0xd3, 0x86, 0x6e, 0x93, 0x67, 0x33, 0x1d, 0x43,
	0xe4, 0x7d, 0x8b, 0xd6, 0xee, 0x81, 0xfe, 0xb3, 0x43, 0x16, 0x9d, 0x99, 0xf7, 0xf2, 0xb0, 0x73,
	0xb2, 0x72, 0xfa, 0xb7, 0x4f, 0x7d, 0xf1, 0xfb, 0xd8, 0xa7, 0x8c, 0x5f, 0xe6, 0x42, 0xff, 0xd1,
	0x21, 0x0b, 0x33, 0x1d, 0x7b, 0xdf, 0xfd, 0x7f, 0x73, 0xb2, 0xb5, 0xf4, 0x6d, 0x22, 0xc1, 0x22,
	0x7e, 0xe3, 0x7e, 0xfb, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xd2, 0x1b, 0x58, 0x5d, 0x08, 0x0f,
	0x00, 0x00,
}
