/*
Copyright 2019 Cisco Systems

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: bgp_rpki_summary_bag.proto

package cisco_ios_xr_ipv4_bgp_oper_bgp_instances_instance_instance_active_rpki_summary

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type BgpRpkiSummaryBag_KEYS struct {
	InstanceName         string   `protobuf:"bytes,1,opt,name=instance_name,json=instanceName,proto3" json:"instance_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BgpRpkiSummaryBag_KEYS) Reset()         { *m = BgpRpkiSummaryBag_KEYS{} }
func (m *BgpRpkiSummaryBag_KEYS) String() string { return proto.CompactTextString(m) }
func (*BgpRpkiSummaryBag_KEYS) ProtoMessage()    {}
func (*BgpRpkiSummaryBag_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_392a39b2fb54b382, []int{0}
}

func (m *BgpRpkiSummaryBag_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BgpRpkiSummaryBag_KEYS.Unmarshal(m, b)
}
func (m *BgpRpkiSummaryBag_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BgpRpkiSummaryBag_KEYS.Marshal(b, m, deterministic)
}
func (m *BgpRpkiSummaryBag_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpRpkiSummaryBag_KEYS.Merge(m, src)
}
func (m *BgpRpkiSummaryBag_KEYS) XXX_Size() int {
	return xxx_messageInfo_BgpRpkiSummaryBag_KEYS.Size(m)
}
func (m *BgpRpkiSummaryBag_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpRpkiSummaryBag_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_BgpRpkiSummaryBag_KEYS proto.InternalMessageInfo

func (m *BgpRpkiSummaryBag_KEYS) GetInstanceName() string {
	if m != nil {
		return m.InstanceName
	}
	return ""
}

type BgpRpkiSummaryBag struct {
	Servers              uint32   `protobuf:"varint,50,opt,name=servers,proto3" json:"servers,omitempty"`
	Ipv4RoaNets          uint32   `protobuf:"varint,51,opt,name=ipv4roa_nets,json=ipv4roaNets,proto3" json:"ipv4roa_nets,omitempty"`
	Ipv4RoaPaths         uint32   `protobuf:"varint,52,opt,name=ipv4roa_paths,json=ipv4roaPaths,proto3" json:"ipv4roa_paths,omitempty"`
	Ipv6RoaNets          uint32   `protobuf:"varint,53,opt,name=ipv6roa_nets,json=ipv6roaNets,proto3" json:"ipv6roa_nets,omitempty"`
	Ipv6RoaPaths         uint32   `protobuf:"varint,54,opt,name=ipv6roa_paths,json=ipv6roaPaths,proto3" json:"ipv6roa_paths,omitempty"`
	RpkiDisabled         bool     `protobuf:"varint,55,opt,name=rpki_disabled,json=rpkiDisabled,proto3" json:"rpki_disabled,omitempty"`
	RpkiUseValidity      bool     `protobuf:"varint,56,opt,name=rpki_use_validity,json=rpkiUseValidity,proto3" json:"rpki_use_validity,omitempty"`
	RpkiAllowInvalid     bool     `protobuf:"varint,57,opt,name=rpki_allow_invalid,json=rpkiAllowInvalid,proto3" json:"rpki_allow_invalid,omitempty"`
	RpkiSignalIbgp       bool     `protobuf:"varint,58,opt,name=rpki_signal_ibgp,json=rpkiSignalIbgp,proto3" json:"rpki_signal_ibgp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BgpRpkiSummaryBag) Reset()         { *m = BgpRpkiSummaryBag{} }
func (m *BgpRpkiSummaryBag) String() string { return proto.CompactTextString(m) }
func (*BgpRpkiSummaryBag) ProtoMessage()    {}
func (*BgpRpkiSummaryBag) Descriptor() ([]byte, []int) {
	return fileDescriptor_392a39b2fb54b382, []int{1}
}

func (m *BgpRpkiSummaryBag) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BgpRpkiSummaryBag.Unmarshal(m, b)
}
func (m *BgpRpkiSummaryBag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BgpRpkiSummaryBag.Marshal(b, m, deterministic)
}
func (m *BgpRpkiSummaryBag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpRpkiSummaryBag.Merge(m, src)
}
func (m *BgpRpkiSummaryBag) XXX_Size() int {
	return xxx_messageInfo_BgpRpkiSummaryBag.Size(m)
}
func (m *BgpRpkiSummaryBag) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpRpkiSummaryBag.DiscardUnknown(m)
}

var xxx_messageInfo_BgpRpkiSummaryBag proto.InternalMessageInfo

func (m *BgpRpkiSummaryBag) GetServers() uint32 {
	if m != nil {
		return m.Servers
	}
	return 0
}

func (m *BgpRpkiSummaryBag) GetIpv4RoaNets() uint32 {
	if m != nil {
		return m.Ipv4RoaNets
	}
	return 0
}

func (m *BgpRpkiSummaryBag) GetIpv4RoaPaths() uint32 {
	if m != nil {
		return m.Ipv4RoaPaths
	}
	return 0
}

func (m *BgpRpkiSummaryBag) GetIpv6RoaNets() uint32 {
	if m != nil {
		return m.Ipv6RoaNets
	}
	return 0
}

func (m *BgpRpkiSummaryBag) GetIpv6RoaPaths() uint32 {
	if m != nil {
		return m.Ipv6RoaPaths
	}
	return 0
}

func (m *BgpRpkiSummaryBag) GetRpkiDisabled() bool {
	if m != nil {
		return m.RpkiDisabled
	}
	return false
}

func (m *BgpRpkiSummaryBag) GetRpkiUseValidity() bool {
	if m != nil {
		return m.RpkiUseValidity
	}
	return false
}

func (m *BgpRpkiSummaryBag) GetRpkiAllowInvalid() bool {
	if m != nil {
		return m.RpkiAllowInvalid
	}
	return false
}

func (m *BgpRpkiSummaryBag) GetRpkiSignalIbgp() bool {
	if m != nil {
		return m.RpkiSignalIbgp
	}
	return false
}

func init() {
	proto.RegisterType((*BgpRpkiSummaryBag_KEYS)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.rpki_summary.bgp_rpki_summary_bag_KEYS")
	proto.RegisterType((*BgpRpkiSummaryBag)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.rpki_summary.bgp_rpki_summary_bag")
}

func init() { proto.RegisterFile("bgp_rpki_summary_bag.proto", fileDescriptor_392a39b2fb54b382) }

var fileDescriptor_392a39b2fb54b382 = []byte{
	// 330 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x92, 0x4f, 0x4b, 0xf3, 0x30,
	0x1c, 0x80, 0xe9, 0x7b, 0x78, 0xd5, 0xb8, 0xe9, 0x0c, 0x1e, 0xa2, 0xa7, 0xb9, 0x5d, 0x8a, 0x48,
	0x0f, 0x6e, 0xd6, 0x3f, 0x27, 0x05, 0x3d, 0x0c, 0x61, 0xc8, 0x86, 0x82, 0xa7, 0x90, 0x74, 0xa1,
	0x06, 0xdb, 0x26, 0xe4, 0x97, 0x55, 0xf7, 0x91, 0xfd, 0x16, 0x92, 0xac, 0x8d, 0x0a, 0xbb, 0xa5,
	0xcf, 0xef, 0xc9, 0x93, 0x50, 0x82, 0x8e, 0x79, 0xae, 0xa9, 0xd1, 0xef, 0x92, 0xc2, 0xb2, 0x2c,
	0x99, 0x59, 0x51, 0xce, 0xf2, 0x44, 0x1b, 0x65, 0x15, 0x9e, 0x66, 0x12, 0x32, 0x45, 0xa5, 0x02,
	0xfa, 0x69, 0xa8, 0xd4, 0xf5, 0x98, 0x3a, 0x5b, 0x69, 0x61, 0x12, 0x9e, 0xeb, 0x44, 0x56, 0x60,
	0x59, 0x95, 0x09, 0x08, 0xab, 0xb0, 0xa0, 0x2c, 0xb3, 0xb2, 0x16, 0xc9, 0xef, 0xf2, 0xe0, 0x16,
	0x1d, 0x6d, 0x3a, 0x8d, 0x3e, 0x3e, 0xbc, 0xce, 0xf1, 0x10, 0x75, 0xc3, 0xe6, 0x8a, 0x95, 0x82,
	0x44, 0xfd, 0x28, 0xde, 0x99, 0x75, 0x5a, 0x38, 0x65, 0xa5, 0x18, 0x7c, 0xfd, 0x43, 0x87, 0x9b,
	0x12, 0x98, 0xa0, 0x2d, 0x10, 0xa6, 0x16, 0x06, 0xc8, 0x79, 0x3f, 0x8a, 0xbb, 0xb3, 0xf6, 0x13,
	0x9f, 0xa0, 0x8e, 0xbb, 0xb9, 0x51, 0x8c, 0x56, 0xc2, 0x02, 0x19, 0xf9, 0xf1, 0x6e, 0xc3, 0xa6,
	0xc2, 0x82, 0x3f, 0xba, 0x51, 0x34, 0xb3, 0x6f, 0x40, 0xc6, 0xde, 0x69, 0xf7, 0x3d, 0x39, 0xd6,
	0x74, 0xd2, 0xd0, 0xb9, 0x08, 0x9d, 0xf4, 0x6f, 0x27, 0xfd, 0xe9, 0xa4, 0xa1, 0x93, 0x86, 0xce,
	0x10, 0x75, 0xfd, 0xed, 0x17, 0x12, 0x18, 0x2f, 0xc4, 0x82, 0x5c, 0xf6, 0xa3, 0x78, 0x7b, 0xd6,
	0x71, 0xf0, 0xbe, 0x61, 0xf8, 0x14, 0x1d, 0x78, 0x69, 0x09, 0x82, 0xd6, 0xac, 0x90, 0x0b, 0x69,
	0x57, 0xe4, 0xca, 0x8b, 0xfb, 0x6e, 0xf0, 0x0c, 0xe2, 0xa5, 0xc1, 0xf8, 0x0c, 0x61, 0xef, 0xb2,
	0xa2, 0x50, 0x1f, 0x54, 0x56, 0xde, 0x27, 0xd7, 0x5e, 0xee, 0xb9, 0xc9, 0x9d, 0x1b, 0x4c, 0xd6,
	0x1c, 0xc7, 0xa8, 0xb7, 0xfe, 0x79, 0x32, 0xaf, 0x58, 0x41, 0x25, 0xcf, 0x35, 0xb9, 0xf1, 0xee,
	0x9e, 0xe3, 0x73, 0x8f, 0x27, 0x3c, 0xd7, 0xfc, 0xbf, 0x7f, 0x04, 0xa3, 0xef, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xa6, 0x92, 0x89, 0xe8, 0x22, 0x02, 0x00, 0x00,
}
