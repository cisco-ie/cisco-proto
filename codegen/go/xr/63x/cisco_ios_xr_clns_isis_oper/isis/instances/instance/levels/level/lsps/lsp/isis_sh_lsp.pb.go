/*
Copyright 2019 Cisco Systems

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: isis_sh_lsp.proto

package cisco_ios_xr_clns_isis_oper_isis_instances_instance_levels_level_lsps_lsp

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type IsisShLsp_KEYS struct {
	InstanceName         string   `protobuf:"bytes,1,opt,name=instance_name,json=instanceName,proto3" json:"instance_name,omitempty"`
	Level                string   `protobuf:"bytes,2,opt,name=level,proto3" json:"level,omitempty"`
	LspId                string   `protobuf:"bytes,3,opt,name=lsp_id,json=lspId,proto3" json:"lsp_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IsisShLsp_KEYS) Reset()         { *m = IsisShLsp_KEYS{} }
func (m *IsisShLsp_KEYS) String() string { return proto.CompactTextString(m) }
func (*IsisShLsp_KEYS) ProtoMessage()    {}
func (*IsisShLsp_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_a4dc830fe33b9450, []int{0}
}

func (m *IsisShLsp_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IsisShLsp_KEYS.Unmarshal(m, b)
}
func (m *IsisShLsp_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IsisShLsp_KEYS.Marshal(b, m, deterministic)
}
func (m *IsisShLsp_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IsisShLsp_KEYS.Merge(m, src)
}
func (m *IsisShLsp_KEYS) XXX_Size() int {
	return xxx_messageInfo_IsisShLsp_KEYS.Size(m)
}
func (m *IsisShLsp_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_IsisShLsp_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_IsisShLsp_KEYS proto.InternalMessageInfo

func (m *IsisShLsp_KEYS) GetInstanceName() string {
	if m != nil {
		return m.InstanceName
	}
	return ""
}

func (m *IsisShLsp_KEYS) GetLevel() string {
	if m != nil {
		return m.Level
	}
	return ""
}

func (m *IsisShLsp_KEYS) GetLspId() string {
	if m != nil {
		return m.LspId
	}
	return ""
}

type IsisShLspHeader struct {
	LspId                           string   `protobuf:"bytes,1,opt,name=lsp_id,json=lspId,proto3" json:"lsp_id,omitempty"`
	LocalLspFlag                    bool     `protobuf:"varint,2,opt,name=local_lsp_flag,json=localLspFlag,proto3" json:"local_lsp_flag,omitempty"`
	LspActiveFlag                   bool     `protobuf:"varint,3,opt,name=lsp_active_flag,json=lspActiveFlag,proto3" json:"lsp_active_flag,omitempty"`
	LspHoldtime                     uint32   `protobuf:"varint,4,opt,name=lsp_holdtime,json=lspHoldtime,proto3" json:"lsp_holdtime,omitempty"`
	LspSequenceNumber               uint32   `protobuf:"varint,5,opt,name=lsp_sequence_number,json=lspSequenceNumber,proto3" json:"lsp_sequence_number,omitempty"`
	LspChecksum                     uint32   `protobuf:"varint,6,opt,name=lsp_checksum,json=lspChecksum,proto3" json:"lsp_checksum,omitempty"`
	LspPartitionRepairSupportedFlag bool     `protobuf:"varint,7,opt,name=lsp_partition_repair_supported_flag,json=lspPartitionRepairSupportedFlag,proto3" json:"lsp_partition_repair_supported_flag,omitempty"`
	LspAttachedFlag                 bool     `protobuf:"varint,8,opt,name=lsp_attached_flag,json=lspAttachedFlag,proto3" json:"lsp_attached_flag,omitempty"`
	LspOverloadedFlag               bool     `protobuf:"varint,9,opt,name=lsp_overloaded_flag,json=lspOverloadedFlag,proto3" json:"lsp_overloaded_flag,omitempty"`
	LspNonv1AFlag                   uint32   `protobuf:"varint,10,opt,name=lsp_nonv1a_flag,json=lspNonv1aFlag,proto3" json:"lsp_nonv1a_flag,omitempty"`
	LspLevel                        string   `protobuf:"bytes,11,opt,name=lsp_level,json=lspLevel,proto3" json:"lsp_level,omitempty"`
	LspLength                       uint32   `protobuf:"varint,12,opt,name=lsp_length,json=lspLength,proto3" json:"lsp_length,omitempty"`
	MaxAreaAddresses                uint32   `protobuf:"varint,13,opt,name=max_area_addresses,json=maxAreaAddresses,proto3" json:"max_area_addresses,omitempty"`
	IdLength                        uint32   `protobuf:"varint,14,opt,name=id_length,json=idLength,proto3" json:"id_length,omitempty"`
	Version                         uint32   `protobuf:"varint,15,opt,name=version,proto3" json:"version,omitempty"`
	Version2                        uint32   `protobuf:"varint,16,opt,name=version2,proto3" json:"version2,omitempty"`
	XXX_NoUnkeyedLiteral            struct{} `json:"-"`
	XXX_unrecognized                []byte   `json:"-"`
	XXX_sizecache                   int32    `json:"-"`
}

func (m *IsisShLspHeader) Reset()         { *m = IsisShLspHeader{} }
func (m *IsisShLspHeader) String() string { return proto.CompactTextString(m) }
func (*IsisShLspHeader) ProtoMessage()    {}
func (*IsisShLspHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_a4dc830fe33b9450, []int{1}
}

func (m *IsisShLspHeader) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IsisShLspHeader.Unmarshal(m, b)
}
func (m *IsisShLspHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IsisShLspHeader.Marshal(b, m, deterministic)
}
func (m *IsisShLspHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IsisShLspHeader.Merge(m, src)
}
func (m *IsisShLspHeader) XXX_Size() int {
	return xxx_messageInfo_IsisShLspHeader.Size(m)
}
func (m *IsisShLspHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_IsisShLspHeader.DiscardUnknown(m)
}

var xxx_messageInfo_IsisShLspHeader proto.InternalMessageInfo

func (m *IsisShLspHeader) GetLspId() string {
	if m != nil {
		return m.LspId
	}
	return ""
}

func (m *IsisShLspHeader) GetLocalLspFlag() bool {
	if m != nil {
		return m.LocalLspFlag
	}
	return false
}

func (m *IsisShLspHeader) GetLspActiveFlag() bool {
	if m != nil {
		return m.LspActiveFlag
	}
	return false
}

func (m *IsisShLspHeader) GetLspHoldtime() uint32 {
	if m != nil {
		return m.LspHoldtime
	}
	return 0
}

func (m *IsisShLspHeader) GetLspSequenceNumber() uint32 {
	if m != nil {
		return m.LspSequenceNumber
	}
	return 0
}

func (m *IsisShLspHeader) GetLspChecksum() uint32 {
	if m != nil {
		return m.LspChecksum
	}
	return 0
}

func (m *IsisShLspHeader) GetLspPartitionRepairSupportedFlag() bool {
	if m != nil {
		return m.LspPartitionRepairSupportedFlag
	}
	return false
}

func (m *IsisShLspHeader) GetLspAttachedFlag() bool {
	if m != nil {
		return m.LspAttachedFlag
	}
	return false
}

func (m *IsisShLspHeader) GetLspOverloadedFlag() bool {
	if m != nil {
		return m.LspOverloadedFlag
	}
	return false
}

func (m *IsisShLspHeader) GetLspNonv1AFlag() uint32 {
	if m != nil {
		return m.LspNonv1AFlag
	}
	return 0
}

func (m *IsisShLspHeader) GetLspLevel() string {
	if m != nil {
		return m.LspLevel
	}
	return ""
}

func (m *IsisShLspHeader) GetLspLength() uint32 {
	if m != nil {
		return m.LspLength
	}
	return 0
}

func (m *IsisShLspHeader) GetMaxAreaAddresses() uint32 {
	if m != nil {
		return m.MaxAreaAddresses
	}
	return 0
}

func (m *IsisShLspHeader) GetIdLength() uint32 {
	if m != nil {
		return m.IdLength
	}
	return 0
}

func (m *IsisShLspHeader) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *IsisShLspHeader) GetVersion2() uint32 {
	if m != nil {
		return m.Version2
	}
	return 0
}

type IsisShLsp struct {
	LspHeaderData        *IsisShLspHeader `protobuf:"bytes,50,opt,name=lsp_header_data,json=lspHeaderData,proto3" json:"lsp_header_data,omitempty"`
	LspBody              []byte           `protobuf:"bytes,51,opt,name=lsp_body,json=lspBody,proto3" json:"lsp_body,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *IsisShLsp) Reset()         { *m = IsisShLsp{} }
func (m *IsisShLsp) String() string { return proto.CompactTextString(m) }
func (*IsisShLsp) ProtoMessage()    {}
func (*IsisShLsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_a4dc830fe33b9450, []int{2}
}

func (m *IsisShLsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IsisShLsp.Unmarshal(m, b)
}
func (m *IsisShLsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IsisShLsp.Marshal(b, m, deterministic)
}
func (m *IsisShLsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IsisShLsp.Merge(m, src)
}
func (m *IsisShLsp) XXX_Size() int {
	return xxx_messageInfo_IsisShLsp.Size(m)
}
func (m *IsisShLsp) XXX_DiscardUnknown() {
	xxx_messageInfo_IsisShLsp.DiscardUnknown(m)
}

var xxx_messageInfo_IsisShLsp proto.InternalMessageInfo

func (m *IsisShLsp) GetLspHeaderData() *IsisShLspHeader {
	if m != nil {
		return m.LspHeaderData
	}
	return nil
}

func (m *IsisShLsp) GetLspBody() []byte {
	if m != nil {
		return m.LspBody
	}
	return nil
}

func init() {
	proto.RegisterType((*IsisShLsp_KEYS)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.levels.level.lsps.lsp.isis_sh_lsp_KEYS")
	proto.RegisterType((*IsisShLspHeader)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.levels.level.lsps.lsp.isis_sh_lsp_header")
	proto.RegisterType((*IsisShLsp)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.levels.level.lsps.lsp.isis_sh_lsp")
}

func init() { proto.RegisterFile("isis_sh_lsp.proto", fileDescriptor_a4dc830fe33b9450) }

var fileDescriptor_a4dc830fe33b9450 = []byte{
	// 543 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x93, 0xdd, 0x6e, 0x13, 0x3d,
	0x10, 0x86, 0xb5, 0x5f, 0xdb, 0xfc, 0x38, 0x49, 0x9b, 0xf8, 0x03, 0xc9, 0x80, 0x10, 0x21, 0x45,
	0x28, 0x42, 0x68, 0x25, 0xd2, 0x2b, 0x08, 0x7f, 0x6a, 0x45, 0x14, 0x50, 0x72, 0xc4, 0x01, 0xb2,
	0x9c, 0xb5, 0x49, 0x2c, 0xbc, 0x6b, 0xe3, 0x71, 0xa2, 0xf4, 0x02, 0xb8, 0x1f, 0xae, 0x10, 0x21,
	0xcf, 0xee, 0x96, 0x95, 0x38, 0xe5, 0x24, 0xb1, 0xdf, 0x79, 0xe6, 0x9d, 0x9d, 0xb1, 0x4d, 0x46,
	0x1a, 0x34, 0x70, 0xd8, 0x71, 0x03, 0x2e, 0x75, 0xde, 0x06, 0x4b, 0x6f, 0x32, 0x0d, 0x99, 0xe5,
	0xda, 0x02, 0x3f, 0x7a, 0x9e, 0x99, 0x02, 0x38, 0x42, 0xd6, 0x29, 0x9f, 0xc6, 0x55, 0xaa, 0x0b,
	0x08, 0xa2, 0xc8, 0xd4, 0x9f, 0x55, 0x6a, 0xd4, 0x41, 0x19, 0x28, 0xff, 0x52, 0x03, 0x0e, 0xe2,
	0xcf, 0x44, 0x92, 0x61, 0xc3, 0x9f, 0x7f, 0x78, 0xf7, 0x79, 0x4d, 0x2f, 0xc9, 0xa0, 0xce, 0xe2,
	0x85, 0xc8, 0x15, 0x4b, 0xc6, 0xc9, 0xb4, 0xbb, 0xea, 0xd7, 0xe2, 0x52, 0xe4, 0x8a, 0xde, 0x23,
	0x67, 0x68, 0xc5, 0xfe, 0xc3, 0x60, 0xb9, 0xa1, 0xf7, 0x49, 0x2b, 0xda, 0x68, 0xc9, 0x4e, 0x2a,
	0x19, 0xdc, 0x8d, 0x9c, 0xfc, 0x3a, 0x25, 0xb4, 0x59, 0x66, 0xa7, 0x84, 0x54, 0xbe, 0x41, 0x27,
	0x0d, 0x9a, 0x3e, 0x23, 0xe7, 0xc6, 0x66, 0xc2, 0x20, 0xfa, 0xd5, 0x88, 0x2d, 0xd6, 0xe8, 0xac,
	0xfa, 0xa8, 0x2e, 0xc0, 0xbd, 0x37, 0x62, 0x4b, 0x9f, 0x93, 0x8b, 0x18, 0x17, 0x59, 0xd0, 0x07,
	0x55, 0x62, 0x27, 0x88, 0x0d, 0x0c, 0xb8, 0x39, 0xaa, 0xc8, 0x3d, 0x25, 0x7d, 0x2c, 0x69, 0x8d,
	0x0c, 0x3a, 0x57, 0xec, 0x74, 0x9c, 0x4c, 0x07, 0xab, 0x9e, 0x01, 0x77, 0x5d, 0x49, 0x34, 0x25,
	0xff, 0x47, 0x04, 0xd4, 0xf7, 0xbd, 0xc2, 0xa6, 0xf7, 0xf9, 0x46, 0x79, 0x76, 0x86, 0xe4, 0xc8,
	0x80, 0x5b, 0x57, 0x91, 0x25, 0x06, 0x6a, 0xcb, 0x6c, 0xa7, 0xb2, 0x6f, 0xb0, 0xcf, 0x59, 0xeb,
	0xce, 0xf2, 0x4d, 0x25, 0xd1, 0x05, 0xb9, 0x8c, 0x88, 0x13, 0x3e, 0xe8, 0xa0, 0x6d, 0xc1, 0xbd,
	0x72, 0x42, 0x7b, 0x0e, 0x7b, 0xe7, 0xac, 0x0f, 0x4a, 0x96, 0x5f, 0xdc, 0xc6, 0x2f, 0x7e, 0x62,
	0xc0, 0x7d, 0xaa, 0xc9, 0x15, 0x82, 0xeb, 0x9a, 0xc3, 0x1e, 0x5e, 0x90, 0x11, 0xf6, 0x1a, 0x82,
	0xc8, 0x76, 0x75, 0x6e, 0x07, 0x73, 0xe3, 0x10, 0xe6, 0x95, 0x8e, 0x6c, 0xd5, 0x8c, 0x3d, 0x28,
	0x6f, 0xac, 0x90, 0x35, 0xdd, 0x45, 0x3a, 0xda, 0x7c, 0xbc, 0x8b, 0x34, 0xe7, 0x58, 0xd8, 0xe2,
	0xf0, 0x4a, 0x94, 0x2c, 0xc1, 0x7e, 0xe2, 0x1c, 0x97, 0xa8, 0x22, 0xf7, 0x88, 0x74, 0x23, 0x57,
	0x1e, 0x7a, 0x0f, 0xcf, 0xab, 0x63, 0xc0, 0x2d, 0xf0, 0xdc, 0x1f, 0x13, 0x52, 0x06, 0x8b, 0x6d,
	0xd8, 0xb1, 0x3e, 0xe6, 0x77, 0x31, 0x1a, 0x05, 0xfa, 0x92, 0xd0, 0x5c, 0x1c, 0xb9, 0xf0, 0x4a,
	0x70, 0x21, 0xa5, 0x57, 0x00, 0x0a, 0xd8, 0x00, 0xb1, 0x61, 0x2e, 0x8e, 0x73, 0xaf, 0xc4, 0xbc,
	0xd6, 0x63, 0x25, 0x2d, 0x6b, 0xaf, 0x73, 0x84, 0x3a, 0x5a, 0x56, 0x56, 0x8c, 0xb4, 0x0f, 0xca,
	0x83, 0xb6, 0x05, 0xbb, 0xc0, 0x50, 0xbd, 0xa5, 0x0f, 0x49, 0xa7, 0x5a, 0xce, 0xd8, 0xb0, 0xcc,
	0xaa, 0xf7, 0x93, 0x9f, 0x09, 0xe9, 0x35, 0x2e, 0x20, 0xfd, 0x91, 0x94, 0x5d, 0x97, 0x17, 0x91,
	0x4b, 0x11, 0x04, 0x9b, 0x8d, 0x93, 0x69, 0x6f, 0xf6, 0x25, 0xfd, 0x67, 0x8f, 0x2b, 0xfd, 0xfb,
	0xca, 0xe3, 0x50, 0xaf, 0x71, 0xf9, 0x56, 0x04, 0x41, 0x1f, 0x90, 0x38, 0x43, 0xbe, 0xb1, 0xf2,
	0x96, 0x5d, 0x8d, 0x93, 0x69, 0x7f, 0xd5, 0x36, 0xe0, 0x5e, 0x5b, 0x79, 0xbb, 0x69, 0xe1, 0x5b,
	0xbf, 0xfa, 0x1d, 0x00, 0x00, 0xff, 0xff, 0x97, 0x59, 0x88, 0xad, 0x00, 0x04, 0x00, 0x00,
}
