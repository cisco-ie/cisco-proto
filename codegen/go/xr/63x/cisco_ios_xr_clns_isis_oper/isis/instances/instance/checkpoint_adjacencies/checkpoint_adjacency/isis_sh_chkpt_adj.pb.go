/*
Copyright 2019 Cisco Systems

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: isis_sh_chkpt_adj.proto

package cisco_ios_xr_clns_isis_oper_isis_instances_instance_checkpoint_adjacencies_checkpoint_adjacency

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type IsisShChkptAdj_KEYS struct {
	InstanceName         string   `protobuf:"bytes,1,opt,name=instance_name,json=instanceName,proto3" json:"instance_name,omitempty"`
	Level                string   `protobuf:"bytes,2,opt,name=level,proto3" json:"level,omitempty"`
	SystemId             string   `protobuf:"bytes,3,opt,name=system_id,json=systemId,proto3" json:"system_id,omitempty"`
	InterfaceName        string   `protobuf:"bytes,4,opt,name=interface_name,json=interfaceName,proto3" json:"interface_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IsisShChkptAdj_KEYS) Reset()         { *m = IsisShChkptAdj_KEYS{} }
func (m *IsisShChkptAdj_KEYS) String() string { return proto.CompactTextString(m) }
func (*IsisShChkptAdj_KEYS) ProtoMessage()    {}
func (*IsisShChkptAdj_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_00bafb0ca22b5830, []int{0}
}

func (m *IsisShChkptAdj_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IsisShChkptAdj_KEYS.Unmarshal(m, b)
}
func (m *IsisShChkptAdj_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IsisShChkptAdj_KEYS.Marshal(b, m, deterministic)
}
func (m *IsisShChkptAdj_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IsisShChkptAdj_KEYS.Merge(m, src)
}
func (m *IsisShChkptAdj_KEYS) XXX_Size() int {
	return xxx_messageInfo_IsisShChkptAdj_KEYS.Size(m)
}
func (m *IsisShChkptAdj_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_IsisShChkptAdj_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_IsisShChkptAdj_KEYS proto.InternalMessageInfo

func (m *IsisShChkptAdj_KEYS) GetInstanceName() string {
	if m != nil {
		return m.InstanceName
	}
	return ""
}

func (m *IsisShChkptAdj_KEYS) GetLevel() string {
	if m != nil {
		return m.Level
	}
	return ""
}

func (m *IsisShChkptAdj_KEYS) GetSystemId() string {
	if m != nil {
		return m.SystemId
	}
	return ""
}

func (m *IsisShChkptAdj_KEYS) GetInterfaceName() string {
	if m != nil {
		return m.InterfaceName
	}
	return ""
}

type IsisIpAddrType struct {
	AfName               string   `protobuf:"bytes,1,opt,name=af_name,json=afName,proto3" json:"af_name,omitempty"`
	Ipv4                 string   `protobuf:"bytes,2,opt,name=ipv4,proto3" json:"ipv4,omitempty"`
	Ipv6                 string   `protobuf:"bytes,3,opt,name=ipv6,proto3" json:"ipv6,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IsisIpAddrType) Reset()         { *m = IsisIpAddrType{} }
func (m *IsisIpAddrType) String() string { return proto.CompactTextString(m) }
func (*IsisIpAddrType) ProtoMessage()    {}
func (*IsisIpAddrType) Descriptor() ([]byte, []int) {
	return fileDescriptor_00bafb0ca22b5830, []int{1}
}

func (m *IsisIpAddrType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IsisIpAddrType.Unmarshal(m, b)
}
func (m *IsisIpAddrType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IsisIpAddrType.Marshal(b, m, deterministic)
}
func (m *IsisIpAddrType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IsisIpAddrType.Merge(m, src)
}
func (m *IsisIpAddrType) XXX_Size() int {
	return xxx_messageInfo_IsisIpAddrType.Size(m)
}
func (m *IsisIpAddrType) XXX_DiscardUnknown() {
	xxx_messageInfo_IsisIpAddrType.DiscardUnknown(m)
}

var xxx_messageInfo_IsisIpAddrType proto.InternalMessageInfo

func (m *IsisIpAddrType) GetAfName() string {
	if m != nil {
		return m.AfName
	}
	return ""
}

func (m *IsisIpAddrType) GetIpv4() string {
	if m != nil {
		return m.Ipv4
	}
	return ""
}

func (m *IsisIpAddrType) GetIpv6() string {
	if m != nil {
		return m.Ipv6
	}
	return ""
}

type IsisShChkptAdj struct {
	CheckpointAdjacencyObjectId                uint32            `protobuf:"varint,50,opt,name=checkpoint_adjacency_object_id,json=checkpointAdjacencyObjectId,proto3" json:"checkpoint_adjacency_object_id,omitempty"`
	CheckpointAdjacencySystemId                string            `protobuf:"bytes,51,opt,name=checkpoint_adjacency_system_id,json=checkpointAdjacencySystemId,proto3" json:"checkpoint_adjacency_system_id,omitempty"`
	CheckpointAdjacencySnpa                    string            `protobuf:"bytes,52,opt,name=checkpoint_adjacency_snpa,json=checkpointAdjacencySnpa,proto3" json:"checkpoint_adjacency_snpa,omitempty"`
	CheckpointAdjacencyInterface               string            `protobuf:"bytes,53,opt,name=checkpoint_adjacency_interface,json=checkpointAdjacencyInterface,proto3" json:"checkpoint_adjacency_interface,omitempty"`
	CheckpointAdjacencyLevel                   string            `protobuf:"bytes,54,opt,name=checkpoint_adjacency_level,json=checkpointAdjacencyLevel,proto3" json:"checkpoint_adjacency_level,omitempty"`
	CheckpointAdjacencyHoldtime                uint32            `protobuf:"varint,55,opt,name=checkpoint_adjacency_holdtime,json=checkpointAdjacencyHoldtime,proto3" json:"checkpoint_adjacency_holdtime,omitempty"`
	CheckpointAdjacencyLanPriority             uint32            `protobuf:"varint,56,opt,name=checkpoint_adjacency_lan_priority,json=checkpointAdjacencyLanPriority,proto3" json:"checkpoint_adjacency_lan_priority,omitempty"`
	CheckpointAdjacencyCircuitNumber           uint32            `protobuf:"varint,57,opt,name=checkpoint_adjacency_circuit_number,json=checkpointAdjacencyCircuitNumber,proto3" json:"checkpoint_adjacency_circuit_number,omitempty"`
	CheckpointAdjacencyPerAddressFamilyNextHop []*IsisIpAddrType `protobuf:"bytes,58,rep,name=checkpoint_adjacency_per_address_family_next_hop,json=checkpointAdjacencyPerAddressFamilyNextHop,proto3" json:"checkpoint_adjacency_per_address_family_next_hop,omitempty"`
	XXX_NoUnkeyedLiteral                       struct{}          `json:"-"`
	XXX_unrecognized                           []byte            `json:"-"`
	XXX_sizecache                              int32             `json:"-"`
}

func (m *IsisShChkptAdj) Reset()         { *m = IsisShChkptAdj{} }
func (m *IsisShChkptAdj) String() string { return proto.CompactTextString(m) }
func (*IsisShChkptAdj) ProtoMessage()    {}
func (*IsisShChkptAdj) Descriptor() ([]byte, []int) {
	return fileDescriptor_00bafb0ca22b5830, []int{2}
}

func (m *IsisShChkptAdj) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IsisShChkptAdj.Unmarshal(m, b)
}
func (m *IsisShChkptAdj) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IsisShChkptAdj.Marshal(b, m, deterministic)
}
func (m *IsisShChkptAdj) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IsisShChkptAdj.Merge(m, src)
}
func (m *IsisShChkptAdj) XXX_Size() int {
	return xxx_messageInfo_IsisShChkptAdj.Size(m)
}
func (m *IsisShChkptAdj) XXX_DiscardUnknown() {
	xxx_messageInfo_IsisShChkptAdj.DiscardUnknown(m)
}

var xxx_messageInfo_IsisShChkptAdj proto.InternalMessageInfo

func (m *IsisShChkptAdj) GetCheckpointAdjacencyObjectId() uint32 {
	if m != nil {
		return m.CheckpointAdjacencyObjectId
	}
	return 0
}

func (m *IsisShChkptAdj) GetCheckpointAdjacencySystemId() string {
	if m != nil {
		return m.CheckpointAdjacencySystemId
	}
	return ""
}

func (m *IsisShChkptAdj) GetCheckpointAdjacencySnpa() string {
	if m != nil {
		return m.CheckpointAdjacencySnpa
	}
	return ""
}

func (m *IsisShChkptAdj) GetCheckpointAdjacencyInterface() string {
	if m != nil {
		return m.CheckpointAdjacencyInterface
	}
	return ""
}

func (m *IsisShChkptAdj) GetCheckpointAdjacencyLevel() string {
	if m != nil {
		return m.CheckpointAdjacencyLevel
	}
	return ""
}

func (m *IsisShChkptAdj) GetCheckpointAdjacencyHoldtime() uint32 {
	if m != nil {
		return m.CheckpointAdjacencyHoldtime
	}
	return 0
}

func (m *IsisShChkptAdj) GetCheckpointAdjacencyLanPriority() uint32 {
	if m != nil {
		return m.CheckpointAdjacencyLanPriority
	}
	return 0
}

func (m *IsisShChkptAdj) GetCheckpointAdjacencyCircuitNumber() uint32 {
	if m != nil {
		return m.CheckpointAdjacencyCircuitNumber
	}
	return 0
}

func (m *IsisShChkptAdj) GetCheckpointAdjacencyPerAddressFamilyNextHop() []*IsisIpAddrType {
	if m != nil {
		return m.CheckpointAdjacencyPerAddressFamilyNextHop
	}
	return nil
}

func init() {
	proto.RegisterType((*IsisShChkptAdj_KEYS)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.checkpoint_adjacencies.checkpoint_adjacency.isis_sh_chkpt_adj_KEYS")
	proto.RegisterType((*IsisIpAddrType)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.checkpoint_adjacencies.checkpoint_adjacency.isis_ip_addr_type")
	proto.RegisterType((*IsisShChkptAdj)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.checkpoint_adjacencies.checkpoint_adjacency.isis_sh_chkpt_adj")
}

func init() { proto.RegisterFile("isis_sh_chkpt_adj.proto", fileDescriptor_00bafb0ca22b5830) }

var fileDescriptor_00bafb0ca22b5830 = []byte{
	// 481 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x94, 0xd1, 0x6e, 0xd3, 0x30,
	0x14, 0x86, 0x15, 0x36, 0x0a, 0x33, 0x14, 0x09, 0x0b, 0x51, 0xc3, 0x60, 0x2a, 0x9d, 0x90, 0x2a,
	0x2e, 0x22, 0xb4, 0x8d, 0x01, 0x13, 0x37, 0x63, 0x80, 0x56, 0x01, 0x65, 0xea, 0xb8, 0xe1, 0xca,
	0x72, 0x9d, 0x53, 0xc5, 0x5b, 0x62, 0x5b, 0xb6, 0x37, 0x35, 0x2f, 0x02, 0xaf, 0xc6, 0xe3, 0xa0,
	0x9e, 0x24, 0xeb, 0xa4, 0xb9, 0x97, 0xdc, 0x9d, 0x1c, 0xff, 0xfe, 0xf2, 0x9f, 0xdf, 0x71, 0x48,
	0x4f, 0x79, 0xe5, 0xb9, 0xcf, 0xb9, 0xcc, 0xcf, 0x6d, 0xe0, 0x22, 0x3b, 0x4b, 0xad, 0x33, 0xc1,
	0x50, 0x2e, 0x95, 0x97, 0x86, 0x2b, 0xe3, 0xf9, 0xdc, 0x71, 0x59, 0x68, 0xcf, 0x51, 0x6a, 0x2c,
	0xb8, 0x74, 0x51, 0xa5, 0x4a, 0xfb, 0x20, 0xb4, 0x84, 0x65, 0x95, 0xca, 0x1c, 0xe4, 0xb9, 0x35,
	0x4a, 0x23, 0x49, 0x48, 0xd0, 0x52, 0x81, 0x8f, 0xb5, 0xab, 0xc1, 0x9f, 0x84, 0x3c, 0xbe, 0xf1,
	0x72, 0xfe, 0xf5, 0xf3, 0xaf, 0x53, 0xba, 0x4d, 0xba, 0x2d, 0x92, 0x6b, 0x51, 0x02, 0x4b, 0xfa,
	0xc9, 0x70, 0x63, 0x72, 0xbf, 0x6d, 0x8e, 0x45, 0x09, 0xf4, 0x11, 0xb9, 0x5d, 0xc0, 0x25, 0x14,
	0xec, 0x16, 0x2e, 0xd6, 0x0f, 0x74, 0x93, 0x6c, 0xf8, 0xca, 0x07, 0x28, 0xb9, 0xca, 0xd8, 0x1a,
	0xae, 0xdc, 0xad, 0x1b, 0xa3, 0x8c, 0xbe, 0x24, 0x0f, 0x94, 0x0e, 0xe0, 0x66, 0xa2, 0x05, 0xaf,
	0xa3, 0xa2, 0x7b, 0xd5, 0x5d, 0x90, 0x07, 0x3f, 0xc9, 0x43, 0x34, 0xa6, 0x2c, 0x17, 0x59, 0xe6,
	0x78, 0xa8, 0x2c, 0xd0, 0x1e, 0xb9, 0x23, 0x66, 0xd7, 0xdd, 0x74, 0xc4, 0x0c, 0x7d, 0x50, 0xb2,
	0xae, 0xec, 0xe5, 0x5e, 0x63, 0x03, 0xeb, 0xa6, 0xb7, 0xdf, 0x18, 0xc0, 0x7a, 0xf0, 0xbb, 0xd3,
	0x60, 0xaf, 0xcf, 0x4b, 0x8f, 0xc8, 0x56, 0x2c, 0x1d, 0x6e, 0xa6, 0x67, 0x20, 0xc3, 0x62, 0x88,
	0x9d, 0x7e, 0x32, 0xec, 0x4e, 0x36, 0x97, 0xaa, 0xc3, 0x56, 0xf4, 0x03, 0x35, 0xa3, 0x6c, 0x25,
	0x64, 0x99, 0xc4, 0x2e, 0x1a, 0x89, 0x41, 0x4e, 0xdb, 0x70, 0x0e, 0xc8, 0x93, 0x38, 0x44, 0x5b,
	0xc1, 0xf6, 0x70, 0x7f, 0x2f, 0xb6, 0x5f, 0x5b, 0x41, 0x3f, 0xad, 0x30, 0x70, 0x95, 0x2b, 0x7b,
	0x83, 0x80, 0x67, 0x11, 0xc0, 0xa8, 0xd5, 0xd0, 0x0f, 0xe4, 0x69, 0x94, 0x52, 0x1f, 0xf3, 0x3e,
	0x12, 0x58, 0x84, 0xf0, 0x0d, 0x4f, 0xfe, 0x23, 0x79, 0x1e, 0xdd, 0x9d, 0x9b, 0x22, 0x0b, 0xaa,
	0x04, 0xf6, 0x76, 0x65, 0x90, 0xc7, 0x8d, 0x84, 0x8e, 0xc8, 0x8b, 0xb8, 0x03, 0xa1, 0xb9, 0x75,
	0xca, 0x38, 0x15, 0x2a, 0xf6, 0x0e, 0x39, 0x5b, 0x31, 0x23, 0x42, 0x9f, 0x34, 0x2a, 0xfa, 0x9d,
	0x6c, 0x47, 0x51, 0x52, 0x39, 0x79, 0xa1, 0x02, 0xd7, 0x17, 0xe5, 0x14, 0x1c, 0x7b, 0x8f, 0xb0,
	0x7e, 0x04, 0x76, 0x54, 0x0b, 0xc7, 0xa8, 0xa3, 0x7f, 0x13, 0xf2, 0x3a, 0xca, 0xb3, 0xe0, 0xf0,
	0x2b, 0x05, 0xef, 0xf9, 0x4c, 0x94, 0xaa, 0xa8, 0xb8, 0x86, 0x79, 0xe0, 0xb9, 0xb1, 0xec, 0xa0,
	0xbf, 0x36, 0xbc, 0xb7, 0xe3, 0xd2, 0xff, 0x7c, 0x95, 0xd3, 0x1b, 0xb7, 0x65, 0xf2, 0x2a, 0x32,
	0xd0, 0x09, 0xb8, 0xc3, 0xda, 0xe8, 0x17, 0xf4, 0x39, 0x86, 0x79, 0x38, 0x36, 0x76, 0xda, 0xc1,
	0x1f, 0xce, 0xee, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x9c, 0xab, 0xae, 0xe9, 0x8b, 0x04, 0x00,
	0x00,
}
