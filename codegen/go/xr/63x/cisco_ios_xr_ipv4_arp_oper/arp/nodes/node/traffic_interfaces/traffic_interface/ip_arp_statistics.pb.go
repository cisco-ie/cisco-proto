/*
Copyright 2019 Cisco Systems

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ip_arp_statistics.proto

package cisco_ios_xr_ipv4_arp_oper_arp_nodes_node_traffic_interfaces_traffic_interface

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type IpArpStatistics_KEYS struct {
	NodeName             string   `protobuf:"bytes,1,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	InterfaceName        string   `protobuf:"bytes,2,opt,name=interface_name,json=interfaceName,proto3" json:"interface_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IpArpStatistics_KEYS) Reset()         { *m = IpArpStatistics_KEYS{} }
func (m *IpArpStatistics_KEYS) String() string { return proto.CompactTextString(m) }
func (*IpArpStatistics_KEYS) ProtoMessage()    {}
func (*IpArpStatistics_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_394adc8d84b7147b, []int{0}
}

func (m *IpArpStatistics_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IpArpStatistics_KEYS.Unmarshal(m, b)
}
func (m *IpArpStatistics_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IpArpStatistics_KEYS.Marshal(b, m, deterministic)
}
func (m *IpArpStatistics_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IpArpStatistics_KEYS.Merge(m, src)
}
func (m *IpArpStatistics_KEYS) XXX_Size() int {
	return xxx_messageInfo_IpArpStatistics_KEYS.Size(m)
}
func (m *IpArpStatistics_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_IpArpStatistics_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_IpArpStatistics_KEYS proto.InternalMessageInfo

func (m *IpArpStatistics_KEYS) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

func (m *IpArpStatistics_KEYS) GetInterfaceName() string {
	if m != nil {
		return m.InterfaceName
	}
	return ""
}

type IpArpStatistics struct {
	RequestsReceived              uint32   `protobuf:"varint,50,opt,name=requests_received,json=requestsReceived,proto3" json:"requests_received,omitempty"`
	RepliesReceived               uint32   `protobuf:"varint,51,opt,name=replies_received,json=repliesReceived,proto3" json:"replies_received,omitempty"`
	RequestsSent                  uint32   `protobuf:"varint,52,opt,name=requests_sent,json=requestsSent,proto3" json:"requests_sent,omitempty"`
	RepliesSent                   uint32   `protobuf:"varint,53,opt,name=replies_sent,json=repliesSent,proto3" json:"replies_sent,omitempty"`
	ProxyRepliesSent              uint32   `protobuf:"varint,54,opt,name=proxy_replies_sent,json=proxyRepliesSent,proto3" json:"proxy_replies_sent,omitempty"`
	SubscrRequestsReceived        uint32   `protobuf:"varint,55,opt,name=subscr_requests_received,json=subscrRequestsReceived,proto3" json:"subscr_requests_received,omitempty"`
	SubscrRepliesSent             uint32   `protobuf:"varint,56,opt,name=subscr_replies_sent,json=subscrRepliesSent,proto3" json:"subscr_replies_sent,omitempty"`
	SubscrRepliesGratgSent        uint32   `protobuf:"varint,57,opt,name=subscr_replies_gratg_sent,json=subscrRepliesGratgSent,proto3" json:"subscr_replies_gratg_sent,omitempty"`
	LocalProxyRepliesSent         uint32   `protobuf:"varint,58,opt,name=local_proxy_replies_sent,json=localProxyRepliesSent,proto3" json:"local_proxy_replies_sent,omitempty"`
	GratuitousRepliesSent         uint32   `protobuf:"varint,59,opt,name=gratuitous_replies_sent,json=gratuitousRepliesSent,proto3" json:"gratuitous_replies_sent,omitempty"`
	ResolutionRequestsReceived    uint32   `protobuf:"varint,60,opt,name=resolution_requests_received,json=resolutionRequestsReceived,proto3" json:"resolution_requests_received,omitempty"`
	ResolutionRepliesReceived     uint32   `protobuf:"varint,61,opt,name=resolution_replies_received,json=resolutionRepliesReceived,proto3" json:"resolution_replies_received,omitempty"`
	ResolutionRequestsDropped     uint32   `protobuf:"varint,62,opt,name=resolution_requests_dropped,json=resolutionRequestsDropped,proto3" json:"resolution_requests_dropped,omitempty"`
	OutOfMemoryErrors             uint32   `protobuf:"varint,63,opt,name=out_of_memory_errors,json=outOfMemoryErrors,proto3" json:"out_of_memory_errors,omitempty"`
	NoBufferErrors                uint32   `protobuf:"varint,64,opt,name=no_buffer_errors,json=noBufferErrors,proto3" json:"no_buffer_errors,omitempty"`
	TotalEntries                  uint32   `protobuf:"varint,65,opt,name=total_entries,json=totalEntries,proto3" json:"total_entries,omitempty"`
	DynamicEntries                uint32   `protobuf:"varint,66,opt,name=dynamic_entries,json=dynamicEntries,proto3" json:"dynamic_entries,omitempty"`
	StaticEntries                 uint32   `protobuf:"varint,67,opt,name=static_entries,json=staticEntries,proto3" json:"static_entries,omitempty"`
	AliasEntries                  uint32   `protobuf:"varint,68,opt,name=alias_entries,json=aliasEntries,proto3" json:"alias_entries,omitempty"`
	InterfaceEntries              uint32   `protobuf:"varint,69,opt,name=interface_entries,json=interfaceEntries,proto3" json:"interface_entries,omitempty"`
	StandbyEntries                uint32   `protobuf:"varint,70,opt,name=standby_entries,json=standbyEntries,proto3" json:"standby_entries,omitempty"`
	DhcpEntries                   uint32   `protobuf:"varint,71,opt,name=dhcp_entries,json=dhcpEntries,proto3" json:"dhcp_entries,omitempty"`
	VxlanEntries                  uint32   `protobuf:"varint,72,opt,name=vxlan_entries,json=vxlanEntries,proto3" json:"vxlan_entries,omitempty"`
	IpPacketsDroppedNode          uint32   `protobuf:"varint,73,opt,name=ip_packets_dropped_node,json=ipPacketsDroppedNode,proto3" json:"ip_packets_dropped_node,omitempty"`
	ArpPacketNodeOutOfSubnet      uint32   `protobuf:"varint,74,opt,name=arp_packet_node_out_of_subnet,json=arpPacketNodeOutOfSubnet,proto3" json:"arp_packet_node_out_of_subnet,omitempty"`
	IpPacketsDroppedInterface     uint32   `protobuf:"varint,75,opt,name=ip_packets_dropped_interface,json=ipPacketsDroppedInterface,proto3" json:"ip_packets_dropped_interface,omitempty"`
	ArpPacketInterfaceOutOfSubnet uint32   `protobuf:"varint,76,opt,name=arp_packet_interface_out_of_subnet,json=arpPacketInterfaceOutOfSubnet,proto3" json:"arp_packet_interface_out_of_subnet,omitempty"`
	ArpPacketUnsolicitedPacket    uint32   `protobuf:"varint,77,opt,name=arp_packet_unsolicited_packet,json=arpPacketUnsolicitedPacket,proto3" json:"arp_packet_unsolicited_packet,omitempty"`
	IdbStructures                 uint32   `protobuf:"varint,78,opt,name=idb_structures,json=idbStructures,proto3" json:"idb_structures,omitempty"`
	XXX_NoUnkeyedLiteral          struct{} `json:"-"`
	XXX_unrecognized              []byte   `json:"-"`
	XXX_sizecache                 int32    `json:"-"`
}

func (m *IpArpStatistics) Reset()         { *m = IpArpStatistics{} }
func (m *IpArpStatistics) String() string { return proto.CompactTextString(m) }
func (*IpArpStatistics) ProtoMessage()    {}
func (*IpArpStatistics) Descriptor() ([]byte, []int) {
	return fileDescriptor_394adc8d84b7147b, []int{1}
}

func (m *IpArpStatistics) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IpArpStatistics.Unmarshal(m, b)
}
func (m *IpArpStatistics) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IpArpStatistics.Marshal(b, m, deterministic)
}
func (m *IpArpStatistics) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IpArpStatistics.Merge(m, src)
}
func (m *IpArpStatistics) XXX_Size() int {
	return xxx_messageInfo_IpArpStatistics.Size(m)
}
func (m *IpArpStatistics) XXX_DiscardUnknown() {
	xxx_messageInfo_IpArpStatistics.DiscardUnknown(m)
}

var xxx_messageInfo_IpArpStatistics proto.InternalMessageInfo

func (m *IpArpStatistics) GetRequestsReceived() uint32 {
	if m != nil {
		return m.RequestsReceived
	}
	return 0
}

func (m *IpArpStatistics) GetRepliesReceived() uint32 {
	if m != nil {
		return m.RepliesReceived
	}
	return 0
}

func (m *IpArpStatistics) GetRequestsSent() uint32 {
	if m != nil {
		return m.RequestsSent
	}
	return 0
}

func (m *IpArpStatistics) GetRepliesSent() uint32 {
	if m != nil {
		return m.RepliesSent
	}
	return 0
}

func (m *IpArpStatistics) GetProxyRepliesSent() uint32 {
	if m != nil {
		return m.ProxyRepliesSent
	}
	return 0
}

func (m *IpArpStatistics) GetSubscrRequestsReceived() uint32 {
	if m != nil {
		return m.SubscrRequestsReceived
	}
	return 0
}

func (m *IpArpStatistics) GetSubscrRepliesSent() uint32 {
	if m != nil {
		return m.SubscrRepliesSent
	}
	return 0
}

func (m *IpArpStatistics) GetSubscrRepliesGratgSent() uint32 {
	if m != nil {
		return m.SubscrRepliesGratgSent
	}
	return 0
}

func (m *IpArpStatistics) GetLocalProxyRepliesSent() uint32 {
	if m != nil {
		return m.LocalProxyRepliesSent
	}
	return 0
}

func (m *IpArpStatistics) GetGratuitousRepliesSent() uint32 {
	if m != nil {
		return m.GratuitousRepliesSent
	}
	return 0
}

func (m *IpArpStatistics) GetResolutionRequestsReceived() uint32 {
	if m != nil {
		return m.ResolutionRequestsReceived
	}
	return 0
}

func (m *IpArpStatistics) GetResolutionRepliesReceived() uint32 {
	if m != nil {
		return m.ResolutionRepliesReceived
	}
	return 0
}

func (m *IpArpStatistics) GetResolutionRequestsDropped() uint32 {
	if m != nil {
		return m.ResolutionRequestsDropped
	}
	return 0
}

func (m *IpArpStatistics) GetOutOfMemoryErrors() uint32 {
	if m != nil {
		return m.OutOfMemoryErrors
	}
	return 0
}

func (m *IpArpStatistics) GetNoBufferErrors() uint32 {
	if m != nil {
		return m.NoBufferErrors
	}
	return 0
}

func (m *IpArpStatistics) GetTotalEntries() uint32 {
	if m != nil {
		return m.TotalEntries
	}
	return 0
}

func (m *IpArpStatistics) GetDynamicEntries() uint32 {
	if m != nil {
		return m.DynamicEntries
	}
	return 0
}

func (m *IpArpStatistics) GetStaticEntries() uint32 {
	if m != nil {
		return m.StaticEntries
	}
	return 0
}

func (m *IpArpStatistics) GetAliasEntries() uint32 {
	if m != nil {
		return m.AliasEntries
	}
	return 0
}

func (m *IpArpStatistics) GetInterfaceEntries() uint32 {
	if m != nil {
		return m.InterfaceEntries
	}
	return 0
}

func (m *IpArpStatistics) GetStandbyEntries() uint32 {
	if m != nil {
		return m.StandbyEntries
	}
	return 0
}

func (m *IpArpStatistics) GetDhcpEntries() uint32 {
	if m != nil {
		return m.DhcpEntries
	}
	return 0
}

func (m *IpArpStatistics) GetVxlanEntries() uint32 {
	if m != nil {
		return m.VxlanEntries
	}
	return 0
}

func (m *IpArpStatistics) GetIpPacketsDroppedNode() uint32 {
	if m != nil {
		return m.IpPacketsDroppedNode
	}
	return 0
}

func (m *IpArpStatistics) GetArpPacketNodeOutOfSubnet() uint32 {
	if m != nil {
		return m.ArpPacketNodeOutOfSubnet
	}
	return 0
}

func (m *IpArpStatistics) GetIpPacketsDroppedInterface() uint32 {
	if m != nil {
		return m.IpPacketsDroppedInterface
	}
	return 0
}

func (m *IpArpStatistics) GetArpPacketInterfaceOutOfSubnet() uint32 {
	if m != nil {
		return m.ArpPacketInterfaceOutOfSubnet
	}
	return 0
}

func (m *IpArpStatistics) GetArpPacketUnsolicitedPacket() uint32 {
	if m != nil {
		return m.ArpPacketUnsolicitedPacket
	}
	return 0
}

func (m *IpArpStatistics) GetIdbStructures() uint32 {
	if m != nil {
		return m.IdbStructures
	}
	return 0
}

func init() {
	proto.RegisterType((*IpArpStatistics_KEYS)(nil), "cisco_ios_xr_ipv4_arp_oper.arp.nodes.node.traffic_interfaces.traffic_interface.ip_arp_statistics_KEYS")
	proto.RegisterType((*IpArpStatistics)(nil), "cisco_ios_xr_ipv4_arp_oper.arp.nodes.node.traffic_interfaces.traffic_interface.ip_arp_statistics")
}

func init() { proto.RegisterFile("ip_arp_statistics.proto", fileDescriptor_394adc8d84b7147b) }

var fileDescriptor_394adc8d84b7147b = []byte{
	// 710 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x95, 0xdb, 0x4f, 0xdb, 0x30,
	0x14, 0xc6, 0xc5, 0x1e, 0xa6, 0x71, 0xa0, 0x40, 0x33, 0x06, 0x61, 0x80, 0xc4, 0x45, 0x68, 0x4c,
	0x4c, 0x9d, 0x34, 0xee, 0xbb, 0x70, 0x1b, 0x1d, 0x63, 0x8c, 0x82, 0x5a, 0xed, 0x61, 0xd2, 0x24,
	0xcb, 0x4d, 0x5c, 0x66, 0x2d, 0xb5, 0x33, 0xdb, 0x41, 0xf4, 0x5f, 0xdb, 0x5f, 0x37, 0xe5, 0x38,
	0x71, 0x92, 0x96, 0x97, 0x3e, 0x7c, 0xdf, 0xef, 0x3b, 0xe7, 0x38, 0xbe, 0x14, 0xe6, 0x79, 0x4c,
	0xa8, 0x8a, 0x89, 0x36, 0xd4, 0x70, 0x6d, 0x78, 0xa0, 0x1b, 0xb1, 0x92, 0x46, 0x7a, 0xad, 0x80,
	0xeb, 0x40, 0x12, 0x2e, 0x35, 0x79, 0x50, 0x84, 0xc7, 0xf7, 0x3b, 0xc8, 0xc9, 0x98, 0xa9, 0x06,
	0x55, 0x71, 0x43, 0xc8, 0x90, 0x69, 0xfc, 0x6d, 0x18, 0x45, 0x7b, 0x3d, 0x1e, 0x10, 0x2e, 0x0c,
	0x53, 0x3d, 0x1a, 0x30, 0x3d, 0x2a, 0xad, 0xfd, 0x82, 0xb9, 0x91, 0x56, 0xe4, 0xaa, 0xf9, 0xb3,
	0xe3, 0x2d, 0xc2, 0x78, 0x5a, 0x86, 0x08, 0xda, 0x67, 0xfe, 0xd8, 0xca, 0xd8, 0xe6, 0x78, 0xfb,
	0x59, 0x2a, 0xb4, 0x68, 0x9f, 0x79, 0x1b, 0x30, 0xe5, 0x6a, 0x58, 0xe2, 0x09, 0x12, 0x35, 0xa7,
	0xa6, 0xd8, 0xda, 0xbf, 0x09, 0xa8, 0x8f, 0x94, 0xf7, 0xb6, 0xa0, 0xae, 0xd8, 0xdf, 0x84, 0x69,
	0xa3, 0x89, 0x62, 0x01, 0xe3, 0xf7, 0x2c, 0xf4, 0xdf, 0xad, 0x8c, 0x6d, 0xd6, 0xda, 0x33, 0xb9,
	0xd1, 0xce, 0x74, 0xef, 0x35, 0xcc, 0x28, 0x16, 0x47, 0x9c, 0x95, 0xd8, 0x6d, 0x64, 0xa7, 0x33,
	0xdd, 0xa1, 0xeb, 0x50, 0x73, 0x75, 0x35, 0x13, 0xc6, 0xdf, 0x41, 0x6e, 0x32, 0x17, 0x3b, 0x4c,
	0x18, 0x6f, 0x15, 0x26, 0xf3, 0x7a, 0xc8, 0xec, 0x22, 0x33, 0x91, 0x69, 0x88, 0xbc, 0x01, 0x2f,
	0x56, 0xf2, 0x61, 0x40, 0x2a, 0xe0, 0x9e, 0x1d, 0x10, 0x9d, 0x76, 0x89, 0x3e, 0x00, 0x5f, 0x27,
	0x5d, 0x1d, 0x28, 0x32, 0xba, 0xa8, 0x7d, 0xcc, 0xcc, 0x59, 0xbf, 0x3d, 0xbc, 0xb4, 0x06, 0x3c,
	0x77, 0xc9, 0x52, 0xa3, 0x03, 0x0c, 0xd5, 0xf3, 0x50, 0xd1, 0xe9, 0x10, 0x16, 0x86, 0xf8, 0x3b,
	0x45, 0xcd, 0x9d, 0x4d, 0x1d, 0x56, 0x5b, 0xa1, 0x7f, 0x91, 0xda, 0x18, 0xdd, 0x07, 0x3f, 0x92,
	0x01, 0x8d, 0xc8, 0x23, 0x0b, 0x7b, 0x8f, 0xc9, 0x17, 0xe8, 0xdf, 0x0e, 0xaf, 0x6e, 0x0f, 0xe6,
	0xd3, 0x26, 0x09, 0x37, 0x32, 0xd1, 0xd5, 0xdc, 0x07, 0x9b, 0x2b, 0xec, 0x72, 0xee, 0x04, 0x96,
	0x14, 0xd3, 0x32, 0x4a, 0x0c, 0x97, 0xe2, 0x91, 0x2f, 0xf3, 0x11, 0xc3, 0x2f, 0x0b, 0x66, 0xe4,
	0xeb, 0x1c, 0xc1, 0x62, 0xa5, 0xc2, 0xd0, 0x19, 0xf8, 0x84, 0x05, 0x16, 0xca, 0x05, 0xaa, 0xa7,
	0x61, 0x38, 0x9f, 0x4d, 0x10, 0x2a, 0x19, 0xc7, 0x2c, 0xf4, 0x8f, 0x46, 0xf3, 0x96, 0x38, 0xb7,
	0x80, 0xf7, 0x16, 0x66, 0x65, 0x62, 0x88, 0xec, 0x91, 0x3e, 0xeb, 0x4b, 0x35, 0x20, 0x4c, 0x29,
	0xa9, 0xb4, 0x7f, 0x6c, 0xb7, 0x47, 0x26, 0xe6, 0xa6, 0x77, 0x8d, 0x4e, 0x13, 0x0d, 0x6f, 0x13,
	0x66, 0x84, 0x24, 0xdd, 0xa4, 0xd7, 0x63, 0x2a, 0x87, 0x4f, 0x10, 0x9e, 0x12, 0xf2, 0x0c, 0xe5,
	0x8c, 0x5c, 0x87, 0x9a, 0x91, 0x86, 0x46, 0x84, 0x09, 0xa3, 0x38, 0xd3, 0xfe, 0xa9, 0x3d, 0xa8,
	0x28, 0x36, 0xad, 0xe6, 0xbd, 0x82, 0xe9, 0x70, 0x20, 0x68, 0x9f, 0x07, 0x0e, 0x3b, 0xb3, 0xd5,
	0x32, 0x39, 0x07, 0x37, 0x60, 0x0a, 0x2f, 0x57, 0xc1, 0x7d, 0x46, 0xae, 0x66, 0xd5, 0x1c, 0x5b,
	0x87, 0x1a, 0x8d, 0x38, 0xd5, 0x8e, 0x3a, 0xb7, 0x4d, 0x51, 0xcc, 0xa1, 0x2d, 0xa8, 0x17, 0xf7,
	0x3a, 0x07, 0x9b, 0xf6, 0xe4, 0x3b, 0xa3, 0x34, 0xa1, 0x36, 0x54, 0x84, 0xdd, 0x81, 0x43, 0xbf,
	0xd8, 0x09, 0x33, 0x39, 0x07, 0x57, 0x61, 0x32, 0xfc, 0x1d, 0xc4, 0x8e, 0xba, 0xb0, 0x77, 0x2e,
	0xd5, 0x4a, 0xd3, 0xdd, 0x3f, 0x44, 0x54, 0x38, 0xe6, 0xab, 0x9d, 0x0e, 0xc5, 0x1c, 0xda, 0xc5,
	0x77, 0x31, 0xa6, 0xc1, 0x1f, 0x56, 0xec, 0x24, 0x49, 0x1f, 0x25, 0xff, 0x12, 0xf1, 0x59, 0x1e,
	0xdf, 0x5a, 0x37, 0xdb, 0xc5, 0x96, 0x0c, 0x99, 0x77, 0x0c, 0xcb, 0xe9, 0x0b, 0x64, 0x73, 0x88,
	0x93, 0x6c, 0x67, 0x75, 0xd2, 0x15, 0xcc, 0xf8, 0xdf, 0x30, 0xec, 0x53, 0x95, 0xa5, 0xd3, 0xd4,
	0x4d, 0xba, 0xbf, 0x1d, 0xf4, 0xbd, 0x63, 0x58, 0x7a, 0xa4, 0xaf, 0xfb, 0x1e, 0xfe, 0x95, 0x3d,
	0x4b, 0xc3, 0xcd, 0x2f, 0x73, 0xc0, 0xbb, 0x84, 0xb5, 0xd2, 0x04, 0xc5, 0x17, 0xae, 0x8e, 0xf1,
	0x1d, 0xcb, 0x2c, 0xbb, 0x31, 0x5c, 0xbe, 0x3c, 0xcb, 0x69, 0x65, 0x31, 0x89, 0xd0, 0x32, 0xe2,
	0x01, 0x37, 0x2c, 0xcc, 0x24, 0xff, 0xda, 0xde, 0x2c, 0x57, 0xe5, 0x47, 0x81, 0x58, 0x01, 0x1f,
	0xef, 0xb0, 0x4b, 0xb4, 0x51, 0x49, 0x60, 0x12, 0xc5, 0xb4, 0xdf, 0xb2, 0x07, 0x86, 0x87, 0xdd,
	0x8e, 0x13, 0xbb, 0x4f, 0xf1, 0x1f, 0x67, 0xfb, 0x7f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x0e, 0x79,
	0x1d, 0x84, 0x8c, 0x06, 0x00, 0x00,
}
