/*
Copyright 2019 Cisco Systems

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: arp_gmp_vrf_entry.proto

package cisco_ios_xr_ipv4_arp_oper_arp_gmp_vrf_infos_vrf_info

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ArpGmpVrfEntry_KEYS struct {
	VrfName              string   `protobuf:"bytes,1,opt,name=vrf_name,json=vrfName,proto3" json:"vrf_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ArpGmpVrfEntry_KEYS) Reset()         { *m = ArpGmpVrfEntry_KEYS{} }
func (m *ArpGmpVrfEntry_KEYS) String() string { return proto.CompactTextString(m) }
func (*ArpGmpVrfEntry_KEYS) ProtoMessage()    {}
func (*ArpGmpVrfEntry_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_f938d3134b3fa89d, []int{0}
}

func (m *ArpGmpVrfEntry_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ArpGmpVrfEntry_KEYS.Unmarshal(m, b)
}
func (m *ArpGmpVrfEntry_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ArpGmpVrfEntry_KEYS.Marshal(b, m, deterministic)
}
func (m *ArpGmpVrfEntry_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArpGmpVrfEntry_KEYS.Merge(m, src)
}
func (m *ArpGmpVrfEntry_KEYS) XXX_Size() int {
	return xxx_messageInfo_ArpGmpVrfEntry_KEYS.Size(m)
}
func (m *ArpGmpVrfEntry_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_ArpGmpVrfEntry_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_ArpGmpVrfEntry_KEYS proto.InternalMessageInfo

func (m *ArpGmpVrfEntry_KEYS) GetVrfName() string {
	if m != nil {
		return m.VrfName
	}
	return ""
}

type ArpGmpVrfEntry struct {
	VrfNameXr            string   `protobuf:"bytes,50,opt,name=vrf_name_xr,json=vrfNameXr,proto3" json:"vrf_name_xr,omitempty"`
	VrfIdNumber          uint32   `protobuf:"varint,51,opt,name=vrf_id_number,json=vrfIdNumber,proto3" json:"vrf_id_number,omitempty"`
	TableId              uint32   `protobuf:"varint,52,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
	RsiHandle            uint32   `protobuf:"varint,53,opt,name=rsi_handle,json=rsiHandle,proto3" json:"rsi_handle,omitempty"`
	RsiHandleHigh        uint32   `protobuf:"varint,54,opt,name=rsi_handle_high,json=rsiHandleHigh,proto3" json:"rsi_handle_high,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ArpGmpVrfEntry) Reset()         { *m = ArpGmpVrfEntry{} }
func (m *ArpGmpVrfEntry) String() string { return proto.CompactTextString(m) }
func (*ArpGmpVrfEntry) ProtoMessage()    {}
func (*ArpGmpVrfEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_f938d3134b3fa89d, []int{1}
}

func (m *ArpGmpVrfEntry) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ArpGmpVrfEntry.Unmarshal(m, b)
}
func (m *ArpGmpVrfEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ArpGmpVrfEntry.Marshal(b, m, deterministic)
}
func (m *ArpGmpVrfEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArpGmpVrfEntry.Merge(m, src)
}
func (m *ArpGmpVrfEntry) XXX_Size() int {
	return xxx_messageInfo_ArpGmpVrfEntry.Size(m)
}
func (m *ArpGmpVrfEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_ArpGmpVrfEntry.DiscardUnknown(m)
}

var xxx_messageInfo_ArpGmpVrfEntry proto.InternalMessageInfo

func (m *ArpGmpVrfEntry) GetVrfNameXr() string {
	if m != nil {
		return m.VrfNameXr
	}
	return ""
}

func (m *ArpGmpVrfEntry) GetVrfIdNumber() uint32 {
	if m != nil {
		return m.VrfIdNumber
	}
	return 0
}

func (m *ArpGmpVrfEntry) GetTableId() uint32 {
	if m != nil {
		return m.TableId
	}
	return 0
}

func (m *ArpGmpVrfEntry) GetRsiHandle() uint32 {
	if m != nil {
		return m.RsiHandle
	}
	return 0
}

func (m *ArpGmpVrfEntry) GetRsiHandleHigh() uint32 {
	if m != nil {
		return m.RsiHandleHigh
	}
	return 0
}

func init() {
	proto.RegisterType((*ArpGmpVrfEntry_KEYS)(nil), "cisco_ios_xr_ipv4_arp_oper.arp_gmp.vrf_infos.vrf_info.arp_gmp_vrf_entry_KEYS")
	proto.RegisterType((*ArpGmpVrfEntry)(nil), "cisco_ios_xr_ipv4_arp_oper.arp_gmp.vrf_infos.vrf_info.arp_gmp_vrf_entry")
}

func init() { proto.RegisterFile("arp_gmp_vrf_entry.proto", fileDescriptor_f938d3134b3fa89d) }

var fileDescriptor_f938d3134b3fa89d = []byte{
	// 242 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x90, 0x31, 0x4f, 0xc3, 0x30,
	0x10, 0x85, 0x95, 0x85, 0x52, 0xa3, 0x08, 0xe1, 0x01, 0xcc, 0x00, 0xaa, 0x32, 0xa0, 0x4e, 0x19,
	0x48, 0xcb, 0x3f, 0x40, 0x6a, 0x85, 0xd4, 0xa1, 0x2c, 0x30, 0x9d, 0x9c, 0xda, 0x49, 0x4e, 0x6a,
	0x6c, 0xeb, 0x1c, 0xa2, 0xf2, 0xd3, 0xf8, 0x77, 0xc8, 0xa7, 0x52, 0x86, 0x6e, 0x77, 0xef, 0xbd,
	0xef, 0x9e, 0x74, 0xe2, 0x4e, 0x53, 0x80, 0xb6, 0x0f, 0x30, 0x52, 0x03, 0xd6, 0x0d, 0xf4, 0x5d,
	0x06, 0xf2, 0x83, 0x97, 0xcb, 0x1d, 0xc6, 0x9d, 0x07, 0xf4, 0x11, 0x0e, 0x04, 0x18, 0xc6, 0x05,
	0xa4, 0xa8, 0x0f, 0x96, 0xca, 0x23, 0x53, 0x26, 0x06, 0x5d, 0xe3, 0xe3, 0x69, 0x2a, 0x2a, 0x71,
	0x7b, 0x76, 0x11, 0xde, 0x5e, 0x3f, 0xdf, 0xe5, 0xbd, 0xb8, 0x4c, 0x8a, 0xd3, 0xbd, 0x55, 0xd9,
	0x2c, 0x9b, 0x4f, 0xb7, 0x93, 0x91, 0x9a, 0x8d, 0xee, 0x6d, 0xf1, 0x93, 0x89, 0x9b, 0x33, 0x4a,
	0x3e, 0x8a, 0xab, 0x3f, 0x00, 0x0e, 0xa4, 0x9e, 0x99, 0x99, 0x1e, 0x99, 0x0f, 0x92, 0x85, 0xc8,
	0xb9, 0xd6, 0x80, 0xfb, 0xea, 0x6b, 0x4b, 0xaa, 0x9a, 0x65, 0xf3, 0x7c, 0x9b, 0xa0, 0xb5, 0xd9,
	0xb0, 0x94, 0x4a, 0x07, 0x5d, 0xef, 0x2d, 0xa0, 0x51, 0x0b, 0xb6, 0x27, 0xbc, 0xaf, 0x8d, 0x7c,
	0x10, 0x82, 0x22, 0x42, 0xa7, 0x9d, 0xd9, 0x5b, 0xb5, 0x64, 0x73, 0x4a, 0x11, 0x57, 0x2c, 0xc8,
	0x27, 0x71, 0xfd, 0x6f, 0x43, 0x87, 0x6d, 0xa7, 0x5e, 0x38, 0x93, 0x9f, 0x32, 0x2b, 0x6c, 0xbb,
	0xfa, 0x82, 0xdf, 0x55, 0xfd, 0x06, 0x00, 0x00, 0xff, 0xff, 0xb8, 0xe3, 0xe7, 0x07, 0x49, 0x01,
	0x00, 0x00,
}
