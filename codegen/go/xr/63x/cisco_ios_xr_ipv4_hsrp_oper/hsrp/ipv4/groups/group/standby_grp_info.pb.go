/*
Copyright 2019 Cisco Systems

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: standby_grp_info.proto

package cisco_ios_xr_ipv4_hsrp_oper_hsrp_ipv4_groups_group

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type StandbyGrpInfo_KEYS struct {
	InterfaceName        string   `protobuf:"bytes,1,opt,name=interface_name,json=interfaceName,proto3" json:"interface_name,omitempty"`
	GroupNumber          uint32   `protobuf:"varint,2,opt,name=group_number,json=groupNumber,proto3" json:"group_number,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StandbyGrpInfo_KEYS) Reset()         { *m = StandbyGrpInfo_KEYS{} }
func (m *StandbyGrpInfo_KEYS) String() string { return proto.CompactTextString(m) }
func (*StandbyGrpInfo_KEYS) ProtoMessage()    {}
func (*StandbyGrpInfo_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ec43a96ef464d6b, []int{0}
}

func (m *StandbyGrpInfo_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StandbyGrpInfo_KEYS.Unmarshal(m, b)
}
func (m *StandbyGrpInfo_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StandbyGrpInfo_KEYS.Marshal(b, m, deterministic)
}
func (m *StandbyGrpInfo_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StandbyGrpInfo_KEYS.Merge(m, src)
}
func (m *StandbyGrpInfo_KEYS) XXX_Size() int {
	return xxx_messageInfo_StandbyGrpInfo_KEYS.Size(m)
}
func (m *StandbyGrpInfo_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_StandbyGrpInfo_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_StandbyGrpInfo_KEYS proto.InternalMessageInfo

func (m *StandbyGrpInfo_KEYS) GetInterfaceName() string {
	if m != nil {
		return m.InterfaceName
	}
	return ""
}

func (m *StandbyGrpInfo_KEYS) GetGroupNumber() uint32 {
	if m != nil {
		return m.GroupNumber
	}
	return 0
}

type Ipv6BagAddr_ struct {
	Ipv6Address          string   `protobuf:"bytes,1,opt,name=ipv6_address,json=ipv6Address,proto3" json:"ipv6_address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Ipv6BagAddr_) Reset()         { *m = Ipv6BagAddr_{} }
func (m *Ipv6BagAddr_) String() string { return proto.CompactTextString(m) }
func (*Ipv6BagAddr_) ProtoMessage()    {}
func (*Ipv6BagAddr_) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ec43a96ef464d6b, []int{1}
}

func (m *Ipv6BagAddr_) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Ipv6BagAddr_.Unmarshal(m, b)
}
func (m *Ipv6BagAddr_) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Ipv6BagAddr_.Marshal(b, m, deterministic)
}
func (m *Ipv6BagAddr_) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ipv6BagAddr_.Merge(m, src)
}
func (m *Ipv6BagAddr_) XXX_Size() int {
	return xxx_messageInfo_Ipv6BagAddr_.Size(m)
}
func (m *Ipv6BagAddr_) XXX_DiscardUnknown() {
	xxx_messageInfo_Ipv6BagAddr_.DiscardUnknown(m)
}

var xxx_messageInfo_Ipv6BagAddr_ proto.InternalMessageInfo

func (m *Ipv6BagAddr_) GetIpv6Address() string {
	if m != nil {
		return m.Ipv6Address
	}
	return ""
}

type HsrpBagTimestamp struct {
	Seconds              uint32   `protobuf:"varint,1,opt,name=seconds,proto3" json:"seconds,omitempty"`
	Nanoseconds          uint32   `protobuf:"varint,2,opt,name=nanoseconds,proto3" json:"nanoseconds,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HsrpBagTimestamp) Reset()         { *m = HsrpBagTimestamp{} }
func (m *HsrpBagTimestamp) String() string { return proto.CompactTextString(m) }
func (*HsrpBagTimestamp) ProtoMessage()    {}
func (*HsrpBagTimestamp) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ec43a96ef464d6b, []int{2}
}

func (m *HsrpBagTimestamp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HsrpBagTimestamp.Unmarshal(m, b)
}
func (m *HsrpBagTimestamp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HsrpBagTimestamp.Marshal(b, m, deterministic)
}
func (m *HsrpBagTimestamp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HsrpBagTimestamp.Merge(m, src)
}
func (m *HsrpBagTimestamp) XXX_Size() int {
	return xxx_messageInfo_HsrpBagTimestamp.Size(m)
}
func (m *HsrpBagTimestamp) XXX_DiscardUnknown() {
	xxx_messageInfo_HsrpBagTimestamp.DiscardUnknown(m)
}

var xxx_messageInfo_HsrpBagTimestamp proto.InternalMessageInfo

func (m *HsrpBagTimestamp) GetSeconds() uint32 {
	if m != nil {
		return m.Seconds
	}
	return 0
}

func (m *HsrpBagTimestamp) GetNanoseconds() uint32 {
	if m != nil {
		return m.Nanoseconds
	}
	return 0
}

type HsrpStateChangeInfoType struct {
	OldState             string            `protobuf:"bytes,1,opt,name=old_state,json=oldState,proto3" json:"old_state,omitempty"`
	NewState             string            `protobuf:"bytes,2,opt,name=new_state,json=newState,proto3" json:"new_state,omitempty"`
	Reason               string            `protobuf:"bytes,3,opt,name=reason,proto3" json:"reason,omitempty"`
	Time                 *HsrpBagTimestamp `protobuf:"bytes,4,opt,name=time,proto3" json:"time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *HsrpStateChangeInfoType) Reset()         { *m = HsrpStateChangeInfoType{} }
func (m *HsrpStateChangeInfoType) String() string { return proto.CompactTextString(m) }
func (*HsrpStateChangeInfoType) ProtoMessage()    {}
func (*HsrpStateChangeInfoType) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ec43a96ef464d6b, []int{3}
}

func (m *HsrpStateChangeInfoType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HsrpStateChangeInfoType.Unmarshal(m, b)
}
func (m *HsrpStateChangeInfoType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HsrpStateChangeInfoType.Marshal(b, m, deterministic)
}
func (m *HsrpStateChangeInfoType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HsrpStateChangeInfoType.Merge(m, src)
}
func (m *HsrpStateChangeInfoType) XXX_Size() int {
	return xxx_messageInfo_HsrpStateChangeInfoType.Size(m)
}
func (m *HsrpStateChangeInfoType) XXX_DiscardUnknown() {
	xxx_messageInfo_HsrpStateChangeInfoType.DiscardUnknown(m)
}

var xxx_messageInfo_HsrpStateChangeInfoType proto.InternalMessageInfo

func (m *HsrpStateChangeInfoType) GetOldState() string {
	if m != nil {
		return m.OldState
	}
	return ""
}

func (m *HsrpStateChangeInfoType) GetNewState() string {
	if m != nil {
		return m.NewState
	}
	return ""
}

func (m *HsrpStateChangeInfoType) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *HsrpStateChangeInfoType) GetTime() *HsrpBagTimestamp {
	if m != nil {
		return m.Time
	}
	return nil
}

type HsrpGroupStatsType struct {
	ActiveTransitions                uint32   `protobuf:"varint,1,opt,name=active_transitions,json=activeTransitions,proto3" json:"active_transitions,omitempty"`
	StandbyTransitions               uint32   `protobuf:"varint,2,opt,name=standby_transitions,json=standbyTransitions,proto3" json:"standby_transitions,omitempty"`
	SpeakTransitions                 uint32   `protobuf:"varint,3,opt,name=speak_transitions,json=speakTransitions,proto3" json:"speak_transitions,omitempty"`
	ListenTransitions                uint32   `protobuf:"varint,4,opt,name=listen_transitions,json=listenTransitions,proto3" json:"listen_transitions,omitempty"`
	LearnTransitions                 uint32   `protobuf:"varint,5,opt,name=learn_transitions,json=learnTransitions,proto3" json:"learn_transitions,omitempty"`
	InitTransitions                  uint32   `protobuf:"varint,6,opt,name=init_transitions,json=initTransitions,proto3" json:"init_transitions,omitempty"`
	HelloPacketsSent                 uint32   `protobuf:"varint,7,opt,name=hello_packets_sent,json=helloPacketsSent,proto3" json:"hello_packets_sent,omitempty"`
	ResignPacketsSent                uint32   `protobuf:"varint,8,opt,name=resign_packets_sent,json=resignPacketsSent,proto3" json:"resign_packets_sent,omitempty"`
	CoupPacketsSent                  uint32   `protobuf:"varint,9,opt,name=coup_packets_sent,json=coupPacketsSent,proto3" json:"coup_packets_sent,omitempty"`
	HelloPacketsReceived             uint32   `protobuf:"varint,10,opt,name=hello_packets_received,json=helloPacketsReceived,proto3" json:"hello_packets_received,omitempty"`
	ResignPacketsReceived            uint32   `protobuf:"varint,11,opt,name=resign_packets_received,json=resignPacketsReceived,proto3" json:"resign_packets_received,omitempty"`
	CoupPacketsReceived              uint32   `protobuf:"varint,12,opt,name=coup_packets_received,json=coupPacketsReceived,proto3" json:"coup_packets_received,omitempty"`
	AuthFailReceived                 uint32   `protobuf:"varint,13,opt,name=auth_fail_received,json=authFailReceived,proto3" json:"auth_fail_received,omitempty"`
	InvalidTimerReceived             uint32   `protobuf:"varint,14,opt,name=invalid_timer_received,json=invalidTimerReceived,proto3" json:"invalid_timer_received,omitempty"`
	MismatchVirtualIpAddressReceived uint32   `protobuf:"varint,15,opt,name=mismatch_virtual_ip_address_received,json=mismatchVirtualIpAddressReceived,proto3" json:"mismatch_virtual_ip_address_received,omitempty"`
	XXX_NoUnkeyedLiteral             struct{} `json:"-"`
	XXX_unrecognized                 []byte   `json:"-"`
	XXX_sizecache                    int32    `json:"-"`
}

func (m *HsrpGroupStatsType) Reset()         { *m = HsrpGroupStatsType{} }
func (m *HsrpGroupStatsType) String() string { return proto.CompactTextString(m) }
func (*HsrpGroupStatsType) ProtoMessage()    {}
func (*HsrpGroupStatsType) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ec43a96ef464d6b, []int{4}
}

func (m *HsrpGroupStatsType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HsrpGroupStatsType.Unmarshal(m, b)
}
func (m *HsrpGroupStatsType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HsrpGroupStatsType.Marshal(b, m, deterministic)
}
func (m *HsrpGroupStatsType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HsrpGroupStatsType.Merge(m, src)
}
func (m *HsrpGroupStatsType) XXX_Size() int {
	return xxx_messageInfo_HsrpGroupStatsType.Size(m)
}
func (m *HsrpGroupStatsType) XXX_DiscardUnknown() {
	xxx_messageInfo_HsrpGroupStatsType.DiscardUnknown(m)
}

var xxx_messageInfo_HsrpGroupStatsType proto.InternalMessageInfo

func (m *HsrpGroupStatsType) GetActiveTransitions() uint32 {
	if m != nil {
		return m.ActiveTransitions
	}
	return 0
}

func (m *HsrpGroupStatsType) GetStandbyTransitions() uint32 {
	if m != nil {
		return m.StandbyTransitions
	}
	return 0
}

func (m *HsrpGroupStatsType) GetSpeakTransitions() uint32 {
	if m != nil {
		return m.SpeakTransitions
	}
	return 0
}

func (m *HsrpGroupStatsType) GetListenTransitions() uint32 {
	if m != nil {
		return m.ListenTransitions
	}
	return 0
}

func (m *HsrpGroupStatsType) GetLearnTransitions() uint32 {
	if m != nil {
		return m.LearnTransitions
	}
	return 0
}

func (m *HsrpGroupStatsType) GetInitTransitions() uint32 {
	if m != nil {
		return m.InitTransitions
	}
	return 0
}

func (m *HsrpGroupStatsType) GetHelloPacketsSent() uint32 {
	if m != nil {
		return m.HelloPacketsSent
	}
	return 0
}

func (m *HsrpGroupStatsType) GetResignPacketsSent() uint32 {
	if m != nil {
		return m.ResignPacketsSent
	}
	return 0
}

func (m *HsrpGroupStatsType) GetCoupPacketsSent() uint32 {
	if m != nil {
		return m.CoupPacketsSent
	}
	return 0
}

func (m *HsrpGroupStatsType) GetHelloPacketsReceived() uint32 {
	if m != nil {
		return m.HelloPacketsReceived
	}
	return 0
}

func (m *HsrpGroupStatsType) GetResignPacketsReceived() uint32 {
	if m != nil {
		return m.ResignPacketsReceived
	}
	return 0
}

func (m *HsrpGroupStatsType) GetCoupPacketsReceived() uint32 {
	if m != nil {
		return m.CoupPacketsReceived
	}
	return 0
}

func (m *HsrpGroupStatsType) GetAuthFailReceived() uint32 {
	if m != nil {
		return m.AuthFailReceived
	}
	return 0
}

func (m *HsrpGroupStatsType) GetInvalidTimerReceived() uint32 {
	if m != nil {
		return m.InvalidTimerReceived
	}
	return 0
}

func (m *HsrpGroupStatsType) GetMismatchVirtualIpAddressReceived() uint32 {
	if m != nil {
		return m.MismatchVirtualIpAddressReceived
	}
	return 0
}

type StandbyGrpInfo struct {
	AuthenticationString        string                     `protobuf:"bytes,50,opt,name=authentication_string,json=authenticationString,proto3" json:"authentication_string,omitempty"`
	VirtualMacAddress           string                     `protobuf:"bytes,51,opt,name=virtual_mac_address,json=virtualMacAddress,proto3" json:"virtual_mac_address,omitempty"`
	HsrpGroupNumber             uint32                     `protobuf:"varint,52,opt,name=hsrp_group_number,json=hsrpGroupNumber,proto3" json:"hsrp_group_number,omitempty"`
	AddressFamily               string                     `protobuf:"bytes,53,opt,name=address_family,json=addressFamily,proto3" json:"address_family,omitempty"`
	Version                     uint32                     `protobuf:"varint,54,opt,name=version,proto3" json:"version,omitempty"`
	SessionName                 string                     `protobuf:"bytes,55,opt,name=session_name,json=sessionName,proto3" json:"session_name,omitempty"`
	Slaves                      uint32                     `protobuf:"varint,56,opt,name=slaves,proto3" json:"slaves,omitempty"`
	IsSlave                     bool                       `protobuf:"varint,57,opt,name=is_slave,json=isSlave,proto3" json:"is_slave,omitempty"`
	FollowedSessionName         string                     `protobuf:"bytes,58,opt,name=followed_session_name,json=followedSessionName,proto3" json:"followed_session_name,omitempty"`
	ConfiguredPriority          uint32                     `protobuf:"varint,59,opt,name=configured_priority,json=configuredPriority,proto3" json:"configured_priority,omitempty"`
	PreemptDelay                uint32                     `protobuf:"varint,60,opt,name=preempt_delay,json=preemptDelay,proto3" json:"preempt_delay,omitempty"`
	PreemptTimerSecs            uint32                     `protobuf:"varint,61,opt,name=preempt_timer_secs,json=preemptTimerSecs,proto3" json:"preempt_timer_secs,omitempty"`
	HelloTime                   uint32                     `protobuf:"varint,62,opt,name=hello_time,json=helloTime,proto3" json:"hello_time,omitempty"`
	HoldTime                    uint32                     `protobuf:"varint,63,opt,name=hold_time,json=holdTime,proto3" json:"hold_time,omitempty"`
	LearnedHelloTime            uint32                     `protobuf:"varint,64,opt,name=learned_hello_time,json=learnedHelloTime,proto3" json:"learned_hello_time,omitempty"`
	LearnedHoldTime             uint32                     `protobuf:"varint,65,opt,name=learned_hold_time,json=learnedHoldTime,proto3" json:"learned_hold_time,omitempty"`
	MinDelayTime                uint32                     `protobuf:"varint,66,opt,name=min_delay_time,json=minDelayTime,proto3" json:"min_delay_time,omitempty"`
	ReloadDelayTime             uint32                     `protobuf:"varint,67,opt,name=reload_delay_time,json=reloadDelayTime,proto3" json:"reload_delay_time,omitempty"`
	VirtualIpAddress            string                     `protobuf:"bytes,68,opt,name=virtual_ip_address,json=virtualIpAddress,proto3" json:"virtual_ip_address,omitempty"`
	VirtualLinklocalIpv6Address string                     `protobuf:"bytes,69,opt,name=virtual_linklocal_ipv6_address,json=virtualLinklocalIpv6Address,proto3" json:"virtual_linklocal_ipv6_address,omitempty"`
	ActiveIpAddress             string                     `protobuf:"bytes,70,opt,name=active_ip_address,json=activeIpAddress,proto3" json:"active_ip_address,omitempty"`
	ActiveIpv6Address           string                     `protobuf:"bytes,71,opt,name=active_ipv6_address,json=activeIpv6Address,proto3" json:"active_ipv6_address,omitempty"`
	ActiveMacAddress            string                     `protobuf:"bytes,72,opt,name=active_mac_address,json=activeMacAddress,proto3" json:"active_mac_address,omitempty"`
	StandbyIpAddress            string                     `protobuf:"bytes,73,opt,name=standby_ip_address,json=standbyIpAddress,proto3" json:"standby_ip_address,omitempty"`
	StandbyIpv6Address          string                     `protobuf:"bytes,74,opt,name=standby_ipv6_address,json=standbyIpv6Address,proto3" json:"standby_ipv6_address,omitempty"`
	StandbyMacAddress           string                     `protobuf:"bytes,75,opt,name=standby_mac_address,json=standbyMacAddress,proto3" json:"standby_mac_address,omitempty"`
	HsrpRouterState             string                     `protobuf:"bytes,76,opt,name=hsrp_router_state,json=hsrpRouterState,proto3" json:"hsrp_router_state,omitempty"`
	SecondaryAddress            []string                   `protobuf:"bytes,77,rep,name=secondary_address,json=secondaryAddress,proto3" json:"secondary_address,omitempty"`
	GlobalAddress               []*Ipv6BagAddr_            `protobuf:"bytes,78,rep,name=global_address,json=globalAddress,proto3" json:"global_address,omitempty"`
	InterfaceNameXr             string                     `protobuf:"bytes,79,opt,name=interface_name_xr,json=interfaceNameXr,proto3" json:"interface_name_xr,omitempty"`
	Interface                   string                     `protobuf:"bytes,80,opt,name=interface,proto3" json:"interface,omitempty"`
	RouterPriority              uint32                     `protobuf:"varint,81,opt,name=router_priority,json=routerPriority,proto3" json:"router_priority,omitempty"`
	ActivePriority              uint32                     `protobuf:"varint,82,opt,name=active_priority,json=activePriority,proto3" json:"active_priority,omitempty"`
	ActiveTimerFlag             bool                       `protobuf:"varint,83,opt,name=active_timer_flag,json=activeTimerFlag,proto3" json:"active_timer_flag,omitempty"`
	ActiveTimerSecs             uint32                     `protobuf:"varint,84,opt,name=active_timer_secs,json=activeTimerSecs,proto3" json:"active_timer_secs,omitempty"`
	ActiveTimerMsecs            uint32                     `protobuf:"varint,85,opt,name=active_timer_msecs,json=activeTimerMsecs,proto3" json:"active_timer_msecs,omitempty"`
	StandbyTimerFlag            bool                       `protobuf:"varint,86,opt,name=standby_timer_flag,json=standbyTimerFlag,proto3" json:"standby_timer_flag,omitempty"`
	StandbyTimerSecs            uint32                     `protobuf:"varint,87,opt,name=standby_timer_secs,json=standbyTimerSecs,proto3" json:"standby_timer_secs,omitempty"`
	StandbyTimerMsecs           uint32                     `protobuf:"varint,88,opt,name=standby_timer_msecs,json=standbyTimerMsecs,proto3" json:"standby_timer_msecs,omitempty"`
	HelloTimerFlag              bool                       `protobuf:"varint,89,opt,name=hello_timer_flag,json=helloTimerFlag,proto3" json:"hello_timer_flag,omitempty"`
	HelloTimerSecs              uint32                     `protobuf:"varint,90,opt,name=hello_timer_secs,json=helloTimerSecs,proto3" json:"hello_timer_secs,omitempty"`
	HelloTimerMsecs             uint32                     `protobuf:"varint,91,opt,name=hello_timer_msecs,json=helloTimerMsecs,proto3" json:"hello_timer_msecs,omitempty"`
	DelayTimerFlag              bool                       `protobuf:"varint,92,opt,name=delay_timer_flag,json=delayTimerFlag,proto3" json:"delay_timer_flag,omitempty"`
	DelayTimerSecs              uint32                     `protobuf:"varint,93,opt,name=delay_timer_secs,json=delayTimerSecs,proto3" json:"delay_timer_secs,omitempty"`
	DelayTimerMsecs             uint32                     `protobuf:"varint,94,opt,name=delay_timer_msecs,json=delayTimerMsecs,proto3" json:"delay_timer_msecs,omitempty"`
	CurrentStateTimerSecs       uint32                     `protobuf:"varint,95,opt,name=current_state_timer_secs,json=currentStateTimerSecs,proto3" json:"current_state_timer_secs,omitempty"`
	StateChangeCount            uint32                     `protobuf:"varint,96,opt,name=state_change_count,json=stateChangeCount,proto3" json:"state_change_count,omitempty"`
	TrackedInterfaceCount       uint32                     `protobuf:"varint,97,opt,name=tracked_interface_count,json=trackedInterfaceCount,proto3" json:"tracked_interface_count,omitempty"`
	TrackedInterfaceUpCount     uint32                     `protobuf:"varint,98,opt,name=tracked_interface_up_count,json=trackedInterfaceUpCount,proto3" json:"tracked_interface_up_count,omitempty"`
	PreemptEnabled              bool                       `protobuf:"varint,99,opt,name=preempt_enabled,json=preemptEnabled,proto3" json:"preempt_enabled,omitempty"`
	UseConfiguredTimers         bool                       `protobuf:"varint,100,opt,name=use_configured_timers,json=useConfiguredTimers,proto3" json:"use_configured_timers,omitempty"`
	UseConfiguredVirtualIp      bool                       `protobuf:"varint,101,opt,name=use_configured_virtual_ip,json=useConfiguredVirtualIp,proto3" json:"use_configured_virtual_ip,omitempty"`
	UseBiaConfigured            bool                       `protobuf:"varint,102,opt,name=use_bia_configured,json=useBiaConfigured,proto3" json:"use_bia_configured,omitempty"`
	ConfiguredTimers            bool                       `protobuf:"varint,103,opt,name=configured_timers,json=configuredTimers,proto3" json:"configured_timers,omitempty"`
	ConfiguredMacAddress        bool                       `protobuf:"varint,104,opt,name=configured_mac_address,json=configuredMacAddress,proto3" json:"configured_mac_address,omitempty"`
	RedirectsDisabled           bool                       `protobuf:"varint,105,opt,name=redirects_disabled,json=redirectsDisabled,proto3" json:"redirects_disabled,omitempty"`
	BfdEnabled                  bool                       `protobuf:"varint,106,opt,name=bfd_enabled,json=bfdEnabled,proto3" json:"bfd_enabled,omitempty"`
	BfdInterface                string                     `protobuf:"bytes,107,opt,name=bfd_interface,json=bfdInterface,proto3" json:"bfd_interface,omitempty"`
	BfdPeerIpAddress            string                     `protobuf:"bytes,108,opt,name=bfd_peer_ip_address,json=bfdPeerIpAddress,proto3" json:"bfd_peer_ip_address,omitempty"`
	BfdPeerIpv6Address          string                     `protobuf:"bytes,109,opt,name=bfd_peer_ipv6_address,json=bfdPeerIpv6Address,proto3" json:"bfd_peer_ipv6_address,omitempty"`
	BfdSessionState             string                     `protobuf:"bytes,110,opt,name=bfd_session_state,json=bfdSessionState,proto3" json:"bfd_session_state,omitempty"`
	BfdInterval                 uint32                     `protobuf:"varint,111,opt,name=bfd_interval,json=bfdInterval,proto3" json:"bfd_interval,omitempty"`
	BfdMultiplier               uint32                     `protobuf:"varint,112,opt,name=bfd_multiplier,json=bfdMultiplier,proto3" json:"bfd_multiplier,omitempty"`
	ResignSentTime              *HsrpBagTimestamp          `protobuf:"bytes,113,opt,name=resign_sent_time,json=resignSentTime,proto3" json:"resign_sent_time,omitempty"`
	ResignReceivedTime          *HsrpBagTimestamp          `protobuf:"bytes,114,opt,name=resign_received_time,json=resignReceivedTime,proto3" json:"resign_received_time,omitempty"`
	CoupSentTime                *HsrpBagTimestamp          `protobuf:"bytes,115,opt,name=coup_sent_time,json=coupSentTime,proto3" json:"coup_sent_time,omitempty"`
	CoupReceivedTime            *HsrpBagTimestamp          `protobuf:"bytes,116,opt,name=coup_received_time,json=coupReceivedTime,proto3" json:"coup_received_time,omitempty"`
	StateChangeHistory          []*HsrpStateChangeInfoType `protobuf:"bytes,117,rep,name=state_change_history,json=stateChangeHistory,proto3" json:"state_change_history,omitempty"`
	Statistics                  *HsrpGroupStatsType        `protobuf:"bytes,118,opt,name=statistics,proto3" json:"statistics,omitempty"`
	VirtualMacAddressState      string                     `protobuf:"bytes,119,opt,name=virtual_mac_address_state,json=virtualMacAddressState,proto3" json:"virtual_mac_address_state,omitempty"`
	XXX_NoUnkeyedLiteral        struct{}                   `json:"-"`
	XXX_unrecognized            []byte                     `json:"-"`
	XXX_sizecache               int32                      `json:"-"`
}

func (m *StandbyGrpInfo) Reset()         { *m = StandbyGrpInfo{} }
func (m *StandbyGrpInfo) String() string { return proto.CompactTextString(m) }
func (*StandbyGrpInfo) ProtoMessage()    {}
func (*StandbyGrpInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ec43a96ef464d6b, []int{5}
}

func (m *StandbyGrpInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StandbyGrpInfo.Unmarshal(m, b)
}
func (m *StandbyGrpInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StandbyGrpInfo.Marshal(b, m, deterministic)
}
func (m *StandbyGrpInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StandbyGrpInfo.Merge(m, src)
}
func (m *StandbyGrpInfo) XXX_Size() int {
	return xxx_messageInfo_StandbyGrpInfo.Size(m)
}
func (m *StandbyGrpInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_StandbyGrpInfo.DiscardUnknown(m)
}

var xxx_messageInfo_StandbyGrpInfo proto.InternalMessageInfo

func (m *StandbyGrpInfo) GetAuthenticationString() string {
	if m != nil {
		return m.AuthenticationString
	}
	return ""
}

func (m *StandbyGrpInfo) GetVirtualMacAddress() string {
	if m != nil {
		return m.VirtualMacAddress
	}
	return ""
}

func (m *StandbyGrpInfo) GetHsrpGroupNumber() uint32 {
	if m != nil {
		return m.HsrpGroupNumber
	}
	return 0
}

func (m *StandbyGrpInfo) GetAddressFamily() string {
	if m != nil {
		return m.AddressFamily
	}
	return ""
}

func (m *StandbyGrpInfo) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *StandbyGrpInfo) GetSessionName() string {
	if m != nil {
		return m.SessionName
	}
	return ""
}

func (m *StandbyGrpInfo) GetSlaves() uint32 {
	if m != nil {
		return m.Slaves
	}
	return 0
}

func (m *StandbyGrpInfo) GetIsSlave() bool {
	if m != nil {
		return m.IsSlave
	}
	return false
}

func (m *StandbyGrpInfo) GetFollowedSessionName() string {
	if m != nil {
		return m.FollowedSessionName
	}
	return ""
}

func (m *StandbyGrpInfo) GetConfiguredPriority() uint32 {
	if m != nil {
		return m.ConfiguredPriority
	}
	return 0
}

func (m *StandbyGrpInfo) GetPreemptDelay() uint32 {
	if m != nil {
		return m.PreemptDelay
	}
	return 0
}

func (m *StandbyGrpInfo) GetPreemptTimerSecs() uint32 {
	if m != nil {
		return m.PreemptTimerSecs
	}
	return 0
}

func (m *StandbyGrpInfo) GetHelloTime() uint32 {
	if m != nil {
		return m.HelloTime
	}
	return 0
}

func (m *StandbyGrpInfo) GetHoldTime() uint32 {
	if m != nil {
		return m.HoldTime
	}
	return 0
}

func (m *StandbyGrpInfo) GetLearnedHelloTime() uint32 {
	if m != nil {
		return m.LearnedHelloTime
	}
	return 0
}

func (m *StandbyGrpInfo) GetLearnedHoldTime() uint32 {
	if m != nil {
		return m.LearnedHoldTime
	}
	return 0
}

func (m *StandbyGrpInfo) GetMinDelayTime() uint32 {
	if m != nil {
		return m.MinDelayTime
	}
	return 0
}

func (m *StandbyGrpInfo) GetReloadDelayTime() uint32 {
	if m != nil {
		return m.ReloadDelayTime
	}
	return 0
}

func (m *StandbyGrpInfo) GetVirtualIpAddress() string {
	if m != nil {
		return m.VirtualIpAddress
	}
	return ""
}

func (m *StandbyGrpInfo) GetVirtualLinklocalIpv6Address() string {
	if m != nil {
		return m.VirtualLinklocalIpv6Address
	}
	return ""
}

func (m *StandbyGrpInfo) GetActiveIpAddress() string {
	if m != nil {
		return m.ActiveIpAddress
	}
	return ""
}

func (m *StandbyGrpInfo) GetActiveIpv6Address() string {
	if m != nil {
		return m.ActiveIpv6Address
	}
	return ""
}

func (m *StandbyGrpInfo) GetActiveMacAddress() string {
	if m != nil {
		return m.ActiveMacAddress
	}
	return ""
}

func (m *StandbyGrpInfo) GetStandbyIpAddress() string {
	if m != nil {
		return m.StandbyIpAddress
	}
	return ""
}

func (m *StandbyGrpInfo) GetStandbyIpv6Address() string {
	if m != nil {
		return m.StandbyIpv6Address
	}
	return ""
}

func (m *StandbyGrpInfo) GetStandbyMacAddress() string {
	if m != nil {
		return m.StandbyMacAddress
	}
	return ""
}

func (m *StandbyGrpInfo) GetHsrpRouterState() string {
	if m != nil {
		return m.HsrpRouterState
	}
	return ""
}

func (m *StandbyGrpInfo) GetSecondaryAddress() []string {
	if m != nil {
		return m.SecondaryAddress
	}
	return nil
}

func (m *StandbyGrpInfo) GetGlobalAddress() []*Ipv6BagAddr_ {
	if m != nil {
		return m.GlobalAddress
	}
	return nil
}

func (m *StandbyGrpInfo) GetInterfaceNameXr() string {
	if m != nil {
		return m.InterfaceNameXr
	}
	return ""
}

func (m *StandbyGrpInfo) GetInterface() string {
	if m != nil {
		return m.Interface
	}
	return ""
}

func (m *StandbyGrpInfo) GetRouterPriority() uint32 {
	if m != nil {
		return m.RouterPriority
	}
	return 0
}

func (m *StandbyGrpInfo) GetActivePriority() uint32 {
	if m != nil {
		return m.ActivePriority
	}
	return 0
}

func (m *StandbyGrpInfo) GetActiveTimerFlag() bool {
	if m != nil {
		return m.ActiveTimerFlag
	}
	return false
}

func (m *StandbyGrpInfo) GetActiveTimerSecs() uint32 {
	if m != nil {
		return m.ActiveTimerSecs
	}
	return 0
}

func (m *StandbyGrpInfo) GetActiveTimerMsecs() uint32 {
	if m != nil {
		return m.ActiveTimerMsecs
	}
	return 0
}

func (m *StandbyGrpInfo) GetStandbyTimerFlag() bool {
	if m != nil {
		return m.StandbyTimerFlag
	}
	return false
}

func (m *StandbyGrpInfo) GetStandbyTimerSecs() uint32 {
	if m != nil {
		return m.StandbyTimerSecs
	}
	return 0
}

func (m *StandbyGrpInfo) GetStandbyTimerMsecs() uint32 {
	if m != nil {
		return m.StandbyTimerMsecs
	}
	return 0
}

func (m *StandbyGrpInfo) GetHelloTimerFlag() bool {
	if m != nil {
		return m.HelloTimerFlag
	}
	return false
}

func (m *StandbyGrpInfo) GetHelloTimerSecs() uint32 {
	if m != nil {
		return m.HelloTimerSecs
	}
	return 0
}

func (m *StandbyGrpInfo) GetHelloTimerMsecs() uint32 {
	if m != nil {
		return m.HelloTimerMsecs
	}
	return 0
}

func (m *StandbyGrpInfo) GetDelayTimerFlag() bool {
	if m != nil {
		return m.DelayTimerFlag
	}
	return false
}

func (m *StandbyGrpInfo) GetDelayTimerSecs() uint32 {
	if m != nil {
		return m.DelayTimerSecs
	}
	return 0
}

func (m *StandbyGrpInfo) GetDelayTimerMsecs() uint32 {
	if m != nil {
		return m.DelayTimerMsecs
	}
	return 0
}

func (m *StandbyGrpInfo) GetCurrentStateTimerSecs() uint32 {
	if m != nil {
		return m.CurrentStateTimerSecs
	}
	return 0
}

func (m *StandbyGrpInfo) GetStateChangeCount() uint32 {
	if m != nil {
		return m.StateChangeCount
	}
	return 0
}

func (m *StandbyGrpInfo) GetTrackedInterfaceCount() uint32 {
	if m != nil {
		return m.TrackedInterfaceCount
	}
	return 0
}

func (m *StandbyGrpInfo) GetTrackedInterfaceUpCount() uint32 {
	if m != nil {
		return m.TrackedInterfaceUpCount
	}
	return 0
}

func (m *StandbyGrpInfo) GetPreemptEnabled() bool {
	if m != nil {
		return m.PreemptEnabled
	}
	return false
}

func (m *StandbyGrpInfo) GetUseConfiguredTimers() bool {
	if m != nil {
		return m.UseConfiguredTimers
	}
	return false
}

func (m *StandbyGrpInfo) GetUseConfiguredVirtualIp() bool {
	if m != nil {
		return m.UseConfiguredVirtualIp
	}
	return false
}

func (m *StandbyGrpInfo) GetUseBiaConfigured() bool {
	if m != nil {
		return m.UseBiaConfigured
	}
	return false
}

func (m *StandbyGrpInfo) GetConfiguredTimers() bool {
	if m != nil {
		return m.ConfiguredTimers
	}
	return false
}

func (m *StandbyGrpInfo) GetConfiguredMacAddress() bool {
	if m != nil {
		return m.ConfiguredMacAddress
	}
	return false
}

func (m *StandbyGrpInfo) GetRedirectsDisabled() bool {
	if m != nil {
		return m.RedirectsDisabled
	}
	return false
}

func (m *StandbyGrpInfo) GetBfdEnabled() bool {
	if m != nil {
		return m.BfdEnabled
	}
	return false
}

func (m *StandbyGrpInfo) GetBfdInterface() string {
	if m != nil {
		return m.BfdInterface
	}
	return ""
}

func (m *StandbyGrpInfo) GetBfdPeerIpAddress() string {
	if m != nil {
		return m.BfdPeerIpAddress
	}
	return ""
}

func (m *StandbyGrpInfo) GetBfdPeerIpv6Address() string {
	if m != nil {
		return m.BfdPeerIpv6Address
	}
	return ""
}

func (m *StandbyGrpInfo) GetBfdSessionState() string {
	if m != nil {
		return m.BfdSessionState
	}
	return ""
}

func (m *StandbyGrpInfo) GetBfdInterval() uint32 {
	if m != nil {
		return m.BfdInterval
	}
	return 0
}

func (m *StandbyGrpInfo) GetBfdMultiplier() uint32 {
	if m != nil {
		return m.BfdMultiplier
	}
	return 0
}

func (m *StandbyGrpInfo) GetResignSentTime() *HsrpBagTimestamp {
	if m != nil {
		return m.ResignSentTime
	}
	return nil
}

func (m *StandbyGrpInfo) GetResignReceivedTime() *HsrpBagTimestamp {
	if m != nil {
		return m.ResignReceivedTime
	}
	return nil
}

func (m *StandbyGrpInfo) GetCoupSentTime() *HsrpBagTimestamp {
	if m != nil {
		return m.CoupSentTime
	}
	return nil
}

func (m *StandbyGrpInfo) GetCoupReceivedTime() *HsrpBagTimestamp {
	if m != nil {
		return m.CoupReceivedTime
	}
	return nil
}

func (m *StandbyGrpInfo) GetStateChangeHistory() []*HsrpStateChangeInfoType {
	if m != nil {
		return m.StateChangeHistory
	}
	return nil
}

func (m *StandbyGrpInfo) GetStatistics() *HsrpGroupStatsType {
	if m != nil {
		return m.Statistics
	}
	return nil
}

func (m *StandbyGrpInfo) GetVirtualMacAddressState() string {
	if m != nil {
		return m.VirtualMacAddressState
	}
	return ""
}

func init() {
	proto.RegisterType((*StandbyGrpInfo_KEYS)(nil), "cisco_ios_xr_ipv4_hsrp_oper.hsrp.ipv4.groups.group.standby_grp_info_KEYS")
	proto.RegisterType((*Ipv6BagAddr_)(nil), "cisco_ios_xr_ipv4_hsrp_oper.hsrp.ipv4.groups.group.ipv6_bag_addr_")
	proto.RegisterType((*HsrpBagTimestamp)(nil), "cisco_ios_xr_ipv4_hsrp_oper.hsrp.ipv4.groups.group.hsrp_bag_timestamp")
	proto.RegisterType((*HsrpStateChangeInfoType)(nil), "cisco_ios_xr_ipv4_hsrp_oper.hsrp.ipv4.groups.group.hsrp_state_change_info_type")
	proto.RegisterType((*HsrpGroupStatsType)(nil), "cisco_ios_xr_ipv4_hsrp_oper.hsrp.ipv4.groups.group.hsrp_group_stats_type")
	proto.RegisterType((*StandbyGrpInfo)(nil), "cisco_ios_xr_ipv4_hsrp_oper.hsrp.ipv4.groups.group.standby_grp_info")
}

func init() { proto.RegisterFile("standby_grp_info.proto", fileDescriptor_7ec43a96ef464d6b) }

var fileDescriptor_7ec43a96ef464d6b = []byte{
	// 1752 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x58, 0xdd, 0x76, 0x1b, 0xb7,
	0x11, 0x3e, 0x8a, 0x5d, 0x59, 0x1a, 0x49, 0x94, 0x04, 0xfd, 0x64, 0x53, 0xa7, 0x2d, 0xa3, 0xa4,
	0xc7, 0x6a, 0x2a, 0x33, 0xad, 0xac, 0x3a, 0x4d, 0xd3, 0xbf, 0x58, 0xb6, 0x62, 0x35, 0xb1, 0xa3,
	0x92, 0x4e, 0x9a, 0xb8, 0x3f, 0x5b, 0x70, 0x17, 0x24, 0x51, 0x2f, 0x77, 0xb7, 0x00, 0x48, 0x5b,
	0x97, 0xbd, 0xee, 0x73, 0xf4, 0x69, 0xfa, 0x52, 0x3d, 0x98, 0xc1, 0x02, 0x58, 0xca, 0x37, 0xf5,
	0xd1, 0x95, 0xb4, 0xf3, 0x7d, 0x33, 0xf3, 0x01, 0x0b, 0xcc, 0xcc, 0x12, 0xf6, 0xb5, 0xe1, 0x65,
	0x3e, 0xbc, 0x4c, 0xc7, 0xaa, 0x4e, 0x65, 0x39, 0xaa, 0x7a, 0xb5, 0xaa, 0x4c, 0xc5, 0x8e, 0x33,
	0xa9, 0xb3, 0x2a, 0x95, 0x95, 0x4e, 0x5f, 0xa9, 0x54, 0xd6, 0xf3, 0x93, 0x74, 0xa2, 0x55, 0x9d,
	0x56, 0xb5, 0x50, 0x3d, 0xfb, 0x5f, 0xcf, 0xda, 0x7a, 0x63, 0x55, 0xcd, 0x6a, 0x4d, 0x7f, 0x0e,
	0x38, 0xec, 0x2d, 0x46, 0x4b, 0xbf, 0x78, 0xf4, 0xdd, 0x80, 0xfd, 0x18, 0x3a, 0xb2, 0x34, 0x42,
	0x8d, 0x78, 0x26, 0xd2, 0x92, 0x4f, 0x45, 0xb2, 0xd4, 0x5d, 0x3a, 0x5c, 0xed, 0x6f, 0x78, 0xeb,
	0x53, 0x3e, 0x15, 0xec, 0x3d, 0x58, 0xc7, 0x40, 0x69, 0x39, 0x9b, 0x0e, 0x85, 0x4a, 0xde, 0xea,
	0x2e, 0x1d, 0x6e, 0xf4, 0xd7, 0xd0, 0xf6, 0x14, 0x4d, 0x07, 0xf7, 0xa0, 0x23, 0xeb, 0xf9, 0xfd,
	0x74, 0xc8, 0xc7, 0x29, 0xcf, 0x73, 0x95, 0x5a, 0x27, 0xb4, 0xd8, 0x27, 0xa1, 0xb5, 0x8b, 0xbc,
	0x66, 0x6d, 0x9f, 0x91, 0xe9, 0xe0, 0x02, 0x18, 0x6a, 0xb7, 0x4e, 0x46, 0x4e, 0x85, 0x36, 0x7c,
	0x5a, 0xb3, 0x04, 0x6e, 0x69, 0x91, 0x55, 0x65, 0x4e, 0x3e, 0x1b, 0xfd, 0xe6, 0x91, 0x75, 0x61,
	0xad, 0xe4, 0x65, 0xd5, 0xa0, 0x4e, 0x46, 0x64, 0x3a, 0xf8, 0xef, 0x12, 0xdc, 0xc6, 0x90, 0xda,
	0x70, 0x23, 0xd2, 0x6c, 0xc2, 0xcb, 0xb1, 0xa0, 0x05, 0x9b, 0xcb, 0x5a, 0xb0, 0xdb, 0xb0, 0x5a,
	0x15, 0x39, 0xa1, 0x4e, 0xd1, 0x4a, 0x55, 0xe4, 0x03, 0xfb, 0x6c, 0xc1, 0x52, 0xbc, 0x74, 0xe0,
	0x5b, 0x04, 0x96, 0xe2, 0x25, 0x81, 0xfb, 0xb0, 0xac, 0x04, 0xd7, 0x55, 0x99, 0xdc, 0x40, 0xc4,
	0x3d, 0xb1, 0xe7, 0x70, 0xd3, 0x4a, 0x4f, 0x6e, 0x76, 0x97, 0x0e, 0xd7, 0x8e, 0xcf, 0x7a, 0xff,
	0xff, 0xeb, 0xe9, 0x5d, 0xdd, 0x83, 0x3e, 0xc6, 0x3c, 0xf8, 0xf7, 0x32, 0xec, 0x21, 0x48, 0xbb,
	0x6f, 0x85, 0x69, 0x5a, 0xc7, 0x5d, 0x60, 0x3c, 0x33, 0x72, 0x2e, 0x52, 0xa3, 0x78, 0xa9, 0xa5,
	0x91, 0x55, 0xd9, 0x6c, 0xd7, 0x36, 0x21, 0xcf, 0x02, 0xc0, 0x3e, 0x82, 0x9d, 0xe6, 0x00, 0xc4,
	0x7c, 0xda, 0x40, 0xe6, 0xa0, 0xd8, 0xe1, 0xa7, 0xb0, 0xad, 0x6b, 0xc1, 0x5f, 0xb4, 0xe8, 0x37,
	0x90, 0xbe, 0x85, 0x40, 0x4c, 0xbe, 0x0b, 0xac, 0x90, 0xda, 0x88, 0xb2, 0xc5, 0xbe, 0x49, 0x62,
	0x08, 0x59, 0x88, 0x5d, 0x08, 0xae, 0xda, 0xec, 0xef, 0x51, 0x6c, 0x04, 0x62, 0xf2, 0x4f, 0x60,
	0x4b, 0x96, 0xd2, 0xb4, 0xb8, 0xcb, 0xc8, 0xdd, 0xb4, 0xf6, 0x98, 0x7a, 0x04, 0x6c, 0x22, 0x8a,
	0xa2, 0x4a, 0x6b, 0x9e, 0xbd, 0x10, 0x46, 0xa7, 0x5a, 0x94, 0x26, 0xb9, 0x45, 0x81, 0x11, 0xb9,
	0x20, 0x60, 0x20, 0x4a, 0xc3, 0x7a, 0xb0, 0xa3, 0x84, 0x96, 0xe3, 0xb2, 0x4d, 0x5f, 0x21, 0xd5,
	0x04, 0xc5, 0xfc, 0x0f, 0x61, 0x3b, 0xb3, 0x2f, 0xa1, 0xc5, 0x5e, 0x25, 0x25, 0x16, 0x88, 0xb9,
	0x27, 0xb0, 0xdf, 0x56, 0xa2, 0x44, 0x26, 0xe4, 0x5c, 0xe4, 0x09, 0xa0, 0xc3, 0x6e, 0xac, 0xa6,
	0xef, 0x30, 0x76, 0x1f, 0xde, 0x5e, 0x50, 0xe4, 0xdd, 0xd6, 0xd0, 0x6d, 0xaf, 0xa5, 0xca, 0xfb,
	0x1d, 0xc3, 0x5e, 0x4b, 0x99, 0xf7, 0x5a, 0x47, 0xaf, 0x9d, 0x48, 0x9d, 0xf7, 0x39, 0x02, 0xc6,
	0x67, 0x66, 0x92, 0x8e, 0xb8, 0x2c, 0x82, 0xc3, 0x06, 0xed, 0x95, 0x45, 0xce, 0xb8, 0x2c, 0x3c,
	0xfb, 0x04, 0xf6, 0x65, 0x39, 0xe7, 0x85, 0xcc, 0xf1, 0x88, 0xaa, 0xe0, 0xd1, 0xa1, 0xf5, 0x38,
	0xf4, 0x99, 0x05, 0xbd, 0xd7, 0x53, 0xf8, 0x60, 0x2a, 0xf5, 0x94, 0x9b, 0x6c, 0x92, 0xce, 0xa5,
	0x32, 0x33, 0x5e, 0xa4, 0xb2, 0x6e, 0xea, 0x41, 0x88, 0xb1, 0x89, 0x31, 0xba, 0x0d, 0xf7, 0x1b,
	0xa2, 0x9e, 0xd7, 0xae, 0x4a, 0x34, 0xf1, 0x0e, 0xfe, 0xf3, 0x2e, 0x6c, 0x2d, 0x96, 0x31, 0x76,
	0x0f, 0xf6, 0xac, 0x5c, 0x51, 0x1a, 0x99, 0x71, 0x7b, 0x0e, 0x52, 0x6d, 0x94, 0x2c, 0xc7, 0xc9,
	0x31, 0xde, 0xd2, 0xdd, 0x36, 0x38, 0x40, 0xcc, 0xbe, 0xfb, 0x46, 0xd0, 0x94, 0x67, 0xbe, 0x42,
	0xdd, 0x43, 0x97, 0x6d, 0x07, 0x3d, 0xe1, 0x99, 0x53, 0x60, 0xdf, 0x7d, 0x74, 0x0d, 0x5d, 0x11,
	0x3c, 0xa1, 0x77, 0x6f, 0x81, 0xcf, 0x43, 0x21, 0xb4, 0x25, 0xb5, 0x59, 0xe1, 0x88, 0x4f, 0x65,
	0x71, 0x99, 0xfc, 0x82, 0x4a, 0xaa, 0xb3, 0x9e, 0xa1, 0xd1, 0x16, 0xb9, 0xb9, 0x50, 0x5a, 0x56,
	0x65, 0x72, 0x9f, 0x8a, 0x9c, 0x7b, 0xb4, 0x75, 0x53, 0x0b, 0x6d, 0xff, 0xa5, 0x8a, 0xfc, 0x31,
	0xd5, 0x4d, 0x67, 0xc3, 0x7a, 0xbc, 0x0f, 0xcb, 0xba, 0xe0, 0x73, 0xa1, 0x93, 0x5f, 0xa2, 0xaf,
	0x7b, 0x62, 0xef, 0xc0, 0x8a, 0xd4, 0x29, 0x3e, 0x24, 0x9f, 0x74, 0x97, 0x0e, 0x57, 0xfa, 0xb7,
	0xa4, 0x1e, 0xd8, 0x47, 0x7b, 0x48, 0x46, 0x55, 0x51, 0x54, 0x2f, 0x45, 0x9e, 0xb6, 0xc2, 0xff,
	0x0a, 0xc3, 0xef, 0x34, 0xe0, 0x20, 0x4a, 0xf3, 0x11, 0xec, 0x64, 0x55, 0x39, 0x92, 0xe3, 0x99,
	0x12, 0x79, 0x5a, 0x2b, 0x59, 0x29, 0x69, 0x2e, 0x93, 0x4f, 0xa9, 0x6a, 0x04, 0xe8, 0xc2, 0x21,
	0xec, 0x7d, 0xd8, 0xa8, 0x95, 0x10, 0xd3, 0xda, 0xa4, 0xb9, 0x28, 0xf8, 0x65, 0xf2, 0x6b, 0xa4,
	0xae, 0x3b, 0xe3, 0x43, 0x6b, 0xb3, 0x47, 0xaf, 0x21, 0xd1, 0x61, 0xd2, 0x22, 0xd3, 0xc9, 0x6f,
	0xe8, 0xe8, 0x39, 0x04, 0x0f, 0xd2, 0x40, 0x64, 0x9a, 0xfd, 0x00, 0x80, 0xae, 0x12, 0x16, 0xd9,
	0xdf, 0x22, 0x6b, 0x15, 0x2d, 0x96, 0x63, 0x4b, 0xf6, 0xc4, 0x16, 0x74, 0x44, 0x7f, 0x87, 0xe8,
	0x8a, 0x35, 0x20, 0x78, 0x04, 0x0c, 0xeb, 0x89, 0xc8, 0xd3, 0x28, 0xc6, 0xef, 0xa3, 0x4a, 0x23,
	0xf2, 0xc7, 0x3e, 0xd4, 0x87, 0xae, 0x2c, 0x59, 0xb6, 0x0f, 0xf9, 0x19, 0xbd, 0xe4, 0x86, 0xdc,
	0x44, 0xfe, 0x00, 0x3a, 0x53, 0x59, 0xd2, 0x22, 0x89, 0xf8, 0x80, 0x56, 0x3a, 0x95, 0x25, 0xae,
	0xb2, 0x89, 0xa8, 0x44, 0x51, 0xf1, 0x3c, 0x26, 0x9e, 0x52, 0x44, 0x02, 0x02, 0xf7, 0x08, 0xd8,
	0xd5, 0x3b, 0x92, 0x3c, 0xc4, 0x97, 0xb3, 0x35, 0x5f, 0xb8, 0x12, 0xec, 0x14, 0x7e, 0xd8, 0xb0,
	0x0b, 0x59, 0xbe, 0x28, 0xaa, 0x0c, 0xfd, 0xa2, 0x6e, 0xfb, 0x08, 0x3d, 0x6f, 0x3b, 0xd6, 0x97,
	0x0d, 0xe9, 0x3c, 0x74, 0x5f, 0x2b, 0xcf, 0xf5, 0x90, 0x28, 0xe3, 0x19, 0xfa, 0x6d, 0x12, 0x10,
	0x12, 0xf6, 0x60, 0xc7, 0x73, 0xa3, 0x2c, 0x9f, 0xd3, 0x8d, 0x69, 0xd8, 0x21, 0xf6, 0x91, 0xef,
	0x4f, 0xf1, 0x05, 0x7b, 0x4c, 0xcb, 0x21, 0x24, 0xba, 0x5f, 0x47, 0xd0, 0xf4, 0xa0, 0x58, 0xca,
	0x39, 0xb1, 0x1d, 0x12, 0xb4, 0xfc, 0x0c, 0x76, 0x03, 0x3b, 0x12, 0xf3, 0x07, 0xe4, 0x33, 0xcf,
	0x0f, 0x6a, 0x7a, 0xa1, 0xfd, 0xc5, 0x72, 0xbe, 0x20, 0xf5, 0x0e, 0x7a, 0xcd, 0x7d, 0x57, 0xd5,
	0xcc, 0xd8, 0x03, 0x8a, 0x03, 0xc1, 0x97, 0xb4, 0x33, 0x16, 0xe8, 0xa3, 0x9d, 0xe6, 0x02, 0xdb,
	0x29, 0x71, 0xf8, 0xe0, 0xea, 0xd2, 0x47, 0x7e, 0xd2, 0xbd, 0x81, 0xd2, 0x1b, 0xa0, 0x09, 0x2c,
	0xa1, 0x33, 0x2e, 0xaa, 0x21, 0x2f, 0x3c, 0xf3, 0x69, 0xf7, 0xc6, 0xe1, 0xda, 0xf1, 0x83, 0x37,
	0x19, 0x1b, 0xda, 0xf3, 0x56, 0x7f, 0x83, 0x22, 0x47, 0x6b, 0x68, 0x8f, 0x76, 0xe9, 0x2b, 0x95,
	0x7c, 0x45, 0x6b, 0x68, 0x4d, 0x77, 0xdf, 0x2a, 0xf6, 0x2e, 0xac, 0x7a, 0x53, 0x72, 0x81, 0x9c,
	0x60, 0x60, 0x77, 0x60, 0xd3, 0x6d, 0x84, 0x2f, 0x01, 0x7f, 0xc4, 0x43, 0xdc, 0x21, 0xb3, 0xbf,
	0xfe, 0x77, 0xc0, 0x9d, 0x9b, 0x40, 0xec, 0x13, 0x91, 0xcc, 0x9e, 0x18, 0x4e, 0x1e, 0x55, 0x80,
	0x51, 0xc1, 0xc7, 0xc9, 0x00, 0x0b, 0x96, 0x8b, 0x80, 0x05, 0xe0, 0xac, 0xe0, 0xe3, 0x2b, 0x5c,
	0xac, 0x16, 0xcf, 0xe8, 0x12, 0x45, 0x5c, 0x2c, 0x16, 0xe1, 0xd4, 0x11, 0x77, 0x8a, 0xe4, 0xaf,
	0x5d, 0x57, 0x0b, 0xe4, 0x27, 0xda, 0xb1, 0xfd, 0x50, 0x14, 0x64, 0x7c, 0x83, 0x32, 0x9a, 0x53,
	0x17, 0x74, 0x5c, 0x61, 0x63, 0xec, 0x3f, 0xb9, 0x91, 0x28, 0x62, 0xa3, 0x92, 0xe8, 0xc4, 0xc5,
	0x52, 0xbe, 0xa5, 0xe9, 0x22, 0xa6, 0x93, 0x96, 0x43, 0xd8, 0x0a, 0x25, 0xca, 0x29, 0xf9, 0x0e,
	0x95, 0x74, 0x7c, 0xb1, 0x23, 0x1d, 0x0b, 0x4c, 0x0c, 0xfb, 0x9c, 0x76, 0x39, 0x30, 0x51, 0x83,
	0x3d, 0xc5, 0x11, 0x93, 0x14, 0xfc, 0xd9, 0x75, 0x2d, 0x4f, 0xf5, 0xf9, 0x43, 0x8d, 0x72, 0xf9,
	0xff, 0x42, 0xf9, 0xf3, 0xa6, 0x46, 0xf9, 0xfc, 0x31, 0x13, 0x83, 0xfe, 0x95, 0xf2, 0x07, 0x66,
	0x93, 0x3f, 0x66, 0x52, 0xfe, 0xbf, 0x51, 0xfe, 0x40, 0xa5, 0xfc, 0x1f, 0x43, 0x92, 0xcd, 0x94,
	0x12, 0xa5, 0x71, 0x93, 0x7b, 0x14, 0x3d, 0xa5, 0xe1, 0xc7, 0xe1, 0x78, 0xeb, 0x5a, 0xaf, 0xbc,
	0x35, 0xea, 0x67, 0xd5, 0xac, 0x34, 0xc9, 0xdf, 0xfd, 0x6b, 0x31, 0xe2, 0x14, 0x81, 0x53, 0x6b,
	0xb7, 0x23, 0x96, 0x51, 0x76, 0x14, 0xca, 0xd3, 0x70, 0x39, 0xc8, 0x85, 0x53, 0x16, 0x07, 0x9f,
	0x37, 0x28, 0xf9, 0x7d, 0x0a, 0xdf, 0xbf, 0xea, 0x37, 0xab, 0x9d, 0xeb, 0x10, 0x5d, 0xdf, 0x5e,
	0x74, 0xfd, 0xba, 0x26, 0xe7, 0x3b, 0xb0, 0xd9, 0x34, 0x3c, 0x51, 0xf2, 0x61, 0x21, 0xf2, 0x24,
	0xa3, 0xad, 0x75, 0xe6, 0x47, 0x64, 0xb5, 0x3d, 0x7a, 0xa6, 0xad, 0x1e, 0xdf, 0x73, 0x71, 0x17,
	0x74, 0x92, 0x23, 0x7d, 0x67, 0xa6, 0xc5, 0xa9, 0xc7, 0x70, 0x0b, 0x34, 0xfb, 0x04, 0xde, 0x59,
	0xf0, 0x09, 0x6d, 0x24, 0x11, 0xe8, 0xb7, 0xdf, 0xf2, 0xf3, 0xe3, 0x95, 0xdd, 0x3a, 0xeb, 0x3a,
	0x94, 0x3c, 0x72, 0x4f, 0x46, 0x74, 0xfe, 0x67, 0x5a, 0x3c, 0x90, 0x3c, 0xb8, 0xd9, 0x3a, 0x77,
	0x55, 0xd8, 0x98, 0xc8, 0xd9, 0xa2, 0xaa, 0x13, 0xd8, 0x8f, 0xc8, 0x71, 0xcd, 0x9d, 0xa0, 0xc7,
	0x6e, 0x40, 0xa3, 0xb2, 0x7b, 0x17, 0x98, 0x12, 0xb9, 0x54, 0x22, 0x33, 0x3a, 0xcd, 0xa5, 0xa6,
	0xbd, 0x92, 0xe8, 0xb1, 0xed, 0x91, 0x87, 0x0e, 0x60, 0x3f, 0x82, 0xb5, 0xe1, 0x28, 0xf7, 0x7b,
	0xfa, 0x0f, 0xe4, 0xc1, 0x70, 0x94, 0x37, 0xfb, 0xf9, 0x3e, 0x6c, 0x58, 0x42, 0x28, 0x6d, 0x2f,
	0xb0, 0xb4, 0xad, 0x0f, 0x47, 0xe1, 0x25, 0xb1, 0xbb, 0xb0, 0x63, 0x49, 0xb5, 0x10, 0x2a, 0x6e,
	0x3e, 0x05, 0x35, 0x9f, 0xe1, 0x28, 0xbf, 0x10, 0x42, 0x85, 0xe6, 0xf3, 0x73, 0xd8, 0x8b, 0xe8,
	0x51, 0xf7, 0x99, 0x52, 0xf7, 0xf1, 0x0e, 0xad, 0x3e, 0x6b, 0x5d, 0x9a, 0xa9, 0x8b, 0xba, 0x49,
	0x49, 0x95, 0x78, 0x38, 0x6a, 0x26, 0x2e, 0xea, 0x26, 0xef, 0xc1, 0xba, 0x97, 0x3c, 0xe7, 0x45,
	0x52, 0xd1, 0x27, 0x6e, 0xa3, 0x78, 0xce, 0x0b, 0x3b, 0x60, 0x5a, 0xca, 0x74, 0x56, 0x18, 0x59,
	0x17, 0x52, 0xa8, 0xa4, 0x46, 0x92, 0x5d, 0xeb, 0x13, 0x6f, 0x64, 0x35, 0x6c, 0xb9, 0xaf, 0x09,
	0xfb, 0xa5, 0x42, 0xb3, 0xc7, 0x3f, 0xaf, 0xf5, 0x1b, 0xb5, 0x43, 0xf1, 0xed, 0x17, 0x0f, 0x8e,
	0x30, 0xaf, 0x60, 0xd7, 0x65, 0x6c, 0x46, 0x7b, 0xca, 0xaa, 0xae, 0x35, 0x2b, 0xa3, 0x1c, 0xcd,
	0x57, 0x01, 0x66, 0x2e, 0xa0, 0x83, 0x5f, 0x40, 0x61, 0xa5, 0xfa, 0x5a, 0x73, 0xae, 0xdb, 0xe8,
	0x7e, 0x9d, 0x06, 0x18, 0x66, 0x6b, 0xaf, 0xd2, 0x5c, 0x6b, 0xc6, 0x2d, 0x9b, 0xa1, 0xb5, 0xc6,
	0x7f, 0x2d, 0xe1, 0xd8, 0x13, 0x2a, 0xdd, 0x44, 0x6a, 0x53, 0xa9, 0xcb, 0x64, 0x86, 0x13, 0xc4,
	0x57, 0x6f, 0x9c, 0xf8, 0xf5, 0xbf, 0x94, 0xf4, 0x59, 0x54, 0x3c, 0x1f, 0x53, 0x2a, 0x26, 0x01,
	0xac, 0x55, 0x6a, 0x23, 0x33, 0x9d, 0xcc, 0x71, 0xc5, 0xe7, 0x6f, 0x9c, 0x78, 0xf1, 0x47, 0x8d,
	0x7e, 0x14, 0xdc, 0xd6, 0xb5, 0xd7, 0x7c, 0xa2, 0xb9, 0xcb, 0xf3, 0x12, 0x2f, 0xcf, 0xfe, 0x95,
	0x0f, 0x35, 0xbc, 0x43, 0xc3, 0x65, 0xfc, 0xa1, 0xec, 0xde, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff,
	0x27, 0x81, 0xe1, 0x5f, 0x42, 0x13, 0x00, 0x00,
}
