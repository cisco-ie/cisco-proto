/*
Copyright 2019 Cisco Systems

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: iedge_stats_srg_data.proto

package cisco_ios_xr_iedge4710_oper_subscriber_manager_nodes_node_statistics_srg

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type IedgeStatsSrgData_KEYS struct {
	NodeName             string   `protobuf:"bytes,1,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IedgeStatsSrgData_KEYS) Reset()         { *m = IedgeStatsSrgData_KEYS{} }
func (m *IedgeStatsSrgData_KEYS) String() string { return proto.CompactTextString(m) }
func (*IedgeStatsSrgData_KEYS) ProtoMessage()    {}
func (*IedgeStatsSrgData_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_6b1960e740f84573, []int{0}
}

func (m *IedgeStatsSrgData_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IedgeStatsSrgData_KEYS.Unmarshal(m, b)
}
func (m *IedgeStatsSrgData_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IedgeStatsSrgData_KEYS.Marshal(b, m, deterministic)
}
func (m *IedgeStatsSrgData_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IedgeStatsSrgData_KEYS.Merge(m, src)
}
func (m *IedgeStatsSrgData_KEYS) XXX_Size() int {
	return xxx_messageInfo_IedgeStatsSrgData_KEYS.Size(m)
}
func (m *IedgeStatsSrgData_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_IedgeStatsSrgData_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_IedgeStatsSrgData_KEYS proto.InternalMessageInfo

func (m *IedgeStatsSrgData_KEYS) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

type IedgeStatsSrgData struct {
	TxlistSendTriggered          uint32   `protobuf:"varint,50,opt,name=txlist_send_triggered,json=txlistSendTriggered,proto3" json:"txlist_send_triggered,omitempty"`
	TxlistSendFailed             uint32   `protobuf:"varint,51,opt,name=txlist_send_failed,json=txlistSendFailed,proto3" json:"txlist_send_failed,omitempty"`
	TxlistSendFailedNotactive    uint32   `protobuf:"varint,52,opt,name=txlist_send_failed_notactive,json=txlistSendFailedNotactive,proto3" json:"txlist_send_failed_notactive,omitempty"`
	ActualTxlistSent             uint32   `protobuf:"varint,53,opt,name=actual_txlist_sent,json=actualTxlistSent,proto3" json:"actual_txlist_sent,omitempty"`
	AlreadyinTxlist              uint32   `protobuf:"varint,54,opt,name=alreadyin_txlist,json=alreadyinTxlist,proto3" json:"alreadyin_txlist,omitempty"`
	TxlistEncode                 uint32   `protobuf:"varint,55,opt,name=txlist_encode,json=txlistEncode,proto3" json:"txlist_encode,omitempty"`
	TxlistEncodeFail             uint32   `protobuf:"varint,56,opt,name=txlist_encode_fail,json=txlistEncodeFail,proto3" json:"txlist_encode_fail,omitempty"`
	CreateUpdateEncode           uint32   `protobuf:"varint,57,opt,name=create_update_encode,json=createUpdateEncode,proto3" json:"create_update_encode,omitempty"`
	DeleteEncode                 uint32   `protobuf:"varint,58,opt,name=delete_encode,json=deleteEncode,proto3" json:"delete_encode,omitempty"`
	CreateUpdCleanCallback       uint32   `protobuf:"varint,59,opt,name=create_upd_clean_callback,json=createUpdCleanCallback,proto3" json:"create_upd_clean_callback,omitempty"`
	DeleteCleanCallback          uint32   `protobuf:"varint,60,opt,name=delete_clean_callback,json=deleteCleanCallback,proto3" json:"delete_clean_callback,omitempty"`
	SlaveRecvEntry               uint32   `protobuf:"varint,61,opt,name=slave_recv_entry,json=slaveRecvEntry,proto3" json:"slave_recv_entry,omitempty"`
	SlaveDecodeFail              uint32   `protobuf:"varint,62,opt,name=slave_decode_fail,json=slaveDecodeFail,proto3" json:"slave_decode_fail,omitempty"`
	SlaveCreateUpdate            uint32   `protobuf:"varint,63,opt,name=slave_create_update,json=slaveCreateUpdate,proto3" json:"slave_create_update,omitempty"`
	SlaveDelete                  uint32   `protobuf:"varint,64,opt,name=slave_delete,json=slaveDelete,proto3" json:"slave_delete,omitempty"`
	SrgContextMalloc             uint32   `protobuf:"varint,65,opt,name=srg_context_malloc,json=srgContextMalloc,proto3" json:"srg_context_malloc,omitempty"`
	SrgContextFree               uint32   `protobuf:"varint,66,opt,name=srg_context_free,json=srgContextFree,proto3" json:"srg_context_free,omitempty"`
	SodCount                     uint32   `protobuf:"varint,67,opt,name=sod_count,json=sodCount,proto3" json:"sod_count,omitempty"`
	EodCount                     uint32   `protobuf:"varint,68,opt,name=eod_count,json=eodCount,proto3" json:"eod_count,omitempty"`
	SodEodReplayReqCount         uint32   `protobuf:"varint,69,opt,name=sod_eod_replay_req_count,json=sodEodReplayReqCount,proto3" json:"sod_eod_replay_req_count,omitempty"`
	SodEodDirtyMarkCount         uint32   `protobuf:"varint,70,opt,name=sod_eod_dirty_mark_count,json=sodEodDirtyMarkCount,proto3" json:"sod_eod_dirty_mark_count,omitempty"`
	SodEodDirtyDeleteCount       uint32   `protobuf:"varint,71,opt,name=sod_eod_dirty_delete_count,json=sodEodDirtyDeleteCount,proto3" json:"sod_eod_dirty_delete_count,omitempty"`
	AckToSrg                     uint32   `protobuf:"varint,72,opt,name=ack_to_srg,json=ackToSrg,proto3" json:"ack_to_srg,omitempty"`
	NackToSrg                    uint32   `protobuf:"varint,73,opt,name=nack_to_srg,json=nackToSrg,proto3" json:"nack_to_srg,omitempty"`
	NackToSrgFailCnt             uint32   `protobuf:"varint,74,opt,name=nack_to_srg_fail_cnt,json=nackToSrgFailCnt,proto3" json:"nack_to_srg_fail_cnt,omitempty"`
	TxlistRemoveAll              uint32   `protobuf:"varint,75,opt,name=txlist_remove_all,json=txlistRemoveAll,proto3" json:"txlist_remove_all,omitempty"`
	TxlistDelSync                uint32   `protobuf:"varint,76,opt,name=txlist_del_sync,json=txlistDelSync,proto3" json:"txlist_del_sync,omitempty"`
	TxlistDelSyncNotlinked       uint32   `protobuf:"varint,77,opt,name=txlist_del_sync_notlinked,json=txlistDelSyncNotlinked,proto3" json:"txlist_del_sync_notlinked,omitempty"`
	TxlistDelApp                 uint32   `protobuf:"varint,78,opt,name=txlist_del_app,json=txlistDelApp,proto3" json:"txlist_del_app,omitempty"`
	TxlistDelAppNotlinked        uint32   `protobuf:"varint,79,opt,name=txlist_del_app_notlinked,json=txlistDelAppNotlinked,proto3" json:"txlist_del_app_notlinked,omitempty"`
	TxlistCleanInvalidState      uint32   `protobuf:"varint,80,opt,name=txlist_clean_invalid_state,json=txlistCleanInvalidState,proto3" json:"txlist_clean_invalid_state,omitempty"`
	TxlistRemoveAllInternalError uint32   `protobuf:"varint,81,opt,name=txlist_remove_all_internal_error,json=txlistRemoveAllInternalError,proto3" json:"txlist_remove_all_internal_error,omitempty"`
	IsSrgFlowControlEnabled      bool     `protobuf:"varint,82,opt,name=is_srg_flow_control_enabled,json=isSrgFlowControlEnabled,proto3" json:"is_srg_flow_control_enabled,omitempty"`
	MaxInflightSessoinCount      uint32   `protobuf:"varint,83,opt,name=max_inflight_sessoin_count,json=maxInflightSessoinCount,proto3" json:"max_inflight_sessoin_count,omitempty"`
	FlowControlResumeThreshold   uint32   `protobuf:"varint,84,opt,name=flow_control_resume_threshold,json=flowControlResumeThreshold,proto3" json:"flow_control_resume_threshold,omitempty"`
	InflightSessionCount         uint32   `protobuf:"varint,85,opt,name=inflight_session_count,json=inflightSessionCount,proto3" json:"inflight_session_count,omitempty"`
	InflightAddCount             uint32   `protobuf:"varint,86,opt,name=inflight_add_count,json=inflightAddCount,proto3" json:"inflight_add_count,omitempty"`
	InflightUnderRunCount        uint32   `protobuf:"varint,87,opt,name=inflight_under_run_count,json=inflightUnderRunCount,proto3" json:"inflight_under_run_count,omitempty"`
	InflightAllocFails           uint32   `protobuf:"varint,88,opt,name=inflight_alloc_fails,json=inflightAllocFails,proto3" json:"inflight_alloc_fails,omitempty"`
	InflightInsertFailures       uint32   `protobuf:"varint,89,opt,name=inflight_insert_failures,json=inflightInsertFailures,proto3" json:"inflight_insert_failures,omitempty"`
	InflightDeletes              uint32   `protobuf:"varint,90,opt,name=inflight_deletes,json=inflightDeletes,proto3" json:"inflight_deletes,omitempty"`
	InflightNotFound             uint32   `protobuf:"varint,91,opt,name=inflight_not_found,json=inflightNotFound,proto3" json:"inflight_not_found,omitempty"`
	InflightDeleteFailures       uint32   `protobuf:"varint,92,opt,name=inflight_delete_failures,json=inflightDeleteFailures,proto3" json:"inflight_delete_failures,omitempty"`
	TotalPauseCount              uint32   `protobuf:"varint,93,opt,name=total_pause_count,json=totalPauseCount,proto3" json:"total_pause_count,omitempty"`
	TotalResumeCount             uint32   `protobuf:"varint,94,opt,name=total_resume_count,json=totalResumeCount,proto3" json:"total_resume_count,omitempty"`
	TotalDontSendToTxlist        uint32   `protobuf:"varint,95,opt,name=total_dont_send_to_txlist,json=totalDontSendToTxlist,proto3" json:"total_dont_send_to_txlist,omitempty"`
	TotalSrgNotMaster            uint32   `protobuf:"varint,96,opt,name=total_srg_not_master,json=totalSrgNotMaster,proto3" json:"total_srg_not_master,omitempty"`
	TotalMasterEomsPending       uint32   `protobuf:"varint,97,opt,name=total_master_eoms_pending,json=totalMasterEomsPending,proto3" json:"total_master_eoms_pending,omitempty"`
	LastPausePeriod              uint64   `protobuf:"varint,98,opt,name=last_pause_period,json=lastPausePeriod,proto3" json:"last_pause_period,omitempty"`
	TotalPauseTime               uint64   `protobuf:"varint,99,opt,name=total_pause_time,json=totalPauseTime,proto3" json:"total_pause_time,omitempty"`
	LastPauseTime                uint64   `protobuf:"varint,100,opt,name=last_pause_time,json=lastPauseTime,proto3" json:"last_pause_time,omitempty"`
	LastResumeTime               uint64   `protobuf:"varint,101,opt,name=last_resume_time,json=lastResumeTime,proto3" json:"last_resume_time,omitempty"`
	XXX_NoUnkeyedLiteral         struct{} `json:"-"`
	XXX_unrecognized             []byte   `json:"-"`
	XXX_sizecache                int32    `json:"-"`
}

func (m *IedgeStatsSrgData) Reset()         { *m = IedgeStatsSrgData{} }
func (m *IedgeStatsSrgData) String() string { return proto.CompactTextString(m) }
func (*IedgeStatsSrgData) ProtoMessage()    {}
func (*IedgeStatsSrgData) Descriptor() ([]byte, []int) {
	return fileDescriptor_6b1960e740f84573, []int{1}
}

func (m *IedgeStatsSrgData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IedgeStatsSrgData.Unmarshal(m, b)
}
func (m *IedgeStatsSrgData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IedgeStatsSrgData.Marshal(b, m, deterministic)
}
func (m *IedgeStatsSrgData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IedgeStatsSrgData.Merge(m, src)
}
func (m *IedgeStatsSrgData) XXX_Size() int {
	return xxx_messageInfo_IedgeStatsSrgData.Size(m)
}
func (m *IedgeStatsSrgData) XXX_DiscardUnknown() {
	xxx_messageInfo_IedgeStatsSrgData.DiscardUnknown(m)
}

var xxx_messageInfo_IedgeStatsSrgData proto.InternalMessageInfo

func (m *IedgeStatsSrgData) GetTxlistSendTriggered() uint32 {
	if m != nil {
		return m.TxlistSendTriggered
	}
	return 0
}

func (m *IedgeStatsSrgData) GetTxlistSendFailed() uint32 {
	if m != nil {
		return m.TxlistSendFailed
	}
	return 0
}

func (m *IedgeStatsSrgData) GetTxlistSendFailedNotactive() uint32 {
	if m != nil {
		return m.TxlistSendFailedNotactive
	}
	return 0
}

func (m *IedgeStatsSrgData) GetActualTxlistSent() uint32 {
	if m != nil {
		return m.ActualTxlistSent
	}
	return 0
}

func (m *IedgeStatsSrgData) GetAlreadyinTxlist() uint32 {
	if m != nil {
		return m.AlreadyinTxlist
	}
	return 0
}

func (m *IedgeStatsSrgData) GetTxlistEncode() uint32 {
	if m != nil {
		return m.TxlistEncode
	}
	return 0
}

func (m *IedgeStatsSrgData) GetTxlistEncodeFail() uint32 {
	if m != nil {
		return m.TxlistEncodeFail
	}
	return 0
}

func (m *IedgeStatsSrgData) GetCreateUpdateEncode() uint32 {
	if m != nil {
		return m.CreateUpdateEncode
	}
	return 0
}

func (m *IedgeStatsSrgData) GetDeleteEncode() uint32 {
	if m != nil {
		return m.DeleteEncode
	}
	return 0
}

func (m *IedgeStatsSrgData) GetCreateUpdCleanCallback() uint32 {
	if m != nil {
		return m.CreateUpdCleanCallback
	}
	return 0
}

func (m *IedgeStatsSrgData) GetDeleteCleanCallback() uint32 {
	if m != nil {
		return m.DeleteCleanCallback
	}
	return 0
}

func (m *IedgeStatsSrgData) GetSlaveRecvEntry() uint32 {
	if m != nil {
		return m.SlaveRecvEntry
	}
	return 0
}

func (m *IedgeStatsSrgData) GetSlaveDecodeFail() uint32 {
	if m != nil {
		return m.SlaveDecodeFail
	}
	return 0
}

func (m *IedgeStatsSrgData) GetSlaveCreateUpdate() uint32 {
	if m != nil {
		return m.SlaveCreateUpdate
	}
	return 0
}

func (m *IedgeStatsSrgData) GetSlaveDelete() uint32 {
	if m != nil {
		return m.SlaveDelete
	}
	return 0
}

func (m *IedgeStatsSrgData) GetSrgContextMalloc() uint32 {
	if m != nil {
		return m.SrgContextMalloc
	}
	return 0
}

func (m *IedgeStatsSrgData) GetSrgContextFree() uint32 {
	if m != nil {
		return m.SrgContextFree
	}
	return 0
}

func (m *IedgeStatsSrgData) GetSodCount() uint32 {
	if m != nil {
		return m.SodCount
	}
	return 0
}

func (m *IedgeStatsSrgData) GetEodCount() uint32 {
	if m != nil {
		return m.EodCount
	}
	return 0
}

func (m *IedgeStatsSrgData) GetSodEodReplayReqCount() uint32 {
	if m != nil {
		return m.SodEodReplayReqCount
	}
	return 0
}

func (m *IedgeStatsSrgData) GetSodEodDirtyMarkCount() uint32 {
	if m != nil {
		return m.SodEodDirtyMarkCount
	}
	return 0
}

func (m *IedgeStatsSrgData) GetSodEodDirtyDeleteCount() uint32 {
	if m != nil {
		return m.SodEodDirtyDeleteCount
	}
	return 0
}

func (m *IedgeStatsSrgData) GetAckToSrg() uint32 {
	if m != nil {
		return m.AckToSrg
	}
	return 0
}

func (m *IedgeStatsSrgData) GetNackToSrg() uint32 {
	if m != nil {
		return m.NackToSrg
	}
	return 0
}

func (m *IedgeStatsSrgData) GetNackToSrgFailCnt() uint32 {
	if m != nil {
		return m.NackToSrgFailCnt
	}
	return 0
}

func (m *IedgeStatsSrgData) GetTxlistRemoveAll() uint32 {
	if m != nil {
		return m.TxlistRemoveAll
	}
	return 0
}

func (m *IedgeStatsSrgData) GetTxlistDelSync() uint32 {
	if m != nil {
		return m.TxlistDelSync
	}
	return 0
}

func (m *IedgeStatsSrgData) GetTxlistDelSyncNotlinked() uint32 {
	if m != nil {
		return m.TxlistDelSyncNotlinked
	}
	return 0
}

func (m *IedgeStatsSrgData) GetTxlistDelApp() uint32 {
	if m != nil {
		return m.TxlistDelApp
	}
	return 0
}

func (m *IedgeStatsSrgData) GetTxlistDelAppNotlinked() uint32 {
	if m != nil {
		return m.TxlistDelAppNotlinked
	}
	return 0
}

func (m *IedgeStatsSrgData) GetTxlistCleanInvalidState() uint32 {
	if m != nil {
		return m.TxlistCleanInvalidState
	}
	return 0
}

func (m *IedgeStatsSrgData) GetTxlistRemoveAllInternalError() uint32 {
	if m != nil {
		return m.TxlistRemoveAllInternalError
	}
	return 0
}

func (m *IedgeStatsSrgData) GetIsSrgFlowControlEnabled() bool {
	if m != nil {
		return m.IsSrgFlowControlEnabled
	}
	return false
}

func (m *IedgeStatsSrgData) GetMaxInflightSessoinCount() uint32 {
	if m != nil {
		return m.MaxInflightSessoinCount
	}
	return 0
}

func (m *IedgeStatsSrgData) GetFlowControlResumeThreshold() uint32 {
	if m != nil {
		return m.FlowControlResumeThreshold
	}
	return 0
}

func (m *IedgeStatsSrgData) GetInflightSessionCount() uint32 {
	if m != nil {
		return m.InflightSessionCount
	}
	return 0
}

func (m *IedgeStatsSrgData) GetInflightAddCount() uint32 {
	if m != nil {
		return m.InflightAddCount
	}
	return 0
}

func (m *IedgeStatsSrgData) GetInflightUnderRunCount() uint32 {
	if m != nil {
		return m.InflightUnderRunCount
	}
	return 0
}

func (m *IedgeStatsSrgData) GetInflightAllocFails() uint32 {
	if m != nil {
		return m.InflightAllocFails
	}
	return 0
}

func (m *IedgeStatsSrgData) GetInflightInsertFailures() uint32 {
	if m != nil {
		return m.InflightInsertFailures
	}
	return 0
}

func (m *IedgeStatsSrgData) GetInflightDeletes() uint32 {
	if m != nil {
		return m.InflightDeletes
	}
	return 0
}

func (m *IedgeStatsSrgData) GetInflightNotFound() uint32 {
	if m != nil {
		return m.InflightNotFound
	}
	return 0
}

func (m *IedgeStatsSrgData) GetInflightDeleteFailures() uint32 {
	if m != nil {
		return m.InflightDeleteFailures
	}
	return 0
}

func (m *IedgeStatsSrgData) GetTotalPauseCount() uint32 {
	if m != nil {
		return m.TotalPauseCount
	}
	return 0
}

func (m *IedgeStatsSrgData) GetTotalResumeCount() uint32 {
	if m != nil {
		return m.TotalResumeCount
	}
	return 0
}

func (m *IedgeStatsSrgData) GetTotalDontSendToTxlist() uint32 {
	if m != nil {
		return m.TotalDontSendToTxlist
	}
	return 0
}

func (m *IedgeStatsSrgData) GetTotalSrgNotMaster() uint32 {
	if m != nil {
		return m.TotalSrgNotMaster
	}
	return 0
}

func (m *IedgeStatsSrgData) GetTotalMasterEomsPending() uint32 {
	if m != nil {
		return m.TotalMasterEomsPending
	}
	return 0
}

func (m *IedgeStatsSrgData) GetLastPausePeriod() uint64 {
	if m != nil {
		return m.LastPausePeriod
	}
	return 0
}

func (m *IedgeStatsSrgData) GetTotalPauseTime() uint64 {
	if m != nil {
		return m.TotalPauseTime
	}
	return 0
}

func (m *IedgeStatsSrgData) GetLastPauseTime() uint64 {
	if m != nil {
		return m.LastPauseTime
	}
	return 0
}

func (m *IedgeStatsSrgData) GetLastResumeTime() uint64 {
	if m != nil {
		return m.LastResumeTime
	}
	return 0
}

func init() {
	proto.RegisterType((*IedgeStatsSrgData_KEYS)(nil), "cisco_ios_xr_iedge4710_oper.subscriber.manager.nodes.node.statistics.srg.iedge_stats_srg_data_KEYS")
	proto.RegisterType((*IedgeStatsSrgData)(nil), "cisco_ios_xr_iedge4710_oper.subscriber.manager.nodes.node.statistics.srg.iedge_stats_srg_data")
}

func init() { proto.RegisterFile("iedge_stats_srg_data.proto", fileDescriptor_6b1960e740f84573) }

var fileDescriptor_6b1960e740f84573 = []byte{
	// 1209 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x96, 0xed, 0x73, 0x13, 0xb7,
	0x13, 0xc7, 0x27, 0x33, 0xbf, 0xf9, 0x0d, 0x08, 0x02, 0xe9, 0x11, 0x40, 0x09, 0xb4, 0x93, 0x42,
	0xa7, 0x93, 0x76, 0x18, 0x97, 0x02, 0x25, 0xe1, 0xa1, 0xa5, 0xa9, 0xe3, 0x94, 0x94, 0x26, 0x4d,
	0xed, 0xd0, 0x96, 0x3e, 0xa9, 0xca, 0x69, 0x63, 0x34, 0xd1, 0x49, 0x46, 0x92, 0x4d, 0xfc, 0x87,
	0xf7, 0x7d, 0x67, 0xb5, 0xba, 0xf3, 0x39, 0xf0, 0x06, 0x26, 0xfb, 0xfd, 0x7c, 0x77, 0xb5, 0x92,
	0x56, 0x67, 0xb6, 0xaa, 0x41, 0x0d, 0x41, 0x84, 0x28, 0x63, 0x10, 0xc1, 0x0f, 0x85, 0x92, 0x51,
	0x76, 0x46, 0xde, 0x45, 0x57, 0x3c, 0x2f, 0x75, 0x28, 0x9d, 0xd0, 0x2e, 0x88, 0x53, 0x2f, 0x12,
	0xf8, 0x60, 0xe3, 0xcb, 0xbb, 0xc2, 0x8d, 0xc0, 0x77, 0xc2, 0xf8, 0x28, 0x94, 0x5e, 0x1f, 0x81,
	0xef, 0x54, 0xd2, 0xca, 0x21, 0xf8, 0x8e, 0x75, 0x0a, 0x42, 0xfa, 0xb7, 0x83, 0xf9, 0x74, 0x88,
	0xba, 0x0c, 0x9d, 0xe0, 0x87, 0xb7, 0x36, 0xd9, 0xca, 0xfb, 0xea, 0x88, 0x17, 0xbd, 0x57, 0x83,
	0xe2, 0x06, 0x3b, 0x8f, 0x1e, 0x61, 0x65, 0x05, 0x7c, 0x61, 0x6d, 0x61, 0xfd, 0x7c, 0xff, 0x1c,
	0x06, 0xf6, 0x65, 0x05, 0xb7, 0xfe, 0xbd, 0xc2, 0x96, 0xdf, 0x67, 0x2d, 0xee, 0xb1, 0xab, 0xf1,
	0xd4, 0xe8, 0x10, 0x45, 0x00, 0xab, 0x44, 0xf4, 0x7a, 0x38, 0x04, 0x0f, 0x8a, 0xdf, 0x5b, 0x5b,
	0x58, 0x5f, 0xec, 0x5f, 0x21, 0x71, 0x00, 0x56, 0x1d, 0xd6, 0x52, 0x71, 0x87, 0x15, 0x6d, 0xcf,
	0xb1, 0xd4, 0x06, 0x14, 0xbf, 0x9f, 0x0c, 0x4b, 0x33, 0xc3, 0x4e, 0x8a, 0x17, 0xcf, 0xd8, 0xcd,
	0x77, 0x69, 0x61, 0x5d, 0x94, 0x65, 0xd4, 0x13, 0xe0, 0x0f, 0x92, 0x6f, 0xe5, 0xac, 0x6f, 0xbf,
	0x06, 0xb0, 0x9c, 0x2c, 0xe3, 0x58, 0x1a, 0x31, 0xcb, 0x13, 0xf9, 0x57, 0x54, 0x8e, 0x94, 0xc3,
	0xda, 0x1c, 0x8b, 0xcf, 0xd8, 0x92, 0x34, 0x1e, 0xa4, 0x9a, 0x6a, 0x9b, 0x0d, 0xfc, 0x61, 0x62,
	0x2f, 0x37, 0x71, 0xc2, 0x8b, 0xdb, 0x6c, 0x31, 0x67, 0x04, 0x5b, 0x3a, 0x05, 0x7c, 0x23, 0x71,
	0x17, 0x29, 0xd8, 0x4b, 0xb1, 0x56, 0xb3, 0x04, 0xa5, 0x06, 0xf8, 0x66, 0xbb, 0x59, 0x22, 0x71,
	0xd9, 0xc5, 0x5d, 0xb6, 0x5c, 0x7a, 0x90, 0x11, 0xc4, 0x78, 0xa4, 0xf0, 0xbf, 0x9c, 0xf9, 0x51,
	0xe2, 0x0b, 0xd2, 0x5e, 0x26, 0x29, 0xe7, 0xbf, 0xcd, 0x16, 0x15, 0x18, 0x98, 0xa1, 0x8f, 0x69,
	0x11, 0x14, 0xcc, 0xd0, 0x23, 0xb6, 0x32, 0x4b, 0x2b, 0x4a, 0x03, 0xd2, 0x8a, 0x52, 0x1a, 0x73,
	0x24, 0xcb, 0x13, 0xfe, 0x24, 0x19, 0xae, 0x35, 0xb9, 0xbb, 0x28, 0x77, 0xb3, 0x8a, 0x07, 0x9c,
	0xf3, 0x9f, 0xb1, 0x3d, 0xa5, 0x03, 0x26, 0x71, 0xde, 0xb3, 0xce, 0x96, 0x82, 0x91, 0x13, 0x10,
	0x1e, 0xca, 0x89, 0x00, 0x1b, 0xfd, 0x94, 0x7f, 0x9d, 0xf0, 0x4b, 0x29, 0xde, 0x87, 0x72, 0xd2,
	0xc3, 0x68, 0xf1, 0x39, 0xfb, 0x80, 0x48, 0x05, 0xb3, 0xcd, 0xf9, 0x86, 0xb6, 0x3b, 0x09, 0xdb,
	0xd0, 0xec, 0x4d, 0x87, 0x5d, 0x21, 0x76, 0x6e, 0x87, 0xf8, 0xb3, 0x44, 0x53, 0x9a, 0x6e, 0x6b,
	0x7f, 0x8a, 0x8f, 0xd9, 0xc5, 0x3a, 0x37, 0x2e, 0x91, 0x7f, 0x9b, 0xc0, 0x0b, 0x39, 0x2d, 0x86,
	0xf0, 0x70, 0xf0, 0x26, 0x97, 0xce, 0x46, 0x38, 0x8d, 0xa2, 0x92, 0xc6, 0xb8, 0x92, 0x6f, 0xd1,
	0xe1, 0x04, 0x3f, 0xec, 0x92, 0xb0, 0x97, 0xe2, 0xa9, 0xad, 0x16, 0x7d, 0xec, 0x01, 0xf8, 0x77,
	0xb9, 0xad, 0x86, 0xdd, 0xf1, 0x00, 0x38, 0x4b, 0xc1, 0x29, 0x51, 0xba, 0xb1, 0x8d, 0xbc, 0x9b,
	0x90, 0x73, 0xc1, 0xa9, 0x2e, 0xfe, 0x8d, 0x22, 0x34, 0xe2, 0x36, 0x89, 0x50, 0x8b, 0x0f, 0x19,
	0x47, 0x27, 0x02, 0x1e, 0x46, 0x46, 0x4e, 0x85, 0x87, 0x37, 0x99, 0xed, 0x25, 0x76, 0x39, 0x38,
	0xd5, 0x73, 0xaa, 0x9f, 0xd4, 0x3e, 0xbc, 0x79, 0xc7, 0xa7, 0xb4, 0x8f, 0x53, 0x51, 0x49, 0x7f,
	0x92, 0x7d, 0x3b, 0x6d, 0xdf, 0x36, 0xaa, 0x7b, 0xd2, 0x9f, 0x90, 0xef, 0x31, 0x5b, 0x9d, 0xf7,
	0xd5, 0x87, 0x9d, 0x9c, 0xdf, 0xd3, 0xd5, 0x68, 0x39, 0x69, 0xe3, 0xc8, 0x7b, 0x93, 0x31, 0x59,
	0x9e, 0x88, 0xe8, 0xf0, 0x39, 0xe0, 0xcf, 0xa9, 0x13, 0x59, 0x9e, 0x1c, 0xba, 0x81, 0x1f, 0x16,
	0x1f, 0xb1, 0x0b, 0xb6, 0x25, 0xef, 0x26, 0xf9, 0xbc, 0x6d, 0xf4, 0x0e, 0x5b, 0x6e, 0xe9, 0xe9,
	0xe4, 0x45, 0x69, 0x23, 0xff, 0x81, 0x76, 0xbf, 0x01, 0xf1, 0xec, 0xbb, 0x36, 0xe2, 0x55, 0xc9,
	0x83, 0xe4, 0xa1, 0x72, 0x13, 0x10, 0xd2, 0x18, 0xfe, 0x82, 0xae, 0x0a, 0x09, 0xfd, 0x14, 0xdf,
	0x32, 0xa6, 0xf8, 0x94, 0xe5, 0x10, 0xb6, 0x23, 0xc2, 0xd4, 0x96, 0xfc, 0xc7, 0x44, 0xe6, 0x81,
	0xdd, 0x06, 0x33, 0x98, 0xda, 0x12, 0xe7, 0xe2, 0x0c, 0x87, 0x0f, 0x8b, 0xd1, 0xf6, 0x04, 0x14,
	0xdf, 0xa3, 0xe6, 0xe7, 0x1c, 0xfb, 0xb5, 0x5a, 0x7c, 0xc2, 0x2e, 0xb5, 0xac, 0x72, 0x34, 0xe2,
	0xfb, 0xed, 0xe9, 0xdf, 0x06, 0xb3, 0x35, 0x1a, 0x15, 0x1b, 0x8c, 0xcf, 0x53, 0xad, 0xfc, 0x3f,
	0x25, 0xfe, 0x6a, 0x9b, 0x9f, 0xa5, 0x7f, 0xc2, 0x56, 0xb3, 0x91, 0xc6, 0x4e, 0xdb, 0x89, 0x34,
	0x5a, 0xa5, 0xe7, 0x17, 0xf8, 0x41, 0xb2, 0x5e, 0x27, 0x22, 0xcd, 0xde, 0x2e, 0xe9, 0x03, 0x94,
	0x8b, 0x1d, 0xb6, 0xf6, 0xce, 0x56, 0x09, 0x6d, 0x23, 0x78, 0x2b, 0x8d, 0x00, 0xef, 0x9d, 0xe7,
	0x3f, 0xa7, 0x14, 0x37, 0xcf, 0xec, 0xdc, 0x6e, 0x86, 0x7a, 0xc8, 0x14, 0x4f, 0xd9, 0x0d, 0x4d,
	0x6f, 0xfd, 0xb1, 0x71, 0x6f, 0xd3, 0xc5, 0xf7, 0xce, 0x08, 0xb0, 0xf2, 0x08, 0x5f, 0xec, 0xfe,
	0xda, 0xc2, 0xfa, 0xb9, 0xfe, 0x75, 0x1d, 0xf0, 0x94, 0x8c, 0x7b, 0xdb, 0x25, 0xbd, 0x47, 0x32,
	0xb6, 0x50, 0xc9, 0x53, 0xa1, 0xed, 0xb1, 0xd1, 0xc3, 0xd7, 0xf8, 0xec, 0x86, 0xe0, 0xb4, 0xcd,
	0x57, 0x6b, 0x40, 0x2d, 0x54, 0xf2, 0x74, 0x37, 0x03, 0x03, 0xd2, 0xe9, 0x6e, 0x6d, 0xb1, 0x0f,
	0xe7, 0x6a, 0x7a, 0x08, 0xe3, 0x0a, 0x44, 0x7c, 0xed, 0x21, 0xbc, 0x76, 0x46, 0xf1, 0xc3, 0xe4,
	0x5f, 0x3d, 0x9e, 0xd5, 0xed, 0x27, 0xe4, 0xb0, 0x26, 0x8a, 0x07, 0xec, 0xda, 0x5c, 0x6d, 0xed,
	0xea, 0xda, 0x2f, 0x69, 0x20, 0x74, 0xab, 0xb0, 0x76, 0xb9, 0xf0, 0x1d, 0x56, 0x34, 0x2e, 0xa9,
	0xea, 0x31, 0xfd, 0x85, 0x2e, 0x65, 0xad, 0x6c, 0xa9, 0x3c, 0xae, 0x1b, 0x8c, 0x37, 0xf4, 0xd8,
	0x2a, 0xf0, 0xc2, 0x8f, 0xeb, 0x2a, 0xbf, 0xd2, 0xf9, 0xd6, 0xfa, 0x4b, 0x94, 0xfb, 0xe3, 0x5c,
	0xe6, 0x2e, 0x5b, 0x9e, 0x95, 0xc1, 0xd7, 0x25, 0x0d, 0x40, 0xe0, 0xbf, 0xd1, 0x43, 0xdf, 0x14,
	0x42, 0x09, 0x27, 0x20, 0x14, 0x9b, 0xad, 0x52, 0xda, 0x06, 0xf0, 0x31, 0x59, 0xc6, 0x1e, 0x02,
	0x7f, 0x45, 0x57, 0xb5, 0xd6, 0x77, 0x93, 0xbc, 0x93, 0x55, 0xfc, 0xa4, 0x35, 0x4e, 0x1a, 0xef,
	0xc0, 0x7f, 0xa7, 0xc1, 0xa9, 0xe3, 0x34, 0xd6, 0x61, 0xae, 0x7b, 0xeb, 0xa2, 0x38, 0x76, 0x63,
	0xab, 0xf8, 0x1f, 0xf3, 0xdd, 0xef, 0xbb, 0xb8, 0x83, 0xf1, 0xb9, 0x25, 0xe5, 0x77, 0xa3, 0x59,
	0xd2, 0x9f, 0xf3, 0x4b, 0xa2, 0x02, 0xcd, 0x92, 0x70, 0x98, 0x5d, 0x94, 0x46, 0x8c, 0xe4, 0x38,
	0xd4, 0xaf, 0xcd, 0x5f, 0x79, 0x98, 0x51, 0x38, 0xc0, 0x78, 0x73, 0x22, 0xc4, 0xe6, 0x3b, 0x40,
	0xf0, 0xdf, 0xf9, 0x0b, 0x8a, 0x0a, 0x9d, 0x3c, 0xd1, 0x9b, 0x6c, 0x85, 0x68, 0xe5, 0x6c, 0xfd,
	0xa3, 0xc4, 0xd5, 0x1f, 0x72, 0x91, 0x47, 0x0e, 0x81, 0x6d, 0x67, 0xe9, 0x77, 0x89, 0xcb, 0x9f,
	0xf3, 0x2f, 0xd8, 0x32, 0x39, 0xf1, 0xc2, 0x63, 0xf3, 0x95, 0x0c, 0x11, 0x3c, 0xff, 0x87, 0x3e,
	0x30, 0x49, 0x1b, 0xf8, 0xe1, 0xbe, 0x8b, 0x7b, 0x49, 0x48, 0xaf, 0x47, 0x32, 0x10, 0x28, 0xc0,
	0x55, 0x41, 0x8c, 0xc0, 0x2a, 0x6d, 0x87, 0x5c, 0xe6, 0xd7, 0x03, 0x01, 0xe2, 0x7b, 0xae, 0x0a,
	0x07, 0xa4, 0x62, 0xff, 0x46, 0x86, 0x98, 0xdb, 0x1f, 0x81, 0xd7, 0x4e, 0xf1, 0xa3, 0xb5, 0x85,
	0xf5, 0xff, 0xf5, 0x2f, 0xa3, 0x90, 0xda, 0x3f, 0x48, 0x61, 0xfc, 0xec, 0xb4, 0xf7, 0x2a, 0xea,
	0x0a, 0x78, 0x99, 0xd0, 0x4b, 0xb3, 0xad, 0x3a, 0xd4, 0x15, 0xe0, 0xb3, 0xd7, 0xca, 0x9a, 0x40,
	0x95, 0xc0, 0xc5, 0x26, 0x67, 0xe2, 0xd6, 0xd9, 0x52, 0xe2, 0xea, 0xa1, 0x42, 0x10, 0x28, 0x23,
	0xc6, 0xf3, 0x20, 0xe9, 0x0a, 0x8e, 0xfe, 0x9f, 0x7e, 0x82, 0xde, 0xff, 0x2f, 0x00, 0x00, 0xff,
	0xff, 0xd0, 0xd4, 0xcc, 0x91, 0xa0, 0x0a, 0x00, 0x00,
}
