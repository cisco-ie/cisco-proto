/*
Copyright 2019 Cisco Systems

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: l2fib_evpn_ipmac_info.proto

package cisco_ios_xr_l2vpn_oper_l2vpn_forwarding_nodes_node_l2fib_evpn_ip4macs_l2fib_evpn_ip4mac

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type L2FibEvpnIpmacInfo_KEYS struct {
	NodeId               string   `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	Bdid                 uint32   `protobuf:"varint,2,opt,name=bdid,proto3" json:"bdid,omitempty"`
	IpAddress            string   `protobuf:"bytes,3,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
	IsLocal              bool     `protobuf:"varint,4,opt,name=is_local,json=isLocal,proto3" json:"is_local,omitempty"`
	MacAddress           string   `protobuf:"bytes,5,opt,name=mac_address,json=macAddress,proto3" json:"mac_address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *L2FibEvpnIpmacInfo_KEYS) Reset()         { *m = L2FibEvpnIpmacInfo_KEYS{} }
func (m *L2FibEvpnIpmacInfo_KEYS) String() string { return proto.CompactTextString(m) }
func (*L2FibEvpnIpmacInfo_KEYS) ProtoMessage()    {}
func (*L2FibEvpnIpmacInfo_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_359a6e06a2413ca9, []int{0}
}

func (m *L2FibEvpnIpmacInfo_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2FibEvpnIpmacInfo_KEYS.Unmarshal(m, b)
}
func (m *L2FibEvpnIpmacInfo_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2FibEvpnIpmacInfo_KEYS.Marshal(b, m, deterministic)
}
func (m *L2FibEvpnIpmacInfo_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2FibEvpnIpmacInfo_KEYS.Merge(m, src)
}
func (m *L2FibEvpnIpmacInfo_KEYS) XXX_Size() int {
	return xxx_messageInfo_L2FibEvpnIpmacInfo_KEYS.Size(m)
}
func (m *L2FibEvpnIpmacInfo_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_L2FibEvpnIpmacInfo_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_L2FibEvpnIpmacInfo_KEYS proto.InternalMessageInfo

func (m *L2FibEvpnIpmacInfo_KEYS) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

func (m *L2FibEvpnIpmacInfo_KEYS) GetBdid() uint32 {
	if m != nil {
		return m.Bdid
	}
	return 0
}

func (m *L2FibEvpnIpmacInfo_KEYS) GetIpAddress() string {
	if m != nil {
		return m.IpAddress
	}
	return ""
}

func (m *L2FibEvpnIpmacInfo_KEYS) GetIsLocal() bool {
	if m != nil {
		return m.IsLocal
	}
	return false
}

func (m *L2FibEvpnIpmacInfo_KEYS) GetMacAddress() string {
	if m != nil {
		return m.MacAddress
	}
	return ""
}

type L2FibIpAddrT struct {
	AddrType             string   `protobuf:"bytes,1,opt,name=addr_type,json=addrType,proto3" json:"addr_type,omitempty"`
	Ip                   string   `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *L2FibIpAddrT) Reset()         { *m = L2FibIpAddrT{} }
func (m *L2FibIpAddrT) String() string { return proto.CompactTextString(m) }
func (*L2FibIpAddrT) ProtoMessage()    {}
func (*L2FibIpAddrT) Descriptor() ([]byte, []int) {
	return fileDescriptor_359a6e06a2413ca9, []int{1}
}

func (m *L2FibIpAddrT) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2FibIpAddrT.Unmarshal(m, b)
}
func (m *L2FibIpAddrT) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2FibIpAddrT.Marshal(b, m, deterministic)
}
func (m *L2FibIpAddrT) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2FibIpAddrT.Merge(m, src)
}
func (m *L2FibIpAddrT) XXX_Size() int {
	return xxx_messageInfo_L2FibIpAddrT.Size(m)
}
func (m *L2FibIpAddrT) XXX_DiscardUnknown() {
	xxx_messageInfo_L2FibIpAddrT.DiscardUnknown(m)
}

var xxx_messageInfo_L2FibIpAddrT proto.InternalMessageInfo

func (m *L2FibIpAddrT) GetAddrType() string {
	if m != nil {
		return m.AddrType
	}
	return ""
}

func (m *L2FibIpAddrT) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

type L2FibEvpnIpmacInfo struct {
	BdidXr               uint32        `protobuf:"varint,50,opt,name=bdid_xr,json=bdidXr,proto3" json:"bdid_xr,omitempty"`
	MacAddressXr         string        `protobuf:"bytes,51,opt,name=mac_address_xr,json=macAddressXr,proto3" json:"mac_address_xr,omitempty"`
	IpAddressXr          *L2FibIpAddrT `protobuf:"bytes,52,opt,name=ip_address_xr,json=ipAddressXr,proto3" json:"ip_address_xr,omitempty"`
	ArpNdSyncPending     bool          `protobuf:"varint,53,opt,name=arp_nd_sync_pending,json=arpNdSyncPending,proto3" json:"arp_nd_sync_pending,omitempty"`
	ArpNdProbePending    bool          `protobuf:"varint,54,opt,name=arp_nd_probe_pending,json=arpNdProbePending,proto3" json:"arp_nd_probe_pending,omitempty"`
	ArpNdDeletePending   bool          `protobuf:"varint,55,opt,name=arp_nd_delete_pending,json=arpNdDeletePending,proto3" json:"arp_nd_delete_pending,omitempty"`
	IsLocalXr            bool          `protobuf:"varint,56,opt,name=is_local_xr,json=isLocalXr,proto3" json:"is_local_xr,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *L2FibEvpnIpmacInfo) Reset()         { *m = L2FibEvpnIpmacInfo{} }
func (m *L2FibEvpnIpmacInfo) String() string { return proto.CompactTextString(m) }
func (*L2FibEvpnIpmacInfo) ProtoMessage()    {}
func (*L2FibEvpnIpmacInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_359a6e06a2413ca9, []int{2}
}

func (m *L2FibEvpnIpmacInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2FibEvpnIpmacInfo.Unmarshal(m, b)
}
func (m *L2FibEvpnIpmacInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2FibEvpnIpmacInfo.Marshal(b, m, deterministic)
}
func (m *L2FibEvpnIpmacInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2FibEvpnIpmacInfo.Merge(m, src)
}
func (m *L2FibEvpnIpmacInfo) XXX_Size() int {
	return xxx_messageInfo_L2FibEvpnIpmacInfo.Size(m)
}
func (m *L2FibEvpnIpmacInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_L2FibEvpnIpmacInfo.DiscardUnknown(m)
}

var xxx_messageInfo_L2FibEvpnIpmacInfo proto.InternalMessageInfo

func (m *L2FibEvpnIpmacInfo) GetBdidXr() uint32 {
	if m != nil {
		return m.BdidXr
	}
	return 0
}

func (m *L2FibEvpnIpmacInfo) GetMacAddressXr() string {
	if m != nil {
		return m.MacAddressXr
	}
	return ""
}

func (m *L2FibEvpnIpmacInfo) GetIpAddressXr() *L2FibIpAddrT {
	if m != nil {
		return m.IpAddressXr
	}
	return nil
}

func (m *L2FibEvpnIpmacInfo) GetArpNdSyncPending() bool {
	if m != nil {
		return m.ArpNdSyncPending
	}
	return false
}

func (m *L2FibEvpnIpmacInfo) GetArpNdProbePending() bool {
	if m != nil {
		return m.ArpNdProbePending
	}
	return false
}

func (m *L2FibEvpnIpmacInfo) GetArpNdDeletePending() bool {
	if m != nil {
		return m.ArpNdDeletePending
	}
	return false
}

func (m *L2FibEvpnIpmacInfo) GetIsLocalXr() bool {
	if m != nil {
		return m.IsLocalXr
	}
	return false
}

func init() {
	proto.RegisterType((*L2FibEvpnIpmacInfo_KEYS)(nil), "cisco_ios_xr_l2vpn_oper.l2vpn_forwarding.nodes.node.l2fib_evpn_ip4macs.l2fib_evpn_ip4mac.l2fib_evpn_ipmac_info_KEYS")
	proto.RegisterType((*L2FibIpAddrT)(nil), "cisco_ios_xr_l2vpn_oper.l2vpn_forwarding.nodes.node.l2fib_evpn_ip4macs.l2fib_evpn_ip4mac.l2fib_ip_addr_t")
	proto.RegisterType((*L2FibEvpnIpmacInfo)(nil), "cisco_ios_xr_l2vpn_oper.l2vpn_forwarding.nodes.node.l2fib_evpn_ip4macs.l2fib_evpn_ip4mac.l2fib_evpn_ipmac_info")
}

func init() { proto.RegisterFile("l2fib_evpn_ipmac_info.proto", fileDescriptor_359a6e06a2413ca9) }

var fileDescriptor_359a6e06a2413ca9 = []byte{
	// 413 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x52, 0xcb, 0xae, 0xd3, 0x30,
	0x10, 0x55, 0x7a, 0x2f, 0x6d, 0x33, 0xa1, 0x05, 0x0c, 0x15, 0x81, 0x0a, 0x88, 0x2a, 0x16, 0xd9,
	0x10, 0x44, 0x5a, 0x1e, 0x2b, 0x24, 0x24, 0x58, 0x20, 0x10, 0xaa, 0x52, 0x16, 0x61, 0x65, 0x39,
	0xb6, 0x8b, 0x2c, 0xa5, 0xb6, 0x65, 0x57, 0xd0, 0x7c, 0x04, 0x1f, 0xc0, 0x9e, 0x0f, 0x45, 0x76,
	0x92, 0x96, 0x47, 0xb7, 0x77, 0x63, 0xcd, 0xe3, 0x9c, 0x99, 0x33, 0x33, 0x86, 0x79, 0x9d, 0x6f,
	0x45, 0x85, 0xf9, 0x37, 0x2d, 0xb1, 0xd0, 0x3b, 0x42, 0xb1, 0x90, 0x5b, 0x95, 0x69, 0xa3, 0xf6,
	0x0a, 0x95, 0x54, 0x58, 0xaa, 0xb0, 0x50, 0x16, 0x1f, 0x0c, 0xae, 0x73, 0x07, 0x52, 0x9a, 0x9b,
	0xac, 0x35, 0xb7, 0xca, 0x7c, 0x27, 0x86, 0x09, 0xf9, 0x35, 0x93, 0x8a, 0x71, 0xeb, 0xdf, 0xec,
	0xaf, 0x82, 0xab, 0x1d, 0xa1, 0xf6, 0xff, 0xd0, 0xe2, 0x57, 0x00, 0xf7, 0xcf, 0x76, 0xc6, 0x1f,
	0xde, 0x7d, 0xd9, 0xa0, 0xbb, 0x30, 0x72, 0xb5, 0xb0, 0x60, 0x71, 0x90, 0x04, 0x69, 0x58, 0x0c,
	0x9d, 0xfb, 0x9e, 0x21, 0x04, 0x97, 0x15, 0x13, 0x2c, 0x1e, 0x24, 0x41, 0x3a, 0x29, 0xbc, 0x8d,
	0x1e, 0x00, 0x08, 0x8d, 0x09, 0x63, 0x86, 0x5b, 0x1b, 0x5f, 0x78, 0x7c, 0x28, 0xf4, 0x9b, 0x36,
	0x80, 0xee, 0xc1, 0x58, 0x58, 0x5c, 0x2b, 0x4a, 0xea, 0xf8, 0x32, 0x09, 0xd2, 0x71, 0x31, 0x12,
	0xf6, 0xa3, 0x73, 0xd1, 0x23, 0x88, 0x5c, 0xdf, 0x9e, 0x7a, 0xcd, 0x53, 0x61, 0x47, 0x68, 0xc7,
	0x5d, 0xbc, 0x86, 0x1b, 0xad, 0xca, 0xae, 0x01, 0xde, 0xa3, 0x39, 0x84, 0xad, 0xd5, 0x68, 0xde,
	0x89, 0x1b, 0xbb, 0xc0, 0xe7, 0x46, 0x73, 0x34, 0x85, 0x81, 0xd0, 0x5e, 0x5c, 0x58, 0x0c, 0x84,
	0x5e, 0xfc, 0xbc, 0x80, 0xd9, 0xd9, 0x31, 0xdd, 0x84, 0x4e, 0x3c, 0x3e, 0x98, 0x38, 0xf7, 0xb3,
	0x0c, 0x9d, 0x5b, 0x1a, 0xf4, 0x18, 0xa6, 0x7f, 0x68, 0x72, 0xf9, 0xa5, 0x2f, 0x77, 0xfd, 0x24,
	0xab, 0x34, 0xe8, 0x47, 0x00, 0x93, 0xd3, 0xd0, 0x0e, 0xb5, 0x4a, 0x82, 0x34, 0xca, 0x45, 0x76,
	0x55, 0x27, 0xcb, 0xfe, 0x59, 0x44, 0x11, 0x1d, 0x57, 0x5c, 0x1a, 0xf4, 0x04, 0x6e, 0x13, 0xa3,
	0xb1, 0x64, 0xd8, 0x36, 0x92, 0x62, 0xcd, 0xa5, 0xeb, 0x11, 0x3f, 0xf7, 0xfb, 0xbe, 0x49, 0x8c,
	0xfe, 0xc4, 0x36, 0x8d, 0xa4, 0xeb, 0x36, 0x8e, 0x9e, 0xc2, 0x9d, 0x0e, 0xae, 0x8d, 0xaa, 0xf8,
	0x11, 0xff, 0xc2, 0xe3, 0x6f, 0x79, 0xfc, 0xda, 0x65, 0x7a, 0xc2, 0x33, 0x98, 0x75, 0x04, 0xc6,
	0x6b, 0xbe, 0x3f, 0x31, 0x5e, 0x7a, 0x06, 0xf2, 0x8c, 0xb7, 0x3e, 0xd5, 0x53, 0x1e, 0x42, 0xd4,
	0xdf, 0xdd, 0xed, 0xe7, 0x95, 0x07, 0x86, 0xdd, 0xe9, 0x4b, 0x53, 0x0d, 0xfd, 0x1f, 0x5f, 0xfe,
	0x0e, 0x00, 0x00, 0xff, 0xff, 0x73, 0x86, 0x9e, 0x70, 0x02, 0x03, 0x00, 0x00,
}
