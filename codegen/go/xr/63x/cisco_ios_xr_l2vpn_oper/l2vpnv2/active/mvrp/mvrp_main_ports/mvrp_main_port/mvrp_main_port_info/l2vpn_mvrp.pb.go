/*
Copyright 2019 Cisco Systems

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: l2vpn_mvrp.proto

package cisco_ios_xr_l2vpn_oper_l2vpnv2_active_mvrp_mvrp_main_ports_mvrp_main_port_mvrp_main_port_info

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type L2VpnMvrp_KEYS struct {
	MainPortInterfaceName string   `protobuf:"bytes,1,opt,name=main_port_interface_name,json=mainPortInterfaceName,proto3" json:"main_port_interface_name,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *L2VpnMvrp_KEYS) Reset()         { *m = L2VpnMvrp_KEYS{} }
func (m *L2VpnMvrp_KEYS) String() string { return proto.CompactTextString(m) }
func (*L2VpnMvrp_KEYS) ProtoMessage()    {}
func (*L2VpnMvrp_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e7db156249ddcd0, []int{0}
}

func (m *L2VpnMvrp_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2VpnMvrp_KEYS.Unmarshal(m, b)
}
func (m *L2VpnMvrp_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2VpnMvrp_KEYS.Marshal(b, m, deterministic)
}
func (m *L2VpnMvrp_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2VpnMvrp_KEYS.Merge(m, src)
}
func (m *L2VpnMvrp_KEYS) XXX_Size() int {
	return xxx_messageInfo_L2VpnMvrp_KEYS.Size(m)
}
func (m *L2VpnMvrp_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_L2VpnMvrp_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_L2VpnMvrp_KEYS proto.InternalMessageInfo

func (m *L2VpnMvrp_KEYS) GetMainPortInterfaceName() string {
	if m != nil {
		return m.MainPortInterfaceName
	}
	return ""
}

type L2VpnEfpRange struct {
	Lower                uint32   `protobuf:"varint,1,opt,name=lower,proto3" json:"lower,omitempty"`
	Upper                uint32   `protobuf:"varint,2,opt,name=upper,proto3" json:"upper,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *L2VpnEfpRange) Reset()         { *m = L2VpnEfpRange{} }
func (m *L2VpnEfpRange) String() string { return proto.CompactTextString(m) }
func (*L2VpnEfpRange) ProtoMessage()    {}
func (*L2VpnEfpRange) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e7db156249ddcd0, []int{1}
}

func (m *L2VpnEfpRange) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2VpnEfpRange.Unmarshal(m, b)
}
func (m *L2VpnEfpRange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2VpnEfpRange.Marshal(b, m, deterministic)
}
func (m *L2VpnEfpRange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2VpnEfpRange.Merge(m, src)
}
func (m *L2VpnEfpRange) XXX_Size() int {
	return xxx_messageInfo_L2VpnEfpRange.Size(m)
}
func (m *L2VpnEfpRange) XXX_DiscardUnknown() {
	xxx_messageInfo_L2VpnEfpRange.DiscardUnknown(m)
}

var xxx_messageInfo_L2VpnEfpRange proto.InternalMessageInfo

func (m *L2VpnEfpRange) GetLower() uint32 {
	if m != nil {
		return m.Lower
	}
	return 0
}

func (m *L2VpnEfpRange) GetUpper() uint32 {
	if m != nil {
		return m.Upper
	}
	return 0
}

type L2VpnMvrpBp struct {
	BridgePortInterfaceName string           `protobuf:"bytes,1,opt,name=bridge_port_interface_name,json=bridgePortInterfaceName,proto3" json:"bridge_port_interface_name,omitempty"`
	BridgePortXconnectId    uint32           `protobuf:"varint,2,opt,name=bridge_port_xconnect_id,json=bridgePortXconnectId,proto3" json:"bridge_port_xconnect_id,omitempty"`
	MvrpSequenceNumber      uint32           `protobuf:"varint,3,opt,name=mvrp_sequence_number,json=mvrpSequenceNumber,proto3" json:"mvrp_sequence_number,omitempty"`
	VlanRange               []*L2VpnEfpRange `protobuf:"bytes,4,rep,name=vlan_range,json=vlanRange,proto3" json:"vlan_range,omitempty"`
	XXX_NoUnkeyedLiteral    struct{}         `json:"-"`
	XXX_unrecognized        []byte           `json:"-"`
	XXX_sizecache           int32            `json:"-"`
}

func (m *L2VpnMvrpBp) Reset()         { *m = L2VpnMvrpBp{} }
func (m *L2VpnMvrpBp) String() string { return proto.CompactTextString(m) }
func (*L2VpnMvrpBp) ProtoMessage()    {}
func (*L2VpnMvrpBp) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e7db156249ddcd0, []int{2}
}

func (m *L2VpnMvrpBp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2VpnMvrpBp.Unmarshal(m, b)
}
func (m *L2VpnMvrpBp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2VpnMvrpBp.Marshal(b, m, deterministic)
}
func (m *L2VpnMvrpBp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2VpnMvrpBp.Merge(m, src)
}
func (m *L2VpnMvrpBp) XXX_Size() int {
	return xxx_messageInfo_L2VpnMvrpBp.Size(m)
}
func (m *L2VpnMvrpBp) XXX_DiscardUnknown() {
	xxx_messageInfo_L2VpnMvrpBp.DiscardUnknown(m)
}

var xxx_messageInfo_L2VpnMvrpBp proto.InternalMessageInfo

func (m *L2VpnMvrpBp) GetBridgePortInterfaceName() string {
	if m != nil {
		return m.BridgePortInterfaceName
	}
	return ""
}

func (m *L2VpnMvrpBp) GetBridgePortXconnectId() uint32 {
	if m != nil {
		return m.BridgePortXconnectId
	}
	return 0
}

func (m *L2VpnMvrpBp) GetMvrpSequenceNumber() uint32 {
	if m != nil {
		return m.MvrpSequenceNumber
	}
	return 0
}

func (m *L2VpnMvrpBp) GetVlanRange() []*L2VpnEfpRange {
	if m != nil {
		return m.VlanRange
	}
	return nil
}

type L2VpnMvrp struct {
	MainPortInterfaceName string       `protobuf:"bytes,50,opt,name=main_port_interface_name,json=mainPortInterfaceName,proto3" json:"main_port_interface_name,omitempty"`
	IsTrunk               bool         `protobuf:"varint,51,opt,name=is_trunk,json=isTrunk,proto3" json:"is_trunk,omitempty"`
	IsDefaultEncap        bool         `protobuf:"varint,52,opt,name=is_default_encap,json=isDefaultEncap,proto3" json:"is_default_encap,omitempty"`
	DefaultBridgePort     *L2VpnMvrpBp `protobuf:"bytes,53,opt,name=default_bridge_port,json=defaultBridgePort,proto3" json:"default_bridge_port,omitempty"`
	NumberOfBridgePorts   uint32       `protobuf:"varint,54,opt,name=number_of_bridge_ports,json=numberOfBridgePorts,proto3" json:"number_of_bridge_ports,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}     `json:"-"`
	XXX_unrecognized      []byte       `json:"-"`
	XXX_sizecache         int32        `json:"-"`
}

func (m *L2VpnMvrp) Reset()         { *m = L2VpnMvrp{} }
func (m *L2VpnMvrp) String() string { return proto.CompactTextString(m) }
func (*L2VpnMvrp) ProtoMessage()    {}
func (*L2VpnMvrp) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e7db156249ddcd0, []int{3}
}

func (m *L2VpnMvrp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2VpnMvrp.Unmarshal(m, b)
}
func (m *L2VpnMvrp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2VpnMvrp.Marshal(b, m, deterministic)
}
func (m *L2VpnMvrp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2VpnMvrp.Merge(m, src)
}
func (m *L2VpnMvrp) XXX_Size() int {
	return xxx_messageInfo_L2VpnMvrp.Size(m)
}
func (m *L2VpnMvrp) XXX_DiscardUnknown() {
	xxx_messageInfo_L2VpnMvrp.DiscardUnknown(m)
}

var xxx_messageInfo_L2VpnMvrp proto.InternalMessageInfo

func (m *L2VpnMvrp) GetMainPortInterfaceName() string {
	if m != nil {
		return m.MainPortInterfaceName
	}
	return ""
}

func (m *L2VpnMvrp) GetIsTrunk() bool {
	if m != nil {
		return m.IsTrunk
	}
	return false
}

func (m *L2VpnMvrp) GetIsDefaultEncap() bool {
	if m != nil {
		return m.IsDefaultEncap
	}
	return false
}

func (m *L2VpnMvrp) GetDefaultBridgePort() *L2VpnMvrpBp {
	if m != nil {
		return m.DefaultBridgePort
	}
	return nil
}

func (m *L2VpnMvrp) GetNumberOfBridgePorts() uint32 {
	if m != nil {
		return m.NumberOfBridgePorts
	}
	return 0
}

func init() {
	proto.RegisterType((*L2VpnMvrp_KEYS)(nil), "cisco_ios_xr_l2vpn_oper.l2vpnv2.active.mvrp.mvrp_main_ports.mvrp_main_port.mvrp_main_port_info.l2vpn_mvrp_KEYS")
	proto.RegisterType((*L2VpnEfpRange)(nil), "cisco_ios_xr_l2vpn_oper.l2vpnv2.active.mvrp.mvrp_main_ports.mvrp_main_port.mvrp_main_port_info.l2vpn_efp_range")
	proto.RegisterType((*L2VpnMvrpBp)(nil), "cisco_ios_xr_l2vpn_oper.l2vpnv2.active.mvrp.mvrp_main_ports.mvrp_main_port.mvrp_main_port_info.l2vpn_mvrp_bp")
	proto.RegisterType((*L2VpnMvrp)(nil), "cisco_ios_xr_l2vpn_oper.l2vpnv2.active.mvrp.mvrp_main_ports.mvrp_main_port.mvrp_main_port_info.l2vpn_mvrp")
}

func init() { proto.RegisterFile("l2vpn_mvrp.proto", fileDescriptor_5e7db156249ddcd0) }

var fileDescriptor_5e7db156249ddcd0 = []byte{
	// 419 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x53, 0xcd, 0x6e, 0xd4, 0x30,
	0x10, 0x56, 0xb6, 0xfc, 0xb4, 0x53, 0x15, 0x8a, 0xbb, 0x50, 0xc3, 0x69, 0xb5, 0xa7, 0x9c, 0x22,
	0x94, 0xa5, 0x70, 0x40, 0x5c, 0x10, 0x3d, 0x14, 0xa4, 0x82, 0x52, 0x0e, 0x70, 0xc1, 0xf2, 0x66,
	0x27, 0x95, 0x45, 0x62, 0x1b, 0xdb, 0x09, 0xfb, 0x14, 0xbc, 0x01, 0xaf, 0xc3, 0x6b, 0xf0, 0x2a,
	0xc8, 0x76, 0x96, 0x44, 0x8b, 0xb4, 0x37, 0x7a, 0x89, 0xfc, 0xcd, 0x37, 0x5f, 0xe6, 0xcb, 0x7c,
	0x31, 0x1c, 0xd7, 0x79, 0xa7, 0x25, 0x6b, 0x3a, 0xa3, 0x33, 0x6d, 0x94, 0x53, 0xe4, 0x4b, 0x29,
	0x6c, 0xa9, 0x98, 0x50, 0x96, 0xad, 0x0d, 0x8b, 0xb4, 0xd2, 0x68, 0xb2, 0x70, 0xec, 0xf2, 0x8c,
	0x97, 0x4e, 0x74, 0x98, 0x05, 0x89, 0x7f, 0xb0, 0x86, 0x0b, 0xc9, 0xb4, 0x32, 0xce, 0x6e, 0xe1,
	0x2d, 0xc8, 0x84, 0xac, 0xd4, 0xfc, 0x2d, 0xdc, 0x1f, 0x66, 0xb2, 0x77, 0xe7, 0x9f, 0xaf, 0xc8,
	0x0b, 0xa0, 0xe3, 0x26, 0x87, 0xa6, 0xe2, 0x25, 0x32, 0xc9, 0x1b, 0xa4, 0xc9, 0x2c, 0x49, 0x0f,
	0x8a, 0x87, 0x9e, 0xff, 0xa0, 0x8c, 0xbb, 0xd8, 0xb0, 0x97, 0xbc, 0xc1, 0xf9, 0xab, 0xcd, 0xbb,
	0xb0, 0xd2, 0xcc, 0x70, 0x79, 0x8d, 0x64, 0x0a, 0xb7, 0x6b, 0xf5, 0x1d, 0x4d, 0x10, 0x1e, 0x15,
	0x11, 0xf8, 0x6a, 0xab, 0x35, 0x1a, 0x3a, 0x89, 0xd5, 0x00, 0xe6, 0xbf, 0x26, 0x70, 0x34, 0xf2,
	0xb2, 0xd4, 0xe4, 0x25, 0x3c, 0x59, 0x1a, 0xb1, 0xba, 0xc6, 0x1d, 0x5e, 0x4e, 0x63, 0xc7, 0x3f,
	0x6e, 0xc8, 0x19, 0x9c, 0x8e, 0xc5, 0xeb, 0x52, 0x49, 0x89, 0xa5, 0x63, 0x62, 0xd5, 0x8f, 0x9d,
	0x0e, 0xca, 0x4f, 0x3d, 0x79, 0xb1, 0x22, 0x4f, 0x61, 0x1a, 0xc6, 0x5b, 0xfc, 0xd6, 0xa2, 0xf4,
	0xb3, 0xda, 0x66, 0x89, 0x86, 0xee, 0x05, 0x0d, 0xf1, 0xdc, 0x55, 0x4f, 0x5d, 0x06, 0x86, 0xfc,
	0x48, 0x00, 0xba, 0x9a, 0xcb, 0xf8, 0xc9, 0xf4, 0xd6, 0x6c, 0x2f, 0x3d, 0xcc, 0x55, 0xf6, 0x7f,
	0x83, 0xcb, 0xb6, 0x36, 0x5d, 0x1c, 0x78, 0x0b, 0x85, 0x3f, 0xce, 0x7f, 0x4f, 0x00, 0x86, 0x45,
	0xee, 0xcc, 0x33, 0xdf, 0x91, 0x27, 0x79, 0x0c, 0xfb, 0xc2, 0x32, 0x67, 0x5a, 0xf9, 0x95, 0x2e,
	0x66, 0x49, 0xba, 0x5f, 0xdc, 0x15, 0xf6, 0xa3, 0x87, 0x24, 0x85, 0x63, 0x61, 0xd9, 0x0a, 0x2b,
	0xde, 0xd6, 0x8e, 0xa1, 0x2c, 0xb9, 0xa6, 0xcf, 0x42, 0xcb, 0x3d, 0x61, 0xdf, 0xc4, 0xf2, 0xb9,
	0xaf, 0x92, 0x9f, 0x09, 0x9c, 0x6c, 0xfa, 0x46, 0x79, 0xd0, 0xb3, 0x59, 0x92, 0x1e, 0xe6, 0xcd,
	0xcd, 0xac, 0xa9, 0xff, 0xa1, 0x8a, 0x07, 0xbd, 0x93, 0xd7, 0x7f, 0x93, 0x27, 0x0b, 0x78, 0x14,
	0x13, 0x66, 0xaa, 0x1a, 0x1b, 0xb4, 0xf4, 0x79, 0x48, 0xfc, 0x24, 0xb2, 0xef, 0xab, 0x41, 0x63,
	0x97, 0x77, 0xc2, 0xe5, 0x5c, 0xfc, 0x09, 0x00, 0x00, 0xff, 0xff, 0xd2, 0x82, 0x76, 0x6a, 0xb0,
	0x03, 0x00, 0x00,
}
