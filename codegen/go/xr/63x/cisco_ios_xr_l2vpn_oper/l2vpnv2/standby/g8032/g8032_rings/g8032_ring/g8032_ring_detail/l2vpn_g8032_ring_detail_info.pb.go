/*
Copyright 2019 Cisco Systems

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: l2vpn_g8032_ring_detail_info.proto

package cisco_ios_xr_l2vpn_oper_l2vpnv2_standby_g8032_g8032_rings_g8032_ring_g8032_ring_detail

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type L2VpnG8032RingDetailInfo_KEYS struct {
	RingName             string   `protobuf:"bytes,1,opt,name=ring_name,json=ringName,proto3" json:"ring_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *L2VpnG8032RingDetailInfo_KEYS) Reset()         { *m = L2VpnG8032RingDetailInfo_KEYS{} }
func (m *L2VpnG8032RingDetailInfo_KEYS) String() string { return proto.CompactTextString(m) }
func (*L2VpnG8032RingDetailInfo_KEYS) ProtoMessage()    {}
func (*L2VpnG8032RingDetailInfo_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_ba15940c04b4961e, []int{0}
}

func (m *L2VpnG8032RingDetailInfo_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2VpnG8032RingDetailInfo_KEYS.Unmarshal(m, b)
}
func (m *L2VpnG8032RingDetailInfo_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2VpnG8032RingDetailInfo_KEYS.Marshal(b, m, deterministic)
}
func (m *L2VpnG8032RingDetailInfo_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2VpnG8032RingDetailInfo_KEYS.Merge(m, src)
}
func (m *L2VpnG8032RingDetailInfo_KEYS) XXX_Size() int {
	return xxx_messageInfo_L2VpnG8032RingDetailInfo_KEYS.Size(m)
}
func (m *L2VpnG8032RingDetailInfo_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_L2VpnG8032RingDetailInfo_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_L2VpnG8032RingDetailInfo_KEYS proto.InternalMessageInfo

func (m *L2VpnG8032RingDetailInfo_KEYS) GetRingName() string {
	if m != nil {
		return m.RingName
	}
	return ""
}

type L2VpnG8032RingDetailInfo struct {
	RingName             string   `protobuf:"bytes,50,opt,name=ring_name,json=ringName,proto3" json:"ring_name,omitempty"`
	Port0                string   `protobuf:"bytes,51,opt,name=port0,proto3" json:"port0,omitempty"`
	Port1                string   `protobuf:"bytes,52,opt,name=port1,proto3" json:"port1,omitempty"`
	Monitor0             string   `protobuf:"bytes,53,opt,name=monitor0,proto3" json:"monitor0,omitempty"`
	Monitor1             string   `protobuf:"bytes,54,opt,name=monitor1,proto3" json:"monitor1,omitempty"`
	IsProviderBridge     bool     `protobuf:"varint,55,opt,name=is_provider_bridge,json=isProviderBridge,proto3" json:"is_provider_bridge,omitempty"`
	IsOpenRing           bool     `protobuf:"varint,56,opt,name=is_open_ring,json=isOpenRing,proto3" json:"is_open_ring,omitempty"`
	ExcludedVlanId       []uint32 `protobuf:"varint,57,rep,packed,name=excluded_vlan_id,json=excludedVlanId,proto3" json:"excluded_vlan_id,omitempty"`
	TcnPropagation       bool     `protobuf:"varint,58,opt,name=tcn_propagation,json=tcnPropagation,proto3" json:"tcn_propagation,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *L2VpnG8032RingDetailInfo) Reset()         { *m = L2VpnG8032RingDetailInfo{} }
func (m *L2VpnG8032RingDetailInfo) String() string { return proto.CompactTextString(m) }
func (*L2VpnG8032RingDetailInfo) ProtoMessage()    {}
func (*L2VpnG8032RingDetailInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_ba15940c04b4961e, []int{1}
}

func (m *L2VpnG8032RingDetailInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2VpnG8032RingDetailInfo.Unmarshal(m, b)
}
func (m *L2VpnG8032RingDetailInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2VpnG8032RingDetailInfo.Marshal(b, m, deterministic)
}
func (m *L2VpnG8032RingDetailInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2VpnG8032RingDetailInfo.Merge(m, src)
}
func (m *L2VpnG8032RingDetailInfo) XXX_Size() int {
	return xxx_messageInfo_L2VpnG8032RingDetailInfo.Size(m)
}
func (m *L2VpnG8032RingDetailInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_L2VpnG8032RingDetailInfo.DiscardUnknown(m)
}

var xxx_messageInfo_L2VpnG8032RingDetailInfo proto.InternalMessageInfo

func (m *L2VpnG8032RingDetailInfo) GetRingName() string {
	if m != nil {
		return m.RingName
	}
	return ""
}

func (m *L2VpnG8032RingDetailInfo) GetPort0() string {
	if m != nil {
		return m.Port0
	}
	return ""
}

func (m *L2VpnG8032RingDetailInfo) GetPort1() string {
	if m != nil {
		return m.Port1
	}
	return ""
}

func (m *L2VpnG8032RingDetailInfo) GetMonitor0() string {
	if m != nil {
		return m.Monitor0
	}
	return ""
}

func (m *L2VpnG8032RingDetailInfo) GetMonitor1() string {
	if m != nil {
		return m.Monitor1
	}
	return ""
}

func (m *L2VpnG8032RingDetailInfo) GetIsProviderBridge() bool {
	if m != nil {
		return m.IsProviderBridge
	}
	return false
}

func (m *L2VpnG8032RingDetailInfo) GetIsOpenRing() bool {
	if m != nil {
		return m.IsOpenRing
	}
	return false
}

func (m *L2VpnG8032RingDetailInfo) GetExcludedVlanId() []uint32 {
	if m != nil {
		return m.ExcludedVlanId
	}
	return nil
}

func (m *L2VpnG8032RingDetailInfo) GetTcnPropagation() bool {
	if m != nil {
		return m.TcnPropagation
	}
	return false
}

func init() {
	proto.RegisterType((*L2VpnG8032RingDetailInfo_KEYS)(nil), "cisco_ios_xr_l2vpn_oper.l2vpnv2.standby.g8032.g8032_rings.g8032_ring.g8032_ring_detail.l2vpn_g8032_ring_detail_info_KEYS")
	proto.RegisterType((*L2VpnG8032RingDetailInfo)(nil), "cisco_ios_xr_l2vpn_oper.l2vpnv2.standby.g8032.g8032_rings.g8032_ring.g8032_ring_detail.l2vpn_g8032_ring_detail_info")
}

func init() { proto.RegisterFile("l2vpn_g8032_ring_detail_info.proto", fileDescriptor_ba15940c04b4961e) }

var fileDescriptor_ba15940c04b4961e = []byte{
	// 316 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x91, 0x4f, 0x4b, 0x03, 0x31,
	0x10, 0xc5, 0xa9, 0xa2, 0xb4, 0x41, 0x6b, 0x09, 0x1e, 0x82, 0x7a, 0x58, 0x7b, 0x71, 0x0f, 0xb2,
	0x74, 0xb7, 0xfe, 0xa9, 0x9e, 0x44, 0xf0, 0x20, 0x82, 0x96, 0x15, 0x0a, 0x9e, 0x42, 0xba, 0x89,
	0xcb, 0xc0, 0x76, 0x12, 0x92, 0xb8, 0xd4, 0xaf, 0xe7, 0x27, 0x93, 0xa6, 0x96, 0x76, 0x11, 0x7a,
	0x9b, 0xf9, 0xbd, 0xbc, 0xf7, 0x48, 0x42, 0xfa, 0x55, 0x56, 0x1b, 0xe4, 0xe5, 0x68, 0x30, 0xcc,
	0xb8, 0x05, 0x2c, 0xb9, 0x54, 0x5e, 0x40, 0xc5, 0x01, 0x3f, 0x75, 0x62, 0xac, 0xf6, 0x9a, 0x4e,
	0x0a, 0x70, 0x85, 0xe6, 0xa0, 0x1d, 0x9f, 0x5b, 0xbe, 0x34, 0x68, 0xa3, 0x6c, 0x12, 0xc6, 0x3a,
	0x4b, 0x9c, 0x17, 0x28, 0xa7, 0xdf, 0x49, 0x48, 0x49, 0xd6, 0x59, 0x6e, 0x63, 0x4e, 0xfe, 0x55,
	0xf4, 0x1f, 0xc8, 0xf9, 0xb6, 0x76, 0xfe, 0xf2, 0xf4, 0xf1, 0x4e, 0x4f, 0x49, 0x27, 0x08, 0x28,
	0x66, 0x8a, 0xb5, 0xa2, 0x56, 0xdc, 0xc9, 0xdb, 0x0b, 0xf0, 0x2a, 0x66, 0xaa, 0xff, 0xb3, 0x43,
	0xce, 0xb6, 0x45, 0x34, 0xdd, 0x59, 0xd3, 0x4d, 0x8f, 0xc9, 0x9e, 0xd1, 0xd6, 0x0f, 0xd8, 0x30,
	0x08, 0xcb, 0x65, 0x45, 0x53, 0x76, 0xb5, 0xa6, 0x29, 0x3d, 0x21, 0xed, 0x99, 0x46, 0xf0, 0xda,
	0x0e, 0xd8, 0xf5, 0x32, 0x67, 0xb5, 0x6f, 0x68, 0x29, 0xbb, 0x69, 0x68, 0x29, 0xbd, 0x24, 0x14,
	0x1c, 0x37, 0x56, 0xd7, 0x20, 0x95, 0xe5, 0x53, 0x0b, 0xb2, 0x54, 0xec, 0x36, 0x6a, 0xc5, 0xed,
	0xbc, 0x07, 0x6e, 0xfc, 0x27, 0x3c, 0x06, 0x4e, 0x23, 0x72, 0x00, 0x6e, 0xf1, 0xb6, 0x18, 0xae,
	0xc2, 0x46, 0xe1, 0x1c, 0x01, 0xf7, 0x66, 0x14, 0xe6, 0x80, 0x25, 0x8d, 0x49, 0x4f, 0xcd, 0x8b,
	0xea, 0x4b, 0x2a, 0xc9, 0xeb, 0x4a, 0x20, 0x07, 0xc9, 0xee, 0xa2, 0xdd, 0xf8, 0x30, 0xef, 0xae,
	0xf8, 0xa4, 0x12, 0xf8, 0x2c, 0xe9, 0x05, 0x39, 0xf2, 0x05, 0x2e, 0xaa, 0x8d, 0x28, 0x85, 0x07,
	0x8d, 0xec, 0x3e, 0xc4, 0x75, 0x7d, 0x81, 0xe3, 0x35, 0x9d, 0xee, 0x87, 0x5f, 0x1e, 0xfe, 0x06,
	0x00, 0x00, 0xff, 0xff, 0xfe, 0x10, 0x61, 0x17, 0x0b, 0x02, 0x00, 0x00,
}
