/*
Copyright 2019 Cisco Systems

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ospf_sh_te_stats.proto

package cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_statistics_te_stats

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type OspfShTeStats_KEYS struct {
	ProcessName          string   `protobuf:"bytes,1,opt,name=process_name,json=processName,proto3" json:"process_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OspfShTeStats_KEYS) Reset()         { *m = OspfShTeStats_KEYS{} }
func (m *OspfShTeStats_KEYS) String() string { return proto.CompactTextString(m) }
func (*OspfShTeStats_KEYS) ProtoMessage()    {}
func (*OspfShTeStats_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_70aab20dd16313c0, []int{0}
}

func (m *OspfShTeStats_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OspfShTeStats_KEYS.Unmarshal(m, b)
}
func (m *OspfShTeStats_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OspfShTeStats_KEYS.Marshal(b, m, deterministic)
}
func (m *OspfShTeStats_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OspfShTeStats_KEYS.Merge(m, src)
}
func (m *OspfShTeStats_KEYS) XXX_Size() int {
	return xxx_messageInfo_OspfShTeStats_KEYS.Size(m)
}
func (m *OspfShTeStats_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_OspfShTeStats_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_OspfShTeStats_KEYS proto.InternalMessageInfo

func (m *OspfShTeStats_KEYS) GetProcessName() string {
	if m != nil {
		return m.ProcessName
	}
	return ""
}

type OspfShTeStats struct {
	TeConnected            bool     `protobuf:"varint,50,opt,name=te_connected,json=teConnected,proto3" json:"te_connected,omitempty"`
	ControlDisconnects     uint32   `protobuf:"varint,51,opt,name=control_disconnects,json=controlDisconnects,proto3" json:"control_disconnects,omitempty"`
	TeDisconnects          uint32   `protobuf:"varint,52,opt,name=te_disconnects,json=teDisconnects,proto3" json:"te_disconnects,omitempty"`
	AdjGets                uint32   `protobuf:"varint,53,opt,name=adj_gets,json=adjGets,proto3" json:"adj_gets,omitempty"`
	LinkFloods             uint32   `protobuf:"varint,54,opt,name=link_floods,json=linkFloods,proto3" json:"link_floods,omitempty"`
	LinkFragmentFloods     uint32   `protobuf:"varint,55,opt,name=link_fragment_floods,json=linkFragmentFloods,proto3" json:"link_fragment_floods,omitempty"`
	LspGets                uint32   `protobuf:"varint,56,opt,name=lsp_gets,json=lspGets,proto3" json:"lsp_gets,omitempty"`
	TunnelAnnounces        uint32   `protobuf:"varint,57,opt,name=tunnel_announces,json=tunnelAnnounces,proto3" json:"tunnel_announces,omitempty"`
	TotalTunnels           uint32   `protobuf:"varint,58,opt,name=total_tunnels,json=totalTunnels,proto3" json:"total_tunnels,omitempty"`
	ControlBatchReads      uint32   `protobuf:"varint,59,opt,name=control_batch_reads,json=controlBatchReads,proto3" json:"control_batch_reads,omitempty"`
	ControlBatchWrites     uint32   `protobuf:"varint,60,opt,name=control_batch_writes,json=controlBatchWrites,proto3" json:"control_batch_writes,omitempty"`
	LinkBatchReads         uint32   `protobuf:"varint,61,opt,name=link_batch_reads,json=linkBatchReads,proto3" json:"link_batch_reads,omitempty"`
	LinkBatchWrites        uint32   `protobuf:"varint,62,opt,name=link_batch_writes,json=linkBatchWrites,proto3" json:"link_batch_writes,omitempty"`
	AdjChanges             uint32   `protobuf:"varint,63,opt,name=adj_changes,json=adjChanges,proto3" json:"adj_changes,omitempty"`
	FragmentDeletes        uint32   `protobuf:"varint,64,opt,name=fragment_deletes,json=fragmentDeletes,proto3" json:"fragment_deletes,omitempty"`
	FragmentAnnounces      uint32   `protobuf:"varint,65,opt,name=fragment_announces,json=fragmentAnnounces,proto3" json:"fragment_announces,omitempty"`
	DataTransCompletes     uint32   `protobuf:"varint,66,opt,name=data_trans_completes,json=dataTransCompletes,proto3" json:"data_trans_completes,omitempty"`
	PceListen              uint32   `protobuf:"varint,67,opt,name=pce_listen,json=pceListen,proto3" json:"pce_listen,omitempty"`
	PceStoplisten          uint32   `protobuf:"varint,68,opt,name=pce_stoplisten,json=pceStoplisten,proto3" json:"pce_stoplisten,omitempty"`
	PceFlood               uint32   `protobuf:"varint,69,opt,name=pce_flood,json=pceFlood,proto3" json:"pce_flood,omitempty"`
	PceGet                 uint32   `protobuf:"varint,70,opt,name=pce_get,json=pceGet,proto3" json:"pce_get,omitempty"`
	PceBrLookup            uint32   `protobuf:"varint,71,opt,name=pce_br_lookup,json=pceBrLookup,proto3" json:"pce_br_lookup,omitempty"`
	PceBrLkupNumDests      uint32   `protobuf:"varint,72,opt,name=pce_br_lkup_num_dests,json=pceBrLkupNumDests,proto3" json:"pce_br_lkup_num_dests,omitempty"`
	PceBrRespFails         uint32   `protobuf:"varint,73,opt,name=pce_br_resp_fails,json=pceBrRespFails,proto3" json:"pce_br_resp_fails,omitempty"`
	PceNodeAnnounceBatches uint32   `protobuf:"varint,74,opt,name=pce_node_announce_batches,json=pceNodeAnnounceBatches,proto3" json:"pce_node_announce_batches,omitempty"`
	PceNodeDeleteBatches   uint32   `protobuf:"varint,75,opt,name=pce_node_delete_batches,json=pceNodeDeleteBatches,proto3" json:"pce_node_delete_batches,omitempty"`
	PceNumNodeAnnounce     uint32   `protobuf:"varint,76,opt,name=pce_num_node_announce,json=pceNumNodeAnnounce,proto3" json:"pce_num_node_announce,omitempty"`
	PceNumNodeDelete       uint32   `protobuf:"varint,77,opt,name=pce_num_node_delete,json=pceNumNodeDelete,proto3" json:"pce_num_node_delete,omitempty"`
	PceNodeSendFails       uint32   `protobuf:"varint,78,opt,name=pce_node_send_fails,json=pceNodeSendFails,proto3" json:"pce_node_send_fails,omitempty"`
	TeSrPathRegIdtRecvd    bool     `protobuf:"varint,79,opt,name=te_sr_path_reg_idt_recvd,json=teSrPathRegIdtRecvd,proto3" json:"te_sr_path_reg_idt_recvd,omitempty"`
	TeSrIdtSent            bool     `protobuf:"varint,80,opt,name=te_sr_idt_sent,json=teSrIdtSent,proto3" json:"te_sr_idt_sent,omitempty"`
	SrNumAreaEnabled       uint32   `protobuf:"varint,81,opt,name=sr_num_area_enabled,json=srNumAreaEnabled,proto3" json:"sr_num_area_enabled,omitempty"`
	XXX_NoUnkeyedLiteral   struct{} `json:"-"`
	XXX_unrecognized       []byte   `json:"-"`
	XXX_sizecache          int32    `json:"-"`
}

func (m *OspfShTeStats) Reset()         { *m = OspfShTeStats{} }
func (m *OspfShTeStats) String() string { return proto.CompactTextString(m) }
func (*OspfShTeStats) ProtoMessage()    {}
func (*OspfShTeStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_70aab20dd16313c0, []int{1}
}

func (m *OspfShTeStats) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OspfShTeStats.Unmarshal(m, b)
}
func (m *OspfShTeStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OspfShTeStats.Marshal(b, m, deterministic)
}
func (m *OspfShTeStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OspfShTeStats.Merge(m, src)
}
func (m *OspfShTeStats) XXX_Size() int {
	return xxx_messageInfo_OspfShTeStats.Size(m)
}
func (m *OspfShTeStats) XXX_DiscardUnknown() {
	xxx_messageInfo_OspfShTeStats.DiscardUnknown(m)
}

var xxx_messageInfo_OspfShTeStats proto.InternalMessageInfo

func (m *OspfShTeStats) GetTeConnected() bool {
	if m != nil {
		return m.TeConnected
	}
	return false
}

func (m *OspfShTeStats) GetControlDisconnects() uint32 {
	if m != nil {
		return m.ControlDisconnects
	}
	return 0
}

func (m *OspfShTeStats) GetTeDisconnects() uint32 {
	if m != nil {
		return m.TeDisconnects
	}
	return 0
}

func (m *OspfShTeStats) GetAdjGets() uint32 {
	if m != nil {
		return m.AdjGets
	}
	return 0
}

func (m *OspfShTeStats) GetLinkFloods() uint32 {
	if m != nil {
		return m.LinkFloods
	}
	return 0
}

func (m *OspfShTeStats) GetLinkFragmentFloods() uint32 {
	if m != nil {
		return m.LinkFragmentFloods
	}
	return 0
}

func (m *OspfShTeStats) GetLspGets() uint32 {
	if m != nil {
		return m.LspGets
	}
	return 0
}

func (m *OspfShTeStats) GetTunnelAnnounces() uint32 {
	if m != nil {
		return m.TunnelAnnounces
	}
	return 0
}

func (m *OspfShTeStats) GetTotalTunnels() uint32 {
	if m != nil {
		return m.TotalTunnels
	}
	return 0
}

func (m *OspfShTeStats) GetControlBatchReads() uint32 {
	if m != nil {
		return m.ControlBatchReads
	}
	return 0
}

func (m *OspfShTeStats) GetControlBatchWrites() uint32 {
	if m != nil {
		return m.ControlBatchWrites
	}
	return 0
}

func (m *OspfShTeStats) GetLinkBatchReads() uint32 {
	if m != nil {
		return m.LinkBatchReads
	}
	return 0
}

func (m *OspfShTeStats) GetLinkBatchWrites() uint32 {
	if m != nil {
		return m.LinkBatchWrites
	}
	return 0
}

func (m *OspfShTeStats) GetAdjChanges() uint32 {
	if m != nil {
		return m.AdjChanges
	}
	return 0
}

func (m *OspfShTeStats) GetFragmentDeletes() uint32 {
	if m != nil {
		return m.FragmentDeletes
	}
	return 0
}

func (m *OspfShTeStats) GetFragmentAnnounces() uint32 {
	if m != nil {
		return m.FragmentAnnounces
	}
	return 0
}

func (m *OspfShTeStats) GetDataTransCompletes() uint32 {
	if m != nil {
		return m.DataTransCompletes
	}
	return 0
}

func (m *OspfShTeStats) GetPceListen() uint32 {
	if m != nil {
		return m.PceListen
	}
	return 0
}

func (m *OspfShTeStats) GetPceStoplisten() uint32 {
	if m != nil {
		return m.PceStoplisten
	}
	return 0
}

func (m *OspfShTeStats) GetPceFlood() uint32 {
	if m != nil {
		return m.PceFlood
	}
	return 0
}

func (m *OspfShTeStats) GetPceGet() uint32 {
	if m != nil {
		return m.PceGet
	}
	return 0
}

func (m *OspfShTeStats) GetPceBrLookup() uint32 {
	if m != nil {
		return m.PceBrLookup
	}
	return 0
}

func (m *OspfShTeStats) GetPceBrLkupNumDests() uint32 {
	if m != nil {
		return m.PceBrLkupNumDests
	}
	return 0
}

func (m *OspfShTeStats) GetPceBrRespFails() uint32 {
	if m != nil {
		return m.PceBrRespFails
	}
	return 0
}

func (m *OspfShTeStats) GetPceNodeAnnounceBatches() uint32 {
	if m != nil {
		return m.PceNodeAnnounceBatches
	}
	return 0
}

func (m *OspfShTeStats) GetPceNodeDeleteBatches() uint32 {
	if m != nil {
		return m.PceNodeDeleteBatches
	}
	return 0
}

func (m *OspfShTeStats) GetPceNumNodeAnnounce() uint32 {
	if m != nil {
		return m.PceNumNodeAnnounce
	}
	return 0
}

func (m *OspfShTeStats) GetPceNumNodeDelete() uint32 {
	if m != nil {
		return m.PceNumNodeDelete
	}
	return 0
}

func (m *OspfShTeStats) GetPceNodeSendFails() uint32 {
	if m != nil {
		return m.PceNodeSendFails
	}
	return 0
}

func (m *OspfShTeStats) GetTeSrPathRegIdtRecvd() bool {
	if m != nil {
		return m.TeSrPathRegIdtRecvd
	}
	return false
}

func (m *OspfShTeStats) GetTeSrIdtSent() bool {
	if m != nil {
		return m.TeSrIdtSent
	}
	return false
}

func (m *OspfShTeStats) GetSrNumAreaEnabled() uint32 {
	if m != nil {
		return m.SrNumAreaEnabled
	}
	return 0
}

func init() {
	proto.RegisterType((*OspfShTeStats_KEYS)(nil), "cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.statistics.te_stats.ospf_sh_te_stats_KEYS")
	proto.RegisterType((*OspfShTeStats)(nil), "cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.statistics.te_stats.ospf_sh_te_stats")
}

func init() { proto.RegisterFile("ospf_sh_te_stats.proto", fileDescriptor_70aab20dd16313c0) }

var fileDescriptor_70aab20dd16313c0 = []byte{
	// 788 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x94, 0x6f, 0x6f, 0x1c, 0x35,
	0x10, 0xc6, 0x95, 0x37, 0x6d, 0xea, 0x6b, 0x4a, 0xe2, 0xa4, 0xad, 0x23, 0x84, 0x1a, 0x52, 0x21,
	0xa5, 0x48, 0x3d, 0x02, 0x6d, 0x80, 0x96, 0xbf, 0xf9, 0x4f, 0x68, 0x38, 0xca, 0x5e, 0x25, 0xc4,
	0x2b, 0xcb, 0xb1, 0xe7, 0x2e, 0x9b, 0xdb, 0xb5, 0x2d, 0xcf, 0x6c, 0xe0, 0x93, 0xf2, 0x79, 0x2a,
	0xdb, 0xbb, 0x7b, 0x77, 0x79, 0xb7, 0x7a, 0x9e, 0xdf, 0x33, 0x63, 0x8f, 0xbd, 0x66, 0x4f, 0x1c,
	0xfa, 0x89, 0xc4, 0x6b, 0x49, 0x20, 0x91, 0x14, 0xe1, 0xd0, 0x07, 0x47, 0x8e, 0x17, 0xba, 0x44,
	0xed, 0x64, 0xe9, 0x50, 0xfe, 0x17, 0x64, 0xe9, 0x6f, 0x5f, 0xcb, 0x44, 0x3a, 0x0f, 0x61, 0x18,
	0xbf, 0x22, 0xa7, 0x01, 0x11, 0xb0, 0xfb, 0x1a, 0x1a, 0x98, 0xa8, 0xa6, 0x22, 0x79, 0x1b, 0x26,
	0xc3, 0x58, 0xab, 0x44, 0x2a, 0x35, 0x0e, 0xbb, 0xca, 0xbb, 0x6f, 0xd9, 0xe3, 0xbb, 0xdd, 0xe4,
	0xbb, 0xd3, 0x7f, 0xc6, 0xfc, 0x73, 0xf6, 0xb0, 0xad, 0x21, 0xad, 0xaa, 0x41, 0xac, 0xec, 0xac,
	0xec, 0x3d, 0x28, 0x06, 0xad, 0x36, 0x52, 0x35, 0xec, 0xfe, 0xcf, 0xd8, 0xfa, 0xdd, 0x70, 0xcc,
	0x11, 0x48, 0xed, 0xac, 0x05, 0x4d, 0x60, 0xc4, 0x37, 0x3b, 0x2b, 0x7b, 0xab, 0xc5, 0x80, 0xe0,
	0xb8, 0x93, 0xf8, 0x57, 0x6c, 0x53, 0x3b, 0x4b, 0xc1, 0x55, 0xd2, 0xc4, 0x1d, 0x25, 0x1d, 0xc5,
	0xab, 0x9d, 0x95, 0xbd, 0xb5, 0x82, 0xb7, 0xd6, 0xc9, 0xdc, 0xe1, 0x5f, 0xb0, 0x47, 0x04, 0x4b,
	0xec, 0xeb, 0xc4, 0xae, 0x11, 0x2c, 0x62, 0xdb, 0x6c, 0x55, 0x99, 0x1b, 0x39, 0x05, 0x42, 0x71,
	0x90, 0x80, 0xfb, 0xca, 0xdc, 0x9c, 0x03, 0x21, 0x7f, 0xc6, 0x06, 0x55, 0x69, 0x67, 0x72, 0x52,
	0x39, 0x67, 0x50, 0x7c, 0x9b, 0x5c, 0x16, 0xa5, 0xb3, 0xa4, 0xf0, 0x7d, 0xb6, 0x95, 0x81, 0xa0,
	0xa6, 0x35, 0x58, 0xea, 0xc8, 0xef, 0xf2, 0xa2, 0x12, 0xd9, 0x5a, 0x6d, 0x62, 0x9b, 0xad, 0x56,
	0xe8, 0x73, 0xb7, 0xef, 0x73, 0xb7, 0x0a, 0x7d, 0xea, 0xf6, 0x82, 0xad, 0x53, 0x63, 0x2d, 0x54,
	0x52, 0x59, 0xeb, 0x1a, 0xab, 0x01, 0xc5, 0x9b, 0x84, 0x7c, 0x92, 0xf5, 0xc3, 0x4e, 0xe6, 0xcf,
	0xd9, 0x1a, 0x39, 0x52, 0x95, 0xcc, 0x06, 0x8a, 0xb7, 0x89, 0x7b, 0x98, 0xc4, 0x0f, 0x59, 0xe3,
	0xc3, 0xf9, 0xc0, 0xae, 0x14, 0xe9, 0x6b, 0x19, 0x40, 0x19, 0x14, 0x3f, 0x24, 0x74, 0xa3, 0xb5,
	0x8e, 0xa2, 0x53, 0x44, 0x23, 0x6e, 0x66, 0x99, 0xff, 0x37, 0x94, 0x04, 0x28, 0x7e, 0x5c, 0x9a,
	0x70, 0x0a, 0xfc, 0x9d, 0x1c, 0xbe, 0xc7, 0xd6, 0xd3, 0xf6, 0x17, 0xcb, 0xff, 0x94, 0xe8, 0x47,
	0x51, 0x5f, 0xa8, 0xfd, 0x25, 0xdb, 0x58, 0x20, 0xdb, 0xc2, 0x3f, 0xe7, 0xcd, 0xf5, 0x68, 0x5b,
	0xf5, 0x19, 0x1b, 0xc4, 0x03, 0xd1, 0xd7, 0xca, 0x4e, 0x01, 0xc5, 0x2f, 0x79, 0xea, 0xca, 0xdc,
	0x1c, 0x67, 0x25, 0x0e, 0xaa, 0x1f, 0xb8, 0x81, 0x0a, 0x62, 0xad, 0x5f, 0x73, 0xad, 0x4e, 0x3f,
	0xc9, 0x32, 0x7f, 0xc9, 0x78, 0x8f, 0xce, 0xa7, 0x7a, 0x98, 0x47, 0xd0, 0x39, 0xf3, 0xb9, 0xee,
	0xb3, 0x2d, 0xa3, 0x48, 0x49, 0x0a, 0xca, 0xa2, 0xd4, 0xae, 0xf6, 0xb9, 0xfa, 0x51, 0x1e, 0x41,
	0xf4, 0x3e, 0x44, 0xeb, 0xb8, 0x73, 0xf8, 0x67, 0x8c, 0x79, 0x0d, 0xb2, 0x2a, 0x91, 0xc0, 0x8a,
	0xe3, 0xc4, 0x3d, 0xf0, 0x1a, 0x2e, 0x93, 0x10, 0xef, 0x60, 0xb4, 0x91, 0x9c, 0x6f, 0x91, 0x93,
	0x7c, 0x07, 0xbd, 0x86, 0x71, 0x2f, 0xf2, 0x4f, 0x59, 0xcc, 0xe4, 0xdb, 0x23, 0x4e, 0x13, 0xb1,
	0xea, 0x35, 0xa4, 0x3b, 0xc3, 0x9f, 0xb2, 0xfb, 0xd1, 0x9c, 0x02, 0x89, 0xb3, 0x64, 0xdd, 0xf3,
	0x1a, 0xce, 0x81, 0xf8, 0x2e, 0x8b, 0x65, 0xe4, 0x55, 0x90, 0x95, 0x73, 0xb3, 0xc6, 0x8b, 0xf3,
	0x64, 0x0f, 0xbc, 0x86, 0xa3, 0x70, 0x99, 0x24, 0xbe, 0xcf, 0x1e, 0x77, 0xcc, 0xac, 0xf1, 0xd2,
	0x36, 0xb5, 0x34, 0x80, 0x84, 0xe2, 0xb7, 0x3c, 0x83, 0xcc, 0xce, 0x1a, 0x3f, 0x6a, 0xea, 0x93,
	0x68, 0xf0, 0x17, 0x6c, 0xa3, 0x4d, 0x04, 0x40, 0x2f, 0x27, 0xaa, 0xac, 0x50, 0x5c, 0xe4, 0x53,
	0x4d, 0x74, 0x01, 0xe8, 0xcf, 0xa2, 0xca, 0xdf, 0xb0, 0xed, 0x88, 0x5a, 0x67, 0xa0, 0x9f, 0x6e,
	0x3e, 0x62, 0x40, 0xf1, 0x7b, 0x8a, 0x3c, 0xf1, 0x1a, 0x46, 0xce, 0x40, 0x37, 0xe3, 0xa3, 0xec,
	0xf2, 0x03, 0xf6, 0xb4, 0x8f, 0xe6, 0x33, 0xec, 0x83, 0xef, 0x52, 0x70, 0xab, 0x0d, 0xe6, 0x93,
	0xec, 0x62, 0x5f, 0xe7, 0xed, 0xc4, 0x6d, 0x2c, 0x75, 0x15, 0x97, 0xf9, 0x84, 0x62, 0xa8, 0xa9,
	0x17, 0x1b, 0xf2, 0x97, 0x6c, 0x73, 0x29, 0x92, 0xbb, 0x89, 0x3f, 0x52, 0x60, 0x7d, 0x1e, 0xc8,
	0x8d, 0x7a, 0x3c, 0xa2, 0x08, 0xd6, 0xb4, 0x03, 0x18, 0xcd, 0x71, 0x67, 0x60, 0x0c, 0xd6, 0xe4,
	0x11, 0x1c, 0x30, 0x11, 0x1f, 0xb1, 0x20, 0xbd, 0xa2, 0xf8, 0x0b, 0x4c, 0x65, 0x69, 0x48, 0x06,
	0xd0, 0xb7, 0x46, 0xfc, 0x99, 0x1e, 0xb1, 0x4d, 0x82, 0x71, 0x78, 0xaf, 0xe8, 0xba, 0x80, 0xe9,
	0x85, 0xa1, 0x22, 0x5a, 0xfc, 0x79, 0x7a, 0x9b, 0x30, 0x24, 0x1a, 0xc1, 0x92, 0x78, 0xdf, 0xbd,
	0x78, 0xe3, 0x70, 0x61, 0x68, 0x0c, 0x96, 0xe2, 0x52, 0x30, 0xa4, 0x85, 0xab, 0x00, 0x4a, 0x82,
	0x55, 0x57, 0x15, 0x18, 0xf1, 0x57, 0x5e, 0x0a, 0x86, 0x51, 0x53, 0x1f, 0x06, 0x50, 0xa7, 0x59,
	0xbf, 0xba, 0x97, 0xde, 0xfb, 0x57, 0x1f, 0x03, 0x00, 0x00, 0xff, 0xff, 0xb4, 0xd3, 0xce, 0x09,
	0x09, 0x06, 0x00, 0x00,
}
