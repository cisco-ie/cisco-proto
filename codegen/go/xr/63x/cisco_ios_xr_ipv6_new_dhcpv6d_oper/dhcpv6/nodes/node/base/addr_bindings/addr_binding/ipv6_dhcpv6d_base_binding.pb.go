/*
Copyright 2019 Cisco Systems

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ipv6_dhcpv6d_base_binding.proto

package cisco_ios_xr_ipv6_new_dhcpv6d_oper_dhcpv6_nodes_node_base_addr_bindings_addr_binding

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Ipv6Dhcpv6DBaseBinding_KEYS struct {
	NodeName             string   `protobuf:"bytes,1,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	AddrString           string   `protobuf:"bytes,2,opt,name=addr_string,json=addrString,proto3" json:"addr_string,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Ipv6Dhcpv6DBaseBinding_KEYS) Reset()         { *m = Ipv6Dhcpv6DBaseBinding_KEYS{} }
func (m *Ipv6Dhcpv6DBaseBinding_KEYS) String() string { return proto.CompactTextString(m) }
func (*Ipv6Dhcpv6DBaseBinding_KEYS) ProtoMessage()    {}
func (*Ipv6Dhcpv6DBaseBinding_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed8a5c5d2acf10f5, []int{0}
}

func (m *Ipv6Dhcpv6DBaseBinding_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Ipv6Dhcpv6DBaseBinding_KEYS.Unmarshal(m, b)
}
func (m *Ipv6Dhcpv6DBaseBinding_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Ipv6Dhcpv6DBaseBinding_KEYS.Marshal(b, m, deterministic)
}
func (m *Ipv6Dhcpv6DBaseBinding_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ipv6Dhcpv6DBaseBinding_KEYS.Merge(m, src)
}
func (m *Ipv6Dhcpv6DBaseBinding_KEYS) XXX_Size() int {
	return xxx_messageInfo_Ipv6Dhcpv6DBaseBinding_KEYS.Size(m)
}
func (m *Ipv6Dhcpv6DBaseBinding_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_Ipv6Dhcpv6DBaseBinding_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_Ipv6Dhcpv6DBaseBinding_KEYS proto.InternalMessageInfo

func (m *Ipv6Dhcpv6DBaseBinding_KEYS) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

func (m *Ipv6Dhcpv6DBaseBinding_KEYS) GetAddrString() string {
	if m != nil {
		return m.AddrString
	}
	return ""
}

type Ipv6Dhcpv6DBaseBinding struct {
	MacAddress             string   `protobuf:"bytes,50,opt,name=mac_address,json=macAddress,proto3" json:"mac_address,omitempty"`
	VrfName                string   `protobuf:"bytes,51,opt,name=vrf_name,json=vrfName,proto3" json:"vrf_name,omitempty"`
	ServerVrfName          string   `protobuf:"bytes,52,opt,name=server_vrf_name,json=serverVrfName,proto3" json:"server_vrf_name,omitempty"`
	Ipv6Address            string   `protobuf:"bytes,53,opt,name=ipv6_address,json=ipv6Address,proto3" json:"ipv6_address,omitempty"`
	ServerIpv6Address      string   `protobuf:"bytes,54,opt,name=server_ipv6_address,json=serverIpv6Address,proto3" json:"server_ipv6_address,omitempty"`
	ReplyServerIpv6Address string   `protobuf:"bytes,55,opt,name=reply_server_ipv6_address,json=replyServerIpv6Address,proto3" json:"reply_server_ipv6_address,omitempty"`
	LeaseTime              uint32   `protobuf:"varint,56,opt,name=lease_time,json=leaseTime,proto3" json:"lease_time,omitempty"`
	RemainingLeaseTime     uint32   `protobuf:"varint,57,opt,name=remaining_lease_time,json=remainingLeaseTime,proto3" json:"remaining_lease_time,omitempty"`
	State                  string   `protobuf:"bytes,58,opt,name=state,proto3" json:"state,omitempty"`
	InterfaceName          string   `protobuf:"bytes,59,opt,name=interface_name,json=interfaceName,proto3" json:"interface_name,omitempty"`
	AccessVrfName          string   `protobuf:"bytes,60,opt,name=access_vrf_name,json=accessVrfName,proto3" json:"access_vrf_name,omitempty"`
	BaseBindingTags        uint32   `protobuf:"varint,61,opt,name=base_binding_tags,json=baseBindingTags,proto3" json:"base_binding_tags,omitempty"`
	BaseBindingOuterTag    uint32   `protobuf:"varint,62,opt,name=base_binding_outer_tag,json=baseBindingOuterTag,proto3" json:"base_binding_outer_tag,omitempty"`
	BaseBindingInnerTag    uint32   `protobuf:"varint,63,opt,name=base_binding_inner_tag,json=baseBindingInnerTag,proto3" json:"base_binding_inner_tag,omitempty"`
	ProfileName            string   `protobuf:"bytes,64,opt,name=profile_name,json=profileName,proto3" json:"profile_name,omitempty"`
	IsNakNextRenew         bool     `protobuf:"varint,65,opt,name=is_nak_next_renew,json=isNakNextRenew,proto3" json:"is_nak_next_renew,omitempty"`
	SubscriberLabel        uint32   `protobuf:"varint,66,opt,name=subscriber_label,json=subscriberLabel,proto3" json:"subscriber_label,omitempty"`
	OldSubscriberLabel     uint32   `protobuf:"varint,67,opt,name=old_subscriber_label,json=oldSubscriberLabel,proto3" json:"old_subscriber_label,omitempty"`
	RxClientDuid           string   `protobuf:"bytes,68,opt,name=rx_client_duid,json=rxClientDuid,proto3" json:"rx_client_duid,omitempty"`
	TxClientUid            string   `protobuf:"bytes,69,opt,name=tx_client_uid,json=txClientUid,proto3" json:"tx_client_uid,omitempty"`
	RxRemoteId             string   `protobuf:"bytes,70,opt,name=rx_remote_id,json=rxRemoteId,proto3" json:"rx_remote_id,omitempty"`
	TxRemoteId             string   `protobuf:"bytes,71,opt,name=tx_remote_id,json=txRemoteId,proto3" json:"tx_remote_id,omitempty"`
	RxInterfaceId          string   `protobuf:"bytes,72,opt,name=rx_interface_id,json=rxInterfaceId,proto3" json:"rx_interface_id,omitempty"`
	TxInterfaceId          string   `protobuf:"bytes,73,opt,name=tx_interface_id,json=txInterfaceId,proto3" json:"tx_interface_id,omitempty"`
	XXX_NoUnkeyedLiteral   struct{} `json:"-"`
	XXX_unrecognized       []byte   `json:"-"`
	XXX_sizecache          int32    `json:"-"`
}

func (m *Ipv6Dhcpv6DBaseBinding) Reset()         { *m = Ipv6Dhcpv6DBaseBinding{} }
func (m *Ipv6Dhcpv6DBaseBinding) String() string { return proto.CompactTextString(m) }
func (*Ipv6Dhcpv6DBaseBinding) ProtoMessage()    {}
func (*Ipv6Dhcpv6DBaseBinding) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed8a5c5d2acf10f5, []int{1}
}

func (m *Ipv6Dhcpv6DBaseBinding) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Ipv6Dhcpv6DBaseBinding.Unmarshal(m, b)
}
func (m *Ipv6Dhcpv6DBaseBinding) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Ipv6Dhcpv6DBaseBinding.Marshal(b, m, deterministic)
}
func (m *Ipv6Dhcpv6DBaseBinding) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ipv6Dhcpv6DBaseBinding.Merge(m, src)
}
func (m *Ipv6Dhcpv6DBaseBinding) XXX_Size() int {
	return xxx_messageInfo_Ipv6Dhcpv6DBaseBinding.Size(m)
}
func (m *Ipv6Dhcpv6DBaseBinding) XXX_DiscardUnknown() {
	xxx_messageInfo_Ipv6Dhcpv6DBaseBinding.DiscardUnknown(m)
}

var xxx_messageInfo_Ipv6Dhcpv6DBaseBinding proto.InternalMessageInfo

func (m *Ipv6Dhcpv6DBaseBinding) GetMacAddress() string {
	if m != nil {
		return m.MacAddress
	}
	return ""
}

func (m *Ipv6Dhcpv6DBaseBinding) GetVrfName() string {
	if m != nil {
		return m.VrfName
	}
	return ""
}

func (m *Ipv6Dhcpv6DBaseBinding) GetServerVrfName() string {
	if m != nil {
		return m.ServerVrfName
	}
	return ""
}

func (m *Ipv6Dhcpv6DBaseBinding) GetIpv6Address() string {
	if m != nil {
		return m.Ipv6Address
	}
	return ""
}

func (m *Ipv6Dhcpv6DBaseBinding) GetServerIpv6Address() string {
	if m != nil {
		return m.ServerIpv6Address
	}
	return ""
}

func (m *Ipv6Dhcpv6DBaseBinding) GetReplyServerIpv6Address() string {
	if m != nil {
		return m.ReplyServerIpv6Address
	}
	return ""
}

func (m *Ipv6Dhcpv6DBaseBinding) GetLeaseTime() uint32 {
	if m != nil {
		return m.LeaseTime
	}
	return 0
}

func (m *Ipv6Dhcpv6DBaseBinding) GetRemainingLeaseTime() uint32 {
	if m != nil {
		return m.RemainingLeaseTime
	}
	return 0
}

func (m *Ipv6Dhcpv6DBaseBinding) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *Ipv6Dhcpv6DBaseBinding) GetInterfaceName() string {
	if m != nil {
		return m.InterfaceName
	}
	return ""
}

func (m *Ipv6Dhcpv6DBaseBinding) GetAccessVrfName() string {
	if m != nil {
		return m.AccessVrfName
	}
	return ""
}

func (m *Ipv6Dhcpv6DBaseBinding) GetBaseBindingTags() uint32 {
	if m != nil {
		return m.BaseBindingTags
	}
	return 0
}

func (m *Ipv6Dhcpv6DBaseBinding) GetBaseBindingOuterTag() uint32 {
	if m != nil {
		return m.BaseBindingOuterTag
	}
	return 0
}

func (m *Ipv6Dhcpv6DBaseBinding) GetBaseBindingInnerTag() uint32 {
	if m != nil {
		return m.BaseBindingInnerTag
	}
	return 0
}

func (m *Ipv6Dhcpv6DBaseBinding) GetProfileName() string {
	if m != nil {
		return m.ProfileName
	}
	return ""
}

func (m *Ipv6Dhcpv6DBaseBinding) GetIsNakNextRenew() bool {
	if m != nil {
		return m.IsNakNextRenew
	}
	return false
}

func (m *Ipv6Dhcpv6DBaseBinding) GetSubscriberLabel() uint32 {
	if m != nil {
		return m.SubscriberLabel
	}
	return 0
}

func (m *Ipv6Dhcpv6DBaseBinding) GetOldSubscriberLabel() uint32 {
	if m != nil {
		return m.OldSubscriberLabel
	}
	return 0
}

func (m *Ipv6Dhcpv6DBaseBinding) GetRxClientDuid() string {
	if m != nil {
		return m.RxClientDuid
	}
	return ""
}

func (m *Ipv6Dhcpv6DBaseBinding) GetTxClientUid() string {
	if m != nil {
		return m.TxClientUid
	}
	return ""
}

func (m *Ipv6Dhcpv6DBaseBinding) GetRxRemoteId() string {
	if m != nil {
		return m.RxRemoteId
	}
	return ""
}

func (m *Ipv6Dhcpv6DBaseBinding) GetTxRemoteId() string {
	if m != nil {
		return m.TxRemoteId
	}
	return ""
}

func (m *Ipv6Dhcpv6DBaseBinding) GetRxInterfaceId() string {
	if m != nil {
		return m.RxInterfaceId
	}
	return ""
}

func (m *Ipv6Dhcpv6DBaseBinding) GetTxInterfaceId() string {
	if m != nil {
		return m.TxInterfaceId
	}
	return ""
}

func init() {
	proto.RegisterType((*Ipv6Dhcpv6DBaseBinding_KEYS)(nil), "cisco_ios_xr_ipv6_new_dhcpv6d_oper.dhcpv6.nodes.node.base.addr_bindings.addr_binding.ipv6_dhcpv6d_base_binding_KEYS")
	proto.RegisterType((*Ipv6Dhcpv6DBaseBinding)(nil), "cisco_ios_xr_ipv6_new_dhcpv6d_oper.dhcpv6.nodes.node.base.addr_bindings.addr_binding.ipv6_dhcpv6d_base_binding")
}

func init() { proto.RegisterFile("ipv6_dhcpv6d_base_binding.proto", fileDescriptor_ed8a5c5d2acf10f5) }

var fileDescriptor_ed8a5c5d2acf10f5 = []byte{
	// 602 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x94, 0x6f, 0x4f, 0x13, 0x4f,
	0x10, 0xc7, 0xd3, 0x5f, 0xf2, 0x13, 0x18, 0x0a, 0xc8, 0x41, 0xc8, 0x12, 0xa3, 0x14, 0xa2, 0x04,
	0x7c, 0xd0, 0x18, 0x51, 0x14, 0xff, 0xf3, 0x4f, 0x6d, 0x24, 0x98, 0xb4, 0xd5, 0xc4, 0x27, 0x6e,
	0xb6, 0xb7, 0xd3, 0xba, 0xe1, 0x6e, 0xaf, 0xd9, 0xdd, 0x96, 0xf3, 0xed, 0xfa, 0x4a, 0xcc, 0xce,
	0x5e, 0xaf, 0x2d, 0x95, 0x27, 0x4d, 0xf6, 0x3b, 0x9f, 0xef, 0xcc, 0xec, 0xcc, 0xf6, 0x60, 0x4b,
	0xf5, 0x87, 0x87, 0x5c, 0xfe, 0x8a, 0xfb, 0xc3, 0x43, 0xc9, 0x3b, 0xc2, 0x22, 0xef, 0x28, 0x2d,
	0x95, 0xee, 0xd5, 0xfb, 0x26, 0x73, 0x59, 0xd4, 0x8e, 0x95, 0x8d, 0x33, 0xae, 0x32, 0xcb, 0x73,
	0xc3, 0x89, 0xd6, 0x78, 0x5d, 0x3a, 0xb2, 0x3e, 0x9a, 0x7a, 0x38, 0xd4, 0x75, 0x26, 0xd1, 0xd2,
	0x6f, 0xdd, 0x27, 0xaa, 0x0b, 0x29, 0xcd, 0x28, 0x9b, 0x9d, 0x3a, 0xed, 0xfc, 0x84, 0x07, 0xb7,
	0x16, 0xe6, 0x5f, 0xce, 0x7f, 0xb4, 0xa2, 0x7b, 0xb0, 0xe0, 0x33, 0x71, 0x2d, 0x52, 0x64, 0x95,
	0x5a, 0x65, 0x6f, 0xa1, 0x39, 0xef, 0x85, 0x4b, 0x91, 0x62, 0xb4, 0x05, 0x8b, 0x94, 0xce, 0x3a,
	0xa3, 0x74, 0x8f, 0xfd, 0x47, 0x61, 0xf0, 0x52, 0x8b, 0x94, 0x9d, 0x3f, 0x73, 0xb0, 0x79, 0x6b,
	0x01, 0x6f, 0x4f, 0x45, 0xcc, 0x3d, 0x8f, 0xd6, 0xb2, 0xa7, 0xc1, 0x9e, 0x8a, 0xf8, 0x38, 0x28,
	0xd1, 0x26, 0xcc, 0x0f, 0x4d, 0x37, 0xd4, 0x3e, 0xa0, 0xe8, 0xdc, 0xd0, 0x74, 0xa9, 0xf4, 0x2e,
	0xac, 0x58, 0x34, 0x43, 0x34, 0xbc, 0x24, 0x9e, 0x11, 0xb1, 0x14, 0xe4, 0xef, 0x05, 0xb7, 0x0d,
	0x55, 0x6a, 0x60, 0x54, 0xe4, 0x39, 0x41, 0x8b, 0x5e, 0x1b, 0x55, 0xa9, 0xc3, 0x5a, 0x91, 0x6a,
	0x8a, 0x3c, 0x24, 0x72, 0x35, 0x84, 0x1a, 0x13, 0xfc, 0x11, 0x6c, 0x1a, 0xec, 0x27, 0xbf, 0xf9,
	0xbf, 0x5c, 0x2f, 0xc8, 0xb5, 0x41, 0x40, 0x6b, 0xc6, 0x7a, 0x1f, 0x20, 0x41, 0x3f, 0x02, 0xa7,
	0x52, 0x64, 0x2f, 0x6b, 0x95, 0xbd, 0xa5, 0xe6, 0x02, 0x29, 0x6d, 0x95, 0x62, 0xf4, 0x04, 0xd6,
	0x0d, 0xa6, 0x42, 0x69, 0x3f, 0xfe, 0x09, 0xf0, 0x88, 0xc0, 0xa8, 0x8c, 0x5d, 0x94, 0x8e, 0x75,
	0xf8, 0xdf, 0x3a, 0xe1, 0x90, 0xbd, 0xa2, 0xba, 0xe1, 0x10, 0x3d, 0x82, 0x65, 0xa5, 0x1d, 0x9a,
	0xae, 0x88, 0x8b, 0xcd, 0xbd, 0x0e, 0xb3, 0x29, 0xd5, 0xd1, 0x0c, 0x45, 0x1c, 0xa3, 0xb5, 0xe3,
	0x19, 0xbe, 0x09, 0x5c, 0x90, 0x47, 0x33, 0x7c, 0x0c, 0xab, 0x53, 0x0f, 0xc3, 0x89, 0x9e, 0x65,
	0x6f, 0xa9, 0xa7, 0x15, 0x1f, 0x38, 0x09, 0x7a, 0x5b, 0xf4, 0x6c, 0x74, 0x00, 0x1b, 0x53, 0x6c,
	0x36, 0x70, 0x68, 0xbc, 0x83, 0xbd, 0x23, 0xc3, 0xda, 0x84, 0xe1, 0xab, 0x8f, 0xb5, 0x45, 0x6f,
	0xc6, 0xa4, 0xb4, 0x2e, 0x4c, 0xef, 0x67, 0x4c, 0x0d, 0x1f, 0xf3, 0xa6, 0x6d, 0xa8, 0xf6, 0x4d,
	0xd6, 0x55, 0x49, 0x71, 0xc5, 0x0f, 0x61, 0xb3, 0x85, 0x46, 0x8d, 0xef, 0xc3, 0xaa, 0xb2, 0x5c,
	0x8b, 0x2b, 0xae, 0x31, 0x77, 0xdc, 0xa0, 0xc6, 0x6b, 0x76, 0x5c, 0xab, 0xec, 0xcd, 0x37, 0x97,
	0x95, 0xbd, 0x14, 0x57, 0x97, 0x98, 0xbb, 0xa6, 0x57, 0xa3, 0x7d, 0xb8, 0x6b, 0x07, 0x1d, 0x1b,
	0x1b, 0xd5, 0x41, 0xc3, 0x13, 0xd1, 0xc1, 0x84, 0x9d, 0x84, 0x2b, 0x8e, 0xf5, 0x0b, 0x2f, 0xfb,
	0x2d, 0x65, 0x89, 0xe4, 0x33, 0xf8, 0x69, 0xd8, 0x52, 0x96, 0xc8, 0xd6, 0x0d, 0xc7, 0x43, 0x58,
	0x36, 0x39, 0x8f, 0x13, 0x85, 0xda, 0x71, 0x39, 0x50, 0x92, 0x9d, 0x51, 0xb3, 0x55, 0x93, 0x9f,
	0x92, 0x78, 0x36, 0x50, 0x32, 0xda, 0x81, 0x25, 0x57, 0x52, 0x1e, 0x3a, 0x0f, 0x37, 0x72, 0x05,
	0xf4, 0x4d, 0xc9, 0xa8, 0x06, 0x55, 0x93, 0x73, 0x83, 0x69, 0xe6, 0x90, 0x2b, 0xc9, 0x3e, 0x86,
	0xff, 0x8c, 0xc9, 0x9b, 0x24, 0x35, 0x88, 0x70, 0x93, 0xc4, 0xa7, 0x40, 0xb8, 0x31, 0xb1, 0x0b,
	0x2b, 0x26, 0xe7, 0xe3, 0x07, 0xa2, 0x24, 0xfb, 0x1c, 0xd6, 0x6e, 0xf2, 0xc6, 0x48, 0x0d, 0x9c,
	0xbb, 0xc1, 0x35, 0x02, 0xe7, 0x26, 0xb9, 0xce, 0x1d, 0xfa, 0x42, 0x1d, 0xfc, 0x0d, 0x00, 0x00,
	0xff, 0xff, 0xf5, 0x86, 0x85, 0xa4, 0xc4, 0x04, 0x00, 0x00,
}
