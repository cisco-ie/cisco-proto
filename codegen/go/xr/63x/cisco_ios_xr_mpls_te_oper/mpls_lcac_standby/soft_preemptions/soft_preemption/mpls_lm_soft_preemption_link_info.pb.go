/*
Copyright 2019 Cisco Systems

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: mpls_lm_soft_preemption_link_info.proto

package cisco_ios_xr_mpls_te_oper_mpls_lcac_standby_soft_preemptions_soft_preemption

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type MplsLmSoftPreemptionLinkInfo_KEYS struct {
	InterfaceName        string   `protobuf:"bytes,1,opt,name=interface_name,json=interfaceName,proto3" json:"interface_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MplsLmSoftPreemptionLinkInfo_KEYS) Reset()         { *m = MplsLmSoftPreemptionLinkInfo_KEYS{} }
func (m *MplsLmSoftPreemptionLinkInfo_KEYS) String() string { return proto.CompactTextString(m) }
func (*MplsLmSoftPreemptionLinkInfo_KEYS) ProtoMessage()    {}
func (*MplsLmSoftPreemptionLinkInfo_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_569299f252e8d2f9, []int{0}
}

func (m *MplsLmSoftPreemptionLinkInfo_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MplsLmSoftPreemptionLinkInfo_KEYS.Unmarshal(m, b)
}
func (m *MplsLmSoftPreemptionLinkInfo_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MplsLmSoftPreemptionLinkInfo_KEYS.Marshal(b, m, deterministic)
}
func (m *MplsLmSoftPreemptionLinkInfo_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MplsLmSoftPreemptionLinkInfo_KEYS.Merge(m, src)
}
func (m *MplsLmSoftPreemptionLinkInfo_KEYS) XXX_Size() int {
	return xxx_messageInfo_MplsLmSoftPreemptionLinkInfo_KEYS.Size(m)
}
func (m *MplsLmSoftPreemptionLinkInfo_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_MplsLmSoftPreemptionLinkInfo_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_MplsLmSoftPreemptionLinkInfo_KEYS proto.InternalMessageInfo

func (m *MplsLmSoftPreemptionLinkInfo_KEYS) GetInterfaceName() string {
	if m != nil {
		return m.InterfaceName
	}
	return ""
}

type MplsLmPreemptedLsp struct {
	TunnelId                uint32   `protobuf:"varint,1,opt,name=tunnel_id,json=tunnelId,proto3" json:"tunnel_id,omitempty"`
	LspId                   uint32   `protobuf:"varint,2,opt,name=lsp_id,json=lspId,proto3" json:"lsp_id,omitempty"`
	SourceAddress           string   `protobuf:"bytes,3,opt,name=source_address,json=sourceAddress,proto3" json:"source_address,omitempty"`
	DestinationAddress      string   `protobuf:"bytes,4,opt,name=destination_address,json=destinationAddress,proto3" json:"destination_address,omitempty"`
	RequestedBandwidth      uint64   `protobuf:"varint,5,opt,name=requested_bandwidth,json=requestedBandwidth,proto3" json:"requested_bandwidth,omitempty"`
	SetupPriority           uint32   `protobuf:"varint,6,opt,name=setup_priority,json=setupPriority,proto3" json:"setup_priority,omitempty"`
	HoldPriority            uint32   `protobuf:"varint,7,opt,name=hold_priority,json=holdPriority,proto3" json:"hold_priority,omitempty"`
	BandwidthType           uint32   `protobuf:"varint,8,opt,name=bandwidth_type,json=bandwidthType,proto3" json:"bandwidth_type,omitempty"`
	SoftPreempted           bool     `protobuf:"varint,9,opt,name=soft_preempted,json=softPreempted,proto3" json:"soft_preempted,omitempty"`
	SoftPreemptionTimeout   uint32   `protobuf:"varint,10,opt,name=soft_preemption_timeout,json=softPreemptionTimeout,proto3" json:"soft_preemption_timeout,omitempty"`
	BandwidthPreempted      bool     `protobuf:"varint,11,opt,name=bandwidth_preempted,json=bandwidthPreempted,proto3" json:"bandwidth_preempted,omitempty"`
	SoftPreemptedFrRrewrite bool     `protobuf:"varint,12,opt,name=soft_preempted_fr_rrewrite,json=softPreemptedFrRrewrite,proto3" json:"soft_preempted_fr_rrewrite,omitempty"`
	XXX_NoUnkeyedLiteral    struct{} `json:"-"`
	XXX_unrecognized        []byte   `json:"-"`
	XXX_sizecache           int32    `json:"-"`
}

func (m *MplsLmPreemptedLsp) Reset()         { *m = MplsLmPreemptedLsp{} }
func (m *MplsLmPreemptedLsp) String() string { return proto.CompactTextString(m) }
func (*MplsLmPreemptedLsp) ProtoMessage()    {}
func (*MplsLmPreemptedLsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_569299f252e8d2f9, []int{1}
}

func (m *MplsLmPreemptedLsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MplsLmPreemptedLsp.Unmarshal(m, b)
}
func (m *MplsLmPreemptedLsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MplsLmPreemptedLsp.Marshal(b, m, deterministic)
}
func (m *MplsLmPreemptedLsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MplsLmPreemptedLsp.Merge(m, src)
}
func (m *MplsLmPreemptedLsp) XXX_Size() int {
	return xxx_messageInfo_MplsLmPreemptedLsp.Size(m)
}
func (m *MplsLmPreemptedLsp) XXX_DiscardUnknown() {
	xxx_messageInfo_MplsLmPreemptedLsp.DiscardUnknown(m)
}

var xxx_messageInfo_MplsLmPreemptedLsp proto.InternalMessageInfo

func (m *MplsLmPreemptedLsp) GetTunnelId() uint32 {
	if m != nil {
		return m.TunnelId
	}
	return 0
}

func (m *MplsLmPreemptedLsp) GetLspId() uint32 {
	if m != nil {
		return m.LspId
	}
	return 0
}

func (m *MplsLmPreemptedLsp) GetSourceAddress() string {
	if m != nil {
		return m.SourceAddress
	}
	return ""
}

func (m *MplsLmPreemptedLsp) GetDestinationAddress() string {
	if m != nil {
		return m.DestinationAddress
	}
	return ""
}

func (m *MplsLmPreemptedLsp) GetRequestedBandwidth() uint64 {
	if m != nil {
		return m.RequestedBandwidth
	}
	return 0
}

func (m *MplsLmPreemptedLsp) GetSetupPriority() uint32 {
	if m != nil {
		return m.SetupPriority
	}
	return 0
}

func (m *MplsLmPreemptedLsp) GetHoldPriority() uint32 {
	if m != nil {
		return m.HoldPriority
	}
	return 0
}

func (m *MplsLmPreemptedLsp) GetBandwidthType() uint32 {
	if m != nil {
		return m.BandwidthType
	}
	return 0
}

func (m *MplsLmPreemptedLsp) GetSoftPreempted() bool {
	if m != nil {
		return m.SoftPreempted
	}
	return false
}

func (m *MplsLmPreemptedLsp) GetSoftPreemptionTimeout() uint32 {
	if m != nil {
		return m.SoftPreemptionTimeout
	}
	return 0
}

func (m *MplsLmPreemptedLsp) GetBandwidthPreempted() bool {
	if m != nil {
		return m.BandwidthPreempted
	}
	return false
}

func (m *MplsLmPreemptedLsp) GetSoftPreemptedFrRrewrite() bool {
	if m != nil {
		return m.SoftPreemptedFrRrewrite
	}
	return false
}

type MplsLmSoftPreemptionLinkInfo struct {
	LinkAddress                       string                `protobuf:"bytes,50,opt,name=link_address,json=linkAddress,proto3" json:"link_address,omitempty"`
	TotalSoftPreemptedBandwidthBc0    uint64                `protobuf:"varint,51,opt,name=total_soft_preempted_bandwidth_bc0,json=totalSoftPreemptedBandwidthBc0,proto3" json:"total_soft_preempted_bandwidth_bc0,omitempty"`
	TotalSoftPreemptedBandwidthBc1    uint64                `protobuf:"varint,52,opt,name=total_soft_preempted_bandwidth_bc1,json=totalSoftPreemptedBandwidthBc1,proto3" json:"total_soft_preempted_bandwidth_bc1,omitempty"`
	CurrentSoftPreemptedBandwidthBc0  uint64                `protobuf:"varint,53,opt,name=current_soft_preempted_bandwidth_bc0,json=currentSoftPreemptedBandwidthBc0,proto3" json:"current_soft_preempted_bandwidth_bc0,omitempty"`
	CurrentSoftPreemptedBandwidthBc1  uint64                `protobuf:"varint,54,opt,name=current_soft_preempted_bandwidth_bc1,json=currentSoftPreemptedBandwidthBc1,proto3" json:"current_soft_preempted_bandwidth_bc1,omitempty"`
	ReleaseSoftPreemptedBandwidthBc0  uint64                `protobuf:"varint,55,opt,name=release_soft_preempted_bandwidth_bc0,json=releaseSoftPreemptedBandwidthBc0,proto3" json:"release_soft_preempted_bandwidth_bc0,omitempty"`
	ReleaseSoftPreemptedBandwidthBc1  uint64                `protobuf:"varint,56,opt,name=release_soft_preempted_bandwidth_bc1,json=releaseSoftPreemptedBandwidthBc1,proto3" json:"release_soft_preempted_bandwidth_bc1,omitempty"`
	CurrentOverSubscribedBandwidthBc0 uint64                `protobuf:"varint,57,opt,name=current_over_subscribed_bandwidth_bc0,json=currentOverSubscribedBandwidthBc0,proto3" json:"current_over_subscribed_bandwidth_bc0,omitempty"`
	CurrentOverSubscribedBandwidthBc1 uint64                `protobuf:"varint,58,opt,name=current_over_subscribed_bandwidth_bc1,json=currentOverSubscribedBandwidthBc1,proto3" json:"current_over_subscribed_bandwidth_bc1,omitempty"`
	CurrentSoftPreemptionLsp          []*MplsLmPreemptedLsp `protobuf:"bytes,59,rep,name=current_soft_preemption_lsp,json=currentSoftPreemptionLsp,proto3" json:"current_soft_preemption_lsp,omitempty"`
	XXX_NoUnkeyedLiteral              struct{}              `json:"-"`
	XXX_unrecognized                  []byte                `json:"-"`
	XXX_sizecache                     int32                 `json:"-"`
}

func (m *MplsLmSoftPreemptionLinkInfo) Reset()         { *m = MplsLmSoftPreemptionLinkInfo{} }
func (m *MplsLmSoftPreemptionLinkInfo) String() string { return proto.CompactTextString(m) }
func (*MplsLmSoftPreemptionLinkInfo) ProtoMessage()    {}
func (*MplsLmSoftPreemptionLinkInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_569299f252e8d2f9, []int{2}
}

func (m *MplsLmSoftPreemptionLinkInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MplsLmSoftPreemptionLinkInfo.Unmarshal(m, b)
}
func (m *MplsLmSoftPreemptionLinkInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MplsLmSoftPreemptionLinkInfo.Marshal(b, m, deterministic)
}
func (m *MplsLmSoftPreemptionLinkInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MplsLmSoftPreemptionLinkInfo.Merge(m, src)
}
func (m *MplsLmSoftPreemptionLinkInfo) XXX_Size() int {
	return xxx_messageInfo_MplsLmSoftPreemptionLinkInfo.Size(m)
}
func (m *MplsLmSoftPreemptionLinkInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_MplsLmSoftPreemptionLinkInfo.DiscardUnknown(m)
}

var xxx_messageInfo_MplsLmSoftPreemptionLinkInfo proto.InternalMessageInfo

func (m *MplsLmSoftPreemptionLinkInfo) GetLinkAddress() string {
	if m != nil {
		return m.LinkAddress
	}
	return ""
}

func (m *MplsLmSoftPreemptionLinkInfo) GetTotalSoftPreemptedBandwidthBc0() uint64 {
	if m != nil {
		return m.TotalSoftPreemptedBandwidthBc0
	}
	return 0
}

func (m *MplsLmSoftPreemptionLinkInfo) GetTotalSoftPreemptedBandwidthBc1() uint64 {
	if m != nil {
		return m.TotalSoftPreemptedBandwidthBc1
	}
	return 0
}

func (m *MplsLmSoftPreemptionLinkInfo) GetCurrentSoftPreemptedBandwidthBc0() uint64 {
	if m != nil {
		return m.CurrentSoftPreemptedBandwidthBc0
	}
	return 0
}

func (m *MplsLmSoftPreemptionLinkInfo) GetCurrentSoftPreemptedBandwidthBc1() uint64 {
	if m != nil {
		return m.CurrentSoftPreemptedBandwidthBc1
	}
	return 0
}

func (m *MplsLmSoftPreemptionLinkInfo) GetReleaseSoftPreemptedBandwidthBc0() uint64 {
	if m != nil {
		return m.ReleaseSoftPreemptedBandwidthBc0
	}
	return 0
}

func (m *MplsLmSoftPreemptionLinkInfo) GetReleaseSoftPreemptedBandwidthBc1() uint64 {
	if m != nil {
		return m.ReleaseSoftPreemptedBandwidthBc1
	}
	return 0
}

func (m *MplsLmSoftPreemptionLinkInfo) GetCurrentOverSubscribedBandwidthBc0() uint64 {
	if m != nil {
		return m.CurrentOverSubscribedBandwidthBc0
	}
	return 0
}

func (m *MplsLmSoftPreemptionLinkInfo) GetCurrentOverSubscribedBandwidthBc1() uint64 {
	if m != nil {
		return m.CurrentOverSubscribedBandwidthBc1
	}
	return 0
}

func (m *MplsLmSoftPreemptionLinkInfo) GetCurrentSoftPreemptionLsp() []*MplsLmPreemptedLsp {
	if m != nil {
		return m.CurrentSoftPreemptionLsp
	}
	return nil
}

func init() {
	proto.RegisterType((*MplsLmSoftPreemptionLinkInfo_KEYS)(nil), "cisco_ios_xr_mpls_te_oper.mpls_lcac_standby.soft_preemptions.soft_preemption.mpls_lm_soft_preemption_link_info_KEYS")
	proto.RegisterType((*MplsLmPreemptedLsp)(nil), "cisco_ios_xr_mpls_te_oper.mpls_lcac_standby.soft_preemptions.soft_preemption.mpls_lm_preempted_lsp")
	proto.RegisterType((*MplsLmSoftPreemptionLinkInfo)(nil), "cisco_ios_xr_mpls_te_oper.mpls_lcac_standby.soft_preemptions.soft_preemption.mpls_lm_soft_preemption_link_info")
}

func init() {
	proto.RegisterFile("mpls_lm_soft_preemption_link_info.proto", fileDescriptor_569299f252e8d2f9)
}

var fileDescriptor_569299f252e8d2f9 = []byte{
	// 592 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x95, 0xcd, 0x4e, 0x1b, 0x3f,
	0x14, 0xc5, 0x95, 0x3f, 0x90, 0x3f, 0x18, 0xc2, 0xc2, 0x55, 0x84, 0x55, 0xa4, 0x2a, 0x49, 0x9b,
	0x36, 0xab, 0x94, 0x81, 0x96, 0x7e, 0xb0, 0x2a, 0x52, 0x2b, 0xd1, 0x22, 0x88, 0x12, 0x36, 0x5d,
	0x59, 0x33, 0xe3, 0x1b, 0x61, 0x75, 0xc6, 0x76, 0x6d, 0x0f, 0x34, 0xef, 0xd1, 0x27, 0xe8, 0xcb,
	0xf5, 0x35, 0xaa, 0xf1, 0x7c, 0x25, 0x81, 0x86, 0x59, 0x74, 0x99, 0x73, 0x8f, 0x7f, 0xf7, 0x38,
	0x67, 0x34, 0x83, 0x5e, 0xc4, 0x2a, 0x32, 0x34, 0x8a, 0xa9, 0x91, 0x53, 0x4b, 0x95, 0x06, 0x88,
	0x95, 0xe5, 0x52, 0xd0, 0x88, 0x8b, 0x6f, 0x94, 0x8b, 0xa9, 0x1c, 0x2a, 0x2d, 0xad, 0xc4, 0xe7,
	0x21, 0x37, 0xa1, 0xa4, 0x5c, 0x1a, 0xfa, 0x43, 0x53, 0x77, 0xca, 0x02, 0x95, 0x0a, 0xf4, 0x30,
	0x43, 0x84, 0x7e, 0x48, 0x8d, 0xf5, 0x05, 0x0b, 0x66, 0xc3, 0x25, 0x98, 0x59, 0x16, 0x7a, 0x97,
	0xe8, 0xf9, 0x83, 0x8b, 0xe9, 0x97, 0x8f, 0x5f, 0x27, 0xb8, 0x8f, 0x76, 0xb9, 0xb0, 0xa0, 0xa7,
	0x7e, 0x08, 0x54, 0xf8, 0x31, 0x90, 0x46, 0xa7, 0x31, 0xd8, 0x1a, 0xb7, 0x4a, 0xf5, 0xc2, 0x8f,
	0xa1, 0xf7, 0x73, 0x1d, 0xb5, 0x0b, 0x62, 0x0e, 0x03, 0x46, 0x23, 0xa3, 0xf0, 0x3e, 0xda, 0xb2,
	0x89, 0x10, 0x10, 0x51, 0xce, 0xdc, 0xd9, 0xd6, 0x78, 0x33, 0x13, 0xce, 0x18, 0x6e, 0xa3, 0x66,
	0x64, 0x54, 0x3a, 0xf9, 0xcf, 0x4d, 0x36, 0x22, 0xa3, 0xce, 0x58, 0xba, 0xd4, 0xc8, 0x44, 0x87,
	0x40, 0x7d, 0xc6, 0x34, 0x18, 0x43, 0xd6, 0xb2, 0xa5, 0x99, 0xfa, 0x21, 0x13, 0xf1, 0x4b, 0xf4,
	0x88, 0x81, 0xb1, 0x5c, 0xf8, 0x2e, 0x79, 0xe1, 0x5d, 0x77, 0x5e, 0x3c, 0x37, 0x9a, 0x3b, 0xa0,
	0xe1, 0x7b, 0x02, 0x26, 0x0d, 0x17, 0xf8, 0x82, 0xdd, 0x72, 0x66, 0xaf, 0xc9, 0x46, 0xa7, 0x31,
	0x58, 0x1f, 0xe3, 0x72, 0x74, 0x5a, 0x4c, 0x5c, 0x10, 0xb0, 0x89, 0xa2, 0x4a, 0x73, 0xa9, 0xb9,
	0x9d, 0x91, 0xa6, 0xcb, 0xd9, 0x72, 0xea, 0x28, 0x17, 0xf1, 0x53, 0xd4, 0xba, 0x96, 0x11, 0xab,
	0x5c, 0xff, 0x3b, 0xd7, 0x4e, 0x2a, 0x96, 0xa6, 0x3e, 0xda, 0x2d, 0x57, 0x52, 0x3b, 0x53, 0x40,
	0x36, 0x33, 0x56, 0xa9, 0x5e, 0xcd, 0x14, 0x64, 0x77, 0xaf, 0x2a, 0x01, 0x46, 0xb6, 0x3a, 0x8d,
	0xc1, 0x66, 0x7a, 0xf7, 0xa9, 0x1d, 0x15, 0x22, 0x3e, 0x46, 0x7b, 0xcb, 0xcd, 0x59, 0x1e, 0x83,
	0x4c, 0x2c, 0x41, 0x0e, 0xdb, 0x9e, 0xf3, 0x73, 0x29, 0xae, 0xb2, 0x61, 0xfa, 0x17, 0x54, 0x29,
	0xaa, 0x1d, 0xdb, 0x6e, 0x07, 0x2e, 0x47, 0xd5, 0xa2, 0x13, 0xf4, 0x78, 0x31, 0x0f, 0x9d, 0x6a,
	0xaa, 0x35, 0xdc, 0x6a, 0x6e, 0x81, 0xec, 0xb8, 0x73, 0x7b, 0x0b, 0xd9, 0x3e, 0xe9, 0x71, 0x3e,
	0xee, 0xfd, 0x6e, 0xa2, 0xee, 0x83, 0x0f, 0x1a, 0xee, 0xa2, 0x1d, 0xf7, 0xa3, 0x28, 0xf0, 0xd0,
	0x15, 0xb8, 0x9d, 0x6a, 0x45, 0x73, 0x9f, 0x51, 0xcf, 0x4a, 0xeb, 0x47, 0x74, 0x29, 0x4b, 0x75,
	0x97, 0x20, 0x3c, 0x20, 0x47, 0xae, 0xc8, 0x27, 0xce, 0x39, 0x99, 0x8f, 0x54, 0x36, 0x7a, 0x1a,
	0x1e, 0xd4, 0x62, 0x79, 0xe4, 0x55, 0x0d, 0x96, 0x87, 0x2f, 0xd0, 0xb3, 0x30, 0xd1, 0x1a, 0x84,
	0x5d, 0x9d, 0xec, 0xb5, 0xa3, 0x75, 0x72, 0xef, 0xdf, 0xb3, 0xd5, 0xe3, 0x79, 0xe4, 0xb8, 0x16,
	0xcf, 0xe5, 0xd3, 0x10, 0x81, 0x6f, 0x60, 0x75, 0xbe, 0x37, 0x19, 0x2f, 0xf7, 0xae, 0xcc, 0x57,
	0x83, 0xe7, 0x91, 0xb7, 0xb5, 0x78, 0x1e, 0x1e, 0xa1, 0x7e, 0x71, 0x5f, 0x79, 0x03, 0x9a, 0x9a,
	0x24, 0x30, 0xa1, 0xe6, 0xc1, 0x9d, 0x80, 0xef, 0x1c, 0xb0, 0x9b, 0x9b, 0x2f, 0x6f, 0x40, 0x4f,
	0x4a, 0xeb, 0x42, 0xc2, 0x9a, 0x44, 0x8f, 0xbc, 0xaf, 0x47, 0xf4, 0xf0, 0xaf, 0x06, 0xda, 0xbf,
	0xaf, 0x14, 0xf7, 0x10, 0x1b, 0x45, 0x4e, 0x3a, 0x6b, 0x83, 0xed, 0xc3, 0x70, 0xf8, 0x2f, 0xdf,
	0xd0, 0xc3, 0x7b, 0x5f, 0xa6, 0x63, 0x72, 0xb7, 0x70, 0x2e, 0xc5, 0xb9, 0x51, 0x41, 0xd3, 0x7d,
	0x26, 0x8e, 0xfe, 0x04, 0x00, 0x00, 0xff, 0xff, 0xf1, 0x8e, 0x76, 0xdf, 0x51, 0x06, 0x00, 0x00,
}
