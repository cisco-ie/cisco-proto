/*
Copyright 2019 Cisco Systems

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: mpls_te_topology_path_bag.proto

package cisco_ios_xr_mpls_te_oper_mpls_te_standby_topology_path_tunnels_path_tunnel

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type MplsTeTopologyPathBag_KEYS struct {
	TunnelId             uint32   `protobuf:"varint,1,opt,name=tunnel_id,json=tunnelId,proto3" json:"tunnel_id,omitempty"`
	TunnelName           string   `protobuf:"bytes,2,opt,name=tunnel_name,json=tunnelName,proto3" json:"tunnel_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MplsTeTopologyPathBag_KEYS) Reset()         { *m = MplsTeTopologyPathBag_KEYS{} }
func (m *MplsTeTopologyPathBag_KEYS) String() string { return proto.CompactTextString(m) }
func (*MplsTeTopologyPathBag_KEYS) ProtoMessage()    {}
func (*MplsTeTopologyPathBag_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_4bd12a65a090fb97, []int{0}
}

func (m *MplsTeTopologyPathBag_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MplsTeTopologyPathBag_KEYS.Unmarshal(m, b)
}
func (m *MplsTeTopologyPathBag_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MplsTeTopologyPathBag_KEYS.Marshal(b, m, deterministic)
}
func (m *MplsTeTopologyPathBag_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MplsTeTopologyPathBag_KEYS.Merge(m, src)
}
func (m *MplsTeTopologyPathBag_KEYS) XXX_Size() int {
	return xxx_messageInfo_MplsTeTopologyPathBag_KEYS.Size(m)
}
func (m *MplsTeTopologyPathBag_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_MplsTeTopologyPathBag_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_MplsTeTopologyPathBag_KEYS proto.InternalMessageInfo

func (m *MplsTeTopologyPathBag_KEYS) GetTunnelId() uint32 {
	if m != nil {
		return m.TunnelId
	}
	return 0
}

func (m *MplsTeTopologyPathBag_KEYS) GetTunnelName() string {
	if m != nil {
		return m.TunnelName
	}
	return ""
}

type AffinityNameBag struct {
	ConstraintType          uint32   `protobuf:"varint,1,opt,name=constraint_type,json=constraintType,proto3" json:"constraint_type,omitempty"`
	ConstraintValue         uint32   `protobuf:"varint,2,opt,name=constraint_value,json=constraintValue,proto3" json:"constraint_value,omitempty"`
	ForwardRefValue         uint32   `protobuf:"varint,3,opt,name=forward_ref_value,json=forwardRefValue,proto3" json:"forward_ref_value,omitempty"`
	ConstraintExtendedValue []uint32 `protobuf:"varint,4,rep,packed,name=constraint_extended_value,json=constraintExtendedValue,proto3" json:"constraint_extended_value,omitempty"`
	ExtendedForwardRefValue []uint32 `protobuf:"varint,5,rep,packed,name=extended_forward_ref_value,json=extendedForwardRefValue,proto3" json:"extended_forward_ref_value,omitempty"`
	XXX_NoUnkeyedLiteral    struct{} `json:"-"`
	XXX_unrecognized        []byte   `json:"-"`
	XXX_sizecache           int32    `json:"-"`
}

func (m *AffinityNameBag) Reset()         { *m = AffinityNameBag{} }
func (m *AffinityNameBag) String() string { return proto.CompactTextString(m) }
func (*AffinityNameBag) ProtoMessage()    {}
func (*AffinityNameBag) Descriptor() ([]byte, []int) {
	return fileDescriptor_4bd12a65a090fb97, []int{1}
}

func (m *AffinityNameBag) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AffinityNameBag.Unmarshal(m, b)
}
func (m *AffinityNameBag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AffinityNameBag.Marshal(b, m, deterministic)
}
func (m *AffinityNameBag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AffinityNameBag.Merge(m, src)
}
func (m *AffinityNameBag) XXX_Size() int {
	return xxx_messageInfo_AffinityNameBag.Size(m)
}
func (m *AffinityNameBag) XXX_DiscardUnknown() {
	xxx_messageInfo_AffinityNameBag.DiscardUnknown(m)
}

var xxx_messageInfo_AffinityNameBag proto.InternalMessageInfo

func (m *AffinityNameBag) GetConstraintType() uint32 {
	if m != nil {
		return m.ConstraintType
	}
	return 0
}

func (m *AffinityNameBag) GetConstraintValue() uint32 {
	if m != nil {
		return m.ConstraintValue
	}
	return 0
}

func (m *AffinityNameBag) GetForwardRefValue() uint32 {
	if m != nil {
		return m.ForwardRefValue
	}
	return 0
}

func (m *AffinityNameBag) GetConstraintExtendedValue() []uint32 {
	if m != nil {
		return m.ConstraintExtendedValue
	}
	return nil
}

func (m *AffinityNameBag) GetExtendedForwardRefValue() []uint32 {
	if m != nil {
		return m.ExtendedForwardRefValue
	}
	return nil
}

type MplsTeTunnelsAffinityInfo struct {
	AffinityBits         uint32             `protobuf:"varint,1,opt,name=affinity_bits,json=affinityBits,proto3" json:"affinity_bits,omitempty"`
	AffinityMask         uint32             `protobuf:"varint,2,opt,name=affinity_mask,json=affinityMask,proto3" json:"affinity_mask,omitempty"`
	NamedAffinity        []*AffinityNameBag `protobuf:"bytes,3,rep,name=named_affinity,json=namedAffinity,proto3" json:"named_affinity,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *MplsTeTunnelsAffinityInfo) Reset()         { *m = MplsTeTunnelsAffinityInfo{} }
func (m *MplsTeTunnelsAffinityInfo) String() string { return proto.CompactTextString(m) }
func (*MplsTeTunnelsAffinityInfo) ProtoMessage()    {}
func (*MplsTeTunnelsAffinityInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_4bd12a65a090fb97, []int{2}
}

func (m *MplsTeTunnelsAffinityInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MplsTeTunnelsAffinityInfo.Unmarshal(m, b)
}
func (m *MplsTeTunnelsAffinityInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MplsTeTunnelsAffinityInfo.Marshal(b, m, deterministic)
}
func (m *MplsTeTunnelsAffinityInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MplsTeTunnelsAffinityInfo.Merge(m, src)
}
func (m *MplsTeTunnelsAffinityInfo) XXX_Size() int {
	return xxx_messageInfo_MplsTeTunnelsAffinityInfo.Size(m)
}
func (m *MplsTeTunnelsAffinityInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_MplsTeTunnelsAffinityInfo.DiscardUnknown(m)
}

var xxx_messageInfo_MplsTeTunnelsAffinityInfo proto.InternalMessageInfo

func (m *MplsTeTunnelsAffinityInfo) GetAffinityBits() uint32 {
	if m != nil {
		return m.AffinityBits
	}
	return 0
}

func (m *MplsTeTunnelsAffinityInfo) GetAffinityMask() uint32 {
	if m != nil {
		return m.AffinityMask
	}
	return 0
}

func (m *MplsTeTunnelsAffinityInfo) GetNamedAffinity() []*AffinityNameBag {
	if m != nil {
		return m.NamedAffinity
	}
	return nil
}

type MplsSrlgInfo struct {
	SharedRiskGroup      uint32   `protobuf:"varint,1,opt,name=shared_risk_group,json=sharedRiskGroup,proto3" json:"shared_risk_group,omitempty"`
	SrlgName             string   `protobuf:"bytes,2,opt,name=srlg_name,json=srlgName,proto3" json:"srlg_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MplsSrlgInfo) Reset()         { *m = MplsSrlgInfo{} }
func (m *MplsSrlgInfo) String() string { return proto.CompactTextString(m) }
func (*MplsSrlgInfo) ProtoMessage()    {}
func (*MplsSrlgInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_4bd12a65a090fb97, []int{3}
}

func (m *MplsSrlgInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MplsSrlgInfo.Unmarshal(m, b)
}
func (m *MplsSrlgInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MplsSrlgInfo.Marshal(b, m, deterministic)
}
func (m *MplsSrlgInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MplsSrlgInfo.Merge(m, src)
}
func (m *MplsSrlgInfo) XXX_Size() int {
	return xxx_messageInfo_MplsSrlgInfo.Size(m)
}
func (m *MplsSrlgInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_MplsSrlgInfo.DiscardUnknown(m)
}

var xxx_messageInfo_MplsSrlgInfo proto.InternalMessageInfo

func (m *MplsSrlgInfo) GetSharedRiskGroup() uint32 {
	if m != nil {
		return m.SharedRiskGroup
	}
	return 0
}

func (m *MplsSrlgInfo) GetSrlgName() string {
	if m != nil {
		return m.SrlgName
	}
	return ""
}

type TeS2LSrPathHop struct {
	SidType              string   `protobuf:"bytes,1,opt,name=sid_type,json=sidType,proto3" json:"sid_type,omitempty"`
	HasIpAddresses       bool     `protobuf:"varint,2,opt,name=has_ip_addresses,json=hasIpAddresses,proto3" json:"has_ip_addresses,omitempty"`
	LocalAddr            string   `protobuf:"bytes,3,opt,name=local_addr,json=localAddr,proto3" json:"local_addr,omitempty"`
	RemoteAddr           string   `protobuf:"bytes,4,opt,name=remote_addr,json=remoteAddr,proto3" json:"remote_addr,omitempty"`
	HasMplsLabel         bool     `protobuf:"varint,5,opt,name=has_mpls_label,json=hasMplsLabel,proto3" json:"has_mpls_label,omitempty"`
	MplsLabelValue       uint32   `protobuf:"varint,6,opt,name=mpls_label_value,json=mplsLabelValue,proto3" json:"mpls_label_value,omitempty"`
	HasEntropyLabel      bool     `protobuf:"varint,7,opt,name=has_entropy_label,json=hasEntropyLabel,proto3" json:"has_entropy_label,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TeS2LSrPathHop) Reset()         { *m = TeS2LSrPathHop{} }
func (m *TeS2LSrPathHop) String() string { return proto.CompactTextString(m) }
func (*TeS2LSrPathHop) ProtoMessage()    {}
func (*TeS2LSrPathHop) Descriptor() ([]byte, []int) {
	return fileDescriptor_4bd12a65a090fb97, []int{4}
}

func (m *TeS2LSrPathHop) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TeS2LSrPathHop.Unmarshal(m, b)
}
func (m *TeS2LSrPathHop) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TeS2LSrPathHop.Marshal(b, m, deterministic)
}
func (m *TeS2LSrPathHop) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeS2LSrPathHop.Merge(m, src)
}
func (m *TeS2LSrPathHop) XXX_Size() int {
	return xxx_messageInfo_TeS2LSrPathHop.Size(m)
}
func (m *TeS2LSrPathHop) XXX_DiscardUnknown() {
	xxx_messageInfo_TeS2LSrPathHop.DiscardUnknown(m)
}

var xxx_messageInfo_TeS2LSrPathHop proto.InternalMessageInfo

func (m *TeS2LSrPathHop) GetSidType() string {
	if m != nil {
		return m.SidType
	}
	return ""
}

func (m *TeS2LSrPathHop) GetHasIpAddresses() bool {
	if m != nil {
		return m.HasIpAddresses
	}
	return false
}

func (m *TeS2LSrPathHop) GetLocalAddr() string {
	if m != nil {
		return m.LocalAddr
	}
	return ""
}

func (m *TeS2LSrPathHop) GetRemoteAddr() string {
	if m != nil {
		return m.RemoteAddr
	}
	return ""
}

func (m *TeS2LSrPathHop) GetHasMplsLabel() bool {
	if m != nil {
		return m.HasMplsLabel
	}
	return false
}

func (m *TeS2LSrPathHop) GetMplsLabelValue() uint32 {
	if m != nil {
		return m.MplsLabelValue
	}
	return 0
}

func (m *TeS2LSrPathHop) GetHasEntropyLabel() bool {
	if m != nil {
		return m.HasEntropyLabel
	}
	return false
}

type MplsTeTopologyPathBag struct {
	TunnelIdXr                uint32                     `protobuf:"varint,50,opt,name=tunnel_id_xr,json=tunnelIdXr,proto3" json:"tunnel_id_xr,omitempty"`
	DestinationAddressXr      string                     `protobuf:"bytes,51,opt,name=destination_address_xr,json=destinationAddressXr,proto3" json:"destination_address_xr,omitempty"`
	IsPartialPath             bool                       `protobuf:"varint,52,opt,name=is_partial_path,json=isPartialPath,proto3" json:"is_partial_path,omitempty"`
	IsFullPath                bool                       `protobuf:"varint,53,opt,name=is_full_path,json=isFullPath,proto3" json:"is_full_path,omitempty"`
	IsTopologyChecked         bool                       `protobuf:"varint,54,opt,name=is_topology_checked,json=isTopologyChecked,proto3" json:"is_topology_checked,omitempty"`
	IsSegmentRoutingDbChecked bool                       `protobuf:"varint,55,opt,name=is_segment_routing_db_checked,json=isSegmentRoutingDbChecked,proto3" json:"is_segment_routing_db_checked,omitempty"`
	RequestedBandwidth        uint64                     `protobuf:"varint,56,opt,name=requested_bandwidth,json=requestedBandwidth,proto3" json:"requested_bandwidth,omitempty"`
	BandwidthType             uint64                     `protobuf:"varint,57,opt,name=bandwidth_type,json=bandwidthType,proto3" json:"bandwidth_type,omitempty"`
	MininumBandwidth          uint64                     `protobuf:"varint,58,opt,name=mininum_bandwidth,json=mininumBandwidth,proto3" json:"mininum_bandwidth,omitempty"`
	AccumulatedAdminWeight    uint64                     `protobuf:"varint,59,opt,name=accumulated_admin_weight,json=accumulatedAdminWeight,proto3" json:"accumulated_admin_weight,omitempty"`
	SetupPriorityXr           uint32                     `protobuf:"varint,60,opt,name=setup_priority_xr,json=setupPriorityXr,proto3" json:"setup_priority_xr,omitempty"`
	HoldPriorityXr            uint32                     `protobuf:"varint,61,opt,name=hold_priority_xr,json=holdPriorityXr,proto3" json:"hold_priority_xr,omitempty"`
	NodeHopCount              uint32                     `protobuf:"varint,62,opt,name=node_hop_count,json=nodeHopCount,proto3" json:"node_hop_count,omitempty"`
	Affinity                  *MplsTeTunnelsAffinityInfo `protobuf:"bytes,63,opt,name=affinity,proto3" json:"affinity,omitempty"`
	ExcludeSrlgAddress        string                     `protobuf:"bytes,64,opt,name=exclude_srlg_address,json=excludeSrlgAddress,proto3" json:"exclude_srlg_address,omitempty"`
	SharedRiskLinkGroup       []*MplsSrlgInfo            `protobuf:"bytes,65,rep,name=shared_risk_link_group,json=sharedRiskLinkGroup,proto3" json:"shared_risk_link_group,omitempty"`
	Hop                       []string                   `protobuf:"bytes,66,rep,name=hop,proto3" json:"hop,omitempty"`
	SrSegment                 []*TeS2LSrPathHop          `protobuf:"bytes,67,rep,name=sr_segment,json=srSegment,proto3" json:"sr_segment,omitempty"`
	XXX_NoUnkeyedLiteral      struct{}                   `json:"-"`
	XXX_unrecognized          []byte                     `json:"-"`
	XXX_sizecache             int32                      `json:"-"`
}

func (m *MplsTeTopologyPathBag) Reset()         { *m = MplsTeTopologyPathBag{} }
func (m *MplsTeTopologyPathBag) String() string { return proto.CompactTextString(m) }
func (*MplsTeTopologyPathBag) ProtoMessage()    {}
func (*MplsTeTopologyPathBag) Descriptor() ([]byte, []int) {
	return fileDescriptor_4bd12a65a090fb97, []int{5}
}

func (m *MplsTeTopologyPathBag) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MplsTeTopologyPathBag.Unmarshal(m, b)
}
func (m *MplsTeTopologyPathBag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MplsTeTopologyPathBag.Marshal(b, m, deterministic)
}
func (m *MplsTeTopologyPathBag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MplsTeTopologyPathBag.Merge(m, src)
}
func (m *MplsTeTopologyPathBag) XXX_Size() int {
	return xxx_messageInfo_MplsTeTopologyPathBag.Size(m)
}
func (m *MplsTeTopologyPathBag) XXX_DiscardUnknown() {
	xxx_messageInfo_MplsTeTopologyPathBag.DiscardUnknown(m)
}

var xxx_messageInfo_MplsTeTopologyPathBag proto.InternalMessageInfo

func (m *MplsTeTopologyPathBag) GetTunnelIdXr() uint32 {
	if m != nil {
		return m.TunnelIdXr
	}
	return 0
}

func (m *MplsTeTopologyPathBag) GetDestinationAddressXr() string {
	if m != nil {
		return m.DestinationAddressXr
	}
	return ""
}

func (m *MplsTeTopologyPathBag) GetIsPartialPath() bool {
	if m != nil {
		return m.IsPartialPath
	}
	return false
}

func (m *MplsTeTopologyPathBag) GetIsFullPath() bool {
	if m != nil {
		return m.IsFullPath
	}
	return false
}

func (m *MplsTeTopologyPathBag) GetIsTopologyChecked() bool {
	if m != nil {
		return m.IsTopologyChecked
	}
	return false
}

func (m *MplsTeTopologyPathBag) GetIsSegmentRoutingDbChecked() bool {
	if m != nil {
		return m.IsSegmentRoutingDbChecked
	}
	return false
}

func (m *MplsTeTopologyPathBag) GetRequestedBandwidth() uint64 {
	if m != nil {
		return m.RequestedBandwidth
	}
	return 0
}

func (m *MplsTeTopologyPathBag) GetBandwidthType() uint64 {
	if m != nil {
		return m.BandwidthType
	}
	return 0
}

func (m *MplsTeTopologyPathBag) GetMininumBandwidth() uint64 {
	if m != nil {
		return m.MininumBandwidth
	}
	return 0
}

func (m *MplsTeTopologyPathBag) GetAccumulatedAdminWeight() uint64 {
	if m != nil {
		return m.AccumulatedAdminWeight
	}
	return 0
}

func (m *MplsTeTopologyPathBag) GetSetupPriorityXr() uint32 {
	if m != nil {
		return m.SetupPriorityXr
	}
	return 0
}

func (m *MplsTeTopologyPathBag) GetHoldPriorityXr() uint32 {
	if m != nil {
		return m.HoldPriorityXr
	}
	return 0
}

func (m *MplsTeTopologyPathBag) GetNodeHopCount() uint32 {
	if m != nil {
		return m.NodeHopCount
	}
	return 0
}

func (m *MplsTeTopologyPathBag) GetAffinity() *MplsTeTunnelsAffinityInfo {
	if m != nil {
		return m.Affinity
	}
	return nil
}

func (m *MplsTeTopologyPathBag) GetExcludeSrlgAddress() string {
	if m != nil {
		return m.ExcludeSrlgAddress
	}
	return ""
}

func (m *MplsTeTopologyPathBag) GetSharedRiskLinkGroup() []*MplsSrlgInfo {
	if m != nil {
		return m.SharedRiskLinkGroup
	}
	return nil
}

func (m *MplsTeTopologyPathBag) GetHop() []string {
	if m != nil {
		return m.Hop
	}
	return nil
}

func (m *MplsTeTopologyPathBag) GetSrSegment() []*TeS2LSrPathHop {
	if m != nil {
		return m.SrSegment
	}
	return nil
}

func init() {
	proto.RegisterType((*MplsTeTopologyPathBag_KEYS)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te_standby.topology.path_tunnels.path_tunnel.mpls_te_topology_path_bag_KEYS")
	proto.RegisterType((*AffinityNameBag)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te_standby.topology.path_tunnels.path_tunnel.affinity_name_bag")
	proto.RegisterType((*MplsTeTunnelsAffinityInfo)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te_standby.topology.path_tunnels.path_tunnel.mpls_te_tunnels_affinity_info")
	proto.RegisterType((*MplsSrlgInfo)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te_standby.topology.path_tunnels.path_tunnel.mpls_srlg_info")
	proto.RegisterType((*TeS2LSrPathHop)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te_standby.topology.path_tunnels.path_tunnel.te_s2l_sr_path_hop")
	proto.RegisterType((*MplsTeTopologyPathBag)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te_standby.topology.path_tunnels.path_tunnel.mpls_te_topology_path_bag")
}

func init() { proto.RegisterFile("mpls_te_topology_path_bag.proto", fileDescriptor_4bd12a65a090fb97) }

var fileDescriptor_4bd12a65a090fb97 = []byte{
	// 963 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0x5d, 0x6f, 0x1b, 0x45,
	0x14, 0x95, 0xe3, 0xb4, 0xb5, 0x6f, 0x62, 0x27, 0x99, 0x54, 0x61, 0x03, 0x0a, 0xb5, 0x42, 0x01,
	0x53, 0x24, 0x83, 0xd2, 0x02, 0xa5, 0xe5, 0xa3, 0x49, 0x48, 0xa1, 0x6a, 0x8b, 0xa2, 0x4d, 0x05,
	0xa9, 0x90, 0x3a, 0x1a, 0xef, 0x8c, 0xbd, 0x43, 0x76, 0x67, 0x96, 0x99, 0x59, 0x62, 0xbf, 0xf0,
	0x06, 0x4f, 0x3c, 0xf0, 0xc2, 0x9f, 0xe2, 0xdf, 0xf0, 0x0f, 0xd0, 0x7c, 0xec, 0x7a, 0xa3, 0xa8,
	0x3c, 0xe5, 0x2d, 0x3e, 0xe7, 0xdc, 0x73, 0x67, 0x66, 0xcf, 0xbd, 0x0a, 0xdc, 0xca, 0x8b, 0x4c,
	0x63, 0xc3, 0xb0, 0x91, 0x85, 0xcc, 0xe4, 0x74, 0x8e, 0x0b, 0x62, 0x52, 0x3c, 0x26, 0xd3, 0x51,
	0xa1, 0xa4, 0x91, 0xe8, 0x69, 0xc2, 0x75, 0x22, 0x31, 0x97, 0x1a, 0xcf, 0x14, 0xae, 0xd4, 0xb2,
	0x60, 0x6a, 0x54, 0xfd, 0xd0, 0x86, 0x08, 0x3a, 0x9e, 0x8f, 0x2a, 0x8b, 0x91, 0xb3, 0x30, 0xa5,
	0x10, 0x2c, 0xd3, 0xcd, 0x1f, 0xbb, 0xaf, 0xe0, 0xed, 0xd7, 0xf6, 0xc3, 0x4f, 0x8f, 0x5e, 0x9e,
	0xa0, 0xb7, 0xa0, 0xeb, 0xb5, 0x98, 0xd3, 0xa8, 0x35, 0x68, 0x0d, 0x7b, 0x71, 0xc7, 0x03, 0x4f,
	0x28, 0xba, 0x05, 0x2b, 0x81, 0x14, 0x24, 0x67, 0xd1, 0xd2, 0xa0, 0x35, 0xec, 0xc6, 0xe0, 0xa1,
	0xef, 0x49, 0xce, 0x76, 0xff, 0x5c, 0x82, 0x0d, 0x32, 0x99, 0x70, 0xc1, 0xcd, 0xdc, 0x69, 0xac,
	0x31, 0x7a, 0x1f, 0xd6, 0x12, 0x29, 0xb4, 0x51, 0x84, 0x0b, 0x83, 0xcd, 0xbc, 0x60, 0xc1, 0xb9,
	0xbf, 0x80, 0x5f, 0xcc, 0x0b, 0x86, 0x3e, 0x80, 0xf5, 0x86, 0xf0, 0x57, 0x92, 0x95, 0xbe, 0x49,
	0x2f, 0x6e, 0x18, 0xfc, 0x60, 0x61, 0x74, 0x07, 0x36, 0x26, 0x52, 0x9d, 0x13, 0x45, 0xb1, 0x62,
	0x93, 0xa0, 0x6d, 0x7b, 0x6d, 0x20, 0x62, 0x36, 0xf1, 0xda, 0x07, 0xb0, 0xdd, 0xb0, 0x65, 0x33,
	0xc3, 0x04, 0x65, 0x34, 0xd4, 0x2c, 0x0f, 0xda, 0xc3, 0x5e, 0xfc, 0xc6, 0x42, 0x70, 0x14, 0x78,
	0x5f, 0xfb, 0x10, 0xde, 0xac, 0x0b, 0x2e, 0x37, 0xbc, 0xe6, 0x8b, 0x2b, 0xc5, 0xe3, 0x8b, 0x8d,
	0x77, 0xff, 0x6d, 0xc1, 0x4e, 0xfd, 0xde, 0xfe, 0x73, 0xe0, 0xfa, 0x79, 0xb8, 0x98, 0x48, 0xf4,
	0x0e, 0xf4, 0x6a, 0x60, 0xcc, 0x8d, 0x0e, 0x0f, 0xb3, 0x5a, 0x81, 0x07, 0xdc, 0xe8, 0x0b, 0xa2,
	0x9c, 0xe8, 0xb3, 0xf0, 0x26, 0xb5, 0xe8, 0x39, 0xd1, 0x67, 0xe8, 0xf7, 0x16, 0xf4, 0xed, 0x8b,
	0xd3, 0xba, 0x43, 0xd4, 0x1e, 0xb4, 0x87, 0x2b, 0x7b, 0xaf, 0x46, 0x57, 0x98, 0xa0, 0xd1, 0xa5,
	0xaf, 0x1b, 0xf7, 0x5c, 0xd7, 0xfd, 0x80, 0xef, 0xbe, 0x84, 0xbe, 0x73, 0xd5, 0x2a, 0x9b, 0xfa,
	0x3b, 0xde, 0x81, 0x0d, 0x9d, 0x12, 0xc5, 0x28, 0x56, 0x5c, 0x9f, 0xe1, 0xa9, 0x92, 0x65, 0x11,
	0xee, 0xb9, 0xe6, 0x89, 0x98, 0xeb, 0xb3, 0x6f, 0x2d, 0x6c, 0xe3, 0xe7, 0x0a, 0x1b, 0xf9, 0xea,
	0x58, 0xc0, 0xa5, 0xeb, 0xef, 0x25, 0x40, 0xf6, 0xb0, 0x7b, 0x19, 0xd6, 0xca, 0xe7, 0x36, 0x95,
	0x05, 0xda, 0x86, 0x8e, 0xe6, 0x74, 0x91, 0xab, 0x6e, 0x7c, 0x43, 0x73, 0xea, 0x02, 0x35, 0x84,
	0xf5, 0x94, 0x68, 0xcc, 0x0b, 0x4c, 0x28, 0x55, 0x4c, 0x6b, 0xa6, 0x9d, 0x6b, 0x27, 0xee, 0xa7,
	0x44, 0x3f, 0x29, 0xf6, 0x2b, 0x14, 0xed, 0x00, 0x64, 0x32, 0x21, 0x99, 0x13, 0xba, 0x20, 0x75,
	0xe3, 0xae, 0x43, 0xac, 0xc6, 0x26, 0x5f, 0xb1, 0x5c, 0x1a, 0xe6, 0xf9, 0x65, 0x9f, 0x7c, 0x0f,
	0x39, 0xc1, 0x6d, 0xb0, 0x8e, 0xfe, 0x75, 0x33, 0x32, 0x66, 0x59, 0x74, 0xcd, 0xf5, 0x59, 0x4d,
	0x89, 0x7e, 0x5e, 0x64, 0xfa, 0x99, 0xc5, 0xec, 0x79, 0x16, 0x8a, 0x90, 0xa1, 0xeb, 0x7e, 0x14,
	0xf2, 0x4a, 0x54, 0xe7, 0xdb, 0xfa, 0x31, 0x61, 0x94, 0x2c, 0xe6, 0xc1, 0xf2, 0x86, 0xb3, 0x5c,
	0x4b, 0x89, 0x3e, 0xf2, 0xb8, 0x2b, 0xd8, 0xfd, 0xa7, 0x03, 0xdb, 0xaf, 0x1d, 0x6b, 0x34, 0x80,
	0xd5, 0x7a, 0xa2, 0xf1, 0x4c, 0x45, 0x7b, 0xae, 0x1f, 0x54, 0x43, 0x7d, 0xaa, 0xd0, 0x3d, 0xd8,
	0xa2, 0x4c, 0x1b, 0x2e, 0x88, 0xe1, 0x52, 0x54, 0x4f, 0x65, 0xb5, 0x77, 0xdd, 0x3d, 0x6f, 0x36,
	0xd8, 0xf0, 0x62, 0xa7, 0x0a, 0xbd, 0x07, 0x6b, 0x5c, 0xe3, 0x82, 0x28, 0xc3, 0x49, 0xe6, 0xda,
	0x45, 0xf7, 0xdc, 0xf9, 0x7a, 0x5c, 0x1f, 0x7b, 0xf4, 0x98, 0x98, 0xd4, 0xf6, 0xe7, 0x1a, 0x4f,
	0xca, 0x2c, 0x88, 0x3e, 0x71, 0x22, 0xe0, 0xfa, 0x71, 0x99, 0x79, 0xc5, 0x08, 0x36, 0xb9, 0x5e,
	0x9c, 0x3c, 0x49, 0x59, 0x72, 0xc6, 0x68, 0xf4, 0xa9, 0x13, 0x6e, 0x70, 0xfd, 0x22, 0x30, 0x87,
	0x9e, 0x40, 0x8f, 0x60, 0x87, 0x6b, 0xac, 0xd9, 0x34, 0x67, 0xc2, 0x60, 0x25, 0x4b, 0xc3, 0xc5,
	0x14, 0xd3, 0x71, 0x5d, 0xf9, 0x99, 0xab, 0xdc, 0xe6, 0xfa, 0xc4, 0x6b, 0x62, 0x2f, 0xf9, 0x66,
	0x5c, 0x39, 0x7c, 0x04, 0x9b, 0x8a, 0xfd, 0x52, 0x32, 0x6d, 0x18, 0xc5, 0x63, 0x22, 0xe8, 0x39,
	0xa7, 0x26, 0x8d, 0xee, 0x0f, 0x5a, 0xc3, 0xe5, 0x18, 0xd5, 0xd4, 0x41, 0xc5, 0xa0, 0x77, 0xa1,
	0x5f, 0xcb, 0x7c, 0xd2, 0x3e, 0x77, 0xda, 0x5e, 0x8d, 0xba, 0xbc, 0x7d, 0x08, 0x1b, 0x39, 0x17,
	0x5c, 0x94, 0x79, 0xc3, 0xf5, 0x81, 0x53, 0xae, 0x07, 0x62, 0xe1, 0x79, 0x1f, 0x22, 0x92, 0x24,
	0x65, 0x5e, 0x66, 0xc4, 0x1e, 0x83, 0xd0, 0x9c, 0x0b, 0x7c, 0xce, 0xf8, 0x34, 0x35, 0xd1, 0x43,
	0x57, 0xb3, 0xd5, 0xe0, 0xf7, 0x2d, 0xfd, 0xa3, 0x63, 0xdd, 0x44, 0x31, 0x53, 0x16, 0xb8, 0x50,
	0x5c, 0x2a, 0x3b, 0x8d, 0x33, 0x15, 0x7d, 0x11, 0x26, 0xca, 0x12, 0xc7, 0x01, 0x3f, 0x55, 0x6e,
	0x04, 0x64, 0x46, 0x2f, 0x48, 0xbf, 0xf4, 0x91, 0xb3, 0x78, 0x43, 0x79, 0x1b, 0xfa, 0x42, 0x52,
	0x66, 0x67, 0x0a, 0x27, 0xb2, 0x14, 0x26, 0xfa, 0xca, 0xef, 0x19, 0x8b, 0x7e, 0x27, 0x8b, 0x43,
	0x8b, 0xa1, 0x3f, 0x5a, 0xd0, 0xa9, 0x37, 0xcc, 0xd7, 0x83, 0xd6, 0x70, 0x65, 0xef, 0xe7, 0x2b,
	0xdd, 0x30, 0xff, 0xbb, 0x30, 0xe3, 0xba, 0x37, 0xfa, 0x18, 0x6e, 0xb2, 0x59, 0x92, 0x95, 0x94,
	0xf9, 0x5d, 0x13, 0x62, 0x1b, 0x3d, 0x72, 0x99, 0x45, 0x81, 0x3b, 0x51, 0xd9, 0x34, 0x64, 0x16,
	0xfd, 0xd5, 0x82, 0xad, 0xe6, 0x26, 0xca, 0xb8, 0xa8, 0xd6, 0xd1, 0xbe, 0x5b, 0x95, 0x3f, 0x5d,
	0xfd, 0x45, 0xea, 0x35, 0x18, 0x6f, 0x2e, 0x76, 0xdd, 0x33, 0x2e, 0xc2, 0xbe, 0x5b, 0x87, 0x76,
	0x2a, 0x8b, 0xe8, 0x60, 0xd0, 0x1e, 0x76, 0x63, 0xfb, 0x27, 0xfa, 0x0d, 0x40, 0xab, 0x2a, 0xdc,
	0xd1, 0xa1, 0x3b, 0x17, 0xbe, 0xd2, 0x73, 0x5d, 0x5e, 0xa1, 0x71, 0x57, 0xab, 0x30, 0x2a, 0xe3,
	0xeb, 0xee, 0xdf, 0x8e, 0xbb, 0xff, 0x05, 0x00, 0x00, 0xff, 0xff, 0xb6, 0x3a, 0xd3, 0xe6, 0x99,
	0x08, 0x00, 0x00,
}
