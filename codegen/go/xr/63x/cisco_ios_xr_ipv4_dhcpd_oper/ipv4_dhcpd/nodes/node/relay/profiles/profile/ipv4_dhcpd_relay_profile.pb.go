/*
Copyright 2019 Cisco Systems

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ipv4_dhcpd_relay_profile.proto

package cisco_ios_xr_ipv4_dhcpd_oper_ipv4_dhcpd_nodes_node_relay_profiles_profile

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Ipv4DhcpdRelayProfile_KEYS struct {
	Nodeid               string   `protobuf:"bytes,1,opt,name=nodeid,proto3" json:"nodeid,omitempty"`
	ProfileName          string   `protobuf:"bytes,2,opt,name=profile_name,json=profileName,proto3" json:"profile_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Ipv4DhcpdRelayProfile_KEYS) Reset()         { *m = Ipv4DhcpdRelayProfile_KEYS{} }
func (m *Ipv4DhcpdRelayProfile_KEYS) String() string { return proto.CompactTextString(m) }
func (*Ipv4DhcpdRelayProfile_KEYS) ProtoMessage()    {}
func (*Ipv4DhcpdRelayProfile_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_57db0ae265630450, []int{0}
}

func (m *Ipv4DhcpdRelayProfile_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Ipv4DhcpdRelayProfile_KEYS.Unmarshal(m, b)
}
func (m *Ipv4DhcpdRelayProfile_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Ipv4DhcpdRelayProfile_KEYS.Marshal(b, m, deterministic)
}
func (m *Ipv4DhcpdRelayProfile_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ipv4DhcpdRelayProfile_KEYS.Merge(m, src)
}
func (m *Ipv4DhcpdRelayProfile_KEYS) XXX_Size() int {
	return xxx_messageInfo_Ipv4DhcpdRelayProfile_KEYS.Size(m)
}
func (m *Ipv4DhcpdRelayProfile_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_Ipv4DhcpdRelayProfile_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_Ipv4DhcpdRelayProfile_KEYS proto.InternalMessageInfo

func (m *Ipv4DhcpdRelayProfile_KEYS) GetNodeid() string {
	if m != nil {
		return m.Nodeid
	}
	return ""
}

func (m *Ipv4DhcpdRelayProfile_KEYS) GetProfileName() string {
	if m != nil {
		return m.ProfileName
	}
	return ""
}

type Ipv4DhcpdRelayProfile struct {
	RelayProfileName                    string   `protobuf:"bytes,50,opt,name=relay_profile_name,json=relayProfileName,proto3" json:"relay_profile_name,omitempty"`
	RelayProfileUid                     uint32   `protobuf:"varint,51,opt,name=relay_profile_uid,json=relayProfileUid,proto3" json:"relay_profile_uid,omitempty"`
	RelayProfileHelperCount             uint32   `protobuf:"varint,52,opt,name=relay_profile_helper_count,json=relayProfileHelperCount,proto3" json:"relay_profile_helper_count,omitempty"`
	RelayProfileHelperAddress           []string `protobuf:"bytes,53,rep,name=relay_profile_helper_address,json=relayProfileHelperAddress,proto3" json:"relay_profile_helper_address,omitempty"`
	RelayProfileHelperVrf               []string `protobuf:"bytes,54,rep,name=relay_profile_helper_vrf,json=relayProfileHelperVrf,proto3" json:"relay_profile_helper_vrf,omitempty"`
	RelayProfileGiAddr                  []string `protobuf:"bytes,55,rep,name=relay_profile_gi_addr,json=relayProfileGiAddr,proto3" json:"relay_profile_gi_addr,omitempty"`
	RelayProfileRelayInfoOption         uint32   `protobuf:"varint,56,opt,name=relay_profile_relay_info_option,json=relayProfileRelayInfoOption,proto3" json:"relay_profile_relay_info_option,omitempty"`
	RelayProfileRelayInfoPolicy         uint32   `protobuf:"varint,57,opt,name=relay_profile_relay_info_policy,json=relayProfileRelayInfoPolicy,proto3" json:"relay_profile_relay_info_policy,omitempty"`
	RelayProfileRelayInfoAllowUntrusted uint32   `protobuf:"varint,58,opt,name=relay_profile_relay_info_allow_untrusted,json=relayProfileRelayInfoAllowUntrusted,proto3" json:"relay_profile_relay_info_allow_untrusted,omitempty"`
	RelayProfileRelayInfoOptionvpn      uint32   `protobuf:"varint,59,opt,name=relay_profile_relay_info_optionvpn,json=relayProfileRelayInfoOptionvpn,proto3" json:"relay_profile_relay_info_optionvpn,omitempty"`
	RelayProfileRelayInfoOptionvpnMode  string   `protobuf:"bytes,60,opt,name=relay_profile_relay_info_optionvpn_mode,json=relayProfileRelayInfoOptionvpnMode,proto3" json:"relay_profile_relay_info_optionvpn_mode,omitempty"`
	RelayProfileRelayInfoCheck          uint32   `protobuf:"varint,61,opt,name=relay_profile_relay_info_check,json=relayProfileRelayInfoCheck,proto3" json:"relay_profile_relay_info_check,omitempty"`
	RelayProfileGiAddrPolicy            uint32   `protobuf:"varint,62,opt,name=relay_profile_gi_addr_policy,json=relayProfileGiAddrPolicy,proto3" json:"relay_profile_gi_addr_policy,omitempty"`
	RelayProfileBroadcastFlagPolicy     uint32   `protobuf:"varint,63,opt,name=relay_profile_broadcast_flag_policy,json=relayProfileBroadcastFlagPolicy,proto3" json:"relay_profile_broadcast_flag_policy,omitempty"`
	RelayProfileMacMismatchAction       uint32   `protobuf:"varint,64,opt,name=relay_profile_mac_mismatch_action,json=relayProfileMacMismatchAction,proto3" json:"relay_profile_mac_mismatch_action,omitempty"`
	XXX_NoUnkeyedLiteral                struct{} `json:"-"`
	XXX_unrecognized                    []byte   `json:"-"`
	XXX_sizecache                       int32    `json:"-"`
}

func (m *Ipv4DhcpdRelayProfile) Reset()         { *m = Ipv4DhcpdRelayProfile{} }
func (m *Ipv4DhcpdRelayProfile) String() string { return proto.CompactTextString(m) }
func (*Ipv4DhcpdRelayProfile) ProtoMessage()    {}
func (*Ipv4DhcpdRelayProfile) Descriptor() ([]byte, []int) {
	return fileDescriptor_57db0ae265630450, []int{1}
}

func (m *Ipv4DhcpdRelayProfile) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Ipv4DhcpdRelayProfile.Unmarshal(m, b)
}
func (m *Ipv4DhcpdRelayProfile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Ipv4DhcpdRelayProfile.Marshal(b, m, deterministic)
}
func (m *Ipv4DhcpdRelayProfile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ipv4DhcpdRelayProfile.Merge(m, src)
}
func (m *Ipv4DhcpdRelayProfile) XXX_Size() int {
	return xxx_messageInfo_Ipv4DhcpdRelayProfile.Size(m)
}
func (m *Ipv4DhcpdRelayProfile) XXX_DiscardUnknown() {
	xxx_messageInfo_Ipv4DhcpdRelayProfile.DiscardUnknown(m)
}

var xxx_messageInfo_Ipv4DhcpdRelayProfile proto.InternalMessageInfo

func (m *Ipv4DhcpdRelayProfile) GetRelayProfileName() string {
	if m != nil {
		return m.RelayProfileName
	}
	return ""
}

func (m *Ipv4DhcpdRelayProfile) GetRelayProfileUid() uint32 {
	if m != nil {
		return m.RelayProfileUid
	}
	return 0
}

func (m *Ipv4DhcpdRelayProfile) GetRelayProfileHelperCount() uint32 {
	if m != nil {
		return m.RelayProfileHelperCount
	}
	return 0
}

func (m *Ipv4DhcpdRelayProfile) GetRelayProfileHelperAddress() []string {
	if m != nil {
		return m.RelayProfileHelperAddress
	}
	return nil
}

func (m *Ipv4DhcpdRelayProfile) GetRelayProfileHelperVrf() []string {
	if m != nil {
		return m.RelayProfileHelperVrf
	}
	return nil
}

func (m *Ipv4DhcpdRelayProfile) GetRelayProfileGiAddr() []string {
	if m != nil {
		return m.RelayProfileGiAddr
	}
	return nil
}

func (m *Ipv4DhcpdRelayProfile) GetRelayProfileRelayInfoOption() uint32 {
	if m != nil {
		return m.RelayProfileRelayInfoOption
	}
	return 0
}

func (m *Ipv4DhcpdRelayProfile) GetRelayProfileRelayInfoPolicy() uint32 {
	if m != nil {
		return m.RelayProfileRelayInfoPolicy
	}
	return 0
}

func (m *Ipv4DhcpdRelayProfile) GetRelayProfileRelayInfoAllowUntrusted() uint32 {
	if m != nil {
		return m.RelayProfileRelayInfoAllowUntrusted
	}
	return 0
}

func (m *Ipv4DhcpdRelayProfile) GetRelayProfileRelayInfoOptionvpn() uint32 {
	if m != nil {
		return m.RelayProfileRelayInfoOptionvpn
	}
	return 0
}

func (m *Ipv4DhcpdRelayProfile) GetRelayProfileRelayInfoOptionvpnMode() string {
	if m != nil {
		return m.RelayProfileRelayInfoOptionvpnMode
	}
	return ""
}

func (m *Ipv4DhcpdRelayProfile) GetRelayProfileRelayInfoCheck() uint32 {
	if m != nil {
		return m.RelayProfileRelayInfoCheck
	}
	return 0
}

func (m *Ipv4DhcpdRelayProfile) GetRelayProfileGiAddrPolicy() uint32 {
	if m != nil {
		return m.RelayProfileGiAddrPolicy
	}
	return 0
}

func (m *Ipv4DhcpdRelayProfile) GetRelayProfileBroadcastFlagPolicy() uint32 {
	if m != nil {
		return m.RelayProfileBroadcastFlagPolicy
	}
	return 0
}

func (m *Ipv4DhcpdRelayProfile) GetRelayProfileMacMismatchAction() uint32 {
	if m != nil {
		return m.RelayProfileMacMismatchAction
	}
	return 0
}

func init() {
	proto.RegisterType((*Ipv4DhcpdRelayProfile_KEYS)(nil), "cisco_ios_xr_ipv4_dhcpd_oper.ipv4_dhcpd.nodes.node.relay.profiles.profile.ipv4_dhcpd_relay_profile_KEYS")
	proto.RegisterType((*Ipv4DhcpdRelayProfile)(nil), "cisco_ios_xr_ipv4_dhcpd_oper.ipv4_dhcpd.nodes.node.relay.profiles.profile.ipv4_dhcpd_relay_profile")
}

func init() { proto.RegisterFile("ipv4_dhcpd_relay_profile.proto", fileDescriptor_57db0ae265630450) }

var fileDescriptor_57db0ae265630450 = []byte{
	// 499 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x94, 0xef, 0x4f, 0x13, 0x31,
	0x18, 0xc7, 0x33, 0x4d, 0x30, 0x3c, 0x6a, 0xd4, 0x26, 0x68, 0x45, 0x19, 0x63, 0xbc, 0x70, 0x31,
	0x66, 0x89, 0x82, 0xa2, 0xa2, 0xe0, 0xc0, 0x1f, 0xa0, 0x4e, 0xc9, 0xc8, 0x4c, 0xf4, 0x4d, 0x53,
	0xda, 0xde, 0xd6, 0x78, 0xd7, 0x36, 0xed, 0x6d, 0xca, 0x3f, 0x6f, 0xcc, 0x3d, 0xdc, 0x85, 0x3b,
	0xf6, 0x83, 0x37, 0x4b, 0xbb, 0xe7, 0xf3, 0xfd, 0x3c, 0xd7, 0xde, 0x93, 0x83, 0xba, 0x76, 0xe3,
	0x4d, 0x26, 0x87, 0xc2, 0x49, 0xe6, 0x55, 0xcc, 0x4f, 0x99, 0xf3, 0x36, 0xd2, 0xb1, 0x6a, 0x3b,
	0x6f, 0x53, 0x4b, 0x0e, 0x85, 0x0e, 0xc2, 0x32, 0x6d, 0x03, 0xfb, 0xeb, 0x59, 0x09, 0xb6, 0x4e,
	0xf9, 0xf6, 0xf9, 0xbe, 0x6d, 0xac, 0x54, 0x01, 0x7f, 0xdb, 0xe8, 0x69, 0xe7, 0x9e, 0x50, 0x2c,
	0x9a, 0xbf, 0x60, 0x65, 0x56, 0x33, 0xf6, 0xe5, 0xc3, 0xcf, 0x63, 0x72, 0x17, 0x16, 0xb2, 0xbc,
	0x96, 0xb4, 0xd6, 0xa8, 0xb5, 0x16, 0x7b, 0xf9, 0x8e, 0xac, 0xc1, 0x8d, 0x82, 0x33, 0x3c, 0x51,
	0xf4, 0x0a, 0x56, 0xaf, 0xe7, 0xff, 0x7d, 0xe3, 0x89, 0x6a, 0xfe, 0xbb, 0x06, 0x74, 0x96, 0x9c,
	0x3c, 0x01, 0x52, 0xed, 0x86, 0x96, 0x67, 0x68, 0xb9, 0x8d, 0x95, 0xa3, 0x73, 0x15, 0x79, 0x0c,
	0x77, 0xaa, 0xf4, 0x48, 0x4b, 0xba, 0xd1, 0xa8, 0xb5, 0x6e, 0xf6, 0x6e, 0x95, 0xe1, 0xbe, 0x96,
	0x64, 0x1b, 0x96, 0xab, 0xec, 0x50, 0xc5, 0x4e, 0x79, 0x26, 0xec, 0xc8, 0xa4, 0x74, 0x13, 0x43,
	0xf7, 0xca, 0xa1, 0x03, 0xac, 0xef, 0x67, 0x65, 0xb2, 0x0b, 0x0f, 0xa7, 0x86, 0xb9, 0x94, 0x5e,
	0x85, 0x40, 0x9f, 0x37, 0xae, 0xb6, 0x16, 0x7b, 0xf7, 0x27, 0xe3, 0x9d, 0x33, 0x80, 0x6c, 0x01,
	0x9d, 0x2a, 0x18, 0xfb, 0x88, 0xbe, 0xc0, 0xf0, 0xd2, 0x64, 0xf8, 0x87, 0x8f, 0xc8, 0x53, 0x58,
	0xaa, 0x06, 0x07, 0x1a, 0xbb, 0xd2, 0x2d, 0x4c, 0x91, 0x72, 0xea, 0x93, 0xce, 0xda, 0x91, 0xf7,
	0xb0, 0x5a, 0x8d, 0x9c, 0xed, 0xb4, 0x89, 0x2c, 0xb3, 0x2e, 0xd5, 0xd6, 0xd0, 0x97, 0x78, 0xdc,
	0x07, 0xe5, 0x70, 0x2f, 0x5b, 0x1f, 0x9a, 0xc8, 0x7e, 0x47, 0x64, 0xae, 0xc5, 0xd9, 0x58, 0x8b,
	0x53, 0xfa, 0x6a, 0x8e, 0xe5, 0x08, 0x11, 0xd2, 0x87, 0xd6, 0x4c, 0x0b, 0x8f, 0x63, 0xfb, 0x87,
	0x8d, 0x4c, 0xea, 0x47, 0x21, 0x55, 0x92, 0xbe, 0x46, 0xdd, 0xfa, 0x54, 0x5d, 0x27, 0x63, 0xfb,
	0x05, 0x4a, 0x3e, 0x43, 0xf3, 0x92, 0x23, 0x8e, 0x9d, 0xa1, 0xdb, 0x28, 0xac, 0xcf, 0x39, 0xe5,
	0xd8, 0x19, 0x72, 0x0c, 0x8f, 0x2e, 0x77, 0xb1, 0xc4, 0x4a, 0x45, 0xdf, 0xe0, 0x1c, 0x36, 0xe7,
	0x0b, 0xbb, 0x56, 0x2a, 0xb2, 0x07, 0xf5, 0x99, 0x52, 0x31, 0x54, 0xe2, 0x37, 0x7d, 0x8b, 0x0f,
	0xb7, 0x3c, 0xd5, 0xb5, 0x9f, 0x11, 0x64, 0xe7, 0xe2, 0xd0, 0xe5, 0xaf, 0xbe, 0xb8, 0xfe, 0x1d,
	0x34, 0xd0, 0xc9, 0x09, 0xc8, 0xef, 0xfe, 0x2b, 0xac, 0x57, 0xf3, 0x27, 0xde, 0x72, 0x29, 0x78,
	0x48, 0x59, 0x14, 0xf3, 0x41, 0xa1, 0xd9, 0x45, 0xcd, 0x6a, 0x59, 0xb3, 0x57, 0x80, 0x1f, 0x63,
	0x3e, 0xc8, 0x6d, 0x07, 0xb0, 0x56, 0xb5, 0x25, 0x5c, 0xb0, 0x44, 0x87, 0x84, 0xa7, 0x62, 0xc8,
	0xb8, 0xc0, 0xb9, 0x7a, 0x87, 0xae, 0x95, 0xb2, 0xab, 0xcb, 0x45, 0x37, 0xa7, 0x3a, 0x08, 0x9d,
	0x2c, 0xe0, 0xe7, 0x6a, 0xe3, 0x7f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x99, 0x1e, 0x52, 0xb7, 0xd0,
	0x04, 0x00, 0x00,
}
