/*
Copyright 2019 Cisco Systems

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pifib_show_entry.proto

package cisco_ios_xr_lpts_pre_ifib_oper_lpts_pifib_nodes_node_type_values_type_value_entry

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type PifibShowEntry_KEYS struct {
	NodeName             string   `protobuf:"bytes,1,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	PifibType            string   `protobuf:"bytes,2,opt,name=pifib_type,json=pifibType,proto3" json:"pifib_type,omitempty"`
	Entry                string   `protobuf:"bytes,3,opt,name=entry,proto3" json:"entry,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PifibShowEntry_KEYS) Reset()         { *m = PifibShowEntry_KEYS{} }
func (m *PifibShowEntry_KEYS) String() string { return proto.CompactTextString(m) }
func (*PifibShowEntry_KEYS) ProtoMessage()    {}
func (*PifibShowEntry_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_c8ab3048370df79a, []int{0}
}

func (m *PifibShowEntry_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PifibShowEntry_KEYS.Unmarshal(m, b)
}
func (m *PifibShowEntry_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PifibShowEntry_KEYS.Marshal(b, m, deterministic)
}
func (m *PifibShowEntry_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PifibShowEntry_KEYS.Merge(m, src)
}
func (m *PifibShowEntry_KEYS) XXX_Size() int {
	return xxx_messageInfo_PifibShowEntry_KEYS.Size(m)
}
func (m *PifibShowEntry_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_PifibShowEntry_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_PifibShowEntry_KEYS proto.InternalMessageInfo

func (m *PifibShowEntry_KEYS) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

func (m *PifibShowEntry_KEYS) GetPifibType() string {
	if m != nil {
		return m.PifibType
	}
	return ""
}

func (m *PifibShowEntry_KEYS) GetEntry() string {
	if m != nil {
		return m.Entry
	}
	return ""
}

type PifibShowEntry struct {
	VrfName              string   `protobuf:"bytes,50,opt,name=vrf_name,json=vrfName,proto3" json:"vrf_name,omitempty"`
	Vid                  uint32   `protobuf:"varint,51,opt,name=vid,proto3" json:"vid,omitempty"`
	L3Protocol           uint32   `protobuf:"varint,52,opt,name=l3protocol,proto3" json:"l3protocol,omitempty"`
	L4Protocol           uint32   `protobuf:"varint,53,opt,name=l4protocol,proto3" json:"l4protocol,omitempty"`
	IntfName             string   `protobuf:"bytes,54,opt,name=intf_name,json=intfName,proto3" json:"intf_name,omitempty"`
	IntfHandle           uint32   `protobuf:"varint,55,opt,name=intf_handle,json=intfHandle,proto3" json:"intf_handle,omitempty"`
	DestinationAddr      string   `protobuf:"bytes,56,opt,name=destination_addr,json=destinationAddr,proto3" json:"destination_addr,omitempty"`
	SourceAddr           string   `protobuf:"bytes,57,opt,name=source_addr,json=sourceAddr,proto3" json:"source_addr,omitempty"`
	DestinationType      string   `protobuf:"bytes,58,opt,name=destination_type,json=destinationType,proto3" json:"destination_type,omitempty"`
	DestinationValue     string   `protobuf:"bytes,59,opt,name=destination_value,json=destinationValue,proto3" json:"destination_value,omitempty"`
	SourcePort           string   `protobuf:"bytes,60,opt,name=source_port,json=sourcePort,proto3" json:"source_port,omitempty"`
	IsFrag               uint32   `protobuf:"varint,61,opt,name=is_frag,json=isFrag,proto3" json:"is_frag,omitempty"`
	IsSyn                uint32   `protobuf:"varint,62,opt,name=is_syn,json=isSyn,proto3" json:"is_syn,omitempty"`
	Opcode               string   `protobuf:"bytes,63,opt,name=opcode,proto3" json:"opcode,omitempty"`
	FlowType             string   `protobuf:"bytes,64,opt,name=flow_type,json=flowType,proto3" json:"flow_type,omitempty"`
	ListenerTag          string   `protobuf:"bytes,65,opt,name=listener_tag,json=listenerTag,proto3" json:"listener_tag,omitempty"`
	LocalFlag            uint32   `protobuf:"varint,66,opt,name=local_flag,json=localFlag,proto3" json:"local_flag,omitempty"`
	IsFgid               uint32   `protobuf:"varint,67,opt,name=is_fgid,json=isFgid,proto3" json:"is_fgid,omitempty"`
	DeliverListShort     string   `protobuf:"bytes,68,opt,name=deliver_list_short,json=deliverListShort,proto3" json:"deliver_list_short,omitempty"`
	DeliverListLong      string   `protobuf:"bytes,69,opt,name=deliver_list_long,json=deliverListLong,proto3" json:"deliver_list_long,omitempty"`
	MinTtl               uint32   `protobuf:"varint,70,opt,name=min_ttl,json=minTtl,proto3" json:"min_ttl,omitempty"`
	Accepts              uint64   `protobuf:"varint,71,opt,name=accepts,proto3" json:"accepts,omitempty"`
	Drops                uint64   `protobuf:"varint,72,opt,name=drops,proto3" json:"drops,omitempty"`
	Stale                uint32   `protobuf:"varint,73,opt,name=stale,proto3" json:"stale,omitempty"`
	PifibType            uint32   `protobuf:"varint,74,opt,name=pifib_type,json=pifibType,proto3" json:"pifib_type,omitempty"`
	PifibProgramTime     string   `protobuf:"bytes,75,opt,name=pifib_program_time,json=pifibProgramTime,proto3" json:"pifib_program_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PifibShowEntry) Reset()         { *m = PifibShowEntry{} }
func (m *PifibShowEntry) String() string { return proto.CompactTextString(m) }
func (*PifibShowEntry) ProtoMessage()    {}
func (*PifibShowEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_c8ab3048370df79a, []int{1}
}

func (m *PifibShowEntry) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PifibShowEntry.Unmarshal(m, b)
}
func (m *PifibShowEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PifibShowEntry.Marshal(b, m, deterministic)
}
func (m *PifibShowEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PifibShowEntry.Merge(m, src)
}
func (m *PifibShowEntry) XXX_Size() int {
	return xxx_messageInfo_PifibShowEntry.Size(m)
}
func (m *PifibShowEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_PifibShowEntry.DiscardUnknown(m)
}

var xxx_messageInfo_PifibShowEntry proto.InternalMessageInfo

func (m *PifibShowEntry) GetVrfName() string {
	if m != nil {
		return m.VrfName
	}
	return ""
}

func (m *PifibShowEntry) GetVid() uint32 {
	if m != nil {
		return m.Vid
	}
	return 0
}

func (m *PifibShowEntry) GetL3Protocol() uint32 {
	if m != nil {
		return m.L3Protocol
	}
	return 0
}

func (m *PifibShowEntry) GetL4Protocol() uint32 {
	if m != nil {
		return m.L4Protocol
	}
	return 0
}

func (m *PifibShowEntry) GetIntfName() string {
	if m != nil {
		return m.IntfName
	}
	return ""
}

func (m *PifibShowEntry) GetIntfHandle() uint32 {
	if m != nil {
		return m.IntfHandle
	}
	return 0
}

func (m *PifibShowEntry) GetDestinationAddr() string {
	if m != nil {
		return m.DestinationAddr
	}
	return ""
}

func (m *PifibShowEntry) GetSourceAddr() string {
	if m != nil {
		return m.SourceAddr
	}
	return ""
}

func (m *PifibShowEntry) GetDestinationType() string {
	if m != nil {
		return m.DestinationType
	}
	return ""
}

func (m *PifibShowEntry) GetDestinationValue() string {
	if m != nil {
		return m.DestinationValue
	}
	return ""
}

func (m *PifibShowEntry) GetSourcePort() string {
	if m != nil {
		return m.SourcePort
	}
	return ""
}

func (m *PifibShowEntry) GetIsFrag() uint32 {
	if m != nil {
		return m.IsFrag
	}
	return 0
}

func (m *PifibShowEntry) GetIsSyn() uint32 {
	if m != nil {
		return m.IsSyn
	}
	return 0
}

func (m *PifibShowEntry) GetOpcode() string {
	if m != nil {
		return m.Opcode
	}
	return ""
}

func (m *PifibShowEntry) GetFlowType() string {
	if m != nil {
		return m.FlowType
	}
	return ""
}

func (m *PifibShowEntry) GetListenerTag() string {
	if m != nil {
		return m.ListenerTag
	}
	return ""
}

func (m *PifibShowEntry) GetLocalFlag() uint32 {
	if m != nil {
		return m.LocalFlag
	}
	return 0
}

func (m *PifibShowEntry) GetIsFgid() uint32 {
	if m != nil {
		return m.IsFgid
	}
	return 0
}

func (m *PifibShowEntry) GetDeliverListShort() string {
	if m != nil {
		return m.DeliverListShort
	}
	return ""
}

func (m *PifibShowEntry) GetDeliverListLong() string {
	if m != nil {
		return m.DeliverListLong
	}
	return ""
}

func (m *PifibShowEntry) GetMinTtl() uint32 {
	if m != nil {
		return m.MinTtl
	}
	return 0
}

func (m *PifibShowEntry) GetAccepts() uint64 {
	if m != nil {
		return m.Accepts
	}
	return 0
}

func (m *PifibShowEntry) GetDrops() uint64 {
	if m != nil {
		return m.Drops
	}
	return 0
}

func (m *PifibShowEntry) GetStale() uint32 {
	if m != nil {
		return m.Stale
	}
	return 0
}

func (m *PifibShowEntry) GetPifibType() uint32 {
	if m != nil {
		return m.PifibType
	}
	return 0
}

func (m *PifibShowEntry) GetPifibProgramTime() string {
	if m != nil {
		return m.PifibProgramTime
	}
	return ""
}

func init() {
	proto.RegisterType((*PifibShowEntry_KEYS)(nil), "cisco_ios_xr_lpts_pre_ifib_oper.lpts_pifib.nodes.node.type_values.type_value.entry.pifib_show_entry_KEYS")
	proto.RegisterType((*PifibShowEntry)(nil), "cisco_ios_xr_lpts_pre_ifib_oper.lpts_pifib.nodes.node.type_values.type_value.entry.pifib_show_entry")
}

func init() { proto.RegisterFile("pifib_show_entry.proto", fileDescriptor_c8ab3048370df79a) }

var fileDescriptor_c8ab3048370df79a = []byte{
	// 573 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x93, 0xdd, 0x6e, 0x13, 0x31,
	0x10, 0x85, 0x15, 0x4a, 0xd3, 0xc6, 0x05, 0x51, 0x2c, 0x5a, 0x06, 0x21, 0xa0, 0xf4, 0x2a, 0x40,
	0x95, 0x0b, 0x52, 0xfe, 0x7f, 0x0b, 0x34, 0x14, 0x5a, 0xa1, 0x2a, 0x89, 0x90, 0xb8, 0xb2, 0xdc,
	0xb5, 0x77, 0x6b, 0xc9, 0x6b, 0x5b, 0xb6, 0x9b, 0x92, 0x37, 0xe4, 0xb1, 0x90, 0xc7, 0x49, 0x58,
	0x85, 0x9b, 0x68, 0xe7, 0x3b, 0xb3, 0xe7, 0x78, 0x26, 0x5e, 0xb2, 0xed, 0x54, 0xa9, 0xce, 0x58,
	0x38, 0xb7, 0x97, 0x4c, 0x9a, 0xe8, 0xa7, 0x3d, 0xe7, 0x6d, 0xb4, 0x74, 0x58, 0xa8, 0x50, 0x58,
	0xa6, 0x6c, 0x60, 0xbf, 0x3d, 0xd3, 0x2e, 0x06, 0xe6, 0xbc, 0x64, 0xd8, 0x6c, 0x9d, 0xf4, 0xbd,
	0x8c, 0x52, 0xdd, 0x33, 0x56, 0xc8, 0x80, 0xbf, 0xbd, 0x38, 0x75, 0x92, 0x4d, 0xb8, 0xbe, 0x90,
	0xa1, 0xf1, 0xdc, 0x43, 0xe7, 0x5d, 0x45, 0xb6, 0x96, 0xd3, 0xd8, 0xf1, 0xe1, 0xaf, 0x11, 0xbd,
	0x4b, 0x3a, 0xe9, 0x6d, 0x66, 0x78, 0x2d, 0xa1, 0xb5, 0xd3, 0xea, 0x76, 0x86, 0xeb, 0x09, 0xfc,
	0xe0, 0xb5, 0xa4, 0xf7, 0x08, 0xc9, 0x6f, 0x25, 0x3f, 0xb8, 0x82, 0x6a, 0x07, 0xc9, 0x78, 0xea,
	0x24, 0xbd, 0x45, 0x56, 0xd1, 0x09, 0x56, 0x50, 0xc9, 0xc5, 0xee, 0x9f, 0x36, 0xd9, 0x5c, 0xce,
	0xa2, 0x77, 0xc8, 0xfa, 0xc4, 0x97, 0x39, 0xe5, 0x29, 0x76, 0xaf, 0x4d, 0x7c, 0x89, 0x21, 0x9b,
	0x64, 0x65, 0xa2, 0x04, 0xf4, 0x77, 0x5a, 0xdd, 0xeb, 0xc3, 0xf4, 0x48, 0xef, 0x13, 0xa2, 0xfb,
	0xb8, 0x8b, 0xc2, 0x6a, 0xd8, 0x47, 0xa1, 0x41, 0x50, 0xdf, 0x5f, 0xe8, 0xcf, 0x66, 0xfa, 0x82,
	0xa4, 0x99, 0x94, 0x89, 0xb3, 0xb4, 0xe7, 0x79, 0xa6, 0x04, 0x30, 0xee, 0x01, 0xd9, 0x40, 0xf1,
	0x9c, 0x1b, 0xa1, 0x25, 0xbc, 0xc8, 0x6f, 0x27, 0x74, 0x84, 0x84, 0x3e, 0x22, 0x9b, 0x42, 0x86,
	0xa8, 0x0c, 0x8f, 0xca, 0x1a, 0xc6, 0x85, 0xf0, 0xf0, 0x12, 0x4d, 0x6e, 0x34, 0xf8, 0x81, 0x10,
	0x3e, 0x79, 0x05, 0x7b, 0xe1, 0x0b, 0x99, 0xbb, 0x5e, 0x61, 0x17, 0xc9, 0x08, 0x1b, 0x96, 0xbc,
	0x70, 0x8d, 0xaf, 0xff, 0xf3, 0xc2, 0x65, 0x3e, 0x21, 0x37, 0x9b, 0xad, 0xf8, 0xe7, 0xc1, 0x1b,
	0xec, 0x6d, 0x7a, 0xfc, 0x4c, 0xbc, 0x11, 0xec, 0xac, 0x8f, 0xf0, 0xb6, 0x19, 0x7c, 0x6a, 0x7d,
	0xa4, 0xb7, 0xc9, 0x9a, 0x0a, 0xac, 0xf4, 0xbc, 0x82, 0x77, 0x38, 0x61, 0x5b, 0x85, 0x81, 0xe7,
	0x15, 0xdd, 0x22, 0x6d, 0x15, 0x58, 0x98, 0x1a, 0x78, 0x8f, 0x7c, 0x55, 0x85, 0xd1, 0xd4, 0xd0,
	0x6d, 0xd2, 0xb6, 0xae, 0xb0, 0x42, 0xc2, 0x07, 0xf4, 0x9a, 0x55, 0x69, 0x95, 0xa5, 0xb6, 0x97,
	0xf9, 0xe4, 0x1f, 0xf3, 0x2a, 0x13, 0xc0, 0x23, 0x3f, 0x24, 0xd7, 0xb4, 0x0a, 0x51, 0x1a, 0xe9,
	0x59, 0xe4, 0x15, 0x1c, 0xa0, 0xbe, 0x31, 0x67, 0x63, 0x5e, 0xa5, 0x1b, 0xa4, 0x6d, 0xc1, 0x35,
	0x2b, 0x35, 0xaf, 0xe0, 0x13, 0x46, 0x76, 0x90, 0x0c, 0x34, 0xaf, 0xe6, 0xc7, 0xac, 0x94, 0x80,
	0xcf, 0x8b, 0x63, 0x56, 0x4a, 0xd0, 0x3d, 0x42, 0x85, 0xd4, 0x6a, 0x22, 0x3d, 0x4b, 0x76, 0xe9,
	0x2a, 0xf9, 0x08, 0x5f, 0xe6, 0xeb, 0x40, 0xe5, 0x44, 0x85, 0x38, 0x4a, 0x9c, 0x3e, 0x4e, 0xbb,
	0x6b, 0x74, 0x6b, 0x6b, 0x2a, 0x38, 0x9c, 0xef, 0x79, 0xd1, 0x7c, 0x62, 0x0d, 0x46, 0xd6, 0xca,
	0xb0, 0x18, 0x35, 0x0c, 0x72, 0x64, 0xad, 0xcc, 0x38, 0x6a, 0x0a, 0x64, 0x8d, 0x17, 0x85, 0x74,
	0x31, 0xc0, 0xd7, 0x9d, 0x56, 0xf7, 0xea, 0x70, 0x5e, 0xa6, 0x7b, 0x2e, 0xbc, 0x75, 0x01, 0x8e,
	0x90, 0xe7, 0x22, 0xd1, 0x10, 0xb9, 0x96, 0xf0, 0x2d, 0x2f, 0x12, 0x8b, 0xa5, 0x4f, 0xe6, 0x7b,
	0x1e, 0xf8, 0xdf, 0x27, 0xb3, 0x47, 0x68, 0x96, 0x9d, 0xb7, 0x95, 0xe7, 0x35, 0x8b, 0xaa, 0x96,
	0x70, 0x9c, 0xe7, 0x42, 0xe5, 0x34, 0x0b, 0x63, 0x55, 0xcb, 0xb3, 0x36, 0x5e, 0xe9, 0xfe, 0xdf,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x0e, 0x0a, 0xf7, 0xed, 0x2a, 0x04, 0x00, 0x00,
}
