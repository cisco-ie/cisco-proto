/*
Copyright 2019 Cisco Systems

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pifib_dynflows_data.proto

package cisco_ios_xr_lpts_pre_ifib_oper_lpts_pifib_nodes_node_dynamic_flows_stats

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type PifibDynflowsData_KEYS struct {
	NodeName             string   `protobuf:"bytes,1,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PifibDynflowsData_KEYS) Reset()         { *m = PifibDynflowsData_KEYS{} }
func (m *PifibDynflowsData_KEYS) String() string { return proto.CompactTextString(m) }
func (*PifibDynflowsData_KEYS) ProtoMessage()    {}
func (*PifibDynflowsData_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5c0a51b66dd6ff5, []int{0}
}

func (m *PifibDynflowsData_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PifibDynflowsData_KEYS.Unmarshal(m, b)
}
func (m *PifibDynflowsData_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PifibDynflowsData_KEYS.Marshal(b, m, deterministic)
}
func (m *PifibDynflowsData_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PifibDynflowsData_KEYS.Merge(m, src)
}
func (m *PifibDynflowsData_KEYS) XXX_Size() int {
	return xxx_messageInfo_PifibDynflowsData_KEYS.Size(m)
}
func (m *PifibDynflowsData_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_PifibDynflowsData_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_PifibDynflowsData_KEYS proto.InternalMessageInfo

func (m *PifibDynflowsData_KEYS) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

type DynflowsFlowEntry struct {
	FlowName               string   `protobuf:"bytes,1,opt,name=flow_name,json=flowName,proto3" json:"flow_name,omitempty"`
	Configurable           bool     `protobuf:"varint,2,opt,name=configurable,proto3" json:"configurable,omitempty"`
	Configured             bool     `protobuf:"varint,3,opt,name=configured,proto3" json:"configured,omitempty"`
	DefaultMax             uint32   `protobuf:"varint,4,opt,name=default_max,json=defaultMax,proto3" json:"default_max,omitempty"`
	ConfiguredMax          string   `protobuf:"bytes,5,opt,name=configured_max,json=configuredMax,proto3" json:"configured_max,omitempty"`
	ActiveMax              uint32   `protobuf:"varint,6,opt,name=active_max,json=activeMax,proto3" json:"active_max,omitempty"`
	HardwareCount          uint32   `protobuf:"varint,7,opt,name=hardware_count,json=hardwareCount,proto3" json:"hardware_count,omitempty"`
	SoftwareCount          uint32   `protobuf:"varint,8,opt,name=software_count,json=softwareCount,proto3" json:"software_count,omitempty"`
	PendingSoftwareEntries bool     `protobuf:"varint,9,opt,name=pending_software_entries,json=pendingSoftwareEntries,proto3" json:"pending_software_entries,omitempty"`
	XXX_NoUnkeyedLiteral   struct{} `json:"-"`
	XXX_unrecognized       []byte   `json:"-"`
	XXX_sizecache          int32    `json:"-"`
}

func (m *DynflowsFlowEntry) Reset()         { *m = DynflowsFlowEntry{} }
func (m *DynflowsFlowEntry) String() string { return proto.CompactTextString(m) }
func (*DynflowsFlowEntry) ProtoMessage()    {}
func (*DynflowsFlowEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5c0a51b66dd6ff5, []int{1}
}

func (m *DynflowsFlowEntry) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DynflowsFlowEntry.Unmarshal(m, b)
}
func (m *DynflowsFlowEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DynflowsFlowEntry.Marshal(b, m, deterministic)
}
func (m *DynflowsFlowEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DynflowsFlowEntry.Merge(m, src)
}
func (m *DynflowsFlowEntry) XXX_Size() int {
	return xxx_messageInfo_DynflowsFlowEntry.Size(m)
}
func (m *DynflowsFlowEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_DynflowsFlowEntry.DiscardUnknown(m)
}

var xxx_messageInfo_DynflowsFlowEntry proto.InternalMessageInfo

func (m *DynflowsFlowEntry) GetFlowName() string {
	if m != nil {
		return m.FlowName
	}
	return ""
}

func (m *DynflowsFlowEntry) GetConfigurable() bool {
	if m != nil {
		return m.Configurable
	}
	return false
}

func (m *DynflowsFlowEntry) GetConfigured() bool {
	if m != nil {
		return m.Configured
	}
	return false
}

func (m *DynflowsFlowEntry) GetDefaultMax() uint32 {
	if m != nil {
		return m.DefaultMax
	}
	return 0
}

func (m *DynflowsFlowEntry) GetConfiguredMax() string {
	if m != nil {
		return m.ConfiguredMax
	}
	return ""
}

func (m *DynflowsFlowEntry) GetActiveMax() uint32 {
	if m != nil {
		return m.ActiveMax
	}
	return 0
}

func (m *DynflowsFlowEntry) GetHardwareCount() uint32 {
	if m != nil {
		return m.HardwareCount
	}
	return 0
}

func (m *DynflowsFlowEntry) GetSoftwareCount() uint32 {
	if m != nil {
		return m.SoftwareCount
	}
	return 0
}

func (m *DynflowsFlowEntry) GetPendingSoftwareEntries() bool {
	if m != nil {
		return m.PendingSoftwareEntries
	}
	return false
}

type PifibDynflowsData struct {
	DynamicFlowsEnabled     bool                 `protobuf:"varint,50,opt,name=dynamic_flows_enabled,json=dynamicFlowsEnabled,proto3" json:"dynamic_flows_enabled,omitempty"`
	PlatformSupportedMax    uint32               `protobuf:"varint,51,opt,name=platform_supported_max,json=platformSupportedMax,proto3" json:"platform_supported_max,omitempty"`
	PlatformConfiguredMax   uint32               `protobuf:"varint,52,opt,name=platform_configured_max,json=platformConfiguredMax,proto3" json:"platform_configured_max,omitempty"`
	PlatformTotalConfigured uint32               `protobuf:"varint,53,opt,name=platform_total_configured,json=platformTotalConfigured,proto3" json:"platform_total_configured,omitempty"`
	TotalHwEntries          uint32               `protobuf:"varint,54,opt,name=total_hw_entries,json=totalHwEntries,proto3" json:"total_hw_entries,omitempty"`
	TotalSwEntries          uint32               `protobuf:"varint,55,opt,name=total_sw_entries,json=totalSwEntries,proto3" json:"total_sw_entries,omitempty"`
	Flow                    []*DynflowsFlowEntry `protobuf:"bytes,56,rep,name=flow,proto3" json:"flow,omitempty"`
	XXX_NoUnkeyedLiteral    struct{}             `json:"-"`
	XXX_unrecognized        []byte               `json:"-"`
	XXX_sizecache           int32                `json:"-"`
}

func (m *PifibDynflowsData) Reset()         { *m = PifibDynflowsData{} }
func (m *PifibDynflowsData) String() string { return proto.CompactTextString(m) }
func (*PifibDynflowsData) ProtoMessage()    {}
func (*PifibDynflowsData) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5c0a51b66dd6ff5, []int{2}
}

func (m *PifibDynflowsData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PifibDynflowsData.Unmarshal(m, b)
}
func (m *PifibDynflowsData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PifibDynflowsData.Marshal(b, m, deterministic)
}
func (m *PifibDynflowsData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PifibDynflowsData.Merge(m, src)
}
func (m *PifibDynflowsData) XXX_Size() int {
	return xxx_messageInfo_PifibDynflowsData.Size(m)
}
func (m *PifibDynflowsData) XXX_DiscardUnknown() {
	xxx_messageInfo_PifibDynflowsData.DiscardUnknown(m)
}

var xxx_messageInfo_PifibDynflowsData proto.InternalMessageInfo

func (m *PifibDynflowsData) GetDynamicFlowsEnabled() bool {
	if m != nil {
		return m.DynamicFlowsEnabled
	}
	return false
}

func (m *PifibDynflowsData) GetPlatformSupportedMax() uint32 {
	if m != nil {
		return m.PlatformSupportedMax
	}
	return 0
}

func (m *PifibDynflowsData) GetPlatformConfiguredMax() uint32 {
	if m != nil {
		return m.PlatformConfiguredMax
	}
	return 0
}

func (m *PifibDynflowsData) GetPlatformTotalConfigured() uint32 {
	if m != nil {
		return m.PlatformTotalConfigured
	}
	return 0
}

func (m *PifibDynflowsData) GetTotalHwEntries() uint32 {
	if m != nil {
		return m.TotalHwEntries
	}
	return 0
}

func (m *PifibDynflowsData) GetTotalSwEntries() uint32 {
	if m != nil {
		return m.TotalSwEntries
	}
	return 0
}

func (m *PifibDynflowsData) GetFlow() []*DynflowsFlowEntry {
	if m != nil {
		return m.Flow
	}
	return nil
}

func init() {
	proto.RegisterType((*PifibDynflowsData_KEYS)(nil), "cisco_ios_xr_lpts_pre_ifib_oper.lpts_pifib.nodes.node.dynamic_flows_stats.pifib_dynflows_data_KEYS")
	proto.RegisterType((*DynflowsFlowEntry)(nil), "cisco_ios_xr_lpts_pre_ifib_oper.lpts_pifib.nodes.node.dynamic_flows_stats.dynflows_flow_entry")
	proto.RegisterType((*PifibDynflowsData)(nil), "cisco_ios_xr_lpts_pre_ifib_oper.lpts_pifib.nodes.node.dynamic_flows_stats.pifib_dynflows_data")
}

func init() { proto.RegisterFile("pifib_dynflows_data.proto", fileDescriptor_d5c0a51b66dd6ff5) }

var fileDescriptor_d5c0a51b66dd6ff5 = []byte{
	// 466 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x93, 0xcd, 0x6e, 0x13, 0x31,
	0x14, 0x85, 0x95, 0xa6, 0x94, 0xe4, 0x96, 0x54, 0x68, 0x42, 0x8b, 0x2b, 0x04, 0x44, 0x91, 0x90,
	0x66, 0x35, 0x8b, 0xb4, 0xb4, 0x15, 0xdb, 0x2a, 0x08, 0x84, 0x60, 0x91, 0xb0, 0x61, 0x83, 0xe5,
	0x8c, 0x3d, 0xad, 0xa5, 0x19, 0xdb, 0xb2, 0x1d, 0x92, 0x3c, 0x1b, 0xcf, 0xc3, 0x7b, 0x20, 0xdf,
	0xf9, 0x0d, 0xca, 0x92, 0xcd, 0x48, 0x3e, 0xe7, 0x3b, 0xd7, 0x9e, 0x63, 0x19, 0x2e, 0x8d, 0xcc,
	0xe4, 0x8a, 0xf2, 0x9d, 0xca, 0x72, 0xbd, 0x71, 0x94, 0x33, 0xcf, 0x12, 0x63, 0xb5, 0xd7, 0xd1,
	0xe7, 0x54, 0xba, 0x54, 0x53, 0xa9, 0x1d, 0xdd, 0x5a, 0x9a, 0x1b, 0xef, 0xa8, 0xb1, 0x82, 0x22,
	0xaf, 0x8d, 0xb0, 0x49, 0x29, 0x85, 0x75, 0xa2, 0x34, 0x17, 0x0e, 0xbf, 0x09, 0xdf, 0x29, 0x56,
	0xc8, 0x94, 0x96, 0xf3, 0x9c, 0x67, 0xde, 0x4d, 0x6f, 0x81, 0x1c, 0xd8, 0x87, 0x7e, 0x99, 0xff,
	0x58, 0x46, 0xaf, 0x60, 0x18, 0x72, 0x54, 0xb1, 0x42, 0x90, 0xde, 0xa4, 0x17, 0x0f, 0x17, 0x83,
	0x20, 0x7c, 0x63, 0x85, 0x98, 0xfe, 0x39, 0x82, 0x71, 0x93, 0x09, 0x5f, 0x2a, 0x94, 0xb7, 0xbb,
	0x10, 0xc2, 0x55, 0x37, 0x14, 0x84, 0x10, 0x8a, 0xa6, 0xf0, 0x2c, 0xd5, 0x2a, 0x93, 0x0f, 0x6b,
	0xcb, 0x56, 0xb9, 0x20, 0x47, 0x93, 0x5e, 0x3c, 0x58, 0xec, 0x69, 0xd1, 0x1b, 0x80, 0x7a, 0x2d,
	0x38, 0xe9, 0x23, 0xd1, 0x51, 0xa2, 0xb7, 0x70, 0xca, 0x45, 0xc6, 0xd6, 0xb9, 0xa7, 0x05, 0xdb,
	0x92, 0xe3, 0x49, 0x2f, 0x1e, 0x2d, 0xa0, 0x92, 0xbe, 0xb2, 0x6d, 0xf4, 0x0e, 0xce, 0x5a, 0x1c,
	0x99, 0x27, 0x78, 0x8c, 0x51, 0xab, 0x06, 0xec, 0x35, 0x00, 0x4b, 0xbd, 0xfc, 0x25, 0x10, 0x39,
	0xc1, 0x31, 0xc3, 0x52, 0xa9, 0xa6, 0x3c, 0x32, 0xcb, 0x37, 0xcc, 0x0a, 0x9a, 0xea, 0xb5, 0xf2,
	0xe4, 0x29, 0x22, 0xa3, 0x5a, 0xbd, 0x0f, 0x62, 0xc0, 0x9c, 0xce, 0x7c, 0x07, 0x1b, 0x94, 0x58,
	0xad, 0x96, 0xd8, 0x1d, 0x10, 0x23, 0x14, 0x97, 0xea, 0x81, 0x36, 0x78, 0xe8, 0x4b, 0x0a, 0x47,
	0x86, 0xf8, 0x8b, 0x17, 0x95, 0xbf, 0xac, 0xec, 0x79, 0xe9, 0x4e, 0x7f, 0xf7, 0x61, 0x7c, 0xe0,
	0x86, 0xa2, 0x19, 0x9c, 0xef, 0xdf, 0xa7, 0x50, 0xa1, 0x3e, 0x4e, 0x66, 0x38, 0x6e, 0x5c, 0x99,
	0x1f, 0x83, 0x37, 0x2f, 0xad, 0xe8, 0x1a, 0x2e, 0x4c, 0xce, 0x7c, 0xa6, 0x6d, 0x41, 0xdd, 0xda,
	0x18, 0x6d, 0x7d, 0xd5, 0xd0, 0x15, 0x1e, 0xfa, 0x45, 0xed, 0x2e, 0x6b, 0x33, 0x34, 0x71, 0x03,
	0x2f, 0x9b, 0xd4, 0x3f, 0xc5, 0x5e, 0x63, 0xec, 0xbc, 0xb6, 0xef, 0xf7, 0x0a, 0xfe, 0x00, 0x97,
	0x4d, 0xce, 0x6b, 0xcf, 0xf2, 0x4e, 0x9a, 0xbc, 0xc7, 0x64, 0x33, 0xf8, 0x7b, 0xf0, 0xdb, 0x78,
	0x14, 0xc3, 0xf3, 0x32, 0xf2, 0xb8, 0x69, 0x7a, 0xba, 0xc1, 0xc8, 0x19, 0xea, 0x9f, 0x36, 0x55,
	0x3f, 0x2d, 0xe9, 0x5a, 0xf2, 0xb6, 0x43, 0x2e, 0x1b, 0xd2, 0xc2, 0x71, 0x68, 0x8a, 0xdc, 0x4d,
	0xfa, 0xf1, 0xe9, 0xec, 0x67, 0xf2, 0xdf, 0x1e, 0x51, 0x72, 0xe0, 0x1d, 0x2c, 0x70, 0xaf, 0xd5,
	0x09, 0x3e, 0xd8, 0xab, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x9b, 0xc0, 0xe0, 0xfc, 0xcd, 0x03,
	0x00, 0x00,
}
