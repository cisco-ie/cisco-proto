/*
Copyright 2019 Cisco Systems

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ipv4_acl_edm_oor_detail.proto

package cisco_ios_xr_ipv4_acl_oper_ipv4_acl_and_prefix_list_oor_prefix_list_summary_details

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Ipv4AclEdmOorDetail_KEYS struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Ipv4AclEdmOorDetail_KEYS) Reset()         { *m = Ipv4AclEdmOorDetail_KEYS{} }
func (m *Ipv4AclEdmOorDetail_KEYS) String() string { return proto.CompactTextString(m) }
func (*Ipv4AclEdmOorDetail_KEYS) ProtoMessage()    {}
func (*Ipv4AclEdmOorDetail_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_88035edc154e8370, []int{0}
}

func (m *Ipv4AclEdmOorDetail_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Ipv4AclEdmOorDetail_KEYS.Unmarshal(m, b)
}
func (m *Ipv4AclEdmOorDetail_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Ipv4AclEdmOorDetail_KEYS.Marshal(b, m, deterministic)
}
func (m *Ipv4AclEdmOorDetail_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ipv4AclEdmOorDetail_KEYS.Merge(m, src)
}
func (m *Ipv4AclEdmOorDetail_KEYS) XXX_Size() int {
	return xxx_messageInfo_Ipv4AclEdmOorDetail_KEYS.Size(m)
}
func (m *Ipv4AclEdmOorDetail_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_Ipv4AclEdmOorDetail_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_Ipv4AclEdmOorDetail_KEYS proto.InternalMessageInfo

type Ipv4AclEdmOorDetail struct {
	DefaultMaxAcLs             uint32   `protobuf:"varint,50,opt,name=default_max_ac_ls,json=defaultMaxAcLs,proto3" json:"default_max_ac_ls,omitempty"`
	DefaultMaxAcEs             uint32   `protobuf:"varint,51,opt,name=default_max_ac_es,json=defaultMaxAcEs,proto3" json:"default_max_ac_es,omitempty"`
	CurrentConfiguredAcLs      uint32   `protobuf:"varint,52,opt,name=current_configured_ac_ls,json=currentConfiguredAcLs,proto3" json:"current_configured_ac_ls,omitempty"`
	CurrentConfiguredAcEs      uint32   `protobuf:"varint,53,opt,name=current_configured_ac_es,json=currentConfiguredAcEs,proto3" json:"current_configured_ac_es,omitempty"`
	CurrentMaxConfigurableAcLs uint32   `protobuf:"varint,54,opt,name=current_max_configurable_ac_ls,json=currentMaxConfigurableAcLs,proto3" json:"current_max_configurable_ac_ls,omitempty"`
	CurrentMaxConfigurableAcEs uint32   `protobuf:"varint,55,opt,name=current_max_configurable_ac_es,json=currentMaxConfigurableAcEs,proto3" json:"current_max_configurable_ac_es,omitempty"`
	MaxConfigurableAcLs        uint32   `protobuf:"varint,56,opt,name=max_configurable_ac_ls,json=maxConfigurableAcLs,proto3" json:"max_configurable_ac_ls,omitempty"`
	MaxConfigurableAcEs        uint32   `protobuf:"varint,57,opt,name=max_configurable_ac_es,json=maxConfigurableAcEs,proto3" json:"max_configurable_ac_es,omitempty"`
	XXX_NoUnkeyedLiteral       struct{} `json:"-"`
	XXX_unrecognized           []byte   `json:"-"`
	XXX_sizecache              int32    `json:"-"`
}

func (m *Ipv4AclEdmOorDetail) Reset()         { *m = Ipv4AclEdmOorDetail{} }
func (m *Ipv4AclEdmOorDetail) String() string { return proto.CompactTextString(m) }
func (*Ipv4AclEdmOorDetail) ProtoMessage()    {}
func (*Ipv4AclEdmOorDetail) Descriptor() ([]byte, []int) {
	return fileDescriptor_88035edc154e8370, []int{1}
}

func (m *Ipv4AclEdmOorDetail) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Ipv4AclEdmOorDetail.Unmarshal(m, b)
}
func (m *Ipv4AclEdmOorDetail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Ipv4AclEdmOorDetail.Marshal(b, m, deterministic)
}
func (m *Ipv4AclEdmOorDetail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ipv4AclEdmOorDetail.Merge(m, src)
}
func (m *Ipv4AclEdmOorDetail) XXX_Size() int {
	return xxx_messageInfo_Ipv4AclEdmOorDetail.Size(m)
}
func (m *Ipv4AclEdmOorDetail) XXX_DiscardUnknown() {
	xxx_messageInfo_Ipv4AclEdmOorDetail.DiscardUnknown(m)
}

var xxx_messageInfo_Ipv4AclEdmOorDetail proto.InternalMessageInfo

func (m *Ipv4AclEdmOorDetail) GetDefaultMaxAcLs() uint32 {
	if m != nil {
		return m.DefaultMaxAcLs
	}
	return 0
}

func (m *Ipv4AclEdmOorDetail) GetDefaultMaxAcEs() uint32 {
	if m != nil {
		return m.DefaultMaxAcEs
	}
	return 0
}

func (m *Ipv4AclEdmOorDetail) GetCurrentConfiguredAcLs() uint32 {
	if m != nil {
		return m.CurrentConfiguredAcLs
	}
	return 0
}

func (m *Ipv4AclEdmOorDetail) GetCurrentConfiguredAcEs() uint32 {
	if m != nil {
		return m.CurrentConfiguredAcEs
	}
	return 0
}

func (m *Ipv4AclEdmOorDetail) GetCurrentMaxConfigurableAcLs() uint32 {
	if m != nil {
		return m.CurrentMaxConfigurableAcLs
	}
	return 0
}

func (m *Ipv4AclEdmOorDetail) GetCurrentMaxConfigurableAcEs() uint32 {
	if m != nil {
		return m.CurrentMaxConfigurableAcEs
	}
	return 0
}

func (m *Ipv4AclEdmOorDetail) GetMaxConfigurableAcLs() uint32 {
	if m != nil {
		return m.MaxConfigurableAcLs
	}
	return 0
}

func (m *Ipv4AclEdmOorDetail) GetMaxConfigurableAcEs() uint32 {
	if m != nil {
		return m.MaxConfigurableAcEs
	}
	return 0
}

func init() {
	proto.RegisterType((*Ipv4AclEdmOorDetail_KEYS)(nil), "cisco_ios_xr_ipv4_acl_oper.ipv4_acl_and_prefix_list.oor.prefix_list_summary.details.ipv4_acl_edm_oor_detail_KEYS")
	proto.RegisterType((*Ipv4AclEdmOorDetail)(nil), "cisco_ios_xr_ipv4_acl_oper.ipv4_acl_and_prefix_list.oor.prefix_list_summary.details.ipv4_acl_edm_oor_detail")
}

func init() { proto.RegisterFile("ipv4_acl_edm_oor_detail.proto", fileDescriptor_88035edc154e8370) }

var fileDescriptor_88035edc154e8370 = []byte{
	// 279 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x92, 0xc1, 0x4b, 0xc3, 0x30,
	0x14, 0xc6, 0x11, 0xc1, 0x43, 0x40, 0xc1, 0x8a, 0x1a, 0x44, 0x87, 0xec, 0xa4, 0x97, 0x1e, 0xec,
	0x74, 0x7a, 0xd4, 0xd1, 0x93, 0xee, 0xe2, 0x4e, 0x9e, 0x1e, 0x59, 0xfa, 0x2a, 0x81, 0xb4, 0x29,
	0xef, 0xb5, 0x52, 0xff, 0x4e, 0xff, 0x21, 0x31, 0x66, 0x65, 0xe0, 0xe2, 0x8e, 0x8f, 0xef, 0xfb,
	0x7d, 0xbf, 0x1c, 0x22, 0x2e, 0x4c, 0xf3, 0x31, 0x01, 0xa5, 0x2d, 0x60, 0x51, 0x81, 0x73, 0x04,
	0x05, 0xb6, 0xca, 0xd8, 0xb4, 0x21, 0xd7, 0xba, 0x64, 0xa1, 0x0d, 0x6b, 0x07, 0xc6, 0x31, 0xf4,
	0x04, 0x43, 0xd7, 0x35, 0x48, 0xe9, 0x70, 0xa9, 0xba, 0x80, 0x86, 0xb0, 0x34, 0x3d, 0x58, 0xc3,
	0x6d, 0xea, 0x1c, 0xa5, 0x6b, 0x37, 0x70, 0x57, 0x55, 0x8a, 0x3e, 0xd3, 0xdf, 0x65, 0x1e, 0x8f,
	0xc4, 0x79, 0xc4, 0x0a, 0xcf, 0xf9, 0xdb, 0x62, 0xfc, 0xb5, 0x2b, 0x4e, 0x23, 0x85, 0xe4, 0x5a,
	0x1c, 0x16, 0x58, 0xaa, 0xce, 0xb6, 0x50, 0xa9, 0x1e, 0x94, 0x06, 0xcb, 0xf2, 0xe6, 0x72, 0xe7,
	0x6a, 0xff, 0xf5, 0x20, 0x04, 0x73, 0xd5, 0x3f, 0xea, 0x17, 0xde, 0x50, 0x45, 0x96, 0xd9, 0xdf,
	0x6a, 0xce, 0xc9, 0x54, 0x48, 0xdd, 0x11, 0x61, 0xdd, 0x82, 0x76, 0x75, 0x69, 0xde, 0x3b, 0xc2,
	0x22, 0x8c, 0x4f, 0x3c, 0x71, 0x1c, 0xf2, 0xd9, 0x10, 0x7b, 0x47, 0x14, 0x44, 0x96, 0xb7, 0x51,
	0x30, 0xe7, 0xe4, 0x49, 0x8c, 0x56, 0xe0, 0xcf, 0xe3, 0x56, 0xb0, 0x5a, 0x5a, 0x0c, 0xde, 0x3b,
	0x8f, 0x9f, 0x85, 0xd6, 0x5c, 0xf5, 0xb3, 0xb5, 0x8e, 0x97, 0x6f, 0xd9, 0x40, 0x96, 0xd3, 0xff,
	0x37, 0x72, 0x4e, 0x32, 0x71, 0x12, 0xf1, 0xdf, 0x7b, 0xf6, 0xa8, 0xda, 0x20, 0x8e, 0x40, 0xc8,
	0xf2, 0x21, 0x02, 0xe5, 0xbc, 0xdc, 0xf3, 0x3f, 0x2a, 0xfb, 0x0e, 0x00, 0x00, 0xff, 0xff, 0x08,
	0x8c, 0x35, 0x1a, 0x72, 0x02, 0x00, 0x00,
}
