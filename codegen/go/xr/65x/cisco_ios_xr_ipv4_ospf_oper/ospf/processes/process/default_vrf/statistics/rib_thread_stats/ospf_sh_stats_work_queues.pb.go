/*
Copyright 2019 Cisco Systems

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ospf_sh_stats_work_queues.proto

package cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_statistics_rib_thread_stats

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type OspfShStatsWorkQueues_KEYS struct {
	ProcessName          string   `protobuf:"bytes,1,opt,name=process_name,json=processName,proto3" json:"process_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OspfShStatsWorkQueues_KEYS) Reset()         { *m = OspfShStatsWorkQueues_KEYS{} }
func (m *OspfShStatsWorkQueues_KEYS) String() string { return proto.CompactTextString(m) }
func (*OspfShStatsWorkQueues_KEYS) ProtoMessage()    {}
func (*OspfShStatsWorkQueues_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_347e40f665942230, []int{0}
}

func (m *OspfShStatsWorkQueues_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OspfShStatsWorkQueues_KEYS.Unmarshal(m, b)
}
func (m *OspfShStatsWorkQueues_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OspfShStatsWorkQueues_KEYS.Marshal(b, m, deterministic)
}
func (m *OspfShStatsWorkQueues_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OspfShStatsWorkQueues_KEYS.Merge(m, src)
}
func (m *OspfShStatsWorkQueues_KEYS) XXX_Size() int {
	return xxx_messageInfo_OspfShStatsWorkQueues_KEYS.Size(m)
}
func (m *OspfShStatsWorkQueues_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_OspfShStatsWorkQueues_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_OspfShStatsWorkQueues_KEYS proto.InternalMessageInfo

func (m *OspfShStatsWorkQueues_KEYS) GetProcessName() string {
	if m != nil {
		return m.ProcessName
	}
	return ""
}

type BagTimespec struct {
	Second               uint32   `protobuf:"varint,1,opt,name=second,proto3" json:"second,omitempty"`
	Nanosecond           uint32   `protobuf:"varint,2,opt,name=nanosecond,proto3" json:"nanosecond,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BagTimespec) Reset()         { *m = BagTimespec{} }
func (m *BagTimespec) String() string { return proto.CompactTextString(m) }
func (*BagTimespec) ProtoMessage()    {}
func (*BagTimespec) Descriptor() ([]byte, []int) {
	return fileDescriptor_347e40f665942230, []int{1}
}

func (m *BagTimespec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BagTimespec.Unmarshal(m, b)
}
func (m *BagTimespec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BagTimespec.Marshal(b, m, deterministic)
}
func (m *BagTimespec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BagTimespec.Merge(m, src)
}
func (m *BagTimespec) XXX_Size() int {
	return xxx_messageInfo_BagTimespec.Size(m)
}
func (m *BagTimespec) XXX_DiscardUnknown() {
	xxx_messageInfo_BagTimespec.DiscardUnknown(m)
}

var xxx_messageInfo_BagTimespec proto.InternalMessageInfo

func (m *BagTimespec) GetSecond() uint32 {
	if m != nil {
		return m.Second
	}
	return 0
}

func (m *BagTimespec) GetNanosecond() uint32 {
	if m != nil {
		return m.Nanosecond
	}
	return 0
}

type OspfShStatsRibThread struct {
	WqThreadActive       bool         `protobuf:"varint,1,opt,name=wq_thread_active,json=wqThreadActive,proto3" json:"wq_thread_active,omitempty"`
	WqDqtime             uint64       `protobuf:"varint,2,opt,name=wq_dqtime,json=wqDqtime,proto3" json:"wq_dqtime,omitempty"`
	WqeQtime             uint64       `protobuf:"varint,3,opt,name=wqe_qtime,json=wqeQtime,proto3" json:"wqe_qtime,omitempty"`
	WqLenCur             int32        `protobuf:"zigzag32,4,opt,name=wq_len_cur,json=wqLenCur,proto3" json:"wq_len_cur,omitempty"`
	WqLenMax             int32        `protobuf:"zigzag32,5,opt,name=wq_len_max,json=wqLenMax,proto3" json:"wq_len_max,omitempty"`
	WqTotalQueued        uint32       `protobuf:"varint,6,opt,name=wq_total_queued,json=wqTotalQueued,proto3" json:"wq_total_queued,omitempty"`
	WqTotalDequeued      uint32       `protobuf:"varint,7,opt,name=wq_total_dequeued,json=wqTotalDequeued,proto3" json:"wq_total_dequeued,omitempty"`
	RibVersion           uint32       `protobuf:"varint,8,opt,name=rib_version,json=ribVersion,proto3" json:"rib_version,omitempty"`
	RibPktsSent          uint32       `protobuf:"varint,9,opt,name=rib_pkts_sent,json=ribPktsSent,proto3" json:"rib_pkts_sent,omitempty"`
	RibSignals           uint32       `protobuf:"varint,10,opt,name=rib_signals,json=ribSignals,proto3" json:"rib_signals,omitempty"`
	RibSendErrs          uint32       `protobuf:"varint,11,opt,name=rib_send_errs,json=ribSendErrs,proto3" json:"rib_send_errs,omitempty"`
	RibQueueErrs         uint32       `protobuf:"varint,12,opt,name=rib_queue_errs,json=ribQueueErrs,proto3" json:"rib_queue_errs,omitempty"`
	RibPfxLimitErrs      uint32       `protobuf:"varint,13,opt,name=rib_pfx_limit_errs,json=ribPfxLimitErrs,proto3" json:"rib_pfx_limit_errs,omitempty"`
	RibDequeueErrs       uint32       `protobuf:"varint,14,opt,name=rib_dequeue_errs,json=ribDequeueErrs,proto3" json:"rib_dequeue_errs,omitempty"`
	RibEmptyBatches      uint32       `protobuf:"varint,15,opt,name=rib_empty_batches,json=ribEmptyBatches,proto3" json:"rib_empty_batches,omitempty"`
	RibDropBefore        uint32       `protobuf:"varint,16,opt,name=rib_drop_before,json=ribDropBefore,proto3" json:"rib_drop_before,omitempty"`
	RibDropAfter         uint32       `protobuf:"varint,17,opt,name=rib_drop_after,json=ribDropAfter,proto3" json:"rib_drop_after,omitempty"`
	RibDropConn          uint32       `protobuf:"varint,18,opt,name=rib_drop_conn,json=ribDropConn,proto3" json:"rib_drop_conn,omitempty"`
	RibTableNotCreated   uint32       `protobuf:"varint,19,opt,name=rib_table_not_created,json=ribTableNotCreated,proto3" json:"rib_table_not_created,omitempty"`
	PriorityLevel        string       `protobuf:"bytes,20,opt,name=priority_level,json=priorityLevel,proto3" json:"priority_level,omitempty"`
	RibBaseTime          *BagTimespec `protobuf:"bytes,21,opt,name=rib_base_time,json=ribBaseTime,proto3" json:"rib_base_time,omitempty"`
	RibBaseClock         uint64       `protobuf:"varint,22,opt,name=rib_base_clock,json=ribBaseClock,proto3" json:"rib_base_clock,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *OspfShStatsRibThread) Reset()         { *m = OspfShStatsRibThread{} }
func (m *OspfShStatsRibThread) String() string { return proto.CompactTextString(m) }
func (*OspfShStatsRibThread) ProtoMessage()    {}
func (*OspfShStatsRibThread) Descriptor() ([]byte, []int) {
	return fileDescriptor_347e40f665942230, []int{2}
}

func (m *OspfShStatsRibThread) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OspfShStatsRibThread.Unmarshal(m, b)
}
func (m *OspfShStatsRibThread) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OspfShStatsRibThread.Marshal(b, m, deterministic)
}
func (m *OspfShStatsRibThread) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OspfShStatsRibThread.Merge(m, src)
}
func (m *OspfShStatsRibThread) XXX_Size() int {
	return xxx_messageInfo_OspfShStatsRibThread.Size(m)
}
func (m *OspfShStatsRibThread) XXX_DiscardUnknown() {
	xxx_messageInfo_OspfShStatsRibThread.DiscardUnknown(m)
}

var xxx_messageInfo_OspfShStatsRibThread proto.InternalMessageInfo

func (m *OspfShStatsRibThread) GetWqThreadActive() bool {
	if m != nil {
		return m.WqThreadActive
	}
	return false
}

func (m *OspfShStatsRibThread) GetWqDqtime() uint64 {
	if m != nil {
		return m.WqDqtime
	}
	return 0
}

func (m *OspfShStatsRibThread) GetWqeQtime() uint64 {
	if m != nil {
		return m.WqeQtime
	}
	return 0
}

func (m *OspfShStatsRibThread) GetWqLenCur() int32 {
	if m != nil {
		return m.WqLenCur
	}
	return 0
}

func (m *OspfShStatsRibThread) GetWqLenMax() int32 {
	if m != nil {
		return m.WqLenMax
	}
	return 0
}

func (m *OspfShStatsRibThread) GetWqTotalQueued() uint32 {
	if m != nil {
		return m.WqTotalQueued
	}
	return 0
}

func (m *OspfShStatsRibThread) GetWqTotalDequeued() uint32 {
	if m != nil {
		return m.WqTotalDequeued
	}
	return 0
}

func (m *OspfShStatsRibThread) GetRibVersion() uint32 {
	if m != nil {
		return m.RibVersion
	}
	return 0
}

func (m *OspfShStatsRibThread) GetRibPktsSent() uint32 {
	if m != nil {
		return m.RibPktsSent
	}
	return 0
}

func (m *OspfShStatsRibThread) GetRibSignals() uint32 {
	if m != nil {
		return m.RibSignals
	}
	return 0
}

func (m *OspfShStatsRibThread) GetRibSendErrs() uint32 {
	if m != nil {
		return m.RibSendErrs
	}
	return 0
}

func (m *OspfShStatsRibThread) GetRibQueueErrs() uint32 {
	if m != nil {
		return m.RibQueueErrs
	}
	return 0
}

func (m *OspfShStatsRibThread) GetRibPfxLimitErrs() uint32 {
	if m != nil {
		return m.RibPfxLimitErrs
	}
	return 0
}

func (m *OspfShStatsRibThread) GetRibDequeueErrs() uint32 {
	if m != nil {
		return m.RibDequeueErrs
	}
	return 0
}

func (m *OspfShStatsRibThread) GetRibEmptyBatches() uint32 {
	if m != nil {
		return m.RibEmptyBatches
	}
	return 0
}

func (m *OspfShStatsRibThread) GetRibDropBefore() uint32 {
	if m != nil {
		return m.RibDropBefore
	}
	return 0
}

func (m *OspfShStatsRibThread) GetRibDropAfter() uint32 {
	if m != nil {
		return m.RibDropAfter
	}
	return 0
}

func (m *OspfShStatsRibThread) GetRibDropConn() uint32 {
	if m != nil {
		return m.RibDropConn
	}
	return 0
}

func (m *OspfShStatsRibThread) GetRibTableNotCreated() uint32 {
	if m != nil {
		return m.RibTableNotCreated
	}
	return 0
}

func (m *OspfShStatsRibThread) GetPriorityLevel() string {
	if m != nil {
		return m.PriorityLevel
	}
	return ""
}

func (m *OspfShStatsRibThread) GetRibBaseTime() *BagTimespec {
	if m != nil {
		return m.RibBaseTime
	}
	return nil
}

func (m *OspfShStatsRibThread) GetRibBaseClock() uint64 {
	if m != nil {
		return m.RibBaseClock
	}
	return 0
}

type OspfShStatsWorkQueues struct {
	Ribqueue             []*OspfShStatsRibThread `protobuf:"bytes,50,rep,name=ribqueue,proto3" json:"ribqueue,omitempty"`
	Internalwq           *OspfShStatsRibThread   `protobuf:"bytes,51,opt,name=internalwq,proto3" json:"internalwq,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *OspfShStatsWorkQueues) Reset()         { *m = OspfShStatsWorkQueues{} }
func (m *OspfShStatsWorkQueues) String() string { return proto.CompactTextString(m) }
func (*OspfShStatsWorkQueues) ProtoMessage()    {}
func (*OspfShStatsWorkQueues) Descriptor() ([]byte, []int) {
	return fileDescriptor_347e40f665942230, []int{3}
}

func (m *OspfShStatsWorkQueues) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OspfShStatsWorkQueues.Unmarshal(m, b)
}
func (m *OspfShStatsWorkQueues) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OspfShStatsWorkQueues.Marshal(b, m, deterministic)
}
func (m *OspfShStatsWorkQueues) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OspfShStatsWorkQueues.Merge(m, src)
}
func (m *OspfShStatsWorkQueues) XXX_Size() int {
	return xxx_messageInfo_OspfShStatsWorkQueues.Size(m)
}
func (m *OspfShStatsWorkQueues) XXX_DiscardUnknown() {
	xxx_messageInfo_OspfShStatsWorkQueues.DiscardUnknown(m)
}

var xxx_messageInfo_OspfShStatsWorkQueues proto.InternalMessageInfo

func (m *OspfShStatsWorkQueues) GetRibqueue() []*OspfShStatsRibThread {
	if m != nil {
		return m.Ribqueue
	}
	return nil
}

func (m *OspfShStatsWorkQueues) GetInternalwq() *OspfShStatsRibThread {
	if m != nil {
		return m.Internalwq
	}
	return nil
}

func init() {
	proto.RegisterType((*OspfShStatsWorkQueues_KEYS)(nil), "cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.statistics.rib_thread_stats.ospf_sh_stats_work_queues_KEYS")
	proto.RegisterType((*BagTimespec)(nil), "cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.statistics.rib_thread_stats.bag_timespec")
	proto.RegisterType((*OspfShStatsRibThread)(nil), "cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.statistics.rib_thread_stats.ospf_sh_stats_rib_thread")
	proto.RegisterType((*OspfShStatsWorkQueues)(nil), "cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.statistics.rib_thread_stats.ospf_sh_stats_work_queues")
}

func init() { proto.RegisterFile("ospf_sh_stats_work_queues.proto", fileDescriptor_347e40f665942230) }

var fileDescriptor_347e40f665942230 = []byte{
	// 702 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x94, 0xdf, 0x4e, 0x1b, 0x39,
	0x14, 0xc6, 0x15, 0x60, 0x21, 0x38, 0x7f, 0x20, 0xde, 0x05, 0x79, 0xb5, 0x2b, 0xc8, 0x46, 0xbb,
	0xab, 0x88, 0x4a, 0x91, 0x0a, 0x7d, 0x01, 0x08, 0xf4, 0xa6, 0x14, 0x95, 0x24, 0xaa, 0xd4, 0xde,
	0x58, 0x9e, 0x99, 0x13, 0x62, 0x65, 0x62, 0xcf, 0xd8, 0x4e, 0x26, 0xbc, 0x43, 0x2f, 0x7a, 0xd1,
	0x27, 0xaa, 0xd4, 0xf7, 0xaa, 0x7c, 0x3c, 0x49, 0xd3, 0x0b, 0x2e, 0x51, 0xef, 0xe2, 0xef, 0xfb,
	0xf9, 0xf8, 0x3b, 0x67, 0x62, 0x93, 0x53, 0x6d, 0xb3, 0x31, 0xb7, 0x13, 0x6e, 0x9d, 0x70, 0x96,
	0x17, 0xda, 0x4c, 0x79, 0x3e, 0x87, 0x39, 0xd8, 0x5e, 0x66, 0xb4, 0xd3, 0xf4, 0x63, 0x2c, 0x6d,
	0xac, 0xb9, 0xd4, 0x96, 0x2f, 0x0d, 0x97, 0xd9, 0xe2, 0x15, 0xc7, 0x2d, 0x3a, 0x03, 0xd3, 0xf3,
	0xbf, 0x3c, 0x17, 0x83, 0xb5, 0x61, 0x87, 0xff, 0xd5, 0x4b, 0x60, 0x2c, 0xe6, 0xa9, 0xe3, 0x0b,
	0x33, 0xee, 0xf9, 0xba, 0xd2, 0x3a, 0x19, 0xdb, 0x9e, 0x91, 0x11, 0x77, 0x13, 0x03, 0x22, 0x09,
	0xa7, 0x75, 0xfa, 0xe4, 0xe4, 0xc9, 0xe3, 0xf9, 0x9b, 0x9b, 0x0f, 0x43, 0xfa, 0x0f, 0xa9, 0x97,
	0x45, 0xb9, 0x12, 0x33, 0x60, 0x95, 0x76, 0xa5, 0xbb, 0x3f, 0xa8, 0x95, 0xda, 0x9d, 0x98, 0x41,
	0xe7, 0x35, 0xa9, 0x47, 0xe2, 0x81, 0x3b, 0x39, 0x03, 0x9b, 0x41, 0x4c, 0x8f, 0xc9, 0xae, 0x85,
	0x58, 0xab, 0x04, 0xe1, 0xc6, 0xa0, 0x5c, 0xd1, 0x13, 0x42, 0x94, 0x50, 0xba, 0xf4, 0xb6, 0xd0,
	0xdb, 0x50, 0x3a, 0x5f, 0xf7, 0x08, 0xfb, 0x39, 0xcd, 0x8f, 0xbc, 0xb4, 0x4b, 0x0e, 0x8b, 0x7c,
	0x15, 0x5e, 0xc4, 0x4e, 0x2e, 0x42, 0x96, 0xea, 0xa0, 0x59, 0xe4, 0x23, 0x94, 0x2f, 0x51, 0xa5,
	0x7f, 0x91, 0xfd, 0x22, 0xe7, 0x49, 0xee, 0xf3, 0xe0, 0x29, 0x3b, 0x83, 0x6a, 0x91, 0x5f, 0xe3,
	0x3a, 0x98, 0xc0, 0x83, 0xb9, 0xbd, 0x32, 0xe1, 0x1e, 0xcd, 0xbf, 0x09, 0x29, 0x72, 0x9e, 0x82,
	0xe2, 0xf1, 0xdc, 0xb0, 0x9d, 0x76, 0xa5, 0xdb, 0xf2, 0xee, 0x2d, 0xa8, 0xfe, 0xdc, 0x6c, 0xb8,
	0x33, 0xb1, 0x64, 0xbf, 0x6d, 0xb8, 0x6f, 0xc5, 0x92, 0xfe, 0x4f, 0x0e, 0x7c, 0x3e, 0xed, 0x44,
	0x1a, 0xe6, 0x97, 0xb0, 0x5d, 0xec, 0xb0, 0x51, 0xe4, 0x23, 0xaf, 0xde, 0xa3, 0x48, 0xcf, 0x48,
	0x6b, 0xcd, 0x25, 0x50, 0x92, 0x7b, 0x48, 0x1e, 0x94, 0xe4, 0x75, 0x29, 0xd3, 0x53, 0x52, 0xf3,
	0x13, 0x58, 0x80, 0xb1, 0x52, 0x2b, 0x56, 0x0d, 0x13, 0x33, 0x32, 0x7a, 0x1f, 0x14, 0xda, 0x21,
	0x0d, 0x0f, 0x64, 0x53, 0x67, 0xb9, 0x05, 0xe5, 0xd8, 0x3e, 0x22, 0x7e, 0xd7, 0xbb, 0xa9, 0xb3,
	0x43, 0x50, 0x6e, 0x55, 0xc4, 0xca, 0x07, 0x25, 0x52, 0xcb, 0xc8, 0xba, 0xc8, 0x30, 0x28, 0xab,
	0x22, 0x16, 0x54, 0xc2, 0xc1, 0x18, 0xcb, 0x6a, 0xeb, 0x22, 0x43, 0x50, 0xc9, 0x8d, 0x31, 0x96,
	0xfe, 0x4b, 0x9a, 0x9e, 0xc1, 0x5c, 0x01, 0xaa, 0x23, 0x54, 0x37, 0x32, 0xc2, 0xc6, 0x90, 0x7a,
	0x41, 0x28, 0xc6, 0x19, 0x2f, 0x79, 0x2a, 0x67, 0xd2, 0x05, 0xb2, 0x11, 0x9a, 0xf3, 0x99, 0xc6,
	0xcb, 0x5b, 0xaf, 0x23, 0xdc, 0x25, 0x87, 0x1e, 0x2e, 0x67, 0x10, 0xd0, 0x26, 0xa2, 0xfe, 0xa8,
	0x72, 0x06, 0x48, 0x9e, 0x91, 0x96, 0x27, 0x61, 0x96, 0xb9, 0x47, 0x1e, 0x09, 0x17, 0x4f, 0xc0,
	0xb2, 0x83, 0x75, 0xd5, 0x1b, 0xaf, 0x5f, 0x05, 0xd9, 0x7f, 0x06, 0xac, 0x6a, 0x74, 0xc6, 0x23,
	0x18, 0x6b, 0x03, 0xec, 0x30, 0x7c, 0x06, 0x5f, 0xd4, 0xe8, 0xec, 0x0a, 0xc5, 0x55, 0x43, 0xc8,
	0x89, 0xb1, 0x03, 0xc3, 0x5a, 0xeb, 0x86, 0x3c, 0x76, 0xe9, 0xb5, 0xd5, 0x68, 0x90, 0x8a, 0xb5,
	0x52, 0x8c, 0xae, 0x47, 0xe3, 0xa1, 0xbe, 0x56, 0x8a, 0xbe, 0x24, 0x47, 0xf8, 0x37, 0x15, 0x51,
	0x0a, 0x5c, 0x69, 0xc7, 0x63, 0x03, 0xc2, 0x41, 0xc2, 0x7e, 0x47, 0xd6, 0x4f, 0x64, 0xe4, 0xbd,
	0x3b, 0xed, 0xfa, 0xc1, 0xa1, 0xff, 0x91, 0x66, 0x66, 0xa4, 0x36, 0xd2, 0x3d, 0xf2, 0x14, 0x16,
	0x90, 0xb2, 0x3f, 0xf0, 0x56, 0x35, 0x56, 0xea, 0xad, 0x17, 0xe9, 0xa7, 0x4a, 0x38, 0x3e, 0x12,
	0x16, 0xf0, 0x76, 0xb1, 0xa3, 0x76, 0xa5, 0x5b, 0x3b, 0x9f, 0xf4, 0x9e, 0xef, 0x45, 0xe8, 0x6d,
	0xde, 0x64, 0x6c, 0xf4, 0x4a, 0x58, 0x18, 0xf9, 0xdb, 0x51, 0x8e, 0x0c, 0xd3, 0xc4, 0xa9, 0x8e,
	0xa7, 0xec, 0x18, 0xef, 0x4f, 0xbd, 0x84, 0xfa, 0x5e, 0xeb, 0x7c, 0xdb, 0x22, 0x7f, 0x3e, 0xf9,
	0xa4, 0xd0, 0xcf, 0x15, 0x52, 0x35, 0x32, 0xc2, 0x15, 0x3b, 0x6f, 0x6f, 0x77, 0x6b, 0xe7, 0xee,
	0x39, 0xbb, 0x79, 0xea, 0x39, 0x19, 0xac, 0x53, 0xd0, 0x2f, 0x15, 0x42, 0xa4, 0x72, 0x60, 0x94,
	0x48, 0x8b, 0x9c, 0x5d, 0xe0, 0x88, 0x7f, 0x4d, 0xa8, 0x8d, 0x1c, 0xd1, 0x2e, 0x3e, 0xfe, 0x17,
	0xdf, 0x03, 0x00, 0x00, 0xff, 0xff, 0x7a, 0x9f, 0xcf, 0x7f, 0x1f, 0x06, 0x00, 0x00,
}
