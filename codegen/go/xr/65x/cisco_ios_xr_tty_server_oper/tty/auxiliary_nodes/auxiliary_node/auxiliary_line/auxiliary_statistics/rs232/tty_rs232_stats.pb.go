/*
Copyright 2019 Cisco Systems

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: tty_rs232_stats.proto

package cisco_ios_xr_tty_server_oper_tty_auxiliary_nodes_auxiliary_node_auxiliary_line_auxiliary_statistics_rs232

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type TtyRs232Stats_KEYS struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TtyRs232Stats_KEYS) Reset()         { *m = TtyRs232Stats_KEYS{} }
func (m *TtyRs232Stats_KEYS) String() string { return proto.CompactTextString(m) }
func (*TtyRs232Stats_KEYS) ProtoMessage()    {}
func (*TtyRs232Stats_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_bbfb0f0b56461961, []int{0}
}

func (m *TtyRs232Stats_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TtyRs232Stats_KEYS.Unmarshal(m, b)
}
func (m *TtyRs232Stats_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TtyRs232Stats_KEYS.Marshal(b, m, deterministic)
}
func (m *TtyRs232Stats_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TtyRs232Stats_KEYS.Merge(m, src)
}
func (m *TtyRs232Stats_KEYS) XXX_Size() int {
	return xxx_messageInfo_TtyRs232Stats_KEYS.Size(m)
}
func (m *TtyRs232Stats_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_TtyRs232Stats_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_TtyRs232Stats_KEYS proto.InternalMessageInfo

func (m *TtyRs232Stats_KEYS) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type TtyRs232Stats struct {
	DataBits                  uint32   `protobuf:"varint,50,opt,name=data_bits,json=dataBits,proto3" json:"data_bits,omitempty"`
	ExecDisabled              bool     `protobuf:"varint,51,opt,name=exec_disabled,json=execDisabled,proto3" json:"exec_disabled,omitempty"`
	HardwareFlowControlStatus uint32   `protobuf:"varint,52,opt,name=hardware_flow_control_status,json=hardwareFlowControlStatus,proto3" json:"hardware_flow_control_status,omitempty"`
	ParityStatus              uint32   `protobuf:"varint,53,opt,name=parity_status,json=parityStatus,proto3" json:"parity_status,omitempty"`
	BaudRate                  uint32   `protobuf:"varint,54,opt,name=baud_rate,json=baudRate,proto3" json:"baud_rate,omitempty"`
	StopBits                  uint32   `protobuf:"varint,55,opt,name=stop_bits,json=stopBits,proto3" json:"stop_bits,omitempty"`
	OverrunErrorCount         uint32   `protobuf:"varint,56,opt,name=overrun_error_count,json=overrunErrorCount,proto3" json:"overrun_error_count,omitempty"`
	FramingErrorCount         uint32   `protobuf:"varint,57,opt,name=framing_error_count,json=framingErrorCount,proto3" json:"framing_error_count,omitempty"`
	ParityErrorCount          uint32   `protobuf:"varint,58,opt,name=parity_error_count,json=parityErrorCount,proto3" json:"parity_error_count,omitempty"`
	XXX_NoUnkeyedLiteral      struct{} `json:"-"`
	XXX_unrecognized          []byte   `json:"-"`
	XXX_sizecache             int32    `json:"-"`
}

func (m *TtyRs232Stats) Reset()         { *m = TtyRs232Stats{} }
func (m *TtyRs232Stats) String() string { return proto.CompactTextString(m) }
func (*TtyRs232Stats) ProtoMessage()    {}
func (*TtyRs232Stats) Descriptor() ([]byte, []int) {
	return fileDescriptor_bbfb0f0b56461961, []int{1}
}

func (m *TtyRs232Stats) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TtyRs232Stats.Unmarshal(m, b)
}
func (m *TtyRs232Stats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TtyRs232Stats.Marshal(b, m, deterministic)
}
func (m *TtyRs232Stats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TtyRs232Stats.Merge(m, src)
}
func (m *TtyRs232Stats) XXX_Size() int {
	return xxx_messageInfo_TtyRs232Stats.Size(m)
}
func (m *TtyRs232Stats) XXX_DiscardUnknown() {
	xxx_messageInfo_TtyRs232Stats.DiscardUnknown(m)
}

var xxx_messageInfo_TtyRs232Stats proto.InternalMessageInfo

func (m *TtyRs232Stats) GetDataBits() uint32 {
	if m != nil {
		return m.DataBits
	}
	return 0
}

func (m *TtyRs232Stats) GetExecDisabled() bool {
	if m != nil {
		return m.ExecDisabled
	}
	return false
}

func (m *TtyRs232Stats) GetHardwareFlowControlStatus() uint32 {
	if m != nil {
		return m.HardwareFlowControlStatus
	}
	return 0
}

func (m *TtyRs232Stats) GetParityStatus() uint32 {
	if m != nil {
		return m.ParityStatus
	}
	return 0
}

func (m *TtyRs232Stats) GetBaudRate() uint32 {
	if m != nil {
		return m.BaudRate
	}
	return 0
}

func (m *TtyRs232Stats) GetStopBits() uint32 {
	if m != nil {
		return m.StopBits
	}
	return 0
}

func (m *TtyRs232Stats) GetOverrunErrorCount() uint32 {
	if m != nil {
		return m.OverrunErrorCount
	}
	return 0
}

func (m *TtyRs232Stats) GetFramingErrorCount() uint32 {
	if m != nil {
		return m.FramingErrorCount
	}
	return 0
}

func (m *TtyRs232Stats) GetParityErrorCount() uint32 {
	if m != nil {
		return m.ParityErrorCount
	}
	return 0
}

func init() {
	proto.RegisterType((*TtyRs232Stats_KEYS)(nil), "cisco_ios_xr_tty_server_oper.tty.auxiliary_nodes.auxiliary_node.auxiliary_line.auxiliary_statistics.rs232.tty_rs232_stats_KEYS")
	proto.RegisterType((*TtyRs232Stats)(nil), "cisco_ios_xr_tty_server_oper.tty.auxiliary_nodes.auxiliary_node.auxiliary_line.auxiliary_statistics.rs232.tty_rs232_stats")
}

func init() { proto.RegisterFile("tty_rs232_stats.proto", fileDescriptor_bbfb0f0b56461961) }

var fileDescriptor_bbfb0f0b56461961 = []byte{
	// 345 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x92, 0x3d, 0x6b, 0xe3, 0x40,
	0x10, 0x86, 0x91, 0x0f, 0x0e, 0x7b, 0xb1, 0xef, 0x43, 0x77, 0x07, 0x3a, 0x7c, 0x85, 0xf1, 0x41,
	0x70, 0x11, 0x54, 0xd8, 0xf9, 0x6e, 0x02, 0x71, 0x9c, 0x26, 0x9d, 0x5c, 0xa5, 0x1a, 0x56, 0xda,
	0x75, 0x32, 0xa0, 0x68, 0xc5, 0xec, 0xc8, 0xb6, 0xca, 0xfc, 0xf3, 0xb0, 0x2b, 0x99, 0x28, 0x2e,
	0xe7, 0x7d, 0x9e, 0xd5, 0x3b, 0x03, 0x12, 0x7f, 0x98, 0x6b, 0x20, 0x3b, 0x5f, 0xcc, 0xc1, 0xb2,
	0x64, 0x1b, 0x97, 0x64, 0xd8, 0x84, 0x98, 0xa1, 0xcd, 0x0c, 0xa0, 0xb1, 0xb0, 0x27, 0x70, 0x8e,
	0xd5, 0xb4, 0xd5, 0x04, 0xa6, 0xd4, 0x14, 0x33, 0xd7, 0xb1, 0xac, 0xf6, 0x98, 0xa3, 0xa4, 0x1a,
	0x0a, 0xa3, 0xb4, 0x3d, 0x9a, 0x3b, 0x63, 0x8e, 0x45, 0x77, 0x74, 0x2d, 0x68, 0x19, 0x33, 0x1b,
	0xfb, 0xda, 0xe9, 0x89, 0xf8, 0x7d, 0xb4, 0x03, 0x3c, 0xae, 0x9e, 0xd6, 0xe1, 0x37, 0xd1, 0x43,
	0x15, 0x05, 0x93, 0x60, 0x36, 0x48, 0x7a, 0xa8, 0xa6, 0x6f, 0x5f, 0xc4, 0xf7, 0x23, 0x31, 0x1c,
	0x8b, 0x81, 0x92, 0x2c, 0x21, 0x45, 0xb6, 0xd1, 0x7c, 0x12, 0xcc, 0x46, 0x49, 0xdf, 0x05, 0x77,
	0xc8, 0x36, 0xfc, 0x2f, 0x46, 0x7a, 0xaf, 0x33, 0x50, 0x68, 0x65, 0x9a, 0x6b, 0x15, 0x2d, 0x26,
	0xc1, 0xac, 0x9f, 0x0c, 0x5d, 0x78, 0xdf, 0x66, 0xe1, 0xad, 0xf8, 0xf7, 0x22, 0x49, 0xed, 0x24,
	0x69, 0xd8, 0xe4, 0x66, 0x07, 0x99, 0x29, 0x98, 0x4c, 0xee, 0x0b, 0x2a, 0x1b, 0x9d, 0xf9, 0x8f,
	0xfe, 0x3d, 0x38, 0x0f, 0xb9, 0xd9, 0x2d, 0x1b, 0x63, 0xed, 0x05, 0xd7, 0x52, 0x4a, 0x42, 0xae,
	0x0f, 0x2f, 0xce, 0xfd, 0x8b, 0x61, 0x13, 0xb6, 0xd2, 0x58, 0x0c, 0x52, 0x59, 0x29, 0x20, 0xc9,
	0x3a, 0xba, 0x68, 0xf6, 0x74, 0x41, 0x22, 0x59, 0x3b, 0x68, 0xd9, 0x94, 0xcd, 0x11, 0x97, 0x0d,
	0x74, 0x81, 0x3f, 0x22, 0x16, 0xbf, 0xcc, 0x56, 0x13, 0x55, 0x05, 0x68, 0x22, 0x43, 0x90, 0x99,
	0xaa, 0xe0, 0xe8, 0xca, 0x6b, 0x3f, 0x5b, 0xb4, 0x72, 0x64, 0xe9, 0x80, 0xf3, 0x37, 0x24, 0x5f,
	0xb1, 0x78, 0xfe, 0xe4, 0x5f, 0x37, 0x7e, 0x8b, 0x3a, 0xfe, 0xa9, 0x08, 0xdb, 0xf5, 0xbb, 0xfa,
	0x8d, 0xd7, 0x7f, 0x34, 0xe4, 0xc3, 0x4e, 0xbf, 0xfa, 0xbf, 0x63, 0xf1, 0x1e, 0x00, 0x00, 0xff,
	0xff, 0x18, 0xa0, 0xd6, 0xaf, 0x36, 0x02, 0x00, 0x00,
}
