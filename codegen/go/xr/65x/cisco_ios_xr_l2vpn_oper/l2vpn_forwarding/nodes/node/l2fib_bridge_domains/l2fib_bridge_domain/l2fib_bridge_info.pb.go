/*
Copyright 2019 Cisco Systems

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: l2fib_bridge_info.proto

package cisco_ios_xr_l2vpn_oper_l2vpn_forwarding_nodes_node_l2fib_bridge_domains_l2fib_bridge_domain

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type L2FibBridgeInfo_KEYS struct {
	NodeId               string   `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	BdGroupName          string   `protobuf:"bytes,2,opt,name=bd_group_name,json=bdGroupName,proto3" json:"bd_group_name,omitempty"`
	BdName               string   `protobuf:"bytes,3,opt,name=bd_name,json=bdName,proto3" json:"bd_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *L2FibBridgeInfo_KEYS) Reset()         { *m = L2FibBridgeInfo_KEYS{} }
func (m *L2FibBridgeInfo_KEYS) String() string { return proto.CompactTextString(m) }
func (*L2FibBridgeInfo_KEYS) ProtoMessage()    {}
func (*L2FibBridgeInfo_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_19dbae87ab6c393e, []int{0}
}

func (m *L2FibBridgeInfo_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2FibBridgeInfo_KEYS.Unmarshal(m, b)
}
func (m *L2FibBridgeInfo_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2FibBridgeInfo_KEYS.Marshal(b, m, deterministic)
}
func (m *L2FibBridgeInfo_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2FibBridgeInfo_KEYS.Merge(m, src)
}
func (m *L2FibBridgeInfo_KEYS) XXX_Size() int {
	return xxx_messageInfo_L2FibBridgeInfo_KEYS.Size(m)
}
func (m *L2FibBridgeInfo_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_L2FibBridgeInfo_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_L2FibBridgeInfo_KEYS proto.InternalMessageInfo

func (m *L2FibBridgeInfo_KEYS) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

func (m *L2FibBridgeInfo_KEYS) GetBdGroupName() string {
	if m != nil {
		return m.BdGroupName
	}
	return ""
}

func (m *L2FibBridgeInfo_KEYS) GetBdName() string {
	if m != nil {
		return m.BdName
	}
	return ""
}

type L2FibBaseInfo struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *L2FibBaseInfo) Reset()         { *m = L2FibBaseInfo{} }
func (m *L2FibBaseInfo) String() string { return proto.CompactTextString(m) }
func (*L2FibBaseInfo) ProtoMessage()    {}
func (*L2FibBaseInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_19dbae87ab6c393e, []int{1}
}

func (m *L2FibBaseInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2FibBaseInfo.Unmarshal(m, b)
}
func (m *L2FibBaseInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2FibBaseInfo.Marshal(b, m, deterministic)
}
func (m *L2FibBaseInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2FibBaseInfo.Merge(m, src)
}
func (m *L2FibBaseInfo) XXX_Size() int {
	return xxx_messageInfo_L2FibBaseInfo.Size(m)
}
func (m *L2FibBaseInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_L2FibBaseInfo.DiscardUnknown(m)
}

var xxx_messageInfo_L2FibBaseInfo proto.InternalMessageInfo

type L2FibProfileInfo struct {
	ProfileName          string   `protobuf:"bytes,1,opt,name=profile_name,json=profileName,proto3" json:"profile_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *L2FibProfileInfo) Reset()         { *m = L2FibProfileInfo{} }
func (m *L2FibProfileInfo) String() string { return proto.CompactTextString(m) }
func (*L2FibProfileInfo) ProtoMessage()    {}
func (*L2FibProfileInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_19dbae87ab6c393e, []int{2}
}

func (m *L2FibProfileInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2FibProfileInfo.Unmarshal(m, b)
}
func (m *L2FibProfileInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2FibProfileInfo.Marshal(b, m, deterministic)
}
func (m *L2FibProfileInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2FibProfileInfo.Merge(m, src)
}
func (m *L2FibProfileInfo) XXX_Size() int {
	return xxx_messageInfo_L2FibProfileInfo.Size(m)
}
func (m *L2FibProfileInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_L2FibProfileInfo.DiscardUnknown(m)
}

var xxx_messageInfo_L2FibProfileInfo proto.InternalMessageInfo

func (m *L2FibProfileInfo) GetProfileName() string {
	if m != nil {
		return m.ProfileName
	}
	return ""
}

type L2FibFeatureUn struct {
	FeatureType          string            `protobuf:"bytes,1,opt,name=feature_type,json=featureType,proto3" json:"feature_type,omitempty"`
	Dhcp                 *L2FibProfileInfo `protobuf:"bytes,2,opt,name=dhcp,proto3" json:"dhcp,omitempty"`
	Igmp                 *L2FibProfileInfo `protobuf:"bytes,3,opt,name=igmp,proto3" json:"igmp,omitempty"`
	Mld                  *L2FibProfileInfo `protobuf:"bytes,4,opt,name=mld,proto3" json:"mld,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *L2FibFeatureUn) Reset()         { *m = L2FibFeatureUn{} }
func (m *L2FibFeatureUn) String() string { return proto.CompactTextString(m) }
func (*L2FibFeatureUn) ProtoMessage()    {}
func (*L2FibFeatureUn) Descriptor() ([]byte, []int) {
	return fileDescriptor_19dbae87ab6c393e, []int{3}
}

func (m *L2FibFeatureUn) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2FibFeatureUn.Unmarshal(m, b)
}
func (m *L2FibFeatureUn) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2FibFeatureUn.Marshal(b, m, deterministic)
}
func (m *L2FibFeatureUn) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2FibFeatureUn.Merge(m, src)
}
func (m *L2FibFeatureUn) XXX_Size() int {
	return xxx_messageInfo_L2FibFeatureUn.Size(m)
}
func (m *L2FibFeatureUn) XXX_DiscardUnknown() {
	xxx_messageInfo_L2FibFeatureUn.DiscardUnknown(m)
}

var xxx_messageInfo_L2FibFeatureUn proto.InternalMessageInfo

func (m *L2FibFeatureUn) GetFeatureType() string {
	if m != nil {
		return m.FeatureType
	}
	return ""
}

func (m *L2FibFeatureUn) GetDhcp() *L2FibProfileInfo {
	if m != nil {
		return m.Dhcp
	}
	return nil
}

func (m *L2FibFeatureUn) GetIgmp() *L2FibProfileInfo {
	if m != nil {
		return m.Igmp
	}
	return nil
}

func (m *L2FibFeatureUn) GetMld() *L2FibProfileInfo {
	if m != nil {
		return m.Mld
	}
	return nil
}

type L2FibOperInfo struct {
	Mtu                                      uint32            `protobuf:"varint,1,opt,name=mtu,proto3" json:"mtu,omitempty"`
	MacAgingTime                             uint32            `protobuf:"varint,2,opt,name=mac_aging_time,json=macAgingTime,proto3" json:"mac_aging_time,omitempty"`
	MacLimit                                 uint32            `protobuf:"varint,3,opt,name=mac_limit,json=macLimit,proto3" json:"mac_limit,omitempty"`
	NumberOfMacs                             uint32            `protobuf:"varint,4,opt,name=number_of_macs,json=numberOfMacs,proto3" json:"number_of_macs,omitempty"`
	AdminDisabled                            bool              `protobuf:"varint,5,opt,name=admin_disabled,json=adminDisabled,proto3" json:"admin_disabled,omitempty"`
	FloodingDisabled                         bool              `protobuf:"varint,6,opt,name=flooding_disabled,json=floodingDisabled,proto3" json:"flooding_disabled,omitempty"`
	FloodUnknownUnicastEnabled               bool              `protobuf:"varint,7,opt,name=flood_unknown_unicast_enabled,json=floodUnknownUnicastEnabled,proto3" json:"flood_unknown_unicast_enabled,omitempty"`
	MacLimitAction                           string            `protobuf:"bytes,8,opt,name=mac_limit_action,json=macLimitAction,proto3" json:"mac_limit_action,omitempty"`
	MacLimitThreshold                        uint32            `protobuf:"varint,9,opt,name=mac_limit_threshold,json=macLimitThreshold,proto3" json:"mac_limit_threshold,omitempty"`
	MacLearningDisabled                      bool              `protobuf:"varint,10,opt,name=mac_learning_disabled,json=macLearningDisabled,proto3" json:"mac_learning_disabled,omitempty"`
	MacPortDownFlushDisabled                 bool              `protobuf:"varint,11,opt,name=mac_port_down_flush_disabled,json=macPortDownFlushDisabled,proto3" json:"mac_port_down_flush_disabled,omitempty"`
	MacLimitNotificationType                 string            `protobuf:"bytes,12,opt,name=mac_limit_notification_type,json=macLimitNotificationType,proto3" json:"mac_limit_notification_type,omitempty"`
	IsMacSecureEnabled                       bool              `protobuf:"varint,13,opt,name=is_mac_secure_enabled,json=isMacSecureEnabled,proto3" json:"is_mac_secure_enabled,omitempty"`
	IsMacSecureLoggingEnabled                bool              `protobuf:"varint,14,opt,name=is_mac_secure_logging_enabled,json=isMacSecureLoggingEnabled,proto3" json:"is_mac_secure_logging_enabled,omitempty"`
	MacSecureAction                          string            `protobuf:"bytes,15,opt,name=mac_secure_action,json=macSecureAction,proto3" json:"mac_secure_action,omitempty"`
	IsMacSecureAcceptShutdown                bool              `protobuf:"varint,16,opt,name=is_mac_secure_accept_shutdown,json=isMacSecureAcceptShutdown,proto3" json:"is_mac_secure_accept_shutdown,omitempty"`
	IsMacSecureThresholdEnabled              bool              `protobuf:"varint,17,opt,name=is_mac_secure_threshold_enabled,json=isMacSecureThresholdEnabled,proto3" json:"is_mac_secure_threshold_enabled,omitempty"`
	MacAgingType                             bool              `protobuf:"varint,18,opt,name=mac_aging_type,json=macAgingType,proto3" json:"mac_aging_type,omitempty"`
	StormControlUnicastEnabled               bool              `protobuf:"varint,19,opt,name=storm_control_unicast_enabled,json=stormControlUnicastEnabled,proto3" json:"storm_control_unicast_enabled,omitempty"`
	StormControlBroadcastEnabled             bool              `protobuf:"varint,20,opt,name=storm_control_broadcast_enabled,json=stormControlBroadcastEnabled,proto3" json:"storm_control_broadcast_enabled,omitempty"`
	StormControlMulticastEnabled             bool              `protobuf:"varint,21,opt,name=storm_control_multicast_enabled,json=stormControlMulticastEnabled,proto3" json:"storm_control_multicast_enabled,omitempty"`
	StormControlUnicastRateUnit              string            `protobuf:"bytes,22,opt,name=storm_control_unicast_rate_unit,json=stormControlUnicastRateUnit,proto3" json:"storm_control_unicast_rate_unit,omitempty"`
	StormControlBroadcastRateUnit            string            `protobuf:"bytes,23,opt,name=storm_control_broadcast_rate_unit,json=stormControlBroadcastRateUnit,proto3" json:"storm_control_broadcast_rate_unit,omitempty"`
	StormControlMulticastRateUnit            string            `protobuf:"bytes,24,opt,name=storm_control_multicast_rate_unit,json=stormControlMulticastRateUnit,proto3" json:"storm_control_multicast_rate_unit,omitempty"`
	DhcpEnabled                              bool              `protobuf:"varint,25,opt,name=dhcp_enabled,json=dhcpEnabled,proto3" json:"dhcp_enabled,omitempty"`
	DhcpTrusted                              bool              `protobuf:"varint,26,opt,name=dhcp_trusted,json=dhcpTrusted,proto3" json:"dhcp_trusted,omitempty"`
	IsDaiEnabled                             bool              `protobuf:"varint,27,opt,name=is_dai_enabled,json=isDaiEnabled,proto3" json:"is_dai_enabled,omitempty"`
	IsDaiAddrValidationIpv4Enabled           bool              `protobuf:"varint,28,opt,name=is_dai_addr_validation_ipv4_enabled,json=isDaiAddrValidationIpv4Enabled,proto3" json:"is_dai_addr_validation_ipv4_enabled,omitempty"`
	IsDaiAddrValidationSourceMacEnabled      bool              `protobuf:"varint,29,opt,name=is_dai_addr_validation_source_mac_enabled,json=isDaiAddrValidationSourceMacEnabled,proto3" json:"is_dai_addr_validation_source_mac_enabled,omitempty"`
	IsDaiAddrValidationDestinationMacEnabled bool              `protobuf:"varint,30,opt,name=is_dai_addr_validation_destination_mac_enabled,json=isDaiAddrValidationDestinationMacEnabled,proto3" json:"is_dai_addr_validation_destination_mac_enabled,omitempty"`
	IsDaiLoggingEnabled                      bool              `protobuf:"varint,31,opt,name=is_dai_logging_enabled,json=isDaiLoggingEnabled,proto3" json:"is_dai_logging_enabled,omitempty"`
	IsIpsgEnabled                            bool              `protobuf:"varint,32,opt,name=is_ipsg_enabled,json=isIpsgEnabled,proto3" json:"is_ipsg_enabled,omitempty"`
	IsIpsgLoggingEnabled                     bool              `protobuf:"varint,33,opt,name=is_ipsg_logging_enabled,json=isIpsgLoggingEnabled,proto3" json:"is_ipsg_logging_enabled,omitempty"`
	IsVplsFloodOptimizationEnabled           bool              `protobuf:"varint,34,opt,name=is_vpls_flood_optimization_enabled,json=isVplsFloodOptimizationEnabled,proto3" json:"is_vpls_flood_optimization_enabled,omitempty"`
	IgmpSnoopEnabled                         bool              `protobuf:"varint,35,opt,name=igmp_snoop_enabled,json=igmpSnoopEnabled,proto3" json:"igmp_snoop_enabled,omitempty"`
	IgmpSnoopProfileEnabled                  bool              `protobuf:"varint,36,opt,name=igmp_snoop_profile_enabled,json=igmpSnoopProfileEnabled,proto3" json:"igmp_snoop_profile_enabled,omitempty"`
	IgmpFloodForwardEnabled                  bool              `protobuf:"varint,37,opt,name=igmp_flood_forward_enabled,json=igmpFloodForwardEnabled,proto3" json:"igmp_flood_forward_enabled,omitempty"`
	IgmpMroutePortEnabled                    bool              `protobuf:"varint,38,opt,name=igmp_mroute_port_enabled,json=igmpMroutePortEnabled,proto3" json:"igmp_mroute_port_enabled,omitempty"`
	IgmpRouteGuardEnabled                    bool              `protobuf:"varint,39,opt,name=igmp_route_guard_enabled,json=igmpRouteGuardEnabled,proto3" json:"igmp_route_guard_enabled,omitempty"`
	MldSnoopEnabled                          bool              `protobuf:"varint,40,opt,name=mld_snoop_enabled,json=mldSnoopEnabled,proto3" json:"mld_snoop_enabled,omitempty"`
	MldSnoopProfileEnabled                   bool              `protobuf:"varint,41,opt,name=mld_snoop_profile_enabled,json=mldSnoopProfileEnabled,proto3" json:"mld_snoop_profile_enabled,omitempty"`
	MldFloodForwardEnabled                   bool              `protobuf:"varint,42,opt,name=mld_flood_forward_enabled,json=mldFloodForwardEnabled,proto3" json:"mld_flood_forward_enabled,omitempty"`
	MldMroutePortEnabled                     bool              `protobuf:"varint,43,opt,name=mld_mroute_port_enabled,json=mldMroutePortEnabled,proto3" json:"mld_mroute_port_enabled,omitempty"`
	MldRouteGuardEnabled                     bool              `protobuf:"varint,44,opt,name=mld_route_guard_enabled,json=mldRouteGuardEnabled,proto3" json:"mld_route_guard_enabled,omitempty"`
	StpParticipating                         bool              `protobuf:"varint,45,opt,name=stp_participating,json=stpParticipating,proto3" json:"stp_participating,omitempty"`
	BviConfigured                            bool              `protobuf:"varint,46,opt,name=bvi_configured,json=bviConfigured,proto3" json:"bvi_configured,omitempty"`
	IsBviUp                                  bool              `protobuf:"varint,47,opt,name=is_bvi_up,json=isBviUp,proto3" json:"is_bvi_up,omitempty"`
	IsVniEnabled                             bool              `protobuf:"varint,48,opt,name=is_vni_enabled,json=isVniEnabled,proto3" json:"is_vni_enabled,omitempty"`
	IsEvpnEnabled                            bool              `protobuf:"varint,49,opt,name=is_evpn_enabled,json=isEvpnEnabled,proto3" json:"is_evpn_enabled,omitempty"`
	UnknownUnicastFloodingDisabled           bool              `protobuf:"varint,50,opt,name=unknown_unicast_flooding_disabled,json=unknownUnicastFloodingDisabled,proto3" json:"unknown_unicast_flooding_disabled,omitempty"`
	IsPbbevpnEnabled                         bool              `protobuf:"varint,51,opt,name=is_pbbevpn_enabled,json=isPbbevpnEnabled,proto3" json:"is_pbbevpn_enabled,omitempty"`
	IsSwmacLearning                          bool              `protobuf:"varint,52,opt,name=is_swmac_learning,json=isSwmacLearning,proto3" json:"is_swmac_learning,omitempty"`
	IsEvpnFlowLabel                          bool              `protobuf:"varint,53,opt,name=is_evpn_flow_label,json=isEvpnFlowLabel,proto3" json:"is_evpn_flow_label,omitempty"`
	IsEvpnCwDisable                          bool              `protobuf:"varint,54,opt,name=is_evpn_cw_disable,json=isEvpnCwDisable,proto3" json:"is_evpn_cw_disable,omitempty"`
	Msti                                     uint32            `protobuf:"varint,55,opt,name=msti,proto3" json:"msti,omitempty"`
	IsP2MpPwEnabled                          bool              `protobuf:"varint,56,opt,name=is_p2mp_pw_enabled,json=isP2mpPwEnabled,proto3" json:"is_p2mp_pw_enabled,omitempty"`
	IsIgmpSnoopEnabled                       bool              `protobuf:"varint,57,opt,name=is_igmp_snoop_enabled,json=isIgmpSnoopEnabled,proto3" json:"is_igmp_snoop_enabled,omitempty"`
	NvSatelliteOffloadIpv4MulticastDisabled  bool              `protobuf:"varint,58,opt,name=nv_satellite_offload_ipv4_multicast_disabled,json=nvSatelliteOffloadIpv4MulticastDisabled,proto3" json:"nv_satellite_offload_ipv4_multicast_disabled,omitempty"`
	Feature                                  []*L2FibFeatureUn `protobuf:"bytes,59,rep,name=feature,proto3" json:"feature,omitempty"`
	XXX_NoUnkeyedLiteral                     struct{}          `json:"-"`
	XXX_unrecognized                         []byte            `json:"-"`
	XXX_sizecache                            int32             `json:"-"`
}

func (m *L2FibOperInfo) Reset()         { *m = L2FibOperInfo{} }
func (m *L2FibOperInfo) String() string { return proto.CompactTextString(m) }
func (*L2FibOperInfo) ProtoMessage()    {}
func (*L2FibOperInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_19dbae87ab6c393e, []int{4}
}

func (m *L2FibOperInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2FibOperInfo.Unmarshal(m, b)
}
func (m *L2FibOperInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2FibOperInfo.Marshal(b, m, deterministic)
}
func (m *L2FibOperInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2FibOperInfo.Merge(m, src)
}
func (m *L2FibOperInfo) XXX_Size() int {
	return xxx_messageInfo_L2FibOperInfo.Size(m)
}
func (m *L2FibOperInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_L2FibOperInfo.DiscardUnknown(m)
}

var xxx_messageInfo_L2FibOperInfo proto.InternalMessageInfo

func (m *L2FibOperInfo) GetMtu() uint32 {
	if m != nil {
		return m.Mtu
	}
	return 0
}

func (m *L2FibOperInfo) GetMacAgingTime() uint32 {
	if m != nil {
		return m.MacAgingTime
	}
	return 0
}

func (m *L2FibOperInfo) GetMacLimit() uint32 {
	if m != nil {
		return m.MacLimit
	}
	return 0
}

func (m *L2FibOperInfo) GetNumberOfMacs() uint32 {
	if m != nil {
		return m.NumberOfMacs
	}
	return 0
}

func (m *L2FibOperInfo) GetAdminDisabled() bool {
	if m != nil {
		return m.AdminDisabled
	}
	return false
}

func (m *L2FibOperInfo) GetFloodingDisabled() bool {
	if m != nil {
		return m.FloodingDisabled
	}
	return false
}

func (m *L2FibOperInfo) GetFloodUnknownUnicastEnabled() bool {
	if m != nil {
		return m.FloodUnknownUnicastEnabled
	}
	return false
}

func (m *L2FibOperInfo) GetMacLimitAction() string {
	if m != nil {
		return m.MacLimitAction
	}
	return ""
}

func (m *L2FibOperInfo) GetMacLimitThreshold() uint32 {
	if m != nil {
		return m.MacLimitThreshold
	}
	return 0
}

func (m *L2FibOperInfo) GetMacLearningDisabled() bool {
	if m != nil {
		return m.MacLearningDisabled
	}
	return false
}

func (m *L2FibOperInfo) GetMacPortDownFlushDisabled() bool {
	if m != nil {
		return m.MacPortDownFlushDisabled
	}
	return false
}

func (m *L2FibOperInfo) GetMacLimitNotificationType() string {
	if m != nil {
		return m.MacLimitNotificationType
	}
	return ""
}

func (m *L2FibOperInfo) GetIsMacSecureEnabled() bool {
	if m != nil {
		return m.IsMacSecureEnabled
	}
	return false
}

func (m *L2FibOperInfo) GetIsMacSecureLoggingEnabled() bool {
	if m != nil {
		return m.IsMacSecureLoggingEnabled
	}
	return false
}

func (m *L2FibOperInfo) GetMacSecureAction() string {
	if m != nil {
		return m.MacSecureAction
	}
	return ""
}

func (m *L2FibOperInfo) GetIsMacSecureAcceptShutdown() bool {
	if m != nil {
		return m.IsMacSecureAcceptShutdown
	}
	return false
}

func (m *L2FibOperInfo) GetIsMacSecureThresholdEnabled() bool {
	if m != nil {
		return m.IsMacSecureThresholdEnabled
	}
	return false
}

func (m *L2FibOperInfo) GetMacAgingType() bool {
	if m != nil {
		return m.MacAgingType
	}
	return false
}

func (m *L2FibOperInfo) GetStormControlUnicastEnabled() bool {
	if m != nil {
		return m.StormControlUnicastEnabled
	}
	return false
}

func (m *L2FibOperInfo) GetStormControlBroadcastEnabled() bool {
	if m != nil {
		return m.StormControlBroadcastEnabled
	}
	return false
}

func (m *L2FibOperInfo) GetStormControlMulticastEnabled() bool {
	if m != nil {
		return m.StormControlMulticastEnabled
	}
	return false
}

func (m *L2FibOperInfo) GetStormControlUnicastRateUnit() string {
	if m != nil {
		return m.StormControlUnicastRateUnit
	}
	return ""
}

func (m *L2FibOperInfo) GetStormControlBroadcastRateUnit() string {
	if m != nil {
		return m.StormControlBroadcastRateUnit
	}
	return ""
}

func (m *L2FibOperInfo) GetStormControlMulticastRateUnit() string {
	if m != nil {
		return m.StormControlMulticastRateUnit
	}
	return ""
}

func (m *L2FibOperInfo) GetDhcpEnabled() bool {
	if m != nil {
		return m.DhcpEnabled
	}
	return false
}

func (m *L2FibOperInfo) GetDhcpTrusted() bool {
	if m != nil {
		return m.DhcpTrusted
	}
	return false
}

func (m *L2FibOperInfo) GetIsDaiEnabled() bool {
	if m != nil {
		return m.IsDaiEnabled
	}
	return false
}

func (m *L2FibOperInfo) GetIsDaiAddrValidationIpv4Enabled() bool {
	if m != nil {
		return m.IsDaiAddrValidationIpv4Enabled
	}
	return false
}

func (m *L2FibOperInfo) GetIsDaiAddrValidationSourceMacEnabled() bool {
	if m != nil {
		return m.IsDaiAddrValidationSourceMacEnabled
	}
	return false
}

func (m *L2FibOperInfo) GetIsDaiAddrValidationDestinationMacEnabled() bool {
	if m != nil {
		return m.IsDaiAddrValidationDestinationMacEnabled
	}
	return false
}

func (m *L2FibOperInfo) GetIsDaiLoggingEnabled() bool {
	if m != nil {
		return m.IsDaiLoggingEnabled
	}
	return false
}

func (m *L2FibOperInfo) GetIsIpsgEnabled() bool {
	if m != nil {
		return m.IsIpsgEnabled
	}
	return false
}

func (m *L2FibOperInfo) GetIsIpsgLoggingEnabled() bool {
	if m != nil {
		return m.IsIpsgLoggingEnabled
	}
	return false
}

func (m *L2FibOperInfo) GetIsVplsFloodOptimizationEnabled() bool {
	if m != nil {
		return m.IsVplsFloodOptimizationEnabled
	}
	return false
}

func (m *L2FibOperInfo) GetIgmpSnoopEnabled() bool {
	if m != nil {
		return m.IgmpSnoopEnabled
	}
	return false
}

func (m *L2FibOperInfo) GetIgmpSnoopProfileEnabled() bool {
	if m != nil {
		return m.IgmpSnoopProfileEnabled
	}
	return false
}

func (m *L2FibOperInfo) GetIgmpFloodForwardEnabled() bool {
	if m != nil {
		return m.IgmpFloodForwardEnabled
	}
	return false
}

func (m *L2FibOperInfo) GetIgmpMroutePortEnabled() bool {
	if m != nil {
		return m.IgmpMroutePortEnabled
	}
	return false
}

func (m *L2FibOperInfo) GetIgmpRouteGuardEnabled() bool {
	if m != nil {
		return m.IgmpRouteGuardEnabled
	}
	return false
}

func (m *L2FibOperInfo) GetMldSnoopEnabled() bool {
	if m != nil {
		return m.MldSnoopEnabled
	}
	return false
}

func (m *L2FibOperInfo) GetMldSnoopProfileEnabled() bool {
	if m != nil {
		return m.MldSnoopProfileEnabled
	}
	return false
}

func (m *L2FibOperInfo) GetMldFloodForwardEnabled() bool {
	if m != nil {
		return m.MldFloodForwardEnabled
	}
	return false
}

func (m *L2FibOperInfo) GetMldMroutePortEnabled() bool {
	if m != nil {
		return m.MldMroutePortEnabled
	}
	return false
}

func (m *L2FibOperInfo) GetMldRouteGuardEnabled() bool {
	if m != nil {
		return m.MldRouteGuardEnabled
	}
	return false
}

func (m *L2FibOperInfo) GetStpParticipating() bool {
	if m != nil {
		return m.StpParticipating
	}
	return false
}

func (m *L2FibOperInfo) GetBviConfigured() bool {
	if m != nil {
		return m.BviConfigured
	}
	return false
}

func (m *L2FibOperInfo) GetIsBviUp() bool {
	if m != nil {
		return m.IsBviUp
	}
	return false
}

func (m *L2FibOperInfo) GetIsVniEnabled() bool {
	if m != nil {
		return m.IsVniEnabled
	}
	return false
}

func (m *L2FibOperInfo) GetIsEvpnEnabled() bool {
	if m != nil {
		return m.IsEvpnEnabled
	}
	return false
}

func (m *L2FibOperInfo) GetUnknownUnicastFloodingDisabled() bool {
	if m != nil {
		return m.UnknownUnicastFloodingDisabled
	}
	return false
}

func (m *L2FibOperInfo) GetIsPbbevpnEnabled() bool {
	if m != nil {
		return m.IsPbbevpnEnabled
	}
	return false
}

func (m *L2FibOperInfo) GetIsSwmacLearning() bool {
	if m != nil {
		return m.IsSwmacLearning
	}
	return false
}

func (m *L2FibOperInfo) GetIsEvpnFlowLabel() bool {
	if m != nil {
		return m.IsEvpnFlowLabel
	}
	return false
}

func (m *L2FibOperInfo) GetIsEvpnCwDisable() bool {
	if m != nil {
		return m.IsEvpnCwDisable
	}
	return false
}

func (m *L2FibOperInfo) GetMsti() uint32 {
	if m != nil {
		return m.Msti
	}
	return 0
}

func (m *L2FibOperInfo) GetIsP2MpPwEnabled() bool {
	if m != nil {
		return m.IsP2MpPwEnabled
	}
	return false
}

func (m *L2FibOperInfo) GetIsIgmpSnoopEnabled() bool {
	if m != nil {
		return m.IsIgmpSnoopEnabled
	}
	return false
}

func (m *L2FibOperInfo) GetNvSatelliteOffloadIpv4MulticastDisabled() bool {
	if m != nil {
		return m.NvSatelliteOffloadIpv4MulticastDisabled
	}
	return false
}

func (m *L2FibOperInfo) GetFeature() []*L2FibFeatureUn {
	if m != nil {
		return m.Feature
	}
	return nil
}

type L2FibOperBridgeInfo struct {
	OperationalInformation    *L2FibOperInfo `protobuf:"bytes,1,opt,name=operational_information,json=operationalInformation,proto3" json:"operational_information,omitempty"`
	UnicastStormControlPps    uint64         `protobuf:"varint,2,opt,name=unicast_storm_control_pps,json=unicastStormControlPps,proto3" json:"unicast_storm_control_pps,omitempty"`
	UnicastStormControlKbPs   uint64         `protobuf:"varint,3,opt,name=unicast_storm_control_kb_ps,json=unicastStormControlKbPs,proto3" json:"unicast_storm_control_kb_ps,omitempty"`
	BroadcastStormControlPps  uint64         `protobuf:"varint,4,opt,name=broadcast_storm_control_pps,json=broadcastStormControlPps,proto3" json:"broadcast_storm_control_pps,omitempty"`
	BroadcastStormControlKbPs uint64         `protobuf:"varint,5,opt,name=broadcast_storm_control_kb_ps,json=broadcastStormControlKbPs,proto3" json:"broadcast_storm_control_kb_ps,omitempty"`
	MulticastStormControlPps  uint64         `protobuf:"varint,6,opt,name=multicast_storm_control_pps,json=multicastStormControlPps,proto3" json:"multicast_storm_control_pps,omitempty"`
	MulticastStormControlKbPs uint64         `protobuf:"varint,7,opt,name=multicast_storm_control_kb_ps,json=multicastStormControlKbPs,proto3" json:"multicast_storm_control_kb_ps,omitempty"`
	XXX_NoUnkeyedLiteral      struct{}       `json:"-"`
	XXX_unrecognized          []byte         `json:"-"`
	XXX_sizecache             int32          `json:"-"`
}

func (m *L2FibOperBridgeInfo) Reset()         { *m = L2FibOperBridgeInfo{} }
func (m *L2FibOperBridgeInfo) String() string { return proto.CompactTextString(m) }
func (*L2FibOperBridgeInfo) ProtoMessage()    {}
func (*L2FibOperBridgeInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_19dbae87ab6c393e, []int{5}
}

func (m *L2FibOperBridgeInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2FibOperBridgeInfo.Unmarshal(m, b)
}
func (m *L2FibOperBridgeInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2FibOperBridgeInfo.Marshal(b, m, deterministic)
}
func (m *L2FibOperBridgeInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2FibOperBridgeInfo.Merge(m, src)
}
func (m *L2FibOperBridgeInfo) XXX_Size() int {
	return xxx_messageInfo_L2FibOperBridgeInfo.Size(m)
}
func (m *L2FibOperBridgeInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_L2FibOperBridgeInfo.DiscardUnknown(m)
}

var xxx_messageInfo_L2FibOperBridgeInfo proto.InternalMessageInfo

func (m *L2FibOperBridgeInfo) GetOperationalInformation() *L2FibOperInfo {
	if m != nil {
		return m.OperationalInformation
	}
	return nil
}

func (m *L2FibOperBridgeInfo) GetUnicastStormControlPps() uint64 {
	if m != nil {
		return m.UnicastStormControlPps
	}
	return 0
}

func (m *L2FibOperBridgeInfo) GetUnicastStormControlKbPs() uint64 {
	if m != nil {
		return m.UnicastStormControlKbPs
	}
	return 0
}

func (m *L2FibOperBridgeInfo) GetBroadcastStormControlPps() uint64 {
	if m != nil {
		return m.BroadcastStormControlPps
	}
	return 0
}

func (m *L2FibOperBridgeInfo) GetBroadcastStormControlKbPs() uint64 {
	if m != nil {
		return m.BroadcastStormControlKbPs
	}
	return 0
}

func (m *L2FibOperBridgeInfo) GetMulticastStormControlPps() uint64 {
	if m != nil {
		return m.MulticastStormControlPps
	}
	return 0
}

func (m *L2FibOperBridgeInfo) GetMulticastStormControlKbPs() uint64 {
	if m != nil {
		return m.MulticastStormControlKbPs
	}
	return 0
}

type L2FibBridgePbbEdge struct {
	ISid                 uint32   `protobuf:"varint,1,opt,name=i_sid,json=iSid,proto3" json:"i_sid,omitempty"`
	CoreBdName           string   `protobuf:"bytes,2,opt,name=core_bd_name,json=coreBdName,proto3" json:"core_bd_name,omitempty"`
	MirpLiteRx           uint64   `protobuf:"varint,3,opt,name=mirp_lite_rx,json=mirpLiteRx,proto3" json:"mirp_lite_rx,omitempty"`
	MirpLiteTx           uint64   `protobuf:"varint,4,opt,name=mirp_lite_tx,json=mirpLiteTx,proto3" json:"mirp_lite_tx,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *L2FibBridgePbbEdge) Reset()         { *m = L2FibBridgePbbEdge{} }
func (m *L2FibBridgePbbEdge) String() string { return proto.CompactTextString(m) }
func (*L2FibBridgePbbEdge) ProtoMessage()    {}
func (*L2FibBridgePbbEdge) Descriptor() ([]byte, []int) {
	return fileDescriptor_19dbae87ab6c393e, []int{6}
}

func (m *L2FibBridgePbbEdge) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2FibBridgePbbEdge.Unmarshal(m, b)
}
func (m *L2FibBridgePbbEdge) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2FibBridgePbbEdge.Marshal(b, m, deterministic)
}
func (m *L2FibBridgePbbEdge) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2FibBridgePbbEdge.Merge(m, src)
}
func (m *L2FibBridgePbbEdge) XXX_Size() int {
	return xxx_messageInfo_L2FibBridgePbbEdge.Size(m)
}
func (m *L2FibBridgePbbEdge) XXX_DiscardUnknown() {
	xxx_messageInfo_L2FibBridgePbbEdge.DiscardUnknown(m)
}

var xxx_messageInfo_L2FibBridgePbbEdge proto.InternalMessageInfo

func (m *L2FibBridgePbbEdge) GetISid() uint32 {
	if m != nil {
		return m.ISid
	}
	return 0
}

func (m *L2FibBridgePbbEdge) GetCoreBdName() string {
	if m != nil {
		return m.CoreBdName
	}
	return ""
}

func (m *L2FibBridgePbbEdge) GetMirpLiteRx() uint64 {
	if m != nil {
		return m.MirpLiteRx
	}
	return 0
}

func (m *L2FibBridgePbbEdge) GetMirpLiteTx() uint64 {
	if m != nil {
		return m.MirpLiteTx
	}
	return 0
}

type L2FibBridgePbbCore struct {
	NberEdgeBd           uint32   `protobuf:"varint,1,opt,name=nber_edge_bd,json=nberEdgeBd,proto3" json:"nber_edge_bd,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *L2FibBridgePbbCore) Reset()         { *m = L2FibBridgePbbCore{} }
func (m *L2FibBridgePbbCore) String() string { return proto.CompactTextString(m) }
func (*L2FibBridgePbbCore) ProtoMessage()    {}
func (*L2FibBridgePbbCore) Descriptor() ([]byte, []int) {
	return fileDescriptor_19dbae87ab6c393e, []int{7}
}

func (m *L2FibBridgePbbCore) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2FibBridgePbbCore.Unmarshal(m, b)
}
func (m *L2FibBridgePbbCore) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2FibBridgePbbCore.Marshal(b, m, deterministic)
}
func (m *L2FibBridgePbbCore) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2FibBridgePbbCore.Merge(m, src)
}
func (m *L2FibBridgePbbCore) XXX_Size() int {
	return xxx_messageInfo_L2FibBridgePbbCore.Size(m)
}
func (m *L2FibBridgePbbCore) XXX_DiscardUnknown() {
	xxx_messageInfo_L2FibBridgePbbCore.DiscardUnknown(m)
}

var xxx_messageInfo_L2FibBridgePbbCore proto.InternalMessageInfo

func (m *L2FibBridgePbbCore) GetNberEdgeBd() uint32 {
	if m != nil {
		return m.NberEdgeBd
	}
	return 0
}

type L2FibBridgePbbUn struct {
	PbbType              string              `protobuf:"bytes,1,opt,name=pbb_type,json=pbbType,proto3" json:"pbb_type,omitempty"`
	Edge                 *L2FibBridgePbbEdge `protobuf:"bytes,2,opt,name=edge,proto3" json:"edge,omitempty"`
	Core                 *L2FibBridgePbbCore `protobuf:"bytes,3,opt,name=core,proto3" json:"core,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *L2FibBridgePbbUn) Reset()         { *m = L2FibBridgePbbUn{} }
func (m *L2FibBridgePbbUn) String() string { return proto.CompactTextString(m) }
func (*L2FibBridgePbbUn) ProtoMessage()    {}
func (*L2FibBridgePbbUn) Descriptor() ([]byte, []int) {
	return fileDescriptor_19dbae87ab6c393e, []int{8}
}

func (m *L2FibBridgePbbUn) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2FibBridgePbbUn.Unmarshal(m, b)
}
func (m *L2FibBridgePbbUn) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2FibBridgePbbUn.Marshal(b, m, deterministic)
}
func (m *L2FibBridgePbbUn) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2FibBridgePbbUn.Merge(m, src)
}
func (m *L2FibBridgePbbUn) XXX_Size() int {
	return xxx_messageInfo_L2FibBridgePbbUn.Size(m)
}
func (m *L2FibBridgePbbUn) XXX_DiscardUnknown() {
	xxx_messageInfo_L2FibBridgePbbUn.DiscardUnknown(m)
}

var xxx_messageInfo_L2FibBridgePbbUn proto.InternalMessageInfo

func (m *L2FibBridgePbbUn) GetPbbType() string {
	if m != nil {
		return m.PbbType
	}
	return ""
}

func (m *L2FibBridgePbbUn) GetEdge() *L2FibBridgePbbEdge {
	if m != nil {
		return m.Edge
	}
	return nil
}

func (m *L2FibBridgePbbUn) GetCore() *L2FibBridgePbbCore {
	if m != nil {
		return m.Core
	}
	return nil
}

type L2FibBridgeBviInfo struct {
	BviIfh               string   `protobuf:"bytes,1,opt,name=bvi_ifh,json=bviIfh,proto3" json:"bvi_ifh,omitempty"`
	BviXid               uint32   `protobuf:"varint,2,opt,name=bvi_xid,json=bviXid,proto3" json:"bvi_xid,omitempty"`
	BviName              string   `protobuf:"bytes,3,opt,name=bvi_name,json=bviName,proto3" json:"bvi_name,omitempty"`
	BviShgId             uint32   `protobuf:"varint,4,opt,name=bvi_shg_id,json=bviShgId,proto3" json:"bvi_shg_id,omitempty"`
	IrbPlatDataLen       uint32   `protobuf:"varint,5,opt,name=irb_plat_data_len,json=irbPlatDataLen,proto3" json:"irb_plat_data_len,omitempty"`
	IrbPlatData          []byte   `protobuf:"bytes,6,opt,name=irb_plat_data,json=irbPlatData,proto3" json:"irb_plat_data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *L2FibBridgeBviInfo) Reset()         { *m = L2FibBridgeBviInfo{} }
func (m *L2FibBridgeBviInfo) String() string { return proto.CompactTextString(m) }
func (*L2FibBridgeBviInfo) ProtoMessage()    {}
func (*L2FibBridgeBviInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_19dbae87ab6c393e, []int{9}
}

func (m *L2FibBridgeBviInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2FibBridgeBviInfo.Unmarshal(m, b)
}
func (m *L2FibBridgeBviInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2FibBridgeBviInfo.Marshal(b, m, deterministic)
}
func (m *L2FibBridgeBviInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2FibBridgeBviInfo.Merge(m, src)
}
func (m *L2FibBridgeBviInfo) XXX_Size() int {
	return xxx_messageInfo_L2FibBridgeBviInfo.Size(m)
}
func (m *L2FibBridgeBviInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_L2FibBridgeBviInfo.DiscardUnknown(m)
}

var xxx_messageInfo_L2FibBridgeBviInfo proto.InternalMessageInfo

func (m *L2FibBridgeBviInfo) GetBviIfh() string {
	if m != nil {
		return m.BviIfh
	}
	return ""
}

func (m *L2FibBridgeBviInfo) GetBviXid() uint32 {
	if m != nil {
		return m.BviXid
	}
	return 0
}

func (m *L2FibBridgeBviInfo) GetBviName() string {
	if m != nil {
		return m.BviName
	}
	return ""
}

func (m *L2FibBridgeBviInfo) GetBviShgId() uint32 {
	if m != nil {
		return m.BviShgId
	}
	return 0
}

func (m *L2FibBridgeBviInfo) GetIrbPlatDataLen() uint32 {
	if m != nil {
		return m.IrbPlatDataLen
	}
	return 0
}

func (m *L2FibBridgeBviInfo) GetIrbPlatData() []byte {
	if m != nil {
		return m.IrbPlatData
	}
	return nil
}

type L2FibNhopInfo struct {
	Base                  *L2FibBaseInfo `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	NextHopAddress        string         `protobuf:"bytes,2,opt,name=next_hop_address,json=nextHopAddress,proto3" json:"next_hop_address,omitempty"`
	NextHopAddressV6      string         `protobuf:"bytes,3,opt,name=next_hop_address_v6,json=nextHopAddressV6,proto3" json:"next_hop_address_v6,omitempty"`
	NextHopInternalLabel  uint32         `protobuf:"varint,4,opt,name=next_hop_internal_label,json=nextHopInternalLabel,proto3" json:"next_hop_internal_label,omitempty"`
	EcdPlaformtDataValid  bool           `protobuf:"varint,5,opt,name=ecd_plaformt_data_valid,json=ecdPlaformtDataValid,proto3" json:"ecd_plaformt_data_valid,omitempty"`
	EcdPlatformDataLength uint32         `protobuf:"varint,6,opt,name=ecd_platform_data_length,json=ecdPlatformDataLength,proto3" json:"ecd_platform_data_length,omitempty"`
	ChildrenCount         uint32         `protobuf:"varint,7,opt,name=children_count,json=childrenCount,proto3" json:"children_count,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}       `json:"-"`
	XXX_unrecognized      []byte         `json:"-"`
	XXX_sizecache         int32          `json:"-"`
}

func (m *L2FibNhopInfo) Reset()         { *m = L2FibNhopInfo{} }
func (m *L2FibNhopInfo) String() string { return proto.CompactTextString(m) }
func (*L2FibNhopInfo) ProtoMessage()    {}
func (*L2FibNhopInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_19dbae87ab6c393e, []int{10}
}

func (m *L2FibNhopInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2FibNhopInfo.Unmarshal(m, b)
}
func (m *L2FibNhopInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2FibNhopInfo.Marshal(b, m, deterministic)
}
func (m *L2FibNhopInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2FibNhopInfo.Merge(m, src)
}
func (m *L2FibNhopInfo) XXX_Size() int {
	return xxx_messageInfo_L2FibNhopInfo.Size(m)
}
func (m *L2FibNhopInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_L2FibNhopInfo.DiscardUnknown(m)
}

var xxx_messageInfo_L2FibNhopInfo proto.InternalMessageInfo

func (m *L2FibNhopInfo) GetBase() *L2FibBaseInfo {
	if m != nil {
		return m.Base
	}
	return nil
}

func (m *L2FibNhopInfo) GetNextHopAddress() string {
	if m != nil {
		return m.NextHopAddress
	}
	return ""
}

func (m *L2FibNhopInfo) GetNextHopAddressV6() string {
	if m != nil {
		return m.NextHopAddressV6
	}
	return ""
}

func (m *L2FibNhopInfo) GetNextHopInternalLabel() uint32 {
	if m != nil {
		return m.NextHopInternalLabel
	}
	return 0
}

func (m *L2FibNhopInfo) GetEcdPlaformtDataValid() bool {
	if m != nil {
		return m.EcdPlaformtDataValid
	}
	return false
}

func (m *L2FibNhopInfo) GetEcdPlatformDataLength() uint32 {
	if m != nil {
		return m.EcdPlatformDataLength
	}
	return 0
}

func (m *L2FibNhopInfo) GetChildrenCount() uint32 {
	if m != nil {
		return m.ChildrenCount
	}
	return 0
}

type L2FibBridgeP2MpPwInfo struct {
	PtreeType            string         `protobuf:"bytes,1,opt,name=ptree_type,json=ptreeType,proto3" json:"ptree_type,omitempty"`
	LsmId                uint32         `protobuf:"varint,2,opt,name=lsm_id,json=lsmId,proto3" json:"lsm_id,omitempty"`
	P2MpTeInterface      string         `protobuf:"bytes,3,opt,name=p2mp_te_interface,json=p2mpTeInterface,proto3" json:"p2mp_te_interface,omitempty"`
	ParentNhValid        bool           `protobuf:"varint,4,opt,name=parent_nh_valid,json=parentNhValid,proto3" json:"parent_nh_valid,omitempty"`
	ParentNhBound        bool           `protobuf:"varint,5,opt,name=parent_nh_bound,json=parentNhBound,proto3" json:"parent_nh_bound,omitempty"`
	ParentNextHop        *L2FibNhopInfo `protobuf:"bytes,6,opt,name=parent_next_hop,json=parentNextHop,proto3" json:"parent_next_hop,omitempty"`
	LocalLabel           uint32         `protobuf:"varint,7,opt,name=local_label,json=localLabel,proto3" json:"local_label,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *L2FibBridgeP2MpPwInfo) Reset()         { *m = L2FibBridgeP2MpPwInfo{} }
func (m *L2FibBridgeP2MpPwInfo) String() string { return proto.CompactTextString(m) }
func (*L2FibBridgeP2MpPwInfo) ProtoMessage()    {}
func (*L2FibBridgeP2MpPwInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_19dbae87ab6c393e, []int{11}
}

func (m *L2FibBridgeP2MpPwInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2FibBridgeP2MpPwInfo.Unmarshal(m, b)
}
func (m *L2FibBridgeP2MpPwInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2FibBridgeP2MpPwInfo.Marshal(b, m, deterministic)
}
func (m *L2FibBridgeP2MpPwInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2FibBridgeP2MpPwInfo.Merge(m, src)
}
func (m *L2FibBridgeP2MpPwInfo) XXX_Size() int {
	return xxx_messageInfo_L2FibBridgeP2MpPwInfo.Size(m)
}
func (m *L2FibBridgeP2MpPwInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_L2FibBridgeP2MpPwInfo.DiscardUnknown(m)
}

var xxx_messageInfo_L2FibBridgeP2MpPwInfo proto.InternalMessageInfo

func (m *L2FibBridgeP2MpPwInfo) GetPtreeType() string {
	if m != nil {
		return m.PtreeType
	}
	return ""
}

func (m *L2FibBridgeP2MpPwInfo) GetLsmId() uint32 {
	if m != nil {
		return m.LsmId
	}
	return 0
}

func (m *L2FibBridgeP2MpPwInfo) GetP2MpTeInterface() string {
	if m != nil {
		return m.P2MpTeInterface
	}
	return ""
}

func (m *L2FibBridgeP2MpPwInfo) GetParentNhValid() bool {
	if m != nil {
		return m.ParentNhValid
	}
	return false
}

func (m *L2FibBridgeP2MpPwInfo) GetParentNhBound() bool {
	if m != nil {
		return m.ParentNhBound
	}
	return false
}

func (m *L2FibBridgeP2MpPwInfo) GetParentNextHop() *L2FibNhopInfo {
	if m != nil {
		return m.ParentNextHop
	}
	return nil
}

func (m *L2FibBridgeP2MpPwInfo) GetLocalLabel() uint32 {
	if m != nil {
		return m.LocalLabel
	}
	return 0
}

type L2FibBridgeInfo struct {
	BridgeId             uint32                 `protobuf:"varint,50,opt,name=bridge_id,json=bridgeId,proto3" json:"bridge_id,omitempty"`
	BridgePortCount      uint32                 `protobuf:"varint,51,opt,name=bridge_port_count,json=bridgePortCount,proto3" json:"bridge_port_count,omitempty"`
	NumberOfHwmac        uint32                 `protobuf:"varint,52,opt,name=number_of_hwmac,json=numberOfHwmac,proto3" json:"number_of_hwmac,omitempty"`
	NumberOfSwmac        uint32                 `protobuf:"varint,53,opt,name=number_of_swmac,json=numberOfSwmac,proto3" json:"number_of_swmac,omitempty"`
	Base                 *L2FibBaseInfo         `protobuf:"bytes,54,opt,name=base,proto3" json:"base,omitempty"`
	BridgeName           string                 `protobuf:"bytes,55,opt,name=bridge_name,json=bridgeName,proto3" json:"bridge_name,omitempty"`
	ShgCount             uint32                 `protobuf:"varint,56,opt,name=shg_count,json=shgCount,proto3" json:"shg_count,omitempty"`
	Oper                 *L2FibOperBridgeInfo   `protobuf:"bytes,57,opt,name=oper,proto3" json:"oper,omitempty"`
	BridgeType           string                 `protobuf:"bytes,58,opt,name=bridge_type,json=bridgeType,proto3" json:"bridge_type,omitempty"`
	BdPbbUnion           *L2FibBridgePbbUn      `protobuf:"bytes,59,opt,name=bd_pbb_union,json=bdPbbUnion,proto3" json:"bd_pbb_union,omitempty"`
	BviInfo              *L2FibBridgeBviInfo    `protobuf:"bytes,60,opt,name=bvi_info,json=bviInfo,proto3" json:"bvi_info,omitempty"`
	P2MppwInfo           *L2FibBridgeP2MpPwInfo `protobuf:"bytes,61,opt,name=p2mppw_info,json=p2mppwInfo,proto3" json:"p2mppw_info,omitempty"`
	LearnKey             uint32                 `protobuf:"varint,62,opt,name=learn_key,json=learnKey,proto3" json:"learn_key,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *L2FibBridgeInfo) Reset()         { *m = L2FibBridgeInfo{} }
func (m *L2FibBridgeInfo) String() string { return proto.CompactTextString(m) }
func (*L2FibBridgeInfo) ProtoMessage()    {}
func (*L2FibBridgeInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_19dbae87ab6c393e, []int{12}
}

func (m *L2FibBridgeInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2FibBridgeInfo.Unmarshal(m, b)
}
func (m *L2FibBridgeInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2FibBridgeInfo.Marshal(b, m, deterministic)
}
func (m *L2FibBridgeInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2FibBridgeInfo.Merge(m, src)
}
func (m *L2FibBridgeInfo) XXX_Size() int {
	return xxx_messageInfo_L2FibBridgeInfo.Size(m)
}
func (m *L2FibBridgeInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_L2FibBridgeInfo.DiscardUnknown(m)
}

var xxx_messageInfo_L2FibBridgeInfo proto.InternalMessageInfo

func (m *L2FibBridgeInfo) GetBridgeId() uint32 {
	if m != nil {
		return m.BridgeId
	}
	return 0
}

func (m *L2FibBridgeInfo) GetBridgePortCount() uint32 {
	if m != nil {
		return m.BridgePortCount
	}
	return 0
}

func (m *L2FibBridgeInfo) GetNumberOfHwmac() uint32 {
	if m != nil {
		return m.NumberOfHwmac
	}
	return 0
}

func (m *L2FibBridgeInfo) GetNumberOfSwmac() uint32 {
	if m != nil {
		return m.NumberOfSwmac
	}
	return 0
}

func (m *L2FibBridgeInfo) GetBase() *L2FibBaseInfo {
	if m != nil {
		return m.Base
	}
	return nil
}

func (m *L2FibBridgeInfo) GetBridgeName() string {
	if m != nil {
		return m.BridgeName
	}
	return ""
}

func (m *L2FibBridgeInfo) GetShgCount() uint32 {
	if m != nil {
		return m.ShgCount
	}
	return 0
}

func (m *L2FibBridgeInfo) GetOper() *L2FibOperBridgeInfo {
	if m != nil {
		return m.Oper
	}
	return nil
}

func (m *L2FibBridgeInfo) GetBridgeType() string {
	if m != nil {
		return m.BridgeType
	}
	return ""
}

func (m *L2FibBridgeInfo) GetBdPbbUnion() *L2FibBridgePbbUn {
	if m != nil {
		return m.BdPbbUnion
	}
	return nil
}

func (m *L2FibBridgeInfo) GetBviInfo() *L2FibBridgeBviInfo {
	if m != nil {
		return m.BviInfo
	}
	return nil
}

func (m *L2FibBridgeInfo) GetP2MppwInfo() *L2FibBridgeP2MpPwInfo {
	if m != nil {
		return m.P2MppwInfo
	}
	return nil
}

func (m *L2FibBridgeInfo) GetLearnKey() uint32 {
	if m != nil {
		return m.LearnKey
	}
	return 0
}

func init() {
	proto.RegisterType((*L2FibBridgeInfo_KEYS)(nil), "cisco_ios_xr_l2vpn_oper.l2vpn_forwarding.nodes.node.l2fib_bridge_domains.l2fib_bridge_domain.l2fib_bridge_info_KEYS")
	proto.RegisterType((*L2FibBaseInfo)(nil), "cisco_ios_xr_l2vpn_oper.l2vpn_forwarding.nodes.node.l2fib_bridge_domains.l2fib_bridge_domain.l2fib_base_info")
	proto.RegisterType((*L2FibProfileInfo)(nil), "cisco_ios_xr_l2vpn_oper.l2vpn_forwarding.nodes.node.l2fib_bridge_domains.l2fib_bridge_domain.l2fib_profile_info")
	proto.RegisterType((*L2FibFeatureUn)(nil), "cisco_ios_xr_l2vpn_oper.l2vpn_forwarding.nodes.node.l2fib_bridge_domains.l2fib_bridge_domain.l2fib_feature_un")
	proto.RegisterType((*L2FibOperInfo)(nil), "cisco_ios_xr_l2vpn_oper.l2vpn_forwarding.nodes.node.l2fib_bridge_domains.l2fib_bridge_domain.l2fib_oper_info")
	proto.RegisterType((*L2FibOperBridgeInfo)(nil), "cisco_ios_xr_l2vpn_oper.l2vpn_forwarding.nodes.node.l2fib_bridge_domains.l2fib_bridge_domain.l2fib_oper_bridge_info")
	proto.RegisterType((*L2FibBridgePbbEdge)(nil), "cisco_ios_xr_l2vpn_oper.l2vpn_forwarding.nodes.node.l2fib_bridge_domains.l2fib_bridge_domain.l2fib_bridge_pbb_edge")
	proto.RegisterType((*L2FibBridgePbbCore)(nil), "cisco_ios_xr_l2vpn_oper.l2vpn_forwarding.nodes.node.l2fib_bridge_domains.l2fib_bridge_domain.l2fib_bridge_pbb_core")
	proto.RegisterType((*L2FibBridgePbbUn)(nil), "cisco_ios_xr_l2vpn_oper.l2vpn_forwarding.nodes.node.l2fib_bridge_domains.l2fib_bridge_domain.l2fib_bridge_pbb_un")
	proto.RegisterType((*L2FibBridgeBviInfo)(nil), "cisco_ios_xr_l2vpn_oper.l2vpn_forwarding.nodes.node.l2fib_bridge_domains.l2fib_bridge_domain.l2fib_bridge_bvi_info")
	proto.RegisterType((*L2FibNhopInfo)(nil), "cisco_ios_xr_l2vpn_oper.l2vpn_forwarding.nodes.node.l2fib_bridge_domains.l2fib_bridge_domain.l2fib_nhop_info")
	proto.RegisterType((*L2FibBridgeP2MpPwInfo)(nil), "cisco_ios_xr_l2vpn_oper.l2vpn_forwarding.nodes.node.l2fib_bridge_domains.l2fib_bridge_domain.l2fib_bridge_p2mp_pw_info")
	proto.RegisterType((*L2FibBridgeInfo)(nil), "cisco_ios_xr_l2vpn_oper.l2vpn_forwarding.nodes.node.l2fib_bridge_domains.l2fib_bridge_domain.l2fib_bridge_info")
}

func init() { proto.RegisterFile("l2fib_bridge_info.proto", fileDescriptor_19dbae87ab6c393e) }

var fileDescriptor_19dbae87ab6c393e = []byte{
	// 2358 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x59, 0x4b, 0x73, 0x1c, 0xb7,
	0x11, 0xae, 0x35, 0x57, 0xa2, 0x88, 0xe5, 0xf2, 0x31, 0x12, 0xc9, 0xa1, 0x28, 0x5a, 0xd2, 0xfa,
	0x45, 0x5b, 0x32, 0x13, 0x53, 0x2f, 0xcb, 0xb2, 0x5d, 0xa6, 0x44, 0xc9, 0xda, 0x88, 0x92, 0xb6,
	0x86, 0x94, 0x2a, 0xa9, 0x4a, 0x0a, 0xc1, 0x0c, 0xb0, 0xbb, 0x28, 0xcd, 0x2b, 0x03, 0xec, 0x2e,
	0x95, 0x5b, 0x52, 0xa9, 0xc4, 0xa7, 0x1c, 0x92, 0x4a, 0x55, 0x7e, 0x41, 0x7e, 0x85, 0x4f, 0xa9,
	0x1c, 0x72, 0xcd, 0xcf, 0xc9, 0x2d, 0xd5, 0x8d, 0xc1, 0xcc, 0xec, 0x83, 0xc7, 0x50, 0x17, 0xd6,
	0x4e, 0xe3, 0xfb, 0x1a, 0xdd, 0x8d, 0x6e, 0xa0, 0x01, 0x92, 0x8d, 0x70, 0xaf, 0x2b, 0x7d, 0xea,
	0x67, 0x92, 0xf7, 0x04, 0x95, 0x71, 0x37, 0xd9, 0x4d, 0xb3, 0x44, 0x27, 0xce, 0x2f, 0x03, 0xa9,
	0x82, 0x84, 0xca, 0x44, 0xd1, 0x93, 0x8c, 0x86, 0x7b, 0xc3, 0x34, 0xa6, 0x49, 0x2a, 0xb2, 0x5d,
	0xf3, 0xb3, 0x9b, 0x64, 0x23, 0x96, 0x71, 0x19, 0xf7, 0x76, 0xe3, 0x84, 0x0b, 0x85, 0x7f, 0x77,
	0xc7, 0x94, 0xf1, 0x24, 0x62, 0x32, 0x56, 0xb3, 0x84, 0xad, 0x98, 0xac, 0x4f, 0x4d, 0x4c, 0x9f,
	0x3d, 0xfe, 0xc5, 0x91, 0xb3, 0x41, 0xe6, 0x41, 0x15, 0x95, 0xdc, 0xad, 0x5d, 0xab, 0xed, 0x2c,
	0x78, 0xe7, 0xe1, 0xb3, 0xcd, 0x9d, 0x16, 0x69, 0xfa, 0x9c, 0xf6, 0xb2, 0x64, 0x90, 0xd2, 0x98,
	0x45, 0xc2, 0x7d, 0x0f, 0x87, 0x1b, 0x3e, 0xff, 0x1e, 0x64, 0x2f, 0x58, 0x24, 0x80, 0xec, 0x73,
	0x33, 0x3a, 0x67, 0xc8, 0x3e, 0x87, 0x81, 0xd6, 0x2a, 0x59, 0xce, 0xe7, 0x63, 0xca, 0xcc, 0xd6,
	0xba, 0x47, 0x1c, 0x23, 0x4a, 0xb3, 0xa4, 0x2b, 0x43, 0x23, 0x75, 0xae, 0x93, 0x45, 0xfb, 0x8d,
	0x6a, 0x8c, 0x0d, 0x8d, 0x5c, 0x86, 0xba, 0xfe, 0x3d, 0x47, 0x56, 0x0c, 0xb3, 0x2b, 0x98, 0x1e,
	0x64, 0x82, 0x0e, 0x62, 0xe0, 0xd9, 0x2f, 0xfd, 0x36, 0x2d, 0x78, 0xb9, 0xec, 0xf8, 0x6d, 0x2a,
	0x9c, 0x3f, 0xd4, 0x48, 0x9d, 0xf7, 0x83, 0x14, 0x0d, 0x6f, 0xec, 0xa5, 0xbb, 0xff, 0xcf, 0x08,
	0xef, 0x4e, 0xfb, 0xe6, 0xe1, 0xec, 0x68, 0x86, 0xec, 0x45, 0x29, 0x46, 0xe8, 0x9d, 0x98, 0x01,
	0xb3, 0x3b, 0xbf, 0xaf, 0x91, 0xb9, 0x28, 0xe4, 0x6e, 0xfd, 0x1d, 0x59, 0x01, 0x93, 0xb7, 0xfe,
	0xb9, 0x69, 0xf3, 0x02, 0xe6, 0x32, 0x19, 0xb0, 0x42, 0xe6, 0x22, 0x3d, 0xc0, 0x05, 0x6c, 0x7a,
	0xf0, 0xd3, 0xf9, 0x90, 0x2c, 0x45, 0x2c, 0xa0, 0xac, 0x27, 0xe3, 0x1e, 0xd5, 0x32, 0x4f, 0xbd,
	0xa6, 0xb7, 0x18, 0xb1, 0x60, 0x1f, 0x84, 0xc7, 0x32, 0x12, 0xce, 0x16, 0x59, 0x00, 0x54, 0x28,
	0x23, 0xa9, 0x31, 0xb6, 0x4d, 0xef, 0x42, 0xc4, 0x82, 0x43, 0xf8, 0x06, 0x15, 0xf1, 0x20, 0xf2,
	0x45, 0x46, 0x93, 0x2e, 0x8d, 0x58, 0xa0, 0xd0, 0xef, 0xa6, 0xb7, 0x68, 0xa4, 0x2f, 0xbb, 0xcf,
	0x59, 0xa0, 0x9c, 0x8f, 0xc8, 0x12, 0xe3, 0x91, 0x8c, 0x29, 0x97, 0x8a, 0xf9, 0xa1, 0xe0, 0xee,
	0xb9, 0x6b, 0xb5, 0x9d, 0x0b, 0x5e, 0x13, 0xa5, 0x07, 0xb9, 0xd0, 0xb9, 0x41, 0x56, 0xbb, 0x61,
	0x92, 0x40, 0x34, 0x4a, 0xe4, 0x79, 0x44, 0xae, 0xd8, 0x81, 0x02, 0xbc, 0x4f, 0xb6, 0x51, 0x46,
	0x07, 0xf1, 0x9b, 0x38, 0x19, 0xc5, 0x74, 0x10, 0xcb, 0x80, 0x29, 0x4d, 0x45, 0x6c, 0x88, 0xf3,
	0x48, 0xbc, 0x8c, 0xa0, 0x57, 0x06, 0xf3, 0xca, 0x40, 0x1e, 0x1b, 0x84, 0xb3, 0x43, 0x56, 0x0a,
	0xcf, 0x28, 0x0b, 0xb4, 0x4c, 0x62, 0xf7, 0x02, 0xe6, 0xf7, 0x92, 0x75, 0x70, 0x1f, 0xa5, 0xce,
	0x2e, 0xb9, 0x58, 0x22, 0x75, 0x3f, 0x13, 0xaa, 0x9f, 0x84, 0xdc, 0x5d, 0x40, 0x5f, 0x57, 0x2d,
	0xf8, 0xd8, 0x0e, 0x38, 0x7b, 0x64, 0x0d, 0xf1, 0x82, 0x65, 0xf1, 0x98, 0x37, 0x04, 0x8d, 0x02,
	0x65, 0x87, 0xf9, 0x58, 0xe1, 0xd0, 0xb7, 0xe4, 0x0a, 0x70, 0xd2, 0x24, 0xd3, 0x94, 0x83, 0x43,
	0xdd, 0x70, 0xa0, 0xfa, 0x25, 0xb5, 0x81, 0x54, 0x37, 0x62, 0x41, 0x27, 0xc9, 0xf4, 0x41, 0x32,
	0x8a, 0x9f, 0x00, 0xa0, 0xe0, 0x7f, 0x43, 0xb6, 0x4a, 0x1b, 0xe3, 0x44, 0xcb, 0xae, 0x0c, 0x18,
	0x58, 0x6f, 0x0a, 0x77, 0x11, 0x1d, 0x73, 0xad, 0xad, 0x2f, 0x2a, 0x00, 0xac, 0xe2, 0x2f, 0xc8,
	0x9a, 0x54, 0xb0, 0x84, 0x54, 0x89, 0x00, 0xca, 0xdd, 0xc6, 0xb1, 0x89, 0xf3, 0x3a, 0x52, 0x3d,
	0x67, 0xc1, 0x11, 0x0e, 0xd9, 0xf8, 0x7d, 0x47, 0xb6, 0xc7, 0x29, 0x61, 0xd2, 0xc3, 0x5c, 0xb2,
	0xd4, 0x25, 0xa4, 0x6e, 0x56, 0xa8, 0x87, 0x06, 0x61, 0x35, 0x7c, 0x46, 0x56, 0x2b, 0xf4, 0x7c,
	0x09, 0x96, 0xd1, 0xd2, 0xe5, 0xc8, 0x72, 0xf2, 0x35, 0x98, 0x9a, 0x8d, 0x05, 0x81, 0x48, 0x35,
	0x55, 0xfd, 0x81, 0x86, 0x78, 0xb9, 0x2b, 0x53, 0xb3, 0xed, 0x23, 0xe2, 0x28, 0x07, 0x38, 0x07,
	0xe4, 0xea, 0xb8, 0x86, 0x62, 0x25, 0x0b, 0x8b, 0x57, 0x51, 0xc7, 0x56, 0x45, 0x47, 0xb1, 0xa8,
	0xd6, 0xe6, 0xf1, 0xaa, 0x81, 0xd0, 0x3a, 0x48, 0x2a, 0xab, 0x06, 0xc2, 0xb9, 0x4f, 0xb6, 0x95,
	0x4e, 0xb2, 0x88, 0x06, 0x49, 0xac, 0xb3, 0x24, 0x9c, 0x4a, 0xcf, 0x8b, 0x26, 0x3d, 0x11, 0xf4,
	0xc8, 0x60, 0x26, 0xd2, 0xf3, 0x31, 0xb9, 0x3a, 0xae, 0xc2, 0xcf, 0x12, 0xc6, 0xc7, 0x94, 0x5c,
	0x42, 0x25, 0x57, 0xaa, 0x4a, 0x1e, 0x5a, 0xd0, 0xa9, 0x6a, 0xa2, 0x41, 0xa8, 0xc7, 0x6d, 0x59,
	0x9b, 0x56, 0xf3, 0xdc, 0x82, 0xac, 0x9a, 0x83, 0x49, 0x35, 0xd6, 0xa1, 0x8c, 0x69, 0x38, 0x29,
	0xa4, 0x76, 0xd7, 0x71, 0xe1, 0xb6, 0x66, 0xb8, 0xe4, 0x31, 0x2d, 0x5e, 0xc5, 0x52, 0x3b, 0x4f,
	0xc9, 0xf5, 0xd3, 0x7c, 0x2a, 0xf5, 0x6c, 0xa0, 0x9e, 0xed, 0x99, 0x5e, 0x9d, 0xae, 0xa9, 0x74,
	0xab, 0xd4, 0xe4, 0x4e, 0x6b, 0x2a, 0x1c, 0x2b, 0x34, 0x5d, 0x27, 0x8b, 0x70, 0x80, 0x14, 0xd1,
	0xd8, 0xc4, 0x68, 0x34, 0x40, 0x66, 0x9d, 0xb7, 0x10, 0x9d, 0x0d, 0x94, 0x16, 0xdc, 0xbd, 0x5c,
	0x42, 0x8e, 0x8d, 0x08, 0xd2, 0x42, 0x2a, 0xca, 0x99, 0x2c, 0xf4, 0x6c, 0x99, 0xb4, 0x90, 0xea,
	0x80, 0x49, 0xab, 0xe8, 0x19, 0xf9, 0x20, 0x47, 0x31, 0xce, 0x33, 0x3a, 0x64, 0xa1, 0xe4, 0xa6,
	0x48, 0x65, 0x3a, 0xbc, 0x5d, 0x50, 0xaf, 0x20, 0xf5, 0x7d, 0xa4, 0xee, 0x73, 0x9e, 0xbd, 0x2e,
	0x70, 0xed, 0x74, 0x78, 0xdb, 0x2a, 0x7b, 0x4d, 0x3e, 0x3d, 0x45, 0x99, 0x4a, 0x06, 0x59, 0x20,
	0x30, 0xd5, 0xad, 0xca, 0x6d, 0x54, 0xf9, 0xc1, 0x0c, 0x95, 0x47, 0x08, 0x7e, 0xce, 0x02, 0xab,
	0xf7, 0xd7, 0x64, 0xf7, 0x14, 0xbd, 0x5c, 0x28, 0x2d, 0x63, 0xf3, 0xbb, 0xaa, 0xfc, 0x7d, 0x54,
	0xbe, 0x33, 0x43, 0xf9, 0x41, 0xc9, 0xa8, 0xcc, 0x70, 0x8b, 0xac, 0xe7, 0x33, 0x4c, 0x6e, 0x19,
	0x57, 0xcd, 0x06, 0x89, 0x9a, 0x26, 0x36, 0x8b, 0x8f, 0xc9, 0xb2, 0x54, 0x54, 0xa6, 0xaa, 0x44,
	0x5f, 0x33, 0xc7, 0x88, 0x54, 0xed, 0x54, 0x15, 0xb8, 0x3b, 0x64, 0xc3, 0xe2, 0x26, 0xb5, 0x5f,
	0x47, 0xfc, 0x25, 0x83, 0x9f, 0x50, 0xff, 0x33, 0xd2, 0x92, 0x8a, 0x0e, 0xd3, 0x50, 0x51, 0x73,
	0xb0, 0x24, 0xa9, 0x96, 0x91, 0xfc, 0xad, 0xf1, 0xd6, 0x6a, 0x68, 0xd9, 0x95, 0x79, 0x9d, 0x86,
	0xea, 0x09, 0xe0, 0x5e, 0x56, 0x60, 0x56, 0xd7, 0x4d, 0xe2, 0x40, 0x33, 0x40, 0x55, 0x9c, 0x24,
	0x65, 0x62, 0x7d, 0x60, 0x8e, 0x32, 0x18, 0x39, 0x82, 0x01, 0x8b, 0x7e, 0x40, 0x2e, 0x57, 0xd0,
	0xf6, 0x34, 0xb7, 0xac, 0x0f, 0x91, 0xb5, 0x51, 0xb0, 0x3a, 0x66, 0x7c, 0x92, 0x6c, 0x6c, 0xce,
	0xfb, 0x89, 0x82, 0xfc, 0x51, 0x49, 0x46, 0x63, 0x9f, 0x98, 0x71, 0x4b, 0xbe, 0x47, 0x5c, 0x24,
	0x47, 0x59, 0x32, 0xd0, 0xc2, 0x9c, 0x3d, 0x96, 0xfa, 0x31, 0x52, 0xd7, 0x60, 0xfc, 0x39, 0x0e,
	0xc3, 0xb1, 0x33, 0x49, 0x34, 0xbc, 0xde, 0xa0, 0x3a, 0xe7, 0x27, 0x25, 0xd1, 0x83, 0xe1, 0xef,
	0x07, 0x95, 0x19, 0x61, 0xc7, 0x0f, 0xf9, 0x44, 0x60, 0x76, 0x90, 0xb1, 0x1c, 0x85, 0x7c, 0x2c,
	0x2e, 0xf7, 0xc9, 0x66, 0x89, 0x9d, 0x0c, 0xcb, 0xa7, 0xc8, 0x59, 0xb7, 0x9c, 0x89, 0xa8, 0xe4,
	0xd4, 0xd9, 0x41, 0xf9, 0xac, 0xa0, 0xce, 0x8a, 0xc9, 0x1d, 0xb2, 0x01, 0xd4, 0x59, 0x21, 0xb9,
	0x61, 0xd2, 0x27, 0x0a, 0xf9, 0x74, 0x44, 0x72, 0xda, 0xac, 0x80, 0xdc, 0x2c, 0x68, 0xd3, 0xf1,
	0xb8, 0x41, 0x56, 0x95, 0x4e, 0x69, 0xca, 0x32, 0x2d, 0x03, 0x99, 0x32, 0x2d, 0xe3, 0x9e, 0xfb,
	0xb9, 0x49, 0x14, 0xa5, 0xd3, 0x4e, 0x55, 0x0e, 0x7d, 0x94, 0x3f, 0x94, 0xb0, 0xe3, 0x75, 0x65,
	0x6f, 0x90, 0x09, 0xee, 0xee, 0x9a, 0x02, 0xf0, 0x87, 0xf2, 0x51, 0x21, 0x74, 0x2e, 0x93, 0x05,
	0xa9, 0x28, 0x20, 0x07, 0xa9, 0xfb, 0x13, 0x44, 0xcc, 0x4b, 0xf5, 0x70, 0x28, 0x5f, 0xa5, 0xf9,
	0x36, 0x35, 0x8c, 0xcb, 0x6d, 0xea, 0xa7, 0x76, 0x9b, 0x7a, 0x1d, 0xcb, 0xf1, 0x52, 0x13, 0xd0,
	0xa1, 0x5a, 0xd8, 0x17, 0xb6, 0xd4, 0x1e, 0x0f, 0xd3, 0x22, 0xcf, 0xdb, 0xe4, 0xfa, 0x64, 0xfb,
	0x35, 0xdd, 0xc1, 0xed, 0x99, 0x92, 0x19, 0x8c, 0xf5, 0x60, 0x4f, 0x26, 0xfb, 0x39, 0x28, 0x19,
	0x45, 0x53, 0xdf, 0x1f, 0x9b, 0xf5, 0x56, 0x5e, 0x32, 0xaa, 0x63, 0x06, 0x2a, 0x69, 0x24, 0x15,
	0x55, 0xa3, 0x6a, 0x97, 0xe5, 0xde, 0x36, 0x69, 0x24, 0xd5, 0xd1, 0xa8, 0xd2, 0x60, 0x39, 0x37,
	0x50, 0x33, 0xaa, 0xed, 0x86, 0xc9, 0x88, 0x86, 0xcc, 0x17, 0xa1, 0x7b, 0xc7, 0x82, 0xc1, 0x9f,
	0x27, 0x61, 0x32, 0x3a, 0x04, 0x71, 0x15, 0x1c, 0x8c, 0xac, 0x0f, 0xee, 0xdd, 0x2a, 0xf8, 0xd1,
	0x28, 0x37, 0xda, 0x71, 0x48, 0x3d, 0x52, 0x5a, 0xba, 0xf7, 0xb0, 0x0f, 0xc4, 0xdf, 0xb9, 0x82,
	0x74, 0x2f, 0x4a, 0x69, 0x3a, 0x2a, 0xfc, 0xf8, 0xd2, 0x2a, 0xe8, 0xec, 0x45, 0x69, 0x67, 0x64,
	0xdd, 0x30, 0x4d, 0xd7, 0x8c, 0xad, 0xe2, 0xbe, 0x6d, 0xba, 0xda, 0x93, 0x9b, 0xc5, 0xaf, 0xc8,
	0xcd, 0x78, 0x48, 0x15, 0xd3, 0x22, 0x0c, 0xa5, 0x16, 0x34, 0xe9, 0x76, 0xc3, 0x84, 0x71, 0x73,
	0x7e, 0x94, 0x67, 0x60, 0x11, 0xfd, 0xaf, 0x50, 0xd3, 0x27, 0xf1, 0xf0, 0xc8, 0x52, 0x5e, 0x1a,
	0x06, 0x9c, 0x24, 0xc5, 0x61, 0x58, 0x2c, 0xc3, 0x0f, 0x35, 0x32, 0x9f, 0x5f, 0xee, 0xdc, 0x07,
	0xd7, 0xe6, 0x76, 0x1a, 0x7b, 0xf1, 0x59, 0x5c, 0x61, 0xca, 0x1b, 0xa7, 0x67, 0xa7, 0x6f, 0xfd,
	0x58, 0xb7, 0x97, 0x69, 0xbc, 0xc4, 0x54, 0x6e, 0xd4, 0xce, 0x3f, 0x6a, 0x64, 0x03, 0x84, 0xb8,
	0xe9, 0xb2, 0x10, 0x85, 0x59, 0x84, 0x5f, 0x78, 0xc1, 0x69, 0xec, 0x45, 0x67, 0x61, 0x75, 0x71,
	0xb9, 0xf2, 0xd6, 0x2b, 0xd6, 0xb4, 0x4b, 0x63, 0x60, 0x1f, 0xb2, 0x85, 0x31, 0xde, 0xad, 0xa4,
	0xa9, 0xc2, 0xdb, 0x56, 0xdd, 0x5b, 0xcf, 0x01, 0x47, 0x95, 0x26, 0xa5, 0x93, 0x2a, 0xe7, 0x6b,
	0xb2, 0x35, 0x9b, 0xfa, 0xc6, 0xa7, 0xa9, 0xc2, 0x9b, 0x58, 0xdd, 0xdb, 0x98, 0x41, 0x7e, 0xe6,
	0x77, 0x14, 0xdc, 0x06, 0xca, 0xd6, 0x6a, 0x7a, 0xea, 0x3a, 0xb2, 0xdd, 0x02, 0x32, 0x39, 0xf9,
	0x77, 0x64, 0xfb, 0x34, 0xba, 0x99, 0xfe, 0x1c, 0x2a, 0xd8, 0x9c, 0xa9, 0xc0, 0x1a, 0x50, 0x66,
	0xe3, 0xb4, 0x01, 0xe7, 0x8d, 0x01, 0x05, 0x64, 0x86, 0x01, 0xa7, 0xd1, 0x8d, 0x01, 0xf3, 0xc6,
	0x80, 0x99, 0x0a, 0xc0, 0x80, 0xd6, 0x5f, 0x6a, 0x64, 0x6d, 0x6c, 0xe9, 0x52, 0xdf, 0xa7, 0x82,
	0xf7, 0x84, 0x73, 0x91, 0x9c, 0x93, 0x54, 0xe5, 0x0f, 0x31, 0x4d, 0xaf, 0x2e, 0x8f, 0x24, 0x77,
	0xae, 0x91, 0xc5, 0x20, 0xc9, 0x04, 0xb5, 0xef, 0x2c, 0xe6, 0x15, 0x86, 0x80, 0xec, 0x21, 0xbe,
	0xb5, 0x00, 0x22, 0x92, 0x59, 0x4a, 0xb1, 0xec, 0xb2, 0x93, 0x7c, 0x05, 0x08, 0xc8, 0x0e, 0xa5,
	0x16, 0xde, 0xc9, 0x38, 0x42, 0x9f, 0xe4, 0x51, 0x2e, 0x10, 0xc7, 0x27, 0xad, 0xfb, 0x33, 0x6c,
	0x82, 0x29, 0x80, 0x1a, 0xc3, 0x35, 0x1a, 0x0c, 0xa4, 0xbe, 0x35, 0x8d, 0x80, 0xec, 0x31, 0xef,
	0x89, 0x87, 0xbc, 0xf5, 0xaf, 0xf7, 0xc8, 0xc5, 0x29, 0xee, 0x20, 0x76, 0x36, 0xc9, 0x05, 0xf8,
	0x55, 0x79, 0x9d, 0x99, 0x4f, 0x7d, 0x1f, 0x2f, 0x21, 0x7f, 0xaa, 0x91, 0x3a, 0x28, 0xcc, 0x5f,
	0x66, 0xd4, 0x59, 0xd4, 0xc4, 0x44, 0xb0, 0x3d, 0x34, 0x00, 0x2d, 0x01, 0x3f, 0xf3, 0xc7, 0x99,
	0xb3, 0xb6, 0x04, 0xa6, 0xf6, 0xd0, 0x80, 0xd6, 0x7f, 0x26, 0xd3, 0x02, 0xce, 0x49, 0xdc, 0x54,
	0x36, 0xc8, 0x3c, 0xfe, 0xee, 0xf6, 0xed, 0x0b, 0x9d, 0x3f, 0x94, 0xed, 0x6e, 0xdf, 0x0e, 0x9c,
	0x48, 0x9e, 0x3f, 0x90, 0xc0, 0xc0, 0xcf, 0x25, 0x87, 0xd0, 0xc3, 0x40, 0xe5, 0x5d, 0x0e, 0x80,
	0x98, 0x2c, 0x57, 0x08, 0x81, 0x21, 0xd5, 0xef, 0x51, 0xc9, 0xf3, 0x47, 0x11, 0x00, 0x1f, 0xf5,
	0x7b, 0x6d, 0xee, 0x7c, 0x4a, 0x56, 0x65, 0xe6, 0xd3, 0x34, 0x64, 0x9a, 0x72, 0xa6, 0x19, 0x0d,
	0x45, 0x8c, 0x25, 0xd5, 0xf4, 0x96, 0x64, 0xe6, 0x77, 0x42, 0xa6, 0x0f, 0x98, 0x66, 0x87, 0x22,
	0x76, 0x5a, 0xa4, 0x39, 0x06, 0xc5, 0xca, 0x59, 0xf4, 0x1a, 0x15, 0x58, 0xeb, 0xc7, 0x39, 0xfb,
	0xdc, 0x13, 0xf7, 0x93, 0xd4, 0x78, 0xf3, 0xbb, 0x1a, 0xa9, 0xfb, 0x4c, 0x89, 0xb3, 0xdc, 0x0f,
	0x8b, 0x47, 0x48, 0x0f, 0xa7, 0x76, 0x76, 0xc8, 0x4a, 0x2c, 0x4e, 0x34, 0x05, 0xa3, 0xe0, 0x2a,
	0x21, 0x94, 0xca, 0xeb, 0x6a, 0x09, 0xe4, 0x4f, 0x93, 0x74, 0xdf, 0x48, 0x9d, 0xcf, 0xc9, 0xc5,
	0x49, 0x24, 0x1d, 0xde, 0xcd, 0x83, 0xba, 0x32, 0x0e, 0x7e, 0x7d, 0x17, 0x9a, 0xad, 0x02, 0x2e,
	0x63, 0x2d, 0x32, 0x38, 0x04, 0xcc, 0xb9, 0x6e, 0x42, 0x7d, 0x29, 0xa7, 0xb4, 0xf3, 0x41, 0x73,
	0xb8, 0xdf, 0x21, 0x1b, 0x22, 0xe0, 0x10, 0x4b, 0xd8, 0xa1, 0xf3, 0xd0, 0xe3, 0xf5, 0x26, 0x7f,
	0x90, 0xba, 0x24, 0x02, 0xde, 0xc9, 0x47, 0x21, 0xb2, 0x78, 0x8f, 0x81, 0x66, 0x37, 0xa7, 0x69,
	0x18, 0x29, 0x56, 0xac, 0xa7, 0xfb, 0xb8, 0x1a, 0x4d, 0x6f, 0xcd, 0xf0, 0x70, 0x38, 0x5f, 0xb8,
	0x9e, 0xee, 0x43, 0xbf, 0x16, 0xf4, 0x65, 0xc8, 0x33, 0x11, 0xd3, 0x20, 0x19, 0xc4, 0x1a, 0x77,
	0xad, 0xa6, 0xd7, 0xb4, 0xd2, 0x47, 0x20, 0x6c, 0xfd, 0x71, 0x8e, 0x6c, 0x8e, 0xa7, 0x6c, 0xde,
	0x3d, 0xe0, 0x42, 0x6e, 0x13, 0x92, 0xea, 0x4c, 0x8c, 0xbd, 0xbf, 0x2e, 0xa0, 0x04, 0x6b, 0x7c,
	0x8d, 0x9c, 0x0f, 0x55, 0x44, 0x8b, 0xdc, 0x3c, 0x17, 0xaa, 0xa8, 0x8d, 0x0d, 0x12, 0x6a, 0xd1,
	0xc2, 0x04, 0xa8, 0xcb, 0x02, 0x9b, 0xa3, 0xcb, 0x30, 0x70, 0x2c, 0xda, 0x56, 0x0c, 0xdd, 0x5e,
	0xca, 0x32, 0x11, 0x6b, 0x1a, 0xf7, 0xf3, 0x70, 0xd4, 0x4d, 0xb7, 0x67, 0xc4, 0x2f, 0xfa, 0x26,
	0x0e, 0x63, 0x38, 0x3f, 0x19, 0xc4, 0xc5, 0x3b, 0x9e, 0xc5, 0x3d, 0x04, 0xa1, 0xf3, 0xb7, 0x5a,
	0x09, 0xcc, 0x57, 0x09, 0xe3, 0x74, 0x46, 0x59, 0x58, 0xd4, 0x40, 0x61, 0x97, 0xc9, 0x05, 0xe7,
	0x2a, 0x69, 0x84, 0x49, 0x50, 0x64, 0x8a, 0x59, 0x0b, 0x82, 0x22, 0xcc, 0x8f, 0xd6, 0x7f, 0xe7,
	0xc9, 0xea, 0xd4, 0xf3, 0xbd, 0xb3, 0x45, 0x16, 0xec, 0xa7, 0x69, 0x66, 0xa1, 0x92, 0x51, 0x60,
	0xe2, 0x6c, 0x17, 0x0d, 0x6e, 0x0a, 0x66, 0x95, 0x6f, 0x21, 0x68, 0xd9, 0x0c, 0xc0, 0x25, 0x01,
	0xd7, 0x19, 0xe2, 0x57, 0x3e, 0x96, 0xf6, 0xa1, 0x47, 0xc5, 0x96, 0xb5, 0xe9, 0x35, 0xed, 0x6b,
	0xe9, 0x53, 0x10, 0x8e, 0xe3, 0xb0, 0xc7, 0xc5, 0x6e, 0xb5, 0x82, 0xc3, 0x06, 0xb7, 0x2c, 0xf1,
	0xbb, 0xef, 0xae, 0xc4, 0xaf, 0x92, 0x46, 0x0e, 0xc3, 0x5d, 0xf0, 0x9e, 0x39, 0x35, 0x8d, 0x08,
	0x37, 0xc2, 0x2d, 0xb2, 0x00, 0x9b, 0xa0, 0x09, 0xcc, 0x97, 0x26, 0x7a, 0xaa, 0xdf, 0x33, 0x11,
	0xf9, 0xa1, 0x46, 0xea, 0x60, 0x21, 0xf6, 0xbb, 0x8d, 0x3d, 0x7d, 0x66, 0x4d, 0x5b, 0x65, 0x7d,
	0x3d, 0xb4, 0xa0, 0xe2, 0x08, 0xd6, 0xd9, 0x57, 0x55, 0x47, 0xb0, 0xd0, 0xfe, 0x5a, 0x23, 0x8b,
	0x3e, 0xcf, 0x4f, 0x5d, 0x68, 0x34, 0x1f, 0xa0, 0xcd, 0xbf, 0x39, 0xe3, 0xa3, 0x6c, 0x10, 0x7b,
	0xc4, 0xe7, 0x1d, 0xdf, 0x7f, 0x05, 0x46, 0x38, 0x7f, 0xae, 0x99, 0x33, 0x08, 0x3c, 0x71, 0xbf,
	0x3e, 0xf3, 0xc3, 0xd5, 0x4e, 0x8d, 0x07, 0x1f, 0x34, 0xbe, 0xce, 0xdf, 0x6b, 0xa4, 0x01, 0x1b,
	0x4c, 0xbe, 0x7d, 0xb9, 0xdf, 0xa0, 0x4d, 0xa3, 0xb3, 0x8c, 0x52, 0x65, 0xf7, 0xf4, 0x88, 0xb1,
	0xa5, 0x9d, 0x17, 0x32, 0xde, 0x15, 0xe9, 0x1b, 0xf1, 0xd6, 0xfd, 0xd6, 0xa4, 0x22, 0x0a, 0x9e,
	0x89, 0xb7, 0xfe, 0x79, 0xfc, 0xf7, 0xe0, 0xad, 0xff, 0x05, 0x00, 0x00, 0xff, 0xff, 0xef, 0x10,
	0x17, 0x68, 0x39, 0x1c, 0x00, 0x00,
}
