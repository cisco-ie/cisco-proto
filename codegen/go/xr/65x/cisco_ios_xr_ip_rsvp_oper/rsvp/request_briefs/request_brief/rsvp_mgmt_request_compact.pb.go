/*
Copyright 2019 Cisco Systems

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rsvp_mgmt_request_compact.proto

package cisco_ios_xr_ip_rsvp_oper_rsvp_request_briefs_request_brief

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type RsvpMgmtRequestCompact_KEYS struct {
	DestinationAddress   string   `protobuf:"bytes,1,opt,name=destination_address,json=destinationAddress,proto3" json:"destination_address,omitempty"`
	DestinationPort      uint32   `protobuf:"varint,2,opt,name=destination_port,json=destinationPort,proto3" json:"destination_port,omitempty"`
	Protocol             uint32   `protobuf:"varint,3,opt,name=protocol,proto3" json:"protocol,omitempty"`
	ExtendedTunnelId     string   `protobuf:"bytes,4,opt,name=extended_tunnel_id,json=extendedTunnelId,proto3" json:"extended_tunnel_id,omitempty"`
	SessionType          string   `protobuf:"bytes,5,opt,name=session_type,json=sessionType,proto3" json:"session_type,omitempty"`
	P2MpId               uint32   `protobuf:"varint,6,opt,name=p2mp_id,json=p2mpId,proto3" json:"p2mp_id,omitempty"`
	SourceAddress        string   `protobuf:"bytes,7,opt,name=source_address,json=sourceAddress,proto3" json:"source_address,omitempty"`
	SourcePort           uint32   `protobuf:"varint,8,opt,name=source_port,json=sourcePort,proto3" json:"source_port,omitempty"`
	SubGroupOrigin       string   `protobuf:"bytes,9,opt,name=sub_group_origin,json=subGroupOrigin,proto3" json:"sub_group_origin,omitempty"`
	SubGroupId           uint32   `protobuf:"varint,10,opt,name=sub_group_id,json=subGroupId,proto3" json:"sub_group_id,omitempty"`
	VrfName              string   `protobuf:"bytes,11,opt,name=vrf_name,json=vrfName,proto3" json:"vrf_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RsvpMgmtRequestCompact_KEYS) Reset()         { *m = RsvpMgmtRequestCompact_KEYS{} }
func (m *RsvpMgmtRequestCompact_KEYS) String() string { return proto.CompactTextString(m) }
func (*RsvpMgmtRequestCompact_KEYS) ProtoMessage()    {}
func (*RsvpMgmtRequestCompact_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_31a66e56b3423b69, []int{0}
}

func (m *RsvpMgmtRequestCompact_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RsvpMgmtRequestCompact_KEYS.Unmarshal(m, b)
}
func (m *RsvpMgmtRequestCompact_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RsvpMgmtRequestCompact_KEYS.Marshal(b, m, deterministic)
}
func (m *RsvpMgmtRequestCompact_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RsvpMgmtRequestCompact_KEYS.Merge(m, src)
}
func (m *RsvpMgmtRequestCompact_KEYS) XXX_Size() int {
	return xxx_messageInfo_RsvpMgmtRequestCompact_KEYS.Size(m)
}
func (m *RsvpMgmtRequestCompact_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_RsvpMgmtRequestCompact_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_RsvpMgmtRequestCompact_KEYS proto.InternalMessageInfo

func (m *RsvpMgmtRequestCompact_KEYS) GetDestinationAddress() string {
	if m != nil {
		return m.DestinationAddress
	}
	return ""
}

func (m *RsvpMgmtRequestCompact_KEYS) GetDestinationPort() uint32 {
	if m != nil {
		return m.DestinationPort
	}
	return 0
}

func (m *RsvpMgmtRequestCompact_KEYS) GetProtocol() uint32 {
	if m != nil {
		return m.Protocol
	}
	return 0
}

func (m *RsvpMgmtRequestCompact_KEYS) GetExtendedTunnelId() string {
	if m != nil {
		return m.ExtendedTunnelId
	}
	return ""
}

func (m *RsvpMgmtRequestCompact_KEYS) GetSessionType() string {
	if m != nil {
		return m.SessionType
	}
	return ""
}

func (m *RsvpMgmtRequestCompact_KEYS) GetP2MpId() uint32 {
	if m != nil {
		return m.P2MpId
	}
	return 0
}

func (m *RsvpMgmtRequestCompact_KEYS) GetSourceAddress() string {
	if m != nil {
		return m.SourceAddress
	}
	return ""
}

func (m *RsvpMgmtRequestCompact_KEYS) GetSourcePort() uint32 {
	if m != nil {
		return m.SourcePort
	}
	return 0
}

func (m *RsvpMgmtRequestCompact_KEYS) GetSubGroupOrigin() string {
	if m != nil {
		return m.SubGroupOrigin
	}
	return ""
}

func (m *RsvpMgmtRequestCompact_KEYS) GetSubGroupId() uint32 {
	if m != nil {
		return m.SubGroupId
	}
	return 0
}

func (m *RsvpMgmtRequestCompact_KEYS) GetVrfName() string {
	if m != nil {
		return m.VrfName
	}
	return ""
}

type RsvpMgmtSessionUdpIpv4 struct {
	DestinationAddress   string   `protobuf:"bytes,1,opt,name=destination_address,json=destinationAddress,proto3" json:"destination_address,omitempty"`
	Protocol             uint32   `protobuf:"varint,2,opt,name=protocol,proto3" json:"protocol,omitempty"`
	DestinationPort      uint32   `protobuf:"varint,3,opt,name=destination_port,json=destinationPort,proto3" json:"destination_port,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RsvpMgmtSessionUdpIpv4) Reset()         { *m = RsvpMgmtSessionUdpIpv4{} }
func (m *RsvpMgmtSessionUdpIpv4) String() string { return proto.CompactTextString(m) }
func (*RsvpMgmtSessionUdpIpv4) ProtoMessage()    {}
func (*RsvpMgmtSessionUdpIpv4) Descriptor() ([]byte, []int) {
	return fileDescriptor_31a66e56b3423b69, []int{1}
}

func (m *RsvpMgmtSessionUdpIpv4) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RsvpMgmtSessionUdpIpv4.Unmarshal(m, b)
}
func (m *RsvpMgmtSessionUdpIpv4) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RsvpMgmtSessionUdpIpv4.Marshal(b, m, deterministic)
}
func (m *RsvpMgmtSessionUdpIpv4) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RsvpMgmtSessionUdpIpv4.Merge(m, src)
}
func (m *RsvpMgmtSessionUdpIpv4) XXX_Size() int {
	return xxx_messageInfo_RsvpMgmtSessionUdpIpv4.Size(m)
}
func (m *RsvpMgmtSessionUdpIpv4) XXX_DiscardUnknown() {
	xxx_messageInfo_RsvpMgmtSessionUdpIpv4.DiscardUnknown(m)
}

var xxx_messageInfo_RsvpMgmtSessionUdpIpv4 proto.InternalMessageInfo

func (m *RsvpMgmtSessionUdpIpv4) GetDestinationAddress() string {
	if m != nil {
		return m.DestinationAddress
	}
	return ""
}

func (m *RsvpMgmtSessionUdpIpv4) GetProtocol() uint32 {
	if m != nil {
		return m.Protocol
	}
	return 0
}

func (m *RsvpMgmtSessionUdpIpv4) GetDestinationPort() uint32 {
	if m != nil {
		return m.DestinationPort
	}
	return 0
}

type RsvpMgmtSessionLspTunnelIpv4 struct {
	DestinationAddress   string   `protobuf:"bytes,1,opt,name=destination_address,json=destinationAddress,proto3" json:"destination_address,omitempty"`
	TunnelId             uint32   `protobuf:"varint,2,opt,name=tunnel_id,json=tunnelId,proto3" json:"tunnel_id,omitempty"`
	ExtendedTunnelId     string   `protobuf:"bytes,3,opt,name=extended_tunnel_id,json=extendedTunnelId,proto3" json:"extended_tunnel_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RsvpMgmtSessionLspTunnelIpv4) Reset()         { *m = RsvpMgmtSessionLspTunnelIpv4{} }
func (m *RsvpMgmtSessionLspTunnelIpv4) String() string { return proto.CompactTextString(m) }
func (*RsvpMgmtSessionLspTunnelIpv4) ProtoMessage()    {}
func (*RsvpMgmtSessionLspTunnelIpv4) Descriptor() ([]byte, []int) {
	return fileDescriptor_31a66e56b3423b69, []int{2}
}

func (m *RsvpMgmtSessionLspTunnelIpv4) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RsvpMgmtSessionLspTunnelIpv4.Unmarshal(m, b)
}
func (m *RsvpMgmtSessionLspTunnelIpv4) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RsvpMgmtSessionLspTunnelIpv4.Marshal(b, m, deterministic)
}
func (m *RsvpMgmtSessionLspTunnelIpv4) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RsvpMgmtSessionLspTunnelIpv4.Merge(m, src)
}
func (m *RsvpMgmtSessionLspTunnelIpv4) XXX_Size() int {
	return xxx_messageInfo_RsvpMgmtSessionLspTunnelIpv4.Size(m)
}
func (m *RsvpMgmtSessionLspTunnelIpv4) XXX_DiscardUnknown() {
	xxx_messageInfo_RsvpMgmtSessionLspTunnelIpv4.DiscardUnknown(m)
}

var xxx_messageInfo_RsvpMgmtSessionLspTunnelIpv4 proto.InternalMessageInfo

func (m *RsvpMgmtSessionLspTunnelIpv4) GetDestinationAddress() string {
	if m != nil {
		return m.DestinationAddress
	}
	return ""
}

func (m *RsvpMgmtSessionLspTunnelIpv4) GetTunnelId() uint32 {
	if m != nil {
		return m.TunnelId
	}
	return 0
}

func (m *RsvpMgmtSessionLspTunnelIpv4) GetExtendedTunnelId() string {
	if m != nil {
		return m.ExtendedTunnelId
	}
	return ""
}

type RsvpMgmtSessionUniIpv4 struct {
	DestinationAddress   string   `protobuf:"bytes,1,opt,name=destination_address,json=destinationAddress,proto3" json:"destination_address,omitempty"`
	TunnelId             uint32   `protobuf:"varint,2,opt,name=tunnel_id,json=tunnelId,proto3" json:"tunnel_id,omitempty"`
	ExtendedAddress      string   `protobuf:"bytes,3,opt,name=extended_address,json=extendedAddress,proto3" json:"extended_address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RsvpMgmtSessionUniIpv4) Reset()         { *m = RsvpMgmtSessionUniIpv4{} }
func (m *RsvpMgmtSessionUniIpv4) String() string { return proto.CompactTextString(m) }
func (*RsvpMgmtSessionUniIpv4) ProtoMessage()    {}
func (*RsvpMgmtSessionUniIpv4) Descriptor() ([]byte, []int) {
	return fileDescriptor_31a66e56b3423b69, []int{3}
}

func (m *RsvpMgmtSessionUniIpv4) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RsvpMgmtSessionUniIpv4.Unmarshal(m, b)
}
func (m *RsvpMgmtSessionUniIpv4) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RsvpMgmtSessionUniIpv4.Marshal(b, m, deterministic)
}
func (m *RsvpMgmtSessionUniIpv4) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RsvpMgmtSessionUniIpv4.Merge(m, src)
}
func (m *RsvpMgmtSessionUniIpv4) XXX_Size() int {
	return xxx_messageInfo_RsvpMgmtSessionUniIpv4.Size(m)
}
func (m *RsvpMgmtSessionUniIpv4) XXX_DiscardUnknown() {
	xxx_messageInfo_RsvpMgmtSessionUniIpv4.DiscardUnknown(m)
}

var xxx_messageInfo_RsvpMgmtSessionUniIpv4 proto.InternalMessageInfo

func (m *RsvpMgmtSessionUniIpv4) GetDestinationAddress() string {
	if m != nil {
		return m.DestinationAddress
	}
	return ""
}

func (m *RsvpMgmtSessionUniIpv4) GetTunnelId() uint32 {
	if m != nil {
		return m.TunnelId
	}
	return 0
}

func (m *RsvpMgmtSessionUniIpv4) GetExtendedAddress() string {
	if m != nil {
		return m.ExtendedAddress
	}
	return ""
}

type RsvpMgmtSessionP2MpLspTunnelIpv4 struct {
	P2MpId               uint32   `protobuf:"varint,1,opt,name=p2mp_id,json=p2mpId,proto3" json:"p2mp_id,omitempty"`
	TunnelId             uint32   `protobuf:"varint,2,opt,name=tunnel_id,json=tunnelId,proto3" json:"tunnel_id,omitempty"`
	ExtendedTunnelId     string   `protobuf:"bytes,3,opt,name=extended_tunnel_id,json=extendedTunnelId,proto3" json:"extended_tunnel_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RsvpMgmtSessionP2MpLspTunnelIpv4) Reset()         { *m = RsvpMgmtSessionP2MpLspTunnelIpv4{} }
func (m *RsvpMgmtSessionP2MpLspTunnelIpv4) String() string { return proto.CompactTextString(m) }
func (*RsvpMgmtSessionP2MpLspTunnelIpv4) ProtoMessage()    {}
func (*RsvpMgmtSessionP2MpLspTunnelIpv4) Descriptor() ([]byte, []int) {
	return fileDescriptor_31a66e56b3423b69, []int{4}
}

func (m *RsvpMgmtSessionP2MpLspTunnelIpv4) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RsvpMgmtSessionP2MpLspTunnelIpv4.Unmarshal(m, b)
}
func (m *RsvpMgmtSessionP2MpLspTunnelIpv4) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RsvpMgmtSessionP2MpLspTunnelIpv4.Marshal(b, m, deterministic)
}
func (m *RsvpMgmtSessionP2MpLspTunnelIpv4) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RsvpMgmtSessionP2MpLspTunnelIpv4.Merge(m, src)
}
func (m *RsvpMgmtSessionP2MpLspTunnelIpv4) XXX_Size() int {
	return xxx_messageInfo_RsvpMgmtSessionP2MpLspTunnelIpv4.Size(m)
}
func (m *RsvpMgmtSessionP2MpLspTunnelIpv4) XXX_DiscardUnknown() {
	xxx_messageInfo_RsvpMgmtSessionP2MpLspTunnelIpv4.DiscardUnknown(m)
}

var xxx_messageInfo_RsvpMgmtSessionP2MpLspTunnelIpv4 proto.InternalMessageInfo

func (m *RsvpMgmtSessionP2MpLspTunnelIpv4) GetP2MpId() uint32 {
	if m != nil {
		return m.P2MpId
	}
	return 0
}

func (m *RsvpMgmtSessionP2MpLspTunnelIpv4) GetTunnelId() uint32 {
	if m != nil {
		return m.TunnelId
	}
	return 0
}

func (m *RsvpMgmtSessionP2MpLspTunnelIpv4) GetExtendedTunnelId() string {
	if m != nil {
		return m.ExtendedTunnelId
	}
	return ""
}

type RsvpSessionUnion struct {
	SessionType          string                            `protobuf:"bytes,1,opt,name=session_type,json=sessionType,proto3" json:"session_type,omitempty"`
	Ipv4                 *RsvpMgmtSessionUdpIpv4           `protobuf:"bytes,2,opt,name=ipv4,proto3" json:"ipv4,omitempty"`
	Ipv4LspSession       *RsvpMgmtSessionLspTunnelIpv4     `protobuf:"bytes,3,opt,name=ipv4_lsp_session,json=ipv4LspSession,proto3" json:"ipv4_lsp_session,omitempty"`
	Ipv4UniSession       *RsvpMgmtSessionUniIpv4           `protobuf:"bytes,4,opt,name=ipv4_uni_session,json=ipv4UniSession,proto3" json:"ipv4_uni_session,omitempty"`
	Ipv4P2MpLspSession   *RsvpMgmtSessionP2MpLspTunnelIpv4 `protobuf:"bytes,5,opt,name=ipv4_p2mp_lsp_session,json=ipv4P2mpLspSession,proto3" json:"ipv4_p2mp_lsp_session,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                          `json:"-"`
	XXX_unrecognized     []byte                            `json:"-"`
	XXX_sizecache        int32                             `json:"-"`
}

func (m *RsvpSessionUnion) Reset()         { *m = RsvpSessionUnion{} }
func (m *RsvpSessionUnion) String() string { return proto.CompactTextString(m) }
func (*RsvpSessionUnion) ProtoMessage()    {}
func (*RsvpSessionUnion) Descriptor() ([]byte, []int) {
	return fileDescriptor_31a66e56b3423b69, []int{5}
}

func (m *RsvpSessionUnion) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RsvpSessionUnion.Unmarshal(m, b)
}
func (m *RsvpSessionUnion) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RsvpSessionUnion.Marshal(b, m, deterministic)
}
func (m *RsvpSessionUnion) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RsvpSessionUnion.Merge(m, src)
}
func (m *RsvpSessionUnion) XXX_Size() int {
	return xxx_messageInfo_RsvpSessionUnion.Size(m)
}
func (m *RsvpSessionUnion) XXX_DiscardUnknown() {
	xxx_messageInfo_RsvpSessionUnion.DiscardUnknown(m)
}

var xxx_messageInfo_RsvpSessionUnion proto.InternalMessageInfo

func (m *RsvpSessionUnion) GetSessionType() string {
	if m != nil {
		return m.SessionType
	}
	return ""
}

func (m *RsvpSessionUnion) GetIpv4() *RsvpMgmtSessionUdpIpv4 {
	if m != nil {
		return m.Ipv4
	}
	return nil
}

func (m *RsvpSessionUnion) GetIpv4LspSession() *RsvpMgmtSessionLspTunnelIpv4 {
	if m != nil {
		return m.Ipv4LspSession
	}
	return nil
}

func (m *RsvpSessionUnion) GetIpv4UniSession() *RsvpMgmtSessionUniIpv4 {
	if m != nil {
		return m.Ipv4UniSession
	}
	return nil
}

func (m *RsvpSessionUnion) GetIpv4P2MpLspSession() *RsvpMgmtSessionP2MpLspTunnelIpv4 {
	if m != nil {
		return m.Ipv4P2MpLspSession
	}
	return nil
}

type RsvpMgmtSessionInfo struct {
	RsvpSession          *RsvpSessionUnion `protobuf:"bytes,1,opt,name=rsvp_session,json=rsvpSession,proto3" json:"rsvp_session,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *RsvpMgmtSessionInfo) Reset()         { *m = RsvpMgmtSessionInfo{} }
func (m *RsvpMgmtSessionInfo) String() string { return proto.CompactTextString(m) }
func (*RsvpMgmtSessionInfo) ProtoMessage()    {}
func (*RsvpMgmtSessionInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_31a66e56b3423b69, []int{6}
}

func (m *RsvpMgmtSessionInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RsvpMgmtSessionInfo.Unmarshal(m, b)
}
func (m *RsvpMgmtSessionInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RsvpMgmtSessionInfo.Marshal(b, m, deterministic)
}
func (m *RsvpMgmtSessionInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RsvpMgmtSessionInfo.Merge(m, src)
}
func (m *RsvpMgmtSessionInfo) XXX_Size() int {
	return xxx_messageInfo_RsvpMgmtSessionInfo.Size(m)
}
func (m *RsvpMgmtSessionInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_RsvpMgmtSessionInfo.DiscardUnknown(m)
}

var xxx_messageInfo_RsvpMgmtSessionInfo proto.InternalMessageInfo

func (m *RsvpMgmtSessionInfo) GetRsvpSession() *RsvpSessionUnion {
	if m != nil {
		return m.RsvpSession
	}
	return nil
}

type RsvpMgmtS2LSubLspIpv4 struct {
	S2LDestinationAddress string   `protobuf:"bytes,1,opt,name=s2l_destination_address,json=s2lDestinationAddress,proto3" json:"s2l_destination_address,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *RsvpMgmtS2LSubLspIpv4) Reset()         { *m = RsvpMgmtS2LSubLspIpv4{} }
func (m *RsvpMgmtS2LSubLspIpv4) String() string { return proto.CompactTextString(m) }
func (*RsvpMgmtS2LSubLspIpv4) ProtoMessage()    {}
func (*RsvpMgmtS2LSubLspIpv4) Descriptor() ([]byte, []int) {
	return fileDescriptor_31a66e56b3423b69, []int{7}
}

func (m *RsvpMgmtS2LSubLspIpv4) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RsvpMgmtS2LSubLspIpv4.Unmarshal(m, b)
}
func (m *RsvpMgmtS2LSubLspIpv4) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RsvpMgmtS2LSubLspIpv4.Marshal(b, m, deterministic)
}
func (m *RsvpMgmtS2LSubLspIpv4) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RsvpMgmtS2LSubLspIpv4.Merge(m, src)
}
func (m *RsvpMgmtS2LSubLspIpv4) XXX_Size() int {
	return xxx_messageInfo_RsvpMgmtS2LSubLspIpv4.Size(m)
}
func (m *RsvpMgmtS2LSubLspIpv4) XXX_DiscardUnknown() {
	xxx_messageInfo_RsvpMgmtS2LSubLspIpv4.DiscardUnknown(m)
}

var xxx_messageInfo_RsvpMgmtS2LSubLspIpv4 proto.InternalMessageInfo

func (m *RsvpMgmtS2LSubLspIpv4) GetS2LDestinationAddress() string {
	if m != nil {
		return m.S2LDestinationAddress
	}
	return ""
}

type RsvpMgmtFlowSpec struct {
	FlowAverageRate      uint64   `protobuf:"varint,1,opt,name=flow_average_rate,json=flowAverageRate,proto3" json:"flow_average_rate,omitempty"`
	FlowMaxBurst         uint64   `protobuf:"varint,2,opt,name=flow_max_burst,json=flowMaxBurst,proto3" json:"flow_max_burst,omitempty"`
	FlowPeakRate         uint64   `protobuf:"varint,3,opt,name=flow_peak_rate,json=flowPeakRate,proto3" json:"flow_peak_rate,omitempty"`
	FlowMinUnit          uint32   `protobuf:"varint,4,opt,name=flow_min_unit,json=flowMinUnit,proto3" json:"flow_min_unit,omitempty"`
	FlowMaxUnit          uint32   `protobuf:"varint,5,opt,name=flow_max_unit,json=flowMaxUnit,proto3" json:"flow_max_unit,omitempty"`
	FlowRequestedRate    uint64   `protobuf:"varint,6,opt,name=flow_requested_rate,json=flowRequestedRate,proto3" json:"flow_requested_rate,omitempty"`
	FlowSlack            uint32   `protobuf:"varint,7,opt,name=flow_slack,json=flowSlack,proto3" json:"flow_slack,omitempty"`
	FlowQos              string   `protobuf:"bytes,8,opt,name=flow_qos,json=flowQos,proto3" json:"flow_qos,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RsvpMgmtFlowSpec) Reset()         { *m = RsvpMgmtFlowSpec{} }
func (m *RsvpMgmtFlowSpec) String() string { return proto.CompactTextString(m) }
func (*RsvpMgmtFlowSpec) ProtoMessage()    {}
func (*RsvpMgmtFlowSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_31a66e56b3423b69, []int{8}
}

func (m *RsvpMgmtFlowSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RsvpMgmtFlowSpec.Unmarshal(m, b)
}
func (m *RsvpMgmtFlowSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RsvpMgmtFlowSpec.Marshal(b, m, deterministic)
}
func (m *RsvpMgmtFlowSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RsvpMgmtFlowSpec.Merge(m, src)
}
func (m *RsvpMgmtFlowSpec) XXX_Size() int {
	return xxx_messageInfo_RsvpMgmtFlowSpec.Size(m)
}
func (m *RsvpMgmtFlowSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_RsvpMgmtFlowSpec.DiscardUnknown(m)
}

var xxx_messageInfo_RsvpMgmtFlowSpec proto.InternalMessageInfo

func (m *RsvpMgmtFlowSpec) GetFlowAverageRate() uint64 {
	if m != nil {
		return m.FlowAverageRate
	}
	return 0
}

func (m *RsvpMgmtFlowSpec) GetFlowMaxBurst() uint64 {
	if m != nil {
		return m.FlowMaxBurst
	}
	return 0
}

func (m *RsvpMgmtFlowSpec) GetFlowPeakRate() uint64 {
	if m != nil {
		return m.FlowPeakRate
	}
	return 0
}

func (m *RsvpMgmtFlowSpec) GetFlowMinUnit() uint32 {
	if m != nil {
		return m.FlowMinUnit
	}
	return 0
}

func (m *RsvpMgmtFlowSpec) GetFlowMaxUnit() uint32 {
	if m != nil {
		return m.FlowMaxUnit
	}
	return 0
}

func (m *RsvpMgmtFlowSpec) GetFlowRequestedRate() uint64 {
	if m != nil {
		return m.FlowRequestedRate
	}
	return 0
}

func (m *RsvpMgmtFlowSpec) GetFlowSlack() uint32 {
	if m != nil {
		return m.FlowSlack
	}
	return 0
}

func (m *RsvpMgmtFlowSpec) GetFlowQos() string {
	if m != nil {
		return m.FlowQos
	}
	return ""
}

type RsvpMgmtFlowSpecG709Otn struct {
	FlowSignalType       uint32   `protobuf:"varint,1,opt,name=flow_signal_type,json=flowSignalType,proto3" json:"flow_signal_type,omitempty"`
	FlowNvc              uint32   `protobuf:"varint,2,opt,name=flow_nvc,json=flowNvc,proto3" json:"flow_nvc,omitempty"`
	FlowMultiplier       uint32   `protobuf:"varint,3,opt,name=flow_multiplier,json=flowMultiplier,proto3" json:"flow_multiplier,omitempty"`
	FlowBitRate          uint64   `protobuf:"varint,4,opt,name=flow_bit_rate,json=flowBitRate,proto3" json:"flow_bit_rate,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RsvpMgmtFlowSpecG709Otn) Reset()         { *m = RsvpMgmtFlowSpecG709Otn{} }
func (m *RsvpMgmtFlowSpecG709Otn) String() string { return proto.CompactTextString(m) }
func (*RsvpMgmtFlowSpecG709Otn) ProtoMessage()    {}
func (*RsvpMgmtFlowSpecG709Otn) Descriptor() ([]byte, []int) {
	return fileDescriptor_31a66e56b3423b69, []int{9}
}

func (m *RsvpMgmtFlowSpecG709Otn) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RsvpMgmtFlowSpecG709Otn.Unmarshal(m, b)
}
func (m *RsvpMgmtFlowSpecG709Otn) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RsvpMgmtFlowSpecG709Otn.Marshal(b, m, deterministic)
}
func (m *RsvpMgmtFlowSpecG709Otn) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RsvpMgmtFlowSpecG709Otn.Merge(m, src)
}
func (m *RsvpMgmtFlowSpecG709Otn) XXX_Size() int {
	return xxx_messageInfo_RsvpMgmtFlowSpecG709Otn.Size(m)
}
func (m *RsvpMgmtFlowSpecG709Otn) XXX_DiscardUnknown() {
	xxx_messageInfo_RsvpMgmtFlowSpecG709Otn.DiscardUnknown(m)
}

var xxx_messageInfo_RsvpMgmtFlowSpecG709Otn proto.InternalMessageInfo

func (m *RsvpMgmtFlowSpecG709Otn) GetFlowSignalType() uint32 {
	if m != nil {
		return m.FlowSignalType
	}
	return 0
}

func (m *RsvpMgmtFlowSpecG709Otn) GetFlowNvc() uint32 {
	if m != nil {
		return m.FlowNvc
	}
	return 0
}

func (m *RsvpMgmtFlowSpecG709Otn) GetFlowMultiplier() uint32 {
	if m != nil {
		return m.FlowMultiplier
	}
	return 0
}

func (m *RsvpMgmtFlowSpecG709Otn) GetFlowBitRate() uint64 {
	if m != nil {
		return m.FlowBitRate
	}
	return 0
}

type RsvpMgmtGenFlowSpec struct {
	FlowSpecType         string                   `protobuf:"bytes,1,opt,name=flow_spec_type,json=flowSpecType,proto3" json:"flow_spec_type,omitempty"`
	G709OtnFlowSpec      *RsvpMgmtFlowSpecG709Otn `protobuf:"bytes,2,opt,name=g709otn_flow_spec,json=g709otnFlowSpec,proto3" json:"g709otn_flow_spec,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *RsvpMgmtGenFlowSpec) Reset()         { *m = RsvpMgmtGenFlowSpec{} }
func (m *RsvpMgmtGenFlowSpec) String() string { return proto.CompactTextString(m) }
func (*RsvpMgmtGenFlowSpec) ProtoMessage()    {}
func (*RsvpMgmtGenFlowSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_31a66e56b3423b69, []int{10}
}

func (m *RsvpMgmtGenFlowSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RsvpMgmtGenFlowSpec.Unmarshal(m, b)
}
func (m *RsvpMgmtGenFlowSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RsvpMgmtGenFlowSpec.Marshal(b, m, deterministic)
}
func (m *RsvpMgmtGenFlowSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RsvpMgmtGenFlowSpec.Merge(m, src)
}
func (m *RsvpMgmtGenFlowSpec) XXX_Size() int {
	return xxx_messageInfo_RsvpMgmtGenFlowSpec.Size(m)
}
func (m *RsvpMgmtGenFlowSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_RsvpMgmtGenFlowSpec.DiscardUnknown(m)
}

var xxx_messageInfo_RsvpMgmtGenFlowSpec proto.InternalMessageInfo

func (m *RsvpMgmtGenFlowSpec) GetFlowSpecType() string {
	if m != nil {
		return m.FlowSpecType
	}
	return ""
}

func (m *RsvpMgmtGenFlowSpec) GetG709OtnFlowSpec() *RsvpMgmtFlowSpecG709Otn {
	if m != nil {
		return m.G709OtnFlowSpec
	}
	return nil
}

type RsvpMgmtFilterIpv4 struct {
	SourceAddress        string   `protobuf:"bytes,1,opt,name=source_address,json=sourceAddress,proto3" json:"source_address,omitempty"`
	SourcePort           uint32   `protobuf:"varint,2,opt,name=source_port,json=sourcePort,proto3" json:"source_port,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RsvpMgmtFilterIpv4) Reset()         { *m = RsvpMgmtFilterIpv4{} }
func (m *RsvpMgmtFilterIpv4) String() string { return proto.CompactTextString(m) }
func (*RsvpMgmtFilterIpv4) ProtoMessage()    {}
func (*RsvpMgmtFilterIpv4) Descriptor() ([]byte, []int) {
	return fileDescriptor_31a66e56b3423b69, []int{11}
}

func (m *RsvpMgmtFilterIpv4) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RsvpMgmtFilterIpv4.Unmarshal(m, b)
}
func (m *RsvpMgmtFilterIpv4) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RsvpMgmtFilterIpv4.Marshal(b, m, deterministic)
}
func (m *RsvpMgmtFilterIpv4) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RsvpMgmtFilterIpv4.Merge(m, src)
}
func (m *RsvpMgmtFilterIpv4) XXX_Size() int {
	return xxx_messageInfo_RsvpMgmtFilterIpv4.Size(m)
}
func (m *RsvpMgmtFilterIpv4) XXX_DiscardUnknown() {
	xxx_messageInfo_RsvpMgmtFilterIpv4.DiscardUnknown(m)
}

var xxx_messageInfo_RsvpMgmtFilterIpv4 proto.InternalMessageInfo

func (m *RsvpMgmtFilterIpv4) GetSourceAddress() string {
	if m != nil {
		return m.SourceAddress
	}
	return ""
}

func (m *RsvpMgmtFilterIpv4) GetSourcePort() uint32 {
	if m != nil {
		return m.SourcePort
	}
	return 0
}

type RsvpMgmtFilterP2MpIpv4 struct {
	SourceAddress        string   `protobuf:"bytes,1,opt,name=source_address,json=sourceAddress,proto3" json:"source_address,omitempty"`
	SourcePort           uint32   `protobuf:"varint,2,opt,name=source_port,json=sourcePort,proto3" json:"source_port,omitempty"`
	P2MpSubGroupOrigin   string   `protobuf:"bytes,3,opt,name=p2mp_sub_group_origin,json=p2mpSubGroupOrigin,proto3" json:"p2mp_sub_group_origin,omitempty"`
	SubGroupId           uint32   `protobuf:"varint,4,opt,name=sub_group_id,json=subGroupId,proto3" json:"sub_group_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RsvpMgmtFilterP2MpIpv4) Reset()         { *m = RsvpMgmtFilterP2MpIpv4{} }
func (m *RsvpMgmtFilterP2MpIpv4) String() string { return proto.CompactTextString(m) }
func (*RsvpMgmtFilterP2MpIpv4) ProtoMessage()    {}
func (*RsvpMgmtFilterP2MpIpv4) Descriptor() ([]byte, []int) {
	return fileDescriptor_31a66e56b3423b69, []int{12}
}

func (m *RsvpMgmtFilterP2MpIpv4) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RsvpMgmtFilterP2MpIpv4.Unmarshal(m, b)
}
func (m *RsvpMgmtFilterP2MpIpv4) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RsvpMgmtFilterP2MpIpv4.Marshal(b, m, deterministic)
}
func (m *RsvpMgmtFilterP2MpIpv4) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RsvpMgmtFilterP2MpIpv4.Merge(m, src)
}
func (m *RsvpMgmtFilterP2MpIpv4) XXX_Size() int {
	return xxx_messageInfo_RsvpMgmtFilterP2MpIpv4.Size(m)
}
func (m *RsvpMgmtFilterP2MpIpv4) XXX_DiscardUnknown() {
	xxx_messageInfo_RsvpMgmtFilterP2MpIpv4.DiscardUnknown(m)
}

var xxx_messageInfo_RsvpMgmtFilterP2MpIpv4 proto.InternalMessageInfo

func (m *RsvpMgmtFilterP2MpIpv4) GetSourceAddress() string {
	if m != nil {
		return m.SourceAddress
	}
	return ""
}

func (m *RsvpMgmtFilterP2MpIpv4) GetSourcePort() uint32 {
	if m != nil {
		return m.SourcePort
	}
	return 0
}

func (m *RsvpMgmtFilterP2MpIpv4) GetP2MpSubGroupOrigin() string {
	if m != nil {
		return m.P2MpSubGroupOrigin
	}
	return ""
}

func (m *RsvpMgmtFilterP2MpIpv4) GetSubGroupId() uint32 {
	if m != nil {
		return m.SubGroupId
	}
	return 0
}

type RsvpFilterUnion struct {
	FilterType           string                  `protobuf:"bytes,1,opt,name=filter_type,json=filterType,proto3" json:"filter_type,omitempty"`
	UdpIpv4Session       *RsvpMgmtFilterIpv4     `protobuf:"bytes,2,opt,name=udp_ipv4_session,json=udpIpv4Session,proto3" json:"udp_ipv4_session,omitempty"`
	P2MpIpv4Session      *RsvpMgmtFilterP2MpIpv4 `protobuf:"bytes,3,opt,name=p2mp_ipv4_session,json=p2mpIpv4Session,proto3" json:"p2mp_ipv4_session,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *RsvpFilterUnion) Reset()         { *m = RsvpFilterUnion{} }
func (m *RsvpFilterUnion) String() string { return proto.CompactTextString(m) }
func (*RsvpFilterUnion) ProtoMessage()    {}
func (*RsvpFilterUnion) Descriptor() ([]byte, []int) {
	return fileDescriptor_31a66e56b3423b69, []int{13}
}

func (m *RsvpFilterUnion) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RsvpFilterUnion.Unmarshal(m, b)
}
func (m *RsvpFilterUnion) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RsvpFilterUnion.Marshal(b, m, deterministic)
}
func (m *RsvpFilterUnion) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RsvpFilterUnion.Merge(m, src)
}
func (m *RsvpFilterUnion) XXX_Size() int {
	return xxx_messageInfo_RsvpFilterUnion.Size(m)
}
func (m *RsvpFilterUnion) XXX_DiscardUnknown() {
	xxx_messageInfo_RsvpFilterUnion.DiscardUnknown(m)
}

var xxx_messageInfo_RsvpFilterUnion proto.InternalMessageInfo

func (m *RsvpFilterUnion) GetFilterType() string {
	if m != nil {
		return m.FilterType
	}
	return ""
}

func (m *RsvpFilterUnion) GetUdpIpv4Session() *RsvpMgmtFilterIpv4 {
	if m != nil {
		return m.UdpIpv4Session
	}
	return nil
}

func (m *RsvpFilterUnion) GetP2MpIpv4Session() *RsvpMgmtFilterP2MpIpv4 {
	if m != nil {
		return m.P2MpIpv4Session
	}
	return nil
}

type RsvpMgmtFilterInfo struct {
	RsvpFilter           *RsvpFilterUnion `protobuf:"bytes,1,opt,name=rsvp_filter,json=rsvpFilter,proto3" json:"rsvp_filter,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *RsvpMgmtFilterInfo) Reset()         { *m = RsvpMgmtFilterInfo{} }
func (m *RsvpMgmtFilterInfo) String() string { return proto.CompactTextString(m) }
func (*RsvpMgmtFilterInfo) ProtoMessage()    {}
func (*RsvpMgmtFilterInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_31a66e56b3423b69, []int{14}
}

func (m *RsvpMgmtFilterInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RsvpMgmtFilterInfo.Unmarshal(m, b)
}
func (m *RsvpMgmtFilterInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RsvpMgmtFilterInfo.Marshal(b, m, deterministic)
}
func (m *RsvpMgmtFilterInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RsvpMgmtFilterInfo.Merge(m, src)
}
func (m *RsvpMgmtFilterInfo) XXX_Size() int {
	return xxx_messageInfo_RsvpMgmtFilterInfo.Size(m)
}
func (m *RsvpMgmtFilterInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_RsvpMgmtFilterInfo.DiscardUnknown(m)
}

var xxx_messageInfo_RsvpMgmtFilterInfo proto.InternalMessageInfo

func (m *RsvpMgmtFilterInfo) GetRsvpFilter() *RsvpFilterUnion {
	if m != nil {
		return m.RsvpFilter
	}
	return nil
}

type RsvpMgmtStyle struct {
	ReservationType      string   `protobuf:"bytes,1,opt,name=reservation_type,json=reservationType,proto3" json:"reservation_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RsvpMgmtStyle) Reset()         { *m = RsvpMgmtStyle{} }
func (m *RsvpMgmtStyle) String() string { return proto.CompactTextString(m) }
func (*RsvpMgmtStyle) ProtoMessage()    {}
func (*RsvpMgmtStyle) Descriptor() ([]byte, []int) {
	return fileDescriptor_31a66e56b3423b69, []int{15}
}

func (m *RsvpMgmtStyle) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RsvpMgmtStyle.Unmarshal(m, b)
}
func (m *RsvpMgmtStyle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RsvpMgmtStyle.Marshal(b, m, deterministic)
}
func (m *RsvpMgmtStyle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RsvpMgmtStyle.Merge(m, src)
}
func (m *RsvpMgmtStyle) XXX_Size() int {
	return xxx_messageInfo_RsvpMgmtStyle.Size(m)
}
func (m *RsvpMgmtStyle) XXX_DiscardUnknown() {
	xxx_messageInfo_RsvpMgmtStyle.DiscardUnknown(m)
}

var xxx_messageInfo_RsvpMgmtStyle proto.InternalMessageInfo

func (m *RsvpMgmtStyle) GetReservationType() string {
	if m != nil {
		return m.ReservationType
	}
	return ""
}

type RsvpMgmtRequestCompact struct {
	Session              *RsvpMgmtSessionInfo   `protobuf:"bytes,50,opt,name=session,proto3" json:"session,omitempty"`
	S2LSubLsp            *RsvpMgmtS2LSubLspIpv4 `protobuf:"bytes,51,opt,name=s2l_sub_lsp,json=s2lSubLsp,proto3" json:"s2l_sub_lsp,omitempty"`
	FlowSpec             *RsvpMgmtFlowSpec      `protobuf:"bytes,52,opt,name=flow_spec,json=flowSpec,proto3" json:"flow_spec,omitempty"`
	GenericFlowSpec      *RsvpMgmtGenFlowSpec   `protobuf:"bytes,53,opt,name=generic_flow_spec,json=genericFlowSpec,proto3" json:"generic_flow_spec,omitempty"`
	Filter               *RsvpMgmtFilterInfo    `protobuf:"bytes,54,opt,name=filter,proto3" json:"filter,omitempty"`
	Style                *RsvpMgmtStyle         `protobuf:"bytes,55,opt,name=style,proto3" json:"style,omitempty"`
	OutputInterface      string                 `protobuf:"bytes,56,opt,name=output_interface,json=outputInterface,proto3" json:"output_interface,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *RsvpMgmtRequestCompact) Reset()         { *m = RsvpMgmtRequestCompact{} }
func (m *RsvpMgmtRequestCompact) String() string { return proto.CompactTextString(m) }
func (*RsvpMgmtRequestCompact) ProtoMessage()    {}
func (*RsvpMgmtRequestCompact) Descriptor() ([]byte, []int) {
	return fileDescriptor_31a66e56b3423b69, []int{16}
}

func (m *RsvpMgmtRequestCompact) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RsvpMgmtRequestCompact.Unmarshal(m, b)
}
func (m *RsvpMgmtRequestCompact) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RsvpMgmtRequestCompact.Marshal(b, m, deterministic)
}
func (m *RsvpMgmtRequestCompact) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RsvpMgmtRequestCompact.Merge(m, src)
}
func (m *RsvpMgmtRequestCompact) XXX_Size() int {
	return xxx_messageInfo_RsvpMgmtRequestCompact.Size(m)
}
func (m *RsvpMgmtRequestCompact) XXX_DiscardUnknown() {
	xxx_messageInfo_RsvpMgmtRequestCompact.DiscardUnknown(m)
}

var xxx_messageInfo_RsvpMgmtRequestCompact proto.InternalMessageInfo

func (m *RsvpMgmtRequestCompact) GetSession() *RsvpMgmtSessionInfo {
	if m != nil {
		return m.Session
	}
	return nil
}

func (m *RsvpMgmtRequestCompact) GetS2LSubLsp() *RsvpMgmtS2LSubLspIpv4 {
	if m != nil {
		return m.S2LSubLsp
	}
	return nil
}

func (m *RsvpMgmtRequestCompact) GetFlowSpec() *RsvpMgmtFlowSpec {
	if m != nil {
		return m.FlowSpec
	}
	return nil
}

func (m *RsvpMgmtRequestCompact) GetGenericFlowSpec() *RsvpMgmtGenFlowSpec {
	if m != nil {
		return m.GenericFlowSpec
	}
	return nil
}

func (m *RsvpMgmtRequestCompact) GetFilter() *RsvpMgmtFilterInfo {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *RsvpMgmtRequestCompact) GetStyle() *RsvpMgmtStyle {
	if m != nil {
		return m.Style
	}
	return nil
}

func (m *RsvpMgmtRequestCompact) GetOutputInterface() string {
	if m != nil {
		return m.OutputInterface
	}
	return ""
}

func init() {
	proto.RegisterType((*RsvpMgmtRequestCompact_KEYS)(nil), "cisco_ios_xr_ip_rsvp_oper.rsvp.request_briefs.request_brief.rsvp_mgmt_request_compact_KEYS")
	proto.RegisterType((*RsvpMgmtSessionUdpIpv4)(nil), "cisco_ios_xr_ip_rsvp_oper.rsvp.request_briefs.request_brief.rsvp_mgmt_session_udp_ipv4")
	proto.RegisterType((*RsvpMgmtSessionLspTunnelIpv4)(nil), "cisco_ios_xr_ip_rsvp_oper.rsvp.request_briefs.request_brief.rsvp_mgmt_session_lsp_tunnel_ipv4")
	proto.RegisterType((*RsvpMgmtSessionUniIpv4)(nil), "cisco_ios_xr_ip_rsvp_oper.rsvp.request_briefs.request_brief.rsvp_mgmt_session_uni_ipv4")
	proto.RegisterType((*RsvpMgmtSessionP2MpLspTunnelIpv4)(nil), "cisco_ios_xr_ip_rsvp_oper.rsvp.request_briefs.request_brief.rsvp_mgmt_session_p2mp_lsp_tunnel_ipv4")
	proto.RegisterType((*RsvpSessionUnion)(nil), "cisco_ios_xr_ip_rsvp_oper.rsvp.request_briefs.request_brief.rsvp_session_union")
	proto.RegisterType((*RsvpMgmtSessionInfo)(nil), "cisco_ios_xr_ip_rsvp_oper.rsvp.request_briefs.request_brief.rsvp_mgmt_session_info")
	proto.RegisterType((*RsvpMgmtS2LSubLspIpv4)(nil), "cisco_ios_xr_ip_rsvp_oper.rsvp.request_briefs.request_brief.rsvp_mgmt_s2l_sub_lsp_ipv4")
	proto.RegisterType((*RsvpMgmtFlowSpec)(nil), "cisco_ios_xr_ip_rsvp_oper.rsvp.request_briefs.request_brief.rsvp_mgmt_flow_spec")
	proto.RegisterType((*RsvpMgmtFlowSpecG709Otn)(nil), "cisco_ios_xr_ip_rsvp_oper.rsvp.request_briefs.request_brief.rsvp_mgmt_flow_spec_g709_otn")
	proto.RegisterType((*RsvpMgmtGenFlowSpec)(nil), "cisco_ios_xr_ip_rsvp_oper.rsvp.request_briefs.request_brief.rsvp_mgmt_gen_flow_spec")
	proto.RegisterType((*RsvpMgmtFilterIpv4)(nil), "cisco_ios_xr_ip_rsvp_oper.rsvp.request_briefs.request_brief.rsvp_mgmt_filter_ipv4")
	proto.RegisterType((*RsvpMgmtFilterP2MpIpv4)(nil), "cisco_ios_xr_ip_rsvp_oper.rsvp.request_briefs.request_brief.rsvp_mgmt_filter_p2mp_ipv4")
	proto.RegisterType((*RsvpFilterUnion)(nil), "cisco_ios_xr_ip_rsvp_oper.rsvp.request_briefs.request_brief.rsvp_filter_union")
	proto.RegisterType((*RsvpMgmtFilterInfo)(nil), "cisco_ios_xr_ip_rsvp_oper.rsvp.request_briefs.request_brief.rsvp_mgmt_filter_info")
	proto.RegisterType((*RsvpMgmtStyle)(nil), "cisco_ios_xr_ip_rsvp_oper.rsvp.request_briefs.request_brief.rsvp_mgmt_style")
	proto.RegisterType((*RsvpMgmtRequestCompact)(nil), "cisco_ios_xr_ip_rsvp_oper.rsvp.request_briefs.request_brief.rsvp_mgmt_request_compact")
}

func init() { proto.RegisterFile("rsvp_mgmt_request_compact.proto", fileDescriptor_31a66e56b3423b69) }

var fileDescriptor_31a66e56b3423b69 = []byte{
	// 1232 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x57, 0x4b, 0x8f, 0x1b, 0xc5,
	0x13, 0xd7, 0xec, 0x7a, 0x1f, 0x2e, 0xef, 0xae, 0x77, 0x3b, 0xda, 0x7f, 0x9c, 0xfc, 0x81, 0x24,
	0x23, 0x1e, 0x09, 0x42, 0x06, 0x9c, 0x90, 0x80, 0xe0, 0x92, 0x08, 0x82, 0x56, 0xe4, 0xb1, 0xb4,
	0x37, 0x8a, 0x72, 0x61, 0x34, 0x9e, 0x69, 0x5b, 0xcd, 0x8e, 0x67, 0x3a, 0xdd, 0x3d, 0x8e, 0x23,
	0x71, 0x00, 0x21, 0xa4, 0x1c, 0x38, 0x02, 0x57, 0xbe, 0x02, 0xdc, 0xe0, 0xc4, 0x91, 0x0b, 0x1f,
	0x86, 0x8f, 0x80, 0xba, 0x7a, 0x5e, 0x7e, 0x2c, 0x02, 0x32, 0x7b, 0xb1, 0xdc, 0xd5, 0xd5, 0xf5,
	0xfb, 0xd5, 0xa3, 0xab, 0x7a, 0xe0, 0x82, 0x54, 0x13, 0xe1, 0x8d, 0x47, 0x63, 0xed, 0x49, 0xf6,
	0x38, 0x65, 0x4a, 0x7b, 0x41, 0x32, 0x16, 0x7e, 0xa0, 0xbb, 0x42, 0x26, 0x3a, 0x21, 0xef, 0x07,
	0x5c, 0x05, 0x89, 0xc7, 0x13, 0xe5, 0x4d, 0xa5, 0xc7, 0x85, 0x87, 0x07, 0x12, 0xc1, 0x64, 0xd7,
	0xfc, 0xeb, 0xe6, 0xa7, 0x06, 0x92, 0xb3, 0xa1, 0x9a, 0x5d, 0xba, 0x3f, 0xaf, 0xc2, 0x4b, 0x27,
	0x02, 0x78, 0x9f, 0x7c, 0xf4, 0xa8, 0x4f, 0xde, 0x84, 0x33, 0x21, 0x53, 0x9a, 0xc7, 0xbe, 0xe6,
	0x49, 0xec, 0xf9, 0x61, 0x28, 0x99, 0x52, 0x1d, 0xe7, 0xa2, 0x73, 0xb9, 0x49, 0x49, 0x65, 0xeb,
	0xa6, 0xdd, 0x21, 0x57, 0x60, 0xb7, 0x7a, 0x40, 0x24, 0x52, 0x77, 0x56, 0x2e, 0x3a, 0x97, 0xb7,
	0x69, 0xbb, 0x22, 0x3f, 0x4c, 0xa4, 0x26, 0xe7, 0x61, 0x13, 0x9d, 0x08, 0x92, 0xa8, 0xb3, 0x8a,
	0x2a, 0xc5, 0x9a, 0xbc, 0x01, 0x84, 0x4d, 0x35, 0x8b, 0x43, 0x16, 0x7a, 0x3a, 0x8d, 0x63, 0x16,
	0x79, 0x3c, 0xec, 0x34, 0x10, 0x76, 0x37, 0xdf, 0x39, 0xc2, 0x8d, 0x83, 0x90, 0x5c, 0x82, 0x2d,
	0xc5, 0x94, 0x32, 0x80, 0xfa, 0xa9, 0x60, 0x9d, 0x35, 0xd4, 0x6b, 0x65, 0xb2, 0xa3, 0xa7, 0x82,
	0x91, 0xb3, 0xb0, 0x21, 0x7a, 0x63, 0x61, 0xac, 0xac, 0x23, 0xd6, 0xba, 0x59, 0x1e, 0x84, 0xe4,
	0x15, 0xd8, 0x51, 0x49, 0x2a, 0x03, 0x56, 0x38, 0xb7, 0x81, 0xa7, 0xb7, 0xad, 0x34, 0xf7, 0xeb,
	0x02, 0xb4, 0x32, 0x35, 0x74, 0x69, 0x13, 0x6d, 0x80, 0x15, 0xa1, 0x37, 0x97, 0x61, 0x57, 0xa5,
	0x03, 0x6f, 0x24, 0x93, 0x54, 0x78, 0x89, 0xe4, 0x23, 0x1e, 0x77, 0x9a, 0x68, 0x69, 0x47, 0xa5,
	0x83, 0x8f, 0x8d, 0xf8, 0x3e, 0x4a, 0xc9, 0x45, 0xd8, 0x2a, 0x35, 0x79, 0xd8, 0x81, 0xcc, 0x56,
	0xa6, 0x75, 0x10, 0x92, 0x73, 0xb0, 0x39, 0x91, 0x43, 0x2f, 0xf6, 0xc7, 0xac, 0xd3, 0x42, 0x1b,
	0x1b, 0x13, 0x39, 0xbc, 0xe7, 0x8f, 0x99, 0xfb, 0x9d, 0x03, 0xe7, 0xcb, 0x9c, 0xe5, 0x5e, 0xa7,
	0xa1, 0xf0, 0xb8, 0x98, 0x5c, 0xfb, 0xf7, 0xf9, 0xaa, 0x26, 0x61, 0x65, 0x2e, 0x09, 0xcb, 0x72,
	0xb9, 0xba, 0x34, 0x97, 0xee, 0x8f, 0x0e, 0x5c, 0x5a, 0xa4, 0x15, 0x29, 0x51, 0x64, 0xef, 0x3f,
	0xb1, 0xfb, 0x3f, 0x34, 0xcb, 0xec, 0x67, 0xf4, 0x74, 0x9e, 0xf5, 0xe5, 0x35, 0xb2, 0xba, 0xbc,
	0x46, 0xdc, 0xef, 0x97, 0x07, 0x2e, 0xe6, 0xa7, 0x41, 0xed, 0x0a, 0x14, 0x04, 0x0a, 0x53, 0x96,
	0x58, 0x3b, 0x97, 0x67, 0x76, 0xdc, 0x6f, 0x1d, 0x78, 0x75, 0x91, 0x17, 0xd6, 0xea, 0x7c, 0xf8,
	0x2a, 0x35, 0xec, 0xcc, 0xd4, 0x70, 0x8d, 0x61, 0xfa, 0xa3, 0x01, 0x04, 0xe9, 0x54, 0x22, 0x94,
	0xc4, 0x0b, 0x37, 0xcc, 0x59, 0xbc, 0x61, 0xc7, 0xd0, 0x30, 0x2c, 0x11, 0xbf, 0xd5, 0x7b, 0xd8,
	0x7d, 0x8e, 0xce, 0xd4, 0x3d, 0xb9, 0xc2, 0x29, 0x82, 0x90, 0x67, 0x0e, 0xec, 0x9a, 0x3f, 0x18,
	0xa3, 0x4c, 0x07, 0x7d, 0x6a, 0xf5, 0x3e, 0xab, 0x19, 0x79, 0x2e, 0x0b, 0x74, 0xc7, 0xfc, 0xde,
	0x51, 0xa2, 0x6f, 0xf7, 0xc9, 0x57, 0x39, 0x15, 0x53, 0x4b, 0x39, 0x95, 0xc6, 0xe9, 0x04, 0x21,
	0xab, 0x56, 0xcb, 0xe1, 0x41, 0xcc, 0x73, 0x0e, 0x3f, 0x38, 0xb0, 0x8f, 0x1c, 0x8a, 0xba, 0xc9,
	0x89, 0xac, 0x21, 0x91, 0xa0, 0x66, 0x22, 0xcb, 0xca, 0x93, 0x12, 0xf3, 0x7b, 0xd8, 0x1b, 0x8b,
	0x32, 0x38, 0xa6, 0xba, 0xff, 0xb7, 0x78, 0x9c, 0xc7, 0xc3, 0x84, 0x48, 0xd8, 0xaa, 0x16, 0x1a,
	0x96, 0x54, 0xab, 0x77, 0xff, 0xf9, 0x99, 0xce, 0x54, 0x2e, 0x6d, 0x19, 0x59, 0x4e, 0xe7, 0x68,
	0xa6, 0x07, 0xf4, 0x22, 0xcf, 0x34, 0x62, 0xe3, 0x07, 0x16, 0xd5, 0x75, 0x38, 0x6b, 0x64, 0x27,
	0xf7, 0x81, 0x7d, 0xd5, 0x8b, 0x3e, 0x5c, 0x68, 0x05, 0xee, 0x6f, 0x2b, 0x70, 0xa6, 0x34, 0x3b,
	0x8c, 0x92, 0x27, 0x9e, 0x12, 0x2c, 0x20, 0xaf, 0xc3, 0x1e, 0x2e, 0xfc, 0x09, 0x93, 0xfe, 0x88,
	0x79, 0xd2, 0xd7, 0xf6, 0xe6, 0x34, 0x68, 0xdb, 0x6c, 0xdc, 0xb4, 0x72, 0xea, 0x6b, 0x46, 0x5e,
	0x86, 0x1d, 0xd4, 0x1d, 0xfb, 0x53, 0x6f, 0x90, 0x4a, 0x65, 0xa7, 0x66, 0x83, 0x6e, 0x19, 0xe9,
	0x5d, 0x7f, 0x7a, 0xcb, 0xc8, 0x0a, 0x2d, 0xc1, 0xfc, 0x63, 0x6b, 0x6e, 0xb5, 0xd4, 0x3a, 0x64,
	0xfe, 0x31, 0xda, 0x72, 0x61, 0xdb, 0xda, 0xe2, 0x18, 0x04, 0x8d, 0xd5, 0xb8, 0x4d, 0x5b, 0x68,
	0x8a, 0xc7, 0x0f, 0x62, 0xae, 0x4b, 0x1d, 0x7f, 0x6a, 0x75, 0xd6, 0x2a, 0x3a, 0xfe, 0x14, 0x75,
	0xba, 0x70, 0x06, 0x75, 0xb2, 0x18, 0xb3, 0xd0, 0x42, 0xae, 0x23, 0x24, 0xba, 0x46, 0xf3, 0x1d,
	0xc4, 0x7d, 0x11, 0xc0, 0x3a, 0x1f, 0xf9, 0xc1, 0x31, 0x8e, 0xd1, 0x6d, 0xda, 0x34, 0x92, 0xbe,
	0x11, 0x98, 0xa9, 0x86, 0xdb, 0x8f, 0x13, 0x85, 0xf3, 0xb3, 0x49, 0x37, 0xcc, 0xfa, 0xd3, 0x44,
	0xb9, 0x3f, 0x39, 0xf0, 0xc2, 0x92, 0x08, 0x7a, 0xa3, 0x1b, 0x6f, 0xbd, 0xe7, 0x25, 0x3a, 0x36,
	0xd3, 0xd5, 0x4a, 0xf9, 0x28, 0xf6, 0xa3, 0xb2, 0x07, 0x6d, 0x53, 0x0c, 0x48, 0x1f, 0xc5, 0xd8,
	0x86, 0x72, 0x94, 0x78, 0x12, 0x64, 0xad, 0x10, 0x51, 0xee, 0x4d, 0x02, 0xf2, 0x1a, 0xb4, 0xad,
	0xcf, 0x69, 0xa4, 0xb9, 0x88, 0x38, 0x93, 0xd9, 0x38, 0x43, 0x1b, 0x77, 0x0b, 0x69, 0x11, 0x9c,
	0x01, 0xd7, 0xd6, 0xe5, 0x06, 0xba, 0x8c, 0xc1, 0xb9, 0xc5, 0xb5, 0x71, 0xd6, 0xfd, 0xdd, 0x81,
	0xb3, 0x25, 0xe5, 0x11, 0x8b, 0x2b, 0x89, 0xcf, 0xd3, 0x84, 0x3e, 0x54, 0xfa, 0x25, 0xa6, 0xa9,
	0x2f, 0x58, 0x80, 0x4c, 0xbf, 0x71, 0x60, 0xcf, 0x38, 0x98, 0xe8, 0xca, 0xd9, 0xac, 0x7d, 0x3e,
	0xaa, 0xe9, 0xc2, 0x2e, 0x86, 0x92, 0xb6, 0x33, 0xcc, 0xdb, 0x19, 0x17, 0xd7, 0x83, 0xfd, 0xca,
	0x01, 0x1e, 0x69, 0x26, 0xed, 0x7d, 0x58, 0x7c, 0x1a, 0x39, 0xff, 0xe0, 0x69, 0xb4, 0x32, 0xff,
	0x34, 0x72, 0x7f, 0x9d, 0x19, 0xbd, 0x19, 0x82, 0x9d, 0x64, 0x35, 0xc2, 0x90, 0xb7, 0x61, 0x1f,
	0x8d, 0x2e, 0x3c, 0xc3, 0xec, 0xac, 0x23, 0x66, 0xb3, 0xff, 0xf7, 0x4f, 0xb1, 0xc6, 0xfc, 0x53,
	0xcc, 0xfd, 0x65, 0x05, 0xf6, 0x90, 0x7b, 0x46, 0xdb, 0x8e, 0xc3, 0x0b, 0xd0, 0xca, 0xd6, 0x95,
	0xec, 0x82, 0x15, 0x61, 0x6e, 0xbf, 0x80, 0xdd, 0x7c, 0x62, 0x15, 0x0d, 0xce, 0x66, 0x96, 0xd6,
	0x95, 0xd9, 0x32, 0x51, 0x74, 0x27, 0x0d, 0xc5, 0x81, 0x98, 0x5c, 0xcb, 0xc7, 0xc1, 0xd7, 0x0e,
	0xec, 0x15, 0xf1, 0x9d, 0x1b, 0x8f, 0x0f, 0xeb, 0xc5, 0x2f, 0x60, 0x68, 0x1b, 0x1f, 0x23, 0x25,
	0x0b, 0xf7, 0x99, 0xb3, 0xac, 0xb0, 0x4c, 0xeb, 0x4f, 0xa0, 0x55, 0x89, 0x69, 0xd6, 0xf9, 0xef,
	0x3d, 0x3f, 0xb1, 0x6a, 0x8e, 0x28, 0x18, 0xd1, 0x6d, 0x94, 0xb8, 0x1f, 0x40, 0xbb, 0xd2, 0xf7,
	0xf5, 0xd3, 0x88, 0x99, 0x27, 0x9a, 0x64, 0x8a, 0xc9, 0x89, 0x6d, 0xf4, 0x95, 0x3c, 0xb6, 0x2b,
	0x72, 0x93, 0x4c, 0xf7, 0xcf, 0x35, 0x38, 0x77, 0xe2, 0x77, 0x12, 0x19, 0xc3, 0x46, 0x1e, 0xe1,
	0x1e, 0x3a, 0xd2, 0xaf, 0x79, 0xd8, 0x9a, 0x90, 0xd1, 0x1c, 0x83, 0x3c, 0x81, 0x56, 0x65, 0x70,
	0x75, 0xae, 0xd6, 0xfb, 0xd0, 0x98, 0x1b, 0x89, 0xb4, 0xa9, 0x7a, 0x51, 0x3f, 0x1d, 0xdc, 0x51,
	0x82, 0x8c, 0xa1, 0x59, 0x76, 0xa9, 0x6b, 0x08, 0x7b, 0x58, 0x77, 0x97, 0xa2, 0x9b, 0x79, 0x87,
	0x24, 0x5f, 0x9a, 0xee, 0xc8, 0x62, 0x26, 0x79, 0x50, 0xe9, 0x8e, 0xef, 0x20, 0xee, 0x51, 0x4d,
	0xb8, 0x33, 0x5d, 0x9b, 0xb6, 0x33, 0xb8, 0xbc, 0x31, 0x92, 0xcf, 0x61, 0x3d, 0xab, 0xd0, 0xeb,
	0xa7, 0x72, 0x75, 0x4d, 0x5e, 0x33, 0x04, 0x32, 0x80, 0x35, 0xac, 0xcb, 0xce, 0x0d, 0x84, 0xba,
	0x53, 0x57, 0x42, 0x8d, 0x4d, 0xba, 0x56, 0x94, 0x7c, 0x92, 0x6a, 0x91, 0x6a, 0x8f, 0xc7, 0x9a,
	0xc9, 0xa1, 0x1f, 0xb0, 0xce, 0xbb, 0xb6, 0xe4, 0xad, 0xfc, 0x20, 0x17, 0x0f, 0xd6, 0xf1, 0x23,
	0xf0, 0xea, 0x5f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xd1, 0x71, 0x8f, 0x93, 0x81, 0x10, 0x00, 0x00,
}
