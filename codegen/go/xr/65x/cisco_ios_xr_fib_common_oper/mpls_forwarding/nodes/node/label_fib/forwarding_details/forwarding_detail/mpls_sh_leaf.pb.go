/*
Copyright 2019 Cisco Systems

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: mpls_sh_leaf.proto

package cisco_ios_xr_fib_common_oper_mpls_forwarding_nodes_node_label_fib_forwarding_details_forwarding_detail

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type MplsShLeaf_KEYS struct {
	NodeName             string   `protobuf:"bytes,1,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	LabelValue           uint32   `protobuf:"varint,2,opt,name=label_value,json=labelValue,proto3" json:"label_value,omitempty"`
	Eos                  string   `protobuf:"bytes,3,opt,name=eos,proto3" json:"eos,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MplsShLeaf_KEYS) Reset()         { *m = MplsShLeaf_KEYS{} }
func (m *MplsShLeaf_KEYS) String() string { return proto.CompactTextString(m) }
func (*MplsShLeaf_KEYS) ProtoMessage()    {}
func (*MplsShLeaf_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_4805ef0f6f394614, []int{0}
}

func (m *MplsShLeaf_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MplsShLeaf_KEYS.Unmarshal(m, b)
}
func (m *MplsShLeaf_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MplsShLeaf_KEYS.Marshal(b, m, deterministic)
}
func (m *MplsShLeaf_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MplsShLeaf_KEYS.Merge(m, src)
}
func (m *MplsShLeaf_KEYS) XXX_Size() int {
	return xxx_messageInfo_MplsShLeaf_KEYS.Size(m)
}
func (m *MplsShLeaf_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_MplsShLeaf_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_MplsShLeaf_KEYS proto.InternalMessageInfo

func (m *MplsShLeaf_KEYS) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

func (m *MplsShLeaf_KEYS) GetLabelValue() uint32 {
	if m != nil {
		return m.LabelValue
	}
	return 0
}

func (m *MplsShLeaf_KEYS) GetEos() string {
	if m != nil {
		return m.Eos
	}
	return ""
}

type MplsFwdInfo struct {
	L3Mtu                           uint32   `protobuf:"varint,1,opt,name=l3_mtu,json=l3Mtu,proto3" json:"l3_mtu,omitempty"`
	TotalEncapsulationSize          uint32   `protobuf:"varint,2,opt,name=total_encapsulation_size,json=totalEncapsulationSize,proto3" json:"total_encapsulation_size,omitempty"`
	MacSize                         uint32   `protobuf:"varint,3,opt,name=mac_size,json=macSize,proto3" json:"mac_size,omitempty"`
	LabelStack                      []uint32 `protobuf:"varint,4,rep,packed,name=label_stack,json=labelStack,proto3" json:"label_stack,omitempty"`
	TransmitNumberOfPacketsSwitched uint64   `protobuf:"varint,5,opt,name=transmit_number_of_packets_switched,json=transmitNumberOfPacketsSwitched,proto3" json:"transmit_number_of_packets_switched,omitempty"`
	TransmitNumberOfBytesSwitched   uint64   `protobuf:"varint,6,opt,name=transmit_number_of_bytes_switched,json=transmitNumberOfBytesSwitched,proto3" json:"transmit_number_of_bytes_switched,omitempty"`
	Status                          int32    `protobuf:"zigzag32,7,opt,name=status,proto3" json:"status,omitempty"`
	NextHopInterface                string   `protobuf:"bytes,8,opt,name=next_hop_interface,json=nextHopInterface,proto3" json:"next_hop_interface,omitempty"`
	NextHopProtocol                 string   `protobuf:"bytes,9,opt,name=next_hop_protocol,json=nextHopProtocol,proto3" json:"next_hop_protocol,omitempty"`
	NextHopString                   string   `protobuf:"bytes,10,opt,name=next_hop_string,json=nextHopString,proto3" json:"next_hop_string,omitempty"`
	XXX_NoUnkeyedLiteral            struct{} `json:"-"`
	XXX_unrecognized                []byte   `json:"-"`
	XXX_sizecache                   int32    `json:"-"`
}

func (m *MplsFwdInfo) Reset()         { *m = MplsFwdInfo{} }
func (m *MplsFwdInfo) String() string { return proto.CompactTextString(m) }
func (*MplsFwdInfo) ProtoMessage()    {}
func (*MplsFwdInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_4805ef0f6f394614, []int{1}
}

func (m *MplsFwdInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MplsFwdInfo.Unmarshal(m, b)
}
func (m *MplsFwdInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MplsFwdInfo.Marshal(b, m, deterministic)
}
func (m *MplsFwdInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MplsFwdInfo.Merge(m, src)
}
func (m *MplsFwdInfo) XXX_Size() int {
	return xxx_messageInfo_MplsFwdInfo.Size(m)
}
func (m *MplsFwdInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_MplsFwdInfo.DiscardUnknown(m)
}

var xxx_messageInfo_MplsFwdInfo proto.InternalMessageInfo

func (m *MplsFwdInfo) GetL3Mtu() uint32 {
	if m != nil {
		return m.L3Mtu
	}
	return 0
}

func (m *MplsFwdInfo) GetTotalEncapsulationSize() uint32 {
	if m != nil {
		return m.TotalEncapsulationSize
	}
	return 0
}

func (m *MplsFwdInfo) GetMacSize() uint32 {
	if m != nil {
		return m.MacSize
	}
	return 0
}

func (m *MplsFwdInfo) GetLabelStack() []uint32 {
	if m != nil {
		return m.LabelStack
	}
	return nil
}

func (m *MplsFwdInfo) GetTransmitNumberOfPacketsSwitched() uint64 {
	if m != nil {
		return m.TransmitNumberOfPacketsSwitched
	}
	return 0
}

func (m *MplsFwdInfo) GetTransmitNumberOfBytesSwitched() uint64 {
	if m != nil {
		return m.TransmitNumberOfBytesSwitched
	}
	return 0
}

func (m *MplsFwdInfo) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *MplsFwdInfo) GetNextHopInterface() string {
	if m != nil {
		return m.NextHopInterface
	}
	return ""
}

func (m *MplsFwdInfo) GetNextHopProtocol() string {
	if m != nil {
		return m.NextHopProtocol
	}
	return ""
}

func (m *MplsFwdInfo) GetNextHopString() string {
	if m != nil {
		return m.NextHopString
	}
	return ""
}

type MplsAdjExactRouteHashInfo struct {
	HashIndexIsValid     bool     `protobuf:"varint,1,opt,name=hash_index_is_valid,json=hashIndexIsValid,proto3" json:"hash_index_is_valid,omitempty"`
	HashIndex            uint32   `protobuf:"varint,2,opt,name=hash_index,json=hashIndex,proto3" json:"hash_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MplsAdjExactRouteHashInfo) Reset()         { *m = MplsAdjExactRouteHashInfo{} }
func (m *MplsAdjExactRouteHashInfo) String() string { return proto.CompactTextString(m) }
func (*MplsAdjExactRouteHashInfo) ProtoMessage()    {}
func (*MplsAdjExactRouteHashInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_4805ef0f6f394614, []int{2}
}

func (m *MplsAdjExactRouteHashInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MplsAdjExactRouteHashInfo.Unmarshal(m, b)
}
func (m *MplsAdjExactRouteHashInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MplsAdjExactRouteHashInfo.Marshal(b, m, deterministic)
}
func (m *MplsAdjExactRouteHashInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MplsAdjExactRouteHashInfo.Merge(m, src)
}
func (m *MplsAdjExactRouteHashInfo) XXX_Size() int {
	return xxx_messageInfo_MplsAdjExactRouteHashInfo.Size(m)
}
func (m *MplsAdjExactRouteHashInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_MplsAdjExactRouteHashInfo.DiscardUnknown(m)
}

var xxx_messageInfo_MplsAdjExactRouteHashInfo proto.InternalMessageInfo

func (m *MplsAdjExactRouteHashInfo) GetHashIndexIsValid() bool {
	if m != nil {
		return m.HashIndexIsValid
	}
	return false
}

func (m *MplsAdjExactRouteHashInfo) GetHashIndex() uint32 {
	if m != nil {
		return m.HashIndex
	}
	return 0
}

type MplsAdjInfo struct {
	LabelInformationType               uint32                     `protobuf:"varint,1,opt,name=label_information_type,json=labelInformationType,proto3" json:"label_information_type,omitempty"`
	LocalLabel                         uint32                     `protobuf:"varint,2,opt,name=local_label,json=localLabel,proto3" json:"local_label,omitempty"`
	OutgoingLabel                      uint32                     `protobuf:"varint,3,opt,name=outgoing_label,json=outgoingLabel,proto3" json:"outgoing_label,omitempty"`
	MplsAdjacencyFlags                 uint32                     `protobuf:"varint,4,opt,name=mpls_adjacency_flags,json=mplsAdjacencyFlags,proto3" json:"mpls_adjacency_flags,omitempty"`
	TunnelIdPresent                    bool                       `protobuf:"varint,5,opt,name=tunnel_id_present,json=tunnelIdPresent,proto3" json:"tunnel_id_present,omitempty"`
	LabelInformationDetail             *MplsFwdInfo               `protobuf:"bytes,6,opt,name=label_information_detail,json=labelInformationDetail,proto3" json:"label_information_detail,omitempty"`
	LabelInformationPathIndex          uint32                     `protobuf:"varint,7,opt,name=label_information_path_index,json=labelInformationPathIndex,proto3" json:"label_information_path_index,omitempty"`
	LabelInformationNextHopType        string                     `protobuf:"bytes,8,opt,name=label_information_next_hop_type,json=labelInformationNextHopType,proto3" json:"label_information_next_hop_type,omitempty"`
	LabelInformationNextHopProtocol    string                     `protobuf:"bytes,9,opt,name=label_information_next_hop_protocol,json=labelInformationNextHopProtocol,proto3" json:"label_information_next_hop_protocol,omitempty"`
	TxBytes                            uint64                     `protobuf:"varint,10,opt,name=tx_bytes,json=txBytes,proto3" json:"tx_bytes,omitempty"`
	TxPackets                          uint64                     `protobuf:"varint,11,opt,name=tx_packets,json=txPackets,proto3" json:"tx_packets,omitempty"`
	OutgoingInterface                  string                     `protobuf:"bytes,12,opt,name=outgoing_interface,json=outgoingInterface,proto3" json:"outgoing_interface,omitempty"`
	OutgoingPhysicalInterface          string                     `protobuf:"bytes,13,opt,name=outgoing_physical_interface,json=outgoingPhysicalInterface,proto3" json:"outgoing_physical_interface,omitempty"`
	OutgoingParentInterface            string                     `protobuf:"bytes,14,opt,name=outgoing_parent_interface,json=outgoingParentInterface,proto3" json:"outgoing_parent_interface,omitempty"`
	TunnelInterface                    string                     `protobuf:"bytes,15,opt,name=tunnel_interface,json=tunnelInterface,proto3" json:"tunnel_interface,omitempty"`
	OutgoingLabelString                string                     `protobuf:"bytes,16,opt,name=outgoing_label_string,json=outgoingLabelString,proto3" json:"outgoing_label_string,omitempty"`
	PrefixOrId                         string                     `protobuf:"bytes,17,opt,name=prefix_or_id,json=prefixOrId,proto3" json:"prefix_or_id,omitempty"`
	LabelInformationNextHopString      string                     `protobuf:"bytes,18,opt,name=label_information_next_hop_string,json=labelInformationNextHopString,proto3" json:"label_information_next_hop_string,omitempty"`
	LabelInformationRouteVersion       uint64                     `protobuf:"varint,19,opt,name=label_information_route_version,json=labelInformationRouteVersion,proto3" json:"label_information_route_version,omitempty"`
	LabelInformationTimeInMilliSeconds uint64                     `protobuf:"varint,20,opt,name=label_information_time_in_milli_seconds,json=labelInformationTimeInMilliSeconds,proto3" json:"label_information_time_in_milli_seconds,omitempty"`
	ExactRouteHashInfo                 *MplsAdjExactRouteHashInfo `protobuf:"bytes,21,opt,name=exact_route_hash_info,json=exactRouteHashInfo,proto3" json:"exact_route_hash_info,omitempty"`
	XXX_NoUnkeyedLiteral               struct{}                   `json:"-"`
	XXX_unrecognized                   []byte                     `json:"-"`
	XXX_sizecache                      int32                      `json:"-"`
}

func (m *MplsAdjInfo) Reset()         { *m = MplsAdjInfo{} }
func (m *MplsAdjInfo) String() string { return proto.CompactTextString(m) }
func (*MplsAdjInfo) ProtoMessage()    {}
func (*MplsAdjInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_4805ef0f6f394614, []int{3}
}

func (m *MplsAdjInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MplsAdjInfo.Unmarshal(m, b)
}
func (m *MplsAdjInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MplsAdjInfo.Marshal(b, m, deterministic)
}
func (m *MplsAdjInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MplsAdjInfo.Merge(m, src)
}
func (m *MplsAdjInfo) XXX_Size() int {
	return xxx_messageInfo_MplsAdjInfo.Size(m)
}
func (m *MplsAdjInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_MplsAdjInfo.DiscardUnknown(m)
}

var xxx_messageInfo_MplsAdjInfo proto.InternalMessageInfo

func (m *MplsAdjInfo) GetLabelInformationType() uint32 {
	if m != nil {
		return m.LabelInformationType
	}
	return 0
}

func (m *MplsAdjInfo) GetLocalLabel() uint32 {
	if m != nil {
		return m.LocalLabel
	}
	return 0
}

func (m *MplsAdjInfo) GetOutgoingLabel() uint32 {
	if m != nil {
		return m.OutgoingLabel
	}
	return 0
}

func (m *MplsAdjInfo) GetMplsAdjacencyFlags() uint32 {
	if m != nil {
		return m.MplsAdjacencyFlags
	}
	return 0
}

func (m *MplsAdjInfo) GetTunnelIdPresent() bool {
	if m != nil {
		return m.TunnelIdPresent
	}
	return false
}

func (m *MplsAdjInfo) GetLabelInformationDetail() *MplsFwdInfo {
	if m != nil {
		return m.LabelInformationDetail
	}
	return nil
}

func (m *MplsAdjInfo) GetLabelInformationPathIndex() uint32 {
	if m != nil {
		return m.LabelInformationPathIndex
	}
	return 0
}

func (m *MplsAdjInfo) GetLabelInformationNextHopType() string {
	if m != nil {
		return m.LabelInformationNextHopType
	}
	return ""
}

func (m *MplsAdjInfo) GetLabelInformationNextHopProtocol() string {
	if m != nil {
		return m.LabelInformationNextHopProtocol
	}
	return ""
}

func (m *MplsAdjInfo) GetTxBytes() uint64 {
	if m != nil {
		return m.TxBytes
	}
	return 0
}

func (m *MplsAdjInfo) GetTxPackets() uint64 {
	if m != nil {
		return m.TxPackets
	}
	return 0
}

func (m *MplsAdjInfo) GetOutgoingInterface() string {
	if m != nil {
		return m.OutgoingInterface
	}
	return ""
}

func (m *MplsAdjInfo) GetOutgoingPhysicalInterface() string {
	if m != nil {
		return m.OutgoingPhysicalInterface
	}
	return ""
}

func (m *MplsAdjInfo) GetOutgoingParentInterface() string {
	if m != nil {
		return m.OutgoingParentInterface
	}
	return ""
}

func (m *MplsAdjInfo) GetTunnelInterface() string {
	if m != nil {
		return m.TunnelInterface
	}
	return ""
}

func (m *MplsAdjInfo) GetOutgoingLabelString() string {
	if m != nil {
		return m.OutgoingLabelString
	}
	return ""
}

func (m *MplsAdjInfo) GetPrefixOrId() string {
	if m != nil {
		return m.PrefixOrId
	}
	return ""
}

func (m *MplsAdjInfo) GetLabelInformationNextHopString() string {
	if m != nil {
		return m.LabelInformationNextHopString
	}
	return ""
}

func (m *MplsAdjInfo) GetLabelInformationRouteVersion() uint64 {
	if m != nil {
		return m.LabelInformationRouteVersion
	}
	return 0
}

func (m *MplsAdjInfo) GetLabelInformationTimeInMilliSeconds() uint64 {
	if m != nil {
		return m.LabelInformationTimeInMilliSeconds
	}
	return 0
}

func (m *MplsAdjInfo) GetExactRouteHashInfo() *MplsAdjExactRouteHashInfo {
	if m != nil {
		return m.ExactRouteHashInfo
	}
	return nil
}

type MplsLdiInfo struct {
	LdiHardwareInformation []byte   `protobuf:"bytes,1,opt,name=ldi_hardware_information,json=ldiHardwareInformation,proto3" json:"ldi_hardware_information,omitempty"`
	XXX_NoUnkeyedLiteral   struct{} `json:"-"`
	XXX_unrecognized       []byte   `json:"-"`
	XXX_sizecache          int32    `json:"-"`
}

func (m *MplsLdiInfo) Reset()         { *m = MplsLdiInfo{} }
func (m *MplsLdiInfo) String() string { return proto.CompactTextString(m) }
func (*MplsLdiInfo) ProtoMessage()    {}
func (*MplsLdiInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_4805ef0f6f394614, []int{4}
}

func (m *MplsLdiInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MplsLdiInfo.Unmarshal(m, b)
}
func (m *MplsLdiInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MplsLdiInfo.Marshal(b, m, deterministic)
}
func (m *MplsLdiInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MplsLdiInfo.Merge(m, src)
}
func (m *MplsLdiInfo) XXX_Size() int {
	return xxx_messageInfo_MplsLdiInfo.Size(m)
}
func (m *MplsLdiInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_MplsLdiInfo.DiscardUnknown(m)
}

var xxx_messageInfo_MplsLdiInfo proto.InternalMessageInfo

func (m *MplsLdiInfo) GetLdiHardwareInformation() []byte {
	if m != nil {
		return m.LdiHardwareInformation
	}
	return nil
}

type MplsMcastInfo struct {
	MulticastMolBaseFlags             uint32   `protobuf:"varint,1,opt,name=multicast_mol_base_flags,json=multicastMolBaseFlags,proto3" json:"multicast_mol_base_flags,omitempty"`
	MulticastMolFlags                 uint32   `protobuf:"varint,2,opt,name=multicast_mol_flags,json=multicastMolFlags,proto3" json:"multicast_mol_flags,omitempty"`
	MulticastMolReferanceCount        uint32   `protobuf:"varint,3,opt,name=multicast_mol_referance_count,json=multicastMolReferanceCount,proto3" json:"multicast_mol_referance_count,omitempty"`
	MulticastTunnelInterfaceHandler   string   `protobuf:"bytes,4,opt,name=multicast_tunnel_interface_handler,json=multicastTunnelInterfaceHandler,proto3" json:"multicast_tunnel_interface_handler,omitempty"`
	MulticastTunnelId                 uint32   `protobuf:"varint,5,opt,name=multicast_tunnel_id,json=multicastTunnelId,proto3" json:"multicast_tunnel_id,omitempty"`
	MulticastTunnelNextHopInformation uint32   `protobuf:"varint,6,opt,name=multicast_tunnel_next_hop_information,json=multicastTunnelNextHopInformation,proto3" json:"multicast_tunnel_next_hop_information,omitempty"`
	MulticastTunnelLspvif             uint32   `protobuf:"varint,7,opt,name=multicast_tunnel_lspvif,json=multicastTunnelLspvif,proto3" json:"multicast_tunnel_lspvif,omitempty"`
	MulticastMplsOutputPaths          uint32   `protobuf:"varint,8,opt,name=multicast_mpls_output_paths,json=multicastMplsOutputPaths,proto3" json:"multicast_mpls_output_paths,omitempty"`
	MulticastMplsProtocolOutputPaths  uint32   `protobuf:"varint,9,opt,name=multicast_mpls_protocol_output_paths,json=multicastMplsProtocolOutputPaths,proto3" json:"multicast_mpls_protocol_output_paths,omitempty"`
	MulticastMplsLocalOutputPaths     uint32   `protobuf:"varint,10,opt,name=multicast_mpls_local_output_paths,json=multicastMplsLocalOutputPaths,proto3" json:"multicast_mpls_local_output_paths,omitempty"`
	MulticastRpfId                    uint32   `protobuf:"varint,11,opt,name=multicast_rpf_id,json=multicastRpfId,proto3" json:"multicast_rpf_id,omitempty"`
	MulticastEncapId                  uint32   `protobuf:"varint,12,opt,name=multicast_encap_id,json=multicastEncapId,proto3" json:"multicast_encap_id,omitempty"`
	MulticastPlatformDataLength       uint32   `protobuf:"varint,13,opt,name=multicast_platform_data_length,json=multicastPlatformDataLength,proto3" json:"multicast_platform_data_length,omitempty"`
	MulticastPlatformData             []byte   `protobuf:"bytes,14,opt,name=multicast_platform_data,json=multicastPlatformData,proto3" json:"multicast_platform_data,omitempty"`
	XXX_NoUnkeyedLiteral              struct{} `json:"-"`
	XXX_unrecognized                  []byte   `json:"-"`
	XXX_sizecache                     int32    `json:"-"`
}

func (m *MplsMcastInfo) Reset()         { *m = MplsMcastInfo{} }
func (m *MplsMcastInfo) String() string { return proto.CompactTextString(m) }
func (*MplsMcastInfo) ProtoMessage()    {}
func (*MplsMcastInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_4805ef0f6f394614, []int{5}
}

func (m *MplsMcastInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MplsMcastInfo.Unmarshal(m, b)
}
func (m *MplsMcastInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MplsMcastInfo.Marshal(b, m, deterministic)
}
func (m *MplsMcastInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MplsMcastInfo.Merge(m, src)
}
func (m *MplsMcastInfo) XXX_Size() int {
	return xxx_messageInfo_MplsMcastInfo.Size(m)
}
func (m *MplsMcastInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_MplsMcastInfo.DiscardUnknown(m)
}

var xxx_messageInfo_MplsMcastInfo proto.InternalMessageInfo

func (m *MplsMcastInfo) GetMulticastMolBaseFlags() uint32 {
	if m != nil {
		return m.MulticastMolBaseFlags
	}
	return 0
}

func (m *MplsMcastInfo) GetMulticastMolFlags() uint32 {
	if m != nil {
		return m.MulticastMolFlags
	}
	return 0
}

func (m *MplsMcastInfo) GetMulticastMolReferanceCount() uint32 {
	if m != nil {
		return m.MulticastMolReferanceCount
	}
	return 0
}

func (m *MplsMcastInfo) GetMulticastTunnelInterfaceHandler() string {
	if m != nil {
		return m.MulticastTunnelInterfaceHandler
	}
	return ""
}

func (m *MplsMcastInfo) GetMulticastTunnelId() uint32 {
	if m != nil {
		return m.MulticastTunnelId
	}
	return 0
}

func (m *MplsMcastInfo) GetMulticastTunnelNextHopInformation() uint32 {
	if m != nil {
		return m.MulticastTunnelNextHopInformation
	}
	return 0
}

func (m *MplsMcastInfo) GetMulticastTunnelLspvif() uint32 {
	if m != nil {
		return m.MulticastTunnelLspvif
	}
	return 0
}

func (m *MplsMcastInfo) GetMulticastMplsOutputPaths() uint32 {
	if m != nil {
		return m.MulticastMplsOutputPaths
	}
	return 0
}

func (m *MplsMcastInfo) GetMulticastMplsProtocolOutputPaths() uint32 {
	if m != nil {
		return m.MulticastMplsProtocolOutputPaths
	}
	return 0
}

func (m *MplsMcastInfo) GetMulticastMplsLocalOutputPaths() uint32 {
	if m != nil {
		return m.MulticastMplsLocalOutputPaths
	}
	return 0
}

func (m *MplsMcastInfo) GetMulticastRpfId() uint32 {
	if m != nil {
		return m.MulticastRpfId
	}
	return 0
}

func (m *MplsMcastInfo) GetMulticastEncapId() uint32 {
	if m != nil {
		return m.MulticastEncapId
	}
	return 0
}

func (m *MplsMcastInfo) GetMulticastPlatformDataLength() uint32 {
	if m != nil {
		return m.MulticastPlatformDataLength
	}
	return 0
}

func (m *MplsMcastInfo) GetMulticastPlatformData() []byte {
	if m != nil {
		return m.MulticastPlatformData
	}
	return nil
}

type MplsShLeaf struct {
	LeafLocalLabel               uint32         `protobuf:"varint,50,opt,name=leaf_local_label,json=leafLocalLabel,proto3" json:"leaf_local_label,omitempty"`
	EosBit                       uint32         `protobuf:"varint,51,opt,name=eos_bit,json=eosBit,proto3" json:"eos_bit,omitempty"`
	LabelInformation             []*MplsAdjInfo `protobuf:"bytes,52,rep,name=label_information,json=labelInformation,proto3" json:"label_information,omitempty"`
	LdiInformation               *MplsLdiInfo   `protobuf:"bytes,53,opt,name=ldi_information,json=ldiInformation,proto3" json:"ldi_information,omitempty"`
	HardwareInformation          []byte         `protobuf:"bytes,54,opt,name=hardware_information,json=hardwareInformation,proto3" json:"hardware_information,omitempty"`
	LeafReferanceCount           uint32         `protobuf:"varint,55,opt,name=leaf_referance_count,json=leafReferanceCount,proto3" json:"leaf_referance_count,omitempty"`
	LeafFlags                    uint32         `protobuf:"varint,56,opt,name=leaf_flags,json=leafFlags,proto3" json:"leaf_flags,omitempty"`
	PathListReferanceCount       uint32         `protobuf:"varint,57,opt,name=path_list_referance_count,json=pathListReferanceCount,proto3" json:"path_list_referance_count,omitempty"`
	PathListFlags                uint32         `protobuf:"varint,58,opt,name=path_list_flags,json=pathListFlags,proto3" json:"path_list_flags,omitempty"`
	LdiReferanceCount            uint32         `protobuf:"varint,59,opt,name=ldi_referance_count,json=ldiReferanceCount,proto3" json:"ldi_referance_count,omitempty"`
	LdiFlags                     uint32         `protobuf:"varint,60,opt,name=ldi_flags,json=ldiFlags,proto3" json:"ldi_flags,omitempty"`
	LdiType                      uint32         `protobuf:"varint,61,opt,name=ldi_type,json=ldiType,proto3" json:"ldi_type,omitempty"`
	LdiPointer                   uint32         `protobuf:"varint,62,opt,name=ldi_pointer,json=ldiPointer,proto3" json:"ldi_pointer,omitempty"`
	LwLdiType                    uint32         `protobuf:"varint,63,opt,name=lw_ldi_type,json=lwLdiType,proto3" json:"lw_ldi_type,omitempty"`
	LwLdiPointer                 uint32         `protobuf:"varint,64,opt,name=lw_ldi_pointer,json=lwLdiPointer,proto3" json:"lw_ldi_pointer,omitempty"`
	LwLdiRefernaceCount          uint32         `protobuf:"varint,65,opt,name=lw_ldi_refernace_count,json=lwLdiRefernaceCount,proto3" json:"lw_ldi_refernace_count,omitempty"`
	LwSharedLdiPointer           uint32         `protobuf:"varint,66,opt,name=lw_shared_ldi_pointer,json=lwSharedLdiPointer,proto3" json:"lw_shared_ldi_pointer,omitempty"`
	LspaFlags                    uint32         `protobuf:"varint,67,opt,name=lspa_flags,json=lspaFlags,proto3" json:"lspa_flags,omitempty"`
	AfiTableId                   uint32         `protobuf:"varint,68,opt,name=afi_table_id,json=afiTableId,proto3" json:"afi_table_id,omitempty"`
	MulticastLabel               bool           `protobuf:"varint,69,opt,name=multicast_label,json=multicastLabel,proto3" json:"multicast_label,omitempty"`
	MulticastInformation         *MplsMcastInfo `protobuf:"bytes,70,opt,name=multicast_information,json=multicastInformation,proto3" json:"multicast_information,omitempty"`
	LeafTimeInMilliSeconds       uint64         `protobuf:"varint,71,opt,name=leaf_time_in_milli_seconds,json=leafTimeInMilliSeconds,proto3" json:"leaf_time_in_milli_seconds,omitempty"`
	TotalNumberOfPacketsSwitched uint64         `protobuf:"varint,72,opt,name=total_number_of_packets_switched,json=totalNumberOfPacketsSwitched,proto3" json:"total_number_of_packets_switched,omitempty"`
	TotalNumberOfBytesSwitched   uint64         `protobuf:"varint,73,opt,name=total_number_of_bytes_switched,json=totalNumberOfBytesSwitched,proto3" json:"total_number_of_bytes_switched,omitempty"`
	XXX_NoUnkeyedLiteral         struct{}       `json:"-"`
	XXX_unrecognized             []byte         `json:"-"`
	XXX_sizecache                int32          `json:"-"`
}

func (m *MplsShLeaf) Reset()         { *m = MplsShLeaf{} }
func (m *MplsShLeaf) String() string { return proto.CompactTextString(m) }
func (*MplsShLeaf) ProtoMessage()    {}
func (*MplsShLeaf) Descriptor() ([]byte, []int) {
	return fileDescriptor_4805ef0f6f394614, []int{6}
}

func (m *MplsShLeaf) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MplsShLeaf.Unmarshal(m, b)
}
func (m *MplsShLeaf) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MplsShLeaf.Marshal(b, m, deterministic)
}
func (m *MplsShLeaf) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MplsShLeaf.Merge(m, src)
}
func (m *MplsShLeaf) XXX_Size() int {
	return xxx_messageInfo_MplsShLeaf.Size(m)
}
func (m *MplsShLeaf) XXX_DiscardUnknown() {
	xxx_messageInfo_MplsShLeaf.DiscardUnknown(m)
}

var xxx_messageInfo_MplsShLeaf proto.InternalMessageInfo

func (m *MplsShLeaf) GetLeafLocalLabel() uint32 {
	if m != nil {
		return m.LeafLocalLabel
	}
	return 0
}

func (m *MplsShLeaf) GetEosBit() uint32 {
	if m != nil {
		return m.EosBit
	}
	return 0
}

func (m *MplsShLeaf) GetLabelInformation() []*MplsAdjInfo {
	if m != nil {
		return m.LabelInformation
	}
	return nil
}

func (m *MplsShLeaf) GetLdiInformation() *MplsLdiInfo {
	if m != nil {
		return m.LdiInformation
	}
	return nil
}

func (m *MplsShLeaf) GetHardwareInformation() []byte {
	if m != nil {
		return m.HardwareInformation
	}
	return nil
}

func (m *MplsShLeaf) GetLeafReferanceCount() uint32 {
	if m != nil {
		return m.LeafReferanceCount
	}
	return 0
}

func (m *MplsShLeaf) GetLeafFlags() uint32 {
	if m != nil {
		return m.LeafFlags
	}
	return 0
}

func (m *MplsShLeaf) GetPathListReferanceCount() uint32 {
	if m != nil {
		return m.PathListReferanceCount
	}
	return 0
}

func (m *MplsShLeaf) GetPathListFlags() uint32 {
	if m != nil {
		return m.PathListFlags
	}
	return 0
}

func (m *MplsShLeaf) GetLdiReferanceCount() uint32 {
	if m != nil {
		return m.LdiReferanceCount
	}
	return 0
}

func (m *MplsShLeaf) GetLdiFlags() uint32 {
	if m != nil {
		return m.LdiFlags
	}
	return 0
}

func (m *MplsShLeaf) GetLdiType() uint32 {
	if m != nil {
		return m.LdiType
	}
	return 0
}

func (m *MplsShLeaf) GetLdiPointer() uint32 {
	if m != nil {
		return m.LdiPointer
	}
	return 0
}

func (m *MplsShLeaf) GetLwLdiType() uint32 {
	if m != nil {
		return m.LwLdiType
	}
	return 0
}

func (m *MplsShLeaf) GetLwLdiPointer() uint32 {
	if m != nil {
		return m.LwLdiPointer
	}
	return 0
}

func (m *MplsShLeaf) GetLwLdiRefernaceCount() uint32 {
	if m != nil {
		return m.LwLdiRefernaceCount
	}
	return 0
}

func (m *MplsShLeaf) GetLwSharedLdiPointer() uint32 {
	if m != nil {
		return m.LwSharedLdiPointer
	}
	return 0
}

func (m *MplsShLeaf) GetLspaFlags() uint32 {
	if m != nil {
		return m.LspaFlags
	}
	return 0
}

func (m *MplsShLeaf) GetAfiTableId() uint32 {
	if m != nil {
		return m.AfiTableId
	}
	return 0
}

func (m *MplsShLeaf) GetMulticastLabel() bool {
	if m != nil {
		return m.MulticastLabel
	}
	return false
}

func (m *MplsShLeaf) GetMulticastInformation() *MplsMcastInfo {
	if m != nil {
		return m.MulticastInformation
	}
	return nil
}

func (m *MplsShLeaf) GetLeafTimeInMilliSeconds() uint64 {
	if m != nil {
		return m.LeafTimeInMilliSeconds
	}
	return 0
}

func (m *MplsShLeaf) GetTotalNumberOfPacketsSwitched() uint64 {
	if m != nil {
		return m.TotalNumberOfPacketsSwitched
	}
	return 0
}

func (m *MplsShLeaf) GetTotalNumberOfBytesSwitched() uint64 {
	if m != nil {
		return m.TotalNumberOfBytesSwitched
	}
	return 0
}

func init() {
	proto.RegisterType((*MplsShLeaf_KEYS)(nil), "cisco_ios_xr_fib_common_oper.mpls_forwarding.nodes.node.label_fib.forwarding_details.forwarding_detail.mpls_sh_leaf_KEYS")
	proto.RegisterType((*MplsFwdInfo)(nil), "cisco_ios_xr_fib_common_oper.mpls_forwarding.nodes.node.label_fib.forwarding_details.forwarding_detail.mpls_fwd_info")
	proto.RegisterType((*MplsAdjExactRouteHashInfo)(nil), "cisco_ios_xr_fib_common_oper.mpls_forwarding.nodes.node.label_fib.forwarding_details.forwarding_detail.mpls_adj_exact_route_hash_info")
	proto.RegisterType((*MplsAdjInfo)(nil), "cisco_ios_xr_fib_common_oper.mpls_forwarding.nodes.node.label_fib.forwarding_details.forwarding_detail.mpls_adj_info")
	proto.RegisterType((*MplsLdiInfo)(nil), "cisco_ios_xr_fib_common_oper.mpls_forwarding.nodes.node.label_fib.forwarding_details.forwarding_detail.mpls_ldi_info")
	proto.RegisterType((*MplsMcastInfo)(nil), "cisco_ios_xr_fib_common_oper.mpls_forwarding.nodes.node.label_fib.forwarding_details.forwarding_detail.mpls_mcast_info")
	proto.RegisterType((*MplsShLeaf)(nil), "cisco_ios_xr_fib_common_oper.mpls_forwarding.nodes.node.label_fib.forwarding_details.forwarding_detail.mpls_sh_leaf")
}

func init() { proto.RegisterFile("mpls_sh_leaf.proto", fileDescriptor_4805ef0f6f394614) }

var fileDescriptor_4805ef0f6f394614 = []byte{
	// 1668 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x58, 0x4b, 0x73, 0x1c, 0xb7,
	0x11, 0xae, 0x0d, 0x65, 0x3e, 0x9a, 0x6f, 0xf0, 0xa1, 0xa1, 0x68, 0x8a, 0xab, 0xf5, 0x8b, 0x49,
	0xc5, 0xac, 0x58, 0x74, 0x6c, 0x59, 0x89, 0xed, 0x88, 0x7a, 0x84, 0x5b, 0x5e, 0x51, 0xac, 0xa1,
	0x4a, 0x55, 0x39, 0xa1, 0xb0, 0x33, 0x18, 0x2e, 0x62, 0xcc, 0x60, 0x6a, 0x80, 0xd5, 0x2e, 0xf5,
	0x03, 0xf2, 0x13, 0x72, 0xcc, 0x21, 0xe7, 0x54, 0xe5, 0x9e, 0x1f, 0x91, 0x1f, 0x93, 0x6b, 0x2e,
	0x29, 0x34, 0xe6, 0xbd, 0x94, 0x8e, 0xcc, 0x85, 0xb5, 0xd3, 0xfd, 0xf5, 0x07, 0x0c, 0xba, 0xfb,
	0x9b, 0x06, 0x81, 0xc4, 0xa9, 0xd4, 0x54, 0x8f, 0xa8, 0xe4, 0x2c, 0x3a, 0x4e, 0x33, 0x65, 0x14,
	0x89, 0x02, 0xa1, 0x03, 0x45, 0x85, 0xd2, 0x74, 0x9a, 0xd1, 0x48, 0x0c, 0x69, 0xa0, 0xe2, 0x58,
	0x25, 0x54, 0xa5, 0x3c, 0x3b, 0xc6, 0x80, 0x48, 0x65, 0x13, 0x96, 0x85, 0x22, 0xb9, 0x3a, 0x4e,
	0x54, 0xc8, 0x35, 0xfe, 0x3d, 0x96, 0x6c, 0xc8, 0xa5, 0x0d, 0x38, 0xae, 0xfc, 0x34, 0xe4, 0x86,
	0x09, 0xa9, 0x67, 0x4d, 0xbd, 0x00, 0x36, 0xeb, 0xab, 0xd3, 0x9f, 0x9e, 0xff, 0xe9, 0x92, 0xec,
	0xc3, 0x92, 0xe5, 0xa2, 0x09, 0x8b, 0xb9, 0xd7, 0xe9, 0x76, 0x8e, 0x96, 0xfc, 0x45, 0x6b, 0x38,
	0x67, 0x31, 0x27, 0x87, 0xb0, 0xec, 0xd6, 0x78, 0xcb, 0xe4, 0x98, 0x7b, 0xbf, 0xe8, 0x76, 0x8e,
	0x56, 0x7d, 0x40, 0xd3, 0x1b, 0x6b, 0x21, 0x1b, 0x30, 0xc7, 0x95, 0xf6, 0xe6, 0x30, 0xce, 0xfe,
	0xec, 0xfd, 0x7b, 0x0e, 0x56, 0xdd, 0x96, 0x27, 0x21, 0x15, 0x49, 0xa4, 0xc8, 0x0e, 0xcc, 0xcb,
	0x13, 0x1a, 0x9b, 0x31, 0xd2, 0xaf, 0xfa, 0x1f, 0xc9, 0x93, 0x97, 0x66, 0x4c, 0x1e, 0x81, 0x67,
	0x94, 0x61, 0x92, 0xf2, 0x24, 0x60, 0xa9, 0x1e, 0x4b, 0x66, 0x84, 0x4a, 0xa8, 0x16, 0xef, 0x8a,
	0x85, 0x76, 0xd1, 0xff, 0xbc, 0xee, 0xbe, 0x14, 0xef, 0x38, 0xd9, 0x83, 0xc5, 0x98, 0x05, 0x0e,
	0x39, 0x87, 0xc8, 0x85, 0x98, 0x05, 0xe8, 0x2a, 0x37, 0xac, 0x0d, 0x0b, 0x7e, 0xf6, 0xee, 0x74,
	0xe7, 0xca, 0x0d, 0x5f, 0x5a, 0x0b, 0x19, 0xc0, 0x27, 0x26, 0x63, 0x89, 0x8e, 0x85, 0xa1, 0xc9,
	0x38, 0x1e, 0xf2, 0x8c, 0xaa, 0x88, 0xa6, 0x2c, 0xf8, 0x99, 0x1b, 0x4d, 0xf5, 0x44, 0x98, 0x60,
	0xc4, 0x43, 0xef, 0xa3, 0x6e, 0xe7, 0xe8, 0x8e, 0x7f, 0x58, 0x40, 0xcf, 0x11, 0xf9, 0x2a, 0xba,
	0x70, 0xb8, 0xcb, 0x1c, 0x46, 0xce, 0xe0, 0xc1, 0x0d, 0x6c, 0xc3, 0x6b, 0xc3, 0x6b, 0x5c, 0xf3,
	0xc8, 0x75, 0xd0, 0xe6, 0x3a, 0xb5, 0xa8, 0x92, 0x69, 0x17, 0xe6, 0xb5, 0x61, 0x66, 0xac, 0xbd,
	0x85, 0x6e, 0xe7, 0x68, 0xd3, 0xcf, 0x9f, 0xc8, 0xaf, 0x81, 0x24, 0x7c, 0x6a, 0xe8, 0x48, 0xa5,
	0x54, 0x24, 0x86, 0x67, 0x11, 0x0b, 0xb8, 0xb7, 0x88, 0xe7, 0xbd, 0x61, 0x3d, 0x67, 0x2a, 0xed,
	0x17, 0x76, 0xf2, 0x2b, 0xd8, 0x2c, 0xd1, 0x58, 0x5b, 0x81, 0x92, 0xde, 0x12, 0x82, 0xd7, 0x73,
	0xf0, 0x45, 0x6e, 0x26, 0x9f, 0xc3, 0x7a, 0x89, 0xd5, 0x26, 0x13, 0xc9, 0x95, 0x07, 0x88, 0x5c,
	0xcd, 0x91, 0x97, 0x68, 0xec, 0x25, 0x70, 0x1f, 0xf3, 0xc9, 0xc2, 0x3f, 0x53, 0x3e, 0x65, 0x81,
	0xa1, 0x99, 0x1a, 0x1b, 0x4e, 0x47, 0x4c, 0x8f, 0x5c, 0x82, 0xbf, 0x84, 0xad, 0xfc, 0x21, 0xe4,
	0x53, 0x2a, 0xb4, 0xad, 0x16, 0x11, 0x62, 0xb6, 0x17, 0xfd, 0x0d, 0xeb, 0xea, 0x5b, 0x4f, 0x5f,
	0xbf, 0xb1, 0x76, 0x72, 0x00, 0x50, 0xc1, 0xf3, 0x54, 0x2f, 0x95, 0xa8, 0xde, 0x7f, 0x21, 0x2f,
	0x20, 0xbb, 0x20, 0xf2, 0x7f, 0x0d, 0xbb, 0x2e, 0xa9, 0xf6, 0x29, 0x8b, 0x5d, 0x9d, 0x98, 0xeb,
	0x94, 0xe7, 0x05, 0xb5, 0x8d, 0xde, 0x7e, 0xe5, 0x7c, 0x7d, 0x9d, 0xba, 0x52, 0x50, 0x01, 0x93,
	0x14, 0xbd, 0x65, 0xed, 0x5a, 0xd3, 0xc0, 0x5a, 0xc8, 0x67, 0xb0, 0xa6, 0xc6, 0xe6, 0x4a, 0xd9,
	0x0e, 0x71, 0x18, 0x57, 0x4c, 0xab, 0x85, 0xd5, 0xc1, 0x7e, 0x03, 0xdb, 0xc5, 0x76, 0x58, 0xc0,
	0x93, 0xe0, 0x9a, 0x46, 0x92, 0x5d, 0x69, 0xef, 0x0e, 0x82, 0xb1, 0x9f, 0x9f, 0x14, 0xae, 0x17,
	0xd6, 0x63, 0xb3, 0x60, 0xc6, 0x49, 0x62, 0x37, 0x1c, 0xd2, 0x34, 0xe3, 0x9a, 0x27, 0x06, 0x2b,
	0x6a, 0xd1, 0x5f, 0x77, 0x8e, 0x7e, 0x78, 0xe1, 0xcc, 0xe4, 0x9f, 0x1d, 0xf0, 0x66, 0x5f, 0xce,
	0x35, 0x2c, 0x56, 0xce, 0xf2, 0xc3, 0xf1, 0xf1, 0xed, 0xe8, 0xc3, 0x71, 0xa3, 0x6d, 0xfd, 0xdd,
	0xf6, 0xa9, 0x3e, 0x43, 0x14, 0xf9, 0x11, 0x3e, 0x9e, 0xdd, 0x70, 0xca, 0x4c, 0x91, 0xd0, 0x05,
	0x3c, 0x97, 0xbd, 0x76, 0xf4, 0x05, 0x33, 0x2e, 0xc1, 0xe4, 0x19, 0x1c, 0xce, 0x12, 0x94, 0xa5,
	0x88, 0x79, 0x75, 0xf5, 0xbd, 0xdf, 0xe6, 0x38, 0x77, 0x85, 0x89, 0xe9, 0x1d, 0xc0, 0x27, 0x1f,
	0x60, 0x69, 0x15, 0xff, 0xe1, 0x7b, 0x98, 0xca, 0x66, 0xd8, 0x83, 0x45, 0x33, 0x75, 0x8d, 0x8b,
	0x5d, 0x70, 0xc7, 0x5f, 0x30, 0x53, 0xec, 0x50, 0x5b, 0xae, 0x66, 0x5a, 0x28, 0x84, 0xb7, 0x8c,
	0xce, 0x25, 0x33, 0xcd, 0xa5, 0x80, 0x7c, 0x09, 0xa4, 0xac, 0xa2, 0xaa, 0x41, 0x57, 0x70, 0xd9,
	0xcd, 0xc2, 0x53, 0x75, 0xe8, 0x0f, 0xb0, 0x5f, 0xc2, 0xd3, 0xd1, 0xb5, 0x16, 0xb6, 0x42, 0xab,
	0xb8, 0x55, 0x8c, 0xdb, 0x2b, 0x20, 0x17, 0x39, 0xa2, 0x8a, 0x7f, 0x0c, 0x7b, 0x55, 0x3c, 0xcb,
	0x78, 0x62, 0x6a, 0xd1, 0x6b, 0x18, 0x7d, 0xb7, 0x8c, 0x46, 0x7f, 0x15, 0xfb, 0x4b, 0xd8, 0x28,
	0xea, 0xb2, 0x0c, 0x59, 0x77, 0xe2, 0x90, 0x97, 0x65, 0x09, 0x7d, 0x08, 0x3b, 0xcd, 0xde, 0x28,
	0x24, 0x62, 0x03, 0xf1, 0x5b, 0x8d, 0x16, 0x71, 0x42, 0x41, 0xba, 0xb0, 0x92, 0x66, 0x3c, 0x12,
	0x53, 0xaa, 0x32, 0x2a, 0x42, 0x6f, 0x13, 0xa1, 0xe0, 0x6c, 0xaf, 0xb2, 0x3e, 0xca, 0xe5, 0x07,
	0x72, 0x96, 0xaf, 0x40, 0x30, 0xec, 0xe0, 0x3d, 0x19, 0xcb, 0xd7, 0x7a, 0x7e, 0x53, 0x0d, 0x39,
	0x5d, 0x7a, 0xcb, 0x33, 0x2d, 0x54, 0xe2, 0x6d, 0x61, 0xa6, 0x3e, 0x6e, 0xf3, 0xf8, 0x16, 0xf4,
	0xc6, 0x61, 0xc8, 0x25, 0x7c, 0x71, 0x83, 0xb2, 0x88, 0x98, 0x53, 0x91, 0xd0, 0x58, 0x48, 0x29,
	0xa8, 0xe6, 0x81, 0x4a, 0x42, 0xed, 0x6d, 0x23, 0x5d, 0x6f, 0x46, 0x6a, 0x44, 0xcc, 0xfb, 0xc9,
	0x4b, 0x0b, 0xbd, 0x74, 0x48, 0xf2, 0xaf, 0x0e, 0xec, 0xdc, 0x28, 0x94, 0xde, 0x0e, 0xf6, 0xf3,
	0x5f, 0x3a, 0xb7, 0xda, 0xd0, 0xef, 0xd5, 0x6d, 0x9f, 0xa0, 0x19, 0x0f, 0xe4, 0x0c, 0xe5, 0x37,
	0x52, 0xbd, 0x7e, 0x2e, 0xbe, 0x32, 0x14, 0x4e, 0x7c, 0x1f, 0x81, 0x67, 0x7f, 0x8f, 0x58, 0x16,
	0x4e, 0x58, 0xc6, 0xeb, 0x27, 0x85, 0xf2, 0xbb, 0xe2, 0xef, 0xca, 0x50, 0x9c, 0xe5, 0xee, 0xda,
	0xc9, 0xf4, 0xfe, 0x33, 0x0f, 0xeb, 0xc8, 0x15, 0x07, 0x4c, 0x1b, 0xc7, 0xf6, 0x2d, 0x78, 0xf1,
	0x58, 0x1a, 0x81, 0x96, 0x58, 0x49, 0x3a, 0x64, 0x9a, 0xe7, 0x82, 0xea, 0xc4, 0x7c, 0xa7, 0xf4,
	0xbf, 0x54, 0xf2, 0x94, 0x69, 0xee, 0x34, 0xf5, 0x18, 0xb6, 0x9a, 0x81, 0x2e, 0xc6, 0xa9, 0xfa,
	0x66, 0x3d, 0xc6, 0xe1, 0x9f, 0xc0, 0x41, 0x13, 0x9f, 0xf1, 0x88, 0x67, 0x2c, 0x09, 0x38, 0x0d,
	0xd4, 0x38, 0x31, 0xb9, 0xd6, 0xdf, 0xab, 0x47, 0xfa, 0x05, 0xe4, 0xa9, 0x45, 0x90, 0x9f, 0xa0,
	0x57, 0x51, 0xb4, 0x1b, 0x87, 0x8e, 0x58, 0x12, 0x4a, 0x9e, 0xe1, 0x67, 0x60, 0xc9, 0x3f, 0x2c,
	0x91, 0xaf, 0x9b, 0x9d, 0x74, 0xe6, 0x60, 0xcd, 0xfd, 0x97, 0x5f, 0x07, 0xfc, 0x2a, 0xd4, 0xf7,
	0x9f, 0x47, 0x87, 0xe4, 0x02, 0x3e, 0x9b, 0xc1, 0xd7, 0x06, 0x81, 0x2a, 0x07, 0xf3, 0xc8, 0xf0,
	0xa0, 0xc5, 0x70, 0x5e, 0x4c, 0x06, 0x25, 0x90, 0x7c, 0x03, 0x77, 0x67, 0x18, 0xa5, 0x4e, 0xdf,
	0x8a, 0x28, 0x97, 0xec, 0x9d, 0x16, 0xc7, 0x00, 0x9d, 0xe4, 0x7b, 0xd8, 0xaf, 0x9d, 0xa4, 0xcd,
	0xa7, 0x1a, 0x9b, 0x74, 0x6c, 0x50, 0xf3, 0x35, 0x4a, 0xf5, 0xaa, 0x5f, 0x65, 0xf5, 0x65, 0x2a,
	0xf5, 0x2b, 0x04, 0x58, 0xc5, 0xd7, 0xe4, 0x1c, 0x3e, 0x6d, 0x85, 0x17, 0xda, 0xdc, 0xe4, 0x59,
	0x42, 0x9e, 0x6e, 0x83, 0xa7, 0x90, 0xe7, 0x3a, 0xdf, 0x19, 0x3c, 0x68, 0xf1, 0xb9, 0xaf, 0x7c,
	0x83, 0x0c, 0x90, 0xec, 0xa0, 0x41, 0x36, 0xb0, 0xb0, 0x3a, 0xd3, 0x11, 0x6c, 0x54, 0x4c, 0x59,
	0x1a, 0xd9, 0x7c, 0x2c, 0x63, 0xe0, 0x5a, 0x69, 0xf7, 0xd3, 0xa8, 0x1f, 0xda, 0x21, 0xac, 0x42,
	0xe2, 0xb8, 0x6a, 0xb1, 0x2b, 0x88, 0xad, 0x38, 0x70, 0x50, 0xed, 0x87, 0xe4, 0x29, 0xdc, 0xaf,
	0xd0, 0xa9, 0x64, 0xc6, 0xe6, 0x80, 0x86, 0xcc, 0x30, 0x2a, 0x79, 0x72, 0x65, 0x46, 0xa8, 0xf2,
	0xab, 0x7e, 0x75, 0xac, 0x17, 0x39, 0xe8, 0x19, 0x33, 0x6c, 0x80, 0x90, 0x66, 0xb6, 0x1a, 0x24,
	0xa8, 0xf2, 0x2b, 0xb5, 0x6c, 0xd5, 0xa3, 0x7b, 0x7f, 0x5d, 0x86, 0x95, 0xfa, 0x90, 0x6f, 0xdf,
	0x12, 0x87, 0xfd, 0xfa, 0x2c, 0xf4, 0xd0, 0xbd, 0xa5, 0xb5, 0x0f, 0xaa, 0x79, 0xe8, 0x2e, 0x2c,
	0x70, 0xa5, 0xe9, 0x50, 0x18, 0xef, 0x04, 0x01, 0xf3, 0x5c, 0xe9, 0x53, 0x61, 0xc8, 0xdf, 0x3b,
	0xb0, 0x39, 0x23, 0x93, 0xde, 0xd7, 0xdd, 0xb9, 0x5b, 0x1f, 0x4e, 0x8a, 0x91, 0xd0, 0xdf, 0x68,
	0xeb, 0x30, 0xf9, 0x5b, 0x07, 0xd6, 0x0b, 0xd1, 0x2a, 0xb6, 0xf8, 0xdb, 0xff, 0xc3, 0xfc, 0x54,
	0xec, 0xc1, 0x5f, 0x93, 0xa1, 0xa8, 0x6f, 0xf0, 0x2b, 0xd8, 0xbe, 0x51, 0x44, 0xbf, 0xc1, 0x74,
	0x6e, 0x8d, 0x66, 0x15, 0xd4, 0x8e, 0x9e, 0x98, 0xbb, 0xb6, 0x76, 0x7d, 0xeb, 0x46, 0x4f, 0xeb,
	0x6b, 0x69, 0xd6, 0x01, 0x00, 0x46, 0x38, 0x75, 0x7c, 0xe4, 0x66, 0x6b, 0x6b, 0x71, 0xaa, 0xf8,
	0x1d, 0xec, 0xe1, 0xa4, 0x26, 0x85, 0x2d, 0xf9, 0x16, 0xeb, 0x77, 0xee, 0xd2, 0x65, 0x01, 0x03,
	0xa1, 0x4d, 0x8b, 0xf9, 0x73, 0x58, 0xaf, 0x42, 0x1d, 0xfd, 0x63, 0x37, 0x2e, 0x17, 0x01, 0xa5,
	0x50, 0xdb, 0x23, 0x68, 0x93, 0xff, 0xce, 0x09, 0x9d, 0x0c, 0x45, 0x8b, 0x77, 0x1f, 0x96, 0x2c,
	0xde, 0x31, 0xfe, 0x1e, 0x51, 0x8b, 0x32, 0x14, 0x8e, 0x6c, 0x0f, 0xec, 0x6f, 0x37, 0x13, 0x7e,
	0xef, 0x6e, 0x7a, 0x32, 0x14, 0xe5, 0x78, 0x1f, 0x0a, 0x9a, 0x2a, 0x94, 0x64, 0xef, 0x87, 0x7c,
	0xbc, 0x0f, 0xc5, 0x85, 0xb3, 0x90, 0xfb, 0xb0, 0x2c, 0x27, 0xb4, 0x0c, 0xff, 0x31, 0x3f, 0x8b,
	0xc9, 0x20, 0x27, 0xf8, 0x14, 0xd6, 0x72, 0x7f, 0xc1, 0xf1, 0x07, 0x84, 0xac, 0x20, 0xa4, 0x60,
	0x39, 0x81, 0xdd, 0x1c, 0x85, 0x6f, 0x94, 0xb0, 0xf2, 0x8d, 0x9e, 0x20, 0x7a, 0x0b, 0xd1, 0x7e,
	0xe1, 0x73, 0xef, 0xf4, 0x15, 0xec, 0xc8, 0x09, 0xd5, 0x23, 0x96, 0xf1, 0xb0, 0xb1, 0xc2, 0x69,
	0x9e, 0xb8, 0xc9, 0x25, 0xfa, 0x6a, 0xeb, 0xd8, 0xc4, 0xe9, 0x94, 0xe5, 0xe7, 0xf0, 0x34, 0xdf,
	0xac, 0x4e, 0x99, 0x3b, 0x88, 0x2e, 0xac, 0xb0, 0x48, 0x50, 0xc3, 0x86, 0x92, 0x5b, 0xed, 0x79,
	0xe6, 0x5e, 0x97, 0x45, 0xe2, 0xb5, 0x35, 0xf5, 0x43, 0xf2, 0x05, 0xac, 0x57, 0x82, 0xe1, 0xda,
	0xfc, 0x39, 0x5e, 0x39, 0x2a, 0x31, 0x73, 0x6d, 0xfe, 0x8f, 0x0e, 0x54, 0xda, 0xd1, 0xa8, 0xc4,
	0x17, 0xd8, 0x2e, 0x93, 0x5b, 0x6d, 0x97, 0x6a, 0x36, 0xf0, 0xb7, 0xcb, 0x5d, 0xd5, 0x7b, 0xe0,
	0x31, 0xdc, 0xc3, 0x8a, 0xbe, 0x79, 0x2a, 0xfb, 0x23, 0x4e, 0x65, 0xbb, 0x16, 0x71, 0xc3, 0x24,
	0xf6, 0x02, 0xba, 0xee, 0x5f, 0x0c, 0x1f, 0xb8, 0xe9, 0x9f, 0xb9, 0x31, 0x11, 0x71, 0xef, 0xbb,
	0xe6, 0x9f, 0xc2, 0xfd, 0x36, 0x4f, 0xeb, 0x8e, 0xdf, 0x47, 0x96, 0x7b, 0x0d, 0x96, 0xc6, 0x05,
	0x7f, 0x38, 0x8f, 0x9f, 0xbd, 0x93, 0xff, 0x05, 0x00, 0x00, 0xff, 0xff, 0x1d, 0x81, 0x4d, 0xb5,
	0x01, 0x12, 0x00, 0x00,
}
