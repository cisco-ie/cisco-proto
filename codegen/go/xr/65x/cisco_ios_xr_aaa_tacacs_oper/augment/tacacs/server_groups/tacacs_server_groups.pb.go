/*
Copyright 2019 Cisco Systems

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: tacacs_server_groups.proto

package cisco_ios_xr_aaa_tacacs_oper_augment_tacacs_server_groups

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type TacacsServerGroups_KEYS struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TacacsServerGroups_KEYS) Reset()         { *m = TacacsServerGroups_KEYS{} }
func (m *TacacsServerGroups_KEYS) String() string { return proto.CompactTextString(m) }
func (*TacacsServerGroups_KEYS) ProtoMessage()    {}
func (*TacacsServerGroups_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_759ff0f09b9b5096, []int{0}
}

func (m *TacacsServerGroups_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TacacsServerGroups_KEYS.Unmarshal(m, b)
}
func (m *TacacsServerGroups_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TacacsServerGroups_KEYS.Marshal(b, m, deterministic)
}
func (m *TacacsServerGroups_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TacacsServerGroups_KEYS.Merge(m, src)
}
func (m *TacacsServerGroups_KEYS) XXX_Size() int {
	return xxx_messageInfo_TacacsServerGroups_KEYS.Size(m)
}
func (m *TacacsServerGroups_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_TacacsServerGroups_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_TacacsServerGroups_KEYS proto.InternalMessageInfo

type TacacsServerbag struct {
	Addr                 string   `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`
	Timeout              uint32   `protobuf:"varint,2,opt,name=timeout,proto3" json:"timeout,omitempty"`
	Port                 uint32   `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
	BytesIn              uint32   `protobuf:"varint,4,opt,name=bytes_in,json=bytesIn,proto3" json:"bytes_in,omitempty"`
	BytesOut             uint32   `protobuf:"varint,5,opt,name=bytes_out,json=bytesOut,proto3" json:"bytes_out,omitempty"`
	Closes               uint32   `protobuf:"varint,6,opt,name=closes,proto3" json:"closes,omitempty"`
	Opens                uint32   `protobuf:"varint,7,opt,name=opens,proto3" json:"opens,omitempty"`
	Errors               uint32   `protobuf:"varint,8,opt,name=errors,proto3" json:"errors,omitempty"`
	Aborts               uint32   `protobuf:"varint,9,opt,name=aborts,proto3" json:"aborts,omitempty"`
	PaksIn               uint32   `protobuf:"varint,10,opt,name=paks_in,json=paksIn,proto3" json:"paks_in,omitempty"`
	PaksOut              uint32   `protobuf:"varint,11,opt,name=paks_out,json=paksOut,proto3" json:"paks_out,omitempty"`
	RepliesExpected      uint32   `protobuf:"varint,12,opt,name=replies_expected,json=repliesExpected,proto3" json:"replies_expected,omitempty"`
	Up                   bool     `protobuf:"varint,13,opt,name=up,proto3" json:"up,omitempty"`
	ConnUp               bool     `protobuf:"varint,14,opt,name=conn_up,json=connUp,proto3" json:"conn_up,omitempty"`
	SingleConnect        bool     `protobuf:"varint,15,opt,name=single_connect,json=singleConnect,proto3" json:"single_connect,omitempty"`
	IsPrivate            bool     `protobuf:"varint,16,opt,name=is_private,json=isPrivate,proto3" json:"is_private,omitempty"`
	VrfName              []string `protobuf:"bytes,17,rep,name=vrf_name,json=vrfName,proto3" json:"vrf_name,omitempty"`
	AddrBuf              []string `protobuf:"bytes,18,rep,name=addr_buf,json=addrBuf,proto3" json:"addr_buf,omitempty"`
	Family               []string `protobuf:"bytes,19,rep,name=family,proto3" json:"family,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TacacsServerbag) Reset()         { *m = TacacsServerbag{} }
func (m *TacacsServerbag) String() string { return proto.CompactTextString(m) }
func (*TacacsServerbag) ProtoMessage()    {}
func (*TacacsServerbag) Descriptor() ([]byte, []int) {
	return fileDescriptor_759ff0f09b9b5096, []int{1}
}

func (m *TacacsServerbag) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TacacsServerbag.Unmarshal(m, b)
}
func (m *TacacsServerbag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TacacsServerbag.Marshal(b, m, deterministic)
}
func (m *TacacsServerbag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TacacsServerbag.Merge(m, src)
}
func (m *TacacsServerbag) XXX_Size() int {
	return xxx_messageInfo_TacacsServerbag.Size(m)
}
func (m *TacacsServerbag) XXX_DiscardUnknown() {
	xxx_messageInfo_TacacsServerbag.DiscardUnknown(m)
}

var xxx_messageInfo_TacacsServerbag proto.InternalMessageInfo

func (m *TacacsServerbag) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func (m *TacacsServerbag) GetTimeout() uint32 {
	if m != nil {
		return m.Timeout
	}
	return 0
}

func (m *TacacsServerbag) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *TacacsServerbag) GetBytesIn() uint32 {
	if m != nil {
		return m.BytesIn
	}
	return 0
}

func (m *TacacsServerbag) GetBytesOut() uint32 {
	if m != nil {
		return m.BytesOut
	}
	return 0
}

func (m *TacacsServerbag) GetCloses() uint32 {
	if m != nil {
		return m.Closes
	}
	return 0
}

func (m *TacacsServerbag) GetOpens() uint32 {
	if m != nil {
		return m.Opens
	}
	return 0
}

func (m *TacacsServerbag) GetErrors() uint32 {
	if m != nil {
		return m.Errors
	}
	return 0
}

func (m *TacacsServerbag) GetAborts() uint32 {
	if m != nil {
		return m.Aborts
	}
	return 0
}

func (m *TacacsServerbag) GetPaksIn() uint32 {
	if m != nil {
		return m.PaksIn
	}
	return 0
}

func (m *TacacsServerbag) GetPaksOut() uint32 {
	if m != nil {
		return m.PaksOut
	}
	return 0
}

func (m *TacacsServerbag) GetRepliesExpected() uint32 {
	if m != nil {
		return m.RepliesExpected
	}
	return 0
}

func (m *TacacsServerbag) GetUp() bool {
	if m != nil {
		return m.Up
	}
	return false
}

func (m *TacacsServerbag) GetConnUp() bool {
	if m != nil {
		return m.ConnUp
	}
	return false
}

func (m *TacacsServerbag) GetSingleConnect() bool {
	if m != nil {
		return m.SingleConnect
	}
	return false
}

func (m *TacacsServerbag) GetIsPrivate() bool {
	if m != nil {
		return m.IsPrivate
	}
	return false
}

func (m *TacacsServerbag) GetVrfName() []string {
	if m != nil {
		return m.VrfName
	}
	return nil
}

func (m *TacacsServerbag) GetAddrBuf() []string {
	if m != nil {
		return m.AddrBuf
	}
	return nil
}

func (m *TacacsServerbag) GetFamily() []string {
	if m != nil {
		return m.Family
	}
	return nil
}

type TacacsServerGroupBag struct {
	GroupName            string             `protobuf:"bytes,1,opt,name=group_name,json=groupName,proto3" json:"group_name,omitempty"`
	SgMapNum             uint32             `protobuf:"varint,2,opt,name=sg_map_num,json=sgMapNum,proto3" json:"sg_map_num,omitempty"`
	Server               []*TacacsServerbag `protobuf:"bytes,3,rep,name=server,proto3" json:"server,omitempty"`
	VrfName              []string           `protobuf:"bytes,4,rep,name=vrf_name,json=vrfName,proto3" json:"vrf_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *TacacsServerGroupBag) Reset()         { *m = TacacsServerGroupBag{} }
func (m *TacacsServerGroupBag) String() string { return proto.CompactTextString(m) }
func (*TacacsServerGroupBag) ProtoMessage()    {}
func (*TacacsServerGroupBag) Descriptor() ([]byte, []int) {
	return fileDescriptor_759ff0f09b9b5096, []int{2}
}

func (m *TacacsServerGroupBag) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TacacsServerGroupBag.Unmarshal(m, b)
}
func (m *TacacsServerGroupBag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TacacsServerGroupBag.Marshal(b, m, deterministic)
}
func (m *TacacsServerGroupBag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TacacsServerGroupBag.Merge(m, src)
}
func (m *TacacsServerGroupBag) XXX_Size() int {
	return xxx_messageInfo_TacacsServerGroupBag.Size(m)
}
func (m *TacacsServerGroupBag) XXX_DiscardUnknown() {
	xxx_messageInfo_TacacsServerGroupBag.DiscardUnknown(m)
}

var xxx_messageInfo_TacacsServerGroupBag proto.InternalMessageInfo

func (m *TacacsServerGroupBag) GetGroupName() string {
	if m != nil {
		return m.GroupName
	}
	return ""
}

func (m *TacacsServerGroupBag) GetSgMapNum() uint32 {
	if m != nil {
		return m.SgMapNum
	}
	return 0
}

func (m *TacacsServerGroupBag) GetServer() []*TacacsServerbag {
	if m != nil {
		return m.Server
	}
	return nil
}

func (m *TacacsServerGroupBag) GetVrfName() []string {
	if m != nil {
		return m.VrfName
	}
	return nil
}

type TacacsServerGroups struct {
	ServerGroup          []*TacacsServerGroupBag `protobuf:"bytes,50,rep,name=server_group,json=serverGroup,proto3" json:"server_group,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *TacacsServerGroups) Reset()         { *m = TacacsServerGroups{} }
func (m *TacacsServerGroups) String() string { return proto.CompactTextString(m) }
func (*TacacsServerGroups) ProtoMessage()    {}
func (*TacacsServerGroups) Descriptor() ([]byte, []int) {
	return fileDescriptor_759ff0f09b9b5096, []int{3}
}

func (m *TacacsServerGroups) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TacacsServerGroups.Unmarshal(m, b)
}
func (m *TacacsServerGroups) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TacacsServerGroups.Marshal(b, m, deterministic)
}
func (m *TacacsServerGroups) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TacacsServerGroups.Merge(m, src)
}
func (m *TacacsServerGroups) XXX_Size() int {
	return xxx_messageInfo_TacacsServerGroups.Size(m)
}
func (m *TacacsServerGroups) XXX_DiscardUnknown() {
	xxx_messageInfo_TacacsServerGroups.DiscardUnknown(m)
}

var xxx_messageInfo_TacacsServerGroups proto.InternalMessageInfo

func (m *TacacsServerGroups) GetServerGroup() []*TacacsServerGroupBag {
	if m != nil {
		return m.ServerGroup
	}
	return nil
}

func init() {
	proto.RegisterType((*TacacsServerGroups_KEYS)(nil), "cisco_ios_xr_aaa_tacacs_oper.augment.tacacs.server_groups.tacacs_server_groups_KEYS")
	proto.RegisterType((*TacacsServerbag)(nil), "cisco_ios_xr_aaa_tacacs_oper.augment.tacacs.server_groups.tacacs_serverbag")
	proto.RegisterType((*TacacsServerGroupBag)(nil), "cisco_ios_xr_aaa_tacacs_oper.augment.tacacs.server_groups.tacacs_server_group_bag")
	proto.RegisterType((*TacacsServerGroups)(nil), "cisco_ios_xr_aaa_tacacs_oper.augment.tacacs.server_groups.tacacs_server_groups")
}

func init() { proto.RegisterFile("tacacs_server_groups.proto", fileDescriptor_759ff0f09b9b5096) }

var fileDescriptor_759ff0f09b9b5096 = []byte{
	// 501 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x93, 0x4f, 0x6b, 0x13, 0x41,
	0x18, 0xc6, 0xd9, 0x24, 0x4d, 0xb2, 0x6f, 0x9a, 0x34, 0x8e, 0xc5, 0x4e, 0xad, 0x85, 0x10, 0x10,
	0xe2, 0x65, 0x0f, 0xf5, 0xe4, 0x55, 0x29, 0x52, 0x8a, 0x55, 0x56, 0x3c, 0x78, 0x1a, 0x26, 0x9b,
	0xd9, 0x65, 0x30, 0x3b, 0x33, 0xcc, 0x9f, 0xd0, 0x7e, 0x01, 0x6f, 0x7e, 0x3d, 0x3f, 0x8f, 0xcc,
	0x3b, 0x2b, 0x1a, 0xc9, 0x49, 0x7a, 0xdb, 0xe7, 0xf7, 0x3c, 0xbc, 0xf3, 0xf0, 0xe6, 0x0d, 0x3c,
	0xf7, 0xbc, 0xe2, 0x95, 0x63, 0x4e, 0xd8, 0x9d, 0xb0, 0xac, 0xb1, 0x3a, 0x18, 0x57, 0x18, 0xab,
	0xbd, 0x26, 0x6f, 0x2a, 0xe9, 0x2a, 0xcd, 0xa4, 0x76, 0xec, 0xde, 0x32, 0xce, 0x39, 0xeb, 0xc2,
	0xda, 0x08, 0x5b, 0xf0, 0xd0, 0xb4, 0x42, 0xf9, 0x22, 0xb1, 0x62, 0x6f, 0xc0, 0xf2, 0x02, 0xce,
	0x0f, 0x0d, 0x66, 0xb7, 0xd7, 0x5f, 0x3f, 0x2f, 0xbf, 0x0f, 0x60, 0xbe, 0xe7, 0xae, 0x79, 0x43,
	0x08, 0x0c, 0xf8, 0x66, 0x63, 0x69, 0xb6, 0xc8, 0x56, 0x79, 0x89, 0xdf, 0x84, 0xc2, 0xc8, 0xcb,
	0x56, 0xe8, 0xe0, 0x69, 0x6f, 0x91, 0xad, 0xa6, 0xe5, 0x6f, 0x19, 0xd3, 0x46, 0x5b, 0x4f, 0xfb,
	0x88, 0xf1, 0x9b, 0x9c, 0xc3, 0x78, 0xfd, 0xe0, 0x85, 0x63, 0x52, 0xd1, 0x41, 0x8a, 0xa3, 0xbe,
	0x51, 0xe4, 0x02, 0xf2, 0x64, 0xc5, 0x51, 0x47, 0xe8, 0xa5, 0xec, 0xc7, 0xe0, 0xc9, 0x33, 0x18,
	0x56, 0x5b, 0xed, 0x84, 0xa3, 0x43, 0x74, 0x3a, 0x45, 0x4e, 0xe1, 0x48, 0x1b, 0xa1, 0x1c, 0x1d,
	0x21, 0x4e, 0x22, 0xa6, 0x85, 0xb5, 0xda, 0x3a, 0x3a, 0x4e, 0xe9, 0xa4, 0x22, 0xe7, 0x6b, 0x6d,
	0xbd, 0xa3, 0x79, 0xe2, 0x49, 0x91, 0x33, 0x18, 0x19, 0xfe, 0x0d, 0x4b, 0x41, 0x32, 0xa2, 0xbc,
	0x51, 0xb1, 0x2e, 0x1a, 0xb1, 0xd2, 0x24, 0xd5, 0x8d, 0x3a, 0x36, 0x7a, 0x05, 0x73, 0x2b, 0xcc,
	0x56, 0x0a, 0xc7, 0xc4, 0xbd, 0x11, 0x95, 0x17, 0x1b, 0x7a, 0x8c, 0x91, 0x93, 0x8e, 0x5f, 0x77,
	0x98, 0xcc, 0xa0, 0x17, 0x0c, 0x9d, 0x2e, 0xb2, 0xd5, 0xb8, 0xec, 0x05, 0x13, 0x9f, 0xab, 0xb4,
	0x52, 0x2c, 0x18, 0x3a, 0x43, 0x38, 0x8c, 0xf2, 0x8b, 0x21, 0x2f, 0x61, 0xe6, 0xa4, 0x6a, 0xb6,
	0x82, 0x45, 0x20, 0x2a, 0x4f, 0x4f, 0xd0, 0x9f, 0x26, 0xfa, 0x2e, 0x41, 0x72, 0x09, 0x20, 0x1d,
	0x33, 0x56, 0xee, 0xb8, 0x17, 0x74, 0x8e, 0x91, 0x5c, 0xba, 0x4f, 0x09, 0xc4, 0xd2, 0x3b, 0x5b,
	0x33, 0xc5, 0x5b, 0x41, 0x9f, 0x2c, 0xfa, 0xab, 0xbc, 0x1c, 0xed, 0x6c, 0x7d, 0xc7, 0x5b, 0xb4,
	0xe2, 0x8f, 0xc6, 0xd6, 0xa1, 0xa6, 0x24, 0x59, 0x51, 0xbf, 0x0d, 0x75, 0xdc, 0x4d, 0xcd, 0x5b,
	0xb9, 0x7d, 0xa0, 0x4f, 0xd1, 0xe8, 0xd4, 0xf2, 0x67, 0x06, 0x67, 0x07, 0xce, 0x84, 0xc5, 0x7b,
	0xb8, 0x04, 0x48, 0x02, 0xdf, 0x4a, 0x57, 0x91, 0x23, 0xc1, 0xd7, 0x5e, 0x00, 0xb8, 0x86, 0xb5,
	0xdc, 0x30, 0x15, 0xda, 0xee, 0x3a, 0xc6, 0xae, 0xf9, 0xc0, 0xcd, 0x5d, 0x68, 0x49, 0x05, 0xc3,
	0x34, 0x90, 0xf6, 0x17, 0xfd, 0xd5, 0xe4, 0xea, 0xb6, 0xf8, 0xef, 0x53, 0x2e, 0xfe, 0xbd, 0xd4,
	0xb2, 0x1b, 0xbd, 0xb7, 0x8b, 0xc1, 0xde, 0x2e, 0x96, 0x3f, 0x32, 0x38, 0x3d, 0x74, 0xff, 0x24,
	0xc0, 0xf1, 0xdf, 0x80, 0x5e, 0x61, 0xbd, 0xf2, 0xb1, 0xea, 0xfd, 0xd9, 0x5f, 0x39, 0x49, 0xe4,
	0x7d, 0x04, 0xeb, 0x21, 0xfe, 0xa1, 0x5f, 0xff, 0x0a, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0x7e,
	0xa9, 0xee, 0x03, 0x00, 0x00,
}
