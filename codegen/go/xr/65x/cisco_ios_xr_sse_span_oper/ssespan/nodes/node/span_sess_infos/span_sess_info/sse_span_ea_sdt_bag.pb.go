/*
Copyright 2019 Cisco Systems

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: sse_span_ea_sdt_bag.proto

package cisco_ios_xr_sse_span_oper_ssespan_nodes_node_span_sess_infos_span_sess_info

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type SseSpanEaSdtBag_KEYS struct {
	Node                 string   `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
	SessionId            uint32   `protobuf:"varint,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	SessionClass         uint32   `protobuf:"varint,3,opt,name=session_class,json=sessionClass,proto3" json:"session_class,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SseSpanEaSdtBag_KEYS) Reset()         { *m = SseSpanEaSdtBag_KEYS{} }
func (m *SseSpanEaSdtBag_KEYS) String() string { return proto.CompactTextString(m) }
func (*SseSpanEaSdtBag_KEYS) ProtoMessage()    {}
func (*SseSpanEaSdtBag_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_a312b97d78d1a80c, []int{0}
}

func (m *SseSpanEaSdtBag_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SseSpanEaSdtBag_KEYS.Unmarshal(m, b)
}
func (m *SseSpanEaSdtBag_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SseSpanEaSdtBag_KEYS.Marshal(b, m, deterministic)
}
func (m *SseSpanEaSdtBag_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SseSpanEaSdtBag_KEYS.Merge(m, src)
}
func (m *SseSpanEaSdtBag_KEYS) XXX_Size() int {
	return xxx_messageInfo_SseSpanEaSdtBag_KEYS.Size(m)
}
func (m *SseSpanEaSdtBag_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_SseSpanEaSdtBag_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_SseSpanEaSdtBag_KEYS proto.InternalMessageInfo

func (m *SseSpanEaSdtBag_KEYS) GetNode() string {
	if m != nil {
		return m.Node
	}
	return ""
}

func (m *SseSpanEaSdtBag_KEYS) GetSessionId() uint32 {
	if m != nil {
		return m.SessionId
	}
	return 0
}

func (m *SseSpanEaSdtBag_KEYS) GetSessionClass() uint32 {
	if m != nil {
		return m.SessionClass
	}
	return 0
}

type SseSpanEaSdtBag struct {
	Valid                uint32   `protobuf:"varint,50,opt,name=valid,proto3" json:"valid,omitempty"`
	Id                   uint32   `protobuf:"varint,51,opt,name=id,proto3" json:"id,omitempty"`
	State                uint32   `protobuf:"varint,52,opt,name=state,proto3" json:"state,omitempty"`
	Class                uint32   `protobuf:"varint,53,opt,name=class,proto3" json:"class,omitempty"`
	Ifhandle             uint32   `protobuf:"varint,54,opt,name=ifhandle,proto3" json:"ifhandle,omitempty"`
	Mode                 uint32   `protobuf:"varint,55,opt,name=mode,proto3" json:"mode,omitempty"`
	IpType               uint32   `protobuf:"varint,56,opt,name=ip_type,json=ipType,proto3" json:"ip_type,omitempty"`
	SrcIp                []uint32 `protobuf:"varint,57,rep,packed,name=src_ip,json=srcIp,proto3" json:"src_ip,omitempty"`
	DstIp                []uint32 `protobuf:"varint,58,rep,packed,name=dst_ip,json=dstIp,proto3" json:"dst_ip,omitempty"`
	VrfId                uint32   `protobuf:"varint,59,opt,name=vrf_id,json=vrfId,proto3" json:"vrf_id,omitempty"`
	TosBit               uint32   `protobuf:"varint,60,opt,name=tos_bit,json=tosBit,proto3" json:"tos_bit,omitempty"`
	TosBitCopied         uint32   `protobuf:"varint,61,opt,name=tos_bit_copied,json=tosBitCopied,proto3" json:"tos_bit_copied,omitempty"`
	Ttl                  uint32   `protobuf:"varint,62,opt,name=ttl,proto3" json:"ttl,omitempty"`
	Dfbit                uint32   `protobuf:"varint,63,opt,name=dfbit,proto3" json:"dfbit,omitempty"`
	SdtHwData            []uint32 `protobuf:"varint,64,rep,packed,name=sdt_hw_data,json=sdtHwData,proto3" json:"sdt_hw_data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SseSpanEaSdtBag) Reset()         { *m = SseSpanEaSdtBag{} }
func (m *SseSpanEaSdtBag) String() string { return proto.CompactTextString(m) }
func (*SseSpanEaSdtBag) ProtoMessage()    {}
func (*SseSpanEaSdtBag) Descriptor() ([]byte, []int) {
	return fileDescriptor_a312b97d78d1a80c, []int{1}
}

func (m *SseSpanEaSdtBag) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SseSpanEaSdtBag.Unmarshal(m, b)
}
func (m *SseSpanEaSdtBag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SseSpanEaSdtBag.Marshal(b, m, deterministic)
}
func (m *SseSpanEaSdtBag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SseSpanEaSdtBag.Merge(m, src)
}
func (m *SseSpanEaSdtBag) XXX_Size() int {
	return xxx_messageInfo_SseSpanEaSdtBag.Size(m)
}
func (m *SseSpanEaSdtBag) XXX_DiscardUnknown() {
	xxx_messageInfo_SseSpanEaSdtBag.DiscardUnknown(m)
}

var xxx_messageInfo_SseSpanEaSdtBag proto.InternalMessageInfo

func (m *SseSpanEaSdtBag) GetValid() uint32 {
	if m != nil {
		return m.Valid
	}
	return 0
}

func (m *SseSpanEaSdtBag) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *SseSpanEaSdtBag) GetState() uint32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *SseSpanEaSdtBag) GetClass() uint32 {
	if m != nil {
		return m.Class
	}
	return 0
}

func (m *SseSpanEaSdtBag) GetIfhandle() uint32 {
	if m != nil {
		return m.Ifhandle
	}
	return 0
}

func (m *SseSpanEaSdtBag) GetMode() uint32 {
	if m != nil {
		return m.Mode
	}
	return 0
}

func (m *SseSpanEaSdtBag) GetIpType() uint32 {
	if m != nil {
		return m.IpType
	}
	return 0
}

func (m *SseSpanEaSdtBag) GetSrcIp() []uint32 {
	if m != nil {
		return m.SrcIp
	}
	return nil
}

func (m *SseSpanEaSdtBag) GetDstIp() []uint32 {
	if m != nil {
		return m.DstIp
	}
	return nil
}

func (m *SseSpanEaSdtBag) GetVrfId() uint32 {
	if m != nil {
		return m.VrfId
	}
	return 0
}

func (m *SseSpanEaSdtBag) GetTosBit() uint32 {
	if m != nil {
		return m.TosBit
	}
	return 0
}

func (m *SseSpanEaSdtBag) GetTosBitCopied() uint32 {
	if m != nil {
		return m.TosBitCopied
	}
	return 0
}

func (m *SseSpanEaSdtBag) GetTtl() uint32 {
	if m != nil {
		return m.Ttl
	}
	return 0
}

func (m *SseSpanEaSdtBag) GetDfbit() uint32 {
	if m != nil {
		return m.Dfbit
	}
	return 0
}

func (m *SseSpanEaSdtBag) GetSdtHwData() []uint32 {
	if m != nil {
		return m.SdtHwData
	}
	return nil
}

func init() {
	proto.RegisterType((*SseSpanEaSdtBag_KEYS)(nil), "cisco_ios_xr_sse_span_oper.ssespan.nodes.node.span_sess_infos.span_sess_info.sse_span_ea_sdt_bag_KEYS")
	proto.RegisterType((*SseSpanEaSdtBag)(nil), "cisco_ios_xr_sse_span_oper.ssespan.nodes.node.span_sess_infos.span_sess_info.sse_span_ea_sdt_bag")
}

func init() { proto.RegisterFile("sse_span_ea_sdt_bag.proto", fileDescriptor_a312b97d78d1a80c) }

var fileDescriptor_a312b97d78d1a80c = []byte{
	// 379 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x92, 0xcd, 0x8f, 0x12, 0x41,
	0x10, 0xc5, 0xc3, 0xa0, 0x28, 0xad, 0x10, 0xd3, 0x6a, 0x6c, 0x4d, 0x34, 0x04, 0x3d, 0x70, 0x9a,
	0x83, 0xf8, 0xfd, 0x1d, 0xd1, 0x44, 0xa2, 0x27, 0xdc, 0xcb, 0x9e, 0x3a, 0xcd, 0x74, 0xcf, 0xd2,
	0xc9, 0xec, 0x74, 0xa7, 0xab, 0x02, 0xcb, 0xff, 0xbe, 0x87, 0x4d, 0x55, 0xcf, 0x72, 0xd8, 0x70,
	0x21, 0xf5, 0x7e, 0xaf, 0xba, 0x1e, 0x55, 0x19, 0xf1, 0x14, 0xc0, 0x69, 0x88, 0xa6, 0xd5, 0xce,
	0x68, 0xb0, 0xa8, 0xd7, 0xe6, 0xac, 0x8c, 0x29, 0x60, 0x90, 0xff, 0x2a, 0x0f, 0x55, 0xd0, 0x3e,
	0x80, 0xbe, 0x48, 0xfa, 0xd0, 0x17, 0xa2, 0x4b, 0x25, 0x80, 0x23, 0x51, 0xb6, 0xc1, 0x3a, 0xe0,
	0xdf, 0x92, 0x4d, 0x70, 0x00, 0xda, 0xb7, 0x75, 0x80, 0x1b, 0x7a, 0x9a, 0x84, 0x3a, 0x12, 0xa5,
	0xff, 0xfe, 0x3e, 0xfd, 0x2f, 0xa5, 0xb8, 0x45, 0x23, 0x54, 0x6f, 0xd2, 0x9b, 0x0d, 0x57, 0x5c,
	0xcb, 0xe7, 0x42, 0xd0, 0x63, 0x1f, 0x5a, 0xed, 0xad, 0x2a, 0x26, 0xbd, 0xd9, 0x68, 0x35, 0xec,
	0xc8, 0xd2, 0xca, 0x97, 0x62, 0x74, 0x6d, 0x57, 0x8d, 0x01, 0x50, 0x7d, 0xee, 0xb8, 0xdf, 0xc1,
	0x05, 0xb1, 0xe9, 0x65, 0x21, 0x1e, 0x1e, 0x09, 0x95, 0x8f, 0xc4, 0xed, 0xad, 0x69, 0xbc, 0x55,
	0xaf, 0xf9, 0x51, 0x16, 0x72, 0x2c, 0x0a, 0x6f, 0xd5, 0x9c, 0x51, 0xe1, 0x2d, 0x75, 0x01, 0x1a,
	0x74, 0xea, 0x4d, 0xee, 0x62, 0x41, 0x34, 0x07, 0xbe, 0xcd, 0x94, 0x85, 0x7c, 0x26, 0xee, 0xfa,
	0x7a, 0x63, 0x5a, 0xdb, 0x38, 0xf5, 0x8e, 0x8d, 0x83, 0xa6, 0xed, 0xce, 0x69, 0xbb, 0xf7, 0xcc,
	0xb9, 0x96, 0x4f, 0xc4, 0x1d, 0x1f, 0x35, 0xee, 0xa3, 0x53, 0x1f, 0x18, 0x0f, 0x7c, 0x3c, 0xd9,
	0x47, 0x27, 0x1f, 0x8b, 0x01, 0xa4, 0x4a, 0xfb, 0xa8, 0x3e, 0x4e, 0xfa, 0x9c, 0x9a, 0xaa, 0x65,
	0x24, 0x6c, 0x01, 0x09, 0x7f, 0xca, 0xd8, 0x02, 0x66, 0xbc, 0x4d, 0x35, 0x1d, 0xe8, 0x73, 0xb7,
	0x49, 0xaa, 0x97, 0x96, 0xa6, 0x63, 0x00, 0xbd, 0xf6, 0xa8, 0xbe, 0xe4, 0xe9, 0x18, 0xe0, 0xa7,
	0x47, 0xf9, 0x4a, 0x8c, 0x3b, 0x43, 0x57, 0x21, 0x7a, 0x67, 0xd5, 0xd7, 0x7c, 0xb6, 0xec, 0x2f,
	0x98, 0xc9, 0x07, 0xa2, 0x8f, 0xd8, 0xa8, 0x6f, 0x6c, 0x51, 0x49, 0x4b, 0xdb, 0x9a, 0xc6, 0x7d,
	0xcf, 0x31, 0x2c, 0xe4, 0x0b, 0x71, 0x8f, 0x2e, 0xba, 0xd9, 0x69, 0x6b, 0xd0, 0xa8, 0x1f, 0xfc,
	0xcf, 0x86, 0x60, 0xf1, 0xcf, 0xee, 0x97, 0x41, 0xb3, 0x1e, 0xf0, 0x77, 0x34, 0xbf, 0x0a, 0x00,
	0x00, 0xff, 0xff, 0xcc, 0xec, 0xd3, 0xc0, 0x64, 0x02, 0x00, 0x00,
}
