/*
Copyright 2019 Cisco Systems

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pim_table_ctx_bag.proto

package cisco_ios_xr_ipv4_pim_oper_ipv6_pim_active_vrfs_vrf_table_contexts_table_context

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type PimTableCtxBag_KEYS struct {
	VrfName              string   `protobuf:"bytes,1,opt,name=vrf_name,json=vrfName,proto3" json:"vrf_name,omitempty"`
	SafName              string   `protobuf:"bytes,2,opt,name=saf_name,json=safName,proto3" json:"saf_name,omitempty"`
	TopologyName         string   `protobuf:"bytes,3,opt,name=topology_name,json=topologyName,proto3" json:"topology_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PimTableCtxBag_KEYS) Reset()         { *m = PimTableCtxBag_KEYS{} }
func (m *PimTableCtxBag_KEYS) String() string { return proto.CompactTextString(m) }
func (*PimTableCtxBag_KEYS) ProtoMessage()    {}
func (*PimTableCtxBag_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_89acfafa72caf04a, []int{0}
}

func (m *PimTableCtxBag_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PimTableCtxBag_KEYS.Unmarshal(m, b)
}
func (m *PimTableCtxBag_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PimTableCtxBag_KEYS.Marshal(b, m, deterministic)
}
func (m *PimTableCtxBag_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PimTableCtxBag_KEYS.Merge(m, src)
}
func (m *PimTableCtxBag_KEYS) XXX_Size() int {
	return xxx_messageInfo_PimTableCtxBag_KEYS.Size(m)
}
func (m *PimTableCtxBag_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_PimTableCtxBag_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_PimTableCtxBag_KEYS proto.InternalMessageInfo

func (m *PimTableCtxBag_KEYS) GetVrfName() string {
	if m != nil {
		return m.VrfName
	}
	return ""
}

func (m *PimTableCtxBag_KEYS) GetSafName() string {
	if m != nil {
		return m.SafName
	}
	return ""
}

func (m *PimTableCtxBag_KEYS) GetTopologyName() string {
	if m != nil {
		return m.TopologyName
	}
	return ""
}

type PimTableCtxBag struct {
	Afi                      uint32   `protobuf:"varint,50,opt,name=afi,proto3" json:"afi,omitempty"`
	Safi                     uint32   `protobuf:"varint,51,opt,name=safi,proto3" json:"safi,omitempty"`
	TableName                string   `protobuf:"bytes,52,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty"`
	VrfId                    uint32   `protobuf:"varint,53,opt,name=vrf_id,json=vrfId,proto3" json:"vrf_id,omitempty"`
	TableId                  uint32   `protobuf:"varint,54,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
	IsActive                 bool     `protobuf:"varint,55,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
	IsItalRegistrationDone   bool     `protobuf:"varint,56,opt,name=is_ital_registration_done,json=isItalRegistrationDone,proto3" json:"is_ital_registration_done,omitempty"`
	IsRibRegistrationDone    bool     `protobuf:"varint,57,opt,name=is_rib_registration_done,json=isRibRegistrationDone,proto3" json:"is_rib_registration_done,omitempty"`
	IsRibConvergenceReceived bool     `protobuf:"varint,58,opt,name=is_rib_convergence_received,json=isRibConvergenceReceived,proto3" json:"is_rib_convergence_received,omitempty"`
	IsRibConvergence         bool     `protobuf:"varint,59,opt,name=is_rib_convergence,json=isRibConvergence,proto3" json:"is_rib_convergence,omitempty"`
	RpfRegistrations         uint32   `protobuf:"varint,60,opt,name=rpf_registrations,json=rpfRegistrations,proto3" json:"rpf_registrations,omitempty"`
	XXX_NoUnkeyedLiteral     struct{} `json:"-"`
	XXX_unrecognized         []byte   `json:"-"`
	XXX_sizecache            int32    `json:"-"`
}

func (m *PimTableCtxBag) Reset()         { *m = PimTableCtxBag{} }
func (m *PimTableCtxBag) String() string { return proto.CompactTextString(m) }
func (*PimTableCtxBag) ProtoMessage()    {}
func (*PimTableCtxBag) Descriptor() ([]byte, []int) {
	return fileDescriptor_89acfafa72caf04a, []int{1}
}

func (m *PimTableCtxBag) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PimTableCtxBag.Unmarshal(m, b)
}
func (m *PimTableCtxBag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PimTableCtxBag.Marshal(b, m, deterministic)
}
func (m *PimTableCtxBag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PimTableCtxBag.Merge(m, src)
}
func (m *PimTableCtxBag) XXX_Size() int {
	return xxx_messageInfo_PimTableCtxBag.Size(m)
}
func (m *PimTableCtxBag) XXX_DiscardUnknown() {
	xxx_messageInfo_PimTableCtxBag.DiscardUnknown(m)
}

var xxx_messageInfo_PimTableCtxBag proto.InternalMessageInfo

func (m *PimTableCtxBag) GetAfi() uint32 {
	if m != nil {
		return m.Afi
	}
	return 0
}

func (m *PimTableCtxBag) GetSafi() uint32 {
	if m != nil {
		return m.Safi
	}
	return 0
}

func (m *PimTableCtxBag) GetTableName() string {
	if m != nil {
		return m.TableName
	}
	return ""
}

func (m *PimTableCtxBag) GetVrfId() uint32 {
	if m != nil {
		return m.VrfId
	}
	return 0
}

func (m *PimTableCtxBag) GetTableId() uint32 {
	if m != nil {
		return m.TableId
	}
	return 0
}

func (m *PimTableCtxBag) GetIsActive() bool {
	if m != nil {
		return m.IsActive
	}
	return false
}

func (m *PimTableCtxBag) GetIsItalRegistrationDone() bool {
	if m != nil {
		return m.IsItalRegistrationDone
	}
	return false
}

func (m *PimTableCtxBag) GetIsRibRegistrationDone() bool {
	if m != nil {
		return m.IsRibRegistrationDone
	}
	return false
}

func (m *PimTableCtxBag) GetIsRibConvergenceReceived() bool {
	if m != nil {
		return m.IsRibConvergenceReceived
	}
	return false
}

func (m *PimTableCtxBag) GetIsRibConvergence() bool {
	if m != nil {
		return m.IsRibConvergence
	}
	return false
}

func (m *PimTableCtxBag) GetRpfRegistrations() uint32 {
	if m != nil {
		return m.RpfRegistrations
	}
	return 0
}

func init() {
	proto.RegisterType((*PimTableCtxBag_KEYS)(nil), "cisco_ios_xr_ipv4_pim_oper.ipv6_pim.active.vrfs.vrf.table_contexts.table_context.pim_table_ctx_bag_KEYS")
	proto.RegisterType((*PimTableCtxBag)(nil), "cisco_ios_xr_ipv4_pim_oper.ipv6_pim.active.vrfs.vrf.table_contexts.table_context.pim_table_ctx_bag")
}

func init() { proto.RegisterFile("pim_table_ctx_bag.proto", fileDescriptor_89acfafa72caf04a) }

var fileDescriptor_89acfafa72caf04a = []byte{
	// 391 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x92, 0x5f, 0x6b, 0xd4, 0x40,
	0x10, 0xc0, 0x89, 0xa7, 0xed, 0xdd, 0x60, 0xe1, 0xba, 0xd0, 0xba, 0xa5, 0x08, 0x47, 0x7d, 0x39,
	0x50, 0xf2, 0x60, 0x6b, 0x6b, 0xfd, 0xf3, 0x20, 0xea, 0xc3, 0x21, 0x88, 0xc4, 0x27, 0x9f, 0x96,
	0x4d, 0xb2, 0x09, 0x03, 0xb9, 0xec, 0xb2, 0xb3, 0x2c, 0xe7, 0x07, 0xf3, 0xfb, 0xc9, 0x4e, 0x22,
	0xde, 0x19, 0x5f, 0xc2, 0xce, 0xfc, 0xe6, 0x37, 0x33, 0x0c, 0x81, 0x27, 0x0e, 0xb7, 0x2a, 0xe8,
	0xb2, 0x33, 0xaa, 0x0a, 0x3b, 0x55, 0xea, 0x36, 0x77, 0xde, 0x06, 0x2b, 0xbe, 0x55, 0x48, 0x95,
	0x55, 0x68, 0x49, 0xed, 0xbc, 0x42, 0x17, 0x6f, 0x54, 0x2a, 0xb5, 0xce, 0xf8, 0x1c, 0x5d, 0xbc,
	0x4d, 0x51, 0xae, 0xab, 0x80, 0xd1, 0xe4, 0xd1, 0x37, 0x94, 0x3e, 0xf9, 0xd8, 0xc8, 0xf6, 0xc1,
	0xec, 0x02, 0x1d, 0x86, 0x57, 0x04, 0xe7, 0x93, 0x61, 0xea, 0xcb, 0xe7, 0x1f, 0xdf, 0xc5, 0x05,
	0xcc, 0xa3, 0x6f, 0x54, 0xaf, 0xb7, 0x46, 0x66, 0xab, 0x6c, 0xbd, 0x28, 0x8e, 0xa3, 0x6f, 0xbe,
	0xea, 0xad, 0x49, 0x88, 0xf4, 0x88, 0x1e, 0x0c, 0x88, 0xf4, 0x80, 0x9e, 0xc1, 0x49, 0xb0, 0xce,
	0x76, 0xb6, 0xfd, 0x39, 0xf0, 0x19, 0xf3, 0xc7, 0x7f, 0x92, 0xa9, 0xe8, 0xea, 0xd7, 0x0c, 0x4e,
	0x27, 0x53, 0xc5, 0x12, 0x66, 0xba, 0x41, 0xf9, 0x72, 0x95, 0xad, 0x4f, 0x8a, 0xf4, 0x14, 0x02,
	0x1e, 0x52, 0x4a, 0x5d, 0x73, 0x8a, 0xdf, 0xe2, 0x29, 0xc0, 0xa0, 0x71, 0xf7, 0x1b, 0xee, 0xbe,
	0xe0, 0x0c, 0xcf, 0x3f, 0x83, 0xa3, 0xb4, 0x35, 0xd6, 0xf2, 0x15, 0x4b, 0x8f, 0xa2, 0x6f, 0x36,
	0x75, 0xda, 0x78, 0xb0, 0xb0, 0x96, 0xb7, 0x0c, 0x8e, 0x39, 0xde, 0xd4, 0xe2, 0x12, 0x16, 0x48,
	0x6a, 0x38, 0x9a, 0xbc, 0x5b, 0x65, 0xeb, 0x79, 0x31, 0x47, 0xfa, 0xc0, 0xb1, 0xb8, 0x87, 0x0b,
	0x24, 0x85, 0x41, 0x77, 0xca, 0x9b, 0x16, 0x29, 0x78, 0x1d, 0xd0, 0xf6, 0xaa, 0xb6, 0xbd, 0x91,
	0xaf, 0xb9, 0xf8, 0x1c, 0x69, 0x13, 0x74, 0x57, 0xec, 0xe1, 0x4f, 0xb6, 0x37, 0xe2, 0x0e, 0x24,
	0x92, 0xf2, 0x58, 0xfe, 0xc7, 0xbc, 0x67, 0xf3, 0x0c, 0xa9, 0xc0, 0x72, 0x22, 0xbe, 0x87, 0xcb,
	0x51, 0xac, 0x6c, 0x1f, 0x8d, 0x6f, 0x4d, 0x5f, 0x19, 0xe5, 0x4d, 0x65, 0x30, 0x9a, 0x5a, 0xbe,
	0x61, 0x57, 0xb2, 0xfb, 0xf1, 0x6f, 0x41, 0x31, 0x72, 0xf1, 0x02, 0xc4, 0x54, 0x97, 0x6f, 0xd9,
	0x5a, 0xfe, 0x6b, 0x89, 0xe7, 0x70, 0xea, 0x5d, 0x73, 0xb0, 0x22, 0xc9, 0x77, 0x7c, 0xa1, 0xa5,
	0x77, 0xcd, 0xfe, 0x72, 0x54, 0x1e, 0xf1, 0x5f, 0x78, 0xfd, 0x3b, 0x00, 0x00, 0xff, 0xff, 0x15,
	0xcd, 0xa8, 0x4f, 0xa0, 0x02, 0x00, 0x00,
}
