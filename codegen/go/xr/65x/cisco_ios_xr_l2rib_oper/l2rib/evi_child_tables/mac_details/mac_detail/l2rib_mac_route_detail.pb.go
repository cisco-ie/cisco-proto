/*
Copyright 2019 Cisco Systems

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: l2rib_mac_route_detail.proto

package cisco_ios_xr_l2rib_oper_l2rib_evi_child_tables_mac_details_mac_detail

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type L2RibMacRouteDetail_KEYS struct {
	Evi                  uint32   `protobuf:"varint,1,opt,name=evi,proto3" json:"evi,omitempty"`
	MacAddr              string   `protobuf:"bytes,2,opt,name=mac_addr,json=macAddr,proto3" json:"mac_addr,omitempty"`
	ProdId               uint32   `protobuf:"varint,3,opt,name=prod_id,json=prodId,proto3" json:"prod_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *L2RibMacRouteDetail_KEYS) Reset()         { *m = L2RibMacRouteDetail_KEYS{} }
func (m *L2RibMacRouteDetail_KEYS) String() string { return proto.CompactTextString(m) }
func (*L2RibMacRouteDetail_KEYS) ProtoMessage()    {}
func (*L2RibMacRouteDetail_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_77424dbf9c73aa7c, []int{0}
}

func (m *L2RibMacRouteDetail_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2RibMacRouteDetail_KEYS.Unmarshal(m, b)
}
func (m *L2RibMacRouteDetail_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2RibMacRouteDetail_KEYS.Marshal(b, m, deterministic)
}
func (m *L2RibMacRouteDetail_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2RibMacRouteDetail_KEYS.Merge(m, src)
}
func (m *L2RibMacRouteDetail_KEYS) XXX_Size() int {
	return xxx_messageInfo_L2RibMacRouteDetail_KEYS.Size(m)
}
func (m *L2RibMacRouteDetail_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_L2RibMacRouteDetail_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_L2RibMacRouteDetail_KEYS proto.InternalMessageInfo

func (m *L2RibMacRouteDetail_KEYS) GetEvi() uint32 {
	if m != nil {
		return m.Evi
	}
	return 0
}

func (m *L2RibMacRouteDetail_KEYS) GetMacAddr() string {
	if m != nil {
		return m.MacAddr
	}
	return ""
}

func (m *L2RibMacRouteDetail_KEYS) GetProdId() uint32 {
	if m != nil {
		return m.ProdId
	}
	return 0
}

type LabeledNextHop struct {
	AddressFamily        string   `protobuf:"bytes,1,opt,name=address_family,json=addressFamily,proto3" json:"address_family,omitempty"`
	IpAddress            string   `protobuf:"bytes,2,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
	Label                uint32   `protobuf:"varint,3,opt,name=label,proto3" json:"label,omitempty"`
	Internal             bool     `protobuf:"varint,4,opt,name=internal,proto3" json:"internal,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LabeledNextHop) Reset()         { *m = LabeledNextHop{} }
func (m *LabeledNextHop) String() string { return proto.CompactTextString(m) }
func (*LabeledNextHop) ProtoMessage()    {}
func (*LabeledNextHop) Descriptor() ([]byte, []int) {
	return fileDescriptor_77424dbf9c73aa7c, []int{1}
}

func (m *LabeledNextHop) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LabeledNextHop.Unmarshal(m, b)
}
func (m *LabeledNextHop) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LabeledNextHop.Marshal(b, m, deterministic)
}
func (m *LabeledNextHop) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LabeledNextHop.Merge(m, src)
}
func (m *LabeledNextHop) XXX_Size() int {
	return xxx_messageInfo_LabeledNextHop.Size(m)
}
func (m *LabeledNextHop) XXX_DiscardUnknown() {
	xxx_messageInfo_LabeledNextHop.DiscardUnknown(m)
}

var xxx_messageInfo_LabeledNextHop proto.InternalMessageInfo

func (m *LabeledNextHop) GetAddressFamily() string {
	if m != nil {
		return m.AddressFamily
	}
	return ""
}

func (m *LabeledNextHop) GetIpAddress() string {
	if m != nil {
		return m.IpAddress
	}
	return ""
}

func (m *LabeledNextHop) GetLabel() uint32 {
	if m != nil {
		return m.Label
	}
	return 0
}

func (m *LabeledNextHop) GetInternal() bool {
	if m != nil {
		return m.Internal
	}
	return false
}

type NextHop struct {
	Type                 string          `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Ipv4                 string          `protobuf:"bytes,2,opt,name=ipv4,proto3" json:"ipv4,omitempty"`
	Ipv6                 string          `protobuf:"bytes,3,opt,name=ipv6,proto3" json:"ipv6,omitempty"`
	Mac                  string          `protobuf:"bytes,4,opt,name=mac,proto3" json:"mac,omitempty"`
	InterfaceHandle      string          `protobuf:"bytes,5,opt,name=interface_handle,json=interfaceHandle,proto3" json:"interface_handle,omitempty"`
	Labeled              *LabeledNextHop `protobuf:"bytes,6,opt,name=labeled,proto3" json:"labeled,omitempty"`
	Xid                  uint32          `protobuf:"varint,7,opt,name=xid,proto3" json:"xid,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *NextHop) Reset()         { *m = NextHop{} }
func (m *NextHop) String() string { return proto.CompactTextString(m) }
func (*NextHop) ProtoMessage()    {}
func (*NextHop) Descriptor() ([]byte, []int) {
	return fileDescriptor_77424dbf9c73aa7c, []int{2}
}

func (m *NextHop) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NextHop.Unmarshal(m, b)
}
func (m *NextHop) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NextHop.Marshal(b, m, deterministic)
}
func (m *NextHop) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NextHop.Merge(m, src)
}
func (m *NextHop) XXX_Size() int {
	return xxx_messageInfo_NextHop.Size(m)
}
func (m *NextHop) XXX_DiscardUnknown() {
	xxx_messageInfo_NextHop.DiscardUnknown(m)
}

var xxx_messageInfo_NextHop proto.InternalMessageInfo

func (m *NextHop) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *NextHop) GetIpv4() string {
	if m != nil {
		return m.Ipv4
	}
	return ""
}

func (m *NextHop) GetIpv6() string {
	if m != nil {
		return m.Ipv6
	}
	return ""
}

func (m *NextHop) GetMac() string {
	if m != nil {
		return m.Mac
	}
	return ""
}

func (m *NextHop) GetInterfaceHandle() string {
	if m != nil {
		return m.InterfaceHandle
	}
	return ""
}

func (m *NextHop) GetLabeled() *LabeledNextHop {
	if m != nil {
		return m.Labeled
	}
	return nil
}

func (m *NextHop) GetXid() uint32 {
	if m != nil {
		return m.Xid
	}
	return 0
}

type L2RibNextHop struct {
	TopologyId           uint32   `protobuf:"varint,1,opt,name=topology_id,json=topologyId,proto3" json:"topology_id,omitempty"`
	Flags                uint32   `protobuf:"varint,2,opt,name=flags,proto3" json:"flags,omitempty"`
	NextHop              *NextHop `protobuf:"bytes,3,opt,name=next_hop,json=nextHop,proto3" json:"next_hop,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *L2RibNextHop) Reset()         { *m = L2RibNextHop{} }
func (m *L2RibNextHop) String() string { return proto.CompactTextString(m) }
func (*L2RibNextHop) ProtoMessage()    {}
func (*L2RibNextHop) Descriptor() ([]byte, []int) {
	return fileDescriptor_77424dbf9c73aa7c, []int{3}
}

func (m *L2RibNextHop) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2RibNextHop.Unmarshal(m, b)
}
func (m *L2RibNextHop) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2RibNextHop.Marshal(b, m, deterministic)
}
func (m *L2RibNextHop) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2RibNextHop.Merge(m, src)
}
func (m *L2RibNextHop) XXX_Size() int {
	return xxx_messageInfo_L2RibNextHop.Size(m)
}
func (m *L2RibNextHop) XXX_DiscardUnknown() {
	xxx_messageInfo_L2RibNextHop.DiscardUnknown(m)
}

var xxx_messageInfo_L2RibNextHop proto.InternalMessageInfo

func (m *L2RibNextHop) GetTopologyId() uint32 {
	if m != nil {
		return m.TopologyId
	}
	return 0
}

func (m *L2RibNextHop) GetFlags() uint32 {
	if m != nil {
		return m.Flags
	}
	return 0
}

func (m *L2RibNextHop) GetNextHop() *NextHop {
	if m != nil {
		return m.NextHop
	}
	return nil
}

type L2RibMacRouteRegular struct {
	NextHop              *L2RibNextHop `protobuf:"bytes,1,opt,name=next_hop,json=nextHop,proto3" json:"next_hop,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *L2RibMacRouteRegular) Reset()         { *m = L2RibMacRouteRegular{} }
func (m *L2RibMacRouteRegular) String() string { return proto.CompactTextString(m) }
func (*L2RibMacRouteRegular) ProtoMessage()    {}
func (*L2RibMacRouteRegular) Descriptor() ([]byte, []int) {
	return fileDescriptor_77424dbf9c73aa7c, []int{4}
}

func (m *L2RibMacRouteRegular) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2RibMacRouteRegular.Unmarshal(m, b)
}
func (m *L2RibMacRouteRegular) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2RibMacRouteRegular.Marshal(b, m, deterministic)
}
func (m *L2RibMacRouteRegular) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2RibMacRouteRegular.Merge(m, src)
}
func (m *L2RibMacRouteRegular) XXX_Size() int {
	return xxx_messageInfo_L2RibMacRouteRegular.Size(m)
}
func (m *L2RibMacRouteRegular) XXX_DiscardUnknown() {
	xxx_messageInfo_L2RibMacRouteRegular.DiscardUnknown(m)
}

var xxx_messageInfo_L2RibMacRouteRegular proto.InternalMessageInfo

func (m *L2RibMacRouteRegular) GetNextHop() *L2RibNextHop {
	if m != nil {
		return m.NextHop
	}
	return nil
}

type L2RibEsi struct {
	SystemPriority       uint32   `protobuf:"varint,1,opt,name=system_priority,json=systemPriority,proto3" json:"system_priority,omitempty"`
	SystemId             string   `protobuf:"bytes,2,opt,name=system_id,json=systemId,proto3" json:"system_id,omitempty"`
	PortKey              uint32   `protobuf:"varint,3,opt,name=port_key,json=portKey,proto3" json:"port_key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *L2RibEsi) Reset()         { *m = L2RibEsi{} }
func (m *L2RibEsi) String() string { return proto.CompactTextString(m) }
func (*L2RibEsi) ProtoMessage()    {}
func (*L2RibEsi) Descriptor() ([]byte, []int) {
	return fileDescriptor_77424dbf9c73aa7c, []int{5}
}

func (m *L2RibEsi) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2RibEsi.Unmarshal(m, b)
}
func (m *L2RibEsi) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2RibEsi.Marshal(b, m, deterministic)
}
func (m *L2RibEsi) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2RibEsi.Merge(m, src)
}
func (m *L2RibEsi) XXX_Size() int {
	return xxx_messageInfo_L2RibEsi.Size(m)
}
func (m *L2RibEsi) XXX_DiscardUnknown() {
	xxx_messageInfo_L2RibEsi.DiscardUnknown(m)
}

var xxx_messageInfo_L2RibEsi proto.InternalMessageInfo

func (m *L2RibEsi) GetSystemPriority() uint32 {
	if m != nil {
		return m.SystemPriority
	}
	return 0
}

func (m *L2RibEsi) GetSystemId() string {
	if m != nil {
		return m.SystemId
	}
	return ""
}

func (m *L2RibEsi) GetPortKey() uint32 {
	if m != nil {
		return m.PortKey
	}
	return 0
}

type L2RibPathListEsi struct {
	EthernetSegmentId     *L2RibEsi       `protobuf:"bytes,1,opt,name=ethernet_segment_id,json=ethernetSegmentId,proto3" json:"ethernet_segment_id,omitempty"`
	MacUpdateNextHopArray []*L2RibNextHop `protobuf:"bytes,2,rep,name=mac_update_next_hop_array,json=macUpdateNextHopArray,proto3" json:"mac_update_next_hop_array,omitempty"`
	Resolved              bool            `protobuf:"varint,3,opt,name=resolved,proto3" json:"resolved,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}        `json:"-"`
	XXX_unrecognized      []byte          `json:"-"`
	XXX_sizecache         int32           `json:"-"`
}

func (m *L2RibPathListEsi) Reset()         { *m = L2RibPathListEsi{} }
func (m *L2RibPathListEsi) String() string { return proto.CompactTextString(m) }
func (*L2RibPathListEsi) ProtoMessage()    {}
func (*L2RibPathListEsi) Descriptor() ([]byte, []int) {
	return fileDescriptor_77424dbf9c73aa7c, []int{6}
}

func (m *L2RibPathListEsi) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2RibPathListEsi.Unmarshal(m, b)
}
func (m *L2RibPathListEsi) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2RibPathListEsi.Marshal(b, m, deterministic)
}
func (m *L2RibPathListEsi) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2RibPathListEsi.Merge(m, src)
}
func (m *L2RibPathListEsi) XXX_Size() int {
	return xxx_messageInfo_L2RibPathListEsi.Size(m)
}
func (m *L2RibPathListEsi) XXX_DiscardUnknown() {
	xxx_messageInfo_L2RibPathListEsi.DiscardUnknown(m)
}

var xxx_messageInfo_L2RibPathListEsi proto.InternalMessageInfo

func (m *L2RibPathListEsi) GetEthernetSegmentId() *L2RibEsi {
	if m != nil {
		return m.EthernetSegmentId
	}
	return nil
}

func (m *L2RibPathListEsi) GetMacUpdateNextHopArray() []*L2RibNextHop {
	if m != nil {
		return m.MacUpdateNextHopArray
	}
	return nil
}

func (m *L2RibPathListEsi) GetResolved() bool {
	if m != nil {
		return m.Resolved
	}
	return false
}

type L2RibPathListMac struct {
	MacAddress           string   `protobuf:"bytes,1,opt,name=mac_address,json=macAddress,proto3" json:"mac_address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *L2RibPathListMac) Reset()         { *m = L2RibPathListMac{} }
func (m *L2RibPathListMac) String() string { return proto.CompactTextString(m) }
func (*L2RibPathListMac) ProtoMessage()    {}
func (*L2RibPathListMac) Descriptor() ([]byte, []int) {
	return fileDescriptor_77424dbf9c73aa7c, []int{7}
}

func (m *L2RibPathListMac) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2RibPathListMac.Unmarshal(m, b)
}
func (m *L2RibPathListMac) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2RibPathListMac.Marshal(b, m, deterministic)
}
func (m *L2RibPathListMac) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2RibPathListMac.Merge(m, src)
}
func (m *L2RibPathListMac) XXX_Size() int {
	return xxx_messageInfo_L2RibPathListMac.Size(m)
}
func (m *L2RibPathListMac) XXX_DiscardUnknown() {
	xxx_messageInfo_L2RibPathListMac.DiscardUnknown(m)
}

var xxx_messageInfo_L2RibPathListMac proto.InternalMessageInfo

func (m *L2RibPathListMac) GetMacAddress() string {
	if m != nil {
		return m.MacAddress
	}
	return ""
}

type L2RibPl struct {
	Type                 string            `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	PathListEsi          *L2RibPathListEsi `protobuf:"bytes,2,opt,name=path_list_esi,json=pathListEsi,proto3" json:"path_list_esi,omitempty"`
	PathListMac          *L2RibPathListMac `protobuf:"bytes,3,opt,name=path_list_mac,json=pathListMac,proto3" json:"path_list_mac,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *L2RibPl) Reset()         { *m = L2RibPl{} }
func (m *L2RibPl) String() string { return proto.CompactTextString(m) }
func (*L2RibPl) ProtoMessage()    {}
func (*L2RibPl) Descriptor() ([]byte, []int) {
	return fileDescriptor_77424dbf9c73aa7c, []int{8}
}

func (m *L2RibPl) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2RibPl.Unmarshal(m, b)
}
func (m *L2RibPl) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2RibPl.Marshal(b, m, deterministic)
}
func (m *L2RibPl) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2RibPl.Merge(m, src)
}
func (m *L2RibPl) XXX_Size() int {
	return xxx_messageInfo_L2RibPl.Size(m)
}
func (m *L2RibPl) XXX_DiscardUnknown() {
	xxx_messageInfo_L2RibPl.DiscardUnknown(m)
}

var xxx_messageInfo_L2RibPl proto.InternalMessageInfo

func (m *L2RibPl) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *L2RibPl) GetPathListEsi() *L2RibPathListEsi {
	if m != nil {
		return m.PathListEsi
	}
	return nil
}

func (m *L2RibPl) GetPathListMac() *L2RibPathListMac {
	if m != nil {
		return m.PathListMac
	}
	return nil
}

type L2RibPathList struct {
	ProducerId           uint32          `protobuf:"varint,1,opt,name=producer_id,json=producerId,proto3" json:"producer_id,omitempty"`
	MacCount             uint32          `protobuf:"varint,2,opt,name=mac_count,json=macCount,proto3" json:"mac_count,omitempty"`
	NextHopArray         []*L2RibNextHop `protobuf:"bytes,3,rep,name=next_hop_array,json=nextHopArray,proto3" json:"next_hop_array,omitempty"`
	LocalLabel           uint32          `protobuf:"varint,4,opt,name=local_label,json=localLabel,proto3" json:"local_label,omitempty"`
	PathListInfo         *L2RibPl        `protobuf:"bytes,5,opt,name=path_list_info,json=pathListInfo,proto3" json:"path_list_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *L2RibPathList) Reset()         { *m = L2RibPathList{} }
func (m *L2RibPathList) String() string { return proto.CompactTextString(m) }
func (*L2RibPathList) ProtoMessage()    {}
func (*L2RibPathList) Descriptor() ([]byte, []int) {
	return fileDescriptor_77424dbf9c73aa7c, []int{9}
}

func (m *L2RibPathList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2RibPathList.Unmarshal(m, b)
}
func (m *L2RibPathList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2RibPathList.Marshal(b, m, deterministic)
}
func (m *L2RibPathList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2RibPathList.Merge(m, src)
}
func (m *L2RibPathList) XXX_Size() int {
	return xxx_messageInfo_L2RibPathList.Size(m)
}
func (m *L2RibPathList) XXX_DiscardUnknown() {
	xxx_messageInfo_L2RibPathList.DiscardUnknown(m)
}

var xxx_messageInfo_L2RibPathList proto.InternalMessageInfo

func (m *L2RibPathList) GetProducerId() uint32 {
	if m != nil {
		return m.ProducerId
	}
	return 0
}

func (m *L2RibPathList) GetMacCount() uint32 {
	if m != nil {
		return m.MacCount
	}
	return 0
}

func (m *L2RibPathList) GetNextHopArray() []*L2RibNextHop {
	if m != nil {
		return m.NextHopArray
	}
	return nil
}

func (m *L2RibPathList) GetLocalLabel() uint32 {
	if m != nil {
		return m.LocalLabel
	}
	return 0
}

func (m *L2RibPathList) GetPathListInfo() *L2RibPl {
	if m != nil {
		return m.PathListInfo
	}
	return nil
}

type L2RibMacRouteEvpnEsi struct {
	EthernetSegmentId    *L2RibEsi      `protobuf:"bytes,1,opt,name=ethernet_segment_id,json=ethernetSegmentId,proto3" json:"ethernet_segment_id,omitempty"`
	SequenceNumber       uint32         `protobuf:"varint,2,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`
	ForwardState         bool           `protobuf:"varint,3,opt,name=forward_state,json=forwardState,proto3" json:"forward_state,omitempty"`
	PathList             *L2RibPathList `protobuf:"bytes,4,opt,name=path_list,json=pathList,proto3" json:"path_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *L2RibMacRouteEvpnEsi) Reset()         { *m = L2RibMacRouteEvpnEsi{} }
func (m *L2RibMacRouteEvpnEsi) String() string { return proto.CompactTextString(m) }
func (*L2RibMacRouteEvpnEsi) ProtoMessage()    {}
func (*L2RibMacRouteEvpnEsi) Descriptor() ([]byte, []int) {
	return fileDescriptor_77424dbf9c73aa7c, []int{10}
}

func (m *L2RibMacRouteEvpnEsi) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2RibMacRouteEvpnEsi.Unmarshal(m, b)
}
func (m *L2RibMacRouteEvpnEsi) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2RibMacRouteEvpnEsi.Marshal(b, m, deterministic)
}
func (m *L2RibMacRouteEvpnEsi) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2RibMacRouteEvpnEsi.Merge(m, src)
}
func (m *L2RibMacRouteEvpnEsi) XXX_Size() int {
	return xxx_messageInfo_L2RibMacRouteEvpnEsi.Size(m)
}
func (m *L2RibMacRouteEvpnEsi) XXX_DiscardUnknown() {
	xxx_messageInfo_L2RibMacRouteEvpnEsi.DiscardUnknown(m)
}

var xxx_messageInfo_L2RibMacRouteEvpnEsi proto.InternalMessageInfo

func (m *L2RibMacRouteEvpnEsi) GetEthernetSegmentId() *L2RibEsi {
	if m != nil {
		return m.EthernetSegmentId
	}
	return nil
}

func (m *L2RibMacRouteEvpnEsi) GetSequenceNumber() uint32 {
	if m != nil {
		return m.SequenceNumber
	}
	return 0
}

func (m *L2RibMacRouteEvpnEsi) GetForwardState() bool {
	if m != nil {
		return m.ForwardState
	}
	return false
}

func (m *L2RibMacRouteEvpnEsi) GetPathList() *L2RibPathList {
	if m != nil {
		return m.PathList
	}
	return nil
}

type L2RibMacRouteBmac struct {
	BmacAddress          string         `protobuf:"bytes,1,opt,name=bmac_address,json=bmacAddress,proto3" json:"bmac_address,omitempty"`
	ForwardState         bool           `protobuf:"varint,2,opt,name=forward_state,json=forwardState,proto3" json:"forward_state,omitempty"`
	PathList             *L2RibPathList `protobuf:"bytes,3,opt,name=path_list,json=pathList,proto3" json:"path_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *L2RibMacRouteBmac) Reset()         { *m = L2RibMacRouteBmac{} }
func (m *L2RibMacRouteBmac) String() string { return proto.CompactTextString(m) }
func (*L2RibMacRouteBmac) ProtoMessage()    {}
func (*L2RibMacRouteBmac) Descriptor() ([]byte, []int) {
	return fileDescriptor_77424dbf9c73aa7c, []int{11}
}

func (m *L2RibMacRouteBmac) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2RibMacRouteBmac.Unmarshal(m, b)
}
func (m *L2RibMacRouteBmac) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2RibMacRouteBmac.Marshal(b, m, deterministic)
}
func (m *L2RibMacRouteBmac) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2RibMacRouteBmac.Merge(m, src)
}
func (m *L2RibMacRouteBmac) XXX_Size() int {
	return xxx_messageInfo_L2RibMacRouteBmac.Size(m)
}
func (m *L2RibMacRouteBmac) XXX_DiscardUnknown() {
	xxx_messageInfo_L2RibMacRouteBmac.DiscardUnknown(m)
}

var xxx_messageInfo_L2RibMacRouteBmac proto.InternalMessageInfo

func (m *L2RibMacRouteBmac) GetBmacAddress() string {
	if m != nil {
		return m.BmacAddress
	}
	return ""
}

func (m *L2RibMacRouteBmac) GetForwardState() bool {
	if m != nil {
		return m.ForwardState
	}
	return false
}

func (m *L2RibMacRouteBmac) GetPathList() *L2RibPathList {
	if m != nil {
		return m.PathList
	}
	return nil
}

type MacRoute struct {
	Type                 string                `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Regular              *L2RibMacRouteRegular `protobuf:"bytes,2,opt,name=regular,proto3" json:"regular,omitempty"`
	EvpnEsi              *L2RibMacRouteEvpnEsi `protobuf:"bytes,3,opt,name=evpn_esi,json=evpnEsi,proto3" json:"evpn_esi,omitempty"`
	Bmac                 *L2RibMacRouteBmac    `protobuf:"bytes,4,opt,name=bmac,proto3" json:"bmac,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *MacRoute) Reset()         { *m = MacRoute{} }
func (m *MacRoute) String() string { return proto.CompactTextString(m) }
func (*MacRoute) ProtoMessage()    {}
func (*MacRoute) Descriptor() ([]byte, []int) {
	return fileDescriptor_77424dbf9c73aa7c, []int{12}
}

func (m *MacRoute) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MacRoute.Unmarshal(m, b)
}
func (m *MacRoute) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MacRoute.Marshal(b, m, deterministic)
}
func (m *MacRoute) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MacRoute.Merge(m, src)
}
func (m *MacRoute) XXX_Size() int {
	return xxx_messageInfo_MacRoute.Size(m)
}
func (m *MacRoute) XXX_DiscardUnknown() {
	xxx_messageInfo_MacRoute.DiscardUnknown(m)
}

var xxx_messageInfo_MacRoute proto.InternalMessageInfo

func (m *MacRoute) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *MacRoute) GetRegular() *L2RibMacRouteRegular {
	if m != nil {
		return m.Regular
	}
	return nil
}

func (m *MacRoute) GetEvpnEsi() *L2RibMacRouteEvpnEsi {
	if m != nil {
		return m.EvpnEsi
	}
	return nil
}

func (m *MacRoute) GetBmac() *L2RibMacRouteBmac {
	if m != nil {
		return m.Bmac
	}
	return nil
}

type L2RibMacRoute struct {
	MacAddress           string    `protobuf:"bytes,1,opt,name=mac_address,json=macAddress,proto3" json:"mac_address,omitempty"`
	AdminDistance        uint32    `protobuf:"varint,2,opt,name=admin_distance,json=adminDistance,proto3" json:"admin_distance,omitempty"`
	ProducerId           uint32    `protobuf:"varint,3,opt,name=producer_id,json=producerId,proto3" json:"producer_id,omitempty"`
	Route                *MacRoute `protobuf:"bytes,4,opt,name=route,proto3" json:"route,omitempty"`
	TopologyId           uint32    `protobuf:"varint,5,opt,name=topology_id,json=topologyId,proto3" json:"topology_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *L2RibMacRoute) Reset()         { *m = L2RibMacRoute{} }
func (m *L2RibMacRoute) String() string { return proto.CompactTextString(m) }
func (*L2RibMacRoute) ProtoMessage()    {}
func (*L2RibMacRoute) Descriptor() ([]byte, []int) {
	return fileDescriptor_77424dbf9c73aa7c, []int{13}
}

func (m *L2RibMacRoute) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2RibMacRoute.Unmarshal(m, b)
}
func (m *L2RibMacRoute) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2RibMacRoute.Marshal(b, m, deterministic)
}
func (m *L2RibMacRoute) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2RibMacRoute.Merge(m, src)
}
func (m *L2RibMacRoute) XXX_Size() int {
	return xxx_messageInfo_L2RibMacRoute.Size(m)
}
func (m *L2RibMacRoute) XXX_DiscardUnknown() {
	xxx_messageInfo_L2RibMacRoute.DiscardUnknown(m)
}

var xxx_messageInfo_L2RibMacRoute proto.InternalMessageInfo

func (m *L2RibMacRoute) GetMacAddress() string {
	if m != nil {
		return m.MacAddress
	}
	return ""
}

func (m *L2RibMacRoute) GetAdminDistance() uint32 {
	if m != nil {
		return m.AdminDistance
	}
	return 0
}

func (m *L2RibMacRoute) GetProducerId() uint32 {
	if m != nil {
		return m.ProducerId
	}
	return 0
}

func (m *L2RibMacRoute) GetRoute() *MacRoute {
	if m != nil {
		return m.Route
	}
	return nil
}

func (m *L2RibMacRoute) GetTopologyId() uint32 {
	if m != nil {
		return m.TopologyId
	}
	return 0
}

type L2RibTlv struct {
	TlvType              uint32   `protobuf:"varint,1,opt,name=tlv_type,json=tlvType,proto3" json:"tlv_type,omitempty"`
	TlvLen               uint32   `protobuf:"varint,2,opt,name=tlv_len,json=tlvLen,proto3" json:"tlv_len,omitempty"`
	TlvVal               []uint32 `protobuf:"varint,3,rep,packed,name=tlv_val,json=tlvVal,proto3" json:"tlv_val,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *L2RibTlv) Reset()         { *m = L2RibTlv{} }
func (m *L2RibTlv) String() string { return proto.CompactTextString(m) }
func (*L2RibTlv) ProtoMessage()    {}
func (*L2RibTlv) Descriptor() ([]byte, []int) {
	return fileDescriptor_77424dbf9c73aa7c, []int{14}
}

func (m *L2RibTlv) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2RibTlv.Unmarshal(m, b)
}
func (m *L2RibTlv) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2RibTlv.Marshal(b, m, deterministic)
}
func (m *L2RibTlv) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2RibTlv.Merge(m, src)
}
func (m *L2RibTlv) XXX_Size() int {
	return xxx_messageInfo_L2RibTlv.Size(m)
}
func (m *L2RibTlv) XXX_DiscardUnknown() {
	xxx_messageInfo_L2RibTlv.DiscardUnknown(m)
}

var xxx_messageInfo_L2RibTlv proto.InternalMessageInfo

func (m *L2RibTlv) GetTlvType() uint32 {
	if m != nil {
		return m.TlvType
	}
	return 0
}

func (m *L2RibTlv) GetTlvLen() uint32 {
	if m != nil {
		return m.TlvLen
	}
	return 0
}

func (m *L2RibTlv) GetTlvVal() []uint32 {
	if m != nil {
		return m.TlvVal
	}
	return nil
}

type L2RibMacRouteDetail struct {
	MacRoute             *L2RibMacRoute `protobuf:"bytes,50,opt,name=mac_route,json=macRoute,proto3" json:"mac_route,omitempty"`
	SequenceNumber       uint32         `protobuf:"varint,51,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`
	Flags                string         `protobuf:"bytes,52,opt,name=flags,proto3" json:"flags,omitempty"`
	Baseflags            string         `protobuf:"bytes,53,opt,name=baseflags,proto3" json:"baseflags,omitempty"`
	Soo                  uint32         `protobuf:"varint,54,opt,name=soo,proto3" json:"soo,omitempty"`
	SlotId               uint32         `protobuf:"varint,55,opt,name=slot_id,json=slotId,proto3" json:"slot_id,omitempty"`
	Esi                  string         `protobuf:"bytes,56,opt,name=esi,proto3" json:"esi,omitempty"`
	LastUpdateTimestamp  uint64         `protobuf:"varint,57,opt,name=last_update_timestamp,json=lastUpdateTimestamp,proto3" json:"last_update_timestamp,omitempty"`
	RtTlv                *L2RibTlv      `protobuf:"bytes,58,opt,name=rt_tlv,json=rtTlv,proto3" json:"rt_tlv,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *L2RibMacRouteDetail) Reset()         { *m = L2RibMacRouteDetail{} }
func (m *L2RibMacRouteDetail) String() string { return proto.CompactTextString(m) }
func (*L2RibMacRouteDetail) ProtoMessage()    {}
func (*L2RibMacRouteDetail) Descriptor() ([]byte, []int) {
	return fileDescriptor_77424dbf9c73aa7c, []int{15}
}

func (m *L2RibMacRouteDetail) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2RibMacRouteDetail.Unmarshal(m, b)
}
func (m *L2RibMacRouteDetail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2RibMacRouteDetail.Marshal(b, m, deterministic)
}
func (m *L2RibMacRouteDetail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2RibMacRouteDetail.Merge(m, src)
}
func (m *L2RibMacRouteDetail) XXX_Size() int {
	return xxx_messageInfo_L2RibMacRouteDetail.Size(m)
}
func (m *L2RibMacRouteDetail) XXX_DiscardUnknown() {
	xxx_messageInfo_L2RibMacRouteDetail.DiscardUnknown(m)
}

var xxx_messageInfo_L2RibMacRouteDetail proto.InternalMessageInfo

func (m *L2RibMacRouteDetail) GetMacRoute() *L2RibMacRoute {
	if m != nil {
		return m.MacRoute
	}
	return nil
}

func (m *L2RibMacRouteDetail) GetSequenceNumber() uint32 {
	if m != nil {
		return m.SequenceNumber
	}
	return 0
}

func (m *L2RibMacRouteDetail) GetFlags() string {
	if m != nil {
		return m.Flags
	}
	return ""
}

func (m *L2RibMacRouteDetail) GetBaseflags() string {
	if m != nil {
		return m.Baseflags
	}
	return ""
}

func (m *L2RibMacRouteDetail) GetSoo() uint32 {
	if m != nil {
		return m.Soo
	}
	return 0
}

func (m *L2RibMacRouteDetail) GetSlotId() uint32 {
	if m != nil {
		return m.SlotId
	}
	return 0
}

func (m *L2RibMacRouteDetail) GetEsi() string {
	if m != nil {
		return m.Esi
	}
	return ""
}

func (m *L2RibMacRouteDetail) GetLastUpdateTimestamp() uint64 {
	if m != nil {
		return m.LastUpdateTimestamp
	}
	return 0
}

func (m *L2RibMacRouteDetail) GetRtTlv() *L2RibTlv {
	if m != nil {
		return m.RtTlv
	}
	return nil
}

func init() {
	proto.RegisterType((*L2RibMacRouteDetail_KEYS)(nil), "cisco_ios_xr_l2rib_oper.l2rib.evi_child_tables.mac_details.mac_detail.l2rib_mac_route_detail_KEYS")
	proto.RegisterType((*LabeledNextHop)(nil), "cisco_ios_xr_l2rib_oper.l2rib.evi_child_tables.mac_details.mac_detail.labeled_next_hop")
	proto.RegisterType((*NextHop)(nil), "cisco_ios_xr_l2rib_oper.l2rib.evi_child_tables.mac_details.mac_detail.next_hop")
	proto.RegisterType((*L2RibNextHop)(nil), "cisco_ios_xr_l2rib_oper.l2rib.evi_child_tables.mac_details.mac_detail.l2rib_next_hop")
	proto.RegisterType((*L2RibMacRouteRegular)(nil), "cisco_ios_xr_l2rib_oper.l2rib.evi_child_tables.mac_details.mac_detail.l2rib_mac_route_regular")
	proto.RegisterType((*L2RibEsi)(nil), "cisco_ios_xr_l2rib_oper.l2rib.evi_child_tables.mac_details.mac_detail.l2rib_esi")
	proto.RegisterType((*L2RibPathListEsi)(nil), "cisco_ios_xr_l2rib_oper.l2rib.evi_child_tables.mac_details.mac_detail.l2rib_path_list_esi")
	proto.RegisterType((*L2RibPathListMac)(nil), "cisco_ios_xr_l2rib_oper.l2rib.evi_child_tables.mac_details.mac_detail.l2rib_path_list_mac")
	proto.RegisterType((*L2RibPl)(nil), "cisco_ios_xr_l2rib_oper.l2rib.evi_child_tables.mac_details.mac_detail.l2rib_pl")
	proto.RegisterType((*L2RibPathList)(nil), "cisco_ios_xr_l2rib_oper.l2rib.evi_child_tables.mac_details.mac_detail.l2rib_path_list")
	proto.RegisterType((*L2RibMacRouteEvpnEsi)(nil), "cisco_ios_xr_l2rib_oper.l2rib.evi_child_tables.mac_details.mac_detail.l2rib_mac_route_evpn_esi")
	proto.RegisterType((*L2RibMacRouteBmac)(nil), "cisco_ios_xr_l2rib_oper.l2rib.evi_child_tables.mac_details.mac_detail.l2rib_mac_route_bmac")
	proto.RegisterType((*MacRoute)(nil), "cisco_ios_xr_l2rib_oper.l2rib.evi_child_tables.mac_details.mac_detail.mac_route")
	proto.RegisterType((*L2RibMacRoute)(nil), "cisco_ios_xr_l2rib_oper.l2rib.evi_child_tables.mac_details.mac_detail.l2rib_mac_route")
	proto.RegisterType((*L2RibTlv)(nil), "cisco_ios_xr_l2rib_oper.l2rib.evi_child_tables.mac_details.mac_detail.l2rib_tlv")
	proto.RegisterType((*L2RibMacRouteDetail)(nil), "cisco_ios_xr_l2rib_oper.l2rib.evi_child_tables.mac_details.mac_detail.l2rib_mac_route_detail")
}

func init() { proto.RegisterFile("l2rib_mac_route_detail.proto", fileDescriptor_77424dbf9c73aa7c) }

var fileDescriptor_77424dbf9c73aa7c = []byte{
	// 1159 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x57, 0xdd, 0x6e, 0xe3, 0x44,
	0x14, 0x96, 0x93, 0xa6, 0x49, 0x4e, 0x9a, 0x6c, 0x71, 0x77, 0xa9, 0x97, 0x5d, 0xd4, 0x60, 0x84,
	0x28, 0x37, 0xb9, 0xc8, 0x2e, 0xe5, 0xe7, 0xae, 0x82, 0xa2, 0x8d, 0xb6, 0x2c, 0x2b, 0xb7, 0xbb,
	0xfc, 0x49, 0x8c, 0x26, 0xf6, 0xa4, 0x1d, 0x18, 0x7b, 0xbc, 0x33, 0x13, 0xd3, 0x80, 0x84, 0x90,
	0x90, 0x10, 0x82, 0x0b, 0xde, 0x80, 0x97, 0xe0, 0x15, 0x10, 0x2f, 0xc0, 0x0b, 0x70, 0xc1, 0x83,
	0xa0, 0xf9, 0xb1, 0xd3, 0xa6, 0x91, 0xf6, 0x26, 0x41, 0xdc, 0xcd, 0x7c, 0x63, 0xfb, 0x9b, 0xf9,
	0xce, 0x99, 0xef, 0x1c, 0xc3, 0x5d, 0x36, 0x14, 0x74, 0x8c, 0x52, 0x1c, 0x23, 0xc1, 0xa7, 0x8a,
	0xa0, 0x84, 0x28, 0x4c, 0xd9, 0x20, 0x17, 0x5c, 0x71, 0xff, 0x28, 0xa6, 0x32, 0xe6, 0x88, 0x72,
	0x89, 0x2e, 0x04, 0xb2, 0x8f, 0xf2, 0x9c, 0x88, 0x81, 0x19, 0x0e, 0x48, 0x41, 0x51, 0x7c, 0x4e,
	0x59, 0x82, 0x14, 0x1e, 0x33, 0x22, 0x07, 0xfa, 0x33, 0xf6, 0x03, 0x97, 0xc7, 0x61, 0x0c, 0x77,
	0x96, 0xd3, 0xa0, 0x87, 0x47, 0x9f, 0x9e, 0xf8, 0xdb, 0x50, 0x27, 0x05, 0x0d, 0xbc, 0xbe, 0xb7,
	0xdf, 0x8d, 0xf4, 0xd0, 0xbf, 0x0d, 0x2d, 0xfd, 0x28, 0x4e, 0x12, 0x11, 0xd4, 0xfa, 0xde, 0x7e,
	0x3b, 0x6a, 0xa6, 0x38, 0x3e, 0x4c, 0x12, 0xe1, 0xef, 0x42, 0x33, 0x17, 0x3c, 0x41, 0x34, 0x09,
	0xea, 0xe6, 0x85, 0x4d, 0x3d, 0x1d, 0x25, 0xe1, 0xcf, 0x1e, 0x6c, 0x33, 0x3c, 0x26, 0x8c, 0x24,
	0x28, 0x23, 0x17, 0x0a, 0x9d, 0xf3, 0xdc, 0x7f, 0x0d, 0x7a, 0xfa, 0x23, 0x44, 0x4a, 0x34, 0xc1,
	0x29, 0x65, 0x33, 0xc3, 0xd2, 0x8e, 0xba, 0x0e, 0xfd, 0xc0, 0x80, 0xfe, 0xcb, 0x00, 0x34, 0x47,
	0x0e, 0x73, 0x8c, 0x6d, 0x9a, 0x1f, 0x5a, 0xc0, 0xbf, 0x09, 0x0d, 0xf3, 0x65, 0xc7, 0x68, 0x27,
	0xfe, 0x4b, 0xd0, 0xa2, 0x99, 0x22, 0x22, 0xc3, 0x2c, 0xd8, 0xe8, 0x7b, 0xfb, 0xad, 0xa8, 0x9a,
	0x87, 0x3f, 0xd5, 0xa0, 0x55, 0x6d, 0xc2, 0x87, 0x0d, 0x35, 0xcb, 0x89, 0xa3, 0x36, 0x63, 0x8d,
	0xd1, 0xbc, 0xb8, 0xef, 0xb8, 0xcc, 0xd8, 0x61, 0x07, 0x86, 0xc5, 0x62, 0x07, 0x5a, 0x9b, 0x14,
	0xc7, 0xe6, 0xfb, 0xed, 0x48, 0x0f, 0xfd, 0x37, 0x60, 0xdb, 0xd0, 0x4c, 0x70, 0x4c, 0xd0, 0x39,
	0xce, 0x12, 0x46, 0x82, 0x86, 0x59, 0xbe, 0x51, 0xe1, 0x0f, 0x0c, 0xec, 0x3f, 0x83, 0xa6, 0x53,
	0x24, 0xd8, 0xec, 0x7b, 0xfb, 0x9d, 0xe1, 0xc7, 0x83, 0x95, 0x04, 0x74, 0xb0, 0xa8, 0x73, 0x54,
	0xf2, 0xe8, 0xfd, 0x5e, 0xd0, 0x24, 0x68, 0xda, 0x58, 0x5e, 0xd0, 0x24, 0xfc, 0xdd, 0x83, 0x9e,
	0x25, 0xaa, 0x04, 0xd9, 0x83, 0x8e, 0xe2, 0x39, 0x67, 0xfc, 0x6c, 0xa6, 0xe3, 0x68, 0x03, 0x0f,
	0x25, 0x34, 0x4a, 0xb4, 0xe0, 0x13, 0x86, 0xcf, 0x6c, 0x28, 0xba, 0x91, 0x9d, 0xf8, 0x5f, 0xce,
	0x35, 0x35, 0x1a, 0x75, 0x86, 0x1f, 0xad, 0xe8, 0x3c, 0xf3, 0x73, 0xe8, 0xd1, 0x03, 0x9e, 0x87,
	0xbf, 0x78, 0xb0, 0xbb, 0x98, 0xb3, 0x82, 0x9c, 0x4d, 0x19, 0x16, 0x7e, 0x7e, 0x69, 0x1f, 0x9e,
	0xd9, 0xc7, 0x93, 0x55, 0xe9, 0x7a, 0x45, 0xa7, 0xf9, 0x6e, 0x18, 0xb4, 0xed, 0x12, 0x91, 0xd4,
	0x7f, 0x1d, 0x6e, 0xc8, 0x99, 0x54, 0x24, 0x45, 0xb9, 0xa0, 0x5c, 0x50, 0x35, 0x73, 0x0a, 0xf6,
	0x2c, 0xfc, 0xd8, 0xa1, 0xfe, 0x1d, 0x68, 0xbb, 0x07, 0x69, 0xe2, 0x12, 0xad, 0x65, 0x81, 0x51,
	0xa2, 0xaf, 0x58, 0xce, 0x85, 0x42, 0x5f, 0x91, 0x99, 0x4b, 0xeb, 0xa6, 0x9e, 0x3f, 0x24, 0xb3,
	0xf0, 0xcf, 0x1a, 0xec, 0x58, 0xba, 0x1c, 0xab, 0x73, 0xc4, 0xa8, 0x54, 0x86, 0xf8, 0x7b, 0x0f,
	0x76, 0x88, 0x3a, 0x27, 0x22, 0x23, 0x0a, 0x49, 0x72, 0x96, 0x92, 0x4c, 0x95, 0xf1, 0xeb, 0x0c,
	0x1f, 0xaf, 0x54, 0x03, 0x22, 0x69, 0xf4, 0x42, 0x49, 0x76, 0x62, 0xb9, 0x46, 0x89, 0xff, 0xab,
	0x07, 0xb7, 0xf5, 0xb3, 0xd3, 0x3c, 0xc1, 0x8a, 0x54, 0x4a, 0x21, 0x2c, 0x04, 0x9e, 0x05, 0xb5,
	0x7e, 0x7d, 0x7d, 0xc1, 0xb8, 0x95, 0xe2, 0xf8, 0x89, 0xa1, 0x7d, 0x64, 0xa3, 0x72, 0xa8, 0x39,
	0xb5, 0x0b, 0x08, 0x22, 0x39, 0x2b, 0x88, 0x35, 0xa4, 0x56, 0x54, 0xcd, 0xc3, 0x83, 0xeb, 0x3a,
	0xea, 0x1b, 0xbc, 0x07, 0x9d, 0xd2, 0xdd, 0xb4, 0xdd, 0x58, 0x5b, 0x00, 0x67, 0x70, 0x44, 0xca,
	0xf0, 0xb7, 0x1a, 0xb4, 0xdc, 0x8b, 0x6c, 0xa9, 0x7b, 0x7c, 0x07, 0xdd, 0x2b, 0xa1, 0x31, 0xd1,
	0xed, 0x0c, 0x3f, 0x5b, 0xe9, 0xc9, 0xaf, 0x30, 0x44, 0x1d, 0x3d, 0x3d, 0xa6, 0x52, 0x1d, 0x49,
	0x7a, 0x95, 0x5f, 0xfb, 0x53, 0x7d, 0xad, 0xfc, 0x29, 0x8e, 0xe7, 0xfc, 0x1f, 0xe2, 0x38, 0xfc,
	0xa7, 0x06, 0x37, 0x16, 0x1e, 0xd2, 0xaa, 0xea, 0x4a, 0x30, 0x8d, 0x89, 0xb8, 0x64, 0x2a, 0x25,
	0x34, 0x4a, 0xf4, 0x75, 0xd0, 0x1c, 0x31, 0x9f, 0x66, 0xca, 0x19, 0x8b, 0xae, 0x32, 0xef, 0xe9,
	0xb9, 0xff, 0x2d, 0xf4, 0x16, 0x92, 0xa9, 0xbe, 0xce, 0x64, 0xda, 0xca, 0x2e, 0xe7, 0xd0, 0x1e,
	0x74, 0x18, 0x8f, 0x31, 0x43, 0xb6, 0xca, 0x6c, 0xd8, 0xad, 0x1b, 0xe8, 0xd8, 0x94, 0x9a, 0x29,
	0xf4, 0xe6, 0x6a, 0xd0, 0x6c, 0xc2, 0x8d, 0xe3, 0xaf, 0xce, 0xff, 0xca, 0x64, 0x8b, 0xb6, 0x4a,
	0x95, 0x47, 0xd9, 0x84, 0x87, 0x7f, 0xd7, 0x20, 0x58, 0x34, 0x41, 0x52, 0xe4, 0xd9, 0xff, 0xc5,
	0x0d, 0xb4, 0x13, 0x92, 0x67, 0x53, 0x92, 0xc5, 0x04, 0x65, 0xd3, 0x74, 0x4c, 0x84, 0x8b, 0x6b,
	0xaf, 0x84, 0x1f, 0x19, 0xd4, 0x7f, 0x15, 0xba, 0x13, 0x2e, 0xbe, 0xc6, 0x22, 0x41, 0x52, 0x61,
	0x45, 0xdc, 0x4d, 0xdd, 0x72, 0xe0, 0x89, 0xc6, 0x7c, 0x09, 0xed, 0x4a, 0x64, 0x13, 0x83, 0xce,
	0xf0, 0xe9, 0x7a, 0x12, 0x3a, 0x6a, 0x95, 0x32, 0x87, 0x7f, 0x79, 0x70, 0x73, 0x51, 0xe2, 0xb1,
	0x36, 0x89, 0x57, 0x60, 0x6b, 0x7c, 0xdd, 0x25, 0x3a, 0xe3, 0xb9, 0x4d, 0x5c, 0x3f, 0x55, 0xed,
	0x79, 0xa7, 0xaa, 0xff, 0x47, 0xa7, 0xfa, 0xb1, 0x6e, 0xef, 0x9a, 0x39, 0xcf, 0x52, 0x07, 0xbb,
	0x80, 0xa6, 0x2b, 0xa7, 0xce, 0xbb, 0xbe, 0x58, 0xe9, 0xa6, 0xae, 0x15, 0xed, 0xa8, 0xa4, 0xf3,
	0xbf, 0x81, 0x56, 0x99, 0xc3, 0x4e, 0x0f, 0xb4, 0x26, 0xea, 0x92, 0x26, 0x6a, 0xea, 0x91, 0xf6,
	0x4d, 0x0e, 0x1b, 0xe3, 0xb2, 0x9d, 0xeb, 0x0c, 0x3f, 0x5f, 0x13, 0xaf, 0xa6, 0x88, 0x0c, 0x51,
	0xf8, 0x43, 0x65, 0x94, 0xf3, 0x70, 0x3c, 0xaf, 0xfc, 0xd8, 0xa6, 0x39, 0xa5, 0x19, 0x4a, 0xa8,
	0x54, 0x38, 0x8b, 0x89, 0xbb, 0x55, 0x5d, 0x83, 0xbe, 0xef, 0xc0, 0x45, 0xc3, 0xad, 0x5f, 0x33,
	0xdc, 0x09, 0x34, 0x0c, 0xa3, 0x3b, 0xee, 0xaa, 0x2c, 0xa1, 0x3a, 0x49, 0xd4, 0xa8, 0x0e, 0x74,
	0xb9, 0x9d, 0x6c, 0x2c, 0xb6, 0x93, 0xe1, 0x27, 0x65, 0xfb, 0xa4, 0x58, 0xa1, 0x1b, 0x1f, 0xc5,
	0x0a, 0x54, 0x65, 0x64, 0x37, 0x6a, 0x2a, 0x56, 0x9c, 0xea, 0xa4, 0xdc, 0x05, 0x3d, 0x44, 0x8c,
	0x64, 0xee, 0xc4, 0x9b, 0x8a, 0x15, 0xc7, 0x24, 0x2b, 0x17, 0x0a, 0xcc, 0x4c, 0x59, 0xb0, 0x0b,
	0x4f, 0x31, 0x0b, 0xff, 0xa8, 0xc3, 0x8b, 0xcb, 0x7f, 0x6d, 0xf4, 0xc5, 0xab, 0xb0, 0x60, 0xb8,
	0x86, 0x8b, 0x37, 0xd7, 0x41, 0x97, 0xb1, 0xc8, 0x48, 0xb1, 0xc4, 0x11, 0xef, 0x2d, 0x75, 0xc4,
	0xaa, 0xc3, 0xbe, 0x6f, 0xc2, 0xef, 0x3a, 0xec, 0xbb, 0xd0, 0x1e, 0x63, 0x49, 0xec, 0xca, 0x9b,
	0xf6, 0x37, 0xa8, 0x02, 0x74, 0x6f, 0x2f, 0x39, 0x0f, 0x0e, 0x6c, 0x6f, 0x2f, 0x39, 0xd7, 0xba,
	0x48, 0xc6, 0x8d, 0xed, 0xbf, 0x65, 0x05, 0xd3, 0xd3, 0x91, 0xf9, 0x0d, 0xd0, 0xf7, 0xeb, 0x6d,
	0xfb, 0xdb, 0xa2, 0xcb, 0xc5, 0x10, 0x6e, 0x31, 0x2c, 0x55, 0xd9, 0xb9, 0x29, 0x9a, 0x12, 0xa9,
	0x70, 0x9a, 0x07, 0xef, 0xf4, 0xbd, 0xfd, 0x8d, 0x68, 0x47, 0x2f, 0xda, 0xf6, 0xea, 0xb4, 0x5c,
	0xf2, 0xcf, 0x60, 0x53, 0x28, 0x1d, 0xb4, 0xe0, 0xdd, 0x35, 0x14, 0x15, 0xc5, 0x8a, 0xa8, 0x21,
	0xd4, 0x29, 0x2b, 0xc6, 0x9b, 0xe6, 0x77, 0xf7, 0xde, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0xf4,
	0x9b, 0xfc, 0xc8, 0x0e, 0x0f, 0x00, 0x00,
}
