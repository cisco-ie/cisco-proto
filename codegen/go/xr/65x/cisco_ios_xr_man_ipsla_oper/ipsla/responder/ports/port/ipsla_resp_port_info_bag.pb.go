/*
Copyright 2019 Cisco Systems

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ipsla_resp_port_info_bag.proto

package cisco_ios_xr_man_ipsla_oper_ipsla_responder_ports_port

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type IpslaRespPortInfoBag_KEYS struct {
	Port                 uint32   `protobuf:"varint,1,opt,name=port,proto3" json:"port,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IpslaRespPortInfoBag_KEYS) Reset()         { *m = IpslaRespPortInfoBag_KEYS{} }
func (m *IpslaRespPortInfoBag_KEYS) String() string { return proto.CompactTextString(m) }
func (*IpslaRespPortInfoBag_KEYS) ProtoMessage()    {}
func (*IpslaRespPortInfoBag_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_6019f5a2240c08c5, []int{0}
}

func (m *IpslaRespPortInfoBag_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IpslaRespPortInfoBag_KEYS.Unmarshal(m, b)
}
func (m *IpslaRespPortInfoBag_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IpslaRespPortInfoBag_KEYS.Marshal(b, m, deterministic)
}
func (m *IpslaRespPortInfoBag_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IpslaRespPortInfoBag_KEYS.Merge(m, src)
}
func (m *IpslaRespPortInfoBag_KEYS) XXX_Size() int {
	return xxx_messageInfo_IpslaRespPortInfoBag_KEYS.Size(m)
}
func (m *IpslaRespPortInfoBag_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_IpslaRespPortInfoBag_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_IpslaRespPortInfoBag_KEYS proto.InternalMessageInfo

func (m *IpslaRespPortInfoBag_KEYS) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

type IpslaRespSenderBag struct {
	IpAddress            string   `protobuf:"bytes,1,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
	PortXr               uint32   `protobuf:"varint,2,opt,name=port_xr,json=portXr,proto3" json:"port_xr,omitempty"`
	LastRecvTime         uint64   `protobuf:"varint,3,opt,name=last_recv_time,json=lastRecvTime,proto3" json:"last_recv_time,omitempty"`
	Ipv6Address          string   `protobuf:"bytes,4,opt,name=ipv6_address,json=ipv6Address,proto3" json:"ipv6_address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IpslaRespSenderBag) Reset()         { *m = IpslaRespSenderBag{} }
func (m *IpslaRespSenderBag) String() string { return proto.CompactTextString(m) }
func (*IpslaRespSenderBag) ProtoMessage()    {}
func (*IpslaRespSenderBag) Descriptor() ([]byte, []int) {
	return fileDescriptor_6019f5a2240c08c5, []int{1}
}

func (m *IpslaRespSenderBag) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IpslaRespSenderBag.Unmarshal(m, b)
}
func (m *IpslaRespSenderBag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IpslaRespSenderBag.Marshal(b, m, deterministic)
}
func (m *IpslaRespSenderBag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IpslaRespSenderBag.Merge(m, src)
}
func (m *IpslaRespSenderBag) XXX_Size() int {
	return xxx_messageInfo_IpslaRespSenderBag.Size(m)
}
func (m *IpslaRespSenderBag) XXX_DiscardUnknown() {
	xxx_messageInfo_IpslaRespSenderBag.DiscardUnknown(m)
}

var xxx_messageInfo_IpslaRespSenderBag proto.InternalMessageInfo

func (m *IpslaRespSenderBag) GetIpAddress() string {
	if m != nil {
		return m.IpAddress
	}
	return ""
}

func (m *IpslaRespSenderBag) GetPortXr() uint32 {
	if m != nil {
		return m.PortXr
	}
	return 0
}

func (m *IpslaRespSenderBag) GetLastRecvTime() uint64 {
	if m != nil {
		return m.LastRecvTime
	}
	return 0
}

func (m *IpslaRespSenderBag) GetIpv6Address() string {
	if m != nil {
		return m.Ipv6Address
	}
	return ""
}

type IpslaRespPortInfoBag struct {
	PortXr               uint32                `protobuf:"varint,50,opt,name=port_xr,json=portXr,proto3" json:"port_xr,omitempty"`
	LocalAddress         string                `protobuf:"bytes,51,opt,name=local_address,json=localAddress,proto3" json:"local_address,omitempty"`
	NumProbes            uint32                `protobuf:"varint,52,opt,name=num_probes,json=numProbes,proto3" json:"num_probes,omitempty"`
	CtrlProbes           uint32                `protobuf:"varint,53,opt,name=ctrl_probes,json=ctrlProbes,proto3" json:"ctrl_probes,omitempty"`
	Permanent            bool                  `protobuf:"varint,54,opt,name=permanent,proto3" json:"permanent,omitempty"`
	DiscardOn            bool                  `protobuf:"varint,55,opt,name=discard_on,json=discardOn,proto3" json:"discard_on,omitempty"`
	PdTimeStampFailed    bool                  `protobuf:"varint,56,opt,name=pd_time_stamp_failed,json=pdTimeStampFailed,proto3" json:"pd_time_stamp_failed,omitempty"`
	Sender               []*IpslaRespSenderBag `protobuf:"bytes,57,rep,name=sender,proto3" json:"sender,omitempty"`
	IsIpsla              bool                  `protobuf:"varint,58,opt,name=is_ipsla,json=isIpsla,proto3" json:"is_ipsla,omitempty"`
	DropCounter          uint32                `protobuf:"varint,59,opt,name=drop_counter,json=dropCounter,proto3" json:"drop_counter,omitempty"`
	Socket               int32                 `protobuf:"zigzag32,60,opt,name=socket,proto3" json:"socket,omitempty"`
	LocalIpv6Address     string                `protobuf:"bytes,61,opt,name=local_ipv6_address,json=localIpv6Address,proto3" json:"local_ipv6_address,omitempty"`
	Family               int32                 `protobuf:"zigzag32,62,opt,name=family,proto3" json:"family,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *IpslaRespPortInfoBag) Reset()         { *m = IpslaRespPortInfoBag{} }
func (m *IpslaRespPortInfoBag) String() string { return proto.CompactTextString(m) }
func (*IpslaRespPortInfoBag) ProtoMessage()    {}
func (*IpslaRespPortInfoBag) Descriptor() ([]byte, []int) {
	return fileDescriptor_6019f5a2240c08c5, []int{2}
}

func (m *IpslaRespPortInfoBag) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IpslaRespPortInfoBag.Unmarshal(m, b)
}
func (m *IpslaRespPortInfoBag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IpslaRespPortInfoBag.Marshal(b, m, deterministic)
}
func (m *IpslaRespPortInfoBag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IpslaRespPortInfoBag.Merge(m, src)
}
func (m *IpslaRespPortInfoBag) XXX_Size() int {
	return xxx_messageInfo_IpslaRespPortInfoBag.Size(m)
}
func (m *IpslaRespPortInfoBag) XXX_DiscardUnknown() {
	xxx_messageInfo_IpslaRespPortInfoBag.DiscardUnknown(m)
}

var xxx_messageInfo_IpslaRespPortInfoBag proto.InternalMessageInfo

func (m *IpslaRespPortInfoBag) GetPortXr() uint32 {
	if m != nil {
		return m.PortXr
	}
	return 0
}

func (m *IpslaRespPortInfoBag) GetLocalAddress() string {
	if m != nil {
		return m.LocalAddress
	}
	return ""
}

func (m *IpslaRespPortInfoBag) GetNumProbes() uint32 {
	if m != nil {
		return m.NumProbes
	}
	return 0
}

func (m *IpslaRespPortInfoBag) GetCtrlProbes() uint32 {
	if m != nil {
		return m.CtrlProbes
	}
	return 0
}

func (m *IpslaRespPortInfoBag) GetPermanent() bool {
	if m != nil {
		return m.Permanent
	}
	return false
}

func (m *IpslaRespPortInfoBag) GetDiscardOn() bool {
	if m != nil {
		return m.DiscardOn
	}
	return false
}

func (m *IpslaRespPortInfoBag) GetPdTimeStampFailed() bool {
	if m != nil {
		return m.PdTimeStampFailed
	}
	return false
}

func (m *IpslaRespPortInfoBag) GetSender() []*IpslaRespSenderBag {
	if m != nil {
		return m.Sender
	}
	return nil
}

func (m *IpslaRespPortInfoBag) GetIsIpsla() bool {
	if m != nil {
		return m.IsIpsla
	}
	return false
}

func (m *IpslaRespPortInfoBag) GetDropCounter() uint32 {
	if m != nil {
		return m.DropCounter
	}
	return 0
}

func (m *IpslaRespPortInfoBag) GetSocket() int32 {
	if m != nil {
		return m.Socket
	}
	return 0
}

func (m *IpslaRespPortInfoBag) GetLocalIpv6Address() string {
	if m != nil {
		return m.LocalIpv6Address
	}
	return ""
}

func (m *IpslaRespPortInfoBag) GetFamily() int32 {
	if m != nil {
		return m.Family
	}
	return 0
}

func init() {
	proto.RegisterType((*IpslaRespPortInfoBag_KEYS)(nil), "cisco_ios_xr_man_ipsla_oper.ipsla.responder.ports.port.ipsla_resp_port_info_bag_KEYS")
	proto.RegisterType((*IpslaRespSenderBag)(nil), "cisco_ios_xr_man_ipsla_oper.ipsla.responder.ports.port.ipsla_resp_sender_bag")
	proto.RegisterType((*IpslaRespPortInfoBag)(nil), "cisco_ios_xr_man_ipsla_oper.ipsla.responder.ports.port.ipsla_resp_port_info_bag")
}

func init() { proto.RegisterFile("ipsla_resp_port_info_bag.proto", fileDescriptor_6019f5a2240c08c5) }

var fileDescriptor_6019f5a2240c08c5 = []byte{
	// 460 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x93, 0x5d, 0x8b, 0x13, 0x31,
	0x14, 0x86, 0x19, 0xb7, 0x74, 0xb7, 0xa7, 0x5d, 0x71, 0x83, 0x1f, 0x11, 0xac, 0x8e, 0xd5, 0x8b,
	0xb9, 0x90, 0x11, 0xb6, 0x5a, 0xbf, 0x05, 0x11, 0x85, 0x45, 0x44, 0x99, 0xf5, 0x42, 0xaf, 0x42,
	0x9a, 0xa4, 0x12, 0x9c, 0x49, 0x42, 0x92, 0x96, 0xf5, 0x27, 0xf8, 0x0f, 0xfc, 0xb9, 0x92, 0x93,
	0xd9, 0x2f, 0x70, 0x6f, 0xf6, 0x66, 0xc8, 0x79, 0xdf, 0x9c, 0xe7, 0x64, 0xf2, 0xce, 0xc0, 0x5d,
	0xed, 0x42, 0xcb, 0x99, 0x57, 0xc1, 0x31, 0x67, 0x7d, 0x64, 0xda, 0xac, 0x2c, 0x5b, 0xf2, 0x9f,
	0xb5, 0xf3, 0x36, 0x5a, 0xb2, 0x10, 0x3a, 0x08, 0xcb, 0xb4, 0x0d, 0xec, 0xc8, 0xb3, 0x8e, 0x1b,
	0x96, 0x1b, 0xac, 0x53, 0xbe, 0xc6, 0x65, 0x9d, 0x7a, 0xad, 0x91, 0xca, 0xd7, 0x09, 0x10, 0xf0,
	0x39, 0x9b, 0xc3, 0xf4, 0x22, 0x32, 0xfb, 0xf4, 0xe1, 0xc7, 0x21, 0x21, 0x30, 0x48, 0x2a, 0x2d,
	0xca, 0xa2, 0xda, 0x6d, 0x70, 0x3d, 0xfb, 0x5b, 0xc0, 0x8d, 0x33, 0x5d, 0x41, 0x25, 0x6a, 0x6a,
	0x21, 0x53, 0x00, 0xed, 0x18, 0x97, 0xd2, 0xab, 0x10, 0xb0, 0x67, 0xd4, 0x8c, 0xb4, 0x7b, 0x97,
	0x05, 0x72, 0x0b, 0xb6, 0x71, 0xc4, 0x91, 0xa7, 0x57, 0x90, 0x37, 0x4c, 0xe5, 0x77, 0x4f, 0x1e,
	0xc2, 0xd5, 0x96, 0x87, 0xc8, 0xbc, 0x12, 0x1b, 0x16, 0x75, 0xa7, 0xe8, 0x56, 0x59, 0x54, 0x83,
	0x66, 0x92, 0xd4, 0x46, 0x89, 0xcd, 0x37, 0xdd, 0x29, 0x72, 0x1f, 0x26, 0xda, 0x6d, 0x16, 0x27,
	0xfc, 0x01, 0xf2, 0xc7, 0x49, 0xeb, 0x27, 0xcc, 0xfe, 0x0c, 0x80, 0x5e, 0xf4, 0x42, 0x67, 0xc7,
	0xef, 0x9f, 0x1b, 0xff, 0x00, 0x76, 0x5b, 0x2b, 0x78, 0x7b, 0x42, 0x9e, 0x23, 0x79, 0x82, 0xe2,
	0xf1, 0xe1, 0xa7, 0x00, 0x66, 0xdd, 0x31, 0xe7, 0xed, 0x52, 0x05, 0xfa, 0x04, 0x01, 0x23, 0xb3,
	0xee, 0xbe, 0xa2, 0x40, 0xee, 0xc1, 0x58, 0x44, 0xdf, 0x1e, 0xfb, 0x4f, 0xd1, 0x87, 0x24, 0xf5,
	0x1b, 0xee, 0xc0, 0xc8, 0x29, 0xdf, 0x71, 0xa3, 0x4c, 0xa4, 0x8b, 0xb2, 0xa8, 0x76, 0x9a, 0x53,
	0x21, 0xd1, 0xa5, 0x0e, 0x82, 0x7b, 0xc9, 0xac, 0xa1, 0xcf, 0xb2, 0xdd, 0x2b, 0x5f, 0x0c, 0x79,
	0x0c, 0xd7, 0x9d, 0xc4, 0x9b, 0x61, 0x21, 0xf2, 0xce, 0xb1, 0x15, 0xd7, 0xad, 0x92, 0xf4, 0x39,
	0x6e, 0xdc, 0x73, 0x32, 0x5d, 0xd0, 0x61, 0x72, 0x3e, 0xa2, 0x41, 0x14, 0x0c, 0x73, 0x2e, 0xf4,
	0x45, 0xb9, 0x55, 0x8d, 0xf7, 0x3f, 0xd7, 0x97, 0xfb, 0x42, 0xea, 0xff, 0x06, 0xdd, 0xf4, 0x70,
	0x72, 0x1b, 0x76, 0x74, 0xc8, 0x24, 0xfa, 0x12, 0xcf, 0xb2, 0xad, 0xc3, 0x41, 0x2a, 0x53, 0x5a,
	0xd2, 0x5b, 0xc7, 0x84, 0x5d, 0x9b, 0xa8, 0x3c, 0x7d, 0x85, 0x37, 0x32, 0x4e, 0xda, 0xfb, 0x2c,
	0x91, 0x9b, 0x30, 0x0c, 0x56, 0xfc, 0x52, 0x91, 0xbe, 0x2e, 0x8b, 0x6a, 0xaf, 0xe9, 0x2b, 0xf2,
	0x08, 0x48, 0xce, 0xe3, 0x5c, 0xdc, 0x6f, 0x30, 0x94, 0x6b, 0xe8, 0x1c, 0x9c, 0x66, 0x9e, 0x28,
	0x2b, 0xde, 0xe9, 0xf6, 0x37, 0x7d, 0x9b, 0x29, 0xb9, 0x5a, 0x0e, 0xf1, 0xd7, 0x98, 0xff, 0x0b,
	0x00, 0x00, 0xff, 0xff, 0x16, 0x8b, 0xde, 0xcc, 0x3c, 0x03, 0x00, 0x00,
}
