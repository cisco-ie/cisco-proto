/*
Copyright 2019 Cisco Systems

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: bgp_process_info_af_bag.proto

package cisco_ios_xr_ipv4_bgp_oper_bgp_instances_instance_instance_active_vrfs_vrf_afs_af_af_process_info

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type BgpProcessInfoAfBag_KEYS struct {
	InstanceName         string   `protobuf:"bytes,1,opt,name=instance_name,json=instanceName,proto3" json:"instance_name,omitempty"`
	VrfName              string   `protobuf:"bytes,2,opt,name=vrf_name,json=vrfName,proto3" json:"vrf_name,omitempty"`
	AfName               string   `protobuf:"bytes,3,opt,name=af_name,json=afName,proto3" json:"af_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BgpProcessInfoAfBag_KEYS) Reset()         { *m = BgpProcessInfoAfBag_KEYS{} }
func (m *BgpProcessInfoAfBag_KEYS) String() string { return proto.CompactTextString(m) }
func (*BgpProcessInfoAfBag_KEYS) ProtoMessage()    {}
func (*BgpProcessInfoAfBag_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_ea3fb4e1f872b1b5, []int{0}
}

func (m *BgpProcessInfoAfBag_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BgpProcessInfoAfBag_KEYS.Unmarshal(m, b)
}
func (m *BgpProcessInfoAfBag_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BgpProcessInfoAfBag_KEYS.Marshal(b, m, deterministic)
}
func (m *BgpProcessInfoAfBag_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpProcessInfoAfBag_KEYS.Merge(m, src)
}
func (m *BgpProcessInfoAfBag_KEYS) XXX_Size() int {
	return xxx_messageInfo_BgpProcessInfoAfBag_KEYS.Size(m)
}
func (m *BgpProcessInfoAfBag_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpProcessInfoAfBag_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_BgpProcessInfoAfBag_KEYS proto.InternalMessageInfo

func (m *BgpProcessInfoAfBag_KEYS) GetInstanceName() string {
	if m != nil {
		return m.InstanceName
	}
	return ""
}

func (m *BgpProcessInfoAfBag_KEYS) GetVrfName() string {
	if m != nil {
		return m.VrfName
	}
	return ""
}

func (m *BgpProcessInfoAfBag_KEYS) GetAfName() string {
	if m != nil {
		return m.AfName
	}
	return ""
}

type BgpTimespec struct {
	Seconds              uint32   `protobuf:"varint,1,opt,name=seconds,proto3" json:"seconds,omitempty"`
	Nanoseconds          uint32   `protobuf:"varint,2,opt,name=nanoseconds,proto3" json:"nanoseconds,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BgpTimespec) Reset()         { *m = BgpTimespec{} }
func (m *BgpTimespec) String() string { return proto.CompactTextString(m) }
func (*BgpTimespec) ProtoMessage()    {}
func (*BgpTimespec) Descriptor() ([]byte, []int) {
	return fileDescriptor_ea3fb4e1f872b1b5, []int{1}
}

func (m *BgpTimespec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BgpTimespec.Unmarshal(m, b)
}
func (m *BgpTimespec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BgpTimespec.Marshal(b, m, deterministic)
}
func (m *BgpTimespec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpTimespec.Merge(m, src)
}
func (m *BgpTimespec) XXX_Size() int {
	return xxx_messageInfo_BgpTimespec.Size(m)
}
func (m *BgpTimespec) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpTimespec.DiscardUnknown(m)
}

var xxx_messageInfo_BgpTimespec proto.InternalMessageInfo

func (m *BgpTimespec) GetSeconds() uint32 {
	if m != nil {
		return m.Seconds
	}
	return 0
}

func (m *BgpTimespec) GetNanoseconds() uint32 {
	if m != nil {
		return m.Nanoseconds
	}
	return 0
}

type BgpThreadTriggerInfoStat struct {
	TriggerVersion       uint32       `protobuf:"varint,1,opt,name=trigger_version,json=triggerVersion,proto3" json:"trigger_version,omitempty"`
	TriggerTableVersion  uint32       `protobuf:"varint,2,opt,name=trigger_table_version,json=triggerTableVersion,proto3" json:"trigger_table_version,omitempty"`
	TriggerTimeSpec      *BgpTimespec `protobuf:"bytes,3,opt,name=trigger_time_spec,json=triggerTimeSpec,proto3" json:"trigger_time_spec,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *BgpThreadTriggerInfoStat) Reset()         { *m = BgpThreadTriggerInfoStat{} }
func (m *BgpThreadTriggerInfoStat) String() string { return proto.CompactTextString(m) }
func (*BgpThreadTriggerInfoStat) ProtoMessage()    {}
func (*BgpThreadTriggerInfoStat) Descriptor() ([]byte, []int) {
	return fileDescriptor_ea3fb4e1f872b1b5, []int{2}
}

func (m *BgpThreadTriggerInfoStat) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BgpThreadTriggerInfoStat.Unmarshal(m, b)
}
func (m *BgpThreadTriggerInfoStat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BgpThreadTriggerInfoStat.Marshal(b, m, deterministic)
}
func (m *BgpThreadTriggerInfoStat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpThreadTriggerInfoStat.Merge(m, src)
}
func (m *BgpThreadTriggerInfoStat) XXX_Size() int {
	return xxx_messageInfo_BgpThreadTriggerInfoStat.Size(m)
}
func (m *BgpThreadTriggerInfoStat) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpThreadTriggerInfoStat.DiscardUnknown(m)
}

var xxx_messageInfo_BgpThreadTriggerInfoStat proto.InternalMessageInfo

func (m *BgpThreadTriggerInfoStat) GetTriggerVersion() uint32 {
	if m != nil {
		return m.TriggerVersion
	}
	return 0
}

func (m *BgpThreadTriggerInfoStat) GetTriggerTableVersion() uint32 {
	if m != nil {
		return m.TriggerTableVersion
	}
	return 0
}

func (m *BgpThreadTriggerInfoStat) GetTriggerTimeSpec() *BgpTimespec {
	if m != nil {
		return m.TriggerTimeSpec
	}
	return nil
}

type BgpThreadTriggerInfo struct {
	Triggers             uint32                      `protobuf:"varint,1,opt,name=triggers,proto3" json:"triggers,omitempty"`
	Statistic            []*BgpThreadTriggerInfoStat `protobuf:"bytes,2,rep,name=statistic,proto3" json:"statistic,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *BgpThreadTriggerInfo) Reset()         { *m = BgpThreadTriggerInfo{} }
func (m *BgpThreadTriggerInfo) String() string { return proto.CompactTextString(m) }
func (*BgpThreadTriggerInfo) ProtoMessage()    {}
func (*BgpThreadTriggerInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_ea3fb4e1f872b1b5, []int{3}
}

func (m *BgpThreadTriggerInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BgpThreadTriggerInfo.Unmarshal(m, b)
}
func (m *BgpThreadTriggerInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BgpThreadTriggerInfo.Marshal(b, m, deterministic)
}
func (m *BgpThreadTriggerInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpThreadTriggerInfo.Merge(m, src)
}
func (m *BgpThreadTriggerInfo) XXX_Size() int {
	return xxx_messageInfo_BgpThreadTriggerInfo.Size(m)
}
func (m *BgpThreadTriggerInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpThreadTriggerInfo.DiscardUnknown(m)
}

var xxx_messageInfo_BgpThreadTriggerInfo proto.InternalMessageInfo

func (m *BgpThreadTriggerInfo) GetTriggers() uint32 {
	if m != nil {
		return m.Triggers
	}
	return 0
}

func (m *BgpThreadTriggerInfo) GetStatistic() []*BgpThreadTriggerInfoStat {
	if m != nil {
		return m.Statistic
	}
	return nil
}

type BgpRibInstallTimeInfo struct {
	UpdateTime           *BgpTimespec `protobuf:"bytes,1,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	InstallTime          *BgpTimespec `protobuf:"bytes,2,opt,name=install_time,json=installTime,proto3" json:"install_time,omitempty"`
	InstalledCount       uint32       `protobuf:"varint,3,opt,name=installed_count,json=installedCount,proto3" json:"installed_count,omitempty"`
	ModifiedCount        uint32       `protobuf:"varint,4,opt,name=modified_count,json=modifiedCount,proto3" json:"modified_count,omitempty"`
	SkippedCount         uint32       `protobuf:"varint,5,opt,name=skipped_count,json=skippedCount,proto3" json:"skipped_count,omitempty"`
	WithdrawnCount       uint32       `protobuf:"varint,6,opt,name=withdrawn_count,json=withdrawnCount,proto3" json:"withdrawn_count,omitempty"`
	StartVersion         uint32       `protobuf:"varint,7,opt,name=start_version,json=startVersion,proto3" json:"start_version,omitempty"`
	TargetVersion        uint32       `protobuf:"varint,8,opt,name=target_version,json=targetVersion,proto3" json:"target_version,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *BgpRibInstallTimeInfo) Reset()         { *m = BgpRibInstallTimeInfo{} }
func (m *BgpRibInstallTimeInfo) String() string { return proto.CompactTextString(m) }
func (*BgpRibInstallTimeInfo) ProtoMessage()    {}
func (*BgpRibInstallTimeInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_ea3fb4e1f872b1b5, []int{4}
}

func (m *BgpRibInstallTimeInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BgpRibInstallTimeInfo.Unmarshal(m, b)
}
func (m *BgpRibInstallTimeInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BgpRibInstallTimeInfo.Marshal(b, m, deterministic)
}
func (m *BgpRibInstallTimeInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpRibInstallTimeInfo.Merge(m, src)
}
func (m *BgpRibInstallTimeInfo) XXX_Size() int {
	return xxx_messageInfo_BgpRibInstallTimeInfo.Size(m)
}
func (m *BgpRibInstallTimeInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpRibInstallTimeInfo.DiscardUnknown(m)
}

var xxx_messageInfo_BgpRibInstallTimeInfo proto.InternalMessageInfo

func (m *BgpRibInstallTimeInfo) GetUpdateTime() *BgpTimespec {
	if m != nil {
		return m.UpdateTime
	}
	return nil
}

func (m *BgpRibInstallTimeInfo) GetInstallTime() *BgpTimespec {
	if m != nil {
		return m.InstallTime
	}
	return nil
}

func (m *BgpRibInstallTimeInfo) GetInstalledCount() uint32 {
	if m != nil {
		return m.InstalledCount
	}
	return 0
}

func (m *BgpRibInstallTimeInfo) GetModifiedCount() uint32 {
	if m != nil {
		return m.ModifiedCount
	}
	return 0
}

func (m *BgpRibInstallTimeInfo) GetSkippedCount() uint32 {
	if m != nil {
		return m.SkippedCount
	}
	return 0
}

func (m *BgpRibInstallTimeInfo) GetWithdrawnCount() uint32 {
	if m != nil {
		return m.WithdrawnCount
	}
	return 0
}

func (m *BgpRibInstallTimeInfo) GetStartVersion() uint32 {
	if m != nil {
		return m.StartVersion
	}
	return 0
}

func (m *BgpRibInstallTimeInfo) GetTargetVersion() uint32 {
	if m != nil {
		return m.TargetVersion
	}
	return 0
}

type BgpProcessInfoAfGbl struct {
	RouterState                      string                 `protobuf:"bytes,1,opt,name=router_state,json=routerState,proto3" json:"router_state,omitempty"`
	TableVersion                     uint32                 `protobuf:"varint,2,opt,name=table_version,json=tableVersion,proto3" json:"table_version,omitempty"`
	VersionWrapped                   uint32                 `protobuf:"varint,3,opt,name=version_wrapped,json=versionWrapped,proto3" json:"version_wrapped,omitempty"`
	VersionWrappedTid                uint32                 `protobuf:"varint,4,opt,name=version_wrapped_tid,json=versionWrappedTid,proto3" json:"version_wrapped_tid,omitempty"`
	VersionWrapTimeSpec              *BgpTimespec           `protobuf:"bytes,5,opt,name=version_wrap_time_spec,json=versionWrapTimeSpec,proto3" json:"version_wrap_time_spec,omitempty"`
	VersionWrapStartTimeSpec         *BgpTimespec           `protobuf:"bytes,6,opt,name=version_wrap_start_time_spec,json=versionWrapStartTimeSpec,proto3" json:"version_wrap_start_time_spec,omitempty"`
	VersionWrapDoneTimeSpec          *BgpTimespec           `protobuf:"bytes,7,opt,name=version_wrap_done_time_spec,json=versionWrapDoneTimeSpec,proto3" json:"version_wrap_done_time_spec,omitempty"`
	MaxActivePelemVersion            uint32                 `protobuf:"varint,8,opt,name=max_active_pelem_version,json=maxActivePelemVersion,proto3" json:"max_active_pelem_version,omitempty"`
	MergedTableVersion               uint32                 `protobuf:"varint,9,opt,name=merged_table_version,json=mergedTableVersion,proto3" json:"merged_table_version,omitempty"`
	RouteDownloadGoActiveDonePending uint32                 `protobuf:"varint,10,opt,name=route_download_go_active_done_pending,json=routeDownloadGoActiveDonePending,proto3" json:"route_download_go_active_done_pending,omitempty"`
	RibBribReceivedVersion           uint32                 `protobuf:"varint,11,opt,name=rib_brib_received_version,json=ribBribReceivedVersion,proto3" json:"rib_brib_received_version,omitempty"`
	TableBribVersion                 uint32                 `protobuf:"varint,12,opt,name=table_brib_version,json=tableBribVersion,proto3" json:"table_brib_version,omitempty"`
	LabelVersion                     uint32                 `protobuf:"varint,13,opt,name=label_version,json=labelVersion,proto3" json:"label_version,omitempty"`
	ImportVersion                    uint32                 `protobuf:"varint,14,opt,name=import_version,json=importVersion,proto3" json:"import_version,omitempty"`
	StandbyVersion                   uint32                 `protobuf:"varint,15,opt,name=standby_version,json=standbyVersion,proto3" json:"standby_version,omitempty"`
	SendVersion                      uint32                 `protobuf:"varint,16,opt,name=send_version,json=sendVersion,proto3" json:"send_version,omitempty"`
	NumInitSyncPfx                   uint32                 `protobuf:"varint,17,opt,name=num_init_sync_pfx,json=numInitSyncPfx,proto3" json:"num_init_sync_pfx,omitempty"`
	MaxLabelStackDepthV4NextHop      uint32                 `protobuf:"varint,18,opt,name=max_label_stack_depth_v4_next_hop,json=maxLabelStackDepthV4NextHop,proto3" json:"max_label_stack_depth_v4_next_hop,omitempty"`
	MaxLabelStackDepthV6NextHop      uint32                 `protobuf:"varint,19,opt,name=max_label_stack_depth_v6_next_hop,json=maxLabelStackDepthV6NextHop,proto3" json:"max_label_stack_depth_v6_next_hop,omitempty"`
	LocalNetworksNum                 uint32                 `protobuf:"varint,20,opt,name=local_networks_num,json=localNetworksNum,proto3" json:"local_networks_num,omitempty"`
	LocalNetworksMemory              uint32                 `protobuf:"varint,21,opt,name=local_networks_memory,json=localNetworksMemory,proto3" json:"local_networks_memory,omitempty"`
	LocalNetworksMallocedNum         uint32                 `protobuf:"varint,22,opt,name=local_networks_malloced_num,json=localNetworksMallocedNum,proto3" json:"local_networks_malloced_num,omitempty"`
	LocalNetworksFreedNum            uint32                 `protobuf:"varint,23,opt,name=local_networks_freed_num,json=localNetworksFreedNum,proto3" json:"local_networks_freed_num,omitempty"`
	LocalPathsNum                    uint32                 `protobuf:"varint,24,opt,name=local_paths_num,json=localPathsNum,proto3" json:"local_paths_num,omitempty"`
	LocalPathsMemory                 uint32                 `protobuf:"varint,25,opt,name=local_paths_memory,json=localPathsMemory,proto3" json:"local_paths_memory,omitempty"`
	LocalPathsMallocedNum            uint32                 `protobuf:"varint,26,opt,name=local_paths_malloced_num,json=localPathsMallocedNum,proto3" json:"local_paths_malloced_num,omitempty"`
	LocalPathsFreedNum               uint32                 `protobuf:"varint,27,opt,name=local_paths_freed_num,json=localPathsFreedNum,proto3" json:"local_paths_freed_num,omitempty"`
	ImportedPathsNum                 uint32                 `protobuf:"varint,28,opt,name=imported_paths_num,json=importedPathsNum,proto3" json:"imported_paths_num,omitempty"`
	ImportedPathsMemory              uint32                 `protobuf:"varint,29,opt,name=imported_paths_memory,json=importedPathsMemory,proto3" json:"imported_paths_memory,omitempty"`
	NetworksNum                      uint32                 `protobuf:"varint,30,opt,name=networks_num,json=networksNum,proto3" json:"networks_num,omitempty"`
	NetworksMemory                   uint32                 `protobuf:"varint,31,opt,name=networks_memory,json=networksMemory,proto3" json:"networks_memory,omitempty"`
	NetworksMallocedNum              uint32                 `protobuf:"varint,32,opt,name=networks_malloced_num,json=networksMallocedNum,proto3" json:"networks_malloced_num,omitempty"`
	NetworksFreedNum                 uint32                 `protobuf:"varint,33,opt,name=networks_freed_num,json=networksFreedNum,proto3" json:"networks_freed_num,omitempty"`
	PathsNum                         uint32                 `protobuf:"varint,34,opt,name=paths_num,json=pathsNum,proto3" json:"paths_num,omitempty"`
	PathsMemory                      uint32                 `protobuf:"varint,35,opt,name=paths_memory,json=pathsMemory,proto3" json:"paths_memory,omitempty"`
	PathsMallocedNum                 uint32                 `protobuf:"varint,36,opt,name=paths_malloced_num,json=pathsMallocedNum,proto3" json:"paths_malloced_num,omitempty"`
	PathsFreedNum                    uint32                 `protobuf:"varint,37,opt,name=paths_freed_num,json=pathsFreedNum,proto3" json:"paths_freed_num,omitempty"`
	PathElemsNum                     uint32                 `protobuf:"varint,38,opt,name=path_elems_num,json=pathElemsNum,proto3" json:"path_elems_num,omitempty"`
	PathElemsMemory                  uint32                 `protobuf:"varint,39,opt,name=path_elems_memory,json=pathElemsMemory,proto3" json:"path_elems_memory,omitempty"`
	PathElemsMallocedNum             uint32                 `protobuf:"varint,40,opt,name=path_elems_malloced_num,json=pathElemsMallocedNum,proto3" json:"path_elems_malloced_num,omitempty"`
	PathElemsFreedNum                uint32                 `protobuf:"varint,41,opt,name=path_elems_freed_num,json=pathElemsFreedNum,proto3" json:"path_elems_freed_num,omitempty"`
	LabelLastTrigger                 uint64                 `protobuf:"varint,42,opt,name=label_last_trigger,json=labelLastTrigger,proto3" json:"label_last_trigger,omitempty"`
	LastLabelVersion                 uint32                 `protobuf:"varint,43,opt,name=last_label_version,json=lastLabelVersion,proto3" json:"last_label_version,omitempty"`
	LabelBgpVersion                  uint32                 `protobuf:"varint,44,opt,name=label_bgp_version,json=labelBgpVersion,proto3" json:"label_bgp_version,omitempty"`
	LabelTriggers                    uint32                 `protobuf:"varint,45,opt,name=label_triggers,json=labelTriggers,proto3" json:"label_triggers,omitempty"`
	RibLastTrigger                   uint64                 `protobuf:"varint,46,opt,name=rib_last_trigger,json=ribLastTrigger,proto3" json:"rib_last_trigger,omitempty"`
	LastRibVersion                   uint32                 `protobuf:"varint,47,opt,name=last_rib_version,json=lastRibVersion,proto3" json:"last_rib_version,omitempty"`
	RibBgpVersion                    uint32                 `protobuf:"varint,48,opt,name=rib_bgp_version,json=ribBgpVersion,proto3" json:"rib_bgp_version,omitempty"`
	RibTriggers                      uint32                 `protobuf:"varint,49,opt,name=rib_triggers,json=ribTriggers,proto3" json:"rib_triggers,omitempty"`
	ImportLastTrigger                uint64                 `protobuf:"varint,50,opt,name=import_last_trigger,json=importLastTrigger,proto3" json:"import_last_trigger,omitempty"`
	LastImportVersion                uint32                 `protobuf:"varint,51,opt,name=last_import_version,json=lastImportVersion,proto3" json:"last_import_version,omitempty"`
	ImportBgpVersion                 uint32                 `protobuf:"varint,52,opt,name=import_bgp_version,json=importBgpVersion,proto3" json:"import_bgp_version,omitempty"`
	ImportTriggers                   uint32                 `protobuf:"varint,53,opt,name=import_triggers,json=importTriggers,proto3" json:"import_triggers,omitempty"`
	UpdateGenLastTrigger             uint64                 `protobuf:"varint,54,opt,name=update_gen_last_trigger,json=updateGenLastTrigger,proto3" json:"update_gen_last_trigger,omitempty"`
	UpdateGenBgpVersion              uint32                 `protobuf:"varint,55,opt,name=update_gen_bgp_version,json=updateGenBgpVersion,proto3" json:"update_gen_bgp_version,omitempty"`
	UpdateTriggers                   uint32                 `protobuf:"varint,56,opt,name=update_triggers,json=updateTriggers,proto3" json:"update_triggers,omitempty"`
	TotalRDsNum                      uint32                 `protobuf:"varint,57,opt,name=total_r_ds_num,json=totalRDsNum,proto3" json:"total_r_ds_num,omitempty"`
	TotalRemoteRDsNum                uint32                 `protobuf:"varint,58,opt,name=total_remote_r_ds_num,json=totalRemoteRDsNum,proto3" json:"total_remote_r_ds_num,omitempty"`
	TotalSameRDsNum                  uint32                 `protobuf:"varint,59,opt,name=total_same_r_ds_num,json=totalSameRDsNum,proto3" json:"total_same_r_ds_num,omitempty"`
	MallocedRdCount                  uint32                 `protobuf:"varint,60,opt,name=malloced_rd_count,json=mallocedRdCount,proto3" json:"malloced_rd_count,omitempty"`
	FreedRdCount                     uint32                 `protobuf:"varint,61,opt,name=freed_rd_count,json=freedRdCount,proto3" json:"freed_rd_count,omitempty"`
	RdMemory                         uint32                 `protobuf:"varint,62,opt,name=rd_memory,json=rdMemory,proto3" json:"rd_memory,omitempty"`
	MultipathNetworkEntryCount       uint32                 `protobuf:"varint,63,opt,name=multipath_network_entry_count,json=multipathNetworkEntryCount,proto3" json:"multipath_network_entry_count,omitempty"`
	MultipathNetworkEntryMemory      uint32                 `protobuf:"varint,64,opt,name=multipath_network_entry_memory,json=multipathNetworkEntryMemory,proto3" json:"multipath_network_entry_memory,omitempty"`
	MultipathPathsCount              uint32                 `protobuf:"varint,65,opt,name=multipath_paths_count,json=multipathPathsCount,proto3" json:"multipath_paths_count,omitempty"`
	MultipathPathsMemory             uint32                 `protobuf:"varint,66,opt,name=multipath_paths_memory,json=multipathPathsMemory,proto3" json:"multipath_paths_memory,omitempty"`
	TriggerRib                       *BgpThreadTriggerInfo  `protobuf:"bytes,67,opt,name=trigger_rib,json=triggerRib,proto3" json:"trigger_rib,omitempty"`
	TriggerImport                    *BgpThreadTriggerInfo  `protobuf:"bytes,68,opt,name=trigger_import,json=triggerImport,proto3" json:"trigger_import,omitempty"`
	TriggerUpdate                    *BgpThreadTriggerInfo  `protobuf:"bytes,69,opt,name=trigger_update,json=triggerUpdate,proto3" json:"trigger_update,omitempty"`
	TriggerLabel                     *BgpThreadTriggerInfo  `protobuf:"bytes,70,opt,name=trigger_label,json=triggerLabel,proto3" json:"trigger_label,omitempty"`
	UpdateWaitInstallEnabled         uint32                 `protobuf:"varint,71,opt,name=update_wait_install_enabled,json=updateWaitInstallEnabled,proto3" json:"update_wait_install_enabled,omitempty"`
	RibAckedTableVersion             uint32                 `protobuf:"varint,72,opt,name=rib_acked_table_version,json=ribAckedTableVersion,proto3" json:"rib_acked_table_version,omitempty"`
	RibAckRequests                   uint32                 `protobuf:"varint,73,opt,name=rib_ack_requests,json=ribAckRequests,proto3" json:"rib_ack_requests,omitempty"`
	RibAcksReceived                  uint32                 `protobuf:"varint,74,opt,name=rib_acks_received,json=ribAcksReceived,proto3" json:"rib_acks_received,omitempty"`
	RibSlowAcks                      uint32                 `protobuf:"varint,75,opt,name=rib_slow_acks,json=ribSlowAcks,proto3" json:"rib_slow_acks,omitempty"`
	RibInstall                       *BgpRibInstallTimeInfo `protobuf:"bytes,76,opt,name=rib_install,json=ribInstall,proto3" json:"rib_install,omitempty"`
	XXX_NoUnkeyedLiteral             struct{}               `json:"-"`
	XXX_unrecognized                 []byte                 `json:"-"`
	XXX_sizecache                    int32                  `json:"-"`
}

func (m *BgpProcessInfoAfGbl) Reset()         { *m = BgpProcessInfoAfGbl{} }
func (m *BgpProcessInfoAfGbl) String() string { return proto.CompactTextString(m) }
func (*BgpProcessInfoAfGbl) ProtoMessage()    {}
func (*BgpProcessInfoAfGbl) Descriptor() ([]byte, []int) {
	return fileDescriptor_ea3fb4e1f872b1b5, []int{5}
}

func (m *BgpProcessInfoAfGbl) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BgpProcessInfoAfGbl.Unmarshal(m, b)
}
func (m *BgpProcessInfoAfGbl) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BgpProcessInfoAfGbl.Marshal(b, m, deterministic)
}
func (m *BgpProcessInfoAfGbl) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpProcessInfoAfGbl.Merge(m, src)
}
func (m *BgpProcessInfoAfGbl) XXX_Size() int {
	return xxx_messageInfo_BgpProcessInfoAfGbl.Size(m)
}
func (m *BgpProcessInfoAfGbl) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpProcessInfoAfGbl.DiscardUnknown(m)
}

var xxx_messageInfo_BgpProcessInfoAfGbl proto.InternalMessageInfo

func (m *BgpProcessInfoAfGbl) GetRouterState() string {
	if m != nil {
		return m.RouterState
	}
	return ""
}

func (m *BgpProcessInfoAfGbl) GetTableVersion() uint32 {
	if m != nil {
		return m.TableVersion
	}
	return 0
}

func (m *BgpProcessInfoAfGbl) GetVersionWrapped() uint32 {
	if m != nil {
		return m.VersionWrapped
	}
	return 0
}

func (m *BgpProcessInfoAfGbl) GetVersionWrappedTid() uint32 {
	if m != nil {
		return m.VersionWrappedTid
	}
	return 0
}

func (m *BgpProcessInfoAfGbl) GetVersionWrapTimeSpec() *BgpTimespec {
	if m != nil {
		return m.VersionWrapTimeSpec
	}
	return nil
}

func (m *BgpProcessInfoAfGbl) GetVersionWrapStartTimeSpec() *BgpTimespec {
	if m != nil {
		return m.VersionWrapStartTimeSpec
	}
	return nil
}

func (m *BgpProcessInfoAfGbl) GetVersionWrapDoneTimeSpec() *BgpTimespec {
	if m != nil {
		return m.VersionWrapDoneTimeSpec
	}
	return nil
}

func (m *BgpProcessInfoAfGbl) GetMaxActivePelemVersion() uint32 {
	if m != nil {
		return m.MaxActivePelemVersion
	}
	return 0
}

func (m *BgpProcessInfoAfGbl) GetMergedTableVersion() uint32 {
	if m != nil {
		return m.MergedTableVersion
	}
	return 0
}

func (m *BgpProcessInfoAfGbl) GetRouteDownloadGoActiveDonePending() uint32 {
	if m != nil {
		return m.RouteDownloadGoActiveDonePending
	}
	return 0
}

func (m *BgpProcessInfoAfGbl) GetRibBribReceivedVersion() uint32 {
	if m != nil {
		return m.RibBribReceivedVersion
	}
	return 0
}

func (m *BgpProcessInfoAfGbl) GetTableBribVersion() uint32 {
	if m != nil {
		return m.TableBribVersion
	}
	return 0
}

func (m *BgpProcessInfoAfGbl) GetLabelVersion() uint32 {
	if m != nil {
		return m.LabelVersion
	}
	return 0
}

func (m *BgpProcessInfoAfGbl) GetImportVersion() uint32 {
	if m != nil {
		return m.ImportVersion
	}
	return 0
}

func (m *BgpProcessInfoAfGbl) GetStandbyVersion() uint32 {
	if m != nil {
		return m.StandbyVersion
	}
	return 0
}

func (m *BgpProcessInfoAfGbl) GetSendVersion() uint32 {
	if m != nil {
		return m.SendVersion
	}
	return 0
}

func (m *BgpProcessInfoAfGbl) GetNumInitSyncPfx() uint32 {
	if m != nil {
		return m.NumInitSyncPfx
	}
	return 0
}

func (m *BgpProcessInfoAfGbl) GetMaxLabelStackDepthV4NextHop() uint32 {
	if m != nil {
		return m.MaxLabelStackDepthV4NextHop
	}
	return 0
}

func (m *BgpProcessInfoAfGbl) GetMaxLabelStackDepthV6NextHop() uint32 {
	if m != nil {
		return m.MaxLabelStackDepthV6NextHop
	}
	return 0
}

func (m *BgpProcessInfoAfGbl) GetLocalNetworksNum() uint32 {
	if m != nil {
		return m.LocalNetworksNum
	}
	return 0
}

func (m *BgpProcessInfoAfGbl) GetLocalNetworksMemory() uint32 {
	if m != nil {
		return m.LocalNetworksMemory
	}
	return 0
}

func (m *BgpProcessInfoAfGbl) GetLocalNetworksMallocedNum() uint32 {
	if m != nil {
		return m.LocalNetworksMallocedNum
	}
	return 0
}

func (m *BgpProcessInfoAfGbl) GetLocalNetworksFreedNum() uint32 {
	if m != nil {
		return m.LocalNetworksFreedNum
	}
	return 0
}

func (m *BgpProcessInfoAfGbl) GetLocalPathsNum() uint32 {
	if m != nil {
		return m.LocalPathsNum
	}
	return 0
}

func (m *BgpProcessInfoAfGbl) GetLocalPathsMemory() uint32 {
	if m != nil {
		return m.LocalPathsMemory
	}
	return 0
}

func (m *BgpProcessInfoAfGbl) GetLocalPathsMallocedNum() uint32 {
	if m != nil {
		return m.LocalPathsMallocedNum
	}
	return 0
}

func (m *BgpProcessInfoAfGbl) GetLocalPathsFreedNum() uint32 {
	if m != nil {
		return m.LocalPathsFreedNum
	}
	return 0
}

func (m *BgpProcessInfoAfGbl) GetImportedPathsNum() uint32 {
	if m != nil {
		return m.ImportedPathsNum
	}
	return 0
}

func (m *BgpProcessInfoAfGbl) GetImportedPathsMemory() uint32 {
	if m != nil {
		return m.ImportedPathsMemory
	}
	return 0
}

func (m *BgpProcessInfoAfGbl) GetNetworksNum() uint32 {
	if m != nil {
		return m.NetworksNum
	}
	return 0
}

func (m *BgpProcessInfoAfGbl) GetNetworksMemory() uint32 {
	if m != nil {
		return m.NetworksMemory
	}
	return 0
}

func (m *BgpProcessInfoAfGbl) GetNetworksMallocedNum() uint32 {
	if m != nil {
		return m.NetworksMallocedNum
	}
	return 0
}

func (m *BgpProcessInfoAfGbl) GetNetworksFreedNum() uint32 {
	if m != nil {
		return m.NetworksFreedNum
	}
	return 0
}

func (m *BgpProcessInfoAfGbl) GetPathsNum() uint32 {
	if m != nil {
		return m.PathsNum
	}
	return 0
}

func (m *BgpProcessInfoAfGbl) GetPathsMemory() uint32 {
	if m != nil {
		return m.PathsMemory
	}
	return 0
}

func (m *BgpProcessInfoAfGbl) GetPathsMallocedNum() uint32 {
	if m != nil {
		return m.PathsMallocedNum
	}
	return 0
}

func (m *BgpProcessInfoAfGbl) GetPathsFreedNum() uint32 {
	if m != nil {
		return m.PathsFreedNum
	}
	return 0
}

func (m *BgpProcessInfoAfGbl) GetPathElemsNum() uint32 {
	if m != nil {
		return m.PathElemsNum
	}
	return 0
}

func (m *BgpProcessInfoAfGbl) GetPathElemsMemory() uint32 {
	if m != nil {
		return m.PathElemsMemory
	}
	return 0
}

func (m *BgpProcessInfoAfGbl) GetPathElemsMallocedNum() uint32 {
	if m != nil {
		return m.PathElemsMallocedNum
	}
	return 0
}

func (m *BgpProcessInfoAfGbl) GetPathElemsFreedNum() uint32 {
	if m != nil {
		return m.PathElemsFreedNum
	}
	return 0
}

func (m *BgpProcessInfoAfGbl) GetLabelLastTrigger() uint64 {
	if m != nil {
		return m.LabelLastTrigger
	}
	return 0
}

func (m *BgpProcessInfoAfGbl) GetLastLabelVersion() uint32 {
	if m != nil {
		return m.LastLabelVersion
	}
	return 0
}

func (m *BgpProcessInfoAfGbl) GetLabelBgpVersion() uint32 {
	if m != nil {
		return m.LabelBgpVersion
	}
	return 0
}

func (m *BgpProcessInfoAfGbl) GetLabelTriggers() uint32 {
	if m != nil {
		return m.LabelTriggers
	}
	return 0
}

func (m *BgpProcessInfoAfGbl) GetRibLastTrigger() uint64 {
	if m != nil {
		return m.RibLastTrigger
	}
	return 0
}

func (m *BgpProcessInfoAfGbl) GetLastRibVersion() uint32 {
	if m != nil {
		return m.LastRibVersion
	}
	return 0
}

func (m *BgpProcessInfoAfGbl) GetRibBgpVersion() uint32 {
	if m != nil {
		return m.RibBgpVersion
	}
	return 0
}

func (m *BgpProcessInfoAfGbl) GetRibTriggers() uint32 {
	if m != nil {
		return m.RibTriggers
	}
	return 0
}

func (m *BgpProcessInfoAfGbl) GetImportLastTrigger() uint64 {
	if m != nil {
		return m.ImportLastTrigger
	}
	return 0
}

func (m *BgpProcessInfoAfGbl) GetLastImportVersion() uint32 {
	if m != nil {
		return m.LastImportVersion
	}
	return 0
}

func (m *BgpProcessInfoAfGbl) GetImportBgpVersion() uint32 {
	if m != nil {
		return m.ImportBgpVersion
	}
	return 0
}

func (m *BgpProcessInfoAfGbl) GetImportTriggers() uint32 {
	if m != nil {
		return m.ImportTriggers
	}
	return 0
}

func (m *BgpProcessInfoAfGbl) GetUpdateGenLastTrigger() uint64 {
	if m != nil {
		return m.UpdateGenLastTrigger
	}
	return 0
}

func (m *BgpProcessInfoAfGbl) GetUpdateGenBgpVersion() uint32 {
	if m != nil {
		return m.UpdateGenBgpVersion
	}
	return 0
}

func (m *BgpProcessInfoAfGbl) GetUpdateTriggers() uint32 {
	if m != nil {
		return m.UpdateTriggers
	}
	return 0
}

func (m *BgpProcessInfoAfGbl) GetTotalRDsNum() uint32 {
	if m != nil {
		return m.TotalRDsNum
	}
	return 0
}

func (m *BgpProcessInfoAfGbl) GetTotalRemoteRDsNum() uint32 {
	if m != nil {
		return m.TotalRemoteRDsNum
	}
	return 0
}

func (m *BgpProcessInfoAfGbl) GetTotalSameRDsNum() uint32 {
	if m != nil {
		return m.TotalSameRDsNum
	}
	return 0
}

func (m *BgpProcessInfoAfGbl) GetMallocedRdCount() uint32 {
	if m != nil {
		return m.MallocedRdCount
	}
	return 0
}

func (m *BgpProcessInfoAfGbl) GetFreedRdCount() uint32 {
	if m != nil {
		return m.FreedRdCount
	}
	return 0
}

func (m *BgpProcessInfoAfGbl) GetRdMemory() uint32 {
	if m != nil {
		return m.RdMemory
	}
	return 0
}

func (m *BgpProcessInfoAfGbl) GetMultipathNetworkEntryCount() uint32 {
	if m != nil {
		return m.MultipathNetworkEntryCount
	}
	return 0
}

func (m *BgpProcessInfoAfGbl) GetMultipathNetworkEntryMemory() uint32 {
	if m != nil {
		return m.MultipathNetworkEntryMemory
	}
	return 0
}

func (m *BgpProcessInfoAfGbl) GetMultipathPathsCount() uint32 {
	if m != nil {
		return m.MultipathPathsCount
	}
	return 0
}

func (m *BgpProcessInfoAfGbl) GetMultipathPathsMemory() uint32 {
	if m != nil {
		return m.MultipathPathsMemory
	}
	return 0
}

func (m *BgpProcessInfoAfGbl) GetTriggerRib() *BgpThreadTriggerInfo {
	if m != nil {
		return m.TriggerRib
	}
	return nil
}

func (m *BgpProcessInfoAfGbl) GetTriggerImport() *BgpThreadTriggerInfo {
	if m != nil {
		return m.TriggerImport
	}
	return nil
}

func (m *BgpProcessInfoAfGbl) GetTriggerUpdate() *BgpThreadTriggerInfo {
	if m != nil {
		return m.TriggerUpdate
	}
	return nil
}

func (m *BgpProcessInfoAfGbl) GetTriggerLabel() *BgpThreadTriggerInfo {
	if m != nil {
		return m.TriggerLabel
	}
	return nil
}

func (m *BgpProcessInfoAfGbl) GetUpdateWaitInstallEnabled() uint32 {
	if m != nil {
		return m.UpdateWaitInstallEnabled
	}
	return 0
}

func (m *BgpProcessInfoAfGbl) GetRibAckedTableVersion() uint32 {
	if m != nil {
		return m.RibAckedTableVersion
	}
	return 0
}

func (m *BgpProcessInfoAfGbl) GetRibAckRequests() uint32 {
	if m != nil {
		return m.RibAckRequests
	}
	return 0
}

func (m *BgpProcessInfoAfGbl) GetRibAcksReceived() uint32 {
	if m != nil {
		return m.RibAcksReceived
	}
	return 0
}

func (m *BgpProcessInfoAfGbl) GetRibSlowAcks() uint32 {
	if m != nil {
		return m.RibSlowAcks
	}
	return 0
}

func (m *BgpProcessInfoAfGbl) GetRibInstall() *BgpRibInstallTimeInfo {
	if m != nil {
		return m.RibInstall
	}
	return nil
}

type BgpProcessInfoAfVrf struct {
	NetworkEntryCount            uint32   `protobuf:"varint,1,opt,name=network_entry_count,json=networkEntryCount,proto3" json:"network_entry_count,omitempty"`
	PathsCount                   uint32   `protobuf:"varint,2,opt,name=paths_count,json=pathsCount,proto3" json:"paths_count,omitempty"`
	ImportedPaths                uint32   `protobuf:"varint,3,opt,name=imported_paths,json=importedPaths,proto3" json:"imported_paths,omitempty"`
	LocalPaths                   uint32   `protobuf:"varint,4,opt,name=local_paths,json=localPaths,proto3" json:"local_paths,omitempty"`
	PathElemsCount               uint32   `protobuf:"varint,5,opt,name=path_elems_count,json=pathElemsCount,proto3" json:"path_elems_count,omitempty"`
	PathMemory                   uint32   `protobuf:"varint,6,opt,name=path_memory,json=pathMemory,proto3" json:"path_memory,omitempty"`
	ImportedPathMemory           uint32   `protobuf:"varint,7,opt,name=imported_path_memory,json=importedPathMemory,proto3" json:"imported_path_memory,omitempty"`
	LocalPathMemory              uint32   `protobuf:"varint,8,opt,name=local_path_memory,json=localPathMemory,proto3" json:"local_path_memory,omitempty"`
	PrefixMemory                 uint32   `protobuf:"varint,9,opt,name=prefix_memory,json=prefixMemory,proto3" json:"prefix_memory,omitempty"`
	PathElemMemory               uint32   `protobuf:"varint,10,opt,name=path_elem_memory,json=pathElemMemory,proto3" json:"path_elem_memory,omitempty"`
	ReceivedPathCount            uint32   `protobuf:"varint,11,opt,name=received_path_count,json=receivedPathCount,proto3" json:"received_path_count,omitempty"`
	HistoryPathCount             uint32   `protobuf:"varint,12,opt,name=history_path_count,json=historyPathCount,proto3" json:"history_path_count,omitempty"`
	DampedPathCount              uint32   `protobuf:"varint,13,opt,name=damped_path_count,json=dampedPathCount,proto3" json:"damped_path_count,omitempty"`
	MallocedPrefixCount          uint32   `protobuf:"varint,14,opt,name=malloced_prefix_count,json=mallocedPrefixCount,proto3" json:"malloced_prefix_count,omitempty"`
	FreedPrefixCount             uint32   `protobuf:"varint,15,opt,name=freed_prefix_count,json=freedPrefixCount,proto3" json:"freed_prefix_count,omitempty"`
	MallocedPathCount            uint32   `protobuf:"varint,16,opt,name=malloced_path_count,json=mallocedPathCount,proto3" json:"malloced_path_count,omitempty"`
	FreedPathCount               uint32   `protobuf:"varint,17,opt,name=freed_path_count,json=freedPathCount,proto3" json:"freed_path_count,omitempty"`
	MallocedPathElemCount        uint32   `protobuf:"varint,18,opt,name=malloced_path_elem_count,json=mallocedPathElemCount,proto3" json:"malloced_path_elem_count,omitempty"`
	FreedPathElemCount           uint32   `protobuf:"varint,19,opt,name=freed_path_elem_count,json=freedPathElemCount,proto3" json:"freed_path_elem_count,omitempty"`
	AnyEbgpNeighborMissingPolicy bool     `protobuf:"varint,20,opt,name=any_ebgp_neighbor_missing_policy,json=anyEbgpNeighborMissingPolicy,proto3" json:"any_ebgp_neighbor_missing_policy,omitempty"`
	AttributeDownload            bool     `protobuf:"varint,21,opt,name=attribute_download,json=attributeDownload,proto3" json:"attribute_download,omitempty"`
	RouteTargetDownload          bool     `protobuf:"varint,22,opt,name=route_target_download,json=routeTargetDownload,proto3" json:"route_target_download,omitempty"`
	SrmsPrefixSid                bool     `protobuf:"varint,23,opt,name=srms_prefix_sid,json=srmsPrefixSid,proto3" json:"srms_prefix_sid,omitempty"`
	AddPathInstallEnable         bool     `protobuf:"varint,24,opt,name=add_path_install_enable,json=addPathInstallEnable,proto3" json:"add_path_install_enable,omitempty"`
	AddPathInstallDisable        bool     `protobuf:"varint,25,opt,name=add_path_install_disable,json=addPathInstallDisable,proto3" json:"add_path_install_disable,omitempty"`
	BestExternal                 bool     `protobuf:"varint,26,opt,name=best_external,json=bestExternal,proto3" json:"best_external,omitempty"`
	BestExternalDisable          bool     `protobuf:"varint,27,opt,name=best_external_disable,json=bestExternalDisable,proto3" json:"best_external_disable,omitempty"`
	LabelRetain                  bool     `protobuf:"varint,28,opt,name=label_retain,json=labelRetain,proto3" json:"label_retain,omitempty"`
	LabelRetainvalue             uint32   `protobuf:"varint,29,opt,name=label_retainvalue,json=labelRetainvalue,proto3" json:"label_retainvalue,omitempty"`
	TblBitfSize                  uint32   `protobuf:"varint,30,opt,name=tbl_bitf_size,json=tblBitfSize,proto3" json:"tbl_bitf_size,omitempty"`
	TblChunkBitfSize             uint32   `protobuf:"varint,31,opt,name=tbl_chunk_bitf_size,json=tblChunkBitfSize,proto3" json:"tbl_chunk_bitf_size,omitempty"`
	IsRouteReflector             bool     `protobuf:"varint,32,opt,name=is_route_reflector,json=isRouteReflector,proto3" json:"is_route_reflector,omitempty"`
	Asbr                         bool     `protobuf:"varint,33,opt,name=asbr,proto3" json:"asbr,omitempty"`
	RetainRtAll                  bool     `protobuf:"varint,34,opt,name=retain_rt_all,json=retainRtAll,proto3" json:"retain_rt_all,omitempty"`
	IbgpNexthopSelfCount         uint32   `protobuf:"varint,35,opt,name=ibgp_nexthop_self_count,json=ibgpNexthopSelfCount,proto3" json:"ibgp_nexthop_self_count,omitempty"`
	UseIgpsrLabel                bool     `protobuf:"varint,36,opt,name=use_igpsr_label,json=useIgpsrLabel,proto3" json:"use_igpsr_label,omitempty"`
	BmpNetworkEntryCount         uint32   `protobuf:"varint,37,opt,name=bmp_network_entry_count,json=bmpNetworkEntryCount,proto3" json:"bmp_network_entry_count,omitempty"`
	BmpPathsCount                uint32   `protobuf:"varint,38,opt,name=bmp_paths_count,json=bmpPathsCount,proto3" json:"bmp_paths_count,omitempty"`
	BmpPrefixMemory              uint32   `protobuf:"varint,39,opt,name=bmp_prefix_memory,json=bmpPrefixMemory,proto3" json:"bmp_prefix_memory,omitempty"`
	BmpPathMemory                uint32   `protobuf:"varint,40,opt,name=bmp_path_memory,json=bmpPathMemory,proto3" json:"bmp_path_memory,omitempty"`
	XXX_NoUnkeyedLiteral         struct{} `json:"-"`
	XXX_unrecognized             []byte   `json:"-"`
	XXX_sizecache                int32    `json:"-"`
}

func (m *BgpProcessInfoAfVrf) Reset()         { *m = BgpProcessInfoAfVrf{} }
func (m *BgpProcessInfoAfVrf) String() string { return proto.CompactTextString(m) }
func (*BgpProcessInfoAfVrf) ProtoMessage()    {}
func (*BgpProcessInfoAfVrf) Descriptor() ([]byte, []int) {
	return fileDescriptor_ea3fb4e1f872b1b5, []int{6}
}

func (m *BgpProcessInfoAfVrf) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BgpProcessInfoAfVrf.Unmarshal(m, b)
}
func (m *BgpProcessInfoAfVrf) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BgpProcessInfoAfVrf.Marshal(b, m, deterministic)
}
func (m *BgpProcessInfoAfVrf) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpProcessInfoAfVrf.Merge(m, src)
}
func (m *BgpProcessInfoAfVrf) XXX_Size() int {
	return xxx_messageInfo_BgpProcessInfoAfVrf.Size(m)
}
func (m *BgpProcessInfoAfVrf) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpProcessInfoAfVrf.DiscardUnknown(m)
}

var xxx_messageInfo_BgpProcessInfoAfVrf proto.InternalMessageInfo

func (m *BgpProcessInfoAfVrf) GetNetworkEntryCount() uint32 {
	if m != nil {
		return m.NetworkEntryCount
	}
	return 0
}

func (m *BgpProcessInfoAfVrf) GetPathsCount() uint32 {
	if m != nil {
		return m.PathsCount
	}
	return 0
}

func (m *BgpProcessInfoAfVrf) GetImportedPaths() uint32 {
	if m != nil {
		return m.ImportedPaths
	}
	return 0
}

func (m *BgpProcessInfoAfVrf) GetLocalPaths() uint32 {
	if m != nil {
		return m.LocalPaths
	}
	return 0
}

func (m *BgpProcessInfoAfVrf) GetPathElemsCount() uint32 {
	if m != nil {
		return m.PathElemsCount
	}
	return 0
}

func (m *BgpProcessInfoAfVrf) GetPathMemory() uint32 {
	if m != nil {
		return m.PathMemory
	}
	return 0
}

func (m *BgpProcessInfoAfVrf) GetImportedPathMemory() uint32 {
	if m != nil {
		return m.ImportedPathMemory
	}
	return 0
}

func (m *BgpProcessInfoAfVrf) GetLocalPathMemory() uint32 {
	if m != nil {
		return m.LocalPathMemory
	}
	return 0
}

func (m *BgpProcessInfoAfVrf) GetPrefixMemory() uint32 {
	if m != nil {
		return m.PrefixMemory
	}
	return 0
}

func (m *BgpProcessInfoAfVrf) GetPathElemMemory() uint32 {
	if m != nil {
		return m.PathElemMemory
	}
	return 0
}

func (m *BgpProcessInfoAfVrf) GetReceivedPathCount() uint32 {
	if m != nil {
		return m.ReceivedPathCount
	}
	return 0
}

func (m *BgpProcessInfoAfVrf) GetHistoryPathCount() uint32 {
	if m != nil {
		return m.HistoryPathCount
	}
	return 0
}

func (m *BgpProcessInfoAfVrf) GetDampedPathCount() uint32 {
	if m != nil {
		return m.DampedPathCount
	}
	return 0
}

func (m *BgpProcessInfoAfVrf) GetMallocedPrefixCount() uint32 {
	if m != nil {
		return m.MallocedPrefixCount
	}
	return 0
}

func (m *BgpProcessInfoAfVrf) GetFreedPrefixCount() uint32 {
	if m != nil {
		return m.FreedPrefixCount
	}
	return 0
}

func (m *BgpProcessInfoAfVrf) GetMallocedPathCount() uint32 {
	if m != nil {
		return m.MallocedPathCount
	}
	return 0
}

func (m *BgpProcessInfoAfVrf) GetFreedPathCount() uint32 {
	if m != nil {
		return m.FreedPathCount
	}
	return 0
}

func (m *BgpProcessInfoAfVrf) GetMallocedPathElemCount() uint32 {
	if m != nil {
		return m.MallocedPathElemCount
	}
	return 0
}

func (m *BgpProcessInfoAfVrf) GetFreedPathElemCount() uint32 {
	if m != nil {
		return m.FreedPathElemCount
	}
	return 0
}

func (m *BgpProcessInfoAfVrf) GetAnyEbgpNeighborMissingPolicy() bool {
	if m != nil {
		return m.AnyEbgpNeighborMissingPolicy
	}
	return false
}

func (m *BgpProcessInfoAfVrf) GetAttributeDownload() bool {
	if m != nil {
		return m.AttributeDownload
	}
	return false
}

func (m *BgpProcessInfoAfVrf) GetRouteTargetDownload() bool {
	if m != nil {
		return m.RouteTargetDownload
	}
	return false
}

func (m *BgpProcessInfoAfVrf) GetSrmsPrefixSid() bool {
	if m != nil {
		return m.SrmsPrefixSid
	}
	return false
}

func (m *BgpProcessInfoAfVrf) GetAddPathInstallEnable() bool {
	if m != nil {
		return m.AddPathInstallEnable
	}
	return false
}

func (m *BgpProcessInfoAfVrf) GetAddPathInstallDisable() bool {
	if m != nil {
		return m.AddPathInstallDisable
	}
	return false
}

func (m *BgpProcessInfoAfVrf) GetBestExternal() bool {
	if m != nil {
		return m.BestExternal
	}
	return false
}

func (m *BgpProcessInfoAfVrf) GetBestExternalDisable() bool {
	if m != nil {
		return m.BestExternalDisable
	}
	return false
}

func (m *BgpProcessInfoAfVrf) GetLabelRetain() bool {
	if m != nil {
		return m.LabelRetain
	}
	return false
}

func (m *BgpProcessInfoAfVrf) GetLabelRetainvalue() uint32 {
	if m != nil {
		return m.LabelRetainvalue
	}
	return 0
}

func (m *BgpProcessInfoAfVrf) GetTblBitfSize() uint32 {
	if m != nil {
		return m.TblBitfSize
	}
	return 0
}

func (m *BgpProcessInfoAfVrf) GetTblChunkBitfSize() uint32 {
	if m != nil {
		return m.TblChunkBitfSize
	}
	return 0
}

func (m *BgpProcessInfoAfVrf) GetIsRouteReflector() bool {
	if m != nil {
		return m.IsRouteReflector
	}
	return false
}

func (m *BgpProcessInfoAfVrf) GetAsbr() bool {
	if m != nil {
		return m.Asbr
	}
	return false
}

func (m *BgpProcessInfoAfVrf) GetRetainRtAll() bool {
	if m != nil {
		return m.RetainRtAll
	}
	return false
}

func (m *BgpProcessInfoAfVrf) GetIbgpNexthopSelfCount() uint32 {
	if m != nil {
		return m.IbgpNexthopSelfCount
	}
	return 0
}

func (m *BgpProcessInfoAfVrf) GetUseIgpsrLabel() bool {
	if m != nil {
		return m.UseIgpsrLabel
	}
	return false
}

func (m *BgpProcessInfoAfVrf) GetBmpNetworkEntryCount() uint32 {
	if m != nil {
		return m.BmpNetworkEntryCount
	}
	return 0
}

func (m *BgpProcessInfoAfVrf) GetBmpPathsCount() uint32 {
	if m != nil {
		return m.BmpPathsCount
	}
	return 0
}

func (m *BgpProcessInfoAfVrf) GetBmpPrefixMemory() uint32 {
	if m != nil {
		return m.BmpPrefixMemory
	}
	return 0
}

func (m *BgpProcessInfoAfVrf) GetBmpPathMemory() uint32 {
	if m != nil {
		return m.BmpPathMemory
	}
	return 0
}

type BgpPerfProcessAfGbl_ struct {
	HasConverged             bool     `protobuf:"varint,1,opt,name=has_converged,json=hasConverged,proto3" json:"has_converged,omitempty"`
	FirstNbrUpTime           uint32   `protobuf:"varint,2,opt,name=first_nbr_up_time,json=firstNbrUpTime,proto3" json:"first_nbr_up_time,omitempty"`
	ModeEnterTime            []uint32 `protobuf:"varint,3,rep,packed,name=mode_enter_time,json=modeEnterTime,proto3" json:"mode_enter_time,omitempty"`
	TotalPimInstall          uint32   `protobuf:"varint,4,opt,name=total_pim_install,json=totalPimInstall,proto3" json:"total_pim_install,omitempty"`
	TotalPimInstallAdd       []uint32 `protobuf:"varint,5,rep,packed,name=total_pim_install_add,json=totalPimInstallAdd,proto3" json:"total_pim_install_add,omitempty"`
	TotalPimInstallDel       []uint32 `protobuf:"varint,6,rep,packed,name=total_pim_install_del,json=totalPimInstallDel,proto3" json:"total_pim_install_del,omitempty"`
	TotalPimCallbacks        uint32   `protobuf:"varint,7,opt,name=total_pim_callbacks,json=totalPimCallbacks,proto3" json:"total_pim_callbacks,omitempty"`
	TotalPimCallbackAdd      []uint32 `protobuf:"varint,8,rep,packed,name=total_pim_callback_add,json=totalPimCallbackAdd,proto3" json:"total_pim_callback_add,omitempty"`
	TotalPimCallbackDel      []uint32 `protobuf:"varint,9,rep,packed,name=total_pim_callback_del,json=totalPimCallbackDel,proto3" json:"total_pim_callback_del,omitempty"`
	TotalPimCallbackAddLocal []uint32 `protobuf:"varint,10,rep,packed,name=total_pim_callback_add_local,json=totalPimCallbackAddLocal,proto3" json:"total_pim_callback_add_local,omitempty"`
	TotalPimCallbackDelLocal []uint32 `protobuf:"varint,11,rep,packed,name=total_pim_callback_del_local,json=totalPimCallbackDelLocal,proto3" json:"total_pim_callback_del_local,omitempty"`
	TotalPimCallbackBatch    uint32   `protobuf:"varint,12,opt,name=total_pim_callback_batch,json=totalPimCallbackBatch,proto3" json:"total_pim_callback_batch,omitempty"`
	XXX_NoUnkeyedLiteral     struct{} `json:"-"`
	XXX_unrecognized         []byte   `json:"-"`
	XXX_sizecache            int32    `json:"-"`
}

func (m *BgpPerfProcessAfGbl_) Reset()         { *m = BgpPerfProcessAfGbl_{} }
func (m *BgpPerfProcessAfGbl_) String() string { return proto.CompactTextString(m) }
func (*BgpPerfProcessAfGbl_) ProtoMessage()    {}
func (*BgpPerfProcessAfGbl_) Descriptor() ([]byte, []int) {
	return fileDescriptor_ea3fb4e1f872b1b5, []int{7}
}

func (m *BgpPerfProcessAfGbl_) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BgpPerfProcessAfGbl_.Unmarshal(m, b)
}
func (m *BgpPerfProcessAfGbl_) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BgpPerfProcessAfGbl_.Marshal(b, m, deterministic)
}
func (m *BgpPerfProcessAfGbl_) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpPerfProcessAfGbl_.Merge(m, src)
}
func (m *BgpPerfProcessAfGbl_) XXX_Size() int {
	return xxx_messageInfo_BgpPerfProcessAfGbl_.Size(m)
}
func (m *BgpPerfProcessAfGbl_) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpPerfProcessAfGbl_.DiscardUnknown(m)
}

var xxx_messageInfo_BgpPerfProcessAfGbl_ proto.InternalMessageInfo

func (m *BgpPerfProcessAfGbl_) GetHasConverged() bool {
	if m != nil {
		return m.HasConverged
	}
	return false
}

func (m *BgpPerfProcessAfGbl_) GetFirstNbrUpTime() uint32 {
	if m != nil {
		return m.FirstNbrUpTime
	}
	return 0
}

func (m *BgpPerfProcessAfGbl_) GetModeEnterTime() []uint32 {
	if m != nil {
		return m.ModeEnterTime
	}
	return nil
}

func (m *BgpPerfProcessAfGbl_) GetTotalPimInstall() uint32 {
	if m != nil {
		return m.TotalPimInstall
	}
	return 0
}

func (m *BgpPerfProcessAfGbl_) GetTotalPimInstallAdd() []uint32 {
	if m != nil {
		return m.TotalPimInstallAdd
	}
	return nil
}

func (m *BgpPerfProcessAfGbl_) GetTotalPimInstallDel() []uint32 {
	if m != nil {
		return m.TotalPimInstallDel
	}
	return nil
}

func (m *BgpPerfProcessAfGbl_) GetTotalPimCallbacks() uint32 {
	if m != nil {
		return m.TotalPimCallbacks
	}
	return 0
}

func (m *BgpPerfProcessAfGbl_) GetTotalPimCallbackAdd() []uint32 {
	if m != nil {
		return m.TotalPimCallbackAdd
	}
	return nil
}

func (m *BgpPerfProcessAfGbl_) GetTotalPimCallbackDel() []uint32 {
	if m != nil {
		return m.TotalPimCallbackDel
	}
	return nil
}

func (m *BgpPerfProcessAfGbl_) GetTotalPimCallbackAddLocal() []uint32 {
	if m != nil {
		return m.TotalPimCallbackAddLocal
	}
	return nil
}

func (m *BgpPerfProcessAfGbl_) GetTotalPimCallbackDelLocal() []uint32 {
	if m != nil {
		return m.TotalPimCallbackDelLocal
	}
	return nil
}

func (m *BgpPerfProcessAfGbl_) GetTotalPimCallbackBatch() uint32 {
	if m != nil {
		return m.TotalPimCallbackBatch
	}
	return 0
}

type BgpPerfProcessAfVrf_ struct {
	UpdateGenerationCalls           uint32       `protobuf:"varint,1,opt,name=update_generation_calls,json=updateGenerationCalls,proto3" json:"update_generation_calls,omitempty"`
	UpdateGenerationPrefixesCount   uint32       `protobuf:"varint,2,opt,name=update_generation_prefixes_count,json=updateGenerationPrefixesCount,proto3" json:"update_generation_prefixes_count,omitempty"`
	UpdateGenerationBePrefixesCount uint32       `protobuf:"varint,3,opt,name=update_generation_be_prefixes_count,json=updateGenerationBePrefixesCount,proto3" json:"update_generation_be_prefixes_count,omitempty"`
	UpdateGenerationMessagesCount   uint32       `protobuf:"varint,4,opt,name=update_generation_messages_count,json=updateGenerationMessagesCount,proto3" json:"update_generation_messages_count,omitempty"`
	UpdateGenerationTime            uint32       `protobuf:"varint,5,opt,name=update_generation_time,json=updateGenerationTime,proto3" json:"update_generation_time,omitempty"`
	RibUpdateCalls                  uint32       `protobuf:"varint,6,opt,name=rib_update_calls,json=ribUpdateCalls,proto3" json:"rib_update_calls,omitempty"`
	RibUpdateTime                   uint32       `protobuf:"varint,7,opt,name=rib_update_time,json=ribUpdateTime,proto3" json:"rib_update_time,omitempty"`
	PrefixesSentToRib               uint32       `protobuf:"varint,8,opt,name=prefixes_sent_to_rib,json=prefixesSentToRib,proto3" json:"prefixes_sent_to_rib,omitempty"`
	PrefixesResentToRib             uint32       `protobuf:"varint,9,opt,name=prefixes_resent_to_rib,json=prefixesResentToRib,proto3" json:"prefixes_resent_to_rib,omitempty"`
	PrefixesNotSentToRib            uint32       `protobuf:"varint,10,opt,name=prefixes_not_sent_to_rib,json=prefixesNotSentToRib,proto3" json:"prefixes_not_sent_to_rib,omitempty"`
	PrefixesRemovedFromRib          uint32       `protobuf:"varint,11,opt,name=prefixes_removed_from_rib,json=prefixesRemovedFromRib,proto3" json:"prefixes_removed_from_rib,omitempty"`
	AttributesSentToRib             uint32       `protobuf:"varint,12,opt,name=attributes_sent_to_rib,json=attributesSentToRib,proto3" json:"attributes_sent_to_rib,omitempty"`
	AttributesRemovedFromRib        uint32       `protobuf:"varint,13,opt,name=attributes_removed_from_rib,json=attributesRemovedFromRib,proto3" json:"attributes_removed_from_rib,omitempty"`
	AttributesRecoverFromRib        uint32       `protobuf:"varint,14,opt,name=attributes_recover_from_rib,json=attributesRecoverFromRib,proto3" json:"attributes_recover_from_rib,omitempty"`
	ScannerRuns                     uint32       `protobuf:"varint,15,opt,name=scanner_runs,json=scannerRuns,proto3" json:"scanner_runs,omitempty"`
	ScannerTime                     uint32       `protobuf:"varint,16,opt,name=scanner_time,json=scannerTime,proto3" json:"scanner_time,omitempty"`
	RibTblDelCalls                  uint32       `protobuf:"varint,17,opt,name=rib_tbl_del_calls,json=ribTblDelCalls,proto3" json:"rib_tbl_del_calls,omitempty"`
	RibTblInvalidCalls              uint32       `protobuf:"varint,18,opt,name=rib_tbl_invalid_calls,json=ribTblInvalidCalls,proto3" json:"rib_tbl_invalid_calls,omitempty"`
	RibTblSkipCalls                 uint32       `protobuf:"varint,19,opt,name=rib_tbl_skip_calls,json=ribTblSkipCalls,proto3" json:"rib_tbl_skip_calls,omitempty"`
	RibTblLocalLabel                uint32       `protobuf:"varint,20,opt,name=rib_tbl_local_label,json=ribTblLocalLabel,proto3" json:"rib_tbl_local_label,omitempty"`
	RibTblRetry                     uint32       `protobuf:"varint,21,opt,name=rib_tbl_retry,json=ribTblRetry,proto3" json:"rib_tbl_retry,omitempty"`
	TimeLastUpdateSent              uint32       `protobuf:"varint,22,opt,name=time_last_update_sent,json=timeLastUpdateSent,proto3" json:"time_last_update_sent,omitempty"`
	TimeRibCoverged                 *BgpTimespec `protobuf:"bytes,23,opt,name=time_rib_coverged,json=timeRibCoverged,proto3" json:"time_rib_coverged,omitempty"`
	TimeRibDown                     *BgpTimespec `protobuf:"bytes,24,opt,name=time_rib_down,json=timeRibDown,proto3" json:"time_rib_down,omitempty"`
	IsRibTableFull                  bool         `protobuf:"varint,25,opt,name=is_rib_table_full,json=isRibTableFull,proto3" json:"is_rib_table_full,omitempty"`
	RibTableFullVersion             uint32       `protobuf:"varint,26,opt,name=rib_table_full_version,json=ribTableFullVersion,proto3" json:"rib_table_full_version,omitempty"`
	FirstRibTableFullVersion        uint32       `protobuf:"varint,27,opt,name=first_rib_table_full_version,json=firstRibTableFullVersion,proto3" json:"first_rib_table_full_version,omitempty"`
	LastRibTableFullVersion         uint32       `protobuf:"varint,28,opt,name=last_rib_table_full_version,json=lastRibTableFullVersion,proto3" json:"last_rib_table_full_version,omitempty"`
	FirstRibTableFullTimestamp      *BgpTimespec `protobuf:"bytes,29,opt,name=first_rib_table_full_timestamp,json=firstRibTableFullTimestamp,proto3" json:"first_rib_table_full_timestamp,omitempty"`
	LastRibTableFullTimestamp       *BgpTimespec `protobuf:"bytes,30,opt,name=last_rib_table_full_timestamp,json=lastRibTableFullTimestamp,proto3" json:"last_rib_table_full_timestamp,omitempty"`
	LastRibTableFullAge             uint32       `protobuf:"varint,31,opt,name=last_rib_table_full_age,json=lastRibTableFullAge,proto3" json:"last_rib_table_full_age,omitempty"`
	FirstRibTableHasSpaceVersion    uint32       `protobuf:"varint,32,opt,name=first_rib_table_has_space_version,json=firstRibTableHasSpaceVersion,proto3" json:"first_rib_table_has_space_version,omitempty"`
	LastRibTableHasSpaceVersion     uint32       `protobuf:"varint,33,opt,name=last_rib_table_has_space_version,json=lastRibTableHasSpaceVersion,proto3" json:"last_rib_table_has_space_version,omitempty"`
	FirstRibTableHasSpaceTimestamp  *BgpTimespec `protobuf:"bytes,34,opt,name=first_rib_table_has_space_timestamp,json=firstRibTableHasSpaceTimestamp,proto3" json:"first_rib_table_has_space_timestamp,omitempty"`
	LastRibTableHasSpaceTimestamp   *BgpTimespec `protobuf:"bytes,35,opt,name=last_rib_table_has_space_timestamp,json=lastRibTableHasSpaceTimestamp,proto3" json:"last_rib_table_has_space_timestamp,omitempty"`
	LastRibTableHasSpaceAge         uint32       `protobuf:"varint,36,opt,name=last_rib_table_has_space_age,json=lastRibTableHasSpaceAge,proto3" json:"last_rib_table_has_space_age,omitempty"`
	TimeLabelRetain                 *BgpTimespec `protobuf:"bytes,37,opt,name=time_label_retain,json=timeLabelRetain,proto3" json:"time_label_retain,omitempty"`
	RibTrigger                      bool         `protobuf:"varint,38,opt,name=rib_trigger,json=ribTrigger,proto3" json:"rib_trigger,omitempty"`
	VrfFlags                        uint32       `protobuf:"varint,39,opt,name=vrf_flags,json=vrfFlags,proto3" json:"vrf_flags,omitempty"`
	LabelCalls                      uint32       `protobuf:"varint,40,opt,name=label_calls,json=labelCalls,proto3" json:"label_calls,omitempty"`
	LabelTime                       uint32       `protobuf:"varint,41,opt,name=label_time,json=labelTime,proto3" json:"label_time,omitempty"`
	LabelRewriteCount               uint32       `protobuf:"varint,42,opt,name=label_rewrite_count,json=labelRewriteCount,proto3" json:"label_rewrite_count,omitempty"`
	LabelReleaseCount               uint32       `protobuf:"varint,43,opt,name=label_release_count,json=labelReleaseCount,proto3" json:"label_release_count,omitempty"`
	LabelAddedCount                 uint32       `protobuf:"varint,44,opt,name=label_added_count,json=labelAddedCount,proto3" json:"label_added_count,omitempty"`
	ImportCalls                     uint32       `protobuf:"varint,45,opt,name=import_calls,json=importCalls,proto3" json:"import_calls,omitempty"`
	ImportTime                      uint32       `protobuf:"varint,46,opt,name=import_time,json=importTime,proto3" json:"import_time,omitempty"`
	ImportSrcNetProcessedCount      uint32       `protobuf:"varint,47,opt,name=import_src_net_processed_count,json=importSrcNetProcessedCount,proto3" json:"import_src_net_processed_count,omitempty"`
	ImportDestNetProcessedCount     uint32       `protobuf:"varint,48,opt,name=import_dest_net_processed_count,json=importDestNetProcessedCount,proto3" json:"import_dest_net_processed_count,omitempty"`
	ImportAddedPathCount            uint32       `protobuf:"varint,49,opt,name=import_added_path_count,json=importAddedPathCount,proto3" json:"import_added_path_count,omitempty"`
	ImportRemovedPathCount          uint32       `protobuf:"varint,50,opt,name=import_removed_path_count,json=importRemovedPathCount,proto3" json:"import_removed_path_count,omitempty"`
	ImportReplacedPathCount         uint32       `protobuf:"varint,51,opt,name=import_replaced_path_count,json=importReplacedPathCount,proto3" json:"import_replaced_path_count,omitempty"`
	UpdateGroupCount                uint32       `protobuf:"varint,52,opt,name=update_group_count,json=updateGroupCount,proto3" json:"update_group_count,omitempty"`
	SubgroupCount                   uint32       `protobuf:"varint,53,opt,name=subgroup_count,json=subgroupCount,proto3" json:"subgroup_count,omitempty"`
	XXX_NoUnkeyedLiteral            struct{}     `json:"-"`
	XXX_unrecognized                []byte       `json:"-"`
	XXX_sizecache                   int32        `json:"-"`
}

func (m *BgpPerfProcessAfVrf_) Reset()         { *m = BgpPerfProcessAfVrf_{} }
func (m *BgpPerfProcessAfVrf_) String() string { return proto.CompactTextString(m) }
func (*BgpPerfProcessAfVrf_) ProtoMessage()    {}
func (*BgpPerfProcessAfVrf_) Descriptor() ([]byte, []int) {
	return fileDescriptor_ea3fb4e1f872b1b5, []int{8}
}

func (m *BgpPerfProcessAfVrf_) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BgpPerfProcessAfVrf_.Unmarshal(m, b)
}
func (m *BgpPerfProcessAfVrf_) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BgpPerfProcessAfVrf_.Marshal(b, m, deterministic)
}
func (m *BgpPerfProcessAfVrf_) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpPerfProcessAfVrf_.Merge(m, src)
}
func (m *BgpPerfProcessAfVrf_) XXX_Size() int {
	return xxx_messageInfo_BgpPerfProcessAfVrf_.Size(m)
}
func (m *BgpPerfProcessAfVrf_) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpPerfProcessAfVrf_.DiscardUnknown(m)
}

var xxx_messageInfo_BgpPerfProcessAfVrf_ proto.InternalMessageInfo

func (m *BgpPerfProcessAfVrf_) GetUpdateGenerationCalls() uint32 {
	if m != nil {
		return m.UpdateGenerationCalls
	}
	return 0
}

func (m *BgpPerfProcessAfVrf_) GetUpdateGenerationPrefixesCount() uint32 {
	if m != nil {
		return m.UpdateGenerationPrefixesCount
	}
	return 0
}

func (m *BgpPerfProcessAfVrf_) GetUpdateGenerationBePrefixesCount() uint32 {
	if m != nil {
		return m.UpdateGenerationBePrefixesCount
	}
	return 0
}

func (m *BgpPerfProcessAfVrf_) GetUpdateGenerationMessagesCount() uint32 {
	if m != nil {
		return m.UpdateGenerationMessagesCount
	}
	return 0
}

func (m *BgpPerfProcessAfVrf_) GetUpdateGenerationTime() uint32 {
	if m != nil {
		return m.UpdateGenerationTime
	}
	return 0
}

func (m *BgpPerfProcessAfVrf_) GetRibUpdateCalls() uint32 {
	if m != nil {
		return m.RibUpdateCalls
	}
	return 0
}

func (m *BgpPerfProcessAfVrf_) GetRibUpdateTime() uint32 {
	if m != nil {
		return m.RibUpdateTime
	}
	return 0
}

func (m *BgpPerfProcessAfVrf_) GetPrefixesSentToRib() uint32 {
	if m != nil {
		return m.PrefixesSentToRib
	}
	return 0
}

func (m *BgpPerfProcessAfVrf_) GetPrefixesResentToRib() uint32 {
	if m != nil {
		return m.PrefixesResentToRib
	}
	return 0
}

func (m *BgpPerfProcessAfVrf_) GetPrefixesNotSentToRib() uint32 {
	if m != nil {
		return m.PrefixesNotSentToRib
	}
	return 0
}

func (m *BgpPerfProcessAfVrf_) GetPrefixesRemovedFromRib() uint32 {
	if m != nil {
		return m.PrefixesRemovedFromRib
	}
	return 0
}

func (m *BgpPerfProcessAfVrf_) GetAttributesSentToRib() uint32 {
	if m != nil {
		return m.AttributesSentToRib
	}
	return 0
}

func (m *BgpPerfProcessAfVrf_) GetAttributesRemovedFromRib() uint32 {
	if m != nil {
		return m.AttributesRemovedFromRib
	}
	return 0
}

func (m *BgpPerfProcessAfVrf_) GetAttributesRecoverFromRib() uint32 {
	if m != nil {
		return m.AttributesRecoverFromRib
	}
	return 0
}

func (m *BgpPerfProcessAfVrf_) GetScannerRuns() uint32 {
	if m != nil {
		return m.ScannerRuns
	}
	return 0
}

func (m *BgpPerfProcessAfVrf_) GetScannerTime() uint32 {
	if m != nil {
		return m.ScannerTime
	}
	return 0
}

func (m *BgpPerfProcessAfVrf_) GetRibTblDelCalls() uint32 {
	if m != nil {
		return m.RibTblDelCalls
	}
	return 0
}

func (m *BgpPerfProcessAfVrf_) GetRibTblInvalidCalls() uint32 {
	if m != nil {
		return m.RibTblInvalidCalls
	}
	return 0
}

func (m *BgpPerfProcessAfVrf_) GetRibTblSkipCalls() uint32 {
	if m != nil {
		return m.RibTblSkipCalls
	}
	return 0
}

func (m *BgpPerfProcessAfVrf_) GetRibTblLocalLabel() uint32 {
	if m != nil {
		return m.RibTblLocalLabel
	}
	return 0
}

func (m *BgpPerfProcessAfVrf_) GetRibTblRetry() uint32 {
	if m != nil {
		return m.RibTblRetry
	}
	return 0
}

func (m *BgpPerfProcessAfVrf_) GetTimeLastUpdateSent() uint32 {
	if m != nil {
		return m.TimeLastUpdateSent
	}
	return 0
}

func (m *BgpPerfProcessAfVrf_) GetTimeRibCoverged() *BgpTimespec {
	if m != nil {
		return m.TimeRibCoverged
	}
	return nil
}

func (m *BgpPerfProcessAfVrf_) GetTimeRibDown() *BgpTimespec {
	if m != nil {
		return m.TimeRibDown
	}
	return nil
}

func (m *BgpPerfProcessAfVrf_) GetIsRibTableFull() bool {
	if m != nil {
		return m.IsRibTableFull
	}
	return false
}

func (m *BgpPerfProcessAfVrf_) GetRibTableFullVersion() uint32 {
	if m != nil {
		return m.RibTableFullVersion
	}
	return 0
}

func (m *BgpPerfProcessAfVrf_) GetFirstRibTableFullVersion() uint32 {
	if m != nil {
		return m.FirstRibTableFullVersion
	}
	return 0
}

func (m *BgpPerfProcessAfVrf_) GetLastRibTableFullVersion() uint32 {
	if m != nil {
		return m.LastRibTableFullVersion
	}
	return 0
}

func (m *BgpPerfProcessAfVrf_) GetFirstRibTableFullTimestamp() *BgpTimespec {
	if m != nil {
		return m.FirstRibTableFullTimestamp
	}
	return nil
}

func (m *BgpPerfProcessAfVrf_) GetLastRibTableFullTimestamp() *BgpTimespec {
	if m != nil {
		return m.LastRibTableFullTimestamp
	}
	return nil
}

func (m *BgpPerfProcessAfVrf_) GetLastRibTableFullAge() uint32 {
	if m != nil {
		return m.LastRibTableFullAge
	}
	return 0
}

func (m *BgpPerfProcessAfVrf_) GetFirstRibTableHasSpaceVersion() uint32 {
	if m != nil {
		return m.FirstRibTableHasSpaceVersion
	}
	return 0
}

func (m *BgpPerfProcessAfVrf_) GetLastRibTableHasSpaceVersion() uint32 {
	if m != nil {
		return m.LastRibTableHasSpaceVersion
	}
	return 0
}

func (m *BgpPerfProcessAfVrf_) GetFirstRibTableHasSpaceTimestamp() *BgpTimespec {
	if m != nil {
		return m.FirstRibTableHasSpaceTimestamp
	}
	return nil
}

func (m *BgpPerfProcessAfVrf_) GetLastRibTableHasSpaceTimestamp() *BgpTimespec {
	if m != nil {
		return m.LastRibTableHasSpaceTimestamp
	}
	return nil
}

func (m *BgpPerfProcessAfVrf_) GetLastRibTableHasSpaceAge() uint32 {
	if m != nil {
		return m.LastRibTableHasSpaceAge
	}
	return 0
}

func (m *BgpPerfProcessAfVrf_) GetTimeLabelRetain() *BgpTimespec {
	if m != nil {
		return m.TimeLabelRetain
	}
	return nil
}

func (m *BgpPerfProcessAfVrf_) GetRibTrigger() bool {
	if m != nil {
		return m.RibTrigger
	}
	return false
}

func (m *BgpPerfProcessAfVrf_) GetVrfFlags() uint32 {
	if m != nil {
		return m.VrfFlags
	}
	return 0
}

func (m *BgpPerfProcessAfVrf_) GetLabelCalls() uint32 {
	if m != nil {
		return m.LabelCalls
	}
	return 0
}

func (m *BgpPerfProcessAfVrf_) GetLabelTime() uint32 {
	if m != nil {
		return m.LabelTime
	}
	return 0
}

func (m *BgpPerfProcessAfVrf_) GetLabelRewriteCount() uint32 {
	if m != nil {
		return m.LabelRewriteCount
	}
	return 0
}

func (m *BgpPerfProcessAfVrf_) GetLabelReleaseCount() uint32 {
	if m != nil {
		return m.LabelReleaseCount
	}
	return 0
}

func (m *BgpPerfProcessAfVrf_) GetLabelAddedCount() uint32 {
	if m != nil {
		return m.LabelAddedCount
	}
	return 0
}

func (m *BgpPerfProcessAfVrf_) GetImportCalls() uint32 {
	if m != nil {
		return m.ImportCalls
	}
	return 0
}

func (m *BgpPerfProcessAfVrf_) GetImportTime() uint32 {
	if m != nil {
		return m.ImportTime
	}
	return 0
}

func (m *BgpPerfProcessAfVrf_) GetImportSrcNetProcessedCount() uint32 {
	if m != nil {
		return m.ImportSrcNetProcessedCount
	}
	return 0
}

func (m *BgpPerfProcessAfVrf_) GetImportDestNetProcessedCount() uint32 {
	if m != nil {
		return m.ImportDestNetProcessedCount
	}
	return 0
}

func (m *BgpPerfProcessAfVrf_) GetImportAddedPathCount() uint32 {
	if m != nil {
		return m.ImportAddedPathCount
	}
	return 0
}

func (m *BgpPerfProcessAfVrf_) GetImportRemovedPathCount() uint32 {
	if m != nil {
		return m.ImportRemovedPathCount
	}
	return 0
}

func (m *BgpPerfProcessAfVrf_) GetImportReplacedPathCount() uint32 {
	if m != nil {
		return m.ImportReplacedPathCount
	}
	return 0
}

func (m *BgpPerfProcessAfVrf_) GetUpdateGroupCount() uint32 {
	if m != nil {
		return m.UpdateGroupCount
	}
	return 0
}

func (m *BgpPerfProcessAfVrf_) GetSubgroupCount() uint32 {
	if m != nil {
		return m.SubgroupCount
	}
	return 0
}

type BgpPerfProcessAf_ struct {
	Global               *BgpPerfProcessAfGbl_ `protobuf:"bytes,1,opt,name=global,proto3" json:"global,omitempty"`
	Vrf                  *BgpPerfProcessAfVrf_ `protobuf:"bytes,2,opt,name=vrf,proto3" json:"vrf,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *BgpPerfProcessAf_) Reset()         { *m = BgpPerfProcessAf_{} }
func (m *BgpPerfProcessAf_) String() string { return proto.CompactTextString(m) }
func (*BgpPerfProcessAf_) ProtoMessage()    {}
func (*BgpPerfProcessAf_) Descriptor() ([]byte, []int) {
	return fileDescriptor_ea3fb4e1f872b1b5, []int{9}
}

func (m *BgpPerfProcessAf_) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BgpPerfProcessAf_.Unmarshal(m, b)
}
func (m *BgpPerfProcessAf_) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BgpPerfProcessAf_.Marshal(b, m, deterministic)
}
func (m *BgpPerfProcessAf_) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpPerfProcessAf_.Merge(m, src)
}
func (m *BgpPerfProcessAf_) XXX_Size() int {
	return xxx_messageInfo_BgpPerfProcessAf_.Size(m)
}
func (m *BgpPerfProcessAf_) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpPerfProcessAf_.DiscardUnknown(m)
}

var xxx_messageInfo_BgpPerfProcessAf_ proto.InternalMessageInfo

func (m *BgpPerfProcessAf_) GetGlobal() *BgpPerfProcessAfGbl_ {
	if m != nil {
		return m.Global
	}
	return nil
}

func (m *BgpPerfProcessAf_) GetVrf() *BgpPerfProcessAfVrf_ {
	if m != nil {
		return m.Vrf
	}
	return nil
}

type BgpProcessInfoAfBag struct {
	AfName                string               `protobuf:"bytes,50,opt,name=af_name,json=afName,proto3" json:"af_name,omitempty"`
	ProcessInstance       uint32               `protobuf:"varint,51,opt,name=process_instance,json=processInstance,proto3" json:"process_instance,omitempty"`
	VrfName               string               `protobuf:"bytes,52,opt,name=vrf_name,json=vrfName,proto3" json:"vrf_name,omitempty"`
	VrfTotals             bool                 `protobuf:"varint,53,opt,name=vrf_totals,json=vrfTotals,proto3" json:"vrf_totals,omitempty"`
	Global                *BgpProcessInfoAfGbl `protobuf:"bytes,54,opt,name=global,proto3" json:"global,omitempty"`
	Vrf                   *BgpProcessInfoAfVrf `protobuf:"bytes,55,opt,name=vrf,proto3" json:"vrf,omitempty"`
	PerformanceStatistics *BgpPerfProcessAf_   `protobuf:"bytes,56,opt,name=performance_statistics,json=performanceStatistics,proto3" json:"performance_statistics,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}             `json:"-"`
	XXX_unrecognized      []byte               `json:"-"`
	XXX_sizecache         int32                `json:"-"`
}

func (m *BgpProcessInfoAfBag) Reset()         { *m = BgpProcessInfoAfBag{} }
func (m *BgpProcessInfoAfBag) String() string { return proto.CompactTextString(m) }
func (*BgpProcessInfoAfBag) ProtoMessage()    {}
func (*BgpProcessInfoAfBag) Descriptor() ([]byte, []int) {
	return fileDescriptor_ea3fb4e1f872b1b5, []int{10}
}

func (m *BgpProcessInfoAfBag) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BgpProcessInfoAfBag.Unmarshal(m, b)
}
func (m *BgpProcessInfoAfBag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BgpProcessInfoAfBag.Marshal(b, m, deterministic)
}
func (m *BgpProcessInfoAfBag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpProcessInfoAfBag.Merge(m, src)
}
func (m *BgpProcessInfoAfBag) XXX_Size() int {
	return xxx_messageInfo_BgpProcessInfoAfBag.Size(m)
}
func (m *BgpProcessInfoAfBag) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpProcessInfoAfBag.DiscardUnknown(m)
}

var xxx_messageInfo_BgpProcessInfoAfBag proto.InternalMessageInfo

func (m *BgpProcessInfoAfBag) GetAfName() string {
	if m != nil {
		return m.AfName
	}
	return ""
}

func (m *BgpProcessInfoAfBag) GetProcessInstance() uint32 {
	if m != nil {
		return m.ProcessInstance
	}
	return 0
}

func (m *BgpProcessInfoAfBag) GetVrfName() string {
	if m != nil {
		return m.VrfName
	}
	return ""
}

func (m *BgpProcessInfoAfBag) GetVrfTotals() bool {
	if m != nil {
		return m.VrfTotals
	}
	return false
}

func (m *BgpProcessInfoAfBag) GetGlobal() *BgpProcessInfoAfGbl {
	if m != nil {
		return m.Global
	}
	return nil
}

func (m *BgpProcessInfoAfBag) GetVrf() *BgpProcessInfoAfVrf {
	if m != nil {
		return m.Vrf
	}
	return nil
}

func (m *BgpProcessInfoAfBag) GetPerformanceStatistics() *BgpPerfProcessAf_ {
	if m != nil {
		return m.PerformanceStatistics
	}
	return nil
}

func init() {
	proto.RegisterType((*BgpProcessInfoAfBag_KEYS)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.vrfs.vrf.afs.af.af_process_info.bgp_process_info_af_bag_KEYS")
	proto.RegisterType((*BgpTimespec)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.vrfs.vrf.afs.af.af_process_info.bgp_timespec")
	proto.RegisterType((*BgpThreadTriggerInfoStat)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.vrfs.vrf.afs.af.af_process_info.bgp_thread_trigger_info_stat")
	proto.RegisterType((*BgpThreadTriggerInfo)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.vrfs.vrf.afs.af.af_process_info.bgp_thread_trigger_info")
	proto.RegisterType((*BgpRibInstallTimeInfo)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.vrfs.vrf.afs.af.af_process_info.bgp_rib_install_time_info")
	proto.RegisterType((*BgpProcessInfoAfGbl)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.vrfs.vrf.afs.af.af_process_info.bgp_process_info_af_gbl")
	proto.RegisterType((*BgpProcessInfoAfVrf)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.vrfs.vrf.afs.af.af_process_info.bgp_process_info_af_vrf")
	proto.RegisterType((*BgpPerfProcessAfGbl_)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.vrfs.vrf.afs.af.af_process_info.bgp_perf_process_af_gbl_")
	proto.RegisterType((*BgpPerfProcessAfVrf_)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.vrfs.vrf.afs.af.af_process_info.bgp_perf_process_af_vrf_")
	proto.RegisterType((*BgpPerfProcessAf_)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.vrfs.vrf.afs.af.af_process_info.bgp_perf_process_af_")
	proto.RegisterType((*BgpProcessInfoAfBag)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.vrfs.vrf.afs.af.af_process_info.bgp_process_info_af_bag")
}

func init() { proto.RegisterFile("bgp_process_info_af_bag.proto", fileDescriptor_ea3fb4e1f872b1b5) }

var fileDescriptor_ea3fb4e1f872b1b5 = []byte{
	// 3789 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x5b, 0x4b, 0x6f, 0x1c, 0x49,
	0x72, 0x46, 0x4b, 0x1a, 0x89, 0x8c, 0xe6, 0xb3, 0x48, 0x8a, 0x2d, 0x91, 0x92, 0xf8, 0xd0, 0x83,
	0xd2, 0x68, 0x38, 0x23, 0x8e, 0x1e, 0x1e, 0xef, 0xce, 0xd8, 0x92, 0x48, 0x69, 0xb4, 0xab, 0x91,
	0x89, 0x22, 0x67, 0x17, 0x3e, 0x15, 0xaa, 0xba, 0xb2, 0x9b, 0x09, 0xd5, 0xcb, 0x59, 0xd5, 0x7c,
	0x8c, 0x0d, 0xf8, 0x0f, 0xd8, 0x80, 0xb1, 0xeb, 0x8b, 0xb1, 0x58, 0x18, 0x06, 0x7c, 0x5d, 0x1b,
	0x86, 0x6f, 0xc6, 0xfe, 0x07, 0x9f, 0xfc, 0x2f, 0x7c, 0xf7, 0xd5, 0x88, 0x88, 0xcc, 0xac, 0xac,
	0x66, 0xd3, 0x37, 0x4f, 0xef, 0x45, 0xc3, 0x8e, 0xf8, 0x22, 0xf3, 0xcb, 0x57, 0x64, 0x44, 0x64,
	0x0d, 0xdc, 0x8a, 0xfa, 0x45, 0x50, 0xa8, 0xbc, 0x2b, 0xca, 0x32, 0x90, 0x59, 0x2f, 0x0f, 0xc2,
	0x5e, 0x10, 0x85, 0xfd, 0xed, 0x42, 0xe5, 0x55, 0xee, 0x85, 0x5d, 0x59, 0x76, 0xf3, 0x40, 0xe6,
	0x65, 0x70, 0xaa, 0x02, 0x59, 0x1c, 0x3f, 0x0d, 0xd0, 0x20, 0x2f, 0x84, 0xda, 0x8e, 0xfa, 0xc5,
	0xb6, 0xcc, 0xca, 0x2a, 0xcc, 0xba, 0xa2, 0xb4, 0x7f, 0xd9, 0x3f, 0x82, 0xb0, 0x5b, 0xc9, 0x63,
	0xb1, 0x7d, 0xac, 0x7a, 0x25, 0xfe, 0xb3, 0x1d, 0xf6, 0xca, 0xed, 0x10, 0xff, 0xd3, 0xe8, 0x6f,
	0xe3, 0x04, 0x56, 0x2f, 0xe0, 0x10, 0xfc, 0x7c, 0xef, 0xcf, 0x0f, 0xbc, 0x4d, 0x98, 0xb6, 0x4d,
	0x66, 0x61, 0x2a, 0x3a, 0xad, 0xb5, 0xd6, 0xd6, 0xa4, 0x3f, 0x65, 0x84, 0x1f, 0xc2, 0x54, 0x78,
	0x37, 0x60, 0xe2, 0x58, 0xf5, 0x58, 0x7f, 0x89, 0xf4, 0xd7, 0x8e, 0x55, 0x8f, 0x54, 0xcb, 0x70,
	0x2d, 0xd4, 0x9a, 0xcb, 0xa4, 0xb9, 0x1a, 0x92, 0x62, 0xe3, 0x67, 0x30, 0x85, 0x1d, 0x57, 0x32,
	0x15, 0x65, 0x21, 0xba, 0x5e, 0x07, 0xae, 0x95, 0xa2, 0x9b, 0x67, 0x71, 0x49, 0x5d, 0x4c, 0xfb,
	0xe6, 0xa7, 0xb7, 0x06, 0xed, 0x2c, 0xcc, 0x72, 0xa3, 0xbd, 0x44, 0x5a, 0x57, 0xb4, 0xf1, 0x0f,
	0x97, 0x78, 0x14, 0xd5, 0x91, 0x12, 0x61, 0x1c, 0x54, 0x4a, 0xf6, 0xfb, 0x42, 0xf1, 0x60, 0xca,
	0x2a, 0xac, 0xbc, 0x07, 0x30, 0x6b, 0x84, 0xc7, 0x42, 0x95, 0x32, 0xcf, 0x74, 0x27, 0x33, 0x5a,
	0xfc, 0x0b, 0x96, 0x7a, 0x3b, 0xb0, 0x64, 0x80, 0x55, 0x18, 0x25, 0xc2, 0xc2, 0xb9, 0xd7, 0x05,
	0xad, 0x3c, 0x44, 0x9d, 0xb1, 0xf9, 0x4d, 0x0b, 0xe6, 0xad, 0x91, 0x4c, 0x45, 0x80, 0xe3, 0xa1,
	0xd1, 0xb6, 0x77, 0xf2, 0xed, 0xff, 0xf7, 0x25, 0xdc, 0x76, 0xa7, 0xd1, 0x37, 0xe3, 0x3c, 0x94,
	0xa9, 0x38, 0x28, 0x44, 0x77, 0xe3, 0xbf, 0x5a, 0xb0, 0x7c, 0xc1, 0xdc, 0x78, 0x37, 0x61, 0x42,
	0xff, 0x36, 0x93, 0x6e, 0x7f, 0x7b, 0xbf, 0x6d, 0xc1, 0x24, 0xce, 0x9d, 0x2c, 0x2b, 0xd9, 0xed,
	0x5c, 0x5a, 0xbb, 0xbc, 0xd5, 0xde, 0xf9, 0xeb, 0x1f, 0x6b, 0x34, 0x17, 0xac, 0xa3, 0x5f, 0x33,
	0xda, 0xf8, 0xdd, 0x15, 0xb8, 0x81, 0x58, 0x25, 0xa3, 0x80, 0xfa, 0x48, 0x12, 0x9e, 0x7d, 0x1a,
	0xd9, 0xdf, 0xb5, 0xa0, 0x3d, 0x28, 0xe2, 0xb0, 0x12, 0x24, 0xa4, 0xd1, 0x8d, 0x61, 0x35, 0x80,
	0x39, 0xe0, 0x62, 0x78, 0xbf, 0x6a, 0xc1, 0x94, 0x4b, 0x94, 0xb6, 0xd4, 0x18, 0x38, 0xb5, 0x35,
	0x09, 0x22, 0xf5, 0x00, 0x66, 0xf5, 0x4f, 0x11, 0x07, 0xdd, 0x7c, 0x90, 0x55, 0xb4, 0x71, 0xa7,
	0xfd, 0x19, 0x2b, 0x7e, 0x8d, 0x52, 0xef, 0x1e, 0xcc, 0xa4, 0x79, 0x2c, 0x7b, 0xd2, 0xe2, 0xae,
	0x10, 0x6e, 0xda, 0x48, 0x19, 0xb6, 0x09, 0xd3, 0xe5, 0x47, 0x59, 0x14, 0x16, 0xf5, 0x09, 0xa1,
	0xa6, 0xb4, 0x90, 0x41, 0x0f, 0x60, 0xf6, 0x44, 0x56, 0x47, 0xb1, 0x0a, 0x4f, 0x32, 0x0d, 0xbb,
	0xca, 0x9d, 0x5a, 0x71, 0xdd, 0x5a, 0x15, 0xaa, 0xca, 0x9e, 0xc2, 0x6b, 0xba, 0x35, 0x14, 0x9a,
	0xe3, 0x77, 0x0f, 0x66, 0xaa, 0x50, 0xf5, 0x45, 0x8d, 0x9a, 0x60, 0x66, 0x2c, 0xd5, 0xb0, 0x8d,
	0xff, 0xdc, 0xe4, 0x73, 0x30, 0xec, 0xe9, 0xfa, 0x51, 0xe2, 0xad, 0xc3, 0x94, 0xca, 0x07, 0x95,
	0x50, 0xb4, 0xcb, 0x8c, 0x8f, 0x6b, 0xb3, 0xec, 0x00, 0x45, 0x48, 0x65, 0x94, 0x43, 0x98, 0xaa,
	0x5c, 0x4f, 0xf0, 0x00, 0x66, 0xb5, 0x3a, 0x38, 0x51, 0x21, 0x0e, 0xd8, 0xcc, 0xa6, 0x16, 0xff,
	0x92, 0xa5, 0xde, 0x36, 0x2c, 0x0c, 0x01, 0x83, 0x4a, 0xc6, 0x7a, 0x4a, 0xe7, 0x9b, 0xe0, 0x43,
	0x19, 0x7b, 0xff, 0xdc, 0x82, 0xeb, 0xae, 0x81, 0xe3, 0x67, 0x3e, 0x19, 0xcf, 0x2e, 0x5a, 0x70,
	0x48, 0x1a, 0x5f, 0xe3, 0xfd, 0x6b, 0x0b, 0x56, 0x1b, 0x34, 0x79, 0xf5, 0x6a, 0xb2, 0x57, 0xc7,
	0x43, 0xb6, 0xe3, 0x90, 0x3d, 0x40, 0x4a, 0x96, 0xf1, 0xef, 0x5a, 0xb0, 0xd2, 0x60, 0x1c, 0xe7,
	0x99, 0x70, 0x08, 0x5f, 0x1b, 0x0f, 0xe1, 0x65, 0x87, 0xf0, 0x6e, 0x9e, 0x09, 0xcb, 0xf7, 0x05,
	0x74, 0xd2, 0xf0, 0x54, 0xb7, 0x19, 0x14, 0x22, 0x11, 0xe9, 0xd0, 0xb6, 0x5f, 0x4a, 0xc3, 0xd3,
	0x97, 0xa4, 0xde, 0x47, 0xad, 0xd9, 0x9a, 0x5f, 0xc0, 0x62, 0x2a, 0x54, 0x1f, 0x37, 0x5a, 0x63,
	0x1b, 0x4f, 0x92, 0x91, 0xc7, 0xba, 0xc6, 0xb5, 0xf6, 0x67, 0x70, 0x8f, 0x0e, 0x40, 0x10, 0xe7,
	0x27, 0x59, 0x92, 0x87, 0x71, 0xd0, 0xcf, 0x4d, 0xc7, 0x34, 0x4b, 0x85, 0xc8, 0x62, 0x99, 0xf5,
	0x3b, 0x40, 0x4d, 0xac, 0x11, 0x78, 0x57, 0x63, 0xdf, 0xe6, 0xcc, 0x01, 0xc9, 0xef, 0x33, 0xce,
	0xfb, 0x0a, 0x6e, 0xa0, 0xb3, 0x8e, 0xf0, 0x1f, 0x25, 0xba, 0x42, 0x1e, 0x8b, 0xd8, 0xf2, 0x68,
	0x53, 0x23, 0xd7, 0x95, 0x8c, 0x5e, 0x29, 0x19, 0xf9, 0x5a, 0x6d, 0xb8, 0x3c, 0x06, 0x8f, 0x69,
	0x93, 0xb1, 0xb1, 0x99, 0x22, 0x9b, 0x39, 0xd2, 0xa0, 0x95, 0x41, 0x6f, 0xc2, 0x74, 0x12, 0x46,
	0x22, 0xb1, 0xc0, 0x69, 0x3e, 0xab, 0x24, 0x74, 0xdc, 0x86, 0x4c, 0x8b, 0xdc, 0x71, 0x2e, 0x33,
	0xec, 0x36, 0x58, 0xea, 0x1c, 0x69, 0x5c, 0xc7, 0x38, 0x3a, 0xb3, 0xb8, 0x59, 0x3e, 0xd2, 0x5a,
	0x6c, 0x80, 0xeb, 0x30, 0x55, 0x8a, 0xac, 0x1e, 0xd0, 0x1c, 0x87, 0x29, 0x28, 0x33, 0x90, 0x87,
	0x30, 0x9f, 0x0d, 0xd2, 0x40, 0x66, 0xb2, 0x0a, 0xca, 0xb3, 0xac, 0x1b, 0x14, 0xbd, 0xd3, 0xce,
	0x3c, 0xb7, 0x96, 0x0d, 0xd2, 0x77, 0x99, 0xac, 0x0e, 0xce, 0xb2, 0xee, 0x7e, 0xef, 0xd4, 0x7b,
	0x03, 0xeb, 0xb8, 0xce, 0x3c, 0x8c, 0xb2, 0x0a, 0xbb, 0x1f, 0x83, 0x58, 0x14, 0xd5, 0x51, 0x70,
	0xfc, 0x34, 0xc8, 0xc4, 0x69, 0x15, 0x1c, 0xe5, 0x45, 0xc7, 0x23, 0xd3, 0x95, 0x34, 0x3c, 0x7d,
	0x8f, 0xb8, 0x03, 0x84, 0xed, 0x22, 0xea, 0x17, 0x4f, 0x3f, 0x88, 0xd3, 0xea, 0xdb, 0xbc, 0xf8,
	0x3f, 0xda, 0x79, 0x5e, 0xb7, 0xb3, 0x70, 0x61, 0x3b, 0xcf, 0x4d, 0x3b, 0x8f, 0xc1, 0x4b, 0xf2,
	0x6e, 0x98, 0x04, 0x99, 0xa8, 0x4e, 0x72, 0xf5, 0xb1, 0x0c, 0xb2, 0x41, 0xda, 0x59, 0xe4, 0x05,
	0x20, 0xcd, 0x07, 0xad, 0xf8, 0x30, 0x48, 0x31, 0x8a, 0x1a, 0x42, 0xa7, 0x22, 0xcd, 0xd5, 0x59,
	0x67, 0x89, 0xa3, 0xa8, 0x86, 0xc1, 0x77, 0xa4, 0xf2, 0xbe, 0x86, 0x95, 0x61, 0x9b, 0x30, 0x49,
	0xf2, 0xae, 0x88, 0xa9, 0xab, 0xeb, 0x64, 0xd9, 0x69, 0x5a, 0x6a, 0x00, 0x76, 0xf9, 0x02, 0x3a,
	0x43, 0xe6, 0x3d, 0x25, 0xb4, 0xed, 0x32, 0x1f, 0x8c, 0x86, 0xed, 0x1b, 0xd4, 0xa2, 0xe1, 0x7d,
	0x98, 0x65, 0xc3, 0x22, 0xac, 0x8e, 0x78, 0x58, 0x1d, 0xde, 0x08, 0x24, 0xde, 0x47, 0x29, 0xe2,
	0xec, 0x0c, 0x30, 0x4e, 0x0f, 0xe8, 0x86, 0x33, 0x03, 0x04, 0xd5, 0xa3, 0xb1, 0x74, 0x34, 0xda,
	0x1d, 0xca, 0x4d, 0x87, 0x0e, 0xdb, 0x38, 0xe3, 0x78, 0x62, 0xa6, 0x8e, 0x0d, 0xeb, 0x41, 0xac,
	0xf0, 0x41, 0xad, 0xad, 0xec, 0x08, 0x1e, 0x83, 0xc7, 0x7b, 0x56, 0xc4, 0xce, 0x20, 0x56, 0x99,
	0x99, 0xd1, 0xd8, 0x71, 0xec, 0xc0, 0xd2, 0x10, 0x5a, 0x0f, 0xe5, 0x16, 0xaf, 0x4d, 0xc3, 0x40,
	0x8f, 0x66, 0x1d, 0xa6, 0x1a, 0xeb, 0x7e, 0x5b, 0x87, 0xe0, 0xce, 0x92, 0x3f, 0x80, 0xd9, 0xe1,
	0xc5, 0xbe, 0xa3, 0x77, 0x76, 0x73, 0x9d, 0x77, 0x60, 0x69, 0xf4, 0x0a, 0xaf, 0x71, 0xff, 0xd9,
	0x88, 0xc5, 0x7d, 0x0c, 0xde, 0x88, 0x65, 0x5d, 0xe7, 0x11, 0x66, 0xc3, 0x2b, 0xba, 0x02, 0x93,
	0xf5, 0x34, 0x6c, 0x70, 0x58, 0x5b, 0x98, 0xe1, 0xaf, 0xc3, 0x54, 0x63, 0xd4, 0x9b, 0x3c, 0x94,
	0xc2, 0x19, 0xed, 0x63, 0xf0, 0x46, 0xac, 0xda, 0x5d, 0xee, 0xad, 0x18, 0x5e, 0xb0, 0xfb, 0x30,
	0x3b, 0xbc, 0x54, 0xf7, 0x78, 0xff, 0x14, 0x8d, 0x55, 0xba, 0x0b, 0x33, 0x28, 0x08, 0xd0, 0x29,
	0x33, 0xb5, 0xfb, 0xec, 0x95, 0x50, 0xba, 0x87, 0x42, 0x44, 0x3d, 0x82, 0x79, 0x07, 0xa5, 0x39,
	0x3e, 0x20, 0xe0, 0xac, 0x05, 0x6a, 0x9e, 0xcf, 0x60, 0xd9, 0xc5, 0xba, 0x64, 0xb7, 0xc8, 0x62,
	0xb1, 0xb6, 0x70, 0x08, 0x7f, 0x0e, 0x8b, 0x8e, 0x59, 0xcd, 0xfa, 0x21, 0x07, 0x1f, 0xd6, 0xc6,
	0xdd, 0x5f, 0xec, 0x3f, 0x92, 0xb0, 0xac, 0x4c, 0x50, 0xde, 0x79, 0xb4, 0xd6, 0xda, 0xba, 0xe2,
	0xcf, 0x91, 0xe6, 0x7d, 0x58, 0x56, 0x87, 0x2c, 0x67, 0x74, 0x59, 0x05, 0x4d, 0x0f, 0xfc, 0xa9,
	0x3e, 0x27, 0x61, 0x59, 0xbd, 0x77, 0xbd, 0xf0, 0x23, 0x98, 0x67, 0x20, 0x5e, 0x7f, 0x06, 0xfc,
	0x98, 0xc7, 0x4b, 0x8a, 0x57, 0xfd, 0xc2, 0xf1, 0xd8, 0x8c, 0xb5, 0x39, 0xcb, 0x67, 0xfa, 0xa0,
	0xa2, 0xf4, 0xd0, 0x24, 0x2e, 0x5b, 0x30, 0x87, 0x97, 0x44, 0x83, 0xec, 0x36, 0x91, 0x9d, 0x51,
	0x32, 0x72, 0xa9, 0x6e, 0x01, 0x11, 0x0a, 0xdc, 0x3b, 0xe5, 0x73, 0xde, 0xb4, 0x28, 0xf7, 0xeb,
	0x1b, 0xe5, 0x3e, 0xcc, 0xd2, 0xd5, 0xe5, 0x90, 0xfc, 0x82, 0xfb, 0xc6, 0x0b, 0xab, 0xa6, 0x88,
	0x81, 0xa4, 0x8c, 0x6a, 0x82, 0x4f, 0x78, 0x77, 0x29, 0x19, 0x59, 0x7a, 0xdb, 0xa0, 0x8f, 0x58,
	0x93, 0xe1, 0x0e, 0x31, 0x9c, 0x67, 0x95, 0x4b, 0x72, 0x1b, 0x16, 0x08, 0x38, 0x74, 0x59, 0x7d,
	0xc9, 0xab, 0x85, 0xaa, 0x77, 0x8d, 0x0b, 0xcb, 0x7a, 0x83, 0x06, 0xdb, 0xa7, 0xae, 0x37, 0x70,
	0x08, 0x63, 0xfc, 0xcf, 0x68, 0xcb, 0xf9, 0x99, 0x8e, 0xff, 0x49, 0x6c, 0x69, 0x3f, 0x83, 0x65,
	0x9d, 0x4f, 0xf5, 0x45, 0xd6, 0xa4, 0xfe, 0x9c, 0xa8, 0x2f, 0xb2, 0xfa, 0xad, 0xc8, 0x5c, 0xf6,
	0x5f, 0xc2, 0x75, 0xc7, 0xcc, 0x65, 0xf4, 0x82, 0x8f, 0xbb, 0xb5, 0x6a, 0x92, 0x32, 0xb9, 0x9b,
	0x21, 0xf5, 0x47, 0x4c, 0x4a, 0xa7, 0x53, 0x86, 0xd4, 0x26, 0xcc, 0x54, 0x79, 0x15, 0x26, 0x81,
	0x0a, 0x62, 0x3e, 0x53, 0x5f, 0xf1, 0x84, 0x93, 0xd4, 0xdf, 0xa5, 0x23, 0xf5, 0x05, 0x2c, 0x69,
	0x90, 0x48, 0xf3, 0x4a, 0xd4, 0xd8, 0x3f, 0xe6, 0x29, 0x64, 0x2c, 0xe9, 0xb4, 0xc5, 0x63, 0x58,
	0x60, 0x8b, 0x32, 0x4c, 0x1d, 0xfc, 0x4f, 0x78, 0x5b, 0x92, 0xea, 0x20, 0x4c, 0x0d, 0xfa, 0x11,
	0xcc, 0xdb, 0xb3, 0xa7, 0x4c, 0xda, 0xf3, 0x53, 0xc6, 0x1a, 0x85, 0xaf, 0x33, 0x9f, 0xbb, 0x30,
	0xc3, 0x07, 0xce, 0x02, 0xbf, 0x66, 0x27, 0x40, 0x52, 0x83, 0x5a, 0x81, 0x49, 0x15, 0x9b, 0xc3,
	0xff, 0x0d, 0x3b, 0x30, 0x15, 0xeb, 0x53, 0xff, 0x12, 0x6e, 0xa5, 0x83, 0xa4, 0x92, 0x74, 0x86,
	0xb5, 0xef, 0x0b, 0x44, 0x56, 0xa9, 0x33, 0xdd, 0xe2, 0x9f, 0x90, 0xc1, 0x4d, 0x0b, 0xd2, 0x37,
	0xde, 0x1e, 0x42, 0xb8, 0xfd, 0xd7, 0x70, 0xfb, 0xa2, 0x26, 0x74, 0xa7, 0x7f, 0xaa, 0x23, 0x82,
	0x51, 0x6d, 0xd4, 0x7e, 0xbc, 0x6e, 0x84, 0x3d, 0x20, 0xf7, 0xff, 0x92, 0x17, 0xd6, 0x2a, 0xe9,
	0x22, 0xe1, 0x8e, 0x9f, 0xc2, 0xf5, 0x61, 0x1b, 0xdd, 0xe1, 0x2b, 0x76, 0x58, 0x4d, 0x23, 0xdd,
	0xd3, 0x6f, 0x5a, 0xd0, 0x36, 0xa5, 0x00, 0x25, 0xa3, 0xce, 0x6b, 0x8a, 0xc9, 0x7f, 0x18, 0x5f,
	0x2d, 0xc2, 0x07, 0xfd, 0xcb, 0x97, 0x91, 0xf7, 0x4f, 0x2d, 0x98, 0xb1, 0x4a, 0x3a, 0x33, 0x9d,
	0xdd, 0xb1, 0x13, 0x9c, 0xd6, 0xbf, 0xd8, 0x35, 0x34, 0x38, 0xf2, 0x11, 0xea, 0xec, 0xfd, 0xc1,
	0x70, 0xfc, 0x9e, 0x08, 0x79, 0xff, 0xd8, 0x02, 0x23, 0xe1, 0xbb, 0xa3, 0xf3, 0x66, 0xec, 0x14,
	0xa7, 0xf4, 0x2f, 0xba, 0xb2, 0x30, 0x42, 0xd5, 0x6e, 0xe9, 0x24, 0x94, 0x95, 0x2d, 0x3a, 0x89,
	0x0c, 0xf3, 0x8f, 0xb8, 0xf3, 0x96, 0x23, 0x54, 0x86, 0xfc, 0x32, 0x94, 0xd5, 0x3b, 0x06, 0xec,
	0xb1, 0x1e, 0x3d, 0x28, 0xde, 0x0d, 0x61, 0xf7, 0xe3, 0xb9, 0x24, 0xec, 0x5b, 0xde, 0xfd, 0x4a,
	0x46, 0x2f, 0x51, 0xdb, 0x48, 0xc3, 0xf4, 0x75, 0x86, 0x91, 0xbb, 0x12, 0x7f, 0x31, 0x10, 0x65,
	0x55, 0x76, 0xde, 0xb1, 0x37, 0x64, 0xbc, 0xaf, 0xa5, 0xe8, 0x88, 0x34, 0xb2, 0xb4, 0xf9, 0x55,
	0xe7, 0x67, 0xec, 0x88, 0x18, 0x5a, 0x9a, 0xbc, 0xca, 0xdb, 0x00, 0xbc, 0xb9, 0x82, 0x32, 0xc9,
	0x4f, 0xc8, 0xa0, 0xf3, 0x73, 0x7b, 0x53, 0x1d, 0x24, 0xf9, 0x09, 0x62, 0xbd, 0xdf, 0xb6, 0xa0,
	0xed, 0x54, 0xd7, 0x3a, 0xef, 0x69, 0x3d, 0xfe, 0xea, 0x47, 0x5a, 0x8f, 0x91, 0x75, 0x3d, 0x1f,
	0x94, 0x8c, 0xf4, 0xbc, 0x6e, 0xfc, 0x7a, 0x66, 0x74, 0x45, 0xe7, 0x58, 0xf5, 0xf0, 0xd6, 0x1c,
	0xe5, 0x1b, 0xb9, 0xc8, 0x39, 0x9f, 0x9d, 0x73, 0x89, 0x77, 0xa0, 0xed, 0xfa, 0x30, 0x2e, 0xee,
	0x40, 0x51, 0xbb, 0x2e, 0x9b, 0x2e, 0x9a, 0xb0, 0x59, 0x57, 0x76, 0xa6, 0x1b, 0xf1, 0x32, 0xb6,
	0xe3, 0x84, 0xef, 0xba, 0xa0, 0x03, 0x75, 0xd0, 0x8e, 0xcb, 0xe9, 0x44, 0x5f, 0x6e, 0x8d, 0x6c,
	0xc6, 0x46, 0x5e, 0x0d, 0x4a, 0xc6, 0x43, 0x5e, 0xad, 0x29, 0x69, 0xbf, 0xf8, 0x05, 0x2c, 0x36,
	0x28, 0x19, 0x24, 0x17, 0xc9, 0x3c, 0x97, 0x98, 0xb6, 0xc0, 0x68, 0xcb, 0xb2, 0x33, 0xf0, 0x09,
	0x1d, 0x6d, 0x19, 0x8e, 0x1a, 0xbb, 0x09, 0xd3, 0x85, 0x12, 0x3d, 0x79, 0x6a, 0x70, 0x93, 0x3a,
	0x5c, 0x25, 0xa1, 0x06, 0xb9, 0xa3, 0x31, 0x38, 0x68, 0x8e, 0x46, 0x23, 0xb7, 0x61, 0xc1, 0xe6,
	0xfc, 0x64, 0xc2, 0x43, 0xe7, 0xb4, 0x7f, 0xde, 0xa8, 0xb0, 0x7f, 0x1e, 0xfd, 0x63, 0xf0, 0x8e,
	0x64, 0x59, 0xe5, 0xea, 0xcc, 0x85, 0xeb, 0x8c, 0x5f, 0x6b, 0x6a, 0xf4, 0x23, 0x98, 0x8f, 0xc3,
	0xb4, 0x68, 0xb6, 0xcd, 0x59, 0xff, 0x2c, 0x2b, 0x6a, 0x2c, 0x5e, 0x5c, 0xe6, 0xbe, 0xd6, 0x23,
	0x64, 0xfc, 0x8c, 0xbe, 0xb8, 0xb4, 0x72, 0x9f, 0x74, 0x96, 0x0d, 0xdf, 0xdb, 0x0d, 0x03, 0x2e,
	0x04, 0xcc, 0x91, 0xc6, 0x45, 0x6f, 0xc3, 0x42, 0xdd, 0x43, 0xcd, 0x87, 0x2b, 0x02, 0x36, 0x58,
	0xa8, 0x19, 0x6d, 0xc1, 0x9c, 0x6e, 0xbd, 0x06, 0xeb, 0xb2, 0x00, 0xb7, 0x6d, 0x91, 0x54, 0xfe,
	0x71, 0x5b, 0xa6, 0x89, 0x67, 0x0b, 0xcf, 0x94, 0x7f, 0xea, 0xe6, 0x71, 0xfe, 0xd9, 0xf0, 0x09,
	0x2c, 0x39, 0x5d, 0x38, 0x56, 0x9c, 0xfb, 0x7b, 0xb6, 0x9f, 0xda, 0xe4, 0x0d, 0xac, 0x85, 0xd9,
	0x59, 0x20, 0xf0, 0x88, 0x65, 0x42, 0xf6, 0x8f, 0xa2, 0x5c, 0x05, 0xa9, 0x2c, 0x4b, 0x99, 0xf5,
	0x83, 0x22, 0x4f, 0x64, 0xf7, 0x8c, 0x0a, 0x00, 0x13, 0xfe, 0x6a, 0x98, 0x9d, 0xed, 0x45, 0xfd,
	0xe2, 0x83, 0x46, 0x7d, 0xc7, 0xa0, 0x7d, 0xc2, 0x78, 0x9f, 0x81, 0x17, 0x56, 0x95, 0x92, 0x91,
	0x5b, 0x4b, 0xa2, 0x4a, 0xc0, 0x84, 0x3f, 0x6f, 0x35, 0xa6, 0x70, 0x84, 0xcb, 0xc3, 0x65, 0x27,
	0x5d, 0xd4, 0xb5, 0x16, 0xd7, 0xc9, 0x62, 0x81, 0x94, 0x87, 0xa4, 0xb3, 0x36, 0xf7, 0x61, 0xb6,
	0x54, 0x69, 0x69, 0x56, 0xa7, 0x94, 0x31, 0xe5, 0xfc, 0x13, 0xfe, 0x34, 0x8a, 0x79, 0x69, 0x0e,
	0x24, 0xb9, 0xe0, 0x30, 0xd6, 0x73, 0xd0, 0x74, 0xdf, 0x94, 0xf3, 0x4f, 0xf8, 0x8b, 0x61, 0x4c,
	0xb3, 0xd0, 0x70, 0xdd, 0x38, 0xeb, 0xe7, 0xcc, 0x62, 0x59, 0x92, 0xdd, 0x0d, 0xb2, 0x5b, 0x6a,
	0xda, 0xed, 0xb2, 0x12, 0xcf, 0x50, 0x24, 0xca, 0x2a, 0x10, 0xa7, 0x95, 0x50, 0x59, 0x98, 0x50,
	0xea, 0x3f, 0xe1, 0x4f, 0xa1, 0x70, 0x4f, 0xcb, 0x70, 0xc0, 0x0d, 0x90, 0x6d, 0x7a, 0x85, 0x07,
	0xec, 0x82, 0x4d, 0xc3, 0xeb, 0xc0, 0xc5, 0xac, 0x40, 0x89, 0x2a, 0x94, 0x19, 0x25, 0xfb, 0x13,
	0x7e, 0x9b, 0x64, 0x3e, 0x89, 0xbc, 0x4f, 0x4d, 0x66, 0xc5, 0x90, 0xe3, 0x30, 0x19, 0x08, 0x9d,
	0xe3, 0xcf, 0x39, 0x38, 0x92, 0xe3, 0x75, 0x50, 0x45, 0x49, 0x10, 0xc9, 0xaa, 0x17, 0x94, 0xf2,
	0x07, 0x61, 0x32, 0xfc, 0x2a, 0x4a, 0x5e, 0xc9, 0xaa, 0x77, 0x20, 0x7f, 0x10, 0xde, 0x67, 0xb0,
	0x80, 0x98, 0xee, 0xd1, 0x20, 0xfb, 0xe8, 0x20, 0xef, 0xe8, 0x22, 0x5c, 0x94, 0xbc, 0x46, 0x8d,
	0x85, 0x63, 0x1e, 0x52, 0x06, 0xbc, 0x94, 0x4a, 0xf4, 0x12, 0xd1, 0xad, 0x72, 0x45, 0x49, 0xfe,
	0x84, 0x3f, 0x27, 0x4b, 0x1f, 0x15, 0xbe, 0x91, 0x7b, 0x1e, 0x5c, 0x09, 0xcb, 0x48, 0x51, 0x4e,
	0x3f, 0xe1, 0xd3, 0xdf, 0x74, 0x47, 0x11, 0xc7, 0x40, 0x55, 0x01, 0x5e, 0x40, 0x1b, 0x3c, 0x4a,
	0x16, 0xfa, 0xd5, 0xcb, 0x24, 0xc1, 0x15, 0x95, 0xbc, 0x41, 0x4f, 0xab, 0xa3, 0xbc, 0x08, 0x4a,
	0x91, 0xf4, 0xf4, 0xce, 0xe6, 0xcc, 0x7e, 0x51, 0xd2, 0xc6, 0x24, 0xed, 0x81, 0x48, 0x7a, 0xbc,
	0xb7, 0xef, 0xc3, 0xec, 0xa0, 0x14, 0x81, 0xec, 0x17, 0xa5, 0x89, 0x36, 0xee, 0xf2, 0x86, 0x19,
	0x94, 0xe2, 0x1d, 0x4a, 0xf9, 0xca, 0x7f, 0x06, 0xcb, 0x51, 0x5a, 0x8c, 0x0c, 0xb3, 0x39, 0xc9,
	0x5f, 0x8c, 0xd2, 0xe2, 0x7c, 0x80, 0x7d, 0x1f, 0x66, 0xd1, 0xcc, 0xbd, 0x51, 0x38, 0xd9, 0x9f,
	0x8e, 0xd2, 0xc2, 0x89, 0x87, 0x1f, 0xc1, 0x3c, 0xe1, 0x1a, 0x7e, 0x56, 0x67, 0xfb, 0x88, 0x74,
	0x5d, 0xad, 0xd3, 0xa6, 0x41, 0x6e, 0x35, 0xda, 0x64, 0xdc, 0xc6, 0xff, 0x5c, 0x81, 0x0e, 0xdd,
	0x8a, 0x42, 0xd5, 0xb7, 0x2a, 0xbf, 0x73, 0x04, 0xb8, 0x21, 0x8f, 0x42, 0xa4, 0x94, 0x1d, 0x53,
	0xc1, 0x97, 0x2e, 0xc4, 0x09, 0x7f, 0xea, 0x28, 0x2c, 0x5f, 0x1b, 0x99, 0xf7, 0x10, 0xe6, 0x7b,
	0x52, 0x95, 0x55, 0x90, 0x45, 0x18, 0x2e, 0xd6, 0x8f, 0x55, 0xe8, 0x8f, 0x50, 0xf1, 0x21, 0x52,
	0xdf, 0x53, 0xd1, 0x1f, 0x49, 0xa5, 0x79, 0x2c, 0x70, 0x62, 0xf4, 0xe3, 0x67, 0xe7, 0xf2, 0xda,
	0x65, 0xfd, 0x2c, 0x24, 0xf6, 0x50, 0x4a, 0xb8, 0x47, 0xc0, 0x69, 0x56, 0x50, 0xc8, 0xd4, 0xc6,
	0x13, 0x57, 0x9c, 0x7c, 0x6a, 0x5f, 0xa6, 0xfa, 0xec, 0xa0, 0xab, 0x3a, 0x87, 0x0d, 0xc2, 0x38,
	0xee, 0x7c, 0x42, 0x2d, 0x7b, 0x43, 0xf8, 0x97, 0x71, 0x3c, 0xda, 0x24, 0x16, 0x49, 0xe7, 0xea,
	0x48, 0x93, 0x5d, 0x91, 0xa0, 0x8f, 0xae, 0x4d, 0xba, 0x61, 0x92, 0x44, 0x14, 0x06, 0x5d, 0x73,
	0x72, 0xc2, 0x7d, 0x99, 0xbe, 0x36, 0x0a, 0x4c, 0x64, 0xcf, 0xe3, 0x89, 0xd6, 0x04, 0xf5, 0xb1,
	0x30, 0x6c, 0x82, 0xbc, 0x46, 0x1b, 0x21, 0xb1, 0xc9, 0xd1, 0x46, 0xc8, 0xec, 0x1b, 0x58, 0x1d,
	0xdd, 0x53, 0x40, 0x57, 0x74, 0x07, 0xc8, 0xb4, 0x33, 0xa2, 0xbf, 0xf7, 0xa8, 0xbf, 0xc0, 0x3e,
	0x16, 0x89, 0xb6, 0x6f, 0x8f, 0xb6, 0xdf, 0x15, 0x09, 0xdb, 0xbf, 0x80, 0xce, 0x08, 0xfb, 0x28,
	0xac, 0xba, 0x47, 0xfa, 0xfe, 0x5d, 0x1a, 0xb6, 0x7d, 0x85, 0xca, 0x8d, 0xbf, 0x5f, 0x1d, 0xbd,
	0xf3, 0x8e, 0x55, 0x2f, 0xf0, 0x9e, 0xbb, 0xf5, 0x03, 0xa1, 0xc2, 0x4a, 0xe6, 0x19, 0xb5, 0x6e,
	0x5e, 0x9e, 0x97, 0x6c, 0x25, 0x40, 0x6b, 0xb1, 0xf1, 0xd2, 0x7b, 0x0b, 0x6b, 0xe7, 0xed, 0xf8,
	0xc0, 0x88, 0x66, 0xb4, 0x76, 0x6b, 0xb8, 0x81, 0x7d, 0x8d, 0xe2, 0xb3, 0xf6, 0x1e, 0x36, 0xcf,
	0x37, 0x14, 0x89, 0xe1, 0xb6, 0x38, 0xaa, 0xbb, 0x33, 0xdc, 0xd6, 0x2b, 0xd1, 0x6c, 0x6d, 0x24,
	0xad, 0x54, 0x94, 0x65, 0xd8, 0xb7, 0x4d, 0x5d, 0x19, 0x4d, 0xeb, 0x3b, 0x8d, 0xb2, 0x29, 0xf1,
	0xf9, 0x86, 0xe8, 0x20, 0x71, 0x54, 0xb8, 0x38, 0x6c, 0x4e, 0xe7, 0x49, 0x27, 0x05, 0xda, 0x92,
	0xa7, 0xf1, 0xaa, 0x4d, 0x0a, 0x38, 0xa3, 0xe2, 0xf9, 0xd3, 0x95, 0x2b, 0xf7, 0x2d, 0xfc, 0x9a,
	0xad, 0x5c, 0x7d, 0x5f, 0xbf, 0x4e, 0x7f, 0x0e, 0x8b, 0x76, 0x26, 0x4a, 0x91, 0x55, 0x41, 0x95,
	0x53, 0xb2, 0x3d, 0xa1, 0xab, 0x82, 0x5a, 0x77, 0x20, 0xb2, 0xea, 0x30, 0xc7, 0xbc, 0xf7, 0x4b,
	0xb8, 0x6e, 0x0d, 0x94, 0x70, 0x4d, 0x38, 0x50, 0x5c, 0x30, 0x5a, 0x9f, 0x94, 0x6c, 0xf4, 0x1c,
	0x3a, 0xd6, 0x28, 0xcb, 0xab, 0x46, 0x4f, 0xa0, 0x6b, 0x96, 0x5a, 0xff, 0x21, 0xaf, 0xea, 0xce,
	0xbe, 0x82, 0x1b, 0x4e, 0x67, 0x69, 0x8e, 0x51, 0x64, 0x4f, 0xe5, 0x29, 0x19, 0xea, 0xa7, 0xa3,
	0xba, 0x3f, 0xd2, 0xbf, 0x51, 0x79, 0xaa, 0x79, 0xda, 0x20, 0xa3, 0x39, 0x34, 0xde, 0xcc, 0x0b,
	0xb5, 0xb6, 0xee, 0xef, 0x6b, 0x58, 0x71, 0x8c, 0xce, 0xf5, 0xc8, 0x91, 0x65, 0xa7, 0x86, 0x0c,
	0xf5, 0x39, 0x6c, 0xde, 0xcd, 0x8f, 0x85, 0xaa, 0xcd, 0x67, 0xce, 0x9b, 0x13, 0xc2, 0x98, 0xaf,
	0xc3, 0x54, 0xd9, 0x0d, 0xb3, 0x4c, 0xa8, 0x40, 0x0d, 0xb2, 0x52, 0xc7, 0x99, 0x6d, 0x2d, 0xf3,
	0x07, 0x59, 0xe9, 0x42, 0x68, 0x4d, 0xe7, 0x1a, 0x10, 0x5a, 0xd1, 0x87, 0x9c, 0x0e, 0xe2, 0x9d,
	0x8d, 0x87, 0x9f, 0x37, 0xc9, 0xbc, 0xdd, 0x24, 0x87, 0x11, 0xfa, 0x41, 0xde, 0x24, 0x4f, 0x60,
	0xc9, 0x40, 0x29, 0x22, 0x90, 0xb1, 0x86, 0x73, 0x4c, 0xe9, 0x31, 0xfc, 0x1d, 0xab, 0xd8, 0xe4,
	0x53, 0xf0, 0x8c, 0x49, 0xf9, 0x51, 0x16, 0x1a, 0xbf, 0x60, 0xb3, 0xcd, 0xc3, 0x28, 0x39, 0xf8,
	0x28, 0x0b, 0x06, 0x7f, 0x06, 0x0b, 0x06, 0xcc, 0xf9, 0x07, 0x5f, 0xb9, 0xfa, 0xf9, 0x88, 0xd1,
	0xe4, 0x7c, 0xf8, 0xd6, 0xd5, 0xc9, 0x29, 0xc2, 0x95, 0xa8, 0xec, 0xb3, 0x51, 0x9b, 0x81, 0x3e,
	0x8a, 0xc8, 0xe5, 0x63, 0x56, 0x48, 0x95, 0x48, 0xbd, 0xbb, 0x71, 0x71, 0xf5, 0x43, 0x91, 0x87,
	0xca, 0xf7, 0x61, 0x59, 0xf1, 0x16, 0xc7, 0x95, 0xe5, 0xef, 0x74, 0xd0, 0x06, 0x1b, 0xa7, 0x09,
	0xc7, 0x1b, 0x70, 0x79, 0x5c, 0xdf, 0xe9, 0xc8, 0x54, 0xf8, 0x32, 0x7a, 0xad, 0x79, 0x78, 0xbf,
	0x6e, 0xc1, 0xb4, 0x65, 0x87, 0x41, 0x2f, 0x85, 0xa4, 0xe3, 0xf8, 0x3e, 0x44, 0x33, 0xc3, 0xe8,
	0x1a, 0x37, 0x11, 0x46, 0x71, 0xb8, 0x1a, 0x54, 0xb1, 0xe8, 0x0d, 0x92, 0x44, 0xc7, 0xbc, 0x33,
	0xb2, 0xf4, 0x65, 0x44, 0xb5, 0x8a, 0x37, 0x83, 0x24, 0xc1, 0x83, 0xd6, 0xc4, 0xd9, 0xf2, 0x06,
	0x3f, 0x78, 0xe1, 0x16, 0xb0, 0x68, 0x53, 0xdd, 0xf8, 0x06, 0x56, 0x39, 0xd6, 0xb8, 0xc0, 0x94,
	0x5f, 0xbd, 0x3a, 0x84, 0xf1, 0x47, 0xd8, 0xff, 0x14, 0x56, 0x6c, 0x09, 0x7f, 0x84, 0x39, 0x3f,
	0x82, 0x2d, 0xeb, 0x6a, 0xfe, 0x39, 0xeb, 0x7f, 0x6f, 0xc1, 0xed, 0x91, 0xdd, 0xd3, 0x64, 0x54,
	0x61, 0x5a, 0x50, 0xc4, 0x3c, 0x86, 0x45, 0xb8, 0x79, 0x6e, 0xc4, 0x87, 0x86, 0x92, 0xf7, 0x6f,
	0x2d, 0xb8, 0x35, 0x6a, 0xd0, 0x35, 0xe9, 0xdb, 0xe3, 0x21, 0x7d, 0x63, 0x78, 0x9e, 0x6b, 0xce,
	0x4f, 0x61, 0x79, 0x14, 0xe5, 0xb0, 0x6f, 0x12, 0x88, 0x85, 0x61, 0xdb, 0x97, 0x7d, 0xe1, 0xbd,
	0x85, 0xf5, 0xe1, 0xe5, 0xc1, 0xf0, 0xb5, 0x2c, 0xc2, 0x6e, 0x5d, 0x3c, 0xe3, 0x77, 0xc3, 0xd5,
	0xc6, 0x84, 0x7d, 0x1b, 0x96, 0x07, 0x08, 0x32, 0x0b, 0xbd, 0x07, 0x6b, 0x43, 0xdd, 0x9f, 0x6f,
	0x87, 0x9f, 0x13, 0x57, 0x5c, 0x1e, 0xc3, 0xcd, 0xfc, 0xbe, 0x05, 0x9b, 0x17, 0x13, 0xaa, 0xe7,
	0x7f, 0x63, 0x3c, 0xf3, 0x7f, 0x7b, 0xe4, 0x1c, 0xd4, 0x8b, 0xf0, 0x1f, 0x2d, 0xd8, 0xb8, 0x70,
	0x1a, 0x6a, 0xf6, 0x9b, 0xe3, 0x61, 0x7f, 0x6b, 0xd4, 0xcc, 0xd7, 0xe4, 0xbf, 0x86, 0xd5, 0x0b,
	0xb9, 0xe3, 0x36, 0xba, 0x7b, 0xfe, 0xa8, 0x9b, 0x46, 0x70, 0x2b, 0x59, 0xe7, 0xdf, 0xc8, 0x9b,
	0xef, 0x8d, 0xd1, 0xf9, 0xbf, 0x77, 0x92, 0xf5, 0x3b, 0x5c, 0x69, 0x35, 0x2f, 0x6a, 0xf7, 0xc9,
	0xc1, 0x42, 0xfd, 0x6c, 0xe8, 0xad, 0xc0, 0x24, 0x86, 0xd1, 0xbd, 0x24, 0xec, 0x97, 0x3a, 0x43,
	0x9c, 0x38, 0x56, 0xbd, 0x37, 0xf8, 0x9b, 0x8a, 0x8e, 0x34, 0x2a, 0xbe, 0x84, 0xb7, 0x74, 0xd1,
	0x11, 0x45, 0x7c, 0xff, 0xde, 0x02, 0xd0, 0x2f, 0xa7, 0x18, 0x2b, 0xf0, 0x43, 0xef, 0x24, 0xbf,
	0x9a, 0x62, 0xa4, 0x40, 0x4f, 0x8c, 0x3c, 0x2b, 0x27, 0x4a, 0x62, 0x40, 0x49, 0xf1, 0xeb, 0x23,
	0xf3, 0xc4, 0x48, 0x3c, 0x49, 0x63, 0xeb, 0x5b, 0x06, 0x9f, 0x88, 0xb0, 0x34, 0xf8, 0x4f, 0x1b,
	0x78, 0xd2, 0xd8, 0x34, 0x97, 0xf1, 0x61, 0x1c, 0xdb, 0x0f, 0x03, 0xdd, 0x47, 0xde, 0x97, 0x28,
	0x67, 0xec, 0x3a, 0x4c, 0xe9, 0x07, 0x49, 0x1e, 0x0c, 0x3f, 0xf1, 0xb6, 0x59, 0xc6, 0xa3, 0xb9,
	0x03, 0x6d, 0xf3, 0x66, 0x89, 0xc3, 0xd9, 0xe6, 0xe1, 0xea, 0xf7, 0x4a, 0x1c, 0xcf, 0x2b, 0xb8,
	0xad, 0x01, 0xa5, 0xea, 0x62, 0xf2, 0x6e, 0x96, 0xc2, 0x76, 0xce, 0xaf, 0xbc, 0x37, 0x19, 0x75,
	0xa0, 0xba, 0x1f, 0x44, 0xb5, 0x6f, 0x20, 0xcc, 0x63, 0x17, 0xee, 0xe8, 0x36, 0x62, 0x81, 0xa9,
	0xf0, 0x88, 0x46, 0xf8, 0x05, 0x78, 0x85, 0x61, 0xbb, 0xa2, 0xac, 0xce, 0xb7, 0xf2, 0x0c, 0x96,
	0x75, 0x2b, 0x3c, 0x74, 0xa7, 0xc0, 0xf7, 0x44, 0x97, 0x27, 0x48, 0x4d, 0x13, 0x50, 0x97, 0xf9,
	0xbe, 0x82, 0x1b, 0xda, 0xcc, 0x84, 0x9e, 0x8e, 0xe1, 0x0e, 0x87, 0xbb, 0x0c, 0xd0, 0x81, 0x67,
	0x6d, 0xfa, 0x13, 0xb8, 0x69, 0x4d, 0x8b, 0x24, 0x1c, 0x2a, 0x41, 0xf2, 0xab, 0xf1, 0xb2, 0xb1,
	0x65, 0x40, 0xa3, 0xe8, 0x6a, 0x92, 0x11, 0x95, 0x0f, 0x0a, 0x6d, 0xa4, 0xdf, 0x8e, 0x75, 0x22,
	0x82, 0x0a, 0x5b, 0x12, 0x2f, 0x07, 0x91, 0x8b, 0xe4, 0xa7, 0xe3, 0x69, 0x23, 0x25, 0xd8, 0xc6,
	0xef, 0x2f, 0xc1, 0xe2, 0xa8, 0xb4, 0x10, 0x23, 0x9e, 0xab, 0xfd, 0x24, 0x8f, 0xc2, 0x44, 0x7f,
	0x9e, 0xfb, 0x97, 0x3f, 0xd2, 0x39, 0x1c, 0x55, 0x1a, 0xf1, 0x35, 0x15, 0xef, 0x6f, 0x5b, 0x70,
	0xf9, 0x58, 0xf5, 0xf4, 0xd7, 0xb9, 0xe3, 0xa2, 0x84, 0x87, 0xdd, 0x47, 0x1e, 0x1b, 0xff, 0x7d,
	0x65, 0xf4, 0x2b, 0x47, 0x14, 0xf6, 0xdd, 0x8f, 0xeb, 0x77, 0xdc, 0x8f, 0xeb, 0xbd, 0x87, 0x30,
	0x57, 0xe3, 0x99, 0x8d, 0x5e, 0xfb, 0x59, 0x2d, 0x7f, 0xa7, 0xc5, 0x8d, 0x6f, 0xf7, 0x9f, 0x36,
	0xbf, 0xdd, 0xbf, 0x05, 0x80, 0x2a, 0xca, 0xf6, 0xf9, 0xbb, 0x80, 0x09, 0x1f, 0xdd, 0xd0, 0x21,
	0x09, 0xbc, 0x5f, 0xd5, 0xeb, 0xf7, 0xfc, 0x47, 0x7d, 0xaa, 0x1b, 0xf1, 0x09, 0xaf, 0x5d, 0xbe,
	0xbf, 0xd1, 0xcb, 0xf7, 0x62, 0xac, 0x8c, 0x8e, 0x55, 0x8f, 0x56, 0xcf, 0xfb, 0x97, 0x16, 0x5c,
	0xc7, 0xb5, 0xcd, 0x55, 0x4a, 0x6d, 0xda, 0xef, 0xd7, 0xf9, 0x93, 0x86, 0xf6, 0xce, 0xc9, 0x98,
	0x36, 0x98, 0xbf, 0xe4, 0xd0, 0x3a, 0xb0, 0xac, 0xa2, 0xab, 0xf4, 0x7f, 0x9e, 0x7c, 0xf9, 0xbf,
	0x01, 0x00, 0x00, 0xff, 0xff, 0x2f, 0x45, 0x9e, 0xe1, 0x9a, 0x32, 0x00, 0x00,
}
