/*
Copyright 2019 Cisco Systems

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: bgp_path_bag.proto

package cisco_ios_xr_ipv4_bgp_oper_bgp_instances_instance_instance_standby_vrfs_vrf_afs_af_path_labeled_table_path

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type BgpPathBag_KEYS struct {
	InstanceName         string   `protobuf:"bytes,1,opt,name=instance_name,json=instanceName,proto3" json:"instance_name,omitempty"`
	VrfName              string   `protobuf:"bytes,2,opt,name=vrf_name,json=vrfName,proto3" json:"vrf_name,omitempty"`
	AfName               string   `protobuf:"bytes,3,opt,name=af_name,json=afName,proto3" json:"af_name,omitempty"`
	Rd                   string   `protobuf:"bytes,4,opt,name=rd,proto3" json:"rd,omitempty"`
	Network              string   `protobuf:"bytes,5,opt,name=network,proto3" json:"network,omitempty"`
	PrefixLength         uint32   `protobuf:"varint,6,opt,name=prefix_length,json=prefixLength,proto3" json:"prefix_length,omitempty"`
	NeighborAddress      string   `protobuf:"bytes,7,opt,name=neighbor_address,json=neighborAddress,proto3" json:"neighbor_address,omitempty"`
	RouteType            string   `protobuf:"bytes,8,opt,name=route_type,json=routeType,proto3" json:"route_type,omitempty"`
	SourceRd             string   `protobuf:"bytes,9,opt,name=source_rd,json=sourceRd,proto3" json:"source_rd,omitempty"`
	OrigSourceRd         string   `protobuf:"bytes,10,opt,name=orig_source_rd,json=origSourceRd,proto3" json:"orig_source_rd,omitempty"`
	PathId               uint32   `protobuf:"varint,11,opt,name=path_id,json=pathId,proto3" json:"path_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BgpPathBag_KEYS) Reset()         { *m = BgpPathBag_KEYS{} }
func (m *BgpPathBag_KEYS) String() string { return proto.CompactTextString(m) }
func (*BgpPathBag_KEYS) ProtoMessage()    {}
func (*BgpPathBag_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb29889f75ad586c, []int{0}
}

func (m *BgpPathBag_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BgpPathBag_KEYS.Unmarshal(m, b)
}
func (m *BgpPathBag_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BgpPathBag_KEYS.Marshal(b, m, deterministic)
}
func (m *BgpPathBag_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpPathBag_KEYS.Merge(m, src)
}
func (m *BgpPathBag_KEYS) XXX_Size() int {
	return xxx_messageInfo_BgpPathBag_KEYS.Size(m)
}
func (m *BgpPathBag_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpPathBag_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_BgpPathBag_KEYS proto.InternalMessageInfo

func (m *BgpPathBag_KEYS) GetInstanceName() string {
	if m != nil {
		return m.InstanceName
	}
	return ""
}

func (m *BgpPathBag_KEYS) GetVrfName() string {
	if m != nil {
		return m.VrfName
	}
	return ""
}

func (m *BgpPathBag_KEYS) GetAfName() string {
	if m != nil {
		return m.AfName
	}
	return ""
}

func (m *BgpPathBag_KEYS) GetRd() string {
	if m != nil {
		return m.Rd
	}
	return ""
}

func (m *BgpPathBag_KEYS) GetNetwork() string {
	if m != nil {
		return m.Network
	}
	return ""
}

func (m *BgpPathBag_KEYS) GetPrefixLength() uint32 {
	if m != nil {
		return m.PrefixLength
	}
	return 0
}

func (m *BgpPathBag_KEYS) GetNeighborAddress() string {
	if m != nil {
		return m.NeighborAddress
	}
	return ""
}

func (m *BgpPathBag_KEYS) GetRouteType() string {
	if m != nil {
		return m.RouteType
	}
	return ""
}

func (m *BgpPathBag_KEYS) GetSourceRd() string {
	if m != nil {
		return m.SourceRd
	}
	return ""
}

func (m *BgpPathBag_KEYS) GetOrigSourceRd() string {
	if m != nil {
		return m.OrigSourceRd
	}
	return ""
}

func (m *BgpPathBag_KEYS) GetPathId() uint32 {
	if m != nil {
		return m.PathId
	}
	return 0
}

type BgpL2VpnAddrT struct {
	L2VpnAddress         []uint32 `protobuf:"varint,1,rep,packed,name=l2vpn_address,json=l2vpnAddress,proto3" json:"l2vpn_address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BgpL2VpnAddrT) Reset()         { *m = BgpL2VpnAddrT{} }
func (m *BgpL2VpnAddrT) String() string { return proto.CompactTextString(m) }
func (*BgpL2VpnAddrT) ProtoMessage()    {}
func (*BgpL2VpnAddrT) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb29889f75ad586c, []int{1}
}

func (m *BgpL2VpnAddrT) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BgpL2VpnAddrT.Unmarshal(m, b)
}
func (m *BgpL2VpnAddrT) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BgpL2VpnAddrT.Marshal(b, m, deterministic)
}
func (m *BgpL2VpnAddrT) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpL2VpnAddrT.Merge(m, src)
}
func (m *BgpL2VpnAddrT) XXX_Size() int {
	return xxx_messageInfo_BgpL2VpnAddrT.Size(m)
}
func (m *BgpL2VpnAddrT) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpL2VpnAddrT.DiscardUnknown(m)
}

var xxx_messageInfo_BgpL2VpnAddrT proto.InternalMessageInfo

func (m *BgpL2VpnAddrT) GetL2VpnAddress() []uint32 {
	if m != nil {
		return m.L2VpnAddress
	}
	return nil
}

type BgpL2VpnMspwAddrT struct {
	L2VpnAddress         []uint32 `protobuf:"varint,1,rep,packed,name=l2vpn_address,json=l2vpnAddress,proto3" json:"l2vpn_address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BgpL2VpnMspwAddrT) Reset()         { *m = BgpL2VpnMspwAddrT{} }
func (m *BgpL2VpnMspwAddrT) String() string { return proto.CompactTextString(m) }
func (*BgpL2VpnMspwAddrT) ProtoMessage()    {}
func (*BgpL2VpnMspwAddrT) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb29889f75ad586c, []int{2}
}

func (m *BgpL2VpnMspwAddrT) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BgpL2VpnMspwAddrT.Unmarshal(m, b)
}
func (m *BgpL2VpnMspwAddrT) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BgpL2VpnMspwAddrT.Marshal(b, m, deterministic)
}
func (m *BgpL2VpnMspwAddrT) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpL2VpnMspwAddrT.Merge(m, src)
}
func (m *BgpL2VpnMspwAddrT) XXX_Size() int {
	return xxx_messageInfo_BgpL2VpnMspwAddrT.Size(m)
}
func (m *BgpL2VpnMspwAddrT) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpL2VpnMspwAddrT.DiscardUnknown(m)
}

var xxx_messageInfo_BgpL2VpnMspwAddrT proto.InternalMessageInfo

func (m *BgpL2VpnMspwAddrT) GetL2VpnAddress() []uint32 {
	if m != nil {
		return m.L2VpnAddress
	}
	return nil
}

type BgpIpv4SrpolicyAddrT struct {
	Ipv4SrpolicyAddress  []uint32 `protobuf:"varint,1,rep,packed,name=ipv4_srpolicy_address,json=ipv4SrpolicyAddress,proto3" json:"ipv4_srpolicy_address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BgpIpv4SrpolicyAddrT) Reset()         { *m = BgpIpv4SrpolicyAddrT{} }
func (m *BgpIpv4SrpolicyAddrT) String() string { return proto.CompactTextString(m) }
func (*BgpIpv4SrpolicyAddrT) ProtoMessage()    {}
func (*BgpIpv4SrpolicyAddrT) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb29889f75ad586c, []int{3}
}

func (m *BgpIpv4SrpolicyAddrT) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BgpIpv4SrpolicyAddrT.Unmarshal(m, b)
}
func (m *BgpIpv4SrpolicyAddrT) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BgpIpv4SrpolicyAddrT.Marshal(b, m, deterministic)
}
func (m *BgpIpv4SrpolicyAddrT) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpIpv4SrpolicyAddrT.Merge(m, src)
}
func (m *BgpIpv4SrpolicyAddrT) XXX_Size() int {
	return xxx_messageInfo_BgpIpv4SrpolicyAddrT.Size(m)
}
func (m *BgpIpv4SrpolicyAddrT) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpIpv4SrpolicyAddrT.DiscardUnknown(m)
}

var xxx_messageInfo_BgpIpv4SrpolicyAddrT proto.InternalMessageInfo

func (m *BgpIpv4SrpolicyAddrT) GetIpv4SrpolicyAddress() []uint32 {
	if m != nil {
		return m.Ipv4SrpolicyAddress
	}
	return nil
}

type BgpIpv6SrpolicyAddrT struct {
	Ipv6SrpolicyAddress  []uint32 `protobuf:"varint,1,rep,packed,name=ipv6_srpolicy_address,json=ipv6SrpolicyAddress,proto3" json:"ipv6_srpolicy_address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BgpIpv6SrpolicyAddrT) Reset()         { *m = BgpIpv6SrpolicyAddrT{} }
func (m *BgpIpv6SrpolicyAddrT) String() string { return proto.CompactTextString(m) }
func (*BgpIpv6SrpolicyAddrT) ProtoMessage()    {}
func (*BgpIpv6SrpolicyAddrT) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb29889f75ad586c, []int{4}
}

func (m *BgpIpv6SrpolicyAddrT) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BgpIpv6SrpolicyAddrT.Unmarshal(m, b)
}
func (m *BgpIpv6SrpolicyAddrT) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BgpIpv6SrpolicyAddrT.Marshal(b, m, deterministic)
}
func (m *BgpIpv6SrpolicyAddrT) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpIpv6SrpolicyAddrT.Merge(m, src)
}
func (m *BgpIpv6SrpolicyAddrT) XXX_Size() int {
	return xxx_messageInfo_BgpIpv6SrpolicyAddrT.Size(m)
}
func (m *BgpIpv6SrpolicyAddrT) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpIpv6SrpolicyAddrT.DiscardUnknown(m)
}

var xxx_messageInfo_BgpIpv6SrpolicyAddrT proto.InternalMessageInfo

func (m *BgpIpv6SrpolicyAddrT) GetIpv6SrpolicyAddress() []uint32 {
	if m != nil {
		return m.Ipv6SrpolicyAddress
	}
	return nil
}

type BgpAddrtype struct {
	Afi                    string                `protobuf:"bytes,1,opt,name=afi,proto3" json:"afi,omitempty"`
	Ipv4Address            string                `protobuf:"bytes,2,opt,name=ipv4_address,json=ipv4Address,proto3" json:"ipv4_address,omitempty"`
	Ipv4McastAddress       string                `protobuf:"bytes,3,opt,name=ipv4_mcast_address,json=ipv4McastAddress,proto3" json:"ipv4_mcast_address,omitempty"`
	Ipv4LabelAddress       string                `protobuf:"bytes,4,opt,name=ipv4_label_address,json=ipv4LabelAddress,proto3" json:"ipv4_label_address,omitempty"`
	Ipv4TunnelAddress      string                `protobuf:"bytes,5,opt,name=ipv4_tunnel_address,json=ipv4TunnelAddress,proto3" json:"ipv4_tunnel_address,omitempty"`
	Ipv4MdtAddress         string                `protobuf:"bytes,6,opt,name=ipv4_mdt_address,json=ipv4MdtAddress,proto3" json:"ipv4_mdt_address,omitempty"`
	Ipv4VpnAddress         string                `protobuf:"bytes,7,opt,name=ipv4vpn_address,json=ipv4vpnAddress,proto3" json:"ipv4vpn_address,omitempty"`
	Ipv4VpnaMcastddress    string                `protobuf:"bytes,8,opt,name=ipv4vpna_mcastddress,json=ipv4vpnaMcastddress,proto3" json:"ipv4vpna_mcastddress,omitempty"`
	Ipv6Address            string                `protobuf:"bytes,9,opt,name=ipv6_address,json=ipv6Address,proto3" json:"ipv6_address,omitempty"`
	Ipv6McastAddress       string                `protobuf:"bytes,10,opt,name=ipv6_mcast_address,json=ipv6McastAddress,proto3" json:"ipv6_mcast_address,omitempty"`
	Ipv6LabelAddress       string                `protobuf:"bytes,11,opt,name=ipv6_label_address,json=ipv6LabelAddress,proto3" json:"ipv6_label_address,omitempty"`
	Ipv6VpnAddress         string                `protobuf:"bytes,12,opt,name=ipv6vpn_address,json=ipv6vpnAddress,proto3" json:"ipv6vpn_address,omitempty"`
	Ipv6VpnMcastAddress    string                `protobuf:"bytes,13,opt,name=ipv6vpn_mcast_address,json=ipv6vpnMcastAddress,proto3" json:"ipv6vpn_mcast_address,omitempty"`
	L2VpnVplsAddress       *BgpL2VpnAddrT        `protobuf:"bytes,14,opt,name=l2vpn_vpls_address,json=l2vpnVplsAddress,proto3" json:"l2vpn_vpls_address,omitempty"`
	RtConstraintAddress    string                `protobuf:"bytes,15,opt,name=rt_constraint_address,json=rtConstraintAddress,proto3" json:"rt_constraint_address,omitempty"`
	Ipv6MvpnAddress        string                `protobuf:"bytes,16,opt,name=ipv6mvpn_address,json=ipv6mvpnAddress,proto3" json:"ipv6mvpn_address,omitempty"`
	Ipv4MvpnAddress        string                `protobuf:"bytes,17,opt,name=ipv4mvpn_address,json=ipv4mvpnAddress,proto3" json:"ipv4mvpn_address,omitempty"`
	L2VpnEvpnAddress       string                `protobuf:"bytes,18,opt,name=l2vpn_evpn_address,json=l2vpnEvpnAddress,proto3" json:"l2vpn_evpn_address,omitempty"`
	LsLsAddress            string                `protobuf:"bytes,19,opt,name=ls_ls_address,json=lsLsAddress,proto3" json:"ls_ls_address,omitempty"`
	L2VpnMspwAddress       *BgpL2VpnMspwAddrT    `protobuf:"bytes,20,opt,name=l2vpn_mspw_address,json=l2vpnMspwAddress,proto3" json:"l2vpn_mspw_address,omitempty"`
	Ipv4FlowspecAddress    string                `protobuf:"bytes,21,opt,name=ipv4_flowspec_address,json=ipv4FlowspecAddress,proto3" json:"ipv4_flowspec_address,omitempty"`
	Ipv6FlowspecAddress    string                `protobuf:"bytes,22,opt,name=ipv6_flowspec_address,json=ipv6FlowspecAddress,proto3" json:"ipv6_flowspec_address,omitempty"`
	Ipv4VpnFlowspecAddress string                `protobuf:"bytes,23,opt,name=ipv4vpn_flowspec_address,json=ipv4vpnFlowspecAddress,proto3" json:"ipv4vpn_flowspec_address,omitempty"`
	Ipv6VpnFlowspecAddress string                `protobuf:"bytes,24,opt,name=ipv6vpn_flowspec_address,json=ipv6vpnFlowspecAddress,proto3" json:"ipv6vpn_flowspec_address,omitempty"`
	Ipv4SrPolicyAddress    *BgpIpv4SrpolicyAddrT `protobuf:"bytes,25,opt,name=ipv4_sr_policy_address,json=ipv4SrPolicyAddress,proto3" json:"ipv4_sr_policy_address,omitempty"`
	Ipv6SrPolicyAddress    *BgpIpv6SrpolicyAddrT `protobuf:"bytes,26,opt,name=ipv6_sr_policy_address,json=ipv6SrPolicyAddress,proto3" json:"ipv6_sr_policy_address,omitempty"`
	XXX_NoUnkeyedLiteral   struct{}              `json:"-"`
	XXX_unrecognized       []byte                `json:"-"`
	XXX_sizecache          int32                 `json:"-"`
}

func (m *BgpAddrtype) Reset()         { *m = BgpAddrtype{} }
func (m *BgpAddrtype) String() string { return proto.CompactTextString(m) }
func (*BgpAddrtype) ProtoMessage()    {}
func (*BgpAddrtype) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb29889f75ad586c, []int{5}
}

func (m *BgpAddrtype) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BgpAddrtype.Unmarshal(m, b)
}
func (m *BgpAddrtype) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BgpAddrtype.Marshal(b, m, deterministic)
}
func (m *BgpAddrtype) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpAddrtype.Merge(m, src)
}
func (m *BgpAddrtype) XXX_Size() int {
	return xxx_messageInfo_BgpAddrtype.Size(m)
}
func (m *BgpAddrtype) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpAddrtype.DiscardUnknown(m)
}

var xxx_messageInfo_BgpAddrtype proto.InternalMessageInfo

func (m *BgpAddrtype) GetAfi() string {
	if m != nil {
		return m.Afi
	}
	return ""
}

func (m *BgpAddrtype) GetIpv4Address() string {
	if m != nil {
		return m.Ipv4Address
	}
	return ""
}

func (m *BgpAddrtype) GetIpv4McastAddress() string {
	if m != nil {
		return m.Ipv4McastAddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv4LabelAddress() string {
	if m != nil {
		return m.Ipv4LabelAddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv4TunnelAddress() string {
	if m != nil {
		return m.Ipv4TunnelAddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv4MdtAddress() string {
	if m != nil {
		return m.Ipv4MdtAddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv4VpnAddress() string {
	if m != nil {
		return m.Ipv4VpnAddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv4VpnaMcastddress() string {
	if m != nil {
		return m.Ipv4VpnaMcastddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv6Address() string {
	if m != nil {
		return m.Ipv6Address
	}
	return ""
}

func (m *BgpAddrtype) GetIpv6McastAddress() string {
	if m != nil {
		return m.Ipv6McastAddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv6LabelAddress() string {
	if m != nil {
		return m.Ipv6LabelAddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv6VpnAddress() string {
	if m != nil {
		return m.Ipv6VpnAddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv6VpnMcastAddress() string {
	if m != nil {
		return m.Ipv6VpnMcastAddress
	}
	return ""
}

func (m *BgpAddrtype) GetL2VpnVplsAddress() *BgpL2VpnAddrT {
	if m != nil {
		return m.L2VpnVplsAddress
	}
	return nil
}

func (m *BgpAddrtype) GetRtConstraintAddress() string {
	if m != nil {
		return m.RtConstraintAddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv6MvpnAddress() string {
	if m != nil {
		return m.Ipv6MvpnAddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv4MvpnAddress() string {
	if m != nil {
		return m.Ipv4MvpnAddress
	}
	return ""
}

func (m *BgpAddrtype) GetL2VpnEvpnAddress() string {
	if m != nil {
		return m.L2VpnEvpnAddress
	}
	return ""
}

func (m *BgpAddrtype) GetLsLsAddress() string {
	if m != nil {
		return m.LsLsAddress
	}
	return ""
}

func (m *BgpAddrtype) GetL2VpnMspwAddress() *BgpL2VpnMspwAddrT {
	if m != nil {
		return m.L2VpnMspwAddress
	}
	return nil
}

func (m *BgpAddrtype) GetIpv4FlowspecAddress() string {
	if m != nil {
		return m.Ipv4FlowspecAddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv6FlowspecAddress() string {
	if m != nil {
		return m.Ipv6FlowspecAddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv4VpnFlowspecAddress() string {
	if m != nil {
		return m.Ipv4VpnFlowspecAddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv6VpnFlowspecAddress() string {
	if m != nil {
		return m.Ipv6VpnFlowspecAddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv4SrPolicyAddress() *BgpIpv4SrpolicyAddrT {
	if m != nil {
		return m.Ipv4SrPolicyAddress
	}
	return nil
}

func (m *BgpAddrtype) GetIpv6SrPolicyAddress() *BgpIpv6SrpolicyAddrT {
	if m != nil {
		return m.Ipv6SrPolicyAddress
	}
	return nil
}

type BgpPrefixtype struct {
	Prefix               *BgpAddrtype `protobuf:"bytes,1,opt,name=prefix,proto3" json:"prefix,omitempty"`
	PrefixLength         uint32       `protobuf:"varint,2,opt,name=prefix_length,json=prefixLength,proto3" json:"prefix_length,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *BgpPrefixtype) Reset()         { *m = BgpPrefixtype{} }
func (m *BgpPrefixtype) String() string { return proto.CompactTextString(m) }
func (*BgpPrefixtype) ProtoMessage()    {}
func (*BgpPrefixtype) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb29889f75ad586c, []int{6}
}

func (m *BgpPrefixtype) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BgpPrefixtype.Unmarshal(m, b)
}
func (m *BgpPrefixtype) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BgpPrefixtype.Marshal(b, m, deterministic)
}
func (m *BgpPrefixtype) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpPrefixtype.Merge(m, src)
}
func (m *BgpPrefixtype) XXX_Size() int {
	return xxx_messageInfo_BgpPrefixtype.Size(m)
}
func (m *BgpPrefixtype) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpPrefixtype.DiscardUnknown(m)
}

var xxx_messageInfo_BgpPrefixtype proto.InternalMessageInfo

func (m *BgpPrefixtype) GetPrefix() *BgpAddrtype {
	if m != nil {
		return m.Prefix
	}
	return nil
}

func (m *BgpPrefixtype) GetPrefixLength() uint32 {
	if m != nil {
		return m.PrefixLength
	}
	return 0
}

type BgpTeTunnel struct {
	TunnelType           string   `protobuf:"bytes,1,opt,name=tunnel_type,json=tunnelType,proto3" json:"tunnel_type,omitempty"`
	TunnelName           string   `protobuf:"bytes,2,opt,name=tunnel_name,json=tunnelName,proto3" json:"tunnel_name,omitempty"`
	IsTunnelUp           bool     `protobuf:"varint,3,opt,name=is_tunnel_up,json=isTunnelUp,proto3" json:"is_tunnel_up,omitempty"`
	IsTunnelInfoStale    bool     `protobuf:"varint,4,opt,name=is_tunnel_info_stale,json=isTunnelInfoStale,proto3" json:"is_tunnel_info_stale,omitempty"`
	IsTunnelRegistered   bool     `protobuf:"varint,5,opt,name=is_tunnel_registered,json=isTunnelRegistered,proto3" json:"is_tunnel_registered,omitempty"`
	IsBgpTeRegistered    bool     `protobuf:"varint,6,opt,name=is_bgp_te_registered,json=isBgpTeRegistered,proto3" json:"is_bgp_te_registered,omitempty"`
	TunnelV6Required     bool     `protobuf:"varint,7,opt,name=tunnel_v6_required,json=tunnelV6Required,proto3" json:"tunnel_v6_required,omitempty"`
	TunnelV6Enabled      bool     `protobuf:"varint,8,opt,name=tunnel_v6_enabled,json=tunnelV6Enabled,proto3" json:"tunnel_v6_enabled,omitempty"`
	TunnelNotifFirstRcvd bool     `protobuf:"varint,9,opt,name=tunnel_notif_first_rcvd,json=tunnelNotifFirstRcvd,proto3" json:"tunnel_notif_first_rcvd,omitempty"`
	TunnelStateSkipReg   bool     `protobuf:"varint,10,opt,name=tunnel_state_skip_reg,json=tunnelStateSkipReg,proto3" json:"tunnel_state_skip_reg,omitempty"`
	BindingLabel         uint32   `protobuf:"varint,11,opt,name=binding_label,json=bindingLabel,proto3" json:"binding_label,omitempty"`
	TunnelIfHandle       uint32   `protobuf:"varint,12,opt,name=tunnel_if_handle,json=tunnelIfHandle,proto3" json:"tunnel_if_handle,omitempty"`
	LastTunnelUpdate     uint32   `protobuf:"varint,13,opt,name=last_tunnel_update,json=lastTunnelUpdate,proto3" json:"last_tunnel_update,omitempty"`
	TunnelColor          uint32   `protobuf:"varint,14,opt,name=tunnel_color,json=tunnelColor,proto3" json:"tunnel_color,omitempty"`
	IsTunnelColorOnly    bool     `protobuf:"varint,15,opt,name=is_tunnel_color_only,json=isTunnelColorOnly,proto3" json:"is_tunnel_color_only,omitempty"`
	TunnelEndpointAfi    string   `protobuf:"bytes,16,opt,name=tunnel_endpoint_afi,json=tunnelEndpointAfi,proto3" json:"tunnel_endpoint_afi,omitempty"`
	Flags                uint32   `protobuf:"varint,17,opt,name=flags,proto3" json:"flags,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BgpTeTunnel) Reset()         { *m = BgpTeTunnel{} }
func (m *BgpTeTunnel) String() string { return proto.CompactTextString(m) }
func (*BgpTeTunnel) ProtoMessage()    {}
func (*BgpTeTunnel) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb29889f75ad586c, []int{7}
}

func (m *BgpTeTunnel) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BgpTeTunnel.Unmarshal(m, b)
}
func (m *BgpTeTunnel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BgpTeTunnel.Marshal(b, m, deterministic)
}
func (m *BgpTeTunnel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpTeTunnel.Merge(m, src)
}
func (m *BgpTeTunnel) XXX_Size() int {
	return xxx_messageInfo_BgpTeTunnel.Size(m)
}
func (m *BgpTeTunnel) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpTeTunnel.DiscardUnknown(m)
}

var xxx_messageInfo_BgpTeTunnel proto.InternalMessageInfo

func (m *BgpTeTunnel) GetTunnelType() string {
	if m != nil {
		return m.TunnelType
	}
	return ""
}

func (m *BgpTeTunnel) GetTunnelName() string {
	if m != nil {
		return m.TunnelName
	}
	return ""
}

func (m *BgpTeTunnel) GetIsTunnelUp() bool {
	if m != nil {
		return m.IsTunnelUp
	}
	return false
}

func (m *BgpTeTunnel) GetIsTunnelInfoStale() bool {
	if m != nil {
		return m.IsTunnelInfoStale
	}
	return false
}

func (m *BgpTeTunnel) GetIsTunnelRegistered() bool {
	if m != nil {
		return m.IsTunnelRegistered
	}
	return false
}

func (m *BgpTeTunnel) GetIsBgpTeRegistered() bool {
	if m != nil {
		return m.IsBgpTeRegistered
	}
	return false
}

func (m *BgpTeTunnel) GetTunnelV6Required() bool {
	if m != nil {
		return m.TunnelV6Required
	}
	return false
}

func (m *BgpTeTunnel) GetTunnelV6Enabled() bool {
	if m != nil {
		return m.TunnelV6Enabled
	}
	return false
}

func (m *BgpTeTunnel) GetTunnelNotifFirstRcvd() bool {
	if m != nil {
		return m.TunnelNotifFirstRcvd
	}
	return false
}

func (m *BgpTeTunnel) GetTunnelStateSkipReg() bool {
	if m != nil {
		return m.TunnelStateSkipReg
	}
	return false
}

func (m *BgpTeTunnel) GetBindingLabel() uint32 {
	if m != nil {
		return m.BindingLabel
	}
	return 0
}

func (m *BgpTeTunnel) GetTunnelIfHandle() uint32 {
	if m != nil {
		return m.TunnelIfHandle
	}
	return 0
}

func (m *BgpTeTunnel) GetLastTunnelUpdate() uint32 {
	if m != nil {
		return m.LastTunnelUpdate
	}
	return 0
}

func (m *BgpTeTunnel) GetTunnelColor() uint32 {
	if m != nil {
		return m.TunnelColor
	}
	return 0
}

func (m *BgpTeTunnel) GetIsTunnelColorOnly() bool {
	if m != nil {
		return m.IsTunnelColorOnly
	}
	return false
}

func (m *BgpTeTunnel) GetTunnelEndpointAfi() string {
	if m != nil {
		return m.TunnelEndpointAfi
	}
	return ""
}

func (m *BgpTeTunnel) GetFlags() uint32 {
	if m != nil {
		return m.Flags
	}
	return 0
}

type BgpV4V6T struct {
	Len                  string   `protobuf:"bytes,1,opt,name=len,proto3" json:"len,omitempty"`
	Ipv4Address          string   `protobuf:"bytes,2,opt,name=ipv4_address,json=ipv4Address,proto3" json:"ipv4_address,omitempty"`
	Ipv6Address          string   `protobuf:"bytes,3,opt,name=ipv6_address,json=ipv6Address,proto3" json:"ipv6_address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BgpV4V6T) Reset()         { *m = BgpV4V6T{} }
func (m *BgpV4V6T) String() string { return proto.CompactTextString(m) }
func (*BgpV4V6T) ProtoMessage()    {}
func (*BgpV4V6T) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb29889f75ad586c, []int{8}
}

func (m *BgpV4V6T) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BgpV4V6T.Unmarshal(m, b)
}
func (m *BgpV4V6T) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BgpV4V6T.Marshal(b, m, deterministic)
}
func (m *BgpV4V6T) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpV4V6T.Merge(m, src)
}
func (m *BgpV4V6T) XXX_Size() int {
	return xxx_messageInfo_BgpV4V6T.Size(m)
}
func (m *BgpV4V6T) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpV4V6T.DiscardUnknown(m)
}

var xxx_messageInfo_BgpV4V6T proto.InternalMessageInfo

func (m *BgpV4V6T) GetLen() string {
	if m != nil {
		return m.Len
	}
	return ""
}

func (m *BgpV4V6T) GetIpv4Address() string {
	if m != nil {
		return m.Ipv4Address
	}
	return ""
}

func (m *BgpV4V6T) GetIpv6Address() string {
	if m != nil {
		return m.Ipv6Address
	}
	return ""
}

type BgpAdvinfoType_ struct {
	IsNeighbor           bool         `protobuf:"varint,1,opt,name=is_neighbor,json=isNeighbor,proto3" json:"is_neighbor,omitempty"`
	UpdateGroupAfi       uint32       `protobuf:"varint,2,opt,name=update_group_afi,json=updateGroupAfi,proto3" json:"update_group_afi,omitempty"`
	NeighborAddress      *BgpAddrtype `protobuf:"bytes,3,opt,name=neighbor_address,json=neighborAddress,proto3" json:"neighbor_address,omitempty"`
	UpdateGroupNumber    uint32       `protobuf:"varint,4,opt,name=update_group_number,json=updateGroupNumber,proto3" json:"update_group_number,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *BgpAdvinfoType_) Reset()         { *m = BgpAdvinfoType_{} }
func (m *BgpAdvinfoType_) String() string { return proto.CompactTextString(m) }
func (*BgpAdvinfoType_) ProtoMessage()    {}
func (*BgpAdvinfoType_) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb29889f75ad586c, []int{9}
}

func (m *BgpAdvinfoType_) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BgpAdvinfoType_.Unmarshal(m, b)
}
func (m *BgpAdvinfoType_) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BgpAdvinfoType_.Marshal(b, m, deterministic)
}
func (m *BgpAdvinfoType_) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpAdvinfoType_.Merge(m, src)
}
func (m *BgpAdvinfoType_) XXX_Size() int {
	return xxx_messageInfo_BgpAdvinfoType_.Size(m)
}
func (m *BgpAdvinfoType_) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpAdvinfoType_.DiscardUnknown(m)
}

var xxx_messageInfo_BgpAdvinfoType_ proto.InternalMessageInfo

func (m *BgpAdvinfoType_) GetIsNeighbor() bool {
	if m != nil {
		return m.IsNeighbor
	}
	return false
}

func (m *BgpAdvinfoType_) GetUpdateGroupAfi() uint32 {
	if m != nil {
		return m.UpdateGroupAfi
	}
	return 0
}

func (m *BgpAdvinfoType_) GetNeighborAddress() *BgpAddrtype {
	if m != nil {
		return m.NeighborAddress
	}
	return nil
}

func (m *BgpAdvinfoType_) GetUpdateGroupNumber() uint32 {
	if m != nil {
		return m.UpdateGroupNumber
	}
	return 0
}

type BgpPath_ struct {
	BgpPrefix                      *BgpPrefixtype     `protobuf:"bytes,1,opt,name=bgp_prefix,json=bgpPrefix,proto3" json:"bgp_prefix,omitempty"`
	NeighborAddress                *BgpAddrtype       `protobuf:"bytes,2,opt,name=neighbor_address,json=neighborAddress,proto3" json:"neighbor_address,omitempty"`
	RouteType                      string             `protobuf:"bytes,3,opt,name=route_type,json=routeType,proto3" json:"route_type,omitempty"`
	IsPathValid                    bool               `protobuf:"varint,4,opt,name=is_path_valid,json=isPathValid,proto3" json:"is_path_valid,omitempty"`
	IsPathDamped                   bool               `protobuf:"varint,5,opt,name=is_path_damped,json=isPathDamped,proto3" json:"is_path_damped,omitempty"`
	IsPathHistoryHeld              bool               `protobuf:"varint,6,opt,name=is_path_history_held,json=isPathHistoryHeld,proto3" json:"is_path_history_held,omitempty"`
	IsInternalPath                 bool               `protobuf:"varint,7,opt,name=is_internal_path,json=isInternalPath,proto3" json:"is_internal_path,omitempty"`
	IsBestPath                     bool               `protobuf:"varint,8,opt,name=is_best_path,json=isBestPath,proto3" json:"is_best_path,omitempty"`
	IsAsBest                       bool               `protobuf:"varint,9,opt,name=is_as_best,json=isAsBest,proto3" json:"is_as_best,omitempty"`
	IsSpkrAsBest                   bool               `protobuf:"varint,10,opt,name=is_spkr_as_best,json=isSpkrAsBest,proto3" json:"is_spkr_as_best,omitempty"`
	IsPartialBest                  bool               `protobuf:"varint,11,opt,name=is_partial_best,json=isPartialBest,proto3" json:"is_partial_best,omitempty"`
	IsAggregationSuppressed        bool               `protobuf:"varint,12,opt,name=is_aggregation_suppressed,json=isAggregationSuppressed,proto3" json:"is_aggregation_suppressed,omitempty"`
	IsImportDampened               bool               `protobuf:"varint,13,opt,name=is_import_dampened,json=isImportDampened,proto3" json:"is_import_dampened,omitempty"`
	IsImportSuspect                bool               `protobuf:"varint,14,opt,name=is_import_suspect,json=isImportSuspect,proto3" json:"is_import_suspect,omitempty"`
	IsPathNotAdvertised            bool               `protobuf:"varint,15,opt,name=is_path_not_advertised,json=isPathNotAdvertised,proto3" json:"is_path_not_advertised,omitempty"`
	IsPathNotAdvertisedToEbgp      bool               `protobuf:"varint,16,opt,name=is_path_not_advertised_to_ebgp,json=isPathNotAdvertisedToEbgp,proto3" json:"is_path_not_advertised_to_ebgp,omitempty"`
	IsPathAdvertisedLocalAsOnly    bool               `protobuf:"varint,17,opt,name=is_path_advertised_local_as_only,json=isPathAdvertisedLocalAsOnly,proto3" json:"is_path_advertised_local_as_only,omitempty"`
	IsPathFromRouteReflector       bool               `protobuf:"varint,18,opt,name=is_path_from_route_reflector,json=isPathFromRouteReflector,proto3" json:"is_path_from_route_reflector,omitempty"`
	IsPathReceivedOnly             bool               `protobuf:"varint,19,opt,name=is_path_received_only,json=isPathReceivedOnly,proto3" json:"is_path_received_only,omitempty"`
	IsReceivedPathNotModified      bool               `protobuf:"varint,20,opt,name=is_received_path_not_modified,json=isReceivedPathNotModified,proto3" json:"is_received_path_not_modified,omitempty"`
	IsPathLocallySourced           bool               `protobuf:"varint,21,opt,name=is_path_locally_sourced,json=isPathLocallySourced,proto3" json:"is_path_locally_sourced,omitempty"`
	IsPathLocalAggregate           bool               `protobuf:"varint,22,opt,name=is_path_local_aggregate,json=isPathLocalAggregate,proto3" json:"is_path_local_aggregate,omitempty"`
	IsPathFromNetworkCommand       bool               `protobuf:"varint,23,opt,name=is_path_from_network_command,json=isPathFromNetworkCommand,proto3" json:"is_path_from_network_command,omitempty"`
	IsPathFromRedistributeCommand  bool               `protobuf:"varint,24,opt,name=is_path_from_redistribute_command,json=isPathFromRedistributeCommand,proto3" json:"is_path_from_redistribute_command,omitempty"`
	IsPathImported                 bool               `protobuf:"varint,25,opt,name=is_path_imported,json=isPathImported,proto3" json:"is_path_imported,omitempty"`
	IsPathReoriginated             bool               `protobuf:"varint,26,opt,name=is_path_reoriginated,json=isPathReoriginated,proto3" json:"is_path_reoriginated,omitempty"`
	IsPathReoriginatedStitching    bool               `protobuf:"varint,27,opt,name=is_path_reoriginated_stitching,json=isPathReoriginatedStitching,proto3" json:"is_path_reoriginated_stitching,omitempty"`
	IsPathVpnOnly                  bool               `protobuf:"varint,28,opt,name=is_path_vpn_only,json=isPathVpnOnly,proto3" json:"is_path_vpn_only,omitempty"`
	IsPathFromConfederationPeer    bool               `protobuf:"varint,29,opt,name=is_path_from_confederation_peer,json=isPathFromConfederationPeer,proto3" json:"is_path_from_confederation_peer,omitempty"`
	IsPathSyncedWithIgp            bool               `protobuf:"varint,30,opt,name=is_path_synced_with_igp,json=isPathSyncedWithIgp,proto3" json:"is_path_synced_with_igp,omitempty"`
	IsPathMultipath                bool               `protobuf:"varint,31,opt,name=is_path_multipath,json=isPathMultipath,proto3" json:"is_path_multipath,omitempty"`
	IsPathImpCandidate             bool               `protobuf:"varint,32,opt,name=is_path_imp_candidate,json=isPathImpCandidate,proto3" json:"is_path_imp_candidate,omitempty"`
	IsPathStale                    bool               `protobuf:"varint,33,opt,name=is_path_stale,json=isPathStale,proto3" json:"is_path_stale,omitempty"`
	IsPathLongLivedStale           bool               `protobuf:"varint,34,opt,name=is_path_long_lived_stale,json=isPathLongLivedStale,proto3" json:"is_path_long_lived_stale,omitempty"`
	IsPathBackup                   bool               `protobuf:"varint,35,opt,name=is_path_backup,json=isPathBackup,proto3" json:"is_path_backup,omitempty"`
	IsPathBackupProtectMultipath   bool               `protobuf:"varint,36,opt,name=is_path_backup_protect_multipath,json=isPathBackupProtectMultipath,proto3" json:"is_path_backup_protect_multipath,omitempty"`
	IsPathBestExternal             bool               `protobuf:"varint,37,opt,name=is_path_best_external,json=isPathBestExternal,proto3" json:"is_path_best_external,omitempty"`
	IsPathAdditionalPath           bool               `protobuf:"varint,38,opt,name=is_path_additional_path,json=isPathAdditionalPath,proto3" json:"is_path_additional_path,omitempty"`
	IsPathNexthopDiscarded         bool               `protobuf:"varint,39,opt,name=is_path_nexthop_discarded,json=isPathNexthopDiscarded,proto3" json:"is_path_nexthop_discarded,omitempty"`
	NextHop                        *BgpAddrtype       `protobuf:"bytes,40,opt,name=next_hop,json=nextHop,proto3" json:"next_hop,omitempty"`
	NhTunnel                       *BgpTeTunnel       `protobuf:"bytes,41,opt,name=nh_tunnel,json=nhTunnel,proto3" json:"nh_tunnel,omitempty"`
	RcvdLabel                      []uint32           `protobuf:"varint,42,rep,packed,name=rcvd_label,json=rcvdLabel,proto3" json:"rcvd_label,omitempty"`
	HasLocalNetLabel               bool               `protobuf:"varint,43,opt,name=has_local_net_label,json=hasLocalNetLabel,proto3" json:"has_local_net_label,omitempty"`
	LocalLabel                     uint32             `protobuf:"varint,44,opt,name=local_label,json=localLabel,proto3" json:"local_label,omitempty"`
	IgpMetric                      uint32             `protobuf:"varint,45,opt,name=igp_metric,json=igpMetric,proto3" json:"igp_metric,omitempty"`
	PathWeight                     uint32             `protobuf:"varint,46,opt,name=path_weight,json=pathWeight,proto3" json:"path_weight,omitempty"`
	NeighborRouterId               string             `protobuf:"bytes,47,opt,name=neighbor_router_id,json=neighborRouterId,proto3" json:"neighbor_router_id,omitempty"`
	HasMdtGroupAddr                bool               `protobuf:"varint,48,opt,name=has_mdt_group_addr,json=hasMdtGroupAddr,proto3" json:"has_mdt_group_addr,omitempty"`
	MdtGroupAddr                   *BgpAddrtype       `protobuf:"bytes,49,opt,name=mdt_group_addr,json=mdtGroupAddr,proto3" json:"mdt_group_addr,omitempty"`
	L2VpnSize                      uint32             `protobuf:"varint,50,opt,name=l2vpn_size,json=l2vpnSize,proto3" json:"l2vpn_size,omitempty"`
	L2VpnEvpnEsi                   string             `protobuf:"bytes,51,opt,name=l2vpn_evpn_esi,json=l2vpnEvpnEsi,proto3" json:"l2vpn_evpn_esi,omitempty"`
	HasGwAddr                      bool               `protobuf:"varint,52,opt,name=has_gw_addr,json=hasGwAddr,proto3" json:"has_gw_addr,omitempty"`
	GwAddr                         *BgpV4V6T          `protobuf:"bytes,53,opt,name=gw_addr,json=gwAddr,proto3" json:"gw_addr,omitempty"`
	HasNhAddr                      bool               `protobuf:"varint,54,opt,name=has_nh_addr,json=hasNhAddr,proto3" json:"has_nh_addr,omitempty"`
	NhAddr                         *BgpV4V6T          `protobuf:"bytes,55,opt,name=nh_addr,json=nhAddr,proto3" json:"nh_addr,omitempty"`
	HasSecondLabel                 bool               `protobuf:"varint,56,opt,name=has_second_label,json=hasSecondLabel,proto3" json:"has_second_label,omitempty"`
	SecondLabel                    uint32             `protobuf:"varint,57,opt,name=second_label,json=secondLabel,proto3" json:"second_label,omitempty"`
	L2VpnCircuitStatusValue        []uint32           `protobuf:"varint,58,rep,packed,name=l2vpn_circuit_status_value,json=l2vpnCircuitStatusValue,proto3" json:"l2vpn_circuit_status_value,omitempty"`
	PathFlapCount                  uint32             `protobuf:"varint,59,opt,name=path_flap_count,json=pathFlapCount,proto3" json:"path_flap_count,omitempty"`
	SecondsSinceFirstFlap          uint32             `protobuf:"varint,60,opt,name=seconds_since_first_flap,json=secondsSinceFirstFlap,proto3" json:"seconds_since_first_flap,omitempty"`
	TimeToUnsuppress               uint32             `protobuf:"varint,61,opt,name=time_to_unsuppress,json=timeToUnsuppress,proto3" json:"time_to_unsuppress,omitempty"`
	DampenPenalty                  uint32             `protobuf:"varint,62,opt,name=dampen_penalty,json=dampenPenalty,proto3" json:"dampen_penalty,omitempty"`
	HalflifeTime                   uint32             `protobuf:"varint,63,opt,name=halflife_time,json=halflifeTime,proto3" json:"halflife_time,omitempty"`
	SuppressPenalty                uint32             `protobuf:"varint,64,opt,name=suppress_penalty,json=suppressPenalty,proto3" json:"suppress_penalty,omitempty"`
	ReuseValue                     uint32             `protobuf:"varint,65,opt,name=reuse_value,json=reuseValue,proto3" json:"reuse_value,omitempty"`
	MaximumSuppressTime            uint32             `protobuf:"varint,66,opt,name=maximum_suppress_time,json=maximumSuppressTime,proto3" json:"maximum_suppress_time,omitempty"`
	BestPathCompStage              string             `protobuf:"bytes,67,opt,name=best_path_comp_stage,json=bestPathCompStage,proto3" json:"best_path_comp_stage,omitempty"`
	BestPathCompWinner             *BgpAddrtype       `protobuf:"bytes,68,opt,name=best_path_comp_winner,json=bestPathCompWinner,proto3" json:"best_path_comp_winner,omitempty"`
	BestPathIdCompWinner           uint32             `protobuf:"varint,69,opt,name=best_path_id_comp_winner,json=bestPathIdCompWinner,proto3" json:"best_path_id_comp_winner,omitempty"`
	PathFlags                      uint64             `protobuf:"varint,70,opt,name=path_flags,json=pathFlags,proto3" json:"path_flags,omitempty"`
	PathImportFlags                uint32             `protobuf:"varint,71,opt,name=path_import_flags,json=pathImportFlags,proto3" json:"path_import_flags,omitempty"`
	BestPathId                     uint32             `protobuf:"varint,72,opt,name=best_path_id,json=bestPathId,proto3" json:"best_path_id,omitempty"`
	LocalPathId                    uint32             `protobuf:"varint,73,opt,name=local_path_id,json=localPathId,proto3" json:"local_path_id,omitempty"`
	RcvdPathId                     uint32             `protobuf:"varint,74,opt,name=rcvd_path_id,json=rcvdPathId,proto3" json:"rcvd_path_id,omitempty"`
	PathTableVersion               uint32             `protobuf:"varint,75,opt,name=path_table_version,json=pathTableVersion,proto3" json:"path_table_version,omitempty"`
	LocalPeersAdvertisedTo         []*BgpAdvinfoType_ `protobuf:"bytes,76,rep,name=local_peers_advertised_to,json=localPeersAdvertisedTo,proto3" json:"local_peers_advertised_to,omitempty"`
	PePeersAdvertisedTo            []*BgpAdvinfoType_ `protobuf:"bytes,77,rep,name=pe_peers_advertised_to,json=pePeersAdvertisedTo,proto3" json:"pe_peers_advertised_to,omitempty"`
	BestPathOrrBitfield            []*BgpAdvinfoType_ `protobuf:"bytes,78,rep,name=best_path_orr_bitfield,json=bestPathOrrBitfield,proto3" json:"best_path_orr_bitfield,omitempty"`
	AddPathOrrBitfield             []*BgpAdvinfoType_ `protobuf:"bytes,79,rep,name=add_path_orr_bitfield,json=addPathOrrBitfield,proto3" json:"add_path_orr_bitfield,omitempty"`
	AdvertisedtoPe                 bool               `protobuf:"varint,80,opt,name=advertisedto_pe,json=advertisedtoPe,proto3" json:"advertisedto_pe,omitempty"`
	RibFailed                      bool               `protobuf:"varint,81,opt,name=rib_failed,json=ribFailed,proto3" json:"rib_failed,omitempty"`
	SnRpkiOriginAsValidity         uint32             `protobuf:"varint,82,opt,name=sn_rpki_origin_as_validity,json=snRpkiOriginAsValidity,proto3" json:"sn_rpki_origin_as_validity,omitempty"`
	ShowRpkiOriginAsValidity       bool               `protobuf:"varint,83,opt,name=show_rpki_origin_as_validity,json=showRpkiOriginAsValidity,proto3" json:"show_rpki_origin_as_validity,omitempty"`
	IbgpSignaledValidity           bool               `protobuf:"varint,84,opt,name=ibgp_signaled_validity,json=ibgpSignaledValidity,proto3" json:"ibgp_signaled_validity,omitempty"`
	RpkiOriginAsValidationDisabled bool               `protobuf:"varint,85,opt,name=rpki_origin_as_validation_disabled,json=rpkiOriginAsValidationDisabled,proto3" json:"rpki_origin_as_validation_disabled,omitempty"`
	AcceptOwnPath                  bool               `protobuf:"varint,86,opt,name=accept_own_path,json=acceptOwnPath,proto3" json:"accept_own_path,omitempty"`
	AcceptOwnSelfOriginatedPath    bool               `protobuf:"varint,87,opt,name=accept_own_self_originated_path,json=acceptOwnSelfOriginatedPath,proto3" json:"accept_own_self_originated_path,omitempty"`
	AigpMetric                     uint64             `protobuf:"varint,88,opt,name=aigp_metric,json=aigpMetric,proto3" json:"aigp_metric,omitempty"`
	MvpnSfsPath                    bool               `protobuf:"varint,89,opt,name=mvpn_sfs_path,json=mvpnSfsPath,proto3" json:"mvpn_sfs_path,omitempty"`
	FspecInvalidPath               bool               `protobuf:"varint,90,opt,name=fspec_invalid_path,json=fspecInvalidPath,proto3" json:"fspec_invalid_path,omitempty"`
	HasMvpnNbrAddr                 bool               `protobuf:"varint,91,opt,name=has_mvpn_nbr_addr,json=hasMvpnNbrAddr,proto3" json:"has_mvpn_nbr_addr,omitempty"`
	MvpnNbrAddr                    *BgpAddrtype       `protobuf:"bytes,92,opt,name=mvpn_nbr_addr,json=mvpnNbrAddr,proto3" json:"mvpn_nbr_addr,omitempty"`
	HasMvpnNexthopAddr             bool               `protobuf:"varint,93,opt,name=has_mvpn_nexthop_addr,json=hasMvpnNexthopAddr,proto3" json:"has_mvpn_nexthop_addr,omitempty"`
	MvpnNexthopAddr                *BgpAddrtype       `protobuf:"bytes,94,opt,name=mvpn_nexthop_addr,json=mvpnNexthopAddr,proto3" json:"mvpn_nexthop_addr,omitempty"`
	HasMvpnPmsi                    bool               `protobuf:"varint,95,opt,name=has_mvpn_pmsi,json=hasMvpnPmsi,proto3" json:"has_mvpn_pmsi,omitempty"`
	MvpnPmsiType                   uint32             `protobuf:"varint,96,opt,name=mvpn_pmsi_type,json=mvpnPmsiType,proto3" json:"mvpn_pmsi_type,omitempty"`
	MvpnPmsiFlags                  uint32             `protobuf:"varint,97,opt,name=mvpn_pmsi_flags,json=mvpnPmsiFlags,proto3" json:"mvpn_pmsi_flags,omitempty"`
	MvpnPmsiLabel                  uint32             `protobuf:"varint,98,opt,name=mvpn_pmsi_label,json=mvpnPmsiLabel,proto3" json:"mvpn_pmsi_label,omitempty"`
	MvpnPmsiValue                  []uint32           `protobuf:"varint,99,rep,packed,name=mvpn_pmsi_value,json=mvpnPmsiValue,proto3" json:"mvpn_pmsi_value,omitempty"`
	HasMvpnExtcomm                 bool               `protobuf:"varint,100,opt,name=has_mvpn_extcomm,json=hasMvpnExtcomm,proto3" json:"has_mvpn_extcomm,omitempty"`
	ExtendedCommunity              []uint32           `protobuf:"varint,101,rep,packed,name=extended_community,json=extendedCommunity,proto3" json:"extended_community,omitempty"`
	MvpnPathFlags                  uint32             `protobuf:"varint,102,opt,name=mvpn_path_flags,json=mvpnPathFlags,proto3" json:"mvpn_path_flags,omitempty"`
	LocalNh                        bool               `protobuf:"varint,103,opt,name=local_nh,json=localNh,proto3" json:"local_nh,omitempty"`
	RtSetLimitEnabled              bool               `protobuf:"varint,104,opt,name=rt_set_limit_enabled,json=rtSetLimitEnabled,proto3" json:"rt_set_limit_enabled,omitempty"`
	PathRtSetId                    uint32             `protobuf:"varint,105,opt,name=path_rt_set_id,json=pathRtSetId,proto3" json:"path_rt_set_id,omitempty"`
	PathRtSetRouteCount            uint32             `protobuf:"varint,106,opt,name=path_rt_set_route_count,json=pathRtSetRouteCount,proto3" json:"path_rt_set_route_count,omitempty"`
	IsPathAfInstallEligible        bool               `protobuf:"varint,107,opt,name=is_path_af_install_eligible,json=isPathAfInstallEligible,proto3" json:"is_path_af_install_eligible,omitempty"`
	IsPermanentPath                bool               `protobuf:"varint,108,opt,name=is_permanent_path,json=isPermanentPath,proto3" json:"is_permanent_path,omitempty"`
	GracefulShutdown               bool               `protobuf:"varint,109,opt,name=graceful_shutdown,json=gracefulShutdown,proto3" json:"graceful_shutdown,omitempty"`
	LabeledUnicastSafiPath         bool               `protobuf:"varint,110,opt,name=labeled_unicast_safi_path,json=labeledUnicastSafiPath,proto3" json:"labeled_unicast_safi_path,omitempty"`
	HasVpnNexthopAddr              bool               `protobuf:"varint,111,opt,name=has_vpn_nexthop_addr,json=hasVpnNexthopAddr,proto3" json:"has_vpn_nexthop_addr,omitempty"`
	VpnNexthopAddr                 *BgpAddrtype       `protobuf:"bytes,112,opt,name=vpn_nexthop_addr,json=vpnNexthopAddr,proto3" json:"vpn_nexthop_addr,omitempty"`
	IsOrigSrcRdPresent             bool               `protobuf:"varint,113,opt,name=is_orig_src_rd_present,json=isOrigSrcRdPresent,proto3" json:"is_orig_src_rd_present,omitempty"`
	AfName                         string             `protobuf:"bytes,114,opt,name=af_name,json=afName,proto3" json:"af_name,omitempty"`
	RouteDistinguisher             string             `protobuf:"bytes,115,opt,name=route_distinguisher,json=routeDistinguisher,proto3" json:"route_distinguisher,omitempty"`
	MacIpPresent                   bool               `protobuf:"varint,116,opt,name=mac_ip_present,json=macIpPresent,proto3" json:"mac_ip_present,omitempty"`
	MacIp                          string             `protobuf:"bytes,117,opt,name=mac_ip,json=macIp,proto3" json:"mac_ip,omitempty"`
	XXX_NoUnkeyedLiteral           struct{}           `json:"-"`
	XXX_unrecognized               []byte             `json:"-"`
	XXX_sizecache                  int32              `json:"-"`
}

func (m *BgpPath_) Reset()         { *m = BgpPath_{} }
func (m *BgpPath_) String() string { return proto.CompactTextString(m) }
func (*BgpPath_) ProtoMessage()    {}
func (*BgpPath_) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb29889f75ad586c, []int{10}
}

func (m *BgpPath_) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BgpPath_.Unmarshal(m, b)
}
func (m *BgpPath_) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BgpPath_.Marshal(b, m, deterministic)
}
func (m *BgpPath_) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpPath_.Merge(m, src)
}
func (m *BgpPath_) XXX_Size() int {
	return xxx_messageInfo_BgpPath_.Size(m)
}
func (m *BgpPath_) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpPath_.DiscardUnknown(m)
}

var xxx_messageInfo_BgpPath_ proto.InternalMessageInfo

func (m *BgpPath_) GetBgpPrefix() *BgpPrefixtype {
	if m != nil {
		return m.BgpPrefix
	}
	return nil
}

func (m *BgpPath_) GetNeighborAddress() *BgpAddrtype {
	if m != nil {
		return m.NeighborAddress
	}
	return nil
}

func (m *BgpPath_) GetRouteType() string {
	if m != nil {
		return m.RouteType
	}
	return ""
}

func (m *BgpPath_) GetIsPathValid() bool {
	if m != nil {
		return m.IsPathValid
	}
	return false
}

func (m *BgpPath_) GetIsPathDamped() bool {
	if m != nil {
		return m.IsPathDamped
	}
	return false
}

func (m *BgpPath_) GetIsPathHistoryHeld() bool {
	if m != nil {
		return m.IsPathHistoryHeld
	}
	return false
}

func (m *BgpPath_) GetIsInternalPath() bool {
	if m != nil {
		return m.IsInternalPath
	}
	return false
}

func (m *BgpPath_) GetIsBestPath() bool {
	if m != nil {
		return m.IsBestPath
	}
	return false
}

func (m *BgpPath_) GetIsAsBest() bool {
	if m != nil {
		return m.IsAsBest
	}
	return false
}

func (m *BgpPath_) GetIsSpkrAsBest() bool {
	if m != nil {
		return m.IsSpkrAsBest
	}
	return false
}

func (m *BgpPath_) GetIsPartialBest() bool {
	if m != nil {
		return m.IsPartialBest
	}
	return false
}

func (m *BgpPath_) GetIsAggregationSuppressed() bool {
	if m != nil {
		return m.IsAggregationSuppressed
	}
	return false
}

func (m *BgpPath_) GetIsImportDampened() bool {
	if m != nil {
		return m.IsImportDampened
	}
	return false
}

func (m *BgpPath_) GetIsImportSuspect() bool {
	if m != nil {
		return m.IsImportSuspect
	}
	return false
}

func (m *BgpPath_) GetIsPathNotAdvertised() bool {
	if m != nil {
		return m.IsPathNotAdvertised
	}
	return false
}

func (m *BgpPath_) GetIsPathNotAdvertisedToEbgp() bool {
	if m != nil {
		return m.IsPathNotAdvertisedToEbgp
	}
	return false
}

func (m *BgpPath_) GetIsPathAdvertisedLocalAsOnly() bool {
	if m != nil {
		return m.IsPathAdvertisedLocalAsOnly
	}
	return false
}

func (m *BgpPath_) GetIsPathFromRouteReflector() bool {
	if m != nil {
		return m.IsPathFromRouteReflector
	}
	return false
}

func (m *BgpPath_) GetIsPathReceivedOnly() bool {
	if m != nil {
		return m.IsPathReceivedOnly
	}
	return false
}

func (m *BgpPath_) GetIsReceivedPathNotModified() bool {
	if m != nil {
		return m.IsReceivedPathNotModified
	}
	return false
}

func (m *BgpPath_) GetIsPathLocallySourced() bool {
	if m != nil {
		return m.IsPathLocallySourced
	}
	return false
}

func (m *BgpPath_) GetIsPathLocalAggregate() bool {
	if m != nil {
		return m.IsPathLocalAggregate
	}
	return false
}

func (m *BgpPath_) GetIsPathFromNetworkCommand() bool {
	if m != nil {
		return m.IsPathFromNetworkCommand
	}
	return false
}

func (m *BgpPath_) GetIsPathFromRedistributeCommand() bool {
	if m != nil {
		return m.IsPathFromRedistributeCommand
	}
	return false
}

func (m *BgpPath_) GetIsPathImported() bool {
	if m != nil {
		return m.IsPathImported
	}
	return false
}

func (m *BgpPath_) GetIsPathReoriginated() bool {
	if m != nil {
		return m.IsPathReoriginated
	}
	return false
}

func (m *BgpPath_) GetIsPathReoriginatedStitching() bool {
	if m != nil {
		return m.IsPathReoriginatedStitching
	}
	return false
}

func (m *BgpPath_) GetIsPathVpnOnly() bool {
	if m != nil {
		return m.IsPathVpnOnly
	}
	return false
}

func (m *BgpPath_) GetIsPathFromConfederationPeer() bool {
	if m != nil {
		return m.IsPathFromConfederationPeer
	}
	return false
}

func (m *BgpPath_) GetIsPathSyncedWithIgp() bool {
	if m != nil {
		return m.IsPathSyncedWithIgp
	}
	return false
}

func (m *BgpPath_) GetIsPathMultipath() bool {
	if m != nil {
		return m.IsPathMultipath
	}
	return false
}

func (m *BgpPath_) GetIsPathImpCandidate() bool {
	if m != nil {
		return m.IsPathImpCandidate
	}
	return false
}

func (m *BgpPath_) GetIsPathStale() bool {
	if m != nil {
		return m.IsPathStale
	}
	return false
}

func (m *BgpPath_) GetIsPathLongLivedStale() bool {
	if m != nil {
		return m.IsPathLongLivedStale
	}
	return false
}

func (m *BgpPath_) GetIsPathBackup() bool {
	if m != nil {
		return m.IsPathBackup
	}
	return false
}

func (m *BgpPath_) GetIsPathBackupProtectMultipath() bool {
	if m != nil {
		return m.IsPathBackupProtectMultipath
	}
	return false
}

func (m *BgpPath_) GetIsPathBestExternal() bool {
	if m != nil {
		return m.IsPathBestExternal
	}
	return false
}

func (m *BgpPath_) GetIsPathAdditionalPath() bool {
	if m != nil {
		return m.IsPathAdditionalPath
	}
	return false
}

func (m *BgpPath_) GetIsPathNexthopDiscarded() bool {
	if m != nil {
		return m.IsPathNexthopDiscarded
	}
	return false
}

func (m *BgpPath_) GetNextHop() *BgpAddrtype {
	if m != nil {
		return m.NextHop
	}
	return nil
}

func (m *BgpPath_) GetNhTunnel() *BgpTeTunnel {
	if m != nil {
		return m.NhTunnel
	}
	return nil
}

func (m *BgpPath_) GetRcvdLabel() []uint32 {
	if m != nil {
		return m.RcvdLabel
	}
	return nil
}

func (m *BgpPath_) GetHasLocalNetLabel() bool {
	if m != nil {
		return m.HasLocalNetLabel
	}
	return false
}

func (m *BgpPath_) GetLocalLabel() uint32 {
	if m != nil {
		return m.LocalLabel
	}
	return 0
}

func (m *BgpPath_) GetIgpMetric() uint32 {
	if m != nil {
		return m.IgpMetric
	}
	return 0
}

func (m *BgpPath_) GetPathWeight() uint32 {
	if m != nil {
		return m.PathWeight
	}
	return 0
}

func (m *BgpPath_) GetNeighborRouterId() string {
	if m != nil {
		return m.NeighborRouterId
	}
	return ""
}

func (m *BgpPath_) GetHasMdtGroupAddr() bool {
	if m != nil {
		return m.HasMdtGroupAddr
	}
	return false
}

func (m *BgpPath_) GetMdtGroupAddr() *BgpAddrtype {
	if m != nil {
		return m.MdtGroupAddr
	}
	return nil
}

func (m *BgpPath_) GetL2VpnSize() uint32 {
	if m != nil {
		return m.L2VpnSize
	}
	return 0
}

func (m *BgpPath_) GetL2VpnEvpnEsi() string {
	if m != nil {
		return m.L2VpnEvpnEsi
	}
	return ""
}

func (m *BgpPath_) GetHasGwAddr() bool {
	if m != nil {
		return m.HasGwAddr
	}
	return false
}

func (m *BgpPath_) GetGwAddr() *BgpV4V6T {
	if m != nil {
		return m.GwAddr
	}
	return nil
}

func (m *BgpPath_) GetHasNhAddr() bool {
	if m != nil {
		return m.HasNhAddr
	}
	return false
}

func (m *BgpPath_) GetNhAddr() *BgpV4V6T {
	if m != nil {
		return m.NhAddr
	}
	return nil
}

func (m *BgpPath_) GetHasSecondLabel() bool {
	if m != nil {
		return m.HasSecondLabel
	}
	return false
}

func (m *BgpPath_) GetSecondLabel() uint32 {
	if m != nil {
		return m.SecondLabel
	}
	return 0
}

func (m *BgpPath_) GetL2VpnCircuitStatusValue() []uint32 {
	if m != nil {
		return m.L2VpnCircuitStatusValue
	}
	return nil
}

func (m *BgpPath_) GetPathFlapCount() uint32 {
	if m != nil {
		return m.PathFlapCount
	}
	return 0
}

func (m *BgpPath_) GetSecondsSinceFirstFlap() uint32 {
	if m != nil {
		return m.SecondsSinceFirstFlap
	}
	return 0
}

func (m *BgpPath_) GetTimeToUnsuppress() uint32 {
	if m != nil {
		return m.TimeToUnsuppress
	}
	return 0
}

func (m *BgpPath_) GetDampenPenalty() uint32 {
	if m != nil {
		return m.DampenPenalty
	}
	return 0
}

func (m *BgpPath_) GetHalflifeTime() uint32 {
	if m != nil {
		return m.HalflifeTime
	}
	return 0
}

func (m *BgpPath_) GetSuppressPenalty() uint32 {
	if m != nil {
		return m.SuppressPenalty
	}
	return 0
}

func (m *BgpPath_) GetReuseValue() uint32 {
	if m != nil {
		return m.ReuseValue
	}
	return 0
}

func (m *BgpPath_) GetMaximumSuppressTime() uint32 {
	if m != nil {
		return m.MaximumSuppressTime
	}
	return 0
}

func (m *BgpPath_) GetBestPathCompStage() string {
	if m != nil {
		return m.BestPathCompStage
	}
	return ""
}

func (m *BgpPath_) GetBestPathCompWinner() *BgpAddrtype {
	if m != nil {
		return m.BestPathCompWinner
	}
	return nil
}

func (m *BgpPath_) GetBestPathIdCompWinner() uint32 {
	if m != nil {
		return m.BestPathIdCompWinner
	}
	return 0
}

func (m *BgpPath_) GetPathFlags() uint64 {
	if m != nil {
		return m.PathFlags
	}
	return 0
}

func (m *BgpPath_) GetPathImportFlags() uint32 {
	if m != nil {
		return m.PathImportFlags
	}
	return 0
}

func (m *BgpPath_) GetBestPathId() uint32 {
	if m != nil {
		return m.BestPathId
	}
	return 0
}

func (m *BgpPath_) GetLocalPathId() uint32 {
	if m != nil {
		return m.LocalPathId
	}
	return 0
}

func (m *BgpPath_) GetRcvdPathId() uint32 {
	if m != nil {
		return m.RcvdPathId
	}
	return 0
}

func (m *BgpPath_) GetPathTableVersion() uint32 {
	if m != nil {
		return m.PathTableVersion
	}
	return 0
}

func (m *BgpPath_) GetLocalPeersAdvertisedTo() []*BgpAdvinfoType_ {
	if m != nil {
		return m.LocalPeersAdvertisedTo
	}
	return nil
}

func (m *BgpPath_) GetPePeersAdvertisedTo() []*BgpAdvinfoType_ {
	if m != nil {
		return m.PePeersAdvertisedTo
	}
	return nil
}

func (m *BgpPath_) GetBestPathOrrBitfield() []*BgpAdvinfoType_ {
	if m != nil {
		return m.BestPathOrrBitfield
	}
	return nil
}

func (m *BgpPath_) GetAddPathOrrBitfield() []*BgpAdvinfoType_ {
	if m != nil {
		return m.AddPathOrrBitfield
	}
	return nil
}

func (m *BgpPath_) GetAdvertisedtoPe() bool {
	if m != nil {
		return m.AdvertisedtoPe
	}
	return false
}

func (m *BgpPath_) GetRibFailed() bool {
	if m != nil {
		return m.RibFailed
	}
	return false
}

func (m *BgpPath_) GetSnRpkiOriginAsValidity() uint32 {
	if m != nil {
		return m.SnRpkiOriginAsValidity
	}
	return 0
}

func (m *BgpPath_) GetShowRpkiOriginAsValidity() bool {
	if m != nil {
		return m.ShowRpkiOriginAsValidity
	}
	return false
}

func (m *BgpPath_) GetIbgpSignaledValidity() bool {
	if m != nil {
		return m.IbgpSignaledValidity
	}
	return false
}

func (m *BgpPath_) GetRpkiOriginAsValidationDisabled() bool {
	if m != nil {
		return m.RpkiOriginAsValidationDisabled
	}
	return false
}

func (m *BgpPath_) GetAcceptOwnPath() bool {
	if m != nil {
		return m.AcceptOwnPath
	}
	return false
}

func (m *BgpPath_) GetAcceptOwnSelfOriginatedPath() bool {
	if m != nil {
		return m.AcceptOwnSelfOriginatedPath
	}
	return false
}

func (m *BgpPath_) GetAigpMetric() uint64 {
	if m != nil {
		return m.AigpMetric
	}
	return 0
}

func (m *BgpPath_) GetMvpnSfsPath() bool {
	if m != nil {
		return m.MvpnSfsPath
	}
	return false
}

func (m *BgpPath_) GetFspecInvalidPath() bool {
	if m != nil {
		return m.FspecInvalidPath
	}
	return false
}

func (m *BgpPath_) GetHasMvpnNbrAddr() bool {
	if m != nil {
		return m.HasMvpnNbrAddr
	}
	return false
}

func (m *BgpPath_) GetMvpnNbrAddr() *BgpAddrtype {
	if m != nil {
		return m.MvpnNbrAddr
	}
	return nil
}

func (m *BgpPath_) GetHasMvpnNexthopAddr() bool {
	if m != nil {
		return m.HasMvpnNexthopAddr
	}
	return false
}

func (m *BgpPath_) GetMvpnNexthopAddr() *BgpAddrtype {
	if m != nil {
		return m.MvpnNexthopAddr
	}
	return nil
}

func (m *BgpPath_) GetHasMvpnPmsi() bool {
	if m != nil {
		return m.HasMvpnPmsi
	}
	return false
}

func (m *BgpPath_) GetMvpnPmsiType() uint32 {
	if m != nil {
		return m.MvpnPmsiType
	}
	return 0
}

func (m *BgpPath_) GetMvpnPmsiFlags() uint32 {
	if m != nil {
		return m.MvpnPmsiFlags
	}
	return 0
}

func (m *BgpPath_) GetMvpnPmsiLabel() uint32 {
	if m != nil {
		return m.MvpnPmsiLabel
	}
	return 0
}

func (m *BgpPath_) GetMvpnPmsiValue() []uint32 {
	if m != nil {
		return m.MvpnPmsiValue
	}
	return nil
}

func (m *BgpPath_) GetHasMvpnExtcomm() bool {
	if m != nil {
		return m.HasMvpnExtcomm
	}
	return false
}

func (m *BgpPath_) GetExtendedCommunity() []uint32 {
	if m != nil {
		return m.ExtendedCommunity
	}
	return nil
}

func (m *BgpPath_) GetMvpnPathFlags() uint32 {
	if m != nil {
		return m.MvpnPathFlags
	}
	return 0
}

func (m *BgpPath_) GetLocalNh() bool {
	if m != nil {
		return m.LocalNh
	}
	return false
}

func (m *BgpPath_) GetRtSetLimitEnabled() bool {
	if m != nil {
		return m.RtSetLimitEnabled
	}
	return false
}

func (m *BgpPath_) GetPathRtSetId() uint32 {
	if m != nil {
		return m.PathRtSetId
	}
	return 0
}

func (m *BgpPath_) GetPathRtSetRouteCount() uint32 {
	if m != nil {
		return m.PathRtSetRouteCount
	}
	return 0
}

func (m *BgpPath_) GetIsPathAfInstallEligible() bool {
	if m != nil {
		return m.IsPathAfInstallEligible
	}
	return false
}

func (m *BgpPath_) GetIsPermanentPath() bool {
	if m != nil {
		return m.IsPermanentPath
	}
	return false
}

func (m *BgpPath_) GetGracefulShutdown() bool {
	if m != nil {
		return m.GracefulShutdown
	}
	return false
}

func (m *BgpPath_) GetLabeledUnicastSafiPath() bool {
	if m != nil {
		return m.LabeledUnicastSafiPath
	}
	return false
}

func (m *BgpPath_) GetHasVpnNexthopAddr() bool {
	if m != nil {
		return m.HasVpnNexthopAddr
	}
	return false
}

func (m *BgpPath_) GetVpnNexthopAddr() *BgpAddrtype {
	if m != nil {
		return m.VpnNexthopAddr
	}
	return nil
}

func (m *BgpPath_) GetIsOrigSrcRdPresent() bool {
	if m != nil {
		return m.IsOrigSrcRdPresent
	}
	return false
}

func (m *BgpPath_) GetAfName() string {
	if m != nil {
		return m.AfName
	}
	return ""
}

func (m *BgpPath_) GetRouteDistinguisher() string {
	if m != nil {
		return m.RouteDistinguisher
	}
	return ""
}

func (m *BgpPath_) GetMacIpPresent() bool {
	if m != nil {
		return m.MacIpPresent
	}
	return false
}

func (m *BgpPath_) GetMacIp() string {
	if m != nil {
		return m.MacIp
	}
	return ""
}

type BgpPedistlblEntry_ struct {
	PeAddress            string   `protobuf:"bytes,1,opt,name=pe_address,json=peAddress,proto3" json:"pe_address,omitempty"`
	Label                uint32   `protobuf:"varint,2,opt,name=label,proto3" json:"label,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BgpPedistlblEntry_) Reset()         { *m = BgpPedistlblEntry_{} }
func (m *BgpPedistlblEntry_) String() string { return proto.CompactTextString(m) }
func (*BgpPedistlblEntry_) ProtoMessage()    {}
func (*BgpPedistlblEntry_) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb29889f75ad586c, []int{11}
}

func (m *BgpPedistlblEntry_) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BgpPedistlblEntry_.Unmarshal(m, b)
}
func (m *BgpPedistlblEntry_) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BgpPedistlblEntry_.Marshal(b, m, deterministic)
}
func (m *BgpPedistlblEntry_) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpPedistlblEntry_.Merge(m, src)
}
func (m *BgpPedistlblEntry_) XXX_Size() int {
	return xxx_messageInfo_BgpPedistlblEntry_.Size(m)
}
func (m *BgpPedistlblEntry_) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpPedistlblEntry_.DiscardUnknown(m)
}

var xxx_messageInfo_BgpPedistlblEntry_ proto.InternalMessageInfo

func (m *BgpPedistlblEntry_) GetPeAddress() string {
	if m != nil {
		return m.PeAddress
	}
	return ""
}

func (m *BgpPedistlblEntry_) GetLabel() uint32 {
	if m != nil {
		return m.Label
	}
	return 0
}

type BgpPsidTlvType_ struct {
	Type                 string   `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Len                  uint32   `protobuf:"varint,2,opt,name=len,proto3" json:"len,omitempty"`
	Val                  []string `protobuf:"bytes,3,rep,name=val,proto3" json:"val,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BgpPsidTlvType_) Reset()         { *m = BgpPsidTlvType_{} }
func (m *BgpPsidTlvType_) String() string { return proto.CompactTextString(m) }
func (*BgpPsidTlvType_) ProtoMessage()    {}
func (*BgpPsidTlvType_) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb29889f75ad586c, []int{12}
}

func (m *BgpPsidTlvType_) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BgpPsidTlvType_.Unmarshal(m, b)
}
func (m *BgpPsidTlvType_) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BgpPsidTlvType_.Marshal(b, m, deterministic)
}
func (m *BgpPsidTlvType_) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpPsidTlvType_.Merge(m, src)
}
func (m *BgpPsidTlvType_) XXX_Size() int {
	return xxx_messageInfo_BgpPsidTlvType_.Size(m)
}
func (m *BgpPsidTlvType_) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpPsidTlvType_.DiscardUnknown(m)
}

var xxx_messageInfo_BgpPsidTlvType_ proto.InternalMessageInfo

func (m *BgpPsidTlvType_) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *BgpPsidTlvType_) GetLen() uint32 {
	if m != nil {
		return m.Len
	}
	return 0
}

func (m *BgpPsidTlvType_) GetVal() []string {
	if m != nil {
		return m.Val
	}
	return nil
}

type BgpPsidType_ struct {
	PrefixSidTlv         []*BgpPsidTlvType_ `protobuf:"bytes,1,rep,name=prefix_sid_tlv,json=prefixSidTlv,proto3" json:"prefix_sid_tlv,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *BgpPsidType_) Reset()         { *m = BgpPsidType_{} }
func (m *BgpPsidType_) String() string { return proto.CompactTextString(m) }
func (*BgpPsidType_) ProtoMessage()    {}
func (*BgpPsidType_) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb29889f75ad586c, []int{13}
}

func (m *BgpPsidType_) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BgpPsidType_.Unmarshal(m, b)
}
func (m *BgpPsidType_) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BgpPsidType_.Marshal(b, m, deterministic)
}
func (m *BgpPsidType_) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpPsidType_.Merge(m, src)
}
func (m *BgpPsidType_) XXX_Size() int {
	return xxx_messageInfo_BgpPsidType_.Size(m)
}
func (m *BgpPsidType_) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpPsidType_.DiscardUnknown(m)
}

var xxx_messageInfo_BgpPsidType_ proto.InternalMessageInfo

func (m *BgpPsidType_) GetPrefixSidTlv() []*BgpPsidTlvType_ {
	if m != nil {
		return m.PrefixSidTlv
	}
	return nil
}

type BgpBindingSidT struct {
	Type                 string   `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Label                uint32   `protobuf:"varint,2,opt,name=label,proto3" json:"label,omitempty"`
	Ipv6Address          string   `protobuf:"bytes,3,opt,name=ipv6_address,json=ipv6Address,proto3" json:"ipv6_address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BgpBindingSidT) Reset()         { *m = BgpBindingSidT{} }
func (m *BgpBindingSidT) String() string { return proto.CompactTextString(m) }
func (*BgpBindingSidT) ProtoMessage()    {}
func (*BgpBindingSidT) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb29889f75ad586c, []int{14}
}

func (m *BgpBindingSidT) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BgpBindingSidT.Unmarshal(m, b)
}
func (m *BgpBindingSidT) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BgpBindingSidT.Marshal(b, m, deterministic)
}
func (m *BgpBindingSidT) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpBindingSidT.Merge(m, src)
}
func (m *BgpBindingSidT) XXX_Size() int {
	return xxx_messageInfo_BgpBindingSidT.Size(m)
}
func (m *BgpBindingSidT) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpBindingSidT.DiscardUnknown(m)
}

var xxx_messageInfo_BgpBindingSidT proto.InternalMessageInfo

func (m *BgpBindingSidT) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *BgpBindingSidT) GetLabel() uint32 {
	if m != nil {
		return m.Label
	}
	return 0
}

func (m *BgpBindingSidT) GetIpv6Address() string {
	if m != nil {
		return m.Ipv6Address
	}
	return ""
}

type SrSid_ struct {
	Type                 string   `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Label                uint32   `protobuf:"varint,2,opt,name=label,proto3" json:"label,omitempty"`
	Ipv4Address          string   `protobuf:"bytes,3,opt,name=ipv4_address,json=ipv4Address,proto3" json:"ipv4_address,omitempty"`
	Ipv6Address          string   `protobuf:"bytes,4,opt,name=ipv6_address,json=ipv6Address,proto3" json:"ipv6_address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SrSid_) Reset()         { *m = SrSid_{} }
func (m *SrSid_) String() string { return proto.CompactTextString(m) }
func (*SrSid_) ProtoMessage()    {}
func (*SrSid_) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb29889f75ad586c, []int{15}
}

func (m *SrSid_) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SrSid_.Unmarshal(m, b)
}
func (m *SrSid_) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SrSid_.Marshal(b, m, deterministic)
}
func (m *SrSid_) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SrSid_.Merge(m, src)
}
func (m *SrSid_) XXX_Size() int {
	return xxx_messageInfo_SrSid_.Size(m)
}
func (m *SrSid_) XXX_DiscardUnknown() {
	xxx_messageInfo_SrSid_.DiscardUnknown(m)
}

var xxx_messageInfo_SrSid_ proto.InternalMessageInfo

func (m *SrSid_) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *SrSid_) GetLabel() uint32 {
	if m != nil {
		return m.Label
	}
	return 0
}

func (m *SrSid_) GetIpv4Address() string {
	if m != nil {
		return m.Ipv4Address
	}
	return ""
}

func (m *SrSid_) GetIpv6Address() string {
	if m != nil {
		return m.Ipv6Address
	}
	return ""
}

type SrExppath_ struct {
	Weight               uint32    `protobuf:"varint,1,opt,name=weight,proto3" json:"weight,omitempty"`
	Segment              []*SrSid_ `protobuf:"bytes,2,rep,name=segment,proto3" json:"segment,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *SrExppath_) Reset()         { *m = SrExppath_{} }
func (m *SrExppath_) String() string { return proto.CompactTextString(m) }
func (*SrExppath_) ProtoMessage()    {}
func (*SrExppath_) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb29889f75ad586c, []int{16}
}

func (m *SrExppath_) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SrExppath_.Unmarshal(m, b)
}
func (m *SrExppath_) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SrExppath_.Marshal(b, m, deterministic)
}
func (m *SrExppath_) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SrExppath_.Merge(m, src)
}
func (m *SrExppath_) XXX_Size() int {
	return xxx_messageInfo_SrExppath_.Size(m)
}
func (m *SrExppath_) XXX_DiscardUnknown() {
	xxx_messageInfo_SrExppath_.DiscardUnknown(m)
}

var xxx_messageInfo_SrExppath_ proto.InternalMessageInfo

func (m *SrExppath_) GetWeight() uint32 {
	if m != nil {
		return m.Weight
	}
	return 0
}

func (m *SrExppath_) GetSegment() []*SrSid_ {
	if m != nil {
		return m.Segment
	}
	return nil
}

type BgpSrpolicyEntry_ struct {
	TunnelEncapType      uint32          `protobuf:"varint,1,opt,name=tunnel_encap_type,json=tunnelEncapType,proto3" json:"tunnel_encap_type,omitempty"`
	BindingSid           *BgpBindingSidT `protobuf:"bytes,2,opt,name=binding_sid,json=bindingSid,proto3" json:"binding_sid,omitempty"`
	AllocatedBindingSid  *BgpBindingSidT `protobuf:"bytes,3,opt,name=allocated_binding_sid,json=allocatedBindingSid,proto3" json:"allocated_binding_sid,omitempty"`
	Preference           uint32          `protobuf:"varint,4,opt,name=preference,proto3" json:"preference,omitempty"`
	State                bool            `protobuf:"varint,5,opt,name=state,proto3" json:"state,omitempty"`
	RequestState         string          `protobuf:"bytes,6,opt,name=request_state,json=requestState,proto3" json:"request_state,omitempty"`
	SegmentList          []*SrExppath_   `protobuf:"bytes,7,rep,name=segment_list,json=segmentList,proto3" json:"segment_list,omitempty"`
	Usable               bool            `protobuf:"varint,8,opt,name=usable,proto3" json:"usable,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *BgpSrpolicyEntry_) Reset()         { *m = BgpSrpolicyEntry_{} }
func (m *BgpSrpolicyEntry_) String() string { return proto.CompactTextString(m) }
func (*BgpSrpolicyEntry_) ProtoMessage()    {}
func (*BgpSrpolicyEntry_) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb29889f75ad586c, []int{17}
}

func (m *BgpSrpolicyEntry_) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BgpSrpolicyEntry_.Unmarshal(m, b)
}
func (m *BgpSrpolicyEntry_) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BgpSrpolicyEntry_.Marshal(b, m, deterministic)
}
func (m *BgpSrpolicyEntry_) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpSrpolicyEntry_.Merge(m, src)
}
func (m *BgpSrpolicyEntry_) XXX_Size() int {
	return xxx_messageInfo_BgpSrpolicyEntry_.Size(m)
}
func (m *BgpSrpolicyEntry_) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpSrpolicyEntry_.DiscardUnknown(m)
}

var xxx_messageInfo_BgpSrpolicyEntry_ proto.InternalMessageInfo

func (m *BgpSrpolicyEntry_) GetTunnelEncapType() uint32 {
	if m != nil {
		return m.TunnelEncapType
	}
	return 0
}

func (m *BgpSrpolicyEntry_) GetBindingSid() *BgpBindingSidT {
	if m != nil {
		return m.BindingSid
	}
	return nil
}

func (m *BgpSrpolicyEntry_) GetAllocatedBindingSid() *BgpBindingSidT {
	if m != nil {
		return m.AllocatedBindingSid
	}
	return nil
}

func (m *BgpSrpolicyEntry_) GetPreference() uint32 {
	if m != nil {
		return m.Preference
	}
	return 0
}

func (m *BgpSrpolicyEntry_) GetState() bool {
	if m != nil {
		return m.State
	}
	return false
}

func (m *BgpSrpolicyEntry_) GetRequestState() string {
	if m != nil {
		return m.RequestState
	}
	return ""
}

func (m *BgpSrpolicyEntry_) GetSegmentList() []*SrExppath_ {
	if m != nil {
		return m.SegmentList
	}
	return nil
}

func (m *BgpSrpolicyEntry_) GetUsable() bool {
	if m != nil {
		return m.Usable
	}
	return false
}

type BgpTunencapEntry_ struct {
	SrPolicy             *BgpSrpolicyEntry_ `protobuf:"bytes,1,opt,name=sr_policy,json=srPolicy,proto3" json:"sr_policy,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *BgpTunencapEntry_) Reset()         { *m = BgpTunencapEntry_{} }
func (m *BgpTunencapEntry_) String() string { return proto.CompactTextString(m) }
func (*BgpTunencapEntry_) ProtoMessage()    {}
func (*BgpTunencapEntry_) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb29889f75ad586c, []int{18}
}

func (m *BgpTunencapEntry_) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BgpTunencapEntry_.Unmarshal(m, b)
}
func (m *BgpTunencapEntry_) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BgpTunencapEntry_.Marshal(b, m, deterministic)
}
func (m *BgpTunencapEntry_) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpTunencapEntry_.Merge(m, src)
}
func (m *BgpTunencapEntry_) XXX_Size() int {
	return xxx_messageInfo_BgpTunencapEntry_.Size(m)
}
func (m *BgpTunencapEntry_) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpTunencapEntry_.DiscardUnknown(m)
}

var xxx_messageInfo_BgpTunencapEntry_ proto.InternalMessageInfo

func (m *BgpTunencapEntry_) GetSrPolicy() *BgpSrpolicyEntry_ {
	if m != nil {
		return m.SrPolicy
	}
	return nil
}

type BgpBagLargecomm_ struct {
	GlobalAdmin          uint32   `protobuf:"varint,1,opt,name=global_admin,json=globalAdmin,proto3" json:"global_admin,omitempty"`
	LocalData1           uint32   `protobuf:"varint,2,opt,name=local_data1,json=localData1,proto3" json:"local_data1,omitempty"`
	LocalData2           uint32   `protobuf:"varint,3,opt,name=local_data2,json=localData2,proto3" json:"local_data2,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BgpBagLargecomm_) Reset()         { *m = BgpBagLargecomm_{} }
func (m *BgpBagLargecomm_) String() string { return proto.CompactTextString(m) }
func (*BgpBagLargecomm_) ProtoMessage()    {}
func (*BgpBagLargecomm_) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb29889f75ad586c, []int{19}
}

func (m *BgpBagLargecomm_) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BgpBagLargecomm_.Unmarshal(m, b)
}
func (m *BgpBagLargecomm_) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BgpBagLargecomm_.Marshal(b, m, deterministic)
}
func (m *BgpBagLargecomm_) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpBagLargecomm_.Merge(m, src)
}
func (m *BgpBagLargecomm_) XXX_Size() int {
	return xxx_messageInfo_BgpBagLargecomm_.Size(m)
}
func (m *BgpBagLargecomm_) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpBagLargecomm_.DiscardUnknown(m)
}

var xxx_messageInfo_BgpBagLargecomm_ proto.InternalMessageInfo

func (m *BgpBagLargecomm_) GetGlobalAdmin() uint32 {
	if m != nil {
		return m.GlobalAdmin
	}
	return 0
}

func (m *BgpBagLargecomm_) GetLocalData1() uint32 {
	if m != nil {
		return m.LocalData1
	}
	return 0
}

func (m *BgpBagLargecomm_) GetLocalData2() uint32 {
	if m != nil {
		return m.LocalData2
	}
	return 0
}

type BgpCommonAttrEntry_ struct {
	IsMetricPresent               bool                  `protobuf:"varint,1,opt,name=is_metric_present,json=isMetricPresent,proto3" json:"is_metric_present,omitempty"`
	IsLocalPrefPresent            bool                  `protobuf:"varint,2,opt,name=is_local_pref_present,json=isLocalPrefPresent,proto3" json:"is_local_pref_present,omitempty"`
	IsAtomicAggregatePresent      bool                  `protobuf:"varint,3,opt,name=is_atomic_aggregate_present,json=isAtomicAggregatePresent,proto3" json:"is_atomic_aggregate_present,omitempty"`
	IsAggregatorPresent           bool                  `protobuf:"varint,4,opt,name=is_aggregator_present,json=isAggregatorPresent,proto3" json:"is_aggregator_present,omitempty"`
	IsOriginPresent               bool                  `protobuf:"varint,5,opt,name=is_origin_present,json=isOriginPresent,proto3" json:"is_origin_present,omitempty"`
	IsAsPathPresent               bool                  `protobuf:"varint,6,opt,name=is_as_path_present,json=isAsPathPresent,proto3" json:"is_as_path_present,omitempty"`
	IsCommunityPresent            bool                  `protobuf:"varint,7,opt,name=is_community_present,json=isCommunityPresent,proto3" json:"is_community_present,omitempty"`
	IsExtendedCommunityPresent    bool                  `protobuf:"varint,8,opt,name=is_extended_community_present,json=isExtendedCommunityPresent,proto3" json:"is_extended_community_present,omitempty"`
	IsSsaPresent                  bool                  `protobuf:"varint,9,opt,name=is_ssa_present,json=isSsaPresent,proto3" json:"is_ssa_present,omitempty"`
	IsConnectorPresent            bool                  `protobuf:"varint,10,opt,name=is_connector_present,json=isConnectorPresent,proto3" json:"is_connector_present,omitempty"`
	IsPmsiPresent                 bool                  `protobuf:"varint,11,opt,name=is_pmsi_present,json=isPmsiPresent,proto3" json:"is_pmsi_present,omitempty"`
	IsPppmpPresent                bool                  `protobuf:"varint,12,opt,name=is_pppmp_present,json=isPppmpPresent,proto3" json:"is_pppmp_present,omitempty"`
	IsAigpPresent                 bool                  `protobuf:"varint,13,opt,name=is_aigp_present,json=isAigpPresent,proto3" json:"is_aigp_present,omitempty"`
	IsPeDistinguisherLabelPresent bool                  `protobuf:"varint,14,opt,name=is_pe_distinguisher_label_present,json=isPeDistinguisherLabelPresent,proto3" json:"is_pe_distinguisher_label_present,omitempty"`
	IsLsAttributePresent          bool                  `protobuf:"varint,15,opt,name=is_ls_attribute_present,json=isLsAttributePresent,proto3" json:"is_ls_attribute_present,omitempty"`
	IsLabelIndexPresent           bool                  `protobuf:"varint,16,opt,name=is_label_index_present,json=isLabelIndexPresent,proto3" json:"is_label_index_present,omitempty"`
	NeighborAs                    uint32                `protobuf:"varint,17,opt,name=neighbor_as,json=neighborAs,proto3" json:"neighbor_as,omitempty"`
	AggregatorAs                  uint32                `protobuf:"varint,18,opt,name=aggregator_as,json=aggregatorAs,proto3" json:"aggregator_as,omitempty"`
	AggregatorAddress             string                `protobuf:"bytes,19,opt,name=aggregator_address,json=aggregatorAddress,proto3" json:"aggregator_address,omitempty"`
	Metric                        uint32                `protobuf:"varint,20,opt,name=metric,proto3" json:"metric,omitempty"`
	LocalPreference               uint32                `protobuf:"varint,21,opt,name=local_preference,json=localPreference,proto3" json:"local_preference,omitempty"`
	Origin                        uint32                `protobuf:"varint,22,opt,name=origin,proto3" json:"origin,omitempty"`
	AsPath                        string                `protobuf:"bytes,23,opt,name=as_path,json=asPath,proto3" json:"as_path,omitempty"`
	Community                     []uint32              `protobuf:"varint,24,rep,packed,name=community,proto3" json:"community,omitempty"`
	ExtendedCommunityFlags        uint32                `protobuf:"varint,25,opt,name=extended_community_flags,json=extendedCommunityFlags,proto3" json:"extended_community_flags,omitempty"`
	ExtendedCommunity             []uint32              `protobuf:"varint,26,rep,packed,name=extended_community,json=extendedCommunity,proto3" json:"extended_community,omitempty"`
	UnknownAttribute              []uint32              `protobuf:"varint,27,rep,packed,name=unknown_attribute,json=unknownAttribute,proto3" json:"unknown_attribute,omitempty"`
	Cluster                       []uint32              `protobuf:"varint,28,rep,packed,name=cluster,proto3" json:"cluster,omitempty"`
	Originator                    string                `protobuf:"bytes,29,opt,name=originator,proto3" json:"originator,omitempty"`
	L2Tpv3SessionId               uint32                `protobuf:"varint,30,opt,name=l2tpv3_session_id,json=l2tpv3SessionId,proto3" json:"l2tpv3_session_id,omitempty"`
	L2Tpv3Cookie                  []uint32              `protobuf:"varint,31,rep,packed,name=l2tpv3_cookie,json=l2tpv3Cookie,proto3" json:"l2tpv3_cookie,omitempty"`
	ConnectorType                 uint32                `protobuf:"varint,32,opt,name=connector_type,json=connectorType,proto3" json:"connector_type,omitempty"`
	ConnectorValue                []uint32              `protobuf:"varint,33,rep,packed,name=connector_value,json=connectorValue,proto3" json:"connector_value,omitempty"`
	AigpMetricValue               uint64                `protobuf:"varint,34,opt,name=aigp_metric_value,json=aigpMetricValue,proto3" json:"aigp_metric_value,omitempty"`
	PmsiType                      uint32                `protobuf:"varint,35,opt,name=pmsi_type,json=pmsiType,proto3" json:"pmsi_type,omitempty"`
	PmsiFlags                     uint32                `protobuf:"varint,36,opt,name=pmsi_flags,json=pmsiFlags,proto3" json:"pmsi_flags,omitempty"`
	PmsiLabel                     uint32                `protobuf:"varint,37,opt,name=pmsi_label,json=pmsiLabel,proto3" json:"pmsi_label,omitempty"`
	PmsiValue                     []uint32              `protobuf:"varint,38,rep,packed,name=pmsi_value,json=pmsiValue,proto3" json:"pmsi_value,omitempty"`
	PpmPvalue                     uint32                `protobuf:"varint,39,opt,name=ppm_pvalue,json=ppmPvalue,proto3" json:"ppm_pvalue,omitempty"`
	PeDistinguisherLabel          []*BgpPedistlblEntry_ `protobuf:"bytes,40,rep,name=pe_distinguisher_label,json=peDistinguisherLabel,proto3" json:"pe_distinguisher_label,omitempty"`
	LsAttr                        []uint32              `protobuf:"varint,41,rep,packed,name=ls_attr,json=lsAttr,proto3" json:"ls_attr,omitempty"`
	PrefixSidAttr                 *BgpPsidType_         `protobuf:"bytes,42,opt,name=prefix_sid_attr,json=prefixSidAttr,proto3" json:"prefix_sid_attr,omitempty"`
	TunnelEncap                   *BgpTunencapEntry_    `protobuf:"bytes,43,opt,name=tunnel_encap,json=tunnelEncap,proto3" json:"tunnel_encap,omitempty"`
	IsLargeCommunityPresent       bool                  `protobuf:"varint,44,opt,name=is_large_community_present,json=isLargeCommunityPresent,proto3" json:"is_large_community_present,omitempty"`
	LargeCommunity                []*BgpBagLargecomm_   `protobuf:"bytes,45,rep,name=large_community,json=largeCommunity,proto3" json:"large_community,omitempty"`
	XXX_NoUnkeyedLiteral          struct{}              `json:"-"`
	XXX_unrecognized              []byte                `json:"-"`
	XXX_sizecache                 int32                 `json:"-"`
}

func (m *BgpCommonAttrEntry_) Reset()         { *m = BgpCommonAttrEntry_{} }
func (m *BgpCommonAttrEntry_) String() string { return proto.CompactTextString(m) }
func (*BgpCommonAttrEntry_) ProtoMessage()    {}
func (*BgpCommonAttrEntry_) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb29889f75ad586c, []int{20}
}

func (m *BgpCommonAttrEntry_) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BgpCommonAttrEntry_.Unmarshal(m, b)
}
func (m *BgpCommonAttrEntry_) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BgpCommonAttrEntry_.Marshal(b, m, deterministic)
}
func (m *BgpCommonAttrEntry_) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpCommonAttrEntry_.Merge(m, src)
}
func (m *BgpCommonAttrEntry_) XXX_Size() int {
	return xxx_messageInfo_BgpCommonAttrEntry_.Size(m)
}
func (m *BgpCommonAttrEntry_) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpCommonAttrEntry_.DiscardUnknown(m)
}

var xxx_messageInfo_BgpCommonAttrEntry_ proto.InternalMessageInfo

func (m *BgpCommonAttrEntry_) GetIsMetricPresent() bool {
	if m != nil {
		return m.IsMetricPresent
	}
	return false
}

func (m *BgpCommonAttrEntry_) GetIsLocalPrefPresent() bool {
	if m != nil {
		return m.IsLocalPrefPresent
	}
	return false
}

func (m *BgpCommonAttrEntry_) GetIsAtomicAggregatePresent() bool {
	if m != nil {
		return m.IsAtomicAggregatePresent
	}
	return false
}

func (m *BgpCommonAttrEntry_) GetIsAggregatorPresent() bool {
	if m != nil {
		return m.IsAggregatorPresent
	}
	return false
}

func (m *BgpCommonAttrEntry_) GetIsOriginPresent() bool {
	if m != nil {
		return m.IsOriginPresent
	}
	return false
}

func (m *BgpCommonAttrEntry_) GetIsAsPathPresent() bool {
	if m != nil {
		return m.IsAsPathPresent
	}
	return false
}

func (m *BgpCommonAttrEntry_) GetIsCommunityPresent() bool {
	if m != nil {
		return m.IsCommunityPresent
	}
	return false
}

func (m *BgpCommonAttrEntry_) GetIsExtendedCommunityPresent() bool {
	if m != nil {
		return m.IsExtendedCommunityPresent
	}
	return false
}

func (m *BgpCommonAttrEntry_) GetIsSsaPresent() bool {
	if m != nil {
		return m.IsSsaPresent
	}
	return false
}

func (m *BgpCommonAttrEntry_) GetIsConnectorPresent() bool {
	if m != nil {
		return m.IsConnectorPresent
	}
	return false
}

func (m *BgpCommonAttrEntry_) GetIsPmsiPresent() bool {
	if m != nil {
		return m.IsPmsiPresent
	}
	return false
}

func (m *BgpCommonAttrEntry_) GetIsPppmpPresent() bool {
	if m != nil {
		return m.IsPppmpPresent
	}
	return false
}

func (m *BgpCommonAttrEntry_) GetIsAigpPresent() bool {
	if m != nil {
		return m.IsAigpPresent
	}
	return false
}

func (m *BgpCommonAttrEntry_) GetIsPeDistinguisherLabelPresent() bool {
	if m != nil {
		return m.IsPeDistinguisherLabelPresent
	}
	return false
}

func (m *BgpCommonAttrEntry_) GetIsLsAttributePresent() bool {
	if m != nil {
		return m.IsLsAttributePresent
	}
	return false
}

func (m *BgpCommonAttrEntry_) GetIsLabelIndexPresent() bool {
	if m != nil {
		return m.IsLabelIndexPresent
	}
	return false
}

func (m *BgpCommonAttrEntry_) GetNeighborAs() uint32 {
	if m != nil {
		return m.NeighborAs
	}
	return 0
}

func (m *BgpCommonAttrEntry_) GetAggregatorAs() uint32 {
	if m != nil {
		return m.AggregatorAs
	}
	return 0
}

func (m *BgpCommonAttrEntry_) GetAggregatorAddress() string {
	if m != nil {
		return m.AggregatorAddress
	}
	return ""
}

func (m *BgpCommonAttrEntry_) GetMetric() uint32 {
	if m != nil {
		return m.Metric
	}
	return 0
}

func (m *BgpCommonAttrEntry_) GetLocalPreference() uint32 {
	if m != nil {
		return m.LocalPreference
	}
	return 0
}

func (m *BgpCommonAttrEntry_) GetOrigin() uint32 {
	if m != nil {
		return m.Origin
	}
	return 0
}

func (m *BgpCommonAttrEntry_) GetAsPath() string {
	if m != nil {
		return m.AsPath
	}
	return ""
}

func (m *BgpCommonAttrEntry_) GetCommunity() []uint32 {
	if m != nil {
		return m.Community
	}
	return nil
}

func (m *BgpCommonAttrEntry_) GetExtendedCommunityFlags() uint32 {
	if m != nil {
		return m.ExtendedCommunityFlags
	}
	return 0
}

func (m *BgpCommonAttrEntry_) GetExtendedCommunity() []uint32 {
	if m != nil {
		return m.ExtendedCommunity
	}
	return nil
}

func (m *BgpCommonAttrEntry_) GetUnknownAttribute() []uint32 {
	if m != nil {
		return m.UnknownAttribute
	}
	return nil
}

func (m *BgpCommonAttrEntry_) GetCluster() []uint32 {
	if m != nil {
		return m.Cluster
	}
	return nil
}

func (m *BgpCommonAttrEntry_) GetOriginator() string {
	if m != nil {
		return m.Originator
	}
	return ""
}

func (m *BgpCommonAttrEntry_) GetL2Tpv3SessionId() uint32 {
	if m != nil {
		return m.L2Tpv3SessionId
	}
	return 0
}

func (m *BgpCommonAttrEntry_) GetL2Tpv3Cookie() []uint32 {
	if m != nil {
		return m.L2Tpv3Cookie
	}
	return nil
}

func (m *BgpCommonAttrEntry_) GetConnectorType() uint32 {
	if m != nil {
		return m.ConnectorType
	}
	return 0
}

func (m *BgpCommonAttrEntry_) GetConnectorValue() []uint32 {
	if m != nil {
		return m.ConnectorValue
	}
	return nil
}

func (m *BgpCommonAttrEntry_) GetAigpMetricValue() uint64 {
	if m != nil {
		return m.AigpMetricValue
	}
	return 0
}

func (m *BgpCommonAttrEntry_) GetPmsiType() uint32 {
	if m != nil {
		return m.PmsiType
	}
	return 0
}

func (m *BgpCommonAttrEntry_) GetPmsiFlags() uint32 {
	if m != nil {
		return m.PmsiFlags
	}
	return 0
}

func (m *BgpCommonAttrEntry_) GetPmsiLabel() uint32 {
	if m != nil {
		return m.PmsiLabel
	}
	return 0
}

func (m *BgpCommonAttrEntry_) GetPmsiValue() []uint32 {
	if m != nil {
		return m.PmsiValue
	}
	return nil
}

func (m *BgpCommonAttrEntry_) GetPpmPvalue() uint32 {
	if m != nil {
		return m.PpmPvalue
	}
	return 0
}

func (m *BgpCommonAttrEntry_) GetPeDistinguisherLabel() []*BgpPedistlblEntry_ {
	if m != nil {
		return m.PeDistinguisherLabel
	}
	return nil
}

func (m *BgpCommonAttrEntry_) GetLsAttr() []uint32 {
	if m != nil {
		return m.LsAttr
	}
	return nil
}

func (m *BgpCommonAttrEntry_) GetPrefixSidAttr() *BgpPsidType_ {
	if m != nil {
		return m.PrefixSidAttr
	}
	return nil
}

func (m *BgpCommonAttrEntry_) GetTunnelEncap() *BgpTunencapEntry_ {
	if m != nil {
		return m.TunnelEncap
	}
	return nil
}

func (m *BgpCommonAttrEntry_) GetIsLargeCommunityPresent() bool {
	if m != nil {
		return m.IsLargeCommunityPresent
	}
	return false
}

func (m *BgpCommonAttrEntry_) GetLargeCommunity() []*BgpBagLargecomm_ {
	if m != nil {
		return m.LargeCommunity
	}
	return nil
}

type BgpAttrRnhAddrT struct {
	Len                  string   `protobuf:"bytes,1,opt,name=len,proto3" json:"len,omitempty"`
	Ipv4Address          string   `protobuf:"bytes,2,opt,name=ipv4_address,json=ipv4Address,proto3" json:"ipv4_address,omitempty"`
	Ipv6Address          string   `protobuf:"bytes,3,opt,name=ipv6_address,json=ipv6Address,proto3" json:"ipv6_address,omitempty"`
	MacAddress           string   `protobuf:"bytes,4,opt,name=mac_address,json=macAddress,proto3" json:"mac_address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BgpAttrRnhAddrT) Reset()         { *m = BgpAttrRnhAddrT{} }
func (m *BgpAttrRnhAddrT) String() string { return proto.CompactTextString(m) }
func (*BgpAttrRnhAddrT) ProtoMessage()    {}
func (*BgpAttrRnhAddrT) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb29889f75ad586c, []int{21}
}

func (m *BgpAttrRnhAddrT) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BgpAttrRnhAddrT.Unmarshal(m, b)
}
func (m *BgpAttrRnhAddrT) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BgpAttrRnhAddrT.Marshal(b, m, deterministic)
}
func (m *BgpAttrRnhAddrT) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpAttrRnhAddrT.Merge(m, src)
}
func (m *BgpAttrRnhAddrT) XXX_Size() int {
	return xxx_messageInfo_BgpAttrRnhAddrT.Size(m)
}
func (m *BgpAttrRnhAddrT) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpAttrRnhAddrT.DiscardUnknown(m)
}

var xxx_messageInfo_BgpAttrRnhAddrT proto.InternalMessageInfo

func (m *BgpAttrRnhAddrT) GetLen() string {
	if m != nil {
		return m.Len
	}
	return ""
}

func (m *BgpAttrRnhAddrT) GetIpv4Address() string {
	if m != nil {
		return m.Ipv4Address
	}
	return ""
}

func (m *BgpAttrRnhAddrT) GetIpv6Address() string {
	if m != nil {
		return m.Ipv6Address
	}
	return ""
}

func (m *BgpAttrRnhAddrT) GetMacAddress() string {
	if m != nil {
		return m.MacAddress
	}
	return ""
}

type BgpAttr_ struct {
	IsAsPath2Byte               bool                 `protobuf:"varint,1,opt,name=is_as_path2_byte,json=isAsPath2Byte,proto3" json:"is_as_path2_byte,omitempty"`
	IsApplicationGatewayPresent bool                 `protobuf:"varint,2,opt,name=is_application_gateway_present,json=isApplicationGatewayPresent,proto3" json:"is_application_gateway_present,omitempty"`
	IsAttrSetPresent            bool                 `protobuf:"varint,3,opt,name=is_attr_set_present,json=isAttrSetPresent,proto3" json:"is_attr_set_present,omitempty"`
	SetAigpInboundIgp           bool                 `protobuf:"varint,4,opt,name=set_aigp_inbound_igp,json=setAigpInboundIgp,proto3" json:"set_aigp_inbound_igp,omitempty"`
	SetAigpInboundMetric        bool                 `protobuf:"varint,5,opt,name=set_aigp_inbound_metric,json=setAigpInboundMetric,proto3" json:"set_aigp_inbound_metric,omitempty"`
	IsRnhPresent                bool                 `protobuf:"varint,6,opt,name=is_rnh_present,json=isRnhPresent,proto3" json:"is_rnh_present,omitempty"`
	IsRibrnhPresent             bool                 `protobuf:"varint,7,opt,name=is_ribrnh_present,json=isRibrnhPresent,proto3" json:"is_ribrnh_present,omitempty"`
	AttributeKeyNumber          uint32               `protobuf:"varint,8,opt,name=attribute_key_number,json=attributeKeyNumber,proto3" json:"attribute_key_number,omitempty"`
	AttributeReuseIdConfig      bool                 `protobuf:"varint,9,opt,name=attribute_reuse_id_config,json=attributeReuseIdConfig,proto3" json:"attribute_reuse_id_config,omitempty"`
	AttributeReuseIdMaxId       uint32               `protobuf:"varint,10,opt,name=attribute_reuse_id_max_id,json=attributeReuseIdMaxId,proto3" json:"attribute_reuse_id_max_id,omitempty"`
	AttributeReuseIdNode        uint32               `protobuf:"varint,11,opt,name=attribute_reuse_id_node,json=attributeReuseIdNode,proto3" json:"attribute_reuse_id_node,omitempty"`
	AttributeReuseIdCurrent     uint32               `protobuf:"varint,12,opt,name=attribute_reuse_id_current,json=attributeReuseIdCurrent,proto3" json:"attribute_reuse_id_current,omitempty"`
	AttributeReuseIdKeys        uint32               `protobuf:"varint,13,opt,name=attribute_reuse_id_keys,json=attributeReuseIdKeys,proto3" json:"attribute_reuse_id_keys,omitempty"`
	AttributeReuseIdRecoverSec  uint32               `protobuf:"varint,14,opt,name=attribute_reuse_id_recover_sec,json=attributeReuseIdRecoverSec,proto3" json:"attribute_reuse_id_recover_sec,omitempty"`
	VpnDistinguisher            uint32               `protobuf:"varint,15,opt,name=vpn_distinguisher,json=vpnDistinguisher,proto3" json:"vpn_distinguisher,omitempty"`
	CommonAttributes            *BgpCommonAttrEntry_ `protobuf:"bytes,16,opt,name=common_attributes,json=commonAttributes,proto3" json:"common_attributes,omitempty"`
	AttrSet                     *BgpCommonAttrEntry_ `protobuf:"bytes,17,opt,name=attr_set,json=attrSet,proto3" json:"attr_set,omitempty"`
	RnhType                     uint32               `protobuf:"varint,18,opt,name=rnh_type,json=rnhType,proto3" json:"rnh_type,omitempty"`
	RnhLen                      uint32               `protobuf:"varint,19,opt,name=rnh_len,json=rnhLen,proto3" json:"rnh_len,omitempty"`
	RnhAddrLen                  uint32               `protobuf:"varint,20,opt,name=rnh_addr_len,json=rnhAddrLen,proto3" json:"rnh_addr_len,omitempty"`
	RnhAddr                     *BgpAttrRnhAddrT     `protobuf:"bytes,21,opt,name=rnh_addr,json=rnhAddr,proto3" json:"rnh_addr,omitempty"`
	RibrnhTable                 uint32               `protobuf:"varint,22,opt,name=ribrnh_table,json=ribrnhTable,proto3" json:"ribrnh_table,omitempty"`
	RibrnhMac                   string               `protobuf:"bytes,23,opt,name=ribrnh_mac,json=ribrnhMac,proto3" json:"ribrnh_mac,omitempty"`
	RibrnhIp                    *BgpAddrtype         `protobuf:"bytes,24,opt,name=ribrnh_ip,json=ribrnhIp,proto3" json:"ribrnh_ip,omitempty"`
	RibrnhipTable               uint32               `protobuf:"varint,25,opt,name=ribrnhip_table,json=ribrnhipTable,proto3" json:"ribrnhip_table,omitempty"`
	RibrnhVni                   uint32               `protobuf:"varint,26,opt,name=ribrnh_vni,json=ribrnhVni,proto3" json:"ribrnh_vni,omitempty"`
	RibrnhEncap                 uint32               `protobuf:"varint,27,opt,name=ribrnh_encap,json=ribrnhEncap,proto3" json:"ribrnh_encap,omitempty"`
	XXX_NoUnkeyedLiteral        struct{}             `json:"-"`
	XXX_unrecognized            []byte               `json:"-"`
	XXX_sizecache               int32                `json:"-"`
}

func (m *BgpAttr_) Reset()         { *m = BgpAttr_{} }
func (m *BgpAttr_) String() string { return proto.CompactTextString(m) }
func (*BgpAttr_) ProtoMessage()    {}
func (*BgpAttr_) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb29889f75ad586c, []int{22}
}

func (m *BgpAttr_) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BgpAttr_.Unmarshal(m, b)
}
func (m *BgpAttr_) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BgpAttr_.Marshal(b, m, deterministic)
}
func (m *BgpAttr_) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpAttr_.Merge(m, src)
}
func (m *BgpAttr_) XXX_Size() int {
	return xxx_messageInfo_BgpAttr_.Size(m)
}
func (m *BgpAttr_) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpAttr_.DiscardUnknown(m)
}

var xxx_messageInfo_BgpAttr_ proto.InternalMessageInfo

func (m *BgpAttr_) GetIsAsPath2Byte() bool {
	if m != nil {
		return m.IsAsPath2Byte
	}
	return false
}

func (m *BgpAttr_) GetIsApplicationGatewayPresent() bool {
	if m != nil {
		return m.IsApplicationGatewayPresent
	}
	return false
}

func (m *BgpAttr_) GetIsAttrSetPresent() bool {
	if m != nil {
		return m.IsAttrSetPresent
	}
	return false
}

func (m *BgpAttr_) GetSetAigpInboundIgp() bool {
	if m != nil {
		return m.SetAigpInboundIgp
	}
	return false
}

func (m *BgpAttr_) GetSetAigpInboundMetric() bool {
	if m != nil {
		return m.SetAigpInboundMetric
	}
	return false
}

func (m *BgpAttr_) GetIsRnhPresent() bool {
	if m != nil {
		return m.IsRnhPresent
	}
	return false
}

func (m *BgpAttr_) GetIsRibrnhPresent() bool {
	if m != nil {
		return m.IsRibrnhPresent
	}
	return false
}

func (m *BgpAttr_) GetAttributeKeyNumber() uint32 {
	if m != nil {
		return m.AttributeKeyNumber
	}
	return 0
}

func (m *BgpAttr_) GetAttributeReuseIdConfig() bool {
	if m != nil {
		return m.AttributeReuseIdConfig
	}
	return false
}

func (m *BgpAttr_) GetAttributeReuseIdMaxId() uint32 {
	if m != nil {
		return m.AttributeReuseIdMaxId
	}
	return 0
}

func (m *BgpAttr_) GetAttributeReuseIdNode() uint32 {
	if m != nil {
		return m.AttributeReuseIdNode
	}
	return 0
}

func (m *BgpAttr_) GetAttributeReuseIdCurrent() uint32 {
	if m != nil {
		return m.AttributeReuseIdCurrent
	}
	return 0
}

func (m *BgpAttr_) GetAttributeReuseIdKeys() uint32 {
	if m != nil {
		return m.AttributeReuseIdKeys
	}
	return 0
}

func (m *BgpAttr_) GetAttributeReuseIdRecoverSec() uint32 {
	if m != nil {
		return m.AttributeReuseIdRecoverSec
	}
	return 0
}

func (m *BgpAttr_) GetVpnDistinguisher() uint32 {
	if m != nil {
		return m.VpnDistinguisher
	}
	return 0
}

func (m *BgpAttr_) GetCommonAttributes() *BgpCommonAttrEntry_ {
	if m != nil {
		return m.CommonAttributes
	}
	return nil
}

func (m *BgpAttr_) GetAttrSet() *BgpCommonAttrEntry_ {
	if m != nil {
		return m.AttrSet
	}
	return nil
}

func (m *BgpAttr_) GetRnhType() uint32 {
	if m != nil {
		return m.RnhType
	}
	return 0
}

func (m *BgpAttr_) GetRnhLen() uint32 {
	if m != nil {
		return m.RnhLen
	}
	return 0
}

func (m *BgpAttr_) GetRnhAddrLen() uint32 {
	if m != nil {
		return m.RnhAddrLen
	}
	return 0
}

func (m *BgpAttr_) GetRnhAddr() *BgpAttrRnhAddrT {
	if m != nil {
		return m.RnhAddr
	}
	return nil
}

func (m *BgpAttr_) GetRibrnhTable() uint32 {
	if m != nil {
		return m.RibrnhTable
	}
	return 0
}

func (m *BgpAttr_) GetRibrnhMac() string {
	if m != nil {
		return m.RibrnhMac
	}
	return ""
}

func (m *BgpAttr_) GetRibrnhIp() *BgpAddrtype {
	if m != nil {
		return m.RibrnhIp
	}
	return nil
}

func (m *BgpAttr_) GetRibrnhipTable() uint32 {
	if m != nil {
		return m.RibrnhipTable
	}
	return 0
}

func (m *BgpAttr_) GetRibrnhVni() uint32 {
	if m != nil {
		return m.RibrnhVni
	}
	return 0
}

func (m *BgpAttr_) GetRibrnhEncap() uint32 {
	if m != nil {
		return m.RibrnhEncap
	}
	return 0
}

type BgpPathBag struct {
	NoPath                           bool         `protobuf:"varint,50,opt,name=no_path,json=noPath,proto3" json:"no_path,omitempty"`
	AfName                           string       `protobuf:"bytes,51,opt,name=af_name,json=afName,proto3" json:"af_name,omitempty"`
	AdvertisedNeighbor               *BgpAddrtype `protobuf:"bytes,52,opt,name=advertised_neighbor,json=advertisedNeighbor,proto3" json:"advertised_neighbor,omitempty"`
	ProcessInstanceId                uint32       `protobuf:"varint,53,opt,name=process_instance_id,json=processInstanceId,proto3" json:"process_instance_id,omitempty"`
	LabelOor                         bool         `protobuf:"varint,54,opt,name=label_oor,json=labelOor,proto3" json:"label_oor,omitempty"`
	LabelOorVersion                  uint32       `protobuf:"varint,55,opt,name=label_oor_version,json=labelOorVersion,proto3" json:"label_oor_version,omitempty"`
	LabelFail                        bool         `protobuf:"varint,56,opt,name=label_fail,json=labelFail,proto3" json:"label_fail,omitempty"`
	PathInformation                  *BgpPath_    `protobuf:"bytes,57,opt,name=path_information,json=pathInformation,proto3" json:"path_information,omitempty"`
	AttributesAfterPolicyIn          *BgpAttr_    `protobuf:"bytes,58,opt,name=attributes_after_policy_in,json=attributesAfterPolicyIn,proto3" json:"attributes_after_policy_in,omitempty"`
	RouteDistinguisher               string       `protobuf:"bytes,59,opt,name=route_distinguisher,json=routeDistinguisher,proto3" json:"route_distinguisher,omitempty"`
	SourceRouteDistinguisher         string       `protobuf:"bytes,60,opt,name=source_route_distinguisher,json=sourceRouteDistinguisher,proto3" json:"source_route_distinguisher,omitempty"`
	OriginalSourceRouteDistinguisher string       `protobuf:"bytes,61,opt,name=original_source_route_distinguisher,json=originalSourceRouteDistinguisher,proto3" json:"original_source_route_distinguisher,omitempty"`
	PrefixVersion                    uint32       `protobuf:"varint,62,opt,name=prefix_version,json=prefixVersion,proto3" json:"prefix_version,omitempty"`
	VrfName                          string       `protobuf:"bytes,63,opt,name=vrf_name,json=vrfName,proto3" json:"vrf_name,omitempty"`
	SourceVrfName                    string       `protobuf:"bytes,64,opt,name=source_vrf_name,json=sourceVrfName,proto3" json:"source_vrf_name,omitempty"`
	SrcafName                        string       `protobuf:"bytes,65,opt,name=srcaf_name,json=srcafName,proto3" json:"srcaf_name,omitempty"`
	XXX_NoUnkeyedLiteral             struct{}     `json:"-"`
	XXX_unrecognized                 []byte       `json:"-"`
	XXX_sizecache                    int32        `json:"-"`
}

func (m *BgpPathBag) Reset()         { *m = BgpPathBag{} }
func (m *BgpPathBag) String() string { return proto.CompactTextString(m) }
func (*BgpPathBag) ProtoMessage()    {}
func (*BgpPathBag) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb29889f75ad586c, []int{23}
}

func (m *BgpPathBag) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BgpPathBag.Unmarshal(m, b)
}
func (m *BgpPathBag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BgpPathBag.Marshal(b, m, deterministic)
}
func (m *BgpPathBag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpPathBag.Merge(m, src)
}
func (m *BgpPathBag) XXX_Size() int {
	return xxx_messageInfo_BgpPathBag.Size(m)
}
func (m *BgpPathBag) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpPathBag.DiscardUnknown(m)
}

var xxx_messageInfo_BgpPathBag proto.InternalMessageInfo

func (m *BgpPathBag) GetNoPath() bool {
	if m != nil {
		return m.NoPath
	}
	return false
}

func (m *BgpPathBag) GetAfName() string {
	if m != nil {
		return m.AfName
	}
	return ""
}

func (m *BgpPathBag) GetAdvertisedNeighbor() *BgpAddrtype {
	if m != nil {
		return m.AdvertisedNeighbor
	}
	return nil
}

func (m *BgpPathBag) GetProcessInstanceId() uint32 {
	if m != nil {
		return m.ProcessInstanceId
	}
	return 0
}

func (m *BgpPathBag) GetLabelOor() bool {
	if m != nil {
		return m.LabelOor
	}
	return false
}

func (m *BgpPathBag) GetLabelOorVersion() uint32 {
	if m != nil {
		return m.LabelOorVersion
	}
	return 0
}

func (m *BgpPathBag) GetLabelFail() bool {
	if m != nil {
		return m.LabelFail
	}
	return false
}

func (m *BgpPathBag) GetPathInformation() *BgpPath_ {
	if m != nil {
		return m.PathInformation
	}
	return nil
}

func (m *BgpPathBag) GetAttributesAfterPolicyIn() *BgpAttr_ {
	if m != nil {
		return m.AttributesAfterPolicyIn
	}
	return nil
}

func (m *BgpPathBag) GetRouteDistinguisher() string {
	if m != nil {
		return m.RouteDistinguisher
	}
	return ""
}

func (m *BgpPathBag) GetSourceRouteDistinguisher() string {
	if m != nil {
		return m.SourceRouteDistinguisher
	}
	return ""
}

func (m *BgpPathBag) GetOriginalSourceRouteDistinguisher() string {
	if m != nil {
		return m.OriginalSourceRouteDistinguisher
	}
	return ""
}

func (m *BgpPathBag) GetPrefixVersion() uint32 {
	if m != nil {
		return m.PrefixVersion
	}
	return 0
}

func (m *BgpPathBag) GetVrfName() string {
	if m != nil {
		return m.VrfName
	}
	return ""
}

func (m *BgpPathBag) GetSourceVrfName() string {
	if m != nil {
		return m.SourceVrfName
	}
	return ""
}

func (m *BgpPathBag) GetSrcafName() string {
	if m != nil {
		return m.SrcafName
	}
	return ""
}

func init() {
	proto.RegisterType((*BgpPathBag_KEYS)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.vrfs.vrf.afs.af.path_labeled_table.path.bgp_path_bag_KEYS")
	proto.RegisterType((*BgpL2VpnAddrT)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.vrfs.vrf.afs.af.path_labeled_table.path.bgp_l2vpn_addr_t")
	proto.RegisterType((*BgpL2VpnMspwAddrT)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.vrfs.vrf.afs.af.path_labeled_table.path.bgp_l2vpn_mspw_addr_t")
	proto.RegisterType((*BgpIpv4SrpolicyAddrT)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.vrfs.vrf.afs.af.path_labeled_table.path.bgp_ipv4_srpolicy_addr_t")
	proto.RegisterType((*BgpIpv6SrpolicyAddrT)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.vrfs.vrf.afs.af.path_labeled_table.path.bgp_ipv6_srpolicy_addr_t")
	proto.RegisterType((*BgpAddrtype)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.vrfs.vrf.afs.af.path_labeled_table.path.bgp_addrtype")
	proto.RegisterType((*BgpPrefixtype)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.vrfs.vrf.afs.af.path_labeled_table.path.bgp_prefixtype")
	proto.RegisterType((*BgpTeTunnel)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.vrfs.vrf.afs.af.path_labeled_table.path.bgp_te_tunnel")
	proto.RegisterType((*BgpV4V6T)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.vrfs.vrf.afs.af.path_labeled_table.path.bgp_v4_v6_t")
	proto.RegisterType((*BgpAdvinfoType_)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.vrfs.vrf.afs.af.path_labeled_table.path.bgp_advinfo_type_")
	proto.RegisterType((*BgpPath_)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.vrfs.vrf.afs.af.path_labeled_table.path.bgp_path_")
	proto.RegisterType((*BgpPedistlblEntry_)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.vrfs.vrf.afs.af.path_labeled_table.path.bgp_pedistlbl_entry_")
	proto.RegisterType((*BgpPsidTlvType_)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.vrfs.vrf.afs.af.path_labeled_table.path.bgp_psid_tlv_type_")
	proto.RegisterType((*BgpPsidType_)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.vrfs.vrf.afs.af.path_labeled_table.path.bgp_psid_type_")
	proto.RegisterType((*BgpBindingSidT)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.vrfs.vrf.afs.af.path_labeled_table.path.bgp_binding_sid_t")
	proto.RegisterType((*SrSid_)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.vrfs.vrf.afs.af.path_labeled_table.path.sr_sid_")
	proto.RegisterType((*SrExppath_)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.vrfs.vrf.afs.af.path_labeled_table.path.sr_exppath_")
	proto.RegisterType((*BgpSrpolicyEntry_)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.vrfs.vrf.afs.af.path_labeled_table.path.bgp_srpolicy_entry_")
	proto.RegisterType((*BgpTunencapEntry_)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.vrfs.vrf.afs.af.path_labeled_table.path.bgp_tunencap_entry_")
	proto.RegisterType((*BgpBagLargecomm_)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.vrfs.vrf.afs.af.path_labeled_table.path.bgp_bag_largecomm_")
	proto.RegisterType((*BgpCommonAttrEntry_)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.vrfs.vrf.afs.af.path_labeled_table.path.bgp_common_attr_entry_")
	proto.RegisterType((*BgpAttrRnhAddrT)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.vrfs.vrf.afs.af.path_labeled_table.path.bgp_attr_rnh_addr_t")
	proto.RegisterType((*BgpAttr_)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.vrfs.vrf.afs.af.path_labeled_table.path.bgp_attr_")
	proto.RegisterType((*BgpPathBag)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.vrfs.vrf.afs.af.path_labeled_table.path.bgp_path_bag")
}

func init() { proto.RegisterFile("bgp_path_bag.proto", fileDescriptor_bb29889f75ad586c) }

var fileDescriptor_bb29889f75ad586c = []byte{
	// 5447 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x5c, 0x5b, 0x73, 0x1c, 0xc7,
	0x75, 0xae, 0x25, 0x48, 0x60, 0xd1, 0x8b, 0xc5, 0x65, 0x70, 0xe1, 0x90, 0x14, 0x49, 0x70, 0x29,
	0x8a, 0xa4, 0x44, 0x81, 0x16, 0x44, 0x43, 0x77, 0x5b, 0x20, 0x08, 0x8a, 0x6b, 0x01, 0x20, 0x32,
	0x4b, 0x51, 0x71, 0x6e, 0xe3, 0xd9, 0x99, 0xde, 0xdd, 0x36, 0x66, 0x7a, 0x46, 0xdd, 0xb3, 0x0b,
	0x40, 0x95, 0x9b, 0x53, 0x79, 0xc8, 0x4b, 0x52, 0xae, 0x4a, 0x25, 0x55, 0x71, 0xb9, 0x54, 0xa9,
	0xd8, 0x95, 0x54, 0x92, 0x87, 0x28, 0x2e, 0xa7, 0x9c, 0xca, 0x6b, 0x5e, 0xf2, 0x37, 0x92, 0x5f,
	0x92, 0xea, 0x73, 0xba, 0x7b, 0x66, 0x17, 0x4b, 0x97, 0xfd, 0x60, 0x80, 0x2f, 0x12, 0xe7, 0x9c,
	0xef, 0x74, 0x9f, 0xbe, 0x9e, 0x4b, 0x9f, 0x05, 0x71, 0xda, 0xdd, 0xcc, 0xcf, 0x82, 0xbc, 0xe7,
	0xb7, 0x83, 0xee, 0x5a, 0x26, 0xd2, 0x3c, 0x75, 0xbe, 0x1f, 0x32, 0x19, 0xa6, 0x3e, 0x4b, 0xa5,
	0x7f, 0x24, 0x7c, 0x96, 0x0d, 0x1e, 0xf8, 0x0a, 0x95, 0x66, 0x54, 0xac, 0xb5, 0xbb, 0xd9, 0x1a,
	0xe3, 0x32, 0x0f, 0x78, 0x48, 0xa5, 0xfd, 0x97, 0xfd, 0x87, 0xaf, 0xfe, 0x17, 0xb5, 0x8f, 0xd7,
	0x06, 0xa2, 0x23, 0xd5, 0x7f, 0xd6, 0x82, 0x8e, 0x5c, 0x0b, 0x3a, 0x6b, 0xd0, 0x45, 0x1c, 0xb4,
	0x69, 0x4c, 0x23, 0x3f, 0x0f, 0xda, 0x31, 0x05, 0x52, 0xe3, 0x7f, 0xcf, 0x91, 0x85, 0xb2, 0x0a,
	0xfe, 0xa7, 0xdb, 0xdf, 0x6d, 0x39, 0x37, 0x49, 0xdd, 0xb6, 0xc8, 0x83, 0x84, 0xba, 0x95, 0xd5,
	0xca, 0x9d, 0x69, 0x6f, 0xc6, 0x10, 0xf7, 0x82, 0x84, 0x3a, 0x97, 0x48, 0x75, 0x20, 0x3a, 0xc8,
	0x3f, 0x07, 0xfc, 0xa9, 0x81, 0xe8, 0x00, 0xeb, 0x22, 0x99, 0x0a, 0x34, 0x67, 0x02, 0x38, 0x93,
	0x01, 0x32, 0x66, 0xc9, 0x39, 0x11, 0xb9, 0xe7, 0x81, 0x76, 0x4e, 0x44, 0x8e, 0x4b, 0xa6, 0x38,
	0xcd, 0x0f, 0x53, 0x71, 0xe0, 0x5e, 0xc0, 0x26, 0xf4, 0xa7, 0x52, 0x21, 0x13, 0xb4, 0xc3, 0x8e,
	0xfc, 0x98, 0xf2, 0x6e, 0xde, 0x73, 0x27, 0x57, 0x2b, 0x77, 0xea, 0xde, 0x0c, 0x12, 0x77, 0x80,
	0xe6, 0xdc, 0x25, 0xf3, 0x9c, 0xb2, 0x6e, 0xaf, 0x9d, 0x0a, 0x3f, 0x88, 0x22, 0x41, 0xa5, 0x74,
	0xa7, 0xa0, 0x9d, 0x39, 0x43, 0xdf, 0x44, 0xb2, 0x73, 0x95, 0x10, 0x91, 0xf6, 0x73, 0xea, 0xe7,
	0xc7, 0x19, 0x75, 0xab, 0x00, 0x9a, 0x06, 0xca, 0xb3, 0xe3, 0x8c, 0x3a, 0x57, 0xc8, 0xb4, 0x4c,
	0xfb, 0x22, 0xa4, 0xbe, 0x88, 0xdc, 0x69, 0xe0, 0x56, 0x91, 0xe0, 0x45, 0xce, 0xab, 0x64, 0x36,
	0x15, 0xac, 0xeb, 0x17, 0x08, 0x82, 0xf3, 0xa1, 0xa8, 0x2d, 0x83, 0xba, 0x48, 0xa6, 0x60, 0x16,
	0x59, 0xe4, 0xd6, 0x40, 0xd7, 0x49, 0xf5, 0xd9, 0x8c, 0x1a, 0xef, 0x90, 0x79, 0x35, 0xc5, 0xf1,
	0xfa, 0x20, 0xe3, 0xa0, 0xa6, 0x9f, 0xab, 0xe1, 0x15, 0xdf, 0x4a, 0xed, 0xca, 0xea, 0x84, 0x1a,
	0x1e, 0x10, 0xb5, 0xce, 0x8d, 0x0f, 0xc9, 0x72, 0x21, 0x98, 0xc8, 0xec, 0xf0, 0xd7, 0x92, 0xde,
	0x23, 0xae, 0x92, 0x86, 0xfd, 0x23, 0x45, 0x96, 0xc6, 0x2c, 0x3c, 0x36, 0x0d, 0xac, 0x93, 0xe5,
	0x93, 0xf4, 0xa2, 0xa1, 0x45, 0xc5, 0x6c, 0x69, 0xde, 0xc9, 0xf6, 0x36, 0x5e, 0xd0, 0xde, 0xc6,
	0x2f, 0x6b, 0x6f, 0x63, 0xb4, 0xbd, 0xff, 0xae, 0x93, 0x19, 0xd5, 0xa0, 0x82, 0xaa, 0x45, 0x71,
	0xe6, 0xc9, 0x44, 0xd0, 0x61, 0x7a, 0xaf, 0xa9, 0x7f, 0x3a, 0x37, 0xc8, 0x0c, 0xa8, 0x69, 0x5a,
	0xc3, 0x6d, 0x56, 0x53, 0x34, 0xb3, 0xae, 0xf7, 0x88, 0x03, 0x90, 0x24, 0x0c, 0x64, 0x6e, 0x81,
	0xb8, 0xeb, 0xe6, 0x15, 0x67, 0x57, 0x31, 0x46, 0xd1, 0x70, 0x12, 0x2c, 0xfa, 0x7c, 0x81, 0xde,
	0x51, 0x0c, 0x83, 0x5e, 0x23, 0x30, 0x11, 0x7e, 0xde, 0xe7, 0xbc, 0x04, 0xc7, 0x9d, 0xba, 0xa0,
	0x58, 0xcf, 0x80, 0x63, 0xf0, 0x77, 0xc8, 0x3c, 0xea, 0x12, 0x15, 0x9a, 0x4c, 0x02, 0x78, 0x16,
	0x34, 0x89, 0xac, 0x1e, 0xb7, 0xc9, 0x9c, 0xa2, 0x94, 0x97, 0x70, 0xaa, 0x00, 0x16, 0x8b, 0xe8,
	0xbc, 0x45, 0x96, 0x34, 0x25, 0xc0, 0x21, 0x6a, 0x34, 0x6e, 0xe0, 0x45, 0xc3, 0xdb, 0x2d, 0x58,
	0x7a, 0xd2, 0x36, 0x6c, 0xc3, 0xd3, 0x76, 0xd2, 0x36, 0x86, 0xa7, 0x61, 0x63, 0x64, 0xd2, 0x88,
	0x9d, 0x86, 0x8d, 0x31, 0x93, 0xb6, 0x31, 0x32, 0x69, 0xb5, 0x02, 0x3d, 0x34, 0x69, 0x38, 0xb4,
	0x8d, 0xf2, 0xd0, 0x66, 0xec, 0xd0, 0x36, 0x4a, 0x43, 0xd3, 0x7b, 0x06, 0xf6, 0xf6, 0x90, 0x1e,
	0x75, 0x3b, 0x36, 0xc5, 0x1c, 0x52, 0xe5, 0x5f, 0x2a, 0xc4, 0xc1, 0x9d, 0x3f, 0xc8, 0x62, 0x69,
	0x25, 0x66, 0x57, 0x2b, 0x77, 0x6a, 0xeb, 0x7f, 0xb8, 0x76, 0x7a, 0x17, 0xe7, 0xda, 0xe8, 0x89,
	0xf6, 0xe6, 0xe1, 0xeb, 0x79, 0x16, 0xcb, 0xd2, 0x00, 0x45, 0xee, 0x87, 0x29, 0x97, 0xb9, 0x08,
	0x18, 0x2f, 0x06, 0x38, 0x87, 0x03, 0x14, 0xf9, 0x96, 0xe5, 0x19, 0x99, 0xbb, 0xb0, 0x85, 0x36,
	0x92, 0xf2, 0xf4, 0xcd, 0xe3, 0x8d, 0x66, 0xe8, 0xc3, 0xd0, 0x07, 0x43, 0xd0, 0x05, 0x0b, 0x7d,
	0x50, 0x86, 0xde, 0x33, 0xb3, 0x46, 0xcb, 0x60, 0x07, 0x57, 0x10, 0x38, 0xdb, 0x25, 0x74, 0x83,
	0xd4, 0x63, 0xe9, 0x97, 0xa6, 0x77, 0x11, 0x77, 0x50, 0x2c, 0x77, 0xec, 0xd8, 0xbe, 0xb6, 0x0b,
	0x61, 0xef, 0x25, 0x85, 0x5c, 0x82, 0x85, 0xf8, 0x41, 0xe5, 0x6c, 0x56, 0xa2, 0x74, 0x45, 0xea,
	0x61, 0xed, 0xca, 0xec, 0x70, 0x78, 0xbf, 0x3d, 0xf0, 0x3b, 0x71, 0x7a, 0x28, 0x33, 0x1a, 0x5a,
	0xa5, 0x97, 0x8b, 0xb3, 0xf4, 0x58, 0xf3, 0x46, 0xf6, 0xe8, 0x49, 0x99, 0x95, 0x62, 0x8f, 0x8e,
	0xca, 0xbc, 0x4b, 0x5c, 0x73, 0xb6, 0x4f, 0x88, 0x5d, 0x04, 0xb1, 0x15, 0xcd, 0x1f, 0x2f, 0xb9,
	0x31, 0x56, 0xd2, 0xb5, 0x92, 0x1b, 0x63, 0x24, 0xff, 0xab, 0x42, 0x56, 0xf4, 0x85, 0xee, 0x8f,
	0xdc, 0xc0, 0x97, 0x60, 0x49, 0xfe, 0xfc, 0xd4, 0x97, 0x64, 0x9c, 0xdd, 0x31, 0x86, 0x65, 0xbf,
	0x6c, 0x08, 0x8c, 0xf2, 0x1b, 0x63, 0x94, 0xbf, 0x7c, 0x76, 0xca, 0x6f, 0x8c, 0x55, 0x7e, 0x63,
	0x44, 0xf9, 0xc6, 0xff, 0x54, 0xc8, 0x2c, 0x38, 0x50, 0xe0, 0x97, 0x80, 0x1d, 0xfb, 0x61, 0x85,
	0x4c, 0xe2, 0x27, 0xd8, 0xb2, 0xda, 0xfa, 0xd1, 0x69, 0xab, 0x6f, 0x4c, 0xaa, 0xa7, 0xf5, 0x38,
	0xe9, 0x4d, 0x9d, 0x3b, 0xe9, 0x4d, 0x35, 0xfe, 0xef, 0x02, 0xa9, 0x2b, 0x69, 0xe5, 0x24, 0x81,
	0x5d, 0x73, 0xae, 0x93, 0x9a, 0xb6, 0x7d, 0xe0, 0x35, 0xa1, 0x65, 0x26, 0x48, 0x02, 0xb7, 0xa9,
	0x00, 0x94, 0xdc, 0x40, 0x0d, 0x00, 0x87, 0x6f, 0x95, 0xcc, 0x30, 0x69, 0x0c, 0x68, 0x3f, 0x03,
	0xc3, 0x5c, 0xf5, 0x08, 0x93, 0x68, 0x39, 0x3f, 0xcb, 0x9c, 0xfb, 0x64, 0xa9, 0x40, 0x30, 0xde,
	0x49, 0xd5, 0x88, 0x63, 0x0a, 0x46, 0xb9, 0xea, 0x2d, 0x18, 0x64, 0x93, 0x77, 0xd2, 0x96, 0x62,
	0x38, 0xdf, 0x28, 0x0b, 0x08, 0xda, 0x65, 0x32, 0xa7, 0x82, 0x46, 0x60, 0x96, 0xab, 0x9e, 0x63,
	0x04, 0x3c, 0xcb, 0xd1, 0x5d, 0xe8, 0xa1, 0x95, 0x24, 0x26, 0x4d, 0x17, 0x0f, 0xbb, 0xd9, 0x33,
	0x5a, 0x12, 0xb8, 0x47, 0x1c, 0xdd, 0xfe, 0x60, 0xc3, 0x17, 0xf4, 0x8b, 0x3e, 0x53, 0xf0, 0x29,
	0x80, 0xcf, 0x23, 0xe7, 0xf9, 0x86, 0xa7, 0xe9, 0xce, 0xeb, 0x64, 0xa1, 0x40, 0x53, 0xae, 0x96,
	0x22, 0x02, 0x03, 0x5d, 0xf5, 0xe6, 0x0c, 0x78, 0x1b, 0xc9, 0xce, 0x37, 0xc9, 0x45, 0x33, 0x61,
	0x69, 0xce, 0x3a, 0x7e, 0x87, 0x09, 0x99, 0xfb, 0x22, 0x1c, 0xa0, 0xd7, 0x59, 0xf5, 0x96, 0xf4,
	0xe4, 0x29, 0xee, 0x63, 0xc5, 0xf4, 0xc2, 0x41, 0xe4, 0xbc, 0x45, 0x96, 0xb5, 0x98, 0xcc, 0x83,
	0x9c, 0xfa, 0xf2, 0x80, 0x65, 0x6a, 0x24, 0x60, 0xb3, 0xab, 0x9e, 0xd6, 0xb6, 0xa5, 0x78, 0xad,
	0x03, 0x96, 0x79, 0xb4, 0xab, 0x96, 0xbc, 0xcd, 0x78, 0xc4, 0x78, 0x17, 0x77, 0x89, 0x76, 0x4a,
	0x67, 0x34, 0x11, 0x6c, 0xb6, 0xf2, 0x58, 0xcc, 0xcc, 0x77, 0xfc, 0x5e, 0xc0, 0xa3, 0x98, 0x82,
	0xb5, 0xae, 0x7b, 0xb3, 0x48, 0x6f, 0x76, 0x9e, 0x00, 0x15, 0x4c, 0x88, 0x32, 0xd2, 0x76, 0x29,
	0xa3, 0x20, 0xa7, 0x60, 0xaa, 0xeb, 0xde, 0xbc, 0xe2, 0x98, 0x05, 0x55, 0x74, 0xe5, 0x83, 0x68,
	0x60, 0x98, 0xc6, 0xa9, 0x00, 0x03, 0x5d, 0xf7, 0xf4, 0x5e, 0xd9, 0x52, 0xa4, 0xe1, 0x75, 0x07,
	0x94, 0x9f, 0xf2, 0xf8, 0x18, 0x8c, 0x63, 0x69, 0xdd, 0x01, 0xfc, 0x94, 0xc7, 0xc7, 0xca, 0x1b,
	0xd3, 0x68, 0xca, 0xa3, 0x2c, 0x05, 0x83, 0xda, 0x61, 0xda, 0x3a, 0xea, 0x15, 0xd8, 0xd6, 0x9c,
	0xcd, 0x0e, 0x73, 0x96, 0xc8, 0x85, 0x4e, 0x1c, 0x74, 0xd1, 0x28, 0xd6, 0x3d, 0xfc, 0x68, 0x50,
	0x52, 0x53, 0x1b, 0x61, 0xf0, 0x40, 0x2d, 0x56, 0xae, 0x7c, 0xce, 0x98, 0x72, 0xe3, 0x73, 0xc6,
	0x94, 0xff, 0x2a, 0x3e, 0xe7, 0xa8, 0x87, 0x35, 0x71, 0xc2, 0xc3, 0x6a, 0xfc, 0x5c, 0xc7, 0x55,
	0x41, 0x34, 0x80, 0x3d, 0xad, 0xce, 0x8f, 0xaf, 0x8e, 0x0b, 0x93, 0xbe, 0x09, 0x4d, 0xa0, 0x57,
	0x38, 0x0c, 0x7b, 0x9a, 0xa2, 0xd6, 0x03, 0x67, 0xd6, 0xef, 0x8a, 0xb4, 0x9f, 0xc1, 0x00, 0xf1,
	0xa8, 0xce, 0x22, 0xfd, 0x13, 0x45, 0x56, 0xa3, 0xfb, 0x49, 0x65, 0x4c, 0xec, 0x33, 0x71, 0xc6,
	0xd7, 0xcd, 0x89, 0xa8, 0x6b, 0x8d, 0x2c, 0x0e, 0x8d, 0x87, 0xf7, 0x93, 0x36, 0x15, 0x70, 0xb6,
	0xeb, 0xde, 0x42, 0x69, 0x48, 0x7b, 0xc0, 0x68, 0xfc, 0xc5, 0xbb, 0x64, 0xda, 0x86, 0xa3, 0xce,
	0xdf, 0x55, 0x08, 0x29, 0xee, 0x56, 0x7d, 0x99, 0x7e, 0x79, 0xda, 0xa3, 0x2b, 0x6e, 0x76, 0x4f,
	0xe9, 0xb6, 0x8f, 0x37, 0xea, 0xd8, 0xf9, 0x3f, 0xf7, 0xb2, 0xcd, 0xff, 0x70, 0xd4, 0x3b, 0x31,
	0x1a, 0xf5, 0x36, 0x48, 0x9d, 0x49, 0x9c, 0xec, 0x41, 0x10, 0xb3, 0x48, 0x5f, 0xba, 0x35, 0x26,
	0xf7, 0x83, 0xbc, 0xf7, 0x5c, 0x91, 0x54, 0xf0, 0x6b, 0x30, 0x51, 0x90, 0x64, 0xf6, 0xa2, 0x9d,
	0x41, 0xd0, 0x23, 0xa0, 0xe9, 0xd3, 0x0c, 0xa8, 0x1e, 0x93, 0x79, 0x2a, 0x8e, 0xfd, 0x1e, 0x8d,
	0x4b, 0x57, 0xac, 0xc2, 0x3e, 0x41, 0xce, 0x13, 0x1a, 0x47, 0x10, 0x2b, 0x49, 0x9f, 0xf1, 0x9c,
	0x0a, 0x1e, 0xc4, 0x20, 0xa9, 0x2f, 0xd8, 0x59, 0x26, 0x9b, 0x9a, 0xac, 0x84, 0xb4, 0x09, 0x69,
	0x53, 0x99, 0x23, 0xaa, 0x6a, 0x4e, 0xcd, 0x43, 0x2a, 0x73, 0x40, 0xbc, 0x42, 0x08, 0x93, 0x7e,
	0x80, 0x20, 0x7d, 0x8f, 0x56, 0x99, 0xdc, 0x04, 0x84, 0x73, 0x8b, 0xcc, 0x31, 0xe9, 0xcb, 0xec,
	0x40, 0x58, 0x08, 0x31, 0x23, 0x68, 0x65, 0x07, 0x42, 0xc3, 0x5e, 0x03, 0x58, 0x16, 0x88, 0x9c,
	0x05, 0x31, 0xc2, 0x6a, 0x00, 0xab, 0x2b, 0xe5, 0x81, 0x0a, 0xb8, 0xf7, 0xc9, 0x25, 0xd5, 0x59,
	0xb7, 0x2b, 0x68, 0x37, 0xc8, 0x59, 0xca, 0x7d, 0xd9, 0xcf, 0x32, 0x35, 0xdb, 0x34, 0x82, 0xbb,
	0xb3, 0xea, 0x5d, 0x64, 0x72, 0xb3, 0xe0, 0xb7, 0x2c, 0x1b, 0x22, 0x29, 0xe9, 0xb3, 0x24, 0x4b,
	0x45, 0x8e, 0xb3, 0xc9, 0x69, 0x04, 0x97, 0x68, 0xd5, 0x9b, 0x67, 0xb2, 0x09, 0x8c, 0x47, 0x9a,
	0xae, 0xec, 0x4a, 0x81, 0x96, 0x7d, 0xe5, 0xef, 0xe5, 0x70, 0x93, 0x56, 0xbd, 0x39, 0x03, 0x6e,
	0x21, 0xd9, 0x79, 0x9b, 0xac, 0x98, 0xf9, 0xe7, 0xa9, 0x8a, 0x34, 0x06, 0x54, 0xe4, 0x4c, 0xa9,
	0x84, 0xf7, 0xe9, 0x22, 0xae, 0xc0, 0x5e, 0x9a, 0x6f, 0x5a, 0x96, 0xb3, 0x49, 0xae, 0x8d, 0x17,
	0xf2, 0xf3, 0xd4, 0xa7, 0xed, 0x6e, 0x06, 0x97, 0x6b, 0xd5, 0xbb, 0x34, 0x46, 0xf8, 0x59, 0xba,
	0xdd, 0xee, 0x66, 0xce, 0x36, 0x59, 0x35, 0x4d, 0x94, 0xc4, 0xe3, 0x34, 0x0c, 0x62, 0x35, 0xdb,
	0x70, 0xa3, 0x2f, 0x40, 0x23, 0x57, 0xb0, 0x91, 0xa2, 0x85, 0x1d, 0x05, 0xda, 0x94, 0x70, 0xb7,
	0x7f, 0x8b, 0xbc, 0x62, 0x9a, 0xe9, 0x88, 0x34, 0xf1, 0x71, 0xd3, 0x0a, 0xda, 0x89, 0x69, 0x98,
	0xa7, 0x02, 0x42, 0x95, 0xaa, 0xe7, 0x62, 0x13, 0x8f, 0x45, 0x9a, 0x78, 0x0a, 0xe0, 0x19, 0xbe,
	0xb2, 0x8f, 0x46, 0x5e, 0xd0, 0x90, 0xb2, 0x01, 0x8d, 0xb0, 0xef, 0x45, 0xe3, 0x14, 0x28, 0x41,
	0x4f, 0xb3, 0xa0, 0xcb, 0x8f, 0xc9, 0x55, 0x26, 0x0b, 0xb4, 0x9d, 0x85, 0x24, 0x8d, 0x58, 0x87,
	0xd1, 0x08, 0x62, 0x19, 0x18, 0xbb, 0x11, 0xd3, 0x73, 0xb0, 0xab, 0x01, 0xca, 0x96, 0x9b, 0x4e,
	0x61, 0xc0, 0xf1, 0xb1, 0xce, 0x10, 0x45, 0x10, 0x52, 0x54, 0xbd, 0x25, 0xec, 0x76, 0x07, 0x99,
	0x98, 0x28, 0x3a, 0x29, 0x66, 0xf7, 0x12, 0x85, 0xa8, 0x62, 0x58, 0xcc, 0xec, 0x23, 0x7a, 0x62,
	0x8a, 0x74, 0xa2, 0xcc, 0x0f, 0xd3, 0x24, 0x09, 0x78, 0x04, 0xa1, 0xc5, 0xd0, 0x14, 0xed, 0x21,
	0x60, 0x0b, 0xf9, 0xce, 0x13, 0x72, 0x63, 0x78, 0x8a, 0x69, 0xc4, 0x64, 0x2e, 0x58, 0x5b, 0xcd,
	0xb4, 0x69, 0xc4, 0x85, 0x46, 0xae, 0x96, 0xe6, 0xb9, 0x84, 0x32, 0x2d, 0xe1, 0xd1, 0xc5, 0x5c,
	0x17, 0x6c, 0x42, 0x1a, 0x41, 0x94, 0x01, 0x47, 0x57, 0x09, 0x36, 0x35, 0x55, 0xbb, 0x6a, 0x7a,
	0x59, 0x52, 0xc1, 0xba, 0x8c, 0x07, 0x0a, 0x7d, 0x79, 0x78, 0x55, 0x0a, 0x8e, 0xb3, 0x55, 0x6c,
	0xc9, 0xb2, 0x84, 0x2f, 0x73, 0x96, 0x87, 0x3d, 0xc6, 0xbb, 0xee, 0x95, 0xf2, 0x6e, 0x2a, 0xcb,
	0xb6, 0x0c, 0xc4, 0xb9, 0x5d, 0x28, 0xa8, 0x62, 0x29, 0xd8, 0x08, 0xaf, 0x14, 0x67, 0x39, 0xef,
	0x3d, 0xcf, 0x38, 0xec, 0x81, 0x47, 0xe4, 0xfa, 0xd0, 0x9c, 0x84, 0x29, 0xef, 0xd0, 0x88, 0x0a,
	0x3c, 0xd7, 0x19, 0xa5, 0xc2, 0xbd, 0x5a, 0xee, 0x4e, 0xcd, 0xc8, 0x56, 0x19, 0xb3, 0x4f, 0xa9,
	0x70, 0x1e, 0x14, 0x0b, 0x2a, 0x8f, 0x79, 0x48, 0x23, 0xff, 0x90, 0xa9, 0xb9, 0xe9, 0x66, 0xee,
	0xb5, 0xf2, 0xe1, 0x6b, 0x01, 0xf3, 0x73, 0x96, 0xf7, 0x9a, 0xdd, 0x4c, 0x9f, 0x6e, 0x90, 0x4a,
	0xfa, 0x71, 0xce, 0xe0, 0x6e, 0xbb, 0x6e, 0x4e, 0xb7, 0xc2, 0xef, 0x1a, 0x72, 0x79, 0x7b, 0xb3,
	0x24, 0xf3, 0xc3, 0x80, 0x47, 0x0c, 0xfc, 0xaf, 0xd5, 0xf2, 0x44, 0x36, 0x93, 0x6c, 0xcb, 0x70,
	0xca, 0x57, 0x3b, 0xfa, 0xd3, 0x37, 0xca, 0x57, 0x3b, 0x7a, 0xd2, 0x1b, 0xc4, 0x2d, 0x76, 0xa2,
	0xf2, 0x13, 0xe1, 0x24, 0x20, 0xbc, 0x31, 0xbc, 0x15, 0x79, 0x77, 0x47, 0x31, 0x51, 0xae, 0x64,
	0x12, 0xda, 0x41, 0x78, 0xd0, 0xcf, 0xdc, 0x9b, 0x65, 0x93, 0xf0, 0x10, 0x68, 0xce, 0xe3, 0xe2,
	0x6a, 0x40, 0x94, 0x9f, 0x89, 0x34, 0xa7, 0x61, 0x5e, 0x1a, 0xef, 0xab, 0x20, 0xf7, 0x4a, 0x59,
	0x6e, 0x1f, 0x41, 0x63, 0x07, 0x0f, 0x46, 0x80, 0x1e, 0xa1, 0x71, 0x70, 0x6f, 0x95, 0x07, 0xaf,
	0xee, 0xe6, 0x6d, 0xcd, 0x29, 0x1f, 0xb1, 0x20, 0x8a, 0x98, 0x5a, 0x29, 0x63, 0x63, 0x5e, 0x2b,
	0x8f, 0x6b, 0xd3, 0x32, 0xc1, 0x8e, 0xbc, 0x07, 0x57, 0x3b, 0xde, 0x04, 0xf4, 0x28, 0xef, 0xa5,
	0x99, 0x1f, 0x31, 0x19, 0x06, 0x22, 0xa2, 0x91, 0x7b, 0x1b, 0x04, 0x57, 0xf4, 0x55, 0x88, 0xec,
	0x47, 0x86, 0xeb, 0xfc, 0x75, 0x85, 0x54, 0x95, 0x8c, 0xdf, 0x4b, 0x33, 0xf7, 0xce, 0x19, 0xbb,
	0x01, 0x53, 0x4a, 0x93, 0x27, 0x69, 0xe6, 0xfc, 0x6d, 0x85, 0x4c, 0xf3, 0x9e, 0x76, 0xb2, 0xdd,
	0xbb, 0xa0, 0xd6, 0xf1, 0x69, 0xab, 0x65, 0xc3, 0x49, 0xaf, 0xca, 0x7b, 0xe8, 0xd4, 0x83, 0x5f,
	0x12, 0x0e, 0x22, 0x1d, 0x99, 0xbc, 0x0e, 0x49, 0xe2, 0x69, 0x45, 0xc1, 0xb0, 0xe4, 0x4d, 0xb2,
	0xd8, 0x0b, 0xa4, 0xbe, 0x1e, 0x39, 0xcd, 0x35, 0xee, 0x0d, 0x34, 0x94, 0xbd, 0x40, 0xc2, 0xdd,
	0xb8, 0x47, 0x73, 0x84, 0x5f, 0x27, 0x35, 0x84, 0x22, 0xec, 0x1e, 0x78, 0x97, 0x04, 0x48, 0x08,
	0xb8, 0x4a, 0x08, 0xeb, 0x66, 0x7e, 0x42, 0x73, 0xc1, 0x42, 0xf7, 0x4d, 0xe0, 0x4f, 0xb3, 0x6e,
	0xb6, 0x0b, 0x04, 0x25, 0x0f, 0x03, 0x38, 0x54, 0xde, 0x53, 0xee, 0xae, 0xa1, 0xbc, 0x22, 0x7d,
	0x0e, 0x14, 0x65, 0xb7, 0xad, 0xaf, 0x07, 0xa6, 0x49, 0xf8, 0x2c, 0x72, 0xef, 0x63, 0xfe, 0xcc,
	0x70, 0xc0, 0x24, 0x89, 0x66, 0xe4, 0xbc, 0x41, 0x1c, 0xa5, 0x7d, 0x12, 0xe5, 0xc6, 0x8b, 0x8f,
	0x22, 0xe1, 0x7e, 0x03, 0x8f, 0x76, 0x2f, 0x90, 0xbb, 0x51, 0x8e, 0x6e, 0x7c, 0x14, 0x09, 0xe7,
	0xab, 0x0a, 0x99, 0x1d, 0x41, 0xbe, 0x75, 0xc6, 0xdb, 0x67, 0x26, 0x29, 0x2b, 0x78, 0x95, 0x10,
	0xcc, 0xae, 0x49, 0xf6, 0x25, 0x75, 0xd7, 0x71, 0xee, 0x80, 0xd2, 0x62, 0x5f, 0xc2, 0x5d, 0x50,
	0x4a, 0x2d, 0x52, 0xc9, 0xdc, 0xb7, 0xf1, 0x6d, 0xc4, 0xa6, 0x15, 0xb7, 0x25, 0x73, 0xae, 0x91,
	0x9a, 0x9a, 0x92, 0x2e, 0xa6, 0xe7, 0xdc, 0x07, 0x30, 0x17, 0xd3, 0xbd, 0x40, 0x7e, 0x02, 0xe9,
	0x39, 0xe7, 0x87, 0x15, 0x32, 0x65, 0x98, 0xdf, 0x84, 0xe1, 0x1f, 0x9e, 0xf6, 0xf0, 0x75, 0x44,
	0xe8, 0x4d, 0x76, 0x51, 0x25, 0xad, 0x32, 0xef, 0xa1, 0x56, 0x1b, 0x56, 0xe5, 0xbd, 0x9e, 0x55,
	0xd9, 0x30, 0xdf, 0x39, 0x63, 0x95, 0x39, 0xaa, 0x74, 0x87, 0xa8, 0xb3, 0xe1, 0x4b, 0x1a, 0xa6,
	0xdc, 0x9c, 0xad, 0x77, 0xd1, 0x30, 0xf7, 0x02, 0xd9, 0x02, 0x32, 0x1e, 0x88, 0x1b, 0x64, 0x66,
	0x08, 0xf5, 0x1e, 0xc6, 0xe7, 0xb2, 0x04, 0xf9, 0x80, 0x5c, 0xc6, 0x85, 0x0d, 0x99, 0x08, 0xfb,
	0x2c, 0x87, 0xcc, 0x43, 0x5f, 0xaa, 0x40, 0xa1, 0x4f, 0xdd, 0xf7, 0xe1, 0xc8, 0x5e, 0x04, 0xc4,
	0x16, 0x02, 0x5a, 0xc0, 0x7f, 0xae, 0xd8, 0xca, 0x99, 0x46, 0xab, 0x1a, 0x07, 0x99, 0x1f, 0xa6,
	0x7d, 0x9e, 0xbb, 0x1f, 0x40, 0x17, 0x75, 0x45, 0x7e, 0x1c, 0x07, 0xd9, 0x96, 0x22, 0x3a, 0xef,
	0x10, 0x17, 0xfb, 0x94, 0xbe, 0x64, 0x6a, 0x1a, 0x30, 0x1f, 0xa2, 0xc4, 0xdc, 0x0f, 0x41, 0x60,
	0x59, 0xf3, 0x5b, 0x8a, 0x0d, 0x09, 0x11, 0x25, 0x0d, 0x19, 0x1a, 0x96, 0x50, 0xe5, 0xa8, 0xf6,
	0xb9, 0x71, 0xc0, 0xdd, 0x8f, 0x30, 0x1d, 0xa1, 0x38, 0xcf, 0xd2, 0xcf, 0x2c, 0xdd, 0xb9, 0x45,
	0x66, 0xd1, 0xdb, 0xf6, 0x33, 0xca, 0x83, 0x38, 0x3f, 0x76, 0xbf, 0x85, 0xda, 0x20, 0x75, 0x1f,
	0x89, 0xce, 0x4d, 0x52, 0xef, 0x05, 0x71, 0x27, 0x66, 0x1d, 0xea, 0xab, 0x36, 0xdc, 0x6f, 0x63,
	0xca, 0xc4, 0x10, 0x9f, 0xb1, 0x84, 0x3a, 0x77, 0xc9, 0xbc, 0x69, 0xd7, 0xb6, 0xf6, 0x31, 0xe0,
	0xe6, 0x0c, 0xdd, 0xb4, 0x77, 0x9d, 0xd4, 0x04, 0xed, 0x4b, 0xaa, 0xe7, 0x6c, 0x13, 0xef, 0x15,
	0x20, 0xe1, 0x34, 0xad, 0x93, 0xe5, 0x24, 0x38, 0x62, 0x49, 0x3f, 0xb1, 0x41, 0x04, 0x76, 0xfc,
	0x10, 0xa0, 0x8b, 0x9a, 0x69, 0x22, 0x08, 0xe8, 0xff, 0x3e, 0x59, 0xb2, 0xb1, 0x90, 0xf2, 0xdb,
	0x32, 0xb5, 0x30, 0x5d, 0xea, 0x6e, 0x61, 0x1e, 0xa4, 0xad, 0x83, 0xa2, 0xad, 0x34, 0xc9, 0x5a,
	0x8a, 0xe1, 0xfc, 0x6b, 0x85, 0x2c, 0x8f, 0x48, 0x1c, 0x32, 0xce, 0xa9, 0x70, 0x1f, 0x9d, 0xf1,
	0x45, 0xe3, 0x94, 0x95, 0xfd, 0x1c, 0x74, 0x52, 0x3e, 0x49, 0xa1, 0x2c, 0x8b, 0x86, 0xf4, 0xdd,
	0x86, 0x59, 0x59, 0x32, 0x52, 0xcd, 0xa8, 0x24, 0x77, 0x95, 0x10, 0xb3, 0xe3, 0xba, 0xd2, 0x7d,
	0xbc, 0x5a, 0xb9, 0x73, 0xde, 0x9b, 0xd6, 0x9b, 0xad, 0x2b, 0x95, 0xb7, 0x55, 0x72, 0x58, 0x35,
	0xea, 0x13, 0x5c, 0xb6, 0xcc, 0xba, 0xac, 0x88, 0x5d, 0x25, 0x33, 0x65, 0x15, 0xdc, 0x27, 0xb8,
	0x6e, 0x45, 0xb7, 0xf0, 0x42, 0x02, 0x06, 0xc7, 0x40, 0x9a, 0x78, 0x7e, 0x80, 0xa8, 0x31, 0xab,
	0x64, 0x06, 0x4c, 0x9c, 0x81, 0x7c, 0x47, 0xaf, 0x7e, 0x38, 0x88, 0x34, 0xe2, 0x1e, 0x71, 0x80,
	0x09, 0xd3, 0xe3, 0x0f, 0xa8, 0x90, 0x2c, 0xe5, 0xee, 0xa7, 0xb8, 0x87, 0x15, 0xe7, 0x99, 0x62,
	0x3c, 0x47, 0xba, 0xf3, 0x9f, 0x15, 0x72, 0x49, 0x77, 0x4a, 0xa9, 0x90, 0xc3, 0xd1, 0x9a, 0xbb,
	0xb3, 0x3a, 0x71, 0xa7, 0xb6, 0xfe, 0x47, 0xa7, 0xbf, 0x94, 0xa5, 0xf4, 0x96, 0xb7, 0x82, 0xe3,
	0x57, 0xea, 0x95, 0x03, 0x45, 0xe7, 0x67, 0x15, 0xb2, 0x92, 0xd1, 0xb1, 0x7a, 0xef, 0xbe, 0x0c,
	0x7a, 0x2f, 0x66, 0x74, 0xbc, 0xd2, 0xc5, 0x36, 0x48, 0x85, 0xf0, 0xdb, 0x2c, 0xef, 0x30, 0x1a,
	0x47, 0xee, 0xde, 0x4b, 0xa1, 0xb4, 0xd9, 0x8f, 0x4f, 0x85, 0x78, 0xa8, 0x35, 0x73, 0xbe, 0xae,
	0x90, 0xe5, 0x20, 0x8a, 0xc6, 0xe8, 0xfc, 0xf4, 0x65, 0xd0, 0xd9, 0x09, 0xa2, 0x68, 0x54, 0xe5,
	0xdb, 0x64, 0xae, 0xd8, 0x12, 0x79, 0xea, 0x67, 0xd4, 0xdd, 0x47, 0x9b, 0x55, 0x26, 0xef, 0x53,
	0xf0, 0x19, 0x59, 0xdb, 0xef, 0x04, 0x2c, 0xa6, 0x91, 0xfb, 0x5b, 0x68, 0x8f, 0x05, 0x6b, 0x3f,
	0x06, 0x82, 0xf3, 0x3e, 0xb9, 0x2c, 0xb9, 0x2f, 0xb2, 0x03, 0xe6, 0x63, 0x4c, 0xe8, 0x07, 0x12,
	0xb3, 0x5a, 0x2c, 0x3f, 0x76, 0x3d, 0x38, 0x55, 0x2b, 0x92, 0x7b, 0xd9, 0x01, 0x7b, 0x0a, 0xfc,
	0x4d, 0xf9, 0x5c, 0x73, 0x55, 0x6c, 0x2d, 0x7b, 0xe9, 0xe1, 0x0b, 0xa5, 0x5b, 0x18, 0x5b, 0x2b,
	0xcc, 0x58, 0xf9, 0x07, 0x64, 0x85, 0xa9, 0xd1, 0x4a, 0xd6, 0xe5, 0x81, 0x9a, 0x05, 0x2b, 0xf9,
	0x4c, 0x87, 0x1b, 0xed, 0x6e, 0xd6, 0xd2, 0x4c, 0x2b, 0xf5, 0x1d, 0xd2, 0x18, 0xd7, 0x21, 0x06,
	0x9f, 0x11, 0x93, 0xf8, 0x90, 0xf0, 0x19, 0xb4, 0x70, 0x4d, 0x8c, 0xf6, 0x0b, 0xb0, 0x47, 0x1a,
	0xa5, 0x0c, 0x6e, 0x10, 0x86, 0x34, 0xcb, 0xfd, 0xf4, 0x90, 0x63, 0xa4, 0xf3, 0x1c, 0x23, 0x5e,
	0x24, 0x3f, 0x3d, 0xe4, 0x10, 0xe2, 0x3c, 0x22, 0xd7, 0x4b, 0x38, 0x49, 0xe3, 0x8e, 0x5f, 0x8a,
	0xb2, 0x41, 0xee, 0x73, 0x8c, 0x78, 0xad, 0x5c, 0x8b, 0xc6, 0x9d, 0xa7, 0x16, 0x03, 0xad, 0x5c,
	0x27, 0xb5, 0xa0, 0xe4, 0x50, 0xff, 0x36, 0xdc, 0xb6, 0x24, 0x28, 0x3c, 0xea, 0x06, 0xa9, 0xc3,
	0xbb, 0xb4, 0xec, 0x60, 0x3c, 0xe5, 0x7e, 0x17, 0xa3, 0x4f, 0x45, 0x6c, 0x75, 0x20, 0x84, 0x52,
	0xd7, 0x5f, 0x07, 0x9e, 0x38, 0x19, 0x87, 0x71, 0x23, 0xf0, 0x77, 0xd0, 0xc7, 0x07, 0x4e, 0x13,
	0x19, 0x80, 0xbe, 0x4b, 0x16, 0xc0, 0xa9, 0x56, 0xad, 0xf2, 0x36, 0xa6, 0x5c, 0xdd, 0xdf, 0xb5,
	0xce, 0xcd, 0xee, 0x20, 0xe3, 0x7b, 0x6d, 0xc8, 0x7b, 0x3a, 0x3f, 0xae, 0xe8, 0xde, 0x2d, 0xee,
	0xf7, 0xce, 0xd8, 0xd0, 0xc1, 0xb8, 0x8d, 0x7a, 0x6f, 0x91, 0xe5, 0x62, 0x24, 0x3a, 0xcc, 0x04,
	0x2d, 0x7f, 0x1f, 0xe3, 0x59, 0x33, 0x1a, 0x64, 0x81, 0xc8, 0x4f, 0x2b, 0x64, 0xe1, 0x24, 0xfe,
	0x0f, 0xce, 0x3a, 0xdb, 0x9c, 0x8c, 0xa8, 0xd9, 0x50, 0xfe, 0x93, 0x1e, 0x59, 0x96, 0x48, 0xe6,
	0xfa, 0xb8, 0xea, 0x7a, 0x44, 0xfb, 0x89, 0x64, 0x2a, 0x5e, 0xb0, 0x7c, 0xcc, 0x4a, 0x7f, 0x0f,
	0x9d, 0xac, 0x44, 0x23, 0x20, 0x31, 0xfd, 0x1a, 0x99, 0x2b, 0x50, 0x68, 0xac, 0x03, 0xf4, 0xd8,
	0x0c, 0x0c, 0x4d, 0xf5, 0x10, 0x0e, 0x5d, 0xd9, 0xf6, 0x30, 0x0e, 0x9d, 0xd9, 0x21, 0x1c, 0x7a,
	0x63, 0x21, 0x78, 0xb0, 0x16, 0x87, 0x0e, 0x99, 0xf6, 0xa0, 0x01, 0x4b, 0x8f, 0xf2, 0x30, 0x4d,
	0x12, 0x37, 0x1a, 0xda, 0x64, 0xdb, 0x48, 0x75, 0xde, 0x24, 0x0e, 0x3d, 0xca, 0x29, 0x8f, 0x28,
	0xf8, 0x28, 0x49, 0x9f, 0xab, 0xe3, 0x4e, 0xa1, 0xd1, 0x05, 0xc3, 0xd9, 0x32, 0x8c, 0x42, 0x81,
	0xc2, 0x47, 0xe9, 0x94, 0x14, 0xb5, 0x7e, 0xca, 0x25, 0x52, 0xd5, 0x51, 0x6f, 0xcf, 0xed, 0x42,
	0xc7, 0x53, 0xf0, 0xbd, 0xd7, 0x53, 0x8e, 0x9f, 0xc8, 0x7d, 0xa9, 0xa2, 0x61, 0x96, 0xb0, 0xdc,
	0xbe, 0x34, 0xf6, 0x30, 0xc5, 0x2e, 0xf2, 0x16, 0xcd, 0x77, 0x14, 0xc7, 0xbc, 0x35, 0xde, 0x24,
	0xb3, 0x98, 0x48, 0x43, 0x29, 0x16, 0xb9, 0x0c, 0xdd, 0x14, 0x45, 0xf5, 0x14, 0xbc, 0x19, 0x39,
	0x0f, 0xc8, 0xc5, 0x32, 0x08, 0x13, 0xaf, 0xe8, 0xb1, 0x7f, 0x1f, 0x9d, 0x50, 0x8b, 0x86, 0x00,
	0x17, 0xfd, 0xf6, 0x0f, 0xc9, 0x15, 0x9b, 0x60, 0xe9, 0xf8, 0xb0, 0x9d, 0xe2, 0xd8, 0xa7, 0x31,
	0xeb, 0xb2, 0x76, 0x4c, 0xdd, 0x03, 0x93, 0x06, 0x87, 0x24, 0x4b, 0xa7, 0x89, 0xfc, 0x6d, 0xcd,
	0x36, 0xa9, 0x2f, 0x2a, 0x92, 0x80, 0x53, 0xae, 0xd3, 0xfa, 0xb1, 0x4d, 0x7d, 0x19, 0x3a, 0x9c,
	0xfb, 0x37, 0xc8, 0x42, 0x57, 0x04, 0x21, 0xed, 0xf4, 0x63, 0x5f, 0xf6, 0xfa, 0x79, 0x94, 0x1e,
	0x72, 0x37, 0xc1, 0x4b, 0xc2, 0x30, 0x5a, 0x9a, 0xee, 0xbc, 0x47, 0x2e, 0x99, 0x4d, 0xdb, 0xe7,
	0x0c, 0x8a, 0x8a, 0x64, 0xd0, 0x61, 0xd8, 0x01, 0xc7, 0x04, 0x8e, 0x06, 0x7c, 0x86, 0xfc, 0x56,
	0xd0, 0x61, 0xd0, 0xcf, 0x7d, 0xb2, 0xa4, 0x56, 0xfe, 0xc4, 0x21, 0x4b, 0x71, 0x76, 0x7b, 0x81,
	0x7c, 0x3e, 0xbc, 0xd9, 0xff, 0xa1, 0x42, 0xe6, 0x4f, 0xa0, 0xb3, 0x33, 0x3e, 0x92, 0xb3, 0x23,
	0x27, 0x72, 0x1d, 0x9e, 0x05, 0xb0, 0x78, 0x51, 0x84, 0xbe, 0x88, 0x7c, 0x15, 0x48, 0x50, 0x9e,
	0xbb, 0x5f, 0x98, 0xe4, 0x99, 0xba, 0xda, 0x5b, 0x22, 0xf4, 0xa2, 0x7d, 0xe4, 0x94, 0x8b, 0x37,
	0xc5, 0x50, 0xf1, 0xe6, 0x7d, 0xb2, 0x88, 0xdb, 0x23, 0x62, 0x32, 0x67, 0xbc, 0xdb, 0x67, 0xb2,
	0x47, 0x85, 0x2b, 0x01, 0xe4, 0x00, 0xeb, 0x51, 0x99, 0x03, 0x67, 0x3d, 0x08, 0x7d, 0x96, 0xd9,
	0x5e, 0x73, 0xcc, 0x13, 0x26, 0x41, 0xd8, 0xcc, 0x4c, 0x7f, 0xcb, 0x64, 0x12, 0x51, 0x6e, 0x1f,
	0x5a, 0xba, 0x00, 0xdc, 0xc6, 0xa7, 0x64, 0x09, 0x5e, 0xdf, 0x20, 0x01, 0x1d, 0xb7, 0x63, 0x9f,
	0xf2, 0x5c, 0x1c, 0xfb, 0xe0, 0xe8, 0xd3, 0x52, 0x7d, 0x21, 0x3c, 0x69, 0x65, 0xd4, 0xbc, 0x78,
	0x2d, 0x91, 0x0b, 0x78, 0x0f, 0xe0, 0xb3, 0x29, 0x7e, 0x34, 0x76, 0x74, 0xa1, 0xad, 0x64, 0x91,
	0x9f, 0xc7, 0x03, 0xfd, 0x1c, 0xeb, 0x90, 0xf3, 0xa5, 0xba, 0x86, 0xf3, 0xa6, 0x08, 0x31, 0xa6,
	0x5c, 0x4b, 0xc3, 0x83, 0xf0, 0x3c, 0x99, 0x18, 0x04, 0xb1, 0x3b, 0xb1, 0x3a, 0x71, 0x67, 0xda,
	0x53, 0xff, 0x6c, 0xfc, 0xc2, 0xd4, 0x7c, 0x40, 0x73, 0xd0, 0xd4, 0x4f, 0x2b, 0x64, 0x56, 0x57,
	0x58, 0xe8, 0x3e, 0xa0, 0xf4, 0xb1, 0xb6, 0xfe, 0xc7, 0xa7, 0xfe, 0x5c, 0x39, 0x34, 0x46, 0x53,
	0xe2, 0xd1, 0x62, 0xd1, 0xb3, 0x78, 0xd0, 0xf8, 0x1e, 0xbe, 0x4a, 0x9b, 0xc2, 0x00, 0x80, 0x8e,
	0x9d, 0x86, 0xb1, 0xd3, 0xf8, 0xab, 0x3c, 0x7c, 0x1f, 0x93, 0x29, 0x29, 0xa0, 0xe1, 0x5f, 0xbb,
	0xdd, 0x07, 0x63, 0xda, 0x7d, 0xe1, 0x9b, 0xfb, 0xf9, 0x93, 0x5d, 0xff, 0x47, 0x85, 0xd4, 0xa4,
	0xf0, 0xe9, 0x51, 0x86, 0xcf, 0xc7, 0x2b, 0x64, 0x52, 0x67, 0xf4, 0x2a, 0x58, 0x8f, 0x8b, 0x5f,
	0xce, 0x5f, 0x56, 0xc8, 0x94, 0xa4, 0xdd, 0x44, 0x6d, 0xc8, 0x73, 0xb0, 0x48, 0xf2, 0x34, 0x17,
	0x49, 0x4f, 0x8f, 0x67, 0x74, 0x68, 0xfc, 0xe3, 0x05, 0xb2, 0x08, 0xde, 0xa3, 0xa9, 0x37, 0xd2,
	0x3b, 0xbd, 0xa8, 0x2b, 0xa1, 0x3c, 0x0c, 0xb2, 0xa2, 0x06, 0xa7, 0x6e, 0xea, 0x4a, 0xb6, 0x15,
	0x1d, 0x0c, 0xe6, 0x57, 0x15, 0x52, 0x2b, 0xad, 0xaa, 0x7e, 0x89, 0x3e, 0x75, 0x77, 0x7f, 0x68,
	0x63, 0x79, 0x44, 0x7f, 0xb6, 0x58, 0xe4, 0xfc, 0xbb, 0x8a, 0x4c, 0x62, 0x65, 0xcb, 0x94, 0xa3,
	0x59, 0x56, 0x75, 0xe2, 0x65, 0x50, 0x75, 0xd1, 0xea, 0xf6, 0xb0, 0xd0, 0xf9, 0x1a, 0x21, 0xea,
	0xf4, 0x50, 0x41, 0x79, 0x48, 0x75, 0xd1, 0x42, 0x89, 0xa2, 0x36, 0x33, 0x94, 0xe3, 0xe8, 0x17,
	0x71, 0xfc, 0x70, 0x6e, 0x92, 0xba, 0xa0, 0x5f, 0xf4, 0x55, 0xe8, 0x88, 0x5c, 0x2c, 0x01, 0x9e,
	0xd1, 0x44, 0x28, 0xd2, 0x71, 0x7e, 0x54, 0x21, 0x33, 0x7a, 0xfd, 0xfd, 0x98, 0xc9, 0xdc, 0x9d,
	0x82, 0x8d, 0x78, 0x78, 0xca, 0x1b, 0xd1, 0x9c, 0x15, 0xaf, 0xa6, 0x95, 0xd9, 0x61, 0x32, 0x57,
	0x07, 0xa7, 0x0f, 0x71, 0x85, 0x7e, 0x6b, 0xd7, 0x5f, 0x8d, 0x9f, 0x57, 0x70, 0xa3, 0xe6, 0x7d,
	0x8e, 0x3b, 0x52, 0x6f, 0xd4, 0x1f, 0x57, 0xc8, 0xb4, 0xad, 0xdd, 0xd3, 0x65, 0x1a, 0x7f, 0x72,
	0xda, 0xeb, 0x39, 0x72, 0x7a, 0xbc, 0xaa, 0xd4, 0x95, 0x7a, 0x8d, 0x63, 0xbc, 0xfc, 0xdb, 0x41,
	0xd7, 0x8f, 0x03, 0xd1, 0xa5, 0xca, 0x5d, 0xf3, 0xd5, 0x85, 0xd2, 0x8d, 0xd3, 0x76, 0x10, 0xfb,
	0x41, 0x94, 0x30, 0xae, 0x0f, 0x56, 0x0d, 0x69, 0x9b, 0x8a, 0x54, 0xbc, 0x2b, 0x44, 0x41, 0x1e,
	0xbc, 0xa5, 0xaf, 0x2c, 0x7c, 0x57, 0x78, 0xa4, 0x28, 0xc3, 0x80, 0x75, 0xd8, 0xc9, 0x65, 0xc0,
	0x7a, 0xe3, 0x07, 0x8b, 0x64, 0x45, 0xf5, 0xad, 0xba, 0x4c, 0xb9, 0x1f, 0xe4, 0xb9, 0x28, 0x9d,
	0x6e, 0x26, 0x75, 0x04, 0x65, 0xed, 0x63, 0xc5, 0x38, 0x41, 0x18, 0x47, 0x19, 0x13, 0x89, 0x4f,
	0x60, 0x3a, 0xfb, 0x23, 0x68, 0xc7, 0xe2, 0xcf, 0x19, 0x2b, 0x0e, 0x0f, 0x22, 0xfb, 0x82, 0x76,
	0x8c, 0xc8, 0x47, 0xe0, 0xa1, 0x05, 0x79, 0x9a, 0xb0, 0xb0, 0x78, 0x61, 0xb6, 0x82, 0x13, 0xe6,
	0xb5, 0x78, 0x13, 0x10, 0xf6, 0x99, 0xd9, 0x88, 0xaf, 0x43, 0x8f, 0x46, 0x2e, 0x15, 0x56, 0xf0,
	0xbc, 0x79, 0xd1, 0xdc, 0xb4, 0x3c, 0x23, 0x83, 0x23, 0xd2, 0xd1, 0xac, 0xc1, 0x5f, 0x30, 0x23,
	0xc2, 0x10, 0xd2, 0x60, 0xdf, 0x80, 0x4a, 0x88, 0x40, 0xfb, 0x90, 0x06, 0x3c, 0x69, 0xc0, 0x9b,
	0xe0, 0x39, 0x1a, 0x30, 0x3e, 0x23, 0x5b, 0x2f, 0xdb, 0xc2, 0xa7, 0xcc, 0xe8, 0xad, 0x9f, 0x6d,
	0x24, 0x36, 0xe1, 0x71, 0xff, 0xa4, 0x83, 0x6e, 0x45, 0x71, 0x63, 0x5f, 0x66, 0x72, 0x7b, 0xd4,
	0x55, 0x37, 0x4d, 0xe0, 0x23, 0xa7, 0x94, 0x81, 0x95, 0x99, 0xb6, 0x55, 0x23, 0x32, 0x18, 0x55,
	0x8d, 0x73, 0x28, 0x44, 0xb0, 0x58, 0x52, 0xa8, 0xa6, 0x59, 0x46, 0x42, 0xd7, 0x99, 0xa8, 0x40,
	0xc4, 0x80, 0x8b, 0x3a, 0x93, 0x44, 0x32, 0x83, 0xd3, 0xaf, 0xec, 0x59, 0x96, 0x14, 0xee, 0xd3,
	0x8c, 0x7d, 0x65, 0x57, 0xe4, 0xe1, 0x16, 0x21, 0x20, 0x37, 0xc0, 0xba, 0x69, 0x71, 0x93, 0x75,
	0x2d, 0x4e, 0x57, 0x00, 0x8c, 0xf8, 0x6f, 0xba, 0xac, 0xdf, 0x48, 0xce, 0xda, 0x0a, 0x80, 0x61,
	0x67, 0x0e, 0xe2, 0x28, 0xd3, 0x12, 0xbe, 0xaf, 0xc6, 0x12, 0x36, 0x34, 0x56, 0x10, 0x18, 0xf9,
	0x39, 0xf3, 0xbe, 0xba, 0x23, 0x37, 0x0d, 0xd3, 0x88, 0x61, 0x91, 0x0a, 0xf6, 0xc7, 0x78, 0x44,
	0x8f, 0xac, 0xd4, 0xbc, 0xd9, 0x55, 0xd0, 0x4d, 0x53, 0xf1, 0x8c, 0xd0, 0x75, 0x52, 0x2b, 0xea,
	0xac, 0x4c, 0x31, 0x1f, 0xb1, 0x85, 0x4e, 0x52, 0xdd, 0xb7, 0xa5, 0x7d, 0x1a, 0x60, 0x5d, 0x7b,
	0xdd, 0x9b, 0x29, 0x88, 0x9b, 0x52, 0x85, 0x6b, 0x65, 0xd0, 0x50, 0x61, 0xfb, 0x42, 0x09, 0xa9,
	0xbd, 0x8d, 0x15, 0x32, 0xa9, 0x73, 0x1b, 0x4b, 0xe8, 0x3a, 0xe0, 0x97, 0x73, 0x97, 0xcc, 0x17,
	0xa7, 0x50, 0xdb, 0x85, 0x65, 0xb4, 0xc8, 0xb1, 0x39, 0x81, 0xda, 0x38, 0xac, 0x90, 0x49, 0x3c,
	0x0a, 0x50, 0xd5, 0x51, 0xf7, 0xf4, 0x17, 0xb8, 0xd7, 0x3a, 0x29, 0x72, 0x51, 0xbb, 0xd7, 0x52,
	0x57, 0x31, 0x4d, 0x17, 0x81, 0xa4, 0x8b, 0x4f, 0xa2, 0x96, 0xe0, 0xbc, 0x4b, 0xdc, 0x31, 0xdb,
	0x19, 0x23, 0xc9, 0x4b, 0x98, 0xdc, 0x3a, 0x11, 0x75, 0x62, 0x48, 0x39, 0x3e, 0x52, 0xbd, 0xfc,
	0xa2, 0x48, 0xf5, 0x0d, 0xb2, 0xd0, 0xe7, 0x07, 0x3c, 0x3d, 0xe4, 0xc5, 0xea, 0xba, 0x57, 0x00,
	0x3d, 0xaf, 0x19, 0x76, 0x61, 0x1d, 0x97, 0x4c, 0x85, 0x71, 0x5f, 0xe6, 0x54, 0xb8, 0xaf, 0x00,
	0xc4, 0x7c, 0x2a, 0xdb, 0x69, 0x12, 0x4b, 0x29, 0x56, 0x51, 0x4c, 0x7b, 0x25, 0x8a, 0xba, 0x2c,
	0xe2, 0xf5, 0x3c, 0x1b, 0xbc, 0xed, 0x4b, 0x2a, 0x25, 0x4b, 0xb9, 0x8a, 0x4f, 0xaf, 0xe9, 0xa9,
	0x04, 0x46, 0x0b, 0xe9, 0xcd, 0x08, 0x7f, 0xee, 0x04, 0xd8, 0x30, 0x4d, 0x0f, 0x18, 0x75, 0xaf,
	0x9b, 0x9f, 0x3b, 0x29, 0xe2, 0x16, 0xd0, 0x9c, 0x5b, 0x64, 0xb6, 0x38, 0x86, 0xe0, 0x2a, 0xad,
	0x62, 0x80, 0x6d, 0xa9, 0xe0, 0x28, 0xdd, 0x26, 0x73, 0x05, 0x0c, 0x33, 0x01, 0x37, 0xa0, 0xb5,
	0x42, 0x1a, 0x53, 0x01, 0xaf, 0x93, 0x85, 0x52, 0x8e, 0x4b, 0x43, 0x1b, 0x90, 0xe9, 0x9a, 0x2b,
	0x32, 0x5d, 0x88, 0xbd, 0x42, 0xa6, 0x8b, 0x7c, 0xc6, 0x4d, 0xe8, 0xb6, 0x9a, 0x99, 0x5c, 0x86,
	0x0a, 0x58, 0x8a, 0x34, 0xc6, 0xab, 0xf8, 0x80, 0x9a, 0xd9, 0x14, 0x86, 0x61, 0xa3, 0x5b, 0x7c,
	0xab, 0x60, 0xdb, 0xa7, 0xeb, 0x52, 0xd2, 0xe2, 0x35, 0xdc, 0x16, 0x99, 0x4d, 0x58, 0x28, 0x76,
	0x96, 0xf8, 0x19, 0xb2, 0x6f, 0x6b, 0xe9, 0x2c, 0xd9, 0x07, 0x82, 0xf3, 0x0b, 0xcc, 0xbc, 0x8f,
	0x39, 0xf0, 0xee, 0x1d, 0x70, 0x38, 0xfe, 0xf4, 0xd4, 0x4b, 0xeb, 0x47, 0x03, 0x3a, 0x6f, 0x29,
	0x1b, 0x73, 0xd3, 0xa8, 0x63, 0xa2, 0xef, 0x17, 0xf7, 0x2e, 0x0c, 0x7a, 0x32, 0x86, 0x0b, 0x45,
	0xc5, 0xdd, 0x73, 0xa5, 0x48, 0x0b, 0x10, 0xaf, 0x9f, 0x51, 0x65, 0xa8, 0x8d, 0xff, 0xbc, 0xba,
	0x0d, 0xb3, 0x8c, 0x92, 0x33, 0x65, 0xdf, 0x1d, 0x4a, 0x17, 0xce, 0xc0, 0x29, 0x1a, 0xf1, 0xd4,
	0x4c, 0x05, 0x36, 0xc4, 0x0d, 0xce, 0x07, 0xe4, 0x32, 0x5c, 0xc7, 0xa2, 0x4b, 0xc7, 0x58, 0xc8,
	0x7b, 0x26, 0x87, 0xb3, 0xa3, 0x00, 0x27, 0xcc, 0xe3, 0x3f, 0x55, 0xc8, 0xdc, 0x88, 0xa8, 0xfb,
	0xe6, 0xd9, 0x44, 0xbc, 0xc3, 0x8e, 0x9d, 0x37, 0x1b, 0x0f, 0x29, 0xdc, 0xf8, 0x2b, 0xed, 0xb5,
	0x82, 0xf3, 0x25, 0xf4, 0x93, 0xfd, 0x6f, 0xae, 0xf4, 0x5b, 0x19, 0xac, 0x24, 0x08, 0x47, 0x02,
	0x55, 0x92, 0x04, 0xe6, 0xc7, 0x3a, 0x8d, 0x7f, 0xab, 0x63, 0x91, 0x33, 0x28, 0xa4, 0x8b, 0xd5,
	0xb4, 0x49, 0x58, 0xf7, 0xdb, 0xc7, 0x39, 0xd5, 0x6e, 0x60, 0xdd, 0xf8, 0x41, 0xeb, 0x0f, 0x8f,
	0x73, 0xaa, 0x4b, 0xe3, 0x82, 0x2c, 0x8b, 0x59, 0x88, 0x6f, 0x04, 0xca, 0x61, 0x3b, 0x0c, 0x8e,
	0x47, 0xbc, 0xc1, 0x2b, 0x4c, 0x6e, 0x16, 0xa0, 0x4f, 0x10, 0x63, 0x96, 0xed, 0x4d, 0xb2, 0xc8,
	0xf0, 0x58, 0x41, 0xba, 0x6f, 0xd8, 0x1d, 0x9c, 0x67, 0x70, 0xc4, 0x5a, 0x34, 0x37, 0xf0, 0xfb,
	0x64, 0x49, 0xc1, 0xe0, 0x22, 0x64, 0xbc, 0x9d, 0xf6, 0x79, 0x04, 0x75, 0x6d, 0xfa, 0xc7, 0x19,
	0x92, 0xe6, 0xca, 0xc1, 0x68, 0x22, 0xa7, 0xd9, 0xcd, 0x94, 0x67, 0x70, 0x42, 0x40, 0x5b, 0x52,
	0xf4, 0x04, 0x97, 0x86, 0x65, 0xf4, 0x7b, 0x01, 0x3a, 0x5b, 0x6a, 0x71, 0x86, 0x5d, 0xc1, 0x19,
	0x26, 0x3d, 0xde, 0x1b, 0x76, 0x30, 0x05, 0x6b, 0x97, 0x81, 0x53, 0xc6, 0x67, 0xf4, 0x80, 0x5e,
	0x72, 0xcc, 0x0a, 0xe7, 0xe4, 0x80, 0x1e, 0x9b, 0xd2, 0xf3, 0x2a, 0x5c, 0x91, 0x8e, 0xe5, 0x7d,
	0x4a, 0x8f, 0xb1, 0xf6, 0xdc, 0x79, 0x8f, 0x5c, 0x2a, 0x24, 0xf0, 0xdd, 0x1e, 0xde, 0x9f, 0x79,
	0x87, 0x75, 0xb5, 0xef, 0xb7, 0x62, 0x01, 0x9e, 0xe2, 0x37, 0xa3, 0x2d, 0xe0, 0x3a, 0xef, 0x8e,
	0x15, 0x4d, 0x82, 0x23, 0x65, 0xd4, 0x08, 0xd6, 0x31, 0x8c, 0x8a, 0xee, 0x06, 0x47, 0x4d, 0x28,
	0x06, 0x1d, 0x23, 0xc9, 0xd3, 0x88, 0xea, 0xdf, 0x6b, 0x2c, 0x8d, 0xca, 0xed, 0xa5, 0x11, 0x55,
	0x47, 0x77, 0x9c, 0xae, 0x7d, 0x21, 0x8c, 0x9b, 0x58, 0xf7, 0x2e, 0x9e, 0x50, 0x16, 0xd9, 0x2f,
	0xe8, 0xf3, 0x80, 0x1e, 0x4b, 0xfd, 0x7b, 0x8e, 0x13, 0x7d, 0x7e, 0x4a, 0x8f, 0xa5, 0xf3, 0x90,
	0x5c, 0x1b, 0x23, 0x26, 0x68, 0x98, 0x0e, 0xa8, 0xda, 0x4d, 0xa1, 0xfe, 0x95, 0xc7, 0xe5, 0x51,
	0x69, 0x0f, 0x21, 0x2d, 0x1a, 0x2a, 0xe7, 0x62, 0x90, 0xf1, 0x91, 0x04, 0xe2, 0x1c, 0xbe, 0x78,
	0x0f, 0x32, 0x3e, 0x9c, 0x3e, 0xfc, 0xba, 0x42, 0x16, 0x4a, 0x81, 0x13, 0x34, 0x89, 0xbf, 0x86,
	0xac, 0xad, 0xff, 0xd9, 0xa9, 0xdb, 0xad, 0x93, 0x21, 0x9c, 0x37, 0x8f, 0x34, 0xeb, 0x0e, 0x49,
	0xe7, 0xab, 0x0a, 0xa9, 0x9a, 0xc3, 0x05, 0xae, 0xea, 0x4b, 0xa2, 0xe9, 0x54, 0x80, 0xe7, 0xda,
	0xb9, 0x44, 0xaa, 0xea, 0xf0, 0x80, 0xa3, 0x82, 0x7e, 0xf2, 0x94, 0xe0, 0x3d, 0xf0, 0x53, 0x2e,
	0x12, 0xf5, 0x4f, 0x5f, 0xdd, 0x89, 0x8b, 0xe8, 0xb1, 0x0a, 0xde, 0xdb, 0xa1, 0x1c, 0x2a, 0x19,
	0xcc, 0xb5, 0xa9, 0xb8, 0x4b, 0xba, 0x92, 0x01, 0xab, 0x8e, 0x14, 0xe2, 0x47, 0x15, 0x6c, 0x16,
	0x72, 0xe0, 0xcb, 0x67, 0x63, 0xea, 0x46, 0xae, 0x77, 0x18, 0x17, 0xe4, 0xc0, 0x6f, 0x90, 0x19,
	0x7d, 0x65, 0x80, 0x84, 0x76, 0xc7, 0x6b, 0x48, 0x83, 0x12, 0x0b, 0xfd, 0xb4, 0xac, 0x20, 0x49,
	0x10, 0x6a, 0xb7, 0x7c, 0x1a, 0x29, 0xbb, 0x41, 0xe8, 0xfc, 0x4d, 0x85, 0xe8, 0x2f, 0x9f, 0x65,
	0x50, 0x23, 0x7d, 0x96, 0x39, 0xfe, 0x2a, 0xaa, 0xd2, 0xcc, 0x94, 0xcb, 0x8b, 0xff, 0x66, 0x99,
	0x1e, 0x1b, 0x46, 0x02, 0x75, 0x43, 0x1d, 0x1d, 0xdd, 0x80, 0x33, 0xa8, 0xbd, 0xae, 0x9b, 0xd1,
	0x3d, 0xe7, 0xac, 0x34, 0x3f, 0xe8, 0xaa, 0x5c, 0x29, 0xcf, 0x0f, 0x78, 0x0a, 0x8d, 0x9f, 0x54,
	0xf1, 0xa7, 0xfa, 0xe6, 0xaf, 0x44, 0xa8, 0xbd, 0xc2, 0x53, 0x0c, 0x62, 0xd6, 0x31, 0x45, 0xc4,
	0x53, 0x08, 0x62, 0x4a, 0x8f, 0x07, 0x6f, 0x0f, 0x3d, 0x1e, 0xfc, 0x73, 0x85, 0x2c, 0x96, 0x4a,
	0x3f, 0xec, 0x6f, 0xa0, 0x1e, 0x9c, 0x75, 0x0d, 0x52, 0xa1, 0x94, 0xfd, 0x15, 0xd6, 0x1a, 0x59,
	0xcc, 0x44, 0x1a, 0x52, 0x29, 0x7d, 0xdb, 0x09, 0x8b, 0xa0, 0x30, 0xb1, 0xee, 0x2d, 0x68, 0x56,
	0x53, 0x73, 0x9a, 0x91, 0x72, 0xff, 0x31, 0xa8, 0x4d, 0x53, 0x53, 0x28, 0x58, 0x05, 0xc2, 0x53,
	0x1d, 0xe8, 0x18, 0xa6, 0x2d, 0xf2, 0x79, 0x47, 0x07, 0x3a, 0x1a, 0x64, 0x6a, 0x7c, 0xae, 0x12,
	0x82, 0xd8, 0x4e, 0xc0, 0x4c, 0xe9, 0x1e, 0x36, 0xfd, 0x38, 0x60, 0xb1, 0xf3, 0xf7, 0x15, 0x32,
	0x8f, 0xe5, 0x44, 0xbc, 0x93, 0x8a, 0x04, 0xec, 0x3b, 0x94, 0xee, 0xd5, 0xd6, 0xfb, 0xa7, 0xee,
	0xfb, 0x42, 0xda, 0x10, 0x6b, 0xa7, 0x0a, 0x6d, 0x9c, 0x9f, 0x55, 0x4a, 0x96, 0x49, 0xfa, 0x41,
	0x27, 0xa7, 0xf6, 0x47, 0xbd, 0x8c, 0xbb, 0xef, 0x9f, 0x8d, 0xb2, 0x70, 0x37, 0x94, 0x0c, 0xa2,
	0xdc, 0x54, 0x7a, 0x61, 0x7a, 0xb0, 0xc9, 0x5f, 0xf4, 0xb0, 0xf5, 0xc1, 0x0b, 0x1f, 0xb6, 0x3e,
	0x24, 0x97, 0xcd, 0xdf, 0x02, 0x19, 0x23, 0xf7, 0x21, 0xc8, 0xb9, 0xfa, 0xcf, 0x87, 0x9c, 0x94,
	0xde, 0x25, 0x37, 0x75, 0x20, 0x1c, 0xfb, 0xbf, 0xa4, 0x99, 0x8f, 0xa0, 0x99, 0x55, 0x03, 0x6d,
	0xbd, 0xa8, 0xb9, 0x5b, 0xf6, 0xe5, 0xc9, 0xec, 0x2e, 0x5d, 0xdc, 0x88, 0x54, 0xb3, 0xb7, 0xca,
	0x7f, 0xae, 0xe5, 0xdb, 0xc3, 0x7f, 0xae, 0xe5, 0x35, 0x32, 0xa7, 0xf5, 0xb0, 0x88, 0x8f, 0x01,
	0x51, 0x47, 0xf2, 0x73, 0x8d, 0xbb, 0x4a, 0x88, 0x14, 0xa1, 0x39, 0xdf, 0x9b, 0x78, 0x4d, 0x02,
	0x45, 0xb1, 0xdb, 0x93, 0xf0, 0xe7, 0x6b, 0xde, 0xfe, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0x16,
	0x7a, 0xa9, 0x92, 0xd4, 0x46, 0x00, 0x00,
}
