/*
Copyright 2019 Cisco Systems

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: mdt_sensor_group.proto

package cisco_ios_xr_telemetry_model_driven_oper_telemetry_model_driven_sensor_groups_sensor_group

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type MdtSensorGroup_KEYS struct {
	SensorGroupId        string   `protobuf:"bytes,1,opt,name=sensor_group_id,json=sensorGroupId,proto3" json:"sensor_group_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MdtSensorGroup_KEYS) Reset()         { *m = MdtSensorGroup_KEYS{} }
func (m *MdtSensorGroup_KEYS) String() string { return proto.CompactTextString(m) }
func (*MdtSensorGroup_KEYS) ProtoMessage()    {}
func (*MdtSensorGroup_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_e715b38714f9296d, []int{0}
}

func (m *MdtSensorGroup_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MdtSensorGroup_KEYS.Unmarshal(m, b)
}
func (m *MdtSensorGroup_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MdtSensorGroup_KEYS.Marshal(b, m, deterministic)
}
func (m *MdtSensorGroup_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MdtSensorGroup_KEYS.Merge(m, src)
}
func (m *MdtSensorGroup_KEYS) XXX_Size() int {
	return xxx_messageInfo_MdtSensorGroup_KEYS.Size(m)
}
func (m *MdtSensorGroup_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_MdtSensorGroup_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_MdtSensorGroup_KEYS proto.InternalMessageInfo

func (m *MdtSensorGroup_KEYS) GetSensorGroupId() string {
	if m != nil {
		return m.SensorGroupId
	}
	return ""
}

type MdtSensorPaths struct {
	Path                 string   `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	State                bool     `protobuf:"varint,2,opt,name=state,proto3" json:"state,omitempty"`
	StatusStr            string   `protobuf:"bytes,3,opt,name=status_str,json=statusStr,proto3" json:"status_str,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MdtSensorPaths) Reset()         { *m = MdtSensorPaths{} }
func (m *MdtSensorPaths) String() string { return proto.CompactTextString(m) }
func (*MdtSensorPaths) ProtoMessage()    {}
func (*MdtSensorPaths) Descriptor() ([]byte, []int) {
	return fileDescriptor_e715b38714f9296d, []int{1}
}

func (m *MdtSensorPaths) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MdtSensorPaths.Unmarshal(m, b)
}
func (m *MdtSensorPaths) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MdtSensorPaths.Marshal(b, m, deterministic)
}
func (m *MdtSensorPaths) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MdtSensorPaths.Merge(m, src)
}
func (m *MdtSensorPaths) XXX_Size() int {
	return xxx_messageInfo_MdtSensorPaths.Size(m)
}
func (m *MdtSensorPaths) XXX_DiscardUnknown() {
	xxx_messageInfo_MdtSensorPaths.DiscardUnknown(m)
}

var xxx_messageInfo_MdtSensorPaths proto.InternalMessageInfo

func (m *MdtSensorPaths) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *MdtSensorPaths) GetState() bool {
	if m != nil {
		return m.State
	}
	return false
}

func (m *MdtSensorPaths) GetStatusStr() string {
	if m != nil {
		return m.StatusStr
	}
	return ""
}

type MdtSensorGroup struct {
	Id                   string            `protobuf:"bytes,50,opt,name=id,proto3" json:"id,omitempty"`
	Configured           uint32            `protobuf:"varint,51,opt,name=configured,proto3" json:"configured,omitempty"`
	SensorPath           []*MdtSensorPaths `protobuf:"bytes,52,rep,name=sensor_path,json=sensorPath,proto3" json:"sensor_path,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *MdtSensorGroup) Reset()         { *m = MdtSensorGroup{} }
func (m *MdtSensorGroup) String() string { return proto.CompactTextString(m) }
func (*MdtSensorGroup) ProtoMessage()    {}
func (*MdtSensorGroup) Descriptor() ([]byte, []int) {
	return fileDescriptor_e715b38714f9296d, []int{2}
}

func (m *MdtSensorGroup) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MdtSensorGroup.Unmarshal(m, b)
}
func (m *MdtSensorGroup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MdtSensorGroup.Marshal(b, m, deterministic)
}
func (m *MdtSensorGroup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MdtSensorGroup.Merge(m, src)
}
func (m *MdtSensorGroup) XXX_Size() int {
	return xxx_messageInfo_MdtSensorGroup.Size(m)
}
func (m *MdtSensorGroup) XXX_DiscardUnknown() {
	xxx_messageInfo_MdtSensorGroup.DiscardUnknown(m)
}

var xxx_messageInfo_MdtSensorGroup proto.InternalMessageInfo

func (m *MdtSensorGroup) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *MdtSensorGroup) GetConfigured() uint32 {
	if m != nil {
		return m.Configured
	}
	return 0
}

func (m *MdtSensorGroup) GetSensorPath() []*MdtSensorPaths {
	if m != nil {
		return m.SensorPath
	}
	return nil
}

func init() {
	proto.RegisterType((*MdtSensorGroup_KEYS)(nil), "cisco_ios_xr_telemetry_model_driven_oper.telemetry_model_driven.sensor_groups.sensor_group.mdt_sensor_group_KEYS")
	proto.RegisterType((*MdtSensorPaths)(nil), "cisco_ios_xr_telemetry_model_driven_oper.telemetry_model_driven.sensor_groups.sensor_group.mdt_sensor_paths")
	proto.RegisterType((*MdtSensorGroup)(nil), "cisco_ios_xr_telemetry_model_driven_oper.telemetry_model_driven.sensor_groups.sensor_group.mdt_sensor_group")
}

func init() { proto.RegisterFile("mdt_sensor_group.proto", fileDescriptor_e715b38714f9296d) }

var fileDescriptor_e715b38714f9296d = []byte{
	// 266 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x91, 0x31, 0x4f, 0xc3, 0x30,
	0x10, 0x85, 0xe5, 0x16, 0x10, 0xbd, 0xaa, 0x80, 0x2c, 0x40, 0x5e, 0x40, 0x51, 0x06, 0x94, 0x29,
	0x43, 0xcb, 0xce, 0x84, 0x10, 0x62, 0x41, 0xe9, 0x04, 0x0c, 0xa7, 0x10, 0x9b, 0xd6, 0x52, 0x12,
	0x47, 0xe7, 0x0b, 0x82, 0x1f, 0xc1, 0x9f, 0xe3, 0x17, 0xa1, 0x38, 0x0c, 0x49, 0xc5, 0xca, 0xf6,
	0xde, 0xe7, 0xf3, 0xf3, 0xe9, 0x19, 0xce, 0x2b, 0xcd, 0xe8, 0x4d, 0xed, 0x1d, 0xe1, 0x86, 0x5c,
	0xdb, 0xa4, 0x0d, 0x39, 0x76, 0xf2, 0xb9, 0xb0, 0xbe, 0x70, 0x68, 0x9d, 0xc7, 0x0f, 0x42, 0x36,
	0xa5, 0xa9, 0x0c, 0xd3, 0x27, 0x56, 0x4e, 0x9b, 0x12, 0x35, 0xd9, 0x77, 0x53, 0xa3, 0x6b, 0x0c,
	0xa5, 0x7f, 0x9f, 0xa5, 0xc3, 0x4c, 0x3f, 0x72, 0xf1, 0x0d, 0x9c, 0xed, 0xbe, 0x8a, 0x0f, 0xb7,
	0x4f, 0x6b, 0x79, 0x05, 0xc7, 0x23, 0x68, 0xb5, 0x12, 0x91, 0x48, 0x66, 0xd9, 0xa2, 0xc7, 0x77,
	0x1d, 0xbd, 0xd7, 0xf1, 0x0b, 0x9c, 0x0c, 0x02, 0x9a, 0x9c, 0xb7, 0x5e, 0x4a, 0xd8, 0xeb, 0xc4,
	0xef, 0x85, 0xa0, 0xe5, 0x29, 0xec, 0x7b, 0xce, 0xd9, 0xa8, 0x49, 0x24, 0x92, 0xc3, 0xac, 0x37,
	0xf2, 0x02, 0xa0, 0x13, 0xad, 0x47, 0xcf, 0xa4, 0xa6, 0x61, 0x7e, 0xd6, 0x93, 0x35, 0x53, 0xfc,
	0x2d, 0x46, 0xe9, 0x61, 0x13, 0x79, 0x04, 0x13, 0xab, 0xd5, 0x32, 0xcc, 0x4e, 0xac, 0x96, 0x97,
	0x00, 0x85, 0xab, 0xdf, 0xec, 0xa6, 0x25, 0xa3, 0xd5, 0x2a, 0x12, 0xc9, 0x22, 0x1b, 0x10, 0xf9,
	0x25, 0x60, 0x3e, 0x58, 0x4f, 0x5d, 0x47, 0xd3, 0x64, 0xbe, 0x2c, 0xd3, 0xff, 0x6b, 0x35, 0xdd,
	0x6d, 0x24, 0x83, 0xde, 0x3d, 0xe6, 0xbc, 0x7d, 0x3d, 0x08, 0xbf, 0xba, 0xfa, 0x09, 0x00, 0x00,
	0xff, 0xff, 0x6c, 0x01, 0x7f, 0x14, 0xef, 0x01, 0x00, 0x00,
}
