/*
Copyright 2019 Cisco Systems

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ptp_port_ds_info.proto

package cisco_ios_xr_ptp_oper_ptp_dataset_port_dses_port_ds

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type PtpPortDsInfo_KEYS struct {
	InterfaceName        string   `protobuf:"bytes,1,opt,name=interface_name,json=interfaceName,proto3" json:"interface_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PtpPortDsInfo_KEYS) Reset()         { *m = PtpPortDsInfo_KEYS{} }
func (m *PtpPortDsInfo_KEYS) String() string { return proto.CompactTextString(m) }
func (*PtpPortDsInfo_KEYS) ProtoMessage()    {}
func (*PtpPortDsInfo_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_a54cc25ae9b2a3ab, []int{0}
}

func (m *PtpPortDsInfo_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PtpPortDsInfo_KEYS.Unmarshal(m, b)
}
func (m *PtpPortDsInfo_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PtpPortDsInfo_KEYS.Marshal(b, m, deterministic)
}
func (m *PtpPortDsInfo_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PtpPortDsInfo_KEYS.Merge(m, src)
}
func (m *PtpPortDsInfo_KEYS) XXX_Size() int {
	return xxx_messageInfo_PtpPortDsInfo_KEYS.Size(m)
}
func (m *PtpPortDsInfo_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_PtpPortDsInfo_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_PtpPortDsInfo_KEYS proto.InternalMessageInfo

func (m *PtpPortDsInfo_KEYS) GetInterfaceName() string {
	if m != nil {
		return m.InterfaceName
	}
	return ""
}

type PtpPortDsInfo struct {
	ClockId                 uint64   `protobuf:"varint,50,opt,name=clock_id,json=clockId,proto3" json:"clock_id,omitempty"`
	PortNumber              uint32   `protobuf:"varint,51,opt,name=port_number,json=portNumber,proto3" json:"port_number,omitempty"`
	PortState               string   `protobuf:"bytes,52,opt,name=port_state,json=portState,proto3" json:"port_state,omitempty"`
	LogMinDelayReqInterval  string   `protobuf:"bytes,53,opt,name=log_min_delay_req_interval,json=logMinDelayReqInterval,proto3" json:"log_min_delay_req_interval,omitempty"`
	PeerMeanPathDelay       string   `protobuf:"bytes,54,opt,name=peer_mean_path_delay,json=peerMeanPathDelay,proto3" json:"peer_mean_path_delay,omitempty"`
	LogAnnounceInterval     string   `protobuf:"bytes,55,opt,name=log_announce_interval,json=logAnnounceInterval,proto3" json:"log_announce_interval,omitempty"`
	AnnoucneReceiptTimeout  uint32   `protobuf:"varint,56,opt,name=annoucne_receipt_timeout,json=annoucneReceiptTimeout,proto3" json:"annoucne_receipt_timeout,omitempty"`
	LogSyncInterval         string   `protobuf:"bytes,57,opt,name=log_sync_interval,json=logSyncInterval,proto3" json:"log_sync_interval,omitempty"`
	DelayMechanism          string   `protobuf:"bytes,58,opt,name=delay_mechanism,json=delayMechanism,proto3" json:"delay_mechanism,omitempty"`
	LogMinPDelayReqInterval string   `protobuf:"bytes,59,opt,name=log_min_p_delay_req_interval,json=logMinPDelayReqInterval,proto3" json:"log_min_p_delay_req_interval,omitempty"`
	VersionNumber           uint32   `protobuf:"varint,60,opt,name=version_number,json=versionNumber,proto3" json:"version_number,omitempty"`
	LocalPriority           uint32   `protobuf:"varint,61,opt,name=local_priority,json=localPriority,proto3" json:"local_priority,omitempty"`
	MasterOnly              bool     `protobuf:"varint,62,opt,name=master_only,json=masterOnly,proto3" json:"master_only,omitempty"`
	SignalFail              bool     `protobuf:"varint,63,opt,name=signal_fail,json=signalFail,proto3" json:"signal_fail,omitempty"`
	XXX_NoUnkeyedLiteral    struct{} `json:"-"`
	XXX_unrecognized        []byte   `json:"-"`
	XXX_sizecache           int32    `json:"-"`
}

func (m *PtpPortDsInfo) Reset()         { *m = PtpPortDsInfo{} }
func (m *PtpPortDsInfo) String() string { return proto.CompactTextString(m) }
func (*PtpPortDsInfo) ProtoMessage()    {}
func (*PtpPortDsInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_a54cc25ae9b2a3ab, []int{1}
}

func (m *PtpPortDsInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PtpPortDsInfo.Unmarshal(m, b)
}
func (m *PtpPortDsInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PtpPortDsInfo.Marshal(b, m, deterministic)
}
func (m *PtpPortDsInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PtpPortDsInfo.Merge(m, src)
}
func (m *PtpPortDsInfo) XXX_Size() int {
	return xxx_messageInfo_PtpPortDsInfo.Size(m)
}
func (m *PtpPortDsInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PtpPortDsInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PtpPortDsInfo proto.InternalMessageInfo

func (m *PtpPortDsInfo) GetClockId() uint64 {
	if m != nil {
		return m.ClockId
	}
	return 0
}

func (m *PtpPortDsInfo) GetPortNumber() uint32 {
	if m != nil {
		return m.PortNumber
	}
	return 0
}

func (m *PtpPortDsInfo) GetPortState() string {
	if m != nil {
		return m.PortState
	}
	return ""
}

func (m *PtpPortDsInfo) GetLogMinDelayReqInterval() string {
	if m != nil {
		return m.LogMinDelayReqInterval
	}
	return ""
}

func (m *PtpPortDsInfo) GetPeerMeanPathDelay() string {
	if m != nil {
		return m.PeerMeanPathDelay
	}
	return ""
}

func (m *PtpPortDsInfo) GetLogAnnounceInterval() string {
	if m != nil {
		return m.LogAnnounceInterval
	}
	return ""
}

func (m *PtpPortDsInfo) GetAnnoucneReceiptTimeout() uint32 {
	if m != nil {
		return m.AnnoucneReceiptTimeout
	}
	return 0
}

func (m *PtpPortDsInfo) GetLogSyncInterval() string {
	if m != nil {
		return m.LogSyncInterval
	}
	return ""
}

func (m *PtpPortDsInfo) GetDelayMechanism() string {
	if m != nil {
		return m.DelayMechanism
	}
	return ""
}

func (m *PtpPortDsInfo) GetLogMinPDelayReqInterval() string {
	if m != nil {
		return m.LogMinPDelayReqInterval
	}
	return ""
}

func (m *PtpPortDsInfo) GetVersionNumber() uint32 {
	if m != nil {
		return m.VersionNumber
	}
	return 0
}

func (m *PtpPortDsInfo) GetLocalPriority() uint32 {
	if m != nil {
		return m.LocalPriority
	}
	return 0
}

func (m *PtpPortDsInfo) GetMasterOnly() bool {
	if m != nil {
		return m.MasterOnly
	}
	return false
}

func (m *PtpPortDsInfo) GetSignalFail() bool {
	if m != nil {
		return m.SignalFail
	}
	return false
}

func init() {
	proto.RegisterType((*PtpPortDsInfo_KEYS)(nil), "cisco_ios_xr_ptp_oper.ptp.dataset.port_dses.port_ds.ptp_port_ds_info_KEYS")
	proto.RegisterType((*PtpPortDsInfo)(nil), "cisco_ios_xr_ptp_oper.ptp.dataset.port_dses.port_ds.ptp_port_ds_info")
}

func init() { proto.RegisterFile("ptp_port_ds_info.proto", fileDescriptor_a54cc25ae9b2a3ab) }

var fileDescriptor_a54cc25ae9b2a3ab = []byte{
	// 468 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x92, 0x6f, 0x6b, 0x13, 0x41,
	0x10, 0xc6, 0x09, 0x14, 0x6d, 0x57, 0x92, 0xda, 0xd5, 0xc6, 0x55, 0x14, 0x43, 0x21, 0x18, 0x7c,
	0x11, 0xa1, 0xf1, 0x4f, 0xad, 0xb6, 0x22, 0xa8, 0x50, 0x24, 0x35, 0x5c, 0x7c, 0xe3, 0xab, 0x61,
	0xbb, 0x99, 0x5c, 0x16, 0xf7, 0x76, 0xb7, 0xbb, 0x9b, 0xe2, 0x7d, 0x67, 0x3f, 0x84, 0xdc, 0xdc,
	0x5d, 0x0a, 0xb5, 0xef, 0xb2, 0xbf, 0xe7, 0x99, 0x79, 0x32, 0x33, 0xc7, 0xfa, 0x3e, 0x79, 0xf0,
	0x2e, 0x24, 0x58, 0x44, 0xd0, 0x76, 0xe9, 0xc6, 0x3e, 0xb8, 0xe4, 0xf8, 0x44, 0xe9, 0xa8, 0x1c,
	0x68, 0x17, 0xe1, 0x4f, 0x80, 0xca, 0xe4, 0x3c, 0x86, 0xb1, 0x4f, 0x7e, 0xbc, 0x90, 0x49, 0x46,
	0x4c, 0xe3, 0xa6, 0x0a, 0x63, 0xfb, 0xeb, 0xe0, 0x94, 0xed, 0xdf, 0x6c, 0x07, 0xdf, 0xbf, 0xfe,
	0x9a, 0xf3, 0x21, 0xeb, 0x69, 0x9b, 0x30, 0x2c, 0xa5, 0x42, 0xb0, 0xb2, 0x40, 0xd1, 0x19, 0x74,
	0x46, 0x3b, 0x59, 0x77, 0x43, 0xcf, 0x65, 0x81, 0x07, 0x7f, 0xb7, 0xd8, 0xfd, 0x9b, 0x0d, 0xf8,
	0x63, 0xb6, 0xad, 0x8c, 0x53, 0xbf, 0x41, 0x2f, 0xc4, 0xe1, 0xa0, 0x33, 0xda, 0xca, 0xee, 0xd2,
	0xfb, 0x6c, 0xc1, 0x9f, 0xb3, 0x7b, 0x64, 0xb5, 0xeb, 0xe2, 0x02, 0x83, 0x98, 0x0c, 0x3a, 0xa3,
	0x6e, 0xc6, 0x2a, 0x74, 0x4e, 0x84, 0x3f, 0x63, 0xf4, 0x82, 0x98, 0x64, 0x42, 0xf1, 0x9a, 0x32,
	0x77, 0x2a, 0x32, 0xaf, 0x00, 0x3f, 0x66, 0x4f, 0x8c, 0xcb, 0xa1, 0xd0, 0x16, 0x16, 0x68, 0x64,
	0x09, 0x01, 0x2f, 0x81, 0xfe, 0xd2, 0x95, 0x34, 0xe2, 0x0d, 0xd9, 0xfb, 0xc6, 0xe5, 0x53, 0x6d,
	0xbf, 0x54, 0x7a, 0x86, 0x97, 0x67, 0x8d, 0xca, 0x5f, 0xb1, 0x87, 0x1e, 0x31, 0x40, 0x81, 0xd2,
	0x82, 0x97, 0x69, 0x55, 0xb7, 0x10, 0x6f, 0xa9, 0x6a, 0xaf, 0xd2, 0xa6, 0x28, 0xed, 0x4c, 0xa6,
	0x15, 0xd5, 0xf2, 0x43, 0xb6, 0x5f, 0x85, 0x49, 0x6b, 0xdd, 0xda, 0x2a, 0xbc, 0xce, 0x79, 0x47,
	0x15, 0x0f, 0x8c, 0xcb, 0x3f, 0x37, 0xda, 0x26, 0xe4, 0x88, 0x09, 0xf2, 0x2b, 0x8b, 0x10, 0x50,
	0xa1, 0xf6, 0x09, 0x92, 0x2e, 0xd0, 0xad, 0x93, 0x38, 0xa2, 0x69, 0xfb, 0xad, 0x9e, 0xd5, 0xf2,
	0xcf, 0x5a, 0xe5, 0x2f, 0xd9, 0x5e, 0x95, 0x16, 0x4b, 0xab, 0xae, 0x93, 0xde, 0x53, 0xd2, 0xae,
	0x71, 0xf9, 0xbc, 0xb4, 0x6a, 0x93, 0xf2, 0x82, 0xed, 0xd6, 0xe3, 0x17, 0xa8, 0x56, 0xd2, 0xea,
	0x58, 0x88, 0x63, 0x72, 0xf6, 0x08, 0x4f, 0x5b, 0xca, 0x4f, 0xd8, 0xd3, 0x76, 0x5f, 0xfe, 0xb6,
	0x8d, 0x7d, 0xa0, 0xaa, 0x47, 0xf5, 0xc6, 0x66, 0xff, 0xad, 0x6c, 0xc8, 0x7a, 0x57, 0x18, 0xa2,
	0x76, 0xb6, 0xbd, 0xd8, 0x47, 0x9a, 0xa1, 0xdb, 0xd0, 0xe6, 0x68, 0x43, 0xd6, 0x33, 0x4e, 0x49,
	0x03, 0x3e, 0x68, 0x17, 0x74, 0x2a, 0xc5, 0x49, 0x6d, 0x23, 0x3a, 0x6b, 0x60, 0x75, 0xfc, 0x42,
	0xc6, 0x84, 0x01, 0x9c, 0x35, 0xa5, 0x38, 0x1d, 0x74, 0x46, 0xdb, 0x19, 0xab, 0xd1, 0x0f, 0x6b,
	0xc8, 0x10, 0x75, 0x6e, 0xa5, 0x81, 0xa5, 0xd4, 0x46, 0x7c, 0xaa, 0x0d, 0x35, 0xfa, 0x26, 0xb5,
	0xb9, 0xb8, 0x43, 0x9f, 0xfa, 0xe4, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x90, 0x94, 0x89, 0x01,
	0x04, 0x03, 0x00, 0x00,
}
