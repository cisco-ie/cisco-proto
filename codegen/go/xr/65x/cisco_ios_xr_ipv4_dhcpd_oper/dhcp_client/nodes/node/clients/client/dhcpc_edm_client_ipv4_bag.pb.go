/*
Copyright 2019 Cisco Systems

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: dhcpc_edm_client_ipv4_bag.proto

package cisco_ios_xr_ipv4_dhcpd_oper_dhcp_client_nodes_node_clients_client

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type DhcpcEdmClientIpv4Bag_KEYS struct {
	NodeName             string   `protobuf:"bytes,1,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	ClientIfhandle       string   `protobuf:"bytes,2,opt,name=client_ifhandle,json=clientIfhandle,proto3" json:"client_ifhandle,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DhcpcEdmClientIpv4Bag_KEYS) Reset()         { *m = DhcpcEdmClientIpv4Bag_KEYS{} }
func (m *DhcpcEdmClientIpv4Bag_KEYS) String() string { return proto.CompactTextString(m) }
func (*DhcpcEdmClientIpv4Bag_KEYS) ProtoMessage()    {}
func (*DhcpcEdmClientIpv4Bag_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_f6984aec6de1a9b8, []int{0}
}

func (m *DhcpcEdmClientIpv4Bag_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DhcpcEdmClientIpv4Bag_KEYS.Unmarshal(m, b)
}
func (m *DhcpcEdmClientIpv4Bag_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DhcpcEdmClientIpv4Bag_KEYS.Marshal(b, m, deterministic)
}
func (m *DhcpcEdmClientIpv4Bag_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DhcpcEdmClientIpv4Bag_KEYS.Merge(m, src)
}
func (m *DhcpcEdmClientIpv4Bag_KEYS) XXX_Size() int {
	return xxx_messageInfo_DhcpcEdmClientIpv4Bag_KEYS.Size(m)
}
func (m *DhcpcEdmClientIpv4Bag_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_DhcpcEdmClientIpv4Bag_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_DhcpcEdmClientIpv4Bag_KEYS proto.InternalMessageInfo

func (m *DhcpcEdmClientIpv4Bag_KEYS) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

func (m *DhcpcEdmClientIpv4Bag_KEYS) GetClientIfhandle() string {
	if m != nil {
		return m.ClientIfhandle
	}
	return ""
}

type DhcpcEdmClientIpv4Bag struct {
	InterfaceName         string   `protobuf:"bytes,50,opt,name=interface_name,json=interfaceName,proto3" json:"interface_name,omitempty"`
	ClientMacAddress      string   `protobuf:"bytes,51,opt,name=client_mac_address,json=clientMacAddress,proto3" json:"client_mac_address,omitempty"`
	ClientId              string   `protobuf:"bytes,52,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	Ipv4ClientState       string   `protobuf:"bytes,53,opt,name=ipv4_client_state,json=ipv4ClientState,proto3" json:"ipv4_client_state,omitempty"`
	Ipv4Address           string   `protobuf:"bytes,54,opt,name=ipv4_address,json=ipv4Address,proto3" json:"ipv4_address,omitempty"`
	Ipv4SubnetMask        string   `protobuf:"bytes,55,opt,name=ipv4_subnet_mask,json=ipv4SubnetMask,proto3" json:"ipv4_subnet_mask,omitempty"`
	Ipv4ServerAddress     string   `protobuf:"bytes,56,opt,name=ipv4_server_address,json=ipv4ServerAddress,proto3" json:"ipv4_server_address,omitempty"`
	NextHopIpv4Address    string   `protobuf:"bytes,57,opt,name=next_hop_ipv4_address,json=nextHopIpv4Address,proto3" json:"next_hop_ipv4_address,omitempty"`
	Ipv4LeaseTime         uint32   `protobuf:"varint,58,opt,name=ipv4_lease_time,json=ipv4LeaseTime,proto3" json:"ipv4_lease_time,omitempty"`
	Ipv4RenewTime         uint32   `protobuf:"varint,59,opt,name=ipv4_renew_time,json=ipv4RenewTime,proto3" json:"ipv4_renew_time,omitempty"`
	Ipv4RebindTime        uint32   `protobuf:"varint,60,opt,name=ipv4_rebind_time,json=ipv4RebindTime,proto3" json:"ipv4_rebind_time,omitempty"`
	Ipv4AddressConfigured bool     `protobuf:"varint,61,opt,name=ipv4_address_configured,json=ipv4AddressConfigured,proto3" json:"ipv4_address_configured,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *DhcpcEdmClientIpv4Bag) Reset()         { *m = DhcpcEdmClientIpv4Bag{} }
func (m *DhcpcEdmClientIpv4Bag) String() string { return proto.CompactTextString(m) }
func (*DhcpcEdmClientIpv4Bag) ProtoMessage()    {}
func (*DhcpcEdmClientIpv4Bag) Descriptor() ([]byte, []int) {
	return fileDescriptor_f6984aec6de1a9b8, []int{1}
}

func (m *DhcpcEdmClientIpv4Bag) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DhcpcEdmClientIpv4Bag.Unmarshal(m, b)
}
func (m *DhcpcEdmClientIpv4Bag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DhcpcEdmClientIpv4Bag.Marshal(b, m, deterministic)
}
func (m *DhcpcEdmClientIpv4Bag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DhcpcEdmClientIpv4Bag.Merge(m, src)
}
func (m *DhcpcEdmClientIpv4Bag) XXX_Size() int {
	return xxx_messageInfo_DhcpcEdmClientIpv4Bag.Size(m)
}
func (m *DhcpcEdmClientIpv4Bag) XXX_DiscardUnknown() {
	xxx_messageInfo_DhcpcEdmClientIpv4Bag.DiscardUnknown(m)
}

var xxx_messageInfo_DhcpcEdmClientIpv4Bag proto.InternalMessageInfo

func (m *DhcpcEdmClientIpv4Bag) GetInterfaceName() string {
	if m != nil {
		return m.InterfaceName
	}
	return ""
}

func (m *DhcpcEdmClientIpv4Bag) GetClientMacAddress() string {
	if m != nil {
		return m.ClientMacAddress
	}
	return ""
}

func (m *DhcpcEdmClientIpv4Bag) GetClientId() string {
	if m != nil {
		return m.ClientId
	}
	return ""
}

func (m *DhcpcEdmClientIpv4Bag) GetIpv4ClientState() string {
	if m != nil {
		return m.Ipv4ClientState
	}
	return ""
}

func (m *DhcpcEdmClientIpv4Bag) GetIpv4Address() string {
	if m != nil {
		return m.Ipv4Address
	}
	return ""
}

func (m *DhcpcEdmClientIpv4Bag) GetIpv4SubnetMask() string {
	if m != nil {
		return m.Ipv4SubnetMask
	}
	return ""
}

func (m *DhcpcEdmClientIpv4Bag) GetIpv4ServerAddress() string {
	if m != nil {
		return m.Ipv4ServerAddress
	}
	return ""
}

func (m *DhcpcEdmClientIpv4Bag) GetNextHopIpv4Address() string {
	if m != nil {
		return m.NextHopIpv4Address
	}
	return ""
}

func (m *DhcpcEdmClientIpv4Bag) GetIpv4LeaseTime() uint32 {
	if m != nil {
		return m.Ipv4LeaseTime
	}
	return 0
}

func (m *DhcpcEdmClientIpv4Bag) GetIpv4RenewTime() uint32 {
	if m != nil {
		return m.Ipv4RenewTime
	}
	return 0
}

func (m *DhcpcEdmClientIpv4Bag) GetIpv4RebindTime() uint32 {
	if m != nil {
		return m.Ipv4RebindTime
	}
	return 0
}

func (m *DhcpcEdmClientIpv4Bag) GetIpv4AddressConfigured() bool {
	if m != nil {
		return m.Ipv4AddressConfigured
	}
	return false
}

func init() {
	proto.RegisterType((*DhcpcEdmClientIpv4Bag_KEYS)(nil), "cisco_ios_xr_ipv4_dhcpd_oper.dhcp_client.nodes.node.clients.client.dhcpc_edm_client_ipv4_bag_KEYS")
	proto.RegisterType((*DhcpcEdmClientIpv4Bag)(nil), "cisco_ios_xr_ipv4_dhcpd_oper.dhcp_client.nodes.node.clients.client.dhcpc_edm_client_ipv4_bag")
}

func init() { proto.RegisterFile("dhcpc_edm_client_ipv4_bag.proto", fileDescriptor_f6984aec6de1a9b8) }

var fileDescriptor_f6984aec6de1a9b8 = []byte{
	// 415 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x92, 0x5d, 0x8b, 0x13, 0x31,
	0x14, 0x86, 0x19, 0x11, 0xd9, 0x8d, 0xb6, 0xbb, 0x46, 0x16, 0x23, 0x82, 0xd6, 0x05, 0x75, 0x10,
	0x19, 0xd0, 0x5d, 0xd7, 0xef, 0x0b, 0x2d, 0x82, 0x45, 0xeb, 0xc5, 0x8c, 0x37, 0x5e, 0x85, 0x4c,
	0x72, 0xa6, 0x0d, 0xed, 0x24, 0x43, 0x32, 0xad, 0xfd, 0x2f, 0xfe, 0x59, 0xc9, 0xc9, 0xcc, 0x58,
	0x2f, 0x7a, 0xd3, 0x96, 0xe7, 0x3c, 0x27, 0xef, 0x9b, 0x50, 0xf2, 0x50, 0x2d, 0x65, 0x23, 0x39,
	0xa8, 0x9a, 0xcb, 0xb5, 0x06, 0xd3, 0x72, 0xdd, 0x6c, 0x2f, 0x79, 0x29, 0x16, 0x59, 0xe3, 0x6c,
	0x6b, 0xe9, 0x67, 0xa9, 0xbd, 0xb4, 0x5c, 0x5b, 0xcf, 0x77, 0x2e, 0x0e, 0xc3, 0x8a, 0xe2, 0xb6,
	0x01, 0x97, 0x85, 0x9f, 0xdd, 0x62, 0x66, 0xac, 0x02, 0x8f, 0x9f, 0x59, 0x24, 0xbe, 0xfb, 0x3e,
	0xaf, 0xc8, 0x83, 0x83, 0x31, 0xfc, 0xdb, 0x97, 0x5f, 0x05, 0xbd, 0x4f, 0x8e, 0xc3, 0x22, 0x37,
	0xa2, 0x06, 0x96, 0x4c, 0x92, 0xf4, 0x38, 0x3f, 0x0a, 0xe0, 0x87, 0xa8, 0x81, 0x3e, 0x25, 0x27,
	0xfd, 0x52, 0xb5, 0x14, 0x46, 0xad, 0x81, 0x5d, 0x43, 0x65, 0x1c, 0xf1, 0xac, 0xa3, 0xe7, 0x7f,
	0xae, 0x93, 0x7b, 0x07, 0x83, 0xe8, 0x63, 0x32, 0xd6, 0xa6, 0x05, 0x57, 0x09, 0xd9, 0x05, 0xbd,
	0xc4, 0x53, 0x46, 0x03, 0xc5, 0xb4, 0xe7, 0x84, 0x76, 0x9b, 0xb5, 0x90, 0x5c, 0x28, 0xe5, 0xc0,
	0x7b, 0x76, 0x81, 0xea, 0x69, 0x9c, 0xcc, 0x85, 0xfc, 0x14, 0x79, 0x28, 0xde, 0xe7, 0x28, 0x76,
	0x19, 0x8b, 0x77, 0xad, 0x14, 0x7d, 0x46, 0x6e, 0x63, 0x7a, 0x67, 0xf8, 0x56, 0xb4, 0xc0, 0x5e,
	0xa1, 0x74, 0x12, 0x06, 0x53, 0xe4, 0x45, 0xc0, 0xf4, 0x11, 0xb9, 0x85, 0x6e, 0x1f, 0x78, 0x85,
	0xda, 0xcd, 0xc0, 0xfa, 0xac, 0x94, 0x9c, 0xa2, 0xe2, 0x37, 0xa5, 0x81, 0x50, 0xcf, 0xaf, 0xd8,
	0xeb, 0xf8, 0x10, 0x81, 0x17, 0x88, 0xe7, 0xc2, 0xaf, 0x68, 0x46, 0xee, 0x44, 0x13, 0xdc, 0x16,
	0xdc, 0x70, 0xe6, 0x1b, 0x94, 0xb1, 0x53, 0x81, 0x93, 0xfe, 0xe4, 0x17, 0xe4, 0xcc, 0xc0, 0xae,
	0xe5, 0x4b, 0xdb, 0xf0, 0xff, 0x5a, 0xbc, 0xc5, 0x0d, 0x1a, 0x86, 0x5f, 0x6d, 0x33, 0xdb, 0x2b,
	0xf3, 0x84, 0xe0, 0x15, 0xf8, 0x1a, 0x84, 0x07, 0xde, 0xea, 0x1a, 0xd8, 0xbb, 0x49, 0x92, 0x8e,
	0xf2, 0x51, 0xc0, 0xdf, 0x03, 0xfd, 0xa9, 0x6b, 0x18, 0x3c, 0x07, 0x06, 0x7e, 0x47, 0xef, 0xfd,
	0x3f, 0x2f, 0x0f, 0x14, 0xbd, 0xfe, 0x72, 0x0e, 0x4a, 0x6d, 0x54, 0x14, 0x3f, 0xa0, 0x38, 0x8e,
	0x62, 0xc0, 0x68, 0x5e, 0x91, 0xbb, 0xfb, 0x1d, 0xb9, 0xb4, 0xa6, 0xd2, 0x8b, 0x8d, 0x03, 0xc5,
	0x3e, 0x4e, 0x92, 0xf4, 0x28, 0x3f, 0xdb, 0x7b, 0xb4, 0xe9, 0x30, 0x2c, 0x6f, 0xe0, 0x1f, 0xfa,
	0xe2, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x89, 0x0a, 0x5a, 0xac, 0xf3, 0x02, 0x00, 0x00,
}
