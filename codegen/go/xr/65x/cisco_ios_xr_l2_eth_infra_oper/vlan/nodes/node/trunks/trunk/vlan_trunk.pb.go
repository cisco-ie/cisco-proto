/*
Copyright 2019 Cisco Systems

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: vlan_trunk.proto

package cisco_ios_xr_l2_eth_infra_oper_vlan_nodes_node_trunks_trunk

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type VlanTrunk_KEYS struct {
	NodeId               string   `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	Interface            string   `protobuf:"bytes,2,opt,name=interface,proto3" json:"interface,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VlanTrunk_KEYS) Reset()         { *m = VlanTrunk_KEYS{} }
func (m *VlanTrunk_KEYS) String() string { return proto.CompactTextString(m) }
func (*VlanTrunk_KEYS) ProtoMessage()    {}
func (*VlanTrunk_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_029c81a325123aaf, []int{0}
}

func (m *VlanTrunk_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VlanTrunk_KEYS.Unmarshal(m, b)
}
func (m *VlanTrunk_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VlanTrunk_KEYS.Marshal(b, m, deterministic)
}
func (m *VlanTrunk_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VlanTrunk_KEYS.Merge(m, src)
}
func (m *VlanTrunk_KEYS) XXX_Size() int {
	return xxx_messageInfo_VlanTrunk_KEYS.Size(m)
}
func (m *VlanTrunk_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_VlanTrunk_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_VlanTrunk_KEYS proto.InternalMessageInfo

func (m *VlanTrunk_KEYS) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

func (m *VlanTrunk_KEYS) GetInterface() string {
	if m != nil {
		return m.Interface
	}
	return ""
}

type VlanTrunkSubIntfStateCounters struct {
	Up                   uint32   `protobuf:"varint,1,opt,name=up,proto3" json:"up,omitempty"`
	Down                 uint32   `protobuf:"varint,2,opt,name=down,proto3" json:"down,omitempty"`
	AdminDown            uint32   `protobuf:"varint,3,opt,name=admin_down,json=adminDown,proto3" json:"admin_down,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VlanTrunkSubIntfStateCounters) Reset()         { *m = VlanTrunkSubIntfStateCounters{} }
func (m *VlanTrunkSubIntfStateCounters) String() string { return proto.CompactTextString(m) }
func (*VlanTrunkSubIntfStateCounters) ProtoMessage()    {}
func (*VlanTrunkSubIntfStateCounters) Descriptor() ([]byte, []int) {
	return fileDescriptor_029c81a325123aaf, []int{1}
}

func (m *VlanTrunkSubIntfStateCounters) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VlanTrunkSubIntfStateCounters.Unmarshal(m, b)
}
func (m *VlanTrunkSubIntfStateCounters) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VlanTrunkSubIntfStateCounters.Marshal(b, m, deterministic)
}
func (m *VlanTrunkSubIntfStateCounters) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VlanTrunkSubIntfStateCounters.Merge(m, src)
}
func (m *VlanTrunkSubIntfStateCounters) XXX_Size() int {
	return xxx_messageInfo_VlanTrunkSubIntfStateCounters.Size(m)
}
func (m *VlanTrunkSubIntfStateCounters) XXX_DiscardUnknown() {
	xxx_messageInfo_VlanTrunkSubIntfStateCounters.DiscardUnknown(m)
}

var xxx_messageInfo_VlanTrunkSubIntfStateCounters proto.InternalMessageInfo

func (m *VlanTrunkSubIntfStateCounters) GetUp() uint32 {
	if m != nil {
		return m.Up
	}
	return 0
}

func (m *VlanTrunkSubIntfStateCounters) GetDown() uint32 {
	if m != nil {
		return m.Down
	}
	return 0
}

func (m *VlanTrunkSubIntfStateCounters) GetAdminDown() uint32 {
	if m != nil {
		return m.AdminDown
	}
	return 0
}

type VlanTrunkL2SubIntfs struct {
	TotalCount           uint32                         `protobuf:"varint,1,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	Dot1QCount           uint32                         `protobuf:"varint,2,opt,name=dot1q_count,json=dot1qCount,proto3" json:"dot1q_count,omitempty"`
	QinQCount            uint32                         `protobuf:"varint,3,opt,name=qin_q_count,json=qinQCount,proto3" json:"qin_q_count,omitempty"`
	QinAnyCount          uint32                         `protobuf:"varint,4,opt,name=qin_any_count,json=qinAnyCount,proto3" json:"qin_any_count,omitempty"`
	UntaggedCount        uint32                         `protobuf:"varint,5,opt,name=untagged_count,json=untaggedCount,proto3" json:"untagged_count,omitempty"`
	StateCounters        *VlanTrunkSubIntfStateCounters `protobuf:"bytes,6,opt,name=state_counters,json=stateCounters,proto3" json:"state_counters,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-"`
	XXX_unrecognized     []byte                         `json:"-"`
	XXX_sizecache        int32                          `json:"-"`
}

func (m *VlanTrunkL2SubIntfs) Reset()         { *m = VlanTrunkL2SubIntfs{} }
func (m *VlanTrunkL2SubIntfs) String() string { return proto.CompactTextString(m) }
func (*VlanTrunkL2SubIntfs) ProtoMessage()    {}
func (*VlanTrunkL2SubIntfs) Descriptor() ([]byte, []int) {
	return fileDescriptor_029c81a325123aaf, []int{2}
}

func (m *VlanTrunkL2SubIntfs) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VlanTrunkL2SubIntfs.Unmarshal(m, b)
}
func (m *VlanTrunkL2SubIntfs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VlanTrunkL2SubIntfs.Marshal(b, m, deterministic)
}
func (m *VlanTrunkL2SubIntfs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VlanTrunkL2SubIntfs.Merge(m, src)
}
func (m *VlanTrunkL2SubIntfs) XXX_Size() int {
	return xxx_messageInfo_VlanTrunkL2SubIntfs.Size(m)
}
func (m *VlanTrunkL2SubIntfs) XXX_DiscardUnknown() {
	xxx_messageInfo_VlanTrunkL2SubIntfs.DiscardUnknown(m)
}

var xxx_messageInfo_VlanTrunkL2SubIntfs proto.InternalMessageInfo

func (m *VlanTrunkL2SubIntfs) GetTotalCount() uint32 {
	if m != nil {
		return m.TotalCount
	}
	return 0
}

func (m *VlanTrunkL2SubIntfs) GetDot1QCount() uint32 {
	if m != nil {
		return m.Dot1QCount
	}
	return 0
}

func (m *VlanTrunkL2SubIntfs) GetQinQCount() uint32 {
	if m != nil {
		return m.QinQCount
	}
	return 0
}

func (m *VlanTrunkL2SubIntfs) GetQinAnyCount() uint32 {
	if m != nil {
		return m.QinAnyCount
	}
	return 0
}

func (m *VlanTrunkL2SubIntfs) GetUntaggedCount() uint32 {
	if m != nil {
		return m.UntaggedCount
	}
	return 0
}

func (m *VlanTrunkL2SubIntfs) GetStateCounters() *VlanTrunkSubIntfStateCounters {
	if m != nil {
		return m.StateCounters
	}
	return nil
}

type VlanTrunkL3SubIntfs struct {
	TotalCount           uint32                         `protobuf:"varint,1,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	Dot1QCount           uint32                         `protobuf:"varint,2,opt,name=dot1q_count,json=dot1qCount,proto3" json:"dot1q_count,omitempty"`
	QinQCount            uint32                         `protobuf:"varint,3,opt,name=qin_q_count,json=qinQCount,proto3" json:"qin_q_count,omitempty"`
	UntaggedCount        uint32                         `protobuf:"varint,4,opt,name=untagged_count,json=untaggedCount,proto3" json:"untagged_count,omitempty"`
	StateCounters        *VlanTrunkSubIntfStateCounters `protobuf:"bytes,5,opt,name=state_counters,json=stateCounters,proto3" json:"state_counters,omitempty"`
	NativeVlan           uint32                         `protobuf:"varint,6,opt,name=native_vlan,json=nativeVlan,proto3" json:"native_vlan,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-"`
	XXX_unrecognized     []byte                         `json:"-"`
	XXX_sizecache        int32                          `json:"-"`
}

func (m *VlanTrunkL3SubIntfs) Reset()         { *m = VlanTrunkL3SubIntfs{} }
func (m *VlanTrunkL3SubIntfs) String() string { return proto.CompactTextString(m) }
func (*VlanTrunkL3SubIntfs) ProtoMessage()    {}
func (*VlanTrunkL3SubIntfs) Descriptor() ([]byte, []int) {
	return fileDescriptor_029c81a325123aaf, []int{3}
}

func (m *VlanTrunkL3SubIntfs) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VlanTrunkL3SubIntfs.Unmarshal(m, b)
}
func (m *VlanTrunkL3SubIntfs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VlanTrunkL3SubIntfs.Marshal(b, m, deterministic)
}
func (m *VlanTrunkL3SubIntfs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VlanTrunkL3SubIntfs.Merge(m, src)
}
func (m *VlanTrunkL3SubIntfs) XXX_Size() int {
	return xxx_messageInfo_VlanTrunkL3SubIntfs.Size(m)
}
func (m *VlanTrunkL3SubIntfs) XXX_DiscardUnknown() {
	xxx_messageInfo_VlanTrunkL3SubIntfs.DiscardUnknown(m)
}

var xxx_messageInfo_VlanTrunkL3SubIntfs proto.InternalMessageInfo

func (m *VlanTrunkL3SubIntfs) GetTotalCount() uint32 {
	if m != nil {
		return m.TotalCount
	}
	return 0
}

func (m *VlanTrunkL3SubIntfs) GetDot1QCount() uint32 {
	if m != nil {
		return m.Dot1QCount
	}
	return 0
}

func (m *VlanTrunkL3SubIntfs) GetQinQCount() uint32 {
	if m != nil {
		return m.QinQCount
	}
	return 0
}

func (m *VlanTrunkL3SubIntfs) GetUntaggedCount() uint32 {
	if m != nil {
		return m.UntaggedCount
	}
	return 0
}

func (m *VlanTrunkL3SubIntfs) GetStateCounters() *VlanTrunkSubIntfStateCounters {
	if m != nil {
		return m.StateCounters
	}
	return nil
}

func (m *VlanTrunkL3SubIntfs) GetNativeVlan() uint32 {
	if m != nil {
		return m.NativeVlan
	}
	return 0
}

type EfpRange struct {
	VlanIdLow            uint32   `protobuf:"varint,1,opt,name=vlan_id_low,json=vlanIdLow,proto3" json:"vlan_id_low,omitempty"`
	VlanIdHigh           uint32   `protobuf:"varint,2,opt,name=vlan_id_high,json=vlanIdHigh,proto3" json:"vlan_id_high,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EfpRange) Reset()         { *m = EfpRange{} }
func (m *EfpRange) String() string { return proto.CompactTextString(m) }
func (*EfpRange) ProtoMessage()    {}
func (*EfpRange) Descriptor() ([]byte, []int) {
	return fileDescriptor_029c81a325123aaf, []int{4}
}

func (m *EfpRange) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EfpRange.Unmarshal(m, b)
}
func (m *EfpRange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EfpRange.Marshal(b, m, deterministic)
}
func (m *EfpRange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EfpRange.Merge(m, src)
}
func (m *EfpRange) XXX_Size() int {
	return xxx_messageInfo_EfpRange.Size(m)
}
func (m *EfpRange) XXX_DiscardUnknown() {
	xxx_messageInfo_EfpRange.DiscardUnknown(m)
}

var xxx_messageInfo_EfpRange proto.InternalMessageInfo

func (m *EfpRange) GetVlanIdLow() uint32 {
	if m != nil {
		return m.VlanIdLow
	}
	return 0
}

func (m *EfpRange) GetVlanIdHigh() uint32 {
	if m != nil {
		return m.VlanIdHigh
	}
	return 0
}

type EfpTagMatch struct {
	Ethertype            string      `protobuf:"bytes,1,opt,name=ethertype,proto3" json:"ethertype,omitempty"`
	VlanRange            []*EfpRange `protobuf:"bytes,2,rep,name=vlan_range,json=vlanRange,proto3" json:"vlan_range,omitempty"`
	Priority             string      `protobuf:"bytes,3,opt,name=priority,proto3" json:"priority,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *EfpTagMatch) Reset()         { *m = EfpTagMatch{} }
func (m *EfpTagMatch) String() string { return proto.CompactTextString(m) }
func (*EfpTagMatch) ProtoMessage()    {}
func (*EfpTagMatch) Descriptor() ([]byte, []int) {
	return fileDescriptor_029c81a325123aaf, []int{5}
}

func (m *EfpTagMatch) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EfpTagMatch.Unmarshal(m, b)
}
func (m *EfpTagMatch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EfpTagMatch.Marshal(b, m, deterministic)
}
func (m *EfpTagMatch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EfpTagMatch.Merge(m, src)
}
func (m *EfpTagMatch) XXX_Size() int {
	return xxx_messageInfo_EfpTagMatch.Size(m)
}
func (m *EfpTagMatch) XXX_DiscardUnknown() {
	xxx_messageInfo_EfpTagMatch.DiscardUnknown(m)
}

var xxx_messageInfo_EfpTagMatch proto.InternalMessageInfo

func (m *EfpTagMatch) GetEthertype() string {
	if m != nil {
		return m.Ethertype
	}
	return ""
}

func (m *EfpTagMatch) GetVlanRange() []*EfpRange {
	if m != nil {
		return m.VlanRange
	}
	return nil
}

func (m *EfpTagMatch) GetPriority() string {
	if m != nil {
		return m.Priority
	}
	return ""
}

type EfpVlanTag struct {
	Ethertype            string   `protobuf:"bytes,1,opt,name=ethertype,proto3" json:"ethertype,omitempty"`
	VlanId               uint32   `protobuf:"varint,2,opt,name=vlan_id,json=vlanId,proto3" json:"vlan_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EfpVlanTag) Reset()         { *m = EfpVlanTag{} }
func (m *EfpVlanTag) String() string { return proto.CompactTextString(m) }
func (*EfpVlanTag) ProtoMessage()    {}
func (*EfpVlanTag) Descriptor() ([]byte, []int) {
	return fileDescriptor_029c81a325123aaf, []int{6}
}

func (m *EfpVlanTag) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EfpVlanTag.Unmarshal(m, b)
}
func (m *EfpVlanTag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EfpVlanTag.Marshal(b, m, deterministic)
}
func (m *EfpVlanTag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EfpVlanTag.Merge(m, src)
}
func (m *EfpVlanTag) XXX_Size() int {
	return xxx_messageInfo_EfpVlanTag.Size(m)
}
func (m *EfpVlanTag) XXX_DiscardUnknown() {
	xxx_messageInfo_EfpVlanTag.DiscardUnknown(m)
}

var xxx_messageInfo_EfpVlanTag proto.InternalMessageInfo

func (m *EfpVlanTag) GetEthertype() string {
	if m != nil {
		return m.Ethertype
	}
	return ""
}

func (m *EfpVlanTag) GetVlanId() uint32 {
	if m != nil {
		return m.VlanId
	}
	return 0
}

type EfpTagLocalTrafficStack struct {
	LocalTrafficTag      []*EfpVlanTag `protobuf:"bytes,1,rep,name=local_traffic_tag,json=localTrafficTag,proto3" json:"local_traffic_tag,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *EfpTagLocalTrafficStack) Reset()         { *m = EfpTagLocalTrafficStack{} }
func (m *EfpTagLocalTrafficStack) String() string { return proto.CompactTextString(m) }
func (*EfpTagLocalTrafficStack) ProtoMessage()    {}
func (*EfpTagLocalTrafficStack) Descriptor() ([]byte, []int) {
	return fileDescriptor_029c81a325123aaf, []int{7}
}

func (m *EfpTagLocalTrafficStack) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EfpTagLocalTrafficStack.Unmarshal(m, b)
}
func (m *EfpTagLocalTrafficStack) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EfpTagLocalTrafficStack.Marshal(b, m, deterministic)
}
func (m *EfpTagLocalTrafficStack) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EfpTagLocalTrafficStack.Merge(m, src)
}
func (m *EfpTagLocalTrafficStack) XXX_Size() int {
	return xxx_messageInfo_EfpTagLocalTrafficStack.Size(m)
}
func (m *EfpTagLocalTrafficStack) XXX_DiscardUnknown() {
	xxx_messageInfo_EfpTagLocalTrafficStack.DiscardUnknown(m)
}

var xxx_messageInfo_EfpTagLocalTrafficStack proto.InternalMessageInfo

func (m *EfpTagLocalTrafficStack) GetLocalTrafficTag() []*EfpVlanTag {
	if m != nil {
		return m.LocalTrafficTag
	}
	return nil
}

type EfpDescription struct {
	TagsToMatch          []*EfpTagMatch           `protobuf:"bytes,1,rep,name=tags_to_match,json=tagsToMatch,proto3" json:"tags_to_match,omitempty"`
	PayloadEthertype     string                   `protobuf:"bytes,2,opt,name=payload_ethertype,json=payloadEthertype,proto3" json:"payload_ethertype,omitempty"`
	TagsPopped           uint32                   `protobuf:"varint,3,opt,name=tags_popped,json=tagsPopped,proto3" json:"tags_popped,omitempty"`
	Pushe                []*EfpVlanTag            `protobuf:"bytes,4,rep,name=pushe,proto3" json:"pushe,omitempty"`
	LocalTrafficStack    *EfpTagLocalTrafficStack `protobuf:"bytes,5,opt,name=local_traffic_stack,json=localTrafficStack,proto3" json:"local_traffic_stack,omitempty"`
	IsExactMatch         bool                     `protobuf:"varint,6,opt,name=is_exact_match,json=isExactMatch,proto3" json:"is_exact_match,omitempty"`
	IsNativeVlan         bool                     `protobuf:"varint,7,opt,name=is_native_vlan,json=isNativeVlan,proto3" json:"is_native_vlan,omitempty"`
	IsNativePreserving   bool                     `protobuf:"varint,8,opt,name=is_native_preserving,json=isNativePreserving,proto3" json:"is_native_preserving,omitempty"`
	SourceMacMatch       string                   `protobuf:"bytes,9,opt,name=source_mac_match,json=sourceMacMatch,proto3" json:"source_mac_match,omitempty"`
	DestinationMacMatch  string                   `protobuf:"bytes,10,opt,name=destination_mac_match,json=destinationMacMatch,proto3" json:"destination_mac_match,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *EfpDescription) Reset()         { *m = EfpDescription{} }
func (m *EfpDescription) String() string { return proto.CompactTextString(m) }
func (*EfpDescription) ProtoMessage()    {}
func (*EfpDescription) Descriptor() ([]byte, []int) {
	return fileDescriptor_029c81a325123aaf, []int{8}
}

func (m *EfpDescription) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EfpDescription.Unmarshal(m, b)
}
func (m *EfpDescription) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EfpDescription.Marshal(b, m, deterministic)
}
func (m *EfpDescription) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EfpDescription.Merge(m, src)
}
func (m *EfpDescription) XXX_Size() int {
	return xxx_messageInfo_EfpDescription.Size(m)
}
func (m *EfpDescription) XXX_DiscardUnknown() {
	xxx_messageInfo_EfpDescription.DiscardUnknown(m)
}

var xxx_messageInfo_EfpDescription proto.InternalMessageInfo

func (m *EfpDescription) GetTagsToMatch() []*EfpTagMatch {
	if m != nil {
		return m.TagsToMatch
	}
	return nil
}

func (m *EfpDescription) GetPayloadEthertype() string {
	if m != nil {
		return m.PayloadEthertype
	}
	return ""
}

func (m *EfpDescription) GetTagsPopped() uint32 {
	if m != nil {
		return m.TagsPopped
	}
	return 0
}

func (m *EfpDescription) GetPushe() []*EfpVlanTag {
	if m != nil {
		return m.Pushe
	}
	return nil
}

func (m *EfpDescription) GetLocalTrafficStack() *EfpTagLocalTrafficStack {
	if m != nil {
		return m.LocalTrafficStack
	}
	return nil
}

func (m *EfpDescription) GetIsExactMatch() bool {
	if m != nil {
		return m.IsExactMatch
	}
	return false
}

func (m *EfpDescription) GetIsNativeVlan() bool {
	if m != nil {
		return m.IsNativeVlan
	}
	return false
}

func (m *EfpDescription) GetIsNativePreserving() bool {
	if m != nil {
		return m.IsNativePreserving
	}
	return false
}

func (m *EfpDescription) GetSourceMacMatch() string {
	if m != nil {
		return m.SourceMacMatch
	}
	return ""
}

func (m *EfpDescription) GetDestinationMacMatch() string {
	if m != nil {
		return m.DestinationMacMatch
	}
	return ""
}

type VlanSwitchedInfo struct {
	Mode                 string          `protobuf:"bytes,1,opt,name=mode,proto3" json:"mode,omitempty"`
	TrunkVlanRanges      *EfpDescription `protobuf:"bytes,2,opt,name=trunk_vlan_ranges,json=trunkVlanRanges,proto3" json:"trunk_vlan_ranges,omitempty"`
	AccessVlan           uint32          `protobuf:"varint,3,opt,name=access_vlan,json=accessVlan,proto3" json:"access_vlan,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *VlanSwitchedInfo) Reset()         { *m = VlanSwitchedInfo{} }
func (m *VlanSwitchedInfo) String() string { return proto.CompactTextString(m) }
func (*VlanSwitchedInfo) ProtoMessage()    {}
func (*VlanSwitchedInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_029c81a325123aaf, []int{9}
}

func (m *VlanSwitchedInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VlanSwitchedInfo.Unmarshal(m, b)
}
func (m *VlanSwitchedInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VlanSwitchedInfo.Marshal(b, m, deterministic)
}
func (m *VlanSwitchedInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VlanSwitchedInfo.Merge(m, src)
}
func (m *VlanSwitchedInfo) XXX_Size() int {
	return xxx_messageInfo_VlanSwitchedInfo.Size(m)
}
func (m *VlanSwitchedInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_VlanSwitchedInfo.DiscardUnknown(m)
}

var xxx_messageInfo_VlanSwitchedInfo proto.InternalMessageInfo

func (m *VlanSwitchedInfo) GetMode() string {
	if m != nil {
		return m.Mode
	}
	return ""
}

func (m *VlanSwitchedInfo) GetTrunkVlanRanges() *EfpDescription {
	if m != nil {
		return m.TrunkVlanRanges
	}
	return nil
}

func (m *VlanSwitchedInfo) GetAccessVlan() uint32 {
	if m != nil {
		return m.AccessVlan
	}
	return 0
}

type VlanTrunk struct {
	InterfaceXr          string               `protobuf:"bytes,50,opt,name=interface_xr,json=interfaceXr,proto3" json:"interface_xr,omitempty"`
	State                string               `protobuf:"bytes,51,opt,name=state,proto3" json:"state,omitempty"`
	Mtu                  uint32               `protobuf:"varint,52,opt,name=mtu,proto3" json:"mtu,omitempty"`
	Layer2SubInterfaces  *VlanTrunkL2SubIntfs `protobuf:"bytes,53,opt,name=layer2_sub_interfaces,json=layer2SubInterfaces,proto3" json:"layer2_sub_interfaces,omitempty"`
	Layer3SubInterfaces  *VlanTrunkL3SubIntfs `protobuf:"bytes,54,opt,name=layer3_sub_interfaces,json=layer3SubInterfaces,proto3" json:"layer3_sub_interfaces,omitempty"`
	QinqOuterEtherType   string               `protobuf:"bytes,55,opt,name=qinq_outer_ether_type,json=qinqOuterEtherType,proto3" json:"qinq_outer_ether_type,omitempty"`
	Dot1AdCount          uint32               `protobuf:"varint,56,opt,name=dot1ad_count,json=dot1adCount,proto3" json:"dot1ad_count,omitempty"`
	UntaggedInterface    string               `protobuf:"bytes,57,opt,name=untagged_interface,json=untaggedInterface,proto3" json:"untagged_interface,omitempty"`
	MacFiltering         string               `protobuf:"bytes,58,opt,name=mac_filtering,json=macFiltering,proto3" json:"mac_filtering,omitempty"`
	VlanSwitched         *VlanSwitchedInfo    `protobuf:"bytes,59,opt,name=vlan_switched,json=vlanSwitched,proto3" json:"vlan_switched,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *VlanTrunk) Reset()         { *m = VlanTrunk{} }
func (m *VlanTrunk) String() string { return proto.CompactTextString(m) }
func (*VlanTrunk) ProtoMessage()    {}
func (*VlanTrunk) Descriptor() ([]byte, []int) {
	return fileDescriptor_029c81a325123aaf, []int{10}
}

func (m *VlanTrunk) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VlanTrunk.Unmarshal(m, b)
}
func (m *VlanTrunk) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VlanTrunk.Marshal(b, m, deterministic)
}
func (m *VlanTrunk) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VlanTrunk.Merge(m, src)
}
func (m *VlanTrunk) XXX_Size() int {
	return xxx_messageInfo_VlanTrunk.Size(m)
}
func (m *VlanTrunk) XXX_DiscardUnknown() {
	xxx_messageInfo_VlanTrunk.DiscardUnknown(m)
}

var xxx_messageInfo_VlanTrunk proto.InternalMessageInfo

func (m *VlanTrunk) GetInterfaceXr() string {
	if m != nil {
		return m.InterfaceXr
	}
	return ""
}

func (m *VlanTrunk) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *VlanTrunk) GetMtu() uint32 {
	if m != nil {
		return m.Mtu
	}
	return 0
}

func (m *VlanTrunk) GetLayer2SubInterfaces() *VlanTrunkL2SubIntfs {
	if m != nil {
		return m.Layer2SubInterfaces
	}
	return nil
}

func (m *VlanTrunk) GetLayer3SubInterfaces() *VlanTrunkL3SubIntfs {
	if m != nil {
		return m.Layer3SubInterfaces
	}
	return nil
}

func (m *VlanTrunk) GetQinqOuterEtherType() string {
	if m != nil {
		return m.QinqOuterEtherType
	}
	return ""
}

func (m *VlanTrunk) GetDot1AdCount() uint32 {
	if m != nil {
		return m.Dot1AdCount
	}
	return 0
}

func (m *VlanTrunk) GetUntaggedInterface() string {
	if m != nil {
		return m.UntaggedInterface
	}
	return ""
}

func (m *VlanTrunk) GetMacFiltering() string {
	if m != nil {
		return m.MacFiltering
	}
	return ""
}

func (m *VlanTrunk) GetVlanSwitched() *VlanSwitchedInfo {
	if m != nil {
		return m.VlanSwitched
	}
	return nil
}

func init() {
	proto.RegisterType((*VlanTrunk_KEYS)(nil), "cisco_ios_xr_l2_eth_infra_oper.vlan.nodes.node.trunks.trunk.vlan_trunk_KEYS")
	proto.RegisterType((*VlanTrunkSubIntfStateCounters)(nil), "cisco_ios_xr_l2_eth_infra_oper.vlan.nodes.node.trunks.trunk.vlan_trunk_sub_intf_state_counters")
	proto.RegisterType((*VlanTrunkL2SubIntfs)(nil), "cisco_ios_xr_l2_eth_infra_oper.vlan.nodes.node.trunks.trunk.vlan_trunk_l2_sub_intfs")
	proto.RegisterType((*VlanTrunkL3SubIntfs)(nil), "cisco_ios_xr_l2_eth_infra_oper.vlan.nodes.node.trunks.trunk.vlan_trunk_l3_sub_intfs")
	proto.RegisterType((*EfpRange)(nil), "cisco_ios_xr_l2_eth_infra_oper.vlan.nodes.node.trunks.trunk.efp_range")
	proto.RegisterType((*EfpTagMatch)(nil), "cisco_ios_xr_l2_eth_infra_oper.vlan.nodes.node.trunks.trunk.efp_tag_match")
	proto.RegisterType((*EfpVlanTag)(nil), "cisco_ios_xr_l2_eth_infra_oper.vlan.nodes.node.trunks.trunk.efp_vlan_tag")
	proto.RegisterType((*EfpTagLocalTrafficStack)(nil), "cisco_ios_xr_l2_eth_infra_oper.vlan.nodes.node.trunks.trunk.efp_tag_local_traffic_stack")
	proto.RegisterType((*EfpDescription)(nil), "cisco_ios_xr_l2_eth_infra_oper.vlan.nodes.node.trunks.trunk.efp_description")
	proto.RegisterType((*VlanSwitchedInfo)(nil), "cisco_ios_xr_l2_eth_infra_oper.vlan.nodes.node.trunks.trunk.vlan_switched_info")
	proto.RegisterType((*VlanTrunk)(nil), "cisco_ios_xr_l2_eth_infra_oper.vlan.nodes.node.trunks.trunk.vlan_trunk")
}

func init() { proto.RegisterFile("vlan_trunk.proto", fileDescriptor_029c81a325123aaf) }

var fileDescriptor_029c81a325123aaf = []byte{
	// 1018 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x56, 0xdb, 0x6e, 0x1b, 0x37,
	0x13, 0x86, 0x6c, 0xcb, 0xb6, 0x46, 0x5a, 0x1f, 0xe8, 0x18, 0x5e, 0xfc, 0x7f, 0x0f, 0xce, 0xb6,
	0x05, 0x0c, 0x14, 0x15, 0x1a, 0xa9, 0xe7, 0x5c, 0x15, 0xa9, 0x83, 0xb8, 0x8d, 0x9b, 0x74, 0x6d,
	0x04, 0xe9, 0x15, 0x41, 0xef, 0x52, 0x2b, 0x22, 0x2b, 0x72, 0x4d, 0x72, 0x6d, 0xeb, 0x05, 0x8a,
	0xde, 0xf4, 0xae, 0x40, 0x5f, 0xa3, 0xef, 0xd0, 0xdb, 0x02, 0x7d, 0xa5, 0x82, 0xc3, 0xdd, 0x95,
	0x94, 0x04, 0x48, 0x01, 0x19, 0xed, 0x8d, 0xad, 0xfd, 0xe6, 0x23, 0x67, 0xe6, 0x1b, 0xce, 0x90,
	0xb0, 0x73, 0x95, 0x33, 0x49, 0xad, 0x2e, 0xe5, 0x8b, 0x7e, 0xa1, 0x95, 0x55, 0xe4, 0x7e, 0x22,
	0x4c, 0xa2, 0xa8, 0x50, 0x86, 0xde, 0x68, 0x9a, 0x0f, 0x28, 0xb7, 0x63, 0x2a, 0xe4, 0x48, 0x33,
	0xaa, 0x0a, 0xae, 0xfb, 0x6e, 0x41, 0x5f, 0xaa, 0x94, 0x1b, 0xfc, 0xdb, 0xc7, 0xb5, 0xc6, 0xff,
	0x8b, 0x1e, 0xc1, 0xf6, 0x6c, 0x43, 0xfa, 0xdd, 0xf1, 0x8f, 0x67, 0xe4, 0x00, 0x36, 0x1c, 0x8f,
	0x8a, 0x34, 0x6c, 0x1d, 0xb6, 0x8e, 0x3a, 0xf1, 0xba, 0xfb, 0x3c, 0x49, 0xc9, 0x5b, 0xd0, 0x11,
	0xd2, 0x72, 0x3d, 0x62, 0x09, 0x0f, 0x57, 0xd0, 0x34, 0x03, 0xa2, 0x0c, 0xa2, 0xb9, 0x9d, 0x4c,
	0x79, 0x41, 0x85, 0xb4, 0x23, 0x6a, 0x2c, 0xb3, 0x9c, 0x26, 0xaa, 0x74, 0x44, 0x43, 0xb6, 0x60,
	0xa5, 0x2c, 0x70, 0xdf, 0x20, 0x5e, 0x29, 0x0b, 0x42, 0x60, 0x2d, 0x55, 0xd7, 0x12, 0xb7, 0x0b,
	0x62, 0xfc, 0x4d, 0xde, 0x06, 0x60, 0xe9, 0x44, 0x48, 0x8a, 0x96, 0x55, 0xb4, 0x74, 0x10, 0xf9,
	0x46, 0x5d, 0xcb, 0xe8, 0xaf, 0x15, 0x38, 0x98, 0xf3, 0x94, 0x0f, 0x1a, 0x67, 0x86, 0xbc, 0x0b,
	0x5d, 0xab, 0x2c, 0xcb, 0xbd, 0xc3, 0xca, 0x0f, 0x20, 0xf4, 0xc0, 0x21, 0x8e, 0x90, 0x2a, 0x7b,
	0xef, 0xb2, 0x22, 0x78, 0xb7, 0x80, 0x90, 0x27, 0xbc, 0x03, 0xdd, 0x4b, 0x21, 0x69, 0x4d, 0xa8,
	0xbc, 0x5f, 0x0a, 0xf9, 0x83, 0xb7, 0x47, 0x10, 0x38, 0x3b, 0x93, 0xd3, 0x8a, 0xb1, 0x86, 0x0c,
	0xb7, 0xe8, 0x6b, 0x39, 0xf5, 0x9c, 0x0f, 0x60, 0xab, 0x94, 0x96, 0x65, 0x19, 0x4f, 0x2b, 0x52,
	0x1b, 0x49, 0x41, 0x8d, 0x7a, 0xda, 0x4f, 0x2d, 0xd8, 0x5a, 0x94, 0x27, 0x5c, 0x3f, 0x6c, 0x1d,
	0x75, 0x07, 0xb4, 0xbf, 0x44, 0x49, 0xfb, 0x6f, 0xae, 0x42, 0x1c, 0xe0, 0xf7, 0x83, 0xea, 0x33,
	0xfa, 0xf3, 0x25, 0x45, 0x87, 0xff, 0xaa, 0xa2, 0xaf, 0xaa, 0xb5, 0xf6, 0x0f, 0xd5, 0x6a, 0xff,
	0x17, 0x6a, 0xb9, 0x84, 0x25, 0xb3, 0xe2, 0x8a, 0x53, 0xb7, 0x16, 0x4b, 0x16, 0xc4, 0xe0, 0xa1,
	0x67, 0x39, 0x93, 0xd1, 0x29, 0x74, 0xf8, 0xa8, 0xa0, 0x9a, 0xc9, 0x8c, 0xbb, 0xec, 0xd1, 0x85,
	0x48, 0x69, 0xae, 0xae, 0x2b, 0xfd, 0x3a, 0x0e, 0x3a, 0x49, 0x1f, 0xab, 0x6b, 0x72, 0x08, 0xbd,
	0xda, 0x3e, 0x16, 0xd9, 0xb8, 0xd6, 0xcf, 0x13, 0x1e, 0x89, 0x6c, 0x1c, 0xfd, 0xde, 0x82, 0xc0,
	0xed, 0x67, 0x59, 0x46, 0x27, 0xcc, 0x26, 0x63, 0xd7, 0x88, 0xdc, 0x8e, 0xb9, 0xb6, 0xd3, 0x82,
	0x57, 0x3d, 0x3a, 0x03, 0x08, 0x07, 0x5c, 0xed, 0xfd, 0x87, 0x2b, 0x87, 0xab, 0x47, 0xdd, 0xc1,
	0xc3, 0xa5, 0x34, 0x6a, 0xb2, 0xf1, 0x81, 0xc7, 0x98, 0xd8, 0xff, 0x60, 0xb3, 0xd0, 0x42, 0x69,
	0x61, 0xa7, 0x58, 0xd3, 0x4e, 0xdc, 0x7c, 0x47, 0xc7, 0xd0, 0x73, 0x6b, 0xbc, 0xb6, 0x2c, 0x7b,
	0x43, 0xc0, 0x07, 0xb0, 0x51, 0x49, 0x50, 0x65, 0xbf, 0xee, 0xb3, 0x8f, 0x7e, 0x6d, 0xc1, 0xff,
	0xeb, 0xcc, 0x73, 0x95, 0xb0, 0x9c, 0x5a, 0xcd, 0x46, 0x23, 0x91, 0xb8, 0x0a, 0x25, 0x2f, 0x48,
	0x09, 0xbb, 0x8b, 0xb0, 0x65, 0x59, 0xd8, 0xc2, 0x84, 0x4f, 0x96, 0x4e, 0xb8, 0x0e, 0x3e, 0xde,
	0x46, 0x1f, 0xe7, 0xde, 0xc5, 0x39, 0xcb, 0xa2, 0xdf, 0xda, 0xb0, 0xed, 0x18, 0x29, 0x37, 0x89,
	0x16, 0x85, 0x15, 0x4a, 0x12, 0x09, 0x81, 0x65, 0x99, 0xa1, 0x56, 0xf9, 0x1a, 0x55, 0x61, 0x7c,
	0xbb, 0x74, 0x18, 0x4d, 0xd5, 0xe3, 0xae, 0x73, 0x70, 0xae, 0x4e, 0xf1, 0x08, 0x7c, 0x08, 0xbb,
	0x05, 0x9b, 0xe6, 0x8a, 0xa5, 0x74, 0xa6, 0xac, 0x9f, 0xc9, 0x3b, 0x95, 0xe1, 0xb8, 0x11, 0xd8,
	0xf5, 0xb0, 0x0b, 0xae, 0x50, 0x45, 0xc1, 0xd3, 0xaa, 0x03, 0xc1, 0x41, 0x4f, 0x11, 0x21, 0x14,
	0xda, 0x45, 0x69, 0xc6, 0x3c, 0x5c, 0xbb, 0x6d, 0xf1, 0xfc, 0xbe, 0xe4, 0xe7, 0x16, 0xec, 0xbd,
	0xa6, 0x82, 0x55, 0x07, 0x3f, 0xbf, 0x15, 0x95, 0x5e, 0xb3, 0x7f, 0xbc, 0x3b, 0x5f, 0xbb, 0x33,
	0x3c, 0x34, 0xef, 0xc3, 0x96, 0x30, 0x94, 0xdf, 0xb0, 0xc4, 0x56, 0xa5, 0x72, 0x1d, 0xbc, 0x19,
	0xf7, 0x84, 0x39, 0x76, 0xa0, 0xd7, 0xd7, 0xb3, 0xe6, 0xfb, 0x7c, 0xa3, 0x66, 0x7d, 0xdf, 0x74,
	0x3a, 0xf9, 0x18, 0xee, 0xcc, 0x58, 0x85, 0xe6, 0x86, 0xeb, 0x2b, 0x21, 0xb3, 0x70, 0x13, 0xb9,
	0xa4, 0xe6, 0x3e, 0x6d, 0x2c, 0xe4, 0x08, 0x76, 0x8c, 0x2a, 0x75, 0xc2, 0xe9, 0x84, 0x25, 0x95,
	0xff, 0x0e, 0x96, 0x6d, 0xcb, 0xe3, 0xa7, 0x2c, 0xf1, 0x11, 0x0c, 0x60, 0x3f, 0xe5, 0xc6, 0x0a,
	0xb7, 0xbb, 0x92, 0x73, 0x74, 0x40, 0xfa, 0xde, 0x9c, 0xb1, 0x5e, 0x13, 0xfd, 0xd1, 0x02, 0x82,
	0xd2, 0x9b, 0x6b, 0x61, 0x93, 0x31, 0x4f, 0x9d, 0x88, 0xca, 0x5d, 0xb2, 0x13, 0x95, 0xd6, 0x9d,
	0x87, 0xbf, 0xc9, 0x0d, 0xec, 0xfa, 0xa9, 0x37, 0x9b, 0x15, 0x06, 0x0f, 0x50, 0x77, 0xf0, 0x78,
	0xe9, 0x72, 0xcc, 0x75, 0x46, 0xbc, 0x8d, 0xf0, 0xb3, 0x7a, 0x6e, 0xe0, 0xfc, 0x64, 0x49, 0xc2,
	0x8d, 0xf1, 0xba, 0x56, 0xa7, 0xd1, 0x43, 0x38, 0x3f, 0x7f, 0x69, 0x57, 0x13, 0x0c, 0x57, 0x92,
	0xbb, 0xd0, 0x6b, 0x5e, 0x19, 0xf4, 0x46, 0x87, 0x03, 0xcc, 0xa2, 0xdb, 0x60, 0xcf, 0x35, 0xb9,
	0x03, 0x6d, 0x9c, 0xd1, 0xe1, 0x10, 0x6d, 0xfe, 0x83, 0xec, 0xc0, 0xea, 0xc4, 0x96, 0xe1, 0x27,
	0xe8, 0xc0, 0xfd, 0x74, 0xc7, 0x70, 0x3f, 0x67, 0x53, 0xae, 0x9b, 0x37, 0x83, 0xdf, 0xc2, 0x84,
	0x9f, 0x62, 0xe6, 0xe7, 0xb7, 0x75, 0x95, 0xcc, 0x3f, 0x4a, 0xe2, 0x3d, 0xef, 0xf2, 0xac, 0xbc,
	0x38, 0x69, 0x1c, 0xce, 0x42, 0x19, 0xbe, 0x1c, 0xca, 0x67, 0xb7, 0x1c, 0xca, 0xf0, 0x95, 0x50,
	0x86, 0x8b, 0xa1, 0xdc, 0x83, 0xfd, 0x4b, 0x21, 0x2f, 0xa9, 0x2a, 0x2d, 0xd7, 0x7e, 0x9c, 0x50,
	0x9c, 0x27, 0x9f, 0xa3, 0x9a, 0xc4, 0x19, 0x9f, 0x38, 0x1b, 0x4e, 0x94, 0x73, 0x37, 0x51, 0xee,
	0x42, 0xcf, 0xdd, 0xf0, 0xac, 0xbe, 0xb1, 0xbf, 0xf0, 0x8f, 0x20, 0x8f, 0xf9, 0xfb, 0xfa, 0x23,
	0x20, 0xcd, 0xb5, 0x3e, 0x7b, 0x36, 0x7e, 0x89, 0x5b, 0xee, 0xd6, 0x96, 0x26, 0x0a, 0xf2, 0x1e,
	0x04, 0xee, 0x88, 0x8f, 0x44, 0x6e, 0xb9, 0x76, 0x3d, 0xf4, 0x15, 0x32, 0x7b, 0x13, 0x96, 0x3c,
	0xac, 0x31, 0x62, 0x21, 0x58, 0x38, 0xde, 0xe1, 0x7d, 0xd4, 0xea, 0xc9, 0xf2, 0x5a, 0x2d, 0x34,
	0x4c, 0x8c, 0x57, 0xf2, 0x59, 0x05, 0x5d, 0xac, 0xe3, 0x3b, 0x7b, 0xf8, 0x77, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x99, 0x4b, 0x33, 0xd3, 0x7b, 0x0b, 0x00, 0x00,
}
