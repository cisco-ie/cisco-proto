/*
Copyright 2019 Cisco Systems

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rcmd_isis_spf_run.proto

package cisco_ios_xr_infra_rcmd_oper_rcmd_isis_instances_instance_spf_run_summaries_spf_run_summary

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type RcmdIsisSpfRun_KEYS struct {
	InstanceName         string   `protobuf:"bytes,1,opt,name=instance_name,json=instanceName,proto3" json:"instance_name,omitempty"`
	SpfRunNumber         uint32   `protobuf:"varint,2,opt,name=spf_run_number,json=spfRunNumber,proto3" json:"spf_run_number,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RcmdIsisSpfRun_KEYS) Reset()         { *m = RcmdIsisSpfRun_KEYS{} }
func (m *RcmdIsisSpfRun_KEYS) String() string { return proto.CompactTextString(m) }
func (*RcmdIsisSpfRun_KEYS) ProtoMessage()    {}
func (*RcmdIsisSpfRun_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_8615b406726bfbf2, []int{0}
}

func (m *RcmdIsisSpfRun_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RcmdIsisSpfRun_KEYS.Unmarshal(m, b)
}
func (m *RcmdIsisSpfRun_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RcmdIsisSpfRun_KEYS.Marshal(b, m, deterministic)
}
func (m *RcmdIsisSpfRun_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RcmdIsisSpfRun_KEYS.Merge(m, src)
}
func (m *RcmdIsisSpfRun_KEYS) XXX_Size() int {
	return xxx_messageInfo_RcmdIsisSpfRun_KEYS.Size(m)
}
func (m *RcmdIsisSpfRun_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_RcmdIsisSpfRun_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_RcmdIsisSpfRun_KEYS proto.InternalMessageInfo

func (m *RcmdIsisSpfRun_KEYS) GetInstanceName() string {
	if m != nil {
		return m.InstanceName
	}
	return ""
}

func (m *RcmdIsisSpfRun_KEYS) GetSpfRunNumber() uint32 {
	if m != nil {
		return m.SpfRunNumber
	}
	return 0
}

type RcmdStat struct {
	Adds                 uint32   `protobuf:"varint,1,opt,name=adds,proto3" json:"adds,omitempty"`
	Deletes              uint32   `protobuf:"varint,2,opt,name=deletes,proto3" json:"deletes,omitempty"`
	Modifies             uint32   `protobuf:"varint,3,opt,name=modifies,proto3" json:"modifies,omitempty"`
	Reachables           uint32   `protobuf:"varint,4,opt,name=reachables,proto3" json:"reachables,omitempty"`
	Unreachables         uint32   `protobuf:"varint,5,opt,name=unreachables,proto3" json:"unreachables,omitempty"`
	Touches              uint32   `protobuf:"varint,6,opt,name=touches,proto3" json:"touches,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RcmdStat) Reset()         { *m = RcmdStat{} }
func (m *RcmdStat) String() string { return proto.CompactTextString(m) }
func (*RcmdStat) ProtoMessage()    {}
func (*RcmdStat) Descriptor() ([]byte, []int) {
	return fileDescriptor_8615b406726bfbf2, []int{1}
}

func (m *RcmdStat) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RcmdStat.Unmarshal(m, b)
}
func (m *RcmdStat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RcmdStat.Marshal(b, m, deterministic)
}
func (m *RcmdStat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RcmdStat.Merge(m, src)
}
func (m *RcmdStat) XXX_Size() int {
	return xxx_messageInfo_RcmdStat.Size(m)
}
func (m *RcmdStat) XXX_DiscardUnknown() {
	xxx_messageInfo_RcmdStat.DiscardUnknown(m)
}

var xxx_messageInfo_RcmdStat proto.InternalMessageInfo

func (m *RcmdStat) GetAdds() uint32 {
	if m != nil {
		return m.Adds
	}
	return 0
}

func (m *RcmdStat) GetDeletes() uint32 {
	if m != nil {
		return m.Deletes
	}
	return 0
}

func (m *RcmdStat) GetModifies() uint32 {
	if m != nil {
		return m.Modifies
	}
	return 0
}

func (m *RcmdStat) GetReachables() uint32 {
	if m != nil {
		return m.Reachables
	}
	return 0
}

func (m *RcmdStat) GetUnreachables() uint32 {
	if m != nil {
		return m.Unreachables
	}
	return 0
}

func (m *RcmdStat) GetTouches() uint32 {
	if m != nil {
		return m.Touches
	}
	return 0
}

type RcmdShowFrrStat struct {
	TotalRoutes              uint32   `protobuf:"varint,1,opt,name=total_routes,json=totalRoutes,proto3" json:"total_routes,omitempty"`
	FullyProtectedRoutes     uint32   `protobuf:"varint,2,opt,name=fully_protected_routes,json=fullyProtectedRoutes,proto3" json:"fully_protected_routes,omitempty"`
	PartiallyProtectedRoutes uint32   `protobuf:"varint,3,opt,name=partially_protected_routes,json=partiallyProtectedRoutes,proto3" json:"partially_protected_routes,omitempty"`
	Coverage                 string   `protobuf:"bytes,4,opt,name=coverage,proto3" json:"coverage,omitempty"`
	XXX_NoUnkeyedLiteral     struct{} `json:"-"`
	XXX_unrecognized         []byte   `json:"-"`
	XXX_sizecache            int32    `json:"-"`
}

func (m *RcmdShowFrrStat) Reset()         { *m = RcmdShowFrrStat{} }
func (m *RcmdShowFrrStat) String() string { return proto.CompactTextString(m) }
func (*RcmdShowFrrStat) ProtoMessage()    {}
func (*RcmdShowFrrStat) Descriptor() ([]byte, []int) {
	return fileDescriptor_8615b406726bfbf2, []int{2}
}

func (m *RcmdShowFrrStat) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RcmdShowFrrStat.Unmarshal(m, b)
}
func (m *RcmdShowFrrStat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RcmdShowFrrStat.Marshal(b, m, deterministic)
}
func (m *RcmdShowFrrStat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RcmdShowFrrStat.Merge(m, src)
}
func (m *RcmdShowFrrStat) XXX_Size() int {
	return xxx_messageInfo_RcmdShowFrrStat.Size(m)
}
func (m *RcmdShowFrrStat) XXX_DiscardUnknown() {
	xxx_messageInfo_RcmdShowFrrStat.DiscardUnknown(m)
}

var xxx_messageInfo_RcmdShowFrrStat proto.InternalMessageInfo

func (m *RcmdShowFrrStat) GetTotalRoutes() uint32 {
	if m != nil {
		return m.TotalRoutes
	}
	return 0
}

func (m *RcmdShowFrrStat) GetFullyProtectedRoutes() uint32 {
	if m != nil {
		return m.FullyProtectedRoutes
	}
	return 0
}

func (m *RcmdShowFrrStat) GetPartiallyProtectedRoutes() uint32 {
	if m != nil {
		return m.PartiallyProtectedRoutes
	}
	return 0
}

func (m *RcmdShowFrrStat) GetCoverage() string {
	if m != nil {
		return m.Coverage
	}
	return ""
}

type RcmdTimestamp struct {
	MinimumTime          string   `protobuf:"bytes,1,opt,name=minimum_time,json=minimumTime,proto3" json:"minimum_time,omitempty"`
	MaximumTime          string   `protobuf:"bytes,2,opt,name=maximum_time,json=maximumTime,proto3" json:"maximum_time,omitempty"`
	SlowestNodeName      string   `protobuf:"bytes,3,opt,name=slowest_node_name,json=slowestNodeName,proto3" json:"slowest_node_name,omitempty"`
	FastestNodeName      string   `protobuf:"bytes,4,opt,name=fastest_node_name,json=fastestNodeName,proto3" json:"fastest_node_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RcmdTimestamp) Reset()         { *m = RcmdTimestamp{} }
func (m *RcmdTimestamp) String() string { return proto.CompactTextString(m) }
func (*RcmdTimestamp) ProtoMessage()    {}
func (*RcmdTimestamp) Descriptor() ([]byte, []int) {
	return fileDescriptor_8615b406726bfbf2, []int{3}
}

func (m *RcmdTimestamp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RcmdTimestamp.Unmarshal(m, b)
}
func (m *RcmdTimestamp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RcmdTimestamp.Marshal(b, m, deterministic)
}
func (m *RcmdTimestamp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RcmdTimestamp.Merge(m, src)
}
func (m *RcmdTimestamp) XXX_Size() int {
	return xxx_messageInfo_RcmdTimestamp.Size(m)
}
func (m *RcmdTimestamp) XXX_DiscardUnknown() {
	xxx_messageInfo_RcmdTimestamp.DiscardUnknown(m)
}

var xxx_messageInfo_RcmdTimestamp proto.InternalMessageInfo

func (m *RcmdTimestamp) GetMinimumTime() string {
	if m != nil {
		return m.MinimumTime
	}
	return ""
}

func (m *RcmdTimestamp) GetMaximumTime() string {
	if m != nil {
		return m.MaximumTime
	}
	return ""
}

func (m *RcmdTimestamp) GetSlowestNodeName() string {
	if m != nil {
		return m.SlowestNodeName
	}
	return ""
}

func (m *RcmdTimestamp) GetFastestNodeName() string {
	if m != nil {
		return m.FastestNodeName
	}
	return ""
}

type RcmdPrioritySummary struct {
	Level                string             `protobuf:"bytes,1,opt,name=level,proto3" json:"level,omitempty"`
	ThresholdExceeded    bool               `protobuf:"varint,2,opt,name=threshold_exceeded,json=thresholdExceeded,proto3" json:"threshold_exceeded,omitempty"`
	RouteStatistics      *RcmdStat          `protobuf:"bytes,3,opt,name=route_statistics,json=routeStatistics,proto3" json:"route_statistics,omitempty"`
	FrrStatistic         []*RcmdShowFrrStat `protobuf:"bytes,4,rep,name=frr_statistic,json=frrStatistic,proto3" json:"frr_statistic,omitempty"`
	IpConvergenceTime    *RcmdTimestamp     `protobuf:"bytes,5,opt,name=ip_convergence_time,json=ipConvergenceTime,proto3" json:"ip_convergence_time,omitempty"`
	MplsConvergenceTime  *RcmdTimestamp     `protobuf:"bytes,6,opt,name=mpls_convergence_time,json=mplsConvergenceTime,proto3" json:"mpls_convergence_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *RcmdPrioritySummary) Reset()         { *m = RcmdPrioritySummary{} }
func (m *RcmdPrioritySummary) String() string { return proto.CompactTextString(m) }
func (*RcmdPrioritySummary) ProtoMessage()    {}
func (*RcmdPrioritySummary) Descriptor() ([]byte, []int) {
	return fileDescriptor_8615b406726bfbf2, []int{4}
}

func (m *RcmdPrioritySummary) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RcmdPrioritySummary.Unmarshal(m, b)
}
func (m *RcmdPrioritySummary) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RcmdPrioritySummary.Marshal(b, m, deterministic)
}
func (m *RcmdPrioritySummary) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RcmdPrioritySummary.Merge(m, src)
}
func (m *RcmdPrioritySummary) XXX_Size() int {
	return xxx_messageInfo_RcmdPrioritySummary.Size(m)
}
func (m *RcmdPrioritySummary) XXX_DiscardUnknown() {
	xxx_messageInfo_RcmdPrioritySummary.DiscardUnknown(m)
}

var xxx_messageInfo_RcmdPrioritySummary proto.InternalMessageInfo

func (m *RcmdPrioritySummary) GetLevel() string {
	if m != nil {
		return m.Level
	}
	return ""
}

func (m *RcmdPrioritySummary) GetThresholdExceeded() bool {
	if m != nil {
		return m.ThresholdExceeded
	}
	return false
}

func (m *RcmdPrioritySummary) GetRouteStatistics() *RcmdStat {
	if m != nil {
		return m.RouteStatistics
	}
	return nil
}

func (m *RcmdPrioritySummary) GetFrrStatistic() []*RcmdShowFrrStat {
	if m != nil {
		return m.FrrStatistic
	}
	return nil
}

func (m *RcmdPrioritySummary) GetIpConvergenceTime() *RcmdTimestamp {
	if m != nil {
		return m.IpConvergenceTime
	}
	return nil
}

func (m *RcmdPrioritySummary) GetMplsConvergenceTime() *RcmdTimestamp {
	if m != nil {
		return m.MplsConvergenceTime
	}
	return nil
}

type RcmdIsisSpfRunSummary struct {
	Topology             uint32                 `protobuf:"varint,1,opt,name=topology,proto3" json:"topology,omitempty"`
	IsisLevel            string                 `protobuf:"bytes,2,opt,name=isis_level,json=isisLevel,proto3" json:"isis_level,omitempty"`
	Type                 string                 `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	ThresholdExceeded    bool                   `protobuf:"varint,4,opt,name=threshold_exceeded,json=thresholdExceeded,proto3" json:"threshold_exceeded,omitempty"`
	State                string                 `protobuf:"bytes,5,opt,name=state,proto3" json:"state,omitempty"`
	IsDataComplete       bool                   `protobuf:"varint,6,opt,name=is_data_complete,json=isDataComplete,proto3" json:"is_data_complete,omitempty"`
	TriggerTime          string                 `protobuf:"bytes,7,opt,name=trigger_time,json=triggerTime,proto3" json:"trigger_time,omitempty"`
	Duration             string                 `protobuf:"bytes,8,opt,name=duration,proto3" json:"duration,omitempty"`
	TotalLspChanges      uint32                 `protobuf:"varint,9,opt,name=total_lsp_changes,json=totalLspChanges,proto3" json:"total_lsp_changes,omitempty"`
	PrioritySummary      []*RcmdPrioritySummary `protobuf:"bytes,10,rep,name=priority_summary,json=prioritySummary,proto3" json:"priority_summary,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *RcmdIsisSpfRunSummary) Reset()         { *m = RcmdIsisSpfRunSummary{} }
func (m *RcmdIsisSpfRunSummary) String() string { return proto.CompactTextString(m) }
func (*RcmdIsisSpfRunSummary) ProtoMessage()    {}
func (*RcmdIsisSpfRunSummary) Descriptor() ([]byte, []int) {
	return fileDescriptor_8615b406726bfbf2, []int{5}
}

func (m *RcmdIsisSpfRunSummary) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RcmdIsisSpfRunSummary.Unmarshal(m, b)
}
func (m *RcmdIsisSpfRunSummary) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RcmdIsisSpfRunSummary.Marshal(b, m, deterministic)
}
func (m *RcmdIsisSpfRunSummary) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RcmdIsisSpfRunSummary.Merge(m, src)
}
func (m *RcmdIsisSpfRunSummary) XXX_Size() int {
	return xxx_messageInfo_RcmdIsisSpfRunSummary.Size(m)
}
func (m *RcmdIsisSpfRunSummary) XXX_DiscardUnknown() {
	xxx_messageInfo_RcmdIsisSpfRunSummary.DiscardUnknown(m)
}

var xxx_messageInfo_RcmdIsisSpfRunSummary proto.InternalMessageInfo

func (m *RcmdIsisSpfRunSummary) GetTopology() uint32 {
	if m != nil {
		return m.Topology
	}
	return 0
}

func (m *RcmdIsisSpfRunSummary) GetIsisLevel() string {
	if m != nil {
		return m.IsisLevel
	}
	return ""
}

func (m *RcmdIsisSpfRunSummary) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *RcmdIsisSpfRunSummary) GetThresholdExceeded() bool {
	if m != nil {
		return m.ThresholdExceeded
	}
	return false
}

func (m *RcmdIsisSpfRunSummary) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *RcmdIsisSpfRunSummary) GetIsDataComplete() bool {
	if m != nil {
		return m.IsDataComplete
	}
	return false
}

func (m *RcmdIsisSpfRunSummary) GetTriggerTime() string {
	if m != nil {
		return m.TriggerTime
	}
	return ""
}

func (m *RcmdIsisSpfRunSummary) GetDuration() string {
	if m != nil {
		return m.Duration
	}
	return ""
}

func (m *RcmdIsisSpfRunSummary) GetTotalLspChanges() uint32 {
	if m != nil {
		return m.TotalLspChanges
	}
	return 0
}

func (m *RcmdIsisSpfRunSummary) GetPrioritySummary() []*RcmdPrioritySummary {
	if m != nil {
		return m.PrioritySummary
	}
	return nil
}

type RcmdLspInfo struct {
	LspId                string   `protobuf:"bytes,1,opt,name=lsp_id,json=lspId,proto3" json:"lsp_id,omitempty"`
	SequenceNumber       uint32   `protobuf:"varint,2,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`
	ChangeType           string   `protobuf:"bytes,3,opt,name=change_type,json=changeType,proto3" json:"change_type,omitempty"`
	ReceptionTime        string   `protobuf:"bytes,4,opt,name=reception_time,json=receptionTime,proto3" json:"reception_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RcmdLspInfo) Reset()         { *m = RcmdLspInfo{} }
func (m *RcmdLspInfo) String() string { return proto.CompactTextString(m) }
func (*RcmdLspInfo) ProtoMessage()    {}
func (*RcmdLspInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_8615b406726bfbf2, []int{6}
}

func (m *RcmdLspInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RcmdLspInfo.Unmarshal(m, b)
}
func (m *RcmdLspInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RcmdLspInfo.Marshal(b, m, deterministic)
}
func (m *RcmdLspInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RcmdLspInfo.Merge(m, src)
}
func (m *RcmdLspInfo) XXX_Size() int {
	return xxx_messageInfo_RcmdLspInfo.Size(m)
}
func (m *RcmdLspInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_RcmdLspInfo.DiscardUnknown(m)
}

var xxx_messageInfo_RcmdLspInfo proto.InternalMessageInfo

func (m *RcmdLspInfo) GetLspId() string {
	if m != nil {
		return m.LspId
	}
	return ""
}

func (m *RcmdLspInfo) GetSequenceNumber() uint32 {
	if m != nil {
		return m.SequenceNumber
	}
	return 0
}

func (m *RcmdLspInfo) GetChangeType() string {
	if m != nil {
		return m.ChangeType
	}
	return ""
}

func (m *RcmdLspInfo) GetReceptionTime() string {
	if m != nil {
		return m.ReceptionTime
	}
	return ""
}

type RcmdTime struct {
	StartTime            string   `protobuf:"bytes,1,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime              string   `protobuf:"bytes,2,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	Duration             string   `protobuf:"bytes,3,opt,name=duration,proto3" json:"duration,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RcmdTime) Reset()         { *m = RcmdTime{} }
func (m *RcmdTime) String() string { return proto.CompactTextString(m) }
func (*RcmdTime) ProtoMessage()    {}
func (*RcmdTime) Descriptor() ([]byte, []int) {
	return fileDescriptor_8615b406726bfbf2, []int{7}
}

func (m *RcmdTime) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RcmdTime.Unmarshal(m, b)
}
func (m *RcmdTime) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RcmdTime.Marshal(b, m, deterministic)
}
func (m *RcmdTime) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RcmdTime.Merge(m, src)
}
func (m *RcmdTime) XXX_Size() int {
	return xxx_messageInfo_RcmdTime.Size(m)
}
func (m *RcmdTime) XXX_DiscardUnknown() {
	xxx_messageInfo_RcmdTime.DiscardUnknown(m)
}

var xxx_messageInfo_RcmdTime proto.InternalMessageInfo

func (m *RcmdTime) GetStartTime() string {
	if m != nil {
		return m.StartTime
	}
	return ""
}

func (m *RcmdTime) GetEndTime() string {
	if m != nil {
		return m.EndTime
	}
	return ""
}

func (m *RcmdTime) GetDuration() string {
	if m != nil {
		return m.Duration
	}
	return ""
}

type RcmdLcInfo struct {
	NodeName             string    `protobuf:"bytes,1,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	Speed                string    `protobuf:"bytes,2,opt,name=speed,proto3" json:"speed,omitempty"`
	FibComplete          *RcmdTime `protobuf:"bytes,3,opt,name=fib_complete,json=fibComplete,proto3" json:"fib_complete,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *RcmdLcInfo) Reset()         { *m = RcmdLcInfo{} }
func (m *RcmdLcInfo) String() string { return proto.CompactTextString(m) }
func (*RcmdLcInfo) ProtoMessage()    {}
func (*RcmdLcInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_8615b406726bfbf2, []int{8}
}

func (m *RcmdLcInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RcmdLcInfo.Unmarshal(m, b)
}
func (m *RcmdLcInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RcmdLcInfo.Marshal(b, m, deterministic)
}
func (m *RcmdLcInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RcmdLcInfo.Merge(m, src)
}
func (m *RcmdLcInfo) XXX_Size() int {
	return xxx_messageInfo_RcmdLcInfo.Size(m)
}
func (m *RcmdLcInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_RcmdLcInfo.DiscardUnknown(m)
}

var xxx_messageInfo_RcmdLcInfo proto.InternalMessageInfo

func (m *RcmdLcInfo) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

func (m *RcmdLcInfo) GetSpeed() string {
	if m != nil {
		return m.Speed
	}
	return ""
}

func (m *RcmdLcInfo) GetFibComplete() *RcmdTime {
	if m != nil {
		return m.FibComplete
	}
	return nil
}

type RcmdTimeline struct {
	RouteOrigin          *RcmdTime     `protobuf:"bytes,1,opt,name=route_origin,json=routeOrigin,proto3" json:"route_origin,omitempty"`
	RiBv4Enter           *RcmdTime     `protobuf:"bytes,2,opt,name=ri_bv4_enter,json=riBv4Enter,proto3" json:"ri_bv4_enter,omitempty"`
	RiBv4Exit            *RcmdTime     `protobuf:"bytes,3,opt,name=ri_bv4_exit,json=riBv4Exit,proto3" json:"ri_bv4_exit,omitempty"`
	RiBv4Redistribute    *RcmdTime     `protobuf:"bytes,4,opt,name=ri_bv4_redistribute,json=riBv4Redistribute,proto3" json:"ri_bv4_redistribute,omitempty"`
	LdpEnter             *RcmdTime     `protobuf:"bytes,5,opt,name=ldp_enter,json=ldpEnter,proto3" json:"ldp_enter,omitempty"`
	LdpExit              *RcmdTime     `protobuf:"bytes,6,opt,name=ldp_exit,json=ldpExit,proto3" json:"ldp_exit,omitempty"`
	LsdEnter             *RcmdTime     `protobuf:"bytes,7,opt,name=lsd_enter,json=lsdEnter,proto3" json:"lsd_enter,omitempty"`
	LsdExit              *RcmdTime     `protobuf:"bytes,8,opt,name=lsd_exit,json=lsdExit,proto3" json:"lsd_exit,omitempty"`
	LcIp                 []*RcmdLcInfo `protobuf:"bytes,9,rep,name=lc_ip,json=lcIp,proto3" json:"lc_ip,omitempty"`
	LcMpls               []*RcmdLcInfo `protobuf:"bytes,10,rep,name=lc_mpls,json=lcMpls,proto3" json:"lc_mpls,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *RcmdTimeline) Reset()         { *m = RcmdTimeline{} }
func (m *RcmdTimeline) String() string { return proto.CompactTextString(m) }
func (*RcmdTimeline) ProtoMessage()    {}
func (*RcmdTimeline) Descriptor() ([]byte, []int) {
	return fileDescriptor_8615b406726bfbf2, []int{9}
}

func (m *RcmdTimeline) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RcmdTimeline.Unmarshal(m, b)
}
func (m *RcmdTimeline) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RcmdTimeline.Marshal(b, m, deterministic)
}
func (m *RcmdTimeline) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RcmdTimeline.Merge(m, src)
}
func (m *RcmdTimeline) XXX_Size() int {
	return xxx_messageInfo_RcmdTimeline.Size(m)
}
func (m *RcmdTimeline) XXX_DiscardUnknown() {
	xxx_messageInfo_RcmdTimeline.DiscardUnknown(m)
}

var xxx_messageInfo_RcmdTimeline proto.InternalMessageInfo

func (m *RcmdTimeline) GetRouteOrigin() *RcmdTime {
	if m != nil {
		return m.RouteOrigin
	}
	return nil
}

func (m *RcmdTimeline) GetRiBv4Enter() *RcmdTime {
	if m != nil {
		return m.RiBv4Enter
	}
	return nil
}

func (m *RcmdTimeline) GetRiBv4Exit() *RcmdTime {
	if m != nil {
		return m.RiBv4Exit
	}
	return nil
}

func (m *RcmdTimeline) GetRiBv4Redistribute() *RcmdTime {
	if m != nil {
		return m.RiBv4Redistribute
	}
	return nil
}

func (m *RcmdTimeline) GetLdpEnter() *RcmdTime {
	if m != nil {
		return m.LdpEnter
	}
	return nil
}

func (m *RcmdTimeline) GetLdpExit() *RcmdTime {
	if m != nil {
		return m.LdpExit
	}
	return nil
}

func (m *RcmdTimeline) GetLsdEnter() *RcmdTime {
	if m != nil {
		return m.LsdEnter
	}
	return nil
}

func (m *RcmdTimeline) GetLsdExit() *RcmdTime {
	if m != nil {
		return m.LsdExit
	}
	return nil
}

func (m *RcmdTimeline) GetLcIp() []*RcmdLcInfo {
	if m != nil {
		return m.LcIp
	}
	return nil
}

func (m *RcmdTimeline) GetLcMpls() []*RcmdLcInfo {
	if m != nil {
		return m.LcMpls
	}
	return nil
}

type RcmdNetwork struct {
	Address              string   `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	NetMask              uint32   `protobuf:"varint,2,opt,name=net_mask,json=netMask,proto3" json:"net_mask,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RcmdNetwork) Reset()         { *m = RcmdNetwork{} }
func (m *RcmdNetwork) String() string { return proto.CompactTextString(m) }
func (*RcmdNetwork) ProtoMessage()    {}
func (*RcmdNetwork) Descriptor() ([]byte, []int) {
	return fileDescriptor_8615b406726bfbf2, []int{10}
}

func (m *RcmdNetwork) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RcmdNetwork.Unmarshal(m, b)
}
func (m *RcmdNetwork) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RcmdNetwork.Marshal(b, m, deterministic)
}
func (m *RcmdNetwork) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RcmdNetwork.Merge(m, src)
}
func (m *RcmdNetwork) XXX_Size() int {
	return xxx_messageInfo_RcmdNetwork.Size(m)
}
func (m *RcmdNetwork) XXX_DiscardUnknown() {
	xxx_messageInfo_RcmdNetwork.DiscardUnknown(m)
}

var xxx_messageInfo_RcmdNetwork proto.InternalMessageInfo

func (m *RcmdNetwork) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *RcmdNetwork) GetNetMask() uint32 {
	if m != nil {
		return m.NetMask
	}
	return 0
}

type RcmdPriority struct {
	PrioritySummary      *RcmdPrioritySummary `protobuf:"bytes,1,opt,name=priority_summary,json=prioritySummary,proto3" json:"priority_summary,omitempty"`
	ConvergenceTimeline  []*RcmdTimeline      `protobuf:"bytes,2,rep,name=convergence_timeline,json=convergenceTimeline,proto3" json:"convergence_timeline,omitempty"`
	LeafNetworksAdded    []*RcmdNetwork       `protobuf:"bytes,3,rep,name=leaf_networks_added,json=leafNetworksAdded,proto3" json:"leaf_networks_added,omitempty"`
	LeafNetworksDeleted  []*RcmdNetwork       `protobuf:"bytes,4,rep,name=leaf_networks_deleted,json=leafNetworksDeleted,proto3" json:"leaf_networks_deleted,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *RcmdPriority) Reset()         { *m = RcmdPriority{} }
func (m *RcmdPriority) String() string { return proto.CompactTextString(m) }
func (*RcmdPriority) ProtoMessage()    {}
func (*RcmdPriority) Descriptor() ([]byte, []int) {
	return fileDescriptor_8615b406726bfbf2, []int{11}
}

func (m *RcmdPriority) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RcmdPriority.Unmarshal(m, b)
}
func (m *RcmdPriority) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RcmdPriority.Marshal(b, m, deterministic)
}
func (m *RcmdPriority) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RcmdPriority.Merge(m, src)
}
func (m *RcmdPriority) XXX_Size() int {
	return xxx_messageInfo_RcmdPriority.Size(m)
}
func (m *RcmdPriority) XXX_DiscardUnknown() {
	xxx_messageInfo_RcmdPriority.DiscardUnknown(m)
}

var xxx_messageInfo_RcmdPriority proto.InternalMessageInfo

func (m *RcmdPriority) GetPrioritySummary() *RcmdPrioritySummary {
	if m != nil {
		return m.PrioritySummary
	}
	return nil
}

func (m *RcmdPriority) GetConvergenceTimeline() []*RcmdTimeline {
	if m != nil {
		return m.ConvergenceTimeline
	}
	return nil
}

func (m *RcmdPriority) GetLeafNetworksAdded() []*RcmdNetwork {
	if m != nil {
		return m.LeafNetworksAdded
	}
	return nil
}

func (m *RcmdPriority) GetLeafNetworksDeleted() []*RcmdNetwork {
	if m != nil {
		return m.LeafNetworksDeleted
	}
	return nil
}

type RcmdRegenLspInfo struct {
	SerialNumberXr       uint32   `protobuf:"varint,1,opt,name=serial_number_xr,json=serialNumberXr,proto3" json:"serial_number_xr,omitempty"`
	LspId                string   `protobuf:"bytes,2,opt,name=lsp_id,json=lspId,proto3" json:"lsp_id,omitempty"`
	SequenceNumber       uint32   `protobuf:"varint,3,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`
	ReceptionTime        string   `protobuf:"bytes,4,opt,name=reception_time,json=receptionTime,proto3" json:"reception_time,omitempty"`
	IsisLevel            string   `protobuf:"bytes,5,opt,name=isis_level,json=isisLevel,proto3" json:"isis_level,omitempty"`
	SpfRunNumber         uint32   `protobuf:"varint,6,opt,name=spf_run_number,json=spfRunNumber,proto3" json:"spf_run_number,omitempty"`
	Reason               string   `protobuf:"bytes,7,opt,name=reason,proto3" json:"reason,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RcmdRegenLspInfo) Reset()         { *m = RcmdRegenLspInfo{} }
func (m *RcmdRegenLspInfo) String() string { return proto.CompactTextString(m) }
func (*RcmdRegenLspInfo) ProtoMessage()    {}
func (*RcmdRegenLspInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_8615b406726bfbf2, []int{12}
}

func (m *RcmdRegenLspInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RcmdRegenLspInfo.Unmarshal(m, b)
}
func (m *RcmdRegenLspInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RcmdRegenLspInfo.Marshal(b, m, deterministic)
}
func (m *RcmdRegenLspInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RcmdRegenLspInfo.Merge(m, src)
}
func (m *RcmdRegenLspInfo) XXX_Size() int {
	return xxx_messageInfo_RcmdRegenLspInfo.Size(m)
}
func (m *RcmdRegenLspInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_RcmdRegenLspInfo.DiscardUnknown(m)
}

var xxx_messageInfo_RcmdRegenLspInfo proto.InternalMessageInfo

func (m *RcmdRegenLspInfo) GetSerialNumberXr() uint32 {
	if m != nil {
		return m.SerialNumberXr
	}
	return 0
}

func (m *RcmdRegenLspInfo) GetLspId() string {
	if m != nil {
		return m.LspId
	}
	return ""
}

func (m *RcmdRegenLspInfo) GetSequenceNumber() uint32 {
	if m != nil {
		return m.SequenceNumber
	}
	return 0
}

func (m *RcmdRegenLspInfo) GetReceptionTime() string {
	if m != nil {
		return m.ReceptionTime
	}
	return ""
}

func (m *RcmdRegenLspInfo) GetIsisLevel() string {
	if m != nil {
		return m.IsisLevel
	}
	return ""
}

func (m *RcmdRegenLspInfo) GetSpfRunNumber() uint32 {
	if m != nil {
		return m.SpfRunNumber
	}
	return 0
}

func (m *RcmdRegenLspInfo) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

type RcmdIsisSpfRun struct {
	SpfSummary           *RcmdIsisSpfRunSummary `protobuf:"bytes,50,opt,name=spf_summary,json=spfSummary,proto3" json:"spf_summary,omitempty"`
	StartTime            string                 `protobuf:"bytes,51,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	WaitTime             uint32                 `protobuf:"varint,52,opt,name=wait_time,json=waitTime,proto3" json:"wait_time,omitempty"`
	Reason               string                 `protobuf:"bytes,53,opt,name=reason,proto3" json:"reason,omitempty"`
	TriggerLsp           []*RcmdLspInfo         `protobuf:"bytes,54,rep,name=trigger_lsp,json=triggerLsp,proto3" json:"trigger_lsp,omitempty"`
	NodeStatistics       *RcmdStat              `protobuf:"bytes,55,opt,name=node_statistics,json=nodeStatistics,proto3" json:"node_statistics,omitempty"`
	Priority             []*RcmdPriority        `protobuf:"bytes,56,rep,name=priority,proto3" json:"priority,omitempty"`
	LspProcessed         []*RcmdLspInfo         `protobuf:"bytes,57,rep,name=lsp_processed,json=lspProcessed,proto3" json:"lsp_processed,omitempty"`
	LspRegenerated       []*RcmdRegenLspInfo    `protobuf:"bytes,58,rep,name=lsp_regenerated,json=lspRegenerated,proto3" json:"lsp_regenerated,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *RcmdIsisSpfRun) Reset()         { *m = RcmdIsisSpfRun{} }
func (m *RcmdIsisSpfRun) String() string { return proto.CompactTextString(m) }
func (*RcmdIsisSpfRun) ProtoMessage()    {}
func (*RcmdIsisSpfRun) Descriptor() ([]byte, []int) {
	return fileDescriptor_8615b406726bfbf2, []int{13}
}

func (m *RcmdIsisSpfRun) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RcmdIsisSpfRun.Unmarshal(m, b)
}
func (m *RcmdIsisSpfRun) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RcmdIsisSpfRun.Marshal(b, m, deterministic)
}
func (m *RcmdIsisSpfRun) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RcmdIsisSpfRun.Merge(m, src)
}
func (m *RcmdIsisSpfRun) XXX_Size() int {
	return xxx_messageInfo_RcmdIsisSpfRun.Size(m)
}
func (m *RcmdIsisSpfRun) XXX_DiscardUnknown() {
	xxx_messageInfo_RcmdIsisSpfRun.DiscardUnknown(m)
}

var xxx_messageInfo_RcmdIsisSpfRun proto.InternalMessageInfo

func (m *RcmdIsisSpfRun) GetSpfSummary() *RcmdIsisSpfRunSummary {
	if m != nil {
		return m.SpfSummary
	}
	return nil
}

func (m *RcmdIsisSpfRun) GetStartTime() string {
	if m != nil {
		return m.StartTime
	}
	return ""
}

func (m *RcmdIsisSpfRun) GetWaitTime() uint32 {
	if m != nil {
		return m.WaitTime
	}
	return 0
}

func (m *RcmdIsisSpfRun) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *RcmdIsisSpfRun) GetTriggerLsp() []*RcmdLspInfo {
	if m != nil {
		return m.TriggerLsp
	}
	return nil
}

func (m *RcmdIsisSpfRun) GetNodeStatistics() *RcmdStat {
	if m != nil {
		return m.NodeStatistics
	}
	return nil
}

func (m *RcmdIsisSpfRun) GetPriority() []*RcmdPriority {
	if m != nil {
		return m.Priority
	}
	return nil
}

func (m *RcmdIsisSpfRun) GetLspProcessed() []*RcmdLspInfo {
	if m != nil {
		return m.LspProcessed
	}
	return nil
}

func (m *RcmdIsisSpfRun) GetLspRegenerated() []*RcmdRegenLspInfo {
	if m != nil {
		return m.LspRegenerated
	}
	return nil
}

func init() {
	proto.RegisterType((*RcmdIsisSpfRun_KEYS)(nil), "cisco_ios_xr_infra_rcmd_oper.rcmd.isis.instances.instance.spf_run_summaries.spf_run_summary.rcmd_isis_spf_run_KEYS")
	proto.RegisterType((*RcmdStat)(nil), "cisco_ios_xr_infra_rcmd_oper.rcmd.isis.instances.instance.spf_run_summaries.spf_run_summary.rcmd_stat")
	proto.RegisterType((*RcmdShowFrrStat)(nil), "cisco_ios_xr_infra_rcmd_oper.rcmd.isis.instances.instance.spf_run_summaries.spf_run_summary.rcmd_show_frr_stat")
	proto.RegisterType((*RcmdTimestamp)(nil), "cisco_ios_xr_infra_rcmd_oper.rcmd.isis.instances.instance.spf_run_summaries.spf_run_summary.rcmd_timestamp")
	proto.RegisterType((*RcmdPrioritySummary)(nil), "cisco_ios_xr_infra_rcmd_oper.rcmd.isis.instances.instance.spf_run_summaries.spf_run_summary.rcmd_priority_summary")
	proto.RegisterType((*RcmdIsisSpfRunSummary)(nil), "cisco_ios_xr_infra_rcmd_oper.rcmd.isis.instances.instance.spf_run_summaries.spf_run_summary.rcmd_isis_spf_run_summary")
	proto.RegisterType((*RcmdLspInfo)(nil), "cisco_ios_xr_infra_rcmd_oper.rcmd.isis.instances.instance.spf_run_summaries.spf_run_summary.rcmd_lsp_info")
	proto.RegisterType((*RcmdTime)(nil), "cisco_ios_xr_infra_rcmd_oper.rcmd.isis.instances.instance.spf_run_summaries.spf_run_summary.rcmd_time")
	proto.RegisterType((*RcmdLcInfo)(nil), "cisco_ios_xr_infra_rcmd_oper.rcmd.isis.instances.instance.spf_run_summaries.spf_run_summary.rcmd_lc_info")
	proto.RegisterType((*RcmdTimeline)(nil), "cisco_ios_xr_infra_rcmd_oper.rcmd.isis.instances.instance.spf_run_summaries.spf_run_summary.rcmd_timeline")
	proto.RegisterType((*RcmdNetwork)(nil), "cisco_ios_xr_infra_rcmd_oper.rcmd.isis.instances.instance.spf_run_summaries.spf_run_summary.rcmd_network")
	proto.RegisterType((*RcmdPriority)(nil), "cisco_ios_xr_infra_rcmd_oper.rcmd.isis.instances.instance.spf_run_summaries.spf_run_summary.rcmd_priority")
	proto.RegisterType((*RcmdRegenLspInfo)(nil), "cisco_ios_xr_infra_rcmd_oper.rcmd.isis.instances.instance.spf_run_summaries.spf_run_summary.rcmd_regen_lsp_info")
	proto.RegisterType((*RcmdIsisSpfRun)(nil), "cisco_ios_xr_infra_rcmd_oper.rcmd.isis.instances.instance.spf_run_summaries.spf_run_summary.rcmd_isis_spf_run")
}

func init() { proto.RegisterFile("rcmd_isis_spf_run.proto", fileDescriptor_8615b406726bfbf2) }

var fileDescriptor_8615b406726bfbf2 = []byte{
	// 1480 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x58, 0x4f, 0x6f, 0x1c, 0xc5,
	0x12, 0xd7, 0xd8, 0xde, 0xf5, 0x6e, 0xed, 0x7a, 0xd7, 0x6e, 0xdb, 0x79, 0x13, 0x47, 0xef, 0xbd,
	0xbc, 0x7d, 0x20, 0xac, 0x48, 0xf8, 0x90, 0x98, 0xbf, 0xe2, 0x02, 0x4e, 0x0e, 0x11, 0x89, 0x89,
	0x26, 0x39, 0x80, 0x38, 0x8c, 0xda, 0x33, 0xbd, 0xeb, 0xc6, 0xf3, 0xa7, 0xe9, 0xee, 0xf5, 0x9f,
	0x0b, 0x12, 0x44, 0x8a, 0x40, 0x39, 0x20, 0x24, 0x44, 0x84, 0x10, 0xe2, 0x1b, 0x70, 0xe1, 0x43,
	0xe4, 0xc4, 0x9d, 0x2b, 0x12, 0x1f, 0x04, 0x75, 0x75, 0xf7, 0xee, 0x78, 0xd7, 0x11, 0x5c, 0x3c,
	0xe2, 0x36, 0x5d, 0x55, 0x33, 0xf5, 0xeb, 0xaa, 0xea, 0x5f, 0x55, 0x0f, 0xfc, 0x4b, 0x26, 0x79,
	0x1a, 0x73, 0xc5, 0x55, 0xac, 0xc4, 0x30, 0x96, 0xe3, 0x62, 0x47, 0xc8, 0x52, 0x97, 0xe4, 0xe3,
	0x84, 0xab, 0xa4, 0x8c, 0x79, 0xa9, 0xe2, 0x53, 0x19, 0xf3, 0x62, 0x28, 0x69, 0x8c, 0xb6, 0xa5,
	0x60, 0x72, 0xc7, 0x3c, 0xed, 0x98, 0xb7, 0x76, 0x78, 0xa1, 0x34, 0x2d, 0x12, 0x36, 0x7d, 0xda,
	0x71, 0x1f, 0x8a, 0xd5, 0x38, 0xcf, 0xa9, 0xe4, 0x4c, 0xcd, 0x48, 0xce, 0x06, 0x09, 0x5c, 0x99,
	0xf3, 0x1b, 0xbf, 0x7f, 0xe7, 0xa3, 0x87, 0xe4, 0xff, 0xb0, 0xe2, 0xbf, 0x13, 0x17, 0x34, 0x67,
	0x61, 0x70, 0x3d, 0xd8, 0x6e, 0x47, 0x5d, 0x2f, 0xdc, 0xa7, 0x39, 0x23, 0x2f, 0x41, 0xcf, 0xbf,
	0x54, 0x8c, 0xf3, 0x03, 0x26, 0xc3, 0x85, 0xeb, 0xc1, 0xf6, 0x4a, 0xd4, 0x55, 0x62, 0x18, 0x8d,
	0x8b, 0x7d, 0x94, 0x0d, 0x7e, 0x09, 0xa0, 0x8d, 0x5e, 0x94, 0xa6, 0x9a, 0x10, 0x58, 0xa2, 0x69,
	0xaa, 0xf0, 0x7b, 0x2b, 0x11, 0x3e, 0x93, 0x10, 0x96, 0x53, 0x96, 0x31, 0xcd, 0x94, 0xfb, 0x80,
	0x5f, 0x92, 0x2d, 0x68, 0xe5, 0x65, 0xca, 0x87, 0x9c, 0xa9, 0x70, 0x11, 0x55, 0x93, 0x35, 0xf9,
	0x0f, 0x80, 0x64, 0x34, 0x39, 0xa4, 0x07, 0x19, 0x53, 0xe1, 0x12, 0x6a, 0x2b, 0x12, 0x32, 0x80,
	0xee, 0xb8, 0xa8, 0x58, 0x34, 0x2c, 0xb6, 0xaa, 0xcc, 0x78, 0xd6, 0xe5, 0x38, 0x39, 0x64, 0x2a,
	0x6c, 0x5a, 0xcf, 0x6e, 0x39, 0x78, 0x1e, 0x00, 0xb1, 0xa8, 0x0f, 0xcb, 0x93, 0x78, 0x28, 0xa5,
	0x85, 0xff, 0x3f, 0xe8, 0xea, 0x52, 0xd3, 0x2c, 0x96, 0xe5, 0xd8, 0xe0, 0xb5, 0xdb, 0xe8, 0xa0,
	0x2c, 0x42, 0x11, 0xd9, 0x85, 0x2b, 0xc3, 0x71, 0x96, 0x9d, 0xc5, 0x26, 0x81, 0x2c, 0xd1, 0x2c,
	0xf5, 0xc6, 0x76, 0x73, 0x1b, 0xa8, 0x7d, 0xe0, 0x95, 0xee, 0xad, 0x77, 0x60, 0x4b, 0x50, 0xa9,
	0x39, 0xbd, 0xf0, 0x4d, 0xbb, 0xf7, 0x70, 0x62, 0x31, 0xfb, 0xf6, 0x16, 0xb4, 0x92, 0xf2, 0x98,
	0x49, 0x3a, 0x62, 0x18, 0x89, 0x76, 0x34, 0x59, 0x0f, 0x7e, 0x0e, 0xa0, 0x87, 0x3b, 0xd1, 0x3c,
	0x67, 0x4a, 0xd3, 0x5c, 0x98, 0x5d, 0xe4, 0xbc, 0xe0, 0xf9, 0x38, 0x47, 0xa1, 0x4b, 0x6e, 0xc7,
	0xc9, 0x1e, 0xf1, 0x9c, 0xa1, 0x09, 0x3d, 0x9d, 0x9a, 0x2c, 0x38, 0x13, 0x2b, 0x43, 0x93, 0x1b,
	0xb0, 0xa6, 0xb2, 0xf2, 0x84, 0x29, 0x1d, 0x17, 0x65, 0xea, 0xea, 0x64, 0x11, 0xed, 0xfa, 0x4e,
	0xb1, 0x5f, 0xa6, 0xb6, 0x54, 0x6e, 0xc0, 0xda, 0x90, 0x2a, 0x7d, 0xde, 0xd6, 0x22, 0xed, 0x3b,
	0x85, 0xb7, 0x1d, 0x3c, 0x6f, 0xc0, 0x26, 0x02, 0x16, 0x92, 0x97, 0x92, 0xeb, 0x33, 0x5f, 0xaf,
	0x64, 0x03, 0x1a, 0x19, 0x3b, 0x66, 0x99, 0x03, 0x6c, 0x17, 0xe4, 0x55, 0x20, 0xfa, 0x50, 0x32,
	0x75, 0x58, 0x66, 0x69, 0xcc, 0x4e, 0x13, 0xc6, 0x52, 0x96, 0x22, 0xe0, 0x56, 0xb4, 0x36, 0xd1,
	0xdc, 0x71, 0x0a, 0xf2, 0x4d, 0x00, 0xab, 0x18, 0x56, 0xcc, 0x28, 0x57, 0x9a, 0x27, 0x36, 0xc0,
	0x9d, 0x9b, 0xc3, 0x9d, 0x4b, 0x3c, 0x6d, 0x3b, 0x93, 0x43, 0x10, 0xf5, 0xd1, 0xff, 0xc3, 0x89,
	0x7b, 0xf2, 0x6d, 0x00, 0x2b, 0xbe, 0xc6, 0x50, 0x14, 0x2e, 0x5d, 0x5f, 0xdc, 0xee, 0xdc, 0x2c,
	0x6b, 0x00, 0x54, 0xad, 0xef, 0xa8, 0x3b, 0x94, 0x72, 0x82, 0x8b, 0xfc, 0x10, 0xc0, 0x3a, 0x17,
	0x71, 0x52, 0x16, 0xc7, 0x4c, 0x8e, 0x98, 0x21, 0x03, 0x2c, 0x86, 0x06, 0x46, 0xeb, 0xe8, 0xf2,
	0xc1, 0x4d, 0x4a, 0x36, 0x5a, 0xe3, 0x62, 0x6f, 0x0a, 0x03, 0xeb, 0xef, 0xa7, 0x00, 0x36, 0x73,
	0x91, 0xa9, 0x79, 0x7c, 0xcd, 0xfa, 0xf1, 0xad, 0x1b, 0x24, 0x33, 0x08, 0x07, 0x7f, 0x2c, 0xc2,
	0xd5, 0x79, 0x82, 0xf5, 0xd5, 0xbc, 0x05, 0x2d, 0x5d, 0x8a, 0x32, 0x2b, 0x47, 0x67, 0x8e, 0x47,
	0x26, 0x6b, 0xf2, 0x6f, 0x00, 0x7c, 0xc7, 0x96, 0xbb, 0x3d, 0x7c, 0x6d, 0x23, 0xb9, 0x87, 0x25,
	0x4f, 0x60, 0x49, 0x9f, 0x09, 0x7f, 0xda, 0xf0, 0xf9, 0x05, 0xc7, 0x60, 0xe9, 0x45, 0xc7, 0x60,
	0x03, 0x1a, 0x26, 0xe3, 0x36, 0x99, 0xed, 0xc8, 0x2e, 0xc8, 0x36, 0xac, 0x72, 0x15, 0xa7, 0x54,
	0xd3, 0x38, 0x29, 0x73, 0x61, 0x58, 0x18, 0xa3, 0xd9, 0x8a, 0x7a, 0x5c, 0xdd, 0xa6, 0x9a, 0xee,
	0x39, 0x29, 0x32, 0xa1, 0xe4, 0xa3, 0x11, 0x93, 0x36, 0xe6, 0xcb, 0x96, 0x20, 0x9c, 0x0c, 0x13,
	0xb4, 0x05, 0xad, 0x74, 0x2c, 0xa9, 0xe6, 0x65, 0x11, 0xb6, 0x2c, 0x2b, 0xf9, 0xb5, 0x21, 0x04,
	0x4b, 0xa4, 0x99, 0x12, 0x71, 0x72, 0x48, 0x8b, 0x11, 0x53, 0x61, 0x1b, 0xa3, 0xd0, 0x47, 0xc5,
	0x3d, 0x25, 0xf6, 0xac, 0x98, 0xfc, 0x18, 0xc0, 0xea, 0x2c, 0x17, 0x84, 0x80, 0x07, 0x44, 0x5e,
	0x7e, 0x8e, 0x67, 0x3d, 0x47, 0x7d, 0x2f, 0x79, 0xe8, 0xda, 0xe8, 0xb3, 0x00, 0x56, 0xd0, 0xd4,
	0xec, 0x85, 0x17, 0xc3, 0x92, 0x6c, 0x42, 0x13, 0x9f, 0xd3, 0x09, 0x53, 0x29, 0x71, 0x37, 0x25,
	0xaf, 0x40, 0x5f, 0xb1, 0x4f, 0xc7, 0x58, 0xa8, 0xe7, 0x3a, 0x66, 0xcf, 0x8b, 0x6d, 0xcf, 0x24,
	0xff, 0x85, 0x8e, 0x8d, 0x49, 0x5c, 0x49, 0x33, 0x58, 0xd1, 0x23, 0x93, 0xec, 0x97, 0xa1, 0x27,
	0x59, 0xc2, 0x84, 0x89, 0xa5, 0x8d, 0xbf, 0x25, 0xd3, 0x95, 0x89, 0x14, 0x0b, 0x90, 0xba, 0xd6,
	0x6b, 0x2c, 0x4c, 0x4d, 0x29, 0x4d, 0xa5, 0xae, 0x72, 0x7e, 0x1b, 0x25, 0x98, 0xad, 0xab, 0xd0,
	0x62, 0x45, 0x5a, 0x65, 0xfb, 0x65, 0x56, 0xa4, 0x73, 0x89, 0x5c, 0x3c, 0x9f, 0xc8, 0xc1, 0xaf,
	0x01, 0x74, 0xed, 0xe6, 0x13, 0xbb, 0xf7, 0x6b, 0xd0, 0x9e, 0x52, 0xbc, 0xf5, 0xd2, 0x2a, 0x7c,
	0x1f, 0x30, 0x55, 0x27, 0x98, 0xa3, 0x67, 0x53, 0x75, 0x66, 0x41, 0xbe, 0x0a, 0xa0, 0x3b, 0xe4,
	0x07, 0xd3, 0x92, 0xab, 0x8d, 0x8e, 0xcd, 0x6e, 0xa3, 0xce, 0x90, 0x1f, 0xf8, 0xba, 0x1e, 0xfc,
	0x0e, 0x2e, 0x99, 0x46, 0x95, 0xf1, 0x82, 0x21, 0x3a, 0xdb, 0x30, 0x4a, 0xc9, 0x47, 0xbc, 0xc0,
	0x4d, 0xd5, 0x88, 0x0e, 0x7d, 0x7f, 0x80, 0xae, 0xc9, 0x97, 0x06, 0x0b, 0x8f, 0x0f, 0x8e, 0x77,
	0x63, 0x56, 0x68, 0x57, 0x3f, 0xf5, 0x61, 0x01, 0xc9, 0xdf, 0x3b, 0xde, 0xbd, 0x63, 0x3c, 0x93,
	0x27, 0x01, 0x74, 0x3c, 0x94, 0x53, 0xae, 0x6b, 0xce, 0x59, 0xdb, 0x22, 0x39, 0xe5, 0x9a, 0x7c,
	0x17, 0xc0, 0xba, 0x03, 0x22, 0x59, 0xca, 0x95, 0x96, 0xfc, 0x60, 0xac, 0xed, 0x89, 0xa8, 0x0f,
	0xd0, 0x1a, 0x02, 0x8a, 0x2a, 0x00, 0xc8, 0xe3, 0x00, 0xda, 0x59, 0x2a, 0x5c, 0xa6, 0x1a, 0xb5,
	0xc2, 0x69, 0x65, 0xa9, 0xb0, 0x79, 0xfa, 0x3c, 0x80, 0x16, 0xa2, 0x30, 0x49, 0x6a, 0xd6, 0x0a,
	0x62, 0xd9, 0x80, 0x30, 0x29, 0xc2, 0x48, 0xa8, 0xd4, 0x45, 0x62, 0xb9, 0xe6, 0x48, 0xa8, 0xb4,
	0x12, 0x09, 0x83, 0xc2, 0x44, 0xa2, 0x55, 0x73, 0x24, 0x54, 0x8a, 0x91, 0xf8, 0x0c, 0x1a, 0x86,
	0x28, 0x45, 0xd8, 0xc6, 0xfe, 0xc5, 0x2f, 0xdf, 0xbf, 0xe3, 0xe5, 0x68, 0x29, 0x4b, 0xee, 0x0a,
	0xf2, 0x45, 0x00, 0xcb, 0x59, 0x12, 0x9b, 0x69, 0xc5, 0xb5, 0xd0, 0x1a, 0x21, 0x34, 0xb3, 0xe4,
	0xbe, 0xc8, 0xd4, 0x60, 0xcf, 0xb5, 0x8c, 0x82, 0xe9, 0x93, 0x52, 0x1e, 0x99, 0x6b, 0x18, 0x4d,
	0x53, 0xc9, 0x94, 0x72, 0x0d, 0xc3, 0x2f, 0x4d, 0x53, 0x2a, 0x98, 0x8e, 0x73, 0xaa, 0x8e, 0xfc,
	0xdd, 0xb0, 0x60, 0xfa, 0x3e, 0x55, 0x47, 0x83, 0xa7, 0x0d, 0x47, 0xd4, 0xbe, 0x1d, 0x5f, 0x3c,
	0x27, 0x58, 0xb2, 0xfe, 0x27, 0xcc, 0x09, 0x06, 0xdf, 0xc6, 0xec, 0xac, 0x6a, 0x3a, 0x4c, 0xb8,
	0x80, 0x89, 0xf8, 0xa4, 0x9e, 0x5a, 0x34, 0x1e, 0xa3, 0xf5, 0xe4, 0xfc, 0xa8, 0x8a, 0x8d, 0xee,
	0xfb, 0x00, 0xd6, 0x33, 0x46, 0x87, 0x3e, 0x2f, 0x2a, 0xa6, 0xa9, 0x99, 0x21, 0x17, 0xeb, 0xaa,
	0x13, 0xe7, 0x37, 0x5a, 0x33, 0x28, 0xf6, 0x1d, 0x88, 0x77, 0x0d, 0x06, 0x13, 0xbb, 0xcd, 0xf3,
	0xd8, 0xec, 0x3f, 0x82, 0xd4, 0xdd, 0x94, 0x6a, 0x44, 0xb7, 0x5e, 0x45, 0x77, 0xdb, 0xa2, 0x18,
	0x3c, 0x5e, 0x80, 0x75, 0xb4, 0x92, 0x6c, 0xc4, 0x8a, 0xe9, 0x24, 0xb8, 0x0d, 0xab, 0x8a, 0x49,
	0x4e, 0x33, 0x37, 0xf0, 0xc5, 0xa7, 0xd2, 0x0d, 0xfb, 0x3d, 0x2b, 0xb7, 0x13, 0xdf, 0x87, 0xb2,
	0x32, 0x33, 0x2e, 0xfc, 0xc5, 0xcc, 0xb8, 0x78, 0xe1, 0xcc, 0xf8, 0xf7, 0x46, 0xc2, 0x99, 0x9b,
	0x45, 0x63, 0xf6, 0x66, 0x31, 0xff, 0x4f, 0xa7, 0x39, 0xff, 0x4f, 0x87, 0x5c, 0x81, 0xa6, 0x64,
	0x54, 0x95, 0x85, 0x1b, 0xfb, 0xdd, 0x6a, 0xf0, 0xdb, 0x32, 0xac, 0xcd, 0x5d, 0x78, 0xc8, 0xb3,
	0x00, 0x3a, 0xe6, 0xd9, 0x1f, 0xc9, 0x9b, 0x78, 0x24, 0x8f, 0x2f, 0x3f, 0x63, 0x17, 0x5d, 0xbb,
	0x22, 0x50, 0x62, 0xe8, 0x4f, 0xe4, 0xf9, 0x91, 0xf8, 0xd6, 0xec, 0x48, 0x7c, 0x0d, 0xda, 0x27,
	0x94, 0x3b, 0xed, 0xae, 0xbd, 0xa2, 0x19, 0x01, 0x2a, 0xa7, 0x31, 0x78, 0xad, 0x1a, 0x03, 0xf2,
	0x34, 0x00, 0x7f, 0x0b, 0x32, 0x65, 0x10, 0xbe, 0x5e, 0xd7, 0xe1, 0xf6, 0x35, 0x17, 0x81, 0x73,
	0x7f, 0x4f, 0x09, 0xf2, 0x75, 0x00, 0x7d, 0x1c, 0xc7, 0x2b, 0x3f, 0x3b, 0xde, 0xa8, 0xf5, 0x67,
	0x47, 0xcf, 0xb8, 0xaf, 0xfc, 0xeb, 0x78, 0x12, 0x40, 0xcb, 0x33, 0x63, 0xf8, 0x66, 0x5d, 0xc1,
	0xf1, 0x1e, 0xa3, 0x89, 0x6f, 0x13, 0x9a, 0x15, 0x13, 0x33, 0x21, 0xcb, 0x84, 0x29, 0xc5, 0xd2,
	0xf0, 0xad, 0xda, 0x53, 0xd5, 0xcd, 0x94, 0x78, 0xe0, 0xfd, 0x1b, 0x02, 0xee, 0x1b, 0x15, 0x72,
	0x08, 0x93, 0xd4, 0xd0, 0xdb, 0xdb, 0x88, 0x49, 0x5c, 0x3e, 0xa6, 0xf3, 0xc4, 0x15, 0xf5, 0x32,
	0x25, 0xa2, 0x29, 0x8e, 0x83, 0x26, 0xfe, 0x8f, 0xbe, 0xf5, 0x67, 0x00, 0x00, 0x00, 0xff, 0xff,
	0xa2, 0x46, 0x34, 0xec, 0xaa, 0x16, 0x00, 0x00,
}
