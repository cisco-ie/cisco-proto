/*
Copyright 2019 Cisco Systems

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: class_map_bg_entry.proto

package cisco_ios_xr_infra_policymgr_oper_policy_manager_nodes_node_class_map_class_map_types_class_map_type_class_maps_class_map

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ClassMapBgEntry_KEYS struct {
	NodeName             string   `protobuf:"bytes,1,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	Type                 string   `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	ClassMapName         string   `protobuf:"bytes,3,opt,name=class_map_name,json=classMapName,proto3" json:"class_map_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClassMapBgEntry_KEYS) Reset()         { *m = ClassMapBgEntry_KEYS{} }
func (m *ClassMapBgEntry_KEYS) String() string { return proto.CompactTextString(m) }
func (*ClassMapBgEntry_KEYS) ProtoMessage()    {}
func (*ClassMapBgEntry_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_cbfc8aa7cdcd476a, []int{0}
}

func (m *ClassMapBgEntry_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClassMapBgEntry_KEYS.Unmarshal(m, b)
}
func (m *ClassMapBgEntry_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClassMapBgEntry_KEYS.Marshal(b, m, deterministic)
}
func (m *ClassMapBgEntry_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClassMapBgEntry_KEYS.Merge(m, src)
}
func (m *ClassMapBgEntry_KEYS) XXX_Size() int {
	return xxx_messageInfo_ClassMapBgEntry_KEYS.Size(m)
}
func (m *ClassMapBgEntry_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_ClassMapBgEntry_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_ClassMapBgEntry_KEYS proto.InternalMessageInfo

func (m *ClassMapBgEntry_KEYS) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

func (m *ClassMapBgEntry_KEYS) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *ClassMapBgEntry_KEYS) GetClassMapName() string {
	if m != nil {
		return m.ClassMapName
	}
	return ""
}

type Uint8RngSt struct {
	Min                  uint32   `protobuf:"varint,1,opt,name=min,proto3" json:"min,omitempty"`
	Max                  uint32   `protobuf:"varint,2,opt,name=max,proto3" json:"max,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Uint8RngSt) Reset()         { *m = Uint8RngSt{} }
func (m *Uint8RngSt) String() string { return proto.CompactTextString(m) }
func (*Uint8RngSt) ProtoMessage()    {}
func (*Uint8RngSt) Descriptor() ([]byte, []int) {
	return fileDescriptor_cbfc8aa7cdcd476a, []int{1}
}

func (m *Uint8RngSt) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Uint8RngSt.Unmarshal(m, b)
}
func (m *Uint8RngSt) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Uint8RngSt.Marshal(b, m, deterministic)
}
func (m *Uint8RngSt) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Uint8RngSt.Merge(m, src)
}
func (m *Uint8RngSt) XXX_Size() int {
	return xxx_messageInfo_Uint8RngSt.Size(m)
}
func (m *Uint8RngSt) XXX_DiscardUnknown() {
	xxx_messageInfo_Uint8RngSt.DiscardUnknown(m)
}

var xxx_messageInfo_Uint8RngSt proto.InternalMessageInfo

func (m *Uint8RngSt) GetMin() uint32 {
	if m != nil {
		return m.Min
	}
	return 0
}

func (m *Uint8RngSt) GetMax() uint32 {
	if m != nil {
		return m.Max
	}
	return 0
}

type Uint16RngSt struct {
	Min                  uint32   `protobuf:"varint,1,opt,name=min,proto3" json:"min,omitempty"`
	Max                  uint32   `protobuf:"varint,2,opt,name=max,proto3" json:"max,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Uint16RngSt) Reset()         { *m = Uint16RngSt{} }
func (m *Uint16RngSt) String() string { return proto.CompactTextString(m) }
func (*Uint16RngSt) ProtoMessage()    {}
func (*Uint16RngSt) Descriptor() ([]byte, []int) {
	return fileDescriptor_cbfc8aa7cdcd476a, []int{2}
}

func (m *Uint16RngSt) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Uint16RngSt.Unmarshal(m, b)
}
func (m *Uint16RngSt) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Uint16RngSt.Marshal(b, m, deterministic)
}
func (m *Uint16RngSt) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Uint16RngSt.Merge(m, src)
}
func (m *Uint16RngSt) XXX_Size() int {
	return xxx_messageInfo_Uint16RngSt.Size(m)
}
func (m *Uint16RngSt) XXX_DiscardUnknown() {
	xxx_messageInfo_Uint16RngSt.DiscardUnknown(m)
}

var xxx_messageInfo_Uint16RngSt proto.InternalMessageInfo

func (m *Uint16RngSt) GetMin() uint32 {
	if m != nil {
		return m.Min
	}
	return 0
}

func (m *Uint16RngSt) GetMax() uint32 {
	if m != nil {
		return m.Max
	}
	return 0
}

type ProtoIcmpSt struct {
	Type                 uint32   `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	Code                 uint32   `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProtoIcmpSt) Reset()         { *m = ProtoIcmpSt{} }
func (m *ProtoIcmpSt) String() string { return proto.CompactTextString(m) }
func (*ProtoIcmpSt) ProtoMessage()    {}
func (*ProtoIcmpSt) Descriptor() ([]byte, []int) {
	return fileDescriptor_cbfc8aa7cdcd476a, []int{3}
}

func (m *ProtoIcmpSt) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProtoIcmpSt.Unmarshal(m, b)
}
func (m *ProtoIcmpSt) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProtoIcmpSt.Marshal(b, m, deterministic)
}
func (m *ProtoIcmpSt) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProtoIcmpSt.Merge(m, src)
}
func (m *ProtoIcmpSt) XXX_Size() int {
	return xxx_messageInfo_ProtoIcmpSt.Size(m)
}
func (m *ProtoIcmpSt) XXX_DiscardUnknown() {
	xxx_messageInfo_ProtoIcmpSt.DiscardUnknown(m)
}

var xxx_messageInfo_ProtoIcmpSt proto.InternalMessageInfo

func (m *ProtoIcmpSt) GetType() uint32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *ProtoIcmpSt) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

type TcpFlagSt struct {
	Value                uint32   `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	MatchAny             bool     `protobuf:"varint,2,opt,name=match_any,json=matchAny,proto3" json:"match_any,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TcpFlagSt) Reset()         { *m = TcpFlagSt{} }
func (m *TcpFlagSt) String() string { return proto.CompactTextString(m) }
func (*TcpFlagSt) ProtoMessage()    {}
func (*TcpFlagSt) Descriptor() ([]byte, []int) {
	return fileDescriptor_cbfc8aa7cdcd476a, []int{4}
}

func (m *TcpFlagSt) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TcpFlagSt.Unmarshal(m, b)
}
func (m *TcpFlagSt) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TcpFlagSt.Marshal(b, m, deterministic)
}
func (m *TcpFlagSt) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TcpFlagSt.Merge(m, src)
}
func (m *TcpFlagSt) XXX_Size() int {
	return xxx_messageInfo_TcpFlagSt.Size(m)
}
func (m *TcpFlagSt) XXX_DiscardUnknown() {
	xxx_messageInfo_TcpFlagSt.DiscardUnknown(m)
}

var xxx_messageInfo_TcpFlagSt proto.InternalMessageInfo

func (m *TcpFlagSt) GetValue() uint32 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *TcpFlagSt) GetMatchAny() bool {
	if m != nil {
		return m.MatchAny
	}
	return false
}

type Uint32RngSt struct {
	Min                  uint32   `protobuf:"varint,1,opt,name=min,proto3" json:"min,omitempty"`
	Max                  uint32   `protobuf:"varint,2,opt,name=max,proto3" json:"max,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Uint32RngSt) Reset()         { *m = Uint32RngSt{} }
func (m *Uint32RngSt) String() string { return proto.CompactTextString(m) }
func (*Uint32RngSt) ProtoMessage()    {}
func (*Uint32RngSt) Descriptor() ([]byte, []int) {
	return fileDescriptor_cbfc8aa7cdcd476a, []int{5}
}

func (m *Uint32RngSt) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Uint32RngSt.Unmarshal(m, b)
}
func (m *Uint32RngSt) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Uint32RngSt.Marshal(b, m, deterministic)
}
func (m *Uint32RngSt) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Uint32RngSt.Merge(m, src)
}
func (m *Uint32RngSt) XXX_Size() int {
	return xxx_messageInfo_Uint32RngSt.Size(m)
}
func (m *Uint32RngSt) XXX_DiscardUnknown() {
	xxx_messageInfo_Uint32RngSt.DiscardUnknown(m)
}

var xxx_messageInfo_Uint32RngSt proto.InternalMessageInfo

func (m *Uint32RngSt) GetMin() uint32 {
	if m != nil {
		return m.Min
	}
	return 0
}

func (m *Uint32RngSt) GetMax() uint32 {
	if m != nil {
		return m.Max
	}
	return 0
}

type DeiBitSt struct {
	BitValue             uint32   `protobuf:"varint,1,opt,name=bit_value,json=bitValue,proto3" json:"bit_value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeiBitSt) Reset()         { *m = DeiBitSt{} }
func (m *DeiBitSt) String() string { return proto.CompactTextString(m) }
func (*DeiBitSt) ProtoMessage()    {}
func (*DeiBitSt) Descriptor() ([]byte, []int) {
	return fileDescriptor_cbfc8aa7cdcd476a, []int{6}
}

func (m *DeiBitSt) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeiBitSt.Unmarshal(m, b)
}
func (m *DeiBitSt) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeiBitSt.Marshal(b, m, deterministic)
}
func (m *DeiBitSt) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeiBitSt.Merge(m, src)
}
func (m *DeiBitSt) XXX_Size() int {
	return xxx_messageInfo_DeiBitSt.Size(m)
}
func (m *DeiBitSt) XXX_DiscardUnknown() {
	xxx_messageInfo_DeiBitSt.DiscardUnknown(m)
}

var xxx_messageInfo_DeiBitSt proto.InternalMessageInfo

func (m *DeiBitSt) GetBitValue() uint32 {
	if m != nil {
		return m.BitValue
	}
	return 0
}

type VlanIdSt struct {
	Min                  uint32   `protobuf:"varint,1,opt,name=min,proto3" json:"min,omitempty"`
	Max                  uint32   `protobuf:"varint,2,opt,name=max,proto3" json:"max,omitempty"`
	Mask                 uint32   `protobuf:"varint,3,opt,name=mask,proto3" json:"mask,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VlanIdSt) Reset()         { *m = VlanIdSt{} }
func (m *VlanIdSt) String() string { return proto.CompactTextString(m) }
func (*VlanIdSt) ProtoMessage()    {}
func (*VlanIdSt) Descriptor() ([]byte, []int) {
	return fileDescriptor_cbfc8aa7cdcd476a, []int{7}
}

func (m *VlanIdSt) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VlanIdSt.Unmarshal(m, b)
}
func (m *VlanIdSt) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VlanIdSt.Marshal(b, m, deterministic)
}
func (m *VlanIdSt) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VlanIdSt.Merge(m, src)
}
func (m *VlanIdSt) XXX_Size() int {
	return xxx_messageInfo_VlanIdSt.Size(m)
}
func (m *VlanIdSt) XXX_DiscardUnknown() {
	xxx_messageInfo_VlanIdSt.DiscardUnknown(m)
}

var xxx_messageInfo_VlanIdSt proto.InternalMessageInfo

func (m *VlanIdSt) GetMin() uint32 {
	if m != nil {
		return m.Min
	}
	return 0
}

func (m *VlanIdSt) GetMax() uint32 {
	if m != nil {
		return m.Max
	}
	return 0
}

func (m *VlanIdSt) GetMask() uint32 {
	if m != nil {
		return m.Mask
	}
	return 0
}

type MacAddrSt struct {
	MacAddr              []uint32 `protobuf:"varint,1,rep,packed,name=mac_addr,json=macAddr,proto3" json:"mac_addr,omitempty"`
	Mask                 []uint32 `protobuf:"varint,2,rep,packed,name=mask,proto3" json:"mask,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MacAddrSt) Reset()         { *m = MacAddrSt{} }
func (m *MacAddrSt) String() string { return proto.CompactTextString(m) }
func (*MacAddrSt) ProtoMessage()    {}
func (*MacAddrSt) Descriptor() ([]byte, []int) {
	return fileDescriptor_cbfc8aa7cdcd476a, []int{8}
}

func (m *MacAddrSt) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MacAddrSt.Unmarshal(m, b)
}
func (m *MacAddrSt) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MacAddrSt.Marshal(b, m, deterministic)
}
func (m *MacAddrSt) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MacAddrSt.Merge(m, src)
}
func (m *MacAddrSt) XXX_Size() int {
	return xxx_messageInfo_MacAddrSt.Size(m)
}
func (m *MacAddrSt) XXX_DiscardUnknown() {
	xxx_messageInfo_MacAddrSt.DiscardUnknown(m)
}

var xxx_messageInfo_MacAddrSt proto.InternalMessageInfo

func (m *MacAddrSt) GetMacAddr() []uint32 {
	if m != nil {
		return m.MacAddr
	}
	return nil
}

func (m *MacAddrSt) GetMask() []uint32 {
	if m != nil {
		return m.Mask
	}
	return nil
}

type MatchDomainSt struct {
	DomainName           string   `protobuf:"bytes,1,opt,name=domain_name,json=domainName,proto3" json:"domain_name,omitempty"`
	FormatName           string   `protobuf:"bytes,2,opt,name=format_name,json=formatName,proto3" json:"format_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MatchDomainSt) Reset()         { *m = MatchDomainSt{} }
func (m *MatchDomainSt) String() string { return proto.CompactTextString(m) }
func (*MatchDomainSt) ProtoMessage()    {}
func (*MatchDomainSt) Descriptor() ([]byte, []int) {
	return fileDescriptor_cbfc8aa7cdcd476a, []int{9}
}

func (m *MatchDomainSt) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MatchDomainSt.Unmarshal(m, b)
}
func (m *MatchDomainSt) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MatchDomainSt.Marshal(b, m, deterministic)
}
func (m *MatchDomainSt) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MatchDomainSt.Merge(m, src)
}
func (m *MatchDomainSt) XXX_Size() int {
	return xxx_messageInfo_MatchDomainSt.Size(m)
}
func (m *MatchDomainSt) XXX_DiscardUnknown() {
	xxx_messageInfo_MatchDomainSt.DiscardUnknown(m)
}

var xxx_messageInfo_MatchDomainSt proto.InternalMessageInfo

func (m *MatchDomainSt) GetDomainName() string {
	if m != nil {
		return m.DomainName
	}
	return ""
}

func (m *MatchDomainSt) GetFormatName() string {
	if m != nil {
		return m.FormatName
	}
	return ""
}

type MatchNasPortSt struct {
	SubId                string   `protobuf:"bytes,1,opt,name=sub_id,json=subId,proto3" json:"sub_id,omitempty"`
	Operator             string   `protobuf:"bytes,2,opt,name=operator,proto3" json:"operator,omitempty"`
	Value                uint32   `protobuf:"varint,3,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MatchNasPortSt) Reset()         { *m = MatchNasPortSt{} }
func (m *MatchNasPortSt) String() string { return proto.CompactTextString(m) }
func (*MatchNasPortSt) ProtoMessage()    {}
func (*MatchNasPortSt) Descriptor() ([]byte, []int) {
	return fileDescriptor_cbfc8aa7cdcd476a, []int{10}
}

func (m *MatchNasPortSt) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MatchNasPortSt.Unmarshal(m, b)
}
func (m *MatchNasPortSt) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MatchNasPortSt.Marshal(b, m, deterministic)
}
func (m *MatchNasPortSt) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MatchNasPortSt.Merge(m, src)
}
func (m *MatchNasPortSt) XXX_Size() int {
	return xxx_messageInfo_MatchNasPortSt.Size(m)
}
func (m *MatchNasPortSt) XXX_DiscardUnknown() {
	xxx_messageInfo_MatchNasPortSt.DiscardUnknown(m)
}

var xxx_messageInfo_MatchNasPortSt proto.InternalMessageInfo

func (m *MatchNasPortSt) GetSubId() string {
	if m != nil {
		return m.SubId
	}
	return ""
}

func (m *MatchNasPortSt) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

func (m *MatchNasPortSt) GetValue() uint32 {
	if m != nil {
		return m.Value
	}
	return 0
}

type MatchIpv4St struct {
	Prefix               string   `protobuf:"bytes,1,opt,name=prefix,proto3" json:"prefix,omitempty"`
	Mask                 string   `protobuf:"bytes,2,opt,name=mask,proto3" json:"mask,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MatchIpv4St) Reset()         { *m = MatchIpv4St{} }
func (m *MatchIpv4St) String() string { return proto.CompactTextString(m) }
func (*MatchIpv4St) ProtoMessage()    {}
func (*MatchIpv4St) Descriptor() ([]byte, []int) {
	return fileDescriptor_cbfc8aa7cdcd476a, []int{11}
}

func (m *MatchIpv4St) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MatchIpv4St.Unmarshal(m, b)
}
func (m *MatchIpv4St) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MatchIpv4St.Marshal(b, m, deterministic)
}
func (m *MatchIpv4St) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MatchIpv4St.Merge(m, src)
}
func (m *MatchIpv4St) XXX_Size() int {
	return xxx_messageInfo_MatchIpv4St.Size(m)
}
func (m *MatchIpv4St) XXX_DiscardUnknown() {
	xxx_messageInfo_MatchIpv4St.DiscardUnknown(m)
}

var xxx_messageInfo_MatchIpv4St proto.InternalMessageInfo

func (m *MatchIpv4St) GetPrefix() string {
	if m != nil {
		return m.Prefix
	}
	return ""
}

func (m *MatchIpv4St) GetMask() string {
	if m != nil {
		return m.Mask
	}
	return ""
}

type MatchIpv6St struct {
	Prefix               string   `protobuf:"bytes,1,opt,name=prefix,proto3" json:"prefix,omitempty"`
	Mask                 uint32   `protobuf:"varint,2,opt,name=mask,proto3" json:"mask,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MatchIpv6St) Reset()         { *m = MatchIpv6St{} }
func (m *MatchIpv6St) String() string { return proto.CompactTextString(m) }
func (*MatchIpv6St) ProtoMessage()    {}
func (*MatchIpv6St) Descriptor() ([]byte, []int) {
	return fileDescriptor_cbfc8aa7cdcd476a, []int{12}
}

func (m *MatchIpv6St) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MatchIpv6St.Unmarshal(m, b)
}
func (m *MatchIpv6St) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MatchIpv6St.Marshal(b, m, deterministic)
}
func (m *MatchIpv6St) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MatchIpv6St.Merge(m, src)
}
func (m *MatchIpv6St) XXX_Size() int {
	return xxx_messageInfo_MatchIpv6St.Size(m)
}
func (m *MatchIpv6St) XXX_DiscardUnknown() {
	xxx_messageInfo_MatchIpv6St.DiscardUnknown(m)
}

var xxx_messageInfo_MatchIpv6St proto.InternalMessageInfo

func (m *MatchIpv6St) GetPrefix() string {
	if m != nil {
		return m.Prefix
	}
	return ""
}

func (m *MatchIpv6St) GetMask() uint32 {
	if m != nil {
		return m.Mask
	}
	return 0
}

type FlowKeyArray struct {
	Keys                 []uint32 `protobuf:"varint,1,rep,packed,name=keys,proto3" json:"keys,omitempty"`
	Num                  uint32   `protobuf:"varint,2,opt,name=num,proto3" json:"num,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FlowKeyArray) Reset()         { *m = FlowKeyArray{} }
func (m *FlowKeyArray) String() string { return proto.CompactTextString(m) }
func (*FlowKeyArray) ProtoMessage()    {}
func (*FlowKeyArray) Descriptor() ([]byte, []int) {
	return fileDescriptor_cbfc8aa7cdcd476a, []int{13}
}

func (m *FlowKeyArray) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FlowKeyArray.Unmarshal(m, b)
}
func (m *FlowKeyArray) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FlowKeyArray.Marshal(b, m, deterministic)
}
func (m *FlowKeyArray) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FlowKeyArray.Merge(m, src)
}
func (m *FlowKeyArray) XXX_Size() int {
	return xxx_messageInfo_FlowKeyArray.Size(m)
}
func (m *FlowKeyArray) XXX_DiscardUnknown() {
	xxx_messageInfo_FlowKeyArray.DiscardUnknown(m)
}

var xxx_messageInfo_FlowKeyArray proto.InternalMessageInfo

func (m *FlowKeyArray) GetKeys() []uint32 {
	if m != nil {
		return m.Keys
	}
	return nil
}

func (m *FlowKeyArray) GetNum() uint32 {
	if m != nil {
		return m.Num
	}
	return 0
}

type FlowKeySt struct {
	FlowKeys             *FlowKeyArray `protobuf:"bytes,1,opt,name=flow_keys,json=flowKeys,proto3" json:"flow_keys,omitempty"`
	MaxCount             uint32        `protobuf:"varint,2,opt,name=max_count,json=maxCount,proto3" json:"max_count,omitempty"`
	IdleTimeout          uint32        `protobuf:"varint,3,opt,name=idle_timeout,json=idleTimeout,proto3" json:"idle_timeout,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *FlowKeySt) Reset()         { *m = FlowKeySt{} }
func (m *FlowKeySt) String() string { return proto.CompactTextString(m) }
func (*FlowKeySt) ProtoMessage()    {}
func (*FlowKeySt) Descriptor() ([]byte, []int) {
	return fileDescriptor_cbfc8aa7cdcd476a, []int{14}
}

func (m *FlowKeySt) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FlowKeySt.Unmarshal(m, b)
}
func (m *FlowKeySt) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FlowKeySt.Marshal(b, m, deterministic)
}
func (m *FlowKeySt) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FlowKeySt.Merge(m, src)
}
func (m *FlowKeySt) XXX_Size() int {
	return xxx_messageInfo_FlowKeySt.Size(m)
}
func (m *FlowKeySt) XXX_DiscardUnknown() {
	xxx_messageInfo_FlowKeySt.DiscardUnknown(m)
}

var xxx_messageInfo_FlowKeySt proto.InternalMessageInfo

func (m *FlowKeySt) GetFlowKeys() *FlowKeyArray {
	if m != nil {
		return m.FlowKeys
	}
	return nil
}

func (m *FlowKeySt) GetMaxCount() uint32 {
	if m != nil {
		return m.MaxCount
	}
	return 0
}

func (m *FlowKeySt) GetIdleTimeout() uint32 {
	if m != nil {
		return m.IdleTimeout
	}
	return 0
}

type MatchDhcpClientIdSt struct {
	Flags                uint32   `protobuf:"varint,1,opt,name=flags,proto3" json:"flags,omitempty"`
	Val                  string   `protobuf:"bytes,2,opt,name=val,proto3" json:"val,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MatchDhcpClientIdSt) Reset()         { *m = MatchDhcpClientIdSt{} }
func (m *MatchDhcpClientIdSt) String() string { return proto.CompactTextString(m) }
func (*MatchDhcpClientIdSt) ProtoMessage()    {}
func (*MatchDhcpClientIdSt) Descriptor() ([]byte, []int) {
	return fileDescriptor_cbfc8aa7cdcd476a, []int{15}
}

func (m *MatchDhcpClientIdSt) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MatchDhcpClientIdSt.Unmarshal(m, b)
}
func (m *MatchDhcpClientIdSt) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MatchDhcpClientIdSt.Marshal(b, m, deterministic)
}
func (m *MatchDhcpClientIdSt) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MatchDhcpClientIdSt.Merge(m, src)
}
func (m *MatchDhcpClientIdSt) XXX_Size() int {
	return xxx_messageInfo_MatchDhcpClientIdSt.Size(m)
}
func (m *MatchDhcpClientIdSt) XXX_DiscardUnknown() {
	xxx_messageInfo_MatchDhcpClientIdSt.DiscardUnknown(m)
}

var xxx_messageInfo_MatchDhcpClientIdSt proto.InternalMessageInfo

func (m *MatchDhcpClientIdSt) GetFlags() uint32 {
	if m != nil {
		return m.Flags
	}
	return 0
}

func (m *MatchDhcpClientIdSt) GetVal() string {
	if m != nil {
		return m.Val
	}
	return ""
}

type ClassMatchDataUn struct {
	Type                 string                 `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Ipv4Dscp             []*Uint8RngSt          `protobuf:"bytes,2,rep,name=ipv4_dscp,json=ipv4Dscp,proto3" json:"ipv4_dscp,omitempty"`
	Ipv6Dscp             []*Uint8RngSt          `protobuf:"bytes,3,rep,name=ipv6_dscp,json=ipv6Dscp,proto3" json:"ipv6_dscp,omitempty"`
	Dscp                 []*Uint8RngSt          `protobuf:"bytes,4,rep,name=dscp,proto3" json:"dscp,omitempty"`
	Ipv4Prec             []uint32               `protobuf:"varint,5,rep,packed,name=ipv4_prec,json=ipv4Prec,proto3" json:"ipv4_prec,omitempty"`
	Ipv6Prec             []uint32               `protobuf:"varint,6,rep,packed,name=ipv6_prec,json=ipv6Prec,proto3" json:"ipv6_prec,omitempty"`
	Prec                 []uint32               `protobuf:"varint,7,rep,packed,name=prec,proto3" json:"prec,omitempty"`
	DiscardClass         []uint32               `protobuf:"varint,8,rep,packed,name=discard_class,json=discardClass,proto3" json:"discard_class,omitempty"`
	QosGroup             []*Uint16RngSt         `protobuf:"bytes,9,rep,name=qos_group,json=qosGroup,proto3" json:"qos_group,omitempty"`
	TrafficClass         []*Uint8RngSt          `protobuf:"bytes,10,rep,name=traffic_class,json=trafficClass,proto3" json:"traffic_class,omitempty"`
	Proto                []*Uint16RngSt         `protobuf:"bytes,11,rep,name=proto,proto3" json:"proto,omitempty"`
	IcmpV4               *ProtoIcmpSt           `protobuf:"bytes,12,opt,name=icmp_v4,json=icmpV4,proto3" json:"icmp_v4,omitempty"`
	IcmpV6               *ProtoIcmpSt           `protobuf:"bytes,13,opt,name=icmp_v6,json=icmpV6,proto3" json:"icmp_v6,omitempty"`
	Ipv4PacketLen        []*Uint16RngSt         `protobuf:"bytes,14,rep,name=ipv4_packet_len,json=ipv4PacketLen,proto3" json:"ipv4_packet_len,omitempty"`
	Ipv6PacketLen        []*Uint16RngSt         `protobuf:"bytes,15,rep,name=ipv6_packet_len,json=ipv6PacketLen,proto3" json:"ipv6_packet_len,omitempty"`
	PacketLen            []*Uint16RngSt         `protobuf:"bytes,16,rep,name=packet_len,json=packetLen,proto3" json:"packet_len,omitempty"`
	FlowTag              []*Uint8RngSt          `protobuf:"bytes,17,rep,name=flow_tag,json=flowTag,proto3" json:"flow_tag,omitempty"`
	TcpFlag              *TcpFlagSt             `protobuf:"bytes,18,opt,name=tcp_flag,json=tcpFlag,proto3" json:"tcp_flag,omitempty"`
	Icmpv4Type           []*Uint8RngSt          `protobuf:"bytes,19,rep,name=icmpv4_type,json=icmpv4Type,proto3" json:"icmpv4_type,omitempty"`
	Icmpv4Code           []*Uint8RngSt          `protobuf:"bytes,20,rep,name=icmpv4_code,json=icmpv4Code,proto3" json:"icmpv4_code,omitempty"`
	Icmpv6Type           []*Uint8RngSt          `protobuf:"bytes,21,rep,name=icmpv6_type,json=icmpv6Type,proto3" json:"icmpv6_type,omitempty"`
	Icmpv6Code           []*Uint8RngSt          `protobuf:"bytes,22,rep,name=icmpv6_code,json=icmpv6Code,proto3" json:"icmpv6_code,omitempty"`
	MplsExp              []uint32               `protobuf:"varint,23,rep,packed,name=mpls_exp,json=mplsExp,proto3" json:"mpls_exp,omitempty"`
	MplsExpImp           []uint32               `protobuf:"varint,24,rep,packed,name=mpls_exp_imp,json=mplsExpImp,proto3" json:"mpls_exp_imp,omitempty"`
	MplsDispIpv4Acl      []string               `protobuf:"bytes,25,rep,name=mpls_disp_ipv4_acl,json=mplsDispIpv4Acl,proto3" json:"mpls_disp_ipv4_acl,omitempty"`
	MplsDispIpv6Acl      []string               `protobuf:"bytes,26,rep,name=mpls_disp_ipv6_acl,json=mplsDispIpv6Acl,proto3" json:"mpls_disp_ipv6_acl,omitempty"`
	MplsTopEos           uint32                 `protobuf:"varint,27,opt,name=mpls_top_eos,json=mplsTopEos,proto3" json:"mpls_top_eos,omitempty"`
	MplsTopLabel         []*Uint32RngSt         `protobuf:"bytes,28,rep,name=mpls_top_label,json=mplsTopLabel,proto3" json:"mpls_top_label,omitempty"`
	Cos                  []uint32               `protobuf:"varint,29,rep,packed,name=cos,proto3" json:"cos,omitempty"`
	CosInr               []uint32               `protobuf:"varint,30,rep,packed,name=cos_inr,json=cosInr,proto3" json:"cos_inr,omitempty"`
	Dei                  *DeiBitSt              `protobuf:"bytes,31,opt,name=dei,proto3" json:"dei,omitempty"`
	DeiInr               *DeiBitSt              `protobuf:"bytes,32,opt,name=dei_inr,json=deiInr,proto3" json:"dei_inr,omitempty"`
	Vlan                 []*VlanIdSt            `protobuf:"bytes,33,rep,name=vlan,proto3" json:"vlan,omitempty"`
	VlanInr              []*Uint16RngSt         `protobuf:"bytes,34,rep,name=vlan_inr,json=vlanInr,proto3" json:"vlan_inr,omitempty"`
	FrDlci               []*Uint16RngSt         `protobuf:"bytes,35,rep,name=fr_dlci,json=frDlci,proto3" json:"fr_dlci,omitempty"`
	SrcMac               *MacAddrSt             `protobuf:"bytes,36,opt,name=src_mac,json=srcMac,proto3" json:"src_mac,omitempty"`
	DstMac               *MacAddrSt             `protobuf:"bytes,37,opt,name=dst_mac,json=dstMac,proto3" json:"dst_mac,omitempty"`
	AtmClp               []uint32               `protobuf:"varint,38,rep,packed,name=atm_clp,json=atmClp,proto3" json:"atm_clp,omitempty"`
	FrDe                 []uint32               `protobuf:"varint,39,rep,packed,name=fr_de,json=frDe,proto3" json:"fr_de,omitempty"`
	FragmentType         uint32                 `protobuf:"varint,40,opt,name=fragment_type,json=fragmentType,proto3" json:"fragment_type,omitempty"`
	Ipv4Acl              []string               `protobuf:"bytes,41,rep,name=ipv4_acl,json=ipv4Acl,proto3" json:"ipv4_acl,omitempty"`
	Ipv6Acl              []string               `protobuf:"bytes,42,rep,name=ipv6_acl,json=ipv6Acl,proto3" json:"ipv6_acl,omitempty"`
	EtherServiceAcl      []string               `protobuf:"bytes,43,rep,name=ether_service_acl,json=etherServiceAcl,proto3" json:"ether_service_acl,omitempty"`
	AvailId              []uint32               `protobuf:"varint,44,rep,packed,name=avail_id,json=availId,proto3" json:"avail_id,omitempty"`
	AuthenStatus         string                 `protobuf:"bytes,45,opt,name=authen_status,json=authenStatus,proto3" json:"authen_status,omitempty"`
	MediaType            []uint32               `protobuf:"varint,46,rep,packed,name=media_type,json=mediaType,proto3" json:"media_type,omitempty"`
	MlpNegotiated        string                 `protobuf:"bytes,47,opt,name=mlp_negotiated,json=mlpNegotiated,proto3" json:"mlp_negotiated,omitempty"`
	SubsProtocol         []uint32               `protobuf:"varint,48,rep,packed,name=subs_protocol,json=subsProtocol,proto3" json:"subs_protocol,omitempty"`
	Dnis                 []string               `protobuf:"bytes,49,rep,name=dnis,proto3" json:"dnis,omitempty"`
	DnisRegex            []string               `protobuf:"bytes,50,rep,name=dnis_regex,json=dnisRegex,proto3" json:"dnis_regex,omitempty"`
	Domain               []*MatchDomainSt       `protobuf:"bytes,51,rep,name=domain,proto3" json:"domain,omitempty"`
	DomainRegex          []*MatchDomainSt       `protobuf:"bytes,52,rep,name=domain_regex,json=domainRegex,proto3" json:"domain_regex,omitempty"`
	NasPort              []*MatchNasPortSt      `protobuf:"bytes,53,rep,name=nas_port,json=nasPort,proto3" json:"nas_port,omitempty"`
	ServiceName          []string               `protobuf:"bytes,54,rep,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	ServiceNameRegex     []string               `protobuf:"bytes,55,rep,name=service_name_regex,json=serviceNameRegex,proto3" json:"service_name_regex,omitempty"`
	SrcAddrIpv4          []*MatchIpv4St         `protobuf:"bytes,56,rep,name=src_addr_ipv4,json=srcAddrIpv4,proto3" json:"src_addr_ipv4,omitempty"`
	DstAddrIpv4          []*MatchIpv4St         `protobuf:"bytes,57,rep,name=dst_addr_ipv4,json=dstAddrIpv4,proto3" json:"dst_addr_ipv4,omitempty"`
	SrcAddrIpv6          []*MatchIpv6St         `protobuf:"bytes,58,rep,name=src_addr_ipv6,json=srcAddrIpv6,proto3" json:"src_addr_ipv6,omitempty"`
	DstAddrIpv6          []*MatchIpv6St         `protobuf:"bytes,59,rep,name=dst_addr_ipv6,json=dstAddrIpv6,proto3" json:"dst_addr_ipv6,omitempty"`
	SrcAddrMac           []*MacAddrSt           `protobuf:"bytes,60,rep,name=src_addr_mac,json=srcAddrMac,proto3" json:"src_addr_mac,omitempty"`
	Timer                []string               `protobuf:"bytes,61,rep,name=timer,proto3" json:"timer,omitempty"`
	TimerRegexp          []string               `protobuf:"bytes,62,rep,name=timer_regexp,json=timerRegexp,proto3" json:"timer_regexp,omitempty"`
	TunnelName           []string               `protobuf:"bytes,63,rep,name=tunnel_name,json=tunnelName,proto3" json:"tunnel_name,omitempty"`
	TunnelNameRegex      []string               `protobuf:"bytes,64,rep,name=tunnel_name_regex,json=tunnelNameRegex,proto3" json:"tunnel_name_regex,omitempty"`
	UserName             []string               `protobuf:"bytes,65,rep,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	UserNameRegex        []string               `protobuf:"bytes,66,rep,name=user_name_regex,json=userNameRegex,proto3" json:"user_name_regex,omitempty"`
	AuthUsername         []string               `protobuf:"bytes,67,rep,name=auth_username,json=authUsername,proto3" json:"auth_username,omitempty"`
	AuthUsernameRegex    []string               `protobuf:"bytes,68,rep,name=auth_username_regex,json=authUsernameRegex,proto3" json:"auth_username_regex,omitempty"`
	UnauthUsername       []string               `protobuf:"bytes,69,rep,name=unauth_username,json=unauthUsername,proto3" json:"unauth_username,omitempty"`
	UnauthUsernameRegex  []string               `protobuf:"bytes,70,rep,name=unauth_username_regex,json=unauthUsernameRegex,proto3" json:"unauth_username_regex,omitempty"`
	AuthDomain           []string               `protobuf:"bytes,71,rep,name=auth_domain,json=authDomain,proto3" json:"auth_domain,omitempty"`
	AuthDomainRegex      []string               `protobuf:"bytes,72,rep,name=auth_domain_regex,json=authDomainRegex,proto3" json:"auth_domain_regex,omitempty"`
	UnauthDomain         []string               `protobuf:"bytes,73,rep,name=unauth_domain,json=unauthDomain,proto3" json:"unauth_domain,omitempty"`
	UnauthDomainRegex    []string               `protobuf:"bytes,74,rep,name=unauth_domain_regex,json=unauthDomainRegex,proto3" json:"unauth_domain_regex,omitempty"`
	VendorId             []string               `protobuf:"bytes,75,rep,name=vendor_id,json=vendorId,proto3" json:"vendor_id,omitempty"`
	VendorIdRegex        []string               `protobuf:"bytes,76,rep,name=vendor_id_regex,json=vendorIdRegex,proto3" json:"vendor_id_regex,omitempty"`
	AccessInterface      []string               `protobuf:"bytes,77,rep,name=access_interface,json=accessInterface,proto3" json:"access_interface,omitempty"`
	InputInterface       []string               `protobuf:"bytes,78,rep,name=input_interface,json=inputInterface,proto3" json:"input_interface,omitempty"`
	InputIntfhdl         []uint64               `protobuf:"varint,79,rep,packed,name=input_intfhdl,json=inputIntfhdl,proto3" json:"input_intfhdl,omitempty"`
	Ethertype            []*Uint16RngSt         `protobuf:"bytes,80,rep,name=ethertype,proto3" json:"ethertype,omitempty"`
	FlowKeyData          *FlowKeySt             `protobuf:"bytes,81,opt,name=flow_key_data,json=flowKeyData,proto3" json:"flow_key_data,omitempty"`
	DhcpClientId         []*MatchDhcpClientIdSt `protobuf:"bytes,82,rep,name=dhcp_client_id,json=dhcpClientId,proto3" json:"dhcp_client_id,omitempty"`
	DhcpClientIdRegexp   []*MatchDhcpClientIdSt `protobuf:"bytes,83,rep,name=dhcp_client_id_regexp,json=dhcpClientIdRegexp,proto3" json:"dhcp_client_id_regexp,omitempty"`
	CircuitId            []string               `protobuf:"bytes,84,rep,name=circuit_id,json=circuitId,proto3" json:"circuit_id,omitempty"`
	CircuitIdRegex       []string               `protobuf:"bytes,85,rep,name=circuit_id_regex,json=circuitIdRegex,proto3" json:"circuit_id_regex,omitempty"`
	RemoteId             []string               `protobuf:"bytes,86,rep,name=remote_id,json=remoteId,proto3" json:"remote_id,omitempty"`
	RemoteIdRegex        []string               `protobuf:"bytes,87,rep,name=remote_id_regex,json=remoteIdRegex,proto3" json:"remote_id_regex,omitempty"`
	SrcPort              []*Uint16RngSt         `protobuf:"bytes,88,rep,name=src_port,json=srcPort,proto3" json:"src_port,omitempty"`
	DstPort              []*Uint16RngSt         `protobuf:"bytes,89,rep,name=dst_port,json=dstPort,proto3" json:"dst_port,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *ClassMatchDataUn) Reset()         { *m = ClassMatchDataUn{} }
func (m *ClassMatchDataUn) String() string { return proto.CompactTextString(m) }
func (*ClassMatchDataUn) ProtoMessage()    {}
func (*ClassMatchDataUn) Descriptor() ([]byte, []int) {
	return fileDescriptor_cbfc8aa7cdcd476a, []int{16}
}

func (m *ClassMatchDataUn) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClassMatchDataUn.Unmarshal(m, b)
}
func (m *ClassMatchDataUn) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClassMatchDataUn.Marshal(b, m, deterministic)
}
func (m *ClassMatchDataUn) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClassMatchDataUn.Merge(m, src)
}
func (m *ClassMatchDataUn) XXX_Size() int {
	return xxx_messageInfo_ClassMatchDataUn.Size(m)
}
func (m *ClassMatchDataUn) XXX_DiscardUnknown() {
	xxx_messageInfo_ClassMatchDataUn.DiscardUnknown(m)
}

var xxx_messageInfo_ClassMatchDataUn proto.InternalMessageInfo

func (m *ClassMatchDataUn) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *ClassMatchDataUn) GetIpv4Dscp() []*Uint8RngSt {
	if m != nil {
		return m.Ipv4Dscp
	}
	return nil
}

func (m *ClassMatchDataUn) GetIpv6Dscp() []*Uint8RngSt {
	if m != nil {
		return m.Ipv6Dscp
	}
	return nil
}

func (m *ClassMatchDataUn) GetDscp() []*Uint8RngSt {
	if m != nil {
		return m.Dscp
	}
	return nil
}

func (m *ClassMatchDataUn) GetIpv4Prec() []uint32 {
	if m != nil {
		return m.Ipv4Prec
	}
	return nil
}

func (m *ClassMatchDataUn) GetIpv6Prec() []uint32 {
	if m != nil {
		return m.Ipv6Prec
	}
	return nil
}

func (m *ClassMatchDataUn) GetPrec() []uint32 {
	if m != nil {
		return m.Prec
	}
	return nil
}

func (m *ClassMatchDataUn) GetDiscardClass() []uint32 {
	if m != nil {
		return m.DiscardClass
	}
	return nil
}

func (m *ClassMatchDataUn) GetQosGroup() []*Uint16RngSt {
	if m != nil {
		return m.QosGroup
	}
	return nil
}

func (m *ClassMatchDataUn) GetTrafficClass() []*Uint8RngSt {
	if m != nil {
		return m.TrafficClass
	}
	return nil
}

func (m *ClassMatchDataUn) GetProto() []*Uint16RngSt {
	if m != nil {
		return m.Proto
	}
	return nil
}

func (m *ClassMatchDataUn) GetIcmpV4() *ProtoIcmpSt {
	if m != nil {
		return m.IcmpV4
	}
	return nil
}

func (m *ClassMatchDataUn) GetIcmpV6() *ProtoIcmpSt {
	if m != nil {
		return m.IcmpV6
	}
	return nil
}

func (m *ClassMatchDataUn) GetIpv4PacketLen() []*Uint16RngSt {
	if m != nil {
		return m.Ipv4PacketLen
	}
	return nil
}

func (m *ClassMatchDataUn) GetIpv6PacketLen() []*Uint16RngSt {
	if m != nil {
		return m.Ipv6PacketLen
	}
	return nil
}

func (m *ClassMatchDataUn) GetPacketLen() []*Uint16RngSt {
	if m != nil {
		return m.PacketLen
	}
	return nil
}

func (m *ClassMatchDataUn) GetFlowTag() []*Uint8RngSt {
	if m != nil {
		return m.FlowTag
	}
	return nil
}

func (m *ClassMatchDataUn) GetTcpFlag() *TcpFlagSt {
	if m != nil {
		return m.TcpFlag
	}
	return nil
}

func (m *ClassMatchDataUn) GetIcmpv4Type() []*Uint8RngSt {
	if m != nil {
		return m.Icmpv4Type
	}
	return nil
}

func (m *ClassMatchDataUn) GetIcmpv4Code() []*Uint8RngSt {
	if m != nil {
		return m.Icmpv4Code
	}
	return nil
}

func (m *ClassMatchDataUn) GetIcmpv6Type() []*Uint8RngSt {
	if m != nil {
		return m.Icmpv6Type
	}
	return nil
}

func (m *ClassMatchDataUn) GetIcmpv6Code() []*Uint8RngSt {
	if m != nil {
		return m.Icmpv6Code
	}
	return nil
}

func (m *ClassMatchDataUn) GetMplsExp() []uint32 {
	if m != nil {
		return m.MplsExp
	}
	return nil
}

func (m *ClassMatchDataUn) GetMplsExpImp() []uint32 {
	if m != nil {
		return m.MplsExpImp
	}
	return nil
}

func (m *ClassMatchDataUn) GetMplsDispIpv4Acl() []string {
	if m != nil {
		return m.MplsDispIpv4Acl
	}
	return nil
}

func (m *ClassMatchDataUn) GetMplsDispIpv6Acl() []string {
	if m != nil {
		return m.MplsDispIpv6Acl
	}
	return nil
}

func (m *ClassMatchDataUn) GetMplsTopEos() uint32 {
	if m != nil {
		return m.MplsTopEos
	}
	return 0
}

func (m *ClassMatchDataUn) GetMplsTopLabel() []*Uint32RngSt {
	if m != nil {
		return m.MplsTopLabel
	}
	return nil
}

func (m *ClassMatchDataUn) GetCos() []uint32 {
	if m != nil {
		return m.Cos
	}
	return nil
}

func (m *ClassMatchDataUn) GetCosInr() []uint32 {
	if m != nil {
		return m.CosInr
	}
	return nil
}

func (m *ClassMatchDataUn) GetDei() *DeiBitSt {
	if m != nil {
		return m.Dei
	}
	return nil
}

func (m *ClassMatchDataUn) GetDeiInr() *DeiBitSt {
	if m != nil {
		return m.DeiInr
	}
	return nil
}

func (m *ClassMatchDataUn) GetVlan() []*VlanIdSt {
	if m != nil {
		return m.Vlan
	}
	return nil
}

func (m *ClassMatchDataUn) GetVlanInr() []*Uint16RngSt {
	if m != nil {
		return m.VlanInr
	}
	return nil
}

func (m *ClassMatchDataUn) GetFrDlci() []*Uint16RngSt {
	if m != nil {
		return m.FrDlci
	}
	return nil
}

func (m *ClassMatchDataUn) GetSrcMac() *MacAddrSt {
	if m != nil {
		return m.SrcMac
	}
	return nil
}

func (m *ClassMatchDataUn) GetDstMac() *MacAddrSt {
	if m != nil {
		return m.DstMac
	}
	return nil
}

func (m *ClassMatchDataUn) GetAtmClp() []uint32 {
	if m != nil {
		return m.AtmClp
	}
	return nil
}

func (m *ClassMatchDataUn) GetFrDe() []uint32 {
	if m != nil {
		return m.FrDe
	}
	return nil
}

func (m *ClassMatchDataUn) GetFragmentType() uint32 {
	if m != nil {
		return m.FragmentType
	}
	return 0
}

func (m *ClassMatchDataUn) GetIpv4Acl() []string {
	if m != nil {
		return m.Ipv4Acl
	}
	return nil
}

func (m *ClassMatchDataUn) GetIpv6Acl() []string {
	if m != nil {
		return m.Ipv6Acl
	}
	return nil
}

func (m *ClassMatchDataUn) GetEtherServiceAcl() []string {
	if m != nil {
		return m.EtherServiceAcl
	}
	return nil
}

func (m *ClassMatchDataUn) GetAvailId() []uint32 {
	if m != nil {
		return m.AvailId
	}
	return nil
}

func (m *ClassMatchDataUn) GetAuthenStatus() string {
	if m != nil {
		return m.AuthenStatus
	}
	return ""
}

func (m *ClassMatchDataUn) GetMediaType() []uint32 {
	if m != nil {
		return m.MediaType
	}
	return nil
}

func (m *ClassMatchDataUn) GetMlpNegotiated() string {
	if m != nil {
		return m.MlpNegotiated
	}
	return ""
}

func (m *ClassMatchDataUn) GetSubsProtocol() []uint32 {
	if m != nil {
		return m.SubsProtocol
	}
	return nil
}

func (m *ClassMatchDataUn) GetDnis() []string {
	if m != nil {
		return m.Dnis
	}
	return nil
}

func (m *ClassMatchDataUn) GetDnisRegex() []string {
	if m != nil {
		return m.DnisRegex
	}
	return nil
}

func (m *ClassMatchDataUn) GetDomain() []*MatchDomainSt {
	if m != nil {
		return m.Domain
	}
	return nil
}

func (m *ClassMatchDataUn) GetDomainRegex() []*MatchDomainSt {
	if m != nil {
		return m.DomainRegex
	}
	return nil
}

func (m *ClassMatchDataUn) GetNasPort() []*MatchNasPortSt {
	if m != nil {
		return m.NasPort
	}
	return nil
}

func (m *ClassMatchDataUn) GetServiceName() []string {
	if m != nil {
		return m.ServiceName
	}
	return nil
}

func (m *ClassMatchDataUn) GetServiceNameRegex() []string {
	if m != nil {
		return m.ServiceNameRegex
	}
	return nil
}

func (m *ClassMatchDataUn) GetSrcAddrIpv4() []*MatchIpv4St {
	if m != nil {
		return m.SrcAddrIpv4
	}
	return nil
}

func (m *ClassMatchDataUn) GetDstAddrIpv4() []*MatchIpv4St {
	if m != nil {
		return m.DstAddrIpv4
	}
	return nil
}

func (m *ClassMatchDataUn) GetSrcAddrIpv6() []*MatchIpv6St {
	if m != nil {
		return m.SrcAddrIpv6
	}
	return nil
}

func (m *ClassMatchDataUn) GetDstAddrIpv6() []*MatchIpv6St {
	if m != nil {
		return m.DstAddrIpv6
	}
	return nil
}

func (m *ClassMatchDataUn) GetSrcAddrMac() []*MacAddrSt {
	if m != nil {
		return m.SrcAddrMac
	}
	return nil
}

func (m *ClassMatchDataUn) GetTimer() []string {
	if m != nil {
		return m.Timer
	}
	return nil
}

func (m *ClassMatchDataUn) GetTimerRegexp() []string {
	if m != nil {
		return m.TimerRegexp
	}
	return nil
}

func (m *ClassMatchDataUn) GetTunnelName() []string {
	if m != nil {
		return m.TunnelName
	}
	return nil
}

func (m *ClassMatchDataUn) GetTunnelNameRegex() []string {
	if m != nil {
		return m.TunnelNameRegex
	}
	return nil
}

func (m *ClassMatchDataUn) GetUserName() []string {
	if m != nil {
		return m.UserName
	}
	return nil
}

func (m *ClassMatchDataUn) GetUserNameRegex() []string {
	if m != nil {
		return m.UserNameRegex
	}
	return nil
}

func (m *ClassMatchDataUn) GetAuthUsername() []string {
	if m != nil {
		return m.AuthUsername
	}
	return nil
}

func (m *ClassMatchDataUn) GetAuthUsernameRegex() []string {
	if m != nil {
		return m.AuthUsernameRegex
	}
	return nil
}

func (m *ClassMatchDataUn) GetUnauthUsername() []string {
	if m != nil {
		return m.UnauthUsername
	}
	return nil
}

func (m *ClassMatchDataUn) GetUnauthUsernameRegex() []string {
	if m != nil {
		return m.UnauthUsernameRegex
	}
	return nil
}

func (m *ClassMatchDataUn) GetAuthDomain() []string {
	if m != nil {
		return m.AuthDomain
	}
	return nil
}

func (m *ClassMatchDataUn) GetAuthDomainRegex() []string {
	if m != nil {
		return m.AuthDomainRegex
	}
	return nil
}

func (m *ClassMatchDataUn) GetUnauthDomain() []string {
	if m != nil {
		return m.UnauthDomain
	}
	return nil
}

func (m *ClassMatchDataUn) GetUnauthDomainRegex() []string {
	if m != nil {
		return m.UnauthDomainRegex
	}
	return nil
}

func (m *ClassMatchDataUn) GetVendorId() []string {
	if m != nil {
		return m.VendorId
	}
	return nil
}

func (m *ClassMatchDataUn) GetVendorIdRegex() []string {
	if m != nil {
		return m.VendorIdRegex
	}
	return nil
}

func (m *ClassMatchDataUn) GetAccessInterface() []string {
	if m != nil {
		return m.AccessInterface
	}
	return nil
}

func (m *ClassMatchDataUn) GetInputInterface() []string {
	if m != nil {
		return m.InputInterface
	}
	return nil
}

func (m *ClassMatchDataUn) GetInputIntfhdl() []uint64 {
	if m != nil {
		return m.InputIntfhdl
	}
	return nil
}

func (m *ClassMatchDataUn) GetEthertype() []*Uint16RngSt {
	if m != nil {
		return m.Ethertype
	}
	return nil
}

func (m *ClassMatchDataUn) GetFlowKeyData() *FlowKeySt {
	if m != nil {
		return m.FlowKeyData
	}
	return nil
}

func (m *ClassMatchDataUn) GetDhcpClientId() []*MatchDhcpClientIdSt {
	if m != nil {
		return m.DhcpClientId
	}
	return nil
}

func (m *ClassMatchDataUn) GetDhcpClientIdRegexp() []*MatchDhcpClientIdSt {
	if m != nil {
		return m.DhcpClientIdRegexp
	}
	return nil
}

func (m *ClassMatchDataUn) GetCircuitId() []string {
	if m != nil {
		return m.CircuitId
	}
	return nil
}

func (m *ClassMatchDataUn) GetCircuitIdRegex() []string {
	if m != nil {
		return m.CircuitIdRegex
	}
	return nil
}

func (m *ClassMatchDataUn) GetRemoteId() []string {
	if m != nil {
		return m.RemoteId
	}
	return nil
}

func (m *ClassMatchDataUn) GetRemoteIdRegex() []string {
	if m != nil {
		return m.RemoteIdRegex
	}
	return nil
}

func (m *ClassMatchDataUn) GetSrcPort() []*Uint16RngSt {
	if m != nil {
		return m.SrcPort
	}
	return nil
}

func (m *ClassMatchDataUn) GetDstPort() []*Uint16RngSt {
	if m != nil {
		return m.DstPort
	}
	return nil
}

type ClassMatchInfoStItem struct {
	MatchData            *ClassMatchDataUn `protobuf:"bytes,1,opt,name=match_data,json=matchData,proto3" json:"match_data,omitempty"`
	Flags                uint32            `protobuf:"varint,2,opt,name=flags,proto3" json:"flags,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ClassMatchInfoStItem) Reset()         { *m = ClassMatchInfoStItem{} }
func (m *ClassMatchInfoStItem) String() string { return proto.CompactTextString(m) }
func (*ClassMatchInfoStItem) ProtoMessage()    {}
func (*ClassMatchInfoStItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_cbfc8aa7cdcd476a, []int{17}
}

func (m *ClassMatchInfoStItem) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClassMatchInfoStItem.Unmarshal(m, b)
}
func (m *ClassMatchInfoStItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClassMatchInfoStItem.Marshal(b, m, deterministic)
}
func (m *ClassMatchInfoStItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClassMatchInfoStItem.Merge(m, src)
}
func (m *ClassMatchInfoStItem) XXX_Size() int {
	return xxx_messageInfo_ClassMatchInfoStItem.Size(m)
}
func (m *ClassMatchInfoStItem) XXX_DiscardUnknown() {
	xxx_messageInfo_ClassMatchInfoStItem.DiscardUnknown(m)
}

var xxx_messageInfo_ClassMatchInfoStItem proto.InternalMessageInfo

func (m *ClassMatchInfoStItem) GetMatchData() *ClassMatchDataUn {
	if m != nil {
		return m.MatchData
	}
	return nil
}

func (m *ClassMatchInfoStItem) GetFlags() uint32 {
	if m != nil {
		return m.Flags
	}
	return 0
}

type ClassMatchInfoStEntry struct {
	ClassMatchInfoSt     []*ClassMatchInfoStItem `protobuf:"bytes,1,rep,name=class_match_info_st,json=classMatchInfoSt,proto3" json:"class_match_info_st,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *ClassMatchInfoStEntry) Reset()         { *m = ClassMatchInfoStEntry{} }
func (m *ClassMatchInfoStEntry) String() string { return proto.CompactTextString(m) }
func (*ClassMatchInfoStEntry) ProtoMessage()    {}
func (*ClassMatchInfoStEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_cbfc8aa7cdcd476a, []int{18}
}

func (m *ClassMatchInfoStEntry) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClassMatchInfoStEntry.Unmarshal(m, b)
}
func (m *ClassMatchInfoStEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClassMatchInfoStEntry.Marshal(b, m, deterministic)
}
func (m *ClassMatchInfoStEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClassMatchInfoStEntry.Merge(m, src)
}
func (m *ClassMatchInfoStEntry) XXX_Size() int {
	return xxx_messageInfo_ClassMatchInfoStEntry.Size(m)
}
func (m *ClassMatchInfoStEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_ClassMatchInfoStEntry.DiscardUnknown(m)
}

var xxx_messageInfo_ClassMatchInfoStEntry proto.InternalMessageInfo

func (m *ClassMatchInfoStEntry) GetClassMatchInfoSt() []*ClassMatchInfoStItem {
	if m != nil {
		return m.ClassMatchInfoSt
	}
	return nil
}

type ClassMapBgItem struct {
	Magic                uint32                 `protobuf:"varint,1,opt,name=magic,proto3" json:"magic,omitempty"`
	Name                 string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Type                 string                 `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	Mode                 string                 `protobuf:"bytes,4,opt,name=mode,proto3" json:"mode,omitempty"`
	Flags                uint32                 `protobuf:"varint,5,opt,name=flags,proto3" json:"flags,omitempty"`
	MatchCount           uint32                 `protobuf:"varint,6,opt,name=match_count,json=matchCount,proto3" json:"match_count,omitempty"`
	MatchInfop           *ClassMatchInfoStEntry `protobuf:"bytes,7,opt,name=match_infop,json=matchInfop,proto3" json:"match_infop,omitempty"`
	ChkSum               []uint32               `protobuf:"varint,8,rep,packed,name=chk_sum,json=chkSum,proto3" json:"chk_sum,omitempty"`
	Description          string                 `protobuf:"bytes,9,opt,name=description,proto3" json:"description,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *ClassMapBgItem) Reset()         { *m = ClassMapBgItem{} }
func (m *ClassMapBgItem) String() string { return proto.CompactTextString(m) }
func (*ClassMapBgItem) ProtoMessage()    {}
func (*ClassMapBgItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_cbfc8aa7cdcd476a, []int{19}
}

func (m *ClassMapBgItem) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClassMapBgItem.Unmarshal(m, b)
}
func (m *ClassMapBgItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClassMapBgItem.Marshal(b, m, deterministic)
}
func (m *ClassMapBgItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClassMapBgItem.Merge(m, src)
}
func (m *ClassMapBgItem) XXX_Size() int {
	return xxx_messageInfo_ClassMapBgItem.Size(m)
}
func (m *ClassMapBgItem) XXX_DiscardUnknown() {
	xxx_messageInfo_ClassMapBgItem.DiscardUnknown(m)
}

var xxx_messageInfo_ClassMapBgItem proto.InternalMessageInfo

func (m *ClassMapBgItem) GetMagic() uint32 {
	if m != nil {
		return m.Magic
	}
	return 0
}

func (m *ClassMapBgItem) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ClassMapBgItem) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *ClassMapBgItem) GetMode() string {
	if m != nil {
		return m.Mode
	}
	return ""
}

func (m *ClassMapBgItem) GetFlags() uint32 {
	if m != nil {
		return m.Flags
	}
	return 0
}

func (m *ClassMapBgItem) GetMatchCount() uint32 {
	if m != nil {
		return m.MatchCount
	}
	return 0
}

func (m *ClassMapBgItem) GetMatchInfop() *ClassMatchInfoStEntry {
	if m != nil {
		return m.MatchInfop
	}
	return nil
}

func (m *ClassMapBgItem) GetChkSum() []uint32 {
	if m != nil {
		return m.ChkSum
	}
	return nil
}

func (m *ClassMapBgItem) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type ClassMapBgEntry struct {
	ClassMapBg           []*ClassMapBgItem `protobuf:"bytes,50,rep,name=class_map_bg,json=classMapBg,proto3" json:"class_map_bg,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ClassMapBgEntry) Reset()         { *m = ClassMapBgEntry{} }
func (m *ClassMapBgEntry) String() string { return proto.CompactTextString(m) }
func (*ClassMapBgEntry) ProtoMessage()    {}
func (*ClassMapBgEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_cbfc8aa7cdcd476a, []int{20}
}

func (m *ClassMapBgEntry) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClassMapBgEntry.Unmarshal(m, b)
}
func (m *ClassMapBgEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClassMapBgEntry.Marshal(b, m, deterministic)
}
func (m *ClassMapBgEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClassMapBgEntry.Merge(m, src)
}
func (m *ClassMapBgEntry) XXX_Size() int {
	return xxx_messageInfo_ClassMapBgEntry.Size(m)
}
func (m *ClassMapBgEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_ClassMapBgEntry.DiscardUnknown(m)
}

var xxx_messageInfo_ClassMapBgEntry proto.InternalMessageInfo

func (m *ClassMapBgEntry) GetClassMapBg() []*ClassMapBgItem {
	if m != nil {
		return m.ClassMapBg
	}
	return nil
}

func init() {
	proto.RegisterType((*ClassMapBgEntry_KEYS)(nil), "cisco_ios_xr_infra_policymgr_oper.policy_manager.nodes.node.class_map.class_map_types.class_map_type.class_maps.class_map.class_map_bg_entry_KEYS")
	proto.RegisterType((*Uint8RngSt)(nil), "cisco_ios_xr_infra_policymgr_oper.policy_manager.nodes.node.class_map.class_map_types.class_map_type.class_maps.class_map.uint8_rng_st")
	proto.RegisterType((*Uint16RngSt)(nil), "cisco_ios_xr_infra_policymgr_oper.policy_manager.nodes.node.class_map.class_map_types.class_map_type.class_maps.class_map.uint16_rng_st")
	proto.RegisterType((*ProtoIcmpSt)(nil), "cisco_ios_xr_infra_policymgr_oper.policy_manager.nodes.node.class_map.class_map_types.class_map_type.class_maps.class_map.proto_icmp_st")
	proto.RegisterType((*TcpFlagSt)(nil), "cisco_ios_xr_infra_policymgr_oper.policy_manager.nodes.node.class_map.class_map_types.class_map_type.class_maps.class_map.tcp_flag_st")
	proto.RegisterType((*Uint32RngSt)(nil), "cisco_ios_xr_infra_policymgr_oper.policy_manager.nodes.node.class_map.class_map_types.class_map_type.class_maps.class_map.uint32_rng_st")
	proto.RegisterType((*DeiBitSt)(nil), "cisco_ios_xr_infra_policymgr_oper.policy_manager.nodes.node.class_map.class_map_types.class_map_type.class_maps.class_map.dei_bit_st")
	proto.RegisterType((*VlanIdSt)(nil), "cisco_ios_xr_infra_policymgr_oper.policy_manager.nodes.node.class_map.class_map_types.class_map_type.class_maps.class_map.vlan_id_st")
	proto.RegisterType((*MacAddrSt)(nil), "cisco_ios_xr_infra_policymgr_oper.policy_manager.nodes.node.class_map.class_map_types.class_map_type.class_maps.class_map.mac_addr_st")
	proto.RegisterType((*MatchDomainSt)(nil), "cisco_ios_xr_infra_policymgr_oper.policy_manager.nodes.node.class_map.class_map_types.class_map_type.class_maps.class_map.match_domain_st")
	proto.RegisterType((*MatchNasPortSt)(nil), "cisco_ios_xr_infra_policymgr_oper.policy_manager.nodes.node.class_map.class_map_types.class_map_type.class_maps.class_map.match_nas_port_st")
	proto.RegisterType((*MatchIpv4St)(nil), "cisco_ios_xr_infra_policymgr_oper.policy_manager.nodes.node.class_map.class_map_types.class_map_type.class_maps.class_map.match_ipv4_st")
	proto.RegisterType((*MatchIpv6St)(nil), "cisco_ios_xr_infra_policymgr_oper.policy_manager.nodes.node.class_map.class_map_types.class_map_type.class_maps.class_map.match_ipv6_st")
	proto.RegisterType((*FlowKeyArray)(nil), "cisco_ios_xr_infra_policymgr_oper.policy_manager.nodes.node.class_map.class_map_types.class_map_type.class_maps.class_map.flow_key_array")
	proto.RegisterType((*FlowKeySt)(nil), "cisco_ios_xr_infra_policymgr_oper.policy_manager.nodes.node.class_map.class_map_types.class_map_type.class_maps.class_map.flow_key_st")
	proto.RegisterType((*MatchDhcpClientIdSt)(nil), "cisco_ios_xr_infra_policymgr_oper.policy_manager.nodes.node.class_map.class_map_types.class_map_type.class_maps.class_map.match_dhcp_client_id_st")
	proto.RegisterType((*ClassMatchDataUn)(nil), "cisco_ios_xr_infra_policymgr_oper.policy_manager.nodes.node.class_map.class_map_types.class_map_type.class_maps.class_map.class_match_data_un")
	proto.RegisterType((*ClassMatchInfoStItem)(nil), "cisco_ios_xr_infra_policymgr_oper.policy_manager.nodes.node.class_map.class_map_types.class_map_type.class_maps.class_map.class_match_info_st_item")
	proto.RegisterType((*ClassMatchInfoStEntry)(nil), "cisco_ios_xr_infra_policymgr_oper.policy_manager.nodes.node.class_map.class_map_types.class_map_type.class_maps.class_map.class_match_info_st_entry")
	proto.RegisterType((*ClassMapBgItem)(nil), "cisco_ios_xr_infra_policymgr_oper.policy_manager.nodes.node.class_map.class_map_types.class_map_type.class_maps.class_map.class_map_bg_item")
	proto.RegisterType((*ClassMapBgEntry)(nil), "cisco_ios_xr_infra_policymgr_oper.policy_manager.nodes.node.class_map.class_map_types.class_map_type.class_maps.class_map.class_map_bg_entry")
}

func init() { proto.RegisterFile("class_map_bg_entry.proto", fileDescriptor_cbfc8aa7cdcd476a) }

var fileDescriptor_cbfc8aa7cdcd476a = []byte{
	// 2327 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x5a, 0x5b, 0x6f, 0x24, 0x47,
	0x15, 0x56, 0xc7, 0xf6, 0x5c, 0xce, 0xcc, 0xf8, 0xd2, 0xde, 0xcd, 0xd6, 0x66, 0x09, 0x76, 0x26,
	0x37, 0xef, 0x26, 0x18, 0xe2, 0x35, 0x93, 0x40, 0x02, 0xc4, 0xb1, 0x37, 0xc1, 0xec, 0x85, 0xa5,
	0xbd, 0x59, 0x88, 0x84, 0x54, 0x2a, 0x77, 0xd7, 0x8c, 0x5b, 0xee, 0x5b, 0xba, 0x6a, 0x06, 0xfb,
	0x07, 0x70, 0x15, 0x42, 0x08, 0x78, 0x40, 0x08, 0x09, 0x04, 0x01, 0x82, 0x50, 0x88, 0x78, 0x41,
	0xe2, 0x19, 0x29, 0xe2, 0x6f, 0xf0, 0x2b, 0x78, 0x45, 0xe7, 0x54, 0x75, 0x4f, 0xcf, 0x3a, 0x0f,
	0xc9, 0xd3, 0xf4, 0x8b, 0x5d, 0xf5, 0xd5, 0xa9, 0xd3, 0xdf, 0x39, 0x55, 0xa7, 0x6e, 0x73, 0x80,
	0xf9, 0x91, 0x50, 0x8a, 0xc7, 0x22, 0xe3, 0xc7, 0x23, 0x2e, 0x13, 0x9d, 0x9f, 0x6f, 0x67, 0x79,
	0xaa, 0x53, 0xf7, 0xdc, 0x0f, 0x95, 0x9f, 0xf2, 0x30, 0x55, 0xfc, 0x2c, 0xe7, 0x61, 0x32, 0xcc,
	0x05, 0xcf, 0xd2, 0x28, 0xf4, 0xcf, 0xe3, 0x51, 0xce, 0xd3, 0x4c, 0xe6, 0xdb, 0xa6, 0xca, 0x63,
	0x91, 0x88, 0x91, 0xcc, 0xb7, 0x93, 0x34, 0x90, 0x8a, 0xfe, 0x6e, 0x97, 0x5a, 0xa7, 0x25, 0xae,
	0xcf, 0x33, 0xa9, 0x1e, 0xa9, 0x4f, 0xab, 0x95, 0x96, 0x7e, 0x06, 0x57, 0x2e, 0xd2, 0xe2, 0xb7,
	0x6f, 0xbd, 0x73, 0xe4, 0x5e, 0x83, 0x36, 0x7e, 0x80, 0x27, 0x22, 0x96, 0xcc, 0xd9, 0x74, 0xb6,
	0xda, 0x5e, 0x0b, 0x81, 0x7b, 0x22, 0x96, 0xae, 0x0b, 0x8b, 0xa8, 0x94, 0x3d, 0x46, 0x38, 0x95,
	0xdd, 0x67, 0x60, 0x79, 0xaa, 0x8b, 0x7a, 0x2d, 0x50, 0x6b, 0x97, 0xd0, 0xbb, 0x22, 0xc3, 0x9e,
	0xfd, 0x1d, 0xe8, 0x8e, 0xc3, 0x44, 0xbf, 0xc2, 0xf3, 0x64, 0xc4, 0x95, 0x76, 0x57, 0x61, 0x21,
	0x0e, 0x13, 0xfa, 0x40, 0xcf, 0xc3, 0x22, 0x21, 0xe2, 0x8c, 0x54, 0x23, 0x22, 0xce, 0xfa, 0x37,
	0xa1, 0x87, 0x7d, 0x5e, 0x1a, 0x7c, 0x9a, 0x4e, 0x2f, 0x43, 0x8f, 0xdc, 0xcb, 0x43, 0x3f, 0xce,
	0xb0, 0x53, 0xc1, 0xd9, 0xf4, 0x32, 0x9c, 0x5d, 0x58, 0xf4, 0xd3, 0x40, 0xda, 0x7e, 0x54, 0xee,
	0xbf, 0x0e, 0x1d, 0xed, 0x67, 0x7c, 0x18, 0x09, 0xfa, 0xd6, 0x25, 0x58, 0x9a, 0x88, 0x68, 0x5c,
	0xf4, 0x33, 0x15, 0xf4, 0x4e, 0x2c, 0xb4, 0x7f, 0xc2, 0x45, 0x72, 0x4e, 0xbd, 0x5b, 0x5e, 0x8b,
	0x80, 0xbd, 0xe4, 0xbc, 0xe0, 0x7b, 0x73, 0xe7, 0xd3, 0xf0, 0xbd, 0x0e, 0x10, 0xc8, 0x90, 0x1f,
	0x87, 0x1a, 0x7b, 0x5c, 0x83, 0x36, 0x96, 0xaa, 0x5f, 0x6e, 0x1d, 0x87, 0xfa, 0x21, 0xd6, 0xfb,
	0x07, 0x00, 0x93, 0x48, 0x24, 0x3c, 0x0c, 0x3e, 0xa1, 0x72, 0xb4, 0x33, 0x16, 0xea, 0x94, 0x46,
	0xa4, 0xe7, 0x51, 0xb9, 0xff, 0x1a, 0x74, 0x62, 0xe1, 0x73, 0x11, 0x04, 0x39, 0xaa, 0xb9, 0x0a,
	0xad, 0xa2, 0xca, 0x9c, 0xcd, 0x85, 0xad, 0x9e, 0xd7, 0x8c, 0x85, 0xbf, 0x17, 0x04, 0x79, 0xd9,
	0xfb, 0x31, 0x82, 0x4d, 0xef, 0x23, 0x58, 0x31, 0x0e, 0x08, 0xd2, 0x58, 0x84, 0x09, 0x6a, 0xd8,
	0x80, 0x8e, 0xad, 0x54, 0xe6, 0x0c, 0x18, 0x88, 0x66, 0xcd, 0x06, 0x74, 0x86, 0x69, 0x1e, 0x0b,
	0x6d, 0x04, 0xcc, 0xe4, 0x01, 0x03, 0xd1, 0xe4, 0xf8, 0x2e, 0xac, 0x19, 0xa5, 0x89, 0x50, 0x3c,
	0x4b, 0x73, 0x72, 0xc5, 0x65, 0x68, 0xa8, 0xf1, 0x31, 0x0f, 0x03, 0xab, 0x71, 0x49, 0x8d, 0x8f,
	0x0f, 0x03, 0xf7, 0x09, 0x68, 0x61, 0x68, 0x08, 0x9d, 0xe6, 0x56, 0x53, 0x59, 0x9f, 0x8e, 0xd9,
	0x42, 0x65, 0xcc, 0xfa, 0xaf, 0x42, 0xcf, 0x68, 0x0f, 0xb3, 0xc9, 0x2e, 0x6a, 0x7e, 0x1c, 0x1a,
	0x59, 0x2e, 0x87, 0xe1, 0x99, 0xd5, 0x6c, 0x6b, 0x15, 0x7b, 0x69, 0x76, 0x93, 0xbd, 0xd5, 0xce,
	0x83, 0x4f, 0xda, 0xb9, 0x70, 0xd6, 0x00, 0x96, 0x87, 0x51, 0xfa, 0x3d, 0x7e, 0x2a, 0xcf, 0xb9,
	0xc8, 0x73, 0x71, 0x8e, 0x52, 0xa7, 0xf2, 0x5c, 0x59, 0x4f, 0x53, 0x19, 0x87, 0x2d, 0x19, 0xc7,
	0xc5, 0xb0, 0x25, 0xe3, 0xb8, 0xff, 0x3f, 0x07, 0x3a, 0x65, 0x47, 0xa5, 0xdd, 0xbf, 0x38, 0xd0,
	0x2e, 0xea, 0x8a, 0xbe, 0xdb, 0xd9, 0xf9, 0xb1, 0xb3, 0x3d, 0xb7, 0xf5, 0x63, 0x7b, 0xd6, 0x2a,
	0xaf, 0x85, 0xf5, 0xdb, 0x68, 0x0b, 0xc5, 0xc7, 0x19, 0xf7, 0xd3, 0x71, 0xa2, 0xad, 0x45, 0xad,
	0x58, 0x9c, 0xed, 0x63, 0xdd, 0x7d, 0x0a, 0xba, 0x61, 0x10, 0x49, 0xae, 0xc3, 0x58, 0xa6, 0x63,
	0x6d, 0x47, 0xa9, 0x83, 0xd8, 0x03, 0x03, 0xf5, 0xf7, 0xe0, 0x8a, 0x9d, 0x5e, 0x27, 0x7e, 0xc6,
	0xfd, 0x28, 0x94, 0x89, 0xb6, 0xf3, 0xfd, 0x12, 0x2c, 0x61, 0x6c, 0xaa, 0x22, 0x20, 0xa9, 0x82,
	0xce, 0x9b, 0x88, 0xc8, 0x0e, 0x19, 0x16, 0xfb, 0xff, 0xd9, 0x83, 0xf5, 0x82, 0x29, 0x69, 0x12,
	0x5a, 0xf0, 0x71, 0x32, 0xb3, 0x0e, 0x14, 0x6b, 0xd7, 0x9f, 0x1c, 0x68, 0xd3, 0xac, 0x08, 0x94,
	0x9f, 0xd1, 0x3c, 0xef, 0xec, 0xfc, 0x70, 0x9e, 0x8e, 0xad, 0xae, 0x91, 0x5e, 0x0b, 0xa9, 0x1d,
	0x28, 0x3f, 0x2b, 0x78, 0x0e, 0x0c, 0xcf, 0x85, 0x1a, 0xf2, 0x1c, 0x10, 0xcf, 0xdf, 0x3a, 0xb0,
	0x48, 0x14, 0x17, 0x6b, 0x46, 0x91, 0x58, 0xe1, 0xec, 0xa4, 0xd1, 0xce, 0x72, 0xe9, 0xb3, 0x25,
	0x0a, 0x41, 0xf2, 0xf1, 0xfd, 0x5c, 0xfa, 0xb6, 0x71, 0x60, 0x1a, 0x1b, 0x65, 0xe3, 0x80, 0x1a,
	0x5d, 0x58, 0x24, 0xbc, 0x69, 0xe2, 0x16, 0xcb, 0xee, 0xd3, 0xd0, 0x0b, 0x42, 0xe5, 0x8b, 0x3c,
	0xe0, 0xf4, 0x55, 0xd6, 0xa2, 0xc6, 0xae, 0x05, 0xf7, 0x11, 0x73, 0xff, 0xec, 0x40, 0xfb, 0xdd,
	0x54, 0xf1, 0x51, 0x9e, 0x8e, 0x33, 0xd6, 0x26, 0xb7, 0xfc, 0x68, 0xde, 0x6e, 0x29, 0x77, 0x54,
	0xaf, 0xf5, 0x6e, 0xaa, 0xde, 0x42, 0x6a, 0xee, 0x07, 0x0e, 0xf4, 0x74, 0x2e, 0x86, 0xc3, 0xd0,
	0xb7, 0xe6, 0x40, 0xcd, 0xc6, 0xb0, 0x6b, 0xe9, 0x19, 0xc7, 0xfe, 0xce, 0x81, 0x25, 0xda, 0xe8,
	0x59, 0xa7, 0x6e, 0x4e, 0x35, 0xbc, 0xdc, 0x3f, 0x38, 0xd0, 0xa4, 0x43, 0xc8, 0x64, 0x97, 0x75,
	0x69, 0xcd, 0x9e, 0x2b, 0xc7, 0x99, 0x53, 0x91, 0xd7, 0xc0, 0xc2, 0xc3, 0xdd, 0x0a, 0xc9, 0x01,
	0xeb, 0xd5, 0x93, 0xe4, 0xc0, 0xfd, 0x87, 0x03, 0x2b, 0x26, 0x70, 0x85, 0x7f, 0x2a, 0x35, 0x8f,
	0x64, 0xc2, 0x96, 0xeb, 0x36, 0xea, 0x3d, 0x5a, 0x49, 0x88, 0xe0, 0x1d, 0x99, 0x14, 0x9c, 0x07,
	0x55, 0xce, 0x2b, 0x75, 0xe4, 0x3c, 0x98, 0x72, 0x7e, 0xdf, 0x01, 0xa8, 0xd0, 0x5d, 0xad, 0x1b,
	0xdd, 0x76, 0x56, 0x52, 0xfd, 0xa3, 0x03, 0x74, 0xea, 0xe0, 0x5a, 0x8c, 0xd8, 0x5a, 0xcd, 0x56,
	0xaa, 0x26, 0x32, 0x7b, 0x20, 0x46, 0x18, 0x5d, 0xad, 0xe2, 0x52, 0xc1, 0x5c, 0x0a, 0xaf, 0x1f,
	0xcc, 0x93, 0x65, 0xe5, 0x82, 0xe3, 0x35, 0xb5, 0x9f, 0xbd, 0x19, 0x89, 0x91, 0xfb, 0x57, 0x07,
	0x3a, 0x18, 0x68, 0x93, 0x5d, 0xea, 0xc9, 0xd6, 0x6b, 0xe6, 0x4d, 0x30, 0xe4, 0x1e, 0xe0, 0x81,
	0xad, 0xc2, 0x95, 0x2e, 0x70, 0x97, 0xea, 0xc9, 0x75, 0x3f, 0x0d, 0x2a, 0x5c, 0x07, 0xc6, 0xaf,
	0x97, 0x6b, 0xc9, 0x75, 0x30, 0xeb, 0xd7, 0x81, 0xf1, 0xeb, 0xe3, 0xf5, 0xe4, 0x4a, 0x7e, 0xc5,
	0x1b, 0x6b, 0x16, 0x29, 0x2e, 0xcf, 0x32, 0x76, 0xc5, 0xde, 0x58, 0xb3, 0x48, 0xdd, 0x3a, 0xcb,
	0xdc, 0x4d, 0xe8, 0x16, 0x4d, 0x3c, 0x8c, 0x33, 0xc6, 0xa8, 0x19, 0x6c, 0xf3, 0x61, 0x9c, 0xb9,
	0x2f, 0x80, 0x4b, 0x12, 0x41, 0xa8, 0x32, 0x73, 0x21, 0x14, 0x7e, 0xc4, 0xae, 0x6e, 0x2e, 0x6c,
	0xb5, 0xbd, 0x15, 0x6c, 0x39, 0x08, 0x55, 0x76, 0x98, 0x4d, 0x76, 0xf7, 0xfc, 0xe8, 0x82, 0xf0,
	0x80, 0x84, 0x9f, 0xb8, 0x20, 0x3c, 0x40, 0xe1, 0xe2, 0xdb, 0x3a, 0xcd, 0xb8, 0x4c, 0x15, 0xbb,
	0x46, 0xd7, 0x14, 0xfa, 0xf6, 0x83, 0x34, 0xbb, 0x95, 0x2a, 0xf7, 0x43, 0x07, 0x96, 0x4b, 0x91,
	0x48, 0x1c, 0xcb, 0x88, 0x7d, 0xa6, 0x1e, 0x4b, 0x6c, 0xf9, 0x64, 0xe1, 0x75, 0x2d, 0xdf, 0x3b,
	0x48, 0x0f, 0x6f, 0x57, 0x7e, 0xaa, 0xd8, 0x93, 0xe4, 0x46, 0x2c, 0xba, 0x57, 0xa0, 0xe9, 0xa7,
	0x8a, 0x87, 0x49, 0xce, 0x3e, 0x4b, 0x68, 0xc3, 0x4f, 0xd5, 0x61, 0x92, 0xbb, 0xbf, 0x76, 0x60,
	0x21, 0x90, 0x21, 0xdb, 0xa0, 0x55, 0xee, 0xfb, 0xf3, 0xb4, 0x68, 0xfa, 0x9e, 0xe2, 0x21, 0x25,
	0x3c, 0x2a, 0x36, 0x11, 0x43, 0xd2, 0x9b, 0xb5, 0xa2, 0xd7, 0x08, 0x64, 0x88, 0xce, 0xfb, 0x8d,
	0x03, 0x8b, 0x93, 0x48, 0x24, 0xec, 0x29, 0x9a, 0x0f, 0x73, 0xa5, 0x37, 0x7d, 0x62, 0xf2, 0x88,
	0x93, 0xfb, 0x9e, 0x03, 0x2d, 0x03, 0x26, 0x39, 0xeb, 0xd7, 0xed, 0x4c, 0xd0, 0x44, 0x6a, 0xe8,
	0x43, 0x3c, 0xc9, 0x0e, 0x73, 0x1e, 0x44, 0x7e, 0xc8, 0x9e, 0xae, 0x1b, 0xcb, 0xc6, 0x30, 0x3f,
	0x88, 0xfc, 0xd0, 0xfd, 0xbd, 0x03, 0x4d, 0x95, 0xfb, 0x3c, 0x16, 0x3e, 0x7b, 0x66, 0xfe, 0xe7,
	0x81, 0xca, 0x43, 0xa0, 0xd7, 0x50, 0xb9, 0x7f, 0x57, 0xf8, 0x44, 0x31, 0x50, 0x9a, 0x28, 0x3e,
	0x5b, 0x33, 0x8a, 0x81, 0xd2, 0x48, 0xf1, 0x0a, 0x34, 0x85, 0x8e, 0xb9, 0x1f, 0x65, 0xec, 0x39,
	0xb3, 0x08, 0x09, 0x1d, 0xef, 0x47, 0x99, 0xbb, 0x0e, 0x4b, 0x38, 0x05, 0x24, 0x7b, 0xde, 0xdc,
	0xd3, 0x87, 0xf9, 0x81, 0xc4, 0x7b, 0xfa, 0x30, 0x17, 0xa3, 0x58, 0x26, 0xda, 0x6c, 0xc4, 0x5b,
	0xb4, 0x32, 0x77, 0x0b, 0x90, 0x36, 0xc0, 0xab, 0xd0, 0x2a, 0x77, 0x83, 0xeb, 0xb4, 0xc0, 0x37,
	0x43, 0xbb, 0x0b, 0x98, 0x26, 0xb3, 0xf6, 0xdf, 0x28, 0x9b, 0x68, 0xcd, 0xbf, 0x01, 0x6b, 0x52,
	0x9f, 0xc8, 0x9c, 0x2b, 0x99, 0x4f, 0x42, 0x5f, 0x92, 0xcc, 0x0b, 0x66, 0x7f, 0xa0, 0x86, 0x23,
	0x83, 0x5b, 0x35, 0x62, 0x22, 0xc2, 0x88, 0x87, 0x01, 0x7b, 0xd1, 0x6c, 0x5b, 0x54, 0x3f, 0x0c,
	0x90, 0xa1, 0x18, 0xeb, 0x13, 0x99, 0x70, 0xa5, 0x85, 0x1e, 0x2b, 0xf6, 0x39, 0xf3, 0x82, 0x6e,
	0xc0, 0x23, 0xc2, 0xdc, 0x27, 0x01, 0x62, 0x19, 0x84, 0xc2, 0xd8, 0xb0, 0x4d, 0x1a, 0xda, 0x84,
	0x90, 0x01, 0xcf, 0xc2, 0x72, 0x1c, 0x65, 0x3c, 0x91, 0xa3, 0x54, 0x87, 0x42, 0xcb, 0x80, 0x7d,
	0x9e, 0x94, 0xf4, 0xe2, 0x28, 0xbb, 0x57, 0x82, 0xf8, 0x29, 0x35, 0x3e, 0x56, 0x9c, 0x2e, 0x5a,
	0x7e, 0x1a, 0xb1, 0x2f, 0x98, 0x47, 0x0b, 0x04, 0xef, 0x5b, 0xcc, 0x75, 0x61, 0x31, 0x48, 0x42,
	0xc5, 0x5e, 0x22, 0x4b, 0xa8, 0x8c, 0x9f, 0xc7, 0xff, 0x3c, 0x97, 0x23, 0x79, 0xc6, 0x76, 0xa8,
	0xa5, 0x8d, 0x88, 0x87, 0x00, 0x9e, 0xc7, 0x1b, 0xe6, 0xc9, 0x97, 0xdd, 0xa4, 0xe0, 0xfb, 0xc9,
	0x7c, 0x27, 0xcd, 0xcc, 0x13, 0xb5, 0x67, 0xa9, 0xb9, 0x7f, 0x77, 0xa0, 0x6b, 0x51, 0x63, 0xc7,
	0x6e, 0xfd, 0xb8, 0xda, 0xc7, 0x74, 0xe3, 0xd6, 0xf7, 0x1d, 0x68, 0x15, 0x8f, 0xe2, 0xec, 0x8b,
	0x44, 0xf6, 0xa7, 0xf3, 0x27, 0x5b, 0x79, 0xa6, 0xf7, 0x9a, 0x89, 0x50, 0xf7, 0xd3, 0x9c, 0x5e,
	0x77, 0x8b, 0x28, 0xa0, 0x67, 0xfe, 0x01, 0x4d, 0x91, 0x8e, 0xc5, 0xe8, 0x87, 0x80, 0x17, 0xc1,
	0xad, 0x8a, 0xd8, 0x31, 0x78, 0x99, 0x04, 0x57, 0x2b, 0x82, 0xc6, 0xf6, 0x0f, 0x1c, 0xe8, 0xe1,
	0x5a, 0x49, 0xd1, 0x8f, 0xc1, 0xc8, 0x5e, 0x99, 0xff, 0xb2, 0x3e, 0xf3, 0x4b, 0x82, 0xd7, 0x51,
	0x39, 0xfd, 0x54, 0x82, 0x07, 0x46, 0xe2, 0x8b, 0x0b, 0xe7, 0x94, 0xef, 0x97, 0x6a, 0xc7, 0x37,
	0x50, 0x7a, 0x86, 0x6f, 0xd5, 0xbf, 0x03, 0xf6, 0xe5, 0x1a, 0xf1, 0x1d, 0x3c, 0xe2, 0xdf, 0xc1,
	0x05, 0xff, 0x0e, 0xd8, 0xab, 0xb5, 0xe3, 0x3b, 0xf5, 0xef, 0x00, 0xef, 0x54, 0xdd, 0xd2, 0xbf,
	0xb8, 0x9b, 0xbe, 0x46, 0x74, 0x6b, 0xb3, 0x9b, 0x82, 0x75, 0x2e, 0xee, 0xa8, 0x97, 0x60, 0x49,
	0x87, 0xb1, 0xcc, 0xd9, 0x57, 0x28, 0x18, 0x4d, 0x05, 0x43, 0x9a, 0x0a, 0x26, 0x50, 0x33, 0xf6,
	0x55, 0x13, 0xd2, 0x84, 0x51, 0x8c, 0x66, 0xee, 0x06, 0x74, 0xf4, 0x38, 0x49, 0x64, 0x64, 0x82,
	0xfe, 0x6b, 0x24, 0x01, 0x06, 0xa2, 0x98, 0xbf, 0x01, 0x6b, 0x15, 0x01, 0x1b, 0xf2, 0xaf, 0x9b,
	0x2d, 0x72, 0x2a, 0x66, 0x22, 0xfe, 0x1a, 0xb4, 0xc7, 0x4a, 0xe6, 0x46, 0xd5, 0x1e, 0xc9, 0xb4,
	0x10, 0x20, 0x45, 0xcf, 0xc1, 0x4a, 0xd9, 0x68, 0xd5, 0xbc, 0x41, 0x22, 0xbd, 0x42, 0xc4, 0x28,
	0xb1, 0x9b, 0x29, 0x47, 0x94, 0x14, 0xed, 0x93, 0x14, 0x6d, 0xa6, 0x6f, 0x5b, 0xcc, 0xdd, 0x86,
	0xf5, 0x19, 0x21, 0xab, 0xf0, 0x80, 0x44, 0xd7, 0xaa, 0xa2, 0x46, 0xe9, 0xf3, 0xb0, 0x32, 0x4e,
	0x66, 0xd5, 0xde, 0x22, 0xd9, 0x65, 0x03, 0x97, 0x8a, 0x77, 0xe0, 0xf2, 0x23, 0x82, 0x56, 0xf5,
	0x9b, 0x24, 0xbe, 0x3e, 0x2b, 0x6e, 0x94, 0x6f, 0x40, 0x87, 0x7a, 0xd8, 0xfd, 0xf3, 0x2d, 0xe3,
	0x43, 0x84, 0x0e, 0xcc, 0xb6, 0x75, 0x03, 0xd6, 0x2a, 0x02, 0x56, 0xe1, 0xd7, 0x8d, 0x0f, 0xa7,
	0x62, 0xa5, 0xf9, 0x96, 0x80, 0x55, 0x77, 0x68, 0xcc, 0x37, 0xa0, 0x55, 0xb8, 0x0d, 0xeb, 0x33,
	0x42, 0x56, 0xe5, 0x37, 0x8c, 0xf9, 0x55, 0xd1, 0x72, 0x60, 0x26, 0x32, 0x09, 0xd2, 0x1c, 0x0f,
	0x2f, 0xb7, 0xcd, 0xc0, 0x18, 0xe0, 0x30, 0xc0, 0x81, 0x29, 0x1b, 0xad, 0xa2, 0x3b, 0x66, 0x60,
	0x0a, 0x11, 0xa3, 0xe4, 0x3a, 0xac, 0x0a, 0xdf, 0x97, 0x0a, 0x6f, 0x8f, 0x5a, 0xe6, 0x43, 0xe1,
	0x4b, 0x76, 0xd7, 0x1a, 0x41, 0xf8, 0x61, 0x01, 0xa3, 0xbb, 0xc3, 0x24, 0x1b, 0xeb, 0x8a, 0xe4,
	0x3d, 0xe3, 0x6e, 0x82, 0xa7, 0x82, 0x4f, 0x43, 0xaf, 0x14, 0x1c, 0x9e, 0x04, 0x11, 0xfb, 0xe6,
	0xe6, 0xc2, 0xd6, 0xa2, 0xd7, 0x2d, 0xc4, 0x10, 0xa3, 0x9f, 0x4f, 0xe9, 0x34, 0x46, 0x27, 0xa7,
	0xfb, 0xb5, 0x7b, 0xd5, 0x2c, 0xb9, 0xb9, 0x7f, 0x73, 0xa0, 0x57, 0xfe, 0xb6, 0x1a, 0x08, 0x2d,
	0xd8, 0xb7, 0xe6, 0x7f, 0x02, 0xaf, 0xfc, 0x12, 0xed, 0x75, 0xec, 0x2f, 0xbd, 0x07, 0x42, 0x0b,
	0xf7, 0x5f, 0x0e, 0x2c, 0xcf, 0xfe, 0x4e, 0xcb, 0x3c, 0x72, 0xee, 0x2f, 0x6a, 0x70, 0x9e, 0x7a,
	0xf4, 0xf7, 0x63, 0xaf, 0x8b, 0xd0, 0x3e, 0x21, 0x87, 0x81, 0xfb, 0x91, 0x03, 0x97, 0x1f, 0x91,
	0xb1, 0x8b, 0xdc, 0x51, 0x7d, 0x4d, 0x70, 0xab, 0x26, 0xd8, 0x05, 0xf8, 0x49, 0x00, 0x3f, 0xcc,
	0xfd, 0x71, 0x48, 0xfe, 0x7f, 0x60, 0xce, 0xe5, 0x16, 0x39, 0x0c, 0xdc, 0x2d, 0x58, 0x9d, 0x36,
	0xdb, 0xe8, 0x7c, 0xdb, 0x84, 0x52, 0x29, 0x54, 0xc6, 0x78, 0x2e, 0xe3, 0x54, 0x4b, 0xd4, 0xf3,
	0xd0, 0xc4, 0xb8, 0x01, 0x4c, 0x8c, 0x97, 0x8d, 0x56, 0xcb, 0xb7, 0x4d, 0x8c, 0x17, 0x22, 0x46,
	0xc9, 0x7b, 0x0e, 0xb4, 0x70, 0xcf, 0xa3, 0xf3, 0xea, 0x77, 0x6a, 0xf7, 0x56, 0xa0, 0x72, 0x9f,
	0xce, 0xaa, 0x48, 0x13, 0x8f, 0x12, 0x44, 0xf3, 0x9d, 0xda, 0xd1, 0x0c, 0x94, 0x46, 0x9a, 0xfd,
	0xff, 0x3a, 0xd3, 0xf4, 0x31, 0x3a, 0x66, 0x24, 0xc3, 0x94, 0x2b, 0xcd, 0x43, 0x2d, 0x63, 0xbc,
	0xcb, 0xc0, 0x34, 0xc3, 0xc1, 0x66, 0x85, 0xfc, 0x6c, 0x9e, 0x56, 0x7c, 0x4c, 0xd6, 0x85, 0x67,
	0xd2, 0xa5, 0x68, 0xb9, 0x28, 0x13, 0x38, 0x1e, 0xab, 0x24, 0x70, 0xa0, 0x8d, 0x57, 0x3f, 0xce,
	0x46, 0x4a, 0x49, 0x73, 0xff, 0xed, 0xcc, 0x26, 0x73, 0xd8, 0x56, 0xca, 0x9f, 0xe9, 0xec, 0xfc,
	0xb2, 0x2e, 0xd6, 0x56, 0x07, 0xc6, 0x5b, 0xb5, 0x89, 0x6f, 0xda, 0x3f, 0x39, 0x4c, 0x86, 0xe9,
	0x91, 0xee, 0xff, 0x7c, 0x01, 0xd6, 0x66, 0xf2, 0xed, 0x68, 0x00, 0x2f, 0xc1, 0x52, 0x2c, 0x46,
	0xa1, 0x5f, 0x24, 0xb4, 0x50, 0x05, 0xef, 0xde, 0x95, 0x2c, 0x29, 0x2a, 0x97, 0xa9, 0x2b, 0x0b,
	0x95, 0xd4, 0x15, 0x17, 0x16, 0xe3, 0x34, 0x90, 0x6c, 0xd1, 0x26, 0x2b, 0xa5, 0x81, 0x9c, 0x7a,
	0x78, 0xa9, 0x9a, 0x22, 0xb3, 0x01, 0x1d, 0xc3, 0xd2, 0x64, 0xe5, 0x34, 0xec, 0xbb, 0x34, 0x42,
	0x26, 0x2f, 0xe7, 0x9f, 0x4e, 0x21, 0x81, 0x76, 0x64, 0xac, 0x49, 0x53, 0xe9, 0x57, 0x75, 0x73,
	0x2e, 0xcd, 0x08, 0x4b, 0x1c, 0x1d, 0x9b, 0xd1, 0x63, 0xf4, 0xc9, 0x29, 0x57, 0xe3, 0xd8, 0xe6,
	0x5e, 0x34, 0xfc, 0x93, 0xd3, 0xa3, 0x71, 0xec, 0x6e, 0x42, 0x27, 0x90, 0xca, 0xcf, 0xc3, 0x4c,
	0x87, 0x69, 0xc2, 0xda, 0xe4, 0xa3, 0x2a, 0xd4, 0xff, 0xc8, 0x01, 0xf7, 0x62, 0x0a, 0xa4, 0xfb,
	0xa1, 0x03, 0xdd, 0x2a, 0x4c, 0x0f, 0x1d, 0x73, 0xbe, 0x73, 0x5f, 0x98, 0x39, 0x1e, 0x14, 0xa9,
	0x95, 0x6f, 0x8c, 0x8e, 0x1b, 0xf4, 0x92, 0x73, 0xf3, 0xff, 0x01, 0x00, 0x00, 0xff, 0xff, 0x4f,
	0x71, 0x5d, 0x1b, 0x68, 0x2a, 0x00, 0x00,
}
