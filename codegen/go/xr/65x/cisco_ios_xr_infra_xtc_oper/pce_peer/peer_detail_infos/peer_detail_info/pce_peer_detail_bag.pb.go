/*
Copyright 2019 Cisco Systems

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pce_peer_detail_bag.proto

package cisco_ios_xr_infra_xtc_oper_pce_peer_peer_detail_infos_peer_detail_info

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type PcePeerDetailBag_KEYS struct {
	PeerAddress          string   `protobuf:"bytes,1,opt,name=peer_address,json=peerAddress,proto3" json:"peer_address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PcePeerDetailBag_KEYS) Reset()         { *m = PcePeerDetailBag_KEYS{} }
func (m *PcePeerDetailBag_KEYS) String() string { return proto.CompactTextString(m) }
func (*PcePeerDetailBag_KEYS) ProtoMessage()    {}
func (*PcePeerDetailBag_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f3afadee1dc9c91, []int{0}
}

func (m *PcePeerDetailBag_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PcePeerDetailBag_KEYS.Unmarshal(m, b)
}
func (m *PcePeerDetailBag_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PcePeerDetailBag_KEYS.Marshal(b, m, deterministic)
}
func (m *PcePeerDetailBag_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PcePeerDetailBag_KEYS.Merge(m, src)
}
func (m *PcePeerDetailBag_KEYS) XXX_Size() int {
	return xxx_messageInfo_PcePeerDetailBag_KEYS.Size(m)
}
func (m *PcePeerDetailBag_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_PcePeerDetailBag_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_PcePeerDetailBag_KEYS proto.InternalMessageInfo

func (m *PcePeerDetailBag_KEYS) GetPeerAddress() string {
	if m != nil {
		return m.PeerAddress
	}
	return ""
}

type PceIpAddrType struct {
	AfName               string   `protobuf:"bytes,1,opt,name=af_name,json=afName,proto3" json:"af_name,omitempty"`
	Ipv4                 string   `protobuf:"bytes,2,opt,name=ipv4,proto3" json:"ipv4,omitempty"`
	Ipv6                 string   `protobuf:"bytes,3,opt,name=ipv6,proto3" json:"ipv6,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PceIpAddrType) Reset()         { *m = PceIpAddrType{} }
func (m *PceIpAddrType) String() string { return proto.CompactTextString(m) }
func (*PceIpAddrType) ProtoMessage()    {}
func (*PceIpAddrType) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f3afadee1dc9c91, []int{1}
}

func (m *PceIpAddrType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PceIpAddrType.Unmarshal(m, b)
}
func (m *PceIpAddrType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PceIpAddrType.Marshal(b, m, deterministic)
}
func (m *PceIpAddrType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PceIpAddrType.Merge(m, src)
}
func (m *PceIpAddrType) XXX_Size() int {
	return xxx_messageInfo_PceIpAddrType.Size(m)
}
func (m *PceIpAddrType) XXX_DiscardUnknown() {
	xxx_messageInfo_PceIpAddrType.DiscardUnknown(m)
}

var xxx_messageInfo_PceIpAddrType proto.InternalMessageInfo

func (m *PceIpAddrType) GetAfName() string {
	if m != nil {
		return m.AfName
	}
	return ""
}

func (m *PceIpAddrType) GetIpv4() string {
	if m != nil {
		return m.Ipv4
	}
	return ""
}

func (m *PceIpAddrType) GetIpv6() string {
	if m != nil {
		return m.Ipv6
	}
	return ""
}

type PcePcepBag struct {
	PcepState                string   `protobuf:"bytes,1,opt,name=pcep_state,json=pcepState,proto3" json:"pcep_state,omitempty"`
	Stateful                 bool     `protobuf:"varint,2,opt,name=stateful,proto3" json:"stateful,omitempty"`
	CapabilityUpdate         bool     `protobuf:"varint,3,opt,name=capability_update,json=capabilityUpdate,proto3" json:"capability_update,omitempty"`
	CapabilityInstantiate    bool     `protobuf:"varint,4,opt,name=capability_instantiate,json=capabilityInstantiate,proto3" json:"capability_instantiate,omitempty"`
	CapabilitySegmentRouting bool     `protobuf:"varint,5,opt,name=capability_segment_routing,json=capabilitySegmentRouting,proto3" json:"capability_segment_routing,omitempty"`
	CapabilityTriggeredSync  bool     `protobuf:"varint,6,opt,name=capability_triggered_sync,json=capabilityTriggeredSync,proto3" json:"capability_triggered_sync,omitempty"`
	CapabilityDbVersion      bool     `protobuf:"varint,7,opt,name=capability_db_version,json=capabilityDbVersion,proto3" json:"capability_db_version,omitempty"`
	CapabilityDeltaSync      bool     `protobuf:"varint,8,opt,name=capability_delta_sync,json=capabilityDeltaSync,proto3" json:"capability_delta_sync,omitempty"`
	XXX_NoUnkeyedLiteral     struct{} `json:"-"`
	XXX_unrecognized         []byte   `json:"-"`
	XXX_sizecache            int32    `json:"-"`
}

func (m *PcePcepBag) Reset()         { *m = PcePcepBag{} }
func (m *PcePcepBag) String() string { return proto.CompactTextString(m) }
func (*PcePcepBag) ProtoMessage()    {}
func (*PcePcepBag) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f3afadee1dc9c91, []int{2}
}

func (m *PcePcepBag) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PcePcepBag.Unmarshal(m, b)
}
func (m *PcePcepBag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PcePcepBag.Marshal(b, m, deterministic)
}
func (m *PcePcepBag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PcePcepBag.Merge(m, src)
}
func (m *PcePcepBag) XXX_Size() int {
	return xxx_messageInfo_PcePcepBag.Size(m)
}
func (m *PcePcepBag) XXX_DiscardUnknown() {
	xxx_messageInfo_PcePcepBag.DiscardUnknown(m)
}

var xxx_messageInfo_PcePcepBag proto.InternalMessageInfo

func (m *PcePcepBag) GetPcepState() string {
	if m != nil {
		return m.PcepState
	}
	return ""
}

func (m *PcePcepBag) GetStateful() bool {
	if m != nil {
		return m.Stateful
	}
	return false
}

func (m *PcePcepBag) GetCapabilityUpdate() bool {
	if m != nil {
		return m.CapabilityUpdate
	}
	return false
}

func (m *PcePcepBag) GetCapabilityInstantiate() bool {
	if m != nil {
		return m.CapabilityInstantiate
	}
	return false
}

func (m *PcePcepBag) GetCapabilitySegmentRouting() bool {
	if m != nil {
		return m.CapabilitySegmentRouting
	}
	return false
}

func (m *PcePcepBag) GetCapabilityTriggeredSync() bool {
	if m != nil {
		return m.CapabilityTriggeredSync
	}
	return false
}

func (m *PcePcepBag) GetCapabilityDbVersion() bool {
	if m != nil {
		return m.CapabilityDbVersion
	}
	return false
}

func (m *PcePcepBag) GetCapabilityDeltaSync() bool {
	if m != nil {
		return m.CapabilityDeltaSync
	}
	return false
}

type PcePcepErrorBag struct {
	PcErrorType          uint32   `protobuf:"varint,1,opt,name=pc_error_type,json=pcErrorType,proto3" json:"pc_error_type,omitempty"`
	PcErrorValue         uint32   `protobuf:"varint,2,opt,name=pc_error_value,json=pcErrorValue,proto3" json:"pc_error_value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PcePcepErrorBag) Reset()         { *m = PcePcepErrorBag{} }
func (m *PcePcepErrorBag) String() string { return proto.CompactTextString(m) }
func (*PcePcepErrorBag) ProtoMessage()    {}
func (*PcePcepErrorBag) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f3afadee1dc9c91, []int{3}
}

func (m *PcePcepErrorBag) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PcePcepErrorBag.Unmarshal(m, b)
}
func (m *PcePcepErrorBag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PcePcepErrorBag.Marshal(b, m, deterministic)
}
func (m *PcePcepErrorBag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PcePcepErrorBag.Merge(m, src)
}
func (m *PcePcepErrorBag) XXX_Size() int {
	return xxx_messageInfo_PcePcepErrorBag.Size(m)
}
func (m *PcePcepErrorBag) XXX_DiscardUnknown() {
	xxx_messageInfo_PcePcepErrorBag.DiscardUnknown(m)
}

var xxx_messageInfo_PcePcepErrorBag proto.InternalMessageInfo

func (m *PcePcepErrorBag) GetPcErrorType() uint32 {
	if m != nil {
		return m.PcErrorType
	}
	return 0
}

func (m *PcePcepErrorBag) GetPcErrorValue() uint32 {
	if m != nil {
		return m.PcErrorValue
	}
	return 0
}

type PcePcepDetailBag struct {
	BriefPcepInformation      *PcePcepBag      `protobuf:"bytes,1,opt,name=brief_pcep_information,json=briefPcepInformation,proto3" json:"brief_pcep_information,omitempty"`
	Error                     string           `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	SpeakerId                 string           `protobuf:"bytes,3,opt,name=speaker_id,json=speakerId,proto3" json:"speaker_id,omitempty"`
	PcepUpTime                uint32           `protobuf:"varint,4,opt,name=pcep_up_time,json=pcepUpTime,proto3" json:"pcep_up_time,omitempty"`
	Keepalives                uint32           `protobuf:"varint,5,opt,name=keepalives,proto3" json:"keepalives,omitempty"`
	Md5Enabled                bool             `protobuf:"varint,6,opt,name=md5_enabled,json=md5Enabled,proto3" json:"md5_enabled,omitempty"`
	KeychainEnabled           bool             `protobuf:"varint,7,opt,name=keychain_enabled,json=keychainEnabled,proto3" json:"keychain_enabled,omitempty"`
	NegotiatedLocalKeepalive  uint32           `protobuf:"varint,8,opt,name=negotiated_local_keepalive,json=negotiatedLocalKeepalive,proto3" json:"negotiated_local_keepalive,omitempty"`
	NegotiatedRemoteKeepalive uint32           `protobuf:"varint,9,opt,name=negotiated_remote_keepalive,json=negotiatedRemoteKeepalive,proto3" json:"negotiated_remote_keepalive,omitempty"`
	NegotiatedDeadTime        uint32           `protobuf:"varint,10,opt,name=negotiated_dead_time,json=negotiatedDeadTime,proto3" json:"negotiated_dead_time,omitempty"`
	PceRequestRx              uint32           `protobuf:"varint,11,opt,name=pce_request_rx,json=pceRequestRx,proto3" json:"pce_request_rx,omitempty"`
	PceRequestTx              uint32           `protobuf:"varint,12,opt,name=pce_request_tx,json=pceRequestTx,proto3" json:"pce_request_tx,omitempty"`
	PceReplyRx                uint32           `protobuf:"varint,13,opt,name=pce_reply_rx,json=pceReplyRx,proto3" json:"pce_reply_rx,omitempty"`
	PceReplyTx                uint32           `protobuf:"varint,14,opt,name=pce_reply_tx,json=pceReplyTx,proto3" json:"pce_reply_tx,omitempty"`
	PceErrorRx                uint32           `protobuf:"varint,15,opt,name=pce_error_rx,json=pceErrorRx,proto3" json:"pce_error_rx,omitempty"`
	PceErrorTx                uint32           `protobuf:"varint,16,opt,name=pce_error_tx,json=pceErrorTx,proto3" json:"pce_error_tx,omitempty"`
	PceOpenTx                 uint32           `protobuf:"varint,17,opt,name=pce_open_tx,json=pceOpenTx,proto3" json:"pce_open_tx,omitempty"`
	PceOpenRx                 uint32           `protobuf:"varint,18,opt,name=pce_open_rx,json=pceOpenRx,proto3" json:"pce_open_rx,omitempty"`
	PceReportRx               uint32           `protobuf:"varint,19,opt,name=pce_report_rx,json=pceReportRx,proto3" json:"pce_report_rx,omitempty"`
	PceReportTx               uint32           `protobuf:"varint,20,opt,name=pce_report_tx,json=pceReportTx,proto3" json:"pce_report_tx,omitempty"`
	PceUpdateRx               uint32           `protobuf:"varint,21,opt,name=pce_update_rx,json=pceUpdateRx,proto3" json:"pce_update_rx,omitempty"`
	PceUpdateTx               uint32           `protobuf:"varint,22,opt,name=pce_update_tx,json=pceUpdateTx,proto3" json:"pce_update_tx,omitempty"`
	PceInitiateRx             uint32           `protobuf:"varint,23,opt,name=pce_initiate_rx,json=pceInitiateRx,proto3" json:"pce_initiate_rx,omitempty"`
	PceInitiateTx             uint32           `protobuf:"varint,24,opt,name=pce_initiate_tx,json=pceInitiateTx,proto3" json:"pce_initiate_tx,omitempty"`
	PceKeepaliveTx            uint64           `protobuf:"varint,25,opt,name=pce_keepalive_tx,json=pceKeepaliveTx,proto3" json:"pce_keepalive_tx,omitempty"`
	PceKeepaliveRx            uint64           `protobuf:"varint,26,opt,name=pce_keepalive_rx,json=pceKeepaliveRx,proto3" json:"pce_keepalive_rx,omitempty"`
	LocalSessionId            uint32           `protobuf:"varint,27,opt,name=local_session_id,json=localSessionId,proto3" json:"local_session_id,omitempty"`
	RemoteSessionId           uint32           `protobuf:"varint,28,opt,name=remote_session_id,json=remoteSessionId,proto3" json:"remote_session_id,omitempty"`
	MinimumKeepaliveInterval  uint32           `protobuf:"varint,29,opt,name=minimum_keepalive_interval,json=minimumKeepaliveInterval,proto3" json:"minimum_keepalive_interval,omitempty"`
	MaximumDeadInterval       uint32           `protobuf:"varint,30,opt,name=maximum_dead_interval,json=maximumDeadInterval,proto3" json:"maximum_dead_interval,omitempty"`
	MaxSidDepth               uint32           `protobuf:"varint,31,opt,name=max_sid_depth,json=maxSidDepth,proto3" json:"max_sid_depth,omitempty"`
	LastErrorRx               *PcePcepErrorBag `protobuf:"bytes,32,opt,name=last_error_rx,json=lastErrorRx,proto3" json:"last_error_rx,omitempty"`
	LastErrorTx               *PcePcepErrorBag `protobuf:"bytes,33,opt,name=last_error_tx,json=lastErrorTx,proto3" json:"last_error_tx,omitempty"`
	XXX_NoUnkeyedLiteral      struct{}         `json:"-"`
	XXX_unrecognized          []byte           `json:"-"`
	XXX_sizecache             int32            `json:"-"`
}

func (m *PcePcepDetailBag) Reset()         { *m = PcePcepDetailBag{} }
func (m *PcePcepDetailBag) String() string { return proto.CompactTextString(m) }
func (*PcePcepDetailBag) ProtoMessage()    {}
func (*PcePcepDetailBag) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f3afadee1dc9c91, []int{4}
}

func (m *PcePcepDetailBag) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PcePcepDetailBag.Unmarshal(m, b)
}
func (m *PcePcepDetailBag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PcePcepDetailBag.Marshal(b, m, deterministic)
}
func (m *PcePcepDetailBag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PcePcepDetailBag.Merge(m, src)
}
func (m *PcePcepDetailBag) XXX_Size() int {
	return xxx_messageInfo_PcePcepDetailBag.Size(m)
}
func (m *PcePcepDetailBag) XXX_DiscardUnknown() {
	xxx_messageInfo_PcePcepDetailBag.DiscardUnknown(m)
}

var xxx_messageInfo_PcePcepDetailBag proto.InternalMessageInfo

func (m *PcePcepDetailBag) GetBriefPcepInformation() *PcePcepBag {
	if m != nil {
		return m.BriefPcepInformation
	}
	return nil
}

func (m *PcePcepDetailBag) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *PcePcepDetailBag) GetSpeakerId() string {
	if m != nil {
		return m.SpeakerId
	}
	return ""
}

func (m *PcePcepDetailBag) GetPcepUpTime() uint32 {
	if m != nil {
		return m.PcepUpTime
	}
	return 0
}

func (m *PcePcepDetailBag) GetKeepalives() uint32 {
	if m != nil {
		return m.Keepalives
	}
	return 0
}

func (m *PcePcepDetailBag) GetMd5Enabled() bool {
	if m != nil {
		return m.Md5Enabled
	}
	return false
}

func (m *PcePcepDetailBag) GetKeychainEnabled() bool {
	if m != nil {
		return m.KeychainEnabled
	}
	return false
}

func (m *PcePcepDetailBag) GetNegotiatedLocalKeepalive() uint32 {
	if m != nil {
		return m.NegotiatedLocalKeepalive
	}
	return 0
}

func (m *PcePcepDetailBag) GetNegotiatedRemoteKeepalive() uint32 {
	if m != nil {
		return m.NegotiatedRemoteKeepalive
	}
	return 0
}

func (m *PcePcepDetailBag) GetNegotiatedDeadTime() uint32 {
	if m != nil {
		return m.NegotiatedDeadTime
	}
	return 0
}

func (m *PcePcepDetailBag) GetPceRequestRx() uint32 {
	if m != nil {
		return m.PceRequestRx
	}
	return 0
}

func (m *PcePcepDetailBag) GetPceRequestTx() uint32 {
	if m != nil {
		return m.PceRequestTx
	}
	return 0
}

func (m *PcePcepDetailBag) GetPceReplyRx() uint32 {
	if m != nil {
		return m.PceReplyRx
	}
	return 0
}

func (m *PcePcepDetailBag) GetPceReplyTx() uint32 {
	if m != nil {
		return m.PceReplyTx
	}
	return 0
}

func (m *PcePcepDetailBag) GetPceErrorRx() uint32 {
	if m != nil {
		return m.PceErrorRx
	}
	return 0
}

func (m *PcePcepDetailBag) GetPceErrorTx() uint32 {
	if m != nil {
		return m.PceErrorTx
	}
	return 0
}

func (m *PcePcepDetailBag) GetPceOpenTx() uint32 {
	if m != nil {
		return m.PceOpenTx
	}
	return 0
}

func (m *PcePcepDetailBag) GetPceOpenRx() uint32 {
	if m != nil {
		return m.PceOpenRx
	}
	return 0
}

func (m *PcePcepDetailBag) GetPceReportRx() uint32 {
	if m != nil {
		return m.PceReportRx
	}
	return 0
}

func (m *PcePcepDetailBag) GetPceReportTx() uint32 {
	if m != nil {
		return m.PceReportTx
	}
	return 0
}

func (m *PcePcepDetailBag) GetPceUpdateRx() uint32 {
	if m != nil {
		return m.PceUpdateRx
	}
	return 0
}

func (m *PcePcepDetailBag) GetPceUpdateTx() uint32 {
	if m != nil {
		return m.PceUpdateTx
	}
	return 0
}

func (m *PcePcepDetailBag) GetPceInitiateRx() uint32 {
	if m != nil {
		return m.PceInitiateRx
	}
	return 0
}

func (m *PcePcepDetailBag) GetPceInitiateTx() uint32 {
	if m != nil {
		return m.PceInitiateTx
	}
	return 0
}

func (m *PcePcepDetailBag) GetPceKeepaliveTx() uint64 {
	if m != nil {
		return m.PceKeepaliveTx
	}
	return 0
}

func (m *PcePcepDetailBag) GetPceKeepaliveRx() uint64 {
	if m != nil {
		return m.PceKeepaliveRx
	}
	return 0
}

func (m *PcePcepDetailBag) GetLocalSessionId() uint32 {
	if m != nil {
		return m.LocalSessionId
	}
	return 0
}

func (m *PcePcepDetailBag) GetRemoteSessionId() uint32 {
	if m != nil {
		return m.RemoteSessionId
	}
	return 0
}

func (m *PcePcepDetailBag) GetMinimumKeepaliveInterval() uint32 {
	if m != nil {
		return m.MinimumKeepaliveInterval
	}
	return 0
}

func (m *PcePcepDetailBag) GetMaximumDeadInterval() uint32 {
	if m != nil {
		return m.MaximumDeadInterval
	}
	return 0
}

func (m *PcePcepDetailBag) GetMaxSidDepth() uint32 {
	if m != nil {
		return m.MaxSidDepth
	}
	return 0
}

func (m *PcePcepDetailBag) GetLastErrorRx() *PcePcepErrorBag {
	if m != nil {
		return m.LastErrorRx
	}
	return nil
}

func (m *PcePcepDetailBag) GetLastErrorTx() *PcePcepErrorBag {
	if m != nil {
		return m.LastErrorTx
	}
	return nil
}

type PcePeerDetailBag struct {
	PeerAddressXr         *PceIpAddrType    `protobuf:"bytes,50,opt,name=peer_address_xr,json=peerAddressXr,proto3" json:"peer_address_xr,omitempty"`
	PeerProtocol          string            `protobuf:"bytes,51,opt,name=peer_protocol,json=peerProtocol,proto3" json:"peer_protocol,omitempty"`
	DetailPcepInformation *PcePcepDetailBag `protobuf:"bytes,52,opt,name=detail_pcep_information,json=detailPcepInformation,proto3" json:"detail_pcep_information,omitempty"`
	MaxSidDepth           uint32            `protobuf:"varint,53,opt,name=max_sid_depth,json=maxSidDepth,proto3" json:"max_sid_depth,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}          `json:"-"`
	XXX_unrecognized      []byte            `json:"-"`
	XXX_sizecache         int32             `json:"-"`
}

func (m *PcePeerDetailBag) Reset()         { *m = PcePeerDetailBag{} }
func (m *PcePeerDetailBag) String() string { return proto.CompactTextString(m) }
func (*PcePeerDetailBag) ProtoMessage()    {}
func (*PcePeerDetailBag) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f3afadee1dc9c91, []int{5}
}

func (m *PcePeerDetailBag) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PcePeerDetailBag.Unmarshal(m, b)
}
func (m *PcePeerDetailBag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PcePeerDetailBag.Marshal(b, m, deterministic)
}
func (m *PcePeerDetailBag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PcePeerDetailBag.Merge(m, src)
}
func (m *PcePeerDetailBag) XXX_Size() int {
	return xxx_messageInfo_PcePeerDetailBag.Size(m)
}
func (m *PcePeerDetailBag) XXX_DiscardUnknown() {
	xxx_messageInfo_PcePeerDetailBag.DiscardUnknown(m)
}

var xxx_messageInfo_PcePeerDetailBag proto.InternalMessageInfo

func (m *PcePeerDetailBag) GetPeerAddressXr() *PceIpAddrType {
	if m != nil {
		return m.PeerAddressXr
	}
	return nil
}

func (m *PcePeerDetailBag) GetPeerProtocol() string {
	if m != nil {
		return m.PeerProtocol
	}
	return ""
}

func (m *PcePeerDetailBag) GetDetailPcepInformation() *PcePcepDetailBag {
	if m != nil {
		return m.DetailPcepInformation
	}
	return nil
}

func (m *PcePeerDetailBag) GetMaxSidDepth() uint32 {
	if m != nil {
		return m.MaxSidDepth
	}
	return 0
}

func init() {
	proto.RegisterType((*PcePeerDetailBag_KEYS)(nil), "cisco_ios_xr_infra_xtc_oper.pce_peer.peer_detail_infos.peer_detail_info.pce_peer_detail_bag_KEYS")
	proto.RegisterType((*PceIpAddrType)(nil), "cisco_ios_xr_infra_xtc_oper.pce_peer.peer_detail_infos.peer_detail_info.pce_ip_addr_type")
	proto.RegisterType((*PcePcepBag)(nil), "cisco_ios_xr_infra_xtc_oper.pce_peer.peer_detail_infos.peer_detail_info.pce_pcep_bag")
	proto.RegisterType((*PcePcepErrorBag)(nil), "cisco_ios_xr_infra_xtc_oper.pce_peer.peer_detail_infos.peer_detail_info.pce_pcep_error_bag")
	proto.RegisterType((*PcePcepDetailBag)(nil), "cisco_ios_xr_infra_xtc_oper.pce_peer.peer_detail_infos.peer_detail_info.pce_pcep_detail_bag")
	proto.RegisterType((*PcePeerDetailBag)(nil), "cisco_ios_xr_infra_xtc_oper.pce_peer.peer_detail_infos.peer_detail_info.pce_peer_detail_bag")
}

func init() { proto.RegisterFile("pce_peer_detail_bag.proto", fileDescriptor_2f3afadee1dc9c91) }

var fileDescriptor_2f3afadee1dc9c91 = []byte{
	// 1045 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x96, 0xcd, 0x6f, 0x1c, 0x35,
	0x18, 0xc6, 0xb5, 0x6d, 0x9a, 0x26, 0xde, 0x6c, 0x3e, 0x9c, 0x2f, 0x27, 0xa5, 0x69, 0xba, 0x20,
	0x14, 0x40, 0x8a, 0x50, 0xda, 0xf4, 0x80, 0x02, 0x12, 0x52, 0x22, 0xb4, 0x2a, 0x82, 0xca, 0xbb,
	0xa9, 0xa8, 0x40, 0x58, 0xde, 0x99, 0x77, 0xb7, 0x56, 0xe6, 0xc3, 0x78, 0xbc, 0x91, 0xf7, 0x84,
	0x38, 0x73, 0xe0, 0xc2, 0x9f, 0xc5, 0x3f, 0xc4, 0x0d, 0xf9, 0xf5, 0xec, 0xcc, 0x64, 0xb7, 0xc7,
	0x88, 0xdb, 0xee, 0xf3, 0xfe, 0x1e, 0xfb, 0x9d, 0xf1, 0x63, 0x7b, 0xc8, 0x81, 0x8e, 0x40, 0x68,
	0x00, 0x23, 0x62, 0xb0, 0x52, 0x25, 0x62, 0x28, 0xc7, 0xa7, 0xda, 0xe4, 0x36, 0xa7, 0xdf, 0x45,
	0xaa, 0x88, 0x72, 0xa1, 0xf2, 0x42, 0x38, 0x23, 0x54, 0x36, 0x32, 0x52, 0x38, 0x1b, 0x89, 0x5c,
	0x83, 0x39, 0x9d, 0xd9, 0x4e, 0x9b, 0x5e, 0x95, 0x8d, 0xf2, 0x62, 0x41, 0xe9, 0x7e, 0x4d, 0xd8,
	0x07, 0x66, 0x11, 0xaf, 0xaf, 0xde, 0xf5, 0xe9, 0x73, 0xb2, 0x86, 0xba, 0x8c, 0x63, 0x03, 0x45,
	0xc1, 0x5a, 0xc7, 0xad, 0x93, 0x55, 0xde, 0xf6, 0xda, 0xb7, 0x41, 0xea, 0xf6, 0xc9, 0xa6, 0xb7,
	0x2b, 0x8d, 0x90, 0xb0, 0x53, 0x0d, 0x74, 0x9f, 0x3c, 0x96, 0x23, 0x91, 0xc9, 0x14, 0x4a, 0xc7,
	0xb2, 0x1c, 0xfd, 0x20, 0x53, 0xa0, 0x94, 0x2c, 0x29, 0x7d, 0xfb, 0x92, 0x3d, 0x40, 0x15, 0x7f,
	0x97, 0xda, 0x2b, 0xf6, 0xb0, 0xd2, 0x5e, 0x75, 0xff, 0x7a, 0x48, 0xd6, 0xb0, 0xa9, 0x08, 0xb4,
	0xef, 0x86, 0x3e, 0x25, 0x04, 0x7f, 0x17, 0x56, 0xda, 0xd9, 0xa0, 0xab, 0x5e, 0xe9, 0x7b, 0x81,
	0x1e, 0x92, 0x15, 0xac, 0x8c, 0x26, 0x09, 0x8e, 0xbd, 0xc2, 0xab, 0xff, 0xf4, 0x0b, 0xb2, 0x15,
	0x49, 0x2d, 0x87, 0x2a, 0x51, 0x76, 0x2a, 0x26, 0x3a, 0xf6, 0x23, 0x3c, 0x44, 0x68, 0xb3, 0x2e,
	0x5c, 0xa3, 0x4e, 0xcf, 0xc9, 0x5e, 0x03, 0x56, 0x59, 0x61, 0x65, 0x66, 0x95, 0x77, 0x2c, 0xa1,
	0x63, 0xb7, 0xae, 0xf6, 0xea, 0x22, 0xbd, 0x20, 0x87, 0x0d, 0x5b, 0x01, 0xe3, 0x14, 0x32, 0x2b,
	0x4c, 0x3e, 0xb1, 0x2a, 0x1b, 0xb3, 0x47, 0x68, 0x65, 0x35, 0xd1, 0x0f, 0x00, 0x0f, 0x75, 0xfa,
	0x15, 0x39, 0x68, 0xb8, 0xad, 0x51, 0xe3, 0x31, 0x18, 0x88, 0x45, 0x31, 0xcd, 0x22, 0xb6, 0x8c,
	0xe6, 0xfd, 0x1a, 0x18, 0xcc, 0xea, 0xfd, 0x69, 0x16, 0xd1, 0x33, 0xd2, 0x68, 0x49, 0xc4, 0x43,
	0x71, 0x0b, 0xa6, 0x50, 0x79, 0xc6, 0x1e, 0xa3, 0x6f, 0xbb, 0x2e, 0x5e, 0x0e, 0xdf, 0x86, 0xd2,
	0xbc, 0x07, 0x12, 0x2b, 0xc3, 0x5c, 0x2b, 0x0b, 0x1e, 0x5f, 0xf3, 0xf3, 0x74, 0x7f, 0x25, 0xb4,
	0x5a, 0x10, 0x30, 0x26, 0x37, 0xb8, 0x2c, 0x5d, 0xd2, 0xd1, 0x51, 0xf9, 0xdf, 0xaf, 0x3c, 0xae,
	0x4c, 0x87, 0xb7, 0x75, 0x74, 0xe5, 0xb5, 0x81, 0x0f, 0xc3, 0x27, 0x64, 0xbd, 0x62, 0x6e, 0x65,
	0x32, 0x01, 0x5c, 0xa1, 0x0e, 0x5f, 0x2b, 0xa1, 0xb7, 0x5e, 0xeb, 0xfe, 0xb3, 0x46, 0xb6, 0xab,
	0x09, 0xea, 0x18, 0xd2, 0x3f, 0x5b, 0x64, 0x6f, 0x68, 0x14, 0x8c, 0x42, 0xc5, 0x27, 0xd6, 0xa4,
	0xd2, 0xfa, 0x27, 0xf4, 0x73, 0xb5, 0xcf, 0xae, 0x4f, 0xef, 0x69, 0x23, 0x9c, 0x36, 0x03, 0xc7,
	0x77, 0x70, 0xd2, 0x37, 0x11, 0xe8, 0x5e, 0x3d, 0x25, 0xdd, 0x21, 0x8f, 0xf0, 0x41, 0xca, 0x00,
	0x87, 0x3f, 0x3e, 0x9c, 0x85, 0x06, 0x79, 0x03, 0x46, 0xa8, 0xb8, 0xcc, 0xf1, 0x6a, 0xa9, 0xf4,
	0x62, 0x7a, 0x8c, 0x59, 0xd6, 0x62, 0xa2, 0x85, 0x55, 0x69, 0x48, 0x52, 0x87, 0x63, 0x9e, 0xaf,
	0xf5, 0x40, 0xa5, 0x40, 0x8f, 0x08, 0xb9, 0x01, 0xd0, 0x32, 0x51, 0xb7, 0x50, 0x60, 0x5c, 0x3a,
	0xbc, 0xa1, 0xd0, 0x67, 0xa4, 0x9d, 0xc6, 0xe7, 0x02, 0x32, 0x39, 0x4c, 0x20, 0x2e, 0x23, 0x41,
	0xd2, 0xf8, 0xfc, 0x2a, 0x28, 0xf4, 0x33, 0xb2, 0x79, 0x03, 0xd3, 0xe8, 0xbd, 0x54, 0x59, 0x45,
	0x85, 0x00, 0x6c, 0xcc, 0xf4, 0x19, 0x7a, 0x41, 0x0e, 0x33, 0x18, 0xe7, 0x98, 0xdb, 0x58, 0x24,
	0x79, 0x24, 0x13, 0x51, 0x4d, 0x85, 0x09, 0xe8, 0x70, 0x56, 0x13, 0xdf, 0x7b, 0xe0, 0xf5, 0xac,
	0x4e, 0xbf, 0x21, 0x4f, 0x1a, 0x6e, 0x03, 0x69, 0x6e, 0xa1, 0x61, 0x5f, 0x45, 0xfb, 0x41, 0x8d,
	0x70, 0x24, 0x6a, 0xff, 0x97, 0x64, 0xa7, 0xe1, 0x8f, 0x41, 0xc6, 0xe1, 0x9d, 0x10, 0x34, 0xd2,
	0xba, 0x76, 0x09, 0x32, 0xc6, 0x77, 0x83, 0xf1, 0x01, 0x61, 0xe0, 0xb7, 0x09, 0x14, 0x56, 0x18,
	0xc7, 0xda, 0xb3, 0xf8, 0x00, 0x0f, 0x22, 0x77, 0xf3, 0x94, 0x75, 0x6c, 0x6d, 0x9e, 0x1a, 0xb8,
	0x72, 0x25, 0x84, 0x01, 0x9d, 0x4c, 0xfd, 0x48, 0x9d, 0x6a, 0x25, 0xb8, 0x97, 0xf8, 0x1c, 0x61,
	0x1d, 0x5b, 0xbf, 0x4b, 0xd4, 0x63, 0x84, 0x3c, 0x1b, 0xc7, 0x36, 0x2a, 0x02, 0xd3, 0xcc, 0xe7,
	0x08, 0xeb, 0xd8, 0xe6, 0x5d, 0x62, 0xe0, 0xe8, 0x11, 0x69, 0x7b, 0x22, 0xd7, 0x90, 0x79, 0x60,
	0x0b, 0x01, 0x7f, 0x9c, 0xfd, 0xa8, 0x21, 0x9b, 0xab, 0x1b, 0xc7, 0xe8, 0x9d, 0x3a, 0x77, 0x61,
	0xdb, 0x61, 0x97, 0xb9, 0xc1, 0x57, 0xb2, 0x3d, 0xdb, 0x76, 0xbe, 0xcd, 0xdc, 0xd8, 0x05, 0xc6,
	0x3a, 0xb6, 0x33, 0xc7, 0x0c, 0x2a, 0x26, 0x9c, 0x89, 0x7e, 0x9c, 0xdd, 0x8a, 0x09, 0xe7, 0x21,
	0x9f, 0x67, 0xac, 0x63, 0x7b, 0x73, 0xcc, 0xc0, 0xd1, 0x4f, 0xc9, 0x06, 0xde, 0x01, 0x99, 0xc2,
	0xc5, 0xf3, 0x23, 0xed, 0x23, 0xe5, 0xad, 0xbd, 0x52, 0xe5, 0x8b, 0x9c, 0x75, 0x8c, 0x2d, 0x70,
	0x03, 0x47, 0x4f, 0xc2, 0x9d, 0x52, 0xe5, 0xca, 0x83, 0x07, 0xc7, 0xad, 0x93, 0x25, 0xee, 0x57,
	0xb9, 0x4a, 0xd3, 0x87, 0x48, 0xe3, 0xd8, 0xe1, 0x22, 0xc9, 0x91, 0x0c, 0x61, 0x2f, 0xa0, 0xf0,
	0xa7, 0xa0, 0xdf, 0xaa, 0x4f, 0x70, 0xf2, 0x75, 0xd4, 0xfb, 0x41, 0xee, 0xc5, 0xf4, 0x73, 0xb2,
	0x55, 0x06, 0xbb, 0x81, 0x7e, 0x84, 0xe8, 0x46, 0x28, 0xd4, 0xec, 0x05, 0x39, 0x4c, 0x55, 0xa6,
	0xd2, 0x49, 0xda, 0xe8, 0x41, 0x65, 0x16, 0xcc, 0xad, 0x4c, 0xd8, 0xd3, 0xb0, 0x9b, 0x4a, 0xa2,
	0xea, 0xa6, 0x57, 0xd6, 0xfd, 0x41, 0x9c, 0x4a, 0x87, 0x6e, 0xdc, 0x0a, 0x95, 0xf1, 0x08, 0x8d,
	0xdb, 0x65, 0xd1, 0xef, 0x85, 0xca, 0xd3, 0x25, 0x9d, 0x54, 0x3a, 0x51, 0x28, 0xbf, 0x7d, 0xb4,
	0x7d, 0xcf, 0x9e, 0x85, 0xf5, 0x48, 0xa5, 0xeb, 0xab, 0xf8, 0xd2, 0x4b, 0xf4, 0x77, 0xd2, 0x49,
	0x64, 0x61, 0xeb, 0x90, 0x1e, 0xe3, 0x51, 0xf9, 0xf3, 0xfd, 0x1f, 0x95, 0xd5, 0x55, 0xc0, 0xdb,
	0x7e, 0xc6, 0xd9, 0x16, 0xb8, 0xdb, 0x80, 0x75, 0xec, 0xf9, 0xff, 0xd9, 0xc0, 0xc0, 0x75, 0xff,
	0x7d, 0x50, 0x5e, 0x27, 0x77, 0xbf, 0x6a, 0xe8, 0x1f, 0x2d, 0xb2, 0xd1, 0xfc, 0xa2, 0x11, 0xce,
	0xb0, 0x33, 0xec, 0xed, 0xdd, 0xbd, 0xf6, 0xd6, 0xfc, 0x1c, 0xe2, 0x9d, 0xc6, 0xf7, 0xd2, 0x4f,
	0x86, 0x7e, 0x4c, 0x50, 0x10, 0xf8, 0x1d, 0x17, 0xe5, 0x09, 0x7b, 0x81, 0x37, 0x06, 0x7e, 0x69,
	0xbd, 0x29, 0x35, 0xfa, 0x77, 0x8b, 0xec, 0x97, 0x83, 0x2e, 0x5c, 0x7c, 0x2f, 0xb1, 0xe1, 0x5f,
	0xee, 0xff, 0x65, 0xd6, 0x2f, 0x8a, 0xef, 0x86, 0xdf, 0xf3, 0x17, 0xe0, 0x42, 0xfa, 0xce, 0x17,
	0xd2, 0x37, 0x5c, 0xc6, 0x07, 0x7b, 0xf1, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x66, 0x5f, 0x9b,
	0x8d, 0xbd, 0x0a, 0x00, 0x00,
}
