/*
Copyright 2019 Cisco Systems

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: l2vpn_evpn_mac.proto

package cisco_ios_xr_evpn_oper_evpn_standby_evi_detail_evi_children_macs_mac

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type L2VpnEvpnMac_KEYS struct {
	Evi                  uint32   `protobuf:"varint,1,opt,name=evi,proto3" json:"evi,omitempty"`
	Encapsulation        uint32   `protobuf:"varint,2,opt,name=encapsulation,proto3" json:"encapsulation,omitempty"`
	EthernetTag          uint32   `protobuf:"varint,3,opt,name=ethernet_tag,json=ethernetTag,proto3" json:"ethernet_tag,omitempty"`
	MacAddress           string   `protobuf:"bytes,4,opt,name=mac_address,json=macAddress,proto3" json:"mac_address,omitempty"`
	IpAddress            string   `protobuf:"bytes,5,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *L2VpnEvpnMac_KEYS) Reset()         { *m = L2VpnEvpnMac_KEYS{} }
func (m *L2VpnEvpnMac_KEYS) String() string { return proto.CompactTextString(m) }
func (*L2VpnEvpnMac_KEYS) ProtoMessage()    {}
func (*L2VpnEvpnMac_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f7d8f00693a691d, []int{0}
}

func (m *L2VpnEvpnMac_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2VpnEvpnMac_KEYS.Unmarshal(m, b)
}
func (m *L2VpnEvpnMac_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2VpnEvpnMac_KEYS.Marshal(b, m, deterministic)
}
func (m *L2VpnEvpnMac_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2VpnEvpnMac_KEYS.Merge(m, src)
}
func (m *L2VpnEvpnMac_KEYS) XXX_Size() int {
	return xxx_messageInfo_L2VpnEvpnMac_KEYS.Size(m)
}
func (m *L2VpnEvpnMac_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_L2VpnEvpnMac_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_L2VpnEvpnMac_KEYS proto.InternalMessageInfo

func (m *L2VpnEvpnMac_KEYS) GetEvi() uint32 {
	if m != nil {
		return m.Evi
	}
	return 0
}

func (m *L2VpnEvpnMac_KEYS) GetEncapsulation() uint32 {
	if m != nil {
		return m.Encapsulation
	}
	return 0
}

func (m *L2VpnEvpnMac_KEYS) GetEthernetTag() uint32 {
	if m != nil {
		return m.EthernetTag
	}
	return 0
}

func (m *L2VpnEvpnMac_KEYS) GetMacAddress() string {
	if m != nil {
		return m.MacAddress
	}
	return ""
}

func (m *L2VpnEvpnMac_KEYS) GetIpAddress() string {
	if m != nil {
		return m.IpAddress
	}
	return ""
}

type L2VpnEvpnEviSummary struct {
	EthernetVpnId        uint32   `protobuf:"varint,1,opt,name=ethernet_vpn_id,json=ethernetVpnId,proto3" json:"ethernet_vpn_id,omitempty"`
	EncapsulationXr      uint32   `protobuf:"varint,2,opt,name=encapsulation_xr,json=encapsulationXr,proto3" json:"encapsulation_xr,omitempty"`
	BdName               string   `protobuf:"bytes,3,opt,name=bd_name,json=bdName,proto3" json:"bd_name,omitempty"`
	Type                 string   `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *L2VpnEvpnEviSummary) Reset()         { *m = L2VpnEvpnEviSummary{} }
func (m *L2VpnEvpnEviSummary) String() string { return proto.CompactTextString(m) }
func (*L2VpnEvpnEviSummary) ProtoMessage()    {}
func (*L2VpnEvpnEviSummary) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f7d8f00693a691d, []int{1}
}

func (m *L2VpnEvpnEviSummary) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2VpnEvpnEviSummary.Unmarshal(m, b)
}
func (m *L2VpnEvpnEviSummary) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2VpnEvpnEviSummary.Marshal(b, m, deterministic)
}
func (m *L2VpnEvpnEviSummary) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2VpnEvpnEviSummary.Merge(m, src)
}
func (m *L2VpnEvpnEviSummary) XXX_Size() int {
	return xxx_messageInfo_L2VpnEvpnEviSummary.Size(m)
}
func (m *L2VpnEvpnEviSummary) XXX_DiscardUnknown() {
	xxx_messageInfo_L2VpnEvpnEviSummary.DiscardUnknown(m)
}

var xxx_messageInfo_L2VpnEvpnEviSummary proto.InternalMessageInfo

func (m *L2VpnEvpnEviSummary) GetEthernetVpnId() uint32 {
	if m != nil {
		return m.EthernetVpnId
	}
	return 0
}

func (m *L2VpnEvpnEviSummary) GetEncapsulationXr() uint32 {
	if m != nil {
		return m.EncapsulationXr
	}
	return 0
}

func (m *L2VpnEvpnEviSummary) GetBdName() string {
	if m != nil {
		return m.BdName
	}
	return ""
}

func (m *L2VpnEvpnEviSummary) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

type L2VpnLabelPathBuffer struct {
	TunnelEndpointId     uint32   `protobuf:"varint,1,opt,name=tunnel_endpoint_id,json=tunnelEndpointId,proto3" json:"tunnel_endpoint_id,omitempty"`
	NextHop              string   `protobuf:"bytes,2,opt,name=next_hop,json=nextHop,proto3" json:"next_hop,omitempty"`
	OutputLabel          uint32   `protobuf:"varint,3,opt,name=output_label,json=outputLabel,proto3" json:"output_label,omitempty"`
	SrteTunnel           string   `protobuf:"bytes,4,opt,name=srte_tunnel,json=srteTunnel,proto3" json:"srte_tunnel,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *L2VpnLabelPathBuffer) Reset()         { *m = L2VpnLabelPathBuffer{} }
func (m *L2VpnLabelPathBuffer) String() string { return proto.CompactTextString(m) }
func (*L2VpnLabelPathBuffer) ProtoMessage()    {}
func (*L2VpnLabelPathBuffer) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f7d8f00693a691d, []int{2}
}

func (m *L2VpnLabelPathBuffer) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2VpnLabelPathBuffer.Unmarshal(m, b)
}
func (m *L2VpnLabelPathBuffer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2VpnLabelPathBuffer.Marshal(b, m, deterministic)
}
func (m *L2VpnLabelPathBuffer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2VpnLabelPathBuffer.Merge(m, src)
}
func (m *L2VpnLabelPathBuffer) XXX_Size() int {
	return xxx_messageInfo_L2VpnLabelPathBuffer.Size(m)
}
func (m *L2VpnLabelPathBuffer) XXX_DiscardUnknown() {
	xxx_messageInfo_L2VpnLabelPathBuffer.DiscardUnknown(m)
}

var xxx_messageInfo_L2VpnLabelPathBuffer proto.InternalMessageInfo

func (m *L2VpnLabelPathBuffer) GetTunnelEndpointId() uint32 {
	if m != nil {
		return m.TunnelEndpointId
	}
	return 0
}

func (m *L2VpnLabelPathBuffer) GetNextHop() string {
	if m != nil {
		return m.NextHop
	}
	return ""
}

func (m *L2VpnLabelPathBuffer) GetOutputLabel() uint32 {
	if m != nil {
		return m.OutputLabel
	}
	return 0
}

func (m *L2VpnLabelPathBuffer) GetSrteTunnel() string {
	if m != nil {
		return m.SrteTunnel
	}
	return ""
}

type L2VpnEvpnMac struct {
	EvpnInstance                    *L2VpnEvpnEviSummary    `protobuf:"bytes,50,opt,name=evpn_instance,json=evpnInstance,proto3" json:"evpn_instance,omitempty"`
	EthernetTagXr                   uint32                  `protobuf:"varint,51,opt,name=ethernet_tag_xr,json=ethernetTagXr,proto3" json:"ethernet_tag_xr,omitempty"`
	MacAddressXr                    string                  `protobuf:"bytes,52,opt,name=mac_address_xr,json=macAddressXr,proto3" json:"mac_address_xr,omitempty"`
	IpAddressXr                     string                  `protobuf:"bytes,53,opt,name=ip_address_xr,json=ipAddressXr,proto3" json:"ip_address_xr,omitempty"`
	LocalLabel                      uint32                  `protobuf:"varint,54,opt,name=local_label,json=localLabel,proto3" json:"local_label,omitempty"`
	NumPaths                        uint32                  `protobuf:"varint,55,opt,name=num_paths,json=numPaths,proto3" json:"num_paths,omitempty"`
	PathBuffer                      []*L2VpnLabelPathBuffer `protobuf:"bytes,56,rep,name=path_buffer,json=pathBuffer,proto3" json:"path_buffer,omitempty"`
	IsLocalMac                      bool                    `protobuf:"varint,57,opt,name=is_local_mac,json=isLocalMac,proto3" json:"is_local_mac,omitempty"`
	IsProxyEntry                    bool                    `protobuf:"varint,58,opt,name=is_proxy_entry,json=isProxyEntry,proto3" json:"is_proxy_entry,omitempty"`
	IsRemoteMac                     bool                    `protobuf:"varint,59,opt,name=is_remote_mac,json=isRemoteMac,proto3" json:"is_remote_mac,omitempty"`
	SooNexthop                      string                  `protobuf:"bytes,60,opt,name=soo_nexthop,json=sooNexthop,proto3" json:"soo_nexthop,omitempty"`
	IpnhAddress                     string                  `protobuf:"bytes,61,opt,name=ipnh_address,json=ipnhAddress,proto3" json:"ipnh_address,omitempty"`
	LocalEthernetSegmentIdentifier  []uint32                `protobuf:"varint,62,rep,packed,name=local_ethernet_segment_identifier,json=localEthernetSegmentIdentifier,proto3" json:"local_ethernet_segment_identifier,omitempty"`
	RemoteEthernetSegmentIdentifier []uint32                `protobuf:"varint,63,rep,packed,name=remote_ethernet_segment_identifier,json=remoteEthernetSegmentIdentifier,proto3" json:"remote_ethernet_segment_identifier,omitempty"`
	EsiPortKey                      uint32                  `protobuf:"varint,64,opt,name=esi_port_key,json=esiPortKey,proto3" json:"esi_port_key,omitempty"`
	LocalEncapType                  uint32                  `protobuf:"varint,65,opt,name=local_encap_type,json=localEncapType,proto3" json:"local_encap_type,omitempty"`
	RemoteEncapType                 uint32                  `protobuf:"varint,66,opt,name=remote_encap_type,json=remoteEncapType,proto3" json:"remote_encap_type,omitempty"`
	LearnedBridgePortName           string                  `protobuf:"bytes,67,opt,name=learned_bridge_port_name,json=learnedBridgePortName,proto3" json:"learned_bridge_port_name,omitempty"`
	LocalSeqId                      uint32                  `protobuf:"varint,68,opt,name=local_seq_id,json=localSeqId,proto3" json:"local_seq_id,omitempty"`
	RemoteSeqId                     uint32                  `protobuf:"varint,69,opt,name=remote_seq_id,json=remoteSeqId,proto3" json:"remote_seq_id,omitempty"`
	LocalL3Label                    uint32                  `protobuf:"varint,70,opt,name=local_l3_label,json=localL3Label,proto3" json:"local_l3_label,omitempty"`
	RouterMacAddress                string                  `protobuf:"bytes,71,opt,name=router_mac_address,json=routerMacAddress,proto3" json:"router_mac_address,omitempty"`
	MacFlushRequested               uint32                  `protobuf:"varint,72,opt,name=mac_flush_requested,json=macFlushRequested,proto3" json:"mac_flush_requested,omitempty"`
	MacFlushReceived                uint32                  `protobuf:"varint,73,opt,name=mac_flush_received,json=macFlushReceived,proto3" json:"mac_flush_received,omitempty"`
	InternalLabel                   uint32                  `protobuf:"varint,74,opt,name=internal_label,json=internalLabel,proto3" json:"internal_label,omitempty"`
	Resolved                        bool                    `protobuf:"varint,75,opt,name=resolved,proto3" json:"resolved,omitempty"`
	LocalIsStatic                   bool                    `protobuf:"varint,76,opt,name=local_is_static,json=localIsStatic,proto3" json:"local_is_static,omitempty"`
	RemoteIsStatic                  bool                    `protobuf:"varint,77,opt,name=remote_is_static,json=remoteIsStatic,proto3" json:"remote_is_static,omitempty"`
	XXX_NoUnkeyedLiteral            struct{}                `json:"-"`
	XXX_unrecognized                []byte                  `json:"-"`
	XXX_sizecache                   int32                   `json:"-"`
}

func (m *L2VpnEvpnMac) Reset()         { *m = L2VpnEvpnMac{} }
func (m *L2VpnEvpnMac) String() string { return proto.CompactTextString(m) }
func (*L2VpnEvpnMac) ProtoMessage()    {}
func (*L2VpnEvpnMac) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f7d8f00693a691d, []int{3}
}

func (m *L2VpnEvpnMac) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2VpnEvpnMac.Unmarshal(m, b)
}
func (m *L2VpnEvpnMac) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2VpnEvpnMac.Marshal(b, m, deterministic)
}
func (m *L2VpnEvpnMac) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2VpnEvpnMac.Merge(m, src)
}
func (m *L2VpnEvpnMac) XXX_Size() int {
	return xxx_messageInfo_L2VpnEvpnMac.Size(m)
}
func (m *L2VpnEvpnMac) XXX_DiscardUnknown() {
	xxx_messageInfo_L2VpnEvpnMac.DiscardUnknown(m)
}

var xxx_messageInfo_L2VpnEvpnMac proto.InternalMessageInfo

func (m *L2VpnEvpnMac) GetEvpnInstance() *L2VpnEvpnEviSummary {
	if m != nil {
		return m.EvpnInstance
	}
	return nil
}

func (m *L2VpnEvpnMac) GetEthernetTagXr() uint32 {
	if m != nil {
		return m.EthernetTagXr
	}
	return 0
}

func (m *L2VpnEvpnMac) GetMacAddressXr() string {
	if m != nil {
		return m.MacAddressXr
	}
	return ""
}

func (m *L2VpnEvpnMac) GetIpAddressXr() string {
	if m != nil {
		return m.IpAddressXr
	}
	return ""
}

func (m *L2VpnEvpnMac) GetLocalLabel() uint32 {
	if m != nil {
		return m.LocalLabel
	}
	return 0
}

func (m *L2VpnEvpnMac) GetNumPaths() uint32 {
	if m != nil {
		return m.NumPaths
	}
	return 0
}

func (m *L2VpnEvpnMac) GetPathBuffer() []*L2VpnLabelPathBuffer {
	if m != nil {
		return m.PathBuffer
	}
	return nil
}

func (m *L2VpnEvpnMac) GetIsLocalMac() bool {
	if m != nil {
		return m.IsLocalMac
	}
	return false
}

func (m *L2VpnEvpnMac) GetIsProxyEntry() bool {
	if m != nil {
		return m.IsProxyEntry
	}
	return false
}

func (m *L2VpnEvpnMac) GetIsRemoteMac() bool {
	if m != nil {
		return m.IsRemoteMac
	}
	return false
}

func (m *L2VpnEvpnMac) GetSooNexthop() string {
	if m != nil {
		return m.SooNexthop
	}
	return ""
}

func (m *L2VpnEvpnMac) GetIpnhAddress() string {
	if m != nil {
		return m.IpnhAddress
	}
	return ""
}

func (m *L2VpnEvpnMac) GetLocalEthernetSegmentIdentifier() []uint32 {
	if m != nil {
		return m.LocalEthernetSegmentIdentifier
	}
	return nil
}

func (m *L2VpnEvpnMac) GetRemoteEthernetSegmentIdentifier() []uint32 {
	if m != nil {
		return m.RemoteEthernetSegmentIdentifier
	}
	return nil
}

func (m *L2VpnEvpnMac) GetEsiPortKey() uint32 {
	if m != nil {
		return m.EsiPortKey
	}
	return 0
}

func (m *L2VpnEvpnMac) GetLocalEncapType() uint32 {
	if m != nil {
		return m.LocalEncapType
	}
	return 0
}

func (m *L2VpnEvpnMac) GetRemoteEncapType() uint32 {
	if m != nil {
		return m.RemoteEncapType
	}
	return 0
}

func (m *L2VpnEvpnMac) GetLearnedBridgePortName() string {
	if m != nil {
		return m.LearnedBridgePortName
	}
	return ""
}

func (m *L2VpnEvpnMac) GetLocalSeqId() uint32 {
	if m != nil {
		return m.LocalSeqId
	}
	return 0
}

func (m *L2VpnEvpnMac) GetRemoteSeqId() uint32 {
	if m != nil {
		return m.RemoteSeqId
	}
	return 0
}

func (m *L2VpnEvpnMac) GetLocalL3Label() uint32 {
	if m != nil {
		return m.LocalL3Label
	}
	return 0
}

func (m *L2VpnEvpnMac) GetRouterMacAddress() string {
	if m != nil {
		return m.RouterMacAddress
	}
	return ""
}

func (m *L2VpnEvpnMac) GetMacFlushRequested() uint32 {
	if m != nil {
		return m.MacFlushRequested
	}
	return 0
}

func (m *L2VpnEvpnMac) GetMacFlushReceived() uint32 {
	if m != nil {
		return m.MacFlushReceived
	}
	return 0
}

func (m *L2VpnEvpnMac) GetInternalLabel() uint32 {
	if m != nil {
		return m.InternalLabel
	}
	return 0
}

func (m *L2VpnEvpnMac) GetResolved() bool {
	if m != nil {
		return m.Resolved
	}
	return false
}

func (m *L2VpnEvpnMac) GetLocalIsStatic() bool {
	if m != nil {
		return m.LocalIsStatic
	}
	return false
}

func (m *L2VpnEvpnMac) GetRemoteIsStatic() bool {
	if m != nil {
		return m.RemoteIsStatic
	}
	return false
}

func init() {
	proto.RegisterType((*L2VpnEvpnMac_KEYS)(nil), "cisco_ios_xr_evpn_oper.evpn.standby.evi_detail.evi_children.macs.mac.l2vpn_evpn_mac_KEYS")
	proto.RegisterType((*L2VpnEvpnEviSummary)(nil), "cisco_ios_xr_evpn_oper.evpn.standby.evi_detail.evi_children.macs.mac.l2vpn_evpn_evi_summary")
	proto.RegisterType((*L2VpnLabelPathBuffer)(nil), "cisco_ios_xr_evpn_oper.evpn.standby.evi_detail.evi_children.macs.mac.l2vpn_label_path_buffer")
	proto.RegisterType((*L2VpnEvpnMac)(nil), "cisco_ios_xr_evpn_oper.evpn.standby.evi_detail.evi_children.macs.mac.l2vpn_evpn_mac")
}

func init() { proto.RegisterFile("l2vpn_evpn_mac.proto", fileDescriptor_3f7d8f00693a691d) }

var fileDescriptor_3f7d8f00693a691d = []byte{
	// 932 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x55, 0x6d, 0x6f, 0x1b, 0x45,
	0x10, 0x96, 0x49, 0x69, 0x93, 0xf1, 0x4b, 0xdd, 0x2d, 0xd0, 0x03, 0x04, 0x75, 0xad, 0x80, 0x0c,
	0xaa, 0xfc, 0x21, 0x01, 0xca, 0x3b, 0x34, 0xd4, 0xa5, 0x26, 0x49, 0x15, 0x5d, 0x22, 0x14, 0x24,
	0xd0, 0x6a, 0x7d, 0x37, 0xb1, 0x57, 0xdc, 0xed, 0x5e, 0x76, 0xf7, 0xa2, 0xf8, 0x0b, 0x12, 0xff,
	0x82, 0x5f, 0xc0, 0x67, 0x7e, 0x07, 0xbf, 0x0a, 0xcd, 0xee, 0xdd, 0xd9, 0x16, 0xd0, 0x4f, 0xfd,
	0x62, 0xdd, 0x3e, 0xf3, 0x68, 0xf6, 0x99, 0x99, 0x67, 0xc7, 0xf0, 0x5a, 0xb6, 0x77, 0x55, 0x28,
	0x8e, 0xf4, 0x93, 0x8b, 0x64, 0x5c, 0x18, 0xed, 0x34, 0x7b, 0x92, 0x48, 0x9b, 0x68, 0x2e, 0xb5,
	0xe5, 0xd7, 0x26, 0x04, 0x75, 0x81, 0x66, 0x4c, 0x5f, 0x63, 0xeb, 0x84, 0x4a, 0x67, 0xcb, 0x31,
	0x5e, 0x49, 0x9e, 0xa2, 0x13, 0x32, 0xf3, 0x9f, 0xc9, 0x42, 0x66, 0xa9, 0x41, 0x35, 0xce, 0x45,
	0x62, 0xe9, 0x67, 0xf8, 0x57, 0x0b, 0xee, 0x6e, 0xa6, 0xe7, 0x87, 0x93, 0x9f, 0x4e, 0x59, 0x1f,
	0xb6, 0xf0, 0x4a, 0x46, 0xad, 0x41, 0x6b, 0xd4, 0x8d, 0xe9, 0x93, 0xed, 0x42, 0x17, 0x55, 0x22,
	0x0a, 0x5b, 0x66, 0xc2, 0x49, 0xad, 0xa2, 0x57, 0x7c, 0x6c, 0x13, 0x64, 0x0f, 0xa0, 0x83, 0x6e,
	0x81, 0x46, 0xa1, 0xe3, 0x4e, 0xcc, 0xa3, 0x2d, 0x4f, 0x6a, 0xd7, 0xd8, 0x99, 0x98, 0xb3, 0xfb,
	0xd0, 0xa6, 0x6b, 0x44, 0x9a, 0x1a, 0xb4, 0x36, 0xba, 0x31, 0x68, 0x8d, 0x76, 0x62, 0xc8, 0x45,
	0xf2, 0x38, 0x20, 0xec, 0x1d, 0x00, 0x59, 0x34, 0xf1, 0x57, 0x7d, 0x7c, 0x47, 0x16, 0x55, 0x78,
	0xf8, 0x47, 0x0b, 0xde, 0x58, 0x93, 0x4c, 0x75, 0xd9, 0x32, 0xcf, 0x85, 0x59, 0xb2, 0xf7, 0xe1,
	0x76, 0x73, 0x3b, 0xc5, 0x64, 0x5a, 0x55, 0xd0, 0xad, 0xe1, 0x1f, 0x0b, 0x35, 0x4d, 0xd9, 0x07,
	0xd0, 0xdf, 0x90, 0xcd, 0xaf, 0x4d, 0x55, 0xce, 0xed, 0x0d, 0xfc, 0xdc, 0xb0, 0x7b, 0x70, 0x6b,
	0x96, 0x72, 0x25, 0x72, 0xf4, 0xb5, 0xec, 0xc4, 0x37, 0x67, 0xe9, 0x73, 0x91, 0x23, 0x63, 0x70,
	0xc3, 0x2d, 0x0b, 0xac, 0xf4, 0xfb, 0xef, 0xe1, 0x9f, 0x2d, 0xb8, 0x17, 0xa4, 0x65, 0x62, 0x86,
	0x19, 0x2f, 0x84, 0x5b, 0xf0, 0x59, 0x79, 0x71, 0x81, 0x86, 0x3d, 0x04, 0xe6, 0x4a, 0xa5, 0x30,
	0xe3, 0xa8, 0xd2, 0x42, 0x4b, 0xe5, 0x56, 0xf2, 0xfa, 0x21, 0x32, 0xa9, 0x02, 0xd3, 0x94, 0xbd,
	0x09, 0xdb, 0x0a, 0xaf, 0x1d, 0x5f, 0xe8, 0xc2, 0x2b, 0xdb, 0x89, 0x6f, 0xd1, 0xf9, 0x99, 0x2e,
	0xa8, 0xc5, 0xba, 0x74, 0x45, 0xe9, 0xc2, 0x25, 0x75, 0x8b, 0x03, 0x76, 0x44, 0x10, 0xb5, 0xd8,
	0x1a, 0x87, 0x3c, 0xa4, 0xad, 0x5b, 0x4c, 0xd0, 0x99, 0x47, 0x86, 0x7f, 0x03, 0xf4, 0x36, 0xc7,
	0xce, 0x7e, 0x6f, 0x41, 0xd7, 0x1f, 0xa4, 0x22, 0xf7, 0x24, 0x18, 0xed, 0x0d, 0x5a, 0xa3, 0xf6,
	0xde, 0xcf, 0xe3, 0x97, 0x61, 0xb4, 0xf1, 0x7f, 0x4f, 0x2c, 0xee, 0x10, 0x32, 0xad, 0x6e, 0xdc,
	0x98, 0x9f, 0x13, 0x73, 0x1a, 0xcb, 0xfe, 0xe6, 0xfc, 0xce, 0xc4, 0xfc, 0xdc, 0xb0, 0x5d, 0xe8,
	0xad, 0x59, 0x88, 0x68, 0x1f, 0xf9, 0x12, 0x3b, 0x2b, 0x17, 0x9d, 0x1b, 0x36, 0x84, 0xee, 0xca,
	0x47, 0x44, 0xfa, 0xd8, 0x93, 0xda, 0x8d, 0x95, 0xce, 0x0d, 0x75, 0x2a, 0xd3, 0x89, 0xc8, 0xaa,
	0x5e, 0x7e, 0xe2, 0x6f, 0x03, 0x0f, 0x85, 0x56, 0xbe, 0x0d, 0x3b, 0xaa, 0xcc, 0xfd, 0x24, 0x6d,
	0xf4, 0xc8, 0x87, 0xb7, 0x55, 0x99, 0x9f, 0xd0, 0x99, 0xfd, 0x06, 0xed, 0xb5, 0x11, 0x47, 0x9f,
	0x0e, 0xb6, 0x46, 0xed, 0xbd, 0x5f, 0x5e, 0x66, 0xc3, 0xfe, 0xe5, 0xa3, 0x18, 0xe8, 0x70, 0x10,
	0x3c, 0x35, 0x80, 0x8e, 0xb4, 0x3c, 0x14, 0x90, 0x8b, 0x24, 0xfa, 0x6c, 0xd0, 0x1a, 0x6d, 0xc7,
	0x20, 0xed, 0x11, 0x41, 0xc7, 0x22, 0xa1, 0x4e, 0x49, 0xcb, 0x0b, 0xa3, 0xaf, 0x97, 0x1c, 0x95,
	0x33, 0xcb, 0xe8, 0x73, 0xcf, 0xe9, 0x48, 0x7b, 0x42, 0xe0, 0x84, 0x30, 0xdf, 0x29, 0xcb, 0x0d,
	0xe6, 0xda, 0xa1, 0x4f, 0xf4, 0x85, 0x27, 0xb5, 0xa5, 0x8d, 0x3d, 0x46, 0x99, 0xc8, 0x53, 0x5a,
	0x73, 0x72, 0x21, 0x99, 0xf2, 0xcb, 0xca, 0x53, 0x5a, 0x3f, 0x0f, 0x08, 0xf9, 0x52, 0x16, 0x6a,
	0xd1, 0x3c, 0xdc, 0xaf, 0xea, 0x6e, 0xab, 0x45, 0xfd, 0xb2, 0xa7, 0xf0, 0x20, 0x88, 0x6d, 0xa6,
	0x6c, 0x71, 0x9e, 0xa3, 0x7f, 0x0a, 0xa8, 0x9c, 0xbc, 0x90, 0x68, 0xa2, 0xaf, 0x07, 0x5b, 0xa3,
	0x6e, 0xfc, 0xae, 0x27, 0x4e, 0x2a, 0xde, 0x69, 0xa0, 0x4d, 0x1b, 0x16, 0x3b, 0x84, 0x61, 0xa5,
	0xf7, 0x45, 0xb9, 0xbe, 0xf1, 0xb9, 0xee, 0x07, 0xe6, 0xff, 0x27, 0x1b, 0x40, 0x07, 0xad, 0xe4,
	0x85, 0x36, 0x8e, 0xff, 0x8a, 0xcb, 0xe8, 0xdb, 0x60, 0x03, 0xb4, 0xf2, 0x44, 0x1b, 0x77, 0x88,
	0x4b, 0x36, 0x82, 0x7e, 0xa5, 0x9c, 0xf6, 0x03, 0xf7, 0x2f, 0xff, 0xb1, 0x67, 0xf5, 0x82, 0x50,
	0x82, 0xcf, 0x96, 0x05, 0xb2, 0x0f, 0xe1, 0x4e, 0x2d, 0x6c, 0x45, 0x3d, 0x08, 0xcb, 0xa5, 0xd2,
	0xd1, 0x70, 0x1f, 0x41, 0x94, 0xa1, 0x30, 0x0a, 0x53, 0x3e, 0x33, 0x32, 0x9d, 0x63, 0x90, 0xe0,
	0xb7, 0xcd, 0x77, 0xbe, 0x7d, 0xaf, 0x57, 0xf1, 0x03, 0x1f, 0x26, 0x35, 0x7e, 0xf9, 0x0c, 0xa0,
	0x13, 0xe4, 0x58, 0xbc, 0xa4, 0x35, 0xf2, 0x64, 0xcd, 0xb7, 0xa7, 0x78, 0x39, 0x4d, 0x69, 0xa4,
	0x95, 0x8c, 0x8a, 0x32, 0x09, 0x6b, 0x22, 0x80, 0x81, 0xb3, 0x0b, 0xbd, 0xca, 0xfc, 0xfb, 0x95,
	0xff, 0x9f, 0x7a, 0x52, 0xc8, 0x7d, 0xb4, 0x1f, 0x5e, 0xc0, 0x43, 0x60, 0x46, 0x97, 0x0e, 0x0d,
	0x5f, 0x5f, 0xdb, 0xdf, 0x7b, 0x79, 0xfd, 0x10, 0x39, 0x5e, 0x2d, 0xef, 0x31, 0xdc, 0x25, 0xda,
	0x45, 0x56, 0xda, 0x05, 0x37, 0x78, 0x59, 0xa2, 0x75, 0x98, 0x46, 0xcf, 0x7c, 0xe2, 0x3b, 0xb9,
	0x48, 0x9e, 0x52, 0x24, 0xae, 0x03, 0x94, 0x7d, 0x9d, 0x9f, 0xa0, 0xbc, 0xc2, 0x34, 0x9a, 0x86,
	0xb5, 0xb8, 0xa2, 0x07, 0x9c, 0xbd, 0x07, 0x3d, 0xa9, 0x1c, 0x1a, 0xd5, 0xbc, 0xd8, 0x1f, 0xc2,
	0x7e, 0xa8, 0xd1, 0x20, 0xf9, 0x2d, 0xd8, 0x36, 0x68, 0x75, 0x46, 0xa9, 0x0e, 0xbd, 0x95, 0x9b,
	0x33, 0xed, 0x98, 0x50, 0xb4, 0xb4, 0xdc, 0x3a, 0xe1, 0x64, 0x12, 0x1d, 0x79, 0x4a, 0xd7, 0xc3,
	0x53, 0x7b, 0xea, 0x41, 0x9a, 0x78, 0xd5, 0xc0, 0x15, 0xf1, 0xd8, 0x13, 0x7b, 0x01, 0xaf, 0x99,
	0xb3, 0x9b, 0xfe, 0x0f, 0x79, 0xff, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x7e, 0xd8, 0xe0, 0xc1,
	0xa8, 0x07, 0x00, 0x00,
}
