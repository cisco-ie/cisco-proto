/*
Copyright 2019 Cisco Systems

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: l2vpn_evpn_igmp.proto

package cisco_ios_xr_evpn_oper_evpn_standby_igmps_igmp

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type L2VpnEvpnIgmp_KEYS struct {
	IsLeave              uint32   `protobuf:"varint,1,opt,name=is_leave,json=isLeave,proto3" json:"is_leave,omitempty"`
	Bpxcid               uint32   `protobuf:"varint,2,opt,name=bpxcid,proto3" json:"bpxcid,omitempty"`
	Evibd                uint32   `protobuf:"varint,3,opt,name=evibd,proto3" json:"evibd,omitempty"`
	SrcIp                string   `protobuf:"bytes,4,opt,name=src_ip,json=srcIp,proto3" json:"src_ip,omitempty"`
	GrpIp                string   `protobuf:"bytes,5,opt,name=grp_ip,json=grpIp,proto3" json:"grp_ip,omitempty"`
	Esi1                 string   `protobuf:"bytes,6,opt,name=esi1,proto3" json:"esi1,omitempty"`
	Esi2                 string   `protobuf:"bytes,7,opt,name=esi2,proto3" json:"esi2,omitempty"`
	Esi3                 string   `protobuf:"bytes,8,opt,name=esi3,proto3" json:"esi3,omitempty"`
	Esi4                 string   `protobuf:"bytes,9,opt,name=esi4,proto3" json:"esi4,omitempty"`
	Esi5                 string   `protobuf:"bytes,10,opt,name=esi5,proto3" json:"esi5,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *L2VpnEvpnIgmp_KEYS) Reset()         { *m = L2VpnEvpnIgmp_KEYS{} }
func (m *L2VpnEvpnIgmp_KEYS) String() string { return proto.CompactTextString(m) }
func (*L2VpnEvpnIgmp_KEYS) ProtoMessage()    {}
func (*L2VpnEvpnIgmp_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_7fe6127b9f2086ac, []int{0}
}

func (m *L2VpnEvpnIgmp_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2VpnEvpnIgmp_KEYS.Unmarshal(m, b)
}
func (m *L2VpnEvpnIgmp_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2VpnEvpnIgmp_KEYS.Marshal(b, m, deterministic)
}
func (m *L2VpnEvpnIgmp_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2VpnEvpnIgmp_KEYS.Merge(m, src)
}
func (m *L2VpnEvpnIgmp_KEYS) XXX_Size() int {
	return xxx_messageInfo_L2VpnEvpnIgmp_KEYS.Size(m)
}
func (m *L2VpnEvpnIgmp_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_L2VpnEvpnIgmp_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_L2VpnEvpnIgmp_KEYS proto.InternalMessageInfo

func (m *L2VpnEvpnIgmp_KEYS) GetIsLeave() uint32 {
	if m != nil {
		return m.IsLeave
	}
	return 0
}

func (m *L2VpnEvpnIgmp_KEYS) GetBpxcid() uint32 {
	if m != nil {
		return m.Bpxcid
	}
	return 0
}

func (m *L2VpnEvpnIgmp_KEYS) GetEvibd() uint32 {
	if m != nil {
		return m.Evibd
	}
	return 0
}

func (m *L2VpnEvpnIgmp_KEYS) GetSrcIp() string {
	if m != nil {
		return m.SrcIp
	}
	return ""
}

func (m *L2VpnEvpnIgmp_KEYS) GetGrpIp() string {
	if m != nil {
		return m.GrpIp
	}
	return ""
}

func (m *L2VpnEvpnIgmp_KEYS) GetEsi1() string {
	if m != nil {
		return m.Esi1
	}
	return ""
}

func (m *L2VpnEvpnIgmp_KEYS) GetEsi2() string {
	if m != nil {
		return m.Esi2
	}
	return ""
}

func (m *L2VpnEvpnIgmp_KEYS) GetEsi3() string {
	if m != nil {
		return m.Esi3
	}
	return ""
}

func (m *L2VpnEvpnIgmp_KEYS) GetEsi4() string {
	if m != nil {
		return m.Esi4
	}
	return ""
}

func (m *L2VpnEvpnIgmp_KEYS) GetEsi5() string {
	if m != nil {
		return m.Esi5
	}
	return ""
}

type L2VpnEthernet struct {
	XconnectTags         uint32   `protobuf:"varint,1,opt,name=xconnect_tags,json=xconnectTags,proto3" json:"xconnect_tags,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *L2VpnEthernet) Reset()         { *m = L2VpnEthernet{} }
func (m *L2VpnEthernet) String() string { return proto.CompactTextString(m) }
func (*L2VpnEthernet) ProtoMessage()    {}
func (*L2VpnEthernet) Descriptor() ([]byte, []int) {
	return fileDescriptor_7fe6127b9f2086ac, []int{1}
}

func (m *L2VpnEthernet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2VpnEthernet.Unmarshal(m, b)
}
func (m *L2VpnEthernet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2VpnEthernet.Marshal(b, m, deterministic)
}
func (m *L2VpnEthernet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2VpnEthernet.Merge(m, src)
}
func (m *L2VpnEthernet) XXX_Size() int {
	return xxx_messageInfo_L2VpnEthernet.Size(m)
}
func (m *L2VpnEthernet) XXX_DiscardUnknown() {
	xxx_messageInfo_L2VpnEthernet.DiscardUnknown(m)
}

var xxx_messageInfo_L2VpnEthernet proto.InternalMessageInfo

func (m *L2VpnEthernet) GetXconnectTags() uint32 {
	if m != nil {
		return m.XconnectTags
	}
	return 0
}

type L2VpnEfpRange struct {
	Lower                uint32   `protobuf:"varint,1,opt,name=lower,proto3" json:"lower,omitempty"`
	Upper                uint32   `protobuf:"varint,2,opt,name=upper,proto3" json:"upper,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *L2VpnEfpRange) Reset()         { *m = L2VpnEfpRange{} }
func (m *L2VpnEfpRange) String() string { return proto.CompactTextString(m) }
func (*L2VpnEfpRange) ProtoMessage()    {}
func (*L2VpnEfpRange) Descriptor() ([]byte, []int) {
	return fileDescriptor_7fe6127b9f2086ac, []int{2}
}

func (m *L2VpnEfpRange) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2VpnEfpRange.Unmarshal(m, b)
}
func (m *L2VpnEfpRange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2VpnEfpRange.Marshal(b, m, deterministic)
}
func (m *L2VpnEfpRange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2VpnEfpRange.Merge(m, src)
}
func (m *L2VpnEfpRange) XXX_Size() int {
	return xxx_messageInfo_L2VpnEfpRange.Size(m)
}
func (m *L2VpnEfpRange) XXX_DiscardUnknown() {
	xxx_messageInfo_L2VpnEfpRange.DiscardUnknown(m)
}

var xxx_messageInfo_L2VpnEfpRange proto.InternalMessageInfo

func (m *L2VpnEfpRange) GetLower() uint32 {
	if m != nil {
		return m.Lower
	}
	return 0
}

func (m *L2VpnEfpRange) GetUpper() uint32 {
	if m != nil {
		return m.Upper
	}
	return 0
}

type L2VpnVlan struct {
	XconnectTags         uint32           `protobuf:"varint,1,opt,name=xconnect_tags,json=xconnectTags,proto3" json:"xconnect_tags,omitempty"`
	VlanRewriteTag       uint32           `protobuf:"varint,2,opt,name=vlan_rewrite_tag,json=vlanRewriteTag,proto3" json:"vlan_rewrite_tag,omitempty"`
	SimpleEfp            uint32           `protobuf:"varint,3,opt,name=simple_efp,json=simpleEfp,proto3" json:"simple_efp,omitempty"`
	EncapsulationType    uint32           `protobuf:"varint,4,opt,name=encapsulation_type,json=encapsulationType,proto3" json:"encapsulation_type,omitempty"`
	OuterTag             uint32           `protobuf:"varint,5,opt,name=outer_tag,json=outerTag,proto3" json:"outer_tag,omitempty"`
	VlanRange            []*L2VpnEfpRange `protobuf:"bytes,6,rep,name=vlan_range,json=vlanRange,proto3" json:"vlan_range,omitempty"`
	RewriteTag           []uint32         `protobuf:"varint,7,rep,packed,name=rewrite_tag,json=rewriteTag,proto3" json:"rewrite_tag,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *L2VpnVlan) Reset()         { *m = L2VpnVlan{} }
func (m *L2VpnVlan) String() string { return proto.CompactTextString(m) }
func (*L2VpnVlan) ProtoMessage()    {}
func (*L2VpnVlan) Descriptor() ([]byte, []int) {
	return fileDescriptor_7fe6127b9f2086ac, []int{3}
}

func (m *L2VpnVlan) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2VpnVlan.Unmarshal(m, b)
}
func (m *L2VpnVlan) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2VpnVlan.Marshal(b, m, deterministic)
}
func (m *L2VpnVlan) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2VpnVlan.Merge(m, src)
}
func (m *L2VpnVlan) XXX_Size() int {
	return xxx_messageInfo_L2VpnVlan.Size(m)
}
func (m *L2VpnVlan) XXX_DiscardUnknown() {
	xxx_messageInfo_L2VpnVlan.DiscardUnknown(m)
}

var xxx_messageInfo_L2VpnVlan proto.InternalMessageInfo

func (m *L2VpnVlan) GetXconnectTags() uint32 {
	if m != nil {
		return m.XconnectTags
	}
	return 0
}

func (m *L2VpnVlan) GetVlanRewriteTag() uint32 {
	if m != nil {
		return m.VlanRewriteTag
	}
	return 0
}

func (m *L2VpnVlan) GetSimpleEfp() uint32 {
	if m != nil {
		return m.SimpleEfp
	}
	return 0
}

func (m *L2VpnVlan) GetEncapsulationType() uint32 {
	if m != nil {
		return m.EncapsulationType
	}
	return 0
}

func (m *L2VpnVlan) GetOuterTag() uint32 {
	if m != nil {
		return m.OuterTag
	}
	return 0
}

func (m *L2VpnVlan) GetVlanRange() []*L2VpnEfpRange {
	if m != nil {
		return m.VlanRange
	}
	return nil
}

func (m *L2VpnVlan) GetRewriteTag() []uint32 {
	if m != nil {
		return m.RewriteTag
	}
	return nil
}

type L2VpnTdmOption struct {
	PayloadBytes         uint32   `protobuf:"varint,1,opt,name=payload_bytes,json=payloadBytes,proto3" json:"payload_bytes,omitempty"`
	BitRate              uint32   `protobuf:"varint,2,opt,name=bit_rate,json=bitRate,proto3" json:"bit_rate,omitempty"`
	Rtp                  string   `protobuf:"bytes,3,opt,name=rtp,proto3" json:"rtp,omitempty"`
	TimestampMode        string   `protobuf:"bytes,4,opt,name=timestamp_mode,json=timestampMode,proto3" json:"timestamp_mode,omitempty"`
	SignallingPackets    uint32   `protobuf:"varint,5,opt,name=signalling_packets,json=signallingPackets,proto3" json:"signalling_packets,omitempty"`
	Cas                  uint32   `protobuf:"varint,6,opt,name=cas,proto3" json:"cas,omitempty"`
	RtpHeaderPayloadType uint32   `protobuf:"varint,7,opt,name=rtp_header_payload_type,json=rtpHeaderPayloadType,proto3" json:"rtp_header_payload_type,omitempty"`
	TimestampClockFreq   uint32   `protobuf:"varint,8,opt,name=timestamp_clock_freq,json=timestampClockFreq,proto3" json:"timestamp_clock_freq,omitempty"`
	Ssrc                 uint32   `protobuf:"varint,9,opt,name=ssrc,proto3" json:"ssrc,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *L2VpnTdmOption) Reset()         { *m = L2VpnTdmOption{} }
func (m *L2VpnTdmOption) String() string { return proto.CompactTextString(m) }
func (*L2VpnTdmOption) ProtoMessage()    {}
func (*L2VpnTdmOption) Descriptor() ([]byte, []int) {
	return fileDescriptor_7fe6127b9f2086ac, []int{4}
}

func (m *L2VpnTdmOption) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2VpnTdmOption.Unmarshal(m, b)
}
func (m *L2VpnTdmOption) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2VpnTdmOption.Marshal(b, m, deterministic)
}
func (m *L2VpnTdmOption) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2VpnTdmOption.Merge(m, src)
}
func (m *L2VpnTdmOption) XXX_Size() int {
	return xxx_messageInfo_L2VpnTdmOption.Size(m)
}
func (m *L2VpnTdmOption) XXX_DiscardUnknown() {
	xxx_messageInfo_L2VpnTdmOption.DiscardUnknown(m)
}

var xxx_messageInfo_L2VpnTdmOption proto.InternalMessageInfo

func (m *L2VpnTdmOption) GetPayloadBytes() uint32 {
	if m != nil {
		return m.PayloadBytes
	}
	return 0
}

func (m *L2VpnTdmOption) GetBitRate() uint32 {
	if m != nil {
		return m.BitRate
	}
	return 0
}

func (m *L2VpnTdmOption) GetRtp() string {
	if m != nil {
		return m.Rtp
	}
	return ""
}

func (m *L2VpnTdmOption) GetTimestampMode() string {
	if m != nil {
		return m.TimestampMode
	}
	return ""
}

func (m *L2VpnTdmOption) GetSignallingPackets() uint32 {
	if m != nil {
		return m.SignallingPackets
	}
	return 0
}

func (m *L2VpnTdmOption) GetCas() uint32 {
	if m != nil {
		return m.Cas
	}
	return 0
}

func (m *L2VpnTdmOption) GetRtpHeaderPayloadType() uint32 {
	if m != nil {
		return m.RtpHeaderPayloadType
	}
	return 0
}

func (m *L2VpnTdmOption) GetTimestampClockFreq() uint32 {
	if m != nil {
		return m.TimestampClockFreq
	}
	return 0
}

func (m *L2VpnTdmOption) GetSsrc() uint32 {
	if m != nil {
		return m.Ssrc
	}
	return 0
}

type L2VpnTdm struct {
	TimeslotGroup        string          `protobuf:"bytes,1,opt,name=timeslot_group,json=timeslotGroup,proto3" json:"timeslot_group,omitempty"`
	TimeslotRate         uint32          `protobuf:"varint,2,opt,name=timeslot_rate,json=timeslotRate,proto3" json:"timeslot_rate,omitempty"`
	TdmMode              string          `protobuf:"bytes,3,opt,name=tdm_mode,json=tdmMode,proto3" json:"tdm_mode,omitempty"`
	TdmOptions           *L2VpnTdmOption `protobuf:"bytes,4,opt,name=tdm_options,json=tdmOptions,proto3" json:"tdm_options,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *L2VpnTdm) Reset()         { *m = L2VpnTdm{} }
func (m *L2VpnTdm) String() string { return proto.CompactTextString(m) }
func (*L2VpnTdm) ProtoMessage()    {}
func (*L2VpnTdm) Descriptor() ([]byte, []int) {
	return fileDescriptor_7fe6127b9f2086ac, []int{5}
}

func (m *L2VpnTdm) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2VpnTdm.Unmarshal(m, b)
}
func (m *L2VpnTdm) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2VpnTdm.Marshal(b, m, deterministic)
}
func (m *L2VpnTdm) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2VpnTdm.Merge(m, src)
}
func (m *L2VpnTdm) XXX_Size() int {
	return xxx_messageInfo_L2VpnTdm.Size(m)
}
func (m *L2VpnTdm) XXX_DiscardUnknown() {
	xxx_messageInfo_L2VpnTdm.DiscardUnknown(m)
}

var xxx_messageInfo_L2VpnTdm proto.InternalMessageInfo

func (m *L2VpnTdm) GetTimeslotGroup() string {
	if m != nil {
		return m.TimeslotGroup
	}
	return ""
}

func (m *L2VpnTdm) GetTimeslotRate() uint32 {
	if m != nil {
		return m.TimeslotRate
	}
	return 0
}

func (m *L2VpnTdm) GetTdmMode() string {
	if m != nil {
		return m.TdmMode
	}
	return ""
}

func (m *L2VpnTdm) GetTdmOptions() *L2VpnTdmOption {
	if m != nil {
		return m.TdmOptions
	}
	return nil
}

type L2VpnAtm struct {
	MaximumNumberCellsPacked   uint32   `protobuf:"varint,1,opt,name=maximum_number_cells_packed,json=maximumNumberCellsPacked,proto3" json:"maximum_number_cells_packed,omitempty"`
	MaximumNumberCellsUnPacked uint32   `protobuf:"varint,2,opt,name=maximum_number_cells_un_packed,json=maximumNumberCellsUnPacked,proto3" json:"maximum_number_cells_un_packed,omitempty"`
	AtmMode                    string   `protobuf:"bytes,3,opt,name=atm_mode,json=atmMode,proto3" json:"atm_mode,omitempty"`
	Vpi                        uint32   `protobuf:"varint,4,opt,name=vpi,proto3" json:"vpi,omitempty"`
	Vci                        uint32   `protobuf:"varint,5,opt,name=vci,proto3" json:"vci,omitempty"`
	XXX_NoUnkeyedLiteral       struct{} `json:"-"`
	XXX_unrecognized           []byte   `json:"-"`
	XXX_sizecache              int32    `json:"-"`
}

func (m *L2VpnAtm) Reset()         { *m = L2VpnAtm{} }
func (m *L2VpnAtm) String() string { return proto.CompactTextString(m) }
func (*L2VpnAtm) ProtoMessage()    {}
func (*L2VpnAtm) Descriptor() ([]byte, []int) {
	return fileDescriptor_7fe6127b9f2086ac, []int{6}
}

func (m *L2VpnAtm) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2VpnAtm.Unmarshal(m, b)
}
func (m *L2VpnAtm) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2VpnAtm.Marshal(b, m, deterministic)
}
func (m *L2VpnAtm) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2VpnAtm.Merge(m, src)
}
func (m *L2VpnAtm) XXX_Size() int {
	return xxx_messageInfo_L2VpnAtm.Size(m)
}
func (m *L2VpnAtm) XXX_DiscardUnknown() {
	xxx_messageInfo_L2VpnAtm.DiscardUnknown(m)
}

var xxx_messageInfo_L2VpnAtm proto.InternalMessageInfo

func (m *L2VpnAtm) GetMaximumNumberCellsPacked() uint32 {
	if m != nil {
		return m.MaximumNumberCellsPacked
	}
	return 0
}

func (m *L2VpnAtm) GetMaximumNumberCellsUnPacked() uint32 {
	if m != nil {
		return m.MaximumNumberCellsUnPacked
	}
	return 0
}

func (m *L2VpnAtm) GetAtmMode() string {
	if m != nil {
		return m.AtmMode
	}
	return ""
}

func (m *L2VpnAtm) GetVpi() uint32 {
	if m != nil {
		return m.Vpi
	}
	return 0
}

func (m *L2VpnAtm) GetVci() uint32 {
	if m != nil {
		return m.Vci
	}
	return 0
}

type L2VpnFr struct {
	FrMode               string   `protobuf:"bytes,1,opt,name=fr_mode,json=frMode,proto3" json:"fr_mode,omitempty"`
	Dlci                 uint32   `protobuf:"varint,2,opt,name=dlci,proto3" json:"dlci,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *L2VpnFr) Reset()         { *m = L2VpnFr{} }
func (m *L2VpnFr) String() string { return proto.CompactTextString(m) }
func (*L2VpnFr) ProtoMessage()    {}
func (*L2VpnFr) Descriptor() ([]byte, []int) {
	return fileDescriptor_7fe6127b9f2086ac, []int{7}
}

func (m *L2VpnFr) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2VpnFr.Unmarshal(m, b)
}
func (m *L2VpnFr) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2VpnFr.Marshal(b, m, deterministic)
}
func (m *L2VpnFr) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2VpnFr.Merge(m, src)
}
func (m *L2VpnFr) XXX_Size() int {
	return xxx_messageInfo_L2VpnFr.Size(m)
}
func (m *L2VpnFr) XXX_DiscardUnknown() {
	xxx_messageInfo_L2VpnFr.DiscardUnknown(m)
}

var xxx_messageInfo_L2VpnFr proto.InternalMessageInfo

func (m *L2VpnFr) GetFrMode() string {
	if m != nil {
		return m.FrMode
	}
	return ""
}

func (m *L2VpnFr) GetDlci() uint32 {
	if m != nil {
		return m.Dlci
	}
	return 0
}

type ItemIflistIf struct {
	InterfaceName        string   `protobuf:"bytes,1,opt,name=interface_name,json=interfaceName,proto3" json:"interface_name,omitempty"`
	ReplicateStatus      string   `protobuf:"bytes,2,opt,name=replicate_status,json=replicateStatus,proto3" json:"replicate_status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ItemIflistIf) Reset()         { *m = ItemIflistIf{} }
func (m *ItemIflistIf) String() string { return proto.CompactTextString(m) }
func (*ItemIflistIf) ProtoMessage()    {}
func (*ItemIflistIf) Descriptor() ([]byte, []int) {
	return fileDescriptor_7fe6127b9f2086ac, []int{8}
}

func (m *ItemIflistIf) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ItemIflistIf.Unmarshal(m, b)
}
func (m *ItemIflistIf) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ItemIflistIf.Marshal(b, m, deterministic)
}
func (m *ItemIflistIf) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ItemIflistIf.Merge(m, src)
}
func (m *ItemIflistIf) XXX_Size() int {
	return xxx_messageInfo_ItemIflistIf.Size(m)
}
func (m *ItemIflistIf) XXX_DiscardUnknown() {
	xxx_messageInfo_ItemIflistIf.DiscardUnknown(m)
}

var xxx_messageInfo_ItemIflistIf proto.InternalMessageInfo

func (m *ItemIflistIf) GetInterfaceName() string {
	if m != nil {
		return m.InterfaceName
	}
	return ""
}

func (m *ItemIflistIf) GetReplicateStatus() string {
	if m != nil {
		return m.ReplicateStatus
	}
	return ""
}

type ItemIflistIfl struct {
	InterfaceListName    string          `protobuf:"bytes,1,opt,name=interface_list_name,json=interfaceListName,proto3" json:"interface_list_name,omitempty"`
	InterfaceListId      uint32          `protobuf:"varint,2,opt,name=interface_list_id,json=interfaceListId,proto3" json:"interface_list_id,omitempty"`
	Interface            []*ItemIflistIf `protobuf:"bytes,3,rep,name=interface,proto3" json:"interface,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *ItemIflistIfl) Reset()         { *m = ItemIflistIfl{} }
func (m *ItemIflistIfl) String() string { return proto.CompactTextString(m) }
func (*ItemIflistIfl) ProtoMessage()    {}
func (*ItemIflistIfl) Descriptor() ([]byte, []int) {
	return fileDescriptor_7fe6127b9f2086ac, []int{9}
}

func (m *ItemIflistIfl) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ItemIflistIfl.Unmarshal(m, b)
}
func (m *ItemIflistIfl) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ItemIflistIfl.Marshal(b, m, deterministic)
}
func (m *ItemIflistIfl) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ItemIflistIfl.Merge(m, src)
}
func (m *ItemIflistIfl) XXX_Size() int {
	return xxx_messageInfo_ItemIflistIfl.Size(m)
}
func (m *ItemIflistIfl) XXX_DiscardUnknown() {
	xxx_messageInfo_ItemIflistIfl.DiscardUnknown(m)
}

var xxx_messageInfo_ItemIflistIfl proto.InternalMessageInfo

func (m *ItemIflistIfl) GetInterfaceListName() string {
	if m != nil {
		return m.InterfaceListName
	}
	return ""
}

func (m *ItemIflistIfl) GetInterfaceListId() uint32 {
	if m != nil {
		return m.InterfaceListId
	}
	return 0
}

func (m *ItemIflistIfl) GetInterface() []*ItemIflistIf {
	if m != nil {
		return m.Interface
	}
	return nil
}

type L2VpnPwhe struct {
	IsValid              bool           `protobuf:"varint,1,opt,name=is_valid,json=isValid,proto3" json:"is_valid,omitempty"`
	InterfaceList        *ItemIflistIfl `protobuf:"bytes,2,opt,name=interface_list,json=interfaceList,proto3" json:"interface_list,omitempty"`
	InternalLabel        uint32         `protobuf:"varint,3,opt,name=internal_label,json=internalLabel,proto3" json:"internal_label,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *L2VpnPwhe) Reset()         { *m = L2VpnPwhe{} }
func (m *L2VpnPwhe) String() string { return proto.CompactTextString(m) }
func (*L2VpnPwhe) ProtoMessage()    {}
func (*L2VpnPwhe) Descriptor() ([]byte, []int) {
	return fileDescriptor_7fe6127b9f2086ac, []int{10}
}

func (m *L2VpnPwhe) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2VpnPwhe.Unmarshal(m, b)
}
func (m *L2VpnPwhe) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2VpnPwhe.Marshal(b, m, deterministic)
}
func (m *L2VpnPwhe) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2VpnPwhe.Merge(m, src)
}
func (m *L2VpnPwhe) XXX_Size() int {
	return xxx_messageInfo_L2VpnPwhe.Size(m)
}
func (m *L2VpnPwhe) XXX_DiscardUnknown() {
	xxx_messageInfo_L2VpnPwhe.DiscardUnknown(m)
}

var xxx_messageInfo_L2VpnPwhe proto.InternalMessageInfo

func (m *L2VpnPwhe) GetIsValid() bool {
	if m != nil {
		return m.IsValid
	}
	return false
}

func (m *L2VpnPwhe) GetInterfaceList() *ItemIflistIfl {
	if m != nil {
		return m.InterfaceList
	}
	return nil
}

func (m *L2VpnPwhe) GetInternalLabel() uint32 {
	if m != nil {
		return m.InternalLabel
	}
	return 0
}

type L2VpnInterfaceParams struct {
	Type                 string         `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Ethernet             *L2VpnEthernet `protobuf:"bytes,2,opt,name=ethernet,proto3" json:"ethernet,omitempty"`
	Vlan                 *L2VpnVlan     `protobuf:"bytes,3,opt,name=vlan,proto3" json:"vlan,omitempty"`
	Tdm                  *L2VpnTdm      `protobuf:"bytes,4,opt,name=tdm,proto3" json:"tdm,omitempty"`
	Atm                  *L2VpnAtm      `protobuf:"bytes,5,opt,name=atm,proto3" json:"atm,omitempty"`
	Fr                   *L2VpnFr       `protobuf:"bytes,6,opt,name=fr,proto3" json:"fr,omitempty"`
	PseudowireEther      *L2VpnPwhe     `protobuf:"bytes,7,opt,name=pseudowire_ether,json=pseudowireEther,proto3" json:"pseudowire_ether,omitempty"`
	PseudowireIw         *L2VpnPwhe     `protobuf:"bytes,8,opt,name=pseudowire_iw,json=pseudowireIw,proto3" json:"pseudowire_iw,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *L2VpnInterfaceParams) Reset()         { *m = L2VpnInterfaceParams{} }
func (m *L2VpnInterfaceParams) String() string { return proto.CompactTextString(m) }
func (*L2VpnInterfaceParams) ProtoMessage()    {}
func (*L2VpnInterfaceParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_7fe6127b9f2086ac, []int{11}
}

func (m *L2VpnInterfaceParams) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2VpnInterfaceParams.Unmarshal(m, b)
}
func (m *L2VpnInterfaceParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2VpnInterfaceParams.Marshal(b, m, deterministic)
}
func (m *L2VpnInterfaceParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2VpnInterfaceParams.Merge(m, src)
}
func (m *L2VpnInterfaceParams) XXX_Size() int {
	return xxx_messageInfo_L2VpnInterfaceParams.Size(m)
}
func (m *L2VpnInterfaceParams) XXX_DiscardUnknown() {
	xxx_messageInfo_L2VpnInterfaceParams.DiscardUnknown(m)
}

var xxx_messageInfo_L2VpnInterfaceParams proto.InternalMessageInfo

func (m *L2VpnInterfaceParams) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *L2VpnInterfaceParams) GetEthernet() *L2VpnEthernet {
	if m != nil {
		return m.Ethernet
	}
	return nil
}

func (m *L2VpnInterfaceParams) GetVlan() *L2VpnVlan {
	if m != nil {
		return m.Vlan
	}
	return nil
}

func (m *L2VpnInterfaceParams) GetTdm() *L2VpnTdm {
	if m != nil {
		return m.Tdm
	}
	return nil
}

func (m *L2VpnInterfaceParams) GetAtm() *L2VpnAtm {
	if m != nil {
		return m.Atm
	}
	return nil
}

func (m *L2VpnInterfaceParams) GetFr() *L2VpnFr {
	if m != nil {
		return m.Fr
	}
	return nil
}

func (m *L2VpnInterfaceParams) GetPseudowireEther() *L2VpnPwhe {
	if m != nil {
		return m.PseudowireEther
	}
	return nil
}

func (m *L2VpnInterfaceParams) GetPseudowireIw() *L2VpnPwhe {
	if m != nil {
		return m.PseudowireIw
	}
	return nil
}

type L2VpnInterface struct {
	Name                 string                `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Mtu                  uint32                `protobuf:"varint,2,opt,name=mtu,proto3" json:"mtu,omitempty"`
	PayloadBytes         uint32                `protobuf:"varint,3,opt,name=payload_bytes,json=payloadBytes,proto3" json:"payload_bytes,omitempty"`
	Parameters           *L2VpnInterfaceParams `protobuf:"bytes,4,opt,name=parameters,proto3" json:"parameters,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *L2VpnInterface) Reset()         { *m = L2VpnInterface{} }
func (m *L2VpnInterface) String() string { return proto.CompactTextString(m) }
func (*L2VpnInterface) ProtoMessage()    {}
func (*L2VpnInterface) Descriptor() ([]byte, []int) {
	return fileDescriptor_7fe6127b9f2086ac, []int{12}
}

func (m *L2VpnInterface) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2VpnInterface.Unmarshal(m, b)
}
func (m *L2VpnInterface) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2VpnInterface.Marshal(b, m, deterministic)
}
func (m *L2VpnInterface) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2VpnInterface.Merge(m, src)
}
func (m *L2VpnInterface) XXX_Size() int {
	return xxx_messageInfo_L2VpnInterface.Size(m)
}
func (m *L2VpnInterface) XXX_DiscardUnknown() {
	xxx_messageInfo_L2VpnInterface.DiscardUnknown(m)
}

var xxx_messageInfo_L2VpnInterface proto.InternalMessageInfo

func (m *L2VpnInterface) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *L2VpnInterface) GetMtu() uint32 {
	if m != nil {
		return m.Mtu
	}
	return 0
}

func (m *L2VpnInterface) GetPayloadBytes() uint32 {
	if m != nil {
		return m.PayloadBytes
	}
	return 0
}

func (m *L2VpnInterface) GetParameters() *L2VpnInterfaceParams {
	if m != nil {
		return m.Parameters
	}
	return nil
}

type EvpnIgmpSrcInfo struct {
	Type                 string          `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	LocalInfo            *L2VpnInterface `protobuf:"bytes,2,opt,name=local_info,json=localInfo,proto3" json:"local_info,omitempty"`
	RemoteInfo           string          `protobuf:"bytes,3,opt,name=remote_info,json=remoteInfo,proto3" json:"remote_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *EvpnIgmpSrcInfo) Reset()         { *m = EvpnIgmpSrcInfo{} }
func (m *EvpnIgmpSrcInfo) String() string { return proto.CompactTextString(m) }
func (*EvpnIgmpSrcInfo) ProtoMessage()    {}
func (*EvpnIgmpSrcInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_7fe6127b9f2086ac, []int{13}
}

func (m *EvpnIgmpSrcInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EvpnIgmpSrcInfo.Unmarshal(m, b)
}
func (m *EvpnIgmpSrcInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EvpnIgmpSrcInfo.Marshal(b, m, deterministic)
}
func (m *EvpnIgmpSrcInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EvpnIgmpSrcInfo.Merge(m, src)
}
func (m *EvpnIgmpSrcInfo) XXX_Size() int {
	return xxx_messageInfo_EvpnIgmpSrcInfo.Size(m)
}
func (m *EvpnIgmpSrcInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_EvpnIgmpSrcInfo.DiscardUnknown(m)
}

var xxx_messageInfo_EvpnIgmpSrcInfo proto.InternalMessageInfo

func (m *EvpnIgmpSrcInfo) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *EvpnIgmpSrcInfo) GetLocalInfo() *L2VpnInterface {
	if m != nil {
		return m.LocalInfo
	}
	return nil
}

func (m *EvpnIgmpSrcInfo) GetRemoteInfo() string {
	if m != nil {
		return m.RemoteInfo
	}
	return ""
}

type L2VpnEvpnEsNhBuffer struct {
	NextHop              string   `protobuf:"bytes,1,opt,name=next_hop,json=nextHop,proto3" json:"next_hop,omitempty"`
	DfDontPrempt         bool     `protobuf:"varint,2,opt,name=df_dont_prempt,json=dfDontPrempt,proto3" json:"df_dont_prempt,omitempty"`
	DfType               uint32   `protobuf:"varint,3,opt,name=df_type,json=dfType,proto3" json:"df_type,omitempty"`
	DfPref               uint32   `protobuf:"varint,4,opt,name=df_pref,json=dfPref,proto3" json:"df_pref,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *L2VpnEvpnEsNhBuffer) Reset()         { *m = L2VpnEvpnEsNhBuffer{} }
func (m *L2VpnEvpnEsNhBuffer) String() string { return proto.CompactTextString(m) }
func (*L2VpnEvpnEsNhBuffer) ProtoMessage()    {}
func (*L2VpnEvpnEsNhBuffer) Descriptor() ([]byte, []int) {
	return fileDescriptor_7fe6127b9f2086ac, []int{14}
}

func (m *L2VpnEvpnEsNhBuffer) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2VpnEvpnEsNhBuffer.Unmarshal(m, b)
}
func (m *L2VpnEvpnEsNhBuffer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2VpnEvpnEsNhBuffer.Marshal(b, m, deterministic)
}
func (m *L2VpnEvpnEsNhBuffer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2VpnEvpnEsNhBuffer.Merge(m, src)
}
func (m *L2VpnEvpnEsNhBuffer) XXX_Size() int {
	return xxx_messageInfo_L2VpnEvpnEsNhBuffer.Size(m)
}
func (m *L2VpnEvpnEsNhBuffer) XXX_DiscardUnknown() {
	xxx_messageInfo_L2VpnEvpnEsNhBuffer.DiscardUnknown(m)
}

var xxx_messageInfo_L2VpnEvpnEsNhBuffer proto.InternalMessageInfo

func (m *L2VpnEvpnEsNhBuffer) GetNextHop() string {
	if m != nil {
		return m.NextHop
	}
	return ""
}

func (m *L2VpnEvpnEsNhBuffer) GetDfDontPrempt() bool {
	if m != nil {
		return m.DfDontPrempt
	}
	return false
}

func (m *L2VpnEvpnEsNhBuffer) GetDfType() uint32 {
	if m != nil {
		return m.DfType
	}
	return 0
}

func (m *L2VpnEvpnEsNhBuffer) GetDfPref() uint32 {
	if m != nil {
		return m.DfPref
	}
	return 0
}

type L2VpnEvpnIgmp struct {
	EthernetSegmentIdentifier []uint32               `protobuf:"varint,50,rep,packed,name=ethernet_segment_identifier,json=ethernetSegmentIdentifier,proto3" json:"ethernet_segment_identifier,omitempty"`
	EthernetSegmentName       string                 `protobuf:"bytes,51,opt,name=ethernet_segment_name,json=ethernetSegmentName,proto3" json:"ethernet_segment_name,omitempty"`
	Evi                       uint32                 `protobuf:"varint,52,opt,name=evi,proto3" json:"evi,omitempty"`
	BdId                      uint32                 `protobuf:"varint,53,opt,name=bd_id,json=bdId,proto3" json:"bd_id,omitempty"`
	RouteType                 string                 `protobuf:"bytes,54,opt,name=route_type,json=routeType,proto3" json:"route_type,omitempty"`
	SourceAddr                string                 `protobuf:"bytes,55,opt,name=source_addr,json=sourceAddr,proto3" json:"source_addr,omitempty"`
	GroupAddr                 string                 `protobuf:"bytes,56,opt,name=group_addr,json=groupAddr,proto3" json:"group_addr,omitempty"`
	SourceInfo                *EvpnIgmpSrcInfo       `protobuf:"bytes,57,opt,name=source_info,json=sourceInfo,proto3" json:"source_info,omitempty"`
	EthernetTagId             uint32                 `protobuf:"varint,58,opt,name=ethernet_tag_id,json=ethernetTagId,proto3" json:"ethernet_tag_id,omitempty"`
	IgmpVersion               string                 `protobuf:"bytes,59,opt,name=igmp_version,json=igmpVersion,proto3" json:"igmp_version,omitempty"`
	IgmpGroupType             string                 `protobuf:"bytes,60,opt,name=igmp_group_type,json=igmpGroupType,proto3" json:"igmp_group_type,omitempty"`
	MaXResponseTime           uint32                 `protobuf:"varint,61,opt,name=ma_x_response_time,json=maXResponseTime,proto3" json:"ma_x_response_time,omitempty"`
	NextHop                   []*L2VpnEvpnEsNhBuffer `protobuf:"bytes,62,rep,name=next_hop,json=nextHop,proto3" json:"next_hop,omitempty"`
	Resolved                  bool                   `protobuf:"varint,63,opt,name=resolved,proto3" json:"resolved,omitempty"`
	XXX_NoUnkeyedLiteral      struct{}               `json:"-"`
	XXX_unrecognized          []byte                 `json:"-"`
	XXX_sizecache             int32                  `json:"-"`
}

func (m *L2VpnEvpnIgmp) Reset()         { *m = L2VpnEvpnIgmp{} }
func (m *L2VpnEvpnIgmp) String() string { return proto.CompactTextString(m) }
func (*L2VpnEvpnIgmp) ProtoMessage()    {}
func (*L2VpnEvpnIgmp) Descriptor() ([]byte, []int) {
	return fileDescriptor_7fe6127b9f2086ac, []int{15}
}

func (m *L2VpnEvpnIgmp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2VpnEvpnIgmp.Unmarshal(m, b)
}
func (m *L2VpnEvpnIgmp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2VpnEvpnIgmp.Marshal(b, m, deterministic)
}
func (m *L2VpnEvpnIgmp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2VpnEvpnIgmp.Merge(m, src)
}
func (m *L2VpnEvpnIgmp) XXX_Size() int {
	return xxx_messageInfo_L2VpnEvpnIgmp.Size(m)
}
func (m *L2VpnEvpnIgmp) XXX_DiscardUnknown() {
	xxx_messageInfo_L2VpnEvpnIgmp.DiscardUnknown(m)
}

var xxx_messageInfo_L2VpnEvpnIgmp proto.InternalMessageInfo

func (m *L2VpnEvpnIgmp) GetEthernetSegmentIdentifier() []uint32 {
	if m != nil {
		return m.EthernetSegmentIdentifier
	}
	return nil
}

func (m *L2VpnEvpnIgmp) GetEthernetSegmentName() string {
	if m != nil {
		return m.EthernetSegmentName
	}
	return ""
}

func (m *L2VpnEvpnIgmp) GetEvi() uint32 {
	if m != nil {
		return m.Evi
	}
	return 0
}

func (m *L2VpnEvpnIgmp) GetBdId() uint32 {
	if m != nil {
		return m.BdId
	}
	return 0
}

func (m *L2VpnEvpnIgmp) GetRouteType() string {
	if m != nil {
		return m.RouteType
	}
	return ""
}

func (m *L2VpnEvpnIgmp) GetSourceAddr() string {
	if m != nil {
		return m.SourceAddr
	}
	return ""
}

func (m *L2VpnEvpnIgmp) GetGroupAddr() string {
	if m != nil {
		return m.GroupAddr
	}
	return ""
}

func (m *L2VpnEvpnIgmp) GetSourceInfo() *EvpnIgmpSrcInfo {
	if m != nil {
		return m.SourceInfo
	}
	return nil
}

func (m *L2VpnEvpnIgmp) GetEthernetTagId() uint32 {
	if m != nil {
		return m.EthernetTagId
	}
	return 0
}

func (m *L2VpnEvpnIgmp) GetIgmpVersion() string {
	if m != nil {
		return m.IgmpVersion
	}
	return ""
}

func (m *L2VpnEvpnIgmp) GetIgmpGroupType() string {
	if m != nil {
		return m.IgmpGroupType
	}
	return ""
}

func (m *L2VpnEvpnIgmp) GetMaXResponseTime() uint32 {
	if m != nil {
		return m.MaXResponseTime
	}
	return 0
}

func (m *L2VpnEvpnIgmp) GetNextHop() []*L2VpnEvpnEsNhBuffer {
	if m != nil {
		return m.NextHop
	}
	return nil
}

func (m *L2VpnEvpnIgmp) GetResolved() bool {
	if m != nil {
		return m.Resolved
	}
	return false
}

func init() {
	proto.RegisterType((*L2VpnEvpnIgmp_KEYS)(nil), "cisco_ios_xr_evpn_oper.evpn.standby.igmps.igmp.l2vpn_evpn_igmp_KEYS")
	proto.RegisterType((*L2VpnEthernet)(nil), "cisco_ios_xr_evpn_oper.evpn.standby.igmps.igmp.l2vpn_ethernet")
	proto.RegisterType((*L2VpnEfpRange)(nil), "cisco_ios_xr_evpn_oper.evpn.standby.igmps.igmp.l2vpn_efp_range")
	proto.RegisterType((*L2VpnVlan)(nil), "cisco_ios_xr_evpn_oper.evpn.standby.igmps.igmp.l2vpn_vlan")
	proto.RegisterType((*L2VpnTdmOption)(nil), "cisco_ios_xr_evpn_oper.evpn.standby.igmps.igmp.l2vpn_tdm_option")
	proto.RegisterType((*L2VpnTdm)(nil), "cisco_ios_xr_evpn_oper.evpn.standby.igmps.igmp.l2vpn_tdm")
	proto.RegisterType((*L2VpnAtm)(nil), "cisco_ios_xr_evpn_oper.evpn.standby.igmps.igmp.l2vpn_atm")
	proto.RegisterType((*L2VpnFr)(nil), "cisco_ios_xr_evpn_oper.evpn.standby.igmps.igmp.l2vpn_fr")
	proto.RegisterType((*ItemIflistIf)(nil), "cisco_ios_xr_evpn_oper.evpn.standby.igmps.igmp.item_iflist_if")
	proto.RegisterType((*ItemIflistIfl)(nil), "cisco_ios_xr_evpn_oper.evpn.standby.igmps.igmp.item_iflist_ifl")
	proto.RegisterType((*L2VpnPwhe)(nil), "cisco_ios_xr_evpn_oper.evpn.standby.igmps.igmp.l2vpn_pwhe")
	proto.RegisterType((*L2VpnInterfaceParams)(nil), "cisco_ios_xr_evpn_oper.evpn.standby.igmps.igmp.l2vpn_interface_params")
	proto.RegisterType((*L2VpnInterface)(nil), "cisco_ios_xr_evpn_oper.evpn.standby.igmps.igmp.l2vpn_interface")
	proto.RegisterType((*EvpnIgmpSrcInfo)(nil), "cisco_ios_xr_evpn_oper.evpn.standby.igmps.igmp.evpn_igmp_src_info")
	proto.RegisterType((*L2VpnEvpnEsNhBuffer)(nil), "cisco_ios_xr_evpn_oper.evpn.standby.igmps.igmp.l2vpn_evpn_es_nh_buffer")
	proto.RegisterType((*L2VpnEvpnIgmp)(nil), "cisco_ios_xr_evpn_oper.evpn.standby.igmps.igmp.l2vpn_evpn_igmp")
}

func init() { proto.RegisterFile("l2vpn_evpn_igmp.proto", fileDescriptor_7fe6127b9f2086ac) }

var fileDescriptor_7fe6127b9f2086ac = []byte{
	// 1530 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x57, 0xdd, 0x8e, 0x1c, 0x39,
	0x15, 0x56, 0x4f, 0x67, 0xfa, 0xe7, 0xf4, 0xf4, 0xcc, 0xc4, 0x49, 0x36, 0x95, 0x8d, 0x60, 0x43,
	0xf1, 0xa3, 0x01, 0xc4, 0x08, 0x3a, 0x19, 0xf6, 0x07, 0x92, 0x85, 0x2c, 0xd9, 0x4d, 0x6b, 0x43,
	0x88, 0x2a, 0xc3, 0x0a, 0x10, 0x5a, 0xcb, 0x5d, 0x75, 0xaa, 0xc7, 0xda, 0xfa, 0x71, 0x6c, 0x77,
	0xcf, 0xcc, 0x3d, 0x97, 0x5c, 0xf0, 0x1a, 0xbc, 0x00, 0x4f, 0x80, 0x84, 0x10, 0xe2, 0x92, 0x07,
	0xe1, 0x0d, 0x90, 0x8f, 0x5d, 0xd5, 0x3d, 0x9d, 0x5c, 0x90, 0xde, 0x9b, 0x96, 0xeb, 0xf3, 0xf1,
	0x67, 0x9f, 0xcf, 0xc7, 0xe7, 0x9c, 0x86, 0x5b, 0xc5, 0x64, 0xa9, 0x2a, 0x8e, 0xee, 0x47, 0xce,
	0x4b, 0x75, 0xac, 0x74, 0x6d, 0x6b, 0x76, 0x9c, 0x4a, 0x93, 0xd6, 0x5c, 0xd6, 0x86, 0x5f, 0x68,
	0x3f, 0x5b, 0x2b, 0xd4, 0xc7, 0x6e, 0x74, 0x6c, 0xac, 0xa8, 0xb2, 0xd9, 0xe5, 0xb1, 0xb3, 0x37,
	0xf4, 0x1b, 0xff, 0xb7, 0x03, 0x37, 0x37, 0x98, 0xf8, 0xe7, 0x4f, 0x7e, 0xff, 0x92, 0xdd, 0x81,
	0x81, 0x34, 0xbc, 0x40, 0xb1, 0xc4, 0xa8, 0x73, 0xaf, 0x73, 0x34, 0x4e, 0xfa, 0xd2, 0x3c, 0x73,
	0x9f, 0xec, 0x1d, 0xe8, 0xcd, 0xd4, 0x45, 0x2a, 0xb3, 0x68, 0x87, 0x26, 0xc2, 0x17, 0xbb, 0x09,
	0xbb, 0xb8, 0x94, 0xb3, 0x2c, 0xea, 0x12, 0xec, 0x3f, 0xd8, 0x2d, 0xe8, 0x19, 0x9d, 0x72, 0xa9,
	0xa2, 0x6b, 0xf7, 0x3a, 0x47, 0xc3, 0x64, 0xd7, 0xe8, 0x74, 0xaa, 0x1c, 0x3c, 0xd7, 0xca, 0xc1,
	0xbb, 0x1e, 0x9e, 0x6b, 0x35, 0x55, 0x8c, 0xc1, 0x35, 0x34, 0xf2, 0x27, 0x51, 0x8f, 0x40, 0x1a,
	0x07, 0x6c, 0x12, 0xf5, 0x5b, 0x6c, 0x12, 0xb0, 0xfb, 0xd1, 0xa0, 0xc5, 0xee, 0x07, 0xec, 0x41,
	0x34, 0x6c, 0xb1, 0x07, 0x01, 0x3b, 0x89, 0xa0, 0xc5, 0x4e, 0xe2, 0x13, 0xd8, 0x0f, 0x2e, 0xdb,
	0x33, 0xd4, 0x15, 0x5a, 0xf6, 0x6d, 0x18, 0x5f, 0xa4, 0x75, 0x55, 0x61, 0x6a, 0xb9, 0x15, 0x73,
	0x13, 0x3c, 0xde, 0x6b, 0xc0, 0x53, 0x31, 0x37, 0xf1, 0x43, 0x38, 0x08, 0xcb, 0x72, 0xc5, 0xb5,
	0xa8, 0xe6, 0xe8, 0x3c, 0x2e, 0xea, 0x73, 0xd4, 0xc1, 0xde, 0x7f, 0x38, 0x74, 0xa1, 0x14, 0xea,
	0x20, 0x8f, 0xff, 0x88, 0xff, 0xb1, 0x03, 0xe0, 0xd7, 0x2f, 0x0b, 0x51, 0xfd, 0x5f, 0x5b, 0xb2,
	0x23, 0x38, 0x74, 0xc6, 0x5c, 0xe3, 0xb9, 0x96, 0x16, 0x9d, 0x61, 0x20, 0xdd, 0x77, 0x78, 0xe2,
	0xe1, 0x53, 0x31, 0x67, 0xdf, 0x00, 0x30, 0xb2, 0x54, 0x05, 0xba, 0xd3, 0x85, 0x0b, 0x18, 0x7a,
	0xe4, 0x49, 0xae, 0xd8, 0x8f, 0x80, 0x61, 0x95, 0x0a, 0x65, 0x16, 0x85, 0xb0, 0xb2, 0xae, 0xb8,
	0xbd, 0x54, 0x48, 0x17, 0x32, 0x4e, 0xae, 0x5f, 0x99, 0x39, 0xbd, 0x54, 0xc8, 0xee, 0xc2, 0xb0,
	0x5e, 0x58, 0xd4, 0xb4, 0xe1, 0x2e, 0x59, 0x0d, 0x08, 0x70, 0x5b, 0x7d, 0x09, 0xe0, 0x0f, 0xe5,
	0x24, 0x88, 0x7a, 0xf7, 0xba, 0x47, 0xa3, 0xc9, 0xc7, 0x6f, 0x19, 0x77, 0xc7, 0x1b, 0x4a, 0x26,
	0x43, 0xf2, 0x87, 0x44, 0x7d, 0x0f, 0x46, 0xeb, 0xfe, 0xf6, 0xef, 0x75, 0x8f, 0xc6, 0x09, 0xe8,
	0xd6, 0xd7, 0xf8, 0x9f, 0x3b, 0x70, 0xe8, 0xd7, 0xdb, 0xac, 0xe4, 0xb5, 0x72, 0xc7, 0x76, 0x7a,
	0x2a, 0x71, 0x59, 0xd4, 0x22, 0xe3, 0xb3, 0x4b, 0x8b, 0xad, 0x9e, 0x01, 0x7c, 0xec, 0x30, 0x17,
	0xd4, 0x33, 0x69, 0xb9, 0x16, 0x16, 0x83, 0x8e, 0xfd, 0x99, 0xb4, 0x89, 0xb0, 0xc8, 0x0e, 0xa1,
	0xab, 0xad, 0x57, 0x6e, 0x98, 0xb8, 0x21, 0xfb, 0x2e, 0xec, 0x5b, 0x59, 0xa2, 0xb1, 0xa2, 0x54,
	0xbc, 0xac, 0x33, 0x0c, 0x01, 0x3c, 0x6e, 0xd1, 0x5f, 0xd7, 0x19, 0x3a, 0x69, 0x8d, 0x9c, 0x57,
	0xa2, 0x28, 0x64, 0x35, 0xe7, 0x4a, 0xa4, 0x5f, 0xa1, 0x35, 0x41, 0xb4, 0xeb, 0xab, 0x99, 0x17,
	0x7e, 0xc2, 0xed, 0x93, 0x0a, 0x43, 0xf1, 0x3d, 0x4e, 0xdc, 0x90, 0x9d, 0xc0, 0x6d, 0x6d, 0x15,
	0x3f, 0x43, 0x91, 0xa1, 0xe6, 0x8d, 0x13, 0x74, 0x41, 0x7d, 0xb2, 0xba, 0xa9, 0xad, 0x7a, 0x4a,
	0xb3, 0x2f, 0xfc, 0x24, 0xdd, 0xd1, 0x8f, 0xe1, 0xe6, 0xea, 0x78, 0x69, 0x51, 0xa7, 0x5f, 0xf1,
	0x5c, 0xe3, 0x2b, 0x7a, 0x11, 0xe3, 0x84, 0xb5, 0x73, 0x9f, 0xb8, 0xa9, 0x4f, 0x35, 0xbe, 0x72,
	0x6f, 0xc1, 0x18, 0x9d, 0xd2, 0xfb, 0x18, 0x27, 0x34, 0x8e, 0xff, 0xd3, 0x81, 0x61, 0xab, 0x65,
	0xeb, 0x72, 0x51, 0x5b, 0x3e, 0xd7, 0xf5, 0x42, 0x91, 0x8a, 0x8d, 0xcb, 0x45, 0x6d, 0x3f, 0x73,
	0xa0, 0xd3, 0xba, 0x35, 0x5b, 0xd3, 0x72, 0xaf, 0x01, 0x49, 0xd0, 0x3b, 0x30, 0x70, 0xd7, 0x43,
	0xc2, 0x79, 0x55, 0xfb, 0x36, 0x2b, 0x49, 0x32, 0x01, 0xa3, 0xd5, 0xcd, 0x19, 0x92, 0x75, 0x34,
	0xf9, 0xc5, 0x76, 0x21, 0xb4, 0x22, 0x4a, 0xc0, 0x66, 0xe5, 0x6f, 0x3c, 0x67, 0xfc, 0xef, 0xd6,
	0x2f, 0x61, 0x4b, 0xf6, 0x10, 0xee, 0x96, 0xe2, 0x42, 0x96, 0x8b, 0x92, 0x57, 0x8b, 0x72, 0x86,
	0x9a, 0xa7, 0x58, 0x14, 0xc6, 0xdf, 0x56, 0x16, 0x42, 0x25, 0x0a, 0x26, 0xcf, 0xc9, 0xe2, 0x13,
	0x67, 0x40, 0x97, 0x96, 0xb1, 0xc7, 0xf0, 0xcd, 0x37, 0x2e, 0x5f, 0x54, 0x0d, 0x83, 0x17, 0xe0,
	0xdd, 0xd7, 0x19, 0x7e, 0x5b, 0x05, 0x8e, 0x3b, 0x30, 0x10, 0xf6, 0xaa, 0x1c, 0xc2, 0x7a, 0x39,
	0x0e, 0xa1, 0xbb, 0x54, 0x32, 0xbc, 0x46, 0x37, 0x24, 0x24, 0x95, 0x21, 0x88, 0xdc, 0x30, 0x7e,
	0x1f, 0x06, 0xde, 0x9d, 0x5c, 0xb3, 0xdb, 0xd0, 0xcf, 0xb5, 0x67, 0xf2, 0xd7, 0xd3, 0xcb, 0x35,
	0x11, 0x31, 0xb8, 0x96, 0x15, 0xa9, 0x0c, 0xa7, 0xa1, 0x71, 0x3c, 0x83, 0x7d, 0x69, 0xb1, 0xe4,
	0x32, 0x2f, 0xa4, 0xb1, 0x5c, 0xe6, 0xee, 0x92, 0x65, 0x65, 0x51, 0xe7, 0x22, 0x45, 0x5e, 0x89,
	0xb2, 0x61, 0x19, 0xb7, 0xe8, 0x73, 0x51, 0x22, 0xfb, 0x3e, 0x1c, 0x6a, 0x54, 0x85, 0x4c, 0x85,
	0x45, 0x6e, 0xac, 0xb0, 0x0b, 0x43, 0xc4, 0xc3, 0xe4, 0xa0, 0xc5, 0x5f, 0x12, 0x1c, 0xff, 0xab,
	0x03, 0x07, 0x57, 0x37, 0x29, 0xd8, 0x31, 0xdc, 0x58, 0xed, 0x42, 0xe8, 0xda, 0x56, 0xd7, 0xdb,
	0xa9, 0x67, 0xd2, 0x58, 0xda, 0xee, 0x07, 0x70, 0x7d, 0xc3, 0xbe, 0xad, 0x2f, 0x07, 0x57, 0xac,
	0xa7, 0x19, 0xfb, 0x23, 0x0c, 0x5b, 0x28, 0xea, 0x52, 0x02, 0x7a, 0xf4, 0xb6, 0xd1, 0x73, 0xf5,
	0xbc, 0xc9, 0x8a, 0x30, 0xfe, 0x5b, 0xa7, 0x49, 0xd4, 0xea, 0xfc, 0x0c, 0x43, 0x21, 0x5c, 0x8a,
	0x42, 0xfa, 0x40, 0x19, 0xb8, 0x42, 0xf8, 0x85, 0xfb, 0x64, 0xf9, 0xba, 0x92, 0x8e, 0x89, 0x0e,
	0xbc, 0x45, 0x36, 0xdc, 0x10, 0x6f, 0xed, 0x2a, 0x9c, 0xc7, 0xed, 0x8d, 0x55, 0xa2, 0xe0, 0x85,
	0x98, 0x61, 0x11, 0x12, 0xfc, 0xb8, 0x41, 0x9f, 0x39, 0x30, 0xfe, 0xd3, 0x2e, 0xbc, 0xe3, 0x0f,
	0xbe, 0x3a, 0x95, 0x12, 0x5a, 0x94, 0xc6, 0x45, 0x06, 0x25, 0x14, 0x2f, 0x3f, 0x8d, 0xd9, 0x1f,
	0x60, 0xd0, 0x14, 0xc0, 0x70, 0xee, 0x47, 0x5b, 0x66, 0xf1, 0xc0, 0x92, 0xb4, 0x7c, 0xec, 0x39,
	0x5c, 0x73, 0x09, 0x9d, 0xce, 0x39, 0x9a, 0x7c, 0xb4, 0x1d, 0x2f, 0x95, 0x04, 0xe2, 0x61, 0x9f,
	0x43, 0xd7, 0x66, 0x65, 0xc8, 0x14, 0x1f, 0x6e, 0x9d, 0x29, 0x12, 0xc7, 0xe2, 0xc8, 0x84, 0x2d,
	0xe9, 0x75, 0x6d, 0x4d, 0x26, 0x6c, 0x99, 0x38, 0x16, 0xf6, 0x14, 0x76, 0x72, 0x4d, 0xe9, 0x7c,
	0x34, 0xf9, 0x60, 0x3b, 0xae, 0x5c, 0x27, 0x3b, 0xb9, 0x66, 0x08, 0x87, 0xca, 0xe0, 0x22, 0xab,
	0xcf, 0xa5, 0x46, 0x2f, 0x2a, 0x15, 0x80, 0xad, 0xf5, 0x73, 0xe1, 0x9b, 0x1c, 0xac, 0x38, 0x9f,
	0x38, 0x4a, 0xc6, 0x61, 0xbc, 0xb6, 0x8d, 0x3c, 0xa7, 0x82, 0xf1, 0xf5, 0xf6, 0xd8, 0x5b, 0x11,
	0x4e, 0xcf, 0xe3, 0xbf, 0x77, 0x9a, 0x46, 0xa9, 0x0d, 0x43, 0x17, 0x7f, 0x6b, 0xcf, 0x9f, 0xc6,
	0x2e, 0xc9, 0x95, 0x76, 0x11, 0xde, 0xb8, 0x1b, 0xbe, 0x5e, 0xc3, 0xbb, 0x6f, 0xa8, 0xe1, 0x39,
	0x00, 0x05, 0x35, 0x5a, 0xd4, 0x4d, 0xed, 0xf8, 0x74, 0xbb, 0xc3, 0x6f, 0x3e, 0x93, 0x64, 0x8d,
	0x39, 0xfe, 0x6b, 0x07, 0xd8, 0xaa, 0x27, 0xa6, 0x16, 0xb6, 0xca, 0xeb, 0x37, 0xbe, 0xa4, 0x2f,
	0x01, 0x8a, 0x3a, 0x15, 0x05, 0x59, 0x6c, 0x9b, 0x03, 0x36, 0x8e, 0x94, 0x0c, 0x89, 0x72, 0xea,
	0xf6, 0xa4, 0x8e, 0xa8, 0xac, 0x2d, 0xfa, 0x0d, 0x7c, 0xf9, 0x00, 0x0f, 0x39, 0x83, 0xf8, 0xcf,
	0x1d, 0xb8, 0xbd, 0xd6, 0xc5, 0xa3, 0xe1, 0xd5, 0x19, 0x9f, 0x2d, 0xf2, 0x1c, 0xb5, 0xcb, 0x5f,
	0x15, 0x5e, 0x58, 0x7e, 0x56, 0x37, 0xd5, 0xbc, 0xef, 0xbe, 0x9f, 0xd6, 0x8a, 0x7d, 0x07, 0xf6,
	0xb3, 0x9c, 0x67, 0x75, 0x65, 0xb9, 0xd2, 0x58, 0x2a, 0x9f, 0x07, 0x06, 0xc9, 0x5e, 0x96, 0xff,
	0xaa, 0xae, 0xec, 0x0b, 0xc2, 0x5c, 0xb9, 0xc9, 0x72, 0xdf, 0x8f, 0xf8, 0xfb, 0xe8, 0x65, 0x39,
	0x75, 0x20, 0x7e, 0x42, 0x69, 0xcc, 0x43, 0xed, 0xea, 0x65, 0xf9, 0x0b, 0x8d, 0x79, 0xfc, 0x97,
	0xdd, 0xb6, 0x55, 0x6e, 0x04, 0x64, 0x8f, 0xe0, 0x6e, 0x93, 0x1d, 0xb8, 0xc1, 0x79, 0x89, 0x95,
	0xcb, 0xf0, 0x58, 0x59, 0x99, 0x4b, 0xd4, 0xd1, 0x84, 0xba, 0xbc, 0x3b, 0x8d, 0xc9, 0x4b, 0x6f,
	0x31, 0x6d, 0x0d, 0xd8, 0x04, 0x6e, 0xbd, 0xb6, 0x9e, 0x42, 0xea, 0x3e, 0xf9, 0x74, 0x63, 0x63,
	0xe5, 0xf3, 0x10, 0x61, 0xb8, 0x94, 0xd1, 0x03, 0x1f, 0x61, 0xb8, 0x94, 0xec, 0x06, 0xec, 0xce,
	0x32, 0x57, 0x59, 0x4e, 0x7c, 0x89, 0x9c, 0x65, 0xd3, 0xcc, 0xf5, 0xce, 0xda, 0x75, 0xb7, 0xde,
	0xc7, 0x9f, 0x12, 0xdf, 0x90, 0x10, 0x72, 0xf3, 0x3d, 0x18, 0x99, 0x7a, 0xa1, 0x53, 0xe4, 0x22,
	0xcb, 0x74, 0xf4, 0xbe, 0x57, 0xdf, 0x43, 0xbf, 0xcc, 0x32, 0xed, 0xd6, 0x53, 0xb3, 0xe4, 0xe7,
	0x3f, 0xf0, 0xeb, 0x09, 0xa1, 0xe9, 0xb4, 0x5d, 0x4f, 0xb7, 0xf7, 0x21, 0x85, 0xc7, 0xe3, 0xb7,
	0x0d, 0x8f, 0xd7, 0x43, 0xb1, 0x39, 0x03, 0x85, 0xc8, 0xf7, 0xe0, 0xa0, 0x95, 0xc7, 0x8a, 0xb9,
	0x73, 0xf1, 0x23, 0x5f, 0x23, 0x1a, 0xf8, 0x54, 0xcc, 0xa7, 0x19, 0xfb, 0x16, 0xec, 0x11, 0xc9,
	0x12, 0xb5, 0x91, 0x75, 0x15, 0xfd, 0x8c, 0x4e, 0x3b, 0x72, 0xd8, 0x17, 0x1e, 0x72, 0x54, 0x64,
	0xe2, 0x7d, 0x22, 0x4d, 0x7e, 0x1e, 0x1a, 0x84, 0x79, 0xa9, 0xa8, 0x03, 0x24, 0x5d, 0x7e, 0x08,
	0xac, 0x14, 0xfc, 0x82, 0x6b, 0x34, 0xaa, 0xae, 0x0c, 0x72, 0xd7, 0xfe, 0x45, 0x0f, 0x7d, 0xc9,
	0x2e, 0xc5, 0xef, 0x92, 0x80, 0x9f, 0xca, 0x12, 0xd9, 0x6c, 0x2d, 0x0a, 0x1f, 0x51, 0xc5, 0xfe,
	0x6c, 0xcb, 0x62, 0xb3, 0x19, 0xe0, 0xab, 0x70, 0x7e, 0x17, 0x06, 0x1a, 0x4d, 0x5d, 0x2c, 0x31,
	0x8b, 0x3e, 0xa6, 0x40, 0x6e, 0xbf, 0x67, 0x3d, 0xfa, 0x7b, 0x7c, 0xff, 0x7f, 0x01, 0x00, 0x00,
	0xff, 0xff, 0x4c, 0xb9, 0x0c, 0xbf, 0x37, 0x0f, 0x00, 0x00,
}
