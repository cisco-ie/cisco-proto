/*
Copyright 2019 Cisco Systems

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: l2vpn_evpn_tep.proto

package cisco_ios_xr_evpn_oper_evpn_nodes_node_teps_tep

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type L2VpnEvpnTep_KEYS struct {
	NodeId               string   `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	TepId                uint32   `protobuf:"varint,2,opt,name=tep_id,json=tepId,proto3" json:"tep_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *L2VpnEvpnTep_KEYS) Reset()         { *m = L2VpnEvpnTep_KEYS{} }
func (m *L2VpnEvpnTep_KEYS) String() string { return proto.CompactTextString(m) }
func (*L2VpnEvpnTep_KEYS) ProtoMessage()    {}
func (*L2VpnEvpnTep_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_510abc87a2dfeb81, []int{0}
}

func (m *L2VpnEvpnTep_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2VpnEvpnTep_KEYS.Unmarshal(m, b)
}
func (m *L2VpnEvpnTep_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2VpnEvpnTep_KEYS.Marshal(b, m, deterministic)
}
func (m *L2VpnEvpnTep_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2VpnEvpnTep_KEYS.Merge(m, src)
}
func (m *L2VpnEvpnTep_KEYS) XXX_Size() int {
	return xxx_messageInfo_L2VpnEvpnTep_KEYS.Size(m)
}
func (m *L2VpnEvpnTep_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_L2VpnEvpnTep_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_L2VpnEvpnTep_KEYS proto.InternalMessageInfo

func (m *L2VpnEvpnTep_KEYS) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

func (m *L2VpnEvpnTep_KEYS) GetTepId() uint32 {
	if m != nil {
		return m.TepId
	}
	return 0
}

type L2VpnEvpnTepInfo struct {
	EthernetVpnId        uint32   `protobuf:"varint,1,opt,name=ethernet_vpn_id,json=ethernetVpnId,proto3" json:"ethernet_vpn_id,omitempty"`
	Encapsulation        uint32   `protobuf:"varint,2,opt,name=encapsulation,proto3" json:"encapsulation,omitempty"`
	Ip                   string   `protobuf:"bytes,3,opt,name=ip,proto3" json:"ip,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *L2VpnEvpnTepInfo) Reset()         { *m = L2VpnEvpnTepInfo{} }
func (m *L2VpnEvpnTepInfo) String() string { return proto.CompactTextString(m) }
func (*L2VpnEvpnTepInfo) ProtoMessage()    {}
func (*L2VpnEvpnTepInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_510abc87a2dfeb81, []int{1}
}

func (m *L2VpnEvpnTepInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2VpnEvpnTepInfo.Unmarshal(m, b)
}
func (m *L2VpnEvpnTepInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2VpnEvpnTepInfo.Marshal(b, m, deterministic)
}
func (m *L2VpnEvpnTepInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2VpnEvpnTepInfo.Merge(m, src)
}
func (m *L2VpnEvpnTepInfo) XXX_Size() int {
	return xxx_messageInfo_L2VpnEvpnTepInfo.Size(m)
}
func (m *L2VpnEvpnTepInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_L2VpnEvpnTepInfo.DiscardUnknown(m)
}

var xxx_messageInfo_L2VpnEvpnTepInfo proto.InternalMessageInfo

func (m *L2VpnEvpnTepInfo) GetEthernetVpnId() uint32 {
	if m != nil {
		return m.EthernetVpnId
	}
	return 0
}

func (m *L2VpnEvpnTepInfo) GetEncapsulation() uint32 {
	if m != nil {
		return m.Encapsulation
	}
	return 0
}

func (m *L2VpnEvpnTepInfo) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

type L2VpnEvpnTep struct {
	TunnelEndpointId     uint32            `protobuf:"varint,50,opt,name=tunnel_endpoint_id,json=tunnelEndpointId,proto3" json:"tunnel_endpoint_id,omitempty"`
	Type                 uint32            `protobuf:"varint,51,opt,name=type,proto3" json:"type,omitempty"`
	LocalInfo            *L2VpnEvpnTepInfo `protobuf:"bytes,52,opt,name=local_info,json=localInfo,proto3" json:"local_info,omitempty"`
	RemoteInfo           *L2VpnEvpnTepInfo `protobuf:"bytes,53,opt,name=remote_info,json=remoteInfo,proto3" json:"remote_info,omitempty"`
	UseCount             uint32            `protobuf:"varint,54,opt,name=use_count,json=useCount,proto3" json:"use_count,omitempty"`
	VrfName              string            `protobuf:"bytes,55,opt,name=vrf_name,json=vrfName,proto3" json:"vrf_name,omitempty"`
	VrfTableId           uint32            `protobuf:"varint,56,opt,name=vrf_table_id,json=vrfTableId,proto3" json:"vrf_table_id,omitempty"`
	UdpPort              uint32            `protobuf:"varint,57,opt,name=udp_port,json=udpPort,proto3" json:"udp_port,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *L2VpnEvpnTep) Reset()         { *m = L2VpnEvpnTep{} }
func (m *L2VpnEvpnTep) String() string { return proto.CompactTextString(m) }
func (*L2VpnEvpnTep) ProtoMessage()    {}
func (*L2VpnEvpnTep) Descriptor() ([]byte, []int) {
	return fileDescriptor_510abc87a2dfeb81, []int{2}
}

func (m *L2VpnEvpnTep) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2VpnEvpnTep.Unmarshal(m, b)
}
func (m *L2VpnEvpnTep) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2VpnEvpnTep.Marshal(b, m, deterministic)
}
func (m *L2VpnEvpnTep) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2VpnEvpnTep.Merge(m, src)
}
func (m *L2VpnEvpnTep) XXX_Size() int {
	return xxx_messageInfo_L2VpnEvpnTep.Size(m)
}
func (m *L2VpnEvpnTep) XXX_DiscardUnknown() {
	xxx_messageInfo_L2VpnEvpnTep.DiscardUnknown(m)
}

var xxx_messageInfo_L2VpnEvpnTep proto.InternalMessageInfo

func (m *L2VpnEvpnTep) GetTunnelEndpointId() uint32 {
	if m != nil {
		return m.TunnelEndpointId
	}
	return 0
}

func (m *L2VpnEvpnTep) GetType() uint32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *L2VpnEvpnTep) GetLocalInfo() *L2VpnEvpnTepInfo {
	if m != nil {
		return m.LocalInfo
	}
	return nil
}

func (m *L2VpnEvpnTep) GetRemoteInfo() *L2VpnEvpnTepInfo {
	if m != nil {
		return m.RemoteInfo
	}
	return nil
}

func (m *L2VpnEvpnTep) GetUseCount() uint32 {
	if m != nil {
		return m.UseCount
	}
	return 0
}

func (m *L2VpnEvpnTep) GetVrfName() string {
	if m != nil {
		return m.VrfName
	}
	return ""
}

func (m *L2VpnEvpnTep) GetVrfTableId() uint32 {
	if m != nil {
		return m.VrfTableId
	}
	return 0
}

func (m *L2VpnEvpnTep) GetUdpPort() uint32 {
	if m != nil {
		return m.UdpPort
	}
	return 0
}

func init() {
	proto.RegisterType((*L2VpnEvpnTep_KEYS)(nil), "cisco_ios_xr_evpn_oper.evpn.nodes.node.teps.tep.l2vpn_evpn_tep_KEYS")
	proto.RegisterType((*L2VpnEvpnTepInfo)(nil), "cisco_ios_xr_evpn_oper.evpn.nodes.node.teps.tep.l2vpn_evpn_tep_info")
	proto.RegisterType((*L2VpnEvpnTep)(nil), "cisco_ios_xr_evpn_oper.evpn.nodes.node.teps.tep.l2vpn_evpn_tep")
}

func init() { proto.RegisterFile("l2vpn_evpn_tep.proto", fileDescriptor_510abc87a2dfeb81) }

var fileDescriptor_510abc87a2dfeb81 = []byte{
	// 374 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x52, 0x4d, 0x6b, 0xe3, 0x30,
	0x10, 0xc5, 0xc9, 0x6e, 0x3e, 0x26, 0xeb, 0xec, 0xa2, 0xdd, 0x65, 0xb5, 0xec, 0xc5, 0x84, 0xa5,
	0xe4, 0x50, 0x5c, 0x48, 0xfa, 0x79, 0x6e, 0x73, 0x30, 0x85, 0x52, 0xdc, 0x52, 0xe8, 0x49, 0x38,
	0xd6, 0x98, 0x0a, 0x1c, 0x49, 0x48, 0xb2, 0x69, 0x7f, 0x47, 0xff, 0x70, 0x91, 0x9c, 0x1e, 0x42,
	0x7b, 0x29, 0xf4, 0x32, 0x68, 0xe6, 0xcd, 0xbc, 0xa7, 0x79, 0x0c, 0xfc, 0xaa, 0x17, 0xad, 0x96,
	0x0c, 0x7d, 0x70, 0xa8, 0x53, 0x6d, 0x94, 0x53, 0xe4, 0xa0, 0x14, 0xb6, 0x54, 0x4c, 0x28, 0xcb,
	0x1e, 0x4d, 0x07, 0x2a, 0x8d, 0x26, 0xf5, 0xaf, 0x54, 0x2a, 0x8e, 0x36, 0xc4, 0xd4, 0xa1, 0xb6,
	0x3e, 0xcc, 0x56, 0xf0, 0x73, 0x97, 0x88, 0x5d, 0xae, 0xee, 0x6f, 0xc8, 0x1f, 0x18, 0xfa, 0x3e,
	0x26, 0x38, 0x8d, 0x92, 0x68, 0x3e, 0xce, 0x07, 0x3e, 0xcd, 0x38, 0xf9, 0x0d, 0x03, 0xdf, 0x24,
	0x38, 0xed, 0x25, 0xd1, 0x3c, 0xce, 0xbf, 0x3a, 0xd4, 0x19, 0x9f, 0xd9, 0x37, 0x34, 0x42, 0x56,
	0x8a, 0xec, 0xc1, 0x77, 0x74, 0x0f, 0x68, 0x24, 0x3a, 0xe6, 0x81, 0x2d, 0x5d, 0x9c, 0xc7, 0xaf,
	0xe5, 0x3b, 0x2d, 0x33, 0x4e, 0xfe, 0x43, 0x8c, 0xb2, 0x2c, 0xb4, 0x6d, 0xea, 0xc2, 0x09, 0x25,
	0xb7, 0xe4, 0xbb, 0x45, 0x32, 0x85, 0x9e, 0xd0, 0xb4, 0x1f, 0xfe, 0xd3, 0x13, 0x7a, 0xf6, 0xdc,
	0x87, 0xe9, 0xae, 0x2a, 0xd9, 0x07, 0xe2, 0x1a, 0x29, 0xb1, 0x66, 0x28, 0xb9, 0x56, 0x42, 0x3a,
	0xaf, 0xb9, 0x08, 0x6c, 0x3f, 0x3a, 0x64, 0xb5, 0x05, 0x32, 0x4e, 0x08, 0x7c, 0x71, 0x4f, 0x1a,
	0xe9, 0x32, 0xe0, 0xe1, 0x4d, 0x4a, 0x80, 0x5a, 0x95, 0x45, 0x1d, 0x16, 0xa0, 0x87, 0x49, 0x34,
	0x9f, 0x2c, 0x2e, 0xd2, 0x0f, 0xda, 0x9a, 0xbe, 0x63, 0x46, 0x3e, 0x0e, 0xbc, 0x99, 0xf7, 0x05,
	0x61, 0x62, 0x70, 0xa3, 0x1c, 0x76, 0x2a, 0x47, 0x9f, 0xa8, 0x02, 0x1d, 0x71, 0x90, 0xf9, 0x07,
	0xe3, 0xc6, 0x22, 0x2b, 0x55, 0x23, 0x1d, 0x3d, 0x0e, 0x4b, 0x8e, 0x1a, 0x8b, 0xe7, 0x3e, 0x27,
	0x7f, 0x61, 0xd4, 0x9a, 0x8a, 0xc9, 0x62, 0x83, 0xf4, 0x24, 0x78, 0x3a, 0x6c, 0x4d, 0x75, 0x55,
	0x6c, 0x90, 0x24, 0xf0, 0xcd, 0x43, 0xae, 0x58, 0xd7, 0xe1, 0x04, 0x4e, 0xc3, 0x28, 0xb4, 0xa6,
	0xba, 0xf5, 0xa5, 0x8c, 0xfb, 0xe1, 0x86, 0x6b, 0xa6, 0x95, 0x71, 0xf4, 0x2c, 0xa0, 0xc3, 0x86,
	0xeb, 0x6b, 0x65, 0xdc, 0x7a, 0x10, 0x2e, 0x71, 0xf9, 0x12, 0x00, 0x00, 0xff, 0xff, 0x18, 0x3d,
	0x3c, 0x1e, 0xa1, 0x02, 0x00, 0x00,
}
