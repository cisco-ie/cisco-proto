/*
Copyright 2019 Cisco Systems

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: l2vpn_evpn_client.proto

package cisco_ios_xr_evpn_oper_evpn_nodes_node_client

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type L2VpnEvpnClient_KEYS struct {
	NodeId               string   `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *L2VpnEvpnClient_KEYS) Reset()         { *m = L2VpnEvpnClient_KEYS{} }
func (m *L2VpnEvpnClient_KEYS) String() string { return proto.CompactTextString(m) }
func (*L2VpnEvpnClient_KEYS) ProtoMessage()    {}
func (*L2VpnEvpnClient_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_6cb2631c32a44bac, []int{0}
}

func (m *L2VpnEvpnClient_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2VpnEvpnClient_KEYS.Unmarshal(m, b)
}
func (m *L2VpnEvpnClient_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2VpnEvpnClient_KEYS.Marshal(b, m, deterministic)
}
func (m *L2VpnEvpnClient_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2VpnEvpnClient_KEYS.Merge(m, src)
}
func (m *L2VpnEvpnClient_KEYS) XXX_Size() int {
	return xxx_messageInfo_L2VpnEvpnClient_KEYS.Size(m)
}
func (m *L2VpnEvpnClient_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_L2VpnEvpnClient_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_L2VpnEvpnClient_KEYS proto.InternalMessageInfo

func (m *L2VpnEvpnClient_KEYS) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

type L2VpnEvpnClient struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *L2VpnEvpnClient) Reset()         { *m = L2VpnEvpnClient{} }
func (m *L2VpnEvpnClient) String() string { return proto.CompactTextString(m) }
func (*L2VpnEvpnClient) ProtoMessage()    {}
func (*L2VpnEvpnClient) Descriptor() ([]byte, []int) {
	return fileDescriptor_6cb2631c32a44bac, []int{1}
}

func (m *L2VpnEvpnClient) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2VpnEvpnClient.Unmarshal(m, b)
}
func (m *L2VpnEvpnClient) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2VpnEvpnClient.Marshal(b, m, deterministic)
}
func (m *L2VpnEvpnClient) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2VpnEvpnClient.Merge(m, src)
}
func (m *L2VpnEvpnClient) XXX_Size() int {
	return xxx_messageInfo_L2VpnEvpnClient.Size(m)
}
func (m *L2VpnEvpnClient) XXX_DiscardUnknown() {
	xxx_messageInfo_L2VpnEvpnClient.DiscardUnknown(m)
}

var xxx_messageInfo_L2VpnEvpnClient proto.InternalMessageInfo

func init() {
	proto.RegisterType((*L2VpnEvpnClient_KEYS)(nil), "cisco_ios_xr_evpn_oper.evpn.nodes.node.client.l2vpn_evpn_client_KEYS")
	proto.RegisterType((*L2VpnEvpnClient)(nil), "cisco_ios_xr_evpn_oper.evpn.nodes.node.client.l2vpn_evpn_client")
}

func init() { proto.RegisterFile("l2vpn_evpn_client.proto", fileDescriptor_6cb2631c32a44bac) }

var fileDescriptor_6cb2631c32a44bac = []byte{
	// 123 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0xcf, 0x31, 0x2a, 0x2b,
	0xc8, 0x8b, 0x4f, 0x05, 0x11, 0xc9, 0x39, 0x99, 0xa9, 0x79, 0x25, 0x7a, 0x05, 0x45, 0xf9, 0x25,
	0xf9, 0x42, 0xba, 0xc9, 0x99, 0xc5, 0xc9, 0xf9, 0xf1, 0x99, 0xf9, 0xc5, 0xf1, 0x15, 0x45, 0x10,
	0xf9, 0xfc, 0x82, 0xd4, 0x22, 0x3d, 0x10, 0x4b, 0x2f, 0x2f, 0x3f, 0x25, 0xb5, 0x18, 0x4c, 0xea,
	0x41, 0x34, 0x29, 0x19, 0x72, 0x89, 0x61, 0x98, 0x14, 0xef, 0xed, 0x1a, 0x19, 0x2c, 0x24, 0xce,
	0xc5, 0x0e, 0x52, 0x18, 0x9f, 0x99, 0x22, 0xc1, 0xa8, 0xc0, 0xa8, 0xc1, 0x19, 0xc4, 0x06, 0xe2,
	0x7a, 0xa6, 0x28, 0x09, 0x73, 0x09, 0x62, 0x68, 0x49, 0x62, 0x03, 0xdb, 0x6e, 0x0c, 0x08, 0x00,
	0x00, 0xff, 0xff, 0x96, 0xdf, 0xf1, 0xac, 0x98, 0x00, 0x00, 0x00,
}
