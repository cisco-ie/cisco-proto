/*
Copyright 2019 Cisco Systems

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: l2tp_cc_info.proto

package cisco_ios_xr_tunnel_l2tun_oper_l2tp_tunnels_tunnel

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type L2TpCcInfo_KEYS struct {
	LocalTunnelId        uint32   `protobuf:"varint,1,opt,name=local_tunnel_id,json=localTunnelId,proto3" json:"local_tunnel_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *L2TpCcInfo_KEYS) Reset()         { *m = L2TpCcInfo_KEYS{} }
func (m *L2TpCcInfo_KEYS) String() string { return proto.CompactTextString(m) }
func (*L2TpCcInfo_KEYS) ProtoMessage()    {}
func (*L2TpCcInfo_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_d2f62e56b429a2f1, []int{0}
}

func (m *L2TpCcInfo_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2TpCcInfo_KEYS.Unmarshal(m, b)
}
func (m *L2TpCcInfo_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2TpCcInfo_KEYS.Marshal(b, m, deterministic)
}
func (m *L2TpCcInfo_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2TpCcInfo_KEYS.Merge(m, src)
}
func (m *L2TpCcInfo_KEYS) XXX_Size() int {
	return xxx_messageInfo_L2TpCcInfo_KEYS.Size(m)
}
func (m *L2TpCcInfo_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_L2TpCcInfo_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_L2TpCcInfo_KEYS proto.InternalMessageInfo

func (m *L2TpCcInfo_KEYS) GetLocalTunnelId() uint32 {
	if m != nil {
		return m.LocalTunnelId
	}
	return 0
}

type L2TpCcInfo struct {
	LocalAddress                      string   `protobuf:"bytes,50,opt,name=local_address,json=localAddress,proto3" json:"local_address,omitempty"`
	RemoteAddress                     string   `protobuf:"bytes,51,opt,name=remote_address,json=remoteAddress,proto3" json:"remote_address,omitempty"`
	LocalPort                         uint32   `protobuf:"varint,52,opt,name=local_port,json=localPort,proto3" json:"local_port,omitempty"`
	RemotePort                        uint32   `protobuf:"varint,53,opt,name=remote_port,json=remotePort,proto3" json:"remote_port,omitempty"`
	Protocol                          uint32   `protobuf:"varint,54,opt,name=protocol,proto3" json:"protocol,omitempty"`
	IsPmtuEnabled                     bool     `protobuf:"varint,55,opt,name=is_pmtu_enabled,json=isPmtuEnabled,proto3" json:"is_pmtu_enabled,omitempty"`
	RemoteTunnelId                    uint32   `protobuf:"varint,56,opt,name=remote_tunnel_id,json=remoteTunnelId,proto3" json:"remote_tunnel_id,omitempty"`
	LocalTunnelName                   string   `protobuf:"bytes,57,opt,name=local_tunnel_name,json=localTunnelName,proto3" json:"local_tunnel_name,omitempty"`
	RemoteTunnelName                  string   `protobuf:"bytes,58,opt,name=remote_tunnel_name,json=remoteTunnelName,proto3" json:"remote_tunnel_name,omitempty"`
	ClassName                         string   `protobuf:"bytes,59,opt,name=class_name,json=className,proto3" json:"class_name,omitempty"`
	ActiveSessions                    uint32   `protobuf:"varint,60,opt,name=active_sessions,json=activeSessions,proto3" json:"active_sessions,omitempty"`
	RetransmitTime                    []uint32 `protobuf:"varint,61,rep,packed,name=retransmit_time,json=retransmitTime,proto3" json:"retransmit_time,omitempty"`
	SequenceNs                        uint32   `protobuf:"varint,62,opt,name=sequence_ns,json=sequenceNs,proto3" json:"sequence_ns,omitempty"`
	SequenceNr                        uint32   `protobuf:"varint,63,opt,name=sequence_nr,json=sequenceNr,proto3" json:"sequence_nr,omitempty"`
	LocalWindowSize                   uint32   `protobuf:"varint,64,opt,name=local_window_size,json=localWindowSize,proto3" json:"local_window_size,omitempty"`
	RemoteWindowSize                  uint32   `protobuf:"varint,65,opt,name=remote_window_size,json=remoteWindowSize,proto3" json:"remote_window_size,omitempty"`
	RetransmissionTime                uint32   `protobuf:"varint,66,opt,name=retransmission_time,json=retransmissionTime,proto3" json:"retransmission_time,omitempty"`
	MaximumRetransmissionTime         uint32   `protobuf:"varint,67,opt,name=maximum_retransmission_time,json=maximumRetransmissionTime,proto3" json:"maximum_retransmission_time,omitempty"`
	UnsentQueueSize                   uint32   `protobuf:"varint,68,opt,name=unsent_queue_size,json=unsentQueueSize,proto3" json:"unsent_queue_size,omitempty"`
	UnsentMaximumQueueSize            uint32   `protobuf:"varint,69,opt,name=unsent_maximum_queue_size,json=unsentMaximumQueueSize,proto3" json:"unsent_maximum_queue_size,omitempty"`
	ResendQueueSize                   uint32   `protobuf:"varint,70,opt,name=resend_queue_size,json=resendQueueSize,proto3" json:"resend_queue_size,omitempty"`
	ResendMaximumQueueSize            uint32   `protobuf:"varint,71,opt,name=resend_maximum_queue_size,json=resendMaximumQueueSize,proto3" json:"resend_maximum_queue_size,omitempty"`
	OrderQueueSize                    uint32   `protobuf:"varint,72,opt,name=order_queue_size,json=orderQueueSize,proto3" json:"order_queue_size,omitempty"`
	PacketQueueCheck                  uint32   `protobuf:"varint,73,opt,name=packet_queue_check,json=packetQueueCheck,proto3" json:"packet_queue_check,omitempty"`
	DigestSecrets                     uint32   `protobuf:"varint,74,opt,name=digest_secrets,json=digestSecrets,proto3" json:"digest_secrets,omitempty"`
	Resends                           uint32   `protobuf:"varint,75,opt,name=resends,proto3" json:"resends,omitempty"`
	ZeroLengthBodyAcknowledgementSent uint32   `protobuf:"varint,76,opt,name=zero_length_body_acknowledgement_sent,json=zeroLengthBodyAcknowledgementSent,proto3" json:"zero_length_body_acknowledgement_sent,omitempty"`
	TotalOutOfOrderDropPackets        uint32   `protobuf:"varint,77,opt,name=total_out_of_order_drop_packets,json=totalOutOfOrderDropPackets,proto3" json:"total_out_of_order_drop_packets,omitempty"`
	TotalOutOfOrderReorderPackets     uint32   `protobuf:"varint,78,opt,name=total_out_of_order_reorder_packets,json=totalOutOfOrderReorderPackets,proto3" json:"total_out_of_order_reorder_packets,omitempty"`
	TotalPeerAuthenticationFailures   uint32   `protobuf:"varint,79,opt,name=total_peer_authentication_failures,json=totalPeerAuthenticationFailures,proto3" json:"total_peer_authentication_failures,omitempty"`
	IsTunnelUp                        bool     `protobuf:"varint,80,opt,name=is_tunnel_up,json=isTunnelUp,proto3" json:"is_tunnel_up,omitempty"`
	IsCongestionControlEnabled        bool     `protobuf:"varint,81,opt,name=is_congestion_control_enabled,json=isCongestionControlEnabled,proto3" json:"is_congestion_control_enabled,omitempty"`
	XXX_NoUnkeyedLiteral              struct{} `json:"-"`
	XXX_unrecognized                  []byte   `json:"-"`
	XXX_sizecache                     int32    `json:"-"`
}

func (m *L2TpCcInfo) Reset()         { *m = L2TpCcInfo{} }
func (m *L2TpCcInfo) String() string { return proto.CompactTextString(m) }
func (*L2TpCcInfo) ProtoMessage()    {}
func (*L2TpCcInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d2f62e56b429a2f1, []int{1}
}

func (m *L2TpCcInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2TpCcInfo.Unmarshal(m, b)
}
func (m *L2TpCcInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2TpCcInfo.Marshal(b, m, deterministic)
}
func (m *L2TpCcInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2TpCcInfo.Merge(m, src)
}
func (m *L2TpCcInfo) XXX_Size() int {
	return xxx_messageInfo_L2TpCcInfo.Size(m)
}
func (m *L2TpCcInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_L2TpCcInfo.DiscardUnknown(m)
}

var xxx_messageInfo_L2TpCcInfo proto.InternalMessageInfo

func (m *L2TpCcInfo) GetLocalAddress() string {
	if m != nil {
		return m.LocalAddress
	}
	return ""
}

func (m *L2TpCcInfo) GetRemoteAddress() string {
	if m != nil {
		return m.RemoteAddress
	}
	return ""
}

func (m *L2TpCcInfo) GetLocalPort() uint32 {
	if m != nil {
		return m.LocalPort
	}
	return 0
}

func (m *L2TpCcInfo) GetRemotePort() uint32 {
	if m != nil {
		return m.RemotePort
	}
	return 0
}

func (m *L2TpCcInfo) GetProtocol() uint32 {
	if m != nil {
		return m.Protocol
	}
	return 0
}

func (m *L2TpCcInfo) GetIsPmtuEnabled() bool {
	if m != nil {
		return m.IsPmtuEnabled
	}
	return false
}

func (m *L2TpCcInfo) GetRemoteTunnelId() uint32 {
	if m != nil {
		return m.RemoteTunnelId
	}
	return 0
}

func (m *L2TpCcInfo) GetLocalTunnelName() string {
	if m != nil {
		return m.LocalTunnelName
	}
	return ""
}

func (m *L2TpCcInfo) GetRemoteTunnelName() string {
	if m != nil {
		return m.RemoteTunnelName
	}
	return ""
}

func (m *L2TpCcInfo) GetClassName() string {
	if m != nil {
		return m.ClassName
	}
	return ""
}

func (m *L2TpCcInfo) GetActiveSessions() uint32 {
	if m != nil {
		return m.ActiveSessions
	}
	return 0
}

func (m *L2TpCcInfo) GetRetransmitTime() []uint32 {
	if m != nil {
		return m.RetransmitTime
	}
	return nil
}

func (m *L2TpCcInfo) GetSequenceNs() uint32 {
	if m != nil {
		return m.SequenceNs
	}
	return 0
}

func (m *L2TpCcInfo) GetSequenceNr() uint32 {
	if m != nil {
		return m.SequenceNr
	}
	return 0
}

func (m *L2TpCcInfo) GetLocalWindowSize() uint32 {
	if m != nil {
		return m.LocalWindowSize
	}
	return 0
}

func (m *L2TpCcInfo) GetRemoteWindowSize() uint32 {
	if m != nil {
		return m.RemoteWindowSize
	}
	return 0
}

func (m *L2TpCcInfo) GetRetransmissionTime() uint32 {
	if m != nil {
		return m.RetransmissionTime
	}
	return 0
}

func (m *L2TpCcInfo) GetMaximumRetransmissionTime() uint32 {
	if m != nil {
		return m.MaximumRetransmissionTime
	}
	return 0
}

func (m *L2TpCcInfo) GetUnsentQueueSize() uint32 {
	if m != nil {
		return m.UnsentQueueSize
	}
	return 0
}

func (m *L2TpCcInfo) GetUnsentMaximumQueueSize() uint32 {
	if m != nil {
		return m.UnsentMaximumQueueSize
	}
	return 0
}

func (m *L2TpCcInfo) GetResendQueueSize() uint32 {
	if m != nil {
		return m.ResendQueueSize
	}
	return 0
}

func (m *L2TpCcInfo) GetResendMaximumQueueSize() uint32 {
	if m != nil {
		return m.ResendMaximumQueueSize
	}
	return 0
}

func (m *L2TpCcInfo) GetOrderQueueSize() uint32 {
	if m != nil {
		return m.OrderQueueSize
	}
	return 0
}

func (m *L2TpCcInfo) GetPacketQueueCheck() uint32 {
	if m != nil {
		return m.PacketQueueCheck
	}
	return 0
}

func (m *L2TpCcInfo) GetDigestSecrets() uint32 {
	if m != nil {
		return m.DigestSecrets
	}
	return 0
}

func (m *L2TpCcInfo) GetResends() uint32 {
	if m != nil {
		return m.Resends
	}
	return 0
}

func (m *L2TpCcInfo) GetZeroLengthBodyAcknowledgementSent() uint32 {
	if m != nil {
		return m.ZeroLengthBodyAcknowledgementSent
	}
	return 0
}

func (m *L2TpCcInfo) GetTotalOutOfOrderDropPackets() uint32 {
	if m != nil {
		return m.TotalOutOfOrderDropPackets
	}
	return 0
}

func (m *L2TpCcInfo) GetTotalOutOfOrderReorderPackets() uint32 {
	if m != nil {
		return m.TotalOutOfOrderReorderPackets
	}
	return 0
}

func (m *L2TpCcInfo) GetTotalPeerAuthenticationFailures() uint32 {
	if m != nil {
		return m.TotalPeerAuthenticationFailures
	}
	return 0
}

func (m *L2TpCcInfo) GetIsTunnelUp() bool {
	if m != nil {
		return m.IsTunnelUp
	}
	return false
}

func (m *L2TpCcInfo) GetIsCongestionControlEnabled() bool {
	if m != nil {
		return m.IsCongestionControlEnabled
	}
	return false
}

func init() {
	proto.RegisterType((*L2TpCcInfo_KEYS)(nil), "cisco_ios_xr_tunnel_l2tun_oper.l2tp.tunnels.tunnel.l2tp_cc_info_KEYS")
	proto.RegisterType((*L2TpCcInfo)(nil), "cisco_ios_xr_tunnel_l2tun_oper.l2tp.tunnels.tunnel.l2tp_cc_info")
}

func init() { proto.RegisterFile("l2tp_cc_info.proto", fileDescriptor_d2f62e56b429a2f1) }

var fileDescriptor_d2f62e56b429a2f1 = []byte{
	// 773 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x94, 0x7d, 0x4f, 0xe3, 0x46,
	0x10, 0xc6, 0x15, 0x55, 0x6a, 0x8f, 0x3d, 0x52, 0xc8, 0x56, 0xaa, 0xf6, 0xa8, 0xa2, 0x4b, 0xa9,
	0xae, 0x8d, 0xd0, 0x89, 0x4a, 0xa1, 0x6f, 0x94, 0x96, 0x36, 0x04, 0x68, 0x29, 0x2f, 0x09, 0x09,
	0x55, 0xd5, 0xbf, 0x56, 0x66, 0x3d, 0x81, 0x15, 0xf6, 0xae, 0xd9, 0x5d, 0x97, 0x97, 0xaf, 0xda,
	0x2f, 0x73, 0xf2, 0x8c, 0x9d, 0x38, 0xc0, 0x5f, 0x96, 0x9f, 0xf9, 0xcd, 0x33, 0x3b, 0x4f, 0x9c,
	0x65, 0x3c, 0xe9, 0x85, 0x4c, 0x2a, 0x25, 0xb5, 0x99, 0xda, 0xcd, 0xcc, 0xd9, 0x60, 0x79, 0x4f,
	0x69, 0xaf, 0xac, 0xd4, 0xd6, 0xcb, 0x7b, 0x27, 0x43, 0x6e, 0x0c, 0x24, 0x32, 0xe9, 0x85, 0xdc,
	0x48, 0x9b, 0x81, 0xdb, 0x2c, 0x5a, 0x36, 0x49, 0xf6, 0xe5, 0x73, 0x7d, 0x87, 0xb5, 0xea, 0x4e,
	0xf2, 0xf8, 0xe0, 0xdf, 0x09, 0xff, 0x9a, 0xad, 0x24, 0x56, 0x45, 0x49, 0xe5, 0xa1, 0x63, 0xd1,
	0xe8, 0x34, 0xba, 0xcd, 0x71, 0x13, 0xe5, 0x0b, 0x54, 0x8f, 0xe2, 0xf5, 0xff, 0x5f, 0xb3, 0xe5,
	0x7a, 0x37, 0xff, 0x8a, 0x11, 0x21, 0xa3, 0x38, 0x76, 0xe0, 0xbd, 0xe8, 0x75, 0x1a, 0xdd, 0xa5,
	0xf1, 0x32, 0x8a, 0x7d, 0xd2, 0xf8, 0x3b, 0xf6, 0xa9, 0x83, 0xd4, 0x06, 0x98, 0x51, 0x5b, 0x48,
	0x35, 0x49, 0xad, 0xb0, 0x36, 0x63, 0xe4, 0x95, 0x59, 0x17, 0xc4, 0x77, 0x38, 0x7f, 0x09, 0x95,
	0x91, 0x75, 0x81, 0xbf, 0x65, 0xaf, 0x4b, 0x17, 0xac, 0x7f, 0x8f, 0x75, 0x46, 0x12, 0x02, 0x6b,
	0xec, 0x15, 0xc6, 0xa2, 0x6c, 0x22, 0x7e, 0xc0, 0xea, 0xec, 0xbd, 0x58, 0x50, 0x7b, 0x99, 0xa5,
	0x21, 0x97, 0x60, 0xa2, 0xcb, 0x04, 0x62, 0xf1, 0x63, 0xa7, 0xd1, 0x7d, 0x35, 0x6e, 0x6a, 0x3f,
	0x4a, 0x43, 0x7e, 0x40, 0x22, 0xef, 0xb2, 0xd5, 0x72, 0xc8, 0x3c, 0x89, 0x9f, 0xd0, 0xab, 0x5c,
	0xa1, 0x8a, 0x82, 0x6f, 0xb0, 0xd6, 0x42, 0x64, 0x26, 0x4a, 0x41, 0x6c, 0xe3, 0x5e, 0x2b, 0xb5,
	0xd0, 0xce, 0xa2, 0x14, 0xf8, 0x7b, 0xc6, 0x17, 0x5d, 0x11, 0xfe, 0x19, 0xe1, 0xd5, 0xba, 0x2f,
	0xd2, 0x6d, 0xc6, 0x54, 0x12, 0x79, 0x4f, 0xd4, 0x0e, 0x52, 0x4b, 0xa8, 0x60, 0xf9, 0x1b, 0xb6,
	0x12, 0xa9, 0xa0, 0xff, 0x03, 0xe9, 0xc1, 0x7b, 0x6d, 0x8d, 0x17, 0xbf, 0xd0, 0x09, 0x49, 0x9e,
	0x94, 0x6a, 0x01, 0x3a, 0x08, 0x2e, 0x32, 0x3e, 0xd5, 0x41, 0x06, 0x9d, 0x82, 0xf8, 0xb5, 0xf3,
	0x11, 0xad, 0x52, 0xc9, 0x17, 0x3a, 0x85, 0x22, 0x59, 0x0f, 0xb7, 0x39, 0x18, 0x05, 0xd2, 0x78,
	0xb1, 0x4b, 0xc9, 0x56, 0xd2, 0x99, 0x5f, 0x04, 0x9c, 0xf8, 0xed, 0x09, 0xe0, 0xe6, 0x61, 0xdc,
	0x69, 0x13, 0xdb, 0x3b, 0xe9, 0xf5, 0x23, 0x88, 0xdf, 0x11, 0xa3, 0x30, 0xfe, 0x41, 0x7d, 0xa2,
	0x1f, 0xeb, 0x61, 0xd4, 0xe1, 0x3e, 0xc2, 0x65, 0x18, 0x35, 0xfa, 0x5b, 0xf6, 0xd9, 0xec, 0xb4,
	0xb8, 0x17, 0x2d, 0xb2, 0x87, 0x38, 0x5f, 0x2c, 0xe1, 0x32, 0xbb, 0xec, 0x8b, 0x34, 0xba, 0xd7,
	0x69, 0x9e, 0xca, 0x97, 0x1a, 0x07, 0xd8, 0xf8, 0xa6, 0x44, 0xc6, 0xcf, 0xfb, 0x37, 0x58, 0x2b,
	0x37, 0x1e, 0x4c, 0x90, 0xb7, 0x39, 0xe4, 0x40, 0xa7, 0xdb, 0xa7, 0x55, 0xa8, 0x70, 0x5e, 0xe8,
	0x78, 0xb8, 0x6d, 0xf6, 0xa6, 0x64, 0xab, 0x91, 0xb5, 0x9e, 0x03, 0xec, 0xf9, 0x9c, 0x80, 0x53,
	0xaa, 0xcf, 0x5b, 0x37, 0x58, 0xcb, 0x81, 0x07, 0x13, 0xd7, 0x5b, 0x0e, 0x69, 0x0c, 0x15, 0x16,
	0xc6, 0x94, 0xec, 0x0b, 0x63, 0xfe, 0xa0, 0x31, 0x04, 0x3c, 0x1b, 0xd3, 0x65, 0xab, 0xd6, 0xc5,
	0xe0, 0xea, 0x1d, 0x7f, 0xd2, 0xd7, 0x82, 0xfa, 0x9c, 0x7c, 0xcf, 0x78, 0x16, 0xa9, 0x1b, 0xa8,
	0xf6, 0x56, 0xd7, 0xa0, 0x6e, 0xc4, 0x11, 0xfd, 0x2c, 0x54, 0x41, 0x78, 0x50, 0xe8, 0xc5, 0x5f,
	0x3a, 0xd6, 0x57, 0xe0, 0x83, 0xf4, 0xa0, 0x1c, 0x04, 0x2f, 0xfe, 0xa2, 0xfb, 0x82, 0xd4, 0x09,
	0x89, 0x5c, 0xb0, 0x4f, 0xe8, 0x60, 0x5e, 0x1c, 0x63, 0xbd, 0x7a, 0xe5, 0x23, 0xf6, 0xee, 0x11,
	0x9c, 0x95, 0x09, 0x98, 0xab, 0x70, 0x2d, 0x2f, 0x6d, 0xfc, 0x20, 0x23, 0x75, 0x63, 0xec, 0x5d,
	0x02, 0xf1, 0x15, 0xa4, 0x45, 0xa8, 0x45, 0x70, 0xe2, 0x04, 0xfb, 0xbe, 0x2c, 0xe0, 0x13, 0x64,
	0xf7, 0x6c, 0xfc, 0xd0, 0x5f, 0x24, 0x27, 0x60, 0x02, 0x1f, 0xb0, 0xb7, 0xc1, 0x86, 0x28, 0x91,
	0x36, 0x0f, 0xd2, 0x4e, 0x25, 0xed, 0x1d, 0x3b, 0x9b, 0x49, 0x3a, 0xbe, 0x17, 0xa7, 0xe8, 0xb5,
	0x86, 0xd8, 0x30, 0x0f, 0xc3, 0xe9, 0xb0, 0x60, 0xf6, 0x9d, 0xcd, 0x46, 0x44, 0xf0, 0x23, 0xb6,
	0xfe, 0x82, 0x89, 0x03, 0x7a, 0x56, 0x3e, 0x67, 0xe8, 0xd3, 0x7e, 0xe2, 0x33, 0x26, 0xaa, 0xb2,
	0x3a, 0xae, 0xac, 0x32, 0x00, 0x27, 0xa3, 0x3c, 0x5c, 0x83, 0x09, 0x5a, 0x45, 0xa1, 0xf8, 0x16,
	0xa7, 0x91, 0x4e, 0x72, 0x07, 0x5e, 0x0c, 0xd1, 0x8a, 0x4e, 0x3e, 0x02, 0x70, 0xfd, 0x05, 0xee,
	0xb0, 0xc4, 0x78, 0x87, 0x2d, 0x6b, 0x5f, 0xdd, 0x1e, 0x79, 0x26, 0x46, 0x78, 0x79, 0x31, 0xed,
	0xe9, 0xde, 0xf8, 0x3b, 0xe3, 0x7d, 0xd6, 0xd6, 0x5e, 0x2a, 0x6b, 0x8a, 0xfc, 0x8b, 0x11, 0xca,
	0x9a, 0xe0, 0x6c, 0x32, 0xbb, 0xef, 0xce, 0xb1, 0x65, 0x4d, 0xfb, 0xc1, 0x8c, 0x19, 0x10, 0x52,
	0x5e, 0x7e, 0x97, 0x1f, 0xe3, 0x75, 0xb9, 0xf5, 0x21, 0x00, 0x00, 0xff, 0xff, 0x4a, 0x5b, 0xfb,
	0xaa, 0x6b, 0x06, 0x00, 0x00,
}
