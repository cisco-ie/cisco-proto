/*
Copyright 2019 Cisco Systems

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: mpls_te_p2mp_timers_b.proto

package cisco_ios_xr_mpls_te_oper_mpls_te_standby_collaborator_timers

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type MplsTeP2MpTimersB_KEYS struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MplsTeP2MpTimersB_KEYS) Reset()         { *m = MplsTeP2MpTimersB_KEYS{} }
func (m *MplsTeP2MpTimersB_KEYS) String() string { return proto.CompactTextString(m) }
func (*MplsTeP2MpTimersB_KEYS) ProtoMessage()    {}
func (*MplsTeP2MpTimersB_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e75261eb10db2e1, []int{0}
}

func (m *MplsTeP2MpTimersB_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MplsTeP2MpTimersB_KEYS.Unmarshal(m, b)
}
func (m *MplsTeP2MpTimersB_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MplsTeP2MpTimersB_KEYS.Marshal(b, m, deterministic)
}
func (m *MplsTeP2MpTimersB_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MplsTeP2MpTimersB_KEYS.Merge(m, src)
}
func (m *MplsTeP2MpTimersB_KEYS) XXX_Size() int {
	return xxx_messageInfo_MplsTeP2MpTimersB_KEYS.Size(m)
}
func (m *MplsTeP2MpTimersB_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_MplsTeP2MpTimersB_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_MplsTeP2MpTimersB_KEYS proto.InternalMessageInfo

type MplsTeP2MpTimerB struct {
	TimerType            string   `protobuf:"bytes,1,opt,name=timer_type,json=timerType,proto3" json:"timer_type,omitempty"`
	TimerName            string   `protobuf:"bytes,2,opt,name=timer_name,json=timerName,proto3" json:"timer_name,omitempty"`
	StartTime            uint32   `protobuf:"varint,3,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	ExpiryTime           uint32   `protobuf:"varint,4,opt,name=expiry_time,json=expiryTime,proto3" json:"expiry_time,omitempty"`
	StopTime             uint32   `protobuf:"varint,5,opt,name=stop_time,json=stopTime,proto3" json:"stop_time,omitempty"`
	Duration             uint32   `protobuf:"varint,6,opt,name=duration,proto3" json:"duration,omitempty"`
	IsRunning            bool     `protobuf:"varint,7,opt,name=is_running,json=isRunning,proto3" json:"is_running,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MplsTeP2MpTimerB) Reset()         { *m = MplsTeP2MpTimerB{} }
func (m *MplsTeP2MpTimerB) String() string { return proto.CompactTextString(m) }
func (*MplsTeP2MpTimerB) ProtoMessage()    {}
func (*MplsTeP2MpTimerB) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e75261eb10db2e1, []int{1}
}

func (m *MplsTeP2MpTimerB) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MplsTeP2MpTimerB.Unmarshal(m, b)
}
func (m *MplsTeP2MpTimerB) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MplsTeP2MpTimerB.Marshal(b, m, deterministic)
}
func (m *MplsTeP2MpTimerB) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MplsTeP2MpTimerB.Merge(m, src)
}
func (m *MplsTeP2MpTimerB) XXX_Size() int {
	return xxx_messageInfo_MplsTeP2MpTimerB.Size(m)
}
func (m *MplsTeP2MpTimerB) XXX_DiscardUnknown() {
	xxx_messageInfo_MplsTeP2MpTimerB.DiscardUnknown(m)
}

var xxx_messageInfo_MplsTeP2MpTimerB proto.InternalMessageInfo

func (m *MplsTeP2MpTimerB) GetTimerType() string {
	if m != nil {
		return m.TimerType
	}
	return ""
}

func (m *MplsTeP2MpTimerB) GetTimerName() string {
	if m != nil {
		return m.TimerName
	}
	return ""
}

func (m *MplsTeP2MpTimerB) GetStartTime() uint32 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *MplsTeP2MpTimerB) GetExpiryTime() uint32 {
	if m != nil {
		return m.ExpiryTime
	}
	return 0
}

func (m *MplsTeP2MpTimerB) GetStopTime() uint32 {
	if m != nil {
		return m.StopTime
	}
	return 0
}

func (m *MplsTeP2MpTimerB) GetDuration() uint32 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *MplsTeP2MpTimerB) GetIsRunning() bool {
	if m != nil {
		return m.IsRunning
	}
	return false
}

type MplsTeP2MpTimersB struct {
	P2MpTimer            []*MplsTeP2MpTimerB `protobuf:"bytes,50,rep,name=p2mp_timer,json=p2mpTimer,proto3" json:"p2mp_timer,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *MplsTeP2MpTimersB) Reset()         { *m = MplsTeP2MpTimersB{} }
func (m *MplsTeP2MpTimersB) String() string { return proto.CompactTextString(m) }
func (*MplsTeP2MpTimersB) ProtoMessage()    {}
func (*MplsTeP2MpTimersB) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e75261eb10db2e1, []int{2}
}

func (m *MplsTeP2MpTimersB) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MplsTeP2MpTimersB.Unmarshal(m, b)
}
func (m *MplsTeP2MpTimersB) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MplsTeP2MpTimersB.Marshal(b, m, deterministic)
}
func (m *MplsTeP2MpTimersB) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MplsTeP2MpTimersB.Merge(m, src)
}
func (m *MplsTeP2MpTimersB) XXX_Size() int {
	return xxx_messageInfo_MplsTeP2MpTimersB.Size(m)
}
func (m *MplsTeP2MpTimersB) XXX_DiscardUnknown() {
	xxx_messageInfo_MplsTeP2MpTimersB.DiscardUnknown(m)
}

var xxx_messageInfo_MplsTeP2MpTimersB proto.InternalMessageInfo

func (m *MplsTeP2MpTimersB) GetP2MpTimer() []*MplsTeP2MpTimerB {
	if m != nil {
		return m.P2MpTimer
	}
	return nil
}

func init() {
	proto.RegisterType((*MplsTeP2MpTimersB_KEYS)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te_standby.collaborator_timers.mpls_te_p2mp_timers_b_KEYS")
	proto.RegisterType((*MplsTeP2MpTimerB)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te_standby.collaborator_timers.mpls_te_p2mp_timer_b")
	proto.RegisterType((*MplsTeP2MpTimersB)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te_standby.collaborator_timers.mpls_te_p2mp_timers_b")
}

func init() { proto.RegisterFile("mpls_te_p2mp_timers_b.proto", fileDescriptor_1e75261eb10db2e1) }

var fileDescriptor_1e75261eb10db2e1 = []byte{
	// 281 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x91, 0xbd, 0x4e, 0xc3, 0x30,
	0x14, 0x85, 0x65, 0x0a, 0xa5, 0xbe, 0x15, 0x4b, 0x04, 0x92, 0xd5, 0x82, 0x88, 0x32, 0x65, 0xca,
	0x10, 0x66, 0x46, 0x26, 0x24, 0x86, 0xb4, 0x0b, 0x93, 0xe5, 0xa4, 0x16, 0xb2, 0x14, 0xff, 0xe8,
	0xda, 0x95, 0x9a, 0x67, 0xe0, 0x55, 0x79, 0x08, 0x14, 0x9b, 0xa8, 0x48, 0x64, 0x63, 0xcb, 0xfd,
	0xbe, 0xab, 0x13, 0xfb, 0x18, 0xb6, 0xda, 0xf5, 0x9e, 0x07, 0xc9, 0x5d, 0xad, 0x1d, 0x0f, 0x4a,
	0x4b, 0xf4, 0xbc, 0xad, 0x1c, 0xda, 0x60, 0xb3, 0xe7, 0x4e, 0xf9, 0xce, 0x72, 0x65, 0x3d, 0x3f,
	0x21, 0x9f, 0x36, 0xad, 0x93, 0x58, 0x4d, 0x83, 0x0f, 0xc2, 0x1c, 0xda, 0xa1, 0xea, 0x6c, 0xdf,
	0x8b, 0xd6, 0xa2, 0x08, 0x16, 0x7f, 0x62, 0x8a, 0x7b, 0xd8, 0xcc, 0xa6, 0xf3, 0xd7, 0x97, 0xf7,
	0x5d, 0xf1, 0x45, 0xe0, 0xf6, 0xaf, 0xe6, 0x6d, 0xf6, 0x00, 0x90, 0x3e, 0xc3, 0xe0, 0x24, 0x23,
	0x39, 0x29, 0x69, 0x43, 0x23, 0xd9, 0x0f, 0x4e, 0x9e, 0xb5, 0x11, 0x5a, 0xb2, 0x8b, 0x5f, 0xfa,
	0x4d, 0xe8, 0xa8, 0x7d, 0x10, 0x18, 0x62, 0x1c, 0x5b, 0xe4, 0xa4, 0xbc, 0x69, 0x68, 0x24, 0x7b,
	0xa5, 0x65, 0xf6, 0x08, 0x6b, 0x79, 0x72, 0x0a, 0x87, 0xe4, 0x2f, 0xa3, 0x87, 0x84, 0xe2, 0xc2,
	0x16, 0xa8, 0x0f, 0x36, 0x9d, 0x86, 0x5d, 0x45, 0xbd, 0x1a, 0x41, 0x94, 0x1b, 0x58, 0x1d, 0x8e,
	0x28, 0x82, 0xb2, 0x86, 0x2d, 0x93, 0x9b, 0xe6, 0xf1, 0xc7, 0xca, 0x73, 0x3c, 0x1a, 0xa3, 0xcc,
	0x07, 0xbb, 0xce, 0x49, 0xb9, 0x6a, 0xa8, 0xf2, 0x4d, 0x02, 0xc5, 0x27, 0x81, 0xbb, 0xd9, 0x36,
	0x32, 0x04, 0x38, 0x03, 0x56, 0xe7, 0x8b, 0x72, 0x5d, 0xef, 0xaa, 0x7f, 0x55, 0x5f, 0xcd, 0x15,
	0xdb, 0xd0, 0x71, 0x1a, 0xef, 0x81, 0xed, 0x32, 0x3e, 0xf0, 0xd3, 0x77, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x51, 0x06, 0x06, 0xd1, 0xff, 0x01, 0x00, 0x00,
}
