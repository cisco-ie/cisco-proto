/*
Copyright 2019 Cisco Systems

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: te_service_sr_policy.proto

package cisco_ios_xr_mpls_te_oper_mpls_te_standby_auto_tunnel_services_sr_policy_entries_sr_policy_entry

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type TeServiceSrPolicy_KEYS struct {
	ClientId             uint32   `protobuf:"varint,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	Color                uint32   `protobuf:"varint,2,opt,name=color,proto3" json:"color,omitempty"`
	EndPoint             string   `protobuf:"bytes,3,opt,name=end_point,json=endPoint,proto3" json:"end_point,omitempty"`
	Distinguisher        uint32   `protobuf:"varint,4,opt,name=distinguisher,proto3" json:"distinguisher,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TeServiceSrPolicy_KEYS) Reset()         { *m = TeServiceSrPolicy_KEYS{} }
func (m *TeServiceSrPolicy_KEYS) String() string { return proto.CompactTextString(m) }
func (*TeServiceSrPolicy_KEYS) ProtoMessage()    {}
func (*TeServiceSrPolicy_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_ecaa3ce9b0239004, []int{0}
}

func (m *TeServiceSrPolicy_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TeServiceSrPolicy_KEYS.Unmarshal(m, b)
}
func (m *TeServiceSrPolicy_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TeServiceSrPolicy_KEYS.Marshal(b, m, deterministic)
}
func (m *TeServiceSrPolicy_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeServiceSrPolicy_KEYS.Merge(m, src)
}
func (m *TeServiceSrPolicy_KEYS) XXX_Size() int {
	return xxx_messageInfo_TeServiceSrPolicy_KEYS.Size(m)
}
func (m *TeServiceSrPolicy_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_TeServiceSrPolicy_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_TeServiceSrPolicy_KEYS proto.InternalMessageInfo

func (m *TeServiceSrPolicy_KEYS) GetClientId() uint32 {
	if m != nil {
		return m.ClientId
	}
	return 0
}

func (m *TeServiceSrPolicy_KEYS) GetColor() uint32 {
	if m != nil {
		return m.Color
	}
	return 0
}

func (m *TeServiceSrPolicy_KEYS) GetEndPoint() string {
	if m != nil {
		return m.EndPoint
	}
	return ""
}

func (m *TeServiceSrPolicy_KEYS) GetDistinguisher() uint32 {
	if m != nil {
		return m.Distinguisher
	}
	return 0
}

type TeEndPoint struct {
	AddressFamilyType    string   `protobuf:"bytes,1,opt,name=address_family_type,json=addressFamilyType,proto3" json:"address_family_type,omitempty"`
	Ipv4Address          string   `protobuf:"bytes,2,opt,name=ipv4_address,json=ipv4Address,proto3" json:"ipv4_address,omitempty"`
	Ipv6Address          string   `protobuf:"bytes,3,opt,name=ipv6_address,json=ipv6Address,proto3" json:"ipv6_address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TeEndPoint) Reset()         { *m = TeEndPoint{} }
func (m *TeEndPoint) String() string { return proto.CompactTextString(m) }
func (*TeEndPoint) ProtoMessage()    {}
func (*TeEndPoint) Descriptor() ([]byte, []int) {
	return fileDescriptor_ecaa3ce9b0239004, []int{1}
}

func (m *TeEndPoint) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TeEndPoint.Unmarshal(m, b)
}
func (m *TeEndPoint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TeEndPoint.Marshal(b, m, deterministic)
}
func (m *TeEndPoint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeEndPoint.Merge(m, src)
}
func (m *TeEndPoint) XXX_Size() int {
	return xxx_messageInfo_TeEndPoint.Size(m)
}
func (m *TeEndPoint) XXX_DiscardUnknown() {
	xxx_messageInfo_TeEndPoint.DiscardUnknown(m)
}

var xxx_messageInfo_TeEndPoint proto.InternalMessageInfo

func (m *TeEndPoint) GetAddressFamilyType() string {
	if m != nil {
		return m.AddressFamilyType
	}
	return ""
}

func (m *TeEndPoint) GetIpv4Address() string {
	if m != nil {
		return m.Ipv4Address
	}
	return ""
}

func (m *TeEndPoint) GetIpv6Address() string {
	if m != nil {
		return m.Ipv6Address
	}
	return ""
}

type TeAutoTunReqExpPathTunInfo struct {
	TunnelId             uint32   `protobuf:"varint,1,opt,name=tunnel_id,json=tunnelId,proto3" json:"tunnel_id,omitempty"`
	TunnelUp             bool     `protobuf:"varint,2,opt,name=tunnel_up,json=tunnelUp,proto3" json:"tunnel_up,omitempty"`
	Ipv6Caps             bool     `protobuf:"varint,3,opt,name=ipv6_caps,json=ipv6Caps,proto3" json:"ipv6_caps,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TeAutoTunReqExpPathTunInfo) Reset()         { *m = TeAutoTunReqExpPathTunInfo{} }
func (m *TeAutoTunReqExpPathTunInfo) String() string { return proto.CompactTextString(m) }
func (*TeAutoTunReqExpPathTunInfo) ProtoMessage()    {}
func (*TeAutoTunReqExpPathTunInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_ecaa3ce9b0239004, []int{2}
}

func (m *TeAutoTunReqExpPathTunInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TeAutoTunReqExpPathTunInfo.Unmarshal(m, b)
}
func (m *TeAutoTunReqExpPathTunInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TeAutoTunReqExpPathTunInfo.Marshal(b, m, deterministic)
}
func (m *TeAutoTunReqExpPathTunInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeAutoTunReqExpPathTunInfo.Merge(m, src)
}
func (m *TeAutoTunReqExpPathTunInfo) XXX_Size() int {
	return xxx_messageInfo_TeAutoTunReqExpPathTunInfo.Size(m)
}
func (m *TeAutoTunReqExpPathTunInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TeAutoTunReqExpPathTunInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TeAutoTunReqExpPathTunInfo proto.InternalMessageInfo

func (m *TeAutoTunReqExpPathTunInfo) GetTunnelId() uint32 {
	if m != nil {
		return m.TunnelId
	}
	return 0
}

func (m *TeAutoTunReqExpPathTunInfo) GetTunnelUp() bool {
	if m != nil {
		return m.TunnelUp
	}
	return false
}

func (m *TeAutoTunReqExpPathTunInfo) GetIpv6Caps() bool {
	if m != nil {
		return m.Ipv6Caps
	}
	return false
}

type TeAutoTunExpPathHop struct {
	HopType              string   `protobuf:"bytes,1,opt,name=hop_type,json=hopType,proto3" json:"hop_type,omitempty"`
	Ipv4Address          string   `protobuf:"bytes,2,opt,name=ipv4_address,json=ipv4Address,proto3" json:"ipv4_address,omitempty"`
	MplsLabel            uint32   `protobuf:"varint,3,opt,name=mpls_label,json=mplsLabel,proto3" json:"mpls_label,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TeAutoTunExpPathHop) Reset()         { *m = TeAutoTunExpPathHop{} }
func (m *TeAutoTunExpPathHop) String() string { return proto.CompactTextString(m) }
func (*TeAutoTunExpPathHop) ProtoMessage()    {}
func (*TeAutoTunExpPathHop) Descriptor() ([]byte, []int) {
	return fileDescriptor_ecaa3ce9b0239004, []int{3}
}

func (m *TeAutoTunExpPathHop) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TeAutoTunExpPathHop.Unmarshal(m, b)
}
func (m *TeAutoTunExpPathHop) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TeAutoTunExpPathHop.Marshal(b, m, deterministic)
}
func (m *TeAutoTunExpPathHop) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeAutoTunExpPathHop.Merge(m, src)
}
func (m *TeAutoTunExpPathHop) XXX_Size() int {
	return xxx_messageInfo_TeAutoTunExpPathHop.Size(m)
}
func (m *TeAutoTunExpPathHop) XXX_DiscardUnknown() {
	xxx_messageInfo_TeAutoTunExpPathHop.DiscardUnknown(m)
}

var xxx_messageInfo_TeAutoTunExpPathHop proto.InternalMessageInfo

func (m *TeAutoTunExpPathHop) GetHopType() string {
	if m != nil {
		return m.HopType
	}
	return ""
}

func (m *TeAutoTunExpPathHop) GetIpv4Address() string {
	if m != nil {
		return m.Ipv4Address
	}
	return ""
}

func (m *TeAutoTunExpPathHop) GetMplsLabel() uint32 {
	if m != nil {
		return m.MplsLabel
	}
	return 0
}

type TeAutoTunReqExpPath struct {
	ContextId            uint32                      `protobuf:"varint,1,opt,name=context_id,json=contextId,proto3" json:"context_id,omitempty"`
	PathWeight           uint32                      `protobuf:"varint,2,opt,name=path_weight,json=pathWeight,proto3" json:"path_weight,omitempty"`
	IsStale              bool                        `protobuf:"varint,3,opt,name=is_stale,json=isStale,proto3" json:"is_stale,omitempty"`
	IsSynced             bool                        `protobuf:"varint,4,opt,name=is_synced,json=isSynced,proto3" json:"is_synced,omitempty"`
	TunnelInfo           *TeAutoTunReqExpPathTunInfo `protobuf:"bytes,5,opt,name=tunnel_info,json=tunnelInfo,proto3" json:"tunnel_info,omitempty"`
	ProgrammedInFib      bool                        `protobuf:"varint,6,opt,name=programmed_in_fib,json=programmedInFib,proto3" json:"programmed_in_fib,omitempty"`
	Hops                 []*TeAutoTunExpPathHop      `protobuf:"bytes,7,rep,name=hops,proto3" json:"hops,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *TeAutoTunReqExpPath) Reset()         { *m = TeAutoTunReqExpPath{} }
func (m *TeAutoTunReqExpPath) String() string { return proto.CompactTextString(m) }
func (*TeAutoTunReqExpPath) ProtoMessage()    {}
func (*TeAutoTunReqExpPath) Descriptor() ([]byte, []int) {
	return fileDescriptor_ecaa3ce9b0239004, []int{4}
}

func (m *TeAutoTunReqExpPath) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TeAutoTunReqExpPath.Unmarshal(m, b)
}
func (m *TeAutoTunReqExpPath) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TeAutoTunReqExpPath.Marshal(b, m, deterministic)
}
func (m *TeAutoTunReqExpPath) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeAutoTunReqExpPath.Merge(m, src)
}
func (m *TeAutoTunReqExpPath) XXX_Size() int {
	return xxx_messageInfo_TeAutoTunReqExpPath.Size(m)
}
func (m *TeAutoTunReqExpPath) XXX_DiscardUnknown() {
	xxx_messageInfo_TeAutoTunReqExpPath.DiscardUnknown(m)
}

var xxx_messageInfo_TeAutoTunReqExpPath proto.InternalMessageInfo

func (m *TeAutoTunReqExpPath) GetContextId() uint32 {
	if m != nil {
		return m.ContextId
	}
	return 0
}

func (m *TeAutoTunReqExpPath) GetPathWeight() uint32 {
	if m != nil {
		return m.PathWeight
	}
	return 0
}

func (m *TeAutoTunReqExpPath) GetIsStale() bool {
	if m != nil {
		return m.IsStale
	}
	return false
}

func (m *TeAutoTunReqExpPath) GetIsSynced() bool {
	if m != nil {
		return m.IsSynced
	}
	return false
}

func (m *TeAutoTunReqExpPath) GetTunnelInfo() *TeAutoTunReqExpPathTunInfo {
	if m != nil {
		return m.TunnelInfo
	}
	return nil
}

func (m *TeAutoTunReqExpPath) GetProgrammedInFib() bool {
	if m != nil {
		return m.ProgrammedInFib
	}
	return false
}

func (m *TeAutoTunReqExpPath) GetHops() []*TeAutoTunExpPathHop {
	if m != nil {
		return m.Hops
	}
	return nil
}

type TeServiceSrPolicy struct {
	SrPolicyId               uint32                 `protobuf:"varint,50,opt,name=sr_policy_id,json=srPolicyId,proto3" json:"sr_policy_id,omitempty"`
	PolicyActive             bool                   `protobuf:"varint,51,opt,name=policy_active,json=policyActive,proto3" json:"policy_active,omitempty"`
	ClientIdXr               uint32                 `protobuf:"varint,52,opt,name=client_id_xr,json=clientIdXr,proto3" json:"client_id_xr,omitempty"`
	ClientName               string                 `protobuf:"bytes,53,opt,name=client_name,json=clientName,proto3" json:"client_name,omitempty"`
	ColorXr                  uint32                 `protobuf:"varint,54,opt,name=color_xr,json=colorXr,proto3" json:"color_xr,omitempty"`
	EndPointXr               *TeEndPoint            `protobuf:"bytes,55,opt,name=end_point_xr,json=endPointXr,proto3" json:"end_point_xr,omitempty"`
	DistinguisherXr          uint32                 `protobuf:"varint,56,opt,name=distinguisher_xr,json=distinguisherXr,proto3" json:"distinguisher_xr,omitempty"`
	Ipv6Caps                 bool                   `protobuf:"varint,57,opt,name=ipv6_caps,json=ipv6Caps,proto3" json:"ipv6_caps,omitempty"`
	BindingSidContextId      uint32                 `protobuf:"varint,58,opt,name=binding_sid_context_id,json=bindingSidContextId,proto3" json:"binding_sid_context_id,omitempty"`
	RequestedBindingSid      uint32                 `protobuf:"varint,59,opt,name=requested_binding_sid,json=requestedBindingSid,proto3" json:"requested_binding_sid,omitempty"`
	BindingSidRequestPending bool                   `protobuf:"varint,60,opt,name=binding_sid_request_pending,json=bindingSidRequestPending,proto3" json:"binding_sid_request_pending,omitempty"`
	AllocatedBindingSid      uint32                 `protobuf:"varint,61,opt,name=allocated_binding_sid,json=allocatedBindingSid,proto3" json:"allocated_binding_sid,omitempty"`
	RewriteRequestPending    bool                   `protobuf:"varint,62,opt,name=rewrite_request_pending,json=rewriteRequestPending,proto3" json:"rewrite_request_pending,omitempty"`
	RewriteDone              bool                   `protobuf:"varint,63,opt,name=rewrite_done,json=rewriteDone,proto3" json:"rewrite_done,omitempty"`
	IsStale                  bool                   `protobuf:"varint,64,opt,name=is_stale,json=isStale,proto3" json:"is_stale,omitempty"`
	IsSynced                 bool                   `protobuf:"varint,65,opt,name=is_synced,json=isSynced,proto3" json:"is_synced,omitempty"`
	NotifyTime               uint32                 `protobuf:"varint,66,opt,name=notify_time,json=notifyTime,proto3" json:"notify_time,omitempty"`
	NotifyStateIsActive      bool                   `protobuf:"varint,67,opt,name=notify_state_is_active,json=notifyStateIsActive,proto3" json:"notify_state_is_active,omitempty"`
	ExplicitPath             []*TeAutoTunReqExpPath `protobuf:"bytes,68,rep,name=explicit_path,json=explicitPath,proto3" json:"explicit_path,omitempty"`
	CreationTime             uint64                 `protobuf:"varint,69,opt,name=creation_time,json=creationTime,proto3" json:"creation_time,omitempty"`
	XXX_NoUnkeyedLiteral     struct{}               `json:"-"`
	XXX_unrecognized         []byte                 `json:"-"`
	XXX_sizecache            int32                  `json:"-"`
}

func (m *TeServiceSrPolicy) Reset()         { *m = TeServiceSrPolicy{} }
func (m *TeServiceSrPolicy) String() string { return proto.CompactTextString(m) }
func (*TeServiceSrPolicy) ProtoMessage()    {}
func (*TeServiceSrPolicy) Descriptor() ([]byte, []int) {
	return fileDescriptor_ecaa3ce9b0239004, []int{5}
}

func (m *TeServiceSrPolicy) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TeServiceSrPolicy.Unmarshal(m, b)
}
func (m *TeServiceSrPolicy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TeServiceSrPolicy.Marshal(b, m, deterministic)
}
func (m *TeServiceSrPolicy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeServiceSrPolicy.Merge(m, src)
}
func (m *TeServiceSrPolicy) XXX_Size() int {
	return xxx_messageInfo_TeServiceSrPolicy.Size(m)
}
func (m *TeServiceSrPolicy) XXX_DiscardUnknown() {
	xxx_messageInfo_TeServiceSrPolicy.DiscardUnknown(m)
}

var xxx_messageInfo_TeServiceSrPolicy proto.InternalMessageInfo

func (m *TeServiceSrPolicy) GetSrPolicyId() uint32 {
	if m != nil {
		return m.SrPolicyId
	}
	return 0
}

func (m *TeServiceSrPolicy) GetPolicyActive() bool {
	if m != nil {
		return m.PolicyActive
	}
	return false
}

func (m *TeServiceSrPolicy) GetClientIdXr() uint32 {
	if m != nil {
		return m.ClientIdXr
	}
	return 0
}

func (m *TeServiceSrPolicy) GetClientName() string {
	if m != nil {
		return m.ClientName
	}
	return ""
}

func (m *TeServiceSrPolicy) GetColorXr() uint32 {
	if m != nil {
		return m.ColorXr
	}
	return 0
}

func (m *TeServiceSrPolicy) GetEndPointXr() *TeEndPoint {
	if m != nil {
		return m.EndPointXr
	}
	return nil
}

func (m *TeServiceSrPolicy) GetDistinguisherXr() uint32 {
	if m != nil {
		return m.DistinguisherXr
	}
	return 0
}

func (m *TeServiceSrPolicy) GetIpv6Caps() bool {
	if m != nil {
		return m.Ipv6Caps
	}
	return false
}

func (m *TeServiceSrPolicy) GetBindingSidContextId() uint32 {
	if m != nil {
		return m.BindingSidContextId
	}
	return 0
}

func (m *TeServiceSrPolicy) GetRequestedBindingSid() uint32 {
	if m != nil {
		return m.RequestedBindingSid
	}
	return 0
}

func (m *TeServiceSrPolicy) GetBindingSidRequestPending() bool {
	if m != nil {
		return m.BindingSidRequestPending
	}
	return false
}

func (m *TeServiceSrPolicy) GetAllocatedBindingSid() uint32 {
	if m != nil {
		return m.AllocatedBindingSid
	}
	return 0
}

func (m *TeServiceSrPolicy) GetRewriteRequestPending() bool {
	if m != nil {
		return m.RewriteRequestPending
	}
	return false
}

func (m *TeServiceSrPolicy) GetRewriteDone() bool {
	if m != nil {
		return m.RewriteDone
	}
	return false
}

func (m *TeServiceSrPolicy) GetIsStale() bool {
	if m != nil {
		return m.IsStale
	}
	return false
}

func (m *TeServiceSrPolicy) GetIsSynced() bool {
	if m != nil {
		return m.IsSynced
	}
	return false
}

func (m *TeServiceSrPolicy) GetNotifyTime() uint32 {
	if m != nil {
		return m.NotifyTime
	}
	return 0
}

func (m *TeServiceSrPolicy) GetNotifyStateIsActive() bool {
	if m != nil {
		return m.NotifyStateIsActive
	}
	return false
}

func (m *TeServiceSrPolicy) GetExplicitPath() []*TeAutoTunReqExpPath {
	if m != nil {
		return m.ExplicitPath
	}
	return nil
}

func (m *TeServiceSrPolicy) GetCreationTime() uint64 {
	if m != nil {
		return m.CreationTime
	}
	return 0
}

func init() {
	proto.RegisterType((*TeServiceSrPolicy_KEYS)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te_standby.auto_tunnel_services.sr_policy_entries.sr_policy_entry.te_service_sr_policy_KEYS")
	proto.RegisterType((*TeEndPoint)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te_standby.auto_tunnel_services.sr_policy_entries.sr_policy_entry.te_end_point")
	proto.RegisterType((*TeAutoTunReqExpPathTunInfo)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te_standby.auto_tunnel_services.sr_policy_entries.sr_policy_entry.te_auto_tun_req_exp_path_tun_info")
	proto.RegisterType((*TeAutoTunExpPathHop)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te_standby.auto_tunnel_services.sr_policy_entries.sr_policy_entry.te_auto_tun_exp_path_hop")
	proto.RegisterType((*TeAutoTunReqExpPath)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te_standby.auto_tunnel_services.sr_policy_entries.sr_policy_entry.te_auto_tun_req_exp_path")
	proto.RegisterType((*TeServiceSrPolicy)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te_standby.auto_tunnel_services.sr_policy_entries.sr_policy_entry.te_service_sr_policy")
}

func init() { proto.RegisterFile("te_service_sr_policy.proto", fileDescriptor_ecaa3ce9b0239004) }

var fileDescriptor_ecaa3ce9b0239004 = []byte{
	// 879 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x56, 0xcf, 0x6f, 0x1b, 0x45,
	0x14, 0xd6, 0x92, 0xb4, 0xb1, 0xc7, 0xb6, 0x4a, 0x37, 0x2d, 0x4c, 0xa9, 0x50, 0x1d, 0x97, 0x83,
	0xe1, 0xe0, 0x43, 0x52, 0xc2, 0xcf, 0x02, 0x69, 0xda, 0x4a, 0x16, 0x08, 0x45, 0xeb, 0x22, 0xc2,
	0x69, 0x58, 0xef, 0x3c, 0xc7, 0x23, 0xad, 0x67, 0xa6, 0x33, 0xe3, 0xc4, 0xdb, 0x2b, 0x9c, 0x11,
	0xfc, 0x05, 0x48, 0x48, 0xfc, 0x8d, 0x5c, 0xd1, 0xbc, 0x9d, 0x5d, 0xaf, 0xd3, 0x0a, 0xb8, 0x90,
	0x1e, 0xe7, 0xfb, 0xde, 0x9b, 0xef, 0xbd, 0xb7, 0xdf, 0x3c, 0x2d, 0x79, 0xc7, 0x01, 0xb3, 0x60,
	0xce, 0x45, 0x06, 0xcc, 0x1a, 0xa6, 0x55, 0x2e, 0xb2, 0x62, 0xa4, 0x8d, 0x72, 0x2a, 0xfe, 0x31,
	0x13, 0x36, 0x53, 0x4c, 0x28, 0xcb, 0x56, 0x86, 0x2d, 0x74, 0x6e, 0x99, 0x03, 0xa6, 0x34, 0x98,
	0x51, 0x75, 0xb0, 0x2e, 0x95, 0x7c, 0x5a, 0x8c, 0xd2, 0xa5, 0x53, 0xcc, 0x2d, 0xa5, 0x84, 0xbc,
	0xba, 0xce, 0x8e, 0xea, 0xfb, 0x18, 0x48, 0x67, 0xc4, 0x4b, 0x48, 0x31, 0xf8, 0x2d, 0x22, 0x77,
	0x5e, 0x55, 0x00, 0xfb, 0xfa, 0xc9, 0x0f, 0x93, 0xf8, 0x2e, 0x69, 0x67, 0xb9, 0x00, 0xe9, 0x98,
	0xe0, 0x34, 0xea, 0x47, 0xc3, 0x5e, 0xd2, 0x2a, 0x81, 0x31, 0x8f, 0x6f, 0x91, 0x6b, 0x99, 0xca,
	0x95, 0xa1, 0x6f, 0x20, 0x51, 0x1e, 0x7c, 0x0a, 0x48, 0xce, 0xb4, 0x12, 0xd2, 0xd1, 0xad, 0x7e,
	0x34, 0x6c, 0x27, 0x2d, 0x90, 0xfc, 0xc4, 0x9f, 0xe3, 0xf7, 0x48, 0x8f, 0x0b, 0xeb, 0x84, 0x3c,
	0x5b, 0x0a, 0x3b, 0x07, 0x43, 0xb7, 0x31, 0x75, 0x13, 0x1c, 0xfc, 0x1c, 0x91, 0xae, 0x03, 0x56,
	0x5f, 0x13, 0x8f, 0xc8, 0x6e, 0xca, 0xb9, 0x01, 0x6b, 0xd9, 0x2c, 0x5d, 0x88, 0xbc, 0x60, 0xae,
	0xd0, 0x80, 0x05, 0xb5, 0x93, 0x9b, 0x81, 0x7a, 0x8a, 0xcc, 0xb3, 0x42, 0x43, 0xbc, 0x47, 0xba,
	0x42, 0x9f, 0x3f, 0x60, 0x81, 0xc1, 0x02, 0xdb, 0x49, 0xc7, 0x63, 0x47, 0x25, 0x14, 0x42, 0x0e,
	0xeb, 0x90, 0xad, 0x3a, 0xe4, 0x30, 0x84, 0x0c, 0x5e, 0x90, 0x3d, 0x07, 0xac, 0x9a, 0x2b, 0x33,
	0xf0, 0x9c, 0xc1, 0x4a, 0x33, 0x9d, 0xba, 0x39, 0x02, 0x42, 0xce, 0x94, 0x6f, 0x37, 0x0c, 0x7d,
	0x3d, 0xa1, 0x12, 0x18, 0xf3, 0x06, 0xb9, 0xd4, 0x58, 0x44, 0xab, 0x22, 0xbf, 0xd3, 0x9e, 0xc4,
	0x0a, 0xb2, 0x54, 0x97, 0xf2, 0xad, 0xa4, 0xe5, 0x81, 0xe3, 0x54, 0xdb, 0xc1, 0x05, 0xa1, 0x4d,
	0xed, 0x5a, 0x77, 0xae, 0x74, 0x7c, 0x87, 0xb4, 0xe6, 0x4a, 0x37, 0x47, 0xb0, 0x33, 0x57, 0xfa,
	0xbf, 0x36, 0xfe, 0x2e, 0x21, 0x68, 0x9d, 0x3c, 0x9d, 0x42, 0x8e, 0xba, 0xbd, 0xa4, 0xed, 0x91,
	0x6f, 0x3c, 0x30, 0xf8, 0x6b, 0x6b, 0x53, 0xb9, 0xd9, 0xb5, 0xcf, 0xcd, 0x94, 0x74, 0xb0, 0x6a,
	0xf8, 0xa1, 0x1d, 0x90, 0x31, 0x8f, 0xef, 0x91, 0x0e, 0x16, 0x79, 0x01, 0xe2, 0x6c, 0xee, 0x82,
	0x2d, 0x88, 0x87, 0xbe, 0x47, 0xc4, 0x57, 0x2e, 0xac, 0x77, 0x6c, 0x0e, 0xa1, 0xe3, 0x1d, 0x61,
	0x27, 0xfe, 0x88, 0xd3, 0xb0, 0xcc, 0x16, 0x32, 0x03, 0x8e, 0xae, 0xf0, 0xd3, 0xb0, 0x13, 0x3c,
	0xc7, 0x7f, 0x46, 0xa4, 0x53, 0x4d, 0x59, 0xce, 0x14, 0xbd, 0xd6, 0x8f, 0x86, 0x9d, 0xfd, 0x9f,
	0xa2, 0xd1, 0xff, 0xfd, 0x3c, 0x46, 0xff, 0x6a, 0x80, 0x84, 0x84, 0xaf, 0xed, 0xcd, 0xf0, 0x01,
	0xb9, 0xa9, 0x8d, 0x3a, 0x33, 0xe9, 0x62, 0x01, 0x9c, 0x09, 0xc9, 0x66, 0x62, 0x4a, 0xaf, 0x63,
	0x33, 0x37, 0xd6, 0xc4, 0x58, 0x3e, 0x15, 0xd3, 0xf8, 0x97, 0x88, 0x6c, 0xcf, 0x95, 0xb6, 0x74,
	0xa7, 0xbf, 0x35, 0xec, 0xec, 0xbf, 0xb8, 0xda, 0x5e, 0x9a, 0x86, 0x4a, 0xb0, 0x8e, 0xc1, 0x1f,
	0x2d, 0x72, 0xeb, 0x55, 0x9b, 0x20, 0xee, 0x93, 0xee, 0xfa, 0x2a, 0xc1, 0xe9, 0x7e, 0xf9, 0x5d,
	0xad, 0x39, 0x41, 0x68, 0xcc, 0xe3, 0xfb, 0xa4, 0x17, 0xe8, 0x34, 0x73, 0xe2, 0x1c, 0xe8, 0x01,
	0xf6, 0xdc, 0x2d, 0xc1, 0x23, 0xc4, 0xfc, 0x35, 0xf5, 0x2e, 0x61, 0x2b, 0x43, 0x1f, 0x94, 0xd7,
	0x54, 0xeb, 0xe4, 0xd4, 0x78, 0xff, 0x84, 0x08, 0x99, 0x2e, 0x80, 0x7e, 0x88, 0xe6, 0x0d, 0x01,
	0xdf, 0xa6, 0x0b, 0xf0, 0xfe, 0xc1, 0x25, 0xe3, 0xd3, 0x0f, 0x31, 0x7d, 0x07, 0xcf, 0xa7, 0x26,
	0xfe, 0x35, 0x22, 0xdd, 0x7a, 0x61, 0x78, 0xfe, 0x23, 0xf4, 0x88, 0xbc, 0x92, 0xb1, 0xd6, 0xc2,
	0x09, 0xa9, 0x56, 0xdd, 0xa9, 0x89, 0xdf, 0x27, 0x6f, 0x6e, 0xec, 0x35, 0x5f, 0xd5, 0xc7, 0x58,
	0xf5, 0x8d, 0x0d, 0xfc, 0xd4, 0x6c, 0xee, 0x82, 0x4f, 0x36, 0x77, 0x41, 0x7c, 0x40, 0xde, 0x9a,
	0x0a, 0xc9, 0x85, 0x3c, 0x63, 0x56, 0x70, 0xd6, 0x78, 0x81, 0x9f, 0xe2, 0x6d, 0xbb, 0x81, 0x9d,
	0x08, 0x7e, 0x5c, 0xbf, 0xc5, 0x7d, 0x72, 0xdb, 0xc0, 0xf3, 0x25, 0x58, 0x07, 0x9c, 0x35, 0xd2,
	0xe9, 0x67, 0x65, 0x4e, 0x4d, 0x3e, 0xaa, 0x93, 0xe3, 0x87, 0xe4, 0x6e, 0x53, 0x28, 0x84, 0x30,
	0x0d, 0x88, 0xd1, 0xcf, 0xb1, 0x2e, 0xba, 0x56, 0x4b, 0xca, 0x80, 0x93, 0x92, 0xf7, 0x92, 0x69,
	0x9e, 0xab, 0x2c, 0xbd, 0x2c, 0xf9, 0xb0, 0x94, 0xac, 0xc9, 0x86, 0xe4, 0x21, 0x79, 0xdb, 0xc0,
	0x85, 0x11, 0x0e, 0x5e, 0x92, 0xfb, 0x02, 0xe5, 0x6e, 0x07, 0xfa, 0x92, 0xd6, 0x1e, 0xe9, 0x56,
	0x79, 0x5c, 0x49, 0xa0, 0x5f, 0x62, 0x70, 0x27, 0x60, 0x8f, 0x95, 0x84, 0x8d, 0x65, 0xf3, 0xd5,
	0x3f, 0x2c, 0x9b, 0xa3, 0x4b, 0xcb, 0xe6, 0x1e, 0xe9, 0x48, 0xe5, 0xc4, 0xac, 0x60, 0x4e, 0x2c,
	0x80, 0x3e, 0x2a, 0x6d, 0x5a, 0x42, 0xcf, 0xc4, 0x02, 0xfc, 0xf7, 0x08, 0x01, 0xd6, 0xa5, 0x0e,
	0x98, 0xb0, 0x95, 0xed, 0x8f, 0xf1, 0xaa, 0xdd, 0x92, 0x9d, 0x78, 0x72, 0x6c, 0x83, 0xfb, 0x7f,
	0x8f, 0x48, 0x0f, 0x56, 0x3a, 0x17, 0x99, 0x70, 0xf8, 0xf2, 0xe8, 0xe3, 0xd7, 0xf1, 0xee, 0x9b,
	0x3b, 0x2c, 0xe9, 0x56, 0x05, 0x9d, 0xf8, 0xe5, 0x7e, 0x9f, 0xf4, 0x32, 0x03, 0xa9, 0x13, 0x4a,
	0x96, 0x9d, 0x3f, 0xe9, 0x47, 0xc3, 0xed, 0xa4, 0x5b, 0x81, 0xbe, 0xf7, 0xe9, 0x75, 0xfc, 0x2f,
	0x39, 0xf8, 0x3b, 0x00, 0x00, 0xff, 0xff, 0x94, 0xd9, 0xb9, 0x7a, 0xb5, 0x08, 0x00, 0x00,
}
