/*
Copyright 2019 Cisco Systems

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rpl_max_limits_info.proto

package cisco_ios_xr_policy_repository_oper_routing_policy_limits

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type RplMaxLimitsInfo_KEYS struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RplMaxLimitsInfo_KEYS) Reset()         { *m = RplMaxLimitsInfo_KEYS{} }
func (m *RplMaxLimitsInfo_KEYS) String() string { return proto.CompactTextString(m) }
func (*RplMaxLimitsInfo_KEYS) ProtoMessage()    {}
func (*RplMaxLimitsInfo_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_d023cd32529d5a37, []int{0}
}

func (m *RplMaxLimitsInfo_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RplMaxLimitsInfo_KEYS.Unmarshal(m, b)
}
func (m *RplMaxLimitsInfo_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RplMaxLimitsInfo_KEYS.Marshal(b, m, deterministic)
}
func (m *RplMaxLimitsInfo_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RplMaxLimitsInfo_KEYS.Merge(m, src)
}
func (m *RplMaxLimitsInfo_KEYS) XXX_Size() int {
	return xxx_messageInfo_RplMaxLimitsInfo_KEYS.Size(m)
}
func (m *RplMaxLimitsInfo_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_RplMaxLimitsInfo_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_RplMaxLimitsInfo_KEYS proto.InternalMessageInfo

type RplMaxLimitsInfo struct {
	MaximumLinesOfPolicy         uint32   `protobuf:"varint,50,opt,name=maximum_lines_of_policy,json=maximumLinesOfPolicy,proto3" json:"maximum_lines_of_policy,omitempty"`
	CurrentLinesOfPolicyLimit    uint32   `protobuf:"varint,51,opt,name=current_lines_of_policy_limit,json=currentLinesOfPolicyLimit,proto3" json:"current_lines_of_policy_limit,omitempty"`
	CurrentLinesOfPolicyUsed     uint32   `protobuf:"varint,52,opt,name=current_lines_of_policy_used,json=currentLinesOfPolicyUsed,proto3" json:"current_lines_of_policy_used,omitempty"`
	MaximumNumberOfPolicies      uint32   `protobuf:"varint,53,opt,name=maximum_number_of_policies,json=maximumNumberOfPolicies,proto3" json:"maximum_number_of_policies,omitempty"`
	CurrentNumberOfPoliciesLimit uint32   `protobuf:"varint,54,opt,name=current_number_of_policies_limit,json=currentNumberOfPoliciesLimit,proto3" json:"current_number_of_policies_limit,omitempty"`
	CurrentNumberOfPoliciesUsed  uint32   `protobuf:"varint,55,opt,name=current_number_of_policies_used,json=currentNumberOfPoliciesUsed,proto3" json:"current_number_of_policies_used,omitempty"`
	CompiledPoliciesLength       uint32   `protobuf:"varint,56,opt,name=compiled_policies_length,json=compiledPoliciesLength,proto3" json:"compiled_policies_length,omitempty"`
	XXX_NoUnkeyedLiteral         struct{} `json:"-"`
	XXX_unrecognized             []byte   `json:"-"`
	XXX_sizecache                int32    `json:"-"`
}

func (m *RplMaxLimitsInfo) Reset()         { *m = RplMaxLimitsInfo{} }
func (m *RplMaxLimitsInfo) String() string { return proto.CompactTextString(m) }
func (*RplMaxLimitsInfo) ProtoMessage()    {}
func (*RplMaxLimitsInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d023cd32529d5a37, []int{1}
}

func (m *RplMaxLimitsInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RplMaxLimitsInfo.Unmarshal(m, b)
}
func (m *RplMaxLimitsInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RplMaxLimitsInfo.Marshal(b, m, deterministic)
}
func (m *RplMaxLimitsInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RplMaxLimitsInfo.Merge(m, src)
}
func (m *RplMaxLimitsInfo) XXX_Size() int {
	return xxx_messageInfo_RplMaxLimitsInfo.Size(m)
}
func (m *RplMaxLimitsInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_RplMaxLimitsInfo.DiscardUnknown(m)
}

var xxx_messageInfo_RplMaxLimitsInfo proto.InternalMessageInfo

func (m *RplMaxLimitsInfo) GetMaximumLinesOfPolicy() uint32 {
	if m != nil {
		return m.MaximumLinesOfPolicy
	}
	return 0
}

func (m *RplMaxLimitsInfo) GetCurrentLinesOfPolicyLimit() uint32 {
	if m != nil {
		return m.CurrentLinesOfPolicyLimit
	}
	return 0
}

func (m *RplMaxLimitsInfo) GetCurrentLinesOfPolicyUsed() uint32 {
	if m != nil {
		return m.CurrentLinesOfPolicyUsed
	}
	return 0
}

func (m *RplMaxLimitsInfo) GetMaximumNumberOfPolicies() uint32 {
	if m != nil {
		return m.MaximumNumberOfPolicies
	}
	return 0
}

func (m *RplMaxLimitsInfo) GetCurrentNumberOfPoliciesLimit() uint32 {
	if m != nil {
		return m.CurrentNumberOfPoliciesLimit
	}
	return 0
}

func (m *RplMaxLimitsInfo) GetCurrentNumberOfPoliciesUsed() uint32 {
	if m != nil {
		return m.CurrentNumberOfPoliciesUsed
	}
	return 0
}

func (m *RplMaxLimitsInfo) GetCompiledPoliciesLength() uint32 {
	if m != nil {
		return m.CompiledPoliciesLength
	}
	return 0
}

func init() {
	proto.RegisterType((*RplMaxLimitsInfo_KEYS)(nil), "cisco_ios_xr_policy_repository_oper.routing_policy.limits.rpl_max_limits_info_KEYS")
	proto.RegisterType((*RplMaxLimitsInfo)(nil), "cisco_ios_xr_policy_repository_oper.routing_policy.limits.rpl_max_limits_info")
}

func init() { proto.RegisterFile("rpl_max_limits_info.proto", fileDescriptor_d023cd32529d5a37) }

var fileDescriptor_d023cd32529d5a37 = []byte{
	// 295 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0x41, 0x4b, 0x03, 0x31,
	0x10, 0x85, 0x11, 0xc1, 0x43, 0xc0, 0x4b, 0x14, 0x4d, 0xab, 0x62, 0xe9, 0xc9, 0xd3, 0x1e, 0xac,
	0xd5, 0x8a, 0x20, 0x1e, 0xd4, 0x8b, 0x45, 0x45, 0xf1, 0xe0, 0x29, 0xb4, 0xbb, 0xd9, 0x3a, 0xb0,
	0xc9, 0x84, 0x24, 0x0b, 0xdb, 0xdf, 0xe9, 0x1f, 0x92, 0xce, 0x66, 0x8b, 0xd6, 0x6d, 0xcf, 0x6f,
	0xbe, 0x2f, 0xef, 0x41, 0x58, 0xc7, 0xd9, 0x42, 0xea, 0x49, 0x25, 0x0b, 0xd0, 0x10, 0xbc, 0x04,
	0x93, 0x63, 0x62, 0x1d, 0x06, 0xe4, 0xd7, 0x29, 0xf8, 0x14, 0x25, 0xa0, 0x97, 0x95, 0x93, 0x16,
	0x0b, 0x48, 0xe7, 0xd2, 0x29, 0x8b, 0x1e, 0x02, 0xba, 0xb9, 0x44, 0xab, 0x5c, 0xe2, 0xb0, 0x0c,
	0x60, 0x66, 0x31, 0x4e, 0x6a, 0x4b, 0xbf, 0xcb, 0x44, 0x8b, 0x57, 0x3e, 0x3d, 0x7c, 0xbe, 0xf7,
	0xbf, 0xb7, 0xd9, 0x5e, 0x4b, 0xc8, 0x87, 0xec, 0x50, 0x4f, 0x2a, 0xd0, 0xa5, 0x96, 0x05, 0x18,
	0xe5, 0x25, 0xe6, 0xd1, 0x2a, 0xce, 0x7b, 0x5b, 0x67, 0xbb, 0x6f, 0xfb, 0x31, 0x1e, 0x2f, 0xd2,
	0x97, 0xfc, 0x95, 0x32, 0x7e, 0xc7, 0x4e, 0xd2, 0xd2, 0x39, 0x65, 0xc2, 0x2a, 0x56, 0xdb, 0xc5,
	0x80, 0xe0, 0x4e, 0x3c, 0xfa, 0x03, 0x8f, 0x17, 0x07, 0xfc, 0x96, 0x1d, 0xaf, 0x33, 0x94, 0x5e,
	0x65, 0xe2, 0x82, 0x04, 0xa2, 0x4d, 0xf0, 0xe1, 0x55, 0xc6, 0x6f, 0x58, 0xb7, 0x29, 0x6e, 0x4a,
	0x3d, 0x55, 0x6e, 0x29, 0x00, 0xe5, 0xc5, 0x90, 0xe8, 0x66, 0xda, 0x33, 0x1d, 0x44, 0x1c, 0x94,
	0xe7, 0x8f, 0xac, 0xd7, 0x3c, 0xfe, 0x1f, 0x8e, 0x0b, 0x2e, 0x49, 0xd1, 0x94, 0x5c, 0x55, 0xd4,
	0x23, 0xee, 0xd9, 0xe9, 0x06, 0x0f, 0xed, 0xb8, 0x22, 0xcd, 0xd1, 0x1a, 0x0d, 0x4d, 0x19, 0x31,
	0x91, 0xa2, 0xb6, 0x50, 0xa8, 0xec, 0x57, 0x09, 0x65, 0x66, 0xe1, 0x4b, 0x8c, 0x08, 0x3f, 0x68,
	0xf2, 0xe5, 0xf3, 0x94, 0x4e, 0x77, 0xe8, 0xcf, 0x0c, 0x7e, 0x02, 0x00, 0x00, 0xff, 0xff, 0x67,
	0xb9, 0x06, 0x2b, 0x50, 0x02, 0x00, 0x00,
}
