/*
Copyright 2019 Cisco Systems

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: iedge_stats_srg_data.proto

package cisco_ios_xr_iedge4710_oper_subscriber_manager_nodes_node_statistics_srg

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type IedgeStatsSrgData_KEYS struct {
	NodeName             string   `protobuf:"bytes,1,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IedgeStatsSrgData_KEYS) Reset()         { *m = IedgeStatsSrgData_KEYS{} }
func (m *IedgeStatsSrgData_KEYS) String() string { return proto.CompactTextString(m) }
func (*IedgeStatsSrgData_KEYS) ProtoMessage()    {}
func (*IedgeStatsSrgData_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_6b1960e740f84573, []int{0}
}

func (m *IedgeStatsSrgData_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IedgeStatsSrgData_KEYS.Unmarshal(m, b)
}
func (m *IedgeStatsSrgData_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IedgeStatsSrgData_KEYS.Marshal(b, m, deterministic)
}
func (m *IedgeStatsSrgData_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IedgeStatsSrgData_KEYS.Merge(m, src)
}
func (m *IedgeStatsSrgData_KEYS) XXX_Size() int {
	return xxx_messageInfo_IedgeStatsSrgData_KEYS.Size(m)
}
func (m *IedgeStatsSrgData_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_IedgeStatsSrgData_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_IedgeStatsSrgData_KEYS proto.InternalMessageInfo

func (m *IedgeStatsSrgData_KEYS) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

type IedgeStatsSrgData struct {
	TxlistSendTriggered           uint32   `protobuf:"varint,50,opt,name=txlist_send_triggered,json=txlistSendTriggered,proto3" json:"txlist_send_triggered,omitempty"`
	TxlistSendFailed              uint32   `protobuf:"varint,51,opt,name=txlist_send_failed,json=txlistSendFailed,proto3" json:"txlist_send_failed,omitempty"`
	TxlistSendFailedNotactive     uint32   `protobuf:"varint,52,opt,name=txlist_send_failed_notactive,json=txlistSendFailedNotactive,proto3" json:"txlist_send_failed_notactive,omitempty"`
	ActualTxlistSent              uint32   `protobuf:"varint,53,opt,name=actual_txlist_sent,json=actualTxlistSent,proto3" json:"actual_txlist_sent,omitempty"`
	AlreadyinTxlist               uint32   `protobuf:"varint,54,opt,name=alreadyin_txlist,json=alreadyinTxlist,proto3" json:"alreadyin_txlist,omitempty"`
	TxlistEncode                  uint32   `protobuf:"varint,55,opt,name=txlist_encode,json=txlistEncode,proto3" json:"txlist_encode,omitempty"`
	TxlistEncodeFail              uint32   `protobuf:"varint,56,opt,name=txlist_encode_fail,json=txlistEncodeFail,proto3" json:"txlist_encode_fail,omitempty"`
	CreateUpdateEncode            uint32   `protobuf:"varint,57,opt,name=create_update_encode,json=createUpdateEncode,proto3" json:"create_update_encode,omitempty"`
	DeleteEncode                  uint32   `protobuf:"varint,58,opt,name=delete_encode,json=deleteEncode,proto3" json:"delete_encode,omitempty"`
	CreateUpdCleanCallback        uint32   `protobuf:"varint,59,opt,name=create_upd_clean_callback,json=createUpdCleanCallback,proto3" json:"create_upd_clean_callback,omitempty"`
	DeleteCleanCallback           uint32   `protobuf:"varint,60,opt,name=delete_clean_callback,json=deleteCleanCallback,proto3" json:"delete_clean_callback,omitempty"`
	SlaveRecvEntry                uint32   `protobuf:"varint,61,opt,name=slave_recv_entry,json=slaveRecvEntry,proto3" json:"slave_recv_entry,omitempty"`
	SlaveDecodeFail               uint32   `protobuf:"varint,62,opt,name=slave_decode_fail,json=slaveDecodeFail,proto3" json:"slave_decode_fail,omitempty"`
	SlaveCreateUpdate             uint32   `protobuf:"varint,63,opt,name=slave_create_update,json=slaveCreateUpdate,proto3" json:"slave_create_update,omitempty"`
	SlaveDelete                   uint32   `protobuf:"varint,64,opt,name=slave_delete,json=slaveDelete,proto3" json:"slave_delete,omitempty"`
	SrgContextMalloc              uint32   `protobuf:"varint,65,opt,name=srg_context_malloc,json=srgContextMalloc,proto3" json:"srg_context_malloc,omitempty"`
	SrgContextFree                uint32   `protobuf:"varint,66,opt,name=srg_context_free,json=srgContextFree,proto3" json:"srg_context_free,omitempty"`
	SodCount                      uint32   `protobuf:"varint,67,opt,name=sod_count,json=sodCount,proto3" json:"sod_count,omitempty"`
	EodCount                      uint32   `protobuf:"varint,68,opt,name=eod_count,json=eodCount,proto3" json:"eod_count,omitempty"`
	SodEodReplayReqCount          uint32   `protobuf:"varint,69,opt,name=sod_eod_replay_req_count,json=sodEodReplayReqCount,proto3" json:"sod_eod_replay_req_count,omitempty"`
	SodEodDirtyMarkCount          uint32   `protobuf:"varint,70,opt,name=sod_eod_dirty_mark_count,json=sodEodDirtyMarkCount,proto3" json:"sod_eod_dirty_mark_count,omitempty"`
	SodEodDirtyDeleteCount        uint32   `protobuf:"varint,71,opt,name=sod_eod_dirty_delete_count,json=sodEodDirtyDeleteCount,proto3" json:"sod_eod_dirty_delete_count,omitempty"`
	AckToSrg                      uint32   `protobuf:"varint,72,opt,name=ack_to_srg,json=ackToSrg,proto3" json:"ack_to_srg,omitempty"`
	NackToSrg                     uint32   `protobuf:"varint,73,opt,name=nack_to_srg,json=nackToSrg,proto3" json:"nack_to_srg,omitempty"`
	NackToSrgFailCnt              uint32   `protobuf:"varint,74,opt,name=nack_to_srg_fail_cnt,json=nackToSrgFailCnt,proto3" json:"nack_to_srg_fail_cnt,omitempty"`
	TxlistRemoveAll               uint32   `protobuf:"varint,75,opt,name=txlist_remove_all,json=txlistRemoveAll,proto3" json:"txlist_remove_all,omitempty"`
	TxlistDelSync                 uint32   `protobuf:"varint,76,opt,name=txlist_del_sync,json=txlistDelSync,proto3" json:"txlist_del_sync,omitempty"`
	TxlistDelSyncNotlinked        uint32   `protobuf:"varint,77,opt,name=txlist_del_sync_notlinked,json=txlistDelSyncNotlinked,proto3" json:"txlist_del_sync_notlinked,omitempty"`
	TxlistDelApp                  uint32   `protobuf:"varint,78,opt,name=txlist_del_app,json=txlistDelApp,proto3" json:"txlist_del_app,omitempty"`
	TxlistDelAppNotlinked         uint32   `protobuf:"varint,79,opt,name=txlist_del_app_notlinked,json=txlistDelAppNotlinked,proto3" json:"txlist_del_app_notlinked,omitempty"`
	TxlistCleanInvalidState       uint32   `protobuf:"varint,80,opt,name=txlist_clean_invalid_state,json=txlistCleanInvalidState,proto3" json:"txlist_clean_invalid_state,omitempty"`
	TxlistRemoveAllInternalError  uint32   `protobuf:"varint,81,opt,name=txlist_remove_all_internal_error,json=txlistRemoveAllInternalError,proto3" json:"txlist_remove_all_internal_error,omitempty"`
	IsSrgFlowControlEnabled       bool     `protobuf:"varint,82,opt,name=is_srg_flow_control_enabled,json=isSrgFlowControlEnabled,proto3" json:"is_srg_flow_control_enabled,omitempty"`
	MaxInflightSessoinCount       uint32   `protobuf:"varint,83,opt,name=max_inflight_sessoin_count,json=maxInflightSessoinCount,proto3" json:"max_inflight_sessoin_count,omitempty"`
	FlowControlResumeThreshold    uint32   `protobuf:"varint,84,opt,name=flow_control_resume_threshold,json=flowControlResumeThreshold,proto3" json:"flow_control_resume_threshold,omitempty"`
	InflightSessionCount          uint32   `protobuf:"varint,85,opt,name=inflight_session_count,json=inflightSessionCount,proto3" json:"inflight_session_count,omitempty"`
	InflightAddCount              uint32   `protobuf:"varint,86,opt,name=inflight_add_count,json=inflightAddCount,proto3" json:"inflight_add_count,omitempty"`
	InflightUnderRunCount         uint32   `protobuf:"varint,87,opt,name=inflight_under_run_count,json=inflightUnderRunCount,proto3" json:"inflight_under_run_count,omitempty"`
	InflightAllocFails            uint32   `protobuf:"varint,88,opt,name=inflight_alloc_fails,json=inflightAllocFails,proto3" json:"inflight_alloc_fails,omitempty"`
	InflightInsertFailures        uint32   `protobuf:"varint,89,opt,name=inflight_insert_failures,json=inflightInsertFailures,proto3" json:"inflight_insert_failures,omitempty"`
	InflightDeletes               uint32   `protobuf:"varint,90,opt,name=inflight_deletes,json=inflightDeletes,proto3" json:"inflight_deletes,omitempty"`
	InflightNotFound              uint32   `protobuf:"varint,91,opt,name=inflight_not_found,json=inflightNotFound,proto3" json:"inflight_not_found,omitempty"`
	InflightDeleteFailures        uint32   `protobuf:"varint,92,opt,name=inflight_delete_failures,json=inflightDeleteFailures,proto3" json:"inflight_delete_failures,omitempty"`
	TotalPauseCount               uint32   `protobuf:"varint,93,opt,name=total_pause_count,json=totalPauseCount,proto3" json:"total_pause_count,omitempty"`
	TotalResumeCount              uint32   `protobuf:"varint,94,opt,name=total_resume_count,json=totalResumeCount,proto3" json:"total_resume_count,omitempty"`
	TotalDontSendToTxlist         uint32   `protobuf:"varint,95,opt,name=total_dont_send_to_txlist,json=totalDontSendToTxlist,proto3" json:"total_dont_send_to_txlist,omitempty"`
	TotalSrgNotMaster             uint32   `protobuf:"varint,96,opt,name=total_srg_not_master,json=totalSrgNotMaster,proto3" json:"total_srg_not_master,omitempty"`
	TotalMasterEomsPending        uint32   `protobuf:"varint,97,opt,name=total_master_eoms_pending,json=totalMasterEomsPending,proto3" json:"total_master_eoms_pending,omitempty"`
	TotalMasterEomsPendingCleared uint32   `protobuf:"varint,98,opt,name=total_master_eoms_pending_cleared,json=totalMasterEomsPendingCleared,proto3" json:"total_master_eoms_pending_cleared,omitempty"`
	LastPausePeriod               uint64   `protobuf:"varint,99,opt,name=last_pause_period,json=lastPausePeriod,proto3" json:"last_pause_period,omitempty"`
	TotalPauseTime                uint64   `protobuf:"varint,100,opt,name=total_pause_time,json=totalPauseTime,proto3" json:"total_pause_time,omitempty"`
	LastPauseTime                 uint64   `protobuf:"varint,101,opt,name=last_pause_time,json=lastPauseTime,proto3" json:"last_pause_time,omitempty"`
	LastResumeTime                uint64   `protobuf:"varint,102,opt,name=last_resume_time,json=lastResumeTime,proto3" json:"last_resume_time,omitempty"`
	XXX_NoUnkeyedLiteral          struct{} `json:"-"`
	XXX_unrecognized              []byte   `json:"-"`
	XXX_sizecache                 int32    `json:"-"`
}

func (m *IedgeStatsSrgData) Reset()         { *m = IedgeStatsSrgData{} }
func (m *IedgeStatsSrgData) String() string { return proto.CompactTextString(m) }
func (*IedgeStatsSrgData) ProtoMessage()    {}
func (*IedgeStatsSrgData) Descriptor() ([]byte, []int) {
	return fileDescriptor_6b1960e740f84573, []int{1}
}

func (m *IedgeStatsSrgData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IedgeStatsSrgData.Unmarshal(m, b)
}
func (m *IedgeStatsSrgData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IedgeStatsSrgData.Marshal(b, m, deterministic)
}
func (m *IedgeStatsSrgData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IedgeStatsSrgData.Merge(m, src)
}
func (m *IedgeStatsSrgData) XXX_Size() int {
	return xxx_messageInfo_IedgeStatsSrgData.Size(m)
}
func (m *IedgeStatsSrgData) XXX_DiscardUnknown() {
	xxx_messageInfo_IedgeStatsSrgData.DiscardUnknown(m)
}

var xxx_messageInfo_IedgeStatsSrgData proto.InternalMessageInfo

func (m *IedgeStatsSrgData) GetTxlistSendTriggered() uint32 {
	if m != nil {
		return m.TxlistSendTriggered
	}
	return 0
}

func (m *IedgeStatsSrgData) GetTxlistSendFailed() uint32 {
	if m != nil {
		return m.TxlistSendFailed
	}
	return 0
}

func (m *IedgeStatsSrgData) GetTxlistSendFailedNotactive() uint32 {
	if m != nil {
		return m.TxlistSendFailedNotactive
	}
	return 0
}

func (m *IedgeStatsSrgData) GetActualTxlistSent() uint32 {
	if m != nil {
		return m.ActualTxlistSent
	}
	return 0
}

func (m *IedgeStatsSrgData) GetAlreadyinTxlist() uint32 {
	if m != nil {
		return m.AlreadyinTxlist
	}
	return 0
}

func (m *IedgeStatsSrgData) GetTxlistEncode() uint32 {
	if m != nil {
		return m.TxlistEncode
	}
	return 0
}

func (m *IedgeStatsSrgData) GetTxlistEncodeFail() uint32 {
	if m != nil {
		return m.TxlistEncodeFail
	}
	return 0
}

func (m *IedgeStatsSrgData) GetCreateUpdateEncode() uint32 {
	if m != nil {
		return m.CreateUpdateEncode
	}
	return 0
}

func (m *IedgeStatsSrgData) GetDeleteEncode() uint32 {
	if m != nil {
		return m.DeleteEncode
	}
	return 0
}

func (m *IedgeStatsSrgData) GetCreateUpdCleanCallback() uint32 {
	if m != nil {
		return m.CreateUpdCleanCallback
	}
	return 0
}

func (m *IedgeStatsSrgData) GetDeleteCleanCallback() uint32 {
	if m != nil {
		return m.DeleteCleanCallback
	}
	return 0
}

func (m *IedgeStatsSrgData) GetSlaveRecvEntry() uint32 {
	if m != nil {
		return m.SlaveRecvEntry
	}
	return 0
}

func (m *IedgeStatsSrgData) GetSlaveDecodeFail() uint32 {
	if m != nil {
		return m.SlaveDecodeFail
	}
	return 0
}

func (m *IedgeStatsSrgData) GetSlaveCreateUpdate() uint32 {
	if m != nil {
		return m.SlaveCreateUpdate
	}
	return 0
}

func (m *IedgeStatsSrgData) GetSlaveDelete() uint32 {
	if m != nil {
		return m.SlaveDelete
	}
	return 0
}

func (m *IedgeStatsSrgData) GetSrgContextMalloc() uint32 {
	if m != nil {
		return m.SrgContextMalloc
	}
	return 0
}

func (m *IedgeStatsSrgData) GetSrgContextFree() uint32 {
	if m != nil {
		return m.SrgContextFree
	}
	return 0
}

func (m *IedgeStatsSrgData) GetSodCount() uint32 {
	if m != nil {
		return m.SodCount
	}
	return 0
}

func (m *IedgeStatsSrgData) GetEodCount() uint32 {
	if m != nil {
		return m.EodCount
	}
	return 0
}

func (m *IedgeStatsSrgData) GetSodEodReplayReqCount() uint32 {
	if m != nil {
		return m.SodEodReplayReqCount
	}
	return 0
}

func (m *IedgeStatsSrgData) GetSodEodDirtyMarkCount() uint32 {
	if m != nil {
		return m.SodEodDirtyMarkCount
	}
	return 0
}

func (m *IedgeStatsSrgData) GetSodEodDirtyDeleteCount() uint32 {
	if m != nil {
		return m.SodEodDirtyDeleteCount
	}
	return 0
}

func (m *IedgeStatsSrgData) GetAckToSrg() uint32 {
	if m != nil {
		return m.AckToSrg
	}
	return 0
}

func (m *IedgeStatsSrgData) GetNackToSrg() uint32 {
	if m != nil {
		return m.NackToSrg
	}
	return 0
}

func (m *IedgeStatsSrgData) GetNackToSrgFailCnt() uint32 {
	if m != nil {
		return m.NackToSrgFailCnt
	}
	return 0
}

func (m *IedgeStatsSrgData) GetTxlistRemoveAll() uint32 {
	if m != nil {
		return m.TxlistRemoveAll
	}
	return 0
}

func (m *IedgeStatsSrgData) GetTxlistDelSync() uint32 {
	if m != nil {
		return m.TxlistDelSync
	}
	return 0
}

func (m *IedgeStatsSrgData) GetTxlistDelSyncNotlinked() uint32 {
	if m != nil {
		return m.TxlistDelSyncNotlinked
	}
	return 0
}

func (m *IedgeStatsSrgData) GetTxlistDelApp() uint32 {
	if m != nil {
		return m.TxlistDelApp
	}
	return 0
}

func (m *IedgeStatsSrgData) GetTxlistDelAppNotlinked() uint32 {
	if m != nil {
		return m.TxlistDelAppNotlinked
	}
	return 0
}

func (m *IedgeStatsSrgData) GetTxlistCleanInvalidState() uint32 {
	if m != nil {
		return m.TxlistCleanInvalidState
	}
	return 0
}

func (m *IedgeStatsSrgData) GetTxlistRemoveAllInternalError() uint32 {
	if m != nil {
		return m.TxlistRemoveAllInternalError
	}
	return 0
}

func (m *IedgeStatsSrgData) GetIsSrgFlowControlEnabled() bool {
	if m != nil {
		return m.IsSrgFlowControlEnabled
	}
	return false
}

func (m *IedgeStatsSrgData) GetMaxInflightSessoinCount() uint32 {
	if m != nil {
		return m.MaxInflightSessoinCount
	}
	return 0
}

func (m *IedgeStatsSrgData) GetFlowControlResumeThreshold() uint32 {
	if m != nil {
		return m.FlowControlResumeThreshold
	}
	return 0
}

func (m *IedgeStatsSrgData) GetInflightSessionCount() uint32 {
	if m != nil {
		return m.InflightSessionCount
	}
	return 0
}

func (m *IedgeStatsSrgData) GetInflightAddCount() uint32 {
	if m != nil {
		return m.InflightAddCount
	}
	return 0
}

func (m *IedgeStatsSrgData) GetInflightUnderRunCount() uint32 {
	if m != nil {
		return m.InflightUnderRunCount
	}
	return 0
}

func (m *IedgeStatsSrgData) GetInflightAllocFails() uint32 {
	if m != nil {
		return m.InflightAllocFails
	}
	return 0
}

func (m *IedgeStatsSrgData) GetInflightInsertFailures() uint32 {
	if m != nil {
		return m.InflightInsertFailures
	}
	return 0
}

func (m *IedgeStatsSrgData) GetInflightDeletes() uint32 {
	if m != nil {
		return m.InflightDeletes
	}
	return 0
}

func (m *IedgeStatsSrgData) GetInflightNotFound() uint32 {
	if m != nil {
		return m.InflightNotFound
	}
	return 0
}

func (m *IedgeStatsSrgData) GetInflightDeleteFailures() uint32 {
	if m != nil {
		return m.InflightDeleteFailures
	}
	return 0
}

func (m *IedgeStatsSrgData) GetTotalPauseCount() uint32 {
	if m != nil {
		return m.TotalPauseCount
	}
	return 0
}

func (m *IedgeStatsSrgData) GetTotalResumeCount() uint32 {
	if m != nil {
		return m.TotalResumeCount
	}
	return 0
}

func (m *IedgeStatsSrgData) GetTotalDontSendToTxlist() uint32 {
	if m != nil {
		return m.TotalDontSendToTxlist
	}
	return 0
}

func (m *IedgeStatsSrgData) GetTotalSrgNotMaster() uint32 {
	if m != nil {
		return m.TotalSrgNotMaster
	}
	return 0
}

func (m *IedgeStatsSrgData) GetTotalMasterEomsPending() uint32 {
	if m != nil {
		return m.TotalMasterEomsPending
	}
	return 0
}

func (m *IedgeStatsSrgData) GetTotalMasterEomsPendingCleared() uint32 {
	if m != nil {
		return m.TotalMasterEomsPendingCleared
	}
	return 0
}

func (m *IedgeStatsSrgData) GetLastPausePeriod() uint64 {
	if m != nil {
		return m.LastPausePeriod
	}
	return 0
}

func (m *IedgeStatsSrgData) GetTotalPauseTime() uint64 {
	if m != nil {
		return m.TotalPauseTime
	}
	return 0
}

func (m *IedgeStatsSrgData) GetLastPauseTime() uint64 {
	if m != nil {
		return m.LastPauseTime
	}
	return 0
}

func (m *IedgeStatsSrgData) GetLastResumeTime() uint64 {
	if m != nil {
		return m.LastResumeTime
	}
	return 0
}

func init() {
	proto.RegisterType((*IedgeStatsSrgData_KEYS)(nil), "cisco_ios_xr_iedge4710_oper.subscriber.manager.nodes.node.statistics.srg.iedge_stats_srg_data_KEYS")
	proto.RegisterType((*IedgeStatsSrgData)(nil), "cisco_ios_xr_iedge4710_oper.subscriber.manager.nodes.node.statistics.srg.iedge_stats_srg_data")
}

func init() { proto.RegisterFile("iedge_stats_srg_data.proto", fileDescriptor_6b1960e740f84573) }

var fileDescriptor_6b1960e740f84573 = []byte{
	// 1229 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x96, 0x7d, 0x73, 0x54, 0x35,
	0x14, 0xc6, 0xa7, 0x33, 0x8e, 0x03, 0x81, 0x42, 0xbd, 0x14, 0x48, 0x0b, 0x38, 0x05, 0x1c, 0xa7,
	0x3a, 0xcc, 0x8a, 0x80, 0xb4, 0xbc, 0x28, 0xd6, 0xed, 0x56, 0x2a, 0xb6, 0xd6, 0xdd, 0xa2, 0xe2,
	0x5b, 0x4c, 0x6f, 0xce, 0x2e, 0x99, 0xe6, 0x26, 0x4b, 0x92, 0x2d, 0xed, 0xa7, 0xf3, 0xab, 0x39,
	0x39, 0x27, 0xf7, 0xee, 0xdd, 0x82, 0xff, 0xc0, 0xf4, 0x3c, 0xbf, 0xe7, 0x9c, 0xe4, 0x24, 0x27,
	0x77, 0xd9, 0xb2, 0x06, 0x35, 0x02, 0x11, 0xa2, 0x8c, 0x41, 0x04, 0x3f, 0x12, 0x4a, 0x46, 0xd9,
	0x19, 0x7b, 0x17, 0x5d, 0xf1, 0xbc, 0xd4, 0xa1, 0x74, 0x42, 0xbb, 0x20, 0x8e, 0xbd, 0x40, 0xf0,
	0xc1, 0xda, 0x97, 0x77, 0x85, 0x1b, 0x83, 0xef, 0x84, 0xc9, 0x41, 0x28, 0xbd, 0x3e, 0x00, 0xdf,
	0xa9, 0xa4, 0x95, 0x23, 0xf0, 0x1d, 0xeb, 0x14, 0x04, 0xfc, 0xb7, 0x93, 0xf2, 0xe9, 0x10, 0x75,
	0x19, 0x3a, 0xc1, 0x8f, 0x6e, 0xad, 0xb3, 0xa5, 0xf7, 0xd5, 0x11, 0x2f, 0x7a, 0xaf, 0x06, 0xc5,
	0x35, 0x76, 0x36, 0x79, 0x84, 0x95, 0x15, 0xf0, 0xb9, 0x95, 0xb9, 0xd5, 0xb3, 0xfd, 0x33, 0x29,
	0xb0, 0x2b, 0x2b, 0xb8, 0xf5, 0xef, 0x22, 0x5b, 0x7c, 0x9f, 0xb5, 0xb8, 0xc7, 0x2e, 0xc7, 0x63,
	0xa3, 0x43, 0x14, 0x01, 0xac, 0x12, 0xd1, 0xeb, 0xd1, 0x08, 0x3c, 0x28, 0x7e, 0x6f, 0x65, 0x6e,
	0x75, 0xbe, 0x7f, 0x89, 0xc4, 0x01, 0x58, 0xb5, 0x5f, 0x4b, 0xc5, 0x1d, 0x56, 0xb4, 0x3d, 0x43,
	0xa9, 0x0d, 0x28, 0x7e, 0x1f, 0x0d, 0x0b, 0x53, 0xc3, 0x16, 0xc6, 0x8b, 0x67, 0xec, 0xfa, 0xbb,
	0xb4, 0xb0, 0x2e, 0xca, 0x32, 0xea, 0x23, 0xe0, 0x0f, 0xd0, 0xb7, 0x74, 0xda, 0xb7, 0x5b, 0x03,
	0xa9, 0x9c, 0x2c, 0xe3, 0x44, 0x1a, 0x31, 0xcd, 0x13, 0xf9, 0x57, 0x54, 0x8e, 0x94, 0xfd, 0xda,
	0x1c, 0x8b, 0xcf, 0xd8, 0x82, 0x34, 0x1e, 0xa4, 0x3a, 0xd1, 0x36, 0x1b, 0xf8, 0x43, 0x64, 0x2f,
	0x36, 0x71, 0xc2, 0x8b, 0xdb, 0x6c, 0x3e, 0x67, 0x04, 0x5b, 0x3a, 0x05, 0x7c, 0x0d, 0xb9, 0xf3,
	0x14, 0xec, 0x61, 0xac, 0xb5, 0x59, 0x82, 0x70, 0x03, 0x7c, 0xbd, 0xbd, 0x59, 0x22, 0xd3, 0xb2,
	0x8b, 0xbb, 0x6c, 0xb1, 0xf4, 0x20, 0x23, 0x88, 0xc9, 0x58, 0xa5, 0xff, 0x72, 0xe6, 0x47, 0xc8,
	0x17, 0xa4, 0xbd, 0x44, 0x29, 0xe7, 0xbf, 0xcd, 0xe6, 0x15, 0x18, 0x98, 0xa2, 0x8f, 0x69, 0x11,
	0x14, 0xcc, 0xd0, 0x23, 0xb6, 0x34, 0x4d, 0x2b, 0x4a, 0x03, 0xd2, 0x8a, 0x52, 0x1a, 0x73, 0x20,
	0xcb, 0x43, 0xfe, 0x04, 0x0d, 0x57, 0x9a, 0xdc, 0xdd, 0x24, 0x77, 0xb3, 0x9a, 0x0e, 0x38, 0xe7,
	0x3f, 0x65, 0x7b, 0x4a, 0x07, 0x4c, 0xe2, 0xac, 0x67, 0x95, 0x2d, 0x04, 0x23, 0x8f, 0x40, 0x78,
	0x28, 0x8f, 0x04, 0xd8, 0xe8, 0x4f, 0xf8, 0xd7, 0x88, 0x5f, 0xc0, 0x78, 0x1f, 0xca, 0xa3, 0x5e,
	0x8a, 0x16, 0x9f, 0xb3, 0x8f, 0x88, 0x54, 0x30, 0x6d, 0xce, 0x37, 0xd4, 0x6e, 0x14, 0x36, 0xa1,
	0xe9, 0x4d, 0x87, 0x5d, 0x22, 0x76, 0xa6, 0x43, 0xfc, 0x19, 0xd2, 0x94, 0xa6, 0xdb, 0xea, 0x4f,
	0x71, 0x93, 0x9d, 0xaf, 0x73, 0xa7, 0x25, 0xf2, 0x6f, 0x11, 0x3c, 0x97, 0xd3, 0xa6, 0x50, 0x3a,
	0x9c, 0x74, 0x93, 0x4b, 0x67, 0x23, 0x1c, 0x47, 0x51, 0x49, 0x63, 0x5c, 0xc9, 0x37, 0xe8, 0x70,
	0x82, 0x1f, 0x75, 0x49, 0xd8, 0xc1, 0x38, 0x6e, 0xab, 0x45, 0x0f, 0x3d, 0x00, 0xff, 0x2e, 0x6f,
	0xab, 0x61, 0xb7, 0x3c, 0x40, 0x9a, 0xa5, 0xe0, 0x94, 0x28, 0xdd, 0xc4, 0x46, 0xde, 0x45, 0xe4,
	0x4c, 0x70, 0xaa, 0x9b, 0xfe, 0x4e, 0x22, 0x34, 0xe2, 0x26, 0x89, 0x50, 0x8b, 0x0f, 0x19, 0x4f,
	0xce, 0x04, 0x78, 0x18, 0x1b, 0x79, 0x22, 0x3c, 0xbc, 0xc9, 0x6c, 0x0f, 0xd9, 0xc5, 0xe0, 0x54,
	0xcf, 0xa9, 0x3e, 0xaa, 0x7d, 0x78, 0xf3, 0x8e, 0x4f, 0x69, 0x1f, 0x4f, 0x44, 0x25, 0xfd, 0x61,
	0xf6, 0x6d, 0xb5, 0x7d, 0x9b, 0x49, 0xdd, 0x91, 0xfe, 0x90, 0x7c, 0x8f, 0xd9, 0xf2, 0xac, 0xaf,
	0x3e, 0x6c, 0x74, 0x7e, 0x4f, 0x57, 0xa3, 0xe5, 0xa4, 0xc6, 0x91, 0xf7, 0x3a, 0x63, 0xb2, 0x3c,
	0x14, 0xd1, 0xa5, 0xe7, 0x80, 0x3f, 0xa7, 0x9d, 0xc8, 0xf2, 0x70, 0xdf, 0x0d, 0xfc, 0xa8, 0xf8,
	0x98, 0x9d, 0xb3, 0x2d, 0x79, 0x1b, 0xe5, 0xb3, 0xb6, 0xd1, 0x3b, 0x6c, 0xb1, 0xa5, 0xe3, 0xc9,
	0x8b, 0xd2, 0x46, 0xfe, 0x03, 0x75, 0xbf, 0x01, 0xd3, 0xd9, 0x77, 0x6d, 0x4c, 0x57, 0x25, 0x0f,
	0x92, 0x87, 0xca, 0x1d, 0x81, 0x90, 0xc6, 0xf0, 0x17, 0x74, 0x55, 0x48, 0xe8, 0x63, 0x7c, 0xc3,
	0x98, 0xe2, 0x53, 0x96, 0x43, 0x69, 0x3b, 0x22, 0x9c, 0xd8, 0x92, 0xff, 0x88, 0x64, 0x1e, 0xd8,
	0x4d, 0x30, 0x83, 0x13, 0x5b, 0xa6, 0xb9, 0x38, 0xc5, 0xa5, 0x87, 0xc5, 0x68, 0x7b, 0x08, 0x8a,
	0xef, 0xd0, 0xe6, 0x67, 0x1c, 0xbb, 0xb5, 0x5a, 0x7c, 0xc2, 0x2e, 0xb4, 0xac, 0x72, 0x3c, 0xe6,
	0xbb, 0xed, 0xe9, 0xdf, 0x04, 0xb3, 0x31, 0x1e, 0x17, 0x6b, 0x8c, 0xcf, 0x52, 0xad, 0xfc, 0x3f,
	0x21, 0x7f, 0xb9, 0xcd, 0x4f, 0xd3, 0x3f, 0x61, 0xcb, 0xd9, 0x48, 0x63, 0xa7, 0xed, 0x91, 0x34,
	0x5a, 0xe1, 0xf3, 0x0b, 0x7c, 0x0f, 0xad, 0x57, 0x89, 0xc0, 0xd9, 0xdb, 0x26, 0x7d, 0x90, 0xe4,
	0x62, 0x8b, 0xad, 0xbc, 0xd3, 0x2a, 0xa1, 0x6d, 0x04, 0x6f, 0xa5, 0x11, 0xe0, 0xbd, 0xf3, 0xfc,
	0x67, 0x4c, 0x71, 0xfd, 0x54, 0xe7, 0xb6, 0x33, 0xd4, 0x4b, 0x4c, 0xf1, 0x94, 0x5d, 0xd3, 0xf4,
	0xd6, 0x0f, 0x8d, 0x7b, 0x8b, 0x17, 0xdf, 0x3b, 0x23, 0xc0, 0xca, 0x83, 0xf4, 0x62, 0xf7, 0x57,
	0xe6, 0x56, 0xcf, 0xf4, 0xaf, 0xea, 0x90, 0x4e, 0xc9, 0xb8, 0xb7, 0x5d, 0xd2, 0x7b, 0x24, 0xa7,
	0x2d, 0x54, 0xf2, 0x58, 0x68, 0x3b, 0x34, 0x7a, 0xf4, 0x3a, 0x3d, 0xbb, 0x21, 0x38, 0x6d, 0xf3,
	0xd5, 0x1a, 0xd0, 0x16, 0x2a, 0x79, 0xbc, 0x9d, 0x81, 0x01, 0xe9, 0x74, 0xb7, 0x36, 0xd8, 0x8d,
	0x99, 0x9a, 0x1e, 0xc2, 0xa4, 0x02, 0x11, 0x5f, 0x7b, 0x08, 0xaf, 0x9d, 0x51, 0x7c, 0x1f, 0xfd,
	0xcb, 0xc3, 0x69, 0xdd, 0x3e, 0x22, 0xfb, 0x35, 0x51, 0x3c, 0x60, 0x57, 0x66, 0x6a, 0x6b, 0x57,
	0xd7, 0x7e, 0x49, 0x03, 0xa1, 0x5b, 0x85, 0xb5, 0xcb, 0x85, 0xef, 0xb0, 0xa2, 0x71, 0x49, 0x55,
	0x8f, 0xe9, 0x2f, 0x74, 0x29, 0x6b, 0x65, 0x43, 0xe5, 0x71, 0x5d, 0x63, 0xbc, 0xa1, 0x27, 0x56,
	0x81, 0x17, 0x7e, 0x52, 0x57, 0xf9, 0x95, 0xce, 0xb7, 0xd6, 0x5f, 0x26, 0xb9, 0x3f, 0xc9, 0x65,
	0xee, 0xb2, 0xc5, 0x69, 0x99, 0xf4, 0xba, 0xe0, 0x00, 0x04, 0xfe, 0x1b, 0x3d, 0xf4, 0x4d, 0xa1,
	0x24, 0xa5, 0x09, 0x08, 0xc5, 0x7a, 0xab, 0x94, 0xb6, 0x01, 0x7c, 0x44, 0xcb, 0xc4, 0x43, 0xe0,
	0xaf, 0xe8, 0xaa, 0xd6, 0xfa, 0x36, 0xca, 0x5b, 0x59, 0x4d, 0x9f, 0xb4, 0xc6, 0x49, 0xe3, 0x1d,
	0xf8, 0xef, 0x34, 0x38, 0x75, 0x9c, 0xc6, 0x3a, 0xcc, 0xec, 0xde, 0xba, 0x28, 0x86, 0x6e, 0x62,
	0x15, 0xff, 0x63, 0x76, 0xf7, 0xbb, 0x2e, 0x6e, 0xa5, 0xf8, 0xcc, 0x92, 0xf2, 0xbb, 0xd1, 0x2c,
	0xe9, 0xcf, 0xd9, 0x25, 0x51, 0x81, 0x66, 0x49, 0x69, 0x98, 0x5d, 0x94, 0x46, 0x8c, 0xe5, 0x24,
	0xd4, 0xaf, 0xcd, 0x5f, 0x79, 0x98, 0x93, 0xb0, 0x97, 0xe2, 0xcd, 0x89, 0x10, 0x9b, 0xef, 0x00,
	0xc1, 0x7f, 0xe7, 0x2f, 0x68, 0x52, 0xe8, 0xe4, 0x89, 0x5e, 0x67, 0x4b, 0x44, 0x2b, 0x67, 0xeb,
	0x1f, 0x25, 0xae, 0xfe, 0x90, 0x8b, 0x3c, 0x72, 0x09, 0xd8, 0x74, 0x96, 0x7e, 0x97, 0xb8, 0xfc,
	0x39, 0xff, 0x82, 0x2d, 0x92, 0x33, 0x5d, 0xf8, 0xb4, 0xf9, 0x4a, 0x86, 0x08, 0x9e, 0xff, 0x43,
	0x1f, 0x18, 0xd4, 0x06, 0x7e, 0xb4, 0xeb, 0xe2, 0x0e, 0x0a, 0xf8, 0x7a, 0xa0, 0x81, 0x40, 0x01,
	0xae, 0x0a, 0x62, 0x0c, 0x56, 0x69, 0x3b, 0xe2, 0x32, 0xbf, 0x1e, 0x09, 0x20, 0xbe, 0xe7, 0xaa,
	0xb0, 0x47, 0x6a, 0xf1, 0x9c, 0xdd, 0xfc, 0x5f, 0x2b, 0x4e, 0x7c, 0xfa, 0x09, 0x75, 0x80, 0x29,
	0x6e, 0xbc, 0x3f, 0x45, 0x97, 0xa0, 0xd4, 0x49, 0x23, 0x43, 0xcc, 0x8d, 0x1c, 0x83, 0xd7, 0x4e,
	0xf1, 0x72, 0x65, 0x6e, 0xf5, 0x83, 0xfe, 0xc5, 0x24, 0x60, 0x23, 0xf7, 0x30, 0x9c, 0x3e, 0x60,
	0xed, 0xae, 0x47, 0x5d, 0x01, 0x57, 0x88, 0x5e, 0x98, 0x36, 0x7d, 0x5f, 0x57, 0x90, 0x1e, 0xd0,
	0x56, 0x56, 0x04, 0x01, 0xc1, 0xf9, 0x26, 0x27, 0x72, 0xab, 0x6c, 0x01, 0xb9, 0x7a, 0x3c, 0x13,
	0x38, 0xa4, 0x8c, 0x29, 0x9e, 0x47, 0x52, 0x57, 0x70, 0xf0, 0x21, 0xfe, 0x98, 0xbd, 0xff, 0x5f,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x87, 0xa1, 0x90, 0x0e, 0xea, 0x0a, 0x00, 0x00,
}
