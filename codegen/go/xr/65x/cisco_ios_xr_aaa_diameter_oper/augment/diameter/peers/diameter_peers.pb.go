/*
Copyright 2019 Cisco Systems

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: diameter_peers.proto

package cisco_ios_xr_aaa_diameter_oper_augment_diameter_peers

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type DiameterPeers_KEYS struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DiameterPeers_KEYS) Reset()         { *m = DiameterPeers_KEYS{} }
func (m *DiameterPeers_KEYS) String() string { return proto.CompactTextString(m) }
func (*DiameterPeers_KEYS) ProtoMessage()    {}
func (*DiameterPeers_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c45cd8642a6af1f, []int{0}
}

func (m *DiameterPeers_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DiameterPeers_KEYS.Unmarshal(m, b)
}
func (m *DiameterPeers_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DiameterPeers_KEYS.Marshal(b, m, deterministic)
}
func (m *DiameterPeers_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DiameterPeers_KEYS.Merge(m, src)
}
func (m *DiameterPeers_KEYS) XXX_Size() int {
	return xxx_messageInfo_DiameterPeers_KEYS.Size(m)
}
func (m *DiameterPeers_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_DiameterPeers_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_DiameterPeers_KEYS proto.InternalMessageInfo

type DiameterServerbag struct {
	PeerName               string   `protobuf:"bytes,1,opt,name=peer_name,json=peerName,proto3" json:"peer_name,omitempty"`
	PeerIndex              uint32   `protobuf:"varint,2,opt,name=peer_index,json=peerIndex,proto3" json:"peer_index,omitempty"`
	Address                string   `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	Port                   uint32   `protobuf:"varint,4,opt,name=port,proto3" json:"port,omitempty"`
	PortConnect            uint32   `protobuf:"varint,5,opt,name=port_connect,json=portConnect,proto3" json:"port_connect,omitempty"`
	ProtocolType           string   `protobuf:"bytes,6,opt,name=protocol_type,json=protocolType,proto3" json:"protocol_type,omitempty"`
	SecurityType           string   `protobuf:"bytes,7,opt,name=security_type,json=securityType,proto3" json:"security_type,omitempty"`
	ConnRetryTimer         uint32   `protobuf:"varint,8,opt,name=conn_retry_timer,json=connRetryTimer,proto3" json:"conn_retry_timer,omitempty"`
	WatchdogTimer          uint32   `protobuf:"varint,9,opt,name=watchdog_timer,json=watchdogTimer,proto3" json:"watchdog_timer,omitempty"`
	TransactionTimer       uint32   `protobuf:"varint,10,opt,name=transaction_timer,json=transactionTimer,proto3" json:"transaction_timer,omitempty"`
	VrfName                string   `protobuf:"bytes,11,opt,name=vrf_name,json=vrfName,proto3" json:"vrf_name,omitempty"`
	SourceInterface        string   `protobuf:"bytes,12,opt,name=source_interface,json=sourceInterface,proto3" json:"source_interface,omitempty"`
	DestinationHost        string   `protobuf:"bytes,13,opt,name=destination_host,json=destinationHost,proto3" json:"destination_host,omitempty"`
	DestinationRealm       string   `protobuf:"bytes,14,opt,name=destination_realm,json=destinationRealm,proto3" json:"destination_realm,omitempty"`
	PeerType               string   `protobuf:"bytes,15,opt,name=peer_type,json=peerType,proto3" json:"peer_type,omitempty"`
	FirmwareRevision       uint32   `protobuf:"varint,16,opt,name=firmware_revision,json=firmwareRevision,proto3" json:"firmware_revision,omitempty"`
	StateDuration          uint32   `protobuf:"varint,17,opt,name=state_duration,json=stateDuration,proto3" json:"state_duration,omitempty"`
	LastDisconnectCause    string   `protobuf:"bytes,18,opt,name=last_disconnect_cause,json=lastDisconnectCause,proto3" json:"last_disconnect_cause,omitempty"`
	WhoInitDisconnect      string   `protobuf:"bytes,19,opt,name=who_init_disconnect,json=whoInitDisconnect,proto3" json:"who_init_disconnect,omitempty"`
	InAsRs                 uint32   `protobuf:"varint,20,opt,name=in_as_rs,json=inAsRs,proto3" json:"in_as_rs,omitempty"`
	OutAsRs                uint32   `protobuf:"varint,21,opt,name=out_as_rs,json=outAsRs,proto3" json:"out_as_rs,omitempty"`
	InAsAs                 uint32   `protobuf:"varint,22,opt,name=in_as_as,json=inAsAs,proto3" json:"in_as_as,omitempty"`
	OutAsAs                uint32   `protobuf:"varint,23,opt,name=out_as_as,json=outAsAs,proto3" json:"out_as_as,omitempty"`
	InAcRs                 uint32   `protobuf:"varint,24,opt,name=in_ac_rs,json=inAcRs,proto3" json:"in_ac_rs,omitempty"`
	OutAcRs                uint32   `protobuf:"varint,25,opt,name=out_ac_rs,json=outAcRs,proto3" json:"out_ac_rs,omitempty"`
	InAcAs                 uint32   `protobuf:"varint,26,opt,name=in_ac_as,json=inAcAs,proto3" json:"in_ac_as,omitempty"`
	OutAcAs                uint32   `protobuf:"varint,27,opt,name=out_ac_as,json=outAcAs,proto3" json:"out_ac_as,omitempty"`
	InCeRs                 uint32   `protobuf:"varint,28,opt,name=in_ce_rs,json=inCeRs,proto3" json:"in_ce_rs,omitempty"`
	OutCeRs                uint32   `protobuf:"varint,29,opt,name=out_ce_rs,json=outCeRs,proto3" json:"out_ce_rs,omitempty"`
	InCeAs                 uint32   `protobuf:"varint,30,opt,name=in_ce_as,json=inCeAs,proto3" json:"in_ce_as,omitempty"`
	OutCeAs                uint32   `protobuf:"varint,31,opt,name=out_ce_as,json=outCeAs,proto3" json:"out_ce_as,omitempty"`
	InDwRs                 uint32   `protobuf:"varint,32,opt,name=in_dw_rs,json=inDwRs,proto3" json:"in_dw_rs,omitempty"`
	OutDwRs                uint32   `protobuf:"varint,33,opt,name=out_dw_rs,json=outDwRs,proto3" json:"out_dw_rs,omitempty"`
	InDwAs                 uint32   `protobuf:"varint,34,opt,name=in_dw_as,json=inDwAs,proto3" json:"in_dw_as,omitempty"`
	OutDwAs                uint32   `protobuf:"varint,35,opt,name=out_dw_as,json=outDwAs,proto3" json:"out_dw_as,omitempty"`
	InDpRs                 uint32   `protobuf:"varint,36,opt,name=in_dp_rs,json=inDpRs,proto3" json:"in_dp_rs,omitempty"`
	OutDpRs                uint32   `protobuf:"varint,37,opt,name=out_dp_rs,json=outDpRs,proto3" json:"out_dp_rs,omitempty"`
	InDpAs                 uint32   `protobuf:"varint,38,opt,name=in_dp_as,json=inDpAs,proto3" json:"in_dp_as,omitempty"`
	OutDpAs                uint32   `protobuf:"varint,39,opt,name=out_dp_as,json=outDpAs,proto3" json:"out_dp_as,omitempty"`
	InRaRs                 uint32   `protobuf:"varint,40,opt,name=in_ra_rs,json=inRaRs,proto3" json:"in_ra_rs,omitempty"`
	OutRaRs                uint32   `protobuf:"varint,41,opt,name=out_ra_rs,json=outRaRs,proto3" json:"out_ra_rs,omitempty"`
	InRaAs                 uint32   `protobuf:"varint,42,opt,name=in_ra_as,json=inRaAs,proto3" json:"in_ra_as,omitempty"`
	OutRaAs                uint32   `protobuf:"varint,43,opt,name=out_ra_as,json=outRaAs,proto3" json:"out_ra_as,omitempty"`
	InStRs                 uint32   `protobuf:"varint,44,opt,name=in_st_rs,json=inStRs,proto3" json:"in_st_rs,omitempty"`
	OutStRs                uint32   `protobuf:"varint,45,opt,name=out_st_rs,json=outStRs,proto3" json:"out_st_rs,omitempty"`
	InStAs                 uint32   `protobuf:"varint,46,opt,name=in_st_as,json=inStAs,proto3" json:"in_st_as,omitempty"`
	OutStAs                uint32   `protobuf:"varint,47,opt,name=out_st_as,json=outStAs,proto3" json:"out_st_as,omitempty"`
	InCcRs                 uint32   `protobuf:"varint,48,opt,name=in_cc_rs,json=inCcRs,proto3" json:"in_cc_rs,omitempty"`
	OutCcRs                uint32   `protobuf:"varint,49,opt,name=out_cc_rs,json=outCcRs,proto3" json:"out_cc_rs,omitempty"`
	InCcAs                 uint32   `protobuf:"varint,50,opt,name=in_cc_as,json=inCcAs,proto3" json:"in_cc_as,omitempty"`
	OutCcAs                uint32   `protobuf:"varint,51,opt,name=out_cc_as,json=outCcAs,proto3" json:"out_cc_as,omitempty"`
	OutAaRs                uint32   `protobuf:"varint,52,opt,name=out_aa_rs,json=outAaRs,proto3" json:"out_aa_rs,omitempty"`
	InAaAs                 uint32   `protobuf:"varint,53,opt,name=in_aa_as,json=inAaAs,proto3" json:"in_aa_as,omitempty"`
	MalformedRequests      uint32   `protobuf:"varint,54,opt,name=malformed_requests,json=malformedRequests,proto3" json:"malformed_requests,omitempty"`
	ReceivedProtoErrors    uint32   `protobuf:"varint,55,opt,name=received_proto_errors,json=receivedProtoErrors,proto3" json:"received_proto_errors,omitempty"`
	SentProtoErrors        uint32   `protobuf:"varint,56,opt,name=sent_proto_errors,json=sentProtoErrors,proto3" json:"sent_proto_errors,omitempty"`
	ReceivedTransientFails uint32   `protobuf:"varint,57,opt,name=received_transient_fails,json=receivedTransientFails,proto3" json:"received_transient_fails,omitempty"`
	SentTransientFails     uint32   `protobuf:"varint,58,opt,name=sent_transient_fails,json=sentTransientFails,proto3" json:"sent_transient_fails,omitempty"`
	ReceivedPermanentFails uint32   `protobuf:"varint,59,opt,name=received_permanent_fails,json=receivedPermanentFails,proto3" json:"received_permanent_fails,omitempty"`
	SentPermanentFails     uint32   `protobuf:"varint,60,opt,name=sent_permanent_fails,json=sentPermanentFails,proto3" json:"sent_permanent_fails,omitempty"`
	TransportDown          uint32   `protobuf:"varint,61,opt,name=transport_down,json=transportDown,proto3" json:"transport_down,omitempty"`
	State                  string   `protobuf:"bytes,62,opt,name=state,proto3" json:"state,omitempty"`
	XXX_NoUnkeyedLiteral   struct{} `json:"-"`
	XXX_unrecognized       []byte   `json:"-"`
	XXX_sizecache          int32    `json:"-"`
}

func (m *DiameterServerbag) Reset()         { *m = DiameterServerbag{} }
func (m *DiameterServerbag) String() string { return proto.CompactTextString(m) }
func (*DiameterServerbag) ProtoMessage()    {}
func (*DiameterServerbag) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c45cd8642a6af1f, []int{1}
}

func (m *DiameterServerbag) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DiameterServerbag.Unmarshal(m, b)
}
func (m *DiameterServerbag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DiameterServerbag.Marshal(b, m, deterministic)
}
func (m *DiameterServerbag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DiameterServerbag.Merge(m, src)
}
func (m *DiameterServerbag) XXX_Size() int {
	return xxx_messageInfo_DiameterServerbag.Size(m)
}
func (m *DiameterServerbag) XXX_DiscardUnknown() {
	xxx_messageInfo_DiameterServerbag.DiscardUnknown(m)
}

var xxx_messageInfo_DiameterServerbag proto.InternalMessageInfo

func (m *DiameterServerbag) GetPeerName() string {
	if m != nil {
		return m.PeerName
	}
	return ""
}

func (m *DiameterServerbag) GetPeerIndex() uint32 {
	if m != nil {
		return m.PeerIndex
	}
	return 0
}

func (m *DiameterServerbag) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *DiameterServerbag) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *DiameterServerbag) GetPortConnect() uint32 {
	if m != nil {
		return m.PortConnect
	}
	return 0
}

func (m *DiameterServerbag) GetProtocolType() string {
	if m != nil {
		return m.ProtocolType
	}
	return ""
}

func (m *DiameterServerbag) GetSecurityType() string {
	if m != nil {
		return m.SecurityType
	}
	return ""
}

func (m *DiameterServerbag) GetConnRetryTimer() uint32 {
	if m != nil {
		return m.ConnRetryTimer
	}
	return 0
}

func (m *DiameterServerbag) GetWatchdogTimer() uint32 {
	if m != nil {
		return m.WatchdogTimer
	}
	return 0
}

func (m *DiameterServerbag) GetTransactionTimer() uint32 {
	if m != nil {
		return m.TransactionTimer
	}
	return 0
}

func (m *DiameterServerbag) GetVrfName() string {
	if m != nil {
		return m.VrfName
	}
	return ""
}

func (m *DiameterServerbag) GetSourceInterface() string {
	if m != nil {
		return m.SourceInterface
	}
	return ""
}

func (m *DiameterServerbag) GetDestinationHost() string {
	if m != nil {
		return m.DestinationHost
	}
	return ""
}

func (m *DiameterServerbag) GetDestinationRealm() string {
	if m != nil {
		return m.DestinationRealm
	}
	return ""
}

func (m *DiameterServerbag) GetPeerType() string {
	if m != nil {
		return m.PeerType
	}
	return ""
}

func (m *DiameterServerbag) GetFirmwareRevision() uint32 {
	if m != nil {
		return m.FirmwareRevision
	}
	return 0
}

func (m *DiameterServerbag) GetStateDuration() uint32 {
	if m != nil {
		return m.StateDuration
	}
	return 0
}

func (m *DiameterServerbag) GetLastDisconnectCause() string {
	if m != nil {
		return m.LastDisconnectCause
	}
	return ""
}

func (m *DiameterServerbag) GetWhoInitDisconnect() string {
	if m != nil {
		return m.WhoInitDisconnect
	}
	return ""
}

func (m *DiameterServerbag) GetInAsRs() uint32 {
	if m != nil {
		return m.InAsRs
	}
	return 0
}

func (m *DiameterServerbag) GetOutAsRs() uint32 {
	if m != nil {
		return m.OutAsRs
	}
	return 0
}

func (m *DiameterServerbag) GetInAsAs() uint32 {
	if m != nil {
		return m.InAsAs
	}
	return 0
}

func (m *DiameterServerbag) GetOutAsAs() uint32 {
	if m != nil {
		return m.OutAsAs
	}
	return 0
}

func (m *DiameterServerbag) GetInAcRs() uint32 {
	if m != nil {
		return m.InAcRs
	}
	return 0
}

func (m *DiameterServerbag) GetOutAcRs() uint32 {
	if m != nil {
		return m.OutAcRs
	}
	return 0
}

func (m *DiameterServerbag) GetInAcAs() uint32 {
	if m != nil {
		return m.InAcAs
	}
	return 0
}

func (m *DiameterServerbag) GetOutAcAs() uint32 {
	if m != nil {
		return m.OutAcAs
	}
	return 0
}

func (m *DiameterServerbag) GetInCeRs() uint32 {
	if m != nil {
		return m.InCeRs
	}
	return 0
}

func (m *DiameterServerbag) GetOutCeRs() uint32 {
	if m != nil {
		return m.OutCeRs
	}
	return 0
}

func (m *DiameterServerbag) GetInCeAs() uint32 {
	if m != nil {
		return m.InCeAs
	}
	return 0
}

func (m *DiameterServerbag) GetOutCeAs() uint32 {
	if m != nil {
		return m.OutCeAs
	}
	return 0
}

func (m *DiameterServerbag) GetInDwRs() uint32 {
	if m != nil {
		return m.InDwRs
	}
	return 0
}

func (m *DiameterServerbag) GetOutDwRs() uint32 {
	if m != nil {
		return m.OutDwRs
	}
	return 0
}

func (m *DiameterServerbag) GetInDwAs() uint32 {
	if m != nil {
		return m.InDwAs
	}
	return 0
}

func (m *DiameterServerbag) GetOutDwAs() uint32 {
	if m != nil {
		return m.OutDwAs
	}
	return 0
}

func (m *DiameterServerbag) GetInDpRs() uint32 {
	if m != nil {
		return m.InDpRs
	}
	return 0
}

func (m *DiameterServerbag) GetOutDpRs() uint32 {
	if m != nil {
		return m.OutDpRs
	}
	return 0
}

func (m *DiameterServerbag) GetInDpAs() uint32 {
	if m != nil {
		return m.InDpAs
	}
	return 0
}

func (m *DiameterServerbag) GetOutDpAs() uint32 {
	if m != nil {
		return m.OutDpAs
	}
	return 0
}

func (m *DiameterServerbag) GetInRaRs() uint32 {
	if m != nil {
		return m.InRaRs
	}
	return 0
}

func (m *DiameterServerbag) GetOutRaRs() uint32 {
	if m != nil {
		return m.OutRaRs
	}
	return 0
}

func (m *DiameterServerbag) GetInRaAs() uint32 {
	if m != nil {
		return m.InRaAs
	}
	return 0
}

func (m *DiameterServerbag) GetOutRaAs() uint32 {
	if m != nil {
		return m.OutRaAs
	}
	return 0
}

func (m *DiameterServerbag) GetInStRs() uint32 {
	if m != nil {
		return m.InStRs
	}
	return 0
}

func (m *DiameterServerbag) GetOutStRs() uint32 {
	if m != nil {
		return m.OutStRs
	}
	return 0
}

func (m *DiameterServerbag) GetInStAs() uint32 {
	if m != nil {
		return m.InStAs
	}
	return 0
}

func (m *DiameterServerbag) GetOutStAs() uint32 {
	if m != nil {
		return m.OutStAs
	}
	return 0
}

func (m *DiameterServerbag) GetInCcRs() uint32 {
	if m != nil {
		return m.InCcRs
	}
	return 0
}

func (m *DiameterServerbag) GetOutCcRs() uint32 {
	if m != nil {
		return m.OutCcRs
	}
	return 0
}

func (m *DiameterServerbag) GetInCcAs() uint32 {
	if m != nil {
		return m.InCcAs
	}
	return 0
}

func (m *DiameterServerbag) GetOutCcAs() uint32 {
	if m != nil {
		return m.OutCcAs
	}
	return 0
}

func (m *DiameterServerbag) GetOutAaRs() uint32 {
	if m != nil {
		return m.OutAaRs
	}
	return 0
}

func (m *DiameterServerbag) GetInAaAs() uint32 {
	if m != nil {
		return m.InAaAs
	}
	return 0
}

func (m *DiameterServerbag) GetMalformedRequests() uint32 {
	if m != nil {
		return m.MalformedRequests
	}
	return 0
}

func (m *DiameterServerbag) GetReceivedProtoErrors() uint32 {
	if m != nil {
		return m.ReceivedProtoErrors
	}
	return 0
}

func (m *DiameterServerbag) GetSentProtoErrors() uint32 {
	if m != nil {
		return m.SentProtoErrors
	}
	return 0
}

func (m *DiameterServerbag) GetReceivedTransientFails() uint32 {
	if m != nil {
		return m.ReceivedTransientFails
	}
	return 0
}

func (m *DiameterServerbag) GetSentTransientFails() uint32 {
	if m != nil {
		return m.SentTransientFails
	}
	return 0
}

func (m *DiameterServerbag) GetReceivedPermanentFails() uint32 {
	if m != nil {
		return m.ReceivedPermanentFails
	}
	return 0
}

func (m *DiameterServerbag) GetSentPermanentFails() uint32 {
	if m != nil {
		return m.SentPermanentFails
	}
	return 0
}

func (m *DiameterServerbag) GetTransportDown() uint32 {
	if m != nil {
		return m.TransportDown
	}
	return 0
}

func (m *DiameterServerbag) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

type DiameterPeers struct {
	OriginHost           string               `protobuf:"bytes,50,opt,name=origin_host,json=originHost,proto3" json:"origin_host,omitempty"`
	OriginRealm          string               `protobuf:"bytes,51,opt,name=origin_realm,json=originRealm,proto3" json:"origin_realm,omitempty"`
	SourceInterface      string               `protobuf:"bytes,52,opt,name=source_interface,json=sourceInterface,proto3" json:"source_interface,omitempty"`
	TlsTrustpoint        string               `protobuf:"bytes,53,opt,name=tls_trustpoint,json=tlsTrustpoint,proto3" json:"tls_trustpoint,omitempty"`
	ConnRetryTimer       uint32               `protobuf:"varint,54,opt,name=conn_retry_timer,json=connRetryTimer,proto3" json:"conn_retry_timer,omitempty"`
	WatchdogTimer        uint32               `protobuf:"varint,55,opt,name=watchdog_timer,json=watchdogTimer,proto3" json:"watchdog_timer,omitempty"`
	TransactionTimer     uint32               `protobuf:"varint,56,opt,name=transaction_timer,json=transactionTimer,proto3" json:"transaction_timer,omitempty"`
	PeerNum              uint32               `protobuf:"varint,57,opt,name=peer_num,json=peerNum,proto3" json:"peer_num,omitempty"`
	Peer                 []*DiameterServerbag `protobuf:"bytes,58,rep,name=peer,proto3" json:"peer,omitempty"`
	TransTotal           uint32               `protobuf:"varint,59,opt,name=trans_total,json=transTotal,proto3" json:"trans_total,omitempty"`
	TransMax             uint32               `protobuf:"varint,60,opt,name=trans_max,json=transMax,proto3" json:"trans_max,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *DiameterPeers) Reset()         { *m = DiameterPeers{} }
func (m *DiameterPeers) String() string { return proto.CompactTextString(m) }
func (*DiameterPeers) ProtoMessage()    {}
func (*DiameterPeers) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c45cd8642a6af1f, []int{2}
}

func (m *DiameterPeers) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DiameterPeers.Unmarshal(m, b)
}
func (m *DiameterPeers) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DiameterPeers.Marshal(b, m, deterministic)
}
func (m *DiameterPeers) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DiameterPeers.Merge(m, src)
}
func (m *DiameterPeers) XXX_Size() int {
	return xxx_messageInfo_DiameterPeers.Size(m)
}
func (m *DiameterPeers) XXX_DiscardUnknown() {
	xxx_messageInfo_DiameterPeers.DiscardUnknown(m)
}

var xxx_messageInfo_DiameterPeers proto.InternalMessageInfo

func (m *DiameterPeers) GetOriginHost() string {
	if m != nil {
		return m.OriginHost
	}
	return ""
}

func (m *DiameterPeers) GetOriginRealm() string {
	if m != nil {
		return m.OriginRealm
	}
	return ""
}

func (m *DiameterPeers) GetSourceInterface() string {
	if m != nil {
		return m.SourceInterface
	}
	return ""
}

func (m *DiameterPeers) GetTlsTrustpoint() string {
	if m != nil {
		return m.TlsTrustpoint
	}
	return ""
}

func (m *DiameterPeers) GetConnRetryTimer() uint32 {
	if m != nil {
		return m.ConnRetryTimer
	}
	return 0
}

func (m *DiameterPeers) GetWatchdogTimer() uint32 {
	if m != nil {
		return m.WatchdogTimer
	}
	return 0
}

func (m *DiameterPeers) GetTransactionTimer() uint32 {
	if m != nil {
		return m.TransactionTimer
	}
	return 0
}

func (m *DiameterPeers) GetPeerNum() uint32 {
	if m != nil {
		return m.PeerNum
	}
	return 0
}

func (m *DiameterPeers) GetPeer() []*DiameterServerbag {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *DiameterPeers) GetTransTotal() uint32 {
	if m != nil {
		return m.TransTotal
	}
	return 0
}

func (m *DiameterPeers) GetTransMax() uint32 {
	if m != nil {
		return m.TransMax
	}
	return 0
}

func init() {
	proto.RegisterType((*DiameterPeers_KEYS)(nil), "cisco_ios_xr_aaa_diameter_oper.augment.diameter.peers.diameter_peers_KEYS")
	proto.RegisterType((*DiameterServerbag)(nil), "cisco_ios_xr_aaa_diameter_oper.augment.diameter.peers.diameter_serverbag")
	proto.RegisterType((*DiameterPeers)(nil), "cisco_ios_xr_aaa_diameter_oper.augment.diameter.peers.diameter_peers")
}

func init() { proto.RegisterFile("diameter_peers.proto", fileDescriptor_9c45cd8642a6af1f) }

var fileDescriptor_9c45cd8642a6af1f = []byte{
	// 1053 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x96, 0x6b, 0x4f, 0x1c, 0xb7,
	0x17, 0xc6, 0x95, 0x7f, 0x08, 0x17, 0x73, 0xdd, 0x01, 0xf2, 0x77, 0x92, 0xa6, 0x01, 0x52, 0x5a,
	0x12, 0x9a, 0x6d, 0x0a, 0xb9, 0xd0, 0xf4, 0x22, 0xad, 0x20, 0x55, 0x51, 0xd5, 0x2a, 0x9a, 0xf0,
	0xa6, 0x2f, 0x2a, 0xeb, 0x64, 0xc6, 0x0b, 0x96, 0x76, 0xc6, 0x5b, 0x1f, 0x0f, 0x0b, 0x5f, 0xa4,
	0x9f, 0xae, 0x1f, 0xa6, 0xf2, 0xf1, 0x8c, 0x6d, 0x28, 0x95, 0xa2, 0xbe, 0x62, 0xf7, 0x79, 0x9e,
	0x9f, 0xcf, 0xac, 0x7d, 0xf0, 0x19, 0xb6, 0x56, 0x2a, 0xa8, 0xa4, 0x95, 0x46, 0x8c, 0xa5, 0x34,
	0xd8, 0x1f, 0x1b, 0x6d, 0x75, 0xf6, 0xb2, 0x50, 0x58, 0x68, 0xa1, 0x34, 0x8a, 0x0b, 0x23, 0x00,
	0x40, 0x84, 0x98, 0x1e, 0x4b, 0xd3, 0x87, 0xe6, 0xb4, 0x92, 0xb5, 0xed, 0x77, 0x6a, 0x9f, 0xe0,
	0xad, 0x75, 0xb6, 0x7a, 0x75, 0x39, 0xf1, 0xf3, 0xdb, 0xdf, 0xde, 0x6f, 0xfd, 0xb9, 0xc2, 0xb2,
	0xa0, 0xa3, 0x34, 0xe7, 0xd2, 0x7c, 0x80, 0xd3, 0xec, 0x01, 0x9b, 0x73, 0x21, 0x51, 0x43, 0x25,
	0xf9, 0xad, 0x8d, 0x5b, 0x3b, 0x73, 0xf9, 0xac, 0x13, 0x7e, 0x85, 0x4a, 0x66, 0x0f, 0x19, 0x23,
	0x53, 0xd5, 0xa5, 0xbc, 0xe0, 0xff, 0xdb, 0xb8, 0xb5, 0xb3, 0x98, 0x53, 0xfc, 0xd8, 0x09, 0x19,
	0x67, 0x33, 0x50, 0x96, 0x46, 0x22, 0xf2, 0xdb, 0x44, 0x76, 0x5f, 0xb3, 0x8c, 0x4d, 0x8d, 0xb5,
	0xb1, 0x7c, 0x8a, 0x10, 0xfa, 0x9c, 0x6d, 0xb2, 0x05, 0xf7, 0x57, 0x14, 0xba, 0xae, 0x65, 0x61,
	0xf9, 0x1d, 0xf2, 0xe6, 0x9d, 0x76, 0xe8, 0xa5, 0xec, 0x31, 0x5b, 0xa4, 0x9f, 0x5e, 0xe8, 0x91,
	0xb0, 0x97, 0x63, 0xc9, 0xa7, 0x69, 0xd9, 0x85, 0x4e, 0x3c, 0xb9, 0x1c, 0x4b, 0x17, 0x42, 0x59,
	0x34, 0x46, 0xd9, 0x4b, 0x1f, 0x9a, 0xf1, 0xa1, 0x4e, 0xa4, 0xd0, 0x0e, 0x5b, 0x71, 0x75, 0x84,
	0x91, 0xd6, 0x5c, 0x0a, 0xab, 0x2a, 0x69, 0xf8, 0x2c, 0x15, 0x5c, 0x72, 0x7a, 0xee, 0xe4, 0x13,
	0xa7, 0x66, 0xdb, 0x6c, 0x69, 0x02, 0xb6, 0x38, 0x2b, 0xf5, 0x69, 0x9b, 0x9b, 0xa3, 0xdc, 0x62,
	0xa7, 0xfa, 0xd8, 0x2e, 0xeb, 0x59, 0x03, 0x35, 0x42, 0x61, 0x95, 0xae, 0xdb, 0x24, 0xa3, 0xe4,
	0x4a, 0x62, 0xf8, 0xf0, 0x3d, 0x36, 0x7b, 0x6e, 0x86, 0x7e, 0x4f, 0xe7, 0xfd, 0xce, 0x9c, 0x9b,
	0x21, 0x6d, 0xe9, 0x13, 0xb6, 0x82, 0xba, 0x31, 0x85, 0x14, 0xaa, 0xb6, 0xd2, 0x0c, 0xa1, 0x90,
	0x7c, 0x81, 0x22, 0xcb, 0x5e, 0x3f, 0xee, 0x64, 0x17, 0x2d, 0x25, 0x5a, 0x55, 0x03, 0x95, 0x3c,
	0xd3, 0x68, 0xf9, 0xa2, 0x8f, 0x26, 0xfa, 0x4f, 0x1a, 0xad, 0x7b, 0xba, 0x34, 0x6a, 0x24, 0x8c,
	0x2a, 0xbe, 0x44, 0xd9, 0x74, 0x8d, 0xdc, 0xe9, 0xe1, 0xc8, 0x69, 0xf3, 0x96, 0xe3, 0x91, 0xd3,
	0xc6, 0xed, 0xb2, 0xde, 0x50, 0x99, 0x6a, 0x02, 0x46, 0x0a, 0x23, 0xcf, 0x15, 0x2a, 0x5d, 0xf3,
	0x15, 0xff, 0x3b, 0x3b, 0x23, 0x6f, 0x75, 0xb7, 0x77, 0x68, 0xc1, 0x4a, 0x51, 0x36, 0x86, 0x0a,
	0xf0, 0x9e, 0xdf, 0x3b, 0x52, 0x8f, 0x5a, 0x31, 0xdb, 0x63, 0xeb, 0x23, 0x40, 0x2b, 0x4a, 0xd7,
	0xcf, 0x74, 0xd2, 0xa2, 0x80, 0x06, 0x25, 0xcf, 0xa8, 0xf8, 0xaa, 0x33, 0x8f, 0x82, 0x77, 0xe8,
	0xac, 0xac, 0xcf, 0x56, 0x27, 0x67, 0x5a, 0xa8, 0x5a, 0xa5, 0x1c, 0x5f, 0x25, 0xa2, 0x37, 0x39,
	0xd3, 0xc7, 0xb5, 0x4a, 0xa0, 0x8c, 0xb3, 0x59, 0x55, 0x0b, 0x40, 0x61, 0x90, 0xaf, 0xd1, 0x43,
	0x4c, 0xab, 0x7a, 0x80, 0x39, 0x66, 0xf7, 0xd9, 0x9c, 0x6e, 0x6c, 0x6b, 0xad, 0x93, 0x35, 0xa3,
	0x1b, 0x4b, 0x5e, 0xa0, 0x00, 0xf9, 0xdd, 0x48, 0x0d, 0x52, 0x0a, 0x90, 0xff, 0x3f, 0xa1, 0x06,
	0x81, 0x2a, 0xdc, 0x82, 0x3c, 0x50, 0x45, 0x52, 0x8b, 0xac, 0x7b, 0x91, 0x2a, 0xf2, 0x84, 0x02,
	0xe4, 0xf7, 0x23, 0x35, 0x48, 0x29, 0x40, 0xfe, 0x20, 0xa1, 0x42, 0xad, 0x42, 0xba, 0x05, 0x3f,
	0xe9, 0xa8, 0x43, 0x19, 0x6b, 0x79, 0xeb, 0x61, 0xa0, 0xc8, 0x0b, 0x14, 0x20, 0xff, 0x34, 0x52,
	0x83, 0x94, 0x02, 0xe4, 0x8f, 0x12, 0x2a, 0xd4, 0x2a, 0x27, 0x6e, 0xc1, 0x8d, 0x8e, 0x3a, 0x9a,
	0xc4, 0x5a, 0xde, 0xda, 0x0c, 0x14, 0x79, 0x81, 0x02, 0xe4, 0x5b, 0x91, 0x1a, 0xa4, 0x14, 0x20,
	0x7f, 0x9c, 0x50, 0xb1, 0xd6, 0xd8, 0x2d, 0xf8, 0x59, 0xa0, 0xc6, 0x49, 0x2d, 0xb2, 0xb6, 0x23,
	0x35, 0xce, 0x13, 0x0a, 0x90, 0x7f, 0x1e, 0xa9, 0x41, 0x4a, 0x01, 0xf2, 0x2f, 0x12, 0x2a, 0xd4,
	0x32, 0xe0, 0x16, 0xdc, 0xe9, 0xa8, 0x1c, 0x62, 0x2d, 0x6f, 0x3d, 0x09, 0x14, 0x79, 0x81, 0x02,
	0xe4, 0x4f, 0x23, 0x35, 0x48, 0x29, 0x40, 0xbe, 0x9b, 0x50, 0xa1, 0x16, 0x5a, 0xb7, 0xe0, 0x97,
	0x1d, 0xf5, 0xde, 0xc6, 0x5a, 0xde, 0x7a, 0x16, 0x28, 0xf2, 0x02, 0x05, 0xc8, 0xfb, 0x91, 0x1a,
	0xa4, 0x14, 0x20, 0xff, 0x2a, 0xa1, 0x62, 0x6f, 0x50, 0xb3, 0x3d, 0x0f, 0xa7, 0x9c, 0xf4, 0xa1,
	0xb7, 0xbe, 0x8e, 0xa7, 0x1c, 0xfb, 0xb0, 0xa0, 0x66, 0xdb, 0x8b, 0xd4, 0x20, 0xa5, 0x00, 0xf9,
	0x7e, 0x42, 0x25, 0x3d, 0x4a, 0x3b, 0xf5, 0x22, 0xf6, 0x68, 0xdc, 0x29, 0xa0, 0xed, 0x78, 0x19,
	0x3a, 0xdb, 0xed, 0xc6, 0x33, 0x96, 0x55, 0x30, 0x1a, 0x6a, 0x53, 0xc9, 0x52, 0x18, 0xf9, 0x47,
	0x23, 0xd1, 0x22, 0x7f, 0x45, 0x99, 0x5e, 0x70, 0xf2, 0xd6, 0x70, 0x17, 0x85, 0x91, 0x85, 0x54,
	0xe7, 0xb2, 0x14, 0x74, 0xe7, 0x0b, 0x69, 0x8c, 0x36, 0xc8, 0x5f, 0x13, 0xb1, 0xda, 0x99, 0xef,
	0x9c, 0xf7, 0x96, 0xac, 0xec, 0x29, 0xeb, 0xa1, 0xac, 0xed, 0xd5, 0xfc, 0x01, 0xe5, 0x97, 0x9d,
	0x91, 0x66, 0x0f, 0x18, 0x0f, 0xeb, 0xd3, 0xa5, 0xad, 0x1c, 0x39, 0x04, 0x35, 0x42, 0xfe, 0x0d,
	0x21, 0x77, 0x3b, 0xff, 0xa4, 0xb3, 0x7f, 0x74, 0x6e, 0xf6, 0x9c, 0xad, 0x51, 0x95, 0xeb, 0xd4,
	0x1b, 0xa2, 0x32, 0xe7, 0x5d, 0x23, 0xd2, 0x5a, 0x63, 0x69, 0x2a, 0xa8, 0x23, 0xf5, 0xed, 0xd5,
	0x5a, 0xef, 0x3a, 0xfb, 0x6a, 0xad, 0xeb, 0xd4, 0x77, 0xb1, 0xd6, 0x35, 0x62, 0x9b, 0x2d, 0xd1,
	0x83, 0xd1, 0x7c, 0x2d, 0xf5, 0xa4, 0xe6, 0xdf, 0xfb, 0x7b, 0x38, 0xa8, 0x47, 0x7a, 0x52, 0x67,
	0x6b, 0xec, 0x0e, 0x5d, 0xcc, 0xfc, 0x07, 0xba, 0x45, 0xfd, 0x97, 0xad, 0xbf, 0x6e, 0xb3, 0xa5,
	0xab, 0x2f, 0x0c, 0xd9, 0x23, 0x36, 0xaf, 0x8d, 0x3a, 0x55, 0xed, 0xd0, 0xd9, 0xa3, 0x38, 0xf3,
	0x12, 0xcd, 0x9b, 0x4d, 0xb6, 0xd0, 0x06, 0xfc, 0xa8, 0xd9, 0xa7, 0x44, 0x0b, 0xf9, 0x29, 0x73,
	0xd3, 0xa0, 0x7b, 0x71, 0xf3, 0xa0, 0x73, 0x8f, 0x3f, 0x42, 0x61, 0x4d, 0x83, 0x76, 0xac, 0x55,
	0x6d, 0xa9, 0x8b, 0xe6, 0xf2, 0x45, 0x3b, 0xc2, 0x93, 0x20, 0xde, 0x38, 0xd3, 0x5f, 0x7d, 0xe4,
	0x4c, 0x7f, 0xfd, 0xd1, 0x33, 0xfd, 0xe0, 0xdf, 0x67, 0xba, 0x7f, 0x51, 0x6a, 0xaa, 0xb6, 0x57,
	0x66, 0xe8, 0x3d, 0xa9, 0xa9, 0xb2, 0xdf, 0xd9, 0x94, 0xfb, 0xc8, 0xdf, 0x6c, 0xdc, 0xde, 0x99,
	0xdf, 0x3b, 0xee, 0xff, 0xa7, 0xf7, 0xb6, 0xfe, 0x3f, 0x5f, 0xce, 0x72, 0x5a, 0xd6, 0x9d, 0x06,
	0x3d, 0x8d, 0xb0, 0xda, 0xc2, 0xa8, 0x6d, 0x1e, 0x46, 0xd2, 0x89, 0x53, 0xdc, 0x40, 0xf7, 0x81,
	0x0a, 0x2e, 0xda, 0x2e, 0x99, 0x25, 0xe1, 0x17, 0xb8, 0xf8, 0x30, 0x4d, 0xff, 0x18, 0xfb, 0x7f,
	0x07, 0x00, 0x00, 0xff, 0xff, 0xb8, 0x55, 0xf1, 0x7b, 0x64, 0x0a, 0x00, 0x00,
}
