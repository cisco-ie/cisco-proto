/*
Copyright 2019 Cisco Systems

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: system_message.proto

package cisco_ios_xr_infra_syslog_oper_get_syslog_output_data_syslog_messages_message

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type SystemMessage_KEYS struct {
	MessageId            uint32   `protobuf:"varint,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SystemMessage_KEYS) Reset()         { *m = SystemMessage_KEYS{} }
func (m *SystemMessage_KEYS) String() string { return proto.CompactTextString(m) }
func (*SystemMessage_KEYS) ProtoMessage()    {}
func (*SystemMessage_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_a9d1786dd503c854, []int{0}
}

func (m *SystemMessage_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SystemMessage_KEYS.Unmarshal(m, b)
}
func (m *SystemMessage_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SystemMessage_KEYS.Marshal(b, m, deterministic)
}
func (m *SystemMessage_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SystemMessage_KEYS.Merge(m, src)
}
func (m *SystemMessage_KEYS) XXX_Size() int {
	return xxx_messageInfo_SystemMessage_KEYS.Size(m)
}
func (m *SystemMessage_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_SystemMessage_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_SystemMessage_KEYS proto.InternalMessageInfo

func (m *SystemMessage_KEYS) GetMessageId() uint32 {
	if m != nil {
		return m.MessageId
	}
	return 0
}

type SystemMessage struct {
	CardType             string   `protobuf:"bytes,50,opt,name=card_type,json=cardType,proto3" json:"card_type,omitempty"`
	NodeName             string   `protobuf:"bytes,51,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	TimeStamp            uint64   `protobuf:"varint,52,opt,name=time_stamp,json=timeStamp,proto3" json:"time_stamp,omitempty"`
	TimeOfDay            string   `protobuf:"bytes,53,opt,name=time_of_day,json=timeOfDay,proto3" json:"time_of_day,omitempty"`
	TimeZone             string   `protobuf:"bytes,54,opt,name=time_zone,json=timeZone,proto3" json:"time_zone,omitempty"`
	ProcessName          string   `protobuf:"bytes,55,opt,name=process_name,json=processName,proto3" json:"process_name,omitempty"`
	Category             string   `protobuf:"bytes,56,opt,name=category,proto3" json:"category,omitempty"`
	Group                string   `protobuf:"bytes,57,opt,name=group,proto3" json:"group,omitempty"`
	MessageName          string   `protobuf:"bytes,58,opt,name=message_name,json=messageName,proto3" json:"message_name,omitempty"`
	Severity             string   `protobuf:"bytes,59,opt,name=severity,proto3" json:"severity,omitempty"`
	Text                 string   `protobuf:"bytes,60,opt,name=text,proto3" json:"text,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SystemMessage) Reset()         { *m = SystemMessage{} }
func (m *SystemMessage) String() string { return proto.CompactTextString(m) }
func (*SystemMessage) ProtoMessage()    {}
func (*SystemMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_a9d1786dd503c854, []int{1}
}

func (m *SystemMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SystemMessage.Unmarshal(m, b)
}
func (m *SystemMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SystemMessage.Marshal(b, m, deterministic)
}
func (m *SystemMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SystemMessage.Merge(m, src)
}
func (m *SystemMessage) XXX_Size() int {
	return xxx_messageInfo_SystemMessage.Size(m)
}
func (m *SystemMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_SystemMessage.DiscardUnknown(m)
}

var xxx_messageInfo_SystemMessage proto.InternalMessageInfo

func (m *SystemMessage) GetCardType() string {
	if m != nil {
		return m.CardType
	}
	return ""
}

func (m *SystemMessage) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

func (m *SystemMessage) GetTimeStamp() uint64 {
	if m != nil {
		return m.TimeStamp
	}
	return 0
}

func (m *SystemMessage) GetTimeOfDay() string {
	if m != nil {
		return m.TimeOfDay
	}
	return ""
}

func (m *SystemMessage) GetTimeZone() string {
	if m != nil {
		return m.TimeZone
	}
	return ""
}

func (m *SystemMessage) GetProcessName() string {
	if m != nil {
		return m.ProcessName
	}
	return ""
}

func (m *SystemMessage) GetCategory() string {
	if m != nil {
		return m.Category
	}
	return ""
}

func (m *SystemMessage) GetGroup() string {
	if m != nil {
		return m.Group
	}
	return ""
}

func (m *SystemMessage) GetMessageName() string {
	if m != nil {
		return m.MessageName
	}
	return ""
}

func (m *SystemMessage) GetSeverity() string {
	if m != nil {
		return m.Severity
	}
	return ""
}

func (m *SystemMessage) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func init() {
	proto.RegisterType((*SystemMessage_KEYS)(nil), "cisco_ios_xr_infra_syslog_oper.get_syslog.output.data.syslog.messages.message.system_message_KEYS")
	proto.RegisterType((*SystemMessage)(nil), "cisco_ios_xr_infra_syslog_oper.get_syslog.output.data.syslog.messages.message.system_message")
}

func init() { proto.RegisterFile("system_message.proto", fileDescriptor_a9d1786dd503c854) }

var fileDescriptor_a9d1786dd503c854 = []byte{
	// 321 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x91, 0x3d, 0x4f, 0xf3, 0x30,
	0x14, 0x85, 0x95, 0x57, 0x7d, 0x51, 0xe3, 0x02, 0x83, 0xe9, 0x60, 0x81, 0x40, 0xa5, 0x53, 0xa7,
	0x0c, 0xb4, 0x7c, 0x33, 0xc2, 0x80, 0x10, 0x20, 0xb5, 0x2c, 0xb0, 0x58, 0x26, 0xb9, 0x8d, 0x22,
	0x91, 0x5c, 0xcb, 0xbe, 0x41, 0x35, 0x3f, 0x92, 0xdf, 0x84, 0x6c, 0x27, 0x43, 0x37, 0x9f, 0xe7,
	0xc8, 0xcf, 0x89, 0x62, 0x36, 0xb6, 0xce, 0x12, 0xd4, 0xb2, 0x06, 0x6b, 0x55, 0x09, 0x99, 0x36,
	0x48, 0xc8, 0x9f, 0xf3, 0xca, 0xe6, 0x28, 0x2b, 0xb4, 0x72, 0x63, 0x64, 0xd5, 0xac, 0x8d, 0x92,
	0xd6, 0xd9, 0x2f, 0x2c, 0x25, 0x6a, 0x30, 0x59, 0x09, 0xd4, 0xe5, 0x0c, 0x5b, 0xd2, 0x2d, 0x65,
	0x85, 0x22, 0x95, 0x75, 0xa8, 0x73, 0xd9, 0xfe, 0x30, 0x5d, 0xb0, 0x83, 0xed, 0x19, 0xf9, 0xf4,
	0xf0, 0xbe, 0xe2, 0xc7, 0x8c, 0xf5, 0xb9, 0x2a, 0x44, 0x32, 0x49, 0x66, 0x7b, 0xcb, 0xb4, 0x23,
	0x8f, 0xc5, 0xf4, 0xf7, 0x1f, 0xdb, 0xdf, 0xbe, 0xc6, 0x8f, 0x58, 0x9a, 0x2b, 0x53, 0x48, 0x72,
	0x1a, 0xc4, 0xd9, 0x24, 0x99, 0xa5, 0xcb, 0xa1, 0x07, 0x6f, 0x4e, 0x87, 0xb2, 0xc1, 0x02, 0x64,
	0xa3, 0x6a, 0x10, 0xf3, 0x58, 0x7a, 0xf0, 0xa2, 0x6a, 0xf0, 0x5b, 0x54, 0xd5, 0x20, 0x2d, 0xa9,
	0x5a, 0x8b, 0xc5, 0x24, 0x99, 0x0d, 0x96, 0xa9, 0x27, 0x2b, 0x0f, 0xf8, 0x09, 0x1b, 0x85, 0x1a,
	0xd7, 0xb2, 0x50, 0x4e, 0x9c, 0x87, 0xdb, 0xa1, 0x7f, 0x5d, 0xdf, 0x2b, 0xe7, 0xdd, 0xa1, 0xff,
	0xc1, 0x06, 0xc4, 0x45, 0x74, 0x7b, 0xf0, 0x81, 0x0d, 0xf0, 0x53, 0xb6, 0xab, 0x0d, 0xe6, 0x60,
	0x6d, 0xdc, 0xbe, 0x0c, 0xfd, 0xa8, 0x63, 0x61, 0xfe, 0x90, 0x0d, 0x73, 0x45, 0x50, 0xa2, 0x71,
	0xe2, 0xaa, 0xff, 0xee, 0x98, 0xf9, 0x98, 0xfd, 0x2f, 0x0d, 0xb6, 0x5a, 0x5c, 0x87, 0x22, 0x06,
	0x2f, 0xed, 0x7f, 0x4e, 0x90, 0xde, 0x44, 0x69, 0xc7, 0x7a, 0xa9, 0x85, 0x6f, 0x30, 0x15, 0x39,
	0x71, 0x1b, 0xa5, 0x7d, 0xe6, 0x9c, 0x0d, 0x08, 0x36, 0x24, 0xee, 0x02, 0x0f, 0xe7, 0xcf, 0x9d,
	0xf0, 0xb8, 0xf3, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x29, 0xef, 0x8c, 0x6c, 0xf4, 0x01, 0x00,
	0x00,
}
