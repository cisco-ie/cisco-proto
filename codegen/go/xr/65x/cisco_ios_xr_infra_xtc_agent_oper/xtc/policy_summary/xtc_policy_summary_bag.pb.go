/*
Copyright 2019 Cisco Systems

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: xtc_policy_summary_bag.proto

package cisco_ios_xr_infra_xtc_agent_oper_xtc_policy_summary

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type XtcPolicySummaryBag_KEYS struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *XtcPolicySummaryBag_KEYS) Reset()         { *m = XtcPolicySummaryBag_KEYS{} }
func (m *XtcPolicySummaryBag_KEYS) String() string { return proto.CompactTextString(m) }
func (*XtcPolicySummaryBag_KEYS) ProtoMessage()    {}
func (*XtcPolicySummaryBag_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_6e375c8a447b2a5b, []int{0}
}

func (m *XtcPolicySummaryBag_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_XtcPolicySummaryBag_KEYS.Unmarshal(m, b)
}
func (m *XtcPolicySummaryBag_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_XtcPolicySummaryBag_KEYS.Marshal(b, m, deterministic)
}
func (m *XtcPolicySummaryBag_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_XtcPolicySummaryBag_KEYS.Merge(m, src)
}
func (m *XtcPolicySummaryBag_KEYS) XXX_Size() int {
	return xxx_messageInfo_XtcPolicySummaryBag_KEYS.Size(m)
}
func (m *XtcPolicySummaryBag_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_XtcPolicySummaryBag_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_XtcPolicySummaryBag_KEYS proto.InternalMessageInfo

type XtcIpAddrType struct {
	AfName               string   `protobuf:"bytes,1,opt,name=af_name,json=afName,proto3" json:"af_name,omitempty"`
	Ipv4                 string   `protobuf:"bytes,2,opt,name=ipv4,proto3" json:"ipv4,omitempty"`
	Ipv6                 string   `protobuf:"bytes,3,opt,name=ipv6,proto3" json:"ipv6,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *XtcIpAddrType) Reset()         { *m = XtcIpAddrType{} }
func (m *XtcIpAddrType) String() string { return proto.CompactTextString(m) }
func (*XtcIpAddrType) ProtoMessage()    {}
func (*XtcIpAddrType) Descriptor() ([]byte, []int) {
	return fileDescriptor_6e375c8a447b2a5b, []int{1}
}

func (m *XtcIpAddrType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_XtcIpAddrType.Unmarshal(m, b)
}
func (m *XtcIpAddrType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_XtcIpAddrType.Marshal(b, m, deterministic)
}
func (m *XtcIpAddrType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_XtcIpAddrType.Merge(m, src)
}
func (m *XtcIpAddrType) XXX_Size() int {
	return xxx_messageInfo_XtcIpAddrType.Size(m)
}
func (m *XtcIpAddrType) XXX_DiscardUnknown() {
	xxx_messageInfo_XtcIpAddrType.DiscardUnknown(m)
}

var xxx_messageInfo_XtcIpAddrType proto.InternalMessageInfo

func (m *XtcIpAddrType) GetAfName() string {
	if m != nil {
		return m.AfName
	}
	return ""
}

func (m *XtcIpAddrType) GetIpv4() string {
	if m != nil {
		return m.Ipv4
	}
	return ""
}

func (m *XtcIpAddrType) GetIpv6() string {
	if m != nil {
		return m.Ipv6
	}
	return ""
}

type XtcPolicySummaryBag struct {
	Ipv4SourceAddress          *XtcIpAddrType `protobuf:"bytes,50,opt,name=ipv4_source_address,json=ipv4SourceAddress,proto3" json:"ipv4_source_address,omitempty"`
	ConfiguredTotalPolicyCount uint32         `protobuf:"varint,51,opt,name=configured_total_policy_count,json=configuredTotalPolicyCount,proto3" json:"configured_total_policy_count,omitempty"`
	ConfiguredUpPolicyCount    uint32         `protobuf:"varint,52,opt,name=configured_up_policy_count,json=configuredUpPolicyCount,proto3" json:"configured_up_policy_count,omitempty"`
	ConfiguredDownPolicyCount  uint32         `protobuf:"varint,53,opt,name=configured_down_policy_count,json=configuredDownPolicyCount,proto3" json:"configured_down_policy_count,omitempty"`
	XXX_NoUnkeyedLiteral       struct{}       `json:"-"`
	XXX_unrecognized           []byte         `json:"-"`
	XXX_sizecache              int32          `json:"-"`
}

func (m *XtcPolicySummaryBag) Reset()         { *m = XtcPolicySummaryBag{} }
func (m *XtcPolicySummaryBag) String() string { return proto.CompactTextString(m) }
func (*XtcPolicySummaryBag) ProtoMessage()    {}
func (*XtcPolicySummaryBag) Descriptor() ([]byte, []int) {
	return fileDescriptor_6e375c8a447b2a5b, []int{2}
}

func (m *XtcPolicySummaryBag) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_XtcPolicySummaryBag.Unmarshal(m, b)
}
func (m *XtcPolicySummaryBag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_XtcPolicySummaryBag.Marshal(b, m, deterministic)
}
func (m *XtcPolicySummaryBag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_XtcPolicySummaryBag.Merge(m, src)
}
func (m *XtcPolicySummaryBag) XXX_Size() int {
	return xxx_messageInfo_XtcPolicySummaryBag.Size(m)
}
func (m *XtcPolicySummaryBag) XXX_DiscardUnknown() {
	xxx_messageInfo_XtcPolicySummaryBag.DiscardUnknown(m)
}

var xxx_messageInfo_XtcPolicySummaryBag proto.InternalMessageInfo

func (m *XtcPolicySummaryBag) GetIpv4SourceAddress() *XtcIpAddrType {
	if m != nil {
		return m.Ipv4SourceAddress
	}
	return nil
}

func (m *XtcPolicySummaryBag) GetConfiguredTotalPolicyCount() uint32 {
	if m != nil {
		return m.ConfiguredTotalPolicyCount
	}
	return 0
}

func (m *XtcPolicySummaryBag) GetConfiguredUpPolicyCount() uint32 {
	if m != nil {
		return m.ConfiguredUpPolicyCount
	}
	return 0
}

func (m *XtcPolicySummaryBag) GetConfiguredDownPolicyCount() uint32 {
	if m != nil {
		return m.ConfiguredDownPolicyCount
	}
	return 0
}

func init() {
	proto.RegisterType((*XtcPolicySummaryBag_KEYS)(nil), "cisco_ios_xr_infra_xtc_agent_oper.xtc.policy_summary.xtc_policy_summary_bag_KEYS")
	proto.RegisterType((*XtcIpAddrType)(nil), "cisco_ios_xr_infra_xtc_agent_oper.xtc.policy_summary.xtc_ip_addr_type")
	proto.RegisterType((*XtcPolicySummaryBag)(nil), "cisco_ios_xr_infra_xtc_agent_oper.xtc.policy_summary.xtc_policy_summary_bag")
}

func init() { proto.RegisterFile("xtc_policy_summary_bag.proto", fileDescriptor_6e375c8a447b2a5b) }

var fileDescriptor_6e375c8a447b2a5b = []byte{
	// 304 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x92, 0x4d, 0x4b, 0x03, 0x31,
	0x10, 0x86, 0xd9, 0x2a, 0x15, 0x23, 0x82, 0x46, 0xb0, 0xab, 0xb6, 0x50, 0x7a, 0xea, 0x69, 0x0f,
	0x6d, 0xed, 0xc5, 0x83, 0x14, 0x3f, 0x2e, 0x82, 0x48, 0xab, 0x07, 0x4f, 0x43, 0x9a, 0xcd, 0x96,
	0x40, 0x37, 0x13, 0x92, 0x6c, 0x3f, 0x7e, 0xa6, 0xff, 0x48, 0x12, 0x3f, 0x76, 0x57, 0x7a, 0xf2,
	0xb6, 0xbc, 0xf3, 0x3c, 0xf3, 0xee, 0x40, 0x48, 0x7b, 0xe3, 0x38, 0x68, 0x5c, 0x4a, 0xbe, 0x05,
	0x5b, 0xe4, 0x39, 0x33, 0x5b, 0x98, 0xb3, 0x45, 0xa2, 0x0d, 0x3a, 0xa4, 0x23, 0x2e, 0x2d, 0x47,
	0x90, 0x68, 0x61, 0x63, 0x40, 0xaa, 0xcc, 0x30, 0xf0, 0x02, 0x5b, 0x08, 0xe5, 0x00, 0xb5, 0x30,
	0xc9, 0xc6, 0xf1, 0xa4, 0xee, 0xf7, 0x3a, 0xe4, 0x6a, 0xf7, 0x56, 0x78, 0x7a, 0x78, 0x9f, 0xf5,
	0x66, 0xe4, 0xc4, 0x8f, 0xa5, 0x06, 0x96, 0xa6, 0x06, 0xdc, 0x56, 0x0b, 0xda, 0x22, 0x07, 0x2c,
	0x03, 0xc5, 0x72, 0x11, 0x47, 0xdd, 0xa8, 0x7f, 0x38, 0x6d, 0xb2, 0xec, 0x99, 0xe5, 0x82, 0x52,
	0xb2, 0x2f, 0xf5, 0x6a, 0x14, 0x37, 0x42, 0x1a, 0xbe, 0xbf, 0xb3, 0x71, 0xbc, 0xf7, 0x9b, 0x8d,
	0x7b, 0x1f, 0x0d, 0x72, 0xbe, 0xbb, 0x94, 0xae, 0xc8, 0x99, 0xd7, 0xc0, 0x62, 0x61, 0xb8, 0x08,
	0xa5, 0xc2, 0xda, 0x78, 0xd0, 0x8d, 0xfa, 0x47, 0x83, 0xc7, 0xe4, 0x3f, 0x27, 0x26, 0x7f, 0x0f,
	0x98, 0x9e, 0xfa, 0x8a, 0x59, 0x68, 0x98, 0x7c, 0x15, 0xd0, 0x09, 0xe9, 0x70, 0x54, 0x99, 0x5c,
	0x14, 0x46, 0xa4, 0xe0, 0xd0, 0xb1, 0xe5, 0xcf, 0xef, 0x71, 0x2c, 0x94, 0x8b, 0x87, 0xdd, 0xa8,
	0x7f, 0x3c, 0xbd, 0x2c, 0xa1, 0x57, 0xcf, 0xbc, 0x04, 0xe4, 0xce, 0x13, 0xf4, 0x86, 0x54, 0xa6,
	0x50, 0xe8, 0xba, 0x3f, 0x0a, 0x7e, 0xab, 0x24, 0xde, 0x74, 0x55, 0xbe, 0x25, 0xed, 0x8a, 0x9c,
	0xe2, 0x5a, 0xd5, 0xf5, 0xeb, 0xa0, 0x5f, 0x94, 0xcc, 0x3d, 0xae, 0x55, 0x65, 0xc1, 0xbc, 0x19,
	0x1e, 0xc1, 0xf0, 0x33, 0x00, 0x00, 0xff, 0xff, 0xea, 0xf0, 0xb5, 0x2b, 0x24, 0x02, 0x00, 0x00,
}
