/*
Copyright 2019 Cisco Systems

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pcep_conn_bag.proto

package cisco_ios_xr_infra_xtc_agent_oper_pcc_peers_peer

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type PcepConnBag_KEYS struct {
	PeerAddr             string   `protobuf:"bytes,1,opt,name=peer_addr,json=peerAddr,proto3" json:"peer_addr,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PcepConnBag_KEYS) Reset()         { *m = PcepConnBag_KEYS{} }
func (m *PcepConnBag_KEYS) String() string { return proto.CompactTextString(m) }
func (*PcepConnBag_KEYS) ProtoMessage()    {}
func (*PcepConnBag_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ea57ddeb8482bb4, []int{0}
}

func (m *PcepConnBag_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PcepConnBag_KEYS.Unmarshal(m, b)
}
func (m *PcepConnBag_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PcepConnBag_KEYS.Marshal(b, m, deterministic)
}
func (m *PcepConnBag_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PcepConnBag_KEYS.Merge(m, src)
}
func (m *PcepConnBag_KEYS) XXX_Size() int {
	return xxx_messageInfo_PcepConnBag_KEYS.Size(m)
}
func (m *PcepConnBag_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_PcepConnBag_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_PcepConnBag_KEYS proto.InternalMessageInfo

func (m *PcepConnBag_KEYS) GetPeerAddr() string {
	if m != nil {
		return m.PeerAddr
	}
	return ""
}

type PcepSocketBag struct {
	Fd                   string   `protobuf:"bytes,1,opt,name=fd,proto3" json:"fd,omitempty"`
	Wnotify              bool     `protobuf:"varint,2,opt,name=wnotify,proto3" json:"wnotify,omitempty"`
	Rnotify              bool     `protobuf:"varint,3,opt,name=rnotify,proto3" json:"rnotify,omitempty"`
	Refcnt               uint32   `protobuf:"varint,4,opt,name=refcnt,proto3" json:"refcnt,omitempty"`
	Selected             bool     `protobuf:"varint,5,opt,name=selected,proto3" json:"selected,omitempty"`
	Owner                uint32   `protobuf:"varint,6,opt,name=owner,proto3" json:"owner,omitempty"`
	CsockaddrStr         string   `protobuf:"bytes,7,opt,name=csockaddr_str,json=csockaddrStr,proto3" json:"csockaddr_str,omitempty"`
	SsockaddrStr         string   `protobuf:"bytes,8,opt,name=ssockaddr_str,json=ssockaddrStr,proto3" json:"ssockaddr_str,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PcepSocketBag) Reset()         { *m = PcepSocketBag{} }
func (m *PcepSocketBag) String() string { return proto.CompactTextString(m) }
func (*PcepSocketBag) ProtoMessage()    {}
func (*PcepSocketBag) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ea57ddeb8482bb4, []int{1}
}

func (m *PcepSocketBag) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PcepSocketBag.Unmarshal(m, b)
}
func (m *PcepSocketBag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PcepSocketBag.Marshal(b, m, deterministic)
}
func (m *PcepSocketBag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PcepSocketBag.Merge(m, src)
}
func (m *PcepSocketBag) XXX_Size() int {
	return xxx_messageInfo_PcepSocketBag.Size(m)
}
func (m *PcepSocketBag) XXX_DiscardUnknown() {
	xxx_messageInfo_PcepSocketBag.DiscardUnknown(m)
}

var xxx_messageInfo_PcepSocketBag proto.InternalMessageInfo

func (m *PcepSocketBag) GetFd() string {
	if m != nil {
		return m.Fd
	}
	return ""
}

func (m *PcepSocketBag) GetWnotify() bool {
	if m != nil {
		return m.Wnotify
	}
	return false
}

func (m *PcepSocketBag) GetRnotify() bool {
	if m != nil {
		return m.Rnotify
	}
	return false
}

func (m *PcepSocketBag) GetRefcnt() uint32 {
	if m != nil {
		return m.Refcnt
	}
	return 0
}

func (m *PcepSocketBag) GetSelected() bool {
	if m != nil {
		return m.Selected
	}
	return false
}

func (m *PcepSocketBag) GetOwner() uint32 {
	if m != nil {
		return m.Owner
	}
	return 0
}

func (m *PcepSocketBag) GetCsockaddrStr() string {
	if m != nil {
		return m.CsockaddrStr
	}
	return ""
}

func (m *PcepSocketBag) GetSsockaddrStr() string {
	if m != nil {
		return m.SsockaddrStr
	}
	return ""
}

type PcepConnStatsBag struct {
	KaMsgRx              uint64   `protobuf:"varint,1,opt,name=ka_msg_rx,json=kaMsgRx,proto3" json:"ka_msg_rx,omitempty"`
	KaMsgFailRx          uint64   `protobuf:"varint,2,opt,name=ka_msg_fail_rx,json=kaMsgFailRx,proto3" json:"ka_msg_fail_rx,omitempty"`
	KaMsgTx              uint64   `protobuf:"varint,3,opt,name=ka_msg_tx,json=kaMsgTx,proto3" json:"ka_msg_tx,omitempty"`
	KaMsgFailTx          uint64   `protobuf:"varint,4,opt,name=ka_msg_fail_tx,json=kaMsgFailTx,proto3" json:"ka_msg_fail_tx,omitempty"`
	PcreqMsgRx           uint64   `protobuf:"varint,5,opt,name=pcreq_msg_rx,json=pcreqMsgRx,proto3" json:"pcreq_msg_rx,omitempty"`
	PcreqMsgFailRx       uint64   `protobuf:"varint,6,opt,name=pcreq_msg_fail_rx,json=pcreqMsgFailRx,proto3" json:"pcreq_msg_fail_rx,omitempty"`
	PcreqMsgTx           uint64   `protobuf:"varint,7,opt,name=pcreq_msg_tx,json=pcreqMsgTx,proto3" json:"pcreq_msg_tx,omitempty"`
	PcreqMsgFailTx       uint64   `protobuf:"varint,8,opt,name=pcreq_msg_fail_tx,json=pcreqMsgFailTx,proto3" json:"pcreq_msg_fail_tx,omitempty"`
	PcrepMsgRx           uint64   `protobuf:"varint,9,opt,name=pcrep_msg_rx,json=pcrepMsgRx,proto3" json:"pcrep_msg_rx,omitempty"`
	PcrepMsgFailRx       uint64   `protobuf:"varint,10,opt,name=pcrep_msg_fail_rx,json=pcrepMsgFailRx,proto3" json:"pcrep_msg_fail_rx,omitempty"`
	PcrepMsgTx           uint64   `protobuf:"varint,11,opt,name=pcrep_msg_tx,json=pcrepMsgTx,proto3" json:"pcrep_msg_tx,omitempty"`
	PcrepMsgFailTx       uint64   `protobuf:"varint,12,opt,name=pcrep_msg_fail_tx,json=pcrepMsgFailTx,proto3" json:"pcrep_msg_fail_tx,omitempty"`
	PcrptMsgRx           uint64   `protobuf:"varint,13,opt,name=pcrpt_msg_rx,json=pcrptMsgRx,proto3" json:"pcrpt_msg_rx,omitempty"`
	PcrptMsgFailRx       uint64   `protobuf:"varint,14,opt,name=pcrpt_msg_fail_rx,json=pcrptMsgFailRx,proto3" json:"pcrpt_msg_fail_rx,omitempty"`
	PcrptMsgTx           uint64   `protobuf:"varint,15,opt,name=pcrpt_msg_tx,json=pcrptMsgTx,proto3" json:"pcrpt_msg_tx,omitempty"`
	PcrptMsgFailTx       uint64   `protobuf:"varint,16,opt,name=pcrpt_msg_fail_tx,json=pcrptMsgFailTx,proto3" json:"pcrpt_msg_fail_tx,omitempty"`
	PcupdMsgRx           uint64   `protobuf:"varint,17,opt,name=pcupd_msg_rx,json=pcupdMsgRx,proto3" json:"pcupd_msg_rx,omitempty"`
	PcupdMsgFailRx       uint64   `protobuf:"varint,18,opt,name=pcupd_msg_fail_rx,json=pcupdMsgFailRx,proto3" json:"pcupd_msg_fail_rx,omitempty"`
	PcupdMsgTx           uint64   `protobuf:"varint,19,opt,name=pcupd_msg_tx,json=pcupdMsgTx,proto3" json:"pcupd_msg_tx,omitempty"`
	PcupdMsgFailTx       uint64   `protobuf:"varint,20,opt,name=pcupd_msg_fail_tx,json=pcupdMsgFailTx,proto3" json:"pcupd_msg_fail_tx,omitempty"`
	OpenMsgRx            uint64   `protobuf:"varint,21,opt,name=open_msg_rx,json=openMsgRx,proto3" json:"open_msg_rx,omitempty"`
	OpenMsgFailRx        uint64   `protobuf:"varint,22,opt,name=open_msg_fail_rx,json=openMsgFailRx,proto3" json:"open_msg_fail_rx,omitempty"`
	OpenMsgTx            uint64   `protobuf:"varint,23,opt,name=open_msg_tx,json=openMsgTx,proto3" json:"open_msg_tx,omitempty"`
	OpenMsgFailTx        uint64   `protobuf:"varint,24,opt,name=open_msg_fail_tx,json=openMsgFailTx,proto3" json:"open_msg_fail_tx,omitempty"`
	PcerrMsgRx           uint64   `protobuf:"varint,25,opt,name=pcerr_msg_rx,json=pcerrMsgRx,proto3" json:"pcerr_msg_rx,omitempty"`
	PcerrMsgFailRx       uint64   `protobuf:"varint,26,opt,name=pcerr_msg_fail_rx,json=pcerrMsgFailRx,proto3" json:"pcerr_msg_fail_rx,omitempty"`
	PcerrMsgTx           uint64   `protobuf:"varint,27,opt,name=pcerr_msg_tx,json=pcerrMsgTx,proto3" json:"pcerr_msg_tx,omitempty"`
	PcerrMsgFailTx       uint64   `protobuf:"varint,28,opt,name=pcerr_msg_fail_tx,json=pcerrMsgFailTx,proto3" json:"pcerr_msg_fail_tx,omitempty"`
	PcntfMsgRx           uint64   `protobuf:"varint,29,opt,name=pcntf_msg_rx,json=pcntfMsgRx,proto3" json:"pcntf_msg_rx,omitempty"`
	PcntfMsgFailRx       uint64   `protobuf:"varint,30,opt,name=pcntf_msg_fail_rx,json=pcntfMsgFailRx,proto3" json:"pcntf_msg_fail_rx,omitempty"`
	PcntfMsgTx           uint64   `protobuf:"varint,31,opt,name=pcntf_msg_tx,json=pcntfMsgTx,proto3" json:"pcntf_msg_tx,omitempty"`
	PcntfMsgFailTx       uint64   `protobuf:"varint,32,opt,name=pcntf_msg_fail_tx,json=pcntfMsgFailTx,proto3" json:"pcntf_msg_fail_tx,omitempty"`
	PceEosMsgTx          uint64   `protobuf:"varint,33,opt,name=pce_eos_msg_tx,json=pceEosMsgTx,proto3" json:"pce_eos_msg_tx,omitempty"`
	PceEosMsgFailTx      uint64   `protobuf:"varint,34,opt,name=pce_eos_msg_fail_tx,json=pceEosMsgFailTx,proto3" json:"pce_eos_msg_fail_tx,omitempty"`
	CloseMsgRx           uint64   `protobuf:"varint,35,opt,name=close_msg_rx,json=closeMsgRx,proto3" json:"close_msg_rx,omitempty"`
	CloseMsgFailRx       uint64   `protobuf:"varint,36,opt,name=close_msg_fail_rx,json=closeMsgFailRx,proto3" json:"close_msg_fail_rx,omitempty"`
	CloseMsgTx           uint64   `protobuf:"varint,37,opt,name=close_msg_tx,json=closeMsgTx,proto3" json:"close_msg_tx,omitempty"`
	CloseMsgFailTx       uint64   `protobuf:"varint,38,opt,name=close_msg_fail_tx,json=closeMsgFailTx,proto3" json:"close_msg_fail_tx,omitempty"`
	UnexpectedMsgRx      uint64   `protobuf:"varint,39,opt,name=unexpected_msg_rx,json=unexpectedMsgRx,proto3" json:"unexpected_msg_rx,omitempty"`
	CorruptedMsgRx       uint64   `protobuf:"varint,40,opt,name=corrupted_msg_rx,json=corruptedMsgRx,proto3" json:"corrupted_msg_rx,omitempty"`
	RecordedReplyTime    []uint64 `protobuf:"varint,41,rep,packed,name=recorded_reply_time,json=recordedReplyTime,proto3" json:"recorded_reply_time,omitempty"`
	ReplyTimeIndex       uint32   `protobuf:"varint,42,opt,name=reply_time_index,json=replyTimeIndex,proto3" json:"reply_time_index,omitempty"`
	MinimumReplyTime     uint64   `protobuf:"varint,43,opt,name=minimum_reply_time,json=minimumReplyTime,proto3" json:"minimum_reply_time,omitempty"`
	MaximumReplyTime     uint64   `protobuf:"varint,44,opt,name=maximum_reply_time,json=maximumReplyTime,proto3" json:"maximum_reply_time,omitempty"`
	RequestsTimedOut     uint64   `protobuf:"varint,45,opt,name=requests_timed_out,json=requestsTimedOut,proto3" json:"requests_timed_out,omitempty"`
	LastPcerrTypeRx      uint32   `protobuf:"varint,46,opt,name=last_pcerr_type_rx,json=lastPcerrTypeRx,proto3" json:"last_pcerr_type_rx,omitempty"`
	LastPcerrValRx       uint32   `protobuf:"varint,47,opt,name=last_pcerr_val_rx,json=lastPcerrValRx,proto3" json:"last_pcerr_val_rx,omitempty"`
	LastPcerrRxTs        uint64   `protobuf:"varint,48,opt,name=last_pcerr_rx_ts,json=lastPcerrRxTs,proto3" json:"last_pcerr_rx_ts,omitempty"`
	LastPcerrTypeTx      uint32   `protobuf:"varint,49,opt,name=last_pcerr_type_tx,json=lastPcerrTypeTx,proto3" json:"last_pcerr_type_tx,omitempty"`
	LastPcerrValTx       uint32   `protobuf:"varint,50,opt,name=last_pcerr_val_tx,json=lastPcerrValTx,proto3" json:"last_pcerr_val_tx,omitempty"`
	LastPcerrTxTs        uint64   `protobuf:"varint,51,opt,name=last_pcerr_tx_ts,json=lastPcerrTxTs,proto3" json:"last_pcerr_tx_ts,omitempty"`
	PcinitiateMsgRx      uint64   `protobuf:"varint,52,opt,name=pcinitiate_msg_rx,json=pcinitiateMsgRx,proto3" json:"pcinitiate_msg_rx,omitempty"`
	PcinitiateMsgFailRx  uint64   `protobuf:"varint,53,opt,name=pcinitiate_msg_fail_rx,json=pcinitiateMsgFailRx,proto3" json:"pcinitiate_msg_fail_rx,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PcepConnStatsBag) Reset()         { *m = PcepConnStatsBag{} }
func (m *PcepConnStatsBag) String() string { return proto.CompactTextString(m) }
func (*PcepConnStatsBag) ProtoMessage()    {}
func (*PcepConnStatsBag) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ea57ddeb8482bb4, []int{2}
}

func (m *PcepConnStatsBag) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PcepConnStatsBag.Unmarshal(m, b)
}
func (m *PcepConnStatsBag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PcepConnStatsBag.Marshal(b, m, deterministic)
}
func (m *PcepConnStatsBag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PcepConnStatsBag.Merge(m, src)
}
func (m *PcepConnStatsBag) XXX_Size() int {
	return xxx_messageInfo_PcepConnStatsBag.Size(m)
}
func (m *PcepConnStatsBag) XXX_DiscardUnknown() {
	xxx_messageInfo_PcepConnStatsBag.DiscardUnknown(m)
}

var xxx_messageInfo_PcepConnStatsBag proto.InternalMessageInfo

func (m *PcepConnStatsBag) GetKaMsgRx() uint64 {
	if m != nil {
		return m.KaMsgRx
	}
	return 0
}

func (m *PcepConnStatsBag) GetKaMsgFailRx() uint64 {
	if m != nil {
		return m.KaMsgFailRx
	}
	return 0
}

func (m *PcepConnStatsBag) GetKaMsgTx() uint64 {
	if m != nil {
		return m.KaMsgTx
	}
	return 0
}

func (m *PcepConnStatsBag) GetKaMsgFailTx() uint64 {
	if m != nil {
		return m.KaMsgFailTx
	}
	return 0
}

func (m *PcepConnStatsBag) GetPcreqMsgRx() uint64 {
	if m != nil {
		return m.PcreqMsgRx
	}
	return 0
}

func (m *PcepConnStatsBag) GetPcreqMsgFailRx() uint64 {
	if m != nil {
		return m.PcreqMsgFailRx
	}
	return 0
}

func (m *PcepConnStatsBag) GetPcreqMsgTx() uint64 {
	if m != nil {
		return m.PcreqMsgTx
	}
	return 0
}

func (m *PcepConnStatsBag) GetPcreqMsgFailTx() uint64 {
	if m != nil {
		return m.PcreqMsgFailTx
	}
	return 0
}

func (m *PcepConnStatsBag) GetPcrepMsgRx() uint64 {
	if m != nil {
		return m.PcrepMsgRx
	}
	return 0
}

func (m *PcepConnStatsBag) GetPcrepMsgFailRx() uint64 {
	if m != nil {
		return m.PcrepMsgFailRx
	}
	return 0
}

func (m *PcepConnStatsBag) GetPcrepMsgTx() uint64 {
	if m != nil {
		return m.PcrepMsgTx
	}
	return 0
}

func (m *PcepConnStatsBag) GetPcrepMsgFailTx() uint64 {
	if m != nil {
		return m.PcrepMsgFailTx
	}
	return 0
}

func (m *PcepConnStatsBag) GetPcrptMsgRx() uint64 {
	if m != nil {
		return m.PcrptMsgRx
	}
	return 0
}

func (m *PcepConnStatsBag) GetPcrptMsgFailRx() uint64 {
	if m != nil {
		return m.PcrptMsgFailRx
	}
	return 0
}

func (m *PcepConnStatsBag) GetPcrptMsgTx() uint64 {
	if m != nil {
		return m.PcrptMsgTx
	}
	return 0
}

func (m *PcepConnStatsBag) GetPcrptMsgFailTx() uint64 {
	if m != nil {
		return m.PcrptMsgFailTx
	}
	return 0
}

func (m *PcepConnStatsBag) GetPcupdMsgRx() uint64 {
	if m != nil {
		return m.PcupdMsgRx
	}
	return 0
}

func (m *PcepConnStatsBag) GetPcupdMsgFailRx() uint64 {
	if m != nil {
		return m.PcupdMsgFailRx
	}
	return 0
}

func (m *PcepConnStatsBag) GetPcupdMsgTx() uint64 {
	if m != nil {
		return m.PcupdMsgTx
	}
	return 0
}

func (m *PcepConnStatsBag) GetPcupdMsgFailTx() uint64 {
	if m != nil {
		return m.PcupdMsgFailTx
	}
	return 0
}

func (m *PcepConnStatsBag) GetOpenMsgRx() uint64 {
	if m != nil {
		return m.OpenMsgRx
	}
	return 0
}

func (m *PcepConnStatsBag) GetOpenMsgFailRx() uint64 {
	if m != nil {
		return m.OpenMsgFailRx
	}
	return 0
}

func (m *PcepConnStatsBag) GetOpenMsgTx() uint64 {
	if m != nil {
		return m.OpenMsgTx
	}
	return 0
}

func (m *PcepConnStatsBag) GetOpenMsgFailTx() uint64 {
	if m != nil {
		return m.OpenMsgFailTx
	}
	return 0
}

func (m *PcepConnStatsBag) GetPcerrMsgRx() uint64 {
	if m != nil {
		return m.PcerrMsgRx
	}
	return 0
}

func (m *PcepConnStatsBag) GetPcerrMsgFailRx() uint64 {
	if m != nil {
		return m.PcerrMsgFailRx
	}
	return 0
}

func (m *PcepConnStatsBag) GetPcerrMsgTx() uint64 {
	if m != nil {
		return m.PcerrMsgTx
	}
	return 0
}

func (m *PcepConnStatsBag) GetPcerrMsgFailTx() uint64 {
	if m != nil {
		return m.PcerrMsgFailTx
	}
	return 0
}

func (m *PcepConnStatsBag) GetPcntfMsgRx() uint64 {
	if m != nil {
		return m.PcntfMsgRx
	}
	return 0
}

func (m *PcepConnStatsBag) GetPcntfMsgFailRx() uint64 {
	if m != nil {
		return m.PcntfMsgFailRx
	}
	return 0
}

func (m *PcepConnStatsBag) GetPcntfMsgTx() uint64 {
	if m != nil {
		return m.PcntfMsgTx
	}
	return 0
}

func (m *PcepConnStatsBag) GetPcntfMsgFailTx() uint64 {
	if m != nil {
		return m.PcntfMsgFailTx
	}
	return 0
}

func (m *PcepConnStatsBag) GetPceEosMsgTx() uint64 {
	if m != nil {
		return m.PceEosMsgTx
	}
	return 0
}

func (m *PcepConnStatsBag) GetPceEosMsgFailTx() uint64 {
	if m != nil {
		return m.PceEosMsgFailTx
	}
	return 0
}

func (m *PcepConnStatsBag) GetCloseMsgRx() uint64 {
	if m != nil {
		return m.CloseMsgRx
	}
	return 0
}

func (m *PcepConnStatsBag) GetCloseMsgFailRx() uint64 {
	if m != nil {
		return m.CloseMsgFailRx
	}
	return 0
}

func (m *PcepConnStatsBag) GetCloseMsgTx() uint64 {
	if m != nil {
		return m.CloseMsgTx
	}
	return 0
}

func (m *PcepConnStatsBag) GetCloseMsgFailTx() uint64 {
	if m != nil {
		return m.CloseMsgFailTx
	}
	return 0
}

func (m *PcepConnStatsBag) GetUnexpectedMsgRx() uint64 {
	if m != nil {
		return m.UnexpectedMsgRx
	}
	return 0
}

func (m *PcepConnStatsBag) GetCorruptedMsgRx() uint64 {
	if m != nil {
		return m.CorruptedMsgRx
	}
	return 0
}

func (m *PcepConnStatsBag) GetRecordedReplyTime() []uint64 {
	if m != nil {
		return m.RecordedReplyTime
	}
	return nil
}

func (m *PcepConnStatsBag) GetReplyTimeIndex() uint32 {
	if m != nil {
		return m.ReplyTimeIndex
	}
	return 0
}

func (m *PcepConnStatsBag) GetMinimumReplyTime() uint64 {
	if m != nil {
		return m.MinimumReplyTime
	}
	return 0
}

func (m *PcepConnStatsBag) GetMaximumReplyTime() uint64 {
	if m != nil {
		return m.MaximumReplyTime
	}
	return 0
}

func (m *PcepConnStatsBag) GetRequestsTimedOut() uint64 {
	if m != nil {
		return m.RequestsTimedOut
	}
	return 0
}

func (m *PcepConnStatsBag) GetLastPcerrTypeRx() uint32 {
	if m != nil {
		return m.LastPcerrTypeRx
	}
	return 0
}

func (m *PcepConnStatsBag) GetLastPcerrValRx() uint32 {
	if m != nil {
		return m.LastPcerrValRx
	}
	return 0
}

func (m *PcepConnStatsBag) GetLastPcerrRxTs() uint64 {
	if m != nil {
		return m.LastPcerrRxTs
	}
	return 0
}

func (m *PcepConnStatsBag) GetLastPcerrTypeTx() uint32 {
	if m != nil {
		return m.LastPcerrTypeTx
	}
	return 0
}

func (m *PcepConnStatsBag) GetLastPcerrValTx() uint32 {
	if m != nil {
		return m.LastPcerrValTx
	}
	return 0
}

func (m *PcepConnStatsBag) GetLastPcerrTxTs() uint64 {
	if m != nil {
		return m.LastPcerrTxTs
	}
	return 0
}

func (m *PcepConnStatsBag) GetPcinitiateMsgRx() uint64 {
	if m != nil {
		return m.PcinitiateMsgRx
	}
	return 0
}

func (m *PcepConnStatsBag) GetPcinitiateMsgFailRx() uint64 {
	if m != nil {
		return m.PcinitiateMsgFailRx
	}
	return 0
}

type PcepConnBag struct {
	Handle                 uint32            `protobuf:"varint,50,opt,name=handle,proto3" json:"handle,omitempty"`
	StateStr               string            `protobuf:"bytes,51,opt,name=state_str,json=stateStr,proto3" json:"state_str,omitempty"`
	LocalOk                bool              `protobuf:"varint,52,opt,name=local_ok,json=localOk,proto3" json:"local_ok,omitempty"`
	RemoteOk               bool              `protobuf:"varint,53,opt,name=remote_ok,json=remoteOk,proto3" json:"remote_ok,omitempty"`
	OpenRetry              uint32            `protobuf:"varint,54,opt,name=open_retry,json=openRetry,proto3" json:"open_retry,omitempty"`
	RefCnt                 uint32            `protobuf:"varint,55,opt,name=ref_cnt,json=refCnt,proto3" json:"ref_cnt,omitempty"`
	RxStateStr             string            `protobuf:"bytes,56,opt,name=rx_state_str,json=rxStateStr,proto3" json:"rx_state_str,omitempty"`
	HolddownCounter        uint32            `protobuf:"varint,57,opt,name=holddown_counter,json=holddownCounter,proto3" json:"holddown_counter,omitempty"`
	SocketInfo             *PcepSocketBag    `protobuf:"bytes,58,opt,name=socket_info,json=socketInfo,proto3" json:"socket_info,omitempty"`
	PcepUpTs               uint64            `protobuf:"varint,59,opt,name=pcep_up_ts,json=pcepUpTs,proto3" json:"pcep_up_ts,omitempty"`
	Precedence             uint32            `protobuf:"varint,60,opt,name=precedence,proto3" json:"precedence,omitempty"`
	KaIntervalLocal        uint32            `protobuf:"varint,61,opt,name=ka_interval_local,json=kaIntervalLocal,proto3" json:"ka_interval_local,omitempty"`
	KaIntervalRemote       uint32            `protobuf:"varint,62,opt,name=ka_interval_remote,json=kaIntervalRemote,proto3" json:"ka_interval_remote,omitempty"`
	DeadIntervalLocal      uint32            `protobuf:"varint,63,opt,name=dead_interval_local,json=deadIntervalLocal,proto3" json:"dead_interval_local,omitempty"`
	DeadIntervalRemote     uint32            `protobuf:"varint,64,opt,name=dead_interval_remote,json=deadIntervalRemote,proto3" json:"dead_interval_remote,omitempty"`
	PcepSessionIdLocal     uint32            `protobuf:"varint,65,opt,name=pcep_session_id_local,json=pcepSessionIdLocal,proto3" json:"pcep_session_id_local,omitempty"`
	PcepSessionIdRemote    uint32            `protobuf:"varint,66,opt,name=pcep_session_id_remote,json=pcepSessionIdRemote,proto3" json:"pcep_session_id_remote,omitempty"`
	PcepServerIpv4Addr     string            `protobuf:"bytes,67,opt,name=pcep_server_ipv4_addr,json=pcepServerIpv4Addr,proto3" json:"pcep_server_ipv4_addr,omitempty"`
	PcepClientIpv4Addr     string            `protobuf:"bytes,68,opt,name=pcep_client_ipv4_addr,json=pcepClientIpv4Addr,proto3" json:"pcep_client_ipv4_addr,omitempty"`
	IsStatefulLocal        bool              `protobuf:"varint,69,opt,name=is_stateful_local,json=isStatefulLocal,proto3" json:"is_stateful_local,omitempty"`
	IsStatefulRemote       bool              `protobuf:"varint,70,opt,name=is_stateful_remote,json=isStatefulRemote,proto3" json:"is_stateful_remote,omitempty"`
	IsStatefulUFlagLocal   bool              `protobuf:"varint,71,opt,name=is_stateful_u_flag_local,json=isStatefulUFlagLocal,proto3" json:"is_stateful_u_flag_local,omitempty"`
	IsStatefulUFlagRemote  bool              `protobuf:"varint,72,opt,name=is_stateful_u_flag_remote,json=isStatefulUFlagRemote,proto3" json:"is_stateful_u_flag_remote,omitempty"`
	IsSegmentRoutingLocal  bool              `protobuf:"varint,73,opt,name=is_segment_routing_local,json=isSegmentRoutingLocal,proto3" json:"is_segment_routing_local,omitempty"`
	IsSegmentRoutingRemote bool              `protobuf:"varint,74,opt,name=is_segment_routing_remote,json=isSegmentRoutingRemote,proto3" json:"is_segment_routing_remote,omitempty"`
	IsInitiateLocal        bool              `protobuf:"varint,75,opt,name=is_initiate_local,json=isInitiateLocal,proto3" json:"is_initiate_local,omitempty"`
	IsInitiateRemote       bool              `protobuf:"varint,76,opt,name=is_initiate_remote,json=isInitiateRemote,proto3" json:"is_initiate_remote,omitempty"`
	IsBestPce              bool              `protobuf:"varint,77,opt,name=is_best_pce,json=isBestPce,proto3" json:"is_best_pce,omitempty"`
	SrMsdLocal             uint32            `protobuf:"varint,78,opt,name=sr_msd_local,json=srMsdLocal,proto3" json:"sr_msd_local,omitempty"`
	SrMsdRemote            uint32            `protobuf:"varint,79,opt,name=sr_msd_remote,json=srMsdRemote,proto3" json:"sr_msd_remote,omitempty"`
	Stats                  *PcepConnStatsBag `protobuf:"bytes,80,opt,name=stats,proto3" json:"stats,omitempty"`
	XXX_NoUnkeyedLiteral   struct{}          `json:"-"`
	XXX_unrecognized       []byte            `json:"-"`
	XXX_sizecache          int32             `json:"-"`
}

func (m *PcepConnBag) Reset()         { *m = PcepConnBag{} }
func (m *PcepConnBag) String() string { return proto.CompactTextString(m) }
func (*PcepConnBag) ProtoMessage()    {}
func (*PcepConnBag) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ea57ddeb8482bb4, []int{3}
}

func (m *PcepConnBag) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PcepConnBag.Unmarshal(m, b)
}
func (m *PcepConnBag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PcepConnBag.Marshal(b, m, deterministic)
}
func (m *PcepConnBag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PcepConnBag.Merge(m, src)
}
func (m *PcepConnBag) XXX_Size() int {
	return xxx_messageInfo_PcepConnBag.Size(m)
}
func (m *PcepConnBag) XXX_DiscardUnknown() {
	xxx_messageInfo_PcepConnBag.DiscardUnknown(m)
}

var xxx_messageInfo_PcepConnBag proto.InternalMessageInfo

func (m *PcepConnBag) GetHandle() uint32 {
	if m != nil {
		return m.Handle
	}
	return 0
}

func (m *PcepConnBag) GetStateStr() string {
	if m != nil {
		return m.StateStr
	}
	return ""
}

func (m *PcepConnBag) GetLocalOk() bool {
	if m != nil {
		return m.LocalOk
	}
	return false
}

func (m *PcepConnBag) GetRemoteOk() bool {
	if m != nil {
		return m.RemoteOk
	}
	return false
}

func (m *PcepConnBag) GetOpenRetry() uint32 {
	if m != nil {
		return m.OpenRetry
	}
	return 0
}

func (m *PcepConnBag) GetRefCnt() uint32 {
	if m != nil {
		return m.RefCnt
	}
	return 0
}

func (m *PcepConnBag) GetRxStateStr() string {
	if m != nil {
		return m.RxStateStr
	}
	return ""
}

func (m *PcepConnBag) GetHolddownCounter() uint32 {
	if m != nil {
		return m.HolddownCounter
	}
	return 0
}

func (m *PcepConnBag) GetSocketInfo() *PcepSocketBag {
	if m != nil {
		return m.SocketInfo
	}
	return nil
}

func (m *PcepConnBag) GetPcepUpTs() uint64 {
	if m != nil {
		return m.PcepUpTs
	}
	return 0
}

func (m *PcepConnBag) GetPrecedence() uint32 {
	if m != nil {
		return m.Precedence
	}
	return 0
}

func (m *PcepConnBag) GetKaIntervalLocal() uint32 {
	if m != nil {
		return m.KaIntervalLocal
	}
	return 0
}

func (m *PcepConnBag) GetKaIntervalRemote() uint32 {
	if m != nil {
		return m.KaIntervalRemote
	}
	return 0
}

func (m *PcepConnBag) GetDeadIntervalLocal() uint32 {
	if m != nil {
		return m.DeadIntervalLocal
	}
	return 0
}

func (m *PcepConnBag) GetDeadIntervalRemote() uint32 {
	if m != nil {
		return m.DeadIntervalRemote
	}
	return 0
}

func (m *PcepConnBag) GetPcepSessionIdLocal() uint32 {
	if m != nil {
		return m.PcepSessionIdLocal
	}
	return 0
}

func (m *PcepConnBag) GetPcepSessionIdRemote() uint32 {
	if m != nil {
		return m.PcepSessionIdRemote
	}
	return 0
}

func (m *PcepConnBag) GetPcepServerIpv4Addr() string {
	if m != nil {
		return m.PcepServerIpv4Addr
	}
	return ""
}

func (m *PcepConnBag) GetPcepClientIpv4Addr() string {
	if m != nil {
		return m.PcepClientIpv4Addr
	}
	return ""
}

func (m *PcepConnBag) GetIsStatefulLocal() bool {
	if m != nil {
		return m.IsStatefulLocal
	}
	return false
}

func (m *PcepConnBag) GetIsStatefulRemote() bool {
	if m != nil {
		return m.IsStatefulRemote
	}
	return false
}

func (m *PcepConnBag) GetIsStatefulUFlagLocal() bool {
	if m != nil {
		return m.IsStatefulUFlagLocal
	}
	return false
}

func (m *PcepConnBag) GetIsStatefulUFlagRemote() bool {
	if m != nil {
		return m.IsStatefulUFlagRemote
	}
	return false
}

func (m *PcepConnBag) GetIsSegmentRoutingLocal() bool {
	if m != nil {
		return m.IsSegmentRoutingLocal
	}
	return false
}

func (m *PcepConnBag) GetIsSegmentRoutingRemote() bool {
	if m != nil {
		return m.IsSegmentRoutingRemote
	}
	return false
}

func (m *PcepConnBag) GetIsInitiateLocal() bool {
	if m != nil {
		return m.IsInitiateLocal
	}
	return false
}

func (m *PcepConnBag) GetIsInitiateRemote() bool {
	if m != nil {
		return m.IsInitiateRemote
	}
	return false
}

func (m *PcepConnBag) GetIsBestPce() bool {
	if m != nil {
		return m.IsBestPce
	}
	return false
}

func (m *PcepConnBag) GetSrMsdLocal() uint32 {
	if m != nil {
		return m.SrMsdLocal
	}
	return 0
}

func (m *PcepConnBag) GetSrMsdRemote() uint32 {
	if m != nil {
		return m.SrMsdRemote
	}
	return 0
}

func (m *PcepConnBag) GetStats() *PcepConnStatsBag {
	if m != nil {
		return m.Stats
	}
	return nil
}

func init() {
	proto.RegisterType((*PcepConnBag_KEYS)(nil), "cisco_ios_xr_infra_xtc_agent_oper.pcc.peers.peer.pcep_conn_bag_KEYS")
	proto.RegisterType((*PcepSocketBag)(nil), "cisco_ios_xr_infra_xtc_agent_oper.pcc.peers.peer.pcep_socket_bag")
	proto.RegisterType((*PcepConnStatsBag)(nil), "cisco_ios_xr_infra_xtc_agent_oper.pcc.peers.peer.pcep_conn_stats_bag")
	proto.RegisterType((*PcepConnBag)(nil), "cisco_ios_xr_infra_xtc_agent_oper.pcc.peers.peer.pcep_conn_bag")
}

func init() { proto.RegisterFile("pcep_conn_bag.proto", fileDescriptor_6ea57ddeb8482bb4) }

var fileDescriptor_6ea57ddeb8482bb4 = []byte{
	// 1453 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x97, 0xeb, 0x72, 0xdb, 0xb6,
	0x12, 0xc7, 0xc7, 0x4e, 0x6c, 0xcb, 0x50, 0x6c, 0xcb, 0xb4, 0xe3, 0x20, 0x37, 0x1f, 0x1d, 0xe7,
	0x9c, 0x46, 0x71, 0x52, 0x35, 0x89, 0x73, 0xed, 0x3d, 0x71, 0x9d, 0x56, 0x4d, 0x52, 0x67, 0x68,
	0xa6, 0x33, 0x9d, 0x7e, 0xc0, 0xd0, 0x24, 0xa4, 0x70, 0x44, 0x91, 0x08, 0x00, 0x3a, 0xf0, 0x2b,
	0xf4, 0xe5, 0xfa, 0x1c, 0x7d, 0x8b, 0x0e, 0x16, 0x00, 0x2f, 0x92, 0xbe, 0xb4, 0x5f, 0x32, 0xe1,
	0xee, 0x6f, 0xff, 0xfb, 0xc7, 0x12, 0x84, 0x21, 0xb4, 0xc5, 0x22, 0xca, 0x48, 0x94, 0x67, 0x19,
	0x39, 0x0d, 0x47, 0x7d, 0xc6, 0x73, 0x99, 0x7b, 0xf7, 0xa3, 0x44, 0x44, 0x39, 0x49, 0x72, 0x41,
	0x14, 0x27, 0x49, 0x36, 0xe4, 0x21, 0x51, 0x32, 0x22, 0xe1, 0x88, 0x66, 0x92, 0xe4, 0x8c, 0xf2,
	0x3e, 0x8b, 0xa2, 0x3e, 0xa3, 0x94, 0x0b, 0xf8, 0x77, 0xef, 0x01, 0xf2, 0x1a, 0x42, 0xe4, 0xf5,
	0xd1, 0x6f, 0x27, 0xde, 0x75, 0xb4, 0xaa, 0xb3, 0x24, 0x8c, 0x63, 0x8e, 0x17, 0xba, 0x0b, 0xbd,
	0x55, 0xbf, 0xa5, 0x03, 0x2f, 0xe2, 0x98, 0xef, 0xfd, 0xb5, 0x80, 0x36, 0xa0, 0x46, 0xe4, 0xd1,
	0x98, 0x4a, 0x5d, 0xe5, 0xad, 0xa3, 0xc5, 0x61, 0x6c, 0xc9, 0xc5, 0x61, 0xec, 0x61, 0xb4, 0xf2,
	0x29, 0xcb, 0x65, 0x32, 0x3c, 0xc7, 0x8b, 0xdd, 0x85, 0x5e, 0xcb, 0x77, 0x8f, 0x3a, 0xc3, 0x6d,
	0xe6, 0x82, 0xc9, 0xd8, 0x47, 0x6f, 0x07, 0x2d, 0x73, 0x3a, 0x8c, 0x32, 0x89, 0x2f, 0x76, 0x17,
	0x7a, 0x6b, 0xbe, 0x7d, 0xf2, 0xae, 0xa1, 0x96, 0xa0, 0x29, 0x8d, 0x24, 0x8d, 0xf1, 0x12, 0x94,
	0x94, 0xcf, 0xde, 0x36, 0x5a, 0xca, 0x3f, 0x65, 0x94, 0xe3, 0x65, 0x28, 0x31, 0x0f, 0xde, 0x2d,
	0xb4, 0x16, 0x69, 0x73, 0xda, 0x3e, 0x11, 0x92, 0xe3, 0x15, 0x30, 0x76, 0xa9, 0x0c, 0x9e, 0x48,
	0x80, 0x44, 0x03, 0x6a, 0x19, 0x48, 0xd4, 0xa0, 0xbd, 0x3f, 0x3b, 0xf5, 0x41, 0x0b, 0x19, 0x4a,
	0x01, 0xeb, 0xbd, 0x86, 0x56, 0xc7, 0x21, 0x99, 0x88, 0x11, 0xe1, 0x0a, 0x96, 0x7d, 0xd1, 0x5f,
	0x19, 0x87, 0x6f, 0xc5, 0xc8, 0x57, 0xde, 0x2d, 0xb4, 0x6e, 0x73, 0xc3, 0x30, 0x49, 0x35, 0xb0,
	0x08, 0x40, 0x1b, 0x80, 0x57, 0x61, 0x92, 0xfa, 0xaa, 0x26, 0x20, 0x15, 0x0c, 0xc2, 0x09, 0x04,
	0x33, 0x02, 0x52, 0xc1, 0x40, 0xea, 0x02, 0x81, 0xf2, 0xba, 0xe8, 0x12, 0x8b, 0x38, 0xfd, 0xe8,
	0x4c, 0x2c, 0x01, 0x82, 0x20, 0x66, 0x7c, 0xdc, 0x41, 0x9b, 0x15, 0xe1, 0xac, 0x2c, 0x03, 0xb6,
	0xee, 0x30, 0xeb, 0xa6, 0x21, 0x26, 0x15, 0xcc, 0xab, 0x26, 0x16, 0xcc, 0x13, 0x93, 0x0a, 0x26,
	0x36, 0x25, 0x56, 0x39, 0x63, 0xce, 0xd9, 0x6a, 0x25, 0xc6, 0x1a, 0xce, 0x58, 0xc3, 0x19, 0xaa,
	0xc4, 0xd8, 0x8c, 0x33, 0xe6, 0x9c, 0xb5, 0x9b, 0x62, 0xc1, 0x3c, 0x31, 0xa9, 0xf0, 0xa5, 0x59,
	0xb1, 0xd2, 0x19, 0x93, 0xce, 0xd9, 0x5a, 0x29, 0xc6, 0x64, 0xdd, 0x99, 0x25, 0x9c, 0xb3, 0xf5,
	0x52, 0x0c, 0xb0, 0x86, 0x33, 0x8b, 0x4a, 0x85, 0x37, 0x9a, 0x62, 0xc1, 0x3c, 0x31, 0xa9, 0x70,
	0x67, 0x56, 0xcc, 0x39, 0x2b, 0x58, 0xec, 0x9c, 0x6d, 0x3a, 0xb1, 0x82, 0xc5, 0x35, 0x67, 0x8e,
	0x70, 0xce, 0x3c, 0x27, 0x66, 0xb0, 0xba, 0x33, 0x87, 0x4a, 0x85, 0xb7, 0x9a, 0x62, 0xc1, 0x3c,
	0x31, 0xa9, 0xf0, 0xf6, 0xac, 0x58, 0xa0, 0xbc, 0x5d, 0xd4, 0xce, 0x19, 0xcd, 0x9c, 0xb1, 0xcb,
	0x00, 0xad, 0xea, 0x90, 0xf1, 0x75, 0x1b, 0x75, 0xca, 0xbc, 0xb3, 0xb5, 0x03, 0xd0, 0x9a, 0x85,
	0xac, 0xab, 0xba, 0x90, 0x54, 0xf8, 0x4a, 0x43, 0x28, 0x98, 0x23, 0x24, 0x15, 0xc6, 0x33, 0x42,
	0x6e, 0x56, 0x94, 0x73, 0x67, 0xe9, 0xaa, 0x5b, 0x1e, 0xe5, 0xbc, 0x36, 0x2b, 0x47, 0x38, 0x53,
	0xd7, 0xdc, 0xf2, 0x0c, 0x56, 0x9f, 0x95, 0x43, 0xa5, 0xc2, 0xd7, 0x9b, 0x62, 0xc1, 0x3c, 0x31,
	0xa9, 0xf0, 0x8d, 0x59, 0x31, 0xe7, 0x2c, 0x93, 0x43, 0xe7, 0xec, 0xa6, 0x13, 0xcb, 0xe4, 0xb0,
	0xe6, 0xcc, 0x11, 0xce, 0xd9, 0xae, 0x13, 0x33, 0x58, 0xdd, 0x99, 0x43, 0xa5, 0xc2, 0xff, 0x69,
	0x8a, 0x05, 0xf3, 0xc4, 0xa4, 0xc2, 0xdd, 0x59, 0x31, 0x73, 0xa4, 0xb0, 0x88, 0x12, 0x9a, 0x0b,
	0x27, 0xf7, 0x5f, 0x73, 0xa4, 0xb0, 0x88, 0x1e, 0xe5, 0xc2, 0xe8, 0xdd, 0x83, 0xb3, 0xae, 0x84,
	0x9c, 0xe2, 0x1e, 0x90, 0x1b, 0x25, 0x59, 0x2d, 0x36, 0x4a, 0x73, 0x41, 0xdd, 0x62, 0x6f, 0x19,
	0x7f, 0x10, 0x2b, 0x17, 0x5b, 0x11, 0x6e, 0xb1, 0xff, 0x33, 0xfe, 0x1c, 0x56, 0x2d, 0xb6, 0x42,
	0xa5, 0xc2, 0xff, 0x6f, 0x8a, 0x05, 0xf3, 0xc4, 0xa4, 0xc2, 0x9f, 0xcd, 0x8a, 0x05, 0xca, 0xdb,
	0x47, 0x9b, 0x45, 0x46, 0x15, 0x83, 0x3f, 0x11, 0xce, 0xde, 0x6d, 0xb3, 0x8a, 0x2a, 0x61, 0x3c,
	0xf6, 0x50, 0x27, 0xca, 0x39, 0x2f, 0x58, 0x0d, 0xed, 0x59, 0x55, 0x17, 0x37, 0x64, 0x1f, 0x6d,
	0x71, 0x1a, 0xe5, 0x3c, 0xa6, 0x31, 0xe1, 0x94, 0xa5, 0xe7, 0x44, 0x26, 0x13, 0x8a, 0xef, 0x74,
	0x2f, 0xf4, 0x2e, 0xfa, 0x9b, 0x2e, 0xe5, 0xeb, 0x4c, 0x90, 0x4c, 0xa8, 0x56, 0xae, 0x30, 0x92,
	0x64, 0x31, 0x55, 0x78, 0x1f, 0xfe, 0x4a, 0xad, 0x73, 0x07, 0x0d, 0x74, 0xd4, 0xbb, 0x87, 0xbc,
	0x49, 0x92, 0x25, 0x93, 0x62, 0x52, 0x17, 0xbe, 0x0b, 0x2e, 0x3a, 0x36, 0x53, 0xe9, 0x6a, 0x3a,
	0x54, 0xd3, 0xf4, 0x3d, 0x4b, 0x9b, 0x4c, 0x83, 0xe6, 0xf4, 0x63, 0x41, 0x85, 0x14, 0x00, 0xc6,
	0x24, 0x2f, 0x24, 0xfe, 0xdc, 0xd0, 0x2e, 0xa3, 0xc9, 0xf8, 0xb8, 0x90, 0xde, 0x5d, 0xe4, 0xa5,
	0xa1, 0x90, 0xc4, 0x6c, 0x78, 0x79, 0xce, 0xa8, 0x9e, 0x47, 0x1f, 0x5c, 0x6f, 0xe8, 0xcc, 0x3b,
	0x9d, 0x08, 0xce, 0x19, 0x35, 0xaf, 0xb7, 0x06, 0x9f, 0x85, 0xf0, 0x7a, 0xbf, 0x30, 0x2b, 0x2c,
	0xd9, 0x5f, 0xc3, 0xd4, 0x1c, 0x12, 0x35, 0x94, 0x2b, 0x22, 0x05, 0xbe, 0x6f, 0xbe, 0xed, 0x92,
	0xf4, 0x55, 0x20, 0xe6, 0x19, 0x90, 0x0a, 0x3f, 0x98, 0x63, 0x20, 0x98, 0x67, 0x40, 0x2a, 0xfc,
	0x70, 0xd6, 0x40, 0x30, 0x6d, 0x40, 0x82, 0x81, 0x83, 0x29, 0x03, 0x81, 0x36, 0xb0, 0xaf, 0xbf,
	0xa9, 0x24, 0x4b, 0x64, 0x12, 0xca, 0x72, 0x6b, 0x3f, 0x72, 0x5f, 0x80, 0x4b, 0x98, 0x1d, 0x71,
	0x80, 0x76, 0xa6, 0x58, 0xb7, 0xc9, 0x1f, 0x43, 0xc1, 0x56, 0xa3, 0xc0, 0xec, 0xf4, 0xbd, 0x3f,
	0xda, 0x68, 0xad, 0x71, 0xe3, 0xd2, 0xf7, 0x9e, 0x0f, 0x61, 0x16, 0xa7, 0xd4, 0x7a, 0xb7, 0x4f,
	0xfa, 0x12, 0xa6, 0x2f, 0x1c, 0x14, 0x2e, 0x27, 0x07, 0xe6, 0x12, 0x06, 0x01, 0x7d, 0x7b, 0xb9,
	0x8a, 0x5a, 0x69, 0x1e, 0x85, 0x29, 0xc9, 0xc7, 0x60, 0xaf, 0xe5, 0xaf, 0xc0, 0xf3, 0xf1, 0x58,
	0xd7, 0x71, 0x3a, 0xc9, 0x25, 0xd5, 0xb9, 0xc7, 0xe6, 0xc2, 0x64, 0x02, 0xc7, 0x63, 0xef, 0x26,
	0x42, 0x70, 0xca, 0x72, 0x2a, 0xf9, 0x39, 0x7e, 0x02, 0x0d, 0xe1, 0x10, 0xf6, 0x75, 0xc0, 0xbb,
	0x82, 0x56, 0x38, 0x1d, 0x12, 0x7d, 0x09, 0x7b, 0x5a, 0x5e, 0xc2, 0x0e, 0x33, 0xa9, 0x3f, 0x50,
	0xae, 0x48, 0xe5, 0xe7, 0x19, 0xf8, 0x41, 0x5c, 0x9d, 0x38, 0x47, 0x77, 0x50, 0xe7, 0x43, 0x9e,
	0xc6, 0x71, 0xfe, 0x29, 0x23, 0x51, 0x5e, 0x64, 0x92, 0x72, 0xfc, 0xdc, 0xbc, 0x38, 0x17, 0x3f,
	0x34, 0x61, 0xef, 0x14, 0xb5, 0xed, 0xdd, 0x31, 0xc9, 0x86, 0x39, 0xfe, 0xb2, 0xbb, 0xd0, 0x6b,
	0x3f, 0x7c, 0xd1, 0xff, 0xa7, 0x97, 0xd7, 0xfe, 0xd4, 0x2d, 0xd4, 0x47, 0xe6, 0xff, 0x83, 0x6c,
	0x98, 0x7b, 0x37, 0x10, 0x82, 0x74, 0xc1, 0xf4, 0xbb, 0xfe, 0x0a, 0x5e, 0x48, 0x4b, 0x47, 0xde,
	0xb3, 0x40, 0x78, 0xbb, 0x08, 0x31, 0x4e, 0x23, 0x1a, 0xd3, 0x2c, 0xa2, 0xf8, 0x6b, 0xb0, 0x59,
	0x8b, 0xe8, 0x6d, 0x30, 0x0e, 0x49, 0xa2, 0xdd, 0xea, 0x7d, 0x05, 0xa3, 0xc5, 0xdf, 0x98, 0xd5,
	0x8c, 0xc3, 0x81, 0x8d, 0xbf, 0xd1, 0x61, 0xfd, 0x89, 0xd5, 0x59, 0x33, 0x6a, 0xfc, 0x2d, 0xc0,
	0x9d, 0x0a, 0xf6, 0x21, 0xae, 0x8f, 0x91, 0x98, 0x86, 0xf1, 0xb4, 0xf6, 0x77, 0x80, 0x6f, 0xea,
	0x54, 0x53, 0xfd, 0x3e, 0xda, 0x6e, 0xf2, 0x56, 0xff, 0x7b, 0x28, 0xf0, 0xea, 0x05, 0xb6, 0xc3,
	0x03, 0x74, 0xd9, 0x0c, 0x86, 0x0a, 0x91, 0xe4, 0x19, 0x49, 0x62, 0xdb, 0xe3, 0x85, 0x29, 0xd1,
	0xc9, 0x13, 0x93, 0x1b, 0xc4, 0xa6, 0x09, 0xec, 0xe4, 0x66, 0x89, 0x6d, 0xf3, 0x12, 0x6a, 0xb6,
	0x1a, 0x35, 0x33, 0x7d, 0xf8, 0x19, 0xe5, 0x24, 0x61, 0x67, 0x8f, 0xcc, 0x0f, 0x86, 0x43, 0xd8,
	0x1b, 0xb6, 0x8f, 0xce, 0x0d, 0xd8, 0xd9, 0x23, 0xfd, 0xd3, 0xa1, 0x2c, 0x89, 0xd2, 0x44, 0xbf,
	0xd3, 0xaa, 0xe4, 0x87, 0xaa, 0xe4, 0x10, 0x72, 0x65, 0xc9, 0x3e, 0xda, 0x4c, 0x84, 0xd9, 0x78,
	0xc3, 0xc2, 0x4d, 0xeb, 0x08, 0x76, 0xf5, 0x46, 0x22, 0x4e, 0x6c, 0xbc, 0x7c, 0x13, 0x75, 0xd6,
	0x2e, 0xe1, 0x15, 0xc0, 0x9d, 0x0a, 0xb6, 0xfe, 0x9f, 0x20, 0x5c, 0xa7, 0x0b, 0x32, 0x4c, 0xc3,
	0x91, 0x6d, 0xf0, 0x23, 0xd4, 0x6c, 0x57, 0x35, 0xef, 0x5f, 0xa5, 0xe1, 0xc8, 0x74, 0x79, 0x86,
	0xae, 0xce, 0xa9, 0xb3, 0xcd, 0x7e, 0x82, 0xc2, 0xcb, 0x53, 0x85, 0xb6, 0xe3, 0x53, 0xd3, 0x91,
	0x8e, 0x26, 0x7a, 0xf5, 0x3c, 0x2f, 0x64, 0x92, 0xb9, 0x8e, 0x83, 0xb2, 0xd0, 0xa4, 0x7d, 0x93,
	0x35, 0x2d, 0x9f, 0x9b, 0x96, 0x53, 0x85, 0xb6, 0xe5, 0xcf, 0x50, 0xb9, 0x33, 0x5d, 0x69, 0x7b,
	0x9a, 0xf9, 0x95, 0xa7, 0x94, 0x69, 0xf6, 0xda, 0xcd, 0x6f, 0x60, 0xe3, 0xf5, 0xf9, 0x95, 0xac,
	0xd5, 0x7f, 0xe3, 0xe6, 0xe7, 0x60, 0xab, 0xbc, 0x8b, 0xda, 0x89, 0x20, 0xa7, 0xd4, 0x1c, 0xab,
	0xf8, 0x2d, 0x60, 0xab, 0x89, 0x78, 0x49, 0xe1, 0x40, 0xd5, 0x47, 0x86, 0xd0, 0xb7, 0x26, 0xb7,
	0xfd, 0x7e, 0x31, 0x5f, 0x99, 0xe0, 0x6f, 0x85, 0xdd, 0x76, 0x7b, 0x68, 0xcd, 0x12, 0xb6, 0xd5,
	0x31, 0x20, 0x6d, 0x40, 0x6c, 0x97, 0xdf, 0xd1, 0x12, 0xfc, 0xec, 0xc2, 0xef, 0xe0, 0x94, 0x38,
	0xfa, 0x97, 0xa7, 0x44, 0xf3, 0xf7, 0x9b, 0x6f, 0x34, 0x4f, 0x97, 0xe1, 0x67, 0xf3, 0xc1, 0xdf,
	0x01, 0x00, 0x00, 0xff, 0xff, 0x56, 0xb7, 0x1e, 0x43, 0x4d, 0x0f, 0x00, 0x00,
}
