/*
Copyright 2019 Cisco Systems

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: vpdn_edm_show_session_det.proto

package cisco_ios_xr_tunnel_vpdn_oper_vpdn_sessions_session

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type VpdnEdmShowSessionDet_KEYS struct {
	SessionLabel         string   `protobuf:"bytes,1,opt,name=session_label,json=sessionLabel,proto3" json:"session_label,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VpdnEdmShowSessionDet_KEYS) Reset()         { *m = VpdnEdmShowSessionDet_KEYS{} }
func (m *VpdnEdmShowSessionDet_KEYS) String() string { return proto.CompactTextString(m) }
func (*VpdnEdmShowSessionDet_KEYS) ProtoMessage()    {}
func (*VpdnEdmShowSessionDet_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_45e7a9a01be2c06d, []int{0}
}

func (m *VpdnEdmShowSessionDet_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VpdnEdmShowSessionDet_KEYS.Unmarshal(m, b)
}
func (m *VpdnEdmShowSessionDet_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VpdnEdmShowSessionDet_KEYS.Marshal(b, m, deterministic)
}
func (m *VpdnEdmShowSessionDet_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VpdnEdmShowSessionDet_KEYS.Merge(m, src)
}
func (m *VpdnEdmShowSessionDet_KEYS) XXX_Size() int {
	return xxx_messageInfo_VpdnEdmShowSessionDet_KEYS.Size(m)
}
func (m *VpdnEdmShowSessionDet_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_VpdnEdmShowSessionDet_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_VpdnEdmShowSessionDet_KEYS proto.InternalMessageInfo

func (m *VpdnEdmShowSessionDet_KEYS) GetSessionLabel() string {
	if m != nil {
		return m.SessionLabel
	}
	return ""
}

type VpdnEdmShowSessionBr struct {
	LastChange           string   `protobuf:"bytes,1,opt,name=last_change,json=lastChange,proto3" json:"last_change,omitempty"`
	InterfaceName        string   `protobuf:"bytes,2,opt,name=interface_name,json=interfaceName,proto3" json:"interface_name,omitempty"`
	Username             string   `protobuf:"bytes,3,opt,name=username,proto3" json:"username,omitempty"`
	DomainName           string   `protobuf:"bytes,4,opt,name=domain_name,json=domainName,proto3" json:"domain_name,omitempty"`
	State                string   `protobuf:"bytes,5,opt,name=state,proto3" json:"state,omitempty"`
	L2TpSessionId        uint32   `protobuf:"varint,6,opt,name=l2tp_session_id,json=l2tpSessionId,proto3" json:"l2tp_session_id,omitempty"`
	L2TpTunnelId         uint32   `protobuf:"varint,7,opt,name=l2tp_tunnel_id,json=l2tpTunnelId,proto3" json:"l2tp_tunnel_id,omitempty"`
	SrgSlave             bool     `protobuf:"varint,8,opt,name=srg_slave,json=srgSlave,proto3" json:"srg_slave,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VpdnEdmShowSessionBr) Reset()         { *m = VpdnEdmShowSessionBr{} }
func (m *VpdnEdmShowSessionBr) String() string { return proto.CompactTextString(m) }
func (*VpdnEdmShowSessionBr) ProtoMessage()    {}
func (*VpdnEdmShowSessionBr) Descriptor() ([]byte, []int) {
	return fileDescriptor_45e7a9a01be2c06d, []int{1}
}

func (m *VpdnEdmShowSessionBr) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VpdnEdmShowSessionBr.Unmarshal(m, b)
}
func (m *VpdnEdmShowSessionBr) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VpdnEdmShowSessionBr.Marshal(b, m, deterministic)
}
func (m *VpdnEdmShowSessionBr) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VpdnEdmShowSessionBr.Merge(m, src)
}
func (m *VpdnEdmShowSessionBr) XXX_Size() int {
	return xxx_messageInfo_VpdnEdmShowSessionBr.Size(m)
}
func (m *VpdnEdmShowSessionBr) XXX_DiscardUnknown() {
	xxx_messageInfo_VpdnEdmShowSessionBr.DiscardUnknown(m)
}

var xxx_messageInfo_VpdnEdmShowSessionBr proto.InternalMessageInfo

func (m *VpdnEdmShowSessionBr) GetLastChange() string {
	if m != nil {
		return m.LastChange
	}
	return ""
}

func (m *VpdnEdmShowSessionBr) GetInterfaceName() string {
	if m != nil {
		return m.InterfaceName
	}
	return ""
}

func (m *VpdnEdmShowSessionBr) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *VpdnEdmShowSessionBr) GetDomainName() string {
	if m != nil {
		return m.DomainName
	}
	return ""
}

func (m *VpdnEdmShowSessionBr) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *VpdnEdmShowSessionBr) GetL2TpSessionId() uint32 {
	if m != nil {
		return m.L2TpSessionId
	}
	return 0
}

func (m *VpdnEdmShowSessionBr) GetL2TpTunnelId() uint32 {
	if m != nil {
		return m.L2TpTunnelId
	}
	return 0
}

func (m *VpdnEdmShowSessionBr) GetSrgSlave() bool {
	if m != nil {
		return m.SrgSlave
	}
	return false
}

type VpdnL2Tp struct {
	LocalEndpoint                 string   `protobuf:"bytes,1,opt,name=local_endpoint,json=localEndpoint,proto3" json:"local_endpoint,omitempty"`
	RemoteEndpoint                string   `protobuf:"bytes,2,opt,name=remote_endpoint,json=remoteEndpoint,proto3" json:"remote_endpoint,omitempty"`
	CallSerialNumber              uint32   `protobuf:"varint,3,opt,name=call_serial_number,json=callSerialNumber,proto3" json:"call_serial_number,omitempty"`
	IsL2TpClassAttributeMaskSet   bool     `protobuf:"varint,4,opt,name=is_l2tp_class_attribute_mask_set,json=isL2tpClassAttributeMaskSet,proto3" json:"is_l2tp_class_attribute_mask_set,omitempty"`
	LocalTunnelId                 uint32   `protobuf:"varint,5,opt,name=local_tunnel_id,json=localTunnelId,proto3" json:"local_tunnel_id,omitempty"`
	RemoteTunnelId                uint32   `protobuf:"varint,6,opt,name=remote_tunnel_id,json=remoteTunnelId,proto3" json:"remote_tunnel_id,omitempty"`
	LocalSessionId                uint32   `protobuf:"varint,7,opt,name=local_session_id,json=localSessionId,proto3" json:"local_session_id,omitempty"`
	RemoteSessionId               uint32   `protobuf:"varint,8,opt,name=remote_session_id,json=remoteSessionId,proto3" json:"remote_session_id,omitempty"`
	RemotePort                    uint32   `protobuf:"varint,9,opt,name=remote_port,json=remotePort,proto3" json:"remote_port,omitempty"`
	TunnelClientAuthenticationId  string   `protobuf:"bytes,10,opt,name=tunnel_client_authentication_id,json=tunnelClientAuthenticationId,proto3" json:"tunnel_client_authentication_id,omitempty"`
	TunnelServerAuthenticationId  string   `protobuf:"bytes,11,opt,name=tunnel_server_authentication_id,json=tunnelServerAuthenticationId,proto3" json:"tunnel_server_authentication_id,omitempty"`
	TunnelAssignmentId            string   `protobuf:"bytes,12,opt,name=tunnel_assignment_id,json=tunnelAssignmentId,proto3" json:"tunnel_assignment_id,omitempty"`
	IsTunnelAuthenticationEnabled bool     `protobuf:"varint,13,opt,name=is_tunnel_authentication_enabled,json=isTunnelAuthenticationEnabled,proto3" json:"is_tunnel_authentication_enabled,omitempty"`
	XXX_NoUnkeyedLiteral          struct{} `json:"-"`
	XXX_unrecognized              []byte   `json:"-"`
	XXX_sizecache                 int32    `json:"-"`
}

func (m *VpdnL2Tp) Reset()         { *m = VpdnL2Tp{} }
func (m *VpdnL2Tp) String() string { return proto.CompactTextString(m) }
func (*VpdnL2Tp) ProtoMessage()    {}
func (*VpdnL2Tp) Descriptor() ([]byte, []int) {
	return fileDescriptor_45e7a9a01be2c06d, []int{2}
}

func (m *VpdnL2Tp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VpdnL2Tp.Unmarshal(m, b)
}
func (m *VpdnL2Tp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VpdnL2Tp.Marshal(b, m, deterministic)
}
func (m *VpdnL2Tp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VpdnL2Tp.Merge(m, src)
}
func (m *VpdnL2Tp) XXX_Size() int {
	return xxx_messageInfo_VpdnL2Tp.Size(m)
}
func (m *VpdnL2Tp) XXX_DiscardUnknown() {
	xxx_messageInfo_VpdnL2Tp.DiscardUnknown(m)
}

var xxx_messageInfo_VpdnL2Tp proto.InternalMessageInfo

func (m *VpdnL2Tp) GetLocalEndpoint() string {
	if m != nil {
		return m.LocalEndpoint
	}
	return ""
}

func (m *VpdnL2Tp) GetRemoteEndpoint() string {
	if m != nil {
		return m.RemoteEndpoint
	}
	return ""
}

func (m *VpdnL2Tp) GetCallSerialNumber() uint32 {
	if m != nil {
		return m.CallSerialNumber
	}
	return 0
}

func (m *VpdnL2Tp) GetIsL2TpClassAttributeMaskSet() bool {
	if m != nil {
		return m.IsL2TpClassAttributeMaskSet
	}
	return false
}

func (m *VpdnL2Tp) GetLocalTunnelId() uint32 {
	if m != nil {
		return m.LocalTunnelId
	}
	return 0
}

func (m *VpdnL2Tp) GetRemoteTunnelId() uint32 {
	if m != nil {
		return m.RemoteTunnelId
	}
	return 0
}

func (m *VpdnL2Tp) GetLocalSessionId() uint32 {
	if m != nil {
		return m.LocalSessionId
	}
	return 0
}

func (m *VpdnL2Tp) GetRemoteSessionId() uint32 {
	if m != nil {
		return m.RemoteSessionId
	}
	return 0
}

func (m *VpdnL2Tp) GetRemotePort() uint32 {
	if m != nil {
		return m.RemotePort
	}
	return 0
}

func (m *VpdnL2Tp) GetTunnelClientAuthenticationId() string {
	if m != nil {
		return m.TunnelClientAuthenticationId
	}
	return ""
}

func (m *VpdnL2Tp) GetTunnelServerAuthenticationId() string {
	if m != nil {
		return m.TunnelServerAuthenticationId
	}
	return ""
}

func (m *VpdnL2Tp) GetTunnelAssignmentId() string {
	if m != nil {
		return m.TunnelAssignmentId
	}
	return ""
}

func (m *VpdnL2Tp) GetIsTunnelAuthenticationEnabled() bool {
	if m != nil {
		return m.IsTunnelAuthenticationEnabled
	}
	return false
}

type VpdnSubscriber struct {
	NasPortIdVal         string   `protobuf:"bytes,1,opt,name=nas_port_id_val,json=nasPortIdVal,proto3" json:"nas_port_id_val,omitempty"`
	NasPortType          string   `protobuf:"bytes,2,opt,name=nas_port_type,json=nasPortType,proto3" json:"nas_port_type,omitempty"`
	PhysicalChannelId    uint32   `protobuf:"varint,3,opt,name=physical_channel_id,json=physicalChannelId,proto3" json:"physical_channel_id,omitempty"`
	ReceiveConnectSpeed  uint64   `protobuf:"varint,4,opt,name=receive_connect_speed,json=receiveConnectSpeed,proto3" json:"receive_connect_speed,omitempty"`
	TransmitConnectSpeed uint64   `protobuf:"varint,5,opt,name=transmit_connect_speed,json=transmitConnectSpeed,proto3" json:"transmit_connect_speed,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VpdnSubscriber) Reset()         { *m = VpdnSubscriber{} }
func (m *VpdnSubscriber) String() string { return proto.CompactTextString(m) }
func (*VpdnSubscriber) ProtoMessage()    {}
func (*VpdnSubscriber) Descriptor() ([]byte, []int) {
	return fileDescriptor_45e7a9a01be2c06d, []int{3}
}

func (m *VpdnSubscriber) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VpdnSubscriber.Unmarshal(m, b)
}
func (m *VpdnSubscriber) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VpdnSubscriber.Marshal(b, m, deterministic)
}
func (m *VpdnSubscriber) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VpdnSubscriber.Merge(m, src)
}
func (m *VpdnSubscriber) XXX_Size() int {
	return xxx_messageInfo_VpdnSubscriber.Size(m)
}
func (m *VpdnSubscriber) XXX_DiscardUnknown() {
	xxx_messageInfo_VpdnSubscriber.DiscardUnknown(m)
}

var xxx_messageInfo_VpdnSubscriber proto.InternalMessageInfo

func (m *VpdnSubscriber) GetNasPortIdVal() string {
	if m != nil {
		return m.NasPortIdVal
	}
	return ""
}

func (m *VpdnSubscriber) GetNasPortType() string {
	if m != nil {
		return m.NasPortType
	}
	return ""
}

func (m *VpdnSubscriber) GetPhysicalChannelId() uint32 {
	if m != nil {
		return m.PhysicalChannelId
	}
	return 0
}

func (m *VpdnSubscriber) GetReceiveConnectSpeed() uint64 {
	if m != nil {
		return m.ReceiveConnectSpeed
	}
	return 0
}

func (m *VpdnSubscriber) GetTransmitConnectSpeed() uint64 {
	if m != nil {
		return m.TransmitConnectSpeed
	}
	return 0
}

type VpdnVpnId struct {
	Oui                  uint32   `protobuf:"varint,1,opt,name=oui,proto3" json:"oui,omitempty"`
	Index                uint32   `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VpdnVpnId) Reset()         { *m = VpdnVpnId{} }
func (m *VpdnVpnId) String() string { return proto.CompactTextString(m) }
func (*VpdnVpnId) ProtoMessage()    {}
func (*VpdnVpnId) Descriptor() ([]byte, []int) {
	return fileDescriptor_45e7a9a01be2c06d, []int{4}
}

func (m *VpdnVpnId) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VpdnVpnId.Unmarshal(m, b)
}
func (m *VpdnVpnId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VpdnVpnId.Marshal(b, m, deterministic)
}
func (m *VpdnVpnId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VpdnVpnId.Merge(m, src)
}
func (m *VpdnVpnId) XXX_Size() int {
	return xxx_messageInfo_VpdnVpnId.Size(m)
}
func (m *VpdnVpnId) XXX_DiscardUnknown() {
	xxx_messageInfo_VpdnVpnId.DiscardUnknown(m)
}

var xxx_messageInfo_VpdnVpnId proto.InternalMessageInfo

func (m *VpdnVpnId) GetOui() uint32 {
	if m != nil {
		return m.Oui
	}
	return 0
}

func (m *VpdnVpnId) GetIndex() uint32 {
	if m != nil {
		return m.Index
	}
	return 0
}

type VpdnConfig struct {
	VpnId                *VpdnVpnId `protobuf:"bytes,1,opt,name=vpn_id,json=vpnId,proto3" json:"vpn_id,omitempty"`
	TemplateName         string     `protobuf:"bytes,2,opt,name=template_name,json=templateName,proto3" json:"template_name,omitempty"`
	VrfName              string     `protobuf:"bytes,3,opt,name=vrf_name,json=vrfName,proto3" json:"vrf_name,omitempty"`
	L2TpBusyTimeout      uint32     `protobuf:"varint,4,opt,name=l2tp_busy_timeout,json=l2tpBusyTimeout,proto3" json:"l2tp_busy_timeout,omitempty"`
	TosMode              string     `protobuf:"bytes,5,opt,name=tos_mode,json=tosMode,proto3" json:"tos_mode,omitempty"`
	Tos                  uint32     `protobuf:"varint,6,opt,name=tos,proto3" json:"tos,omitempty"`
	DslLineForwarding    bool       `protobuf:"varint,7,opt,name=dsl_line_forwarding,json=dslLineForwarding,proto3" json:"dsl_line_forwarding,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *VpdnConfig) Reset()         { *m = VpdnConfig{} }
func (m *VpdnConfig) String() string { return proto.CompactTextString(m) }
func (*VpdnConfig) ProtoMessage()    {}
func (*VpdnConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_45e7a9a01be2c06d, []int{5}
}

func (m *VpdnConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VpdnConfig.Unmarshal(m, b)
}
func (m *VpdnConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VpdnConfig.Marshal(b, m, deterministic)
}
func (m *VpdnConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VpdnConfig.Merge(m, src)
}
func (m *VpdnConfig) XXX_Size() int {
	return xxx_messageInfo_VpdnConfig.Size(m)
}
func (m *VpdnConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_VpdnConfig.DiscardUnknown(m)
}

var xxx_messageInfo_VpdnConfig proto.InternalMessageInfo

func (m *VpdnConfig) GetVpnId() *VpdnVpnId {
	if m != nil {
		return m.VpnId
	}
	return nil
}

func (m *VpdnConfig) GetTemplateName() string {
	if m != nil {
		return m.TemplateName
	}
	return ""
}

func (m *VpdnConfig) GetVrfName() string {
	if m != nil {
		return m.VrfName
	}
	return ""
}

func (m *VpdnConfig) GetL2TpBusyTimeout() uint32 {
	if m != nil {
		return m.L2TpBusyTimeout
	}
	return 0
}

func (m *VpdnConfig) GetTosMode() string {
	if m != nil {
		return m.TosMode
	}
	return ""
}

func (m *VpdnConfig) GetTos() uint32 {
	if m != nil {
		return m.Tos
	}
	return 0
}

func (m *VpdnConfig) GetDslLineForwarding() bool {
	if m != nil {
		return m.DslLineForwarding
	}
	return false
}

type VpdnEdmShowSessionDet struct {
	Session              *VpdnEdmShowSessionBr `protobuf:"bytes,50,opt,name=session,proto3" json:"session,omitempty"`
	SetupTime            uint32                `protobuf:"varint,51,opt,name=setup_time,json=setupTime,proto3" json:"setup_time,omitempty"`
	ParentInterfaceName  string                `protobuf:"bytes,52,opt,name=parent_interface_name,json=parentInterfaceName,proto3" json:"parent_interface_name,omitempty"`
	L2Tp                 *VpdnL2Tp             `protobuf:"bytes,53,opt,name=l2tp,proto3" json:"l2tp,omitempty"`
	Subscriber           *VpdnSubscriber       `protobuf:"bytes,54,opt,name=subscriber,proto3" json:"subscriber,omitempty"`
	Configuration        *VpdnConfig           `protobuf:"bytes,55,opt,name=configuration,proto3" json:"configuration,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *VpdnEdmShowSessionDet) Reset()         { *m = VpdnEdmShowSessionDet{} }
func (m *VpdnEdmShowSessionDet) String() string { return proto.CompactTextString(m) }
func (*VpdnEdmShowSessionDet) ProtoMessage()    {}
func (*VpdnEdmShowSessionDet) Descriptor() ([]byte, []int) {
	return fileDescriptor_45e7a9a01be2c06d, []int{6}
}

func (m *VpdnEdmShowSessionDet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VpdnEdmShowSessionDet.Unmarshal(m, b)
}
func (m *VpdnEdmShowSessionDet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VpdnEdmShowSessionDet.Marshal(b, m, deterministic)
}
func (m *VpdnEdmShowSessionDet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VpdnEdmShowSessionDet.Merge(m, src)
}
func (m *VpdnEdmShowSessionDet) XXX_Size() int {
	return xxx_messageInfo_VpdnEdmShowSessionDet.Size(m)
}
func (m *VpdnEdmShowSessionDet) XXX_DiscardUnknown() {
	xxx_messageInfo_VpdnEdmShowSessionDet.DiscardUnknown(m)
}

var xxx_messageInfo_VpdnEdmShowSessionDet proto.InternalMessageInfo

func (m *VpdnEdmShowSessionDet) GetSession() *VpdnEdmShowSessionBr {
	if m != nil {
		return m.Session
	}
	return nil
}

func (m *VpdnEdmShowSessionDet) GetSetupTime() uint32 {
	if m != nil {
		return m.SetupTime
	}
	return 0
}

func (m *VpdnEdmShowSessionDet) GetParentInterfaceName() string {
	if m != nil {
		return m.ParentInterfaceName
	}
	return ""
}

func (m *VpdnEdmShowSessionDet) GetL2Tp() *VpdnL2Tp {
	if m != nil {
		return m.L2Tp
	}
	return nil
}

func (m *VpdnEdmShowSessionDet) GetSubscriber() *VpdnSubscriber {
	if m != nil {
		return m.Subscriber
	}
	return nil
}

func (m *VpdnEdmShowSessionDet) GetConfiguration() *VpdnConfig {
	if m != nil {
		return m.Configuration
	}
	return nil
}

func init() {
	proto.RegisterType((*VpdnEdmShowSessionDet_KEYS)(nil), "cisco_ios_xr_tunnel_vpdn_oper.vpdn.sessions.session.vpdn_edm_show_session_det_KEYS")
	proto.RegisterType((*VpdnEdmShowSessionBr)(nil), "cisco_ios_xr_tunnel_vpdn_oper.vpdn.sessions.session.vpdn_edm_show_session_br")
	proto.RegisterType((*VpdnL2Tp)(nil), "cisco_ios_xr_tunnel_vpdn_oper.vpdn.sessions.session.vpdn_l2tp")
	proto.RegisterType((*VpdnSubscriber)(nil), "cisco_ios_xr_tunnel_vpdn_oper.vpdn.sessions.session.vpdn_subscriber")
	proto.RegisterType((*VpdnVpnId)(nil), "cisco_ios_xr_tunnel_vpdn_oper.vpdn.sessions.session.vpdn_vpn_id")
	proto.RegisterType((*VpdnConfig)(nil), "cisco_ios_xr_tunnel_vpdn_oper.vpdn.sessions.session.vpdn_config")
	proto.RegisterType((*VpdnEdmShowSessionDet)(nil), "cisco_ios_xr_tunnel_vpdn_oper.vpdn.sessions.session.vpdn_edm_show_session_det")
}

func init() { proto.RegisterFile("vpdn_edm_show_session_det.proto", fileDescriptor_45e7a9a01be2c06d) }

var fileDescriptor_45e7a9a01be2c06d = []byte{
	// 976 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x56, 0x5d, 0x6f, 0x1c, 0x35,
	0x14, 0x55, 0x9a, 0x6c, 0xb2, 0xb9, 0x9b, 0xc9, 0x87, 0x13, 0xd0, 0x94, 0x52, 0x12, 0x6d, 0x29,
	0x44, 0x15, 0x5a, 0xa1, 0xa4, 0x85, 0x37, 0x44, 0x08, 0x0b, 0x5a, 0x91, 0x54, 0x68, 0x36, 0x02,
	0xf1, 0x64, 0x79, 0xc7, 0x77, 0x37, 0x56, 0x67, 0xec, 0x91, 0xed, 0xd9, 0x36, 0xff, 0x06, 0xf1,
	0x07, 0xf8, 0x77, 0x48, 0xbc, 0x21, 0x5f, 0xcf, 0x7e, 0x41, 0xfa, 0x12, 0xde, 0xc6, 0xe7, 0x9e,
	0x7b, 0xc6, 0xf7, 0xf8, 0xfa, 0xce, 0xc0, 0xf1, 0xb4, 0x92, 0x9a, 0xa3, 0x2c, 0xb9, 0xbb, 0x35,
	0x6f, 0xb9, 0x43, 0xe7, 0x94, 0xd1, 0x5c, 0xa2, 0xef, 0x55, 0xd6, 0x78, 0xc3, 0xce, 0x73, 0xe5,
	0x72, 0xc3, 0x95, 0x71, 0xfc, 0x9d, 0xe5, 0xbe, 0xd6, 0x1a, 0x0b, 0x4e, 0x49, 0xa6, 0x42, 0xdb,
	0x0b, 0x4f, 0xbd, 0x26, 0xcb, 0xcd, 0x1e, 0xba, 0x7d, 0xf8, 0xe4, 0xbd, 0xba, 0xfc, 0xa7, 0xfe,
	0x6f, 0x43, 0xf6, 0x0c, 0x92, 0x19, 0x56, 0x88, 0x11, 0x16, 0xe9, 0xda, 0xc9, 0xda, 0xe9, 0x76,
	0xb6, 0xd3, 0x80, 0x57, 0x01, 0xeb, 0xfe, 0xfe, 0x08, 0xd2, 0xfb, 0x75, 0x46, 0x96, 0x1d, 0x43,
	0xa7, 0x10, 0xce, 0xf3, 0xfc, 0x56, 0xe8, 0x09, 0x36, 0xf9, 0x10, 0xa0, 0x4b, 0x42, 0xd8, 0x73,
	0xd8, 0x55, 0xda, 0xa3, 0x1d, 0x8b, 0x1c, 0xb9, 0x16, 0x25, 0xa6, 0x8f, 0x88, 0x93, 0xcc, 0xd1,
	0xd7, 0xa2, 0x44, 0xf6, 0x11, 0xb4, 0x6b, 0x87, 0x96, 0x08, 0xeb, 0x44, 0x98, 0xaf, 0xc3, 0x3b,
	0xa4, 0x29, 0x85, 0xd2, 0x31, 0x7f, 0x23, 0xbe, 0x23, 0x42, 0x94, 0x7c, 0x04, 0x2d, 0xe7, 0x85,
	0xc7, 0xb4, 0x45, 0xa1, 0xb8, 0x60, 0x9f, 0xc1, 0x5e, 0x71, 0xe6, 0xab, 0xf9, 0x6e, 0x95, 0x4c,
	0x37, 0x4f, 0xd6, 0x4e, 0x93, 0x2c, 0x09, 0xf0, 0x30, 0xa2, 0x03, 0xc9, 0x3e, 0x85, 0x5d, 0xe2,
	0x35, 0xae, 0x2a, 0x99, 0x6e, 0x11, 0x6d, 0x27, 0xa0, 0x37, 0x04, 0x0e, 0x24, 0x7b, 0x02, 0xdb,
	0xce, 0x4e, 0xb8, 0x2b, 0xc4, 0x14, 0xd3, 0xf6, 0xc9, 0xda, 0x69, 0x3b, 0x6b, 0x3b, 0x3b, 0x19,
	0x86, 0x75, 0xf7, 0x8f, 0x16, 0x6c, 0x93, 0x45, 0x21, 0x25, 0x94, 0x5c, 0x98, 0x5c, 0x14, 0x1c,
	0xb5, 0xac, 0x8c, 0xd2, 0xbe, 0xb1, 0x25, 0x21, 0xb4, 0xdf, 0x80, 0xec, 0x73, 0xd8, 0xb3, 0x58,
	0x1a, 0x8f, 0x0b, 0x5e, 0xb4, 0x66, 0x37, 0xc2, 0x73, 0xe2, 0x17, 0xc0, 0x72, 0x51, 0x14, 0xdc,
	0xa1, 0x55, 0xa2, 0xe0, 0xba, 0x2e, 0x47, 0x68, 0xc9, 0xa5, 0x24, 0xdb, 0x0f, 0x91, 0x21, 0x05,
	0x5e, 0x13, 0xce, 0xfa, 0x70, 0xa2, 0x1c, 0x6d, 0x84, 0xe7, 0x85, 0x70, 0x8e, 0x0b, 0xef, 0xad,
	0x1a, 0xd5, 0x1e, 0x79, 0x29, 0xdc, 0x1b, 0xee, 0xd0, 0x93, 0x85, 0xed, 0xec, 0x89, 0x72, 0x57,
	0x67, 0xbe, 0xba, 0x0c, 0xac, 0x8b, 0x19, 0xe9, 0x5a, 0xb8, 0x37, 0x43, 0xf4, 0xe4, 0x1e, 0x15,
	0xb1, 0xb0, 0xa5, 0xd5, 0xb8, 0x17, 0xe0, 0xb9, 0x2f, 0xa7, 0xb0, 0xdf, 0x54, 0xb1, 0x20, 0x46,
	0x9b, 0x9b, 0x32, 0x96, 0x99, 0x51, 0x71, 0xe9, 0x40, 0xa2, 0xd3, 0xd1, 0xae, 0xc5, 0x89, 0xbc,
	0x80, 0x83, 0x46, 0x73, 0x89, 0xda, 0x26, 0x6a, 0x63, 0xd9, 0x82, 0x7b, 0x0c, 0x9d, 0x86, 0x5b,
	0x19, 0xeb, 0xd3, 0x6d, 0x62, 0x41, 0x84, 0x7e, 0x36, 0xd6, 0xb3, 0x3e, 0x1c, 0x37, 0x3b, 0xcb,
	0x0b, 0x85, 0xda, 0x73, 0x51, 0xfb, 0x5b, 0xd4, 0x5e, 0xe5, 0xc2, 0x37, 0xd2, 0x40, 0xb6, 0x7f,
	0x1c, 0x69, 0x97, 0xc4, 0xba, 0x58, 0x21, 0x0d, 0xe4, 0x92, 0x8c, 0x43, 0x3b, 0x45, 0x7b, 0x8f,
	0x4c, 0x67, 0x59, 0x66, 0x48, 0xac, 0xff, 0xc8, 0x7c, 0x09, 0x47, 0x8d, 0x8c, 0x70, 0x4e, 0x4d,
	0x74, 0x19, 0x76, 0xa4, 0x64, 0xba, 0x43, 0xb9, 0x2c, 0xc6, 0x2e, 0xe6, 0xa1, 0x81, 0x64, 0x3f,
	0xd2, 0x79, 0xce, 0x92, 0x56, 0x5f, 0x8a, 0x5a, 0x8c, 0x0a, 0x94, 0x69, 0x42, 0xe7, 0xf9, 0x54,
	0xb9, 0x68, 0xf6, 0xea, 0x5b, 0xfb, 0x91, 0xd4, 0xfd, 0x6b, 0x0d, 0xf6, 0xa8, 0x49, 0x5d, 0x3d,
	0x72, 0xb9, 0x55, 0xa1, 0x59, 0x9e, 0xc3, 0x9e, 0x16, 0x8e, 0xac, 0xe3, 0x4a, 0xf2, 0xa9, 0x98,
	0x8f, 0x00, 0x2d, 0x5c, 0xb0, 0x6f, 0x20, 0x7f, 0x11, 0x05, 0xeb, 0x42, 0x32, 0xa7, 0xf9, 0xbb,
	0x6a, 0x76, 0x87, 0x3b, 0x0d, 0xe9, 0xe6, 0xae, 0x42, 0xd6, 0x83, 0xc3, 0xea, 0xf6, 0xce, 0xa9,
	0x70, 0xc2, 0x61, 0x1a, 0x34, 0xbd, 0x10, 0xdb, 0xf4, 0x60, 0x16, 0xba, 0x8c, 0x91, 0x81, 0x64,
	0x67, 0xf0, 0x81, 0xc5, 0x1c, 0xd5, 0x14, 0x79, 0x6e, 0xb4, 0xc6, 0xdc, 0x73, 0x57, 0x21, 0x4a,
	0x6a, 0xce, 0x8d, 0xec, 0xb0, 0x09, 0x5e, 0xc6, 0xd8, 0x30, 0x84, 0xd8, 0x4b, 0xf8, 0xd0, 0x5b,
	0xa1, 0x5d, 0xa9, 0xfc, 0xbf, 0x92, 0x5a, 0x94, 0x74, 0x34, 0x8b, 0x2e, 0x67, 0x75, 0x5f, 0x41,
	0x87, 0xea, 0x9e, 0x56, 0xe1, 0x98, 0xd8, 0x3e, 0xac, 0x9b, 0x5a, 0x51, 0x9d, 0x49, 0x16, 0x1e,
	0xc3, 0xfc, 0x50, 0x5a, 0xe2, 0x3b, 0x2a, 0x2b, 0xc9, 0xe2, 0xa2, 0xfb, 0xe7, 0xa3, 0x26, 0x2f,
	0x37, 0x7a, 0xac, 0x26, 0xec, 0x57, 0xd8, 0x8c, 0x0a, 0x94, 0xda, 0x39, 0xfb, 0xb6, 0xf7, 0x80,
	0xa1, 0xdc, 0x5b, 0xda, 0x49, 0xd6, 0x9a, 0x56, 0xa1, 0x27, 0x9e, 0x41, 0xe2, 0xb1, 0xac, 0x0a,
	0xe1, 0x57, 0x26, 0xe4, 0xce, 0x0c, 0xa4, 0x19, 0xf7, 0x18, 0xda, 0x53, 0x3b, 0xe6, 0x4b, 0x03,
	0x72, 0x6b, 0x6a, 0xc7, 0x14, 0x7a, 0x01, 0x07, 0x74, 0xdd, 0x47, 0xb5, 0xbb, 0xe3, 0x5e, 0x95,
	0x68, 0xea, 0x78, 0xc5, 0x93, 0x8c, 0x26, 0xe0, 0x77, 0xb5, 0xbb, 0xbb, 0x89, 0x70, 0x90, 0xf1,
	0xc6, 0xf1, 0xd2, 0xc8, 0xd9, 0xb4, 0xdc, 0xf2, 0xc6, 0x5d, 0x1b, 0x89, 0xc1, 0x17, 0x6f, 0x5c,
	0x73, 0x79, 0xc3, 0x63, 0x38, 0x52, 0xe9, 0x0a, 0x5e, 0x28, 0x8d, 0x7c, 0x6c, 0xec, 0x5b, 0x61,
	0xa5, 0xd2, 0x13, 0xba, 0xb4, 0xed, 0xec, 0x40, 0xba, 0xe2, 0x4a, 0x69, 0xfc, 0x61, 0x1e, 0xe8,
	0xfe, 0xbd, 0x0e, 0x8f, 0xdf, 0xfb, 0xc5, 0x61, 0x13, 0xd8, 0x6a, 0x96, 0xe9, 0x19, 0x19, 0x78,
	0xfd, 0x70, 0x03, 0xef, 0xf9, 0x14, 0x65, 0x33, 0x75, 0xf6, 0x14, 0xc0, 0xa1, 0xaf, 0x2b, 0xf2,
	0x22, 0x3d, 0xa7, 0x7a, 0xb6, 0x09, 0x09, 0x2e, 0x84, 0xc6, 0xab, 0x84, 0xa5, 0x7b, 0xb7, 0xfa,
	0x61, 0x7a, 0x49, 0x7e, 0x1c, 0xc6, 0xe0, 0x60, 0xe5, 0xf3, 0x94, 0xc1, 0x46, 0x70, 0x32, 0x7d,
	0x45, 0x1b, 0xff, 0xe6, 0xe1, 0x1b, 0x0f, 0x2a, 0x19, 0x69, 0x31, 0x09, 0xb0, 0xb8, 0x89, 0xe9,
	0x57, 0xa4, 0xfc, 0xfd, 0xc3, 0x95, 0x17, 0x5a, 0xd9, 0x92, 0x2e, 0x1b, 0x43, 0x12, 0xfb, 0xb7,
	0xb6, 0x34, 0x0d, 0xd2, 0xaf, 0xff, 0x6f, 0xf3, 0x46, 0xb9, 0x6c, 0x55, 0x76, 0xb4, 0x49, 0x3f,
	0x2a, 0xe7, 0xff, 0x04, 0x00, 0x00, 0xff, 0xff, 0x92, 0xb7, 0xee, 0x2d, 0xcb, 0x08, 0x00, 0x00,
}
