/*
Copyright 2019 Cisco Systems

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rip_show_statistics_bd.proto

package cisco_ios_xr_ip_rip_oper_rip_vrfs_vrf_statistics

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type RipShowStatisticsBd_KEYS struct {
	VrfName              string   `protobuf:"bytes,1,opt,name=vrf_name,json=vrfName,proto3" json:"vrf_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RipShowStatisticsBd_KEYS) Reset()         { *m = RipShowStatisticsBd_KEYS{} }
func (m *RipShowStatisticsBd_KEYS) String() string { return proto.CompactTextString(m) }
func (*RipShowStatisticsBd_KEYS) ProtoMessage()    {}
func (*RipShowStatisticsBd_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_66227cbf5e51e264, []int{0}
}

func (m *RipShowStatisticsBd_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RipShowStatisticsBd_KEYS.Unmarshal(m, b)
}
func (m *RipShowStatisticsBd_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RipShowStatisticsBd_KEYS.Marshal(b, m, deterministic)
}
func (m *RipShowStatisticsBd_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RipShowStatisticsBd_KEYS.Merge(m, src)
}
func (m *RipShowStatisticsBd_KEYS) XXX_Size() int {
	return xxx_messageInfo_RipShowStatisticsBd_KEYS.Size(m)
}
func (m *RipShowStatisticsBd_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_RipShowStatisticsBd_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_RipShowStatisticsBd_KEYS proto.InternalMessageInfo

func (m *RipShowStatisticsBd_KEYS) GetVrfName() string {
	if m != nil {
		return m.VrfName
	}
	return ""
}

type RipShowStatisticsBd struct {
	ReceivedPackets        uint32   `protobuf:"varint,50,opt,name=received_packets,json=receivedPackets,proto3" json:"received_packets,omitempty"`
	DiscardedPackets       uint32   `protobuf:"varint,51,opt,name=discarded_packets,json=discardedPackets,proto3" json:"discarded_packets,omitempty"`
	DiscardedRoutes        uint32   `protobuf:"varint,52,opt,name=discarded_routes,json=discardedRoutes,proto3" json:"discarded_routes,omitempty"`
	StandbyPacketsReceived uint32   `protobuf:"varint,53,opt,name=standby_packets_received,json=standbyPacketsReceived,proto3" json:"standby_packets_received,omitempty"`
	SentMessages           uint32   `protobuf:"varint,54,opt,name=sent_messages,json=sentMessages,proto3" json:"sent_messages,omitempty"`
	SentMessageFailures    uint32   `protobuf:"varint,55,opt,name=sent_message_failures,json=sentMessageFailures,proto3" json:"sent_message_failures,omitempty"`
	QueryResponses         uint32   `protobuf:"varint,56,opt,name=query_responses,json=queryResponses,proto3" json:"query_responses,omitempty"`
	PeriodicUpdates        uint32   `protobuf:"varint,57,opt,name=periodic_updates,json=periodicUpdates,proto3" json:"periodic_updates,omitempty"`
	RouteCount             uint32   `protobuf:"varint,58,opt,name=route_count,json=routeCount,proto3" json:"route_count,omitempty"`
	PathCount              uint32   `protobuf:"varint,59,opt,name=path_count,json=pathCount,proto3" json:"path_count,omitempty"`
	RouteMallocFailures    uint32   `protobuf:"varint,60,opt,name=route_malloc_failures,json=routeMallocFailures,proto3" json:"route_malloc_failures,omitempty"`
	PathMallocFailures     uint32   `protobuf:"varint,61,opt,name=path_malloc_failures,json=pathMallocFailures,proto3" json:"path_malloc_failures,omitempty"`
	RibUpdates             uint32   `protobuf:"varint,62,opt,name=rib_updates,json=ribUpdates,proto3" json:"rib_updates,omitempty"`
	XXX_NoUnkeyedLiteral   struct{} `json:"-"`
	XXX_unrecognized       []byte   `json:"-"`
	XXX_sizecache          int32    `json:"-"`
}

func (m *RipShowStatisticsBd) Reset()         { *m = RipShowStatisticsBd{} }
func (m *RipShowStatisticsBd) String() string { return proto.CompactTextString(m) }
func (*RipShowStatisticsBd) ProtoMessage()    {}
func (*RipShowStatisticsBd) Descriptor() ([]byte, []int) {
	return fileDescriptor_66227cbf5e51e264, []int{1}
}

func (m *RipShowStatisticsBd) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RipShowStatisticsBd.Unmarshal(m, b)
}
func (m *RipShowStatisticsBd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RipShowStatisticsBd.Marshal(b, m, deterministic)
}
func (m *RipShowStatisticsBd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RipShowStatisticsBd.Merge(m, src)
}
func (m *RipShowStatisticsBd) XXX_Size() int {
	return xxx_messageInfo_RipShowStatisticsBd.Size(m)
}
func (m *RipShowStatisticsBd) XXX_DiscardUnknown() {
	xxx_messageInfo_RipShowStatisticsBd.DiscardUnknown(m)
}

var xxx_messageInfo_RipShowStatisticsBd proto.InternalMessageInfo

func (m *RipShowStatisticsBd) GetReceivedPackets() uint32 {
	if m != nil {
		return m.ReceivedPackets
	}
	return 0
}

func (m *RipShowStatisticsBd) GetDiscardedPackets() uint32 {
	if m != nil {
		return m.DiscardedPackets
	}
	return 0
}

func (m *RipShowStatisticsBd) GetDiscardedRoutes() uint32 {
	if m != nil {
		return m.DiscardedRoutes
	}
	return 0
}

func (m *RipShowStatisticsBd) GetStandbyPacketsReceived() uint32 {
	if m != nil {
		return m.StandbyPacketsReceived
	}
	return 0
}

func (m *RipShowStatisticsBd) GetSentMessages() uint32 {
	if m != nil {
		return m.SentMessages
	}
	return 0
}

func (m *RipShowStatisticsBd) GetSentMessageFailures() uint32 {
	if m != nil {
		return m.SentMessageFailures
	}
	return 0
}

func (m *RipShowStatisticsBd) GetQueryResponses() uint32 {
	if m != nil {
		return m.QueryResponses
	}
	return 0
}

func (m *RipShowStatisticsBd) GetPeriodicUpdates() uint32 {
	if m != nil {
		return m.PeriodicUpdates
	}
	return 0
}

func (m *RipShowStatisticsBd) GetRouteCount() uint32 {
	if m != nil {
		return m.RouteCount
	}
	return 0
}

func (m *RipShowStatisticsBd) GetPathCount() uint32 {
	if m != nil {
		return m.PathCount
	}
	return 0
}

func (m *RipShowStatisticsBd) GetRouteMallocFailures() uint32 {
	if m != nil {
		return m.RouteMallocFailures
	}
	return 0
}

func (m *RipShowStatisticsBd) GetPathMallocFailures() uint32 {
	if m != nil {
		return m.PathMallocFailures
	}
	return 0
}

func (m *RipShowStatisticsBd) GetRibUpdates() uint32 {
	if m != nil {
		return m.RibUpdates
	}
	return 0
}

func init() {
	proto.RegisterType((*RipShowStatisticsBd_KEYS)(nil), "cisco_ios_xr_ip_rip_oper.rip.vrfs.vrf.statistics.rip_show_statistics_bd_KEYS")
	proto.RegisterType((*RipShowStatisticsBd)(nil), "cisco_ios_xr_ip_rip_oper.rip.vrfs.vrf.statistics.rip_show_statistics_bd")
}

func init() { proto.RegisterFile("rip_show_statistics_bd.proto", fileDescriptor_66227cbf5e51e264) }

var fileDescriptor_66227cbf5e51e264 = []byte{
	// 403 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x92, 0x4b, 0x6b, 0x14, 0x41,
	0x10, 0xc7, 0x59, 0x10, 0x35, 0xa5, 0x31, 0xb1, 0x35, 0xa1, 0x45, 0xc5, 0x10, 0x0f, 0x26, 0x08,
	0x4b, 0xd8, 0xf8, 0x58, 0x9f, 0x17, 0xd1, 0x8b, 0x44, 0x64, 0xc4, 0x83, 0xa7, 0xa2, 0xa7, 0xa7,
	0xd6, 0x34, 0xee, 0x4e, 0xb7, 0x5d, 0x3d, 0xab, 0xf9, 0x88, 0x7e, 0x2b, 0xe9, 0x9a, 0xc7, 0x2e,
	0x61, 0x2f, 0x73, 0xf8, 0xfd, 0x1f, 0x53, 0xff, 0x61, 0xe0, 0x41, 0x74, 0x01, 0xf9, 0xdc, 0xff,
	0x41, 0x4e, 0x26, 0x39, 0x4e, 0xce, 0x32, 0x96, 0xd5, 0x38, 0x44, 0x9f, 0xbc, 0x3a, 0xb1, 0x8e,
	0xad, 0x47, 0xe7, 0x19, 0xff, 0x46, 0x74, 0x01, 0xb3, 0xdb, 0x07, 0x8a, 0xe3, 0xe8, 0xc2, 0x78,
	0x19, 0x67, 0x9c, 0x1f, 0xe3, 0x55, 0xf4, 0x70, 0x0a, 0xf7, 0x37, 0x37, 0xe2, 0xe7, 0x8f, 0x3f,
	0xbe, 0xa9, 0x7b, 0x70, 0x7d, 0x19, 0x67, 0x58, 0x9b, 0x05, 0xe9, 0xd1, 0xc1, 0xe8, 0x68, 0xab,
	0xb8, 0xb6, 0x8c, 0xb3, 0x2f, 0x66, 0x41, 0x87, 0xff, 0xae, 0xc0, 0xfe, 0xe6, 0xa8, 0x3a, 0x86,
	0xdd, 0x48, 0x96, 0xdc, 0x92, 0x2a, 0x0c, 0xc6, 0xfe, 0xa2, 0xc4, 0x7a, 0x72, 0x30, 0x3a, 0xda,
	0x2e, 0x76, 0x7a, 0xfe, 0xb5, 0xc5, 0xea, 0x29, 0xdc, 0xae, 0x1c, 0x5b, 0x13, 0xab, 0x35, 0xef,
	0xa9, 0x78, 0x77, 0x07, 0xa1, 0x37, 0x1f, 0xc3, 0x8a, 0x61, 0xf4, 0x4d, 0x22, 0xd6, 0xcf, 0xda,
	0xde, 0x81, 0x17, 0x82, 0xd5, 0x14, 0x34, 0x27, 0x53, 0x57, 0xe5, 0x45, 0xdf, 0x8a, 0xfd, 0xab,
	0xf5, 0x73, 0x89, 0xec, 0x77, 0x7a, 0x57, 0x5e, 0x74, 0xaa, 0x7a, 0x0c, 0xdb, 0x4c, 0x75, 0xc2,
	0x05, 0x31, 0x9b, 0x9f, 0xc4, 0xfa, 0x85, 0xd8, 0x6f, 0x66, 0x78, 0xd6, 0x31, 0x35, 0x81, 0xbd,
	0x75, 0x13, 0xce, 0x8c, 0x9b, 0x37, 0x91, 0x58, 0xbf, 0x14, 0xf3, 0x9d, 0x35, 0xf3, 0xa7, 0x4e,
	0x52, 0x4f, 0x60, 0xe7, 0x77, 0x43, 0xf1, 0x02, 0x23, 0x71, 0xf0, 0x35, 0x13, 0xeb, 0xa9, 0xb8,
	0x6f, 0x09, 0x2e, 0x7a, 0x9a, 0x67, 0x06, 0x8a, 0xce, 0x57, 0xce, 0x62, 0x13, 0x2a, 0x93, 0x67,
	0xbe, 0x6a, 0x67, 0xf6, 0xfc, 0x7b, 0x8b, 0xd5, 0x23, 0xb8, 0x21, 0xdf, 0x01, 0xad, 0x6f, 0xea,
	0xa4, 0x5f, 0x8b, 0x0b, 0x04, 0x7d, 0xc8, 0x44, 0x3d, 0x04, 0x08, 0x26, 0x9d, 0x77, 0xfa, 0x1b,
	0xd1, 0xb7, 0x32, 0x69, 0xe5, 0x09, 0xec, 0xb5, 0xf9, 0x85, 0x99, 0xcf, 0xbd, 0x5d, 0xed, 0x78,
	0xdb, 0xee, 0x10, 0xf1, 0x4c, 0xb4, 0x61, 0xc7, 0x09, 0xdc, 0x95, 0xca, 0xcb, 0x91, 0x77, 0x12,
	0x51, 0x59, 0xbb, 0x94, 0xc8, 0x57, 0xba, 0x72, 0xd8, 0xf2, 0xbe, 0xbb, 0xd2, 0x95, 0xdd, 0x8c,
	0xf2, 0xaa, 0xfc, 0xbe, 0xa7, 0xff, 0x03, 0x00, 0x00, 0xff, 0xff, 0x50, 0xf3, 0x14, 0x7d, 0xde,
	0x02, 0x00, 0x00,
}
