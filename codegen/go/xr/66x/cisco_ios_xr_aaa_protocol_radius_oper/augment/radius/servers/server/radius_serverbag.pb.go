/*
Copyright 2019 Cisco Systems

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: radius_serverbag.proto

package cisco_ios_xr_aaa_protocol_radius_oper_augment_radius_servers_server

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type RadiusServerbag_KEYS struct {
	IpAddress            string   `protobuf:"bytes,1,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
	AuthPortNumber       uint32   `protobuf:"varint,2,opt,name=auth_port_number,json=authPortNumber,proto3" json:"auth_port_number,omitempty"`
	AcctPortNumber       uint32   `protobuf:"varint,3,opt,name=acct_port_number,json=acctPortNumber,proto3" json:"acct_port_number,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RadiusServerbag_KEYS) Reset()         { *m = RadiusServerbag_KEYS{} }
func (m *RadiusServerbag_KEYS) String() string { return proto.CompactTextString(m) }
func (*RadiusServerbag_KEYS) ProtoMessage()    {}
func (*RadiusServerbag_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_b55fc6a6d596a4ac, []int{0}
}

func (m *RadiusServerbag_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RadiusServerbag_KEYS.Unmarshal(m, b)
}
func (m *RadiusServerbag_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RadiusServerbag_KEYS.Marshal(b, m, deterministic)
}
func (m *RadiusServerbag_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RadiusServerbag_KEYS.Merge(m, src)
}
func (m *RadiusServerbag_KEYS) XXX_Size() int {
	return xxx_messageInfo_RadiusServerbag_KEYS.Size(m)
}
func (m *RadiusServerbag_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_RadiusServerbag_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_RadiusServerbag_KEYS proto.InternalMessageInfo

func (m *RadiusServerbag_KEYS) GetIpAddress() string {
	if m != nil {
		return m.IpAddress
	}
	return ""
}

func (m *RadiusServerbag_KEYS) GetAuthPortNumber() uint32 {
	if m != nil {
		return m.AuthPortNumber
	}
	return 0
}

func (m *RadiusServerbag_KEYS) GetAcctPortNumber() uint32 {
	if m != nil {
		return m.AcctPortNumber
	}
	return 0
}

type RadiusServerbag struct {
	Ipv4Address                  string   `protobuf:"bytes,50,opt,name=ipv4_address,json=ipv4Address,proto3" json:"ipv4_address,omitempty"`
	Priority                     uint32   `protobuf:"varint,51,opt,name=priority,proto3" json:"priority,omitempty"`
	TimeoutXr                    uint32   `protobuf:"varint,52,opt,name=timeout_xr,json=timeoutXr,proto3" json:"timeout_xr,omitempty"`
	Retransmit                   uint32   `protobuf:"varint,53,opt,name=retransmit,proto3" json:"retransmit,omitempty"`
	DeadTime                     uint32   `protobuf:"varint,54,opt,name=dead_time,json=deadTime,proto3" json:"dead_time,omitempty"`
	DeadDetectTime               uint32   `protobuf:"varint,55,opt,name=dead_detect_time,json=deadDetectTime,proto3" json:"dead_detect_time,omitempty"`
	DeadDetectTries              uint32   `protobuf:"varint,56,opt,name=dead_detect_tries,json=deadDetectTries,proto3" json:"dead_detect_tries,omitempty"`
	AuthenticationPort           uint32   `protobuf:"varint,57,opt,name=authentication_port,json=authenticationPort,proto3" json:"authentication_port,omitempty"`
	AccountingPort               uint32   `protobuf:"varint,58,opt,name=accounting_port,json=accountingPort,proto3" json:"accounting_port,omitempty"`
	State                        string   `protobuf:"bytes,59,opt,name=state,proto3" json:"state,omitempty"`
	CurrentStateDuration         uint32   `protobuf:"varint,60,opt,name=current_state_duration,json=currentStateDuration,proto3" json:"current_state_duration,omitempty"`
	PreviousStateDuration        uint32   `protobuf:"varint,61,opt,name=previous_state_duration,json=previousStateDuration,proto3" json:"previous_state_duration,omitempty"`
	PacketsIn                    uint32   `protobuf:"varint,62,opt,name=packets_in,json=packetsIn,proto3" json:"packets_in,omitempty"`
	PacketsOut                   uint32   `protobuf:"varint,63,opt,name=packets_out,json=packetsOut,proto3" json:"packets_out,omitempty"`
	Timeouts                     uint32   `protobuf:"varint,64,opt,name=timeouts,proto3" json:"timeouts,omitempty"`
	Aborts                       uint32   `protobuf:"varint,65,opt,name=aborts,proto3" json:"aborts,omitempty"`
	RepliesExpected              uint32   `protobuf:"varint,66,opt,name=replies_expected,json=repliesExpected,proto3" json:"replies_expected,omitempty"`
	RedirectedRequests           uint32   `protobuf:"varint,67,opt,name=redirected_requests,json=redirectedRequests,proto3" json:"redirected_requests,omitempty"`
	AuthenticationRtt            uint32   `protobuf:"varint,68,opt,name=authentication_rtt,json=authenticationRtt,proto3" json:"authentication_rtt,omitempty"`
	AccessRequests               uint32   `protobuf:"varint,69,opt,name=access_requests,json=accessRequests,proto3" json:"access_requests,omitempty"`
	AccessRequestRetransmits     uint32   `protobuf:"varint,70,opt,name=access_request_retransmits,json=accessRequestRetransmits,proto3" json:"access_request_retransmits,omitempty"`
	AccessAccepts                uint32   `protobuf:"varint,71,opt,name=access_accepts,json=accessAccepts,proto3" json:"access_accepts,omitempty"`
	AccessRejects                uint32   `protobuf:"varint,72,opt,name=access_rejects,json=accessRejects,proto3" json:"access_rejects,omitempty"`
	AccessChallenges             uint32   `protobuf:"varint,73,opt,name=access_challenges,json=accessChallenges,proto3" json:"access_challenges,omitempty"`
	BadAccessResponses           uint32   `protobuf:"varint,74,opt,name=bad_access_responses,json=badAccessResponses,proto3" json:"bad_access_responses,omitempty"`
	BadAccessAuthenticators      uint32   `protobuf:"varint,75,opt,name=bad_access_authenticators,json=badAccessAuthenticators,proto3" json:"bad_access_authenticators,omitempty"`
	PendingAccessRequests        uint32   `protobuf:"varint,76,opt,name=pending_access_requests,json=pendingAccessRequests,proto3" json:"pending_access_requests,omitempty"`
	AccessTimeouts               uint32   `protobuf:"varint,77,opt,name=access_timeouts,json=accessTimeouts,proto3" json:"access_timeouts,omitempty"`
	UnknownAccessTypes           uint32   `protobuf:"varint,78,opt,name=unknown_access_types,json=unknownAccessTypes,proto3" json:"unknown_access_types,omitempty"`
	DroppedAccessResponses       uint32   `protobuf:"varint,79,opt,name=dropped_access_responses,json=droppedAccessResponses,proto3" json:"dropped_access_responses,omitempty"`
	ThrottledAccessReqs          uint32   `protobuf:"varint,80,opt,name=throttled_access_reqs,json=throttledAccessReqs,proto3" json:"throttled_access_reqs,omitempty"`
	ThrottledTimedOutReqs        uint32   `protobuf:"varint,81,opt,name=throttled_timed_out_reqs,json=throttledTimedOutReqs,proto3" json:"throttled_timed_out_reqs,omitempty"`
	ThrottledDroppedReqs         uint32   `protobuf:"varint,82,opt,name=throttled_dropped_reqs,json=throttledDroppedReqs,proto3" json:"throttled_dropped_reqs,omitempty"`
	MaxThrottledAccessReqs       uint32   `protobuf:"varint,83,opt,name=max_throttled_access_reqs,json=maxThrottledAccessReqs,proto3" json:"max_throttled_access_reqs,omitempty"`
	CurrentlyThrottledAccessReqs uint32   `protobuf:"varint,84,opt,name=currently_throttled_access_reqs,json=currentlyThrottledAccessReqs,proto3" json:"currently_throttled_access_reqs,omitempty"`
	AuthenResponseTime           uint32   `protobuf:"varint,85,opt,name=authen_response_time,json=authenResponseTime,proto3" json:"authen_response_time,omitempty"`
	AuthenTransactionSuccessess  uint32   `protobuf:"varint,86,opt,name=authen_transaction_successess,json=authenTransactionSuccessess,proto3" json:"authen_transaction_successess,omitempty"`
	AuthenTransactionFailure     uint32   `protobuf:"varint,87,opt,name=authen_transaction_failure,json=authenTransactionFailure,proto3" json:"authen_transaction_failure,omitempty"`
	AuthenUnexpectedResponses    uint32   `protobuf:"varint,88,opt,name=authen_unexpected_responses,json=authenUnexpectedResponses,proto3" json:"authen_unexpected_responses,omitempty"`
	AuthenServerErrorResponses   uint32   `protobuf:"varint,89,opt,name=authen_server_error_responses,json=authenServerErrorResponses,proto3" json:"authen_server_error_responses,omitempty"`
	AuthenIncorrectResponses     uint32   `protobuf:"varint,90,opt,name=authen_incorrect_responses,json=authenIncorrectResponses,proto3" json:"authen_incorrect_responses,omitempty"`
	AuthorRequests               uint32   `protobuf:"varint,91,opt,name=author_requests,json=authorRequests,proto3" json:"author_requests,omitempty"`
	AuthorRequestTimeouts        uint32   `protobuf:"varint,92,opt,name=author_request_timeouts,json=authorRequestTimeouts,proto3" json:"author_request_timeouts,omitempty"`
	AuthorResponseTime           uint32   `protobuf:"varint,93,opt,name=author_response_time,json=authorResponseTime,proto3" json:"author_response_time,omitempty"`
	AuthorTransactionSuccessess  uint32   `protobuf:"varint,94,opt,name=author_transaction_successess,json=authorTransactionSuccessess,proto3" json:"author_transaction_successess,omitempty"`
	AuthorTransactionFailure     uint32   `protobuf:"varint,95,opt,name=author_transaction_failure,json=authorTransactionFailure,proto3" json:"author_transaction_failure,omitempty"`
	AuthorUnexpectedResponses    uint32   `protobuf:"varint,96,opt,name=author_unexpected_responses,json=authorUnexpectedResponses,proto3" json:"author_unexpected_responses,omitempty"`
	AuthorServerErrorResponses   uint32   `protobuf:"varint,97,opt,name=author_server_error_responses,json=authorServerErrorResponses,proto3" json:"author_server_error_responses,omitempty"`
	AuthorIncorrectResponses     uint32   `protobuf:"varint,98,opt,name=author_incorrect_responses,json=authorIncorrectResponses,proto3" json:"author_incorrect_responses,omitempty"`
	AccountingRtt                uint32   `protobuf:"varint,99,opt,name=accounting_rtt,json=accountingRtt,proto3" json:"accounting_rtt,omitempty"`
	AccountingRequests           uint32   `protobuf:"varint,100,opt,name=accounting_requests,json=accountingRequests,proto3" json:"accounting_requests,omitempty"`
	AccountingRetransmits        uint32   `protobuf:"varint,101,opt,name=accounting_retransmits,json=accountingRetransmits,proto3" json:"accounting_retransmits,omitempty"`
	AccountingResponses          uint32   `protobuf:"varint,102,opt,name=accounting_responses,json=accountingResponses,proto3" json:"accounting_responses,omitempty"`
	BadAccountingResponses       uint32   `protobuf:"varint,103,opt,name=bad_accounting_responses,json=badAccountingResponses,proto3" json:"bad_accounting_responses,omitempty"`
	BadAccountingAuthenticators  uint32   `protobuf:"varint,104,opt,name=bad_accounting_authenticators,json=badAccountingAuthenticators,proto3" json:"bad_accounting_authenticators,omitempty"`
	PendingAccountingRequets     uint32   `protobuf:"varint,105,opt,name=pending_accounting_requets,json=pendingAccountingRequets,proto3" json:"pending_accounting_requets,omitempty"`
	AccountingTimeouts           uint32   `protobuf:"varint,106,opt,name=accounting_timeouts,json=accountingTimeouts,proto3" json:"accounting_timeouts,omitempty"`
	UnknownAccountingTypes       uint32   `protobuf:"varint,107,opt,name=unknown_accounting_types,json=unknownAccountingTypes,proto3" json:"unknown_accounting_types,omitempty"`
	DroppedAccountingResponses   uint32   `protobuf:"varint,108,opt,name=dropped_accounting_responses,json=droppedAccountingResponses,proto3" json:"dropped_accounting_responses,omitempty"`
	IsAPrivateServer             bool     `protobuf:"varint,109,opt,name=is_a_private_server,json=isAPrivateServer,proto3" json:"is_a_private_server,omitempty"`
	TotalTestAuthReqs            uint32   `protobuf:"varint,110,opt,name=total_test_auth_reqs,json=totalTestAuthReqs,proto3" json:"total_test_auth_reqs,omitempty"`
	TotalTestAuthTimeouts        uint32   `protobuf:"varint,111,opt,name=total_test_auth_timeouts,json=totalTestAuthTimeouts,proto3" json:"total_test_auth_timeouts,omitempty"`
	TotalTestAuthResponse        uint32   `protobuf:"varint,112,opt,name=total_test_auth_response,json=totalTestAuthResponse,proto3" json:"total_test_auth_response,omitempty"`
	TotalTestAuthPending         uint32   `protobuf:"varint,113,opt,name=total_test_auth_pending,json=totalTestAuthPending,proto3" json:"total_test_auth_pending,omitempty"`
	TotalTestAcctReqs            uint32   `protobuf:"varint,114,opt,name=total_test_acct_reqs,json=totalTestAcctReqs,proto3" json:"total_test_acct_reqs,omitempty"`
	TotalTestAcctTimeouts        uint32   `protobuf:"varint,115,opt,name=total_test_acct_timeouts,json=totalTestAcctTimeouts,proto3" json:"total_test_acct_timeouts,omitempty"`
	TotalTestAcctResponse        uint32   `protobuf:"varint,116,opt,name=total_test_acct_response,json=totalTestAcctResponse,proto3" json:"total_test_acct_response,omitempty"`
	TotalTestAcctPending         uint32   `protobuf:"varint,117,opt,name=total_test_acct_pending,json=totalTestAcctPending,proto3" json:"total_test_acct_pending,omitempty"`
	ThrottledAcctTransactions    uint32   `protobuf:"varint,118,opt,name=throttled_acct_transactions,json=throttledAcctTransactions,proto3" json:"throttled_acct_transactions,omitempty"`
	ThrottledAcctTimedOutStats   uint32   `protobuf:"varint,119,opt,name=throttled_acct_timed_out_stats,json=throttledAcctTimedOutStats,proto3" json:"throttled_acct_timed_out_stats,omitempty"`
	ThrottledAcctFailuresStats   uint32   `protobuf:"varint,120,opt,name=throttled_acct_failures_stats,json=throttledAcctFailuresStats,proto3" json:"throttled_acct_failures_stats,omitempty"`
	MaxAcctThrottled             uint32   `protobuf:"varint,121,opt,name=max_acct_throttled,json=maxAcctThrottled,proto3" json:"max_acct_throttled,omitempty"`
	ThrottledaAcctTransactions   uint32   `protobuf:"varint,122,opt,name=throttleda_acct_transactions,json=throttledaAcctTransactions,proto3" json:"throttleda_acct_transactions,omitempty"`
	AcctUnexpectedResponses      uint32   `protobuf:"varint,123,opt,name=acct_unexpected_responses,json=acctUnexpectedResponses,proto3" json:"acct_unexpected_responses,omitempty"`
	AcctServerErrorResponses     uint32   `protobuf:"varint,124,opt,name=acct_server_error_responses,json=acctServerErrorResponses,proto3" json:"acct_server_error_responses,omitempty"`
	AcctIncorrectResponses       uint32   `protobuf:"varint,125,opt,name=acct_incorrect_responses,json=acctIncorrectResponses,proto3" json:"acct_incorrect_responses,omitempty"`
	AcctResponseTime             uint32   `protobuf:"varint,126,opt,name=acct_response_time,json=acctResponseTime,proto3" json:"acct_response_time,omitempty"`
	AcctTransactionSuccessess    uint32   `protobuf:"varint,127,opt,name=acct_transaction_successess,json=acctTransactionSuccessess,proto3" json:"acct_transaction_successess,omitempty"`
	AcctTransactionFailure       uint32   `protobuf:"varint,128,opt,name=acct_transaction_failure,json=acctTransactionFailure,proto3" json:"acct_transaction_failure,omitempty"`
	TotalDeadtime                uint32   `protobuf:"varint,129,opt,name=total_deadtime,json=totalDeadtime,proto3" json:"total_deadtime,omitempty"`
	LastDeadtime                 uint32   `protobuf:"varint,130,opt,name=last_deadtime,json=lastDeadtime,proto3" json:"last_deadtime,omitempty"`
	IsQuarantined                bool     `protobuf:"varint,131,opt,name=is_quarantined,json=isQuarantined,proto3" json:"is_quarantined,omitempty"`
	GroupName                    string   `protobuf:"bytes,132,opt,name=group_name,json=groupName,proto3" json:"group_name,omitempty"`
	IpAddressXr                  string   `protobuf:"bytes,133,opt,name=ip_address_xr,json=ipAddressXr,proto3" json:"ip_address_xr,omitempty"`
	Family                       string   `protobuf:"bytes,134,opt,name=family,proto3" json:"family,omitempty"`
	XXX_NoUnkeyedLiteral         struct{} `json:"-"`
	XXX_unrecognized             []byte   `json:"-"`
	XXX_sizecache                int32    `json:"-"`
}

func (m *RadiusServerbag) Reset()         { *m = RadiusServerbag{} }
func (m *RadiusServerbag) String() string { return proto.CompactTextString(m) }
func (*RadiusServerbag) ProtoMessage()    {}
func (*RadiusServerbag) Descriptor() ([]byte, []int) {
	return fileDescriptor_b55fc6a6d596a4ac, []int{1}
}

func (m *RadiusServerbag) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RadiusServerbag.Unmarshal(m, b)
}
func (m *RadiusServerbag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RadiusServerbag.Marshal(b, m, deterministic)
}
func (m *RadiusServerbag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RadiusServerbag.Merge(m, src)
}
func (m *RadiusServerbag) XXX_Size() int {
	return xxx_messageInfo_RadiusServerbag.Size(m)
}
func (m *RadiusServerbag) XXX_DiscardUnknown() {
	xxx_messageInfo_RadiusServerbag.DiscardUnknown(m)
}

var xxx_messageInfo_RadiusServerbag proto.InternalMessageInfo

func (m *RadiusServerbag) GetIpv4Address() string {
	if m != nil {
		return m.Ipv4Address
	}
	return ""
}

func (m *RadiusServerbag) GetPriority() uint32 {
	if m != nil {
		return m.Priority
	}
	return 0
}

func (m *RadiusServerbag) GetTimeoutXr() uint32 {
	if m != nil {
		return m.TimeoutXr
	}
	return 0
}

func (m *RadiusServerbag) GetRetransmit() uint32 {
	if m != nil {
		return m.Retransmit
	}
	return 0
}

func (m *RadiusServerbag) GetDeadTime() uint32 {
	if m != nil {
		return m.DeadTime
	}
	return 0
}

func (m *RadiusServerbag) GetDeadDetectTime() uint32 {
	if m != nil {
		return m.DeadDetectTime
	}
	return 0
}

func (m *RadiusServerbag) GetDeadDetectTries() uint32 {
	if m != nil {
		return m.DeadDetectTries
	}
	return 0
}

func (m *RadiusServerbag) GetAuthenticationPort() uint32 {
	if m != nil {
		return m.AuthenticationPort
	}
	return 0
}

func (m *RadiusServerbag) GetAccountingPort() uint32 {
	if m != nil {
		return m.AccountingPort
	}
	return 0
}

func (m *RadiusServerbag) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *RadiusServerbag) GetCurrentStateDuration() uint32 {
	if m != nil {
		return m.CurrentStateDuration
	}
	return 0
}

func (m *RadiusServerbag) GetPreviousStateDuration() uint32 {
	if m != nil {
		return m.PreviousStateDuration
	}
	return 0
}

func (m *RadiusServerbag) GetPacketsIn() uint32 {
	if m != nil {
		return m.PacketsIn
	}
	return 0
}

func (m *RadiusServerbag) GetPacketsOut() uint32 {
	if m != nil {
		return m.PacketsOut
	}
	return 0
}

func (m *RadiusServerbag) GetTimeouts() uint32 {
	if m != nil {
		return m.Timeouts
	}
	return 0
}

func (m *RadiusServerbag) GetAborts() uint32 {
	if m != nil {
		return m.Aborts
	}
	return 0
}

func (m *RadiusServerbag) GetRepliesExpected() uint32 {
	if m != nil {
		return m.RepliesExpected
	}
	return 0
}

func (m *RadiusServerbag) GetRedirectedRequests() uint32 {
	if m != nil {
		return m.RedirectedRequests
	}
	return 0
}

func (m *RadiusServerbag) GetAuthenticationRtt() uint32 {
	if m != nil {
		return m.AuthenticationRtt
	}
	return 0
}

func (m *RadiusServerbag) GetAccessRequests() uint32 {
	if m != nil {
		return m.AccessRequests
	}
	return 0
}

func (m *RadiusServerbag) GetAccessRequestRetransmits() uint32 {
	if m != nil {
		return m.AccessRequestRetransmits
	}
	return 0
}

func (m *RadiusServerbag) GetAccessAccepts() uint32 {
	if m != nil {
		return m.AccessAccepts
	}
	return 0
}

func (m *RadiusServerbag) GetAccessRejects() uint32 {
	if m != nil {
		return m.AccessRejects
	}
	return 0
}

func (m *RadiusServerbag) GetAccessChallenges() uint32 {
	if m != nil {
		return m.AccessChallenges
	}
	return 0
}

func (m *RadiusServerbag) GetBadAccessResponses() uint32 {
	if m != nil {
		return m.BadAccessResponses
	}
	return 0
}

func (m *RadiusServerbag) GetBadAccessAuthenticators() uint32 {
	if m != nil {
		return m.BadAccessAuthenticators
	}
	return 0
}

func (m *RadiusServerbag) GetPendingAccessRequests() uint32 {
	if m != nil {
		return m.PendingAccessRequests
	}
	return 0
}

func (m *RadiusServerbag) GetAccessTimeouts() uint32 {
	if m != nil {
		return m.AccessTimeouts
	}
	return 0
}

func (m *RadiusServerbag) GetUnknownAccessTypes() uint32 {
	if m != nil {
		return m.UnknownAccessTypes
	}
	return 0
}

func (m *RadiusServerbag) GetDroppedAccessResponses() uint32 {
	if m != nil {
		return m.DroppedAccessResponses
	}
	return 0
}

func (m *RadiusServerbag) GetThrottledAccessReqs() uint32 {
	if m != nil {
		return m.ThrottledAccessReqs
	}
	return 0
}

func (m *RadiusServerbag) GetThrottledTimedOutReqs() uint32 {
	if m != nil {
		return m.ThrottledTimedOutReqs
	}
	return 0
}

func (m *RadiusServerbag) GetThrottledDroppedReqs() uint32 {
	if m != nil {
		return m.ThrottledDroppedReqs
	}
	return 0
}

func (m *RadiusServerbag) GetMaxThrottledAccessReqs() uint32 {
	if m != nil {
		return m.MaxThrottledAccessReqs
	}
	return 0
}

func (m *RadiusServerbag) GetCurrentlyThrottledAccessReqs() uint32 {
	if m != nil {
		return m.CurrentlyThrottledAccessReqs
	}
	return 0
}

func (m *RadiusServerbag) GetAuthenResponseTime() uint32 {
	if m != nil {
		return m.AuthenResponseTime
	}
	return 0
}

func (m *RadiusServerbag) GetAuthenTransactionSuccessess() uint32 {
	if m != nil {
		return m.AuthenTransactionSuccessess
	}
	return 0
}

func (m *RadiusServerbag) GetAuthenTransactionFailure() uint32 {
	if m != nil {
		return m.AuthenTransactionFailure
	}
	return 0
}

func (m *RadiusServerbag) GetAuthenUnexpectedResponses() uint32 {
	if m != nil {
		return m.AuthenUnexpectedResponses
	}
	return 0
}

func (m *RadiusServerbag) GetAuthenServerErrorResponses() uint32 {
	if m != nil {
		return m.AuthenServerErrorResponses
	}
	return 0
}

func (m *RadiusServerbag) GetAuthenIncorrectResponses() uint32 {
	if m != nil {
		return m.AuthenIncorrectResponses
	}
	return 0
}

func (m *RadiusServerbag) GetAuthorRequests() uint32 {
	if m != nil {
		return m.AuthorRequests
	}
	return 0
}

func (m *RadiusServerbag) GetAuthorRequestTimeouts() uint32 {
	if m != nil {
		return m.AuthorRequestTimeouts
	}
	return 0
}

func (m *RadiusServerbag) GetAuthorResponseTime() uint32 {
	if m != nil {
		return m.AuthorResponseTime
	}
	return 0
}

func (m *RadiusServerbag) GetAuthorTransactionSuccessess() uint32 {
	if m != nil {
		return m.AuthorTransactionSuccessess
	}
	return 0
}

func (m *RadiusServerbag) GetAuthorTransactionFailure() uint32 {
	if m != nil {
		return m.AuthorTransactionFailure
	}
	return 0
}

func (m *RadiusServerbag) GetAuthorUnexpectedResponses() uint32 {
	if m != nil {
		return m.AuthorUnexpectedResponses
	}
	return 0
}

func (m *RadiusServerbag) GetAuthorServerErrorResponses() uint32 {
	if m != nil {
		return m.AuthorServerErrorResponses
	}
	return 0
}

func (m *RadiusServerbag) GetAuthorIncorrectResponses() uint32 {
	if m != nil {
		return m.AuthorIncorrectResponses
	}
	return 0
}

func (m *RadiusServerbag) GetAccountingRtt() uint32 {
	if m != nil {
		return m.AccountingRtt
	}
	return 0
}

func (m *RadiusServerbag) GetAccountingRequests() uint32 {
	if m != nil {
		return m.AccountingRequests
	}
	return 0
}

func (m *RadiusServerbag) GetAccountingRetransmits() uint32 {
	if m != nil {
		return m.AccountingRetransmits
	}
	return 0
}

func (m *RadiusServerbag) GetAccountingResponses() uint32 {
	if m != nil {
		return m.AccountingResponses
	}
	return 0
}

func (m *RadiusServerbag) GetBadAccountingResponses() uint32 {
	if m != nil {
		return m.BadAccountingResponses
	}
	return 0
}

func (m *RadiusServerbag) GetBadAccountingAuthenticators() uint32 {
	if m != nil {
		return m.BadAccountingAuthenticators
	}
	return 0
}

func (m *RadiusServerbag) GetPendingAccountingRequets() uint32 {
	if m != nil {
		return m.PendingAccountingRequets
	}
	return 0
}

func (m *RadiusServerbag) GetAccountingTimeouts() uint32 {
	if m != nil {
		return m.AccountingTimeouts
	}
	return 0
}

func (m *RadiusServerbag) GetUnknownAccountingTypes() uint32 {
	if m != nil {
		return m.UnknownAccountingTypes
	}
	return 0
}

func (m *RadiusServerbag) GetDroppedAccountingResponses() uint32 {
	if m != nil {
		return m.DroppedAccountingResponses
	}
	return 0
}

func (m *RadiusServerbag) GetIsAPrivateServer() bool {
	if m != nil {
		return m.IsAPrivateServer
	}
	return false
}

func (m *RadiusServerbag) GetTotalTestAuthReqs() uint32 {
	if m != nil {
		return m.TotalTestAuthReqs
	}
	return 0
}

func (m *RadiusServerbag) GetTotalTestAuthTimeouts() uint32 {
	if m != nil {
		return m.TotalTestAuthTimeouts
	}
	return 0
}

func (m *RadiusServerbag) GetTotalTestAuthResponse() uint32 {
	if m != nil {
		return m.TotalTestAuthResponse
	}
	return 0
}

func (m *RadiusServerbag) GetTotalTestAuthPending() uint32 {
	if m != nil {
		return m.TotalTestAuthPending
	}
	return 0
}

func (m *RadiusServerbag) GetTotalTestAcctReqs() uint32 {
	if m != nil {
		return m.TotalTestAcctReqs
	}
	return 0
}

func (m *RadiusServerbag) GetTotalTestAcctTimeouts() uint32 {
	if m != nil {
		return m.TotalTestAcctTimeouts
	}
	return 0
}

func (m *RadiusServerbag) GetTotalTestAcctResponse() uint32 {
	if m != nil {
		return m.TotalTestAcctResponse
	}
	return 0
}

func (m *RadiusServerbag) GetTotalTestAcctPending() uint32 {
	if m != nil {
		return m.TotalTestAcctPending
	}
	return 0
}

func (m *RadiusServerbag) GetThrottledAcctTransactions() uint32 {
	if m != nil {
		return m.ThrottledAcctTransactions
	}
	return 0
}

func (m *RadiusServerbag) GetThrottledAcctTimedOutStats() uint32 {
	if m != nil {
		return m.ThrottledAcctTimedOutStats
	}
	return 0
}

func (m *RadiusServerbag) GetThrottledAcctFailuresStats() uint32 {
	if m != nil {
		return m.ThrottledAcctFailuresStats
	}
	return 0
}

func (m *RadiusServerbag) GetMaxAcctThrottled() uint32 {
	if m != nil {
		return m.MaxAcctThrottled
	}
	return 0
}

func (m *RadiusServerbag) GetThrottledaAcctTransactions() uint32 {
	if m != nil {
		return m.ThrottledaAcctTransactions
	}
	return 0
}

func (m *RadiusServerbag) GetAcctUnexpectedResponses() uint32 {
	if m != nil {
		return m.AcctUnexpectedResponses
	}
	return 0
}

func (m *RadiusServerbag) GetAcctServerErrorResponses() uint32 {
	if m != nil {
		return m.AcctServerErrorResponses
	}
	return 0
}

func (m *RadiusServerbag) GetAcctIncorrectResponses() uint32 {
	if m != nil {
		return m.AcctIncorrectResponses
	}
	return 0
}

func (m *RadiusServerbag) GetAcctResponseTime() uint32 {
	if m != nil {
		return m.AcctResponseTime
	}
	return 0
}

func (m *RadiusServerbag) GetAcctTransactionSuccessess() uint32 {
	if m != nil {
		return m.AcctTransactionSuccessess
	}
	return 0
}

func (m *RadiusServerbag) GetAcctTransactionFailure() uint32 {
	if m != nil {
		return m.AcctTransactionFailure
	}
	return 0
}

func (m *RadiusServerbag) GetTotalDeadtime() uint32 {
	if m != nil {
		return m.TotalDeadtime
	}
	return 0
}

func (m *RadiusServerbag) GetLastDeadtime() uint32 {
	if m != nil {
		return m.LastDeadtime
	}
	return 0
}

func (m *RadiusServerbag) GetIsQuarantined() bool {
	if m != nil {
		return m.IsQuarantined
	}
	return false
}

func (m *RadiusServerbag) GetGroupName() string {
	if m != nil {
		return m.GroupName
	}
	return ""
}

func (m *RadiusServerbag) GetIpAddressXr() string {
	if m != nil {
		return m.IpAddressXr
	}
	return ""
}

func (m *RadiusServerbag) GetFamily() string {
	if m != nil {
		return m.Family
	}
	return ""
}

func init() {
	proto.RegisterType((*RadiusServerbag_KEYS)(nil), "cisco_ios_xr_aaa_protocol_radius_oper.augment.radius.servers.server.radius_serverbag_KEYS")
	proto.RegisterType((*RadiusServerbag)(nil), "cisco_ios_xr_aaa_protocol_radius_oper.augment.radius.servers.server.radius_serverbag")
}

func init() { proto.RegisterFile("radius_serverbag.proto", fileDescriptor_b55fc6a6d596a4ac) }

var fileDescriptor_b55fc6a6d596a4ac = []byte{
	// 1595 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x58, 0x7b, 0x77, 0xd4, 0x36,
	0x16, 0x3f, 0xb3, 0x7b, 0x96, 0x43, 0x2e, 0x04, 0x82, 0x08, 0x89, 0x42, 0x08, 0xaf, 0xdd, 0x65,
	0xb3, 0x2d, 0x04, 0x0a, 0x01, 0x02, 0x85, 0x94, 0x81, 0x84, 0x96, 0xd2, 0x42, 0x98, 0x84, 0x16,
	0xfa, 0x52, 0x15, 0x5b, 0x24, 0x86, 0x19, 0xcb, 0x91, 0xe4, 0x30, 0xe9, 0xfb, 0xfd, 0x47, 0x3f,
	0x67, 0x3f, 0x48, 0x8f, 0x1e, 0x96, 0x64, 0xc7, 0xe1, 0xaf, 0x39, 0xbe, 0xf7, 0xf7, 0xbb, 0xa3,
	0xfb, 0x96, 0x0d, 0x13, 0x82, 0xa6, 0x59, 0x29, 0x89, 0x64, 0x62, 0x9b, 0x89, 0x75, 0xba, 0x31,
	0x57, 0x08, 0xae, 0x38, 0xba, 0x97, 0x64, 0x32, 0xe1, 0x24, 0xe3, 0x92, 0x0c, 0x05, 0xa1, 0x94,
	0x12, 0x23, 0x4f, 0x78, 0x9f, 0x38, 0x06, 0x2f, 0x98, 0x98, 0xa3, 0xe5, 0xc6, 0x80, 0xe5, 0x6a,
	0xce, 0xca, 0xe6, 0xac, 0x95, 0xea, 0xf7, 0xec, 0x9f, 0x1d, 0x38, 0xd6, 0xb4, 0x4f, 0x1e, 0x2e,
	0x3f, 0x5f, 0x45, 0x33, 0x00, 0x59, 0x41, 0x68, 0x9a, 0x0a, 0x26, 0x25, 0xee, 0x9c, 0xee, 0xcc,
	0x8e, 0xf4, 0x46, 0xb2, 0xa2, 0x6b, 0x05, 0x68, 0x16, 0xc6, 0x68, 0xa9, 0x36, 0x49, 0xc1, 0x85,
	0x22, 0x79, 0x39, 0x58, 0x67, 0x02, 0xff, 0xe3, 0x74, 0x67, 0x76, 0xb4, 0x77, 0x48, 0xcb, 0x57,
	0xb8, 0x50, 0x8f, 0x8c, 0xd4, 0x20, 0x93, 0x44, 0xd5, 0x90, 0xff, 0x74, 0xc8, 0x24, 0x51, 0x01,
	0x79, 0xf6, 0xaf, 0x33, 0x30, 0xd6, 0x3c, 0x0c, 0x3a, 0x03, 0x07, 0xb3, 0x62, 0x7b, 0xde, 0x9f,
	0xe4, 0xb2, 0x39, 0xc9, 0x01, 0x2d, 0xab, 0xce, 0x72, 0x1c, 0xf6, 0x17, 0x22, 0xe3, 0x22, 0x53,
	0x3b, 0xf8, 0x8a, 0xb1, 0xec, 0x9f, 0xb5, 0x1b, 0x2a, 0x1b, 0x30, 0x5e, 0x2a, 0x32, 0x14, 0x78,
	0xde, 0x68, 0x47, 0x9c, 0xe4, 0x99, 0x40, 0x27, 0x01, 0x04, 0x53, 0x82, 0xe6, 0x72, 0x90, 0x29,
	0x7c, 0xd5, 0xa8, 0x23, 0x09, 0x9a, 0x86, 0x91, 0x94, 0xd1, 0x94, 0x68, 0x06, 0xbe, 0x66, 0x6d,
	0x6b, 0xc1, 0x5a, 0x36, 0x60, 0xda, 0x33, 0xa3, 0x4c, 0x99, 0x62, 0x89, 0xb2, 0x98, 0xeb, 0xd6,
	0x33, 0x2d, 0x5f, 0x32, 0x62, 0x83, 0x7c, 0x0b, 0x8e, 0xd4, 0x90, 0x22, 0x63, 0x12, 0x2f, 0x18,
	0xe8, 0xe1, 0x08, 0xaa, 0xc5, 0xe8, 0x22, 0x1c, 0xd5, 0x11, 0x64, 0xb9, 0xca, 0x12, 0xaa, 0x32,
	0x9e, 0x9b, 0xc8, 0xe1, 0x1b, 0x06, 0x8d, 0xea, 0x2a, 0x1d, 0x3c, 0xf4, 0x3f, 0x38, 0x4c, 0x93,
	0x84, 0x97, 0xb9, 0xca, 0xf2, 0x0d, 0x0b, 0xbe, 0xe9, 0xe3, 0xeb, 0xc4, 0x06, 0x38, 0x0e, 0xff,
	0x92, 0x8a, 0x2a, 0x86, 0xdf, 0x35, 0x31, 0xb4, 0x0f, 0x68, 0x1e, 0x26, 0x92, 0x52, 0x08, 0x96,
	0x2b, 0x62, 0x04, 0x24, 0x2d, 0x85, 0x31, 0x8e, 0x6f, 0x19, 0x2b, 0xe3, 0x4e, 0xbb, 0xaa, 0x95,
	0x4b, 0x4e, 0x87, 0xae, 0xc1, 0x64, 0x21, 0xd8, 0x76, 0xc6, 0x75, 0xb2, 0xea, 0xb4, 0xdb, 0x86,
	0x76, 0xac, 0x52, 0xd7, 0x79, 0x33, 0x00, 0x05, 0x4d, 0x5e, 0x31, 0x25, 0x49, 0x96, 0xe3, 0x45,
	0x9b, 0x0f, 0x27, 0x79, 0x90, 0xa3, 0x53, 0x70, 0xa0, 0x52, 0xf3, 0x52, 0xe1, 0xf7, 0x6c, 0x42,
	0x9c, 0xe8, 0x71, 0xa9, 0x74, 0xae, 0x5d, 0xf6, 0x24, 0xbe, 0x63, 0xf3, 0x51, 0x3d, 0xa3, 0x09,
	0xd8, 0x47, 0xd7, 0xb9, 0x50, 0x12, 0x77, 0x8d, 0xc6, 0x3d, 0xa1, 0xff, 0xc3, 0x98, 0x60, 0x45,
	0x3f, 0x63, 0x92, 0xb0, 0x61, 0xc1, 0x12, 0xc5, 0x52, 0x7c, 0xd7, 0x06, 0xdf, 0xc9, 0x97, 0x9d,
	0x58, 0x07, 0x5f, 0xb0, 0x34, 0x13, 0xe6, 0x89, 0x08, 0xb6, 0x55, 0x32, 0xa9, 0x24, 0xbe, 0x67,
	0x83, 0x1f, 0x54, 0x3d, 0xa7, 0x41, 0x17, 0xa0, 0x91, 0x12, 0x22, 0x94, 0xc2, 0x4b, 0x06, 0x7f,
	0xa4, 0xae, 0xe9, 0xa9, 0x2a, 0x57, 0x4c, 0xca, 0x60, 0x7b, 0xd9, 0xe7, 0x8a, 0x49, 0xe9, 0xed,
	0xde, 0x82, 0xe3, 0x75, 0x20, 0x09, 0x55, 0x29, 0xf1, 0x7d, 0xc3, 0xc1, 0x35, 0x4e, 0x2f, 0xe8,
	0xd1, 0x7f, 0xc1, 0xd9, 0x23, 0xfa, 0xa7, 0x50, 0x12, 0xbf, 0x6f, 0x18, 0xa3, 0x56, 0xda, 0xb5,
	0xc2, 0x08, 0x26, 0xd8, 0x4b, 0x96, 0x28, 0x89, 0x3f, 0x88, 0x61, 0x3d, 0x2b, 0x44, 0x6f, 0xc3,
	0x11, 0x07, 0x4b, 0x36, 0x69, 0xbf, 0xcf, 0xf2, 0x0d, 0x26, 0xf1, 0x03, 0x83, 0x1c, 0xb3, 0x8a,
	0x7b, 0x5e, 0x8e, 0x2e, 0xc1, 0xf8, 0x3a, 0x4d, 0x89, 0xb7, 0x2b, 0x0b, 0x9e, 0x4b, 0x26, 0xf1,
	0x87, 0x36, 0x84, 0xeb, 0x34, 0xed, 0x3a, 0xe3, 0x4e, 0x83, 0x6e, 0xc2, 0x54, 0xc4, 0x88, 0x62,
	0xc6, 0x85, 0xc4, 0x0f, 0x0d, 0x6d, 0xd2, 0xd3, 0xba, 0x35, 0xb5, 0x29, 0x43, 0x96, 0xa7, 0xba,
	0xf0, 0x9b, 0x71, 0xfd, 0xc8, 0x95, 0xa1, 0x55, 0x77, 0xeb, 0xe1, 0x0d, 0x79, 0xf0, 0xd5, 0xf4,
	0x71, 0x9c, 0x87, 0xb5, 0xaa, 0xa6, 0x2e, 0xc1, 0x78, 0x99, 0xbf, 0xca, 0xf9, 0xeb, 0xbc, 0xfa,
	0x03, 0xb5, 0x53, 0x30, 0x89, 0x1f, 0x59, 0x77, 0x9c, 0xce, 0x5a, 0x5f, 0xd3, 0x1a, 0xb4, 0x00,
	0x38, 0x15, 0xbc, 0x28, 0x58, 0x4b, 0x10, 0x1e, 0x1b, 0xd6, 0x84, 0xd3, 0x37, 0x03, 0x71, 0x19,
	0x8e, 0xa9, 0x4d, 0xc1, 0x95, 0xea, 0xc7, 0xdc, 0x2d, 0x89, 0x57, 0x0c, 0xed, 0xa8, 0x57, 0x7a,
	0x67, 0x24, 0xba, 0x0e, 0x38, 0x70, 0xb4, 0x2f, 0xa9, 0x6e, 0x1c, 0x4b, 0x7b, 0x62, 0x23, 0xe0,
	0xf5, 0xda, 0xa9, 0xf4, 0x71, 0xa9, 0x0c, 0x71, 0x1e, 0x26, 0x02, 0xb1, 0x3a, 0xb0, 0xa1, 0xf5,
	0x6c, 0xdb, 0x7b, 0xed, 0x92, 0x55, 0x1a, 0xd6, 0x0d, 0x98, 0x1a, 0xd0, 0x21, 0x69, 0x3f, 0xe6,
	0xaa, 0xf5, 0x6e, 0x40, 0x87, 0x6b, 0x2d, 0x27, 0x5d, 0x86, 0x53, 0x6e, 0x92, 0xf4, 0x77, 0xf6,
	0x30, 0xb0, 0x66, 0x0c, 0x9c, 0xf0, 0xb0, 0x36, 0x33, 0x97, 0x60, 0xdc, 0x96, 0x88, 0x0f, 0xab,
	0x1d, 0xbc, 0x4f, 0xe3, 0xf9, 0x58, 0xc5, 0xd4, 0x0c, 0xdf, 0xbb, 0x30, 0xe3, 0x18, 0xa6, 0x41,
	0x68, 0x62, 0xda, 0x54, 0x96, 0xc6, 0xa6, 0x5e, 0x29, 0x9f, 0x18, 0xea, 0xb4, 0x05, 0xad, 0x05,
	0xcc, 0xaa, 0x87, 0x98, 0x76, 0xdc, 0x6d, 0xe3, 0x05, 0xcd, 0xfa, 0xa5, 0x60, 0xf8, 0x53, 0xd7,
	0x8e, 0x4d, 0x03, 0xf7, 0xad, 0x1e, 0x2d, 0x82, 0x33, 0x4e, 0xca, 0xbc, 0x9a, 0x40, 0x51, 0x55,
	0x3c, 0x33, 0xf4, 0x29, 0x0b, 0x79, 0xea, 0x11, 0xa1, 0x30, 0xba, 0xde, 0x03, 0xbb, 0x17, 0x09,
	0x13, 0x82, 0x8b, 0xc8, 0xc2, 0x73, 0x63, 0xc1, 0x1d, 0x71, 0xd5, 0x60, 0x96, 0x35, 0x24, 0x98,
	0x08, 0x0e, 0x64, 0x79, 0xc2, 0x85, 0x9e, 0x62, 0x11, 0xff, 0xb3, 0xd8, 0x81, 0x07, 0x15, 0x20,
	0xb0, 0x75, 0xbb, 0x94, 0x6a, 0xd3, 0xfc, 0xa7, 0x6b, 0xaf, 0xcf, 0xc3, 0xb2, 0xd7, 0xff, 0xe3,
	0xfa, 0xea, 0x1a, 0x4c, 0xd6, 0x81, 0xa1, 0xbf, 0xbe, 0xb0, 0xd5, 0x58, 0x23, 0xc4, 0x6d, 0xe6,
	0x79, 0x71, 0x56, 0xbf, 0x0c, 0x59, 0x0d, 0xde, 0xc4, 0x59, 0xe5, 0x62, 0xaf, 0xac, 0x7e, 0x15,
	0xb2, 0xca, 0xc5, 0x1b, 0xb3, 0xda, 0xb0, 0x51, 0x65, 0x95, 0x84, 0xa0, 0xd4, 0x0c, 0x34, 0xb2,
	0xca, 0x45, 0x7b, 0x56, 0xbf, 0x0e, 0x59, 0xe5, 0xe2, 0x0d, 0x59, 0xe5, 0x62, 0xaf, 0xac, 0xd2,
	0x90, 0x55, 0x2e, 0xde, 0x94, 0x55, 0x2e, 0x5a, 0xb3, 0xba, 0x1e, 0x3b, 0xd0, 0x92, 0x55, 0x3b,
	0xfe, 0xab, 0x8b, 0x83, 0xde, 0x5b, 0x89, 0x1f, 0xff, 0x4e, 0xaa, 0x77, 0x96, 0xbe, 0x90, 0x44,
	0xb0, 0xaa, 0x00, 0x52, 0x97, 0x9a, 0x80, 0xad, 0x8a, 0xe0, 0x2a, 0x4c, 0xd4, 0x08, 0x61, 0x6f,
	0x31, 0x57, 0x03, 0x11, 0x27, 0x2c, 0xad, 0x77, 0x60, 0xbc, 0x46, 0xab, 0xdc, 0x78, 0x61, 0xa7,
	0x5f, 0x4c, 0xaa, 0x3c, 0x58, 0x00, 0xec, 0x56, 0xc7, 0x6e, 0xda, 0x86, 0x9d, 0x46, 0x76, 0x73,
	0xec, 0x62, 0xde, 0x85, 0x99, 0x06, 0xb3, 0xb1, 0x78, 0x36, 0x6d, 0xf9, 0xd4, 0xe8, 0x8d, 0xe5,
	0x73, 0x0b, 0x8e, 0x47, 0xcb, 0xa7, 0x16, 0x20, 0x25, 0x71, 0x66, 0xa3, 0x1f, 0xf6, 0x4f, 0x1c,
	0x26, 0x25, 0x1b, 0x61, 0xf5, 0x6d, 0xf2, 0xb2, 0x19, 0x56, 0xdf, 0x23, 0x0b, 0x80, 0xa3, 0x55,
	0xe4, 0x89, 0x66, 0x1d, 0xbd, 0xb2, 0xce, 0x86, 0x75, 0x54, 0x91, 0xcd, 0x4a, 0xba, 0x03, 0x27,
	0xa2, 0x95, 0xb4, 0x3b, 0x54, 0x7d, 0x5b, 0x68, 0x61, 0x2d, 0xed, 0x0a, 0xd7, 0x05, 0x38, 0x9a,
	0x49, 0xa2, 0x5f, 0x31, 0xb2, 0x6d, 0x7d, 0xd9, 0xb3, 0x15, 0x8b, 0x07, 0xa7, 0x3b, 0xb3, 0xfb,
	0x7b, 0x63, 0x99, 0xec, 0xae, 0x58, 0x85, 0xad, 0x52, 0x74, 0x11, 0xc6, 0x15, 0x57, 0xb4, 0x4f,
	0x94, 0x1e, 0x01, 0xe6, 0x45, 0xc1, 0x0c, 0xf8, 0xdc, 0xde, 0x8b, 0x8c, 0x6e, 0x8d, 0x49, 0xa5,
	0x03, 0xea, 0xd7, 0x58, 0x83, 0xe0, 0x23, 0xc2, 0xdd, 0x1a, 0x8b, 0x49, 0x3e, 0x28, 0x2d, 0xc4,
	0xca, 0x2f, 0x5c, 0xb4, 0x10, 0x2b, 0x97, 0xd0, 0x55, 0x98, 0x6c, 0x12, 0x5d, 0xaa, 0xf0, 0x96,
	0x5b, 0x80, 0x31, 0x6f, 0xc5, 0xea, 0x9a, 0x9e, 0x25, 0x89, 0xdb, 0xb5, 0xa2, 0xe9, 0x59, 0x92,
	0xa8, 0x36, 0xcf, 0x92, 0x24, 0x1a, 0x89, 0xb2, 0x79, 0xc0, 0x24, 0x51, 0x7b, 0x79, 0x96, 0x44,
	0xad, 0x8d, 0x55, 0x0b, 0x71, 0x2f, 0xcf, 0xcc, 0xbb, 0x97, 0xf3, 0xac, 0x6c, 0x7a, 0xa6, 0x5f,
	0xc0, 0x9c, 0x67, 0x8b, 0x30, 0x5d, 0xdb, 0xca, 0x2a, 0x1e, 0x8a, 0x12, 0x6f, 0xdb, 0x71, 0x16,
	0xdf, 0x41, 0x54, 0x34, 0x14, 0x75, 0x47, 0x9d, 0x6c, 0xf2, 0xfd, 0x75, 0x44, 0xbf, 0x21, 0x48,
	0xfc, 0xda, 0x96, 0x59, 0xdd, 0x84, 0xbb, 0x93, 0xe8, 0xb7, 0x04, 0x33, 0x12, 0x1b, 0x36, 0xdc,
	0x30, 0x96, 0xce, 0xc4, 0xb0, 0xc5, 0x84, 0x9b, 0xc7, 0xd2, 0x9a, 0x38, 0x0f, 0x48, 0xdf, 0x50,
	0xec, 0x01, 0x2a, 0x18, 0xde, 0xb1, 0xb7, 0xd5, 0x01, 0x1d, 0x9a, 0x3f, 0xad, 0xe4, 0xba, 0x33,
	0x3c, 0x88, 0xb6, 0x78, 0xfd, 0x4d, 0xe3, 0xff, 0xe8, 0x2e, 0xb7, 0x6f, 0xc2, 0x94, 0xa1, 0xb5,
	0xee, 0x80, 0x6f, 0xed, 0xed, 0x55, 0x03, 0xda, 0x36, 0xc0, 0x6d, 0x98, 0x36, 0xdc, 0x3d, 0xe6,
	0xff, 0x77, 0xfe, 0x96, 0xaf, 0x5a, 0xa7, 0xff, 0x02, 0x18, 0x5d, 0xeb, 0xec, 0xff, 0xde, 0x0e,
	0x04, 0xad, 0x6f, 0x99, 0xfc, 0xe7, 0x01, 0xd5, 0x0a, 0xca, 0x2e, 0xdb, 0x1f, 0xfc, 0x95, 0x5e,
	0xd5, 0x56, 0xed, 0xa2, 0x3b, 0xe6, 0x1e, 0x8b, 0xf6, 0x47, 0xb7, 0xe8, 0xea, 0x91, 0x89, 0xd6,
	0xec, 0x0d, 0x77, 0xce, 0xb6, 0x25, 0xfb, 0x53, 0x27, 0x1c, 0xb4, 0x65, 0xc7, 0x9e, 0x83, 0x43,
	0xb6, 0x96, 0xf5, 0x5b, 0xb2, 0x39, 0xe4, 0xcf, 0x96, 0x30, 0x6a, 0xc4, 0x4b, 0x4e, 0x8a, 0xfe,
	0x03, 0xa3, 0x7d, 0x2a, 0x55, 0x80, 0xfd, 0x62, 0x61, 0x07, 0xb5, 0xd4, 0xa3, 0xce, 0xc1, 0xa1,
	0x4c, 0x92, 0xad, 0x92, 0x0a, 0xaa, 0xe7, 0x1b, 0x4b, 0xf1, 0xaf, 0x1d, 0x33, 0xc1, 0x46, 0x33,
	0xf9, 0x24, 0x48, 0xd1, 0x49, 0x80, 0x0d, 0xc1, 0xcb, 0x82, 0xe4, 0x74, 0xc0, 0xf0, 0x6f, 0xee,
	0xe3, 0x87, 0x11, 0x3d, 0xa2, 0x03, 0x86, 0xfe, 0x0d, 0xa3, 0xe1, 0xdb, 0x08, 0x19, 0x0a, 0xfc,
	0x7b, 0xa7, 0xfa, 0x2a, 0xe1, 0xbe, 0x49, 0x3c, 0x13, 0x68, 0x12, 0xf6, 0xbd, 0xa0, 0x83, 0xac,
	0xbf, 0x83, 0xff, 0xb0, 0x5a, 0xf7, 0xb8, 0xbe, 0xcf, 0x7c, 0xa7, 0xb9, 0xf2, 0x77, 0x00, 0x00,
	0x00, 0xff, 0xff, 0xec, 0x30, 0x22, 0x87, 0xd9, 0x11, 0x00, 0x00,
}
