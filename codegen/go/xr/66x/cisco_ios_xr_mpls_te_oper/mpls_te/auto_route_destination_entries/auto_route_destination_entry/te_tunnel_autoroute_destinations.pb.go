/*
Copyright 2019 Cisco Systems

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: te_tunnel_autoroute_destinations.proto

package cisco_ios_xr_mpls_te_oper_mpls_te_auto_route_destination_entries_auto_route_destination_entry

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type TeTunnelAutorouteDestinations_KEYS struct {
	TunnelId             uint32   `protobuf:"varint,1,opt,name=tunnel_id,json=tunnelId,proto3" json:"tunnel_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TeTunnelAutorouteDestinations_KEYS) Reset()         { *m = TeTunnelAutorouteDestinations_KEYS{} }
func (m *TeTunnelAutorouteDestinations_KEYS) String() string { return proto.CompactTextString(m) }
func (*TeTunnelAutorouteDestinations_KEYS) ProtoMessage()    {}
func (*TeTunnelAutorouteDestinations_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e87b7861e3c203c, []int{0}
}

func (m *TeTunnelAutorouteDestinations_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TeTunnelAutorouteDestinations_KEYS.Unmarshal(m, b)
}
func (m *TeTunnelAutorouteDestinations_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TeTunnelAutorouteDestinations_KEYS.Marshal(b, m, deterministic)
}
func (m *TeTunnelAutorouteDestinations_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeTunnelAutorouteDestinations_KEYS.Merge(m, src)
}
func (m *TeTunnelAutorouteDestinations_KEYS) XXX_Size() int {
	return xxx_messageInfo_TeTunnelAutorouteDestinations_KEYS.Size(m)
}
func (m *TeTunnelAutorouteDestinations_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_TeTunnelAutorouteDestinations_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_TeTunnelAutorouteDestinations_KEYS proto.InternalMessageInfo

func (m *TeTunnelAutorouteDestinations_KEYS) GetTunnelId() uint32 {
	if m != nil {
		return m.TunnelId
	}
	return 0
}

type TeTunnelAutorouteDest struct {
	PrefixAddress        string   `protobuf:"bytes,1,opt,name=prefix_address,json=prefixAddress,proto3" json:"prefix_address,omitempty"`
	PrefixLength         uint32   `protobuf:"varint,2,opt,name=prefix_length,json=prefixLength,proto3" json:"prefix_length,omitempty"`
	Metric               uint32   `protobuf:"varint,3,opt,name=metric,proto3" json:"metric,omitempty"`
	InstallTime          uint32   `protobuf:"varint,4,opt,name=install_time,json=installTime,proto3" json:"install_time,omitempty"`
	InterfaceHandle      string   `protobuf:"bytes,5,opt,name=interface_handle,json=interfaceHandle,proto3" json:"interface_handle,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TeTunnelAutorouteDest) Reset()         { *m = TeTunnelAutorouteDest{} }
func (m *TeTunnelAutorouteDest) String() string { return proto.CompactTextString(m) }
func (*TeTunnelAutorouteDest) ProtoMessage()    {}
func (*TeTunnelAutorouteDest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e87b7861e3c203c, []int{1}
}

func (m *TeTunnelAutorouteDest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TeTunnelAutorouteDest.Unmarshal(m, b)
}
func (m *TeTunnelAutorouteDest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TeTunnelAutorouteDest.Marshal(b, m, deterministic)
}
func (m *TeTunnelAutorouteDest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeTunnelAutorouteDest.Merge(m, src)
}
func (m *TeTunnelAutorouteDest) XXX_Size() int {
	return xxx_messageInfo_TeTunnelAutorouteDest.Size(m)
}
func (m *TeTunnelAutorouteDest) XXX_DiscardUnknown() {
	xxx_messageInfo_TeTunnelAutorouteDest.DiscardUnknown(m)
}

var xxx_messageInfo_TeTunnelAutorouteDest proto.InternalMessageInfo

func (m *TeTunnelAutorouteDest) GetPrefixAddress() string {
	if m != nil {
		return m.PrefixAddress
	}
	return ""
}

func (m *TeTunnelAutorouteDest) GetPrefixLength() uint32 {
	if m != nil {
		return m.PrefixLength
	}
	return 0
}

func (m *TeTunnelAutorouteDest) GetMetric() uint32 {
	if m != nil {
		return m.Metric
	}
	return 0
}

func (m *TeTunnelAutorouteDest) GetInstallTime() uint32 {
	if m != nil {
		return m.InstallTime
	}
	return 0
}

func (m *TeTunnelAutorouteDest) GetInterfaceHandle() string {
	if m != nil {
		return m.InterfaceHandle
	}
	return ""
}

type TeTunnelAutorouteDestinations struct {
	TunnelIdXr           uint32                   `protobuf:"varint,50,opt,name=tunnel_id_xr,json=tunnelIdXr,proto3" json:"tunnel_id_xr,omitempty"`
	TunnelAutorouteDest  []*TeTunnelAutorouteDest `protobuf:"bytes,51,rep,name=tunnel_autoroute_dest,json=tunnelAutorouteDest,proto3" json:"tunnel_autoroute_dest,omitempty"`
	TunnelName           string                   `protobuf:"bytes,52,opt,name=tunnel_name,json=tunnelName,proto3" json:"tunnel_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *TeTunnelAutorouteDestinations) Reset()         { *m = TeTunnelAutorouteDestinations{} }
func (m *TeTunnelAutorouteDestinations) String() string { return proto.CompactTextString(m) }
func (*TeTunnelAutorouteDestinations) ProtoMessage()    {}
func (*TeTunnelAutorouteDestinations) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e87b7861e3c203c, []int{2}
}

func (m *TeTunnelAutorouteDestinations) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TeTunnelAutorouteDestinations.Unmarshal(m, b)
}
func (m *TeTunnelAutorouteDestinations) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TeTunnelAutorouteDestinations.Marshal(b, m, deterministic)
}
func (m *TeTunnelAutorouteDestinations) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeTunnelAutorouteDestinations.Merge(m, src)
}
func (m *TeTunnelAutorouteDestinations) XXX_Size() int {
	return xxx_messageInfo_TeTunnelAutorouteDestinations.Size(m)
}
func (m *TeTunnelAutorouteDestinations) XXX_DiscardUnknown() {
	xxx_messageInfo_TeTunnelAutorouteDestinations.DiscardUnknown(m)
}

var xxx_messageInfo_TeTunnelAutorouteDestinations proto.InternalMessageInfo

func (m *TeTunnelAutorouteDestinations) GetTunnelIdXr() uint32 {
	if m != nil {
		return m.TunnelIdXr
	}
	return 0
}

func (m *TeTunnelAutorouteDestinations) GetTunnelAutorouteDest() []*TeTunnelAutorouteDest {
	if m != nil {
		return m.TunnelAutorouteDest
	}
	return nil
}

func (m *TeTunnelAutorouteDestinations) GetTunnelName() string {
	if m != nil {
		return m.TunnelName
	}
	return ""
}

func init() {
	proto.RegisterType((*TeTunnelAutorouteDestinations_KEYS)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.auto_route_destination_entries.auto_route_destination_entry.te_tunnel_autoroute_destinations_KEYS")
	proto.RegisterType((*TeTunnelAutorouteDest)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.auto_route_destination_entries.auto_route_destination_entry.te_tunnel_autoroute_dest")
	proto.RegisterType((*TeTunnelAutorouteDestinations)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.auto_route_destination_entries.auto_route_destination_entry.te_tunnel_autoroute_destinations")
}

func init() {
	proto.RegisterFile("te_tunnel_autoroute_destinations.proto", fileDescriptor_3e87b7861e3c203c)
}

var fileDescriptor_3e87b7861e3c203c = []byte{
	// 338 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x92, 0xc1, 0x4e, 0x22, 0x41,
	0x10, 0x86, 0x33, 0xb0, 0x4b, 0x96, 0x06, 0x76, 0x37, 0x6d, 0x34, 0x9d, 0x78, 0x70, 0xc4, 0x60,
	0xf0, 0x32, 0x07, 0xf0, 0x05, 0x48, 0x30, 0xd1, 0x68, 0x3c, 0xa0, 0x07, 0x3d, 0x98, 0x4a, 0x3b,
	0x53, 0x48, 0x27, 0x33, 0xdd, 0x93, 0xee, 0x22, 0xe2, 0x73, 0xf8, 0x18, 0xbe, 0x8a, 0x0f, 0x65,
	0xe8, 0x69, 0xb8, 0x28, 0x72, 0xf2, 0xd8, 0x5f, 0x55, 0xfd, 0x55, 0xf5, 0x57, 0xb3, 0x63, 0x42,
	0xa0, 0xb9, 0xd6, 0x98, 0x83, 0x9c, 0x93, 0xb1, 0x66, 0x4e, 0x08, 0x19, 0x3a, 0x52, 0x5a, 0x92,
	0x32, 0xda, 0x25, 0xa5, 0x35, 0x64, 0xf8, 0x43, 0xaa, 0x5c, 0x6a, 0x40, 0x19, 0x07, 0x0b, 0x0b,
	0x45, 0x99, 0x3b, 0x20, 0x04, 0x53, 0xa2, 0x4d, 0xc2, 0x23, 0x59, 0xd6, 0xc3, 0x27, 0x01, 0x40,
	0x4d, 0x56, 0xa1, 0xfb, 0x2e, 0xfc, 0xd2, 0x1d, 0xb3, 0xde, 0xb6, 0x41, 0xe0, 0xf2, 0xec, 0xfe,
	0x86, 0xef, 0xb3, 0x66, 0xc8, 0x52, 0x99, 0x88, 0xe2, 0xa8, 0xdf, 0x99, 0xfc, 0xa9, 0xc0, 0x45,
	0xd6, 0x7d, 0x8f, 0x98, 0xd8, 0x24, 0xc3, 0x7b, 0xec, 0x6f, 0x69, 0x71, 0xaa, 0x16, 0x20, 0xb3,
	0xcc, 0xa2, 0x73, 0xbe, 0xbc, 0x39, 0xe9, 0x54, 0x74, 0x54, 0x41, 0x7e, 0xc4, 0x02, 0x80, 0x1c,
	0xf5, 0x13, 0xcd, 0x44, 0xcd, 0x37, 0x69, 0x57, 0xf0, 0xca, 0x33, 0xbe, 0xc7, 0x1a, 0x05, 0x92,
	0x55, 0xa9, 0xa8, 0xfb, 0x68, 0x78, 0xf1, 0x43, 0xd6, 0x56, 0xda, 0x91, 0xcc, 0x73, 0x20, 0x55,
	0xa0, 0xf8, 0xe5, 0xa3, 0xad, 0xc0, 0x6e, 0x55, 0x81, 0xfc, 0x84, 0xfd, 0x57, 0x9a, 0xd0, 0x4e,
	0x65, 0x8a, 0x30, 0x93, 0x3a, 0xcb, 0x51, 0xfc, 0xf6, 0x83, 0xfc, 0x5b, 0xf3, 0x73, 0x8f, 0xbb,
	0xaf, 0x35, 0x16, 0x6f, 0x73, 0x85, 0xc7, 0xac, 0xbd, 0x36, 0x04, 0x16, 0x56, 0x0c, 0x7c, 0x4b,
	0xb6, 0xf2, 0xe4, 0xce, 0xf2, 0xb7, 0x88, 0xed, 0x7e, 0xa9, 0x21, 0x86, 0x71, 0xbd, 0xdf, 0x1a,
	0x3c, 0x27, 0x3f, 0x7a, 0xdb, 0x64, 0xd3, 0x0a, 0x93, 0x9d, 0x0a, 0x8f, 0x56, 0x74, 0xbc, 0x3c,
	0xd3, 0x01, 0x6b, 0x85, 0x6c, 0x2d, 0x0b, 0x14, 0xa7, 0xde, 0x9a, 0xb0, 0xce, 0xb5, 0x2c, 0xf0,
	0xb1, 0xe1, 0x3f, 0xe4, 0xf0, 0x23, 0x00, 0x00, 0xff, 0xff, 0x0e, 0xd2, 0x5e, 0x5e, 0xba, 0x02,
	0x00, 0x00,
}
