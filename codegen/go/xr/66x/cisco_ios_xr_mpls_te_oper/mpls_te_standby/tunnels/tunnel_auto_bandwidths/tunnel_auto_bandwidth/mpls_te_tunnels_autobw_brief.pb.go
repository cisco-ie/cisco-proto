/*
Copyright 2019 Cisco Systems

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: mpls_te_tunnels_autobw_brief.proto

package cisco_ios_xr_mpls_te_oper_mpls_te_standby_tunnels_tunnel_auto_bandwidths_tunnel_auto_bandwidth

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type MplsTeTunnelsAutobwBrief_KEYS struct {
	TunnelName           string   `protobuf:"bytes,1,opt,name=tunnel_name,json=tunnelName,proto3" json:"tunnel_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MplsTeTunnelsAutobwBrief_KEYS) Reset()         { *m = MplsTeTunnelsAutobwBrief_KEYS{} }
func (m *MplsTeTunnelsAutobwBrief_KEYS) String() string { return proto.CompactTextString(m) }
func (*MplsTeTunnelsAutobwBrief_KEYS) ProtoMessage()    {}
func (*MplsTeTunnelsAutobwBrief_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_7442db491f416a37, []int{0}
}

func (m *MplsTeTunnelsAutobwBrief_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MplsTeTunnelsAutobwBrief_KEYS.Unmarshal(m, b)
}
func (m *MplsTeTunnelsAutobwBrief_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MplsTeTunnelsAutobwBrief_KEYS.Marshal(b, m, deterministic)
}
func (m *MplsTeTunnelsAutobwBrief_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MplsTeTunnelsAutobwBrief_KEYS.Merge(m, src)
}
func (m *MplsTeTunnelsAutobwBrief_KEYS) XXX_Size() int {
	return xxx_messageInfo_MplsTeTunnelsAutobwBrief_KEYS.Size(m)
}
func (m *MplsTeTunnelsAutobwBrief_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_MplsTeTunnelsAutobwBrief_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_MplsTeTunnelsAutobwBrief_KEYS proto.InternalMessageInfo

func (m *MplsTeTunnelsAutobwBrief_KEYS) GetTunnelName() string {
	if m != nil {
		return m.TunnelName
	}
	return ""
}

type MplsTeTunnelsAutobwStatus struct {
	IsAutoBandwidthEnabled bool     `protobuf:"varint,1,opt,name=is_auto_bandwidth_enabled,json=isAutoBandwidthEnabled,proto3" json:"is_auto_bandwidth_enabled,omitempty"`
	ReactivationTime       uint32   `protobuf:"varint,2,opt,name=reactivation_time,json=reactivationTime,proto3" json:"reactivation_time,omitempty"`
	XXX_NoUnkeyedLiteral   struct{} `json:"-"`
	XXX_unrecognized       []byte   `json:"-"`
	XXX_sizecache          int32    `json:"-"`
}

func (m *MplsTeTunnelsAutobwStatus) Reset()         { *m = MplsTeTunnelsAutobwStatus{} }
func (m *MplsTeTunnelsAutobwStatus) String() string { return proto.CompactTextString(m) }
func (*MplsTeTunnelsAutobwStatus) ProtoMessage()    {}
func (*MplsTeTunnelsAutobwStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_7442db491f416a37, []int{1}
}

func (m *MplsTeTunnelsAutobwStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MplsTeTunnelsAutobwStatus.Unmarshal(m, b)
}
func (m *MplsTeTunnelsAutobwStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MplsTeTunnelsAutobwStatus.Marshal(b, m, deterministic)
}
func (m *MplsTeTunnelsAutobwStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MplsTeTunnelsAutobwStatus.Merge(m, src)
}
func (m *MplsTeTunnelsAutobwStatus) XXX_Size() int {
	return xxx_messageInfo_MplsTeTunnelsAutobwStatus.Size(m)
}
func (m *MplsTeTunnelsAutobwStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_MplsTeTunnelsAutobwStatus.DiscardUnknown(m)
}

var xxx_messageInfo_MplsTeTunnelsAutobwStatus proto.InternalMessageInfo

func (m *MplsTeTunnelsAutobwStatus) GetIsAutoBandwidthEnabled() bool {
	if m != nil {
		return m.IsAutoBandwidthEnabled
	}
	return false
}

func (m *MplsTeTunnelsAutobwStatus) GetReactivationTime() uint32 {
	if m != nil {
		return m.ReactivationTime
	}
	return 0
}

type MplsTeTunnelsAutobwBrief struct {
	TunnelNameXr             string                     `protobuf:"bytes,50,opt,name=tunnel_name_xr,json=tunnelNameXr,proto3" json:"tunnel_name_xr,omitempty"`
	SignaledName             string                     `protobuf:"bytes,51,opt,name=signaled_name,json=signaledName,proto3" json:"signaled_name,omitempty"`
	TunnelLspId              uint32                     `protobuf:"varint,52,opt,name=tunnel_lsp_id,json=tunnelLspId,proto3" json:"tunnel_lsp_id,omitempty"`
	AutoBandwidthStatus      *MplsTeTunnelsAutobwStatus `protobuf:"bytes,53,opt,name=auto_bandwidth_status,json=autoBandwidthStatus,proto3" json:"auto_bandwidth_status,omitempty"`
	BandwidthApplications    uint32                     `protobuf:"varint,54,opt,name=bandwidth_applications,json=bandwidthApplications,proto3" json:"bandwidth_applications,omitempty"`
	LastBandwidthApplied     uint32                     `protobuf:"varint,55,opt,name=last_bandwidth_applied,json=lastBandwidthApplied,proto3" json:"last_bandwidth_applied,omitempty"`
	TunnelRequestedBandwidth uint32                     `protobuf:"varint,56,opt,name=tunnel_requested_bandwidth,json=tunnelRequestedBandwidth,proto3" json:"tunnel_requested_bandwidth,omitempty"`
	SignalledBandwidth       uint32                     `protobuf:"varint,57,opt,name=signalled_bandwidth,json=signalledBandwidth,proto3" json:"signalled_bandwidth,omitempty"`
	HighestBandwidth         uint32                     `protobuf:"varint,58,opt,name=highest_bandwidth,json=highestBandwidth,proto3" json:"highest_bandwidth,omitempty"`
	LastSampleBandwidth      uint32                     `protobuf:"varint,59,opt,name=last_sample_bandwidth,json=lastSampleBandwidth,proto3" json:"last_sample_bandwidth,omitempty"`
	SamplesCollected         uint32                     `protobuf:"varint,60,opt,name=samples_collected,json=samplesCollected,proto3" json:"samples_collected,omitempty"`
	TimeLeftApplication      uint32                     `protobuf:"varint,61,opt,name=time_left_application,json=timeLeftApplication,proto3" json:"time_left_application,omitempty"`
	XXX_NoUnkeyedLiteral     struct{}                   `json:"-"`
	XXX_unrecognized         []byte                     `json:"-"`
	XXX_sizecache            int32                      `json:"-"`
}

func (m *MplsTeTunnelsAutobwBrief) Reset()         { *m = MplsTeTunnelsAutobwBrief{} }
func (m *MplsTeTunnelsAutobwBrief) String() string { return proto.CompactTextString(m) }
func (*MplsTeTunnelsAutobwBrief) ProtoMessage()    {}
func (*MplsTeTunnelsAutobwBrief) Descriptor() ([]byte, []int) {
	return fileDescriptor_7442db491f416a37, []int{2}
}

func (m *MplsTeTunnelsAutobwBrief) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MplsTeTunnelsAutobwBrief.Unmarshal(m, b)
}
func (m *MplsTeTunnelsAutobwBrief) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MplsTeTunnelsAutobwBrief.Marshal(b, m, deterministic)
}
func (m *MplsTeTunnelsAutobwBrief) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MplsTeTunnelsAutobwBrief.Merge(m, src)
}
func (m *MplsTeTunnelsAutobwBrief) XXX_Size() int {
	return xxx_messageInfo_MplsTeTunnelsAutobwBrief.Size(m)
}
func (m *MplsTeTunnelsAutobwBrief) XXX_DiscardUnknown() {
	xxx_messageInfo_MplsTeTunnelsAutobwBrief.DiscardUnknown(m)
}

var xxx_messageInfo_MplsTeTunnelsAutobwBrief proto.InternalMessageInfo

func (m *MplsTeTunnelsAutobwBrief) GetTunnelNameXr() string {
	if m != nil {
		return m.TunnelNameXr
	}
	return ""
}

func (m *MplsTeTunnelsAutobwBrief) GetSignaledName() string {
	if m != nil {
		return m.SignaledName
	}
	return ""
}

func (m *MplsTeTunnelsAutobwBrief) GetTunnelLspId() uint32 {
	if m != nil {
		return m.TunnelLspId
	}
	return 0
}

func (m *MplsTeTunnelsAutobwBrief) GetAutoBandwidthStatus() *MplsTeTunnelsAutobwStatus {
	if m != nil {
		return m.AutoBandwidthStatus
	}
	return nil
}

func (m *MplsTeTunnelsAutobwBrief) GetBandwidthApplications() uint32 {
	if m != nil {
		return m.BandwidthApplications
	}
	return 0
}

func (m *MplsTeTunnelsAutobwBrief) GetLastBandwidthApplied() uint32 {
	if m != nil {
		return m.LastBandwidthApplied
	}
	return 0
}

func (m *MplsTeTunnelsAutobwBrief) GetTunnelRequestedBandwidth() uint32 {
	if m != nil {
		return m.TunnelRequestedBandwidth
	}
	return 0
}

func (m *MplsTeTunnelsAutobwBrief) GetSignalledBandwidth() uint32 {
	if m != nil {
		return m.SignalledBandwidth
	}
	return 0
}

func (m *MplsTeTunnelsAutobwBrief) GetHighestBandwidth() uint32 {
	if m != nil {
		return m.HighestBandwidth
	}
	return 0
}

func (m *MplsTeTunnelsAutobwBrief) GetLastSampleBandwidth() uint32 {
	if m != nil {
		return m.LastSampleBandwidth
	}
	return 0
}

func (m *MplsTeTunnelsAutobwBrief) GetSamplesCollected() uint32 {
	if m != nil {
		return m.SamplesCollected
	}
	return 0
}

func (m *MplsTeTunnelsAutobwBrief) GetTimeLeftApplication() uint32 {
	if m != nil {
		return m.TimeLeftApplication
	}
	return 0
}

func init() {
	proto.RegisterType((*MplsTeTunnelsAutobwBrief_KEYS)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te_standby.tunnels.tunnel_auto_bandwidths.tunnel_auto_bandwidth.mpls_te_tunnels_autobw_brief_KEYS")
	proto.RegisterType((*MplsTeTunnelsAutobwStatus)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te_standby.tunnels.tunnel_auto_bandwidths.tunnel_auto_bandwidth.mpls_te_tunnels_autobw_status")
	proto.RegisterType((*MplsTeTunnelsAutobwBrief)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te_standby.tunnels.tunnel_auto_bandwidths.tunnel_auto_bandwidth.mpls_te_tunnels_autobw_brief")
}

func init() { proto.RegisterFile("mpls_te_tunnels_autobw_brief.proto", fileDescriptor_7442db491f416a37) }

var fileDescriptor_7442db491f416a37 = []byte{
	// 486 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x54, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0x95, 0x91, 0x40, 0x30, 0xa5, 0x88, 0x6e, 0x48, 0xb4, 0x20, 0x10, 0xc1, 0x70, 0x88, 0x54,
	0xc9, 0x48, 0x69, 0x0b, 0x14, 0xca, 0xa1, 0x85, 0x1e, 0x10, 0x15, 0x07, 0x87, 0x03, 0x5c, 0x58,
	0xad, 0xbd, 0x93, 0x66, 0xa5, 0xb5, 0xd7, 0x78, 0xd7, 0xb4, 0x1c, 0x38, 0xf3, 0x3d, 0x7c, 0x11,
	0xbf, 0x82, 0xbc, 0x6b, 0xc7, 0x4e, 0xa4, 0xe6, 0xc6, 0x29, 0xca, 0xbc, 0x79, 0x6f, 0xe6, 0xbd,
	0x59, 0x19, 0xc2, 0xac, 0x50, 0x86, 0x59, 0x64, 0xb6, 0xca, 0x73, 0x54, 0x86, 0xf1, 0xca, 0xea,
	0xe4, 0x82, 0x25, 0xa5, 0xc4, 0x79, 0x54, 0x94, 0xda, 0x6a, 0xf2, 0x2d, 0x95, 0x26, 0xd5, 0x4c,
	0x6a, 0xc3, 0x2e, 0x4b, 0xd6, 0x12, 0x74, 0x81, 0x65, 0xd4, 0xfe, 0x31, 0x96, 0xe7, 0x22, 0xf9,
	0x19, 0x35, 0x2a, 0xcd, 0xaf, 0x13, 0x63, 0x09, 0xcf, 0xc5, 0x85, 0x14, 0x76, 0x71, 0x45, 0x39,
	0x7c, 0x0f, 0x4f, 0x36, 0x6d, 0xc1, 0x3e, 0x9e, 0x7e, 0x9d, 0x91, 0xc7, 0xb0, 0xd5, 0xb0, 0x73,
	0x9e, 0x21, 0x0d, 0xc6, 0xc1, 0xe4, 0x56, 0x0c, 0xbe, 0xf4, 0x89, 0x67, 0x18, 0xfe, 0x0e, 0xe0,
	0xd1, 0x15, 0x32, 0xc6, 0x72, 0x5b, 0x19, 0x72, 0x08, 0xf7, 0xa5, 0x59, 0x1b, 0xce, 0x30, 0xe7,
	0x89, 0x42, 0xe1, 0x04, 0x6f, 0xc6, 0x23, 0x69, 0x8e, 0x2b, 0xab, 0x4f, 0x5a, 0xf8, 0xd4, 0xa3,
	0x64, 0x17, 0x76, 0x4a, 0xe4, 0xa9, 0x95, 0x3f, 0xb8, 0x95, 0x3a, 0x67, 0x56, 0x66, 0x48, 0xaf,
	0x8d, 0x83, 0xc9, 0x76, 0x7c, 0xb7, 0x0f, 0x7c, 0x96, 0x19, 0x86, 0x7f, 0xaf, 0xc3, 0xc3, 0x4d,
	0x86, 0xc8, 0x33, 0xb8, 0xd3, 0xf3, 0xc2, 0x2e, 0x4b, 0x3a, 0x75, 0x76, 0x6e, 0x77, 0x76, 0xbe,
	0x94, 0xe4, 0x29, 0x6c, 0x1b, 0x79, 0x9e, 0x73, 0x85, 0xc2, 0x7b, 0xde, 0xf3, 0x4d, 0x6d, 0xb1,
	0x6e, 0x23, 0x21, 0x6c, 0x37, 0x52, 0xca, 0x14, 0x4c, 0x0a, 0xba, 0xef, 0x96, 0x6a, 0xb2, 0x3a,
	0x33, 0xc5, 0x07, 0x41, 0xfe, 0x04, 0x30, 0x5c, 0x73, 0xed, 0x13, 0xa1, 0x07, 0xe3, 0x60, 0xb2,
	0x35, 0xfd, 0x15, 0xfd, 0xdf, 0x03, 0x47, 0x1b, 0xcf, 0x12, 0x0f, 0x78, 0x3f, 0xf1, 0x99, 0xbf,
	0xd5, 0x01, 0x8c, 0xba, 0x6d, 0x79, 0x51, 0x28, 0x99, 0xba, 0x80, 0x0d, 0x7d, 0xe1, 0x0c, 0x0e,
	0x97, 0xe8, 0x71, 0x0f, 0x24, 0xfb, 0x30, 0x52, 0xdc, 0x58, 0xb6, 0xc6, 0x45, 0x41, 0x5f, 0x3a,
	0xda, 0xbd, 0x1a, 0x3d, 0x59, 0xa1, 0xa2, 0x20, 0x47, 0xf0, 0xa0, 0x59, 0xbc, 0xc4, 0xef, 0x15,
	0x1a, 0x8b, 0xa2, 0x53, 0xa0, 0xaf, 0x1c, 0x93, 0xfa, 0x8e, 0xb8, 0x6d, 0x58, 0x8a, 0x90, 0xe7,
	0x30, 0xf0, 0x27, 0x51, 0x2b, 0xb4, 0x43, 0x47, 0x23, 0x4b, 0xa8, 0x23, 0xec, 0xc2, 0xce, 0x42,
	0x9e, 0x2f, 0xb0, 0xbf, 0x27, 0x7d, 0xed, 0x1f, 0x53, 0x03, 0x74, 0xcd, 0x53, 0x18, 0x3a, 0x47,
	0x86, 0x67, 0x85, 0xc2, 0x1e, 0xe1, 0x8d, 0x23, 0x0c, 0x6a, 0x70, 0xe6, 0xb0, 0x95, 0x01, 0xbe,
	0xdd, 0xb0, 0x54, 0x2b, 0x85, 0xa9, 0x45, 0x41, 0x8f, 0xfc, 0x80, 0x06, 0x78, 0xd7, 0xd6, 0xeb,
	0x01, 0xf5, 0x6b, 0x66, 0x0a, 0xe7, 0xb6, 0x9f, 0x34, 0x7d, 0xeb, 0x07, 0xd4, 0xe0, 0x19, 0xce,
	0x6d, 0x2f, 0xe7, 0xe4, 0x86, 0xfb, 0x30, 0xec, 0xfd, 0x0b, 0x00, 0x00, 0xff, 0xff, 0x08, 0x11,
	0xeb, 0x7a, 0x3e, 0x04, 0x00, 0x00,
}
