/*
Copyright 2019 Cisco Systems

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pim_bsr_election_bag.proto

package cisco_ios_xr_ipv4_pim_oper_pim_standby_vrfs_vrf_bsr_bsr_elections_bsr_election

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type PimBsrElectionBag_KEYS struct {
	VrfName              string   `protobuf:"bytes,1,opt,name=vrf_name,json=vrfName,proto3" json:"vrf_name,omitempty"`
	PimScope             uint32   `protobuf:"varint,2,opt,name=pim_scope,json=pimScope,proto3" json:"pim_scope,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PimBsrElectionBag_KEYS) Reset()         { *m = PimBsrElectionBag_KEYS{} }
func (m *PimBsrElectionBag_KEYS) String() string { return proto.CompactTextString(m) }
func (*PimBsrElectionBag_KEYS) ProtoMessage()    {}
func (*PimBsrElectionBag_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_3fd166ab4631d04a, []int{0}
}

func (m *PimBsrElectionBag_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PimBsrElectionBag_KEYS.Unmarshal(m, b)
}
func (m *PimBsrElectionBag_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PimBsrElectionBag_KEYS.Marshal(b, m, deterministic)
}
func (m *PimBsrElectionBag_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PimBsrElectionBag_KEYS.Merge(m, src)
}
func (m *PimBsrElectionBag_KEYS) XXX_Size() int {
	return xxx_messageInfo_PimBsrElectionBag_KEYS.Size(m)
}
func (m *PimBsrElectionBag_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_PimBsrElectionBag_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_PimBsrElectionBag_KEYS proto.InternalMessageInfo

func (m *PimBsrElectionBag_KEYS) GetVrfName() string {
	if m != nil {
		return m.VrfName
	}
	return ""
}

func (m *PimBsrElectionBag_KEYS) GetPimScope() uint32 {
	if m != nil {
		return m.PimScope
	}
	return 0
}

type PimAddrtype struct {
	AfName               string   `protobuf:"bytes,1,opt,name=af_name,json=afName,proto3" json:"af_name,omitempty"`
	Ipv4Address          string   `protobuf:"bytes,2,opt,name=ipv4_address,json=ipv4Address,proto3" json:"ipv4_address,omitempty"`
	Ipv6Address          string   `protobuf:"bytes,3,opt,name=ipv6_address,json=ipv6Address,proto3" json:"ipv6_address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PimAddrtype) Reset()         { *m = PimAddrtype{} }
func (m *PimAddrtype) String() string { return proto.CompactTextString(m) }
func (*PimAddrtype) ProtoMessage()    {}
func (*PimAddrtype) Descriptor() ([]byte, []int) {
	return fileDescriptor_3fd166ab4631d04a, []int{1}
}

func (m *PimAddrtype) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PimAddrtype.Unmarshal(m, b)
}
func (m *PimAddrtype) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PimAddrtype.Marshal(b, m, deterministic)
}
func (m *PimAddrtype) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PimAddrtype.Merge(m, src)
}
func (m *PimAddrtype) XXX_Size() int {
	return xxx_messageInfo_PimAddrtype.Size(m)
}
func (m *PimAddrtype) XXX_DiscardUnknown() {
	xxx_messageInfo_PimAddrtype.DiscardUnknown(m)
}

var xxx_messageInfo_PimAddrtype proto.InternalMessageInfo

func (m *PimAddrtype) GetAfName() string {
	if m != nil {
		return m.AfName
	}
	return ""
}

func (m *PimAddrtype) GetIpv4Address() string {
	if m != nil {
		return m.Ipv4Address
	}
	return ""
}

func (m *PimAddrtype) GetIpv6Address() string {
	if m != nil {
		return m.Ipv6Address
	}
	return ""
}

type PimBsrElectionBag struct {
	BsrAddress             *PimAddrtype `protobuf:"bytes,50,opt,name=bsr_address,json=bsrAddress,proto3" json:"bsr_address,omitempty"`
	BsrPriority            uint32       `protobuf:"varint,51,opt,name=bsr_priority,json=bsrPriority,proto3" json:"bsr_priority,omitempty"`
	BsrMaskLength          uint32       `protobuf:"varint,52,opt,name=bsr_mask_length,json=bsrMaskLength,proto3" json:"bsr_mask_length,omitempty"`
	BsrUpTime              uint32       `protobuf:"varint,53,opt,name=bsr_up_time,json=bsrUpTime,proto3" json:"bsr_up_time,omitempty"`
	BootstrapTimeout       uint32       `protobuf:"varint,54,opt,name=bootstrap_timeout,json=bootstrapTimeout,proto3" json:"bootstrap_timeout,omitempty"`
	CandidateBsrState      uint32       `protobuf:"varint,55,opt,name=candidate_bsr_state,json=candidateBsrState,proto3" json:"candidate_bsr_state,omitempty"`
	BsrElectionState       uint32       `protobuf:"varint,56,opt,name=bsr_election_state,json=bsrElectionState,proto3" json:"bsr_election_state,omitempty"`
	BsrScope               uint32       `protobuf:"varint,57,opt,name=bsr_scope,json=bsrScope,proto3" json:"bsr_scope,omitempty"`
	CandidateBsrFlag       bool         `protobuf:"varint,58,opt,name=candidate_bsr_flag,json=candidateBsrFlag,proto3" json:"candidate_bsr_flag,omitempty"`
	CandidateBsrPriority   uint32       `protobuf:"varint,59,opt,name=candidate_bsr_priority,json=candidateBsrPriority,proto3" json:"candidate_bsr_priority,omitempty"`
	CandidateBsrAddress    *PimAddrtype `protobuf:"bytes,60,opt,name=candidate_bsr_address,json=candidateBsrAddress,proto3" json:"candidate_bsr_address,omitempty"`
	CandidateBsrMaskLength uint32       `protobuf:"varint,61,opt,name=candidate_bsr_mask_length,json=candidateBsrMaskLength,proto3" json:"candidate_bsr_mask_length,omitempty"`
	XXX_NoUnkeyedLiteral   struct{}     `json:"-"`
	XXX_unrecognized       []byte       `json:"-"`
	XXX_sizecache          int32        `json:"-"`
}

func (m *PimBsrElectionBag) Reset()         { *m = PimBsrElectionBag{} }
func (m *PimBsrElectionBag) String() string { return proto.CompactTextString(m) }
func (*PimBsrElectionBag) ProtoMessage()    {}
func (*PimBsrElectionBag) Descriptor() ([]byte, []int) {
	return fileDescriptor_3fd166ab4631d04a, []int{2}
}

func (m *PimBsrElectionBag) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PimBsrElectionBag.Unmarshal(m, b)
}
func (m *PimBsrElectionBag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PimBsrElectionBag.Marshal(b, m, deterministic)
}
func (m *PimBsrElectionBag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PimBsrElectionBag.Merge(m, src)
}
func (m *PimBsrElectionBag) XXX_Size() int {
	return xxx_messageInfo_PimBsrElectionBag.Size(m)
}
func (m *PimBsrElectionBag) XXX_DiscardUnknown() {
	xxx_messageInfo_PimBsrElectionBag.DiscardUnknown(m)
}

var xxx_messageInfo_PimBsrElectionBag proto.InternalMessageInfo

func (m *PimBsrElectionBag) GetBsrAddress() *PimAddrtype {
	if m != nil {
		return m.BsrAddress
	}
	return nil
}

func (m *PimBsrElectionBag) GetBsrPriority() uint32 {
	if m != nil {
		return m.BsrPriority
	}
	return 0
}

func (m *PimBsrElectionBag) GetBsrMaskLength() uint32 {
	if m != nil {
		return m.BsrMaskLength
	}
	return 0
}

func (m *PimBsrElectionBag) GetBsrUpTime() uint32 {
	if m != nil {
		return m.BsrUpTime
	}
	return 0
}

func (m *PimBsrElectionBag) GetBootstrapTimeout() uint32 {
	if m != nil {
		return m.BootstrapTimeout
	}
	return 0
}

func (m *PimBsrElectionBag) GetCandidateBsrState() uint32 {
	if m != nil {
		return m.CandidateBsrState
	}
	return 0
}

func (m *PimBsrElectionBag) GetBsrElectionState() uint32 {
	if m != nil {
		return m.BsrElectionState
	}
	return 0
}

func (m *PimBsrElectionBag) GetBsrScope() uint32 {
	if m != nil {
		return m.BsrScope
	}
	return 0
}

func (m *PimBsrElectionBag) GetCandidateBsrFlag() bool {
	if m != nil {
		return m.CandidateBsrFlag
	}
	return false
}

func (m *PimBsrElectionBag) GetCandidateBsrPriority() uint32 {
	if m != nil {
		return m.CandidateBsrPriority
	}
	return 0
}

func (m *PimBsrElectionBag) GetCandidateBsrAddress() *PimAddrtype {
	if m != nil {
		return m.CandidateBsrAddress
	}
	return nil
}

func (m *PimBsrElectionBag) GetCandidateBsrMaskLength() uint32 {
	if m != nil {
		return m.CandidateBsrMaskLength
	}
	return 0
}

func init() {
	proto.RegisterType((*PimBsrElectionBag_KEYS)(nil), "cisco_ios_xr_ipv4_pim_oper.pim.standby.vrfs.vrf.bsr.bsr_elections.bsr_election.pim_bsr_election_bag_KEYS")
	proto.RegisterType((*PimAddrtype)(nil), "cisco_ios_xr_ipv4_pim_oper.pim.standby.vrfs.vrf.bsr.bsr_elections.bsr_election.pim_addrtype")
	proto.RegisterType((*PimBsrElectionBag)(nil), "cisco_ios_xr_ipv4_pim_oper.pim.standby.vrfs.vrf.bsr.bsr_elections.bsr_election.pim_bsr_election_bag")
}

func init() { proto.RegisterFile("pim_bsr_election_bag.proto", fileDescriptor_3fd166ab4631d04a) }

var fileDescriptor_3fd166ab4631d04a = []byte{
	// 481 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x93, 0xcf, 0x6e, 0x13, 0x31,
	0x10, 0xc6, 0xb5, 0x20, 0xda, 0xac, 0xd3, 0x8a, 0xd6, 0x2d, 0x65, 0x43, 0x25, 0x14, 0x72, 0x40,
	0x91, 0x40, 0x7b, 0x68, 0x43, 0xa0, 0xfc, 0x39, 0x80, 0x54, 0x2e, 0x40, 0x85, 0x36, 0xe5, 0x80,
	0x84, 0x64, 0xd9, 0xbb, 0x4e, 0xb0, 0x1a, 0xaf, 0xad, 0x19, 0x37, 0x22, 0x07, 0xde, 0x81, 0xe7,
	0xe3, 0x69, 0x90, 0xbd, 0x9b, 0x65, 0x57, 0xea, 0x11, 0x71, 0x59, 0xc9, 0x33, 0xbf, 0xf9, 0x3c,
	0x33, 0xfe, 0x96, 0x3c, 0xb0, 0x4a, 0x33, 0x81, 0xc0, 0xe4, 0x52, 0xe6, 0x4e, 0x99, 0x92, 0x09,
	0xbe, 0x48, 0x2d, 0x18, 0x67, 0xe8, 0x45, 0xae, 0x30, 0x37, 0x4c, 0x19, 0x64, 0x3f, 0x80, 0x29,
	0xbb, 0x9a, 0x30, 0x4f, 0x1b, 0x2b, 0x21, 0xb5, 0x4a, 0xa7, 0xe8, 0x78, 0x59, 0x88, 0x75, 0xba,
	0x82, 0x39, 0xfa, 0x4f, 0x2a, 0x10, 0xd2, 0xb6, 0x16, 0x76, 0x4e, 0xa3, 0x19, 0x19, 0xdc, 0x74,
	0x1b, 0xfb, 0x70, 0xfe, 0x75, 0x46, 0x07, 0xa4, 0xb7, 0x82, 0x39, 0x2b, 0xb9, 0x96, 0x49, 0x34,
	0x8c, 0xc6, 0x71, 0xb6, 0xbd, 0x82, 0xf9, 0x05, 0xd7, 0x92, 0x1e, 0x93, 0xd8, 0xd7, 0x61, 0x6e,
	0xac, 0x4c, 0x6e, 0x0d, 0xa3, 0xf1, 0x6e, 0xd6, 0xb3, 0x4a, 0xcf, 0xfc, 0x79, 0xa4, 0xc9, 0x8e,
	0x4f, 0xf2, 0xa2, 0x00, 0xb7, 0xb6, 0x92, 0xde, 0x27, 0xdb, 0xbc, 0x23, 0xb3, 0xc5, 0x2b, 0x95,
	0x47, 0x64, 0x27, 0x8c, 0xe0, 0x49, 0x89, 0x18, 0x84, 0xe2, 0xac, 0xef, 0x63, 0x6f, 0xab, 0x50,
	0x8d, 0x4c, 0x1b, 0xe4, 0x76, 0x83, 0x4c, 0x6b, 0x64, 0xf4, 0xfb, 0x0e, 0x39, 0xbc, 0x69, 0x08,
	0xfa, 0x93, 0xf4, 0x7d, 0x6c, 0x53, 0x7a, 0x32, 0x8c, 0xc6, 0xfd, 0x93, 0x6f, 0xe9, 0xbf, 0x5d,
	0x61, 0xda, 0x1e, 0x35, 0x23, 0x02, 0xa1, 0xd5, 0xba, 0x07, 0x2d, 0x28, 0x03, 0xca, 0xad, 0x93,
	0xd3, 0xb0, 0x26, 0xdf, 0xd2, 0xe7, 0x3a, 0x44, 0x1f, 0x93, 0xbb, 0x1e, 0xd1, 0x1c, 0xaf, 0xd8,
	0x52, 0x96, 0x0b, 0xf7, 0x3d, 0x99, 0x04, 0x6a, 0x57, 0x20, 0x7c, 0xe2, 0x78, 0xf5, 0x31, 0x04,
	0xe9, 0xc3, 0x6a, 0x92, 0x6b, 0xcb, 0x9c, 0xd2, 0x32, 0x79, 0x16, 0x98, 0x58, 0x20, 0x7c, 0xb1,
	0x97, 0x4a, 0x4b, 0xfa, 0x84, 0xec, 0x0b, 0x63, 0x1c, 0x3a, 0xe0, 0x15, 0x62, 0xae, 0x5d, 0x32,
	0x0d, 0xd4, 0x5e, 0x93, 0xb8, 0xac, 0xe2, 0x34, 0x25, 0x07, 0x39, 0x2f, 0x0b, 0x55, 0x70, 0x27,
	0xc3, 0xd2, 0xd0, 0x71, 0x27, 0x93, 0xe7, 0x01, 0xdf, 0x6f, 0x52, 0xef, 0x10, 0x66, 0x3e, 0x41,
	0x9f, 0x12, 0xda, 0x59, 0x6d, 0x85, 0xbf, 0xa8, 0xd5, 0x11, 0xce, 0xeb, 0x44, 0x45, 0x1f, 0x93,
	0x38, 0x68, 0x06, 0x67, 0x9c, 0x55, 0xce, 0x10, 0x08, 0xc1, 0x19, 0x5e, 0xaa, 0x7b, 0xf5, 0x7c,
	0xc9, 0x17, 0xc9, 0xcb, 0x61, 0x34, 0xee, 0x65, 0x7b, 0xed, 0x9b, 0xdf, 0x2f, 0xf9, 0x82, 0x4e,
	0xc8, 0x51, 0x97, 0x6e, 0x56, 0xf9, 0x2a, 0xe8, 0x1e, 0xb6, 0x2b, 0x9a, 0x9d, 0xfe, 0x8a, 0xc8,
	0xbd, 0x6e, 0xd9, 0xc6, 0x00, 0xaf, 0xff, 0x83, 0x01, 0x0e, 0xda, 0x3d, 0x6d, 0x9c, 0x70, 0x46,
	0x06, 0xdd, 0x8e, 0xda, 0x0f, 0xfe, 0x26, 0xcc, 0x72, 0xd4, 0xae, 0xfb, 0xfb, 0xf2, 0x62, 0x2b,
	0xfc, 0xf7, 0xa7, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0x91, 0x1b, 0x16, 0x97, 0x15, 0x04, 0x00,
	0x00,
}
