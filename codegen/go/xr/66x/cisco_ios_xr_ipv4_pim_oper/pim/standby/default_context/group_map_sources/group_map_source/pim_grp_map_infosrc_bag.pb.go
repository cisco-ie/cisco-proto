/*
Copyright 2019 Cisco Systems

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pim_grp_map_infosrc_bag.proto

package cisco_ios_xr_ipv4_pim_oper_pim_standby_default_context_group_map_sources_group_map_source

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type PimGrpMapInfosrcBag_KEYS struct {
	Prefix               string   `protobuf:"bytes,1,opt,name=prefix,proto3" json:"prefix,omitempty"`
	PrefixLength         uint32   `protobuf:"varint,2,opt,name=prefix_length,json=prefixLength,proto3" json:"prefix_length,omitempty"`
	Client               string   `protobuf:"bytes,3,opt,name=client,proto3" json:"client,omitempty"`
	Protocol             string   `protobuf:"bytes,4,opt,name=protocol,proto3" json:"protocol,omitempty"`
	RpAddress            string   `protobuf:"bytes,5,opt,name=rp_address,json=rpAddress,proto3" json:"rp_address,omitempty"`
	Priority             uint32   `protobuf:"varint,6,opt,name=priority,proto3" json:"priority,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PimGrpMapInfosrcBag_KEYS) Reset()         { *m = PimGrpMapInfosrcBag_KEYS{} }
func (m *PimGrpMapInfosrcBag_KEYS) String() string { return proto.CompactTextString(m) }
func (*PimGrpMapInfosrcBag_KEYS) ProtoMessage()    {}
func (*PimGrpMapInfosrcBag_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_a55d304f0512423d, []int{0}
}

func (m *PimGrpMapInfosrcBag_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PimGrpMapInfosrcBag_KEYS.Unmarshal(m, b)
}
func (m *PimGrpMapInfosrcBag_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PimGrpMapInfosrcBag_KEYS.Marshal(b, m, deterministic)
}
func (m *PimGrpMapInfosrcBag_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PimGrpMapInfosrcBag_KEYS.Merge(m, src)
}
func (m *PimGrpMapInfosrcBag_KEYS) XXX_Size() int {
	return xxx_messageInfo_PimGrpMapInfosrcBag_KEYS.Size(m)
}
func (m *PimGrpMapInfosrcBag_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_PimGrpMapInfosrcBag_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_PimGrpMapInfosrcBag_KEYS proto.InternalMessageInfo

func (m *PimGrpMapInfosrcBag_KEYS) GetPrefix() string {
	if m != nil {
		return m.Prefix
	}
	return ""
}

func (m *PimGrpMapInfosrcBag_KEYS) GetPrefixLength() uint32 {
	if m != nil {
		return m.PrefixLength
	}
	return 0
}

func (m *PimGrpMapInfosrcBag_KEYS) GetClient() string {
	if m != nil {
		return m.Client
	}
	return ""
}

func (m *PimGrpMapInfosrcBag_KEYS) GetProtocol() string {
	if m != nil {
		return m.Protocol
	}
	return ""
}

func (m *PimGrpMapInfosrcBag_KEYS) GetRpAddress() string {
	if m != nil {
		return m.RpAddress
	}
	return ""
}

func (m *PimGrpMapInfosrcBag_KEYS) GetPriority() uint32 {
	if m != nil {
		return m.Priority
	}
	return 0
}

type PimAddrtype struct {
	AfName               string   `protobuf:"bytes,1,opt,name=af_name,json=afName,proto3" json:"af_name,omitempty"`
	Ipv4Address          string   `protobuf:"bytes,2,opt,name=ipv4_address,json=ipv4Address,proto3" json:"ipv4_address,omitempty"`
	Ipv6Address          string   `protobuf:"bytes,3,opt,name=ipv6_address,json=ipv6Address,proto3" json:"ipv6_address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PimAddrtype) Reset()         { *m = PimAddrtype{} }
func (m *PimAddrtype) String() string { return proto.CompactTextString(m) }
func (*PimAddrtype) ProtoMessage()    {}
func (*PimAddrtype) Descriptor() ([]byte, []int) {
	return fileDescriptor_a55d304f0512423d, []int{1}
}

func (m *PimAddrtype) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PimAddrtype.Unmarshal(m, b)
}
func (m *PimAddrtype) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PimAddrtype.Marshal(b, m, deterministic)
}
func (m *PimAddrtype) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PimAddrtype.Merge(m, src)
}
func (m *PimAddrtype) XXX_Size() int {
	return xxx_messageInfo_PimAddrtype.Size(m)
}
func (m *PimAddrtype) XXX_DiscardUnknown() {
	xxx_messageInfo_PimAddrtype.DiscardUnknown(m)
}

var xxx_messageInfo_PimAddrtype proto.InternalMessageInfo

func (m *PimAddrtype) GetAfName() string {
	if m != nil {
		return m.AfName
	}
	return ""
}

func (m *PimAddrtype) GetIpv4Address() string {
	if m != nil {
		return m.Ipv4Address
	}
	return ""
}

func (m *PimAddrtype) GetIpv6Address() string {
	if m != nil {
		return m.Ipv6Address
	}
	return ""
}

type PimGrpMapBag struct {
	Prefix               *PimAddrtype `protobuf:"bytes,1,opt,name=prefix,proto3" json:"prefix,omitempty"`
	PrefixLength         int32        `protobuf:"zigzag32,2,opt,name=prefix_length,json=prefixLength,proto3" json:"prefix_length,omitempty"`
	Client               string       `protobuf:"bytes,3,opt,name=client,proto3" json:"client,omitempty"`
	Protocol             string       `protobuf:"bytes,4,opt,name=protocol,proto3" json:"protocol,omitempty"`
	RpAddress            *PimAddrtype `protobuf:"bytes,5,opt,name=rp_address,json=rpAddress,proto3" json:"rp_address,omitempty"`
	GroupCount           uint32       `protobuf:"varint,6,opt,name=group_count,json=groupCount,proto3" json:"group_count,omitempty"`
	IsUsed               bool         `protobuf:"varint,7,opt,name=is_used,json=isUsed,proto3" json:"is_used,omitempty"`
	MribActive           bool         `protobuf:"varint,8,opt,name=mrib_active,json=mribActive,proto3" json:"mrib_active,omitempty"`
	IsOverride           bool         `protobuf:"varint,9,opt,name=is_override,json=isOverride,proto3" json:"is_override,omitempty"`
	Priority             uint32       `protobuf:"varint,10,opt,name=priority,proto3" json:"priority,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *PimGrpMapBag) Reset()         { *m = PimGrpMapBag{} }
func (m *PimGrpMapBag) String() string { return proto.CompactTextString(m) }
func (*PimGrpMapBag) ProtoMessage()    {}
func (*PimGrpMapBag) Descriptor() ([]byte, []int) {
	return fileDescriptor_a55d304f0512423d, []int{2}
}

func (m *PimGrpMapBag) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PimGrpMapBag.Unmarshal(m, b)
}
func (m *PimGrpMapBag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PimGrpMapBag.Marshal(b, m, deterministic)
}
func (m *PimGrpMapBag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PimGrpMapBag.Merge(m, src)
}
func (m *PimGrpMapBag) XXX_Size() int {
	return xxx_messageInfo_PimGrpMapBag.Size(m)
}
func (m *PimGrpMapBag) XXX_DiscardUnknown() {
	xxx_messageInfo_PimGrpMapBag.DiscardUnknown(m)
}

var xxx_messageInfo_PimGrpMapBag proto.InternalMessageInfo

func (m *PimGrpMapBag) GetPrefix() *PimAddrtype {
	if m != nil {
		return m.Prefix
	}
	return nil
}

func (m *PimGrpMapBag) GetPrefixLength() int32 {
	if m != nil {
		return m.PrefixLength
	}
	return 0
}

func (m *PimGrpMapBag) GetClient() string {
	if m != nil {
		return m.Client
	}
	return ""
}

func (m *PimGrpMapBag) GetProtocol() string {
	if m != nil {
		return m.Protocol
	}
	return ""
}

func (m *PimGrpMapBag) GetRpAddress() *PimAddrtype {
	if m != nil {
		return m.RpAddress
	}
	return nil
}

func (m *PimGrpMapBag) GetGroupCount() uint32 {
	if m != nil {
		return m.GroupCount
	}
	return 0
}

func (m *PimGrpMapBag) GetIsUsed() bool {
	if m != nil {
		return m.IsUsed
	}
	return false
}

func (m *PimGrpMapBag) GetMribActive() bool {
	if m != nil {
		return m.MribActive
	}
	return false
}

func (m *PimGrpMapBag) GetIsOverride() bool {
	if m != nil {
		return m.IsOverride
	}
	return false
}

func (m *PimGrpMapBag) GetPriority() uint32 {
	if m != nil {
		return m.Priority
	}
	return 0
}

type PimGrpMapInfosrcBag struct {
	SourceOfInformation  *PimAddrtype  `protobuf:"bytes,50,opt,name=source_of_information,json=sourceOfInformation,proto3" json:"source_of_information,omitempty"`
	Holdtime             int32         `protobuf:"zigzag32,51,opt,name=holdtime,proto3" json:"holdtime,omitempty"`
	Expires              uint64        `protobuf:"varint,52,opt,name=expires,proto3" json:"expires,omitempty"`
	Uptime               uint64        `protobuf:"varint,53,opt,name=uptime,proto3" json:"uptime,omitempty"`
	GroupMapInformation  *PimGrpMapBag `protobuf:"bytes,54,opt,name=group_map_information,json=groupMapInformation,proto3" json:"group_map_information,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *PimGrpMapInfosrcBag) Reset()         { *m = PimGrpMapInfosrcBag{} }
func (m *PimGrpMapInfosrcBag) String() string { return proto.CompactTextString(m) }
func (*PimGrpMapInfosrcBag) ProtoMessage()    {}
func (*PimGrpMapInfosrcBag) Descriptor() ([]byte, []int) {
	return fileDescriptor_a55d304f0512423d, []int{3}
}

func (m *PimGrpMapInfosrcBag) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PimGrpMapInfosrcBag.Unmarshal(m, b)
}
func (m *PimGrpMapInfosrcBag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PimGrpMapInfosrcBag.Marshal(b, m, deterministic)
}
func (m *PimGrpMapInfosrcBag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PimGrpMapInfosrcBag.Merge(m, src)
}
func (m *PimGrpMapInfosrcBag) XXX_Size() int {
	return xxx_messageInfo_PimGrpMapInfosrcBag.Size(m)
}
func (m *PimGrpMapInfosrcBag) XXX_DiscardUnknown() {
	xxx_messageInfo_PimGrpMapInfosrcBag.DiscardUnknown(m)
}

var xxx_messageInfo_PimGrpMapInfosrcBag proto.InternalMessageInfo

func (m *PimGrpMapInfosrcBag) GetSourceOfInformation() *PimAddrtype {
	if m != nil {
		return m.SourceOfInformation
	}
	return nil
}

func (m *PimGrpMapInfosrcBag) GetHoldtime() int32 {
	if m != nil {
		return m.Holdtime
	}
	return 0
}

func (m *PimGrpMapInfosrcBag) GetExpires() uint64 {
	if m != nil {
		return m.Expires
	}
	return 0
}

func (m *PimGrpMapInfosrcBag) GetUptime() uint64 {
	if m != nil {
		return m.Uptime
	}
	return 0
}

func (m *PimGrpMapInfosrcBag) GetGroupMapInformation() *PimGrpMapBag {
	if m != nil {
		return m.GroupMapInformation
	}
	return nil
}

func init() {
	proto.RegisterType((*PimGrpMapInfosrcBag_KEYS)(nil), "cisco_ios_xr_ipv4_pim_oper.pim.standby.default_context.group_map_sources.group_map_source.pim_grp_map_infosrc_bag_KEYS")
	proto.RegisterType((*PimAddrtype)(nil), "cisco_ios_xr_ipv4_pim_oper.pim.standby.default_context.group_map_sources.group_map_source.pim_addrtype")
	proto.RegisterType((*PimGrpMapBag)(nil), "cisco_ios_xr_ipv4_pim_oper.pim.standby.default_context.group_map_sources.group_map_source.pim_grp_map_bag")
	proto.RegisterType((*PimGrpMapInfosrcBag)(nil), "cisco_ios_xr_ipv4_pim_oper.pim.standby.default_context.group_map_sources.group_map_source.pim_grp_map_infosrc_bag")
}

func init() { proto.RegisterFile("pim_grp_map_infosrc_bag.proto", fileDescriptor_a55d304f0512423d) }

var fileDescriptor_a55d304f0512423d = []byte{
	// 514 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x53, 0x3d, 0x6f, 0xdb, 0x30,
	0x10, 0x85, 0x62, 0xd7, 0x1f, 0xb4, 0x83, 0xa2, 0x0c, 0xd2, 0x10, 0x45, 0x83, 0xba, 0xee, 0xe2,
	0x49, 0x43, 0x92, 0x7a, 0x0f, 0x8a, 0x0e, 0x45, 0x3f, 0x02, 0xa8, 0xe8, 0x90, 0x89, 0xa0, 0x24,
	0x4a, 0xb9, 0x42, 0x12, 0x09, 0x92, 0x32, 0xec, 0xa9, 0x5b, 0xa7, 0xfe, 0x83, 0x02, 0x1d, 0xfb,
	0x63, 0xfa, 0xab, 0x0a, 0x92, 0xb2, 0xa2, 0x34, 0x48, 0xa7, 0xc4, 0x9b, 0xef, 0xdd, 0x7b, 0x3e,
	0xbe, 0xbb, 0x27, 0x74, 0x2c, 0xa1, 0xa4, 0xb9, 0x92, 0xb4, 0x64, 0x92, 0x42, 0x95, 0x09, 0xad,
	0x12, 0x1a, 0xb3, 0x3c, 0x94, 0x4a, 0x18, 0x81, 0x2f, 0x13, 0xd0, 0x89, 0xa0, 0x20, 0x34, 0x5d,
	0x2b, 0x0a, 0x72, 0x75, 0x46, 0xad, 0x40, 0x48, 0xae, 0x42, 0x09, 0x65, 0xa8, 0x0d, 0xab, 0xd2,
	0x78, 0x13, 0xa6, 0x3c, 0x63, 0x75, 0x61, 0x68, 0x22, 0x2a, 0xc3, 0xd7, 0x26, 0xcc, 0x95, 0xa8,
	0xfd, 0x7f, 0x6a, 0x51, 0xab, 0x84, 0xeb, 0x5b, 0xc8, 0xfc, 0x4f, 0x80, 0x9e, 0xdf, 0x31, 0x9c,
	0xbe, 0x7f, 0x7b, 0xf9, 0x19, 0x3f, 0x45, 0x03, 0xa9, 0x78, 0x06, 0x6b, 0x12, 0xcc, 0x82, 0xc5,
	0x38, 0x6a, 0x2a, 0xfc, 0x0a, 0xed, 0xfb, 0x5f, 0xb4, 0xe0, 0x55, 0x6e, 0xae, 0xc8, 0xde, 0x2c,
	0x58, 0xec, 0x47, 0x53, 0x0f, 0x7e, 0x70, 0x98, 0x15, 0x27, 0x05, 0xf0, 0xca, 0x90, 0x9e, 0x17,
	0xfb, 0x0a, 0x3f, 0x43, 0x23, 0xe7, 0x2c, 0x11, 0x05, 0xe9, 0xbb, 0x4e, 0x5b, 0xe3, 0x63, 0x84,
	0x94, 0xa4, 0x2c, 0x4d, 0x15, 0xd7, 0x9a, 0x3c, 0x72, 0xdd, 0xb1, 0x92, 0xe7, 0x1e, 0xf0, 0x52,
	0x10, 0x0a, 0xcc, 0x86, 0x0c, 0xdc, 0xc8, 0xb6, 0x9e, 0x97, 0x68, 0x6a, 0xbd, 0x58, 0xad, 0xd9,
	0x48, 0x8e, 0x8f, 0xd0, 0x90, 0x65, 0xb4, 0x62, 0x25, 0xdf, 0x3e, 0x9e, 0x65, 0x9f, 0x58, 0xc9,
	0xf1, 0x4b, 0x34, 0x75, 0x5b, 0xdc, 0x4e, 0xd9, 0x73, 0xdd, 0x89, 0xc5, 0xb6, 0x73, 0x3c, 0x65,
	0xd9, 0x52, 0x7a, 0x2d, 0x65, 0xd9, 0x50, 0xe6, 0x3f, 0xfa, 0xe8, 0x71, 0x77, 0x77, 0x31, 0xcb,
	0xf1, 0xb7, 0x1b, 0xeb, 0x9a, 0x9c, 0xe4, 0xe1, 0x83, 0xdd, 0x2e, 0xec, 0x7a, 0xfd, 0xff, 0x5d,
	0x9e, 0xdc, 0xc3, 0x5d, 0xbe, 0x07, 0xb7, 0x0e, 0xb3, 0x43, 0x7b, 0x9d, 0x04, 0xbc, 0x40, 0x13,
	0xcf, 0x4d, 0x44, 0x5d, 0x99, 0x26, 0x04, 0xc8, 0x41, 0x6f, 0x2c, 0x62, 0xcf, 0x0e, 0x9a, 0xd6,
	0x9a, 0xa7, 0x64, 0x38, 0x0b, 0x16, 0xa3, 0x68, 0x00, 0xfa, 0x8b, 0xe6, 0xa9, 0x55, 0x96, 0x0a,
	0x62, 0xca, 0x12, 0x03, 0x2b, 0x4e, 0x46, 0xae, 0x89, 0x2c, 0x74, 0xee, 0x10, 0x4b, 0x00, 0x4d,
	0xc5, 0x8a, 0x2b, 0x05, 0x29, 0x27, 0x63, 0x4f, 0x00, 0x7d, 0xd1, 0x20, 0x37, 0xd2, 0x87, 0xfe,
	0x49, 0xdf, 0xef, 0x1e, 0x3a, 0xba, 0xe3, 0x53, 0xc2, 0x3f, 0x03, 0x74, 0xe8, 0x6d, 0x51, 0x91,
	0xb9, 0x8e, 0x2a, 0x99, 0x01, 0x51, 0x91, 0x93, 0xdd, 0xee, 0xf1, 0xc0, 0x83, 0x17, 0xd9, 0xbb,
	0xeb, 0x37, 0x58, 0x57, 0x57, 0xa2, 0x48, 0x0d, 0x94, 0x9c, 0x9c, 0xba, 0xb8, 0xb4, 0x35, 0x26,
	0x68, 0xc8, 0xd7, 0x12, 0x14, 0xd7, 0xe4, 0x6c, 0x16, 0x2c, 0xfa, 0xd1, 0xb6, 0xb4, 0x21, 0xaa,
	0xa5, 0xd3, 0xbc, 0x76, 0x8d, 0xa6, 0xc2, 0xbf, 0x02, 0x74, 0x78, 0xfd, 0x88, 0xae, 0xd7, 0xa5,
	0xf3, 0xfa, 0xf5, 0x81, 0xbd, 0x76, 0x3e, 0xc7, 0xe8, 0xc0, 0x31, 0x3e, 0x32, 0xd9, 0xb1, 0x1b,
	0x0f, 0x5c, 0xa6, 0x4f, 0xff, 0x06, 0x00, 0x00, 0xff, 0xff, 0x18, 0x74, 0xca, 0xeb, 0x76, 0x05,
	0x00, 0x00,
}
