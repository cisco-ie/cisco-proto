/*
Copyright 2019 Cisco Systems

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pim_rpf_policy_test_bag.proto

package cisco_ios_xr_ipv4_pim_oper_ipv6_pim_active_vrfs_vrf_route_policy_route_policy_tests_route_policy_test

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type PimRpfPolicyTestBag_KEYS struct {
	VrfName              string   `protobuf:"bytes,1,opt,name=vrf_name,json=vrfName,proto3" json:"vrf_name,omitempty"`
	SourceAddress        string   `protobuf:"bytes,2,opt,name=source_address,json=sourceAddress,proto3" json:"source_address,omitempty"`
	GroupAddress         string   `protobuf:"bytes,3,opt,name=group_address,json=groupAddress,proto3" json:"group_address,omitempty"`
	ExtComm              string   `protobuf:"bytes,4,opt,name=ext_comm,json=extComm,proto3" json:"ext_comm,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PimRpfPolicyTestBag_KEYS) Reset()         { *m = PimRpfPolicyTestBag_KEYS{} }
func (m *PimRpfPolicyTestBag_KEYS) String() string { return proto.CompactTextString(m) }
func (*PimRpfPolicyTestBag_KEYS) ProtoMessage()    {}
func (*PimRpfPolicyTestBag_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_19a2a94ff48f1cb7, []int{0}
}

func (m *PimRpfPolicyTestBag_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PimRpfPolicyTestBag_KEYS.Unmarshal(m, b)
}
func (m *PimRpfPolicyTestBag_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PimRpfPolicyTestBag_KEYS.Marshal(b, m, deterministic)
}
func (m *PimRpfPolicyTestBag_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PimRpfPolicyTestBag_KEYS.Merge(m, src)
}
func (m *PimRpfPolicyTestBag_KEYS) XXX_Size() int {
	return xxx_messageInfo_PimRpfPolicyTestBag_KEYS.Size(m)
}
func (m *PimRpfPolicyTestBag_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_PimRpfPolicyTestBag_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_PimRpfPolicyTestBag_KEYS proto.InternalMessageInfo

func (m *PimRpfPolicyTestBag_KEYS) GetVrfName() string {
	if m != nil {
		return m.VrfName
	}
	return ""
}

func (m *PimRpfPolicyTestBag_KEYS) GetSourceAddress() string {
	if m != nil {
		return m.SourceAddress
	}
	return ""
}

func (m *PimRpfPolicyTestBag_KEYS) GetGroupAddress() string {
	if m != nil {
		return m.GroupAddress
	}
	return ""
}

func (m *PimRpfPolicyTestBag_KEYS) GetExtComm() string {
	if m != nil {
		return m.ExtComm
	}
	return ""
}

type PimAddrtype struct {
	AfName               string   `protobuf:"bytes,1,opt,name=af_name,json=afName,proto3" json:"af_name,omitempty"`
	Ipv4Address          string   `protobuf:"bytes,2,opt,name=ipv4_address,json=ipv4Address,proto3" json:"ipv4_address,omitempty"`
	Ipv6Address          string   `protobuf:"bytes,3,opt,name=ipv6_address,json=ipv6Address,proto3" json:"ipv6_address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PimAddrtype) Reset()         { *m = PimAddrtype{} }
func (m *PimAddrtype) String() string { return proto.CompactTextString(m) }
func (*PimAddrtype) ProtoMessage()    {}
func (*PimAddrtype) Descriptor() ([]byte, []int) {
	return fileDescriptor_19a2a94ff48f1cb7, []int{1}
}

func (m *PimAddrtype) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PimAddrtype.Unmarshal(m, b)
}
func (m *PimAddrtype) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PimAddrtype.Marshal(b, m, deterministic)
}
func (m *PimAddrtype) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PimAddrtype.Merge(m, src)
}
func (m *PimAddrtype) XXX_Size() int {
	return xxx_messageInfo_PimAddrtype.Size(m)
}
func (m *PimAddrtype) XXX_DiscardUnknown() {
	xxx_messageInfo_PimAddrtype.DiscardUnknown(m)
}

var xxx_messageInfo_PimAddrtype proto.InternalMessageInfo

func (m *PimAddrtype) GetAfName() string {
	if m != nil {
		return m.AfName
	}
	return ""
}

func (m *PimAddrtype) GetIpv4Address() string {
	if m != nil {
		return m.Ipv4Address
	}
	return ""
}

func (m *PimAddrtype) GetIpv6Address() string {
	if m != nil {
		return m.Ipv6Address
	}
	return ""
}

type PimRpfPolicyTestBag struct {
	PolicyName           string       `protobuf:"bytes,50,opt,name=policy_name,json=policyName,proto3" json:"policy_name,omitempty"`
	SourceAddressXr      *PimAddrtype `protobuf:"bytes,51,opt,name=source_address_xr,json=sourceAddressXr,proto3" json:"source_address_xr,omitempty"`
	GroupAddressXr       *PimAddrtype `protobuf:"bytes,52,opt,name=group_address_xr,json=groupAddressXr,proto3" json:"group_address_xr,omitempty"`
	ExtendedCommunityRt  string       `protobuf:"bytes,53,opt,name=extended_community_rt,json=extendedCommunityRt,proto3" json:"extended_community_rt,omitempty"`
	Pass                 bool         `protobuf:"varint,54,opt,name=pass,proto3" json:"pass,omitempty"`
	DefaultTable         bool         `protobuf:"varint,55,opt,name=default_table,json=defaultTable,proto3" json:"default_table,omitempty"`
	VrfName              string       `protobuf:"bytes,56,opt,name=vrf_name,json=vrfName,proto3" json:"vrf_name,omitempty"`
	Afi                  uint32       `protobuf:"varint,57,opt,name=afi,proto3" json:"afi,omitempty"`
	Safi                 uint32       `protobuf:"varint,58,opt,name=safi,proto3" json:"safi,omitempty"`
	TableName            string       `protobuf:"bytes,59,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty"`
	TableExists          bool         `protobuf:"varint,60,opt,name=table_exists,json=tableExists,proto3" json:"table_exists,omitempty"`
	TableActive          bool         `protobuf:"varint,61,opt,name=table_active,json=tableActive,proto3" json:"table_active,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *PimRpfPolicyTestBag) Reset()         { *m = PimRpfPolicyTestBag{} }
func (m *PimRpfPolicyTestBag) String() string { return proto.CompactTextString(m) }
func (*PimRpfPolicyTestBag) ProtoMessage()    {}
func (*PimRpfPolicyTestBag) Descriptor() ([]byte, []int) {
	return fileDescriptor_19a2a94ff48f1cb7, []int{2}
}

func (m *PimRpfPolicyTestBag) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PimRpfPolicyTestBag.Unmarshal(m, b)
}
func (m *PimRpfPolicyTestBag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PimRpfPolicyTestBag.Marshal(b, m, deterministic)
}
func (m *PimRpfPolicyTestBag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PimRpfPolicyTestBag.Merge(m, src)
}
func (m *PimRpfPolicyTestBag) XXX_Size() int {
	return xxx_messageInfo_PimRpfPolicyTestBag.Size(m)
}
func (m *PimRpfPolicyTestBag) XXX_DiscardUnknown() {
	xxx_messageInfo_PimRpfPolicyTestBag.DiscardUnknown(m)
}

var xxx_messageInfo_PimRpfPolicyTestBag proto.InternalMessageInfo

func (m *PimRpfPolicyTestBag) GetPolicyName() string {
	if m != nil {
		return m.PolicyName
	}
	return ""
}

func (m *PimRpfPolicyTestBag) GetSourceAddressXr() *PimAddrtype {
	if m != nil {
		return m.SourceAddressXr
	}
	return nil
}

func (m *PimRpfPolicyTestBag) GetGroupAddressXr() *PimAddrtype {
	if m != nil {
		return m.GroupAddressXr
	}
	return nil
}

func (m *PimRpfPolicyTestBag) GetExtendedCommunityRt() string {
	if m != nil {
		return m.ExtendedCommunityRt
	}
	return ""
}

func (m *PimRpfPolicyTestBag) GetPass() bool {
	if m != nil {
		return m.Pass
	}
	return false
}

func (m *PimRpfPolicyTestBag) GetDefaultTable() bool {
	if m != nil {
		return m.DefaultTable
	}
	return false
}

func (m *PimRpfPolicyTestBag) GetVrfName() string {
	if m != nil {
		return m.VrfName
	}
	return ""
}

func (m *PimRpfPolicyTestBag) GetAfi() uint32 {
	if m != nil {
		return m.Afi
	}
	return 0
}

func (m *PimRpfPolicyTestBag) GetSafi() uint32 {
	if m != nil {
		return m.Safi
	}
	return 0
}

func (m *PimRpfPolicyTestBag) GetTableName() string {
	if m != nil {
		return m.TableName
	}
	return ""
}

func (m *PimRpfPolicyTestBag) GetTableExists() bool {
	if m != nil {
		return m.TableExists
	}
	return false
}

func (m *PimRpfPolicyTestBag) GetTableActive() bool {
	if m != nil {
		return m.TableActive
	}
	return false
}

func init() {
	proto.RegisterType((*PimRpfPolicyTestBag_KEYS)(nil), "cisco_ios_xr_ipv4_pim_oper.ipv6_pim.active.vrfs.vrf.route_policy.route_policy_tests.route_policy_test.pim_rpf_policy_test_bag_KEYS")
	proto.RegisterType((*PimAddrtype)(nil), "cisco_ios_xr_ipv4_pim_oper.ipv6_pim.active.vrfs.vrf.route_policy.route_policy_tests.route_policy_test.pim_addrtype")
	proto.RegisterType((*PimRpfPolicyTestBag)(nil), "cisco_ios_xr_ipv4_pim_oper.ipv6_pim.active.vrfs.vrf.route_policy.route_policy_tests.route_policy_test.pim_rpf_policy_test_bag")
}

func init() { proto.RegisterFile("pim_rpf_policy_test_bag.proto", fileDescriptor_19a2a94ff48f1cb7) }

var fileDescriptor_19a2a94ff48f1cb7 = []byte{
	// 466 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x94, 0xcf, 0x6e, 0x13, 0x31,
	0x10, 0xc6, 0xb5, 0xb4, 0xb4, 0xe9, 0x24, 0x29, 0xc5, 0x08, 0xd5, 0x95, 0xa8, 0x08, 0x41, 0x48,
	0x39, 0xed, 0x21, 0x2d, 0xe1, 0xff, 0xa1, 0xaa, 0x7a, 0x42, 0xe2, 0x10, 0x38, 0x94, 0x93, 0xe5,
	0xec, 0xce, 0x56, 0x96, 0xb2, 0xb1, 0x65, 0x7b, 0x57, 0x9b, 0xa7, 0xe0, 0x09, 0x10, 0x3c, 0x2a,
	0xf2, 0x38, 0x0b, 0x59, 0x50, 0xaf, 0xf4, 0xb2, 0xb2, 0x7f, 0xf3, 0x79, 0xe6, 0xd3, 0xcc, 0x68,
	0xe1, 0xd4, 0xa8, 0x52, 0x58, 0x53, 0x08, 0xa3, 0x97, 0x2a, 0x5b, 0x0b, 0x8f, 0xce, 0x8b, 0x85,
	0xbc, 0x49, 0x8d, 0xd5, 0x5e, 0x33, 0xcc, 0x94, 0xcb, 0xb4, 0x50, 0xda, 0x89, 0xc6, 0x0a, 0x65,
	0xea, 0x73, 0x11, 0x1e, 0x68, 0x83, 0x36, 0x55, 0xa6, 0x9e, 0x85, 0x5b, 0x2a, 0x33, 0xaf, 0x6a,
	0x4c, 0x6b, 0x5b, 0xb8, 0xf0, 0x49, 0xad, 0xae, 0x3c, 0x6e, 0x12, 0x76, 0x2e, 0x94, 0xdd, 0xfd,
	0x8b, 0xc6, 0x3f, 0x13, 0x78, 0x72, 0x8b, 0x11, 0xf1, 0xf1, 0xea, 0xeb, 0x67, 0x76, 0x02, 0xbd,
	0xda, 0x16, 0x62, 0x25, 0x4b, 0xe4, 0xc9, 0x28, 0x99, 0x1c, 0xcc, 0xf7, 0x6b, 0x5b, 0x7c, 0x92,
	0x25, 0xb2, 0x17, 0x70, 0xe8, 0x74, 0x65, 0x33, 0x14, 0x32, 0xcf, 0x2d, 0x3a, 0xc7, 0xef, 0x91,
	0x60, 0x18, 0xe9, 0x45, 0x84, 0xec, 0x39, 0x0c, 0x6f, 0xac, 0xae, 0xcc, 0x6f, 0xd5, 0x0e, 0xa9,
	0x06, 0x04, 0x5b, 0xd1, 0x09, 0xf4, 0xb0, 0xf1, 0x22, 0xd3, 0x65, 0xc9, 0x77, 0x63, 0x19, 0x6c,
	0xfc, 0xa5, 0x2e, 0xcb, 0x71, 0x09, 0x83, 0xe0, 0x30, 0xbc, 0xf6, 0x6b, 0x83, 0xec, 0x18, 0xf6,
	0x65, 0xc7, 0xd0, 0x9e, 0x8c, 0x7e, 0x9e, 0xc1, 0x80, 0xfa, 0xd4, 0x75, 0xd3, 0x0f, 0xac, 0x2d,
	0x13, 0x25, 0xb3, 0xbf, 0xac, 0x04, 0xc9, 0x6c, 0x23, 0x19, 0x7f, 0xbb, 0x0f, 0xc7, 0xb7, 0x74,
	0x84, 0x3d, 0x85, 0xfe, 0x06, 0x51, 0xf9, 0x29, 0xbd, 0x86, 0x88, 0xc8, 0xc2, 0x8f, 0x04, 0x1e,
	0x76, 0x7b, 0x22, 0x1a, 0xcb, 0xcf, 0x46, 0xc9, 0xa4, 0x3f, 0x75, 0xe9, 0x7f, 0x19, 0x69, 0xba,
	0xdd, 0xac, 0xf9, 0x83, 0xce, 0x2c, 0xae, 0x2d, 0xfb, 0x9e, 0xc0, 0x51, 0x67, 0x1c, 0xc1, 0xe0,
	0xf9, 0xdd, 0x19, 0x3c, 0xdc, 0x5e, 0x83, 0x6b, 0xcb, 0xa6, 0xf0, 0x18, 0x1b, 0x8f, 0xab, 0x1c,
	0x73, 0xda, 0x86, 0x6a, 0xa5, 0xfc, 0x5a, 0x58, 0xcf, 0x5f, 0x52, 0xb3, 0x1f, 0xb5, 0xc1, 0xcb,
	0x36, 0x36, 0xf7, 0x8c, 0xc1, 0xae, 0x91, 0xce, 0xf1, 0xd9, 0x28, 0x99, 0xf4, 0xe6, 0x74, 0x0e,
	0x5b, 0x97, 0x63, 0x21, 0xab, 0xa5, 0x17, 0x5e, 0x2e, 0x96, 0xc8, 0x5f, 0x51, 0x70, 0xb0, 0x81,
	0x5f, 0x02, 0xeb, 0x2c, 0xf7, 0xeb, 0xee, 0x72, 0x1f, 0xc1, 0x8e, 0x2c, 0x14, 0x7f, 0x33, 0x4a,
	0x26, 0xc3, 0x79, 0x38, 0x86, 0x2a, 0x2e, 0xa0, 0xb7, 0x84, 0xe8, 0xcc, 0x4e, 0x01, 0x28, 0x7b,
	0x4c, 0xf1, 0x8e, 0x52, 0x1c, 0x10, 0x69, 0x37, 0x32, 0x86, 0xb1, 0x51, 0xce, 0x3b, 0xfe, 0x9e,
	0x3c, 0xf4, 0x89, 0x5d, 0x11, 0xfa, 0x23, 0x89, 0x7d, 0xe5, 0x1f, 0xb6, 0x24, 0x17, 0x84, 0x16,
	0x7b, 0xf4, 0x47, 0x38, 0xfb, 0x15, 0x00, 0x00, 0xff, 0xff, 0x9b, 0xcc, 0x1e, 0x5f, 0x32, 0x04,
	0x00, 0x00,
}
