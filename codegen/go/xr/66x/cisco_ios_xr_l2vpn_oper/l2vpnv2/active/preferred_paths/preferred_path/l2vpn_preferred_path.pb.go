/*
Copyright 2019 Cisco Systems

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: l2vpn_preferred_path.proto

package cisco_ios_xr_l2vpn_oper_l2vpnv2_active_preferred_paths_preferred_path

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type L2VpnPreferredPath_KEYS struct {
	PreferredType        string   `protobuf:"bytes,1,opt,name=preferred_type,json=preferredType,proto3" json:"preferred_type,omitempty"`
	InterfaceName        string   `protobuf:"bytes,2,opt,name=interface_name,json=interfaceName,proto3" json:"interface_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *L2VpnPreferredPath_KEYS) Reset()         { *m = L2VpnPreferredPath_KEYS{} }
func (m *L2VpnPreferredPath_KEYS) String() string { return proto.CompactTextString(m) }
func (*L2VpnPreferredPath_KEYS) ProtoMessage()    {}
func (*L2VpnPreferredPath_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_91713ea6b68a0ff2, []int{0}
}

func (m *L2VpnPreferredPath_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2VpnPreferredPath_KEYS.Unmarshal(m, b)
}
func (m *L2VpnPreferredPath_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2VpnPreferredPath_KEYS.Marshal(b, m, deterministic)
}
func (m *L2VpnPreferredPath_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2VpnPreferredPath_KEYS.Merge(m, src)
}
func (m *L2VpnPreferredPath_KEYS) XXX_Size() int {
	return xxx_messageInfo_L2VpnPreferredPath_KEYS.Size(m)
}
func (m *L2VpnPreferredPath_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_L2VpnPreferredPath_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_L2VpnPreferredPath_KEYS proto.InternalMessageInfo

func (m *L2VpnPreferredPath_KEYS) GetPreferredType() string {
	if m != nil {
		return m.PreferredType
	}
	return ""
}

func (m *L2VpnPreferredPath_KEYS) GetInterfaceName() string {
	if m != nil {
		return m.InterfaceName
	}
	return ""
}

type VcInfo struct {
	PeerId               string   `protobuf:"bytes,1,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
	SourceAddress        string   `protobuf:"bytes,2,opt,name=source_address,json=sourceAddress,proto3" json:"source_address,omitempty"`
	PwidType             string   `protobuf:"bytes,3,opt,name=pwid_type,json=pwidType,proto3" json:"pwid_type,omitempty"`
	Pwid                 uint64   `protobuf:"varint,4,opt,name=pwid,proto3" json:"pwid,omitempty"`
	FeCtype              string   `protobuf:"bytes,5,opt,name=fe_ctype,json=feCtype,proto3" json:"fe_ctype,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VcInfo) Reset()         { *m = VcInfo{} }
func (m *VcInfo) String() string { return proto.CompactTextString(m) }
func (*VcInfo) ProtoMessage()    {}
func (*VcInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_91713ea6b68a0ff2, []int{1}
}

func (m *VcInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VcInfo.Unmarshal(m, b)
}
func (m *VcInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VcInfo.Marshal(b, m, deterministic)
}
func (m *VcInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VcInfo.Merge(m, src)
}
func (m *VcInfo) XXX_Size() int {
	return xxx_messageInfo_VcInfo.Size(m)
}
func (m *VcInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_VcInfo.DiscardUnknown(m)
}

var xxx_messageInfo_VcInfo proto.InternalMessageInfo

func (m *VcInfo) GetPeerId() string {
	if m != nil {
		return m.PeerId
	}
	return ""
}

func (m *VcInfo) GetSourceAddress() string {
	if m != nil {
		return m.SourceAddress
	}
	return ""
}

func (m *VcInfo) GetPwidType() string {
	if m != nil {
		return m.PwidType
	}
	return ""
}

func (m *VcInfo) GetPwid() uint64 {
	if m != nil {
		return m.Pwid
	}
	return 0
}

func (m *VcInfo) GetFeCtype() string {
	if m != nil {
		return m.FeCtype
	}
	return ""
}

type L2VpnPreferredPath struct {
	Type                 string    `protobuf:"bytes,50,opt,name=type,proto3" json:"type,omitempty"`
	InterfaceNameXr      string    `protobuf:"bytes,51,opt,name=interface_name_xr,json=interfaceNameXr,proto3" json:"interface_name_xr,omitempty"`
	TotalBandwidth       uint32    `protobuf:"varint,52,opt,name=total_bandwidth,json=totalBandwidth,proto3" json:"total_bandwidth,omitempty"`
	AvailableBandwidth   uint32    `protobuf:"varint,53,opt,name=available_bandwidth,json=availableBandwidth,proto3" json:"available_bandwidth,omitempty"`
	ReservedBandwidth    uint32    `protobuf:"varint,54,opt,name=reserved_bandwidth,json=reservedBandwidth,proto3" json:"reserved_bandwidth,omitempty"`
	VirtualCircuit       []*VcInfo `protobuf:"bytes,55,rep,name=virtual_circuit,json=virtualCircuit,proto3" json:"virtual_circuit,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *L2VpnPreferredPath) Reset()         { *m = L2VpnPreferredPath{} }
func (m *L2VpnPreferredPath) String() string { return proto.CompactTextString(m) }
func (*L2VpnPreferredPath) ProtoMessage()    {}
func (*L2VpnPreferredPath) Descriptor() ([]byte, []int) {
	return fileDescriptor_91713ea6b68a0ff2, []int{2}
}

func (m *L2VpnPreferredPath) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2VpnPreferredPath.Unmarshal(m, b)
}
func (m *L2VpnPreferredPath) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2VpnPreferredPath.Marshal(b, m, deterministic)
}
func (m *L2VpnPreferredPath) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2VpnPreferredPath.Merge(m, src)
}
func (m *L2VpnPreferredPath) XXX_Size() int {
	return xxx_messageInfo_L2VpnPreferredPath.Size(m)
}
func (m *L2VpnPreferredPath) XXX_DiscardUnknown() {
	xxx_messageInfo_L2VpnPreferredPath.DiscardUnknown(m)
}

var xxx_messageInfo_L2VpnPreferredPath proto.InternalMessageInfo

func (m *L2VpnPreferredPath) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *L2VpnPreferredPath) GetInterfaceNameXr() string {
	if m != nil {
		return m.InterfaceNameXr
	}
	return ""
}

func (m *L2VpnPreferredPath) GetTotalBandwidth() uint32 {
	if m != nil {
		return m.TotalBandwidth
	}
	return 0
}

func (m *L2VpnPreferredPath) GetAvailableBandwidth() uint32 {
	if m != nil {
		return m.AvailableBandwidth
	}
	return 0
}

func (m *L2VpnPreferredPath) GetReservedBandwidth() uint32 {
	if m != nil {
		return m.ReservedBandwidth
	}
	return 0
}

func (m *L2VpnPreferredPath) GetVirtualCircuit() []*VcInfo {
	if m != nil {
		return m.VirtualCircuit
	}
	return nil
}

func init() {
	proto.RegisterType((*L2VpnPreferredPath_KEYS)(nil), "cisco_ios_xr_l2vpn_oper.l2vpnv2.active.preferred_paths.preferred_path.l2vpn_preferred_path_KEYS")
	proto.RegisterType((*VcInfo)(nil), "cisco_ios_xr_l2vpn_oper.l2vpnv2.active.preferred_paths.preferred_path.vc_info")
	proto.RegisterType((*L2VpnPreferredPath)(nil), "cisco_ios_xr_l2vpn_oper.l2vpnv2.active.preferred_paths.preferred_path.l2vpn_preferred_path")
}

func init() { proto.RegisterFile("l2vpn_preferred_path.proto", fileDescriptor_91713ea6b68a0ff2) }

var fileDescriptor_91713ea6b68a0ff2 = []byte{
	// 382 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x92, 0xcb, 0xaa, 0xdb, 0x30,
	0x10, 0x86, 0x71, 0x92, 0xe6, 0xa2, 0x92, 0x84, 0xa8, 0x85, 0x3a, 0xed, 0xc6, 0x04, 0x4a, 0x4d,
	0xa1, 0x2e, 0x38, 0xbd, 0xac, 0xdb, 0x90, 0x45, 0x29, 0x64, 0xe1, 0x76, 0xd1, 0xae, 0x84, 0x22,
	0x8d, 0x89, 0xc0, 0xb1, 0xc4, 0x58, 0x71, 0x92, 0x07, 0xe9, 0xbb, 0xf5, 0x71, 0x0e, 0x96, 0x9d,
	0xdb, 0x21, 0xcb, 0xb3, 0x9b, 0xf9, 0xf4, 0xe9, 0x1f, 0xc9, 0x16, 0x79, 0x9d, 0xc5, 0xa5, 0xc9,
	0x99, 0x41, 0x48, 0x01, 0x11, 0x24, 0x33, 0xdc, 0x6e, 0x22, 0x83, 0xda, 0x6a, 0xba, 0x14, 0xaa,
	0x10, 0x9a, 0x29, 0x5d, 0xb0, 0x03, 0xb2, 0x5a, 0xd4, 0x06, 0x30, 0x72, 0x65, 0x19, 0x47, 0x5c,
	0x58, 0x55, 0x42, 0x74, 0xbb, 0xb9, 0x78, 0xd4, 0xcf, 0x14, 0x99, 0xde, 0x1b, 0xc2, 0x7e, 0x2e,
	0xff, 0xfe, 0xa2, 0x6f, 0xc9, 0xe8, 0x82, 0xed, 0xd1, 0x80, 0xef, 0x05, 0x5e, 0x38, 0x48, 0x86,
	0x67, 0xfa, 0xfb, 0x68, 0xa0, 0xd2, 0x54, 0x6e, 0x01, 0x53, 0x2e, 0x80, 0xe5, 0x7c, 0x0b, 0x7e,
	0xab, 0xd6, 0xce, 0x74, 0xc5, 0xb7, 0x30, 0xfb, 0xe7, 0x91, 0x5e, 0x29, 0x98, 0xca, 0x53, 0x4d,
	0x5f, 0x91, 0x9e, 0x01, 0x40, 0xa6, 0x64, 0x13, 0xd9, 0xad, 0xda, 0x1f, 0xb2, 0xca, 0x2a, 0xf4,
	0x0e, 0x05, 0x30, 0x2e, 0x25, 0x42, 0x51, 0x9c, 0xb2, 0x6a, 0xfa, 0xad, 0x86, 0xf4, 0x0d, 0x19,
	0x98, 0xbd, 0x6a, 0x0e, 0xd5, 0x76, 0x46, 0xbf, 0x02, 0xee, 0x3c, 0x94, 0x74, 0xaa, 0xda, 0xef,
	0x04, 0x5e, 0xd8, 0x49, 0x5c, 0x4d, 0xa7, 0xa4, 0x9f, 0x02, 0x13, 0xce, 0x7f, 0xe6, 0xfc, 0x5e,
	0x0a, 0x8b, 0xaa, 0x9d, 0xfd, 0x6f, 0x91, 0x97, 0xf7, 0xbe, 0x41, 0x95, 0xe3, 0xfc, 0xd8, 0xf9,
	0xae, 0xa6, 0xef, 0xc9, 0xe4, 0xf6, 0xae, 0xec, 0x80, 0xfe, 0xdc, 0x09, 0xe3, 0x9b, 0xeb, 0xfe,
	0x41, 0xfa, 0x8e, 0x8c, 0xad, 0xb6, 0x3c, 0x63, 0x6b, 0x9e, 0xcb, 0xbd, 0x92, 0x76, 0xe3, 0x7f,
	0x0a, 0xbc, 0x70, 0x98, 0x8c, 0x1c, 0xfe, 0x7e, 0xa2, 0xf4, 0x23, 0x79, 0xc1, 0x4b, 0xae, 0x32,
	0xbe, 0xce, 0xe0, 0x4a, 0xfe, 0xec, 0x64, 0x7a, 0x5e, 0xba, 0x6c, 0xf8, 0x40, 0x28, 0x42, 0x01,
	0x58, 0x82, 0xbc, 0xf2, 0xbf, 0x38, 0x7f, 0x72, 0x5a, 0xb9, 0xe8, 0x7b, 0x32, 0x2e, 0x15, 0xda,
	0x1d, 0xcf, 0x98, 0x50, 0x28, 0x76, 0xca, 0xfa, 0x5f, 0x83, 0x76, 0xf8, 0x3c, 0x5e, 0x45, 0x4f,
	0xf2, 0x8a, 0xa2, 0xe6, 0xb7, 0x26, 0xa3, 0x66, 0xcc, 0xa2, 0x9e, 0xb2, 0xee, 0xba, 0xb7, 0x3a,
	0x7f, 0x08, 0x00, 0x00, 0xff, 0xff, 0xba, 0x81, 0xcc, 0x57, 0xc9, 0x02, 0x00, 0x00,
}
