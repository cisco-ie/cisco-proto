/*
Copyright 2019 Cisco Systems

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: l2vpn_bridge.proto

package cisco_ios_xr_l2vpn_oper_l2vpnv2_nodes_node_bridge_domains_bridge_domain_bridge_domain_info

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type L2VpnBridge_KEYS struct {
	NodeId                string   `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	BridgeDomainGroupName string   `protobuf:"bytes,2,opt,name=bridge_domain_group_name,json=bridgeDomainGroupName,proto3" json:"bridge_domain_group_name,omitempty"`
	BridgeDomainName      string   `protobuf:"bytes,3,opt,name=bridge_domain_name,json=bridgeDomainName,proto3" json:"bridge_domain_name,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *L2VpnBridge_KEYS) Reset()         { *m = L2VpnBridge_KEYS{} }
func (m *L2VpnBridge_KEYS) String() string { return proto.CompactTextString(m) }
func (*L2VpnBridge_KEYS) ProtoMessage()    {}
func (*L2VpnBridge_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fc31a5586bf6c0e, []int{0}
}

func (m *L2VpnBridge_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2VpnBridge_KEYS.Unmarshal(m, b)
}
func (m *L2VpnBridge_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2VpnBridge_KEYS.Marshal(b, m, deterministic)
}
func (m *L2VpnBridge_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2VpnBridge_KEYS.Merge(m, src)
}
func (m *L2VpnBridge_KEYS) XXX_Size() int {
	return xxx_messageInfo_L2VpnBridge_KEYS.Size(m)
}
func (m *L2VpnBridge_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_L2VpnBridge_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_L2VpnBridge_KEYS proto.InternalMessageInfo

func (m *L2VpnBridge_KEYS) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

func (m *L2VpnBridge_KEYS) GetBridgeDomainGroupName() string {
	if m != nil {
		return m.BridgeDomainGroupName
	}
	return ""
}

func (m *L2VpnBridge_KEYS) GetBridgeDomainName() string {
	if m != nil {
		return m.BridgeDomainName
	}
	return ""
}

type L2VpnBagStormControlType struct {
	BdPolicer            bool     `protobuf:"varint,1,opt,name=bd_policer,json=bdPolicer,proto3" json:"bd_policer,omitempty"`
	Unicast              bool     `protobuf:"varint,2,opt,name=unicast,proto3" json:"unicast,omitempty"`
	Multicast            bool     `protobuf:"varint,3,opt,name=multicast,proto3" json:"multicast,omitempty"`
	Broadcast            bool     `protobuf:"varint,4,opt,name=broadcast,proto3" json:"broadcast,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *L2VpnBagStormControlType) Reset()         { *m = L2VpnBagStormControlType{} }
func (m *L2VpnBagStormControlType) String() string { return proto.CompactTextString(m) }
func (*L2VpnBagStormControlType) ProtoMessage()    {}
func (*L2VpnBagStormControlType) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fc31a5586bf6c0e, []int{1}
}

func (m *L2VpnBagStormControlType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2VpnBagStormControlType.Unmarshal(m, b)
}
func (m *L2VpnBagStormControlType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2VpnBagStormControlType.Marshal(b, m, deterministic)
}
func (m *L2VpnBagStormControlType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2VpnBagStormControlType.Merge(m, src)
}
func (m *L2VpnBagStormControlType) XXX_Size() int {
	return xxx_messageInfo_L2VpnBagStormControlType.Size(m)
}
func (m *L2VpnBagStormControlType) XXX_DiscardUnknown() {
	xxx_messageInfo_L2VpnBagStormControlType.DiscardUnknown(m)
}

var xxx_messageInfo_L2VpnBagStormControlType proto.InternalMessageInfo

func (m *L2VpnBagStormControlType) GetBdPolicer() bool {
	if m != nil {
		return m.BdPolicer
	}
	return false
}

func (m *L2VpnBagStormControlType) GetUnicast() bool {
	if m != nil {
		return m.Unicast
	}
	return false
}

func (m *L2VpnBagStormControlType) GetMulticast() bool {
	if m != nil {
		return m.Multicast
	}
	return false
}

func (m *L2VpnBagStormControlType) GetBroadcast() bool {
	if m != nil {
		return m.Broadcast
	}
	return false
}

type L2VpnBridgeSecParam struct {
	MacLimit                               uint32                    `protobuf:"varint,1,opt,name=mac_limit,json=macLimit,proto3" json:"mac_limit,omitempty"`
	MacLimitAction                         string                    `protobuf:"bytes,2,opt,name=mac_limit_action,json=macLimitAction,proto3" json:"mac_limit_action,omitempty"`
	MacLimitNotification                   string                    `protobuf:"bytes,3,opt,name=mac_limit_notification,json=macLimitNotification,proto3" json:"mac_limit_notification,omitempty"`
	MacAgingTime                           uint32                    `protobuf:"varint,4,opt,name=mac_aging_time,json=macAgingTime,proto3" json:"mac_aging_time,omitempty"`
	MacAgingMode                           string                    `protobuf:"bytes,5,opt,name=mac_aging_mode,json=macAgingMode,proto3" json:"mac_aging_mode,omitempty"`
	MacFlooding                            bool                      `protobuf:"varint,6,opt,name=mac_flooding,json=macFlooding,proto3" json:"mac_flooding,omitempty"`
	MacLearning                            bool                      `protobuf:"varint,7,opt,name=mac_learning,json=macLearning,proto3" json:"mac_learning,omitempty"`
	LearnDisabledMacLimitAction            bool                      `protobuf:"varint,8,opt,name=learn_disabled_mac_limit_action,json=learnDisabledMacLimitAction,proto3" json:"learn_disabled_mac_limit_action,omitempty"`
	FloodUuDisabledMacLimitAction          bool                      `protobuf:"varint,9,opt,name=flood_uu_disabled_mac_limit_action,json=floodUuDisabledMacLimitAction,proto3" json:"flood_uu_disabled_mac_limit_action,omitempty"`
	MacLimitReached                        bool                      `protobuf:"varint,10,opt,name=mac_limit_reached,json=macLimitReached,proto3" json:"mac_limit_reached,omitempty"`
	MacLimitThreshold                      uint32                    `protobuf:"varint,11,opt,name=mac_limit_threshold,json=macLimitThreshold,proto3" json:"mac_limit_threshold,omitempty"`
	FloodUnknownUnicastEnabled             bool                      `protobuf:"varint,12,opt,name=flood_unknown_unicast_enabled,json=floodUnknownUnicastEnabled,proto3" json:"flood_unknown_unicast_enabled,omitempty"`
	MacPortDownFlushEnabled                bool                      `protobuf:"varint,13,opt,name=mac_port_down_flush_enabled,json=macPortDownFlushEnabled,proto3" json:"mac_port_down_flush_enabled,omitempty"`
	SplitHorizonGroupId                    uint32                    `protobuf:"varint,14,opt,name=split_horizon_group_id,json=splitHorizonGroupId,proto3" json:"split_horizon_group_id,omitempty"`
	SplitHorizonGroupInherited             bool                      `protobuf:"varint,15,opt,name=split_horizon_group_inherited,json=splitHorizonGroupInherited,proto3" json:"split_horizon_group_inherited,omitempty"`
	EtreeLeaf                              bool                      `protobuf:"varint,16,opt,name=etree_leaf,json=etreeLeaf,proto3" json:"etree_leaf,omitempty"`
	EtreeLeafInherited                     bool                      `protobuf:"varint,17,opt,name=etree_leaf_inherited,json=etreeLeafInherited,proto3" json:"etree_leaf_inherited,omitempty"`
	IsIpSourceGuardEnabled                 bool                      `protobuf:"varint,18,opt,name=is_ip_source_guard_enabled,json=isIpSourceGuardEnabled,proto3" json:"is_ip_source_guard_enabled,omitempty"`
	IsIpsgLoggingEnabled                   bool                      `protobuf:"varint,19,opt,name=is_ipsg_logging_enabled,json=isIpsgLoggingEnabled,proto3" json:"is_ipsg_logging_enabled,omitempty"`
	IsDaiEnabled                           bool                      `protobuf:"varint,20,opt,name=is_dai_enabled,json=isDaiEnabled,proto3" json:"is_dai_enabled,omitempty"`
	IsDaiLoggingEnabled                    bool                      `protobuf:"varint,21,opt,name=is_dai_logging_enabled,json=isDaiLoggingEnabled,proto3" json:"is_dai_logging_enabled,omitempty"`
	IsDaiAddrValidateSourceMacEnabled      bool                      `protobuf:"varint,22,opt,name=is_dai_addr_validate_source_mac_enabled,json=isDaiAddrValidateSourceMacEnabled,proto3" json:"is_dai_addr_validate_source_mac_enabled,omitempty"`
	IsDaiAddrValidateDestinationMacEnabled bool                      `protobuf:"varint,23,opt,name=is_dai_addr_validate_destination_mac_enabled,json=isDaiAddrValidateDestinationMacEnabled,proto3" json:"is_dai_addr_validate_destination_mac_enabled,omitempty"`
	IsDaiAddrValidateIpv4Enabled           bool                      `protobuf:"varint,24,opt,name=is_dai_addr_validate_ipv4_enabled,json=isDaiAddrValidateIpv4Enabled,proto3" json:"is_dai_addr_validate_ipv4_enabled,omitempty"`
	IsMacSecureEnabled                     bool                      `protobuf:"varint,25,opt,name=is_mac_secure_enabled,json=isMacSecureEnabled,proto3" json:"is_mac_secure_enabled,omitempty"`
	MacSecureAction                        string                    `protobuf:"bytes,26,opt,name=mac_secure_action,json=macSecureAction,proto3" json:"mac_secure_action,omitempty"`
	IsMacSecureLoggingEnabled              bool                      `protobuf:"varint,27,opt,name=is_mac_secure_logging_enabled,json=isMacSecureLoggingEnabled,proto3" json:"is_mac_secure_logging_enabled,omitempty"`
	IsMacSecureAcceptShutdownEnabled       bool                      `protobuf:"varint,28,opt,name=is_mac_secure_accept_shutdown_enabled,json=isMacSecureAcceptShutdownEnabled,proto3" json:"is_mac_secure_accept_shutdown_enabled,omitempty"`
	IsMacSecureThresholdEnabled            bool                      `protobuf:"varint,29,opt,name=is_mac_secure_threshold_enabled,json=isMacSecureThresholdEnabled,proto3" json:"is_mac_secure_threshold_enabled,omitempty"`
	MacSecureShutdownRecoveryTime          uint32                    `protobuf:"varint,30,opt,name=mac_secure_shutdown_recovery_time,json=macSecureShutdownRecoveryTime,proto3" json:"mac_secure_shutdown_recovery_time,omitempty"`
	MacSecureShutdownRecoveryTimeRemaining uint32                    `protobuf:"varint,31,opt,name=mac_secure_shutdown_recovery_time_remaining,json=macSecureShutdownRecoveryTimeRemaining,proto3" json:"mac_secure_shutdown_recovery_time_remaining,omitempty"`
	DaiAddressValidationMask               uint32                    `protobuf:"varint,32,opt,name=dai_address_validation_mask,json=daiAddressValidationMask,proto3" json:"dai_address_validation_mask,omitempty"`
	Dhcpv4Snoop                            bool                      `protobuf:"varint,33,opt,name=dhcpv4_snoop,json=dhcpv4Snoop,proto3" json:"dhcpv4_snoop,omitempty"`
	Dhcpv4ProfileName                      string                    `protobuf:"bytes,34,opt,name=dhcpv4_profile_name,json=dhcpv4ProfileName,proto3" json:"dhcpv4_profile_name,omitempty"`
	IgmPv4Disabled                         bool                      `protobuf:"varint,35,opt,name=igm_pv4_disabled,json=igmPv4Disabled,proto3" json:"igm_pv4_disabled,omitempty"`
	IgmPv4ProfileName                      string                    `protobuf:"bytes,36,opt,name=igm_pv4_profile_name,json=igmPv4ProfileName,proto3" json:"igm_pv4_profile_name,omitempty"`
	MldProfileName                         string                    `protobuf:"bytes,37,opt,name=mld_profile_name,json=mldProfileName,proto3" json:"mld_profile_name,omitempty"`
	MmrpFloodOptimization                  bool                      `protobuf:"varint,38,opt,name=mmrp_flood_optimization,json=mmrpFloodOptimization,proto3" json:"mmrp_flood_optimization,omitempty"`
	StormControl                           *L2VpnBagStormControlType `protobuf:"bytes,39,opt,name=storm_control,json=stormControl,proto3" json:"storm_control,omitempty"`
	UnicastStormControlRateUnit            string                    `protobuf:"bytes,40,opt,name=unicast_storm_control_rate_unit,json=unicastStormControlRateUnit,proto3" json:"unicast_storm_control_rate_unit,omitempty"`
	UnicastStormControlPps                 uint64                    `protobuf:"varint,41,opt,name=unicast_storm_control_pps,json=unicastStormControlPps,proto3" json:"unicast_storm_control_pps,omitempty"`
	UnicastStormControlKbPs                uint64                    `protobuf:"varint,42,opt,name=unicast_storm_control_kb_ps,json=unicastStormControlKbPs,proto3" json:"unicast_storm_control_kb_ps,omitempty"`
	MulticastStormControlRateUnit          string                    `protobuf:"bytes,43,opt,name=multicast_storm_control_rate_unit,json=multicastStormControlRateUnit,proto3" json:"multicast_storm_control_rate_unit,omitempty"`
	MulticastStormControlPps               uint64                    `protobuf:"varint,44,opt,name=multicast_storm_control_pps,json=multicastStormControlPps,proto3" json:"multicast_storm_control_pps,omitempty"`
	MulticastStormControlKbPs              uint64                    `protobuf:"varint,45,opt,name=multicast_storm_control_kb_ps,json=multicastStormControlKbPs,proto3" json:"multicast_storm_control_kb_ps,omitempty"`
	BroadcastStormControlRateUnit          string                    `protobuf:"bytes,46,opt,name=broadcast_storm_control_rate_unit,json=broadcastStormControlRateUnit,proto3" json:"broadcast_storm_control_rate_unit,omitempty"`
	BroadcastStormControlPps               uint64                    `protobuf:"varint,47,opt,name=broadcast_storm_control_pps,json=broadcastStormControlPps,proto3" json:"broadcast_storm_control_pps,omitempty"`
	BroadcastStormControlKbPs              uint64                    `protobuf:"varint,48,opt,name=broadcast_storm_control_kb_ps,json=broadcastStormControlKbPs,proto3" json:"broadcast_storm_control_kb_ps,omitempty"`
	L2McSrcTrafficEnabled                  string                    `protobuf:"bytes,49,opt,name=l2mc_src_traffic_enabled,json=l2mcSrcTrafficEnabled,proto3" json:"l2mc_src_traffic_enabled,omitempty"`
	XXX_NoUnkeyedLiteral                   struct{}                  `json:"-"`
	XXX_unrecognized                       []byte                    `json:"-"`
	XXX_sizecache                          int32                     `json:"-"`
}

func (m *L2VpnBridgeSecParam) Reset()         { *m = L2VpnBridgeSecParam{} }
func (m *L2VpnBridgeSecParam) String() string { return proto.CompactTextString(m) }
func (*L2VpnBridgeSecParam) ProtoMessage()    {}
func (*L2VpnBridgeSecParam) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fc31a5586bf6c0e, []int{2}
}

func (m *L2VpnBridgeSecParam) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2VpnBridgeSecParam.Unmarshal(m, b)
}
func (m *L2VpnBridgeSecParam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2VpnBridgeSecParam.Marshal(b, m, deterministic)
}
func (m *L2VpnBridgeSecParam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2VpnBridgeSecParam.Merge(m, src)
}
func (m *L2VpnBridgeSecParam) XXX_Size() int {
	return xxx_messageInfo_L2VpnBridgeSecParam.Size(m)
}
func (m *L2VpnBridgeSecParam) XXX_DiscardUnknown() {
	xxx_messageInfo_L2VpnBridgeSecParam.DiscardUnknown(m)
}

var xxx_messageInfo_L2VpnBridgeSecParam proto.InternalMessageInfo

func (m *L2VpnBridgeSecParam) GetMacLimit() uint32 {
	if m != nil {
		return m.MacLimit
	}
	return 0
}

func (m *L2VpnBridgeSecParam) GetMacLimitAction() string {
	if m != nil {
		return m.MacLimitAction
	}
	return ""
}

func (m *L2VpnBridgeSecParam) GetMacLimitNotification() string {
	if m != nil {
		return m.MacLimitNotification
	}
	return ""
}

func (m *L2VpnBridgeSecParam) GetMacAgingTime() uint32 {
	if m != nil {
		return m.MacAgingTime
	}
	return 0
}

func (m *L2VpnBridgeSecParam) GetMacAgingMode() string {
	if m != nil {
		return m.MacAgingMode
	}
	return ""
}

func (m *L2VpnBridgeSecParam) GetMacFlooding() bool {
	if m != nil {
		return m.MacFlooding
	}
	return false
}

func (m *L2VpnBridgeSecParam) GetMacLearning() bool {
	if m != nil {
		return m.MacLearning
	}
	return false
}

func (m *L2VpnBridgeSecParam) GetLearnDisabledMacLimitAction() bool {
	if m != nil {
		return m.LearnDisabledMacLimitAction
	}
	return false
}

func (m *L2VpnBridgeSecParam) GetFloodUuDisabledMacLimitAction() bool {
	if m != nil {
		return m.FloodUuDisabledMacLimitAction
	}
	return false
}

func (m *L2VpnBridgeSecParam) GetMacLimitReached() bool {
	if m != nil {
		return m.MacLimitReached
	}
	return false
}

func (m *L2VpnBridgeSecParam) GetMacLimitThreshold() uint32 {
	if m != nil {
		return m.MacLimitThreshold
	}
	return 0
}

func (m *L2VpnBridgeSecParam) GetFloodUnknownUnicastEnabled() bool {
	if m != nil {
		return m.FloodUnknownUnicastEnabled
	}
	return false
}

func (m *L2VpnBridgeSecParam) GetMacPortDownFlushEnabled() bool {
	if m != nil {
		return m.MacPortDownFlushEnabled
	}
	return false
}

func (m *L2VpnBridgeSecParam) GetSplitHorizonGroupId() uint32 {
	if m != nil {
		return m.SplitHorizonGroupId
	}
	return 0
}

func (m *L2VpnBridgeSecParam) GetSplitHorizonGroupInherited() bool {
	if m != nil {
		return m.SplitHorizonGroupInherited
	}
	return false
}

func (m *L2VpnBridgeSecParam) GetEtreeLeaf() bool {
	if m != nil {
		return m.EtreeLeaf
	}
	return false
}

func (m *L2VpnBridgeSecParam) GetEtreeLeafInherited() bool {
	if m != nil {
		return m.EtreeLeafInherited
	}
	return false
}

func (m *L2VpnBridgeSecParam) GetIsIpSourceGuardEnabled() bool {
	if m != nil {
		return m.IsIpSourceGuardEnabled
	}
	return false
}

func (m *L2VpnBridgeSecParam) GetIsIpsgLoggingEnabled() bool {
	if m != nil {
		return m.IsIpsgLoggingEnabled
	}
	return false
}

func (m *L2VpnBridgeSecParam) GetIsDaiEnabled() bool {
	if m != nil {
		return m.IsDaiEnabled
	}
	return false
}

func (m *L2VpnBridgeSecParam) GetIsDaiLoggingEnabled() bool {
	if m != nil {
		return m.IsDaiLoggingEnabled
	}
	return false
}

func (m *L2VpnBridgeSecParam) GetIsDaiAddrValidateSourceMacEnabled() bool {
	if m != nil {
		return m.IsDaiAddrValidateSourceMacEnabled
	}
	return false
}

func (m *L2VpnBridgeSecParam) GetIsDaiAddrValidateDestinationMacEnabled() bool {
	if m != nil {
		return m.IsDaiAddrValidateDestinationMacEnabled
	}
	return false
}

func (m *L2VpnBridgeSecParam) GetIsDaiAddrValidateIpv4Enabled() bool {
	if m != nil {
		return m.IsDaiAddrValidateIpv4Enabled
	}
	return false
}

func (m *L2VpnBridgeSecParam) GetIsMacSecureEnabled() bool {
	if m != nil {
		return m.IsMacSecureEnabled
	}
	return false
}

func (m *L2VpnBridgeSecParam) GetMacSecureAction() string {
	if m != nil {
		return m.MacSecureAction
	}
	return ""
}

func (m *L2VpnBridgeSecParam) GetIsMacSecureLoggingEnabled() bool {
	if m != nil {
		return m.IsMacSecureLoggingEnabled
	}
	return false
}

func (m *L2VpnBridgeSecParam) GetIsMacSecureAcceptShutdownEnabled() bool {
	if m != nil {
		return m.IsMacSecureAcceptShutdownEnabled
	}
	return false
}

func (m *L2VpnBridgeSecParam) GetIsMacSecureThresholdEnabled() bool {
	if m != nil {
		return m.IsMacSecureThresholdEnabled
	}
	return false
}

func (m *L2VpnBridgeSecParam) GetMacSecureShutdownRecoveryTime() uint32 {
	if m != nil {
		return m.MacSecureShutdownRecoveryTime
	}
	return 0
}

func (m *L2VpnBridgeSecParam) GetMacSecureShutdownRecoveryTimeRemaining() uint32 {
	if m != nil {
		return m.MacSecureShutdownRecoveryTimeRemaining
	}
	return 0
}

func (m *L2VpnBridgeSecParam) GetDaiAddressValidationMask() uint32 {
	if m != nil {
		return m.DaiAddressValidationMask
	}
	return 0
}

func (m *L2VpnBridgeSecParam) GetDhcpv4Snoop() bool {
	if m != nil {
		return m.Dhcpv4Snoop
	}
	return false
}

func (m *L2VpnBridgeSecParam) GetDhcpv4ProfileName() string {
	if m != nil {
		return m.Dhcpv4ProfileName
	}
	return ""
}

func (m *L2VpnBridgeSecParam) GetIgmPv4Disabled() bool {
	if m != nil {
		return m.IgmPv4Disabled
	}
	return false
}

func (m *L2VpnBridgeSecParam) GetIgmPv4ProfileName() string {
	if m != nil {
		return m.IgmPv4ProfileName
	}
	return ""
}

func (m *L2VpnBridgeSecParam) GetMldProfileName() string {
	if m != nil {
		return m.MldProfileName
	}
	return ""
}

func (m *L2VpnBridgeSecParam) GetMmrpFloodOptimization() bool {
	if m != nil {
		return m.MmrpFloodOptimization
	}
	return false
}

func (m *L2VpnBridgeSecParam) GetStormControl() *L2VpnBagStormControlType {
	if m != nil {
		return m.StormControl
	}
	return nil
}

func (m *L2VpnBridgeSecParam) GetUnicastStormControlRateUnit() string {
	if m != nil {
		return m.UnicastStormControlRateUnit
	}
	return ""
}

func (m *L2VpnBridgeSecParam) GetUnicastStormControlPps() uint64 {
	if m != nil {
		return m.UnicastStormControlPps
	}
	return 0
}

func (m *L2VpnBridgeSecParam) GetUnicastStormControlKbPs() uint64 {
	if m != nil {
		return m.UnicastStormControlKbPs
	}
	return 0
}

func (m *L2VpnBridgeSecParam) GetMulticastStormControlRateUnit() string {
	if m != nil {
		return m.MulticastStormControlRateUnit
	}
	return ""
}

func (m *L2VpnBridgeSecParam) GetMulticastStormControlPps() uint64 {
	if m != nil {
		return m.MulticastStormControlPps
	}
	return 0
}

func (m *L2VpnBridgeSecParam) GetMulticastStormControlKbPs() uint64 {
	if m != nil {
		return m.MulticastStormControlKbPs
	}
	return 0
}

func (m *L2VpnBridgeSecParam) GetBroadcastStormControlRateUnit() string {
	if m != nil {
		return m.BroadcastStormControlRateUnit
	}
	return ""
}

func (m *L2VpnBridgeSecParam) GetBroadcastStormControlPps() uint64 {
	if m != nil {
		return m.BroadcastStormControlPps
	}
	return 0
}

func (m *L2VpnBridgeSecParam) GetBroadcastStormControlKbPs() uint64 {
	if m != nil {
		return m.BroadcastStormControlKbPs
	}
	return 0
}

func (m *L2VpnBridgeSecParam) GetL2McSrcTrafficEnabled() string {
	if m != nil {
		return m.L2McSrcTrafficEnabled
	}
	return ""
}

type L2VpnBdMac struct {
	Mac                  string   `protobuf:"bytes,1,opt,name=mac,proto3" json:"mac,omitempty"`
	PbbBmac              string   `protobuf:"bytes,2,opt,name=pbb_bmac,json=pbbBmac,proto3" json:"pbb_bmac,omitempty"`
	NhAddr               string   `protobuf:"bytes,3,opt,name=nh_addr,json=nhAddr,proto3" json:"nh_addr,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *L2VpnBdMac) Reset()         { *m = L2VpnBdMac{} }
func (m *L2VpnBdMac) String() string { return proto.CompactTextString(m) }
func (*L2VpnBdMac) ProtoMessage()    {}
func (*L2VpnBdMac) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fc31a5586bf6c0e, []int{3}
}

func (m *L2VpnBdMac) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2VpnBdMac.Unmarshal(m, b)
}
func (m *L2VpnBdMac) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2VpnBdMac.Marshal(b, m, deterministic)
}
func (m *L2VpnBdMac) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2VpnBdMac.Merge(m, src)
}
func (m *L2VpnBdMac) XXX_Size() int {
	return xxx_messageInfo_L2VpnBdMac.Size(m)
}
func (m *L2VpnBdMac) XXX_DiscardUnknown() {
	xxx_messageInfo_L2VpnBdMac.DiscardUnknown(m)
}

var xxx_messageInfo_L2VpnBdMac proto.InternalMessageInfo

func (m *L2VpnBdMac) GetMac() string {
	if m != nil {
		return m.Mac
	}
	return ""
}

func (m *L2VpnBdMac) GetPbbBmac() string {
	if m != nil {
		return m.PbbBmac
	}
	return ""
}

func (m *L2VpnBdMac) GetNhAddr() string {
	if m != nil {
		return m.NhAddr
	}
	return ""
}

type L2VpnRdAuto struct {
	RouterId             string   `protobuf:"bytes,1,opt,name=router_id,json=routerId,proto3" json:"router_id,omitempty"`
	AutoIndex            uint32   `protobuf:"varint,2,opt,name=auto_index,json=autoIndex,proto3" json:"auto_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *L2VpnRdAuto) Reset()         { *m = L2VpnRdAuto{} }
func (m *L2VpnRdAuto) String() string { return proto.CompactTextString(m) }
func (*L2VpnRdAuto) ProtoMessage()    {}
func (*L2VpnRdAuto) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fc31a5586bf6c0e, []int{4}
}

func (m *L2VpnRdAuto) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2VpnRdAuto.Unmarshal(m, b)
}
func (m *L2VpnRdAuto) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2VpnRdAuto.Marshal(b, m, deterministic)
}
func (m *L2VpnRdAuto) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2VpnRdAuto.Merge(m, src)
}
func (m *L2VpnRdAuto) XXX_Size() int {
	return xxx_messageInfo_L2VpnRdAuto.Size(m)
}
func (m *L2VpnRdAuto) XXX_DiscardUnknown() {
	xxx_messageInfo_L2VpnRdAuto.DiscardUnknown(m)
}

var xxx_messageInfo_L2VpnRdAuto proto.InternalMessageInfo

func (m *L2VpnRdAuto) GetRouterId() string {
	if m != nil {
		return m.RouterId
	}
	return ""
}

func (m *L2VpnRdAuto) GetAutoIndex() uint32 {
	if m != nil {
		return m.AutoIndex
	}
	return 0
}

type L2VpnRd_2ByteAs struct {
	TwoByteAs            uint32   `protobuf:"varint,1,opt,name=two_byte_as,json=twoByteAs,proto3" json:"two_byte_as,omitempty"`
	FourByteIndex        uint32   `protobuf:"varint,2,opt,name=four_byte_index,json=fourByteIndex,proto3" json:"four_byte_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *L2VpnRd_2ByteAs) Reset()         { *m = L2VpnRd_2ByteAs{} }
func (m *L2VpnRd_2ByteAs) String() string { return proto.CompactTextString(m) }
func (*L2VpnRd_2ByteAs) ProtoMessage()    {}
func (*L2VpnRd_2ByteAs) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fc31a5586bf6c0e, []int{5}
}

func (m *L2VpnRd_2ByteAs) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2VpnRd_2ByteAs.Unmarshal(m, b)
}
func (m *L2VpnRd_2ByteAs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2VpnRd_2ByteAs.Marshal(b, m, deterministic)
}
func (m *L2VpnRd_2ByteAs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2VpnRd_2ByteAs.Merge(m, src)
}
func (m *L2VpnRd_2ByteAs) XXX_Size() int {
	return xxx_messageInfo_L2VpnRd_2ByteAs.Size(m)
}
func (m *L2VpnRd_2ByteAs) XXX_DiscardUnknown() {
	xxx_messageInfo_L2VpnRd_2ByteAs.DiscardUnknown(m)
}

var xxx_messageInfo_L2VpnRd_2ByteAs proto.InternalMessageInfo

func (m *L2VpnRd_2ByteAs) GetTwoByteAs() uint32 {
	if m != nil {
		return m.TwoByteAs
	}
	return 0
}

func (m *L2VpnRd_2ByteAs) GetFourByteIndex() uint32 {
	if m != nil {
		return m.FourByteIndex
	}
	return 0
}

type L2VpnRd_4ByteAs struct {
	FourByteAs           uint32   `protobuf:"varint,1,opt,name=four_byte_as,json=fourByteAs,proto3" json:"four_byte_as,omitempty"`
	TwoByteIndex         uint32   `protobuf:"varint,2,opt,name=two_byte_index,json=twoByteIndex,proto3" json:"two_byte_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *L2VpnRd_4ByteAs) Reset()         { *m = L2VpnRd_4ByteAs{} }
func (m *L2VpnRd_4ByteAs) String() string { return proto.CompactTextString(m) }
func (*L2VpnRd_4ByteAs) ProtoMessage()    {}
func (*L2VpnRd_4ByteAs) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fc31a5586bf6c0e, []int{6}
}

func (m *L2VpnRd_4ByteAs) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2VpnRd_4ByteAs.Unmarshal(m, b)
}
func (m *L2VpnRd_4ByteAs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2VpnRd_4ByteAs.Marshal(b, m, deterministic)
}
func (m *L2VpnRd_4ByteAs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2VpnRd_4ByteAs.Merge(m, src)
}
func (m *L2VpnRd_4ByteAs) XXX_Size() int {
	return xxx_messageInfo_L2VpnRd_4ByteAs.Size(m)
}
func (m *L2VpnRd_4ByteAs) XXX_DiscardUnknown() {
	xxx_messageInfo_L2VpnRd_4ByteAs.DiscardUnknown(m)
}

var xxx_messageInfo_L2VpnRd_4ByteAs proto.InternalMessageInfo

func (m *L2VpnRd_4ByteAs) GetFourByteAs() uint32 {
	if m != nil {
		return m.FourByteAs
	}
	return 0
}

func (m *L2VpnRd_4ByteAs) GetTwoByteIndex() uint32 {
	if m != nil {
		return m.TwoByteIndex
	}
	return 0
}

type L2VpnRdV4Addr struct {
	Ipv4Address          string   `protobuf:"bytes,1,opt,name=ipv4_address,json=ipv4Address,proto3" json:"ipv4_address,omitempty"`
	TwoByteIndex         uint32   `protobuf:"varint,2,opt,name=two_byte_index,json=twoByteIndex,proto3" json:"two_byte_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *L2VpnRdV4Addr) Reset()         { *m = L2VpnRdV4Addr{} }
func (m *L2VpnRdV4Addr) String() string { return proto.CompactTextString(m) }
func (*L2VpnRdV4Addr) ProtoMessage()    {}
func (*L2VpnRdV4Addr) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fc31a5586bf6c0e, []int{7}
}

func (m *L2VpnRdV4Addr) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2VpnRdV4Addr.Unmarshal(m, b)
}
func (m *L2VpnRdV4Addr) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2VpnRdV4Addr.Marshal(b, m, deterministic)
}
func (m *L2VpnRdV4Addr) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2VpnRdV4Addr.Merge(m, src)
}
func (m *L2VpnRdV4Addr) XXX_Size() int {
	return xxx_messageInfo_L2VpnRdV4Addr.Size(m)
}
func (m *L2VpnRdV4Addr) XXX_DiscardUnknown() {
	xxx_messageInfo_L2VpnRdV4Addr.DiscardUnknown(m)
}

var xxx_messageInfo_L2VpnRdV4Addr proto.InternalMessageInfo

func (m *L2VpnRdV4Addr) GetIpv4Address() string {
	if m != nil {
		return m.Ipv4Address
	}
	return ""
}

func (m *L2VpnRdV4Addr) GetTwoByteIndex() uint32 {
	if m != nil {
		return m.TwoByteIndex
	}
	return 0
}

type L2VpnRd struct {
	Rd                   string           `protobuf:"bytes,1,opt,name=rd,proto3" json:"rd,omitempty"`
	Auto                 *L2VpnRdAuto     `protobuf:"bytes,2,opt,name=auto,proto3" json:"auto,omitempty"`
	TwoByteAs            *L2VpnRd_2ByteAs `protobuf:"bytes,3,opt,name=two_byte_as,json=twoByteAs,proto3" json:"two_byte_as,omitempty"`
	FourByteAs           *L2VpnRd_4ByteAs `protobuf:"bytes,4,opt,name=four_byte_as,json=fourByteAs,proto3" json:"four_byte_as,omitempty"`
	V4Addr               *L2VpnRdV4Addr   `protobuf:"bytes,5,opt,name=v4_addr,json=v4Addr,proto3" json:"v4_addr,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *L2VpnRd) Reset()         { *m = L2VpnRd{} }
func (m *L2VpnRd) String() string { return proto.CompactTextString(m) }
func (*L2VpnRd) ProtoMessage()    {}
func (*L2VpnRd) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fc31a5586bf6c0e, []int{8}
}

func (m *L2VpnRd) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2VpnRd.Unmarshal(m, b)
}
func (m *L2VpnRd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2VpnRd.Marshal(b, m, deterministic)
}
func (m *L2VpnRd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2VpnRd.Merge(m, src)
}
func (m *L2VpnRd) XXX_Size() int {
	return xxx_messageInfo_L2VpnRd.Size(m)
}
func (m *L2VpnRd) XXX_DiscardUnknown() {
	xxx_messageInfo_L2VpnRd.DiscardUnknown(m)
}

var xxx_messageInfo_L2VpnRd proto.InternalMessageInfo

func (m *L2VpnRd) GetRd() string {
	if m != nil {
		return m.Rd
	}
	return ""
}

func (m *L2VpnRd) GetAuto() *L2VpnRdAuto {
	if m != nil {
		return m.Auto
	}
	return nil
}

func (m *L2VpnRd) GetTwoByteAs() *L2VpnRd_2ByteAs {
	if m != nil {
		return m.TwoByteAs
	}
	return nil
}

func (m *L2VpnRd) GetFourByteAs() *L2VpnRd_4ByteAs {
	if m != nil {
		return m.FourByteAs
	}
	return nil
}

func (m *L2VpnRd) GetV4Addr() *L2VpnRdV4Addr {
	if m != nil {
		return m.V4Addr
	}
	return nil
}

type L2VpnRt_2ByteAs struct {
	TwoByteAs            uint32   `protobuf:"varint,1,opt,name=two_byte_as,json=twoByteAs,proto3" json:"two_byte_as,omitempty"`
	FourByteIndex        uint32   `protobuf:"varint,2,opt,name=four_byte_index,json=fourByteIndex,proto3" json:"four_byte_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *L2VpnRt_2ByteAs) Reset()         { *m = L2VpnRt_2ByteAs{} }
func (m *L2VpnRt_2ByteAs) String() string { return proto.CompactTextString(m) }
func (*L2VpnRt_2ByteAs) ProtoMessage()    {}
func (*L2VpnRt_2ByteAs) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fc31a5586bf6c0e, []int{9}
}

func (m *L2VpnRt_2ByteAs) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2VpnRt_2ByteAs.Unmarshal(m, b)
}
func (m *L2VpnRt_2ByteAs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2VpnRt_2ByteAs.Marshal(b, m, deterministic)
}
func (m *L2VpnRt_2ByteAs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2VpnRt_2ByteAs.Merge(m, src)
}
func (m *L2VpnRt_2ByteAs) XXX_Size() int {
	return xxx_messageInfo_L2VpnRt_2ByteAs.Size(m)
}
func (m *L2VpnRt_2ByteAs) XXX_DiscardUnknown() {
	xxx_messageInfo_L2VpnRt_2ByteAs.DiscardUnknown(m)
}

var xxx_messageInfo_L2VpnRt_2ByteAs proto.InternalMessageInfo

func (m *L2VpnRt_2ByteAs) GetTwoByteAs() uint32 {
	if m != nil {
		return m.TwoByteAs
	}
	return 0
}

func (m *L2VpnRt_2ByteAs) GetFourByteIndex() uint32 {
	if m != nil {
		return m.FourByteIndex
	}
	return 0
}

type L2VpnRt_4ByteAs struct {
	FourByteAs           uint32   `protobuf:"varint,1,opt,name=four_byte_as,json=fourByteAs,proto3" json:"four_byte_as,omitempty"`
	TwoByteIndex         uint32   `protobuf:"varint,2,opt,name=two_byte_index,json=twoByteIndex,proto3" json:"two_byte_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *L2VpnRt_4ByteAs) Reset()         { *m = L2VpnRt_4ByteAs{} }
func (m *L2VpnRt_4ByteAs) String() string { return proto.CompactTextString(m) }
func (*L2VpnRt_4ByteAs) ProtoMessage()    {}
func (*L2VpnRt_4ByteAs) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fc31a5586bf6c0e, []int{10}
}

func (m *L2VpnRt_4ByteAs) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2VpnRt_4ByteAs.Unmarshal(m, b)
}
func (m *L2VpnRt_4ByteAs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2VpnRt_4ByteAs.Marshal(b, m, deterministic)
}
func (m *L2VpnRt_4ByteAs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2VpnRt_4ByteAs.Merge(m, src)
}
func (m *L2VpnRt_4ByteAs) XXX_Size() int {
	return xxx_messageInfo_L2VpnRt_4ByteAs.Size(m)
}
func (m *L2VpnRt_4ByteAs) XXX_DiscardUnknown() {
	xxx_messageInfo_L2VpnRt_4ByteAs.DiscardUnknown(m)
}

var xxx_messageInfo_L2VpnRt_4ByteAs proto.InternalMessageInfo

func (m *L2VpnRt_4ByteAs) GetFourByteAs() uint32 {
	if m != nil {
		return m.FourByteAs
	}
	return 0
}

func (m *L2VpnRt_4ByteAs) GetTwoByteIndex() uint32 {
	if m != nil {
		return m.TwoByteIndex
	}
	return 0
}

type L2VpnRtV4Addr struct {
	Ipv4Address          string   `protobuf:"bytes,1,opt,name=ipv4_address,json=ipv4Address,proto3" json:"ipv4_address,omitempty"`
	TwoByteIndex         uint32   `protobuf:"varint,2,opt,name=two_byte_index,json=twoByteIndex,proto3" json:"two_byte_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *L2VpnRtV4Addr) Reset()         { *m = L2VpnRtV4Addr{} }
func (m *L2VpnRtV4Addr) String() string { return proto.CompactTextString(m) }
func (*L2VpnRtV4Addr) ProtoMessage()    {}
func (*L2VpnRtV4Addr) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fc31a5586bf6c0e, []int{11}
}

func (m *L2VpnRtV4Addr) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2VpnRtV4Addr.Unmarshal(m, b)
}
func (m *L2VpnRtV4Addr) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2VpnRtV4Addr.Marshal(b, m, deterministic)
}
func (m *L2VpnRtV4Addr) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2VpnRtV4Addr.Merge(m, src)
}
func (m *L2VpnRtV4Addr) XXX_Size() int {
	return xxx_messageInfo_L2VpnRtV4Addr.Size(m)
}
func (m *L2VpnRtV4Addr) XXX_DiscardUnknown() {
	xxx_messageInfo_L2VpnRtV4Addr.DiscardUnknown(m)
}

var xxx_messageInfo_L2VpnRtV4Addr proto.InternalMessageInfo

func (m *L2VpnRtV4Addr) GetIpv4Address() string {
	if m != nil {
		return m.Ipv4Address
	}
	return ""
}

func (m *L2VpnRtV4Addr) GetTwoByteIndex() uint32 {
	if m != nil {
		return m.TwoByteIndex
	}
	return 0
}

type L2VpnRtEsImport struct {
	HighBytes            uint32   `protobuf:"varint,1,opt,name=high_bytes,json=highBytes,proto3" json:"high_bytes,omitempty"`
	LowBytes             uint32   `protobuf:"varint,2,opt,name=low_bytes,json=lowBytes,proto3" json:"low_bytes,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *L2VpnRtEsImport) Reset()         { *m = L2VpnRtEsImport{} }
func (m *L2VpnRtEsImport) String() string { return proto.CompactTextString(m) }
func (*L2VpnRtEsImport) ProtoMessage()    {}
func (*L2VpnRtEsImport) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fc31a5586bf6c0e, []int{12}
}

func (m *L2VpnRtEsImport) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2VpnRtEsImport.Unmarshal(m, b)
}
func (m *L2VpnRtEsImport) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2VpnRtEsImport.Marshal(b, m, deterministic)
}
func (m *L2VpnRtEsImport) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2VpnRtEsImport.Merge(m, src)
}
func (m *L2VpnRtEsImport) XXX_Size() int {
	return xxx_messageInfo_L2VpnRtEsImport.Size(m)
}
func (m *L2VpnRtEsImport) XXX_DiscardUnknown() {
	xxx_messageInfo_L2VpnRtEsImport.DiscardUnknown(m)
}

var xxx_messageInfo_L2VpnRtEsImport proto.InternalMessageInfo

func (m *L2VpnRtEsImport) GetHighBytes() uint32 {
	if m != nil {
		return m.HighBytes
	}
	return 0
}

func (m *L2VpnRtEsImport) GetLowBytes() uint32 {
	if m != nil {
		return m.LowBytes
	}
	return 0
}

type L2VpnRt struct {
	Rt                   string           `protobuf:"bytes,1,opt,name=rt,proto3" json:"rt,omitempty"`
	TwoByteAs            *L2VpnRt_2ByteAs `protobuf:"bytes,2,opt,name=two_byte_as,json=twoByteAs,proto3" json:"two_byte_as,omitempty"`
	FourByteAs           *L2VpnRt_4ByteAs `protobuf:"bytes,3,opt,name=four_byte_as,json=fourByteAs,proto3" json:"four_byte_as,omitempty"`
	V4Addr               *L2VpnRtV4Addr   `protobuf:"bytes,4,opt,name=v4_addr,json=v4Addr,proto3" json:"v4_addr,omitempty"`
	EsImport             *L2VpnRtEsImport `protobuf:"bytes,5,opt,name=es_import,json=esImport,proto3" json:"es_import,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *L2VpnRt) Reset()         { *m = L2VpnRt{} }
func (m *L2VpnRt) String() string { return proto.CompactTextString(m) }
func (*L2VpnRt) ProtoMessage()    {}
func (*L2VpnRt) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fc31a5586bf6c0e, []int{13}
}

func (m *L2VpnRt) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2VpnRt.Unmarshal(m, b)
}
func (m *L2VpnRt) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2VpnRt.Marshal(b, m, deterministic)
}
func (m *L2VpnRt) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2VpnRt.Merge(m, src)
}
func (m *L2VpnRt) XXX_Size() int {
	return xxx_messageInfo_L2VpnRt.Size(m)
}
func (m *L2VpnRt) XXX_DiscardUnknown() {
	xxx_messageInfo_L2VpnRt.DiscardUnknown(m)
}

var xxx_messageInfo_L2VpnRt proto.InternalMessageInfo

func (m *L2VpnRt) GetRt() string {
	if m != nil {
		return m.Rt
	}
	return ""
}

func (m *L2VpnRt) GetTwoByteAs() *L2VpnRt_2ByteAs {
	if m != nil {
		return m.TwoByteAs
	}
	return nil
}

func (m *L2VpnRt) GetFourByteAs() *L2VpnRt_4ByteAs {
	if m != nil {
		return m.FourByteAs
	}
	return nil
}

func (m *L2VpnRt) GetV4Addr() *L2VpnRtV4Addr {
	if m != nil {
		return m.V4Addr
	}
	return nil
}

func (m *L2VpnRt) GetEsImport() *L2VpnRtEsImport {
	if m != nil {
		return m.EsImport
	}
	return nil
}

type L2VpnVplsIdAuto struct {
	Asn                  uint32   `protobuf:"varint,1,opt,name=asn,proto3" json:"asn,omitempty"`
	VpnId                uint32   `protobuf:"varint,2,opt,name=vpn_id,json=vpnId,proto3" json:"vpn_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *L2VpnVplsIdAuto) Reset()         { *m = L2VpnVplsIdAuto{} }
func (m *L2VpnVplsIdAuto) String() string { return proto.CompactTextString(m) }
func (*L2VpnVplsIdAuto) ProtoMessage()    {}
func (*L2VpnVplsIdAuto) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fc31a5586bf6c0e, []int{14}
}

func (m *L2VpnVplsIdAuto) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2VpnVplsIdAuto.Unmarshal(m, b)
}
func (m *L2VpnVplsIdAuto) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2VpnVplsIdAuto.Marshal(b, m, deterministic)
}
func (m *L2VpnVplsIdAuto) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2VpnVplsIdAuto.Merge(m, src)
}
func (m *L2VpnVplsIdAuto) XXX_Size() int {
	return xxx_messageInfo_L2VpnVplsIdAuto.Size(m)
}
func (m *L2VpnVplsIdAuto) XXX_DiscardUnknown() {
	xxx_messageInfo_L2VpnVplsIdAuto.DiscardUnknown(m)
}

var xxx_messageInfo_L2VpnVplsIdAuto proto.InternalMessageInfo

func (m *L2VpnVplsIdAuto) GetAsn() uint32 {
	if m != nil {
		return m.Asn
	}
	return 0
}

func (m *L2VpnVplsIdAuto) GetVpnId() uint32 {
	if m != nil {
		return m.VpnId
	}
	return 0
}

type L2VpnVplsId_2ByteAs struct {
	TwoByteAs            uint32   `protobuf:"varint,1,opt,name=two_byte_as,json=twoByteAs,proto3" json:"two_byte_as,omitempty"`
	FourByteIndex        uint32   `protobuf:"varint,2,opt,name=four_byte_index,json=fourByteIndex,proto3" json:"four_byte_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *L2VpnVplsId_2ByteAs) Reset()         { *m = L2VpnVplsId_2ByteAs{} }
func (m *L2VpnVplsId_2ByteAs) String() string { return proto.CompactTextString(m) }
func (*L2VpnVplsId_2ByteAs) ProtoMessage()    {}
func (*L2VpnVplsId_2ByteAs) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fc31a5586bf6c0e, []int{15}
}

func (m *L2VpnVplsId_2ByteAs) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2VpnVplsId_2ByteAs.Unmarshal(m, b)
}
func (m *L2VpnVplsId_2ByteAs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2VpnVplsId_2ByteAs.Marshal(b, m, deterministic)
}
func (m *L2VpnVplsId_2ByteAs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2VpnVplsId_2ByteAs.Merge(m, src)
}
func (m *L2VpnVplsId_2ByteAs) XXX_Size() int {
	return xxx_messageInfo_L2VpnVplsId_2ByteAs.Size(m)
}
func (m *L2VpnVplsId_2ByteAs) XXX_DiscardUnknown() {
	xxx_messageInfo_L2VpnVplsId_2ByteAs.DiscardUnknown(m)
}

var xxx_messageInfo_L2VpnVplsId_2ByteAs proto.InternalMessageInfo

func (m *L2VpnVplsId_2ByteAs) GetTwoByteAs() uint32 {
	if m != nil {
		return m.TwoByteAs
	}
	return 0
}

func (m *L2VpnVplsId_2ByteAs) GetFourByteIndex() uint32 {
	if m != nil {
		return m.FourByteIndex
	}
	return 0
}

type L2VpnVplsIdV4Addr struct {
	Ipv4Address          string   `protobuf:"bytes,1,opt,name=ipv4_address,json=ipv4Address,proto3" json:"ipv4_address,omitempty"`
	TwoByteIndex         uint32   `protobuf:"varint,2,opt,name=two_byte_index,json=twoByteIndex,proto3" json:"two_byte_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *L2VpnVplsIdV4Addr) Reset()         { *m = L2VpnVplsIdV4Addr{} }
func (m *L2VpnVplsIdV4Addr) String() string { return proto.CompactTextString(m) }
func (*L2VpnVplsIdV4Addr) ProtoMessage()    {}
func (*L2VpnVplsIdV4Addr) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fc31a5586bf6c0e, []int{16}
}

func (m *L2VpnVplsIdV4Addr) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2VpnVplsIdV4Addr.Unmarshal(m, b)
}
func (m *L2VpnVplsIdV4Addr) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2VpnVplsIdV4Addr.Marshal(b, m, deterministic)
}
func (m *L2VpnVplsIdV4Addr) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2VpnVplsIdV4Addr.Merge(m, src)
}
func (m *L2VpnVplsIdV4Addr) XXX_Size() int {
	return xxx_messageInfo_L2VpnVplsIdV4Addr.Size(m)
}
func (m *L2VpnVplsIdV4Addr) XXX_DiscardUnknown() {
	xxx_messageInfo_L2VpnVplsIdV4Addr.DiscardUnknown(m)
}

var xxx_messageInfo_L2VpnVplsIdV4Addr proto.InternalMessageInfo

func (m *L2VpnVplsIdV4Addr) GetIpv4Address() string {
	if m != nil {
		return m.Ipv4Address
	}
	return ""
}

func (m *L2VpnVplsIdV4Addr) GetTwoByteIndex() uint32 {
	if m != nil {
		return m.TwoByteIndex
	}
	return 0
}

type L2VpnVplsId struct {
	VplsIdType           string               `protobuf:"bytes,1,opt,name=vpls_id_type,json=vplsIdType,proto3" json:"vpls_id_type,omitempty"`
	Auto                 *L2VpnVplsIdAuto     `protobuf:"bytes,2,opt,name=auto,proto3" json:"auto,omitempty"`
	TwoByteAs            *L2VpnVplsId_2ByteAs `protobuf:"bytes,3,opt,name=two_byte_as,json=twoByteAs,proto3" json:"two_byte_as,omitempty"`
	V4Addr               *L2VpnVplsIdV4Addr   `protobuf:"bytes,4,opt,name=v4_addr,json=v4Addr,proto3" json:"v4_addr,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *L2VpnVplsId) Reset()         { *m = L2VpnVplsId{} }
func (m *L2VpnVplsId) String() string { return proto.CompactTextString(m) }
func (*L2VpnVplsId) ProtoMessage()    {}
func (*L2VpnVplsId) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fc31a5586bf6c0e, []int{17}
}

func (m *L2VpnVplsId) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2VpnVplsId.Unmarshal(m, b)
}
func (m *L2VpnVplsId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2VpnVplsId.Marshal(b, m, deterministic)
}
func (m *L2VpnVplsId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2VpnVplsId.Merge(m, src)
}
func (m *L2VpnVplsId) XXX_Size() int {
	return xxx_messageInfo_L2VpnVplsId.Size(m)
}
func (m *L2VpnVplsId) XXX_DiscardUnknown() {
	xxx_messageInfo_L2VpnVplsId.DiscardUnknown(m)
}

var xxx_messageInfo_L2VpnVplsId proto.InternalMessageInfo

func (m *L2VpnVplsId) GetVplsIdType() string {
	if m != nil {
		return m.VplsIdType
	}
	return ""
}

func (m *L2VpnVplsId) GetAuto() *L2VpnVplsIdAuto {
	if m != nil {
		return m.Auto
	}
	return nil
}

func (m *L2VpnVplsId) GetTwoByteAs() *L2VpnVplsId_2ByteAs {
	if m != nil {
		return m.TwoByteAs
	}
	return nil
}

func (m *L2VpnVplsId) GetV4Addr() *L2VpnVplsIdV4Addr {
	if m != nil {
		return m.V4Addr
	}
	return nil
}

type L2VpnBdDisco struct {
	VpnId                uint32       `protobuf:"varint,1,opt,name=vpn_id,json=vpnId,proto3" json:"vpn_id,omitempty"`
	RdValue              *L2VpnRd     `protobuf:"bytes,2,opt,name=rd_value,json=rdValue,proto3" json:"rd_value,omitempty"`
	AdSignallingMethod   uint32       `protobuf:"varint,3,opt,name=ad_signalling_method,json=adSignallingMethod,proto3" json:"ad_signalling_method,omitempty"`
	AdMethod             uint32       `protobuf:"varint,4,opt,name=ad_method,json=adMethod,proto3" json:"ad_method,omitempty"`
	VeId                 uint32       `protobuf:"varint,5,opt,name=ve_id,json=veId,proto3" json:"ve_id,omitempty"`
	ProvisionedVeId      uint32       `protobuf:"varint,6,opt,name=provisioned_ve_id,json=provisionedVeId,proto3" json:"provisioned_ve_id,omitempty"`
	VeRange              uint32       `protobuf:"varint,7,opt,name=ve_range,json=veRange,proto3" json:"ve_range,omitempty"`
	ImportRt             []*L2VpnRt   `protobuf:"bytes,8,rep,name=import_rt,json=importRt,proto3" json:"import_rt,omitempty"`
	ExportRt             []*L2VpnRt   `protobuf:"bytes,9,rep,name=export_rt,json=exportRt,proto3" json:"export_rt,omitempty"`
	AsNumber             uint32       `protobuf:"varint,10,opt,name=as_number,json=asNumber,proto3" json:"as_number,omitempty"`
	VplsId               *L2VpnVplsId `protobuf:"bytes,11,opt,name=vpls_id,json=vplsId,proto3" json:"vpls_id,omitempty"`
	L2VpnRouterId        string       `protobuf:"bytes,12,opt,name=l2vpn_router_id,json=l2vpnRouterId,proto3" json:"l2vpn_router_id,omitempty"`
	VpnAdded             bool         `protobuf:"varint,13,opt,name=vpn_added,json=vpnAdded,proto3" json:"vpn_added,omitempty"`
	ServiceConnected     bool         `protobuf:"varint,14,opt,name=service_connected,json=serviceConnected,proto3" json:"service_connected,omitempty"`
	VplsIdConflict       bool         `protobuf:"varint,15,opt,name=vpls_id_conflict,json=vplsIdConflict,proto3" json:"vpls_id_conflict,omitempty"`
	ExportRoutePolicy    string       `protobuf:"bytes,16,opt,name=export_route_policy,json=exportRoutePolicy,proto3" json:"export_route_policy,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *L2VpnBdDisco) Reset()         { *m = L2VpnBdDisco{} }
func (m *L2VpnBdDisco) String() string { return proto.CompactTextString(m) }
func (*L2VpnBdDisco) ProtoMessage()    {}
func (*L2VpnBdDisco) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fc31a5586bf6c0e, []int{18}
}

func (m *L2VpnBdDisco) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2VpnBdDisco.Unmarshal(m, b)
}
func (m *L2VpnBdDisco) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2VpnBdDisco.Marshal(b, m, deterministic)
}
func (m *L2VpnBdDisco) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2VpnBdDisco.Merge(m, src)
}
func (m *L2VpnBdDisco) XXX_Size() int {
	return xxx_messageInfo_L2VpnBdDisco.Size(m)
}
func (m *L2VpnBdDisco) XXX_DiscardUnknown() {
	xxx_messageInfo_L2VpnBdDisco.DiscardUnknown(m)
}

var xxx_messageInfo_L2VpnBdDisco proto.InternalMessageInfo

func (m *L2VpnBdDisco) GetVpnId() uint32 {
	if m != nil {
		return m.VpnId
	}
	return 0
}

func (m *L2VpnBdDisco) GetRdValue() *L2VpnRd {
	if m != nil {
		return m.RdValue
	}
	return nil
}

func (m *L2VpnBdDisco) GetAdSignallingMethod() uint32 {
	if m != nil {
		return m.AdSignallingMethod
	}
	return 0
}

func (m *L2VpnBdDisco) GetAdMethod() uint32 {
	if m != nil {
		return m.AdMethod
	}
	return 0
}

func (m *L2VpnBdDisco) GetVeId() uint32 {
	if m != nil {
		return m.VeId
	}
	return 0
}

func (m *L2VpnBdDisco) GetProvisionedVeId() uint32 {
	if m != nil {
		return m.ProvisionedVeId
	}
	return 0
}

func (m *L2VpnBdDisco) GetVeRange() uint32 {
	if m != nil {
		return m.VeRange
	}
	return 0
}

func (m *L2VpnBdDisco) GetImportRt() []*L2VpnRt {
	if m != nil {
		return m.ImportRt
	}
	return nil
}

func (m *L2VpnBdDisco) GetExportRt() []*L2VpnRt {
	if m != nil {
		return m.ExportRt
	}
	return nil
}

func (m *L2VpnBdDisco) GetAsNumber() uint32 {
	if m != nil {
		return m.AsNumber
	}
	return 0
}

func (m *L2VpnBdDisco) GetVplsId() *L2VpnVplsId {
	if m != nil {
		return m.VplsId
	}
	return nil
}

func (m *L2VpnBdDisco) GetL2VpnRouterId() string {
	if m != nil {
		return m.L2VpnRouterId
	}
	return ""
}

func (m *L2VpnBdDisco) GetVpnAdded() bool {
	if m != nil {
		return m.VpnAdded
	}
	return false
}

func (m *L2VpnBdDisco) GetServiceConnected() bool {
	if m != nil {
		return m.ServiceConnected
	}
	return false
}

func (m *L2VpnBdDisco) GetVplsIdConflict() bool {
	if m != nil {
		return m.VplsIdConflict
	}
	return false
}

func (m *L2VpnBdDisco) GetExportRoutePolicy() string {
	if m != nil {
		return m.ExportRoutePolicy
	}
	return ""
}

type L2VpnVfiP2Mp struct {
	Transport            string   `protobuf:"bytes,1,opt,name=transport,proto3" json:"transport,omitempty"`
	Signaling            string   `protobuf:"bytes,2,opt,name=signaling,proto3" json:"signaling,omitempty"`
	PtreeId              uint32   `protobuf:"varint,3,opt,name=ptree_id,json=ptreeId,proto3" json:"ptree_id,omitempty"`
	AttributeSetName     string   `protobuf:"bytes,4,opt,name=attribute_set_name,json=attributeSetName,proto3" json:"attribute_set_name,omitempty"`
	TransportStatus      string   `protobuf:"bytes,5,opt,name=transport_status,json=transportStatus,proto3" json:"transport_status,omitempty"`
	LocalLabel           uint32   `protobuf:"varint,6,opt,name=local_label,json=localLabel,proto3" json:"local_label,omitempty"`
	TunnelInterface      string   `protobuf:"bytes,7,opt,name=tunnel_interface,json=tunnelInterface,proto3" json:"tunnel_interface,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *L2VpnVfiP2Mp) Reset()         { *m = L2VpnVfiP2Mp{} }
func (m *L2VpnVfiP2Mp) String() string { return proto.CompactTextString(m) }
func (*L2VpnVfiP2Mp) ProtoMessage()    {}
func (*L2VpnVfiP2Mp) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fc31a5586bf6c0e, []int{19}
}

func (m *L2VpnVfiP2Mp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2VpnVfiP2Mp.Unmarshal(m, b)
}
func (m *L2VpnVfiP2Mp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2VpnVfiP2Mp.Marshal(b, m, deterministic)
}
func (m *L2VpnVfiP2Mp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2VpnVfiP2Mp.Merge(m, src)
}
func (m *L2VpnVfiP2Mp) XXX_Size() int {
	return xxx_messageInfo_L2VpnVfiP2Mp.Size(m)
}
func (m *L2VpnVfiP2Mp) XXX_DiscardUnknown() {
	xxx_messageInfo_L2VpnVfiP2Mp.DiscardUnknown(m)
}

var xxx_messageInfo_L2VpnVfiP2Mp proto.InternalMessageInfo

func (m *L2VpnVfiP2Mp) GetTransport() string {
	if m != nil {
		return m.Transport
	}
	return ""
}

func (m *L2VpnVfiP2Mp) GetSignaling() string {
	if m != nil {
		return m.Signaling
	}
	return ""
}

func (m *L2VpnVfiP2Mp) GetPtreeId() uint32 {
	if m != nil {
		return m.PtreeId
	}
	return 0
}

func (m *L2VpnVfiP2Mp) GetAttributeSetName() string {
	if m != nil {
		return m.AttributeSetName
	}
	return ""
}

func (m *L2VpnVfiP2Mp) GetTransportStatus() string {
	if m != nil {
		return m.TransportStatus
	}
	return ""
}

func (m *L2VpnVfiP2Mp) GetLocalLabel() uint32 {
	if m != nil {
		return m.LocalLabel
	}
	return 0
}

func (m *L2VpnVfiP2Mp) GetTunnelInterface() string {
	if m != nil {
		return m.TunnelInterface
	}
	return ""
}

type L2VpnVfi struct {
	VfiName              string          `protobuf:"bytes,1,opt,name=vfi_name,json=vfiName,proto3" json:"vfi_name,omitempty"`
	Shutdown             bool            `protobuf:"varint,2,opt,name=shutdown,proto3" json:"shutdown,omitempty"`
	Access               bool            `protobuf:"varint,3,opt,name=access,proto3" json:"access,omitempty"`
	VfiState             string          `protobuf:"bytes,4,opt,name=vfi_state,json=vfiState,proto3" json:"vfi_state,omitempty"`
	NumberPseudowires    uint32          `protobuf:"varint,5,opt,name=number_pseudowires,json=numberPseudowires,proto3" json:"number_pseudowires,omitempty"`
	DiscoveryInformation *L2VpnBdDisco   `protobuf:"bytes,6,opt,name=discovery_information,json=discoveryInformation,proto3" json:"discovery_information,omitempty"`
	P2MpInformation      []*L2VpnVfiP2Mp `protobuf:"bytes,7,rep,name=p2mp_information,json=p2mpInformation,proto3" json:"p2mp_information,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *L2VpnVfi) Reset()         { *m = L2VpnVfi{} }
func (m *L2VpnVfi) String() string { return proto.CompactTextString(m) }
func (*L2VpnVfi) ProtoMessage()    {}
func (*L2VpnVfi) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fc31a5586bf6c0e, []int{20}
}

func (m *L2VpnVfi) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2VpnVfi.Unmarshal(m, b)
}
func (m *L2VpnVfi) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2VpnVfi.Marshal(b, m, deterministic)
}
func (m *L2VpnVfi) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2VpnVfi.Merge(m, src)
}
func (m *L2VpnVfi) XXX_Size() int {
	return xxx_messageInfo_L2VpnVfi.Size(m)
}
func (m *L2VpnVfi) XXX_DiscardUnknown() {
	xxx_messageInfo_L2VpnVfi.DiscardUnknown(m)
}

var xxx_messageInfo_L2VpnVfi proto.InternalMessageInfo

func (m *L2VpnVfi) GetVfiName() string {
	if m != nil {
		return m.VfiName
	}
	return ""
}

func (m *L2VpnVfi) GetShutdown() bool {
	if m != nil {
		return m.Shutdown
	}
	return false
}

func (m *L2VpnVfi) GetAccess() bool {
	if m != nil {
		return m.Access
	}
	return false
}

func (m *L2VpnVfi) GetVfiState() string {
	if m != nil {
		return m.VfiState
	}
	return ""
}

func (m *L2VpnVfi) GetNumberPseudowires() uint32 {
	if m != nil {
		return m.NumberPseudowires
	}
	return 0
}

func (m *L2VpnVfi) GetDiscoveryInformation() *L2VpnBdDisco {
	if m != nil {
		return m.DiscoveryInformation
	}
	return nil
}

func (m *L2VpnVfi) GetP2MpInformation() []*L2VpnVfiP2Mp {
	if m != nil {
		return m.P2MpInformation
	}
	return nil
}

type L2VpnBridgePortSecParam struct {
	Base                          *L2VpnBridgeSecParam      `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	StormControl                  *L2VpnBagStormControlType `protobuf:"bytes,2,opt,name=storm_control,json=stormControl,proto3" json:"storm_control,omitempty"`
	UnicastStormControlRateUnit   string                    `protobuf:"bytes,3,opt,name=unicast_storm_control_rate_unit,json=unicastStormControlRateUnit,proto3" json:"unicast_storm_control_rate_unit,omitempty"`
	UnicastStormControlPps        uint64                    `protobuf:"varint,4,opt,name=unicast_storm_control_pps,json=unicastStormControlPps,proto3" json:"unicast_storm_control_pps,omitempty"`
	UnicastStormControlKbPs       uint64                    `protobuf:"varint,5,opt,name=unicast_storm_control_kb_ps,json=unicastStormControlKbPs,proto3" json:"unicast_storm_control_kb_ps,omitempty"`
	MulticastStormControlRateUnit string                    `protobuf:"bytes,6,opt,name=multicast_storm_control_rate_unit,json=multicastStormControlRateUnit,proto3" json:"multicast_storm_control_rate_unit,omitempty"`
	MulticastStormControlPps      uint64                    `protobuf:"varint,7,opt,name=multicast_storm_control_pps,json=multicastStormControlPps,proto3" json:"multicast_storm_control_pps,omitempty"`
	MulticastStormControlKbPs     uint64                    `protobuf:"varint,8,opt,name=multicast_storm_control_kb_ps,json=multicastStormControlKbPs,proto3" json:"multicast_storm_control_kb_ps,omitempty"`
	BroadcastStormControlRateUnit string                    `protobuf:"bytes,9,opt,name=broadcast_storm_control_rate_unit,json=broadcastStormControlRateUnit,proto3" json:"broadcast_storm_control_rate_unit,omitempty"`
	BroadcastStormControlPps      uint64                    `protobuf:"varint,10,opt,name=broadcast_storm_control_pps,json=broadcastStormControlPps,proto3" json:"broadcast_storm_control_pps,omitempty"`
	BroadcastStormControlKbPs     uint64                    `protobuf:"varint,11,opt,name=broadcast_storm_control_kb_ps,json=broadcastStormControlKbPs,proto3" json:"broadcast_storm_control_kb_ps,omitempty"`
	Dhcpv4Trust                   bool                      `protobuf:"varint,12,opt,name=dhcpv4_trust,json=dhcpv4Trust,proto3" json:"dhcpv4_trust,omitempty"`
	XXX_NoUnkeyedLiteral          struct{}                  `json:"-"`
	XXX_unrecognized              []byte                    `json:"-"`
	XXX_sizecache                 int32                     `json:"-"`
}

func (m *L2VpnBridgePortSecParam) Reset()         { *m = L2VpnBridgePortSecParam{} }
func (m *L2VpnBridgePortSecParam) String() string { return proto.CompactTextString(m) }
func (*L2VpnBridgePortSecParam) ProtoMessage()    {}
func (*L2VpnBridgePortSecParam) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fc31a5586bf6c0e, []int{21}
}

func (m *L2VpnBridgePortSecParam) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2VpnBridgePortSecParam.Unmarshal(m, b)
}
func (m *L2VpnBridgePortSecParam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2VpnBridgePortSecParam.Marshal(b, m, deterministic)
}
func (m *L2VpnBridgePortSecParam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2VpnBridgePortSecParam.Merge(m, src)
}
func (m *L2VpnBridgePortSecParam) XXX_Size() int {
	return xxx_messageInfo_L2VpnBridgePortSecParam.Size(m)
}
func (m *L2VpnBridgePortSecParam) XXX_DiscardUnknown() {
	xxx_messageInfo_L2VpnBridgePortSecParam.DiscardUnknown(m)
}

var xxx_messageInfo_L2VpnBridgePortSecParam proto.InternalMessageInfo

func (m *L2VpnBridgePortSecParam) GetBase() *L2VpnBridgeSecParam {
	if m != nil {
		return m.Base
	}
	return nil
}

func (m *L2VpnBridgePortSecParam) GetStormControl() *L2VpnBagStormControlType {
	if m != nil {
		return m.StormControl
	}
	return nil
}

func (m *L2VpnBridgePortSecParam) GetUnicastStormControlRateUnit() string {
	if m != nil {
		return m.UnicastStormControlRateUnit
	}
	return ""
}

func (m *L2VpnBridgePortSecParam) GetUnicastStormControlPps() uint64 {
	if m != nil {
		return m.UnicastStormControlPps
	}
	return 0
}

func (m *L2VpnBridgePortSecParam) GetUnicastStormControlKbPs() uint64 {
	if m != nil {
		return m.UnicastStormControlKbPs
	}
	return 0
}

func (m *L2VpnBridgePortSecParam) GetMulticastStormControlRateUnit() string {
	if m != nil {
		return m.MulticastStormControlRateUnit
	}
	return ""
}

func (m *L2VpnBridgePortSecParam) GetMulticastStormControlPps() uint64 {
	if m != nil {
		return m.MulticastStormControlPps
	}
	return 0
}

func (m *L2VpnBridgePortSecParam) GetMulticastStormControlKbPs() uint64 {
	if m != nil {
		return m.MulticastStormControlKbPs
	}
	return 0
}

func (m *L2VpnBridgePortSecParam) GetBroadcastStormControlRateUnit() string {
	if m != nil {
		return m.BroadcastStormControlRateUnit
	}
	return ""
}

func (m *L2VpnBridgePortSecParam) GetBroadcastStormControlPps() uint64 {
	if m != nil {
		return m.BroadcastStormControlPps
	}
	return 0
}

func (m *L2VpnBridgePortSecParam) GetBroadcastStormControlKbPs() uint64 {
	if m != nil {
		return m.BroadcastStormControlKbPs
	}
	return 0
}

func (m *L2VpnBridgePortSecParam) GetDhcpv4Trust() bool {
	if m != nil {
		return m.Dhcpv4Trust
	}
	return false
}

type L2FibStatsBagCounters struct {
	PacketCounts         uint64   `protobuf:"varint,1,opt,name=packet_counts,json=packetCounts,proto3" json:"packet_counts,omitempty"`
	ByteCounts           uint64   `protobuf:"varint,2,opt,name=byte_counts,json=byteCounts,proto3" json:"byte_counts,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *L2FibStatsBagCounters) Reset()         { *m = L2FibStatsBagCounters{} }
func (m *L2FibStatsBagCounters) String() string { return proto.CompactTextString(m) }
func (*L2FibStatsBagCounters) ProtoMessage()    {}
func (*L2FibStatsBagCounters) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fc31a5586bf6c0e, []int{22}
}

func (m *L2FibStatsBagCounters) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2FibStatsBagCounters.Unmarshal(m, b)
}
func (m *L2FibStatsBagCounters) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2FibStatsBagCounters.Marshal(b, m, deterministic)
}
func (m *L2FibStatsBagCounters) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2FibStatsBagCounters.Merge(m, src)
}
func (m *L2FibStatsBagCounters) XXX_Size() int {
	return xxx_messageInfo_L2FibStatsBagCounters.Size(m)
}
func (m *L2FibStatsBagCounters) XXX_DiscardUnknown() {
	xxx_messageInfo_L2FibStatsBagCounters.DiscardUnknown(m)
}

var xxx_messageInfo_L2FibStatsBagCounters proto.InternalMessageInfo

func (m *L2FibStatsBagCounters) GetPacketCounts() uint64 {
	if m != nil {
		return m.PacketCounts
	}
	return 0
}

func (m *L2FibStatsBagCounters) GetByteCounts() uint64 {
	if m != nil {
		return m.ByteCounts
	}
	return 0
}

type L2FibStatsBagImp struct {
	ImpositionStat       *L2FibStatsBagCounters `protobuf:"bytes,1,opt,name=imposition_stat,json=impositionStat,proto3" json:"imposition_stat,omitempty"`
	ImpositionMtuDrop    *L2FibStatsBagCounters `protobuf:"bytes,2,opt,name=imposition_mtu_drop,json=impositionMtuDrop,proto3" json:"imposition_mtu_drop,omitempty"`
	ImpostionTailDrop    *L2FibStatsBagCounters `protobuf:"bytes,3,opt,name=impostion_tail_drop,json=impostionTailDrop,proto3" json:"impostion_tail_drop,omitempty"`
	L2FsbiDrop           *L2FibStatsBagCounters `protobuf:"bytes,4,opt,name=l2fsbi_drop,json=l2fsbiDrop,proto3" json:"l2fsbi_drop,omitempty"`
	Multicast            *L2FibStatsBagCounters `protobuf:"bytes,5,opt,name=multicast,proto3" json:"multicast,omitempty"`
	Broadcast            *L2FibStatsBagCounters `protobuf:"bytes,6,opt,name=broadcast,proto3" json:"broadcast,omitempty"`
	KnownUnicast         *L2FibStatsBagCounters `protobuf:"bytes,7,opt,name=known_unicast,json=knownUnicast,proto3" json:"known_unicast,omitempty"`
	UnknownUnicast       *L2FibStatsBagCounters `protobuf:"bytes,8,opt,name=unknown_unicast,json=unknownUnicast,proto3" json:"unknown_unicast,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *L2FibStatsBagImp) Reset()         { *m = L2FibStatsBagImp{} }
func (m *L2FibStatsBagImp) String() string { return proto.CompactTextString(m) }
func (*L2FibStatsBagImp) ProtoMessage()    {}
func (*L2FibStatsBagImp) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fc31a5586bf6c0e, []int{23}
}

func (m *L2FibStatsBagImp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2FibStatsBagImp.Unmarshal(m, b)
}
func (m *L2FibStatsBagImp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2FibStatsBagImp.Marshal(b, m, deterministic)
}
func (m *L2FibStatsBagImp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2FibStatsBagImp.Merge(m, src)
}
func (m *L2FibStatsBagImp) XXX_Size() int {
	return xxx_messageInfo_L2FibStatsBagImp.Size(m)
}
func (m *L2FibStatsBagImp) XXX_DiscardUnknown() {
	xxx_messageInfo_L2FibStatsBagImp.DiscardUnknown(m)
}

var xxx_messageInfo_L2FibStatsBagImp proto.InternalMessageInfo

func (m *L2FibStatsBagImp) GetImpositionStat() *L2FibStatsBagCounters {
	if m != nil {
		return m.ImpositionStat
	}
	return nil
}

func (m *L2FibStatsBagImp) GetImpositionMtuDrop() *L2FibStatsBagCounters {
	if m != nil {
		return m.ImpositionMtuDrop
	}
	return nil
}

func (m *L2FibStatsBagImp) GetImpostionTailDrop() *L2FibStatsBagCounters {
	if m != nil {
		return m.ImpostionTailDrop
	}
	return nil
}

func (m *L2FibStatsBagImp) GetL2FsbiDrop() *L2FibStatsBagCounters {
	if m != nil {
		return m.L2FsbiDrop
	}
	return nil
}

func (m *L2FibStatsBagImp) GetMulticast() *L2FibStatsBagCounters {
	if m != nil {
		return m.Multicast
	}
	return nil
}

func (m *L2FibStatsBagImp) GetBroadcast() *L2FibStatsBagCounters {
	if m != nil {
		return m.Broadcast
	}
	return nil
}

func (m *L2FibStatsBagImp) GetKnownUnicast() *L2FibStatsBagCounters {
	if m != nil {
		return m.KnownUnicast
	}
	return nil
}

func (m *L2FibStatsBagImp) GetUnknownUnicast() *L2FibStatsBagCounters {
	if m != nil {
		return m.UnknownUnicast
	}
	return nil
}

type L2FibStatsBagDisp struct {
	DispositionStat      *L2FibStatsBagCounters `protobuf:"bytes,1,opt,name=disposition_stat,json=dispositionStat,proto3" json:"disposition_stat,omitempty"`
	DispositionMtuDrop   *L2FibStatsBagCounters `protobuf:"bytes,2,opt,name=disposition_mtu_drop,json=dispositionMtuDrop,proto3" json:"disposition_mtu_drop,omitempty"`
	DispositionTailDrop  *L2FibStatsBagCounters `protobuf:"bytes,3,opt,name=disposition_tail_drop,json=dispositionTailDrop,proto3" json:"disposition_tail_drop,omitempty"`
	MulticastDrop        *L2FibStatsBagCounters `protobuf:"bytes,4,opt,name=multicast_drop,json=multicastDrop,proto3" json:"multicast_drop,omitempty"`
	UnicastDrop          *L2FibStatsBagCounters `protobuf:"bytes,5,opt,name=unicast_drop,json=unicastDrop,proto3" json:"unicast_drop,omitempty"`
	BroadcastDrop        *L2FibStatsBagCounters `protobuf:"bytes,6,opt,name=broadcast_drop,json=broadcastDrop,proto3" json:"broadcast_drop,omitempty"`
	ReceivedDrops        *L2FibStatsBagCounters `protobuf:"bytes,7,opt,name=received_drops,json=receivedDrops,proto3" json:"received_drops,omitempty"`
	DaiDrop              *L2FibStatsBagCounters `protobuf:"bytes,8,opt,name=dai_drop,json=daiDrop,proto3" json:"dai_drop,omitempty"`
	IpsgDrop             *L2FibStatsBagCounters `protobuf:"bytes,9,opt,name=ipsg_drop,json=ipsgDrop,proto3" json:"ipsg_drop,omitempty"`
	DispositionOoODrops  *L2FibStatsBagCounters `protobuf:"bytes,10,opt,name=disposition_oo_o_drops,json=dispositionOoODrops,proto3" json:"disposition_oo_o_drops,omitempty"`
	DispositionP2MpStats *L2FibStatsBagCounters `protobuf:"bytes,11,opt,name=disposition_p2mp_stats,json=dispositionP2mpStats,proto3" json:"disposition_p2mp_stats,omitempty"`
	KnownUnicast         *L2FibStatsBagCounters `protobuf:"bytes,12,opt,name=known_unicast,json=knownUnicast,proto3" json:"known_unicast,omitempty"`
	MacMove              *L2FibStatsBagCounters `protobuf:"bytes,13,opt,name=mac_move,json=macMove,proto3" json:"mac_move,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *L2FibStatsBagDisp) Reset()         { *m = L2FibStatsBagDisp{} }
func (m *L2FibStatsBagDisp) String() string { return proto.CompactTextString(m) }
func (*L2FibStatsBagDisp) ProtoMessage()    {}
func (*L2FibStatsBagDisp) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fc31a5586bf6c0e, []int{24}
}

func (m *L2FibStatsBagDisp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2FibStatsBagDisp.Unmarshal(m, b)
}
func (m *L2FibStatsBagDisp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2FibStatsBagDisp.Marshal(b, m, deterministic)
}
func (m *L2FibStatsBagDisp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2FibStatsBagDisp.Merge(m, src)
}
func (m *L2FibStatsBagDisp) XXX_Size() int {
	return xxx_messageInfo_L2FibStatsBagDisp.Size(m)
}
func (m *L2FibStatsBagDisp) XXX_DiscardUnknown() {
	xxx_messageInfo_L2FibStatsBagDisp.DiscardUnknown(m)
}

var xxx_messageInfo_L2FibStatsBagDisp proto.InternalMessageInfo

func (m *L2FibStatsBagDisp) GetDispositionStat() *L2FibStatsBagCounters {
	if m != nil {
		return m.DispositionStat
	}
	return nil
}

func (m *L2FibStatsBagDisp) GetDispositionMtuDrop() *L2FibStatsBagCounters {
	if m != nil {
		return m.DispositionMtuDrop
	}
	return nil
}

func (m *L2FibStatsBagDisp) GetDispositionTailDrop() *L2FibStatsBagCounters {
	if m != nil {
		return m.DispositionTailDrop
	}
	return nil
}

func (m *L2FibStatsBagDisp) GetMulticastDrop() *L2FibStatsBagCounters {
	if m != nil {
		return m.MulticastDrop
	}
	return nil
}

func (m *L2FibStatsBagDisp) GetUnicastDrop() *L2FibStatsBagCounters {
	if m != nil {
		return m.UnicastDrop
	}
	return nil
}

func (m *L2FibStatsBagDisp) GetBroadcastDrop() *L2FibStatsBagCounters {
	if m != nil {
		return m.BroadcastDrop
	}
	return nil
}

func (m *L2FibStatsBagDisp) GetReceivedDrops() *L2FibStatsBagCounters {
	if m != nil {
		return m.ReceivedDrops
	}
	return nil
}

func (m *L2FibStatsBagDisp) GetDaiDrop() *L2FibStatsBagCounters {
	if m != nil {
		return m.DaiDrop
	}
	return nil
}

func (m *L2FibStatsBagDisp) GetIpsgDrop() *L2FibStatsBagCounters {
	if m != nil {
		return m.IpsgDrop
	}
	return nil
}

func (m *L2FibStatsBagDisp) GetDispositionOoODrops() *L2FibStatsBagCounters {
	if m != nil {
		return m.DispositionOoODrops
	}
	return nil
}

func (m *L2FibStatsBagDisp) GetDispositionP2MpStats() *L2FibStatsBagCounters {
	if m != nil {
		return m.DispositionP2MpStats
	}
	return nil
}

func (m *L2FibStatsBagDisp) GetKnownUnicast() *L2FibStatsBagCounters {
	if m != nil {
		return m.KnownUnicast
	}
	return nil
}

func (m *L2FibStatsBagDisp) GetMacMove() *L2FibStatsBagCounters {
	if m != nil {
		return m.MacMove
	}
	return nil
}

type L2FibStatsBagSeqNum struct {
	SequenceNumberSent            uint32   `protobuf:"varint,1,opt,name=sequence_number_sent,json=sequenceNumberSent,proto3" json:"sequence_number_sent,omitempty"`
	SequenceNumberExpected        uint32   `protobuf:"varint,2,opt,name=sequence_number_expected,json=sequenceNumberExpected,proto3" json:"sequence_number_expected,omitempty"`
	BypassedInboundSequencePacket uint64   `protobuf:"varint,3,opt,name=bypassed_inbound_sequence_packet,json=bypassedInboundSequencePacket,proto3" json:"bypassed_inbound_sequence_packet,omitempty"`
	BypassedOutSequencePacket     uint64   `protobuf:"varint,4,opt,name=bypassed_out_sequence_packet,json=bypassedOutSequencePacket,proto3" json:"bypassed_out_sequence_packet,omitempty"`
	XXX_NoUnkeyedLiteral          struct{} `json:"-"`
	XXX_unrecognized              []byte   `json:"-"`
	XXX_sizecache                 int32    `json:"-"`
}

func (m *L2FibStatsBagSeqNum) Reset()         { *m = L2FibStatsBagSeqNum{} }
func (m *L2FibStatsBagSeqNum) String() string { return proto.CompactTextString(m) }
func (*L2FibStatsBagSeqNum) ProtoMessage()    {}
func (*L2FibStatsBagSeqNum) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fc31a5586bf6c0e, []int{25}
}

func (m *L2FibStatsBagSeqNum) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2FibStatsBagSeqNum.Unmarshal(m, b)
}
func (m *L2FibStatsBagSeqNum) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2FibStatsBagSeqNum.Marshal(b, m, deterministic)
}
func (m *L2FibStatsBagSeqNum) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2FibStatsBagSeqNum.Merge(m, src)
}
func (m *L2FibStatsBagSeqNum) XXX_Size() int {
	return xxx_messageInfo_L2FibStatsBagSeqNum.Size(m)
}
func (m *L2FibStatsBagSeqNum) XXX_DiscardUnknown() {
	xxx_messageInfo_L2FibStatsBagSeqNum.DiscardUnknown(m)
}

var xxx_messageInfo_L2FibStatsBagSeqNum proto.InternalMessageInfo

func (m *L2FibStatsBagSeqNum) GetSequenceNumberSent() uint32 {
	if m != nil {
		return m.SequenceNumberSent
	}
	return 0
}

func (m *L2FibStatsBagSeqNum) GetSequenceNumberExpected() uint32 {
	if m != nil {
		return m.SequenceNumberExpected
	}
	return 0
}

func (m *L2FibStatsBagSeqNum) GetBypassedInboundSequencePacket() uint64 {
	if m != nil {
		return m.BypassedInboundSequencePacket
	}
	return 0
}

func (m *L2FibStatsBagSeqNum) GetBypassedOutSequencePacket() uint64 {
	if m != nil {
		return m.BypassedOutSequencePacket
	}
	return 0
}

type L2FibStatsBagForwarding struct {
	ImpostionStats       *L2FibStatsBagImp    `protobuf:"bytes,1,opt,name=impostion_stats,json=impostionStats,proto3" json:"impostion_stats,omitempty"`
	DispostionStats      *L2FibStatsBagDisp   `protobuf:"bytes,2,opt,name=dispostion_stats,json=dispostionStats,proto3" json:"dispostion_stats,omitempty"`
	SequenceNumber       *L2FibStatsBagSeqNum `protobuf:"bytes,3,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *L2FibStatsBagForwarding) Reset()         { *m = L2FibStatsBagForwarding{} }
func (m *L2FibStatsBagForwarding) String() string { return proto.CompactTextString(m) }
func (*L2FibStatsBagForwarding) ProtoMessage()    {}
func (*L2FibStatsBagForwarding) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fc31a5586bf6c0e, []int{26}
}

func (m *L2FibStatsBagForwarding) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2FibStatsBagForwarding.Unmarshal(m, b)
}
func (m *L2FibStatsBagForwarding) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2FibStatsBagForwarding.Marshal(b, m, deterministic)
}
func (m *L2FibStatsBagForwarding) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2FibStatsBagForwarding.Merge(m, src)
}
func (m *L2FibStatsBagForwarding) XXX_Size() int {
	return xxx_messageInfo_L2FibStatsBagForwarding.Size(m)
}
func (m *L2FibStatsBagForwarding) XXX_DiscardUnknown() {
	xxx_messageInfo_L2FibStatsBagForwarding.DiscardUnknown(m)
}

var xxx_messageInfo_L2FibStatsBagForwarding proto.InternalMessageInfo

func (m *L2FibStatsBagForwarding) GetImpostionStats() *L2FibStatsBagImp {
	if m != nil {
		return m.ImpostionStats
	}
	return nil
}

func (m *L2FibStatsBagForwarding) GetDispostionStats() *L2FibStatsBagDisp {
	if m != nil {
		return m.DispostionStats
	}
	return nil
}

func (m *L2FibStatsBagForwarding) GetSequenceNumber() *L2FibStatsBagSeqNum {
	if m != nil {
		return m.SequenceNumber
	}
	return nil
}

type L2VpnBdPbbEdgePort struct {
	XconnectId           uint32                   `protobuf:"varint,1,opt,name=xconnect_id,json=xconnectId,proto3" json:"xconnect_id,omitempty"`
	UnknownUnicastMacSet bool                     `protobuf:"varint,2,opt,name=unknown_unicast_mac_set,json=unknownUnicastMacSet,proto3" json:"unknown_unicast_mac_set,omitempty"`
	UnknownUnicastMac    string                   `protobuf:"bytes,3,opt,name=unknown_unicast_mac,json=unknownUnicastMac,proto3" json:"unknown_unicast_mac,omitempty"`
	BmacMapping          []*L2VpnBdMac            `protobuf:"bytes,4,rep,name=bmac_mapping,json=bmacMapping,proto3" json:"bmac_mapping,omitempty"`
	SecurityParameters   *L2VpnBridgePortSecParam `protobuf:"bytes,5,opt,name=security_parameters,json=securityParameters,proto3" json:"security_parameters,omitempty"`
	EdgePortState        string                   `protobuf:"bytes,6,opt,name=edge_port_state,json=edgePortState,proto3" json:"edge_port_state,omitempty"`
	Statistics           *L2FibStatsBagForwarding `protobuf:"bytes,7,opt,name=statistics,proto3" json:"statistics,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *L2VpnBdPbbEdgePort) Reset()         { *m = L2VpnBdPbbEdgePort{} }
func (m *L2VpnBdPbbEdgePort) String() string { return proto.CompactTextString(m) }
func (*L2VpnBdPbbEdgePort) ProtoMessage()    {}
func (*L2VpnBdPbbEdgePort) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fc31a5586bf6c0e, []int{27}
}

func (m *L2VpnBdPbbEdgePort) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2VpnBdPbbEdgePort.Unmarshal(m, b)
}
func (m *L2VpnBdPbbEdgePort) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2VpnBdPbbEdgePort.Marshal(b, m, deterministic)
}
func (m *L2VpnBdPbbEdgePort) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2VpnBdPbbEdgePort.Merge(m, src)
}
func (m *L2VpnBdPbbEdgePort) XXX_Size() int {
	return xxx_messageInfo_L2VpnBdPbbEdgePort.Size(m)
}
func (m *L2VpnBdPbbEdgePort) XXX_DiscardUnknown() {
	xxx_messageInfo_L2VpnBdPbbEdgePort.DiscardUnknown(m)
}

var xxx_messageInfo_L2VpnBdPbbEdgePort proto.InternalMessageInfo

func (m *L2VpnBdPbbEdgePort) GetXconnectId() uint32 {
	if m != nil {
		return m.XconnectId
	}
	return 0
}

func (m *L2VpnBdPbbEdgePort) GetUnknownUnicastMacSet() bool {
	if m != nil {
		return m.UnknownUnicastMacSet
	}
	return false
}

func (m *L2VpnBdPbbEdgePort) GetUnknownUnicastMac() string {
	if m != nil {
		return m.UnknownUnicastMac
	}
	return ""
}

func (m *L2VpnBdPbbEdgePort) GetBmacMapping() []*L2VpnBdMac {
	if m != nil {
		return m.BmacMapping
	}
	return nil
}

func (m *L2VpnBdPbbEdgePort) GetSecurityParameters() *L2VpnBridgePortSecParam {
	if m != nil {
		return m.SecurityParameters
	}
	return nil
}

func (m *L2VpnBdPbbEdgePort) GetEdgePortState() string {
	if m != nil {
		return m.EdgePortState
	}
	return ""
}

func (m *L2VpnBdPbbEdgePort) GetStatistics() *L2FibStatsBagForwarding {
	if m != nil {
		return m.Statistics
	}
	return nil
}

type L2VpnBridgePbbEdge struct {
	ISid                 uint32              `protobuf:"varint,1,opt,name=i_sid,json=iSid,proto3" json:"i_sid,omitempty"`
	CoreBridgeName       string              `protobuf:"bytes,2,opt,name=core_bridge_name,json=coreBridgeName,proto3" json:"core_bridge_name,omitempty"`
	CoreBridgeState      string              `protobuf:"bytes,3,opt,name=core_bridge_state,json=coreBridgeState,proto3" json:"core_bridge_state,omitempty"`
	EdgePort             *L2VpnBdPbbEdgePort `protobuf:"bytes,4,opt,name=edge_port,json=edgePort,proto3" json:"edge_port,omitempty"`
	MirpLiteStatus       string              `protobuf:"bytes,5,opt,name=mirp_lite_status,json=mirpLiteStatus,proto3" json:"mirp_lite_status,omitempty"`
	MirpLiteProtocol     string              `protobuf:"bytes,6,opt,name=mirp_lite_protocol,json=mirpLiteProtocol,proto3" json:"mirp_lite_protocol,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *L2VpnBridgePbbEdge) Reset()         { *m = L2VpnBridgePbbEdge{} }
func (m *L2VpnBridgePbbEdge) String() string { return proto.CompactTextString(m) }
func (*L2VpnBridgePbbEdge) ProtoMessage()    {}
func (*L2VpnBridgePbbEdge) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fc31a5586bf6c0e, []int{28}
}

func (m *L2VpnBridgePbbEdge) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2VpnBridgePbbEdge.Unmarshal(m, b)
}
func (m *L2VpnBridgePbbEdge) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2VpnBridgePbbEdge.Marshal(b, m, deterministic)
}
func (m *L2VpnBridgePbbEdge) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2VpnBridgePbbEdge.Merge(m, src)
}
func (m *L2VpnBridgePbbEdge) XXX_Size() int {
	return xxx_messageInfo_L2VpnBridgePbbEdge.Size(m)
}
func (m *L2VpnBridgePbbEdge) XXX_DiscardUnknown() {
	xxx_messageInfo_L2VpnBridgePbbEdge.DiscardUnknown(m)
}

var xxx_messageInfo_L2VpnBridgePbbEdge proto.InternalMessageInfo

func (m *L2VpnBridgePbbEdge) GetISid() uint32 {
	if m != nil {
		return m.ISid
	}
	return 0
}

func (m *L2VpnBridgePbbEdge) GetCoreBridgeName() string {
	if m != nil {
		return m.CoreBridgeName
	}
	return ""
}

func (m *L2VpnBridgePbbEdge) GetCoreBridgeState() string {
	if m != nil {
		return m.CoreBridgeState
	}
	return ""
}

func (m *L2VpnBridgePbbEdge) GetEdgePort() *L2VpnBdPbbEdgePort {
	if m != nil {
		return m.EdgePort
	}
	return nil
}

func (m *L2VpnBridgePbbEdge) GetMirpLiteStatus() string {
	if m != nil {
		return m.MirpLiteStatus
	}
	return ""
}

func (m *L2VpnBridgePbbEdge) GetMirpLiteProtocol() string {
	if m != nil {
		return m.MirpLiteProtocol
	}
	return ""
}

type L2VpnBdPbbCorePort struct {
	XconnectId           uint32                   `protobuf:"varint,1,opt,name=xconnect_id,json=xconnectId,proto3" json:"xconnect_id,omitempty"`
	VlanId               uint32                   `protobuf:"varint,2,opt,name=vlan_id,json=vlanId,proto3" json:"vlan_id,omitempty"`
	SecurityParameters   *L2VpnBridgePortSecParam `protobuf:"bytes,3,opt,name=security_parameters,json=securityParameters,proto3" json:"security_parameters,omitempty"`
	CorePortState        string                   `protobuf:"bytes,4,opt,name=core_port_state,json=corePortState,proto3" json:"core_port_state,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *L2VpnBdPbbCorePort) Reset()         { *m = L2VpnBdPbbCorePort{} }
func (m *L2VpnBdPbbCorePort) String() string { return proto.CompactTextString(m) }
func (*L2VpnBdPbbCorePort) ProtoMessage()    {}
func (*L2VpnBdPbbCorePort) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fc31a5586bf6c0e, []int{29}
}

func (m *L2VpnBdPbbCorePort) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2VpnBdPbbCorePort.Unmarshal(m, b)
}
func (m *L2VpnBdPbbCorePort) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2VpnBdPbbCorePort.Marshal(b, m, deterministic)
}
func (m *L2VpnBdPbbCorePort) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2VpnBdPbbCorePort.Merge(m, src)
}
func (m *L2VpnBdPbbCorePort) XXX_Size() int {
	return xxx_messageInfo_L2VpnBdPbbCorePort.Size(m)
}
func (m *L2VpnBdPbbCorePort) XXX_DiscardUnknown() {
	xxx_messageInfo_L2VpnBdPbbCorePort.DiscardUnknown(m)
}

var xxx_messageInfo_L2VpnBdPbbCorePort proto.InternalMessageInfo

func (m *L2VpnBdPbbCorePort) GetXconnectId() uint32 {
	if m != nil {
		return m.XconnectId
	}
	return 0
}

func (m *L2VpnBdPbbCorePort) GetVlanId() uint32 {
	if m != nil {
		return m.VlanId
	}
	return 0
}

func (m *L2VpnBdPbbCorePort) GetSecurityParameters() *L2VpnBridgePortSecParam {
	if m != nil {
		return m.SecurityParameters
	}
	return nil
}

func (m *L2VpnBdPbbCorePort) GetCorePortState() string {
	if m != nil {
		return m.CorePortState
	}
	return ""
}

type L2VpnBridgePbbCore struct {
	NumAssEdge           uint32              `protobuf:"varint,1,opt,name=num_ass_edge,json=numAssEdge,proto3" json:"num_ass_edge,omitempty"`
	CorePort             *L2VpnBdPbbCorePort `protobuf:"bytes,2,opt,name=core_port,json=corePort,proto3" json:"core_port,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *L2VpnBridgePbbCore) Reset()         { *m = L2VpnBridgePbbCore{} }
func (m *L2VpnBridgePbbCore) String() string { return proto.CompactTextString(m) }
func (*L2VpnBridgePbbCore) ProtoMessage()    {}
func (*L2VpnBridgePbbCore) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fc31a5586bf6c0e, []int{30}
}

func (m *L2VpnBridgePbbCore) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2VpnBridgePbbCore.Unmarshal(m, b)
}
func (m *L2VpnBridgePbbCore) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2VpnBridgePbbCore.Marshal(b, m, deterministic)
}
func (m *L2VpnBridgePbbCore) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2VpnBridgePbbCore.Merge(m, src)
}
func (m *L2VpnBridgePbbCore) XXX_Size() int {
	return xxx_messageInfo_L2VpnBridgePbbCore.Size(m)
}
func (m *L2VpnBridgePbbCore) XXX_DiscardUnknown() {
	xxx_messageInfo_L2VpnBridgePbbCore.DiscardUnknown(m)
}

var xxx_messageInfo_L2VpnBridgePbbCore proto.InternalMessageInfo

func (m *L2VpnBridgePbbCore) GetNumAssEdge() uint32 {
	if m != nil {
		return m.NumAssEdge
	}
	return 0
}

func (m *L2VpnBridgePbbCore) GetCorePort() *L2VpnBdPbbCorePort {
	if m != nil {
		return m.CorePort
	}
	return nil
}

type L2VpnBridgePbbParams struct {
	Type                 string              `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	PbbEdge              *L2VpnBridgePbbEdge `protobuf:"bytes,2,opt,name=pbb_edge,json=pbbEdge,proto3" json:"pbb_edge,omitempty"`
	PbbCore              *L2VpnBridgePbbCore `protobuf:"bytes,3,opt,name=pbb_core,json=pbbCore,proto3" json:"pbb_core,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *L2VpnBridgePbbParams) Reset()         { *m = L2VpnBridgePbbParams{} }
func (m *L2VpnBridgePbbParams) String() string { return proto.CompactTextString(m) }
func (*L2VpnBridgePbbParams) ProtoMessage()    {}
func (*L2VpnBridgePbbParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fc31a5586bf6c0e, []int{31}
}

func (m *L2VpnBridgePbbParams) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2VpnBridgePbbParams.Unmarshal(m, b)
}
func (m *L2VpnBridgePbbParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2VpnBridgePbbParams.Marshal(b, m, deterministic)
}
func (m *L2VpnBridgePbbParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2VpnBridgePbbParams.Merge(m, src)
}
func (m *L2VpnBridgePbbParams) XXX_Size() int {
	return xxx_messageInfo_L2VpnBridgePbbParams.Size(m)
}
func (m *L2VpnBridgePbbParams) XXX_DiscardUnknown() {
	xxx_messageInfo_L2VpnBridgePbbParams.DiscardUnknown(m)
}

var xxx_messageInfo_L2VpnBridgePbbParams proto.InternalMessageInfo

func (m *L2VpnBridgePbbParams) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *L2VpnBridgePbbParams) GetPbbEdge() *L2VpnBridgePbbEdge {
	if m != nil {
		return m.PbbEdge
	}
	return nil
}

func (m *L2VpnBridgePbbParams) GetPbbCore() *L2VpnBridgePbbCore {
	if m != nil {
		return m.PbbCore
	}
	return nil
}

type L2VpnBdEvpnPort struct {
	XconnectId           uint32                   `protobuf:"varint,1,opt,name=xconnect_id,json=xconnectId,proto3" json:"xconnect_id,omitempty"`
	SecurityParameters   *L2VpnBridgePortSecParam `protobuf:"bytes,2,opt,name=security_parameters,json=securityParameters,proto3" json:"security_parameters,omitempty"`
	EvpnPortState        string                   `protobuf:"bytes,3,opt,name=evpn_port_state,json=evpnPortState,proto3" json:"evpn_port_state,omitempty"`
	Statistics           *L2FibStatsBagForwarding `protobuf:"bytes,4,opt,name=statistics,proto3" json:"statistics,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *L2VpnBdEvpnPort) Reset()         { *m = L2VpnBdEvpnPort{} }
func (m *L2VpnBdEvpnPort) String() string { return proto.CompactTextString(m) }
func (*L2VpnBdEvpnPort) ProtoMessage()    {}
func (*L2VpnBdEvpnPort) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fc31a5586bf6c0e, []int{32}
}

func (m *L2VpnBdEvpnPort) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2VpnBdEvpnPort.Unmarshal(m, b)
}
func (m *L2VpnBdEvpnPort) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2VpnBdEvpnPort.Marshal(b, m, deterministic)
}
func (m *L2VpnBdEvpnPort) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2VpnBdEvpnPort.Merge(m, src)
}
func (m *L2VpnBdEvpnPort) XXX_Size() int {
	return xxx_messageInfo_L2VpnBdEvpnPort.Size(m)
}
func (m *L2VpnBdEvpnPort) XXX_DiscardUnknown() {
	xxx_messageInfo_L2VpnBdEvpnPort.DiscardUnknown(m)
}

var xxx_messageInfo_L2VpnBdEvpnPort proto.InternalMessageInfo

func (m *L2VpnBdEvpnPort) GetXconnectId() uint32 {
	if m != nil {
		return m.XconnectId
	}
	return 0
}

func (m *L2VpnBdEvpnPort) GetSecurityParameters() *L2VpnBridgePortSecParam {
	if m != nil {
		return m.SecurityParameters
	}
	return nil
}

func (m *L2VpnBdEvpnPort) GetEvpnPortState() string {
	if m != nil {
		return m.EvpnPortState
	}
	return ""
}

func (m *L2VpnBdEvpnPort) GetStatistics() *L2FibStatsBagForwarding {
	if m != nil {
		return m.Statistics
	}
	return nil
}

type L2VpnBridgeEvpnParams struct {
	Evi                  uint32           `protobuf:"varint,1,opt,name=evi,proto3" json:"evi,omitempty"`
	EvpnPort             *L2VpnBdEvpnPort `protobuf:"bytes,2,opt,name=evpn_port,json=evpnPort,proto3" json:"evpn_port,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *L2VpnBridgeEvpnParams) Reset()         { *m = L2VpnBridgeEvpnParams{} }
func (m *L2VpnBridgeEvpnParams) String() string { return proto.CompactTextString(m) }
func (*L2VpnBridgeEvpnParams) ProtoMessage()    {}
func (*L2VpnBridgeEvpnParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fc31a5586bf6c0e, []int{33}
}

func (m *L2VpnBridgeEvpnParams) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2VpnBridgeEvpnParams.Unmarshal(m, b)
}
func (m *L2VpnBridgeEvpnParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2VpnBridgeEvpnParams.Marshal(b, m, deterministic)
}
func (m *L2VpnBridgeEvpnParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2VpnBridgeEvpnParams.Merge(m, src)
}
func (m *L2VpnBridgeEvpnParams) XXX_Size() int {
	return xxx_messageInfo_L2VpnBridgeEvpnParams.Size(m)
}
func (m *L2VpnBridgeEvpnParams) XXX_DiscardUnknown() {
	xxx_messageInfo_L2VpnBridgeEvpnParams.DiscardUnknown(m)
}

var xxx_messageInfo_L2VpnBridgeEvpnParams proto.InternalMessageInfo

func (m *L2VpnBridgeEvpnParams) GetEvi() uint32 {
	if m != nil {
		return m.Evi
	}
	return 0
}

func (m *L2VpnBridgeEvpnParams) GetEvpnPort() *L2VpnBdEvpnPort {
	if m != nil {
		return m.EvpnPort
	}
	return nil
}

type L2VpnBridgeVni struct {
	Vni                   uint32                   `protobuf:"varint,1,opt,name=vni,proto3" json:"vni,omitempty"`
	Overlay               string                   `protobuf:"bytes,2,opt,name=overlay,proto3" json:"overlay,omitempty"`
	StaticMac             []*L2VpnBdMac            `protobuf:"bytes,3,rep,name=static_mac,json=staticMac,proto3" json:"static_mac,omitempty"`
	SourceIpAddr          string                   `protobuf:"bytes,4,opt,name=source_ip_addr,json=sourceIpAddr,proto3" json:"source_ip_addr,omitempty"`
	MulticastGroupAddr    string                   `protobuf:"bytes,5,opt,name=multicast_group_addr,json=multicastGroupAddr,proto3" json:"multicast_group_addr,omitempty"`
	AnycastVtepIpAddr     string                   `protobuf:"bytes,6,opt,name=anycast_vtep_ip_addr,json=anycastVtepIpAddr,proto3" json:"anycast_vtep_ip_addr,omitempty"`
	AnycastMcastGroupAddr string                   `protobuf:"bytes,7,opt,name=anycast_mcast_group_addr,json=anycastMcastGroupAddr,proto3" json:"anycast_mcast_group_addr,omitempty"`
	UdpPort               uint32                   `protobuf:"varint,8,opt,name=udp_port,json=udpPort,proto3" json:"udp_port,omitempty"`
	VniEncapType          string                   `protobuf:"bytes,9,opt,name=vni_encap_type,json=vniEncapType,proto3" json:"vni_encap_type,omitempty"`
	VniPortState          string                   `protobuf:"bytes,10,opt,name=vni_port_state,json=vniPortState,proto3" json:"vni_port_state,omitempty"`
	VniMode               string                   `protobuf:"bytes,11,opt,name=vni_mode,json=vniMode,proto3" json:"vni_mode,omitempty"`
	IngressReplication    bool                     `protobuf:"varint,12,opt,name=ingress_replication,json=ingressReplication,proto3" json:"ingress_replication,omitempty"`
	SecurityParameters    *L2VpnBridgePortSecParam `protobuf:"bytes,13,opt,name=security_parameters,json=securityParameters,proto3" json:"security_parameters,omitempty"`
	XconnectId            uint32                   `protobuf:"varint,14,opt,name=xconnect_id,json=xconnectId,proto3" json:"xconnect_id,omitempty"`
	Statistics            *L2FibStatsBagForwarding `protobuf:"bytes,15,opt,name=statistics,proto3" json:"statistics,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}                 `json:"-"`
	XXX_unrecognized      []byte                   `json:"-"`
	XXX_sizecache         int32                    `json:"-"`
}

func (m *L2VpnBridgeVni) Reset()         { *m = L2VpnBridgeVni{} }
func (m *L2VpnBridgeVni) String() string { return proto.CompactTextString(m) }
func (*L2VpnBridgeVni) ProtoMessage()    {}
func (*L2VpnBridgeVni) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fc31a5586bf6c0e, []int{34}
}

func (m *L2VpnBridgeVni) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2VpnBridgeVni.Unmarshal(m, b)
}
func (m *L2VpnBridgeVni) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2VpnBridgeVni.Marshal(b, m, deterministic)
}
func (m *L2VpnBridgeVni) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2VpnBridgeVni.Merge(m, src)
}
func (m *L2VpnBridgeVni) XXX_Size() int {
	return xxx_messageInfo_L2VpnBridgeVni.Size(m)
}
func (m *L2VpnBridgeVni) XXX_DiscardUnknown() {
	xxx_messageInfo_L2VpnBridgeVni.DiscardUnknown(m)
}

var xxx_messageInfo_L2VpnBridgeVni proto.InternalMessageInfo

func (m *L2VpnBridgeVni) GetVni() uint32 {
	if m != nil {
		return m.Vni
	}
	return 0
}

func (m *L2VpnBridgeVni) GetOverlay() string {
	if m != nil {
		return m.Overlay
	}
	return ""
}

func (m *L2VpnBridgeVni) GetStaticMac() []*L2VpnBdMac {
	if m != nil {
		return m.StaticMac
	}
	return nil
}

func (m *L2VpnBridgeVni) GetSourceIpAddr() string {
	if m != nil {
		return m.SourceIpAddr
	}
	return ""
}

func (m *L2VpnBridgeVni) GetMulticastGroupAddr() string {
	if m != nil {
		return m.MulticastGroupAddr
	}
	return ""
}

func (m *L2VpnBridgeVni) GetAnycastVtepIpAddr() string {
	if m != nil {
		return m.AnycastVtepIpAddr
	}
	return ""
}

func (m *L2VpnBridgeVni) GetAnycastMcastGroupAddr() string {
	if m != nil {
		return m.AnycastMcastGroupAddr
	}
	return ""
}

func (m *L2VpnBridgeVni) GetUdpPort() uint32 {
	if m != nil {
		return m.UdpPort
	}
	return 0
}

func (m *L2VpnBridgeVni) GetVniEncapType() string {
	if m != nil {
		return m.VniEncapType
	}
	return ""
}

func (m *L2VpnBridgeVni) GetVniPortState() string {
	if m != nil {
		return m.VniPortState
	}
	return ""
}

func (m *L2VpnBridgeVni) GetVniMode() string {
	if m != nil {
		return m.VniMode
	}
	return ""
}

func (m *L2VpnBridgeVni) GetIngressReplication() bool {
	if m != nil {
		return m.IngressReplication
	}
	return false
}

func (m *L2VpnBridgeVni) GetSecurityParameters() *L2VpnBridgePortSecParam {
	if m != nil {
		return m.SecurityParameters
	}
	return nil
}

func (m *L2VpnBridgeVni) GetXconnectId() uint32 {
	if m != nil {
		return m.XconnectId
	}
	return 0
}

func (m *L2VpnBridgeVni) GetStatistics() *L2FibStatsBagForwarding {
	if m != nil {
		return m.Statistics
	}
	return nil
}

type L2VpnBridge struct {
	GroupName                               string                 `protobuf:"bytes,50,opt,name=group_name,json=groupName,proto3" json:"group_name,omitempty"`
	BridgeName                              string                 `protobuf:"bytes,51,opt,name=bridge_name,json=bridgeName,proto3" json:"bridge_name,omitempty"`
	BridgeDomainId                          uint32                 `protobuf:"varint,52,opt,name=bridge_domain_id,json=bridgeDomainId,proto3" json:"bridge_domain_id,omitempty"`
	BridgeDescription                       string                 `protobuf:"bytes,53,opt,name=bridge_description,json=bridgeDescription,proto3" json:"bridge_description,omitempty"`
	BridgeState                             string                 `protobuf:"bytes,54,opt,name=bridge_state,json=bridgeState,proto3" json:"bridge_state,omitempty"`
	BridgeCoupledState                      string                 `protobuf:"bytes,55,opt,name=bridge_coupled_state,json=bridgeCoupledState,proto3" json:"bridge_coupled_state,omitempty"`
	BridgeShgId                             uint32                 `protobuf:"varint,56,opt,name=bridge_shg_id,json=bridgeShgId,proto3" json:"bridge_shg_id,omitempty"`
	BridgeMsti                              uint32                 `protobuf:"varint,57,opt,name=bridge_msti,json=bridgeMsti,proto3" json:"bridge_msti,omitempty"`
	Acpwup                                  uint32                 `protobuf:"varint,58,opt,name=acpwup,proto3" json:"acpwup,omitempty"`
	BridgeInternalMsti                      uint32                 `protobuf:"varint,59,opt,name=bridge_internal_msti,json=bridgeInternalMsti,proto3" json:"bridge_internal_msti,omitempty"`
	Configured                              bool                   `protobuf:"varint,60,opt,name=configured,proto3" json:"configured,omitempty"`
	NumberVfIs                              uint32                 `protobuf:"varint,61,opt,name=number_vf_is,json=numberVfIs,proto3" json:"number_vf_is,omitempty"`
	NumberAccessVfIs                        uint32                 `protobuf:"varint,62,opt,name=number_access_vf_is,json=numberAccessVfIs,proto3" json:"number_access_vf_is,omitempty"`
	NumberACs                               uint32                 `protobuf:"varint,63,opt,name=number_a_cs,json=numberACs,proto3" json:"number_a_cs,omitempty"`
	NumberACsUp                             uint32                 `protobuf:"varint,64,opt,name=number_a_cs_up,json=numberACsUp,proto3" json:"number_a_cs_up,omitempty"`
	NumberPseudowires                       uint32                 `protobuf:"varint,65,opt,name=number_pseudowires,json=numberPseudowires,proto3" json:"number_pseudowires,omitempty"`
	NumberPWsUp                             uint32                 `protobuf:"varint,66,opt,name=number_p_ws_up,json=numberPWsUp,proto3" json:"number_p_ws_up,omitempty"`
	StandbyPseudowires                      uint32                 `protobuf:"varint,67,opt,name=standby_pseudowires,json=standbyPseudowires,proto3" json:"standby_pseudowires,omitempty"`
	NumberPbBs                              uint32                 `protobuf:"varint,68,opt,name=number_pb_bs,json=numberPbBs,proto3" json:"number_pb_bs,omitempty"`
	NumberPbBsUp                            uint32                 `protobuf:"varint,69,opt,name=number_pb_bs_up,json=numberPbBsUp,proto3" json:"number_pb_bs_up,omitempty"`
	NumVnIs                                 uint32                 `protobuf:"varint,70,opt,name=num_vn_is,json=numVnIs,proto3" json:"num_vn_is,omitempty"`
	NumVnIsUp                               uint32                 `protobuf:"varint,71,opt,name=num_vn_is_up,json=numVnIsUp,proto3" json:"num_vn_is_up,omitempty"`
	PartiallyProgrammedPseudowires          uint32                 `protobuf:"varint,72,opt,name=partially_programmed_pseudowires,json=partiallyProgrammedPseudowires,proto3" json:"partially_programmed_pseudowires,omitempty"`
	PartiallyProgrammedACs                  uint32                 `protobuf:"varint,73,opt,name=partially_programmed_a_cs,json=partiallyProgrammedACs,proto3" json:"partially_programmed_a_cs,omitempty"`
	BridgeMtu                               uint32                 `protobuf:"varint,74,opt,name=bridge_mtu,json=bridgeMtu,proto3" json:"bridge_mtu,omitempty"`
	Shutdown                                bool                   `protobuf:"varint,75,opt,name=shutdown,proto3" json:"shutdown,omitempty"`
	MacLimitDown                            bool                   `protobuf:"varint,76,opt,name=mac_limit_down,json=macLimitDown,proto3" json:"mac_limit_down,omitempty"`
	FloddGroupIdDown                        bool                   `protobuf:"varint,77,opt,name=flodd_group_id_down,json=floddGroupIdDown,proto3" json:"flodd_group_id_down,omitempty"`
	SecurityParameters                      *L2VpnBridgeSecParam   `protobuf:"bytes,78,opt,name=security_parameters,json=securityParameters,proto3" json:"security_parameters,omitempty"`
	MacWithdraw                             bool                   `protobuf:"varint,79,opt,name=mac_withdraw,json=macWithdraw,proto3" json:"mac_withdraw,omitempty"`
	MacWithdrawAccess                       bool                   `protobuf:"varint,80,opt,name=mac_withdraw_access,json=macWithdrawAccess,proto3" json:"mac_withdraw_access,omitempty"`
	MacWithdrawRelay                        bool                   `protobuf:"varint,81,opt,name=mac_withdraw_relay,json=macWithdrawRelay,proto3" json:"mac_withdraw_relay,omitempty"`
	MacWithdrawOption                       string                 `protobuf:"bytes,82,opt,name=mac_withdraw_option,json=macWithdrawOption,proto3" json:"mac_withdraw_option,omitempty"`
	MacFilter                               []*L2VpnBdMac          `protobuf:"bytes,83,rep,name=mac_filter,json=macFilter,proto3" json:"mac_filter,omitempty"`
	P2MpEnabled                             bool                   `protobuf:"varint,84,opt,name=p2mp_enabled,json=p2mpEnabled,proto3" json:"p2mp_enabled,omitempty"`
	BridgeVfi                               []*L2VpnVfi            `protobuf:"bytes,85,rep,name=bridge_vfi,json=bridgeVfi,proto3" json:"bridge_vfi,omitempty"`
	BridgeAccessVfi                         []*L2VpnVfi            `protobuf:"bytes,86,rep,name=bridge_access_vfi,json=bridgeAccessVfi,proto3" json:"bridge_access_vfi,omitempty"`
	BridgeType                              string                 `protobuf:"bytes,87,opt,name=bridge_type,json=bridgeType,proto3" json:"bridge_type,omitempty"`
	PbbParameters                           *L2VpnBridgePbbParams  `protobuf:"bytes,88,opt,name=pbb_parameters,json=pbbParameters,proto3" json:"pbb_parameters,omitempty"`
	EvpnParameters                          *L2VpnBridgeEvpnParams `protobuf:"bytes,89,opt,name=evpn_parameters,json=evpnParameters,proto3" json:"evpn_parameters,omitempty"`
	VniParameters                           *L2VpnBridgeVni        `protobuf:"bytes,90,opt,name=vni_parameters,json=vniParameters,proto3" json:"vni_parameters,omitempty"`
	VineFsmState                            string                 `protobuf:"bytes,91,opt,name=vine_fsm_state,json=vineFsmState,proto3" json:"vine_fsm_state,omitempty"`
	TimeCreated                             string                 `protobuf:"bytes,92,opt,name=time_created,json=timeCreated,proto3" json:"time_created,omitempty"`
	TimeElapsedCreation                     string                 `protobuf:"bytes,93,opt,name=time_elapsed_creation,json=timeElapsedCreation,proto3" json:"time_elapsed_creation,omitempty"`
	LastTimeStatusChanged                   string                 `protobuf:"bytes,94,opt,name=last_time_status_changed,json=lastTimeStatusChanged,proto3" json:"last_time_status_changed,omitempty"`
	TimeElapsedStatusChanged                string                 `protobuf:"bytes,95,opt,name=time_elapsed_status_changed,json=timeElapsedStatusChanged,proto3" json:"time_elapsed_status_changed,omitempty"`
	LoadBalance                             string                 `protobuf:"bytes,96,opt,name=load_balance,json=loadBalance,proto3" json:"load_balance,omitempty"`
	IsBridgePartiallyProgrammed             bool                   `protobuf:"varint,97,opt,name=is_bridge_partially_programmed,json=isBridgePartiallyProgrammed,proto3" json:"is_bridge_partially_programmed,omitempty"`
	Evi                                     uint32                 `protobuf:"varint,98,opt,name=evi,proto3" json:"evi,omitempty"`
	IsRdConfigured                          bool                   `protobuf:"varint,99,opt,name=is_rd_configured,json=isRdConfigured,proto3" json:"is_rd_configured,omitempty"`
	Rd                                      *L2VpnRd               `protobuf:"bytes,100,opt,name=rd,proto3" json:"rd,omitempty"`
	ImpositionPktCount                      uint64                 `protobuf:"varint,101,opt,name=imposition_pkt_count,json=impositionPktCount,proto3" json:"imposition_pkt_count,omitempty"`
	ImpositionByteCount                     uint64                 `protobuf:"varint,102,opt,name=imposition_byte_count,json=impositionByteCount,proto3" json:"imposition_byte_count,omitempty"`
	DispositionPktCount                     uint64                 `protobuf:"varint,103,opt,name=disposition_pkt_count,json=dispositionPktCount,proto3" json:"disposition_pkt_count,omitempty"`
	DispositionBytecount                    uint64                 `protobuf:"varint,104,opt,name=disposition_bytecount,json=dispositionBytecount,proto3" json:"disposition_bytecount,omitempty"`
	As                                      uint32                 `protobuf:"varint,105,opt,name=as,proto3" json:"as,omitempty"`
	NvSatelliteOffloadIpv4MulticastDisabled bool                   `protobuf:"varint,106,opt,name=nv_satellite_offload_ipv4_multicast_disabled,json=nvSatelliteOffloadIpv4MulticastDisabled,proto3" json:"nv_satellite_offload_ipv4_multicast_disabled,omitempty"`
	XXX_NoUnkeyedLiteral                    struct{}               `json:"-"`
	XXX_unrecognized                        []byte                 `json:"-"`
	XXX_sizecache                           int32                  `json:"-"`
}

func (m *L2VpnBridge) Reset()         { *m = L2VpnBridge{} }
func (m *L2VpnBridge) String() string { return proto.CompactTextString(m) }
func (*L2VpnBridge) ProtoMessage()    {}
func (*L2VpnBridge) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fc31a5586bf6c0e, []int{35}
}

func (m *L2VpnBridge) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2VpnBridge.Unmarshal(m, b)
}
func (m *L2VpnBridge) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2VpnBridge.Marshal(b, m, deterministic)
}
func (m *L2VpnBridge) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2VpnBridge.Merge(m, src)
}
func (m *L2VpnBridge) XXX_Size() int {
	return xxx_messageInfo_L2VpnBridge.Size(m)
}
func (m *L2VpnBridge) XXX_DiscardUnknown() {
	xxx_messageInfo_L2VpnBridge.DiscardUnknown(m)
}

var xxx_messageInfo_L2VpnBridge proto.InternalMessageInfo

func (m *L2VpnBridge) GetGroupName() string {
	if m != nil {
		return m.GroupName
	}
	return ""
}

func (m *L2VpnBridge) GetBridgeName() string {
	if m != nil {
		return m.BridgeName
	}
	return ""
}

func (m *L2VpnBridge) GetBridgeDomainId() uint32 {
	if m != nil {
		return m.BridgeDomainId
	}
	return 0
}

func (m *L2VpnBridge) GetBridgeDescription() string {
	if m != nil {
		return m.BridgeDescription
	}
	return ""
}

func (m *L2VpnBridge) GetBridgeState() string {
	if m != nil {
		return m.BridgeState
	}
	return ""
}

func (m *L2VpnBridge) GetBridgeCoupledState() string {
	if m != nil {
		return m.BridgeCoupledState
	}
	return ""
}

func (m *L2VpnBridge) GetBridgeShgId() uint32 {
	if m != nil {
		return m.BridgeShgId
	}
	return 0
}

func (m *L2VpnBridge) GetBridgeMsti() uint32 {
	if m != nil {
		return m.BridgeMsti
	}
	return 0
}

func (m *L2VpnBridge) GetAcpwup() uint32 {
	if m != nil {
		return m.Acpwup
	}
	return 0
}

func (m *L2VpnBridge) GetBridgeInternalMsti() uint32 {
	if m != nil {
		return m.BridgeInternalMsti
	}
	return 0
}

func (m *L2VpnBridge) GetConfigured() bool {
	if m != nil {
		return m.Configured
	}
	return false
}

func (m *L2VpnBridge) GetNumberVfIs() uint32 {
	if m != nil {
		return m.NumberVfIs
	}
	return 0
}

func (m *L2VpnBridge) GetNumberAccessVfIs() uint32 {
	if m != nil {
		return m.NumberAccessVfIs
	}
	return 0
}

func (m *L2VpnBridge) GetNumberACs() uint32 {
	if m != nil {
		return m.NumberACs
	}
	return 0
}

func (m *L2VpnBridge) GetNumberACsUp() uint32 {
	if m != nil {
		return m.NumberACsUp
	}
	return 0
}

func (m *L2VpnBridge) GetNumberPseudowires() uint32 {
	if m != nil {
		return m.NumberPseudowires
	}
	return 0
}

func (m *L2VpnBridge) GetNumberPWsUp() uint32 {
	if m != nil {
		return m.NumberPWsUp
	}
	return 0
}

func (m *L2VpnBridge) GetStandbyPseudowires() uint32 {
	if m != nil {
		return m.StandbyPseudowires
	}
	return 0
}

func (m *L2VpnBridge) GetNumberPbBs() uint32 {
	if m != nil {
		return m.NumberPbBs
	}
	return 0
}

func (m *L2VpnBridge) GetNumberPbBsUp() uint32 {
	if m != nil {
		return m.NumberPbBsUp
	}
	return 0
}

func (m *L2VpnBridge) GetNumVnIs() uint32 {
	if m != nil {
		return m.NumVnIs
	}
	return 0
}

func (m *L2VpnBridge) GetNumVnIsUp() uint32 {
	if m != nil {
		return m.NumVnIsUp
	}
	return 0
}

func (m *L2VpnBridge) GetPartiallyProgrammedPseudowires() uint32 {
	if m != nil {
		return m.PartiallyProgrammedPseudowires
	}
	return 0
}

func (m *L2VpnBridge) GetPartiallyProgrammedACs() uint32 {
	if m != nil {
		return m.PartiallyProgrammedACs
	}
	return 0
}

func (m *L2VpnBridge) GetBridgeMtu() uint32 {
	if m != nil {
		return m.BridgeMtu
	}
	return 0
}

func (m *L2VpnBridge) GetShutdown() bool {
	if m != nil {
		return m.Shutdown
	}
	return false
}

func (m *L2VpnBridge) GetMacLimitDown() bool {
	if m != nil {
		return m.MacLimitDown
	}
	return false
}

func (m *L2VpnBridge) GetFloddGroupIdDown() bool {
	if m != nil {
		return m.FloddGroupIdDown
	}
	return false
}

func (m *L2VpnBridge) GetSecurityParameters() *L2VpnBridgeSecParam {
	if m != nil {
		return m.SecurityParameters
	}
	return nil
}

func (m *L2VpnBridge) GetMacWithdraw() bool {
	if m != nil {
		return m.MacWithdraw
	}
	return false
}

func (m *L2VpnBridge) GetMacWithdrawAccess() bool {
	if m != nil {
		return m.MacWithdrawAccess
	}
	return false
}

func (m *L2VpnBridge) GetMacWithdrawRelay() bool {
	if m != nil {
		return m.MacWithdrawRelay
	}
	return false
}

func (m *L2VpnBridge) GetMacWithdrawOption() string {
	if m != nil {
		return m.MacWithdrawOption
	}
	return ""
}

func (m *L2VpnBridge) GetMacFilter() []*L2VpnBdMac {
	if m != nil {
		return m.MacFilter
	}
	return nil
}

func (m *L2VpnBridge) GetP2MpEnabled() bool {
	if m != nil {
		return m.P2MpEnabled
	}
	return false
}

func (m *L2VpnBridge) GetBridgeVfi() []*L2VpnVfi {
	if m != nil {
		return m.BridgeVfi
	}
	return nil
}

func (m *L2VpnBridge) GetBridgeAccessVfi() []*L2VpnVfi {
	if m != nil {
		return m.BridgeAccessVfi
	}
	return nil
}

func (m *L2VpnBridge) GetBridgeType() string {
	if m != nil {
		return m.BridgeType
	}
	return ""
}

func (m *L2VpnBridge) GetPbbParameters() *L2VpnBridgePbbParams {
	if m != nil {
		return m.PbbParameters
	}
	return nil
}

func (m *L2VpnBridge) GetEvpnParameters() *L2VpnBridgeEvpnParams {
	if m != nil {
		return m.EvpnParameters
	}
	return nil
}

func (m *L2VpnBridge) GetVniParameters() *L2VpnBridgeVni {
	if m != nil {
		return m.VniParameters
	}
	return nil
}

func (m *L2VpnBridge) GetVineFsmState() string {
	if m != nil {
		return m.VineFsmState
	}
	return ""
}

func (m *L2VpnBridge) GetTimeCreated() string {
	if m != nil {
		return m.TimeCreated
	}
	return ""
}

func (m *L2VpnBridge) GetTimeElapsedCreation() string {
	if m != nil {
		return m.TimeElapsedCreation
	}
	return ""
}

func (m *L2VpnBridge) GetLastTimeStatusChanged() string {
	if m != nil {
		return m.LastTimeStatusChanged
	}
	return ""
}

func (m *L2VpnBridge) GetTimeElapsedStatusChanged() string {
	if m != nil {
		return m.TimeElapsedStatusChanged
	}
	return ""
}

func (m *L2VpnBridge) GetLoadBalance() string {
	if m != nil {
		return m.LoadBalance
	}
	return ""
}

func (m *L2VpnBridge) GetIsBridgePartiallyProgrammed() bool {
	if m != nil {
		return m.IsBridgePartiallyProgrammed
	}
	return false
}

func (m *L2VpnBridge) GetEvi() uint32 {
	if m != nil {
		return m.Evi
	}
	return 0
}

func (m *L2VpnBridge) GetIsRdConfigured() bool {
	if m != nil {
		return m.IsRdConfigured
	}
	return false
}

func (m *L2VpnBridge) GetRd() *L2VpnRd {
	if m != nil {
		return m.Rd
	}
	return nil
}

func (m *L2VpnBridge) GetImpositionPktCount() uint64 {
	if m != nil {
		return m.ImpositionPktCount
	}
	return 0
}

func (m *L2VpnBridge) GetImpositionByteCount() uint64 {
	if m != nil {
		return m.ImpositionByteCount
	}
	return 0
}

func (m *L2VpnBridge) GetDispositionPktCount() uint64 {
	if m != nil {
		return m.DispositionPktCount
	}
	return 0
}

func (m *L2VpnBridge) GetDispositionBytecount() uint64 {
	if m != nil {
		return m.DispositionBytecount
	}
	return 0
}

func (m *L2VpnBridge) GetAs() uint32 {
	if m != nil {
		return m.As
	}
	return 0
}

func (m *L2VpnBridge) GetNvSatelliteOffloadIpv4MulticastDisabled() bool {
	if m != nil {
		return m.NvSatelliteOffloadIpv4MulticastDisabled
	}
	return false
}

func init() {
	proto.RegisterType((*L2VpnBridge_KEYS)(nil), "cisco_ios_xr_l2vpn_oper.l2vpnv2.nodes.node.bridge_domains.bridge_domain.bridge_domain_info.l2vpn_bridge_KEYS")
	proto.RegisterType((*L2VpnBagStormControlType)(nil), "cisco_ios_xr_l2vpn_oper.l2vpnv2.nodes.node.bridge_domains.bridge_domain.bridge_domain_info.l2vpn_bag_storm_control_type")
	proto.RegisterType((*L2VpnBridgeSecParam)(nil), "cisco_ios_xr_l2vpn_oper.l2vpnv2.nodes.node.bridge_domains.bridge_domain.bridge_domain_info.l2vpn_bridge_sec_param")
	proto.RegisterType((*L2VpnBdMac)(nil), "cisco_ios_xr_l2vpn_oper.l2vpnv2.nodes.node.bridge_domains.bridge_domain.bridge_domain_info.l2vpn_bd_mac")
	proto.RegisterType((*L2VpnRdAuto)(nil), "cisco_ios_xr_l2vpn_oper.l2vpnv2.nodes.node.bridge_domains.bridge_domain.bridge_domain_info.l2vpn_rd_auto")
	proto.RegisterType((*L2VpnRd_2ByteAs)(nil), "cisco_ios_xr_l2vpn_oper.l2vpnv2.nodes.node.bridge_domains.bridge_domain.bridge_domain_info.l2vpn_rd_2byte_as")
	proto.RegisterType((*L2VpnRd_4ByteAs)(nil), "cisco_ios_xr_l2vpn_oper.l2vpnv2.nodes.node.bridge_domains.bridge_domain.bridge_domain_info.l2vpn_rd_4byte_as")
	proto.RegisterType((*L2VpnRdV4Addr)(nil), "cisco_ios_xr_l2vpn_oper.l2vpnv2.nodes.node.bridge_domains.bridge_domain.bridge_domain_info.l2vpn_rd_v4addr")
	proto.RegisterType((*L2VpnRd)(nil), "cisco_ios_xr_l2vpn_oper.l2vpnv2.nodes.node.bridge_domains.bridge_domain.bridge_domain_info.l2vpn_rd")
	proto.RegisterType((*L2VpnRt_2ByteAs)(nil), "cisco_ios_xr_l2vpn_oper.l2vpnv2.nodes.node.bridge_domains.bridge_domain.bridge_domain_info.l2vpn_rt_2byte_as")
	proto.RegisterType((*L2VpnRt_4ByteAs)(nil), "cisco_ios_xr_l2vpn_oper.l2vpnv2.nodes.node.bridge_domains.bridge_domain.bridge_domain_info.l2vpn_rt_4byte_as")
	proto.RegisterType((*L2VpnRtV4Addr)(nil), "cisco_ios_xr_l2vpn_oper.l2vpnv2.nodes.node.bridge_domains.bridge_domain.bridge_domain_info.l2vpn_rt_v4addr")
	proto.RegisterType((*L2VpnRtEsImport)(nil), "cisco_ios_xr_l2vpn_oper.l2vpnv2.nodes.node.bridge_domains.bridge_domain.bridge_domain_info.l2vpn_rt_es_import")
	proto.RegisterType((*L2VpnRt)(nil), "cisco_ios_xr_l2vpn_oper.l2vpnv2.nodes.node.bridge_domains.bridge_domain.bridge_domain_info.l2vpn_rt")
	proto.RegisterType((*L2VpnVplsIdAuto)(nil), "cisco_ios_xr_l2vpn_oper.l2vpnv2.nodes.node.bridge_domains.bridge_domain.bridge_domain_info.l2vpn_vpls_id_auto")
	proto.RegisterType((*L2VpnVplsId_2ByteAs)(nil), "cisco_ios_xr_l2vpn_oper.l2vpnv2.nodes.node.bridge_domains.bridge_domain.bridge_domain_info.l2vpn_vpls_id_2byte_as")
	proto.RegisterType((*L2VpnVplsIdV4Addr)(nil), "cisco_ios_xr_l2vpn_oper.l2vpnv2.nodes.node.bridge_domains.bridge_domain.bridge_domain_info.l2vpn_vpls_id_v4addr")
	proto.RegisterType((*L2VpnVplsId)(nil), "cisco_ios_xr_l2vpn_oper.l2vpnv2.nodes.node.bridge_domains.bridge_domain.bridge_domain_info.l2vpn_vpls_id")
	proto.RegisterType((*L2VpnBdDisco)(nil), "cisco_ios_xr_l2vpn_oper.l2vpnv2.nodes.node.bridge_domains.bridge_domain.bridge_domain_info.l2vpn_bd_disco")
	proto.RegisterType((*L2VpnVfiP2Mp)(nil), "cisco_ios_xr_l2vpn_oper.l2vpnv2.nodes.node.bridge_domains.bridge_domain.bridge_domain_info.l2vpn_vfi_p2mp")
	proto.RegisterType((*L2VpnVfi)(nil), "cisco_ios_xr_l2vpn_oper.l2vpnv2.nodes.node.bridge_domains.bridge_domain.bridge_domain_info.l2vpn_vfi")
	proto.RegisterType((*L2VpnBridgePortSecParam)(nil), "cisco_ios_xr_l2vpn_oper.l2vpnv2.nodes.node.bridge_domains.bridge_domain.bridge_domain_info.l2vpn_bridge_port_sec_param")
	proto.RegisterType((*L2FibStatsBagCounters)(nil), "cisco_ios_xr_l2vpn_oper.l2vpnv2.nodes.node.bridge_domains.bridge_domain.bridge_domain_info.l2fib_stats_bag_counters")
	proto.RegisterType((*L2FibStatsBagImp)(nil), "cisco_ios_xr_l2vpn_oper.l2vpnv2.nodes.node.bridge_domains.bridge_domain.bridge_domain_info.l2fib_stats_bag_imp")
	proto.RegisterType((*L2FibStatsBagDisp)(nil), "cisco_ios_xr_l2vpn_oper.l2vpnv2.nodes.node.bridge_domains.bridge_domain.bridge_domain_info.l2fib_stats_bag_disp")
	proto.RegisterType((*L2FibStatsBagSeqNum)(nil), "cisco_ios_xr_l2vpn_oper.l2vpnv2.nodes.node.bridge_domains.bridge_domain.bridge_domain_info.l2fib_stats_bag_seq_num")
	proto.RegisterType((*L2FibStatsBagForwarding)(nil), "cisco_ios_xr_l2vpn_oper.l2vpnv2.nodes.node.bridge_domains.bridge_domain.bridge_domain_info.l2fib_stats_bag_forwarding")
	proto.RegisterType((*L2VpnBdPbbEdgePort)(nil), "cisco_ios_xr_l2vpn_oper.l2vpnv2.nodes.node.bridge_domains.bridge_domain.bridge_domain_info.l2vpn_bd_pbb_edge_port")
	proto.RegisterType((*L2VpnBridgePbbEdge)(nil), "cisco_ios_xr_l2vpn_oper.l2vpnv2.nodes.node.bridge_domains.bridge_domain.bridge_domain_info.l2vpn_bridge_pbb_edge")
	proto.RegisterType((*L2VpnBdPbbCorePort)(nil), "cisco_ios_xr_l2vpn_oper.l2vpnv2.nodes.node.bridge_domains.bridge_domain.bridge_domain_info.l2vpn_bd_pbb_core_port")
	proto.RegisterType((*L2VpnBridgePbbCore)(nil), "cisco_ios_xr_l2vpn_oper.l2vpnv2.nodes.node.bridge_domains.bridge_domain.bridge_domain_info.l2vpn_bridge_pbb_core")
	proto.RegisterType((*L2VpnBridgePbbParams)(nil), "cisco_ios_xr_l2vpn_oper.l2vpnv2.nodes.node.bridge_domains.bridge_domain.bridge_domain_info.l2vpn_bridge_pbb_params")
	proto.RegisterType((*L2VpnBdEvpnPort)(nil), "cisco_ios_xr_l2vpn_oper.l2vpnv2.nodes.node.bridge_domains.bridge_domain.bridge_domain_info.l2vpn_bd_evpn_port")
	proto.RegisterType((*L2VpnBridgeEvpnParams)(nil), "cisco_ios_xr_l2vpn_oper.l2vpnv2.nodes.node.bridge_domains.bridge_domain.bridge_domain_info.l2vpn_bridge_evpn_params")
	proto.RegisterType((*L2VpnBridgeVni)(nil), "cisco_ios_xr_l2vpn_oper.l2vpnv2.nodes.node.bridge_domains.bridge_domain.bridge_domain_info.l2vpn_bridge_vni")
	proto.RegisterType((*L2VpnBridge)(nil), "cisco_ios_xr_l2vpn_oper.l2vpnv2.nodes.node.bridge_domains.bridge_domain.bridge_domain_info.l2vpn_bridge")
}

func init() { proto.RegisterFile("l2vpn_bridge.proto", fileDescriptor_2fc31a5586bf6c0e) }

var fileDescriptor_2fc31a5586bf6c0e = []byte{
	// 4718 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x3c, 0x6b, 0x6f, 0x5c, 0xc7,
	0x75, 0x58, 0x92, 0x22, 0x97, 0x87, 0xef, 0x21, 0x25, 0x5d, 0x3d, 0xa8, 0xc7, 0xfa, 0xa5, 0xd8,
	0xb2, 0xac, 0xd0, 0x4a, 0x1c, 0xa7, 0x71, 0x63, 0x8a, 0x92, 0xed, 0xad, 0x45, 0x8b, 0xbd, 0x94,
	0xe4, 0xc6, 0x4e, 0x3a, 0x9e, 0xbd, 0x77, 0x76, 0x39, 0xd1, 0x7d, 0xf9, 0xce, 0xec, 0x52, 0x0c,
	0x50, 0x14, 0x69, 0x83, 0x16, 0x45, 0x52, 0x18, 0x49, 0x90, 0x3e, 0xd2, 0x06, 0x45, 0x9f, 0x68,
	0x0b, 0xf4, 0x0f, 0xf4, 0x43, 0x81, 0xf6, 0x5b, 0x91, 0x4f, 0xfd, 0xd4, 0xaf, 0xfd, 0x01, 0xfd,
	0xd8, 0x1f, 0x50, 0xcc, 0x99, 0x99, 0xfb, 0x58, 0x2e, 0x6d, 0x03, 0x96, 0x96, 0xca, 0x17, 0x89,
	0xf7, 0xbc, 0xe6, 0xcc, 0xdc, 0x73, 0xce, 0x9c, 0x39, 0x73, 0xee, 0x02, 0x89, 0x36, 0x06, 0x59,
	0x42, 0x3b, 0xb9, 0x08, 0x7b, 0xfc, 0x5a, 0x96, 0xa7, 0x2a, 0x25, 0x1f, 0x04, 0x42, 0x06, 0x29,
	0x15, 0xa9, 0xa4, 0x8f, 0x72, 0x6a, 0x08, 0xd2, 0x8c, 0xe7, 0xd7, 0xf0, 0xcf, 0xc1, 0xc6, 0xb5,
	0x24, 0x0d, 0xb9, 0xc4, 0x7f, 0xaf, 0x19, 0x46, 0x1a, 0xa6, 0x31, 0x13, 0x89, 0xac, 0x3f, 0xd6,
	0x9f, 0xa8, 0x48, 0xba, 0x69, 0xeb, 0xa7, 0x0d, 0x58, 0xa9, 0x0e, 0x49, 0xdf, 0xbd, 0xfd, 0xad,
	0x5d, 0x72, 0x1a, 0x66, 0xb4, 0x34, 0x2a, 0x42, 0xaf, 0x71, 0xa9, 0x71, 0x65, 0xd6, 0x9f, 0xd6,
	0x8f, 0xed, 0x90, 0xbc, 0x06, 0x5e, 0x5d, 0x48, 0x2f, 0x4f, 0xfb, 0x19, 0x4d, 0x58, 0xcc, 0xbd,
	0x09, 0xa4, 0x3c, 0x69, 0xf0, 0xb7, 0x10, 0xfd, 0xb6, 0xc6, 0xbe, 0xc7, 0x62, 0x4e, 0xae, 0x02,
	0xa9, 0x33, 0x22, 0xcb, 0x24, 0xb2, 0x2c, 0x57, 0x59, 0x34, 0xb5, 0xd6, 0xea, 0xbc, 0xd5, 0x8a,
	0xf5, 0xa8, 0x54, 0x69, 0x1e, 0xd3, 0x20, 0x4d, 0x54, 0x9e, 0x46, 0x54, 0x1d, 0x64, 0x9c, 0xac,
	0x03, 0x74, 0x42, 0x9a, 0xa5, 0x91, 0x08, 0x78, 0x8e, 0x3a, 0x36, 0xfd, 0xd9, 0x4e, 0xb8, 0x63,
	0x00, 0xc4, 0x83, 0x99, 0x7e, 0x22, 0x02, 0x26, 0x15, 0x6a, 0xd5, 0xf4, 0xdd, 0x23, 0x39, 0x0f,
	0xb3, 0x71, 0x3f, 0x52, 0x06, 0x37, 0x69, 0xf8, 0x0a, 0x80, 0xc6, 0x76, 0xf2, 0x94, 0x85, 0x88,
	0x9d, 0xb2, 0x52, 0x1d, 0xa0, 0xf5, 0xfb, 0xa7, 0xe1, 0x54, 0x6d, 0xad, 0x24, 0x0f, 0x68, 0xc6,
	0x72, 0x16, 0x93, 0x73, 0x30, 0x1b, 0xb3, 0x80, 0x46, 0x22, 0x16, 0x0a, 0xd5, 0x59, 0xf0, 0x9b,
	0x31, 0x0b, 0xee, 0xe8, 0x67, 0x72, 0x05, 0x96, 0x0b, 0x24, 0x65, 0x81, 0x12, 0x69, 0x62, 0x17,
	0x6b, 0xd1, 0xd1, 0x6c, 0x22, 0x94, 0xdc, 0x80, 0x53, 0x25, 0x65, 0x92, 0x2a, 0xd1, 0x15, 0x01,
	0x43, 0x7a, 0xb3, 0x52, 0x6b, 0x8e, 0xfe, 0xbd, 0x0a, 0x8e, 0x3c, 0x0b, 0x5a, 0x0e, 0x65, 0x3d,
	0x91, 0xf4, 0xa8, 0x12, 0x31, 0x47, 0xd5, 0x17, 0xfc, 0xf9, 0x98, 0x05, 0x9b, 0x1a, 0x78, 0x4f,
	0xc4, 0xbc, 0x4e, 0x15, 0xa7, 0x21, 0xf7, 0x4e, 0xa0, 0xcc, 0x82, 0x6a, 0x3b, 0x0d, 0x39, 0xb9,
	0x0c, 0xfa, 0x99, 0x76, 0xa3, 0x34, 0x0d, 0x45, 0xd2, 0xf3, 0xa6, 0x71, 0x11, 0xe6, 0x62, 0x16,
	0xbc, 0x65, 0x41, 0x8e, 0x24, 0xe2, 0x2c, 0x4f, 0x34, 0xc9, 0x4c, 0x41, 0x72, 0xc7, 0x82, 0xc8,
	0x2d, 0xb8, 0x88, 0x68, 0x1a, 0x0a, 0xc9, 0x3a, 0x11, 0x0f, 0xe9, 0xa1, 0x05, 0x68, 0x22, 0xd7,
	0x39, 0x24, 0xbb, 0x65, 0xa9, 0xb6, 0xeb, 0xab, 0xd1, 0x86, 0x16, 0xea, 0x41, 0xfb, 0xfd, 0x4f,
	0x11, 0x34, 0x8b, 0x82, 0xd6, 0x91, 0xf2, 0x7e, 0xff, 0x08, 0x51, 0x2f, 0xc2, 0x4a, 0xc9, 0x98,
	0x73, 0x16, 0xec, 0xf1, 0xd0, 0x03, 0xe4, 0x5c, 0x72, 0x6b, 0xea, 0x1b, 0x30, 0xb9, 0x06, 0xab,
	0x25, 0xad, 0xda, 0xcb, 0xb9, 0xdc, 0x4b, 0xa3, 0xd0, 0x9b, 0xc3, 0x35, 0x5d, 0x71, 0xd4, 0xf7,
	0x1c, 0x82, 0x6c, 0xc2, 0xba, 0x55, 0x33, 0x79, 0x98, 0xa4, 0xfb, 0x09, 0xb5, 0xb6, 0x46, 0x79,
	0x82, 0xaa, 0x78, 0xf3, 0x38, 0xce, 0x59, 0xa3, 0xa1, 0xa1, 0xb9, 0x6f, 0x48, 0x6e, 0x1b, 0x0a,
	0xf2, 0x0d, 0x38, 0xa7, 0x87, 0xcc, 0xd2, 0x5c, 0xd1, 0x50, 0x8b, 0xe8, 0x46, 0x7d, 0xb9, 0x57,
	0x08, 0x58, 0x40, 0x01, 0xa7, 0x63, 0x16, 0xec, 0xa4, 0xb9, 0xba, 0x95, 0xee, 0x27, 0x6f, 0x69,
	0xbc, 0xe3, 0x7e, 0x15, 0x4e, 0xc9, 0x2c, 0x12, 0x8a, 0xee, 0xa5, 0xb9, 0xf8, 0x5e, 0xea, 0x9c,
	0x52, 0x84, 0xde, 0x22, 0xea, 0xbc, 0x8a, 0xd8, 0x77, 0x0c, 0x12, 0x5d, 0xb2, 0x8d, 0x5a, 0x8f,
	0x64, 0x4a, 0xf6, 0x78, 0x2e, 0x14, 0x0f, 0xbd, 0x25, 0xa3, 0xf5, 0x61, 0x5e, 0x47, 0xa1, 0x9d,
	0x90, 0xab, 0x9c, 0x73, 0x6d, 0x0a, 0x5d, 0x6f, 0xd9, 0xb8, 0x0b, 0x42, 0xee, 0x70, 0xd6, 0x25,
	0xd7, 0x61, 0xad, 0x44, 0x57, 0x04, 0xaf, 0x20, 0x21, 0x29, 0x08, 0x4b, 0x81, 0x5f, 0x87, 0xb3,
	0x42, 0x52, 0x91, 0x51, 0x99, 0xf6, 0xf3, 0x80, 0xd3, 0x5e, 0x9f, 0xe5, 0x61, 0xb1, 0x0a, 0x04,
	0xf9, 0x4e, 0x09, 0xd9, 0xce, 0x76, 0x11, 0xff, 0xb6, 0x46, 0xbb, 0x45, 0xf8, 0x0a, 0x9c, 0x46,
	0x5e, 0xd9, 0xa3, 0x51, 0xda, 0x43, 0x23, 0x77, 0x8c, 0xab, 0xc8, 0xb8, 0xa6, 0x19, 0x65, 0xef,
	0x8e, 0x41, 0x3a, 0xb6, 0x67, 0x61, 0x51, 0x48, 0x1a, 0x32, 0x51, 0x50, 0xaf, 0x21, 0xf5, 0xbc,
	0x90, 0xb7, 0x98, 0xa8, 0xac, 0xb0, 0xa5, 0x1a, 0x96, 0x7d, 0x12, 0xa9, 0x57, 0x91, 0x7a, 0x48,
	0xb4, 0x0f, 0x2f, 0x58, 0x26, 0x16, 0x86, 0x39, 0x1d, 0xb0, 0x48, 0x84, 0x4c, 0x71, 0x37, 0x39,
	0xfd, 0xc2, 0x9d, 0x94, 0x53, 0x28, 0xe5, 0x32, 0x4a, 0xd9, 0x0c, 0xc3, 0xfc, 0x81, 0xa5, 0x35,
	0xf3, 0xdc, 0x66, 0x81, 0x93, 0xf9, 0x6d, 0xb8, 0x3a, 0x52, 0x66, 0xc8, 0xa5, 0x12, 0x09, 0x86,
	0x83, 0x9a, 0xe0, 0xd3, 0x28, 0xf8, 0xf9, 0x43, 0x82, 0x6f, 0x95, 0xf4, 0x15, 0xe9, 0x6f, 0xc3,
	0xe5, 0x91, 0xd2, 0x45, 0x36, 0xb8, 0x51, 0x88, 0xf4, 0x50, 0xe4, 0xf9, 0x43, 0x22, 0xdb, 0xd9,
	0xe0, 0x86, 0x13, 0xf4, 0x65, 0x38, 0x29, 0x24, 0x2a, 0x22, 0x79, 0xd0, 0xcf, 0x79, 0xc1, 0x7c,
	0xc6, 0xbc, 0x7b, 0x21, 0xb7, 0x59, 0xb0, 0x8b, 0x28, 0xc7, 0x62, 0x3d, 0xd4, 0xd2, 0x5b, 0xdf,
	0x3e, 0x8b, 0x11, 0x4a, 0x7b, 0xa8, 0x21, 0xb6, 0xde, 0xfc, 0x26, 0xac, 0xd7, 0xc5, 0x0f, 0xbf,
	0x95, 0x73, 0x38, 0xcc, 0x99, 0xca, 0x30, 0x43, 0xef, 0xe6, 0x2e, 0x3c, 0x57, 0x97, 0xc0, 0x82,
	0x80, 0x67, 0x8a, 0xca, 0xbd, 0xbe, 0x42, 0x07, 0x74, 0x92, 0xce, 0xa3, 0xa4, 0x4b, 0x15, 0x49,
	0x9b, 0x48, 0xb9, 0x6b, 0x09, 0x9d, 0xc0, 0x5b, 0x70, 0xb1, 0x2e, 0xb0, 0x08, 0x1c, 0x85, 0xa8,
	0x75, 0x13, 0xf1, 0x2a, 0xa2, 0x8a, 0x18, 0xe2, 0xa4, 0xbc, 0x03, 0x97, 0x2b, 0x22, 0x0a, 0x65,
	0x72, 0x1e, 0xa4, 0x03, 0x9e, 0x1f, 0x98, 0xe0, 0x7e, 0x01, 0x9d, 0x7a, 0xbd, 0x58, 0x14, 0xa7,
	0x8a, 0x6f, 0xa9, 0x30, 0xda, 0x7f, 0x08, 0x2f, 0x7d, 0xa6, 0x24, 0x9a, 0x73, 0xbd, 0xe3, 0xea,
	0x18, 0x7e, 0x11, 0x65, 0x3e, 0xff, 0xa9, 0x32, 0x7d, 0x47, 0x4d, 0xde, 0x80, 0x73, 0xce, 0x48,
	0xb8, 0x94, 0xce, 0x4e, 0x8c, 0xed, 0xc9, 0x87, 0xde, 0x25, 0x14, 0xe6, 0x85, 0xc6, 0x3e, 0xb8,
	0x94, 0x0f, 0x0a, 0x82, 0x6d, 0x26, 0x1f, 0xea, 0x0d, 0x24, 0xdc, 0x0b, 0xb4, 0x4d, 0xc9, 0x24,
	0x4d, 0x33, 0xef, 0xb2, 0xd9, 0x40, 0x0c, 0x6c, 0x57, 0x83, 0x74, 0x0c, 0xb6, 0x24, 0x59, 0x9e,
	0x76, 0x45, 0xc4, 0x4d, 0xbe, 0xd0, 0x42, 0x7b, 0x58, 0x31, 0xa8, 0x1d, 0x83, 0xc1, 0xf4, 0xe2,
	0x0a, 0x2c, 0x8b, 0x5e, 0x4c, 0x35, 0x83, 0xdb, 0x29, 0xbc, 0x67, 0x50, 0xec, 0xa2, 0xe8, 0xc5,
	0x3b, 0x83, 0x1b, 0x6e, 0x5f, 0x20, 0xaf, 0xc0, 0x9a, 0xa3, 0xac, 0x89, 0x7e, 0xd6, 0x88, 0x36,
	0xd4, 0x43, 0xa2, 0xe3, 0x28, 0xac, 0x13, 0x3f, 0x67, 0x77, 0xef, 0x28, 0xac, 0x52, 0x7e, 0x15,
	0x4e, 0xc7, 0x71, 0x9e, 0x99, 0xcd, 0x93, 0xa6, 0x99, 0x12, 0xb1, 0xf8, 0x9e, 0xd9, 0xbe, 0x9f,
	0x47, 0x5d, 0x4e, 0x6a, 0x34, 0xee, 0xa3, 0x77, 0x2b, 0x48, 0xf2, 0x8b, 0x06, 0x2c, 0xd4, 0x72,
	0x1c, 0xef, 0x85, 0x4b, 0x8d, 0x2b, 0x73, 0x1b, 0x8f, 0xae, 0x3d, 0xb9, 0xc4, 0xef, 0xda, 0xa7,
	0xa5, 0x57, 0xfe, 0x3c, 0xc2, 0xb6, 0x0c, 0x48, 0xdb, 0xb6, 0xdb, 0xd2, 0xea, 0xb4, 0xb9, 0x0e,
	0x0e, 0xfd, 0x44, 0x28, 0xef, 0x0a, 0x2e, 0xc8, 0x39, 0x4b, 0xb6, 0x5b, 0xe1, 0xf6, 0x99, 0xe2,
	0xf7, 0x13, 0xa1, 0xc8, 0xeb, 0x70, 0x66, 0xb4, 0x94, 0x2c, 0x93, 0xde, 0x97, 0x2e, 0x35, 0xae,
	0x4c, 0xf9, 0xa7, 0x46, 0xf0, 0xef, 0x64, 0x52, 0x6f, 0x8f, 0xa3, 0x59, 0x1f, 0x76, 0x68, 0x26,
	0xbd, 0x17, 0x91, 0xf9, 0xf4, 0x08, 0xe6, 0x77, 0x3b, 0x3b, 0x12, 0x9d, 0xca, 0x65, 0x78, 0x47,
	0x4e, 0xe0, 0x25, 0x9c, 0xc0, 0x7a, 0x41, 0x38, 0x72, 0x0a, 0x6f, 0xc0, 0xb9, 0xa3, 0x24, 0xe9,
	0x49, 0x5c, 0x45, 0x3d, 0xbc, 0x91, 0x32, 0xf4, 0x34, 0xde, 0x84, 0xf5, 0xa3, 0xd8, 0xcd, 0x44,
	0x5e, 0x46, 0x01, 0x67, 0x46, 0x0a, 0x70, 0x53, 0x29, 0xd2, 0xd1, 0x23, 0xa7, 0x72, 0xcd, 0x4c,
	0xa5, 0x20, 0x3c, 0x6a, 0x2a, 0x47, 0x49, 0xd2, 0x53, 0x79, 0xc5, 0x4c, 0x65, 0xa4, 0x0c, 0x3b,
	0x95, 0xa3, 0xd8, 0xcd, 0x54, 0xae, 0x9b, 0xa9, 0x8c, 0x14, 0x80, 0x53, 0x79, 0x0d, 0xbc, 0x68,
	0x23, 0x0e, 0xa8, 0xcc, 0x03, 0xaa, 0x72, 0xd6, 0xed, 0x8a, 0x72, 0xd7, 0xfa, 0xb2, 0x39, 0x49,
	0x68, 0xfc, 0x6e, 0x1e, 0xdc, 0x33, 0x58, 0x1b, 0x23, 0x5b, 0xf7, 0x60, 0xde, 0xda, 0x2e, 0x26,
	0x83, 0x64, 0x19, 0x26, 0x63, 0x16, 0xd8, 0x73, 0x8a, 0xfe, 0x93, 0x9c, 0x81, 0x66, 0xd6, 0xe9,
	0xd0, 0x8e, 0x06, 0x9b, 0x3c, 0x7b, 0x26, 0xeb, 0x74, 0x6e, 0x6a, 0x94, 0x3e, 0xd8, 0xec, 0x61,
	0xe0, 0xb2, 0x19, 0xf5, 0x74, 0xb2, 0xa7, 0x83, 0x54, 0xeb, 0x5d, 0x58, 0x30, 0x52, 0xf3, 0x90,
	0xb2, 0xbe, 0x4a, 0x75, 0x46, 0x9f, 0xa7, 0x7d, 0xc5, 0xf3, 0xf2, 0x10, 0xd4, 0x34, 0x80, 0x36,
	0x66, 0x3e, 0x9a, 0x88, 0x8a, 0x24, 0xe4, 0x8f, 0x70, 0x8c, 0x05, 0x7f, 0x56, 0x43, 0xda, 0x1a,
	0xd0, 0xfa, 0xd0, 0x9d, 0xa9, 0xf2, 0x90, 0x6e, 0x74, 0x0e, 0x14, 0xa7, 0x4c, 0x92, 0x0b, 0x30,
	0xa7, 0xf6, 0x53, 0x6a, 0x1f, 0xed, 0x21, 0x61, 0x56, 0xed, 0xa7, 0x37, 0x0f, 0x14, 0xdf, 0x94,
	0xe4, 0x79, 0x58, 0xea, 0xa6, 0xfd, 0xdc, 0x10, 0x54, 0x05, 0x2f, 0x68, 0xb0, 0x26, 0x3a, 0x2c,
	0xfc, 0x86, 0x13, 0x7e, 0x09, 0xe6, 0x4b, 0xe6, 0x42, 0x3a, 0x38, 0xce, 0x4d, 0xa9, 0x13, 0x9d,
	0x62, 0xf8, 0xaa, 0xf4, 0x79, 0xab, 0x81, 0x11, 0xfe, 0x01, 0x2c, 0x15, 0xc2, 0x07, 0x37, 0xf4,
	0x3a, 0xe9, 0x68, 0x8d, 0xfb, 0xbf, 0x8d, 0xf6, 0x76, 0x2d, 0xe6, 0x34, 0xcc, 0x86, 0xf7, 0xcf,
	0x29, 0xfb, 0x3f, 0xa6, 0xa0, 0xe9, 0x84, 0x93, 0x45, 0x98, 0xc8, 0xdd, 0xba, 0x4e, 0xe4, 0x21,
	0xf9, 0x1d, 0x98, 0xd2, 0xeb, 0x87, 0x8c, 0x73, 0x1b, 0xe2, 0xc9, 0x47, 0x3e, 0xfb, 0x9e, 0x7d,
	0x1c, 0x96, 0xfc, 0x71, 0xa3, 0xfe, 0x76, 0x26, 0x51, 0x8d, 0x78, 0x2c, 0x6a, 0x38, 0x0b, 0xa9,
	0x1a, 0xc3, 0x27, 0x8d, 0xa1, 0x17, 0x3a, 0x35, 0x46, 0x85, 0x9c, 0x55, 0xd5, 0xec, 0xe7, 0x07,
	0x0d, 0x98, 0xb1, 0x56, 0x80, 0x07, 0xc7, 0xb9, 0x8d, 0x87, 0x63, 0x51, 0xc6, 0x58, 0xa1, 0x3f,
	0x6d, 0xac, 0xad, 0x62, 0xfd, 0xea, 0x49, 0xba, 0x96, 0x7a, 0x92, 0xae, 0xa5, 0x1e, 0xbb, 0x6b,
	0xed, 0xb8, 0xba, 0x51, 0xae, 0x28, 0x97, 0x54, 0xc4, 0xfa, 0x24, 0xa9, 0xa3, 0xd4, 0x9e, 0xe8,
	0xed, 0x21, 0x73, 0xb1, 0x2a, 0x1a, 0xa2, 0x19, 0xa5, 0x8e, 0x70, 0x51, 0xba, 0x6f, 0xb1, 0x46,
	0x6a, 0x33, 0x4a, 0xf7, 0x11, 0xd9, 0xfa, 0xaf, 0xd2, 0x59, 0x15, 0x3a, 0xab, 0x2a, 0x9c, 0x55,
	0x1d, 0xf2, 0x96, 0x89, 0xb1, 0x19, 0xa7, 0xfa, 0x7c, 0xde, 0x32, 0x39, 0x46, 0x85, 0x3e, 0xd3,
	0x5b, 0xa6, 0xc6, 0xe6, 0x2d, 0x6a, 0xc8, 0x5b, 0xc8, 0x0f, 0x1b, 0x30, 0x5b, 0xd8, 0x83, 0x75,
	0xdb, 0x64, 0x2c, 0x8a, 0x14, 0xa3, 0xfa, 0x4d, 0x2e, 0xdb, 0xf8, 0x57, 0xeb, 0x0d, 0x67, 0xa5,
	0x83, 0x2c, 0x92, 0x54, 0xd8, 0x8d, 0x76, 0x19, 0x26, 0x99, 0x4c, 0xac, 0x79, 0xea, 0x3f, 0xc9,
	0x49, 0x98, 0xd6, 0x54, 0x22, 0xb4, 0x56, 0x79, 0x62, 0x90, 0x25, 0xed, 0xb0, 0xf5, 0x91, 0xab,
	0xbe, 0x39, 0xf6, 0xc7, 0xee, 0xff, 0x14, 0xd6, 0xea, 0x23, 0x3c, 0x6e, 0x3f, 0xfd, 0xef, 0x49,
	0x97, 0x66, 0xd8, 0x11, 0x74, 0x74, 0x71, 0x83, 0xe9, 0xcc, 0xdb, 0x8a, 0x06, 0x0d, 0x6b, 0x87,
	0xf7, 0x0e, 0x32, 0x4e, 0x7e, 0xaf, 0x51, 0xdb, 0x1a, 0xc7, 0xf0, 0xfa, 0xaa, 0xaf, 0xc7, 0xee,
	0x8f, 0x3f, 0x19, 0xb9, 0x3f, 0xe6, 0xe3, 0xd3, 0x65, 0x94, 0xdb, 0xff, 0xd1, 0x21, 0x27, 0xcb,
	0xc6, 0xa7, 0xd0, 0xd0, 0xbe, 0xf4, 0x9f, 0x33, 0xb0, 0x58, 0xa4, 0xa5, 0xa1, 0x56, 0xa2, 0x62,
	0xc6, 0x8d, 0x8a, 0x19, 0x93, 0xdf, 0x85, 0xa6, 0xde, 0xd6, 0x58, 0xd4, 0xe7, 0xf6, 0x95, 0x86,
	0xe3, 0xd8, 0x48, 0xfd, 0x99, 0x3c, 0x7c, 0xa0, 0x07, 0x25, 0xd7, 0x61, 0x8d, 0x85, 0x54, 0x8a,
	0x5e, 0xc2, 0xa2, 0x08, 0x8b, 0xc1, 0x5c, 0xed, 0xa5, 0x21, 0xbe, 0xd3, 0x05, 0x9f, 0xb0, 0x70,
	0xb7, 0x40, 0x6d, 0x23, 0x46, 0xef, 0x14, 0x2c, 0x74, 0x64, 0xa6, 0xb6, 0xdc, 0x64, 0xa1, 0x45,
	0xae, 0xc2, 0x89, 0x01, 0xde, 0x14, 0x9c, 0x40, 0xc4, 0xd4, 0x80, 0xb7, 0xb1, 0x9a, 0x93, 0xe5,
	0xe9, 0x40, 0x48, 0x91, 0x26, 0x3c, 0xa4, 0x86, 0x60, 0x1a, 0x09, 0x96, 0x2a, 0x88, 0x07, 0x9a,
	0xf6, 0x0c, 0x34, 0x07, 0x9c, 0xe6, 0x2c, 0xe9, 0x71, 0xac, 0x25, 0x2f, 0xf8, 0x33, 0x03, 0xee,
	0xeb, 0x47, 0xf2, 0xfd, 0x06, 0xcc, 0x9a, 0x30, 0x42, 0x73, 0xe5, 0x35, 0x2f, 0x4d, 0x8e, 0x69,
	0xb5, 0x94, 0xdf, 0xb4, 0xd1, 0x4b, 0xa1, 0x0e, 0xfc, 0x91, 0xd3, 0x61, 0x76, 0x9c, 0x3a, 0x98,
	0x61, 0x7d, 0x85, 0x2f, 0x40, 0xd2, 0xa4, 0x1f, 0x77, 0x78, 0x8e, 0x65, 0x6b, 0xfd, 0x02, 0xe4,
	0x7b, 0xf8, 0xac, 0x03, 0xc4, 0x8c, 0xb5, 0x4a, 0x2c, 0x52, 0x8f, 0x25, 0x7d, 0xb6, 0x03, 0xfa,
	0xd3, 0x26, 0x52, 0xe9, 0x10, 0x6b, 0xf5, 0x2e, 0x0e, 0x4d, 0xf3, 0x18, 0xca, 0x4c, 0xbc, 0xf3,
	0xdd, 0xc9, 0xe9, 0x1c, 0xcc, 0x6a, 0x2a, 0x16, 0x86, 0x45, 0x5d, 0xbb, 0x39, 0xc8, 0x92, 0x4d,
	0xfd, 0x4c, 0x5e, 0x82, 0x15, 0xc9, 0xf3, 0x81, 0x08, 0xb8, 0x3e, 0x4d, 0x26, 0x3c, 0x50, 0xdc,
	0xd4, 0xb0, 0x9b, 0xfe, 0xb2, 0x45, 0x6c, 0x39, 0x38, 0xb9, 0x02, 0xcb, 0xce, 0x17, 0x83, 0x34,
	0xe9, 0x46, 0x22, 0x50, 0xb6, 0x66, 0xbd, 0x68, 0x74, 0xda, 0xb2, 0x50, 0x72, 0x0d, 0x56, 0xdd,
	0x0b, 0xd4, 0x6a, 0x98, 0x6b, 0xa3, 0x03, 0x2c, 0x58, 0xcf, 0xfa, 0x2b, 0x76, 0x91, 0x35, 0x06,
	0xaf, 0x8f, 0x0e, 0x5a, 0x3f, 0x9a, 0x70, 0xbe, 0x3c, 0xe8, 0x0a, 0x9a, 0x6d, 0xc4, 0x19, 0x39,
	0x0f, 0xb3, 0x2a, 0x67, 0x89, 0xc4, 0x7d, 0xd4, 0xc4, 0xe8, 0x12, 0xa0, 0xb1, 0xc6, 0x9d, 0x44,
	0xd2, 0xb3, 0x27, 0xce, 0x12, 0x80, 0xc7, 0x51, 0xac, 0x83, 0x0b, 0xe7, 0x63, 0x33, 0xf8, 0xdc,
	0x0e, 0xc9, 0x55, 0x20, 0x4c, 0xa9, 0x5c, 0x74, 0xb4, 0x5a, 0x92, 0x2b, 0x53, 0x5d, 0x9a, 0x32,
	0xb7, 0x62, 0x05, 0x66, 0x97, 0x2b, 0xac, 0x2f, 0x7d, 0x09, 0x96, 0x8b, 0x31, 0xa9, 0x54, 0x4c,
	0xf5, 0xa5, 0xbd, 0xc3, 0x59, 0x2a, 0xe0, 0xbb, 0x08, 0x26, 0x17, 0x61, 0x2e, 0x4a, 0x03, 0x16,
	0xd1, 0x88, 0x75, 0x78, 0x64, 0x3d, 0x0f, 0x10, 0x74, 0x47, 0x43, 0x50, 0x56, 0x3f, 0x49, 0x78,
	0x44, 0x45, 0xa2, 0x78, 0xde, 0x65, 0x81, 0x71, 0x3e, 0x2d, 0x0b, 0xe1, 0x6d, 0x07, 0x6e, 0xfd,
	0xcf, 0x24, 0xcc, 0x16, 0xcb, 0x81, 0xde, 0xda, 0x15, 0x46, 0x51, 0xb3, 0x10, 0x33, 0x83, 0xae,
	0x40, 0xfd, 0xce, 0x42, 0xd3, 0x15, 0x1a, 0xed, 0xb5, 0x5b, 0xf1, 0x4c, 0x4e, 0xc1, 0x34, 0x0b,
	0x02, 0xbd, 0x79, 0x9a, 0x4b, 0x37, 0xfb, 0x84, 0xf6, 0xd0, 0x15, 0x38, 0x1b, 0x37, 0x71, 0x2d,
	0x5f, 0x4f, 0x83, 0x93, 0x97, 0x81, 0x18, 0x9b, 0xa7, 0x99, 0xe4, 0xfd, 0x30, 0xdd, 0x17, 0x39,
	0x97, 0x36, 0xce, 0xac, 0x18, 0xcc, 0x4e, 0x89, 0x20, 0x7f, 0xd5, 0x80, 0x93, 0x18, 0x7a, 0xb1,
	0xc2, 0xa9, 0x8d, 0x35, 0x8f, 0x4d, 0xf9, 0x6d, 0x1a, 0xdd, 0xe2, 0xbb, 0x63, 0xa8, 0xa7, 0xd9,
	0xe0, 0xef, 0xaf, 0x15, 0x8a, 0xb4, 0x4b, 0x3d, 0xc8, 0xcf, 0x1a, 0xb0, 0xac, 0xed, 0xa9, 0xa6,
	0xdc, 0x0c, 0x86, 0x94, 0x31, 0x28, 0xe7, 0xac, 0xd9, 0x5f, 0xd2, 0xff, 0x56, 0xf4, 0x6a, 0xfd,
	0xdb, 0x0c, 0x9c, 0xab, 0xdd, 0x6c, 0x1a, 0x13, 0x2b, 0xae, 0x37, 0xff, 0xa0, 0x01, 0x53, 0x1d,
	0x26, 0xcd, 0x1b, 0x1f, 0xcb, 0xbe, 0x3f, 0x7c, 0xc3, 0xea, 0xe3, 0xf8, 0x23, 0x4a, 0xa5, 0x13,
	0xbf, 0x6a, 0xa5, 0xd2, 0xc9, 0x2f, 0x58, 0x2a, 0x9d, 0xfa, 0x22, 0xa5, 0xd2, 0x13, 0x8f, 0xa1,
	0x54, 0x3a, 0xfd, 0x18, 0x4a, 0xa5, 0x33, 0x5f, 0xb4, 0x54, 0xda, 0x7c, 0x2c, 0xa5, 0xd2, 0xd9,
	0xc7, 0x50, 0x2a, 0x85, 0x2f, 0x5a, 0x2a, 0x9d, 0xfb, 0xac, 0x52, 0x69, 0x79, 0x5f, 0xa2, 0xf2,
	0xbe, 0x54, 0xf6, 0x3e, 0xd9, 0xde, 0x97, 0xdc, 0xd3, 0xa0, 0xd6, 0x47, 0xe0, 0x45, 0x1b, 0x5d,
	0xd1, 0xc1, 0x40, 0x2a, 0xd1, 0x56, 0x83, 0xb4, 0xaf, 0x43, 0xb8, 0x24, 0xcf, 0xc0, 0x42, 0xc6,
	0x82, 0x87, 0x5c, 0x19, 0x90, 0x39, 0xbe, 0x4c, 0xf9, 0xf3, 0x06, 0xb8, 0x85, 0x30, 0xbd, 0x61,
	0x60, 0x86, 0x6d, 0x49, 0x26, 0x90, 0x04, 0x34, 0xc8, 0x10, 0xb4, 0xbe, 0x0f, 0xb0, 0x3a, 0x3c,
	0x84, 0x88, 0x33, 0xed, 0x91, 0x4b, 0x3a, 0x57, 0x92, 0x02, 0x2f, 0x80, 0x34, 0xd2, 0x46, 0x09,
	0xf5, 0x64, 0x7d, 0x72, 0xf4, 0x6c, 0xfd, 0xc5, 0x52, 0x19, 0xbd, 0x89, 0x90, 0xbf, 0x6b, 0xc0,
	0x6a, 0x45, 0xbf, 0x58, 0xf5, 0x69, 0x98, 0xa7, 0x99, 0x8d, 0x1b, 0xc7, 0xa3, 0xe3, 0x4a, 0xa9,
	0xd0, 0xb6, 0xea, 0xdf, 0xca, 0xd3, 0xac, 0x54, 0x13, 0xb5, 0x54, 0x4c, 0x44, 0x46, 0xcd, 0xc9,
	0x63, 0x57, 0x53, 0x2b, 0x74, 0x8f, 0x89, 0x08, 0xd5, 0xfc, 0x59, 0x03, 0xe6, 0xa2, 0x8d, 0xae,
	0xec, 0x08, 0xa3, 0xde, 0xd4, 0x31, 0xaa, 0x07, 0x46, 0x11, 0xd4, 0xeb, 0x27, 0x8d, 0x6a, 0x5f,
	0xcf, 0x89, 0x63, 0xd4, 0xaa, 0xd2, 0x4d, 0xa4, 0x95, 0x2a, 0xdb, 0x89, 0xa6, 0x8f, 0x53, 0xa9,
	0x42, 0x0d, 0xf2, 0xe7, 0x0d, 0x58, 0xa8, 0xb5, 0xa9, 0x60, 0x2c, 0x3e, 0x2e, 0xc5, 0xe6, 0xab,
	0xdd, 0x30, 0x18, 0x4b, 0x86, 0x9a, 0x68, 0x30, 0xd0, 0x1f, 0x5b, 0x2c, 0xe9, 0xd7, 0xba, 0x75,
	0x5a, 0xff, 0xb2, 0x0c, 0x6b, 0xc3, 0xc4, 0xa1, 0x90, 0x99, 0xce, 0x3c, 0x97, 0xf5, 0x1f, 0x4f,
	0x4d, 0x14, 0x5c, 0xaa, 0x68, 0x83, 0x61, 0xf0, 0x1f, 0x1a, 0xb0, 0x56, 0xd5, 0xf0, 0xa9, 0x88,
	0x83, 0xa4, 0xa2, 0x91, 0x0b, 0x84, 0xff, 0x68, 0x92, 0xf8, 0x42, 0xd1, 0xa7, 0x23, 0x14, 0xae,
	0x56, 0x54, 0x2a, 0x82, 0xe1, 0x5f, 0x34, 0x60, 0xb1, 0xcc, 0x52, 0x8e, 0x3d, 0x1e, 0x2e, 0x14,
	0xba, 0xa0, 0x76, 0x7f, 0xda, 0x80, 0x79, 0x97, 0x0a, 0xa2, 0x6e, 0xc7, 0x19, 0x15, 0xe7, 0xac,
	0x26, 0xc5, 0xba, 0x95, 0x29, 0x11, 0xea, 0x76, 0x9c, 0xc1, 0x71, 0xa1, 0xd0, 0xa5, 0xd0, 0x2e,
	0xe7, 0x01, 0x17, 0x03, 0x1e, 0xa2, 0x72, 0xf2, 0x58, 0x23, 0xe4, 0x82, 0xd3, 0x45, 0x2b, 0x87,
	0x57, 0x1d, 0xcd, 0x90, 0xd9, 0xdd, 0xf7, 0x38, 0x63, 0xe3, 0x4c, 0xc8, 0xcc, 0xd6, 0xfb, 0xe3,
	0x06, 0xcc, 0x62, 0xdb, 0x1d, 0xaa, 0x34, 0x7b, 0x8c, 0x2a, 0x35, 0xb5, 0x1a, 0xa8, 0xd3, 0x3f,
	0x35, 0xe0, 0x54, 0x35, 0x88, 0xa4, 0x29, 0x4d, 0xed, 0xbb, 0x84, 0xa7, 0x24, 0x8a, 0xdc, 0x4d,
	0xef, 0x9a, 0x37, 0xfa, 0xcf, 0x43, 0xba, 0x62, 0x7d, 0x00, 0x99, 0x6d, 0x35, 0xef, 0x78, 0x74,
	0xad, 0xee, 0x16, 0x3b, 0x1b, 0x71, 0xa6, 0x77, 0x11, 0x39, 0x22, 0x7b, 0x98, 0x7f, 0x6a, 0xb2,
	0x07, 0xed, 0x1a, 0x31, 0x0b, 0x68, 0x9c, 0x0e, 0x38, 0x96, 0x16, 0x8f, 0xcd, 0x35, 0x62, 0x16,
	0x6c, 0xa7, 0x03, 0xde, 0xfa, 0x64, 0x02, 0x4e, 0x0f, 0x53, 0x49, 0xfe, 0x31, 0x4d, 0xfa, 0x31,
	0xb9, 0x0e, 0x6b, 0x92, 0x7f, 0xdc, 0xe7, 0x49, 0xc0, 0x6d, 0x61, 0x97, 0x4a, 0x9e, 0xb8, 0xe6,
	0x71, 0xe2, 0x70, 0xa6, 0xc6, 0xbb, 0xcb, 0x13, 0x45, 0xbe, 0x06, 0xde, 0x30, 0x07, 0x7f, 0x94,
	0x99, 0x22, 0xa9, 0xb9, 0x6c, 0x3a, 0x55, 0xe7, 0xba, 0x6d, 0xb1, 0xe4, 0x6d, 0xb8, 0xd4, 0x39,
	0xc8, 0x98, 0x94, 0x3c, 0xa4, 0x22, 0xe9, 0xa4, 0xfd, 0x24, 0xa4, 0x85, 0x28, 0x73, 0x0c, 0xc4,
	0xdd, 0x75, 0xca, 0x5f, 0x77, 0x74, 0x6d, 0x43, 0xb6, 0x6b, 0xa9, 0x76, 0x90, 0x88, 0x7c, 0x13,
	0xce, 0x17, 0x82, 0xd2, 0xbe, 0x3a, 0x24, 0x64, 0xca, 0x1e, 0x65, 0x2d, 0xcd, 0xdd, 0xbe, 0xaa,
	0x0b, 0x68, 0xfd, 0xdf, 0x24, 0x9c, 0x1d, 0x5e, 0x91, 0x6e, 0x9a, 0xef, 0xb3, 0x1c, 0x5b, 0xcb,
	0xff, 0xcc, 0x1d, 0x26, 0x8b, 0x2c, 0x4a, 0xda, 0x34, 0x2a, 0x1d, 0xe7, 0x9b, 0x14, 0x71, 0x66,
	0xcf, 0x91, 0x2e, 0x7f, 0x92, 0x7a, 0x5b, 0xb0, 0x29, 0x5e, 0x45, 0xb7, 0x89, 0x71, 0xdc, 0x3a,
	0x1d, 0xce, 0x37, 0x5d, 0x7a, 0x57, 0x6a, 0xf7, 0x97, 0x0d, 0x58, 0x1a, 0x32, 0x0e, 0x9b, 0x2f,
	0xc9, 0x71, 0x2a, 0x67, 0x8d, 0xdb, 0x5f, 0xac, 0x1b, 0x62, 0xeb, 0xe7, 0x27, 0x8a, 0x2f, 0x27,
	0x42, 0x9a, 0x75, 0x3a, 0x94, 0xbb, 0x22, 0x23, 0xb9, 0x08, 0x73, 0x8f, 0x6c, 0xb1, 0xbf, 0xbc,
	0x2a, 0x03, 0x07, 0x6a, 0x63, 0x63, 0xf7, 0x70, 0x63, 0xbd, 0xe9, 0x6c, 0x75, 0xdf, 0x76, 0xac,
	0xd5, 0xb3, 0x74, 0xec, 0xae, 0xc5, 0xa2, 0xff, 0x08, 0x36, 0x5b, 0x7d, 0x5b, 0x39, 0xc4, 0x42,
	0x7e, 0xd8, 0x80, 0xf9, 0x0e, 0x86, 0x0f, 0x96, 0x65, 0x22, 0xe9, 0x79, 0x53, 0x58, 0x96, 0xdd,
	0x1b, 0x4b, 0xcd, 0x38, 0x66, 0x81, 0x3f, 0xa7, 0x47, 0xdf, 0x36, 0x83, 0xeb, 0x2c, 0x78, 0x15,
	0x7b, 0x77, 0x85, 0x3a, 0x30, 0x05, 0x50, 0xae, 0x43, 0x8b, 0xcd, 0xe1, 0xf6, 0xc7, 0x56, 0x7f,
	0xad, 0xd7, 0x81, 0x75, 0x58, 0x32, 0x3a, 0xed, 0x14, 0x2a, 0x91, 0xe7, 0x61, 0x89, 0x97, 0xa4,
	0x58, 0xc7, 0x37, 0x15, 0xc2, 0x05, 0x0d, 0xde, 0xb1, 0x77, 0x12, 0x9c, 0xfc, 0x49, 0x03, 0x40,
	0xa3, 0x85, 0x54, 0x22, 0x70, 0x39, 0xd5, 0x60, 0x9c, 0xd6, 0x59, 0x06, 0x1a, 0xbf, 0xa2, 0x49,
	0xeb, 0x7f, 0x27, 0xe0, 0x64, 0x7d, 0xd2, 0xd6, 0x40, 0xc9, 0x2a, 0x9c, 0x10, 0x54, 0x16, 0x56,
	0x39, 0x25, 0x76, 0x05, 0xde, 0x3b, 0x05, 0x69, 0xce, 0x1d, 0x71, 0xe5, 0xd3, 0xa7, 0x45, 0x0d,
	0xbf, 0x89, 0x60, 0xbc, 0x0f, 0x79, 0x11, 0x56, 0xaa, 0x94, 0x66, 0x6d, 0x8c, 0x01, 0x2e, 0x95,
	0xa4, 0x66, 0x75, 0x3e, 0x69, 0xc0, 0x6c, 0xb1, 0x8c, 0xf6, 0x18, 0x91, 0x8f, 0xc5, 0xf6, 0x6a,
	0xee, 0xe8, 0x37, 0xdd, 0x4b, 0xc3, 0xbe, 0x67, 0x91, 0x67, 0x34, 0x12, 0x8a, 0xd7, 0x6f, 0x9b,
	0x16, 0x35, 0xfc, 0x8e, 0x50, 0xdc, 0x5e, 0x36, 0x5d, 0x05, 0x52, 0x52, 0xe2, 0x27, 0x6b, 0x41,
	0x1a, 0x59, 0x23, 0x58, 0x76, 0xb4, 0x3b, 0x16, 0xde, 0xfa, 0xfb, 0x89, 0xa1, 0x58, 0x80, 0x6b,
	0xf4, 0xf9, 0x62, 0xc1, 0x69, 0x98, 0x19, 0x44, 0xac, 0xd2, 0x1a, 0x32, 0xad, 0x1f, 0xdb, 0xe1,
	0x91, 0xfe, 0x32, 0xf9, 0x54, 0xfa, 0x4b, 0x31, 0xe3, 0xda, 0xbd, 0xd7, 0x82, 0x06, 0x17, 0xfe,
	0xd2, 0xfa, 0x65, 0x63, 0x84, 0x59, 0x6a, 0x12, 0x72, 0x09, 0xe6, 0x93, 0x7e, 0x4c, 0x99, 0x94,
	0xf8, 0xe2, 0xdc, 0x3a, 0x25, 0xfd, 0x78, 0x53, 0xca, 0xdb, 0xda, 0x70, 0xb5, 0x35, 0x15, 0x83,
	0xd8, 0x5d, 0x6a, 0x7c, 0xd6, 0x54, 0x8c, 0xec, 0x37, 0xdd, 0x94, 0x5a, 0xbf, 0xc4, 0x54, 0x68,
	0x68, 0x36, 0xb8, 0x48, 0x92, 0x10, 0x98, 0xaa, 0xf4, 0xbe, 0xe0, 0xdf, 0xe4, 0x47, 0x0d, 0xd3,
	0xc4, 0x8b, 0x13, 0x34, 0x13, 0xf8, 0x78, 0x7c, 0x6f, 0xd1, 0x0e, 0x8c, 0x7d, 0xc3, 0xb8, 0xa0,
	0x4e, 0x1d, 0x3d, 0x1f, 0x6b, 0x54, 0xe3, 0x55, 0x47, 0x0f, 0x8c, 0xea, 0x6c, 0xa5, 0x39, 0x6f,
	0xfd, 0xf5, 0x64, 0xf1, 0xa1, 0x68, 0x48, 0xb9, 0xfe, 0xff, 0xf3, 0xf9, 0xcf, 0x51, 0x6e, 0x32,
	0xf1, 0x74, 0x6e, 0x2b, 0x6e, 0x62, 0xb5, 0xd0, 0xb9, 0xa0, 0xc1, 0x47, 0x6e, 0x2b, 0x53, 0x4f,
	0xcd, 0xb6, 0xf2, 0xaf, 0x0d, 0xf0, 0x6a, 0x93, 0x36, 0xd3, 0x31, 0x26, 0xbf, 0x0c, 0x93, 0x7c,
	0x20, 0x5c, 0xd3, 0x1b, 0x1f, 0x08, 0xd3, 0xaa, 0xe7, 0x26, 0x3c, 0xbe, 0x5e, 0xaf, 0xaa, 0xfd,
	0xf8, 0x4d, 0xb7, 0xb4, 0xad, 0xbf, 0x99, 0x81, 0xe5, 0x9a, 0xf2, 0x83, 0x44, 0x68, 0xa5, 0x07,
	0x49, 0xa1, 0xb4, 0x86, 0x78, 0x30, 0x93, 0x0e, 0x78, 0x1e, 0xb1, 0x03, 0xd7, 0x68, 0x6f, 0x1f,
	0xc9, 0x1f, 0xba, 0xd7, 0x12, 0xd8, 0xb4, 0x6b, 0xbc, 0xc9, 0xd4, 0xac, 0x19, 0x5b, 0x27, 0x76,
	0xcf, 0xc2, 0xa2, 0xfd, 0xe2, 0x4e, 0x64, 0x65, 0xaf, 0xd8, 0xac, 0x3f, 0x6f, 0xa0, 0xed, 0x0c,
	0x3b, 0x25, 0xaf, 0xc3, 0x5a, 0x59, 0xca, 0x33, 0x9f, 0x42, 0x16, 0xad, 0xce, 0xb3, 0x3e, 0x29,
	0x70, 0xf8, 0x09, 0x24, 0x72, 0xbc, 0x02, 0x6b, 0x2c, 0x39, 0x40, 0xfa, 0x81, 0xe2, 0x59, 0x21,
	0xdd, 0xec, 0x7b, 0x2b, 0x16, 0xf7, 0x40, 0xf1, 0xcc, 0x0e, 0xf1, 0x1a, 0x78, 0x8e, 0x21, 0x1e,
	0x1e, 0xc6, 0xb4, 0x5e, 0x9c, 0xb4, 0xf8, 0xed, 0xfa, 0x48, 0x67, 0xa0, 0xd9, 0x0f, 0x33, 0x63,
	0x18, 0x4d, 0xd3, 0x40, 0xd2, 0x0f, 0x33, 0xdc, 0xa4, 0x9f, 0x85, 0xc5, 0x41, 0x22, 0x28, 0x4f,
	0x02, 0x96, 0x99, 0x06, 0x42, 0x73, 0xa5, 0x39, 0x3f, 0x48, 0xc4, 0x6d, 0x0d, 0xc4, 0x16, 0x42,
	0x4b, 0x55, 0x71, 0x25, 0x28, 0xa8, 0x4a, 0x4f, 0x3a, 0x03, 0x4d, 0x4d, 0x85, 0x9f, 0x06, 0xcf,
	0xd9, 0xce, 0x8e, 0x44, 0xe0, 0x57, 0xc1, 0xaf, 0xc0, 0xaa, 0x48, 0x7a, 0xf8, 0xb1, 0x57, 0xce,
	0xb3, 0xc8, 0x7d, 0x94, 0x3c, 0x6f, 0xbf, 0xe6, 0x33, 0x28, 0xbf, 0xc4, 0x1c, 0x19, 0x68, 0x16,
	0x9e, 0xbe, 0x40, 0x33, 0x14, 0x34, 0x17, 0x0f, 0x05, 0xcd, 0xa1, 0x08, 0xb3, 0xf4, 0xd4, 0x44,
	0x98, 0x7f, 0x3f, 0x53, 0x7c, 0x0a, 0x83, 0x32, 0xc8, 0x3a, 0x40, 0xe5, 0x7b, 0xfc, 0x0d, 0xd3,
	0x88, 0xd4, 0x2b, 0xbe, 0xc1, 0xbf, 0x08, 0x73, 0xd5, 0xa4, 0xf5, 0x55, 0xd3, 0x6a, 0xda, 0x29,
	0x13, 0xd6, 0x2b, 0xb0, 0x3c, 0xa4, 0x4d, 0xe8, 0xdd, 0xc0, 0xf5, 0x58, 0xac, 0x7e, 0xa2, 0xdf,
	0x0e, 0xc9, 0xcb, 0xe5, 0xe7, 0xfc, 0x5c, 0x06, 0xb9, 0xc8, 0xd0, 0x1e, 0xbe, 0x62, 0x4c, 0xdf,
	0xd2, 0x96, 0x08, 0x72, 0x19, 0xe6, 0x6b, 0x49, 0xf0, 0x57, 0x4d, 0x03, 0x6d, 0xa7, 0x92, 0x00,
	0x5f, 0x87, 0x35, 0x4b, 0x12, 0xa4, 0xfd, 0x2c, 0xe2, 0xa1, 0x25, 0x7d, 0xcd, 0x38, 0xa0, 0xc1,
	0x6d, 0x19, 0x94, 0xe1, 0x68, 0xc1, 0x82, 0x13, 0xba, 0xd7, 0xd3, 0xaa, 0x7e, 0x0d, 0x55, 0x75,
	0x52, 0xf7, 0x7a, 0xed, 0xb0, 0x32, 0xe5, 0x58, 0x2a, 0xe1, 0xbd, 0x6e, 0x5e, 0xae, 0x01, 0x6d,
	0x4b, 0x25, 0x4c, 0x5f, 0x52, 0xb6, 0xdf, 0xcf, 0xbc, 0xaf, 0x9b, 0x84, 0xd2, 0x3c, 0x55, 0xd4,
	0xc1, 0xfe, 0xa8, 0x84, 0x45, 0x46, 0xc2, 0xaf, 0x99, 0xf2, 0x8c, 0xc1, 0xb5, 0x2d, 0x0a, 0x25,
	0x5d, 0x00, 0x08, 0xd2, 0xa4, 0x2b, 0x7a, 0xfd, 0x9c, 0x87, 0xde, 0x37, 0xd0, 0x35, 0x2a, 0x10,
	0x9b, 0xb5, 0x75, 0x78, 0x4e, 0x07, 0x5d, 0x2a, 0xa4, 0xf7, 0x46, 0x91, 0xb5, 0x75, 0x78, 0xfe,
	0xa0, 0xdb, 0x96, 0xe4, 0x65, 0x58, 0xb5, 0x14, 0xa6, 0x39, 0xca, 0x12, 0xfe, 0x3a, 0x12, 0x2e,
	0x1b, 0xd4, 0x26, 0x62, 0x90, 0xfc, 0x02, 0xcc, 0x39, 0x72, 0x1a, 0x48, 0xef, 0x9b, 0xa6, 0xeb,
	0xd9, 0x92, 0x6d, 0x49, 0xf2, 0x0c, 0x2c, 0x56, 0xf0, 0xb4, 0x9f, 0x79, 0x6f, 0x9a, 0x05, 0x2a,
	0x48, 0xee, 0x67, 0x47, 0xb4, 0x58, 0x6d, 0x1e, 0xd5, 0x62, 0x55, 0xca, 0xcc, 0xe8, 0x3e, 0xca,
	0xbc, 0x59, 0x95, 0xb9, 0xf3, 0xbe, 0x96, 0xf9, 0x0a, 0xac, 0x4a, 0xc5, 0x92, 0xb0, 0x73, 0x50,
	0x13, 0xba, 0x65, 0x2b, 0x5b, 0x06, 0x55, 0x95, 0x5a, 0x2e, 0x4d, 0xd6, 0xa1, 0x1d, 0xe9, 0xdd,
	0xaa, 0x2e, 0xcd, 0x4e, 0xe7, 0xa6, 0x24, 0xcf, 0xc1, 0x52, 0x95, 0x42, 0x0f, 0x7c, 0xdb, 0xf4,
	0x57, 0x97, 0x44, 0xf7, 0x33, 0x72, 0x16, 0xf4, 0xfc, 0xe9, 0x20, 0xd1, 0xeb, 0xf6, 0x96, 0x09,
	0x95, 0x49, 0x3f, 0x7e, 0x90, 0xb4, 0xb5, 0x9f, 0xcf, 0x17, 0x38, 0xcd, 0xff, 0x76, 0xb1, 0x5e,
	0x1a, 0x7d, 0x3f, 0x23, 0xef, 0xc0, 0xa5, 0x8c, 0xe5, 0x4a, 0xb0, 0x28, 0x3a, 0xd0, 0xc7, 0x98,
	0x5e, 0xce, 0xe2, 0x98, 0x87, 0xb5, 0x39, 0xbc, 0x83, 0x4c, 0x17, 0x0a, 0xba, 0x9d, 0x82, 0xac,
	0x3a, 0x9f, 0xd7, 0xe1, 0xcc, 0x48, 0x49, 0xf8, 0x9e, 0xda, 0xa6, 0x54, 0x37, 0x42, 0x84, 0x7e,
	0x69, 0xeb, 0x00, 0xce, 0x60, 0x55, 0xdf, 0xfb, 0x0d, 0xa3, 0xa3, 0xb5, 0x57, 0xd5, 0xaf, 0xb5,
	0xd8, 0xbd, 0x3b, 0xd4, 0x62, 0x67, 0x7f, 0xe0, 0xc1, 0xfc, 0x6e, 0x01, 0x52, 0xdc, 0x31, 0x9f,
	0xb2, 0xbb, 0x9f, 0x2c, 0xb8, 0xa5, 0xa9, 0x5e, 0x86, 0xd5, 0x6e, 0x94, 0x86, 0x61, 0xf1, 0x23,
	0x01, 0x86, 0x74, 0xdb, 0x74, 0x59, 0x22, 0xca, 0xfe, 0x44, 0x00, 0x92, 0xff, 0xed, 0x11, 0x81,
	0xfc, 0xbd, 0x63, 0x6b, 0x04, 0x1b, 0x15, 0xc3, 0xed, 0x4f, 0x52, 0xec, 0x0b, 0xb5, 0x17, 0xe6,
	0x6c, 0xdf, 0xbb, 0x5b, 0xfc, 0x24, 0xc5, 0xfb, 0x16, 0xe4, 0x7e, 0xd5, 0xc1, 0x91, 0x58, 0x17,
	0xf3, 0x76, 0x90, 0x72, 0xa5, 0x42, 0x69, 0x3c, 0x0c, 0x0f, 0xb5, 0x55, 0xfa, 0x9c, 0xeb, 0x2c,
	0xe7, 0x37, 0xcd, 0x32, 0x55, 0xc8, 0x7d, 0x0d, 0x3f, 0x24, 0x3d, 0x35, 0x01, 0xd1, 0x37, 0x01,
	0xb1, 0x42, 0x7e, 0xd7, 0x04, 0x44, 0x9d, 0x1e, 0xe1, 0xef, 0x6c, 0x88, 0x48, 0xf1, 0xdc, 0xdb,
	0x1d, 0x77, 0x7a, 0x14, 0xb3, 0xe0, 0x2d, 0x1c, 0x5a, 0x2f, 0x1d, 0xde, 0x38, 0xb8, 0x6f, 0x2f,
	0xef, 0x99, 0xa5, 0xd3, 0x30, 0xf7, 0x55, 0xfa, 0x0f, 0x1a, 0x85, 0x51, 0x0e, 0xba, 0xc2, 0xbb,
	0x8f, 0xca, 0xf2, 0xb1, 0xf4, 0x2b, 0x3a, 0xdb, 0x7f, 0xd0, 0x15, 0xe4, 0xc7, 0x0d, 0xb0, 0x5b,
	0x4b, 0x19, 0x1f, 0x85, 0xf7, 0x60, 0x9c, 0xda, 0x2c, 0x19, 0xac, 0x0b, 0xc2, 0xa2, 0xb2, 0xbf,
	0x60, 0xf2, 0xf5, 0x7e, 0x75, 0x4b, 0xc5, 0xd4, 0xeb, 0xe7, 0x0d, 0x58, 0x2c, 0x8e, 0xba, 0xc6,
	0x75, 0x7e, 0x6b, 0x1c, 0x75, 0xd9, 0x91, 0x27, 0x6d, 0x7f, 0x21, 0xeb, 0x74, 0x2a, 0x6e, 0xf3,
	0x8b, 0x86, 0x3b, 0x64, 0x95, 0xda, 0x7d, 0x6b, 0x1c, 0x17, 0x27, 0xa3, 0x4f, 0x45, 0xfe, 0x22,
	0x9e, 0x3f, 0x4a, 0xfd, 0x7e, 0xda, 0xb0, 0x89, 0x6b, 0xa9, 0xde, 0x07, 0xa8, 0x5e, 0x34, 0x36,
	0xf5, 0x06, 0x89, 0xf0, 0x17, 0x74, 0x9a, 0x5c, 0x6a, 0xa5, 0xb3, 0x69, 0x91, 0x70, 0xda, 0x95,
	0xb1, 0xcd, 0x51, 0x3e, 0xb4, 0xd9, 0xb4, 0x48, 0xf8, 0x5b, 0x32, 0x36, 0xd9, 0xc9, 0x65, 0x98,
	0xc7, 0xdf, 0x58, 0x08, 0x72, 0xce, 0x14, 0x0f, 0xbd, 0x6f, 0x9b, 0x94, 0x47, 0xc3, 0xb6, 0x0c,
	0x88, 0x6c, 0xc0, 0x49, 0x24, 0xe1, 0x11, 0xcb, 0x24, 0x0f, 0x0d, 0xa9, 0x0e, 0x1b, 0xdf, 0x41,
	0xda, 0x55, 0x8d, 0xbc, 0x6d, 0x70, 0x5b, 0x16, 0x85, 0x9f, 0x4d, 0xeb, 0xb3, 0x03, 0x32, 0x9a,
	0xaa, 0x1c, 0x0d, 0xf6, 0x58, 0xd2, 0xe3, 0xa1, 0xf7, 0xdb, 0xf6, 0xb3, 0x69, 0x26, 0xd5, 0x3d,
	0x11, 0xdb, 0xea, 0xdc, 0x96, 0x41, 0x92, 0x37, 0xe0, 0x5c, 0x6d, 0xb0, 0x21, 0x5e, 0x8a, 0xbc,
	0x5e, 0x65, 0xc8, 0x3a, 0xfb, 0x65, 0x98, 0x8f, 0x52, 0x16, 0xd2, 0x0e, 0x8b, 0x58, 0x12, 0x70,
	0xef, 0x23, 0x33, 0x1d, 0x0d, 0xbb, 0x69, 0x40, 0x64, 0x0b, 0x2e, 0x08, 0x59, 0x18, 0xdd, 0x88,
	0xfd, 0xcf, 0x63, 0xee, 0x17, 0x30, 0x4c, 0xe5, 0x73, 0xe7, 0xf0, 0x16, 0xe8, 0x0e, 0xc6, 0x9d,
	0xf2, 0x60, 0x7c, 0x05, 0x96, 0x85, 0xa4, 0xb9, 0xe9, 0xf2, 0xb7, 0xd9, 0x55, 0x60, 0x7f, 0xda,
	0x41, 0xfa, 0xd8, 0xe5, 0x6f, 0x33, 0x2c, 0x85, 0xdf, 0x14, 0x87, 0x63, 0xfc, 0xa6, 0x66, 0x22,
	0x0f, 0x75, 0xa6, 0x58, 0xe9, 0x2f, 0xcc, 0x1e, 0xda, 0x36, 0x4b, 0x8f, 0xe3, 0x5d, 0x18, 0x29,
	0x71, 0x3b, 0x0f, 0x4d, 0xb3, 0xa5, 0x7e, 0xef, 0x15, 0x8e, 0xb2, 0xed, 0xd2, 0xeb, 0x22, 0x4b,
	0xa5, 0x5d, 0xf1, 0xa6, 0xeb, 0xbf, 0xd4, 0x3c, 0xb5, 0x4b, 0xe2, 0x62, 0x98, 0x9e, 0xe1, 0xa9,
	0xde, 0xd6, 0xba, 0x71, 0x5e, 0xad, 0xf3, 0xe8, 0x81, 0x0c, 0xcf, 0x1e, 0xf2, 0x54, 0x6f, 0x78,
	0x6f, 0x3a, 0x1c, 0x59, 0x84, 0x09, 0x26, 0x3d, 0x81, 0xeb, 0x3f, 0xc1, 0x24, 0xf9, 0x0e, 0x5c,
	0x4d, 0x06, 0x54, 0x32, 0xc5, 0x23, 0xac, 0xef, 0xa6, 0xdd, 0x2e, 0x1a, 0x02, 0x7e, 0x10, 0x57,
	0xe9, 0x7e, 0x71, 0xbf, 0xba, 0xf1, 0x5d, 0x7c, 0x35, 0x2f, 0x24, 0x83, 0x5d, 0xc7, 0x72, 0xd7,
	0x70, 0xb4, 0xb3, 0xc1, 0x8d, 0xed, 0xa2, 0x43, 0xc5, 0x92, 0x77, 0xa6, 0xb1, 0x5e, 0xfc, 0xea,
	0xff, 0x07, 0x00, 0x00, 0xff, 0xff, 0x3f, 0xb2, 0x81, 0xd4, 0xf8, 0x4c, 0x00, 0x00,
}
