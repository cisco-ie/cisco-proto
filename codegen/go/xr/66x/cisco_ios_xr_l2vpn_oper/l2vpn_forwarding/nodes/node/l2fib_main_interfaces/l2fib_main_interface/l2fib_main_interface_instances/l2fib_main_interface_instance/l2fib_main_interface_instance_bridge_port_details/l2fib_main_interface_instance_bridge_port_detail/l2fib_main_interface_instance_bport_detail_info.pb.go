/*
Copyright 2019 Cisco Systems

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: l2fib_main_interface_instance_bport_detail_info.proto

package cisco_ios_xr_l2vpn_oper_l2vpn_forwarding_nodes_node_l2fib_main_interfaces_l2fib_main_interface_l2fib_main_interface_instances_l2fib_main_interface_instance_l2fib_main_interface_instance_bridge_port_details_l2fib_main_interface_instance_bridge_port_detail

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type L2FibMainInterfaceInstanceBportDetailInfo_KEYS struct {
	NodeId               string   `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	MainInterfaceId      uint32   `protobuf:"varint,2,opt,name=main_interface_id,json=mainInterfaceId,proto3" json:"main_interface_id,omitempty"`
	MainInterfaceType    string   `protobuf:"bytes,3,opt,name=main_interface_type,json=mainInterfaceType,proto3" json:"main_interface_type,omitempty"`
	Instance             uint32   `protobuf:"varint,4,opt,name=instance,proto3" json:"instance,omitempty"`
	Xcid                 string   `protobuf:"bytes,5,opt,name=xcid,proto3" json:"xcid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *L2FibMainInterfaceInstanceBportDetailInfo_KEYS) Reset() {
	*m = L2FibMainInterfaceInstanceBportDetailInfo_KEYS{}
}
func (m *L2FibMainInterfaceInstanceBportDetailInfo_KEYS) String() string {
	return proto.CompactTextString(m)
}
func (*L2FibMainInterfaceInstanceBportDetailInfo_KEYS) ProtoMessage() {}
func (*L2FibMainInterfaceInstanceBportDetailInfo_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_686558707e8fec7b, []int{0}
}

func (m *L2FibMainInterfaceInstanceBportDetailInfo_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2FibMainInterfaceInstanceBportDetailInfo_KEYS.Unmarshal(m, b)
}
func (m *L2FibMainInterfaceInstanceBportDetailInfo_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2FibMainInterfaceInstanceBportDetailInfo_KEYS.Marshal(b, m, deterministic)
}
func (m *L2FibMainInterfaceInstanceBportDetailInfo_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2FibMainInterfaceInstanceBportDetailInfo_KEYS.Merge(m, src)
}
func (m *L2FibMainInterfaceInstanceBportDetailInfo_KEYS) XXX_Size() int {
	return xxx_messageInfo_L2FibMainInterfaceInstanceBportDetailInfo_KEYS.Size(m)
}
func (m *L2FibMainInterfaceInstanceBportDetailInfo_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_L2FibMainInterfaceInstanceBportDetailInfo_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_L2FibMainInterfaceInstanceBportDetailInfo_KEYS proto.InternalMessageInfo

func (m *L2FibMainInterfaceInstanceBportDetailInfo_KEYS) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

func (m *L2FibMainInterfaceInstanceBportDetailInfo_KEYS) GetMainInterfaceId() uint32 {
	if m != nil {
		return m.MainInterfaceId
	}
	return 0
}

func (m *L2FibMainInterfaceInstanceBportDetailInfo_KEYS) GetMainInterfaceType() string {
	if m != nil {
		return m.MainInterfaceType
	}
	return ""
}

func (m *L2FibMainInterfaceInstanceBportDetailInfo_KEYS) GetInstance() uint32 {
	if m != nil {
		return m.Instance
	}
	return 0
}

func (m *L2FibMainInterfaceInstanceBportDetailInfo_KEYS) GetXcid() string {
	if m != nil {
		return m.Xcid
	}
	return ""
}

type L2FibProfileInfo struct {
	ProfileName          string   `protobuf:"bytes,1,opt,name=profile_name,json=profileName,proto3" json:"profile_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *L2FibProfileInfo) Reset()         { *m = L2FibProfileInfo{} }
func (m *L2FibProfileInfo) String() string { return proto.CompactTextString(m) }
func (*L2FibProfileInfo) ProtoMessage()    {}
func (*L2FibProfileInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_686558707e8fec7b, []int{1}
}

func (m *L2FibProfileInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2FibProfileInfo.Unmarshal(m, b)
}
func (m *L2FibProfileInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2FibProfileInfo.Marshal(b, m, deterministic)
}
func (m *L2FibProfileInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2FibProfileInfo.Merge(m, src)
}
func (m *L2FibProfileInfo) XXX_Size() int {
	return xxx_messageInfo_L2FibProfileInfo.Size(m)
}
func (m *L2FibProfileInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_L2FibProfileInfo.DiscardUnknown(m)
}

var xxx_messageInfo_L2FibProfileInfo proto.InternalMessageInfo

func (m *L2FibProfileInfo) GetProfileName() string {
	if m != nil {
		return m.ProfileName
	}
	return ""
}

type L2FibFeatureUn struct {
	FeatureType          string            `protobuf:"bytes,1,opt,name=feature_type,json=featureType,proto3" json:"feature_type,omitempty"`
	Dhcp                 *L2FibProfileInfo `protobuf:"bytes,2,opt,name=dhcp,proto3" json:"dhcp,omitempty"`
	Igmp                 *L2FibProfileInfo `protobuf:"bytes,3,opt,name=igmp,proto3" json:"igmp,omitempty"`
	Mld                  *L2FibProfileInfo `protobuf:"bytes,4,opt,name=mld,proto3" json:"mld,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *L2FibFeatureUn) Reset()         { *m = L2FibFeatureUn{} }
func (m *L2FibFeatureUn) String() string { return proto.CompactTextString(m) }
func (*L2FibFeatureUn) ProtoMessage()    {}
func (*L2FibFeatureUn) Descriptor() ([]byte, []int) {
	return fileDescriptor_686558707e8fec7b, []int{2}
}

func (m *L2FibFeatureUn) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2FibFeatureUn.Unmarshal(m, b)
}
func (m *L2FibFeatureUn) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2FibFeatureUn.Marshal(b, m, deterministic)
}
func (m *L2FibFeatureUn) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2FibFeatureUn.Merge(m, src)
}
func (m *L2FibFeatureUn) XXX_Size() int {
	return xxx_messageInfo_L2FibFeatureUn.Size(m)
}
func (m *L2FibFeatureUn) XXX_DiscardUnknown() {
	xxx_messageInfo_L2FibFeatureUn.DiscardUnknown(m)
}

var xxx_messageInfo_L2FibFeatureUn proto.InternalMessageInfo

func (m *L2FibFeatureUn) GetFeatureType() string {
	if m != nil {
		return m.FeatureType
	}
	return ""
}

func (m *L2FibFeatureUn) GetDhcp() *L2FibProfileInfo {
	if m != nil {
		return m.Dhcp
	}
	return nil
}

func (m *L2FibFeatureUn) GetIgmp() *L2FibProfileInfo {
	if m != nil {
		return m.Igmp
	}
	return nil
}

func (m *L2FibFeatureUn) GetMld() *L2FibProfileInfo {
	if m != nil {
		return m.Mld
	}
	return nil
}

type L2FibOperInfo struct {
	Mtu                                      uint32            `protobuf:"varint,1,opt,name=mtu,proto3" json:"mtu,omitempty"`
	MacAgingTime                             uint32            `protobuf:"varint,2,opt,name=mac_aging_time,json=macAgingTime,proto3" json:"mac_aging_time,omitempty"`
	MacLimit                                 uint32            `protobuf:"varint,3,opt,name=mac_limit,json=macLimit,proto3" json:"mac_limit,omitempty"`
	NumberOfMacs                             uint32            `protobuf:"varint,4,opt,name=number_of_macs,json=numberOfMacs,proto3" json:"number_of_macs,omitempty"`
	AdminDisabled                            bool              `protobuf:"varint,5,opt,name=admin_disabled,json=adminDisabled,proto3" json:"admin_disabled,omitempty"`
	FloodingDisabled                         bool              `protobuf:"varint,6,opt,name=flooding_disabled,json=floodingDisabled,proto3" json:"flooding_disabled,omitempty"`
	FloodUnknownUnicastEnabled               bool              `protobuf:"varint,7,opt,name=flood_unknown_unicast_enabled,json=floodUnknownUnicastEnabled,proto3" json:"flood_unknown_unicast_enabled,omitempty"`
	MacLimitAction                           string            `protobuf:"bytes,8,opt,name=mac_limit_action,json=macLimitAction,proto3" json:"mac_limit_action,omitempty"`
	MacLimitThreshold                        uint32            `protobuf:"varint,9,opt,name=mac_limit_threshold,json=macLimitThreshold,proto3" json:"mac_limit_threshold,omitempty"`
	MacLearningDisabled                      bool              `protobuf:"varint,10,opt,name=mac_learning_disabled,json=macLearningDisabled,proto3" json:"mac_learning_disabled,omitempty"`
	MacPortDownFlushDisabled                 bool              `protobuf:"varint,11,opt,name=mac_port_down_flush_disabled,json=macPortDownFlushDisabled,proto3" json:"mac_port_down_flush_disabled,omitempty"`
	MacLimitNotificationType                 string            `protobuf:"bytes,12,opt,name=mac_limit_notification_type,json=macLimitNotificationType,proto3" json:"mac_limit_notification_type,omitempty"`
	IsMacSecureEnabled                       bool              `protobuf:"varint,13,opt,name=is_mac_secure_enabled,json=isMacSecureEnabled,proto3" json:"is_mac_secure_enabled,omitempty"`
	IsMacSecureLoggingEnabled                bool              `protobuf:"varint,14,opt,name=is_mac_secure_logging_enabled,json=isMacSecureLoggingEnabled,proto3" json:"is_mac_secure_logging_enabled,omitempty"`
	MacSecureAction                          string            `protobuf:"bytes,15,opt,name=mac_secure_action,json=macSecureAction,proto3" json:"mac_secure_action,omitempty"`
	IsMacSecureAcceptShutdown                bool              `protobuf:"varint,16,opt,name=is_mac_secure_accept_shutdown,json=isMacSecureAcceptShutdown,proto3" json:"is_mac_secure_accept_shutdown,omitempty"`
	IsMacSecureThresholdEnabled              bool              `protobuf:"varint,17,opt,name=is_mac_secure_threshold_enabled,json=isMacSecureThresholdEnabled,proto3" json:"is_mac_secure_threshold_enabled,omitempty"`
	MacAgingType                             string            `protobuf:"bytes,18,opt,name=mac_aging_type,json=macAgingType,proto3" json:"mac_aging_type,omitempty"`
	L2McSrcTrafficEnabled                    uint32            `protobuf:"varint,19,opt,name=l2mc_src_traffic_enabled,json=l2mcSrcTrafficEnabled,proto3" json:"l2mc_src_traffic_enabled,omitempty"`
	StormControlUnicastEnabled               bool              `protobuf:"varint,20,opt,name=storm_control_unicast_enabled,json=stormControlUnicastEnabled,proto3" json:"storm_control_unicast_enabled,omitempty"`
	StormControlBroadcastEnabled             bool              `protobuf:"varint,21,opt,name=storm_control_broadcast_enabled,json=stormControlBroadcastEnabled,proto3" json:"storm_control_broadcast_enabled,omitempty"`
	StormControlMulticastEnabled             bool              `protobuf:"varint,22,opt,name=storm_control_multicast_enabled,json=stormControlMulticastEnabled,proto3" json:"storm_control_multicast_enabled,omitempty"`
	StormControlUnicastRateUnit              string            `protobuf:"bytes,23,opt,name=storm_control_unicast_rate_unit,json=stormControlUnicastRateUnit,proto3" json:"storm_control_unicast_rate_unit,omitempty"`
	StormControlBroadcastRateUnit            string            `protobuf:"bytes,24,opt,name=storm_control_broadcast_rate_unit,json=stormControlBroadcastRateUnit,proto3" json:"storm_control_broadcast_rate_unit,omitempty"`
	StormControlMulticastRateUnit            string            `protobuf:"bytes,25,opt,name=storm_control_multicast_rate_unit,json=stormControlMulticastRateUnit,proto3" json:"storm_control_multicast_rate_unit,omitempty"`
	DhcpEnabled                              bool              `protobuf:"varint,26,opt,name=dhcp_enabled,json=dhcpEnabled,proto3" json:"dhcp_enabled,omitempty"`
	DhcpTrusted                              bool              `protobuf:"varint,27,opt,name=dhcp_trusted,json=dhcpTrusted,proto3" json:"dhcp_trusted,omitempty"`
	IsDaiEnabled                             bool              `protobuf:"varint,28,opt,name=is_dai_enabled,json=isDaiEnabled,proto3" json:"is_dai_enabled,omitempty"`
	IsDaiAddrValidationIpv4Enabled           bool              `protobuf:"varint,29,opt,name=is_dai_addr_validation_ipv4_enabled,json=isDaiAddrValidationIpv4Enabled,proto3" json:"is_dai_addr_validation_ipv4_enabled,omitempty"`
	IsDaiAddrValidationSourceMacEnabled      bool              `protobuf:"varint,30,opt,name=is_dai_addr_validation_source_mac_enabled,json=isDaiAddrValidationSourceMacEnabled,proto3" json:"is_dai_addr_validation_source_mac_enabled,omitempty"`
	IsDaiAddrValidationDestinationMacEnabled bool              `protobuf:"varint,31,opt,name=is_dai_addr_validation_destination_mac_enabled,json=isDaiAddrValidationDestinationMacEnabled,proto3" json:"is_dai_addr_validation_destination_mac_enabled,omitempty"`
	IsDaiLoggingEnabled                      bool              `protobuf:"varint,32,opt,name=is_dai_logging_enabled,json=isDaiLoggingEnabled,proto3" json:"is_dai_logging_enabled,omitempty"`
	IsIpsgEnabled                            bool              `protobuf:"varint,33,opt,name=is_ipsg_enabled,json=isIpsgEnabled,proto3" json:"is_ipsg_enabled,omitempty"`
	IsIpsgLoggingEnabled                     bool              `protobuf:"varint,34,opt,name=is_ipsg_logging_enabled,json=isIpsgLoggingEnabled,proto3" json:"is_ipsg_logging_enabled,omitempty"`
	IsVplsFloodOptimizationEnabled           bool              `protobuf:"varint,35,opt,name=is_vpls_flood_optimization_enabled,json=isVplsFloodOptimizationEnabled,proto3" json:"is_vpls_flood_optimization_enabled,omitempty"`
	IgmpSnoopEnabled                         bool              `protobuf:"varint,36,opt,name=igmp_snoop_enabled,json=igmpSnoopEnabled,proto3" json:"igmp_snoop_enabled,omitempty"`
	IgmpSnoopProfileEnabled                  bool              `protobuf:"varint,37,opt,name=igmp_snoop_profile_enabled,json=igmpSnoopProfileEnabled,proto3" json:"igmp_snoop_profile_enabled,omitempty"`
	IgmpFloodForwardEnabled                  bool              `protobuf:"varint,38,opt,name=igmp_flood_forward_enabled,json=igmpFloodForwardEnabled,proto3" json:"igmp_flood_forward_enabled,omitempty"`
	IgmpMroutePortEnabled                    bool              `protobuf:"varint,39,opt,name=igmp_mroute_port_enabled,json=igmpMroutePortEnabled,proto3" json:"igmp_mroute_port_enabled,omitempty"`
	IgmpRouteGuardEnabled                    bool              `protobuf:"varint,40,opt,name=igmp_route_guard_enabled,json=igmpRouteGuardEnabled,proto3" json:"igmp_route_guard_enabled,omitempty"`
	MldSnoopEnabled                          bool              `protobuf:"varint,41,opt,name=mld_snoop_enabled,json=mldSnoopEnabled,proto3" json:"mld_snoop_enabled,omitempty"`
	MldSnoopProfileEnabled                   bool              `protobuf:"varint,42,opt,name=mld_snoop_profile_enabled,json=mldSnoopProfileEnabled,proto3" json:"mld_snoop_profile_enabled,omitempty"`
	MldFloodForwardEnabled                   bool              `protobuf:"varint,43,opt,name=mld_flood_forward_enabled,json=mldFloodForwardEnabled,proto3" json:"mld_flood_forward_enabled,omitempty"`
	MldMroutePortEnabled                     bool              `protobuf:"varint,44,opt,name=mld_mroute_port_enabled,json=mldMroutePortEnabled,proto3" json:"mld_mroute_port_enabled,omitempty"`
	MldRouteGuardEnabled                     bool              `protobuf:"varint,45,opt,name=mld_route_guard_enabled,json=mldRouteGuardEnabled,proto3" json:"mld_route_guard_enabled,omitempty"`
	StpParticipating                         bool              `protobuf:"varint,46,opt,name=stp_participating,json=stpParticipating,proto3" json:"stp_participating,omitempty"`
	BviConfigured                            bool              `protobuf:"varint,47,opt,name=bvi_configured,json=bviConfigured,proto3" json:"bvi_configured,omitempty"`
	IsBviUp                                  bool              `protobuf:"varint,48,opt,name=is_bvi_up,json=isBviUp,proto3" json:"is_bvi_up,omitempty"`
	IsVniEnabled                             bool              `protobuf:"varint,49,opt,name=is_vni_enabled,json=isVniEnabled,proto3" json:"is_vni_enabled,omitempty"`
	IsEvpnEnabled                            bool              `protobuf:"varint,50,opt,name=is_evpn_enabled,json=isEvpnEnabled,proto3" json:"is_evpn_enabled,omitempty"`
	UnknownUnicastFloodingDisabled           bool              `protobuf:"varint,51,opt,name=unknown_unicast_flooding_disabled,json=unknownUnicastFloodingDisabled,proto3" json:"unknown_unicast_flooding_disabled,omitempty"`
	IsPbbevpnEnabled                         bool              `protobuf:"varint,52,opt,name=is_pbbevpn_enabled,json=isPbbevpnEnabled,proto3" json:"is_pbbevpn_enabled,omitempty"`
	IsSwmacLearning                          bool              `protobuf:"varint,53,opt,name=is_swmac_learning,json=isSwmacLearning,proto3" json:"is_swmac_learning,omitempty"`
	IsEvpnFlowLabel                          bool              `protobuf:"varint,54,opt,name=is_evpn_flow_label,json=isEvpnFlowLabel,proto3" json:"is_evpn_flow_label,omitempty"`
	IsEvpnCwDisable                          bool              `protobuf:"varint,55,opt,name=is_evpn_cw_disable,json=isEvpnCwDisable,proto3" json:"is_evpn_cw_disable,omitempty"`
	Msti                                     uint32            `protobuf:"varint,56,opt,name=msti,proto3" json:"msti,omitempty"`
	IsP2MpPwEnabled                          bool              `protobuf:"varint,57,opt,name=is_p2mp_pw_enabled,json=isP2mpPwEnabled,proto3" json:"is_p2mp_pw_enabled,omitempty"`
	IsIgmpSnoopEnabled                       bool              `protobuf:"varint,58,opt,name=is_igmp_snoop_enabled,json=isIgmpSnoopEnabled,proto3" json:"is_igmp_snoop_enabled,omitempty"`
	NvSatelliteOffloadIpv4MulticastDisabled  bool              `protobuf:"varint,59,opt,name=nv_satellite_offload_ipv4_multicast_disabled,json=nvSatelliteOffloadIpv4MulticastDisabled,proto3" json:"nv_satellite_offload_ipv4_multicast_disabled,omitempty"`
	Feature                                  []*L2FibFeatureUn `protobuf:"bytes,60,rep,name=feature,proto3" json:"feature,omitempty"`
	EtreeLeaf                                bool              `protobuf:"varint,61,opt,name=etree_leaf,json=etreeLeaf,proto3" json:"etree_leaf,omitempty"`
	XXX_NoUnkeyedLiteral                     struct{}          `json:"-"`
	XXX_unrecognized                         []byte            `json:"-"`
	XXX_sizecache                            int32             `json:"-"`
}

func (m *L2FibOperInfo) Reset()         { *m = L2FibOperInfo{} }
func (m *L2FibOperInfo) String() string { return proto.CompactTextString(m) }
func (*L2FibOperInfo) ProtoMessage()    {}
func (*L2FibOperInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_686558707e8fec7b, []int{3}
}

func (m *L2FibOperInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2FibOperInfo.Unmarshal(m, b)
}
func (m *L2FibOperInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2FibOperInfo.Marshal(b, m, deterministic)
}
func (m *L2FibOperInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2FibOperInfo.Merge(m, src)
}
func (m *L2FibOperInfo) XXX_Size() int {
	return xxx_messageInfo_L2FibOperInfo.Size(m)
}
func (m *L2FibOperInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_L2FibOperInfo.DiscardUnknown(m)
}

var xxx_messageInfo_L2FibOperInfo proto.InternalMessageInfo

func (m *L2FibOperInfo) GetMtu() uint32 {
	if m != nil {
		return m.Mtu
	}
	return 0
}

func (m *L2FibOperInfo) GetMacAgingTime() uint32 {
	if m != nil {
		return m.MacAgingTime
	}
	return 0
}

func (m *L2FibOperInfo) GetMacLimit() uint32 {
	if m != nil {
		return m.MacLimit
	}
	return 0
}

func (m *L2FibOperInfo) GetNumberOfMacs() uint32 {
	if m != nil {
		return m.NumberOfMacs
	}
	return 0
}

func (m *L2FibOperInfo) GetAdminDisabled() bool {
	if m != nil {
		return m.AdminDisabled
	}
	return false
}

func (m *L2FibOperInfo) GetFloodingDisabled() bool {
	if m != nil {
		return m.FloodingDisabled
	}
	return false
}

func (m *L2FibOperInfo) GetFloodUnknownUnicastEnabled() bool {
	if m != nil {
		return m.FloodUnknownUnicastEnabled
	}
	return false
}

func (m *L2FibOperInfo) GetMacLimitAction() string {
	if m != nil {
		return m.MacLimitAction
	}
	return ""
}

func (m *L2FibOperInfo) GetMacLimitThreshold() uint32 {
	if m != nil {
		return m.MacLimitThreshold
	}
	return 0
}

func (m *L2FibOperInfo) GetMacLearningDisabled() bool {
	if m != nil {
		return m.MacLearningDisabled
	}
	return false
}

func (m *L2FibOperInfo) GetMacPortDownFlushDisabled() bool {
	if m != nil {
		return m.MacPortDownFlushDisabled
	}
	return false
}

func (m *L2FibOperInfo) GetMacLimitNotificationType() string {
	if m != nil {
		return m.MacLimitNotificationType
	}
	return ""
}

func (m *L2FibOperInfo) GetIsMacSecureEnabled() bool {
	if m != nil {
		return m.IsMacSecureEnabled
	}
	return false
}

func (m *L2FibOperInfo) GetIsMacSecureLoggingEnabled() bool {
	if m != nil {
		return m.IsMacSecureLoggingEnabled
	}
	return false
}

func (m *L2FibOperInfo) GetMacSecureAction() string {
	if m != nil {
		return m.MacSecureAction
	}
	return ""
}

func (m *L2FibOperInfo) GetIsMacSecureAcceptShutdown() bool {
	if m != nil {
		return m.IsMacSecureAcceptShutdown
	}
	return false
}

func (m *L2FibOperInfo) GetIsMacSecureThresholdEnabled() bool {
	if m != nil {
		return m.IsMacSecureThresholdEnabled
	}
	return false
}

func (m *L2FibOperInfo) GetMacAgingType() string {
	if m != nil {
		return m.MacAgingType
	}
	return ""
}

func (m *L2FibOperInfo) GetL2McSrcTrafficEnabled() uint32 {
	if m != nil {
		return m.L2McSrcTrafficEnabled
	}
	return 0
}

func (m *L2FibOperInfo) GetStormControlUnicastEnabled() bool {
	if m != nil {
		return m.StormControlUnicastEnabled
	}
	return false
}

func (m *L2FibOperInfo) GetStormControlBroadcastEnabled() bool {
	if m != nil {
		return m.StormControlBroadcastEnabled
	}
	return false
}

func (m *L2FibOperInfo) GetStormControlMulticastEnabled() bool {
	if m != nil {
		return m.StormControlMulticastEnabled
	}
	return false
}

func (m *L2FibOperInfo) GetStormControlUnicastRateUnit() string {
	if m != nil {
		return m.StormControlUnicastRateUnit
	}
	return ""
}

func (m *L2FibOperInfo) GetStormControlBroadcastRateUnit() string {
	if m != nil {
		return m.StormControlBroadcastRateUnit
	}
	return ""
}

func (m *L2FibOperInfo) GetStormControlMulticastRateUnit() string {
	if m != nil {
		return m.StormControlMulticastRateUnit
	}
	return ""
}

func (m *L2FibOperInfo) GetDhcpEnabled() bool {
	if m != nil {
		return m.DhcpEnabled
	}
	return false
}

func (m *L2FibOperInfo) GetDhcpTrusted() bool {
	if m != nil {
		return m.DhcpTrusted
	}
	return false
}

func (m *L2FibOperInfo) GetIsDaiEnabled() bool {
	if m != nil {
		return m.IsDaiEnabled
	}
	return false
}

func (m *L2FibOperInfo) GetIsDaiAddrValidationIpv4Enabled() bool {
	if m != nil {
		return m.IsDaiAddrValidationIpv4Enabled
	}
	return false
}

func (m *L2FibOperInfo) GetIsDaiAddrValidationSourceMacEnabled() bool {
	if m != nil {
		return m.IsDaiAddrValidationSourceMacEnabled
	}
	return false
}

func (m *L2FibOperInfo) GetIsDaiAddrValidationDestinationMacEnabled() bool {
	if m != nil {
		return m.IsDaiAddrValidationDestinationMacEnabled
	}
	return false
}

func (m *L2FibOperInfo) GetIsDaiLoggingEnabled() bool {
	if m != nil {
		return m.IsDaiLoggingEnabled
	}
	return false
}

func (m *L2FibOperInfo) GetIsIpsgEnabled() bool {
	if m != nil {
		return m.IsIpsgEnabled
	}
	return false
}

func (m *L2FibOperInfo) GetIsIpsgLoggingEnabled() bool {
	if m != nil {
		return m.IsIpsgLoggingEnabled
	}
	return false
}

func (m *L2FibOperInfo) GetIsVplsFloodOptimizationEnabled() bool {
	if m != nil {
		return m.IsVplsFloodOptimizationEnabled
	}
	return false
}

func (m *L2FibOperInfo) GetIgmpSnoopEnabled() bool {
	if m != nil {
		return m.IgmpSnoopEnabled
	}
	return false
}

func (m *L2FibOperInfo) GetIgmpSnoopProfileEnabled() bool {
	if m != nil {
		return m.IgmpSnoopProfileEnabled
	}
	return false
}

func (m *L2FibOperInfo) GetIgmpFloodForwardEnabled() bool {
	if m != nil {
		return m.IgmpFloodForwardEnabled
	}
	return false
}

func (m *L2FibOperInfo) GetIgmpMroutePortEnabled() bool {
	if m != nil {
		return m.IgmpMroutePortEnabled
	}
	return false
}

func (m *L2FibOperInfo) GetIgmpRouteGuardEnabled() bool {
	if m != nil {
		return m.IgmpRouteGuardEnabled
	}
	return false
}

func (m *L2FibOperInfo) GetMldSnoopEnabled() bool {
	if m != nil {
		return m.MldSnoopEnabled
	}
	return false
}

func (m *L2FibOperInfo) GetMldSnoopProfileEnabled() bool {
	if m != nil {
		return m.MldSnoopProfileEnabled
	}
	return false
}

func (m *L2FibOperInfo) GetMldFloodForwardEnabled() bool {
	if m != nil {
		return m.MldFloodForwardEnabled
	}
	return false
}

func (m *L2FibOperInfo) GetMldMroutePortEnabled() bool {
	if m != nil {
		return m.MldMroutePortEnabled
	}
	return false
}

func (m *L2FibOperInfo) GetMldRouteGuardEnabled() bool {
	if m != nil {
		return m.MldRouteGuardEnabled
	}
	return false
}

func (m *L2FibOperInfo) GetStpParticipating() bool {
	if m != nil {
		return m.StpParticipating
	}
	return false
}

func (m *L2FibOperInfo) GetBviConfigured() bool {
	if m != nil {
		return m.BviConfigured
	}
	return false
}

func (m *L2FibOperInfo) GetIsBviUp() bool {
	if m != nil {
		return m.IsBviUp
	}
	return false
}

func (m *L2FibOperInfo) GetIsVniEnabled() bool {
	if m != nil {
		return m.IsVniEnabled
	}
	return false
}

func (m *L2FibOperInfo) GetIsEvpnEnabled() bool {
	if m != nil {
		return m.IsEvpnEnabled
	}
	return false
}

func (m *L2FibOperInfo) GetUnknownUnicastFloodingDisabled() bool {
	if m != nil {
		return m.UnknownUnicastFloodingDisabled
	}
	return false
}

func (m *L2FibOperInfo) GetIsPbbevpnEnabled() bool {
	if m != nil {
		return m.IsPbbevpnEnabled
	}
	return false
}

func (m *L2FibOperInfo) GetIsSwmacLearning() bool {
	if m != nil {
		return m.IsSwmacLearning
	}
	return false
}

func (m *L2FibOperInfo) GetIsEvpnFlowLabel() bool {
	if m != nil {
		return m.IsEvpnFlowLabel
	}
	return false
}

func (m *L2FibOperInfo) GetIsEvpnCwDisable() bool {
	if m != nil {
		return m.IsEvpnCwDisable
	}
	return false
}

func (m *L2FibOperInfo) GetMsti() uint32 {
	if m != nil {
		return m.Msti
	}
	return 0
}

func (m *L2FibOperInfo) GetIsP2MpPwEnabled() bool {
	if m != nil {
		return m.IsP2MpPwEnabled
	}
	return false
}

func (m *L2FibOperInfo) GetIsIgmpSnoopEnabled() bool {
	if m != nil {
		return m.IsIgmpSnoopEnabled
	}
	return false
}

func (m *L2FibOperInfo) GetNvSatelliteOffloadIpv4MulticastDisabled() bool {
	if m != nil {
		return m.NvSatelliteOffloadIpv4MulticastDisabled
	}
	return false
}

func (m *L2FibOperInfo) GetFeature() []*L2FibFeatureUn {
	if m != nil {
		return m.Feature
	}
	return nil
}

func (m *L2FibOperInfo) GetEtreeLeaf() bool {
	if m != nil {
		return m.EtreeLeaf
	}
	return false
}

type L2FibOperBridgePortInfo struct {
	OperationalInformation    *L2FibOperInfo `protobuf:"bytes,1,opt,name=operational_information,json=operationalInformation,proto3" json:"operational_information,omitempty"`
	UnicastStormControlPps    uint64         `protobuf:"varint,2,opt,name=unicast_storm_control_pps,json=unicastStormControlPps,proto3" json:"unicast_storm_control_pps,omitempty"`
	UnicastStormControlKbPs   uint64         `protobuf:"varint,3,opt,name=unicast_storm_control_kb_ps,json=unicastStormControlKbPs,proto3" json:"unicast_storm_control_kb_ps,omitempty"`
	BroadcastStormControlPps  uint64         `protobuf:"varint,4,opt,name=broadcast_storm_control_pps,json=broadcastStormControlPps,proto3" json:"broadcast_storm_control_pps,omitempty"`
	BroadcastStormControlKbPs uint64         `protobuf:"varint,5,opt,name=broadcast_storm_control_kb_ps,json=broadcastStormControlKbPs,proto3" json:"broadcast_storm_control_kb_ps,omitempty"`
	MulticastStormControlPps  uint64         `protobuf:"varint,6,opt,name=multicast_storm_control_pps,json=multicastStormControlPps,proto3" json:"multicast_storm_control_pps,omitempty"`
	MulticastStormControlKbPs uint64         `protobuf:"varint,7,opt,name=multicast_storm_control_kb_ps,json=multicastStormControlKbPs,proto3" json:"multicast_storm_control_kb_ps,omitempty"`
	XXX_NoUnkeyedLiteral      struct{}       `json:"-"`
	XXX_unrecognized          []byte         `json:"-"`
	XXX_sizecache             int32          `json:"-"`
}

func (m *L2FibOperBridgePortInfo) Reset()         { *m = L2FibOperBridgePortInfo{} }
func (m *L2FibOperBridgePortInfo) String() string { return proto.CompactTextString(m) }
func (*L2FibOperBridgePortInfo) ProtoMessage()    {}
func (*L2FibOperBridgePortInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_686558707e8fec7b, []int{4}
}

func (m *L2FibOperBridgePortInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2FibOperBridgePortInfo.Unmarshal(m, b)
}
func (m *L2FibOperBridgePortInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2FibOperBridgePortInfo.Marshal(b, m, deterministic)
}
func (m *L2FibOperBridgePortInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2FibOperBridgePortInfo.Merge(m, src)
}
func (m *L2FibOperBridgePortInfo) XXX_Size() int {
	return xxx_messageInfo_L2FibOperBridgePortInfo.Size(m)
}
func (m *L2FibOperBridgePortInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_L2FibOperBridgePortInfo.DiscardUnknown(m)
}

var xxx_messageInfo_L2FibOperBridgePortInfo proto.InternalMessageInfo

func (m *L2FibOperBridgePortInfo) GetOperationalInformation() *L2FibOperInfo {
	if m != nil {
		return m.OperationalInformation
	}
	return nil
}

func (m *L2FibOperBridgePortInfo) GetUnicastStormControlPps() uint64 {
	if m != nil {
		return m.UnicastStormControlPps
	}
	return 0
}

func (m *L2FibOperBridgePortInfo) GetUnicastStormControlKbPs() uint64 {
	if m != nil {
		return m.UnicastStormControlKbPs
	}
	return 0
}

func (m *L2FibOperBridgePortInfo) GetBroadcastStormControlPps() uint64 {
	if m != nil {
		return m.BroadcastStormControlPps
	}
	return 0
}

func (m *L2FibOperBridgePortInfo) GetBroadcastStormControlKbPs() uint64 {
	if m != nil {
		return m.BroadcastStormControlKbPs
	}
	return 0
}

func (m *L2FibOperBridgePortInfo) GetMulticastStormControlPps() uint64 {
	if m != nil {
		return m.MulticastStormControlPps
	}
	return 0
}

func (m *L2FibOperBridgePortInfo) GetMulticastStormControlKbPs() uint64 {
	if m != nil {
		return m.MulticastStormControlKbPs
	}
	return 0
}

type L2FibMainInterfaceInstanceBportDetailInfo struct {
	BridgePortId         string                   `protobuf:"bytes,50,opt,name=bridge_port_id,json=bridgePortId,proto3" json:"bridge_port_id,omitempty"`
	BridgeId             uint32                   `protobuf:"varint,51,opt,name=bridge_id,json=bridgeId,proto3" json:"bridge_id,omitempty"`
	State                string                   `protobuf:"bytes,52,opt,name=state,proto3" json:"state,omitempty"`
	MainInterface        string                   `protobuf:"bytes,53,opt,name=main_interface,json=mainInterface,proto3" json:"main_interface,omitempty"`
	MainIfType           uint32                   `protobuf:"varint,54,opt,name=main_if_type,json=mainIfType,proto3" json:"main_if_type,omitempty"`
	VirtualIfName        string                   `protobuf:"bytes,55,opt,name=virtual_if_name,json=virtualIfName,proto3" json:"virtual_if_name,omitempty"`
	BpType               uint32                   `protobuf:"varint,56,opt,name=bp_type,json=bpType,proto3" json:"bp_type,omitempty"`
	Oper                 *L2FibOperBridgePortInfo `protobuf:"bytes,57,opt,name=oper,proto3" json:"oper,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *L2FibMainInterfaceInstanceBportDetailInfo) Reset() {
	*m = L2FibMainInterfaceInstanceBportDetailInfo{}
}
func (m *L2FibMainInterfaceInstanceBportDetailInfo) String() string { return proto.CompactTextString(m) }
func (*L2FibMainInterfaceInstanceBportDetailInfo) ProtoMessage()    {}
func (*L2FibMainInterfaceInstanceBportDetailInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_686558707e8fec7b, []int{5}
}

func (m *L2FibMainInterfaceInstanceBportDetailInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2FibMainInterfaceInstanceBportDetailInfo.Unmarshal(m, b)
}
func (m *L2FibMainInterfaceInstanceBportDetailInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2FibMainInterfaceInstanceBportDetailInfo.Marshal(b, m, deterministic)
}
func (m *L2FibMainInterfaceInstanceBportDetailInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2FibMainInterfaceInstanceBportDetailInfo.Merge(m, src)
}
func (m *L2FibMainInterfaceInstanceBportDetailInfo) XXX_Size() int {
	return xxx_messageInfo_L2FibMainInterfaceInstanceBportDetailInfo.Size(m)
}
func (m *L2FibMainInterfaceInstanceBportDetailInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_L2FibMainInterfaceInstanceBportDetailInfo.DiscardUnknown(m)
}

var xxx_messageInfo_L2FibMainInterfaceInstanceBportDetailInfo proto.InternalMessageInfo

func (m *L2FibMainInterfaceInstanceBportDetailInfo) GetBridgePortId() string {
	if m != nil {
		return m.BridgePortId
	}
	return ""
}

func (m *L2FibMainInterfaceInstanceBportDetailInfo) GetBridgeId() uint32 {
	if m != nil {
		return m.BridgeId
	}
	return 0
}

func (m *L2FibMainInterfaceInstanceBportDetailInfo) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *L2FibMainInterfaceInstanceBportDetailInfo) GetMainInterface() string {
	if m != nil {
		return m.MainInterface
	}
	return ""
}

func (m *L2FibMainInterfaceInstanceBportDetailInfo) GetMainIfType() uint32 {
	if m != nil {
		return m.MainIfType
	}
	return 0
}

func (m *L2FibMainInterfaceInstanceBportDetailInfo) GetVirtualIfName() string {
	if m != nil {
		return m.VirtualIfName
	}
	return ""
}

func (m *L2FibMainInterfaceInstanceBportDetailInfo) GetBpType() uint32 {
	if m != nil {
		return m.BpType
	}
	return 0
}

func (m *L2FibMainInterfaceInstanceBportDetailInfo) GetOper() *L2FibOperBridgePortInfo {
	if m != nil {
		return m.Oper
	}
	return nil
}

func init() {
	proto.RegisterType((*L2FibMainInterfaceInstanceBportDetailInfo_KEYS)(nil), "cisco_ios_xr_l2vpn_oper.l2vpn_forwarding.nodes.node.l2fib_main_interfaces.l2fib_main_interface.l2fib_main_interface_instances.l2fib_main_interface_instance.l2fib_main_interface_instance_bridge_port_details.l2fib_main_interface_instance_bridge_port_detail.l2fib_main_interface_instance_bport_detail_info_KEYS")
	proto.RegisterType((*L2FibProfileInfo)(nil), "cisco_ios_xr_l2vpn_oper.l2vpn_forwarding.nodes.node.l2fib_main_interfaces.l2fib_main_interface.l2fib_main_interface_instances.l2fib_main_interface_instance.l2fib_main_interface_instance_bridge_port_details.l2fib_main_interface_instance_bridge_port_detail.l2fib_profile_info")
	proto.RegisterType((*L2FibFeatureUn)(nil), "cisco_ios_xr_l2vpn_oper.l2vpn_forwarding.nodes.node.l2fib_main_interfaces.l2fib_main_interface.l2fib_main_interface_instances.l2fib_main_interface_instance.l2fib_main_interface_instance_bridge_port_details.l2fib_main_interface_instance_bridge_port_detail.l2fib_feature_un")
	proto.RegisterType((*L2FibOperInfo)(nil), "cisco_ios_xr_l2vpn_oper.l2vpn_forwarding.nodes.node.l2fib_main_interfaces.l2fib_main_interface.l2fib_main_interface_instances.l2fib_main_interface_instance.l2fib_main_interface_instance_bridge_port_details.l2fib_main_interface_instance_bridge_port_detail.l2fib_oper_info")
	proto.RegisterType((*L2FibOperBridgePortInfo)(nil), "cisco_ios_xr_l2vpn_oper.l2vpn_forwarding.nodes.node.l2fib_main_interfaces.l2fib_main_interface.l2fib_main_interface_instances.l2fib_main_interface_instance.l2fib_main_interface_instance_bridge_port_details.l2fib_main_interface_instance_bridge_port_detail.l2fib_oper_bridge_port_info")
	proto.RegisterType((*L2FibMainInterfaceInstanceBportDetailInfo)(nil), "cisco_ios_xr_l2vpn_oper.l2vpn_forwarding.nodes.node.l2fib_main_interfaces.l2fib_main_interface.l2fib_main_interface_instances.l2fib_main_interface_instance.l2fib_main_interface_instance_bridge_port_details.l2fib_main_interface_instance_bridge_port_detail.l2fib_main_interface_instance_bport_detail_info")
}

func init() {
	proto.RegisterFile("l2fib_main_interface_instance_bport_detail_info.proto", fileDescriptor_686558707e8fec7b)
}

var fileDescriptor_686558707e8fec7b = []byte{
	// 1858 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x59, 0x4f, 0x53, 0x1c, 0xc7,
	0x15, 0x2f, 0x10, 0x02, 0xb6, 0x01, 0x01, 0x63, 0x01, 0x23, 0x56, 0x58, 0x80, 0x6c, 0x19, 0x5b,
	0xca, 0x3a, 0x5e, 0x49, 0x26, 0x8e, 0xed, 0x94, 0xb1, 0x10, 0xc9, 0x46, 0x20, 0x51, 0xbb, 0x48,
	0x55, 0x39, 0xa4, 0x3a, 0xbd, 0x33, 0x3d, 0x4b, 0x97, 0x67, 0xa6, 0xbb, 0xa6, 0x7b, 0x76, 0xed,
	0x7c, 0x89, 0xa4, 0x72, 0xcd, 0x39, 0x95, 0x43, 0x2e, 0xc9, 0x07, 0xc8, 0x39, 0x95, 0xcf, 0x90,
	0x6b, 0x3e, 0x47, 0x2a, 0xd5, 0xaf, 0xa7, 0xe7, 0xdf, 0x0e, 0x4a, 0xe9, 0x1c, 0x2e, 0xd4, 0x4e,
	0xf7, 0xef, 0xf7, 0xeb, 0xf7, 0xde, 0x74, 0xbf, 0xf7, 0x7a, 0x40, 0x4f, 0xc3, 0x6e, 0xc0, 0x86,
	0x38, 0x22, 0x2c, 0xc6, 0x2c, 0x56, 0x34, 0x09, 0x88, 0x47, 0x31, 0x8b, 0xa5, 0x22, 0xb1, 0x47,
	0xf1, 0x50, 0xf0, 0x44, 0x61, 0x9f, 0x2a, 0xc2, 0x42, 0xcc, 0xe2, 0x80, 0x77, 0x44, 0xc2, 0x15,
	0x77, 0xfe, 0x33, 0xe3, 0x31, 0xe9, 0x71, 0xcc, 0xb8, 0xc4, 0xdf, 0x27, 0x38, 0xec, 0x8e, 0x45,
	0x8c, 0xb9, 0xa0, 0x49, 0xc7, 0xfc, 0x0c, 0x78, 0x32, 0x21, 0x89, 0xcf, 0xe2, 0x51, 0x27, 0xe6,
	0x3e, 0x95, 0xf0, 0xb7, 0xd3, 0xb4, 0x96, 0x6c, 0x1c, 0xed, 0xbc, 0xd5, 0x2c, 0xf9, 0xf6, 0xe9,
	0xce, 0xff, 0xf0, 0x29, 0x61, 0xfe, 0x88, 0xe2, 0x92, 0x67, 0xf2, 0x9d, 0x19, 0xfb, 0xff, 0x9a,
	0x41, 0x4f, 0xde, 0x31, 0x74, 0xf8, 0xc5, 0xf3, 0x5f, 0x0d, 0x9c, 0x2d, 0xb4, 0xa0, 0x63, 0x81,
	0x99, 0xef, 0xce, 0xec, 0xce, 0x1c, 0xb4, 0xfa, 0xf3, 0xfa, 0xb1, 0xe7, 0x3b, 0x9f, 0xa0, 0xf5,
	0xba, 0x94, 0xef, 0xce, 0xee, 0xce, 0x1c, 0xac, 0xf4, 0x57, 0xf5, 0x44, 0xcf, 0x8e, 0xf7, 0x7c,
	0xa7, 0x83, 0xde, 0xab, 0x61, 0xd5, 0x0f, 0x82, 0xba, 0x37, 0x40, 0x70, 0xbd, 0x82, 0xbe, 0xf8,
	0x41, 0x50, 0x67, 0x1b, 0x2d, 0x5a, 0xbb, 0xdc, 0x39, 0x90, 0xcc, 0x9f, 0x1d, 0x07, 0xcd, 0x7d,
	0xef, 0x31, 0xdf, 0xbd, 0x09, 0x64, 0xf8, 0xbd, 0x7f, 0x88, 0x1c, 0xe3, 0x9c, 0x48, 0x78, 0xc0,
	0x42, 0x0a, 0xf6, 0x3b, 0x7b, 0x68, 0xd9, 0x3e, 0xc7, 0x24, 0xa2, 0x99, 0xfd, 0x4b, 0xd9, 0xd8,
	0x4b, 0x12, 0xd1, 0xfd, 0xbf, 0x2d, 0xa0, 0x35, 0xc3, 0x0c, 0x28, 0x51, 0x69, 0x42, 0x71, 0x1a,
	0x6b, 0x9e, 0x7d, 0x02, 0x33, 0x33, 0x5e, 0x36, 0x06, 0x06, 0xfe, 0x79, 0x16, 0xcd, 0xf9, 0x97,
	0x9e, 0x00, 0x87, 0x97, 0xba, 0x7f, 0x98, 0xed, 0xfc, 0x7f, 0xef, 0xaf, 0xce, 0x74, 0xf8, 0xfb,
	0x10, 0x20, 0x88, 0x14, 0x1b, 0x45, 0x02, 0x5e, 0xf6, 0x75, 0xa4, 0x9a, 0x23, 0xa5, 0x03, 0xe4,
	0xfc, 0x69, 0x16, 0xdd, 0x88, 0x42, 0x1f, 0x36, 0xfc, 0x75, 0xa0, 0x1a, 0x03, 0xa5, 0xe3, 0xb3,
	0xff, 0xf7, 0x36, 0x5a, 0x35, 0x73, 0x3a, 0x1a, 0xe6, 0xa8, 0xaf, 0xa1, 0x1b, 0x91, 0x4a, 0xe1,
	0xa4, 0xae, 0xf4, 0xf5, 0x4f, 0xe7, 0x03, 0x74, 0x2b, 0x22, 0x1e, 0x26, 0x23, 0x16, 0x8f, 0xb0,
	0x62, 0x11, 0xcd, 0x72, 0xd3, 0x72, 0x44, 0xbc, 0x23, 0x3d, 0x78, 0xc1, 0x22, 0xea, 0xb4, 0x51,
	0x4b, 0xa3, 0x42, 0x16, 0x31, 0x05, 0x3b, 0x74, 0xa5, 0xbf, 0x18, 0x11, 0xef, 0x54, 0x3f, 0x6b,
	0x89, 0x38, 0x8d, 0x86, 0x34, 0xc1, 0x3c, 0xc0, 0x11, 0xf1, 0x64, 0x96, 0x8b, 0x96, 0xcd, 0xe8,
	0xab, 0xe0, 0x8c, 0x78, 0xd2, 0xf9, 0x10, 0xdd, 0x22, 0x7e, 0xc4, 0x62, 0xec, 0x33, 0x49, 0x86,
	0x21, 0x35, 0x99, 0x69, 0xb1, 0xbf, 0x02, 0xa3, 0xc7, 0xd9, 0xa0, 0xf3, 0x10, 0xad, 0x07, 0x21,
	0xe7, 0xfa, 0x7d, 0x15, 0xc8, 0x79, 0x40, 0xae, 0xd9, 0x89, 0x1c, 0x7c, 0x84, 0x76, 0x60, 0x0c,
	0xa7, 0xf1, 0x77, 0x31, 0x9f, 0xc4, 0x38, 0x8d, 0x99, 0x47, 0xa4, 0xc2, 0x34, 0x36, 0xc4, 0x05,
	0x20, 0x6e, 0x03, 0xe8, 0xb5, 0xc1, 0xbc, 0x36, 0x90, 0xe7, 0x06, 0xe1, 0x1c, 0xa0, 0xb5, 0xdc,
	0x33, 0x4c, 0x3c, 0xc5, 0x78, 0xec, 0x2e, 0x42, 0x22, 0xbb, 0x65, 0x1d, 0x3c, 0x82, 0x51, 0x93,
	0x9c, 0x2d, 0x52, 0x5d, 0x26, 0x54, 0x5e, 0xf2, 0xd0, 0x77, 0x5b, 0xe0, 0xeb, 0xba, 0x05, 0x5f,
	0xd8, 0x09, 0xa7, 0x8b, 0x36, 0x00, 0x4f, 0x49, 0x12, 0x57, 0xbc, 0x41, 0x60, 0x94, 0x16, 0x3b,
	0xcd, 0xe6, 0x72, 0x87, 0x7e, 0x86, 0xee, 0x6a, 0x8e, 0x79, 0xbd, 0xda, 0xa1, 0x20, 0x4c, 0xe5,
	0x65, 0x41, 0x5d, 0x02, 0xaa, 0x1b, 0x11, 0xef, 0x9c, 0x27, 0xea, 0x98, 0x4f, 0xe2, 0x13, 0x0d,
	0xc8, 0xf9, 0x5f, 0xa3, 0x76, 0x61, 0x63, 0xcc, 0x15, 0x0b, 0x98, 0x47, 0xb4, 0xf5, 0x26, 0x43,
	0x2f, 0x83, 0x63, 0xae, 0xb5, 0xf5, 0x65, 0x09, 0x00, 0xe9, 0xfa, 0x33, 0xb4, 0xc1, 0xa4, 0x7e,
	0x85, 0x58, 0x52, 0x4f, 0xe7, 0x75, 0x1b, 0xc7, 0x15, 0x58, 0xd7, 0x61, 0xf2, 0x8c, 0x78, 0x03,
	0x98, 0xb2, 0xf1, 0xfb, 0x06, 0xed, 0x54, 0x29, 0x21, 0x1f, 0xc1, 0x5e, 0xb2, 0xd4, 0x5b, 0x40,
	0xbd, 0x53, 0xa2, 0x9e, 0x1a, 0x84, 0x55, 0x80, 0x02, 0x99, 0xd3, 0xb3, 0x57, 0xb0, 0x0a, 0x96,
	0xae, 0x46, 0x96, 0x93, 0xbd, 0x83, 0xa9, 0xd5, 0x88, 0xe7, 0x51, 0xa1, 0xb0, 0xbc, 0x4c, 0x95,
	0x8e, 0x97, 0xbb, 0x36, 0xb5, 0xda, 0x11, 0x20, 0x06, 0x19, 0xc0, 0x39, 0x46, 0xf7, 0xaa, 0x0a,
	0xf9, 0x9b, 0xcc, 0x2d, 0x5e, 0x07, 0x8d, 0x76, 0x49, 0x23, 0x7f, 0xa9, 0xd6, 0xe6, 0xea, 0xa9,
	0xd1, 0xa1, 0x75, 0xc0, 0xe0, 0xe2, 0xd4, 0xe8, 0x70, 0x1e, 0x22, 0x37, 0xec, 0x46, 0x1e, 0x96,
	0x89, 0x87, 0x55, 0x42, 0x82, 0x80, 0x79, 0xf9, 0x22, 0xef, 0xc1, 0xb6, 0xd9, 0xd0, 0xf3, 0x83,
	0xc4, 0xbb, 0x30, 0xb3, 0x56, 0xfe, 0x08, 0xed, 0x48, 0xc5, 0x93, 0x08, 0x7b, 0x3c, 0x56, 0x09,
	0x0f, 0xa7, 0xf6, 0xf5, 0x6d, 0xb3, 0xaf, 0x01, 0xf4, 0xcc, 0x60, 0x6a, 0xfb, 0xfa, 0x39, 0xba,
	0x57, 0x95, 0x18, 0x26, 0x9c, 0xf8, 0x15, 0x91, 0x0d, 0x10, 0xb9, 0x5b, 0x16, 0xf9, 0xd6, 0x82,
	0xae, 0x94, 0x89, 0xd2, 0x50, 0x55, 0x6d, 0xd9, 0x9c, 0x96, 0x39, 0xb3, 0x20, 0x2b, 0x73, 0x5c,
	0x97, 0xb1, 0x0e, 0x25, 0x44, 0xe9, 0x5e, 0x82, 0x29, 0x77, 0x0b, 0x02, 0xd8, 0x6e, 0x70, 0xa9,
	0x4f, 0x14, 0x7d, 0x1d, 0x33, 0xe5, 0xfc, 0x02, 0xed, 0x5d, 0xe5, 0x53, 0xa1, 0xe3, 0x82, 0xce,
	0x4e, 0xa3, 0x57, 0x57, 0x2b, 0x15, 0x6e, 0x15, 0x4a, 0x77, 0xa6, 0x95, 0x72, 0xc7, 0x72, 0xa5,
	0x3d, 0xb4, 0xac, 0xeb, 0x77, 0x1e, 0x8d, 0x6d, 0x88, 0xc6, 0x92, 0x1e, 0xb3, 0xce, 0x5b, 0x88,
	0x4a, 0x52, 0xa9, 0xa8, 0xef, 0xb6, 0x0b, 0xc8, 0x85, 0x19, 0xd2, 0xfb, 0x89, 0x49, 0xec, 0x13,
	0x96, 0xeb, 0xdc, 0x05, 0xd0, 0x32, 0x93, 0xc7, 0x84, 0x59, 0xa1, 0x17, 0xe8, 0x7e, 0x86, 0x22,
	0xbe, 0x9f, 0xe0, 0x31, 0x09, 0x99, 0x6f, 0x4e, 0x37, 0x13, 0xe3, 0x27, 0x39, 0x75, 0x07, 0xa8,
	0xef, 0x03, 0xf5, 0xc8, 0xf7, 0x93, 0x37, 0x39, 0xae, 0x27, 0xc6, 0x4f, 0xac, 0xd8, 0x1b, 0xf4,
	0xf1, 0x15, 0x62, 0x92, 0xa7, 0x89, 0x47, 0xe1, 0x8c, 0x58, 0xc9, 0xf7, 0x41, 0xf2, 0x7e, 0x83,
	0xe4, 0x00, 0xc0, 0x67, 0x24, 0xdf, 0xbb, 0xbf, 0x41, 0x9d, 0x2b, 0x74, 0x7d, 0x2a, 0x15, 0x8b,
	0xcd, 0xef, 0xb2, 0xf8, 0x3d, 0x10, 0x3f, 0x68, 0x10, 0x3f, 0x2e, 0x18, 0xa5, 0x15, 0x1e, 0xa3,
	0xcd, 0x6c, 0x85, 0x7a, 0xae, 0xd9, 0x35, 0x99, 0x15, 0x94, 0x6a, 0x59, 0xe6, 0x01, 0x5a, 0x65,
	0x12, 0x33, 0x21, 0x0b, 0xf4, 0x9e, 0xa9, 0x3f, 0x4c, 0xf6, 0x84, 0xcc, 0x71, 0x4f, 0xd1, 0x96,
	0xc5, 0xd5, 0xd5, 0xf7, 0x01, 0x7f, 0xdb, 0xe0, 0x6b, 0xf2, 0xbf, 0x44, 0xfb, 0x4c, 0xe2, 0xb1,
	0x08, 0x25, 0x36, 0x15, 0x89, 0x0b, 0xc5, 0x22, 0xf6, 0x5b, 0xe3, 0xad, 0x55, 0xb8, 0x6f, 0xdf,
	0xcc, 0x1b, 0x11, 0xca, 0x13, 0x8d, 0x7b, 0x55, 0x82, 0x59, 0xad, 0x47, 0xc8, 0xd1, 0x8d, 0x0e,
	0x96, 0x31, 0xe7, 0xc5, 0xc6, 0xfa, 0xc0, 0xd4, 0x40, 0x3d, 0x33, 0xd0, 0x13, 0x16, 0xfd, 0x25,
	0xda, 0x2e, 0xa1, 0x6d, 0x1b, 0x60, 0x59, 0x1f, 0x02, 0x6b, 0x2b, 0x67, 0x9d, 0x9b, 0xf9, 0x3a,
	0xd9, 0xd8, 0x9c, 0xb5, 0x4a, 0x39, 0xf9, 0x41, 0x41, 0x06, 0x63, 0x4f, 0xcc, 0xbc, 0x25, 0x1f,
	0x22, 0x17, 0xc8, 0x51, 0xc2, 0x53, 0x95, 0xf5, 0x24, 0x96, 0xfa, 0x11, 0x50, 0x37, 0xf4, 0xfc,
	0x19, 0x4c, 0xeb, 0x7a, 0x55, 0x27, 0x1a, 0xde, 0x28, 0x2d, 0xaf, 0x79, 0x50, 0x10, 0xfb, 0x7a,
	0xfa, 0xe7, 0x69, 0x69, 0x45, 0x5d, 0x2a, 0x42, 0xbf, 0x16, 0x98, 0x8f, 0x81, 0xb1, 0x1a, 0x85,
	0x7e, 0x25, 0x2e, 0x5f, 0xa0, 0x3b, 0x05, 0xb6, 0x1e, 0x96, 0x4f, 0x80, 0xb3, 0x69, 0x39, 0xb5,
	0xa8, 0x64, 0xd4, 0xe6, 0xa0, 0x3c, 0xcc, 0xa9, 0x4d, 0x31, 0x79, 0x8a, 0xb6, 0x34, 0xb5, 0x29,
	0x24, 0x8f, 0xcc, 0xf6, 0x89, 0x42, 0x7f, 0x3a, 0x22, 0x19, 0xad, 0x29, 0x20, 0x3f, 0xca, 0x69,
	0xd3, 0xf1, 0x78, 0x88, 0xd6, 0xa5, 0x12, 0x58, 0x90, 0x44, 0x31, 0x8f, 0x09, 0xa2, 0x58, 0x3c,
	0x72, 0x3b, 0x66, 0xa3, 0x48, 0x25, 0xce, 0xcb, 0xe3, 0xba, 0x01, 0x1b, 0x8e, 0x99, 0xce, 0x78,
	0x01, 0x1b, 0xa5, 0x09, 0xf5, 0xdd, 0x4f, 0xcd, 0x01, 0x18, 0x8e, 0xd9, 0xb3, 0x7c, 0xd0, 0xd9,
	0x46, 0x2d, 0x26, 0xb1, 0x46, 0xa6, 0xc2, 0xfd, 0x31, 0x20, 0x16, 0x98, 0xfc, 0x76, 0xcc, 0x5e,
	0x8b, 0x2c, 0x4d, 0x8d, 0xe3, 0x22, 0x4d, 0x7d, 0x66, 0xd3, 0xd4, 0x9b, 0x98, 0x55, 0x8f, 0x1a,
	0xd5, 0xcd, 0xb7, 0x85, 0x75, 0xed, 0x51, 0x7b, 0x3e, 0x16, 0xf9, 0x3e, 0xef, 0xa1, 0xbd, 0x7a,
	0xdf, 0x36, 0xdd, 0xfa, 0x3d, 0x36, 0x47, 0x26, 0xad, 0x34, 0x6f, 0x27, 0xf5, 0x46, 0x50, 0x1f,
	0x19, 0x89, 0xc5, 0x70, 0x58, 0x59, 0xf5, 0x49, 0x76, 0x64, 0xe4, 0xb9, 0x99, 0x28, 0x6d, 0x23,
	0x26, 0xb1, 0x9c, 0x94, 0xdb, 0x33, 0xf7, 0xa9, 0xd9, 0x46, 0x4c, 0x0e, 0x26, 0xa5, 0xce, 0xcc,
	0x79, 0x08, 0xca, 0x20, 0x1b, 0x84, 0x7c, 0x82, 0x43, 0x32, 0xa4, 0xa1, 0xfb, 0xb9, 0x05, 0x6b,
	0x7f, 0x4e, 0x42, 0x3e, 0x39, 0xd5, 0xc3, 0x65, 0xb0, 0x37, 0xb1, 0x3e, 0xb8, 0x87, 0x65, 0xf0,
	0xb3, 0x49, 0x66, 0xb4, 0xbe, 0xa0, 0x47, 0x52, 0x31, 0xf7, 0x27, 0xd0, 0x09, 0xc0, 0xef, 0x4c,
	0x40, 0x74, 0x23, 0x81, 0xc5, 0x24, 0xf7, 0xe3, 0x0b, 0x2b, 0x70, 0xde, 0x8d, 0xc4, 0xf9, 0xc4,
	0xba, 0x61, 0xba, 0xb5, 0x86, 0x54, 0xf1, 0x53, 0xdb, 0xad, 0xf5, 0xea, 0xc9, 0xe2, 0xd7, 0xe8,
	0x51, 0x3c, 0xc6, 0x92, 0x28, 0x1a, 0x86, 0x4c, 0x51, 0xcc, 0x83, 0x20, 0xe4, 0xc4, 0x37, 0xf5,
	0xa3, 0xa8, 0x81, 0x79, 0xf4, 0xbf, 0x04, 0xa5, 0x8f, 0xe2, 0xf1, 0xc0, 0x52, 0x5e, 0x19, 0x86,
	0xae, 0x24, 0x79, 0x31, 0xcc, 0x5f, 0xc3, 0x5f, 0x66, 0xd1, 0x42, 0x76, 0xfd, 0x77, 0xbf, 0xda,
	0xbd, 0x71, 0xb0, 0xd4, 0xfd, 0xfd, 0xf5, 0xf5, 0xac, 0xf6, 0xd9, 0xa4, 0x6f, 0x23, 0xe4, 0xec,
	0x20, 0x44, 0x55, 0x42, 0xa9, 0xde, 0x83, 0x81, 0xfb, 0x35, 0x84, 0xba, 0x05, 0x23, 0xa7, 0x94,
	0x04, 0xfb, 0xff, 0xbe, 0x89, 0xda, 0xa5, 0xfb, 0x5b, 0x59, 0x1a, 0xee, 0x72, 0xff, 0x9c, 0x45,
	0x5b, 0x7a, 0x06, 0x6a, 0x07, 0x31, 0xdf, 0xa2, 0x92, 0x08, 0x9e, 0xe0, 0x82, 0xb7, 0xd4, 0xfd,
	0xdd, 0x75, 0xf0, 0xab, 0xf7, 0xdf, 0xfe, 0x66, 0x29, 0x60, 0xbd, 0x22, 0x5e, 0x3a, 0xe3, 0xdb,
	0x14, 0x54, 0xed, 0x0b, 0x85, 0x90, 0x70, 0x21, 0x9e, 0xeb, 0x6f, 0x66, 0x80, 0x41, 0xa9, 0x1d,
	0x3c, 0x17, 0xd2, 0xf9, 0x0a, 0xb5, 0x9b, 0xa9, 0xdf, 0x0d, 0xb1, 0x90, 0x70, 0x59, 0x9e, 0xeb,
	0x6f, 0x35, 0x90, 0x5f, 0x0c, 0xcf, 0xa5, 0xbe, 0xb0, 0x15, 0x4d, 0xec, 0xf4, 0xd2, 0x73, 0xc0,
	0x76, 0x73, 0x48, 0x7d, 0xf1, 0x6f, 0xd0, 0xce, 0x55, 0x74, 0xb3, 0xfc, 0x4d, 0x10, 0xb8, 0xd3,
	0x28, 0x60, 0x0d, 0x28, 0xce, 0xfd, 0xb4, 0x01, 0xf3, 0xc6, 0x80, 0x1c, 0xd2, 0x60, 0xc0, 0x55,
	0x74, 0x63, 0xc0, 0x82, 0x31, 0xa0, 0x51, 0x40, 0x1b, 0xb0, 0xff, 0x8f, 0x39, 0xf4, 0xe9, 0x3b,
	0x7e, 0x71, 0xd5, 0x75, 0xa8, 0x72, 0x1c, 0x4c, 0x81, 0x69, 0xf5, 0x97, 0xcd, 0xa8, 0xae, 0xac,
	0x3d, 0xdf, 0x69, 0xa3, 0x56, 0x86, 0x62, 0xa6, 0x8e, 0xac, 0xf4, 0x17, 0xcd, 0x40, 0xcf, 0x77,
	0x6e, 0xa3, 0x9b, 0x52, 0x11, 0x45, 0xa1, 0x48, 0xb4, 0xfa, 0xe6, 0x41, 0xd7, 0xc8, 0xaa, 0x15,
	0x50, 0x16, 0x5a, 0xfd, 0x95, 0xca, 0xb7, 0x57, 0x67, 0x17, 0x2d, 0x1b, 0x58, 0x60, 0x2e, 0x7f,
	0x9f, 0x83, 0x38, 0x02, 0x50, 0x00, 0x57, 0xbf, 0x07, 0x68, 0x75, 0xcc, 0x12, 0x95, 0xea, 0x73,
	0x19, 0x98, 0xcf, 0xaa, 0x87, 0x46, 0x29, 0x1b, 0xee, 0x05, 0x2f, 0x49, 0x44, 0x9d, 0x2d, 0xb4,
	0x30, 0x14, 0x46, 0xc4, 0xd4, 0x81, 0xf9, 0xa1, 0x00, 0x81, 0xbf, 0xce, 0xa2, 0x39, 0xbd, 0x59,
	0x21, 0xf9, 0x2f, 0x75, 0xff, 0x78, 0x7d, 0x94, 0xaf, 0x4e, 0x85, 0x7d, 0x88, 0xd4, 0x70, 0x1e,
	0xfe, 0x87, 0xf1, 0xf8, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x3f, 0x8d, 0x9d, 0x84, 0xfc, 0x18,
	0x00, 0x00,
}
