/*
Copyright 2019 Cisco Systems

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: eigrp_show_prot_vrf_bd.proto

package cisco_ios_xr_eigrp_oper_eigrp_processes_process_vrfs_vrf_afs_af_protocol

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type EigrpShowProtVrfBd_KEYS struct {
	ProcessId            string   `protobuf:"bytes,1,opt,name=process_id,json=processId,proto3" json:"process_id,omitempty"`
	VrfName              string   `protobuf:"bytes,2,opt,name=vrf_name,json=vrfName,proto3" json:"vrf_name,omitempty"`
	AfName               string   `protobuf:"bytes,3,opt,name=af_name,json=afName,proto3" json:"af_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EigrpShowProtVrfBd_KEYS) Reset()         { *m = EigrpShowProtVrfBd_KEYS{} }
func (m *EigrpShowProtVrfBd_KEYS) String() string { return proto.CompactTextString(m) }
func (*EigrpShowProtVrfBd_KEYS) ProtoMessage()    {}
func (*EigrpShowProtVrfBd_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_b1fa1e154f2fba5c, []int{0}
}

func (m *EigrpShowProtVrfBd_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EigrpShowProtVrfBd_KEYS.Unmarshal(m, b)
}
func (m *EigrpShowProtVrfBd_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EigrpShowProtVrfBd_KEYS.Marshal(b, m, deterministic)
}
func (m *EigrpShowProtVrfBd_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EigrpShowProtVrfBd_KEYS.Merge(m, src)
}
func (m *EigrpShowProtVrfBd_KEYS) XXX_Size() int {
	return xxx_messageInfo_EigrpShowProtVrfBd_KEYS.Size(m)
}
func (m *EigrpShowProtVrfBd_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_EigrpShowProtVrfBd_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_EigrpShowProtVrfBd_KEYS proto.InternalMessageInfo

func (m *EigrpShowProtVrfBd_KEYS) GetProcessId() string {
	if m != nil {
		return m.ProcessId
	}
	return ""
}

func (m *EigrpShowProtVrfBd_KEYS) GetVrfName() string {
	if m != nil {
		return m.VrfName
	}
	return ""
}

func (m *EigrpShowProtVrfBd_KEYS) GetAfName() string {
	if m != nil {
		return m.AfName
	}
	return ""
}

type EigrpShowRedistBd struct {
	Afi                      uint32   `protobuf:"varint,1,opt,name=afi,proto3" json:"afi,omitempty"`
	RedistributedProtocol    string   `protobuf:"bytes,2,opt,name=redistributed_protocol,json=redistributedProtocol,proto3" json:"redistributed_protocol,omitempty"`
	RedistributedProtocolTag string   `protobuf:"bytes,3,opt,name=redistributed_protocol_tag,json=redistributedProtocolTag,proto3" json:"redistributed_protocol_tag,omitempty"`
	RedristributePolicy      string   `protobuf:"bytes,4,opt,name=redristribute_policy,json=redristributePolicy,proto3" json:"redristribute_policy,omitempty"`
	RedistributeProtocolId   uint32   `protobuf:"varint,5,opt,name=redistribute_protocol_id,json=redistributeProtocolId,proto3" json:"redistribute_protocol_id,omitempty"`
	RibHandle                uint32   `protobuf:"varint,6,opt,name=rib_handle,json=ribHandle,proto3" json:"rib_handle,omitempty"`
	XXX_NoUnkeyedLiteral     struct{} `json:"-"`
	XXX_unrecognized         []byte   `json:"-"`
	XXX_sizecache            int32    `json:"-"`
}

func (m *EigrpShowRedistBd) Reset()         { *m = EigrpShowRedistBd{} }
func (m *EigrpShowRedistBd) String() string { return proto.CompactTextString(m) }
func (*EigrpShowRedistBd) ProtoMessage()    {}
func (*EigrpShowRedistBd) Descriptor() ([]byte, []int) {
	return fileDescriptor_b1fa1e154f2fba5c, []int{1}
}

func (m *EigrpShowRedistBd) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EigrpShowRedistBd.Unmarshal(m, b)
}
func (m *EigrpShowRedistBd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EigrpShowRedistBd.Marshal(b, m, deterministic)
}
func (m *EigrpShowRedistBd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EigrpShowRedistBd.Merge(m, src)
}
func (m *EigrpShowRedistBd) XXX_Size() int {
	return xxx_messageInfo_EigrpShowRedistBd.Size(m)
}
func (m *EigrpShowRedistBd) XXX_DiscardUnknown() {
	xxx_messageInfo_EigrpShowRedistBd.DiscardUnknown(m)
}

var xxx_messageInfo_EigrpShowRedistBd proto.InternalMessageInfo

func (m *EigrpShowRedistBd) GetAfi() uint32 {
	if m != nil {
		return m.Afi
	}
	return 0
}

func (m *EigrpShowRedistBd) GetRedistributedProtocol() string {
	if m != nil {
		return m.RedistributedProtocol
	}
	return ""
}

func (m *EigrpShowRedistBd) GetRedistributedProtocolTag() string {
	if m != nil {
		return m.RedistributedProtocolTag
	}
	return ""
}

func (m *EigrpShowRedistBd) GetRedristributePolicy() string {
	if m != nil {
		return m.RedristributePolicy
	}
	return ""
}

func (m *EigrpShowRedistBd) GetRedistributeProtocolId() uint32 {
	if m != nil {
		return m.RedistributeProtocolId
	}
	return 0
}

func (m *EigrpShowRedistBd) GetRibHandle() uint32 {
	if m != nil {
		return m.RibHandle
	}
	return 0
}

type EigrpShowProtIntBd struct {
	Afi                  uint32   `protobuf:"varint,1,opt,name=afi,proto3" json:"afi,omitempty"`
	Interface            string   `protobuf:"bytes,2,opt,name=interface,proto3" json:"interface,omitempty"`
	OutboundFilterPolicy string   `protobuf:"bytes,3,opt,name=outbound_filter_policy,json=outboundFilterPolicy,proto3" json:"outbound_filter_policy,omitempty"`
	InboundFilterPolicy  string   `protobuf:"bytes,4,opt,name=inbound_filter_policy,json=inboundFilterPolicy,proto3" json:"inbound_filter_policy,omitempty"`
	Inactive             bool     `protobuf:"varint,5,opt,name=inactive,proto3" json:"inactive,omitempty"`
	PassiveInterface     bool     `protobuf:"varint,6,opt,name=passive_interface,json=passiveInterface,proto3" json:"passive_interface,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EigrpShowProtIntBd) Reset()         { *m = EigrpShowProtIntBd{} }
func (m *EigrpShowProtIntBd) String() string { return proto.CompactTextString(m) }
func (*EigrpShowProtIntBd) ProtoMessage()    {}
func (*EigrpShowProtIntBd) Descriptor() ([]byte, []int) {
	return fileDescriptor_b1fa1e154f2fba5c, []int{2}
}

func (m *EigrpShowProtIntBd) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EigrpShowProtIntBd.Unmarshal(m, b)
}
func (m *EigrpShowProtIntBd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EigrpShowProtIntBd.Marshal(b, m, deterministic)
}
func (m *EigrpShowProtIntBd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EigrpShowProtIntBd.Merge(m, src)
}
func (m *EigrpShowProtIntBd) XXX_Size() int {
	return xxx_messageInfo_EigrpShowProtIntBd.Size(m)
}
func (m *EigrpShowProtIntBd) XXX_DiscardUnknown() {
	xxx_messageInfo_EigrpShowProtIntBd.DiscardUnknown(m)
}

var xxx_messageInfo_EigrpShowProtIntBd proto.InternalMessageInfo

func (m *EigrpShowProtIntBd) GetAfi() uint32 {
	if m != nil {
		return m.Afi
	}
	return 0
}

func (m *EigrpShowProtIntBd) GetInterface() string {
	if m != nil {
		return m.Interface
	}
	return ""
}

func (m *EigrpShowProtIntBd) GetOutboundFilterPolicy() string {
	if m != nil {
		return m.OutboundFilterPolicy
	}
	return ""
}

func (m *EigrpShowProtIntBd) GetInboundFilterPolicy() string {
	if m != nil {
		return m.InboundFilterPolicy
	}
	return ""
}

func (m *EigrpShowProtIntBd) GetInactive() bool {
	if m != nil {
		return m.Inactive
	}
	return false
}

func (m *EigrpShowProtIntBd) GetPassiveInterface() bool {
	if m != nil {
		return m.PassiveInterface
	}
	return false
}

type EigrpShowProtVrfBd struct {
	Afi                             uint32                `protobuf:"varint,50,opt,name=afi,proto3" json:"afi,omitempty"`
	AsNumber                        uint32                `protobuf:"varint,51,opt,name=as_number,json=asNumber,proto3" json:"as_number,omitempty"`
	RouterId                        string                `protobuf:"bytes,52,opt,name=router_id,json=routerId,proto3" json:"router_id,omitempty"`
	AutoSummarization               bool                  `protobuf:"varint,53,opt,name=auto_summarization,json=autoSummarization,proto3" json:"auto_summarization,omitempty"`
	LogNeighborChanges              bool                  `protobuf:"varint,54,opt,name=log_neighbor_changes,json=logNeighborChanges,proto3" json:"log_neighbor_changes,omitempty"`
	LogNeighborWarnings             bool                  `protobuf:"varint,55,opt,name=log_neighbor_warnings,json=logNeighborWarnings,proto3" json:"log_neighbor_warnings,omitempty"`
	RibTableLimitReached            bool                  `protobuf:"varint,56,opt,name=rib_table_limit_reached,json=ribTableLimitReached,proto3" json:"rib_table_limit_reached,omitempty"`
	OutboundFilterPolicy            string                `protobuf:"bytes,57,opt,name=outbound_filter_policy,json=outboundFilterPolicy,proto3" json:"outbound_filter_policy,omitempty"`
	InboundFilterPolicy             string                `protobuf:"bytes,58,opt,name=inbound_filter_policy,json=inboundFilterPolicy,proto3" json:"inbound_filter_policy,omitempty"`
	OutgoingCandidateDefaultFlagged bool                  `protobuf:"varint,59,opt,name=outgoing_candidate_default_flagged,json=outgoingCandidateDefaultFlagged,proto3" json:"outgoing_candidate_default_flagged,omitempty"`
	OutgoingCandidateDefaultPolicy  string                `protobuf:"bytes,60,opt,name=outgoing_candidate_default_policy,json=outgoingCandidateDefaultPolicy,proto3" json:"outgoing_candidate_default_policy,omitempty"`
	IncomingCandidateDefaultFlagged bool                  `protobuf:"varint,61,opt,name=incoming_candidate_default_flagged,json=incomingCandidateDefaultFlagged,proto3" json:"incoming_candidate_default_flagged,omitempty"`
	IncomingCandidateDefaultPolicy  string                `protobuf:"bytes,62,opt,name=incoming_candidate_default_policy,json=incomingCandidateDefaultPolicy,proto3" json:"incoming_candidate_default_policy,omitempty"`
	InternalDistance                uint32                `protobuf:"varint,63,opt,name=internal_distance,json=internalDistance,proto3" json:"internal_distance,omitempty"`
	ExternalDistance                uint32                `protobuf:"varint,64,opt,name=external_distance,json=externalDistance,proto3" json:"external_distance,omitempty"`
	MaximumPaths                    uint32                `protobuf:"varint,65,opt,name=maximum_paths,json=maximumPaths,proto3" json:"maximum_paths,omitempty"`
	Variance                        uint32                `protobuf:"varint,66,opt,name=variance,proto3" json:"variance,omitempty"`
	MetricWeightK1                  uint32                `protobuf:"varint,67,opt,name=metric_weight_k1,json=metricWeightK1,proto3" json:"metric_weight_k1,omitempty"`
	MetricWeightK2                  uint32                `protobuf:"varint,68,opt,name=metric_weight_k2,json=metricWeightK2,proto3" json:"metric_weight_k2,omitempty"`
	MetricWeightK3                  uint32                `protobuf:"varint,69,opt,name=metric_weight_k3,json=metricWeightK3,proto3" json:"metric_weight_k3,omitempty"`
	MetricWeightK4                  uint32                `protobuf:"varint,70,opt,name=metric_weight_k4,json=metricWeightK4,proto3" json:"metric_weight_k4,omitempty"`
	MetricWeightK5                  uint32                `protobuf:"varint,71,opt,name=metric_weight_k5,json=metricWeightK5,proto3" json:"metric_weight_k5,omitempty"`
	MetricWeightK6                  uint32                `protobuf:"varint,72,opt,name=metric_weight_k6,json=metricWeightK6,proto3" json:"metric_weight_k6,omitempty"`
	RibScale                        uint32                `protobuf:"varint,73,opt,name=rib_scale,json=ribScale,proto3" json:"rib_scale,omitempty"`
	MetricVersion                   string                `protobuf:"bytes,74,opt,name=metric_version,json=metricVersion,proto3" json:"metric_version,omitempty"`
	MetricMaximumHopcount           uint32                `protobuf:"varint,75,opt,name=metric_maximum_hopcount,json=metricMaximumHopcount,proto3" json:"metric_maximum_hopcount,omitempty"`
	DefaultMetricConfigured         bool                  `protobuf:"varint,76,opt,name=default_metric_configured,json=defaultMetricConfigured,proto3" json:"default_metric_configured,omitempty"`
	DefaultBandwidth                uint32                `protobuf:"varint,77,opt,name=default_bandwidth,json=defaultBandwidth,proto3" json:"default_bandwidth,omitempty"`
	DefaultDelay                    uint32                `protobuf:"varint,78,opt,name=default_delay,json=defaultDelay,proto3" json:"default_delay,omitempty"`
	DefaultReliability              uint32                `protobuf:"varint,79,opt,name=default_reliability,json=defaultReliability,proto3" json:"default_reliability,omitempty"`
	DefaultLoad                     uint32                `protobuf:"varint,80,opt,name=default_load,json=defaultLoad,proto3" json:"default_load,omitempty"`
	DefaultMtu                      uint32                `protobuf:"varint,81,opt,name=default_mtu,json=defaultMtu,proto3" json:"default_mtu,omitempty"`
	StubConfigured                  bool                  `protobuf:"varint,82,opt,name=stub_configured,json=stubConfigured,proto3" json:"stub_configured,omitempty"`
	StubReceiveOnly                 bool                  `protobuf:"varint,83,opt,name=stub_receive_only,json=stubReceiveOnly,proto3" json:"stub_receive_only,omitempty"`
	StubAllowConnectedRoutes        bool                  `protobuf:"varint,84,opt,name=stub_allow_connected_routes,json=stubAllowConnectedRoutes,proto3" json:"stub_allow_connected_routes,omitempty"`
	StubAllowStaticRoutes           bool                  `protobuf:"varint,85,opt,name=stub_allow_static_routes,json=stubAllowStaticRoutes,proto3" json:"stub_allow_static_routes,omitempty"`
	StubAllowSummaryRoutes          bool                  `protobuf:"varint,86,opt,name=stub_allow_summary_routes,json=stubAllowSummaryRoutes,proto3" json:"stub_allow_summary_routes,omitempty"`
	StubAllowRedistributedRoutes    bool                  `protobuf:"varint,87,opt,name=stub_allow_redistributed_routes,json=stubAllowRedistributedRoutes,proto3" json:"stub_allow_redistributed_routes,omitempty"`
	NsfEnabled                      bool                  `protobuf:"varint,88,opt,name=nsf_enabled,json=nsfEnabled,proto3" json:"nsf_enabled,omitempty"`
	NsfRouteHoldTime                uint32                `protobuf:"varint,89,opt,name=nsf_route_hold_time,json=nsfRouteHoldTime,proto3" json:"nsf_route_hold_time,omitempty"`
	NsfSignalTime                   uint32                `protobuf:"varint,90,opt,name=nsf_signal_time,json=nsfSignalTime,proto3" json:"nsf_signal_time,omitempty"`
	NsfConvergeTime                 uint32                `protobuf:"varint,91,opt,name=nsf_converge_time,json=nsfConvergeTime,proto3" json:"nsf_converge_time,omitempty"`
	RestartConfigured               bool                  `protobuf:"varint,92,opt,name=restart_configured,json=restartConfigured,proto3" json:"restart_configured,omitempty"`
	RestartTime                     uint32                `protobuf:"varint,93,opt,name=restart_time,json=restartTime,proto3" json:"restart_time,omitempty"`
	SiaActiveTime                   uint32                `protobuf:"varint,94,opt,name=sia_active_time,json=siaActiveTime,proto3" json:"sia_active_time,omitempty"`
	RedistributedProtocol           []*EigrpShowRedistBd  `protobuf:"bytes,95,rep,name=redistributed_protocol,json=redistributedProtocol,proto3" json:"redistributed_protocol,omitempty"`
	Interface                       []*EigrpShowProtIntBd `protobuf:"bytes,96,rep,name=interface,proto3" json:"interface,omitempty"`
	RibProtocolId                   uint32                `protobuf:"varint,97,opt,name=rib_protocol_id,json=ribProtocolId,proto3" json:"rib_protocol_id,omitempty"`
	TableId                         uint32                `protobuf:"varint,98,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
	VrfId                           uint32                `protobuf:"varint,99,opt,name=vrf_id,json=vrfId,proto3" json:"vrf_id,omitempty"`
	ItalActivationReceived          bool                  `protobuf:"varint,100,opt,name=ital_activation_received,json=italActivationReceived,proto3" json:"ital_activation_received,omitempty"`
	VrfActivated                    bool                  `protobuf:"varint,101,opt,name=vrf_activated,json=vrfActivated,proto3" json:"vrf_activated,omitempty"`
	Up                              bool                  `protobuf:"varint,102,opt,name=up,proto3" json:"up,omitempty"`
	RibInitialized                  bool                  `protobuf:"varint,103,opt,name=rib_initialized,json=ribInitialized,proto3" json:"rib_initialized,omitempty"`
	RibConverged                    bool                  `protobuf:"varint,104,opt,name=rib_converged,json=ribConverged,proto3" json:"rib_converged,omitempty"`
	RibConvergedReload              bool                  `protobuf:"varint,105,opt,name=rib_converged_reload,json=ribConvergedReload,proto3" json:"rib_converged_reload,omitempty"`
	SocketRequest                   bool                  `protobuf:"varint,106,opt,name=socket_request,json=socketRequest,proto3" json:"socket_request,omitempty"`
	SocketSetup                     bool                  `protobuf:"varint,107,opt,name=socket_setup,json=socketSetup,proto3" json:"socket_setup,omitempty"`
	DefaultVrf                      bool                  `protobuf:"varint,108,opt,name=default_vrf,json=defaultVrf,proto3" json:"default_vrf,omitempty"`
	AfEnabled                       bool                  `protobuf:"varint,109,opt,name=af_enabled,json=afEnabled,proto3" json:"af_enabled,omitempty"`
	IsPassiveDefault                bool                  `protobuf:"varint,110,opt,name=is_passive_default,json=isPassiveDefault,proto3" json:"is_passive_default,omitempty"`
	ConfiguredItems                 uint32                `protobuf:"varint,111,opt,name=configured_items,json=configuredItems,proto3" json:"configured_items,omitempty"`
	AfConfiguredItems               uint32                `protobuf:"varint,112,opt,name=af_configured_items,json=afConfiguredItems,proto3" json:"af_configured_items,omitempty"`
	IpArmRouterId                   uint32                `protobuf:"varint,113,opt,name=ip_arm_router_id,json=ipArmRouterId,proto3" json:"ip_arm_router_id,omitempty"`
	FirstInterfaceUpAddress         uint32                `protobuf:"varint,114,opt,name=first_interface_up_address,json=firstInterfaceUpAddress,proto3" json:"first_interface_up_address,omitempty"`
	NsfInProgress                   uint32                `protobuf:"varint,115,opt,name=nsf_in_progress,json=nsfInProgress,proto3" json:"nsf_in_progress,omitempty"`
	RibTableConverged               uint32                `protobuf:"varint,116,opt,name=rib_table_converged,json=ribTableConverged,proto3" json:"rib_table_converged,omitempty"`
	XXX_NoUnkeyedLiteral            struct{}              `json:"-"`
	XXX_unrecognized                []byte                `json:"-"`
	XXX_sizecache                   int32                 `json:"-"`
}

func (m *EigrpShowProtVrfBd) Reset()         { *m = EigrpShowProtVrfBd{} }
func (m *EigrpShowProtVrfBd) String() string { return proto.CompactTextString(m) }
func (*EigrpShowProtVrfBd) ProtoMessage()    {}
func (*EigrpShowProtVrfBd) Descriptor() ([]byte, []int) {
	return fileDescriptor_b1fa1e154f2fba5c, []int{3}
}

func (m *EigrpShowProtVrfBd) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EigrpShowProtVrfBd.Unmarshal(m, b)
}
func (m *EigrpShowProtVrfBd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EigrpShowProtVrfBd.Marshal(b, m, deterministic)
}
func (m *EigrpShowProtVrfBd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EigrpShowProtVrfBd.Merge(m, src)
}
func (m *EigrpShowProtVrfBd) XXX_Size() int {
	return xxx_messageInfo_EigrpShowProtVrfBd.Size(m)
}
func (m *EigrpShowProtVrfBd) XXX_DiscardUnknown() {
	xxx_messageInfo_EigrpShowProtVrfBd.DiscardUnknown(m)
}

var xxx_messageInfo_EigrpShowProtVrfBd proto.InternalMessageInfo

func (m *EigrpShowProtVrfBd) GetAfi() uint32 {
	if m != nil {
		return m.Afi
	}
	return 0
}

func (m *EigrpShowProtVrfBd) GetAsNumber() uint32 {
	if m != nil {
		return m.AsNumber
	}
	return 0
}

func (m *EigrpShowProtVrfBd) GetRouterId() string {
	if m != nil {
		return m.RouterId
	}
	return ""
}

func (m *EigrpShowProtVrfBd) GetAutoSummarization() bool {
	if m != nil {
		return m.AutoSummarization
	}
	return false
}

func (m *EigrpShowProtVrfBd) GetLogNeighborChanges() bool {
	if m != nil {
		return m.LogNeighborChanges
	}
	return false
}

func (m *EigrpShowProtVrfBd) GetLogNeighborWarnings() bool {
	if m != nil {
		return m.LogNeighborWarnings
	}
	return false
}

func (m *EigrpShowProtVrfBd) GetRibTableLimitReached() bool {
	if m != nil {
		return m.RibTableLimitReached
	}
	return false
}

func (m *EigrpShowProtVrfBd) GetOutboundFilterPolicy() string {
	if m != nil {
		return m.OutboundFilterPolicy
	}
	return ""
}

func (m *EigrpShowProtVrfBd) GetInboundFilterPolicy() string {
	if m != nil {
		return m.InboundFilterPolicy
	}
	return ""
}

func (m *EigrpShowProtVrfBd) GetOutgoingCandidateDefaultFlagged() bool {
	if m != nil {
		return m.OutgoingCandidateDefaultFlagged
	}
	return false
}

func (m *EigrpShowProtVrfBd) GetOutgoingCandidateDefaultPolicy() string {
	if m != nil {
		return m.OutgoingCandidateDefaultPolicy
	}
	return ""
}

func (m *EigrpShowProtVrfBd) GetIncomingCandidateDefaultFlagged() bool {
	if m != nil {
		return m.IncomingCandidateDefaultFlagged
	}
	return false
}

func (m *EigrpShowProtVrfBd) GetIncomingCandidateDefaultPolicy() string {
	if m != nil {
		return m.IncomingCandidateDefaultPolicy
	}
	return ""
}

func (m *EigrpShowProtVrfBd) GetInternalDistance() uint32 {
	if m != nil {
		return m.InternalDistance
	}
	return 0
}

func (m *EigrpShowProtVrfBd) GetExternalDistance() uint32 {
	if m != nil {
		return m.ExternalDistance
	}
	return 0
}

func (m *EigrpShowProtVrfBd) GetMaximumPaths() uint32 {
	if m != nil {
		return m.MaximumPaths
	}
	return 0
}

func (m *EigrpShowProtVrfBd) GetVariance() uint32 {
	if m != nil {
		return m.Variance
	}
	return 0
}

func (m *EigrpShowProtVrfBd) GetMetricWeightK1() uint32 {
	if m != nil {
		return m.MetricWeightK1
	}
	return 0
}

func (m *EigrpShowProtVrfBd) GetMetricWeightK2() uint32 {
	if m != nil {
		return m.MetricWeightK2
	}
	return 0
}

func (m *EigrpShowProtVrfBd) GetMetricWeightK3() uint32 {
	if m != nil {
		return m.MetricWeightK3
	}
	return 0
}

func (m *EigrpShowProtVrfBd) GetMetricWeightK4() uint32 {
	if m != nil {
		return m.MetricWeightK4
	}
	return 0
}

func (m *EigrpShowProtVrfBd) GetMetricWeightK5() uint32 {
	if m != nil {
		return m.MetricWeightK5
	}
	return 0
}

func (m *EigrpShowProtVrfBd) GetMetricWeightK6() uint32 {
	if m != nil {
		return m.MetricWeightK6
	}
	return 0
}

func (m *EigrpShowProtVrfBd) GetRibScale() uint32 {
	if m != nil {
		return m.RibScale
	}
	return 0
}

func (m *EigrpShowProtVrfBd) GetMetricVersion() string {
	if m != nil {
		return m.MetricVersion
	}
	return ""
}

func (m *EigrpShowProtVrfBd) GetMetricMaximumHopcount() uint32 {
	if m != nil {
		return m.MetricMaximumHopcount
	}
	return 0
}

func (m *EigrpShowProtVrfBd) GetDefaultMetricConfigured() bool {
	if m != nil {
		return m.DefaultMetricConfigured
	}
	return false
}

func (m *EigrpShowProtVrfBd) GetDefaultBandwidth() uint32 {
	if m != nil {
		return m.DefaultBandwidth
	}
	return 0
}

func (m *EigrpShowProtVrfBd) GetDefaultDelay() uint32 {
	if m != nil {
		return m.DefaultDelay
	}
	return 0
}

func (m *EigrpShowProtVrfBd) GetDefaultReliability() uint32 {
	if m != nil {
		return m.DefaultReliability
	}
	return 0
}

func (m *EigrpShowProtVrfBd) GetDefaultLoad() uint32 {
	if m != nil {
		return m.DefaultLoad
	}
	return 0
}

func (m *EigrpShowProtVrfBd) GetDefaultMtu() uint32 {
	if m != nil {
		return m.DefaultMtu
	}
	return 0
}

func (m *EigrpShowProtVrfBd) GetStubConfigured() bool {
	if m != nil {
		return m.StubConfigured
	}
	return false
}

func (m *EigrpShowProtVrfBd) GetStubReceiveOnly() bool {
	if m != nil {
		return m.StubReceiveOnly
	}
	return false
}

func (m *EigrpShowProtVrfBd) GetStubAllowConnectedRoutes() bool {
	if m != nil {
		return m.StubAllowConnectedRoutes
	}
	return false
}

func (m *EigrpShowProtVrfBd) GetStubAllowStaticRoutes() bool {
	if m != nil {
		return m.StubAllowStaticRoutes
	}
	return false
}

func (m *EigrpShowProtVrfBd) GetStubAllowSummaryRoutes() bool {
	if m != nil {
		return m.StubAllowSummaryRoutes
	}
	return false
}

func (m *EigrpShowProtVrfBd) GetStubAllowRedistributedRoutes() bool {
	if m != nil {
		return m.StubAllowRedistributedRoutes
	}
	return false
}

func (m *EigrpShowProtVrfBd) GetNsfEnabled() bool {
	if m != nil {
		return m.NsfEnabled
	}
	return false
}

func (m *EigrpShowProtVrfBd) GetNsfRouteHoldTime() uint32 {
	if m != nil {
		return m.NsfRouteHoldTime
	}
	return 0
}

func (m *EigrpShowProtVrfBd) GetNsfSignalTime() uint32 {
	if m != nil {
		return m.NsfSignalTime
	}
	return 0
}

func (m *EigrpShowProtVrfBd) GetNsfConvergeTime() uint32 {
	if m != nil {
		return m.NsfConvergeTime
	}
	return 0
}

func (m *EigrpShowProtVrfBd) GetRestartConfigured() bool {
	if m != nil {
		return m.RestartConfigured
	}
	return false
}

func (m *EigrpShowProtVrfBd) GetRestartTime() uint32 {
	if m != nil {
		return m.RestartTime
	}
	return 0
}

func (m *EigrpShowProtVrfBd) GetSiaActiveTime() uint32 {
	if m != nil {
		return m.SiaActiveTime
	}
	return 0
}

func (m *EigrpShowProtVrfBd) GetRedistributedProtocol() []*EigrpShowRedistBd {
	if m != nil {
		return m.RedistributedProtocol
	}
	return nil
}

func (m *EigrpShowProtVrfBd) GetInterface() []*EigrpShowProtIntBd {
	if m != nil {
		return m.Interface
	}
	return nil
}

func (m *EigrpShowProtVrfBd) GetRibProtocolId() uint32 {
	if m != nil {
		return m.RibProtocolId
	}
	return 0
}

func (m *EigrpShowProtVrfBd) GetTableId() uint32 {
	if m != nil {
		return m.TableId
	}
	return 0
}

func (m *EigrpShowProtVrfBd) GetVrfId() uint32 {
	if m != nil {
		return m.VrfId
	}
	return 0
}

func (m *EigrpShowProtVrfBd) GetItalActivationReceived() bool {
	if m != nil {
		return m.ItalActivationReceived
	}
	return false
}

func (m *EigrpShowProtVrfBd) GetVrfActivated() bool {
	if m != nil {
		return m.VrfActivated
	}
	return false
}

func (m *EigrpShowProtVrfBd) GetUp() bool {
	if m != nil {
		return m.Up
	}
	return false
}

func (m *EigrpShowProtVrfBd) GetRibInitialized() bool {
	if m != nil {
		return m.RibInitialized
	}
	return false
}

func (m *EigrpShowProtVrfBd) GetRibConverged() bool {
	if m != nil {
		return m.RibConverged
	}
	return false
}

func (m *EigrpShowProtVrfBd) GetRibConvergedReload() bool {
	if m != nil {
		return m.RibConvergedReload
	}
	return false
}

func (m *EigrpShowProtVrfBd) GetSocketRequest() bool {
	if m != nil {
		return m.SocketRequest
	}
	return false
}

func (m *EigrpShowProtVrfBd) GetSocketSetup() bool {
	if m != nil {
		return m.SocketSetup
	}
	return false
}

func (m *EigrpShowProtVrfBd) GetDefaultVrf() bool {
	if m != nil {
		return m.DefaultVrf
	}
	return false
}

func (m *EigrpShowProtVrfBd) GetAfEnabled() bool {
	if m != nil {
		return m.AfEnabled
	}
	return false
}

func (m *EigrpShowProtVrfBd) GetIsPassiveDefault() bool {
	if m != nil {
		return m.IsPassiveDefault
	}
	return false
}

func (m *EigrpShowProtVrfBd) GetConfiguredItems() uint32 {
	if m != nil {
		return m.ConfiguredItems
	}
	return 0
}

func (m *EigrpShowProtVrfBd) GetAfConfiguredItems() uint32 {
	if m != nil {
		return m.AfConfiguredItems
	}
	return 0
}

func (m *EigrpShowProtVrfBd) GetIpArmRouterId() uint32 {
	if m != nil {
		return m.IpArmRouterId
	}
	return 0
}

func (m *EigrpShowProtVrfBd) GetFirstInterfaceUpAddress() uint32 {
	if m != nil {
		return m.FirstInterfaceUpAddress
	}
	return 0
}

func (m *EigrpShowProtVrfBd) GetNsfInProgress() uint32 {
	if m != nil {
		return m.NsfInProgress
	}
	return 0
}

func (m *EigrpShowProtVrfBd) GetRibTableConverged() uint32 {
	if m != nil {
		return m.RibTableConverged
	}
	return 0
}

func init() {
	proto.RegisterType((*EigrpShowProtVrfBd_KEYS)(nil), "cisco_ios_xr_eigrp_oper.eigrp.processes.process.vrfs.vrf.afs.af.protocol.eigrp_show_prot_vrf_bd_KEYS")
	proto.RegisterType((*EigrpShowRedistBd)(nil), "cisco_ios_xr_eigrp_oper.eigrp.processes.process.vrfs.vrf.afs.af.protocol.eigrp_show_redist_bd")
	proto.RegisterType((*EigrpShowProtIntBd)(nil), "cisco_ios_xr_eigrp_oper.eigrp.processes.process.vrfs.vrf.afs.af.protocol.eigrp_show_prot_int_bd")
	proto.RegisterType((*EigrpShowProtVrfBd)(nil), "cisco_ios_xr_eigrp_oper.eigrp.processes.process.vrfs.vrf.afs.af.protocol.eigrp_show_prot_vrf_bd")
}

func init() { proto.RegisterFile("eigrp_show_prot_vrf_bd.proto", fileDescriptor_b1fa1e154f2fba5c) }

var fileDescriptor_b1fa1e154f2fba5c = []byte{
	// 1586 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x97, 0x6d, 0x57, 0x1c, 0xb7,
	0x15, 0xc7, 0x8f, 0xed, 0x06, 0x83, 0x30, 0x36, 0x08, 0x30, 0xc2, 0x76, 0x4b, 0x4c, 0x4f, 0x13,
	0x37, 0xa9, 0xb7, 0x35, 0x4f, 0x79, 0x6e, 0x4b, 0x00, 0x97, 0x2d, 0x36, 0xa1, 0x0b, 0xb1, 0x9b,
	0x3e, 0x44, 0xd1, 0x8c, 0x34, 0xb3, 0xaa, 0x67, 0x34, 0x13, 0x49, 0xb3, 0x98, 0xbc, 0xe8, 0xb7,
	0xe8, 0x87, 0xe8, 0x67, 0xec, 0x8b, 0xf6, 0xe8, 0x4a, 0xda, 0x9d, 0xb5, 0x17, 0x5e, 0xf4, 0xb4,
	0x6f, 0x38, 0xbb, 0xff, 0xff, 0xef, 0xde, 0xb9, 0x1a, 0x5d, 0x69, 0x2f, 0xe8, 0x81, 0x90, 0xb9,
	0xae, 0xa9, 0xe9, 0x57, 0xe7, 0xb4, 0xd6, 0x95, 0xa5, 0x03, 0x9d, 0xd1, 0x84, 0x77, 0xdc, 0xe7,
	0x0a, 0x1f, 0xa6, 0xd2, 0xa4, 0x15, 0x95, 0x95, 0xa1, 0xaf, 0x35, 0xf5, 0x68, 0x55, 0x0b, 0xdd,
	0x81, 0x8f, 0x0e, 0x4a, 0x85, 0x31, 0xc2, 0xc4, 0x4f, 0x9d, 0x81, 0xce, 0xe0, 0x4f, 0x87, 0x65,
	0xa6, 0xc3, 0x32, 0x9f, 0x26, 0xad, 0x8a, 0xf5, 0x1a, 0xdd, 0x9f, 0xfc, 0x24, 0x7a, 0x74, 0xf0,
	0xcd, 0x29, 0xfe, 0x31, 0x42, 0x21, 0x05, 0x95, 0x9c, 0x5c, 0x7b, 0xf7, 0xda, 0xa3, 0x99, 0xde,
	0x4c, 0x50, 0xba, 0x1c, 0xaf, 0xa2, 0x69, 0x47, 0x2b, 0x56, 0x0a, 0x72, 0x1d, 0xcc, 0x9b, 0x03,
	0x9d, 0x1d, 0xb3, 0x52, 0xe0, 0x15, 0x74, 0x93, 0x05, 0xe7, 0x06, 0x38, 0x53, 0x0c, 0x8c, 0xf5,
	0x7f, 0x5e, 0x47, 0x4b, 0xad, 0x47, 0x6a, 0xc1, 0xa5, 0xb1, 0x34, 0xe1, 0x78, 0x1e, 0xdd, 0x60,
	0x99, 0x84, 0x87, 0xcc, 0xf5, 0xdc, 0x47, 0xbc, 0x8d, 0xee, 0x7a, 0x5b, 0xcb, 0xa4, 0xb1, 0x82,
	0xd3, 0x58, 0x76, 0x78, 0xd8, 0xf2, 0x98, 0x7b, 0x12, 0x4c, 0xfc, 0x39, 0xba, 0x37, 0x39, 0x8c,
	0x5a, 0x96, 0x87, 0x6a, 0xc8, 0xc4, 0xd0, 0x33, 0x96, 0xe3, 0x27, 0x68, 0x49, 0x0b, 0xae, 0x87,
	0x26, 0xad, 0xab, 0x42, 0xa6, 0x17, 0xe4, 0x47, 0x10, 0xb7, 0x38, 0xe6, 0x9d, 0x80, 0x85, 0x3f,
	0x46, 0x63, 0xe9, 0x46, 0xcf, 0x93, 0x9c, 0xbc, 0x03, 0xcb, 0x19, 0x5b, 0x47, 0x7c, 0x5a, 0x97,
	0xbb, 0xf7, 0xab, 0x65, 0x42, 0xfb, 0x4c, 0xf1, 0x42, 0x90, 0x29, 0x60, 0x67, 0xb4, 0x4c, 0x0e,
	0x41, 0x58, 0xff, 0xd7, 0x35, 0x74, 0xf7, 0xcd, 0xed, 0x91, 0xea, 0x92, 0xb7, 0xf5, 0x00, 0xcd,
	0x48, 0x65, 0x85, 0xce, 0x58, 0x1a, 0x77, 0x63, 0x24, 0xe0, 0x2d, 0x74, 0xb7, 0x6a, 0x6c, 0x52,
	0x35, 0x8a, 0xd3, 0x4c, 0x16, 0x56, 0xe8, 0xb8, 0x30, 0xff, 0x42, 0x96, 0xa2, 0xfb, 0x14, 0xcc,
	0xb0, 0xb2, 0x0d, 0xb4, 0x2c, 0xd5, 0xa4, 0xa0, 0xf0, 0x36, 0x82, 0x39, 0x16, 0x73, 0x0f, 0x4d,
	0x4b, 0xc5, 0x52, 0x2b, 0x07, 0x02, 0x56, 0x3f, 0xdd, 0x1b, 0x7e, 0xc7, 0x1f, 0xa2, 0x85, 0x9a,
	0x19, 0x23, 0x07, 0x82, 0x8e, 0x6a, 0x9d, 0x02, 0x68, 0x3e, 0x18, 0xdd, 0xa8, 0xaf, 0xff, 0x9b,
	0xbc, 0xbd, 0x7a, 0xdf, 0x9c, 0x71, 0xf5, 0x1b, 0xa3, 0xd5, 0xdf, 0x47, 0x33, 0xcc, 0x50, 0xd5,
	0x94, 0x89, 0xd0, 0x64, 0x13, 0xf4, 0x69, 0x66, 0x8e, 0xe1, 0xbb, 0x33, 0x75, 0xd5, 0xb8, 0xf2,
	0x25, 0x27, 0x5b, 0x50, 0xfa, 0xb4, 0x17, 0xba, 0x1c, 0x3f, 0x46, 0x98, 0x35, 0xb6, 0xa2, 0xa6,
	0x29, 0x4b, 0xa6, 0xe5, 0x0f, 0xcc, 0xca, 0x4a, 0x91, 0x6d, 0x28, 0x6a, 0xc1, 0x39, 0xa7, 0x6d,
	0x03, 0xff, 0x0a, 0x2d, 0x15, 0x55, 0x4e, 0x95, 0x90, 0x79, 0x3f, 0xa9, 0x34, 0x4d, 0xfb, 0x4c,
	0xe5, 0xc2, 0x90, 0x1d, 0x08, 0xc0, 0x45, 0x95, 0x1f, 0x07, 0x6b, 0xcf, 0x3b, 0xee, 0x25, 0x8e,
	0x45, 0x9c, 0x33, 0xad, 0xa4, 0xca, 0x0d, 0xf9, 0x08, 0x42, 0x16, 0x5b, 0x21, 0x2f, 0x83, 0x85,
	0xb7, 0xd1, 0x8a, 0x6b, 0x0c, 0xcb, 0x92, 0x42, 0xd0, 0x42, 0x96, 0xd2, 0x52, 0x2d, 0x58, 0xda,
	0x17, 0x9c, 0x7c, 0x0c, 0x51, 0x4b, 0x5a, 0x26, 0x67, 0xce, 0x7d, 0xe6, 0xcc, 0x9e, 0xf7, 0xae,
	0xd8, 0xe5, 0x4f, 0xfe, 0x9b, 0x5d, 0xfe, 0xf4, 0xf2, 0x5d, 0x3e, 0x42, 0xeb, 0x55, 0x63, 0xf3,
	0x4a, 0xaa, 0x9c, 0xa6, 0x4c, 0x71, 0xc9, 0x99, 0x15, 0x94, 0x8b, 0x8c, 0x35, 0x85, 0xa5, 0x59,
	0xc1, 0xf2, 0x5c, 0x70, 0xf2, 0x19, 0xd4, 0xba, 0x16, 0xc9, 0xbd, 0x08, 0xee, 0x7b, 0xee, 0xa9,
	0xc7, 0x70, 0x17, 0x3d, 0xbc, 0x22, 0x59, 0x28, 0xe6, 0x73, 0x28, 0xe6, 0x27, 0x97, 0xe5, 0x1a,
	0xd5, 0x25, 0x55, 0x5a, 0x95, 0x57, 0xd7, 0xf5, 0x85, 0xaf, 0x2b, 0x92, 0x57, 0xd4, 0x75, 0x45,
	0xb2, 0x50, 0xd7, 0xaf, 0x7d, 0x5d, 0x97, 0xe5, 0x0a, 0x75, 0x7d, 0x88, 0x16, 0xa0, 0xe3, 0x15,
	0x2b, 0xa8, 0xbb, 0x0a, 0x98, 0x4a, 0x05, 0xf9, 0x0d, 0xf4, 0xe9, 0x7c, 0x34, 0xf6, 0x83, 0xee,
	0x60, 0xf1, 0xfa, 0x4d, 0xf8, 0xb7, 0x1e, 0x8e, 0xc6, 0x10, 0xfe, 0x29, 0x9a, 0x2b, 0xd9, 0x6b,
	0x59, 0x36, 0x25, 0xad, 0x99, 0xed, 0x1b, 0xb2, 0x0b, 0xe0, 0xad, 0x20, 0x9e, 0x38, 0xcd, 0x1d,
	0xca, 0x01, 0xd3, 0x12, 0x12, 0x7d, 0xe9, 0x4f, 0x47, 0xfc, 0x8e, 0x1f, 0xa1, 0xf9, 0x52, 0x58,
	0x2d, 0x53, 0x7a, 0xee, 0xda, 0xd0, 0xd2, 0x57, 0x4f, 0xc8, 0x1e, 0x30, 0xb7, 0xbd, 0xfe, 0x12,
	0xe4, 0xa3, 0x27, 0x13, 0xc8, 0x0d, 0xb2, 0x3f, 0x81, 0xdc, 0x98, 0x40, 0x6e, 0x92, 0x83, 0x09,
	0xe4, 0xe6, 0x04, 0x72, 0x8b, 0x3c, 0x9d, 0x40, 0x6e, 0x4d, 0x20, 0xb7, 0xc9, 0xef, 0x26, 0x90,
	0xdb, 0x13, 0xc8, 0x1d, 0x72, 0x38, 0x81, 0xdc, 0x81, 0x9b, 0x41, 0x26, 0xd4, 0xa4, 0xac, 0x10,
	0xa4, 0xeb, 0x5f, 0x8c, 0x96, 0xc9, 0xa9, 0xfb, 0x8e, 0x7f, 0x86, 0x02, 0x4e, 0x07, 0x42, 0x1b,
	0x77, 0x2b, 0xfc, 0x1e, 0xf6, 0x7a, 0xce, 0xab, 0x2f, 0xbc, 0x88, 0x77, 0xd0, 0x4a, 0xc0, 0xe2,
	0x3e, 0xf4, 0xab, 0x3a, 0xad, 0x1a, 0x65, 0xc9, 0x11, 0x64, 0x5c, 0xf6, 0xf6, 0x73, 0xef, 0x1e,
	0x06, 0x13, 0x7f, 0x8a, 0x56, 0x63, 0x2b, 0x85, 0xf8, 0xb4, 0x52, 0x99, 0xcc, 0x1b, 0x2d, 0x38,
	0x79, 0x06, 0x1d, 0xba, 0x12, 0x80, 0xe7, 0xe0, 0xef, 0x0d, 0x6d, 0xd7, 0x21, 0x31, 0x36, 0x61,
	0x8a, 0x9f, 0x4b, 0x6e, 0xfb, 0xe4, 0xb9, 0xef, 0x90, 0x60, 0x7c, 0x19, 0x75, 0xd7, 0x21, 0x11,
	0xe6, 0xa2, 0x60, 0x17, 0xe4, 0xd8, 0x77, 0x48, 0x10, 0xf7, 0x9d, 0x86, 0x7f, 0x89, 0x16, 0x23,
	0xa4, 0x45, 0x21, 0x59, 0x22, 0x0b, 0x69, 0x2f, 0xc8, 0x57, 0x80, 0xe2, 0x60, 0xf5, 0x46, 0x0e,
	0x7e, 0x88, 0x62, 0x02, 0x5a, 0x54, 0x8c, 0x93, 0x13, 0x20, 0x67, 0x83, 0xf6, 0xac, 0x62, 0x1c,
	0xaf, 0xa1, 0xd9, 0xe1, 0x0a, 0x6d, 0x43, 0xfe, 0x00, 0x04, 0x8a, 0x6b, 0xb2, 0x0d, 0x7e, 0x1f,
	0xdd, 0x31, 0xb6, 0x49, 0xda, 0x0b, 0xef, 0xc1, 0xc2, 0x6f, 0x3b, 0xb9, 0xb5, 0xde, 0x0f, 0xd0,
	0x02, 0x80, 0x5a, 0xa4, 0xc2, 0xfd, 0x7a, 0x54, 0xaa, 0xb8, 0x20, 0xa7, 0x80, 0x42, 0x86, 0x9e,
	0xd7, 0xbf, 0x52, 0xc5, 0x05, 0xfe, 0x02, 0xdd, 0x07, 0x96, 0x15, 0x45, 0x75, 0xee, 0x52, 0x2b,
	0x91, 0xba, 0x31, 0x00, 0x6e, 0x7c, 0x43, 0xce, 0x20, 0x8a, 0x38, 0x64, 0xd7, 0x11, 0x7b, 0x11,
	0xe8, 0x81, 0x8f, 0x3f, 0x42, 0xa4, 0x15, 0x6e, 0x2c, 0xb3, 0x32, 0x8d, 0xb1, 0x5f, 0x43, 0xec,
	0xf2, 0x30, 0xf6, 0x14, 0xdc, 0x10, 0xf8, 0x09, 0x5a, 0x6d, 0x07, 0xc2, 0xaf, 0xc6, 0x45, 0x8c,
	0x7c, 0x01, 0x91, 0x77, 0x47, 0x91, 0xde, 0x0e, 0xa1, 0x07, 0x68, 0xad, 0x15, 0x3a, 0x3e, 0xbd,
	0x84, 0x04, 0x2f, 0x21, 0xc1, 0x83, 0x61, 0x82, 0x5e, 0x1b, 0x0a, 0x69, 0xd6, 0xd0, 0xac, 0x32,
	0x19, 0x15, 0xca, 0xfd, 0x30, 0x70, 0xf2, 0x47, 0x08, 0x41, 0xca, 0x64, 0x07, 0x5e, 0xc1, 0x8f,
	0xd1, 0xa2, 0x03, 0x20, 0x25, 0xed, 0x57, 0x05, 0xa7, 0x56, 0x96, 0x82, 0x7c, 0xe3, 0x1b, 0x47,
	0x99, 0x0c, 0x12, 0x1d, 0x56, 0x05, 0x3f, 0x93, 0xa5, 0xc0, 0xef, 0xa1, 0x3b, 0x0e, 0x37, 0x32,
	0x77, 0x37, 0x11, 0xa0, 0x7f, 0x02, 0x74, 0x4e, 0x99, 0xec, 0x14, 0x54, 0xe0, 0x3e, 0x40, 0x0b,
	0x8e, 0x4b, 0x2b, 0x35, 0x10, 0x3a, 0x17, 0x9e, 0xfc, 0x33, 0x90, 0x2e, 0xc1, 0x5e, 0xd0, 0x81,
	0x7d, 0x8c, 0xb0, 0x16, 0xc6, 0x32, 0x6d, 0xdb, 0xbb, 0xfe, 0x17, 0xff, 0x73, 0x1b, 0x9c, 0xd6,
	0xc6, 0x3f, 0x44, 0xb7, 0x22, 0x0e, 0x59, 0xff, 0xea, 0xbb, 0x2c, 0x68, 0xb1, 0x4a, 0x23, 0x19,
	0xf5, 0x23, 0x86, 0xa7, 0xbe, 0xf5, 0x55, 0x1a, 0xc9, 0x76, 0x41, 0x05, 0xee, 0x1f, 0xd7, 0x2e,
	0x9d, 0x27, 0xe9, 0xbb, 0x37, 0x1e, 0xcd, 0x6e, 0x7c, 0xdb, 0xf9, 0x5f, 0xcd, 0xd5, 0x9d, 0x49,
	0x13, 0xee, 0x65, 0xf3, 0xea, 0xdf, 0xdb, 0x83, 0xdb, 0x77, 0x50, 0xc9, 0x77, 0xff, 0x97, 0x4a,
	0x5a, 0xf3, 0x63, 0x7b, 0x34, 0x7c, 0x0f, 0xdd, 0x71, 0x77, 0x60, 0x7b, 0x6a, 0x65, 0xfe, 0xfd,
	0x69, 0x99, 0xb4, 0x86, 0xd5, 0x55, 0x34, 0xed, 0xe7, 0x11, 0xc9, 0x49, 0x02, 0xc0, 0x4d, 0xf8,
	0xde, 0xe5, 0x78, 0x19, 0x4d, 0xb9, 0xc9, 0x4c, 0x72, 0x92, 0x82, 0xf1, 0xce, 0x40, 0x67, 0x5d,
	0xee, 0x06, 0x63, 0x69, 0x59, 0xe1, 0xb7, 0x06, 0xc6, 0xa7, 0x78, 0x80, 0x39, 0xe1, 0xfe, 0x40,
	0x38, 0x7f, 0x77, 0x68, 0x87, 0x63, 0xcc, 0xdd, 0x95, 0xe5, 0x12, 0x86, 0x40, 0xc1, 0x89, 0x00,
	0xfc, 0xd6, 0x40, 0x67, 0xbb, 0x51, 0xc3, 0xb7, 0xd1, 0xf5, 0xa6, 0x26, 0x19, 0x38, 0xd7, 0x9b,
	0xda, 0xdd, 0x26, 0x6e, 0x21, 0x52, 0x49, 0x2b, 0x59, 0x21, 0x7f, 0x10, 0x9c, 0xe4, 0xfe, 0x36,
	0xd1, 0x32, 0xe9, 0x8e, 0x54, 0x97, 0xdd, 0x81, 0xb1, 0x5f, 0x39, 0xe9, 0xfb, 0xec, 0x5a, 0x26,
	0xb1, 0x57, 0xb9, 0x1b, 0xf4, 0xc6, 0x20, 0x77, 0x2d, 0xba, 0x7b, 0x4e, 0xfa, 0x41, 0xaf, 0xcd,
	0xf6, 0xc0, 0x71, 0xbf, 0x17, 0xa6, 0x4a, 0x5f, 0x09, 0x77, 0x83, 0x7e, 0xdf, 0x08, 0x63, 0xc9,
	0xdf, 0x80, 0x9d, 0xf3, 0x6a, 0xcf, 0x8b, 0xae, 0xa5, 0x03, 0x66, 0x84, 0x6d, 0x6a, 0xf2, 0x0a,
	0xa0, 0x59, 0xaf, 0x9d, 0x3a, 0xa9, 0x7d, 0x71, 0x0e, 0x74, 0x46, 0x0a, 0x7f, 0x90, 0x83, 0xf4,
	0x42, 0x67, 0xee, 0x1f, 0x07, 0x36, 0x3a, 0xe8, 0x25, 0xf8, 0x33, 0x6c, 0x78, 0xce, 0x7f, 0x81,
	0xb0, 0x34, 0x34, 0x8e, 0xda, 0x21, 0x8e, 0x28, 0x3f, 0x68, 0x4b, 0x73, 0xe2, 0x8d, 0x30, 0xa1,
	0xe0, 0x9f, 0xa3, 0xf9, 0xd1, 0x51, 0xa4, 0xd2, 0x8a, 0xd2, 0x90, 0xca, 0x9f, 0xde, 0x91, 0xde,
	0x75, 0x32, 0xee, 0xa0, 0x45, 0x96, 0xd1, 0xb7, 0xe8, 0x1a, 0xe8, 0x05, 0x96, 0xed, 0xbd, 0xc1,
	0xbf, 0x8f, 0xe6, 0x65, 0x4d, 0x99, 0x2e, 0xe9, 0x68, 0x00, 0xff, 0xde, 0x37, 0x97, 0xac, 0x77,
	0x75, 0xd9, 0x8b, 0x53, 0xf8, 0x67, 0xe8, 0x5e, 0x26, 0xb5, 0xb1, 0xa3, 0xff, 0x0b, 0x68, 0x53,
	0x53, 0xc6, 0xb9, 0x16, 0xc6, 0x10, 0x0d, 0x21, 0x2b, 0x40, 0x0c, 0xff, 0x41, 0xf8, 0xba, 0xde,
	0xf5, 0x76, 0xbc, 0xa7, 0xa4, 0x72, 0x4d, 0x9c, 0x43, 0x84, 0x19, 0xde, 0x53, 0x5d, 0x75, 0x12,
	0x44, 0x57, 0xfd, 0x68, 0xaa, 0x1e, 0xed, 0xbe, 0xf5, 0xd5, 0xc7, 0x89, 0x7a, 0xb8, 0xad, 0xc9,
	0x14, 0x9c, 0x89, 0xcd, 0xff, 0x04, 0x00, 0x00, 0xff, 0xff, 0x04, 0x61, 0x4f, 0xdc, 0x8e, 0x0f,
	0x00, 0x00,
}
