/*
Copyright 2019 Cisco Systems

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: eigrp_show_route_bd.proto

package cisco_ios_xr_eigrp_oper_eigrp_processes_process_vrfs_vrf_afs_af_ases_as_topology_routes_topology_route

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type EigrpShowRouteBd_KEYS struct {
	ProcessId            string   `protobuf:"bytes,1,opt,name=process_id,json=processId,proto3" json:"process_id,omitempty"`
	VrfName              string   `protobuf:"bytes,2,opt,name=vrf_name,json=vrfName,proto3" json:"vrf_name,omitempty"`
	AfName               string   `protobuf:"bytes,3,opt,name=af_name,json=afName,proto3" json:"af_name,omitempty"`
	Asn                  uint32   `protobuf:"varint,4,opt,name=asn,proto3" json:"asn,omitempty"`
	Prefix               string   `protobuf:"bytes,5,opt,name=prefix,proto3" json:"prefix,omitempty"`
	PrefixLength         uint32   `protobuf:"varint,6,opt,name=prefix_length,json=prefixLength,proto3" json:"prefix_length,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EigrpShowRouteBd_KEYS) Reset()         { *m = EigrpShowRouteBd_KEYS{} }
func (m *EigrpShowRouteBd_KEYS) String() string { return proto.CompactTextString(m) }
func (*EigrpShowRouteBd_KEYS) ProtoMessage()    {}
func (*EigrpShowRouteBd_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_06d4607c2181d70c, []int{0}
}

func (m *EigrpShowRouteBd_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EigrpShowRouteBd_KEYS.Unmarshal(m, b)
}
func (m *EigrpShowRouteBd_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EigrpShowRouteBd_KEYS.Marshal(b, m, deterministic)
}
func (m *EigrpShowRouteBd_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EigrpShowRouteBd_KEYS.Merge(m, src)
}
func (m *EigrpShowRouteBd_KEYS) XXX_Size() int {
	return xxx_messageInfo_EigrpShowRouteBd_KEYS.Size(m)
}
func (m *EigrpShowRouteBd_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_EigrpShowRouteBd_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_EigrpShowRouteBd_KEYS proto.InternalMessageInfo

func (m *EigrpShowRouteBd_KEYS) GetProcessId() string {
	if m != nil {
		return m.ProcessId
	}
	return ""
}

func (m *EigrpShowRouteBd_KEYS) GetVrfName() string {
	if m != nil {
		return m.VrfName
	}
	return ""
}

func (m *EigrpShowRouteBd_KEYS) GetAfName() string {
	if m != nil {
		return m.AfName
	}
	return ""
}

func (m *EigrpShowRouteBd_KEYS) GetAsn() uint32 {
	if m != nil {
		return m.Asn
	}
	return 0
}

func (m *EigrpShowRouteBd_KEYS) GetPrefix() string {
	if m != nil {
		return m.Prefix
	}
	return ""
}

func (m *EigrpShowRouteBd_KEYS) GetPrefixLength() uint32 {
	if m != nil {
		return m.PrefixLength
	}
	return 0
}

type EigrpPrefixBd struct {
	Ipv4Prefix           string   `protobuf:"bytes,1,opt,name=ipv4_prefix,json=ipv4Prefix,proto3" json:"ipv4_prefix,omitempty"`
	Ipv6Prefix           string   `protobuf:"bytes,2,opt,name=ipv6_prefix,json=ipv6Prefix,proto3" json:"ipv6_prefix,omitempty"`
	PrefixLength         uint32   `protobuf:"varint,3,opt,name=prefix_length,json=prefixLength,proto3" json:"prefix_length,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EigrpPrefixBd) Reset()         { *m = EigrpPrefixBd{} }
func (m *EigrpPrefixBd) String() string { return proto.CompactTextString(m) }
func (*EigrpPrefixBd) ProtoMessage()    {}
func (*EigrpPrefixBd) Descriptor() ([]byte, []int) {
	return fileDescriptor_06d4607c2181d70c, []int{1}
}

func (m *EigrpPrefixBd) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EigrpPrefixBd.Unmarshal(m, b)
}
func (m *EigrpPrefixBd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EigrpPrefixBd.Marshal(b, m, deterministic)
}
func (m *EigrpPrefixBd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EigrpPrefixBd.Merge(m, src)
}
func (m *EigrpPrefixBd) XXX_Size() int {
	return xxx_messageInfo_EigrpPrefixBd.Size(m)
}
func (m *EigrpPrefixBd) XXX_DiscardUnknown() {
	xxx_messageInfo_EigrpPrefixBd.DiscardUnknown(m)
}

var xxx_messageInfo_EigrpPrefixBd proto.InternalMessageInfo

func (m *EigrpPrefixBd) GetIpv4Prefix() string {
	if m != nil {
		return m.Ipv4Prefix
	}
	return ""
}

func (m *EigrpPrefixBd) GetIpv6Prefix() string {
	if m != nil {
		return m.Ipv6Prefix
	}
	return ""
}

func (m *EigrpPrefixBd) GetPrefixLength() uint32 {
	if m != nil {
		return m.PrefixLength
	}
	return 0
}

type EigrpAddrBd struct {
	Ipv4Address          string   `protobuf:"bytes,1,opt,name=ipv4_address,json=ipv4Address,proto3" json:"ipv4_address,omitempty"`
	Ipv6Address          string   `protobuf:"bytes,2,opt,name=ipv6_address,json=ipv6Address,proto3" json:"ipv6_address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EigrpAddrBd) Reset()         { *m = EigrpAddrBd{} }
func (m *EigrpAddrBd) String() string { return proto.CompactTextString(m) }
func (*EigrpAddrBd) ProtoMessage()    {}
func (*EigrpAddrBd) Descriptor() ([]byte, []int) {
	return fileDescriptor_06d4607c2181d70c, []int{2}
}

func (m *EigrpAddrBd) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EigrpAddrBd.Unmarshal(m, b)
}
func (m *EigrpAddrBd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EigrpAddrBd.Marshal(b, m, deterministic)
}
func (m *EigrpAddrBd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EigrpAddrBd.Merge(m, src)
}
func (m *EigrpAddrBd) XXX_Size() int {
	return xxx_messageInfo_EigrpAddrBd.Size(m)
}
func (m *EigrpAddrBd) XXX_DiscardUnknown() {
	xxx_messageInfo_EigrpAddrBd.DiscardUnknown(m)
}

var xxx_messageInfo_EigrpAddrBd proto.InternalMessageInfo

func (m *EigrpAddrBd) GetIpv4Address() string {
	if m != nil {
		return m.Ipv4Address
	}
	return ""
}

func (m *EigrpAddrBd) GetIpv6Address() string {
	if m != nil {
		return m.Ipv6Address
	}
	return ""
}

type EigrpShowPathBd struct {
	Afi                        uint32       `protobuf:"varint,1,opt,name=afi,proto3" json:"afi,omitempty"`
	NextHopPresent             bool         `protobuf:"varint,2,opt,name=next_hop_present,json=nextHopPresent,proto3" json:"next_hop_present,omitempty"`
	NextHopAddress             *EigrpAddrBd `protobuf:"bytes,3,opt,name=next_hop_address,json=nextHopAddress,proto3" json:"next_hop_address,omitempty"`
	InterfaceHandle            string       `protobuf:"bytes,4,opt,name=interface_handle,json=interfaceHandle,proto3" json:"interface_handle,omitempty"`
	InterfaceName              string       `protobuf:"bytes,5,opt,name=interface_name,json=interfaceName,proto3" json:"interface_name,omitempty"`
	Origin                     string       `protobuf:"bytes,6,opt,name=origin,proto3" json:"origin,omitempty"`
	Infosource                 *EigrpAddrBd `protobuf:"bytes,7,opt,name=infosource,proto3" json:"infosource,omitempty"`
	SendFlag                   string       `protobuf:"bytes,8,opt,name=send_flag,json=sendFlag,proto3" json:"send_flag,omitempty"`
	ReplyOutstanding           bool         `protobuf:"varint,9,opt,name=reply_outstanding,json=replyOutstanding,proto3" json:"reply_outstanding,omitempty"`
	Metric                     uint32       `protobuf:"varint,10,opt,name=metric,proto3" json:"metric,omitempty"`
	Metric64                   uint64       `protobuf:"varint,11,opt,name=metric64,proto3" json:"metric64,omitempty"`
	SuccessorMetric            uint32       `protobuf:"varint,12,opt,name=successor_metric,json=successorMetric,proto3" json:"successor_metric,omitempty"`
	SuccessorMetric64          uint64       `protobuf:"varint,13,opt,name=successor_metric64,json=successorMetric64,proto3" json:"successor_metric64,omitempty"`
	ReplyStatus                bool         `protobuf:"varint,14,opt,name=reply_status,json=replyStatus,proto3" json:"reply_status,omitempty"`
	SiaStatus                  bool         `protobuf:"varint,15,opt,name=sia_status,json=siaStatus,proto3" json:"sia_status,omitempty"`
	TransmitSerialNumber       uint64       `protobuf:"varint,16,opt,name=transmit_serial_number,json=transmitSerialNumber,proto3" json:"transmit_serial_number,omitempty"`
	Anchored                   bool         `protobuf:"varint,17,opt,name=anchored,proto3" json:"anchored,omitempty"`
	ExternalPath               bool         `protobuf:"varint,18,opt,name=external_path,json=externalPath,proto3" json:"external_path,omitempty"`
	Bandwidth                  uint32       `protobuf:"varint,19,opt,name=bandwidth,proto3" json:"bandwidth,omitempty"`
	Bandwidth64                uint64       `protobuf:"varint,20,opt,name=bandwidth64,proto3" json:"bandwidth64,omitempty"`
	Delay                      uint32       `protobuf:"varint,21,opt,name=delay,proto3" json:"delay,omitempty"`
	Delay64                    uint64       `protobuf:"varint,22,opt,name=delay64,proto3" json:"delay64,omitempty"`
	DelayUnit                  string       `protobuf:"bytes,23,opt,name=delay_unit,json=delayUnit,proto3" json:"delay_unit,omitempty"`
	Mtu                        uint32       `protobuf:"varint,24,opt,name=mtu,proto3" json:"mtu,omitempty"`
	HopCount                   uint32       `protobuf:"varint,25,opt,name=hop_count,json=hopCount,proto3" json:"hop_count,omitempty"`
	Reliability                uint32       `protobuf:"varint,26,opt,name=reliability,proto3" json:"reliability,omitempty"`
	Load                       uint32       `protobuf:"varint,27,opt,name=load,proto3" json:"load,omitempty"`
	InternalRouterId           string       `protobuf:"bytes,28,opt,name=internal_router_id,json=internalRouterId,proto3" json:"internal_router_id,omitempty"`
	InternalTag                uint32       `protobuf:"varint,29,opt,name=internal_tag,json=internalTag,proto3" json:"internal_tag,omitempty"`
	ExtendedCommunitiesPresent bool         `protobuf:"varint,30,opt,name=extended_communities_present,json=extendedCommunitiesPresent,proto3" json:"extended_communities_present,omitempty"`
	ExtendedCommunitiesLength  uint32       `protobuf:"varint,31,opt,name=extended_communities_length,json=extendedCommunitiesLength,proto3" json:"extended_communities_length,omitempty"`
	ExtendedCommunities        string       `protobuf:"bytes,32,opt,name=extended_communities,json=extendedCommunities,proto3" json:"extended_communities,omitempty"`
	ExternalInformationPresent bool         `protobuf:"varint,33,opt,name=external_information_present,json=externalInformationPresent,proto3" json:"external_information_present,omitempty"`
	ExternalRouterId           uint32       `protobuf:"varint,34,opt,name=external_router_id,json=externalRouterId,proto3" json:"external_router_id,omitempty"`
	ExternalThisSystem         bool         `protobuf:"varint,35,opt,name=external_this_system,json=externalThisSystem,proto3" json:"external_this_system,omitempty"`
	ExternalAs                 uint32       `protobuf:"varint,36,opt,name=external_as,json=externalAs,proto3" json:"external_as,omitempty"`
	ExternalProtocol           string       `protobuf:"bytes,37,opt,name=external_protocol,json=externalProtocol,proto3" json:"external_protocol,omitempty"`
	ExternalMetric             uint32       `protobuf:"varint,38,opt,name=external_metric,json=externalMetric,proto3" json:"external_metric,omitempty"`
	ExternalTag                uint32       `protobuf:"varint,39,opt,name=external_tag,json=externalTag,proto3" json:"external_tag,omitempty"`
	ConditionalDefaultPath     bool         `protobuf:"varint,40,opt,name=conditional_default_path,json=conditionalDefaultPath,proto3" json:"conditional_default_path,omitempty"`
	RibState                   string       `protobuf:"bytes,41,opt,name=rib_state,json=ribState,proto3" json:"rib_state,omitempty"`
	XXX_NoUnkeyedLiteral       struct{}     `json:"-"`
	XXX_unrecognized           []byte       `json:"-"`
	XXX_sizecache              int32        `json:"-"`
}

func (m *EigrpShowPathBd) Reset()         { *m = EigrpShowPathBd{} }
func (m *EigrpShowPathBd) String() string { return proto.CompactTextString(m) }
func (*EigrpShowPathBd) ProtoMessage()    {}
func (*EigrpShowPathBd) Descriptor() ([]byte, []int) {
	return fileDescriptor_06d4607c2181d70c, []int{3}
}

func (m *EigrpShowPathBd) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EigrpShowPathBd.Unmarshal(m, b)
}
func (m *EigrpShowPathBd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EigrpShowPathBd.Marshal(b, m, deterministic)
}
func (m *EigrpShowPathBd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EigrpShowPathBd.Merge(m, src)
}
func (m *EigrpShowPathBd) XXX_Size() int {
	return xxx_messageInfo_EigrpShowPathBd.Size(m)
}
func (m *EigrpShowPathBd) XXX_DiscardUnknown() {
	xxx_messageInfo_EigrpShowPathBd.DiscardUnknown(m)
}

var xxx_messageInfo_EigrpShowPathBd proto.InternalMessageInfo

func (m *EigrpShowPathBd) GetAfi() uint32 {
	if m != nil {
		return m.Afi
	}
	return 0
}

func (m *EigrpShowPathBd) GetNextHopPresent() bool {
	if m != nil {
		return m.NextHopPresent
	}
	return false
}

func (m *EigrpShowPathBd) GetNextHopAddress() *EigrpAddrBd {
	if m != nil {
		return m.NextHopAddress
	}
	return nil
}

func (m *EigrpShowPathBd) GetInterfaceHandle() string {
	if m != nil {
		return m.InterfaceHandle
	}
	return ""
}

func (m *EigrpShowPathBd) GetInterfaceName() string {
	if m != nil {
		return m.InterfaceName
	}
	return ""
}

func (m *EigrpShowPathBd) GetOrigin() string {
	if m != nil {
		return m.Origin
	}
	return ""
}

func (m *EigrpShowPathBd) GetInfosource() *EigrpAddrBd {
	if m != nil {
		return m.Infosource
	}
	return nil
}

func (m *EigrpShowPathBd) GetSendFlag() string {
	if m != nil {
		return m.SendFlag
	}
	return ""
}

func (m *EigrpShowPathBd) GetReplyOutstanding() bool {
	if m != nil {
		return m.ReplyOutstanding
	}
	return false
}

func (m *EigrpShowPathBd) GetMetric() uint32 {
	if m != nil {
		return m.Metric
	}
	return 0
}

func (m *EigrpShowPathBd) GetMetric64() uint64 {
	if m != nil {
		return m.Metric64
	}
	return 0
}

func (m *EigrpShowPathBd) GetSuccessorMetric() uint32 {
	if m != nil {
		return m.SuccessorMetric
	}
	return 0
}

func (m *EigrpShowPathBd) GetSuccessorMetric64() uint64 {
	if m != nil {
		return m.SuccessorMetric64
	}
	return 0
}

func (m *EigrpShowPathBd) GetReplyStatus() bool {
	if m != nil {
		return m.ReplyStatus
	}
	return false
}

func (m *EigrpShowPathBd) GetSiaStatus() bool {
	if m != nil {
		return m.SiaStatus
	}
	return false
}

func (m *EigrpShowPathBd) GetTransmitSerialNumber() uint64 {
	if m != nil {
		return m.TransmitSerialNumber
	}
	return 0
}

func (m *EigrpShowPathBd) GetAnchored() bool {
	if m != nil {
		return m.Anchored
	}
	return false
}

func (m *EigrpShowPathBd) GetExternalPath() bool {
	if m != nil {
		return m.ExternalPath
	}
	return false
}

func (m *EigrpShowPathBd) GetBandwidth() uint32 {
	if m != nil {
		return m.Bandwidth
	}
	return 0
}

func (m *EigrpShowPathBd) GetBandwidth64() uint64 {
	if m != nil {
		return m.Bandwidth64
	}
	return 0
}

func (m *EigrpShowPathBd) GetDelay() uint32 {
	if m != nil {
		return m.Delay
	}
	return 0
}

func (m *EigrpShowPathBd) GetDelay64() uint64 {
	if m != nil {
		return m.Delay64
	}
	return 0
}

func (m *EigrpShowPathBd) GetDelayUnit() string {
	if m != nil {
		return m.DelayUnit
	}
	return ""
}

func (m *EigrpShowPathBd) GetMtu() uint32 {
	if m != nil {
		return m.Mtu
	}
	return 0
}

func (m *EigrpShowPathBd) GetHopCount() uint32 {
	if m != nil {
		return m.HopCount
	}
	return 0
}

func (m *EigrpShowPathBd) GetReliability() uint32 {
	if m != nil {
		return m.Reliability
	}
	return 0
}

func (m *EigrpShowPathBd) GetLoad() uint32 {
	if m != nil {
		return m.Load
	}
	return 0
}

func (m *EigrpShowPathBd) GetInternalRouterId() string {
	if m != nil {
		return m.InternalRouterId
	}
	return ""
}

func (m *EigrpShowPathBd) GetInternalTag() uint32 {
	if m != nil {
		return m.InternalTag
	}
	return 0
}

func (m *EigrpShowPathBd) GetExtendedCommunitiesPresent() bool {
	if m != nil {
		return m.ExtendedCommunitiesPresent
	}
	return false
}

func (m *EigrpShowPathBd) GetExtendedCommunitiesLength() uint32 {
	if m != nil {
		return m.ExtendedCommunitiesLength
	}
	return 0
}

func (m *EigrpShowPathBd) GetExtendedCommunities() string {
	if m != nil {
		return m.ExtendedCommunities
	}
	return ""
}

func (m *EigrpShowPathBd) GetExternalInformationPresent() bool {
	if m != nil {
		return m.ExternalInformationPresent
	}
	return false
}

func (m *EigrpShowPathBd) GetExternalRouterId() uint32 {
	if m != nil {
		return m.ExternalRouterId
	}
	return 0
}

func (m *EigrpShowPathBd) GetExternalThisSystem() bool {
	if m != nil {
		return m.ExternalThisSystem
	}
	return false
}

func (m *EigrpShowPathBd) GetExternalAs() uint32 {
	if m != nil {
		return m.ExternalAs
	}
	return 0
}

func (m *EigrpShowPathBd) GetExternalProtocol() string {
	if m != nil {
		return m.ExternalProtocol
	}
	return ""
}

func (m *EigrpShowPathBd) GetExternalMetric() uint32 {
	if m != nil {
		return m.ExternalMetric
	}
	return 0
}

func (m *EigrpShowPathBd) GetExternalTag() uint32 {
	if m != nil {
		return m.ExternalTag
	}
	return 0
}

func (m *EigrpShowPathBd) GetConditionalDefaultPath() bool {
	if m != nil {
		return m.ConditionalDefaultPath
	}
	return false
}

func (m *EigrpShowPathBd) GetRibState() string {
	if m != nil {
		return m.RibState
	}
	return ""
}

type EigrpShowActBd struct {
	PeerAvailable        bool         `protobuf:"varint,1,opt,name=peer_available,json=peerAvailable,proto3" json:"peer_available,omitempty"`
	Source               *EigrpAddrBd `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
	InterfaceList        string       `protobuf:"bytes,3,opt,name=interface_list,json=interfaceList,proto3" json:"interface_list,omitempty"`
	HandleNumber         uint32       `protobuf:"varint,4,opt,name=handle_number,json=handleNumber,proto3" json:"handle_number,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *EigrpShowActBd) Reset()         { *m = EigrpShowActBd{} }
func (m *EigrpShowActBd) String() string { return proto.CompactTextString(m) }
func (*EigrpShowActBd) ProtoMessage()    {}
func (*EigrpShowActBd) Descriptor() ([]byte, []int) {
	return fileDescriptor_06d4607c2181d70c, []int{4}
}

func (m *EigrpShowActBd) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EigrpShowActBd.Unmarshal(m, b)
}
func (m *EigrpShowActBd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EigrpShowActBd.Marshal(b, m, deterministic)
}
func (m *EigrpShowActBd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EigrpShowActBd.Merge(m, src)
}
func (m *EigrpShowActBd) XXX_Size() int {
	return xxx_messageInfo_EigrpShowActBd.Size(m)
}
func (m *EigrpShowActBd) XXX_DiscardUnknown() {
	xxx_messageInfo_EigrpShowActBd.DiscardUnknown(m)
}

var xxx_messageInfo_EigrpShowActBd proto.InternalMessageInfo

func (m *EigrpShowActBd) GetPeerAvailable() bool {
	if m != nil {
		return m.PeerAvailable
	}
	return false
}

func (m *EigrpShowActBd) GetSource() *EigrpAddrBd {
	if m != nil {
		return m.Source
	}
	return nil
}

func (m *EigrpShowActBd) GetInterfaceList() string {
	if m != nil {
		return m.InterfaceList
	}
	return ""
}

func (m *EigrpShowActBd) GetHandleNumber() uint32 {
	if m != nil {
		return m.HandleNumber
	}
	return 0
}

type EigrpShowRouteBd struct {
	Afi                  uint32             `protobuf:"varint,50,opt,name=afi,proto3" json:"afi,omitempty"`
	AsNumber             uint32             `protobuf:"varint,51,opt,name=as_number,json=asNumber,proto3" json:"as_number,omitempty"`
	RouterId             string             `protobuf:"bytes,52,opt,name=router_id,json=routerId,proto3" json:"router_id,omitempty"`
	Active               bool               `protobuf:"varint,53,opt,name=active,proto3" json:"active,omitempty"`
	PrefixXr             *EigrpPrefixBd     `protobuf:"bytes,54,opt,name=prefix_xr,json=prefixXr,proto3" json:"prefix_xr,omitempty"`
	Successors           uint32             `protobuf:"varint,55,opt,name=successors,proto3" json:"successors,omitempty"`
	SuccessorsPresent    bool               `protobuf:"varint,56,opt,name=successors_present,json=successorsPresent,proto3" json:"successors_present,omitempty"`
	OldMetric            uint32             `protobuf:"varint,57,opt,name=old_metric,json=oldMetric,proto3" json:"old_metric,omitempty"`
	OldMetric64          uint64             `protobuf:"varint,58,opt,name=old_metric64,json=oldMetric64,proto3" json:"old_metric64,omitempty"`
	Metric               uint32             `protobuf:"varint,59,opt,name=metric,proto3" json:"metric,omitempty"`
	Metric64             uint64             `protobuf:"varint,60,opt,name=metric64,proto3" json:"metric64,omitempty"`
	RibMetric            uint32             `protobuf:"varint,61,opt,name=rib_metric,json=ribMetric,proto3" json:"rib_metric,omitempty"`
	Tag                  uint32             `protobuf:"varint,62,opt,name=tag,proto3" json:"tag,omitempty"`
	SendFlag             string             `protobuf:"bytes,63,opt,name=send_flag,json=sendFlag,proto3" json:"send_flag,omitempty"`
	TransmitSerialNumber uint64             `protobuf:"varint,64,opt,name=transmit_serial_number,json=transmitSerialNumber,proto3" json:"transmit_serial_number,omitempty"`
	TransmitRefcount     uint32             `protobuf:"varint,65,opt,name=transmit_refcount,json=transmitRefcount,proto3" json:"transmit_refcount,omitempty"`
	TransmitAnchored     bool               `protobuf:"varint,66,opt,name=transmit_anchored,json=transmitAnchored,proto3" json:"transmit_anchored,omitempty"`
	ReplyHandles         uint32             `protobuf:"varint,67,opt,name=reply_handles,json=replyHandles,proto3" json:"reply_handles,omitempty"`
	ActiveTimeSecs       uint32             `protobuf:"varint,68,opt,name=active_time_secs,json=activeTimeSecs,proto3" json:"active_time_secs,omitempty"`
	ActiveTimeNsecs      uint32             `protobuf:"varint,69,opt,name=active_time_nsecs,json=activeTimeNsecs,proto3" json:"active_time_nsecs,omitempty"`
	Origin               uint32             `protobuf:"varint,70,opt,name=origin,proto3" json:"origin,omitempty"`
	RetryCount           uint32             `protobuf:"varint,71,opt,name=retry_count,json=retryCount,proto3" json:"retry_count,omitempty"`
	ActiveStats          bool               `protobuf:"varint,72,opt,name=active_stats,json=activeStats,proto3" json:"active_stats,omitempty"`
	MinTime              uint32             `protobuf:"varint,73,opt,name=min_time,json=minTime,proto3" json:"min_time,omitempty"`
	MaxTime              uint32             `protobuf:"varint,74,opt,name=max_time,json=maxTime,proto3" json:"max_time,omitempty"`
	AverageTime          uint32             `protobuf:"varint,75,opt,name=average_time,json=averageTime,proto3" json:"average_time,omitempty"`
	AckCount             uint32             `protobuf:"varint,76,opt,name=ack_count,json=ackCount,proto3" json:"ack_count,omitempty"`
	Replies              uint32             `protobuf:"varint,77,opt,name=replies,proto3" json:"replies,omitempty"`
	Paths                []*EigrpShowPathBd `protobuf:"bytes,78,rep,name=paths,proto3" json:"paths,omitempty"`
	ActivePeer           []*EigrpShowActBd  `protobuf:"bytes,79,rep,name=active_peer,json=activePeer,proto3" json:"active_peer,omitempty"`
	RouteInSia           bool               `protobuf:"varint,80,opt,name=route_in_sia,json=routeInSia,proto3" json:"route_in_sia,omitempty"`
	SiaReplyHandles      uint32             `protobuf:"varint,81,opt,name=sia_reply_handles,json=siaReplyHandles,proto3" json:"sia_reply_handles,omitempty"`
	SiaPeer              []*EigrpShowActBd  `protobuf:"bytes,82,rep,name=sia_peer,json=siaPeer,proto3" json:"sia_peer,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *EigrpShowRouteBd) Reset()         { *m = EigrpShowRouteBd{} }
func (m *EigrpShowRouteBd) String() string { return proto.CompactTextString(m) }
func (*EigrpShowRouteBd) ProtoMessage()    {}
func (*EigrpShowRouteBd) Descriptor() ([]byte, []int) {
	return fileDescriptor_06d4607c2181d70c, []int{5}
}

func (m *EigrpShowRouteBd) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EigrpShowRouteBd.Unmarshal(m, b)
}
func (m *EigrpShowRouteBd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EigrpShowRouteBd.Marshal(b, m, deterministic)
}
func (m *EigrpShowRouteBd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EigrpShowRouteBd.Merge(m, src)
}
func (m *EigrpShowRouteBd) XXX_Size() int {
	return xxx_messageInfo_EigrpShowRouteBd.Size(m)
}
func (m *EigrpShowRouteBd) XXX_DiscardUnknown() {
	xxx_messageInfo_EigrpShowRouteBd.DiscardUnknown(m)
}

var xxx_messageInfo_EigrpShowRouteBd proto.InternalMessageInfo

func (m *EigrpShowRouteBd) GetAfi() uint32 {
	if m != nil {
		return m.Afi
	}
	return 0
}

func (m *EigrpShowRouteBd) GetAsNumber() uint32 {
	if m != nil {
		return m.AsNumber
	}
	return 0
}

func (m *EigrpShowRouteBd) GetRouterId() string {
	if m != nil {
		return m.RouterId
	}
	return ""
}

func (m *EigrpShowRouteBd) GetActive() bool {
	if m != nil {
		return m.Active
	}
	return false
}

func (m *EigrpShowRouteBd) GetPrefixXr() *EigrpPrefixBd {
	if m != nil {
		return m.PrefixXr
	}
	return nil
}

func (m *EigrpShowRouteBd) GetSuccessors() uint32 {
	if m != nil {
		return m.Successors
	}
	return 0
}

func (m *EigrpShowRouteBd) GetSuccessorsPresent() bool {
	if m != nil {
		return m.SuccessorsPresent
	}
	return false
}

func (m *EigrpShowRouteBd) GetOldMetric() uint32 {
	if m != nil {
		return m.OldMetric
	}
	return 0
}

func (m *EigrpShowRouteBd) GetOldMetric64() uint64 {
	if m != nil {
		return m.OldMetric64
	}
	return 0
}

func (m *EigrpShowRouteBd) GetMetric() uint32 {
	if m != nil {
		return m.Metric
	}
	return 0
}

func (m *EigrpShowRouteBd) GetMetric64() uint64 {
	if m != nil {
		return m.Metric64
	}
	return 0
}

func (m *EigrpShowRouteBd) GetRibMetric() uint32 {
	if m != nil {
		return m.RibMetric
	}
	return 0
}

func (m *EigrpShowRouteBd) GetTag() uint32 {
	if m != nil {
		return m.Tag
	}
	return 0
}

func (m *EigrpShowRouteBd) GetSendFlag() string {
	if m != nil {
		return m.SendFlag
	}
	return ""
}

func (m *EigrpShowRouteBd) GetTransmitSerialNumber() uint64 {
	if m != nil {
		return m.TransmitSerialNumber
	}
	return 0
}

func (m *EigrpShowRouteBd) GetTransmitRefcount() uint32 {
	if m != nil {
		return m.TransmitRefcount
	}
	return 0
}

func (m *EigrpShowRouteBd) GetTransmitAnchored() bool {
	if m != nil {
		return m.TransmitAnchored
	}
	return false
}

func (m *EigrpShowRouteBd) GetReplyHandles() uint32 {
	if m != nil {
		return m.ReplyHandles
	}
	return 0
}

func (m *EigrpShowRouteBd) GetActiveTimeSecs() uint32 {
	if m != nil {
		return m.ActiveTimeSecs
	}
	return 0
}

func (m *EigrpShowRouteBd) GetActiveTimeNsecs() uint32 {
	if m != nil {
		return m.ActiveTimeNsecs
	}
	return 0
}

func (m *EigrpShowRouteBd) GetOrigin() uint32 {
	if m != nil {
		return m.Origin
	}
	return 0
}

func (m *EigrpShowRouteBd) GetRetryCount() uint32 {
	if m != nil {
		return m.RetryCount
	}
	return 0
}

func (m *EigrpShowRouteBd) GetActiveStats() bool {
	if m != nil {
		return m.ActiveStats
	}
	return false
}

func (m *EigrpShowRouteBd) GetMinTime() uint32 {
	if m != nil {
		return m.MinTime
	}
	return 0
}

func (m *EigrpShowRouteBd) GetMaxTime() uint32 {
	if m != nil {
		return m.MaxTime
	}
	return 0
}

func (m *EigrpShowRouteBd) GetAverageTime() uint32 {
	if m != nil {
		return m.AverageTime
	}
	return 0
}

func (m *EigrpShowRouteBd) GetAckCount() uint32 {
	if m != nil {
		return m.AckCount
	}
	return 0
}

func (m *EigrpShowRouteBd) GetReplies() uint32 {
	if m != nil {
		return m.Replies
	}
	return 0
}

func (m *EigrpShowRouteBd) GetPaths() []*EigrpShowPathBd {
	if m != nil {
		return m.Paths
	}
	return nil
}

func (m *EigrpShowRouteBd) GetActivePeer() []*EigrpShowActBd {
	if m != nil {
		return m.ActivePeer
	}
	return nil
}

func (m *EigrpShowRouteBd) GetRouteInSia() bool {
	if m != nil {
		return m.RouteInSia
	}
	return false
}

func (m *EigrpShowRouteBd) GetSiaReplyHandles() uint32 {
	if m != nil {
		return m.SiaReplyHandles
	}
	return 0
}

func (m *EigrpShowRouteBd) GetSiaPeer() []*EigrpShowActBd {
	if m != nil {
		return m.SiaPeer
	}
	return nil
}

func init() {
	proto.RegisterType((*EigrpShowRouteBd_KEYS)(nil), "cisco_ios_xr_eigrp_oper.eigrp.processes.process.vrfs.vrf.afs.af.ases.as.topology_routes.topology_route.eigrp_show_route_bd_KEYS")
	proto.RegisterType((*EigrpPrefixBd)(nil), "cisco_ios_xr_eigrp_oper.eigrp.processes.process.vrfs.vrf.afs.af.ases.as.topology_routes.topology_route.eigrp_prefix_bd")
	proto.RegisterType((*EigrpAddrBd)(nil), "cisco_ios_xr_eigrp_oper.eigrp.processes.process.vrfs.vrf.afs.af.ases.as.topology_routes.topology_route.eigrp_addr_bd")
	proto.RegisterType((*EigrpShowPathBd)(nil), "cisco_ios_xr_eigrp_oper.eigrp.processes.process.vrfs.vrf.afs.af.ases.as.topology_routes.topology_route.eigrp_show_path_bd")
	proto.RegisterType((*EigrpShowActBd)(nil), "cisco_ios_xr_eigrp_oper.eigrp.processes.process.vrfs.vrf.afs.af.ases.as.topology_routes.topology_route.eigrp_show_act_bd")
	proto.RegisterType((*EigrpShowRouteBd)(nil), "cisco_ios_xr_eigrp_oper.eigrp.processes.process.vrfs.vrf.afs.af.ases.as.topology_routes.topology_route.eigrp_show_route_bd")
}

func init() { proto.RegisterFile("eigrp_show_route_bd.proto", fileDescriptor_06d4607c2181d70c) }

var fileDescriptor_06d4607c2181d70c = []byte{
	// 1554 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x57, 0xdd, 0x72, 0x13, 0xc7,
	0x12, 0x2e, 0xd9, 0x60, 0x4b, 0x6d, 0xd9, 0x96, 0x07, 0x1f, 0x33, 0xc6, 0x18, 0x6c, 0x73, 0x38,
	0x98, 0x03, 0x47, 0x75, 0x02, 0x8a, 0x42, 0xfe, 0x08, 0x0e, 0x3f, 0xc1, 0x01, 0x8c, 0x23, 0x43,
	0x55, 0x72, 0xb5, 0x35, 0xda, 0x1d, 0x49, 0x53, 0xec, 0x8f, 0x6a, 0x66, 0x64, 0xe4, 0xbc, 0x43,
	0xaa, 0x52, 0x29, 0x92, 0x8b, 0xdc, 0xe4, 0x11, 0xf2, 0x02, 0x79, 0xb8, 0xd4, 0x74, 0xcf, 0xee,
	0xca, 0x2e, 0x93, 0x4b, 0x7c, 0xa3, 0x9a, 0xf9, 0xfa, 0x9b, 0x9e, 0x9e, 0xde, 0xfe, 0x13, 0xac,
	0x4a, 0xd5, 0xd7, 0xc3, 0xc0, 0x0c, 0xb2, 0xb7, 0x81, 0xce, 0x46, 0x56, 0x06, 0xdd, 0xa8, 0x39,
	0xd4, 0x99, 0xcd, 0x58, 0x2f, 0x54, 0x26, 0xcc, 0x02, 0x95, 0x99, 0x60, 0xac, 0x03, 0xe2, 0x65,
	0x43, 0xa9, 0x9b, 0xb8, 0x74, 0xa4, 0x50, 0x1a, 0x23, 0x4d, 0xbe, 0x6a, 0x1e, 0xea, 0x1e, 0xfe,
	0x34, 0x45, 0xcf, 0x34, 0x45, 0xaf, 0x29, 0x9c, 0x50, 0x98, 0xa6, 0xcd, 0x86, 0x59, 0x9c, 0xf5,
	0x8f, 0xe8, 0x82, 0x93, 0xfb, 0xad, 0xbf, 0x2a, 0xc0, 0x4f, 0xb1, 0x22, 0x78, 0xf6, 0xf8, 0x87,
	0x03, 0xb6, 0x0e, 0xe0, 0xd5, 0x07, 0x2a, 0xe2, 0x95, 0x8d, 0xca, 0x76, 0xad, 0x53, 0xf3, 0xc8,
	0x6e, 0xc4, 0x56, 0xa1, 0x7a, 0xa8, 0x7b, 0x41, 0x2a, 0x12, 0xc9, 0xa7, 0x50, 0x38, 0x7b, 0xa8,
	0x7b, 0x7b, 0x22, 0x91, 0xec, 0x22, 0xcc, 0x0a, 0x2f, 0x99, 0x46, 0xc9, 0x8c, 0x20, 0x41, 0x03,
	0xa6, 0x85, 0x49, 0xf9, 0xb9, 0x8d, 0xca, 0xf6, 0x7c, 0xc7, 0x2d, 0xd9, 0x0a, 0xcc, 0x0c, 0xb5,
	0xec, 0xa9, 0x31, 0x3f, 0x4f, 0x4c, 0xda, 0xb1, 0x6b, 0x30, 0x4f, 0xab, 0x20, 0x96, 0x69, 0xdf,
	0x0e, 0xf8, 0x0c, 0x9e, 0xa9, 0x13, 0xf8, 0x1c, 0xb1, 0xad, 0x31, 0x2c, 0x92, 0xf5, 0x9e, 0xda,
	0x8d, 0xd8, 0x55, 0x98, 0x53, 0xc3, 0xc3, 0x96, 0x47, 0xbc, 0xd5, 0xe0, 0xa0, 0x7d, 0x52, 0x4c,
	0x84, 0x76, 0x4e, 0x98, 0x2a, 0x08, 0xed, 0xfd, 0xf7, 0xdc, 0x3c, 0x7d, 0xca, 0xcd, 0xaf, 0x61,
	0x9e, 0x6e, 0x16, 0x51, 0xa4, 0xdd, 0xbd, 0x9b, 0x50, 0xc7, 0x7b, 0xdd, 0x5e, 0x1a, 0xe3, 0x2f,
	0x46, 0x5b, 0x76, 0x08, 0xf2, 0x94, 0x76, 0x41, 0x99, 0x2a, 0x28, 0x6d, 0x4f, 0xd9, 0xfa, 0x65,
	0x01, 0xd8, 0xc4, 0xf7, 0x18, 0x0a, 0x3b, 0x70, 0xca, 0x9d, 0xdb, 0x7a, 0x0a, 0x75, 0x3a, 0xb7,
	0xf5, 0x14, 0xdb, 0x86, 0x46, 0x2a, 0xc7, 0x36, 0x18, 0x64, 0xf8, 0x78, 0x23, 0x53, 0x8b, 0xfa,
	0xaa, 0x9d, 0x05, 0x87, 0x3f, 0xcd, 0x86, 0xfb, 0x84, 0xb2, 0x3f, 0x2a, 0x13, 0xd4, 0xfc, 0x6a,
	0xf7, 0xa4, 0xb9, 0x3b, 0xa3, 0xe6, 0x87, 0x09, 0xb3, 0xe6, 0x31, 0x57, 0x15, 0x16, 0xe6, 0x7e,
	0xb9, 0x09, 0x0d, 0x95, 0x5a, 0xa9, 0x7b, 0x22, 0x94, 0xc1, 0x40, 0xa4, 0x51, 0x2c, 0x31, 0x42,
	0x6a, 0x9d, 0xc5, 0x02, 0x7f, 0x8a, 0x30, 0xbb, 0x0e, 0x0b, 0x25, 0x15, 0xe3, 0x8b, 0xa2, 0x66,
	0xbe, 0x40, 0x31, 0xcc, 0x56, 0x60, 0x26, 0xd3, 0xaa, 0xaf, 0x52, 0x8c, 0x9a, 0x5a, 0xc7, 0xef,
	0xd8, 0xaf, 0x15, 0x00, 0x95, 0xf6, 0x32, 0x93, 0x8d, 0x74, 0x28, 0xf9, 0xec, 0x59, 0x7a, 0x61,
	0xc2, 0x10, 0xb6, 0x06, 0x35, 0x23, 0xd3, 0x28, 0xe8, 0xc5, 0xa2, 0xcf, 0xab, 0x68, 0x72, 0xd5,
	0x01, 0x4f, 0x62, 0xd1, 0x67, 0xb7, 0x60, 0x49, 0xcb, 0x61, 0x7c, 0x14, 0x64, 0x23, 0x6b, 0xac,
	0x48, 0x23, 0x95, 0xf6, 0x79, 0x0d, 0xbf, 0x75, 0x03, 0x05, 0x2f, 0x4b, 0xdc, 0xbd, 0x3c, 0x91,
	0x56, 0xab, 0x90, 0x03, 0x06, 0x8b, 0xdf, 0xb1, 0x4b, 0x50, 0xa5, 0x55, 0xbb, 0xc5, 0xe7, 0x36,
	0x2a, 0xdb, 0xe7, 0x3a, 0xc5, 0xde, 0xf9, 0xdf, 0x8c, 0x42, 0xf7, 0xb2, 0x4c, 0x07, 0xfe, 0x74,
	0x1d, 0x4f, 0x2f, 0x16, 0xf8, 0x0b, 0x52, 0xf3, 0x3f, 0x60, 0x27, 0xa9, 0xed, 0x16, 0x9f, 0x47,
	0x85, 0x4b, 0x27, 0xc8, 0xed, 0x96, 0x8b, 0x78, 0x32, 0xdd, 0x58, 0x61, 0x47, 0x86, 0x2f, 0xa0,
	0xd5, 0x73, 0x88, 0x1d, 0x20, 0xe4, 0x8a, 0x8c, 0x51, 0x22, 0x27, 0x2c, 0x22, 0xa1, 0x66, 0x94,
	0xf0, 0xe2, 0x16, 0xac, 0x58, 0x2d, 0x52, 0x93, 0x28, 0x1b, 0x18, 0xa9, 0x95, 0x88, 0x83, 0x74,
	0x94, 0x74, 0xa5, 0xe6, 0x0d, 0xbc, 0x74, 0x39, 0x97, 0x1e, 0xa0, 0x70, 0x0f, 0x65, 0xee, 0xb5,
	0x22, 0x0d, 0x07, 0x99, 0x96, 0x11, 0x5f, 0x42, 0x95, 0xc5, 0xde, 0xa5, 0xb7, 0x1c, 0x5b, 0xa9,
	0x53, 0x11, 0x63, 0x7e, 0x71, 0x86, 0x84, 0x7a, 0x0e, 0xee, 0x0b, 0x3b, 0x60, 0x97, 0xa1, 0xd6,
	0x15, 0x69, 0xf4, 0x56, 0x45, 0x76, 0xc0, 0x2f, 0xa0, 0x2f, 0x4a, 0x80, 0x6d, 0xc0, 0x5c, 0xb1,
	0x69, 0xb7, 0xf8, 0x32, 0x5a, 0x32, 0x09, 0xb1, 0x65, 0x38, 0x1f, 0xc9, 0x58, 0x1c, 0xf1, 0x7f,
	0xe1, 0x59, 0xda, 0x30, 0x0e, 0xb3, 0xb8, 0x68, 0xb7, 0xf8, 0x0a, 0x9e, 0xc9, 0xb7, 0xce, 0x0b,
	0xb8, 0x0c, 0x46, 0xa9, 0xb2, 0xfc, 0x22, 0x95, 0x5a, 0x44, 0x5e, 0xa7, 0xca, 0xba, 0xfc, 0x4f,
	0xec, 0x88, 0x73, 0xca, 0xff, 0xc4, 0x8e, 0x5c, 0xc4, 0xb8, 0x7c, 0x0e, 0xb3, 0x51, 0x6a, 0xf9,
	0x2a, 0xe2, 0xd5, 0x41, 0x36, 0x7c, 0xe8, 0xf6, 0xce, 0x3e, 0x2d, 0x63, 0x25, 0xba, 0x2a, 0x56,
	0xf6, 0x88, 0x5f, 0x42, 0xf1, 0x24, 0xc4, 0x18, 0x9c, 0x8b, 0x33, 0x11, 0xf1, 0x35, 0x14, 0xe1,
	0x9a, 0xdd, 0x06, 0x86, 0x59, 0xe4, 0x1c, 0x83, 0x01, 0xab, 0x5d, 0xd9, 0xbf, 0x8c, 0xb6, 0x34,
	0x72, 0x49, 0x07, 0x05, 0xbb, 0x54, 0xef, 0x72, 0xb6, 0x15, 0x7d, 0xbe, 0x4e, 0x97, 0xe4, 0xd8,
	0x2b, 0xd1, 0x67, 0x0f, 0xe0, 0xb2, 0x73, 0x6a, 0x1a, 0xc9, 0x28, 0x08, 0xb3, 0x24, 0x71, 0x6f,
	0x53, 0xd2, 0x14, 0xf5, 0xea, 0x0a, 0x3a, 0xfe, 0x52, 0xce, 0x79, 0x58, 0x52, 0xf2, 0xda, 0x75,
	0x1f, 0xd6, 0x4e, 0xd5, 0xe0, 0x0b, 0xf3, 0x55, 0xbc, 0x73, 0xf5, 0x14, 0x05, 0x54, 0xa5, 0xd9,
	0x47, 0xb0, 0x7c, 0xda, 0x79, 0xbe, 0x81, 0x8f, 0xba, 0x70, 0xca, 0xc1, 0xdc, 0x68, 0x7c, 0x97,
	0xcb, 0x50, 0x9d, 0x08, 0xab, 0xb2, 0xb4, 0x30, 0x7a, 0xb3, 0x34, 0xda, 0x71, 0x76, 0x4b, 0x4a,
	0x6e, 0xf4, 0x6d, 0x60, 0x85, 0x86, 0xd2, 0x8f, 0x5b, 0x68, 0x6b, 0x23, 0x97, 0x14, 0x7e, 0xfc,
	0x3f, 0x99, 0x48, 0x7e, 0x1c, 0x28, 0x13, 0x98, 0x23, 0x63, 0x65, 0xc2, 0xaf, 0xe1, 0x3d, 0x85,
	0xa6, 0x57, 0x03, 0x65, 0x0e, 0x50, 0xe2, 0x1a, 0x58, 0x71, 0x42, 0x18, 0xfe, 0x6f, 0x54, 0x0c,
	0x39, 0xb4, 0x63, 0x5c, 0xc1, 0x28, 0x23, 0xdc, 0x8d, 0x13, 0x61, 0x16, 0xf3, 0xeb, 0xf4, 0x1d,
	0x8b, 0x28, 0xf7, 0x38, 0xbb, 0x01, 0x8b, 0x05, 0xd9, 0xe7, 0xfe, 0x7f, 0x50, 0xe3, 0x42, 0x0e,
	0xfb, 0xd4, 0xdf, 0x84, 0x7a, 0x69, 0xa8, 0xe8, 0xf3, 0x1b, 0xf4, 0xc1, 0x0b, 0x03, 0x45, 0x9f,
	0xdd, 0x03, 0x1e, 0x66, 0x69, 0xa4, 0x9c, 0x37, 0x44, 0x1c, 0x44, 0xb2, 0x27, 0x46, 0xb1, 0xa5,
	0x2c, 0xdb, 0xc6, 0xf7, 0xac, 0x4c, 0xc8, 0x1f, 0x91, 0x18, 0xf3, 0x6d, 0x0d, 0x6a, 0x5a, 0x75,
	0xb1, 0x0a, 0x48, 0x7e, 0x93, 0x0a, 0xa0, 0x56, 0x5d, 0x57, 0x04, 0xe4, 0xd6, 0x6f, 0x53, 0xb0,
	0x34, 0xd1, 0x14, 0x45, 0x68, 0x5d, 0x4f, 0xbc, 0x0e, 0x0b, 0x43, 0x29, 0x75, 0x20, 0x0e, 0x85,
	0x8a, 0x45, 0x37, 0x96, 0xd8, 0x1e, 0xab, 0x9d, 0x79, 0x87, 0xee, 0xe4, 0x20, 0xfb, 0xa9, 0x02,
	0x33, 0xbe, 0xdc, 0x4f, 0x9d, 0x65, 0xb9, 0xf7, 0x46, 0x1c, 0xef, 0x60, 0xb1, 0x32, 0xd6, 0x4f,
	0x48, 0x65, 0x07, 0x7b, 0xae, 0x8c, 0x75, 0x55, 0x8a, 0x3a, 0x61, 0x5e, 0xee, 0x68, 0x64, 0xaa,
	0x13, 0x48, 0x65, 0x6e, 0xeb, 0xcf, 0x3a, 0x5c, 0x38, 0x65, 0x7a, 0xcb, 0xc7, 0x85, 0x3b, 0xe5,
	0xb8, 0xb0, 0x06, 0x35, 0x61, 0x72, 0x55, 0x77, 0xa9, 0x5c, 0x08, 0xe3, 0xab, 0xa5, 0x73, 0x7e,
	0x11, 0xa7, 0x2d, 0xef, 0xfc, 0x3c, 0x3e, 0x57, 0x60, 0x46, 0x84, 0x56, 0x1d, 0x4a, 0xfe, 0x31,
	0xba, 0xd7, 0xef, 0xd8, 0xbb, 0x0a, 0xd4, 0xfc, 0x98, 0x34, 0xd6, 0xbc, 0x8d, 0xae, 0x7d, 0xfb,
	0x61, 0x5d, 0x5b, 0x0c, 0x7d, 0x9d, 0x2a, 0x2d, 0xbf, 0xd7, 0xec, 0x0a, 0x40, 0xd1, 0x86, 0x0c,
	0xff, 0x84, 0x72, 0xa3, 0x44, 0x8e, 0x35, 0xb0, 0xb2, 0x12, 0xdd, 0xc3, 0xa7, 0x95, 0x0d, 0xac,
	0x28, 0x40, 0xeb, 0x00, 0x59, 0x1c, 0xe5, 0x89, 0xf1, 0x29, 0x35, 0x82, 0x2c, 0x8e, 0xca, 0x9c,
	0x28, 0xc5, 0xed, 0x16, 0xff, 0x8c, 0x3a, 0x41, 0x41, 0x68, 0xb7, 0x26, 0x1a, 0xf2, 0xe7, 0xef,
	0x6d, 0xc8, 0x5f, 0x9c, 0x68, 0xc8, 0xeb, 0x00, 0x2e, 0x1b, 0xfc, 0xb9, 0x2f, 0xe9, 0x56, 0xad,
	0xba, 0xfe, 0xd6, 0x06, 0x4c, 0xbb, 0x04, 0xbc, 0x4f, 0x9f, 0xd7, 0x8a, 0xfe, 0xf1, 0xf9, 0xe1,
	0xab, 0x13, 0xf3, 0xc3, 0xfb, 0x5b, 0xe8, 0x83, 0x7f, 0x68, 0xa1, 0xb7, 0x60, 0xa9, 0x38, 0xa5,
	0x65, 0x8f, 0x1a, 0xcd, 0x0e, 0x15, 0xb1, 0x5c, 0xd0, 0xf1, 0xf8, 0x31, 0x72, 0xd1, 0x78, 0xbf,
	0xa6, 0x11, 0x25, 0x17, 0xec, 0x4c, 0x34, 0x60, 0x1a, 0x0a, 0x28, 0x96, 0x0d, 0x7f, 0x48, 0xa1,
	0x8d, 0x20, 0xcd, 0x79, 0xc6, 0xcd, 0xb7, 0x14, 0x68, 0x81, 0x55, 0x89, 0x0c, 0x8c, 0x0c, 0x0d,
	0x7f, 0x44, 0x75, 0x89, 0xf0, 0x57, 0x2a, 0x91, 0x07, 0x32, 0x34, 0xec, 0xbf, 0xb0, 0x34, 0xc9,
	0x4c, 0x91, 0xfa, 0x98, 0xc6, 0x97, 0x92, 0xba, 0xe7, 0xe0, 0x89, 0xb9, 0xf0, 0x09, 0x7d, 0x0c,
	0x3f, 0x17, 0x5e, 0x75, 0x0d, 0xd3, 0xea, 0x23, 0xdf, 0x4f, 0xbf, 0xa1, 0xb0, 0x41, 0x88, 0x3a,
	0xea, 0x26, 0xd4, 0xfd, 0x25, 0xae, 0x44, 0x19, 0xfe, 0x94, 0x06, 0x19, 0xc2, 0x5c, 0x95, 0x32,
	0xee, 0xef, 0x50, 0xa2, 0x52, 0x34, 0x82, 0xef, 0xa2, 0x82, 0xd9, 0x44, 0xa5, 0xee, 0x6e, 0x14,
	0x89, 0x31, 0x89, 0xbe, 0xf5, 0x22, 0x31, 0x46, 0x91, 0x53, 0x7c, 0x28, 0xb5, 0xe8, 0x93, 0xf9,
	0xfc, 0x19, 0x55, 0x55, 0x8f, 0x21, 0xc5, 0xe5, 0x6e, 0xf8, 0xc6, 0x9b, 0xf6, 0xdc, 0xe7, 0x6e,
	0xf8, 0x86, 0x0c, 0xe3, 0x30, 0xeb, 0xfc, 0xe6, 0x9a, 0xda, 0x0b, 0xd2, 0xec, 0xb7, 0xec, 0xe7,
	0x0a, 0x9c, 0x77, 0x95, 0xd7, 0xf0, 0xbd, 0x8d, 0xe9, 0xed, 0xb9, 0x3b, 0x3f, 0x7e, 0xd8, 0xe4,
	0x9c, 0xfc, 0xff, 0xd2, 0x21, 0x43, 0xd8, 0xef, 0x15, 0xf0, 0x2e, 0x0b, 0x5c, 0x91, 0xe6, 0x2f,
	0xd1, 0xb0, 0xa3, 0x33, 0x30, 0x8c, 0x7a, 0x48, 0x07, 0xc8, 0x9a, 0x7d, 0x29, 0x35, 0xdb, 0x80,
	0x3a, 0x15, 0x50, 0x95, 0x06, 0x46, 0x09, 0xbe, 0x8f, 0x9f, 0x18, 0x10, 0xdb, 0x4d, 0x0f, 0x94,
	0x70, 0x91, 0xe6, 0x46, 0xd5, 0xe3, 0xc1, 0xfb, 0x9d, 0x1f, 0x94, 0x95, 0xe8, 0x4c, 0xc6, 0xef,
	0xbb, 0x0a, 0x54, 0x1d, 0x19, 0xdf, 0xd9, 0x39, 0xeb, 0x77, 0xce, 0x1a, 0x25, 0xdc, 0x23, 0xbb,
	0x33, 0x38, 0x0f, 0xdc, 0xfd, 0x3b, 0x00, 0x00, 0xff, 0xff, 0x8e, 0x5c, 0x4a, 0x15, 0x7b, 0x10,
	0x00, 0x00,
}
