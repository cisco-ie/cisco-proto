/*
Copyright 2019 Cisco Systems

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: eigrp_show_accounting_bd.proto

package cisco_ios_xr_eigrp_oper_eigrp_processes_process_vrfs_vrf_afs_af_ases_as_eigrp_accounting

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type EigrpShowAccountingBd_KEYS struct {
	ProcessId            string   `protobuf:"bytes,1,opt,name=process_id,json=processId,proto3" json:"process_id,omitempty"`
	VrfName              string   `protobuf:"bytes,2,opt,name=vrf_name,json=vrfName,proto3" json:"vrf_name,omitempty"`
	AfName               string   `protobuf:"bytes,3,opt,name=af_name,json=afName,proto3" json:"af_name,omitempty"`
	Asn                  uint32   `protobuf:"varint,4,opt,name=asn,proto3" json:"asn,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EigrpShowAccountingBd_KEYS) Reset()         { *m = EigrpShowAccountingBd_KEYS{} }
func (m *EigrpShowAccountingBd_KEYS) String() string { return proto.CompactTextString(m) }
func (*EigrpShowAccountingBd_KEYS) ProtoMessage()    {}
func (*EigrpShowAccountingBd_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_6dcccc7f83c4f03f, []int{0}
}

func (m *EigrpShowAccountingBd_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EigrpShowAccountingBd_KEYS.Unmarshal(m, b)
}
func (m *EigrpShowAccountingBd_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EigrpShowAccountingBd_KEYS.Marshal(b, m, deterministic)
}
func (m *EigrpShowAccountingBd_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EigrpShowAccountingBd_KEYS.Merge(m, src)
}
func (m *EigrpShowAccountingBd_KEYS) XXX_Size() int {
	return xxx_messageInfo_EigrpShowAccountingBd_KEYS.Size(m)
}
func (m *EigrpShowAccountingBd_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_EigrpShowAccountingBd_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_EigrpShowAccountingBd_KEYS proto.InternalMessageInfo

func (m *EigrpShowAccountingBd_KEYS) GetProcessId() string {
	if m != nil {
		return m.ProcessId
	}
	return ""
}

func (m *EigrpShowAccountingBd_KEYS) GetVrfName() string {
	if m != nil {
		return m.VrfName
	}
	return ""
}

func (m *EigrpShowAccountingBd_KEYS) GetAfName() string {
	if m != nil {
		return m.AfName
	}
	return ""
}

func (m *EigrpShowAccountingBd_KEYS) GetAsn() uint32 {
	if m != nil {
		return m.Asn
	}
	return 0
}

type EigrpAddrBd struct {
	Ipv4Address          string   `protobuf:"bytes,1,opt,name=ipv4_address,json=ipv4Address,proto3" json:"ipv4_address,omitempty"`
	Ipv6Address          string   `protobuf:"bytes,2,opt,name=ipv6_address,json=ipv6Address,proto3" json:"ipv6_address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EigrpAddrBd) Reset()         { *m = EigrpAddrBd{} }
func (m *EigrpAddrBd) String() string { return proto.CompactTextString(m) }
func (*EigrpAddrBd) ProtoMessage()    {}
func (*EigrpAddrBd) Descriptor() ([]byte, []int) {
	return fileDescriptor_6dcccc7f83c4f03f, []int{1}
}

func (m *EigrpAddrBd) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EigrpAddrBd.Unmarshal(m, b)
}
func (m *EigrpAddrBd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EigrpAddrBd.Marshal(b, m, deterministic)
}
func (m *EigrpAddrBd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EigrpAddrBd.Merge(m, src)
}
func (m *EigrpAddrBd) XXX_Size() int {
	return xxx_messageInfo_EigrpAddrBd.Size(m)
}
func (m *EigrpAddrBd) XXX_DiscardUnknown() {
	xxx_messageInfo_EigrpAddrBd.DiscardUnknown(m)
}

var xxx_messageInfo_EigrpAddrBd proto.InternalMessageInfo

func (m *EigrpAddrBd) GetIpv4Address() string {
	if m != nil {
		return m.Ipv4Address
	}
	return ""
}

func (m *EigrpAddrBd) GetIpv6Address() string {
	if m != nil {
		return m.Ipv6Address
	}
	return ""
}

type EigrpPeerStatsBd struct {
	Afi                  uint32       `protobuf:"varint,1,opt,name=afi,proto3" json:"afi,omitempty"`
	State                string       `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
	Source               *EigrpAddrBd `protobuf:"bytes,3,opt,name=source,proto3" json:"source,omitempty"`
	InterfaceList        string       `protobuf:"bytes,4,opt,name=interface_list,json=interfaceList,proto3" json:"interface_list,omitempty"`
	PeerPrefixCount      uint32       `protobuf:"varint,5,opt,name=peer_prefix_count,json=peerPrefixCount,proto3" json:"peer_prefix_count,omitempty"`
	RestartCount         uint32       `protobuf:"varint,6,opt,name=restart_count,json=restartCount,proto3" json:"restart_count,omitempty"`
	TimeLeft             uint32       `protobuf:"varint,7,opt,name=time_left,json=timeLeft,proto3" json:"time_left,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *EigrpPeerStatsBd) Reset()         { *m = EigrpPeerStatsBd{} }
func (m *EigrpPeerStatsBd) String() string { return proto.CompactTextString(m) }
func (*EigrpPeerStatsBd) ProtoMessage()    {}
func (*EigrpPeerStatsBd) Descriptor() ([]byte, []int) {
	return fileDescriptor_6dcccc7f83c4f03f, []int{2}
}

func (m *EigrpPeerStatsBd) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EigrpPeerStatsBd.Unmarshal(m, b)
}
func (m *EigrpPeerStatsBd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EigrpPeerStatsBd.Marshal(b, m, deterministic)
}
func (m *EigrpPeerStatsBd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EigrpPeerStatsBd.Merge(m, src)
}
func (m *EigrpPeerStatsBd) XXX_Size() int {
	return xxx_messageInfo_EigrpPeerStatsBd.Size(m)
}
func (m *EigrpPeerStatsBd) XXX_DiscardUnknown() {
	xxx_messageInfo_EigrpPeerStatsBd.DiscardUnknown(m)
}

var xxx_messageInfo_EigrpPeerStatsBd proto.InternalMessageInfo

func (m *EigrpPeerStatsBd) GetAfi() uint32 {
	if m != nil {
		return m.Afi
	}
	return 0
}

func (m *EigrpPeerStatsBd) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *EigrpPeerStatsBd) GetSource() *EigrpAddrBd {
	if m != nil {
		return m.Source
	}
	return nil
}

func (m *EigrpPeerStatsBd) GetInterfaceList() string {
	if m != nil {
		return m.InterfaceList
	}
	return ""
}

func (m *EigrpPeerStatsBd) GetPeerPrefixCount() uint32 {
	if m != nil {
		return m.PeerPrefixCount
	}
	return 0
}

func (m *EigrpPeerStatsBd) GetRestartCount() uint32 {
	if m != nil {
		return m.RestartCount
	}
	return 0
}

func (m *EigrpPeerStatsBd) GetTimeLeft() uint32 {
	if m != nil {
		return m.TimeLeft
	}
	return 0
}

type EigrpShowAccountingBd struct {
	Afi                  uint32              `protobuf:"varint,50,opt,name=afi,proto3" json:"afi,omitempty"`
	AsNumber             uint32              `protobuf:"varint,51,opt,name=as_number,json=asNumber,proto3" json:"as_number,omitempty"`
	RouterId             string              `protobuf:"bytes,52,opt,name=router_id,json=routerId,proto3" json:"router_id,omitempty"`
	AggregateCount       uint32              `protobuf:"varint,53,opt,name=aggregate_count,json=aggregateCount,proto3" json:"aggregate_count,omitempty"`
	State                string              `protobuf:"bytes,54,opt,name=state,proto3" json:"state,omitempty"`
	RedistPrefixCount    uint32              `protobuf:"varint,55,opt,name=redist_prefix_count,json=redistPrefixCount,proto3" json:"redist_prefix_count,omitempty"`
	RestartCount         uint32              `protobuf:"varint,56,opt,name=restart_count,json=restartCount,proto3" json:"restart_count,omitempty"`
	TimeLeft             uint32              `protobuf:"varint,57,opt,name=time_left,json=timeLeft,proto3" json:"time_left,omitempty"`
	RedistPrefixPresent  bool                `protobuf:"varint,58,opt,name=redist_prefix_present,json=redistPrefixPresent,proto3" json:"redist_prefix_present,omitempty"`
	PeerStatistics       []*EigrpPeerStatsBd `protobuf:"bytes,59,rep,name=peer_statistics,json=peerStatistics,proto3" json:"peer_statistics,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *EigrpShowAccountingBd) Reset()         { *m = EigrpShowAccountingBd{} }
func (m *EigrpShowAccountingBd) String() string { return proto.CompactTextString(m) }
func (*EigrpShowAccountingBd) ProtoMessage()    {}
func (*EigrpShowAccountingBd) Descriptor() ([]byte, []int) {
	return fileDescriptor_6dcccc7f83c4f03f, []int{3}
}

func (m *EigrpShowAccountingBd) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EigrpShowAccountingBd.Unmarshal(m, b)
}
func (m *EigrpShowAccountingBd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EigrpShowAccountingBd.Marshal(b, m, deterministic)
}
func (m *EigrpShowAccountingBd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EigrpShowAccountingBd.Merge(m, src)
}
func (m *EigrpShowAccountingBd) XXX_Size() int {
	return xxx_messageInfo_EigrpShowAccountingBd.Size(m)
}
func (m *EigrpShowAccountingBd) XXX_DiscardUnknown() {
	xxx_messageInfo_EigrpShowAccountingBd.DiscardUnknown(m)
}

var xxx_messageInfo_EigrpShowAccountingBd proto.InternalMessageInfo

func (m *EigrpShowAccountingBd) GetAfi() uint32 {
	if m != nil {
		return m.Afi
	}
	return 0
}

func (m *EigrpShowAccountingBd) GetAsNumber() uint32 {
	if m != nil {
		return m.AsNumber
	}
	return 0
}

func (m *EigrpShowAccountingBd) GetRouterId() string {
	if m != nil {
		return m.RouterId
	}
	return ""
}

func (m *EigrpShowAccountingBd) GetAggregateCount() uint32 {
	if m != nil {
		return m.AggregateCount
	}
	return 0
}

func (m *EigrpShowAccountingBd) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *EigrpShowAccountingBd) GetRedistPrefixCount() uint32 {
	if m != nil {
		return m.RedistPrefixCount
	}
	return 0
}

func (m *EigrpShowAccountingBd) GetRestartCount() uint32 {
	if m != nil {
		return m.RestartCount
	}
	return 0
}

func (m *EigrpShowAccountingBd) GetTimeLeft() uint32 {
	if m != nil {
		return m.TimeLeft
	}
	return 0
}

func (m *EigrpShowAccountingBd) GetRedistPrefixPresent() bool {
	if m != nil {
		return m.RedistPrefixPresent
	}
	return false
}

func (m *EigrpShowAccountingBd) GetPeerStatistics() []*EigrpPeerStatsBd {
	if m != nil {
		return m.PeerStatistics
	}
	return nil
}

func init() {
	proto.RegisterType((*EigrpShowAccountingBd_KEYS)(nil), "cisco_ios_xr_eigrp_oper.eigrp.processes.process.vrfs.vrf.afs.af.ases.as.eigrp_accounting.eigrp_show_accounting_bd_KEYS")
	proto.RegisterType((*EigrpAddrBd)(nil), "cisco_ios_xr_eigrp_oper.eigrp.processes.process.vrfs.vrf.afs.af.ases.as.eigrp_accounting.eigrp_addr_bd")
	proto.RegisterType((*EigrpPeerStatsBd)(nil), "cisco_ios_xr_eigrp_oper.eigrp.processes.process.vrfs.vrf.afs.af.ases.as.eigrp_accounting.eigrp_peer_stats_bd")
	proto.RegisterType((*EigrpShowAccountingBd)(nil), "cisco_ios_xr_eigrp_oper.eigrp.processes.process.vrfs.vrf.afs.af.ases.as.eigrp_accounting.eigrp_show_accounting_bd")
}

func init() { proto.RegisterFile("eigrp_show_accounting_bd.proto", fileDescriptor_6dcccc7f83c4f03f) }

var fileDescriptor_6dcccc7f83c4f03f = []byte{
	// 531 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x54, 0xcb, 0x6e, 0xd3, 0x40,
	0x14, 0x95, 0x13, 0x9a, 0xc7, 0x4d, 0x93, 0xd0, 0x09, 0x08, 0xa3, 0xaa, 0x28, 0x04, 0x21, 0x22,
	0x16, 0x5e, 0xa4, 0x25, 0xbc, 0x56, 0x08, 0xb1, 0xa8, 0xa8, 0xaa, 0xca, 0x15, 0x12, 0xac, 0x46,
	0x13, 0xfb, 0xda, 0x8c, 0xd4, 0xd8, 0xd6, 0xdc, 0x49, 0xe8, 0x8e, 0x0d, 0xdf, 0xc0, 0x8f, 0xf1,
	0x0b, 0x7c, 0x08, 0x9a, 0x47, 0x4c, 0xb2, 0x28, 0xac, 0xba, 0xb1, 0xe6, 0x9e, 0x73, 0x7c, 0x1f,
	0x67, 0xae, 0x0d, 0x8f, 0x50, 0xe6, 0xaa, 0xe2, 0xf4, 0xb5, 0xfc, 0xc6, 0x45, 0x92, 0x94, 0xab,
	0x42, 0xcb, 0x22, 0xe7, 0x8b, 0x34, 0xaa, 0x54, 0xa9, 0x4b, 0xf6, 0x39, 0x91, 0x94, 0x94, 0x5c,
	0x96, 0xc4, 0xaf, 0x15, 0x77, 0xe2, 0xb2, 0x42, 0x15, 0xd9, 0xa3, 0x11, 0x25, 0x48, 0x84, 0xb4,
	0x39, 0x45, 0x6b, 0x95, 0xd9, 0x47, 0x24, 0x32, 0x8a, 0x44, 0x16, 0x09, 0x43, 0x0a, 0x72, 0xfa,
	0xad, 0x12, 0x93, 0x1f, 0x01, 0x1c, 0xdd, 0x54, 0x9c, 0x7f, 0xfc, 0xf0, 0xe5, 0x92, 0x1d, 0x01,
	0xf8, 0xac, 0x5c, 0xa6, 0x61, 0x30, 0x0e, 0xa6, 0xdd, 0xb8, 0xeb, 0x91, 0xd3, 0x94, 0x3d, 0x84,
	0xce, 0x5a, 0x65, 0xbc, 0x10, 0x4b, 0x0c, 0x1b, 0x96, 0x6c, 0xaf, 0x55, 0x76, 0x2e, 0x96, 0xc8,
	0x1e, 0x40, 0x5b, 0x78, 0xa6, 0x69, 0x99, 0x96, 0x70, 0xc4, 0x5d, 0x68, 0x0a, 0x2a, 0xc2, 0x3b,
	0xe3, 0x60, 0xda, 0x8f, 0xcd, 0x71, 0xf2, 0x09, 0xfa, 0xbe, 0xb5, 0x34, 0x55, 0x7c, 0x91, 0xb2,
	0xc7, 0xb0, 0x2f, 0xab, 0xf5, 0x89, 0x8d, 0x91, 0xc8, 0xd7, 0xed, 0x19, 0xec, 0x9d, 0x83, 0xbc,
	0x64, 0x5e, 0x4b, 0x1a, 0xb5, 0x64, 0xee, 0x25, 0x93, 0x5f, 0x0d, 0x18, 0xb9, 0xbc, 0x15, 0xa2,
	0xe2, 0xa4, 0x85, 0x26, 0x93, 0xdd, 0x34, 0x90, 0x49, 0x9b, 0xd4, 0x34, 0x90, 0x49, 0x76, 0x0f,
	0xf6, 0x0c, 0xbb, 0x99, 0xc1, 0x05, 0xec, 0x3b, 0xb4, 0xa8, 0x5c, 0xa9, 0xc4, 0x0d, 0xd0, 0x9b,
	0xe5, 0xd1, 0x6d, 0x5d, 0x44, 0xb4, 0x33, 0x7e, 0xec, 0xcb, 0xb2, 0xa7, 0x30, 0x90, 0x85, 0x46,
	0x95, 0x89, 0x04, 0xf9, 0x95, 0x24, 0x6d, 0x4d, 0xeb, 0xc6, 0xfd, 0x1a, 0x3d, 0x93, 0xa4, 0xd9,
	0x73, 0x38, 0xb0, 0x03, 0x56, 0x0a, 0x33, 0x79, 0xcd, 0x6d, 0xd2, 0x70, 0xcf, 0x4e, 0x37, 0x34,
	0xc4, 0x85, 0xc5, 0xdf, 0x1b, 0x98, 0x3d, 0x81, 0xbe, 0x42, 0xd2, 0x42, 0x69, 0xaf, 0x6b, 0x59,
	0xdd, 0xbe, 0x07, 0x9d, 0xe8, 0x10, 0xba, 0x5a, 0x2e, 0x91, 0x5f, 0x61, 0xa6, 0xc3, 0xb6, 0x15,
	0x74, 0x0c, 0x70, 0x86, 0x99, 0x9e, 0xfc, 0x6e, 0x42, 0x78, 0xd3, 0xce, 0x6c, 0xac, 0x9d, 0xfd,
	0xb5, 0xf6, 0x10, 0xba, 0x82, 0x78, 0xb1, 0x5a, 0x2e, 0x50, 0x85, 0xc7, 0x2e, 0x97, 0xa0, 0x73,
	0x1b, 0x1b, 0x52, 0x95, 0x2b, 0x8d, 0xca, 0x2c, 0xd7, 0x89, 0x9d, 0xad, 0xe3, 0x80, 0xd3, 0x94,
	0x3d, 0x83, 0xa1, 0xc8, 0x73, 0x85, 0xb9, 0xd0, 0xe8, 0x9b, 0x7d, 0x61, 0xdf, 0x1f, 0xd4, 0xb0,
	0x6b, 0xb7, 0xbe, 0xbd, 0xf9, 0xf6, 0xed, 0x45, 0x30, 0x52, 0x98, 0x4a, 0xd2, 0xbb, 0xbe, 0xbc,
	0xb4, 0x29, 0x0e, 0x1c, 0xf5, 0x4f, 0x67, 0x5e, 0xfd, 0xcf, 0x99, 0xd7, 0xbb, 0xce, 0xb0, 0x19,
	0xdc, 0xdf, 0xad, 0x58, 0x29, 0x24, 0x2c, 0x74, 0xf8, 0x66, 0x1c, 0x4c, 0x3b, 0xf1, 0x68, 0xbb,
	0xe6, 0x85, 0xa3, 0xd8, 0xcf, 0x00, 0x86, 0xf5, 0x76, 0x4a, 0xd2, 0x32, 0xa1, 0xf0, 0xed, 0xb8,
	0x39, 0xed, 0xcd, 0x96, 0xb7, 0xbd, 0x6d, 0x3b, 0x1f, 0x45, 0x3c, 0x30, 0xe1, 0x65, 0xdd, 0xc4,
	0xa2, 0x65, 0xff, 0x3d, 0xc7, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0xd6, 0x6b, 0xea, 0x9a, 0x9d,
	0x04, 0x00, 0x00,
}
