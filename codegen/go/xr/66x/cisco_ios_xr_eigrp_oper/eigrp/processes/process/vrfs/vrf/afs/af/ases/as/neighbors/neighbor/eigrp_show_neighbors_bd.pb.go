/*
Copyright 2019 Cisco Systems

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: eigrp_show_neighbors_bd.proto

package cisco_ios_xr_eigrp_oper_eigrp_processes_process_vrfs_vrf_afs_af_ases_as_neighbors_neighbor

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type EigrpShowNeighborsBd_KEYS struct {
	ProcessId            string   `protobuf:"bytes,1,opt,name=process_id,json=processId,proto3" json:"process_id,omitempty"`
	VrfName              string   `protobuf:"bytes,2,opt,name=vrf_name,json=vrfName,proto3" json:"vrf_name,omitempty"`
	AfName               string   `protobuf:"bytes,3,opt,name=af_name,json=afName,proto3" json:"af_name,omitempty"`
	Asn                  uint32   `protobuf:"varint,4,opt,name=asn,proto3" json:"asn,omitempty"`
	NeighborAddress      string   `protobuf:"bytes,5,opt,name=neighbor_address,json=neighborAddress,proto3" json:"neighbor_address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EigrpShowNeighborsBd_KEYS) Reset()         { *m = EigrpShowNeighborsBd_KEYS{} }
func (m *EigrpShowNeighborsBd_KEYS) String() string { return proto.CompactTextString(m) }
func (*EigrpShowNeighborsBd_KEYS) ProtoMessage()    {}
func (*EigrpShowNeighborsBd_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_2761b1b590f3cc69, []int{0}
}

func (m *EigrpShowNeighborsBd_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EigrpShowNeighborsBd_KEYS.Unmarshal(m, b)
}
func (m *EigrpShowNeighborsBd_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EigrpShowNeighborsBd_KEYS.Marshal(b, m, deterministic)
}
func (m *EigrpShowNeighborsBd_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EigrpShowNeighborsBd_KEYS.Merge(m, src)
}
func (m *EigrpShowNeighborsBd_KEYS) XXX_Size() int {
	return xxx_messageInfo_EigrpShowNeighborsBd_KEYS.Size(m)
}
func (m *EigrpShowNeighborsBd_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_EigrpShowNeighborsBd_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_EigrpShowNeighborsBd_KEYS proto.InternalMessageInfo

func (m *EigrpShowNeighborsBd_KEYS) GetProcessId() string {
	if m != nil {
		return m.ProcessId
	}
	return ""
}

func (m *EigrpShowNeighborsBd_KEYS) GetVrfName() string {
	if m != nil {
		return m.VrfName
	}
	return ""
}

func (m *EigrpShowNeighborsBd_KEYS) GetAfName() string {
	if m != nil {
		return m.AfName
	}
	return ""
}

func (m *EigrpShowNeighborsBd_KEYS) GetAsn() uint32 {
	if m != nil {
		return m.Asn
	}
	return 0
}

func (m *EigrpShowNeighborsBd_KEYS) GetNeighborAddress() string {
	if m != nil {
		return m.NeighborAddress
	}
	return ""
}

type EigrpAddrBd struct {
	Ipv4Address          string   `protobuf:"bytes,1,opt,name=ipv4_address,json=ipv4Address,proto3" json:"ipv4_address,omitempty"`
	Ipv6Address          string   `protobuf:"bytes,2,opt,name=ipv6_address,json=ipv6Address,proto3" json:"ipv6_address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EigrpAddrBd) Reset()         { *m = EigrpAddrBd{} }
func (m *EigrpAddrBd) String() string { return proto.CompactTextString(m) }
func (*EigrpAddrBd) ProtoMessage()    {}
func (*EigrpAddrBd) Descriptor() ([]byte, []int) {
	return fileDescriptor_2761b1b590f3cc69, []int{1}
}

func (m *EigrpAddrBd) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EigrpAddrBd.Unmarshal(m, b)
}
func (m *EigrpAddrBd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EigrpAddrBd.Marshal(b, m, deterministic)
}
func (m *EigrpAddrBd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EigrpAddrBd.Merge(m, src)
}
func (m *EigrpAddrBd) XXX_Size() int {
	return xxx_messageInfo_EigrpAddrBd.Size(m)
}
func (m *EigrpAddrBd) XXX_DiscardUnknown() {
	xxx_messageInfo_EigrpAddrBd.DiscardUnknown(m)
}

var xxx_messageInfo_EigrpAddrBd proto.InternalMessageInfo

func (m *EigrpAddrBd) GetIpv4Address() string {
	if m != nil {
		return m.Ipv4Address
	}
	return ""
}

func (m *EigrpAddrBd) GetIpv6Address() string {
	if m != nil {
		return m.Ipv6Address
	}
	return ""
}

type EigrpShowNbrQBd struct {
	OperationCode        uint32   `protobuf:"varint,1,opt,name=operation_code,json=operationCode,proto3" json:"operation_code,omitempty"`
	AckSequnceNumber     uint32   `protobuf:"varint,2,opt,name=ack_sequnce_number,json=ackSequnceNumber,proto3" json:"ack_sequnce_number,omitempty"`
	StartSerialNumber    uint64   `protobuf:"varint,3,opt,name=start_serial_number,json=startSerialNumber,proto3" json:"start_serial_number,omitempty"`
	EndSerialNumber      uint64   `protobuf:"varint,4,opt,name=end_serial_number,json=endSerialNumber,proto3" json:"end_serial_number,omitempty"`
	Pregenerated         bool     `protobuf:"varint,5,opt,name=pregenerated,proto3" json:"pregenerated,omitempty"`
	PacketLength         uint32   `protobuf:"varint,6,opt,name=packet_length,json=packetLength,proto3" json:"packet_length,omitempty"`
	TimeSentFlag         bool     `protobuf:"varint,7,opt,name=time_sent_flag,json=timeSentFlag,proto3" json:"time_sent_flag,omitempty"`
	TimeSent             uint32   `protobuf:"varint,8,opt,name=time_sent,json=timeSent,proto3" json:"time_sent,omitempty"`
	InitBitSet           bool     `protobuf:"varint,9,opt,name=init_bit_set,json=initBitSet,proto3" json:"init_bit_set,omitempty"`
	Sequenced            bool     `protobuf:"varint,10,opt,name=sequenced,proto3" json:"sequenced,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EigrpShowNbrQBd) Reset()         { *m = EigrpShowNbrQBd{} }
func (m *EigrpShowNbrQBd) String() string { return proto.CompactTextString(m) }
func (*EigrpShowNbrQBd) ProtoMessage()    {}
func (*EigrpShowNbrQBd) Descriptor() ([]byte, []int) {
	return fileDescriptor_2761b1b590f3cc69, []int{2}
}

func (m *EigrpShowNbrQBd) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EigrpShowNbrQBd.Unmarshal(m, b)
}
func (m *EigrpShowNbrQBd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EigrpShowNbrQBd.Marshal(b, m, deterministic)
}
func (m *EigrpShowNbrQBd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EigrpShowNbrQBd.Merge(m, src)
}
func (m *EigrpShowNbrQBd) XXX_Size() int {
	return xxx_messageInfo_EigrpShowNbrQBd.Size(m)
}
func (m *EigrpShowNbrQBd) XXX_DiscardUnknown() {
	xxx_messageInfo_EigrpShowNbrQBd.DiscardUnknown(m)
}

var xxx_messageInfo_EigrpShowNbrQBd proto.InternalMessageInfo

func (m *EigrpShowNbrQBd) GetOperationCode() uint32 {
	if m != nil {
		return m.OperationCode
	}
	return 0
}

func (m *EigrpShowNbrQBd) GetAckSequnceNumber() uint32 {
	if m != nil {
		return m.AckSequnceNumber
	}
	return 0
}

func (m *EigrpShowNbrQBd) GetStartSerialNumber() uint64 {
	if m != nil {
		return m.StartSerialNumber
	}
	return 0
}

func (m *EigrpShowNbrQBd) GetEndSerialNumber() uint64 {
	if m != nil {
		return m.EndSerialNumber
	}
	return 0
}

func (m *EigrpShowNbrQBd) GetPregenerated() bool {
	if m != nil {
		return m.Pregenerated
	}
	return false
}

func (m *EigrpShowNbrQBd) GetPacketLength() uint32 {
	if m != nil {
		return m.PacketLength
	}
	return 0
}

func (m *EigrpShowNbrQBd) GetTimeSentFlag() bool {
	if m != nil {
		return m.TimeSentFlag
	}
	return false
}

func (m *EigrpShowNbrQBd) GetTimeSent() uint32 {
	if m != nil {
		return m.TimeSent
	}
	return 0
}

func (m *EigrpShowNbrQBd) GetInitBitSet() bool {
	if m != nil {
		return m.InitBitSet
	}
	return false
}

func (m *EigrpShowNbrQBd) GetSequenced() bool {
	if m != nil {
		return m.Sequenced
	}
	return false
}

type EigrpShowNeighborsBd struct {
	Afi                     uint32             `protobuf:"varint,50,opt,name=afi,proto3" json:"afi,omitempty"`
	AsNumber                uint32             `protobuf:"varint,51,opt,name=as_number,json=asNumber,proto3" json:"as_number,omitempty"`
	PeerSuspended           bool               `protobuf:"varint,52,opt,name=peer_suspended,json=peerSuspended,proto3" json:"peer_suspended,omitempty"`
	PeerHandle              uint32             `protobuf:"varint,53,opt,name=peer_handle,json=peerHandle,proto3" json:"peer_handle,omitempty"`
	Source                  *EigrpAddrBd       `protobuf:"bytes,54,opt,name=source,proto3" json:"source,omitempty"`
	InterfaceList           string             `protobuf:"bytes,55,opt,name=interface_list,json=interfaceList,proto3" json:"interface_list,omitempty"`
	Holdtime                uint32             `protobuf:"varint,56,opt,name=holdtime,proto3" json:"holdtime,omitempty"`
	Uptime                  uint32             `protobuf:"varint,57,opt,name=uptime,proto3" json:"uptime,omitempty"`
	Srtt                    uint32             `protobuf:"varint,58,opt,name=srtt,proto3" json:"srtt,omitempty"`
	Rto                     uint32             `protobuf:"varint,59,opt,name=rto,proto3" json:"rto,omitempty"`
	BfdEnabled              bool               `protobuf:"varint,60,opt,name=bfd_enabled,json=bfdEnabled,proto3" json:"bfd_enabled,omitempty"`
	QueueCount              uint32             `protobuf:"varint,61,opt,name=queue_count,json=queueCount,proto3" json:"queue_count,omitempty"`
	LastSequenceNumber      uint32             `protobuf:"varint,62,opt,name=last_sequence_number,json=lastSequenceNumber,proto3" json:"last_sequence_number,omitempty"`
	StaticNeighbor          bool               `protobuf:"varint,63,opt,name=static_neighbor,json=staticNeighbor,proto3" json:"static_neighbor,omitempty"`
	RemoteNeighbor          bool               `protobuf:"varint,64,opt,name=remote_neighbor,json=remoteNeighbor,proto3" json:"remote_neighbor,omitempty"`
	HopCount                uint32             `protobuf:"varint,65,opt,name=hop_count,json=hopCount,proto3" json:"hop_count,omitempty"`
	RestartConfigured       bool               `protobuf:"varint,66,opt,name=restart_configured,json=restartConfigured,proto3" json:"restart_configured,omitempty"`
	RestartTime             uint32             `protobuf:"varint,67,opt,name=restart_time,json=restartTime,proto3" json:"restart_time,omitempty"`
	LastStartupSerialNumber uint64             `protobuf:"varint,68,opt,name=last_startup_serial_number,json=lastStartupSerialNumber,proto3" json:"last_startup_serial_number,omitempty"`
	IosMajorVersion         uint32             `protobuf:"varint,69,opt,name=ios_major_version,json=iosMajorVersion,proto3" json:"ios_major_version,omitempty"`
	IosMinorVersion         uint32             `protobuf:"varint,70,opt,name=ios_minor_version,json=iosMinorVersion,proto3" json:"ios_minor_version,omitempty"`
	EigrpMajorVersion       uint32             `protobuf:"varint,71,opt,name=eigrp_major_version,json=eigrpMajorVersion,proto3" json:"eigrp_major_version,omitempty"`
	EigrpMinorVersion       uint32             `protobuf:"varint,72,opt,name=eigrp_minor_version,json=eigrpMinorVersion,proto3" json:"eigrp_minor_version,omitempty"`
	RetransmissionCount     uint32             `protobuf:"varint,73,opt,name=retransmission_count,json=retransmissionCount,proto3" json:"retransmission_count,omitempty"`
	RetryCount              uint32             `protobuf:"varint,74,opt,name=retry_count,json=retryCount,proto3" json:"retry_count,omitempty"`
	NeedInit                bool               `protobuf:"varint,75,opt,name=need_init,json=needInit,proto3" json:"need_init,omitempty"`
	NeedInitAck             bool               `protobuf:"varint,76,opt,name=need_init_ack,json=needInitAck,proto3" json:"need_init_ack,omitempty"`
	ReinitializationNeeded  bool               `protobuf:"varint,77,opt,name=reinitialization_needed,json=reinitializationNeeded,proto3" json:"reinitialization_needed,omitempty"`
	ReinitStart             uint32             `protobuf:"varint,78,opt,name=reinit_start,json=reinitStart,proto3" json:"reinit_start,omitempty"`
	PeerPrefixCount         uint32             `protobuf:"varint,79,opt,name=peer_prefix_count,json=peerPrefixCount,proto3" json:"peer_prefix_count,omitempty"`
	Stubbed                 bool               `protobuf:"varint,80,opt,name=stubbed,proto3" json:"stubbed,omitempty"`
	AllowConnected          bool               `protobuf:"varint,81,opt,name=allow_connected,json=allowConnected,proto3" json:"allow_connected,omitempty"`
	AllowStatic             bool               `protobuf:"varint,82,opt,name=allow_static,json=allowStatic,proto3" json:"allow_static,omitempty"`
	AllowSummaries          bool               `protobuf:"varint,83,opt,name=allow_summaries,json=allowSummaries,proto3" json:"allow_summaries,omitempty"`
	AllowRedistributed      bool               `protobuf:"varint,84,opt,name=allow_redistributed,json=allowRedistributed,proto3" json:"allow_redistributed,omitempty"`
	TestHandle              bool               `protobuf:"varint,85,opt,name=test_handle,json=testHandle,proto3" json:"test_handle,omitempty"`
	StubbedInterface        bool               `protobuf:"varint,86,opt,name=stubbed_interface,json=stubbedInterface,proto3" json:"stubbed_interface,omitempty"`
	SuspendedReset          bool               `protobuf:"varint,87,opt,name=suspended_reset,json=suspendedReset,proto3" json:"suspended_reset,omitempty"`
	SuspendedTimeLeft       uint32             `protobuf:"varint,88,opt,name=suspended_time_left,json=suspendedTimeLeft,proto3" json:"suspended_time_left,omitempty"`
	NeighborQueue           []*EigrpShowNbrQBd `protobuf:"bytes,89,rep,name=neighbor_queue,json=neighborQueue,proto3" json:"neighbor_queue,omitempty"`
	XXX_NoUnkeyedLiteral    struct{}           `json:"-"`
	XXX_unrecognized        []byte             `json:"-"`
	XXX_sizecache           int32              `json:"-"`
}

func (m *EigrpShowNeighborsBd) Reset()         { *m = EigrpShowNeighborsBd{} }
func (m *EigrpShowNeighborsBd) String() string { return proto.CompactTextString(m) }
func (*EigrpShowNeighborsBd) ProtoMessage()    {}
func (*EigrpShowNeighborsBd) Descriptor() ([]byte, []int) {
	return fileDescriptor_2761b1b590f3cc69, []int{3}
}

func (m *EigrpShowNeighborsBd) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EigrpShowNeighborsBd.Unmarshal(m, b)
}
func (m *EigrpShowNeighborsBd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EigrpShowNeighborsBd.Marshal(b, m, deterministic)
}
func (m *EigrpShowNeighborsBd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EigrpShowNeighborsBd.Merge(m, src)
}
func (m *EigrpShowNeighborsBd) XXX_Size() int {
	return xxx_messageInfo_EigrpShowNeighborsBd.Size(m)
}
func (m *EigrpShowNeighborsBd) XXX_DiscardUnknown() {
	xxx_messageInfo_EigrpShowNeighborsBd.DiscardUnknown(m)
}

var xxx_messageInfo_EigrpShowNeighborsBd proto.InternalMessageInfo

func (m *EigrpShowNeighborsBd) GetAfi() uint32 {
	if m != nil {
		return m.Afi
	}
	return 0
}

func (m *EigrpShowNeighborsBd) GetAsNumber() uint32 {
	if m != nil {
		return m.AsNumber
	}
	return 0
}

func (m *EigrpShowNeighborsBd) GetPeerSuspended() bool {
	if m != nil {
		return m.PeerSuspended
	}
	return false
}

func (m *EigrpShowNeighborsBd) GetPeerHandle() uint32 {
	if m != nil {
		return m.PeerHandle
	}
	return 0
}

func (m *EigrpShowNeighborsBd) GetSource() *EigrpAddrBd {
	if m != nil {
		return m.Source
	}
	return nil
}

func (m *EigrpShowNeighborsBd) GetInterfaceList() string {
	if m != nil {
		return m.InterfaceList
	}
	return ""
}

func (m *EigrpShowNeighborsBd) GetHoldtime() uint32 {
	if m != nil {
		return m.Holdtime
	}
	return 0
}

func (m *EigrpShowNeighborsBd) GetUptime() uint32 {
	if m != nil {
		return m.Uptime
	}
	return 0
}

func (m *EigrpShowNeighborsBd) GetSrtt() uint32 {
	if m != nil {
		return m.Srtt
	}
	return 0
}

func (m *EigrpShowNeighborsBd) GetRto() uint32 {
	if m != nil {
		return m.Rto
	}
	return 0
}

func (m *EigrpShowNeighborsBd) GetBfdEnabled() bool {
	if m != nil {
		return m.BfdEnabled
	}
	return false
}

func (m *EigrpShowNeighborsBd) GetQueueCount() uint32 {
	if m != nil {
		return m.QueueCount
	}
	return 0
}

func (m *EigrpShowNeighborsBd) GetLastSequenceNumber() uint32 {
	if m != nil {
		return m.LastSequenceNumber
	}
	return 0
}

func (m *EigrpShowNeighborsBd) GetStaticNeighbor() bool {
	if m != nil {
		return m.StaticNeighbor
	}
	return false
}

func (m *EigrpShowNeighborsBd) GetRemoteNeighbor() bool {
	if m != nil {
		return m.RemoteNeighbor
	}
	return false
}

func (m *EigrpShowNeighborsBd) GetHopCount() uint32 {
	if m != nil {
		return m.HopCount
	}
	return 0
}

func (m *EigrpShowNeighborsBd) GetRestartConfigured() bool {
	if m != nil {
		return m.RestartConfigured
	}
	return false
}

func (m *EigrpShowNeighborsBd) GetRestartTime() uint32 {
	if m != nil {
		return m.RestartTime
	}
	return 0
}

func (m *EigrpShowNeighborsBd) GetLastStartupSerialNumber() uint64 {
	if m != nil {
		return m.LastStartupSerialNumber
	}
	return 0
}

func (m *EigrpShowNeighborsBd) GetIosMajorVersion() uint32 {
	if m != nil {
		return m.IosMajorVersion
	}
	return 0
}

func (m *EigrpShowNeighborsBd) GetIosMinorVersion() uint32 {
	if m != nil {
		return m.IosMinorVersion
	}
	return 0
}

func (m *EigrpShowNeighborsBd) GetEigrpMajorVersion() uint32 {
	if m != nil {
		return m.EigrpMajorVersion
	}
	return 0
}

func (m *EigrpShowNeighborsBd) GetEigrpMinorVersion() uint32 {
	if m != nil {
		return m.EigrpMinorVersion
	}
	return 0
}

func (m *EigrpShowNeighborsBd) GetRetransmissionCount() uint32 {
	if m != nil {
		return m.RetransmissionCount
	}
	return 0
}

func (m *EigrpShowNeighborsBd) GetRetryCount() uint32 {
	if m != nil {
		return m.RetryCount
	}
	return 0
}

func (m *EigrpShowNeighborsBd) GetNeedInit() bool {
	if m != nil {
		return m.NeedInit
	}
	return false
}

func (m *EigrpShowNeighborsBd) GetNeedInitAck() bool {
	if m != nil {
		return m.NeedInitAck
	}
	return false
}

func (m *EigrpShowNeighborsBd) GetReinitializationNeeded() bool {
	if m != nil {
		return m.ReinitializationNeeded
	}
	return false
}

func (m *EigrpShowNeighborsBd) GetReinitStart() uint32 {
	if m != nil {
		return m.ReinitStart
	}
	return 0
}

func (m *EigrpShowNeighborsBd) GetPeerPrefixCount() uint32 {
	if m != nil {
		return m.PeerPrefixCount
	}
	return 0
}

func (m *EigrpShowNeighborsBd) GetStubbed() bool {
	if m != nil {
		return m.Stubbed
	}
	return false
}

func (m *EigrpShowNeighborsBd) GetAllowConnected() bool {
	if m != nil {
		return m.AllowConnected
	}
	return false
}

func (m *EigrpShowNeighborsBd) GetAllowStatic() bool {
	if m != nil {
		return m.AllowStatic
	}
	return false
}

func (m *EigrpShowNeighborsBd) GetAllowSummaries() bool {
	if m != nil {
		return m.AllowSummaries
	}
	return false
}

func (m *EigrpShowNeighborsBd) GetAllowRedistributed() bool {
	if m != nil {
		return m.AllowRedistributed
	}
	return false
}

func (m *EigrpShowNeighborsBd) GetTestHandle() bool {
	if m != nil {
		return m.TestHandle
	}
	return false
}

func (m *EigrpShowNeighborsBd) GetStubbedInterface() bool {
	if m != nil {
		return m.StubbedInterface
	}
	return false
}

func (m *EigrpShowNeighborsBd) GetSuspendedReset() bool {
	if m != nil {
		return m.SuspendedReset
	}
	return false
}

func (m *EigrpShowNeighborsBd) GetSuspendedTimeLeft() uint32 {
	if m != nil {
		return m.SuspendedTimeLeft
	}
	return 0
}

func (m *EigrpShowNeighborsBd) GetNeighborQueue() []*EigrpShowNbrQBd {
	if m != nil {
		return m.NeighborQueue
	}
	return nil
}

func init() {
	proto.RegisterType((*EigrpShowNeighborsBd_KEYS)(nil), "cisco_ios_xr_eigrp_oper.eigrp.processes.process.vrfs.vrf.afs.af.ases.as.neighbors.neighbor.eigrp_show_neighbors_bd_KEYS")
	proto.RegisterType((*EigrpAddrBd)(nil), "cisco_ios_xr_eigrp_oper.eigrp.processes.process.vrfs.vrf.afs.af.ases.as.neighbors.neighbor.eigrp_addr_bd")
	proto.RegisterType((*EigrpShowNbrQBd)(nil), "cisco_ios_xr_eigrp_oper.eigrp.processes.process.vrfs.vrf.afs.af.ases.as.neighbors.neighbor.eigrp_show_nbr_q_bd")
	proto.RegisterType((*EigrpShowNeighborsBd)(nil), "cisco_ios_xr_eigrp_oper.eigrp.processes.process.vrfs.vrf.afs.af.ases.as.neighbors.neighbor.eigrp_show_neighbors_bd")
}

func init() { proto.RegisterFile("eigrp_show_neighbors_bd.proto", fileDescriptor_2761b1b590f3cc69) }

var fileDescriptor_2761b1b590f3cc69 = []byte{
	// 1147 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x96, 0xdb, 0x72, 0x14, 0x37,
	0x13, 0xc7, 0x6b, 0xb1, 0x3f, 0xdb, 0xab, 0xf5, 0xfa, 0x20, 0x53, 0x58, 0x1f, 0x87, 0xc2, 0x71,
	0x42, 0xc5, 0x39, 0x6d, 0x12, 0x20, 0x90, 0x84, 0x9c, 0xc0, 0x81, 0xe0, 0x60, 0x1c, 0xd8, 0x05,
	0x12, 0x72, 0xa3, 0xd2, 0xcc, 0xf4, 0xac, 0x15, 0xcf, 0x6a, 0x06, 0x49, 0x63, 0x48, 0xee, 0xf2,
	0x0a, 0xb9, 0xc8, 0x63, 0xe4, 0x89, 0xf2, 0x30, 0xa9, 0x6e, 0x8d, 0xc6, 0xbb, 0xae, 0xe2, 0x92,
	0x9b, 0xad, 0xd9, 0xdf, 0xff, 0x3f, 0x2d, 0xa9, 0xbb, 0xd5, 0xbb, 0xec, 0x12, 0xe8, 0xb1, 0xad,
	0xa4, 0x3b, 0x2c, 0x5f, 0x4a, 0x03, 0x7a, 0x7c, 0x98, 0x94, 0xd6, 0xc9, 0x24, 0x1b, 0x54, 0xb6,
	0xf4, 0x25, 0xff, 0x35, 0xd5, 0x2e, 0x2d, 0xa5, 0x2e, 0x9d, 0x7c, 0x65, 0x65, 0xf0, 0x96, 0x15,
	0xd8, 0x01, 0x3d, 0xa2, 0x29, 0x05, 0xe7, 0xc0, 0xc5, 0xa7, 0xc1, 0xb1, 0xcd, 0xe9, 0x63, 0xa0,
	0x72, 0x37, 0x50, 0xf9, 0x40, 0xa1, 0xa8, 0xdc, 0xa0, 0x8d, 0xdd, 0x3e, 0x6d, 0xff, 0xd3, 0x61,
	0x17, 0x5f, 0xb3, 0xba, 0x7c, 0x70, 0xf7, 0xf9, 0x88, 0x5f, 0x62, 0xac, 0x09, 0x2b, 0x75, 0x26,
	0x3a, 0x5b, 0x9d, 0x9d, 0xee, 0xb0, 0xdb, 0x90, 0xbd, 0x8c, 0xff, 0x9f, 0x2d, 0x1d, 0xdb, 0x5c,
	0x1a, 0x35, 0x01, 0x71, 0x86, 0xc4, 0xc5, 0x63, 0x9b, 0x1f, 0xa8, 0x09, 0xf0, 0x4d, 0xb6, 0xa8,
	0x1a, 0x65, 0x8e, 0x94, 0x05, 0x15, 0x84, 0x35, 0x36, 0xa7, 0x9c, 0x11, 0xf3, 0x5b, 0x9d, 0x9d,
	0xfe, 0x10, 0x1f, 0xf9, 0x7b, 0x6c, 0x2d, 0xae, 0x2c, 0x55, 0x96, 0x59, 0x70, 0x4e, 0xfc, 0x8f,
	0xde, 0x59, 0x8d, 0xfc, 0x76, 0xc0, 0xdb, 0x4f, 0x59, 0x3f, 0xec, 0x17, 0x7d, 0x32, 0xc9, 0xf8,
	0x5b, 0x6c, 0x59, 0x57, 0xc7, 0xd7, 0xdb, 0xf7, 0xc2, 0x16, 0x7b, 0xc8, 0x9a, 0x77, 0x1a, 0xcb,
	0x8d, 0xd6, 0x72, 0xa6, 0xb5, 0xdc, 0x88, 0x61, 0xff, 0x9a, 0x63, 0x1b, 0xd3, 0x79, 0x48, 0xac,
	0x7c, 0x81, 0xd1, 0xaf, 0xb0, 0x15, 0x4c, 0xb5, 0xf2, 0xba, 0x34, 0x32, 0x2d, 0x33, 0xa0, 0xf8,
	0xfd, 0x61, 0xbf, 0xa5, 0xbb, 0x65, 0x06, 0xfc, 0x43, 0xc6, 0x55, 0x7a, 0x24, 0x1d, 0xbc, 0xa8,
	0x4d, 0x0a, 0xd2, 0xd4, 0x93, 0x04, 0x2c, 0xad, 0xd3, 0x1f, 0xae, 0xa9, 0xf4, 0x68, 0x14, 0x84,
	0x03, 0xe2, 0x7c, 0xc0, 0x36, 0x9c, 0x57, 0xd6, 0x4b, 0x07, 0x56, 0xab, 0x22, 0xda, 0x31, 0x4b,
	0xf3, 0xc3, 0x75, 0x92, 0x46, 0xa4, 0x34, 0xfe, 0xf7, 0xd9, 0x3a, 0x98, 0xec, 0x94, 0x7b, 0x9e,
	0xdc, 0xab, 0x60, 0xb2, 0x19, 0xef, 0x36, 0x5b, 0xae, 0x2c, 0x8c, 0xc1, 0xe0, 0xf6, 0x20, 0xa3,
	0x34, 0x2e, 0x0d, 0x67, 0x18, 0x7f, 0x9b, 0xf5, 0x2b, 0x95, 0x1e, 0x81, 0x97, 0x05, 0x98, 0xb1,
	0x3f, 0x14, 0x0b, 0xb4, 0xd1, 0xe5, 0x00, 0xf7, 0x89, 0xf1, 0x77, 0xd8, 0x8a, 0xd7, 0x13, 0x90,
	0x0e, 0x8c, 0x97, 0x79, 0xa1, 0xc6, 0x62, 0x31, 0x84, 0x42, 0x3a, 0x02, 0xe3, 0xef, 0x15, 0x6a,
	0xcc, 0x2f, 0xb0, 0x6e, 0xeb, 0x12, 0x4b, 0x14, 0x66, 0x29, 0x1a, 0xf8, 0x16, 0x5b, 0xd6, 0x46,
	0x7b, 0x99, 0x68, 0x3c, 0xaa, 0x17, 0x5d, 0x0a, 0xc0, 0x90, 0xdd, 0xd1, 0x7e, 0x04, 0x9e, 0x5f,
	0x64, 0x5d, 0xcc, 0x19, 0x98, 0x14, 0x32, 0xc1, 0x48, 0x3e, 0x01, 0xdb, 0xff, 0xf6, 0xd9, 0xe6,
	0x6b, 0x9a, 0x93, 0x9a, 0x28, 0xd7, 0xe2, 0x6a, 0xd3, 0x44, 0xb9, 0xc6, 0xad, 0x28, 0x17, 0xb3,
	0x73, 0x2d, 0x6c, 0x45, 0xb9, 0x26, 0x2d, 0x57, 0xd8, 0x4a, 0x05, 0x60, 0xa5, 0xab, 0x5d, 0x05,
	0x26, 0x83, 0x4c, 0x5c, 0xa7, 0xd5, 0xfa, 0x48, 0x47, 0x11, 0xf2, 0xcb, 0xac, 0x47, 0xb6, 0x43,
	0x65, 0xb2, 0x02, 0xc4, 0x67, 0x14, 0x85, 0x21, 0xba, 0x4f, 0x84, 0xff, 0xd9, 0x61, 0x0b, 0xae,
	0xac, 0x6d, 0x0a, 0xe2, 0xc6, 0x56, 0x67, 0xa7, 0x77, 0x55, 0x0f, 0xde, 0xdc, 0xed, 0x1c, 0xcc,
	0x74, 0xfa, 0xb0, 0x59, 0x18, 0xcf, 0xa2, 0x8d, 0x07, 0x9b, 0xab, 0x14, 0x64, 0xa1, 0x9d, 0x17,
	0x37, 0xa9, 0xa1, 0xfb, 0x2d, 0xdd, 0xd7, 0xce, 0xf3, 0xf3, 0x6c, 0xe9, 0xb0, 0x2c, 0x32, 0xac,
	0x86, 0xf8, 0x3c, 0xa4, 0x23, 0x7e, 0xe7, 0xe7, 0xd8, 0x42, 0x5d, 0x91, 0xf2, 0x05, 0x29, 0xcd,
	0x37, 0xce, 0xd9, 0xbc, 0xb3, 0xde, 0x8b, 0x2f, 0x89, 0xd2, 0x33, 0x66, 0xda, 0xfa, 0x52, 0xdc,
	0x0a, 0x99, 0xb6, 0xbe, 0xc4, 0x2c, 0x25, 0x79, 0x26, 0xc1, 0xa8, 0xa4, 0x80, 0x4c, 0x7c, 0x15,
	0xca, 0x9a, 0xe4, 0xd9, 0xdd, 0x40, 0xd0, 0xf0, 0xa2, 0x86, 0x1a, 0x64, 0x5a, 0xd6, 0xc6, 0x8b,
	0xaf, 0x43, 0x1a, 0x09, 0xed, 0x22, 0xe1, 0x9f, 0xb0, 0xb3, 0x85, 0x72, 0x5e, 0xc6, 0x5a, 0xc7,
	0xb2, 0x7d, 0x43, 0x4e, 0x8e, 0xda, 0xa8, 0x91, 0x9a, 0x02, 0xbe, 0xcb, 0x56, 0x9d, 0x57, 0x5e,
	0xa7, 0x6d, 0x1b, 0x88, 0x6f, 0x69, 0xdd, 0x95, 0x80, 0x0f, 0x1a, 0x8a, 0x46, 0x0b, 0x93, 0xd2,
	0xc3, 0x89, 0xf1, 0xbb, 0x60, 0x0c, 0xb8, 0x35, 0x5e, 0x60, 0xdd, 0xc3, 0xb2, 0x6a, 0xb6, 0x78,
	0x3b, 0x26, 0xa8, 0x0a, 0x1b, 0xfc, 0x88, 0x71, 0x0b, 0xe1, 0x92, 0xa6, 0xa5, 0xc9, 0xf5, 0xb8,
	0xb6, 0x90, 0x89, 0x3b, 0x14, 0x68, 0xbd, 0x51, 0x76, 0x5b, 0x01, 0x27, 0x4c, 0xb4, 0x53, 0x56,
	0x77, 0x29, 0x5c, 0xaf, 0x61, 0x4f, 0x30, 0xb5, 0xb7, 0xd8, 0xf9, 0x70, 0x64, 0x24, 0x75, 0x75,
	0xea, 0x36, 0x7f, 0x4f, 0xb7, 0x79, 0x93, 0x0e, 0x1e, 0x0c, 0xa7, 0x27, 0x00, 0x36, 0xd8, 0x44,
	0xfd, 0x56, 0x5a, 0x79, 0x0c, 0xd6, 0xe9, 0xd2, 0x88, 0xbb, 0xb4, 0xc8, 0xaa, 0x2e, 0xdd, 0x43,
	0xe4, 0xcf, 0x02, 0x6e, 0xbd, 0xda, 0x4c, 0x79, 0xef, 0x9d, 0x78, 0x91, 0x47, 0xef, 0x20, 0x4e,
	0xbd, 0xd9, 0xc8, 0x3f, 0x90, 0x7b, 0x9d, 0xa4, 0x99, 0xd8, 0x27, 0xfe, 0x99, 0xe8, 0xf7, 0xa7,
	0xfd, 0xd3, 0xf1, 0x3f, 0x65, 0x67, 0x2d, 0x78, 0xab, 0x8c, 0x9b, 0x68, 0xe7, 0xc2, 0x0c, 0xc5,
	0x74, 0xef, 0xd1, 0x0b, 0x1b, 0xb3, 0x5a, 0xc8, 0xfc, 0x65, 0xd6, 0x43, 0xfc, 0x7b, 0xe3, 0xfc,
	0x31, 0xf4, 0x0e, 0xa1, 0x60, 0xb8, 0xc0, 0xba, 0x06, 0x20, 0x93, 0x38, 0x46, 0xc4, 0x03, 0xaa,
	0xc8, 0x12, 0x82, 0x3d, 0xa3, 0x3d, 0xdf, 0x66, 0xfd, 0x56, 0x94, 0x2a, 0x3d, 0x12, 0xfb, 0x64,
	0xe8, 0x45, 0xc3, 0xed, 0xf4, 0x88, 0xdf, 0x64, 0x9b, 0x16, 0xd0, 0xa0, 0x55, 0xa1, 0xff, 0x08,
	0xa3, 0x1d, 0x75, 0xc8, 0xc4, 0x43, 0x72, 0x9f, 0x3b, 0x2d, 0x1f, 0x90, 0x1a, 0xaa, 0x4c, 0x91,
	0xa9, 0x88, 0xe2, 0x20, 0x56, 0x19, 0x19, 0x95, 0x0d, 0x93, 0x4f, 0x03, 0xa4, 0xb2, 0x90, 0xeb,
	0x57, 0xcd, 0x19, 0x7e, 0x0a, 0xc9, 0x47, 0xe1, 0x11, 0xf1, 0x70, 0x10, 0xc1, 0x16, 0x9d, 0xaf,
	0x93, 0x04, 0x32, 0xf1, 0x88, 0xd6, 0x8d, 0x5f, 0xb1, 0x87, 0x55, 0x51, 0x94, 0x2f, 0xb1, 0xf7,
	0x0c, 0xa4, 0x38, 0xc7, 0x1f, 0x87, 0x1e, 0x26, 0xbc, 0x1b, 0x29, 0xee, 0x28, 0x18, 0xc3, 0x25,
	0x10, 0xc3, 0x70, 0x5a, 0x62, 0x23, 0x42, 0x27, 0xb1, 0x5c, 0x3d, 0x99, 0x28, 0xab, 0xc1, 0x89,
	0xd1, 0x54, 0xac, 0x51, 0xa4, 0xfc, 0x63, 0xb6, 0x11, 0x8c, 0x16, 0x32, 0xed, 0xbc, 0xd5, 0x49,
	0x8d, 0x0b, 0x3f, 0x21, 0x33, 0x27, 0x69, 0x38, 0xad, 0x60, 0xa5, 0x3c, 0x38, 0x1f, 0x87, 0xe5,
	0xd3, 0x30, 0x06, 0x10, 0x35, 0xc3, 0xf2, 0x03, 0xb6, 0xde, 0x9c, 0x48, 0xb6, 0xa3, 0x49, 0x3c,
	0x23, 0xdb, 0x5a, 0x23, 0xec, 0x45, 0x4e, 0x17, 0x3c, 0xce, 0x61, 0x69, 0x01, 0x7f, 0x2f, 0x7e,
	0x6e, 0x2e, 0x78, 0xc4, 0x43, 0xa4, 0xf4, 0xeb, 0xd9, 0x1a, 0xe9, 0xc7, 0xa7, 0x80, 0xdc, 0x8b,
	0x5f, 0x42, 0x0f, 0xb6, 0x12, 0x5e, 0xba, 0x7d, 0xc8, 0x3d, 0xff, 0xbb, 0xc3, 0x56, 0xda, 0x7f,
	0x17, 0x34, 0x83, 0xc4, 0xf3, 0xad, 0xb9, 0x9d, 0xde, 0xd5, 0xf2, 0xcd, 0x8f, 0xee, 0x99, 0x3f,
	0x13, 0xc3, 0x7e, 0x54, 0x1f, 0xe3, 0x2e, 0x92, 0x05, 0xfa, 0x7b, 0x77, 0xed, 0xbf, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x39, 0xc7, 0x89, 0xe0, 0xff, 0x09, 0x00, 0x00,
}
