/*
Copyright 2019 Cisco Systems

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ifmib_ifconnectorpresent_entry.proto

package cisco_ios_xr_snmp_ifmib_oper_augment_interface_mib_interface_connectors_interface_connector

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type IfmibIfconnectorpresentEntry_KEYS struct {
	InterfaceName        string   `protobuf:"bytes,1,opt,name=interface_name,json=interfaceName,proto3" json:"interface_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IfmibIfconnectorpresentEntry_KEYS) Reset()         { *m = IfmibIfconnectorpresentEntry_KEYS{} }
func (m *IfmibIfconnectorpresentEntry_KEYS) String() string { return proto.CompactTextString(m) }
func (*IfmibIfconnectorpresentEntry_KEYS) ProtoMessage()    {}
func (*IfmibIfconnectorpresentEntry_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_bc416ff8998daa65, []int{0}
}

func (m *IfmibIfconnectorpresentEntry_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IfmibIfconnectorpresentEntry_KEYS.Unmarshal(m, b)
}
func (m *IfmibIfconnectorpresentEntry_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IfmibIfconnectorpresentEntry_KEYS.Marshal(b, m, deterministic)
}
func (m *IfmibIfconnectorpresentEntry_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IfmibIfconnectorpresentEntry_KEYS.Merge(m, src)
}
func (m *IfmibIfconnectorpresentEntry_KEYS) XXX_Size() int {
	return xxx_messageInfo_IfmibIfconnectorpresentEntry_KEYS.Size(m)
}
func (m *IfmibIfconnectorpresentEntry_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_IfmibIfconnectorpresentEntry_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_IfmibIfconnectorpresentEntry_KEYS proto.InternalMessageInfo

func (m *IfmibIfconnectorpresentEntry_KEYS) GetInterfaceName() string {
	if m != nil {
		return m.InterfaceName
	}
	return ""
}

type IfmibIfconnectorpresentEntry struct {
	IfConnectorPresent   string   `protobuf:"bytes,50,opt,name=if_connector_present,json=ifConnectorPresent,proto3" json:"if_connector_present,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IfmibIfconnectorpresentEntry) Reset()         { *m = IfmibIfconnectorpresentEntry{} }
func (m *IfmibIfconnectorpresentEntry) String() string { return proto.CompactTextString(m) }
func (*IfmibIfconnectorpresentEntry) ProtoMessage()    {}
func (*IfmibIfconnectorpresentEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_bc416ff8998daa65, []int{1}
}

func (m *IfmibIfconnectorpresentEntry) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IfmibIfconnectorpresentEntry.Unmarshal(m, b)
}
func (m *IfmibIfconnectorpresentEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IfmibIfconnectorpresentEntry.Marshal(b, m, deterministic)
}
func (m *IfmibIfconnectorpresentEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IfmibIfconnectorpresentEntry.Merge(m, src)
}
func (m *IfmibIfconnectorpresentEntry) XXX_Size() int {
	return xxx_messageInfo_IfmibIfconnectorpresentEntry.Size(m)
}
func (m *IfmibIfconnectorpresentEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_IfmibIfconnectorpresentEntry.DiscardUnknown(m)
}

var xxx_messageInfo_IfmibIfconnectorpresentEntry proto.InternalMessageInfo

func (m *IfmibIfconnectorpresentEntry) GetIfConnectorPresent() string {
	if m != nil {
		return m.IfConnectorPresent
	}
	return ""
}

func init() {
	proto.RegisterType((*IfmibIfconnectorpresentEntry_KEYS)(nil), "cisco_ios_xr_snmp_ifmib_oper.augment.interface_mib.interface_connectors.interface_connector.ifmib_ifconnectorpresent_entry_KEYS")
	proto.RegisterType((*IfmibIfconnectorpresentEntry)(nil), "cisco_ios_xr_snmp_ifmib_oper.augment.interface_mib.interface_connectors.interface_connector.ifmib_ifconnectorpresent_entry")
}

func init() {
	proto.RegisterFile("ifmib_ifconnectorpresent_entry.proto", fileDescriptor_bc416ff8998daa65)
}

var fileDescriptor_bc416ff8998daa65 = []byte{
	// 188 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0xc9, 0x4c, 0xcb, 0xcd,
	0x4c, 0x8a, 0xcf, 0x4c, 0x4b, 0xce, 0xcf, 0xcb, 0x4b, 0x4d, 0x2e, 0xc9, 0x2f, 0x2a, 0x28, 0x4a,
	0x2d, 0x4e, 0xcd, 0x2b, 0x89, 0x4f, 0xcd, 0x2b, 0x29, 0xaa, 0xd4, 0x2b, 0x28, 0xca, 0x2f, 0xc9,
	0x17, 0x8a, 0x4e, 0xce, 0x2c, 0x4e, 0xce, 0x8f, 0xcf, 0xcc, 0x2f, 0x8e, 0xaf, 0x28, 0x8a, 0x2f,
	0xce, 0xcb, 0x2d, 0x88, 0x87, 0xe8, 0xcb, 0x2f, 0x48, 0x2d, 0xd2, 0x4b, 0x2c, 0x4d, 0xcf, 0x4d,
	0xcd, 0x2b, 0xd1, 0xcb, 0xcc, 0x2b, 0x49, 0x2d, 0x4a, 0x4b, 0x4c, 0x4e, 0x8d, 0xcf, 0xcd, 0x4c,
	0x42, 0xe2, 0xc1, 0x8d, 0x2e, 0xc6, 0x26, 0xa8, 0xe4, 0xc3, 0xa5, 0x8c, 0xdf, 0x11, 0xf1, 0xde,
	0xae, 0x91, 0xc1, 0x42, 0xaa, 0x5c, 0x7c, 0x08, 0xdd, 0x79, 0x89, 0xb9, 0xa9, 0x12, 0x8c, 0x0a,
	0x8c, 0x1a, 0x9c, 0x41, 0xbc, 0x70, 0x51, 0xbf, 0xc4, 0xdc, 0x54, 0xa5, 0x20, 0x2e, 0x39, 0xfc,
	0xa6, 0x09, 0x19, 0x70, 0x89, 0x64, 0xa6, 0x21, 0xec, 0x8f, 0x87, 0xca, 0x4a, 0x18, 0x81, 0x8d,
	0x13, 0xca, 0x4c, 0x73, 0x86, 0x49, 0x05, 0x40, 0x64, 0x92, 0xd8, 0xc0, 0xa1, 0x60, 0x0c, 0x08,
	0x00, 0x00, 0xff, 0xff, 0x26, 0xf1, 0x25, 0x2e, 0x2d, 0x01, 0x00, 0x00,
}
