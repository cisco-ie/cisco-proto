/*
Copyright 2019 Cisco Systems

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: mka_interface_info.proto

package cisco_ios_xr_crypto_macsec_mka_oper_macsec_mka_interfaces_interface_info

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type MkaInterfaceInfo_KEYS struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MkaInterfaceInfo_KEYS) Reset()         { *m = MkaInterfaceInfo_KEYS{} }
func (m *MkaInterfaceInfo_KEYS) String() string { return proto.CompactTextString(m) }
func (*MkaInterfaceInfo_KEYS) ProtoMessage()    {}
func (*MkaInterfaceInfo_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_61830071a4f99529, []int{0}
}

func (m *MkaInterfaceInfo_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MkaInterfaceInfo_KEYS.Unmarshal(m, b)
}
func (m *MkaInterfaceInfo_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MkaInterfaceInfo_KEYS.Marshal(b, m, deterministic)
}
func (m *MkaInterfaceInfo_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MkaInterfaceInfo_KEYS.Merge(m, src)
}
func (m *MkaInterfaceInfo_KEYS) XXX_Size() int {
	return xxx_messageInfo_MkaInterfaceInfo_KEYS.Size(m)
}
func (m *MkaInterfaceInfo_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_MkaInterfaceInfo_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_MkaInterfaceInfo_KEYS proto.InternalMessageInfo

func (m *MkaInterfaceInfo_KEYS) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type MkaInterfaceSummary struct {
	InterfaceName        string   `protobuf:"bytes,1,opt,name=interface_name,json=interfaceName,proto3" json:"interface_name,omitempty"`
	ShortName            string   `protobuf:"bytes,2,opt,name=short_name,json=shortName,proto3" json:"short_name,omitempty"`
	KeyChain             string   `protobuf:"bytes,3,opt,name=key_chain,json=keyChain,proto3" json:"key_chain,omitempty"`
	Policy               string   `protobuf:"bytes,4,opt,name=policy,proto3" json:"policy,omitempty"`
	MacsecSvcPort        bool     `protobuf:"varint,5,opt,name=macsec_svc_port,json=macsecSvcPort,proto3" json:"macsec_svc_port,omitempty"`
	MacsecSvcPortType    string   `protobuf:"bytes,6,opt,name=macsec_svc_port_type,json=macsecSvcPortType,proto3" json:"macsec_svc_port_type,omitempty"`
	SvcportShortName     string   `protobuf:"bytes,7,opt,name=svcport_short_name,json=svcportShortName,proto3" json:"svcport_short_name,omitempty"`
	MkaMode              string   `protobuf:"bytes,8,opt,name=mka_mode,json=mkaMode,proto3" json:"mka_mode,omitempty"`
	FallbackKeychain     string   `protobuf:"bytes,9,opt,name=fallback_keychain,json=fallbackKeychain,proto3" json:"fallback_keychain,omitempty"`
	MacsecShutdown       bool     `protobuf:"varint,10,opt,name=macsec_shutdown,json=macsecShutdown,proto3" json:"macsec_shutdown,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MkaInterfaceSummary) Reset()         { *m = MkaInterfaceSummary{} }
func (m *MkaInterfaceSummary) String() string { return proto.CompactTextString(m) }
func (*MkaInterfaceSummary) ProtoMessage()    {}
func (*MkaInterfaceSummary) Descriptor() ([]byte, []int) {
	return fileDescriptor_61830071a4f99529, []int{1}
}

func (m *MkaInterfaceSummary) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MkaInterfaceSummary.Unmarshal(m, b)
}
func (m *MkaInterfaceSummary) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MkaInterfaceSummary.Marshal(b, m, deterministic)
}
func (m *MkaInterfaceSummary) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MkaInterfaceSummary.Merge(m, src)
}
func (m *MkaInterfaceSummary) XXX_Size() int {
	return xxx_messageInfo_MkaInterfaceSummary.Size(m)
}
func (m *MkaInterfaceSummary) XXX_DiscardUnknown() {
	xxx_messageInfo_MkaInterfaceSummary.DiscardUnknown(m)
}

var xxx_messageInfo_MkaInterfaceSummary proto.InternalMessageInfo

func (m *MkaInterfaceSummary) GetInterfaceName() string {
	if m != nil {
		return m.InterfaceName
	}
	return ""
}

func (m *MkaInterfaceSummary) GetShortName() string {
	if m != nil {
		return m.ShortName
	}
	return ""
}

func (m *MkaInterfaceSummary) GetKeyChain() string {
	if m != nil {
		return m.KeyChain
	}
	return ""
}

func (m *MkaInterfaceSummary) GetPolicy() string {
	if m != nil {
		return m.Policy
	}
	return ""
}

func (m *MkaInterfaceSummary) GetMacsecSvcPort() bool {
	if m != nil {
		return m.MacsecSvcPort
	}
	return false
}

func (m *MkaInterfaceSummary) GetMacsecSvcPortType() string {
	if m != nil {
		return m.MacsecSvcPortType
	}
	return ""
}

func (m *MkaInterfaceSummary) GetSvcportShortName() string {
	if m != nil {
		return m.SvcportShortName
	}
	return ""
}

func (m *MkaInterfaceSummary) GetMkaMode() string {
	if m != nil {
		return m.MkaMode
	}
	return ""
}

func (m *MkaInterfaceSummary) GetFallbackKeychain() string {
	if m != nil {
		return m.FallbackKeychain
	}
	return ""
}

func (m *MkaInterfaceSummary) GetMacsecShutdown() bool {
	if m != nil {
		return m.MacsecShutdown
	}
	return false
}

type MkaInterfaceInfo struct {
	InterfaceSummary     *MkaInterfaceSummary `protobuf:"bytes,50,opt,name=interface_summary,json=interfaceSummary,proto3" json:"interface_summary,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *MkaInterfaceInfo) Reset()         { *m = MkaInterfaceInfo{} }
func (m *MkaInterfaceInfo) String() string { return proto.CompactTextString(m) }
func (*MkaInterfaceInfo) ProtoMessage()    {}
func (*MkaInterfaceInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_61830071a4f99529, []int{2}
}

func (m *MkaInterfaceInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MkaInterfaceInfo.Unmarshal(m, b)
}
func (m *MkaInterfaceInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MkaInterfaceInfo.Marshal(b, m, deterministic)
}
func (m *MkaInterfaceInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MkaInterfaceInfo.Merge(m, src)
}
func (m *MkaInterfaceInfo) XXX_Size() int {
	return xxx_messageInfo_MkaInterfaceInfo.Size(m)
}
func (m *MkaInterfaceInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_MkaInterfaceInfo.DiscardUnknown(m)
}

var xxx_messageInfo_MkaInterfaceInfo proto.InternalMessageInfo

func (m *MkaInterfaceInfo) GetInterfaceSummary() *MkaInterfaceSummary {
	if m != nil {
		return m.InterfaceSummary
	}
	return nil
}

func init() {
	proto.RegisterType((*MkaInterfaceInfo_KEYS)(nil), "cisco_ios_xr_crypto_macsec_mka_oper.macsec.mka.interfaces.interface.info.mka_interface_info_KEYS")
	proto.RegisterType((*MkaInterfaceSummary)(nil), "cisco_ios_xr_crypto_macsec_mka_oper.macsec.mka.interfaces.interface.info.mka_interface_summary")
	proto.RegisterType((*MkaInterfaceInfo)(nil), "cisco_ios_xr_crypto_macsec_mka_oper.macsec.mka.interfaces.interface.info.mka_interface_info")
}

func init() { proto.RegisterFile("mka_interface_info.proto", fileDescriptor_61830071a4f99529) }

var fileDescriptor_61830071a4f99529 = []byte{
	// 376 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x92, 0xe1, 0x4a, 0xeb, 0x30,
	0x14, 0xc7, 0xe9, 0xdd, 0xee, 0xd6, 0x9e, 0xcb, 0x76, 0xb7, 0x70, 0xaf, 0x46, 0x44, 0x18, 0x03,
	0x75, 0xa0, 0x56, 0x98, 0x8f, 0x20, 0x82, 0x30, 0x14, 0x59, 0xfd, 0xe2, 0xa7, 0x90, 0x65, 0x19,
	0x2b, 0x5d, 0x9a, 0x92, 0x64, 0xd3, 0xbc, 0x82, 0xf8, 0x16, 0xbe, 0xa8, 0x34, 0xad, 0xdd, 0xe6,
	0xfc, 0xe8, 0xb7, 0x9c, 0xff, 0xff, 0x97, 0xd3, 0xf3, 0x6f, 0x0e, 0x60, 0x91, 0x50, 0x12, 0xa7,
	0x86, 0xab, 0x19, 0x65, 0x9c, 0xc4, 0xe9, 0x4c, 0x86, 0x99, 0x92, 0x46, 0xa2, 0x5b, 0x16, 0x6b,
	0x26, 0x49, 0x2c, 0x35, 0x79, 0x51, 0x84, 0x29, 0x9b, 0x19, 0x49, 0x04, 0x65, 0x9a, 0x33, 0x92,
	0x5f, 0x92, 0x19, 0x57, 0x61, 0x51, 0x87, 0x22, 0xa1, 0x61, 0xd5, 0x44, 0xaf, 0x8f, 0x61, 0xde,
	0xaf, 0x7f, 0x01, 0xfb, 0xbb, 0x5f, 0x21, 0xa3, 0x9b, 0xa7, 0x08, 0x21, 0xa8, 0xa7, 0x54, 0x70,
	0xec, 0xf5, 0xbc, 0x41, 0x30, 0x76, 0xe7, 0xfe, 0x6b, 0x0d, 0xfe, 0x6f, 0xf3, 0x7a, 0x29, 0x04,
	0x55, 0x16, 0x1d, 0x43, 0x7b, 0x2d, 0x6e, 0xdc, 0x6b, 0x55, 0xea, 0x3d, 0x15, 0x1c, 0x1d, 0x01,
	0xe8, 0xb9, 0x54, 0xa6, 0x40, 0x7e, 0x39, 0x24, 0x70, 0x8a, 0xb3, 0x0f, 0x21, 0x48, 0xb8, 0x25,
	0x6c, 0x4e, 0xe3, 0x14, 0xd7, 0x9c, 0xeb, 0x27, 0xdc, 0x5e, 0xe7, 0x35, 0xda, 0x83, 0x46, 0x26,
	0x17, 0x31, 0xb3, 0xb8, 0xee, 0x9c, 0xb2, 0x42, 0x27, 0xf0, 0xb7, 0xcc, 0xae, 0x57, 0x8c, 0x64,
	0x52, 0x19, 0xfc, 0xbb, 0xe7, 0x0d, 0xfc, 0x71, 0xab, 0x90, 0xa3, 0x15, 0x7b, 0x90, 0xca, 0xa0,
	0x4b, 0xf8, 0xf7, 0x85, 0x23, 0xc6, 0x66, 0x1c, 0x37, 0x5c, 0xb7, 0xee, 0x16, 0xfc, 0x68, 0x33,
	0x8e, 0xce, 0x01, 0xe9, 0x15, 0x73, 0xe0, 0xc6, 0xd0, 0x4d, 0x87, 0x77, 0x4a, 0x27, 0xaa, 0x66,
	0x3f, 0x00, 0x3f, 0xff, 0x35, 0x42, 0x4e, 0x39, 0xf6, 0x1d, 0xd3, 0x14, 0x09, 0xbd, 0x93, 0x53,
	0x8e, 0xce, 0xa0, 0x3b, 0xa3, 0x8b, 0xc5, 0x84, 0xb2, 0x84, 0x24, 0xdc, 0x16, 0xf1, 0x82, 0xa2,
	0xcf, 0xa7, 0x31, 0x2a, 0x75, 0x74, 0xba, 0x8e, 0x33, 0x5f, 0x9a, 0xa9, 0x7c, 0x4e, 0x31, 0xb8,
	0x38, 0xed, 0x72, 0xc2, 0x52, 0xed, 0xbf, 0x7b, 0x80, 0x76, 0x1f, 0x0f, 0xbd, 0x79, 0xd0, 0xdd,
	0x79, 0x1f, 0x3c, 0xec, 0x79, 0x83, 0x3f, 0x43, 0x12, 0xfe, 0xd4, 0xe6, 0x84, 0xdf, 0xae, 0xc1,
	0xb8, 0x53, 0x49, 0x51, 0xa1, 0x4c, 0x1a, 0x6e, 0x65, 0xaf, 0x3e, 0x02, 0x00, 0x00, 0xff, 0xff,
	0xf8, 0x82, 0xfa, 0x8b, 0xce, 0x02, 0x00, 0x00,
}
