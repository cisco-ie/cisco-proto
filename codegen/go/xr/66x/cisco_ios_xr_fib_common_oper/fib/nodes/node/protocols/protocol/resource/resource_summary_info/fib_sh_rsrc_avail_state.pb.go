/*
Copyright 2019 Cisco Systems

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: fib_sh_rsrc_avail_state.proto

package cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_resource_resource_summary_info

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type FibShRsrcAvailState_KEYS struct {
	NodeName             string   `protobuf:"bytes,1,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	ProtocolName         string   `protobuf:"bytes,2,opt,name=protocol_name,json=protocolName,proto3" json:"protocol_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FibShRsrcAvailState_KEYS) Reset()         { *m = FibShRsrcAvailState_KEYS{} }
func (m *FibShRsrcAvailState_KEYS) String() string { return proto.CompactTextString(m) }
func (*FibShRsrcAvailState_KEYS) ProtoMessage()    {}
func (*FibShRsrcAvailState_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb9e169109da4431, []int{0}
}

func (m *FibShRsrcAvailState_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FibShRsrcAvailState_KEYS.Unmarshal(m, b)
}
func (m *FibShRsrcAvailState_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FibShRsrcAvailState_KEYS.Marshal(b, m, deterministic)
}
func (m *FibShRsrcAvailState_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FibShRsrcAvailState_KEYS.Merge(m, src)
}
func (m *FibShRsrcAvailState_KEYS) XXX_Size() int {
	return xxx_messageInfo_FibShRsrcAvailState_KEYS.Size(m)
}
func (m *FibShRsrcAvailState_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_FibShRsrcAvailState_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_FibShRsrcAvailState_KEYS proto.InternalMessageInfo

func (m *FibShRsrcAvailState_KEYS) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

func (m *FibShRsrcAvailState_KEYS) GetProtocolName() string {
	if m != nil {
		return m.ProtocolName
	}
	return ""
}

type FibShRsrcShm struct {
	SrsCurrMode          uint32   `protobuf:"varint,1,opt,name=srs_curr_mode,json=srsCurrMode,proto3" json:"srs_curr_mode,omitempty"`
	SrsAvgAvail          uint64   `protobuf:"varint,2,opt,name=srs_avg_avail,json=srsAvgAvail,proto3" json:"srs_avg_avail,omitempty"`
	SrsMaxAvail          uint64   `protobuf:"varint,3,opt,name=srs_max_avail,json=srsMaxAvail,proto3" json:"srs_max_avail,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FibShRsrcShm) Reset()         { *m = FibShRsrcShm{} }
func (m *FibShRsrcShm) String() string { return proto.CompactTextString(m) }
func (*FibShRsrcShm) ProtoMessage()    {}
func (*FibShRsrcShm) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb9e169109da4431, []int{1}
}

func (m *FibShRsrcShm) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FibShRsrcShm.Unmarshal(m, b)
}
func (m *FibShRsrcShm) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FibShRsrcShm.Marshal(b, m, deterministic)
}
func (m *FibShRsrcShm) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FibShRsrcShm.Merge(m, src)
}
func (m *FibShRsrcShm) XXX_Size() int {
	return xxx_messageInfo_FibShRsrcShm.Size(m)
}
func (m *FibShRsrcShm) XXX_DiscardUnknown() {
	xxx_messageInfo_FibShRsrcShm.DiscardUnknown(m)
}

var xxx_messageInfo_FibShRsrcShm proto.InternalMessageInfo

func (m *FibShRsrcShm) GetSrsCurrMode() uint32 {
	if m != nil {
		return m.SrsCurrMode
	}
	return 0
}

func (m *FibShRsrcShm) GetSrsAvgAvail() uint64 {
	if m != nil {
		return m.SrsAvgAvail
	}
	return 0
}

func (m *FibShRsrcShm) GetSrsMaxAvail() uint64 {
	if m != nil {
		return m.SrsMaxAvail
	}
	return 0
}

type FibShRsrcAvailState struct {
	SrCurrMode           uint32          `protobuf:"varint,50,opt,name=sr_curr_mode,json=srCurrMode,proto3" json:"sr_curr_mode,omitempty"`
	SrShmState           []*FibShRsrcShm `protobuf:"bytes,51,rep,name=sr_shm_state,json=srShmState,proto3" json:"sr_shm_state,omitempty"`
	SrHwrsrcMode         []uint32        `protobuf:"varint,52,rep,packed,name=sr_hwrsrc_mode,json=srHwrsrcMode,proto3" json:"sr_hwrsrc_mode,omitempty"`
	SrHwrsrcInfo         string          `protobuf:"bytes,53,opt,name=sr_hwrsrc_info,json=srHwrsrcInfo,proto3" json:"sr_hwrsrc_info,omitempty"`
	SrShmwinOorCount     uint32          `protobuf:"varint,54,opt,name=sr_shmwin_oor_count,json=srShmwinOorCount,proto3" json:"sr_shmwin_oor_count,omitempty"`
	SrHwOorCount         uint32          `protobuf:"varint,55,opt,name=sr_hw_oor_count,json=srHwOorCount,proto3" json:"sr_hw_oor_count,omitempty"`
	SrInOorTs            uint64          `protobuf:"varint,56,opt,name=sr_in_oor_ts,json=srInOorTs,proto3" json:"sr_in_oor_ts,omitempty"`
	SrOutOorTs           uint64          `protobuf:"varint,57,opt,name=sr_out_oor_ts,json=srOutOorTs,proto3" json:"sr_out_oor_ts,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *FibShRsrcAvailState) Reset()         { *m = FibShRsrcAvailState{} }
func (m *FibShRsrcAvailState) String() string { return proto.CompactTextString(m) }
func (*FibShRsrcAvailState) ProtoMessage()    {}
func (*FibShRsrcAvailState) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb9e169109da4431, []int{2}
}

func (m *FibShRsrcAvailState) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FibShRsrcAvailState.Unmarshal(m, b)
}
func (m *FibShRsrcAvailState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FibShRsrcAvailState.Marshal(b, m, deterministic)
}
func (m *FibShRsrcAvailState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FibShRsrcAvailState.Merge(m, src)
}
func (m *FibShRsrcAvailState) XXX_Size() int {
	return xxx_messageInfo_FibShRsrcAvailState.Size(m)
}
func (m *FibShRsrcAvailState) XXX_DiscardUnknown() {
	xxx_messageInfo_FibShRsrcAvailState.DiscardUnknown(m)
}

var xxx_messageInfo_FibShRsrcAvailState proto.InternalMessageInfo

func (m *FibShRsrcAvailState) GetSrCurrMode() uint32 {
	if m != nil {
		return m.SrCurrMode
	}
	return 0
}

func (m *FibShRsrcAvailState) GetSrShmState() []*FibShRsrcShm {
	if m != nil {
		return m.SrShmState
	}
	return nil
}

func (m *FibShRsrcAvailState) GetSrHwrsrcMode() []uint32 {
	if m != nil {
		return m.SrHwrsrcMode
	}
	return nil
}

func (m *FibShRsrcAvailState) GetSrHwrsrcInfo() string {
	if m != nil {
		return m.SrHwrsrcInfo
	}
	return ""
}

func (m *FibShRsrcAvailState) GetSrShmwinOorCount() uint32 {
	if m != nil {
		return m.SrShmwinOorCount
	}
	return 0
}

func (m *FibShRsrcAvailState) GetSrHwOorCount() uint32 {
	if m != nil {
		return m.SrHwOorCount
	}
	return 0
}

func (m *FibShRsrcAvailState) GetSrInOorTs() uint64 {
	if m != nil {
		return m.SrInOorTs
	}
	return 0
}

func (m *FibShRsrcAvailState) GetSrOutOorTs() uint64 {
	if m != nil {
		return m.SrOutOorTs
	}
	return 0
}

func init() {
	proto.RegisterType((*FibShRsrcAvailState_KEYS)(nil), "cisco_ios_xr_fib_common_oper.fib.nodes.node.protocols.protocol.resource.resource_summary_info.fib_sh_rsrc_avail_state_KEYS")
	proto.RegisterType((*FibShRsrcShm)(nil), "cisco_ios_xr_fib_common_oper.fib.nodes.node.protocols.protocol.resource.resource_summary_info.fib_sh_rsrc_shm")
	proto.RegisterType((*FibShRsrcAvailState)(nil), "cisco_ios_xr_fib_common_oper.fib.nodes.node.protocols.protocol.resource.resource_summary_info.fib_sh_rsrc_avail_state")
}

func init() { proto.RegisterFile("fib_sh_rsrc_avail_state.proto", fileDescriptor_cb9e169109da4431) }

var fileDescriptor_cb9e169109da4431 = []byte{
	// 412 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x91, 0x4f, 0x6b, 0x14, 0x41,
	0x10, 0xc5, 0x59, 0x57, 0xc4, 0xed, 0xec, 0x1a, 0x69, 0x0f, 0x0e, 0xa8, 0xb8, 0x8e, 0x0a, 0x7b,
	0x71, 0x0e, 0x89, 0x7f, 0x8f, 0x21, 0x08, 0x06, 0x89, 0x81, 0x5d, 0x2f, 0x1e, 0xa4, 0xec, 0xed,
	0xed, 0xc9, 0x34, 0xa4, 0xbb, 0x42, 0xd5, 0xcc, 0xee, 0x7a, 0xf0, 0x3b, 0xf8, 0x61, 0xfc, 0x80,
	0xd2, 0x35, 0x99, 0x61, 0x15, 0x72, 0xcc, 0x65, 0x68, 0xde, 0xfc, 0xfa, 0xd5, 0xeb, 0x7a, 0xea,
	0x49, 0xe9, 0x97, 0xc0, 0x15, 0x10, 0x93, 0x05, 0xb3, 0x36, 0xfe, 0x02, 0xb8, 0x36, 0xb5, 0x2b,
	0x2e, 0x09, 0x6b, 0xd4, 0xdf, 0xad, 0x67, 0x8b, 0xe0, 0x91, 0x61, 0x4b, 0x90, 0x58, 0x8b, 0x21,
	0x60, 0x04, 0xbc, 0x74, 0x54, 0x94, 0x7e, 0x59, 0x44, 0x5c, 0x39, 0x96, 0x6f, 0x7b, 0xc5, 0xe2,
	0x05, 0xf7, 0xa7, 0x82, 0x1c, 0x63, 0x43, 0xd6, 0xf5, 0x07, 0xe0, 0x26, 0x04, 0x43, 0x3f, 0xc1,
	0xc7, 0x12, 0xf3, 0x1f, 0xea, 0xf1, 0x35, 0xf3, 0xe1, 0xf3, 0xc7, 0x6f, 0x0b, 0xfd, 0x48, 0x8d,
	0x92, 0x33, 0x44, 0x13, 0x5c, 0x36, 0x98, 0x0e, 0x66, 0xa3, 0xf9, 0xdd, 0x24, 0x7c, 0x31, 0xc1,
	0xe9, 0xe7, 0x6a, 0xd2, 0xcd, 0x69, 0x81, 0x5b, 0x02, 0x8c, 0x3b, 0x31, 0x41, 0xf9, 0x2f, 0xb5,
	0xbf, 0x3b, 0x81, 0xab, 0xa0, 0x73, 0x35, 0x61, 0x62, 0xb0, 0x0d, 0x11, 0x04, 0x5c, 0xb5, 0xc6,
	0x93, 0xf9, 0x1e, 0x13, 0x1f, 0x37, 0x44, 0xa7, 0xb8, 0x72, 0x1d, 0x63, 0xd6, 0xe7, 0x6d, 0x28,
	0xf1, 0xbe, 0x2d, 0xcc, 0xd1, 0xfa, 0xfc, 0x28, 0x49, 0x1d, 0x13, 0xcc, 0xf6, 0x8a, 0x19, 0xf6,
	0xcc, 0xa9, 0xd9, 0x0a, 0x93, 0xff, 0x19, 0xaa, 0x87, 0xd7, 0xbc, 0x50, 0x4f, 0xd5, 0x98, 0x69,
	0x27, 0xc6, 0x81, 0xc4, 0x50, 0x4c, 0x7d, 0x8a, 0xdf, 0x03, 0x41, 0xb8, 0x0a, 0xed, 0x95, 0xec,
	0x70, 0x3a, 0x9c, 0xed, 0x1d, 0xc4, 0xe2, 0x46, 0x5b, 0x29, 0xfe, 0x5b, 0x58, 0x8a, 0xb4, 0xa8,
	0xc2, 0x42, 0x42, 0xbf, 0x50, 0xf7, 0x98, 0xa0, 0xda, 0xc8, 0x4f, 0x89, 0xfd, 0x7a, 0x3a, 0x9c,
	0x4d, 0xe6, 0x63, 0xa6, 0x4f, 0x22, 0x4a, 0xf0, 0x7f, 0xa8, 0xe4, 0x99, 0xbd, 0x69, 0xbb, 0xe9,
	0xa8, 0x93, 0x58, 0xa2, 0x7e, 0xa5, 0x1e, 0xb4, 0xaf, 0xdb, 0xf8, 0x08, 0x88, 0x04, 0x16, 0x9b,
	0x58, 0x67, 0x6f, 0x65, 0x0f, 0xf7, 0x65, 0xe8, 0xc6, 0xc7, 0x33, 0xa4, 0xe3, 0xa4, 0xeb, 0x97,
	0x6a, 0x5f, 0x4c, 0x77, 0xd0, 0x77, 0x82, 0x8a, 0x6b, 0x8f, 0x3d, 0x95, 0x9d, 0x5d, 0x39, 0xd6,
	0x9c, 0xbd, 0x97, 0x56, 0x46, 0x4c, 0x27, 0xc9, 0xea, 0x2b, 0xeb, 0x67, 0xa9, 0x37, 0xc0, 0xa6,
	0xee, 0x88, 0x0f, 0x42, 0x28, 0xa6, 0xb3, 0xa6, 0x16, 0x64, 0x79, 0x47, 0x56, 0x75, 0xf8, 0x37,
	0x00, 0x00, 0xff, 0xff, 0xe9, 0xde, 0xb9, 0xa4, 0x1e, 0x03, 0x00, 0x00,
}
