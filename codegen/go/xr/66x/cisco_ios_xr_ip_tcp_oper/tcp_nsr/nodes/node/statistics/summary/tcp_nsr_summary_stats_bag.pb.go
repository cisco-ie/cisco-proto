/*
Copyright 2019 Cisco Systems

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: tcp_nsr_summary_stats_bag.proto

package cisco_ios_xr_ip_tcp_oper_tcp_nsr_nodes_node_statistics_summary

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type TcpNsrSummaryStatsBag_KEYS struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TcpNsrSummaryStatsBag_KEYS) Reset()         { *m = TcpNsrSummaryStatsBag_KEYS{} }
func (m *TcpNsrSummaryStatsBag_KEYS) String() string { return proto.CompactTextString(m) }
func (*TcpNsrSummaryStatsBag_KEYS) ProtoMessage()    {}
func (*TcpNsrSummaryStatsBag_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_a4fb794398297255, []int{0}
}

func (m *TcpNsrSummaryStatsBag_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TcpNsrSummaryStatsBag_KEYS.Unmarshal(m, b)
}
func (m *TcpNsrSummaryStatsBag_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TcpNsrSummaryStatsBag_KEYS.Marshal(b, m, deterministic)
}
func (m *TcpNsrSummaryStatsBag_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TcpNsrSummaryStatsBag_KEYS.Merge(m, src)
}
func (m *TcpNsrSummaryStatsBag_KEYS) XXX_Size() int {
	return xxx_messageInfo_TcpNsrSummaryStatsBag_KEYS.Size(m)
}
func (m *TcpNsrSummaryStatsBag_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_TcpNsrSummaryStatsBag_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_TcpNsrSummaryStatsBag_KEYS proto.InternalMessageInfo

func (m *TcpNsrSummaryStatsBag_KEYS) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type TssNotifStats struct {
	QueuedCount          uint32   `protobuf:"varint,1,opt,name=queued_count,json=queuedCount,proto3" json:"queued_count,omitempty"`
	FailedCount          uint32   `protobuf:"varint,2,opt,name=failed_count,json=failedCount,proto3" json:"failed_count,omitempty"`
	DeliveredCount       uint32   `protobuf:"varint,3,opt,name=delivered_count,json=deliveredCount,proto3" json:"delivered_count,omitempty"`
	DroppedCount         uint32   `protobuf:"varint,4,opt,name=dropped_count,json=droppedCount,proto3" json:"dropped_count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TssNotifStats) Reset()         { *m = TssNotifStats{} }
func (m *TssNotifStats) String() string { return proto.CompactTextString(m) }
func (*TssNotifStats) ProtoMessage()    {}
func (*TssNotifStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_a4fb794398297255, []int{1}
}

func (m *TssNotifStats) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TssNotifStats.Unmarshal(m, b)
}
func (m *TssNotifStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TssNotifStats.Marshal(b, m, deterministic)
}
func (m *TssNotifStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TssNotifStats.Merge(m, src)
}
func (m *TssNotifStats) XXX_Size() int {
	return xxx_messageInfo_TssNotifStats.Size(m)
}
func (m *TssNotifStats) XXX_DiscardUnknown() {
	xxx_messageInfo_TssNotifStats.DiscardUnknown(m)
}

var xxx_messageInfo_TssNotifStats proto.InternalMessageInfo

func (m *TssNotifStats) GetQueuedCount() uint32 {
	if m != nil {
		return m.QueuedCount
	}
	return 0
}

func (m *TssNotifStats) GetFailedCount() uint32 {
	if m != nil {
		return m.FailedCount
	}
	return 0
}

func (m *TssNotifStats) GetDeliveredCount() uint32 {
	if m != nil {
		return m.DeliveredCount
	}
	return 0
}

func (m *TssNotifStats) GetDroppedCount() uint32 {
	if m != nil {
		return m.DroppedCount
	}
	return 0
}

type TcpNsrSndCountersNode struct {
	DataXferSend                   uint32   `protobuf:"varint,1,opt,name=data_xfer_send,json=dataXferSend,proto3" json:"data_xfer_send,omitempty"`
	DataXferSendTotal              uint64   `protobuf:"varint,2,opt,name=data_xfer_send_total,json=dataXferSendTotal,proto3" json:"data_xfer_send_total,omitempty"`
	DataXferSendDrop               uint32   `protobuf:"varint,3,opt,name=data_xfer_send_drop,json=dataXferSendDrop,proto3" json:"data_xfer_send_drop,omitempty"`
	DataXferSendIovAlloc           uint32   `protobuf:"varint,4,opt,name=data_xfer_send_iov_alloc,json=dataXferSendIovAlloc,proto3" json:"data_xfer_send_iov_alloc,omitempty"`
	DataXferRcv                    uint32   `protobuf:"varint,5,opt,name=data_xfer_rcv,json=dataXferRcv,proto3" json:"data_xfer_rcv,omitempty"`
	DataXferRcvSuccess             uint32   `protobuf:"varint,6,opt,name=data_xfer_rcv_success,json=dataXferRcvSuccess,proto3" json:"data_xfer_rcv_success,omitempty"`
	DataXferRcvFailBufferTrim      uint32   `protobuf:"varint,7,opt,name=data_xfer_rcv_fail_buffer_trim,json=dataXferRcvFailBufferTrim,proto3" json:"data_xfer_rcv_fail_buffer_trim,omitempty"`
	DataXferRcvFailSndUnaOutOfSync uint32   `protobuf:"varint,8,opt,name=data_xfer_rcv_fail_snd_una_out_of_sync,json=dataXferRcvFailSndUnaOutOfSync,proto3" json:"data_xfer_rcv_fail_snd_una_out_of_sync,omitempty"`
	SegInstrSend                   uint32   `protobuf:"varint,9,opt,name=seg_instr_send,json=segInstrSend,proto3" json:"seg_instr_send,omitempty"`
	SegInstrSendUnits              uint32   `protobuf:"varint,10,opt,name=seg_instr_send_units,json=segInstrSendUnits,proto3" json:"seg_instr_send_units,omitempty"`
	SegInstrSendDrop               uint32   `protobuf:"varint,11,opt,name=seg_instr_send_drop,json=segInstrSendDrop,proto3" json:"seg_instr_send_drop,omitempty"`
	SegInstrRcv                    uint32   `protobuf:"varint,12,opt,name=seg_instr_rcv,json=segInstrRcv,proto3" json:"seg_instr_rcv,omitempty"`
	SegInstrRcvSuccess             uint32   `protobuf:"varint,13,opt,name=seg_instr_rcv_success,json=segInstrRcvSuccess,proto3" json:"seg_instr_rcv_success,omitempty"`
	SegInstrRcvFailBufferTrim      uint32   `protobuf:"varint,14,opt,name=seg_instr_rcv_fail_buffer_trim,json=segInstrRcvFailBufferTrim,proto3" json:"seg_instr_rcv_fail_buffer_trim,omitempty"`
	SegInstrRcvFailTcpProcess      uint32   `protobuf:"varint,15,opt,name=seg_instr_rcv_fail_tcp_process,json=segInstrRcvFailTcpProcess,proto3" json:"seg_instr_rcv_fail_tcp_process,omitempty"`
	NackSend                       uint32   `protobuf:"varint,16,opt,name=nack_send,json=nackSend,proto3" json:"nack_send,omitempty"`
	NackSendDrop                   uint32   `protobuf:"varint,17,opt,name=nack_send_drop,json=nackSendDrop,proto3" json:"nack_send_drop,omitempty"`
	NackRcv                        uint32   `protobuf:"varint,18,opt,name=nack_rcv,json=nackRcv,proto3" json:"nack_rcv,omitempty"`
	NackRcvSuccess                 uint32   `protobuf:"varint,19,opt,name=nack_rcv_success,json=nackRcvSuccess,proto3" json:"nack_rcv_success,omitempty"`
	NackRcvFailDataSend            uint32   `protobuf:"varint,20,opt,name=nack_rcv_fail_data_send,json=nackRcvFailDataSend,proto3" json:"nack_rcv_fail_data_send,omitempty"`
	CleanupSend                    uint32   `protobuf:"varint,21,opt,name=cleanup_send,json=cleanupSend,proto3" json:"cleanup_send,omitempty"`
	CleanupSendDrop                uint32   `protobuf:"varint,22,opt,name=cleanup_send_drop,json=cleanupSendDrop,proto3" json:"cleanup_send_drop,omitempty"`
	CleanupRcv                     uint32   `protobuf:"varint,23,opt,name=cleanup_rcv,json=cleanupRcv,proto3" json:"cleanup_rcv,omitempty"`
	CleanupRcvSuccess              uint32   `protobuf:"varint,24,opt,name=cleanup_rcv_success,json=cleanupRcvSuccess,proto3" json:"cleanup_rcv_success,omitempty"`
	CleanupRcvFailBufferTrim       uint32   `protobuf:"varint,25,opt,name=cleanup_rcv_fail_buffer_trim,json=cleanupRcvFailBufferTrim,proto3" json:"cleanup_rcv_fail_buffer_trim,omitempty"`
	XXX_NoUnkeyedLiteral           struct{} `json:"-"`
	XXX_unrecognized               []byte   `json:"-"`
	XXX_sizecache                  int32    `json:"-"`
}

func (m *TcpNsrSndCountersNode) Reset()         { *m = TcpNsrSndCountersNode{} }
func (m *TcpNsrSndCountersNode) String() string { return proto.CompactTextString(m) }
func (*TcpNsrSndCountersNode) ProtoMessage()    {}
func (*TcpNsrSndCountersNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_a4fb794398297255, []int{2}
}

func (m *TcpNsrSndCountersNode) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TcpNsrSndCountersNode.Unmarshal(m, b)
}
func (m *TcpNsrSndCountersNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TcpNsrSndCountersNode.Marshal(b, m, deterministic)
}
func (m *TcpNsrSndCountersNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TcpNsrSndCountersNode.Merge(m, src)
}
func (m *TcpNsrSndCountersNode) XXX_Size() int {
	return xxx_messageInfo_TcpNsrSndCountersNode.Size(m)
}
func (m *TcpNsrSndCountersNode) XXX_DiscardUnknown() {
	xxx_messageInfo_TcpNsrSndCountersNode.DiscardUnknown(m)
}

var xxx_messageInfo_TcpNsrSndCountersNode proto.InternalMessageInfo

func (m *TcpNsrSndCountersNode) GetDataXferSend() uint32 {
	if m != nil {
		return m.DataXferSend
	}
	return 0
}

func (m *TcpNsrSndCountersNode) GetDataXferSendTotal() uint64 {
	if m != nil {
		return m.DataXferSendTotal
	}
	return 0
}

func (m *TcpNsrSndCountersNode) GetDataXferSendDrop() uint32 {
	if m != nil {
		return m.DataXferSendDrop
	}
	return 0
}

func (m *TcpNsrSndCountersNode) GetDataXferSendIovAlloc() uint32 {
	if m != nil {
		return m.DataXferSendIovAlloc
	}
	return 0
}

func (m *TcpNsrSndCountersNode) GetDataXferRcv() uint32 {
	if m != nil {
		return m.DataXferRcv
	}
	return 0
}

func (m *TcpNsrSndCountersNode) GetDataXferRcvSuccess() uint32 {
	if m != nil {
		return m.DataXferRcvSuccess
	}
	return 0
}

func (m *TcpNsrSndCountersNode) GetDataXferRcvFailBufferTrim() uint32 {
	if m != nil {
		return m.DataXferRcvFailBufferTrim
	}
	return 0
}

func (m *TcpNsrSndCountersNode) GetDataXferRcvFailSndUnaOutOfSync() uint32 {
	if m != nil {
		return m.DataXferRcvFailSndUnaOutOfSync
	}
	return 0
}

func (m *TcpNsrSndCountersNode) GetSegInstrSend() uint32 {
	if m != nil {
		return m.SegInstrSend
	}
	return 0
}

func (m *TcpNsrSndCountersNode) GetSegInstrSendUnits() uint32 {
	if m != nil {
		return m.SegInstrSendUnits
	}
	return 0
}

func (m *TcpNsrSndCountersNode) GetSegInstrSendDrop() uint32 {
	if m != nil {
		return m.SegInstrSendDrop
	}
	return 0
}

func (m *TcpNsrSndCountersNode) GetSegInstrRcv() uint32 {
	if m != nil {
		return m.SegInstrRcv
	}
	return 0
}

func (m *TcpNsrSndCountersNode) GetSegInstrRcvSuccess() uint32 {
	if m != nil {
		return m.SegInstrRcvSuccess
	}
	return 0
}

func (m *TcpNsrSndCountersNode) GetSegInstrRcvFailBufferTrim() uint32 {
	if m != nil {
		return m.SegInstrRcvFailBufferTrim
	}
	return 0
}

func (m *TcpNsrSndCountersNode) GetSegInstrRcvFailTcpProcess() uint32 {
	if m != nil {
		return m.SegInstrRcvFailTcpProcess
	}
	return 0
}

func (m *TcpNsrSndCountersNode) GetNackSend() uint32 {
	if m != nil {
		return m.NackSend
	}
	return 0
}

func (m *TcpNsrSndCountersNode) GetNackSendDrop() uint32 {
	if m != nil {
		return m.NackSendDrop
	}
	return 0
}

func (m *TcpNsrSndCountersNode) GetNackRcv() uint32 {
	if m != nil {
		return m.NackRcv
	}
	return 0
}

func (m *TcpNsrSndCountersNode) GetNackRcvSuccess() uint32 {
	if m != nil {
		return m.NackRcvSuccess
	}
	return 0
}

func (m *TcpNsrSndCountersNode) GetNackRcvFailDataSend() uint32 {
	if m != nil {
		return m.NackRcvFailDataSend
	}
	return 0
}

func (m *TcpNsrSndCountersNode) GetCleanupSend() uint32 {
	if m != nil {
		return m.CleanupSend
	}
	return 0
}

func (m *TcpNsrSndCountersNode) GetCleanupSendDrop() uint32 {
	if m != nil {
		return m.CleanupSendDrop
	}
	return 0
}

func (m *TcpNsrSndCountersNode) GetCleanupRcv() uint32 {
	if m != nil {
		return m.CleanupRcv
	}
	return 0
}

func (m *TcpNsrSndCountersNode) GetCleanupRcvSuccess() uint32 {
	if m != nil {
		return m.CleanupRcvSuccess
	}
	return 0
}

func (m *TcpNsrSndCountersNode) GetCleanupRcvFailBufferTrim() uint32 {
	if m != nil {
		return m.CleanupRcvFailBufferTrim
	}
	return 0
}

type TcpNsrSndCountersAggrOnlyNode struct {
	DataXferRcvDropNoPcb   uint32   `protobuf:"varint,1,opt,name=data_xfer_rcv_drop_no_pcb,json=dataXferRcvDropNoPcb,proto3" json:"data_xfer_rcv_drop_no_pcb,omitempty"`
	DataXferRcvDropNoScbDp uint32   `protobuf:"varint,2,opt,name=data_xfer_rcv_drop_no_scb_dp,json=dataXferRcvDropNoScbDp,proto3" json:"data_xfer_rcv_drop_no_scb_dp,omitempty"`
	SegInstrRcvDropNoPcb   uint32   `protobuf:"varint,3,opt,name=seg_instr_rcv_drop_no_pcb,json=segInstrRcvDropNoPcb,proto3" json:"seg_instr_rcv_drop_no_pcb,omitempty"`
	SegInstrRcvDropNoScbDp uint32   `protobuf:"varint,4,opt,name=seg_instr_rcv_drop_no_scb_dp,json=segInstrRcvDropNoScbDp,proto3" json:"seg_instr_rcv_drop_no_scb_dp,omitempty"`
	NackRcvDropNoPcb       uint32   `protobuf:"varint,5,opt,name=nack_rcv_drop_no_pcb,json=nackRcvDropNoPcb,proto3" json:"nack_rcv_drop_no_pcb,omitempty"`
	NackRcvDropNoScbDp     uint32   `protobuf:"varint,6,opt,name=nack_rcv_drop_no_scb_dp,json=nackRcvDropNoScbDp,proto3" json:"nack_rcv_drop_no_scb_dp,omitempty"`
	CleanupRcvDropNoPcb    uint32   `protobuf:"varint,7,opt,name=cleanup_rcv_drop_no_pcb,json=cleanupRcvDropNoPcb,proto3" json:"cleanup_rcv_drop_no_pcb,omitempty"`
	CleanupRcvDropNoScbDp  uint32   `protobuf:"varint,8,opt,name=cleanup_rcv_drop_no_scb_dp,json=cleanupRcvDropNoScbDp,proto3" json:"cleanup_rcv_drop_no_scb_dp,omitempty"`
	XXX_NoUnkeyedLiteral   struct{} `json:"-"`
	XXX_unrecognized       []byte   `json:"-"`
	XXX_sizecache          int32    `json:"-"`
}

func (m *TcpNsrSndCountersAggrOnlyNode) Reset()         { *m = TcpNsrSndCountersAggrOnlyNode{} }
func (m *TcpNsrSndCountersAggrOnlyNode) String() string { return proto.CompactTextString(m) }
func (*TcpNsrSndCountersAggrOnlyNode) ProtoMessage()    {}
func (*TcpNsrSndCountersAggrOnlyNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_a4fb794398297255, []int{3}
}

func (m *TcpNsrSndCountersAggrOnlyNode) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TcpNsrSndCountersAggrOnlyNode.Unmarshal(m, b)
}
func (m *TcpNsrSndCountersAggrOnlyNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TcpNsrSndCountersAggrOnlyNode.Marshal(b, m, deterministic)
}
func (m *TcpNsrSndCountersAggrOnlyNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TcpNsrSndCountersAggrOnlyNode.Merge(m, src)
}
func (m *TcpNsrSndCountersAggrOnlyNode) XXX_Size() int {
	return xxx_messageInfo_TcpNsrSndCountersAggrOnlyNode.Size(m)
}
func (m *TcpNsrSndCountersAggrOnlyNode) XXX_DiscardUnknown() {
	xxx_messageInfo_TcpNsrSndCountersAggrOnlyNode.DiscardUnknown(m)
}

var xxx_messageInfo_TcpNsrSndCountersAggrOnlyNode proto.InternalMessageInfo

func (m *TcpNsrSndCountersAggrOnlyNode) GetDataXferRcvDropNoPcb() uint32 {
	if m != nil {
		return m.DataXferRcvDropNoPcb
	}
	return 0
}

func (m *TcpNsrSndCountersAggrOnlyNode) GetDataXferRcvDropNoScbDp() uint32 {
	if m != nil {
		return m.DataXferRcvDropNoScbDp
	}
	return 0
}

func (m *TcpNsrSndCountersAggrOnlyNode) GetSegInstrRcvDropNoPcb() uint32 {
	if m != nil {
		return m.SegInstrRcvDropNoPcb
	}
	return 0
}

func (m *TcpNsrSndCountersAggrOnlyNode) GetSegInstrRcvDropNoScbDp() uint32 {
	if m != nil {
		return m.SegInstrRcvDropNoScbDp
	}
	return 0
}

func (m *TcpNsrSndCountersAggrOnlyNode) GetNackRcvDropNoPcb() uint32 {
	if m != nil {
		return m.NackRcvDropNoPcb
	}
	return 0
}

func (m *TcpNsrSndCountersAggrOnlyNode) GetNackRcvDropNoScbDp() uint32 {
	if m != nil {
		return m.NackRcvDropNoScbDp
	}
	return 0
}

func (m *TcpNsrSndCountersAggrOnlyNode) GetCleanupRcvDropNoPcb() uint32 {
	if m != nil {
		return m.CleanupRcvDropNoPcb
	}
	return 0
}

func (m *TcpNsrSndCountersAggrOnlyNode) GetCleanupRcvDropNoScbDp() uint32 {
	if m != nil {
		return m.CleanupRcvDropNoScbDp
	}
	return 0
}

type TcpNsrSndCountersAggrNode struct {
	Common               *TcpNsrSndCountersNode         `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	AggrOnly             *TcpNsrSndCountersAggrOnlyNode `protobuf:"bytes,2,opt,name=aggr_only,json=aggrOnly,proto3" json:"aggr_only,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-"`
	XXX_unrecognized     []byte                         `json:"-"`
	XXX_sizecache        int32                          `json:"-"`
}

func (m *TcpNsrSndCountersAggrNode) Reset()         { *m = TcpNsrSndCountersAggrNode{} }
func (m *TcpNsrSndCountersAggrNode) String() string { return proto.CompactTextString(m) }
func (*TcpNsrSndCountersAggrNode) ProtoMessage()    {}
func (*TcpNsrSndCountersAggrNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_a4fb794398297255, []int{4}
}

func (m *TcpNsrSndCountersAggrNode) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TcpNsrSndCountersAggrNode.Unmarshal(m, b)
}
func (m *TcpNsrSndCountersAggrNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TcpNsrSndCountersAggrNode.Marshal(b, m, deterministic)
}
func (m *TcpNsrSndCountersAggrNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TcpNsrSndCountersAggrNode.Merge(m, src)
}
func (m *TcpNsrSndCountersAggrNode) XXX_Size() int {
	return xxx_messageInfo_TcpNsrSndCountersAggrNode.Size(m)
}
func (m *TcpNsrSndCountersAggrNode) XXX_DiscardUnknown() {
	xxx_messageInfo_TcpNsrSndCountersAggrNode.DiscardUnknown(m)
}

var xxx_messageInfo_TcpNsrSndCountersAggrNode proto.InternalMessageInfo

func (m *TcpNsrSndCountersAggrNode) GetCommon() *TcpNsrSndCountersNode {
	if m != nil {
		return m.Common
	}
	return nil
}

func (m *TcpNsrSndCountersAggrNode) GetAggrOnly() *TcpNsrSndCountersAggrOnlyNode {
	if m != nil {
		return m.AggrOnly
	}
	return nil
}

type TcpNsrAuditCountersNode struct {
	MarkSessionSetSend         uint32   `protobuf:"varint,1,opt,name=mark_session_set_send,json=markSessionSetSend,proto3" json:"mark_session_set_send,omitempty"`
	MarkSessionSetSendDrop     uint32   `protobuf:"varint,2,opt,name=mark_session_set_send_drop,json=markSessionSetSendDrop,proto3" json:"mark_session_set_send_drop,omitempty"`
	MarkSessionSetRcv          uint32   `protobuf:"varint,3,opt,name=mark_session_set_rcv,json=markSessionSetRcv,proto3" json:"mark_session_set_rcv,omitempty"`
	MarkSessionSetRcvDrop      uint32   `protobuf:"varint,4,opt,name=mark_session_set_rcv_drop,json=markSessionSetRcvDrop,proto3" json:"mark_session_set_rcv_drop,omitempty"`
	SessionSend                uint32   `protobuf:"varint,5,opt,name=session_send,json=sessionSend,proto3" json:"session_send,omitempty"`
	SessionSendDrop            uint32   `protobuf:"varint,6,opt,name=session_send_drop,json=sessionSendDrop,proto3" json:"session_send_drop,omitempty"`
	SessionRcv                 uint32   `protobuf:"varint,7,opt,name=session_rcv,json=sessionRcv,proto3" json:"session_rcv,omitempty"`
	SessionRcvDrop             uint32   `protobuf:"varint,8,opt,name=session_rcv_drop,json=sessionRcvDrop,proto3" json:"session_rcv_drop,omitempty"`
	SweepSessionSetSend        uint32   `protobuf:"varint,9,opt,name=sweep_session_set_send,json=sweepSessionSetSend,proto3" json:"sweep_session_set_send,omitempty"`
	SweepSessionSetSendDrop    uint32   `protobuf:"varint,10,opt,name=sweep_session_set_send_drop,json=sweepSessionSetSendDrop,proto3" json:"sweep_session_set_send_drop,omitempty"`
	SweepSessionSetRcv         uint32   `protobuf:"varint,11,opt,name=sweep_session_set_rcv,json=sweepSessionSetRcv,proto3" json:"sweep_session_set_rcv,omitempty"`
	SweepSessionSetRcvDrop     uint32   `protobuf:"varint,12,opt,name=sweep_session_set_rcv_drop,json=sweepSessionSetRcvDrop,proto3" json:"sweep_session_set_rcv_drop,omitempty"`
	SessionSetResponseSend     uint32   `protobuf:"varint,13,opt,name=session_set_response_send,json=sessionSetResponseSend,proto3" json:"session_set_response_send,omitempty"`
	SessionSetResponseSendDrop uint32   `protobuf:"varint,14,opt,name=session_set_response_send_drop,json=sessionSetResponseSendDrop,proto3" json:"session_set_response_send_drop,omitempty"`
	SessionSetResponseRcv      uint32   `protobuf:"varint,15,opt,name=session_set_response_rcv,json=sessionSetResponseRcv,proto3" json:"session_set_response_rcv,omitempty"`
	SessionSetResponseRcvDrop  uint32   `protobuf:"varint,16,opt,name=session_set_response_rcv_drop,json=sessionSetResponseRcvDrop,proto3" json:"session_set_response_rcv_drop,omitempty"`
	MarkSessionSetAckSend      uint32   `protobuf:"varint,17,opt,name=mark_session_set_ack_send,json=markSessionSetAckSend,proto3" json:"mark_session_set_ack_send,omitempty"`
	MarkSessionSetAckSendDrop  uint32   `protobuf:"varint,18,opt,name=mark_session_set_ack_send_drop,json=markSessionSetAckSendDrop,proto3" json:"mark_session_set_ack_send_drop,omitempty"`
	MarkSessionSetAckRcv       uint32   `protobuf:"varint,19,opt,name=mark_session_set_ack_rcv,json=markSessionSetAckRcv,proto3" json:"mark_session_set_ack_rcv,omitempty"`
	MarkSessionSetAckRcvDrop   uint32   `protobuf:"varint,20,opt,name=mark_session_set_ack_rcv_drop,json=markSessionSetAckRcvDrop,proto3" json:"mark_session_set_ack_rcv_drop,omitempty"`
	MarkSessionSetNackSend     uint32   `protobuf:"varint,21,opt,name=mark_session_set_nack_send,json=markSessionSetNackSend,proto3" json:"mark_session_set_nack_send,omitempty"`
	MarkSessionSetNackSendDrop uint32   `protobuf:"varint,22,opt,name=mark_session_set_nack_send_drop,json=markSessionSetNackSendDrop,proto3" json:"mark_session_set_nack_send_drop,omitempty"`
	MarkSessionSetNackRcv      uint32   `protobuf:"varint,23,opt,name=mark_session_set_nack_rcv,json=markSessionSetNackRcv,proto3" json:"mark_session_set_nack_rcv,omitempty"`
	MarkSessionSetNackRcvDrop  uint32   `protobuf:"varint,24,opt,name=mark_session_set_nack_rcv_drop,json=markSessionSetNackRcvDrop,proto3" json:"mark_session_set_nack_rcv_drop,omitempty"`
	Abort                      uint32   `protobuf:"varint,25,opt,name=abort,proto3" json:"abort,omitempty"`
	XXX_NoUnkeyedLiteral       struct{} `json:"-"`
	XXX_unrecognized           []byte   `json:"-"`
	XXX_sizecache              int32    `json:"-"`
}

func (m *TcpNsrAuditCountersNode) Reset()         { *m = TcpNsrAuditCountersNode{} }
func (m *TcpNsrAuditCountersNode) String() string { return proto.CompactTextString(m) }
func (*TcpNsrAuditCountersNode) ProtoMessage()    {}
func (*TcpNsrAuditCountersNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_a4fb794398297255, []int{5}
}

func (m *TcpNsrAuditCountersNode) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TcpNsrAuditCountersNode.Unmarshal(m, b)
}
func (m *TcpNsrAuditCountersNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TcpNsrAuditCountersNode.Marshal(b, m, deterministic)
}
func (m *TcpNsrAuditCountersNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TcpNsrAuditCountersNode.Merge(m, src)
}
func (m *TcpNsrAuditCountersNode) XXX_Size() int {
	return xxx_messageInfo_TcpNsrAuditCountersNode.Size(m)
}
func (m *TcpNsrAuditCountersNode) XXX_DiscardUnknown() {
	xxx_messageInfo_TcpNsrAuditCountersNode.DiscardUnknown(m)
}

var xxx_messageInfo_TcpNsrAuditCountersNode proto.InternalMessageInfo

func (m *TcpNsrAuditCountersNode) GetMarkSessionSetSend() uint32 {
	if m != nil {
		return m.MarkSessionSetSend
	}
	return 0
}

func (m *TcpNsrAuditCountersNode) GetMarkSessionSetSendDrop() uint32 {
	if m != nil {
		return m.MarkSessionSetSendDrop
	}
	return 0
}

func (m *TcpNsrAuditCountersNode) GetMarkSessionSetRcv() uint32 {
	if m != nil {
		return m.MarkSessionSetRcv
	}
	return 0
}

func (m *TcpNsrAuditCountersNode) GetMarkSessionSetRcvDrop() uint32 {
	if m != nil {
		return m.MarkSessionSetRcvDrop
	}
	return 0
}

func (m *TcpNsrAuditCountersNode) GetSessionSend() uint32 {
	if m != nil {
		return m.SessionSend
	}
	return 0
}

func (m *TcpNsrAuditCountersNode) GetSessionSendDrop() uint32 {
	if m != nil {
		return m.SessionSendDrop
	}
	return 0
}

func (m *TcpNsrAuditCountersNode) GetSessionRcv() uint32 {
	if m != nil {
		return m.SessionRcv
	}
	return 0
}

func (m *TcpNsrAuditCountersNode) GetSessionRcvDrop() uint32 {
	if m != nil {
		return m.SessionRcvDrop
	}
	return 0
}

func (m *TcpNsrAuditCountersNode) GetSweepSessionSetSend() uint32 {
	if m != nil {
		return m.SweepSessionSetSend
	}
	return 0
}

func (m *TcpNsrAuditCountersNode) GetSweepSessionSetSendDrop() uint32 {
	if m != nil {
		return m.SweepSessionSetSendDrop
	}
	return 0
}

func (m *TcpNsrAuditCountersNode) GetSweepSessionSetRcv() uint32 {
	if m != nil {
		return m.SweepSessionSetRcv
	}
	return 0
}

func (m *TcpNsrAuditCountersNode) GetSweepSessionSetRcvDrop() uint32 {
	if m != nil {
		return m.SweepSessionSetRcvDrop
	}
	return 0
}

func (m *TcpNsrAuditCountersNode) GetSessionSetResponseSend() uint32 {
	if m != nil {
		return m.SessionSetResponseSend
	}
	return 0
}

func (m *TcpNsrAuditCountersNode) GetSessionSetResponseSendDrop() uint32 {
	if m != nil {
		return m.SessionSetResponseSendDrop
	}
	return 0
}

func (m *TcpNsrAuditCountersNode) GetSessionSetResponseRcv() uint32 {
	if m != nil {
		return m.SessionSetResponseRcv
	}
	return 0
}

func (m *TcpNsrAuditCountersNode) GetSessionSetResponseRcvDrop() uint32 {
	if m != nil {
		return m.SessionSetResponseRcvDrop
	}
	return 0
}

func (m *TcpNsrAuditCountersNode) GetMarkSessionSetAckSend() uint32 {
	if m != nil {
		return m.MarkSessionSetAckSend
	}
	return 0
}

func (m *TcpNsrAuditCountersNode) GetMarkSessionSetAckSendDrop() uint32 {
	if m != nil {
		return m.MarkSessionSetAckSendDrop
	}
	return 0
}

func (m *TcpNsrAuditCountersNode) GetMarkSessionSetAckRcv() uint32 {
	if m != nil {
		return m.MarkSessionSetAckRcv
	}
	return 0
}

func (m *TcpNsrAuditCountersNode) GetMarkSessionSetAckRcvDrop() uint32 {
	if m != nil {
		return m.MarkSessionSetAckRcvDrop
	}
	return 0
}

func (m *TcpNsrAuditCountersNode) GetMarkSessionSetNackSend() uint32 {
	if m != nil {
		return m.MarkSessionSetNackSend
	}
	return 0
}

func (m *TcpNsrAuditCountersNode) GetMarkSessionSetNackSendDrop() uint32 {
	if m != nil {
		return m.MarkSessionSetNackSendDrop
	}
	return 0
}

func (m *TcpNsrAuditCountersNode) GetMarkSessionSetNackRcv() uint32 {
	if m != nil {
		return m.MarkSessionSetNackRcv
	}
	return 0
}

func (m *TcpNsrAuditCountersNode) GetMarkSessionSetNackRcvDrop() uint32 {
	if m != nil {
		return m.MarkSessionSetNackRcvDrop
	}
	return 0
}

func (m *TcpNsrAuditCountersNode) GetAbort() uint32 {
	if m != nil {
		return m.Abort
	}
	return 0
}

type TcpNsrAuditCountersAggrOnlyNode struct {
	MarkSessionSetRcvDropAggr     uint32   `protobuf:"varint,1,opt,name=mark_session_set_rcv_drop_aggr,json=markSessionSetRcvDropAggr,proto3" json:"mark_session_set_rcv_drop_aggr,omitempty"`
	SessionRcvDropAggr            uint32   `protobuf:"varint,2,opt,name=session_rcv_drop_aggr,json=sessionRcvDropAggr,proto3" json:"session_rcv_drop_aggr,omitempty"`
	SweepSessionSetRcvDropAggr    uint32   `protobuf:"varint,3,opt,name=sweep_session_set_rcv_drop_aggr,json=sweepSessionSetRcvDropAggr,proto3" json:"sweep_session_set_rcv_drop_aggr,omitempty"`
	SessionSetResponseRcvDropAggr uint32   `protobuf:"varint,4,opt,name=session_set_response_rcv_drop_aggr,json=sessionSetResponseRcvDropAggr,proto3" json:"session_set_response_rcv_drop_aggr,omitempty"`
	MarkSessionSetAckRcvDropAggr  uint32   `protobuf:"varint,5,opt,name=mark_session_set_ack_rcv_drop_aggr,json=markSessionSetAckRcvDropAggr,proto3" json:"mark_session_set_ack_rcv_drop_aggr,omitempty"`
	MarkSessionSetNackRcvDropAggr uint32   `protobuf:"varint,6,opt,name=mark_session_set_nack_rcv_drop_aggr,json=markSessionSetNackRcvDropAggr,proto3" json:"mark_session_set_nack_rcv_drop_aggr,omitempty"`
	XXX_NoUnkeyedLiteral          struct{} `json:"-"`
	XXX_unrecognized              []byte   `json:"-"`
	XXX_sizecache                 int32    `json:"-"`
}

func (m *TcpNsrAuditCountersAggrOnlyNode) Reset()         { *m = TcpNsrAuditCountersAggrOnlyNode{} }
func (m *TcpNsrAuditCountersAggrOnlyNode) String() string { return proto.CompactTextString(m) }
func (*TcpNsrAuditCountersAggrOnlyNode) ProtoMessage()    {}
func (*TcpNsrAuditCountersAggrOnlyNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_a4fb794398297255, []int{6}
}

func (m *TcpNsrAuditCountersAggrOnlyNode) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TcpNsrAuditCountersAggrOnlyNode.Unmarshal(m, b)
}
func (m *TcpNsrAuditCountersAggrOnlyNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TcpNsrAuditCountersAggrOnlyNode.Marshal(b, m, deterministic)
}
func (m *TcpNsrAuditCountersAggrOnlyNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TcpNsrAuditCountersAggrOnlyNode.Merge(m, src)
}
func (m *TcpNsrAuditCountersAggrOnlyNode) XXX_Size() int {
	return xxx_messageInfo_TcpNsrAuditCountersAggrOnlyNode.Size(m)
}
func (m *TcpNsrAuditCountersAggrOnlyNode) XXX_DiscardUnknown() {
	xxx_messageInfo_TcpNsrAuditCountersAggrOnlyNode.DiscardUnknown(m)
}

var xxx_messageInfo_TcpNsrAuditCountersAggrOnlyNode proto.InternalMessageInfo

func (m *TcpNsrAuditCountersAggrOnlyNode) GetMarkSessionSetRcvDropAggr() uint32 {
	if m != nil {
		return m.MarkSessionSetRcvDropAggr
	}
	return 0
}

func (m *TcpNsrAuditCountersAggrOnlyNode) GetSessionRcvDropAggr() uint32 {
	if m != nil {
		return m.SessionRcvDropAggr
	}
	return 0
}

func (m *TcpNsrAuditCountersAggrOnlyNode) GetSweepSessionSetRcvDropAggr() uint32 {
	if m != nil {
		return m.SweepSessionSetRcvDropAggr
	}
	return 0
}

func (m *TcpNsrAuditCountersAggrOnlyNode) GetSessionSetResponseRcvDropAggr() uint32 {
	if m != nil {
		return m.SessionSetResponseRcvDropAggr
	}
	return 0
}

func (m *TcpNsrAuditCountersAggrOnlyNode) GetMarkSessionSetAckRcvDropAggr() uint32 {
	if m != nil {
		return m.MarkSessionSetAckRcvDropAggr
	}
	return 0
}

func (m *TcpNsrAuditCountersAggrOnlyNode) GetMarkSessionSetNackRcvDropAggr() uint32 {
	if m != nil {
		return m.MarkSessionSetNackRcvDropAggr
	}
	return 0
}

type TcpNsrAuditCountersAggrNode struct {
	Common               *TcpNsrAuditCountersNode         `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	AggrOnly             *TcpNsrAuditCountersAggrOnlyNode `protobuf:"bytes,2,opt,name=aggr_only,json=aggrOnly,proto3" json:"aggr_only,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                         `json:"-"`
	XXX_unrecognized     []byte                           `json:"-"`
	XXX_sizecache        int32                            `json:"-"`
}

func (m *TcpNsrAuditCountersAggrNode) Reset()         { *m = TcpNsrAuditCountersAggrNode{} }
func (m *TcpNsrAuditCountersAggrNode) String() string { return proto.CompactTextString(m) }
func (*TcpNsrAuditCountersAggrNode) ProtoMessage()    {}
func (*TcpNsrAuditCountersAggrNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_a4fb794398297255, []int{7}
}

func (m *TcpNsrAuditCountersAggrNode) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TcpNsrAuditCountersAggrNode.Unmarshal(m, b)
}
func (m *TcpNsrAuditCountersAggrNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TcpNsrAuditCountersAggrNode.Marshal(b, m, deterministic)
}
func (m *TcpNsrAuditCountersAggrNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TcpNsrAuditCountersAggrNode.Merge(m, src)
}
func (m *TcpNsrAuditCountersAggrNode) XXX_Size() int {
	return xxx_messageInfo_TcpNsrAuditCountersAggrNode.Size(m)
}
func (m *TcpNsrAuditCountersAggrNode) XXX_DiscardUnknown() {
	xxx_messageInfo_TcpNsrAuditCountersAggrNode.DiscardUnknown(m)
}

var xxx_messageInfo_TcpNsrAuditCountersAggrNode proto.InternalMessageInfo

func (m *TcpNsrAuditCountersAggrNode) GetCommon() *TcpNsrAuditCountersNode {
	if m != nil {
		return m.Common
	}
	return nil
}

func (m *TcpNsrAuditCountersAggrNode) GetAggrOnly() *TcpNsrAuditCountersAggrOnlyNode {
	if m != nil {
		return m.AggrOnly
	}
	return nil
}

type TcpNsrSummaryStatsBag struct {
	LastClearedTime                      uint32                       `protobuf:"varint,50,opt,name=last_cleared_time,json=lastClearedTime,proto3" json:"last_cleared_time,omitempty"`
	NotificationStatistic                []*TssNotifStats             `protobuf:"bytes,51,rep,name=notification_statistic,json=notificationStatistic,proto3" json:"notification_statistic,omitempty"`
	NumberOfConnectedClients             uint32                       `protobuf:"varint,52,opt,name=number_of_connected_clients,json=numberOfConnectedClients,proto3" json:"number_of_connected_clients,omitempty"`
	NumberOfDisconnectedClients          uint32                       `protobuf:"varint,53,opt,name=number_of_disconnected_clients,json=numberOfDisconnectedClients,proto3" json:"number_of_disconnected_clients,omitempty"`
	NumberOfCurrentClients               uint32                       `protobuf:"varint,54,opt,name=number_of_current_clients,json=numberOfCurrentClients,proto3" json:"number_of_current_clients,omitempty"`
	NumberOfCreatedSessionSets           uint32                       `protobuf:"varint,55,opt,name=number_of_created_session_sets,json=numberOfCreatedSessionSets,proto3" json:"number_of_created_session_sets,omitempty"`
	NumberOfDestroyedSessionSets         uint32                       `protobuf:"varint,56,opt,name=number_of_destroyed_session_sets,json=numberOfDestroyedSessionSets,proto3" json:"number_of_destroyed_session_sets,omitempty"`
	NumberOfCurrentSessionSets           uint32                       `protobuf:"varint,57,opt,name=number_of_current_session_sets,json=numberOfCurrentSessionSets,proto3" json:"number_of_current_session_sets,omitempty"`
	NumberOfAddedSessions                uint32                       `protobuf:"varint,58,opt,name=number_of_added_sessions,json=numberOfAddedSessions,proto3" json:"number_of_added_sessions,omitempty"`
	NumberOfDeletedSessions              uint32                       `protobuf:"varint,59,opt,name=number_of_deleted_sessions,json=numberOfDeletedSessions,proto3" json:"number_of_deleted_sessions,omitempty"`
	NumberOfCurrentSessions              uint32                       `protobuf:"varint,60,opt,name=number_of_current_sessions,json=numberOfCurrentSessions,proto3" json:"number_of_current_sessions,omitempty"`
	NumberOfPartnerNode                  uint32                       `protobuf:"varint,61,opt,name=number_of_partner_node,json=numberOfPartnerNode,proto3" json:"number_of_partner_node,omitempty"`
	NumberOfAttemptedInitSync            uint32                       `protobuf:"varint,62,opt,name=number_of_attempted_init_sync,json=numberOfAttemptedInitSync,proto3" json:"number_of_attempted_init_sync,omitempty"`
	NumberOfSucceededInitSync            uint32                       `protobuf:"varint,63,opt,name=number_of_succeeded_init_sync,json=numberOfSucceededInitSync,proto3" json:"number_of_succeeded_init_sync,omitempty"`
	NumberOfFailedInitSync               uint32                       `protobuf:"varint,64,opt,name=number_of_failed_init_sync,json=numberOfFailedInitSync,proto3" json:"number_of_failed_init_sync,omitempty"`
	NumberOfHeldPackets                  uint32                       `protobuf:"varint,65,opt,name=number_of_held_packets,json=numberOfHeldPackets,proto3" json:"number_of_held_packets,omitempty"`
	NumberOfHeldButDroppedPackets        uint32                       `protobuf:"varint,66,opt,name=number_of_held_but_dropped_packets,json=numberOfHeldButDroppedPackets,proto3" json:"number_of_held_but_dropped_packets,omitempty"`
	NumberOfHeldInternalAcks             uint32                       `protobuf:"varint,67,opt,name=number_of_held_internal_acks,json=numberOfHeldInternalAcks,proto3" json:"number_of_held_internal_acks,omitempty"`
	NumberOfHeldButDroppedInternalAcks   uint32                       `protobuf:"varint,68,opt,name=number_of_held_but_dropped_internal_acks,json=numberOfHeldButDroppedInternalAcks,proto3" json:"number_of_held_but_dropped_internal_acks,omitempty"`
	NumberOfSentInternalAcks             uint32                       `protobuf:"varint,69,opt,name=number_of_sent_internal_acks,json=numberOfSentInternalAcks,proto3" json:"number_of_sent_internal_acks,omitempty"`
	NumberOfReceivedInternalAcks         uint32                       `protobuf:"varint,70,opt,name=number_of_received_internal_acks,json=numberOfReceivedInternalAcks,proto3" json:"number_of_received_internal_acks,omitempty"`
	NumberOfQadReceiveMessagesDrops      uint32                       `protobuf:"varint,71,opt,name=number_of_qad_receive_messages_drops,json=numberOfQadReceiveMessagesDrops,proto3" json:"number_of_qad_receive_messages_drops,omitempty"`
	NumberOfQadReceiveMessagesUnknowns   uint32                       `protobuf:"varint,72,opt,name=number_of_qad_receive_messages_unknowns,json=numberOfQadReceiveMessagesUnknowns,proto3" json:"number_of_qad_receive_messages_unknowns,omitempty"`
	NumberOfQadReceiveMessagesAccepts    uint32                       `protobuf:"varint,73,opt,name=number_of_qad_receive_messages_accepts,json=numberOfQadReceiveMessagesAccepts,proto3" json:"number_of_qad_receive_messages_accepts,omitempty"`
	NumberOfQadStaleReceiveMessagesDrops uint32                       `protobuf:"varint,74,opt,name=number_of_qad_stale_receive_messages_drops,json=numberOfQadStaleReceiveMessagesDrops,proto3" json:"number_of_qad_stale_receive_messages_drops,omitempty"`
	NumberOfQadTransferMessageSent       uint32                       `protobuf:"varint,75,opt,name=number_of_qad_transfer_message_sent,json=numberOfQadTransferMessageSent,proto3" json:"number_of_qad_transfer_message_sent,omitempty"`
	NumberOfQadTransferMessageDrops      uint32                       `protobuf:"varint,76,opt,name=number_of_qad_transfer_message_drops,json=numberOfQadTransferMessageDrops,proto3" json:"number_of_qad_transfer_message_drops,omitempty"`
	NumberOfInternalAckDropsNoPcb        uint32                       `protobuf:"varint,77,opt,name=number_of_internal_ack_drops_no_pcb,json=numberOfInternalAckDropsNoPcb,proto3" json:"number_of_internal_ack_drops_no_pcb,omitempty"`
	NumberOfInternalAckDropsNoScbdp      uint32                       `protobuf:"varint,78,opt,name=number_of_internal_ack_drops_no_scbdp,json=numberOfInternalAckDropsNoScbdp,proto3" json:"number_of_internal_ack_drops_no_scbdp,omitempty"`
	InternalAckDropsNotReplicated        uint32                       `protobuf:"varint,79,opt,name=internal_ack_drops_not_replicated,json=internalAckDropsNotReplicated,proto3" json:"internal_ack_drops_not_replicated,omitempty"`
	InternalAckDropsInitsyncFirstPhase   uint32                       `protobuf:"varint,80,opt,name=internal_ack_drops_initsync_first_phase,json=internalAckDropsInitsyncFirstPhase,proto3" json:"internal_ack_drops_initsync_first_phase,omitempty"`
	InternalAckDropsStale                uint32                       `protobuf:"varint,81,opt,name=internal_ack_drops_stale,json=internalAckDropsStale,proto3" json:"internal_ack_drops_stale,omitempty"`
	InternalAckDropsImmediateMatch       uint32                       `protobuf:"varint,82,opt,name=internal_ack_drops_immediate_match,json=internalAckDropsImmediateMatch,proto3" json:"internal_ack_drops_immediate_match,omitempty"`
	HeldPacketDrops                      uint32                       `protobuf:"varint,83,opt,name=held_packet_drops,json=heldPacketDrops,proto3" json:"held_packet_drops,omitempty"`
	SndCounters                          *TcpNsrSndCountersAggrNode   `protobuf:"bytes,84,opt,name=snd_counters,json=sndCounters,proto3" json:"snd_counters,omitempty"`
	AuditCounters                        *TcpNsrAuditCountersAggrNode `protobuf:"bytes,85,opt,name=audit_counters,json=auditCounters,proto3" json:"audit_counters,omitempty"`
	XXX_NoUnkeyedLiteral                 struct{}                     `json:"-"`
	XXX_unrecognized                     []byte                       `json:"-"`
	XXX_sizecache                        int32                        `json:"-"`
}

func (m *TcpNsrSummaryStatsBag) Reset()         { *m = TcpNsrSummaryStatsBag{} }
func (m *TcpNsrSummaryStatsBag) String() string { return proto.CompactTextString(m) }
func (*TcpNsrSummaryStatsBag) ProtoMessage()    {}
func (*TcpNsrSummaryStatsBag) Descriptor() ([]byte, []int) {
	return fileDescriptor_a4fb794398297255, []int{8}
}

func (m *TcpNsrSummaryStatsBag) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TcpNsrSummaryStatsBag.Unmarshal(m, b)
}
func (m *TcpNsrSummaryStatsBag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TcpNsrSummaryStatsBag.Marshal(b, m, deterministic)
}
func (m *TcpNsrSummaryStatsBag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TcpNsrSummaryStatsBag.Merge(m, src)
}
func (m *TcpNsrSummaryStatsBag) XXX_Size() int {
	return xxx_messageInfo_TcpNsrSummaryStatsBag.Size(m)
}
func (m *TcpNsrSummaryStatsBag) XXX_DiscardUnknown() {
	xxx_messageInfo_TcpNsrSummaryStatsBag.DiscardUnknown(m)
}

var xxx_messageInfo_TcpNsrSummaryStatsBag proto.InternalMessageInfo

func (m *TcpNsrSummaryStatsBag) GetLastClearedTime() uint32 {
	if m != nil {
		return m.LastClearedTime
	}
	return 0
}

func (m *TcpNsrSummaryStatsBag) GetNotificationStatistic() []*TssNotifStats {
	if m != nil {
		return m.NotificationStatistic
	}
	return nil
}

func (m *TcpNsrSummaryStatsBag) GetNumberOfConnectedClients() uint32 {
	if m != nil {
		return m.NumberOfConnectedClients
	}
	return 0
}

func (m *TcpNsrSummaryStatsBag) GetNumberOfDisconnectedClients() uint32 {
	if m != nil {
		return m.NumberOfDisconnectedClients
	}
	return 0
}

func (m *TcpNsrSummaryStatsBag) GetNumberOfCurrentClients() uint32 {
	if m != nil {
		return m.NumberOfCurrentClients
	}
	return 0
}

func (m *TcpNsrSummaryStatsBag) GetNumberOfCreatedSessionSets() uint32 {
	if m != nil {
		return m.NumberOfCreatedSessionSets
	}
	return 0
}

func (m *TcpNsrSummaryStatsBag) GetNumberOfDestroyedSessionSets() uint32 {
	if m != nil {
		return m.NumberOfDestroyedSessionSets
	}
	return 0
}

func (m *TcpNsrSummaryStatsBag) GetNumberOfCurrentSessionSets() uint32 {
	if m != nil {
		return m.NumberOfCurrentSessionSets
	}
	return 0
}

func (m *TcpNsrSummaryStatsBag) GetNumberOfAddedSessions() uint32 {
	if m != nil {
		return m.NumberOfAddedSessions
	}
	return 0
}

func (m *TcpNsrSummaryStatsBag) GetNumberOfDeletedSessions() uint32 {
	if m != nil {
		return m.NumberOfDeletedSessions
	}
	return 0
}

func (m *TcpNsrSummaryStatsBag) GetNumberOfCurrentSessions() uint32 {
	if m != nil {
		return m.NumberOfCurrentSessions
	}
	return 0
}

func (m *TcpNsrSummaryStatsBag) GetNumberOfPartnerNode() uint32 {
	if m != nil {
		return m.NumberOfPartnerNode
	}
	return 0
}

func (m *TcpNsrSummaryStatsBag) GetNumberOfAttemptedInitSync() uint32 {
	if m != nil {
		return m.NumberOfAttemptedInitSync
	}
	return 0
}

func (m *TcpNsrSummaryStatsBag) GetNumberOfSucceededInitSync() uint32 {
	if m != nil {
		return m.NumberOfSucceededInitSync
	}
	return 0
}

func (m *TcpNsrSummaryStatsBag) GetNumberOfFailedInitSync() uint32 {
	if m != nil {
		return m.NumberOfFailedInitSync
	}
	return 0
}

func (m *TcpNsrSummaryStatsBag) GetNumberOfHeldPackets() uint32 {
	if m != nil {
		return m.NumberOfHeldPackets
	}
	return 0
}

func (m *TcpNsrSummaryStatsBag) GetNumberOfHeldButDroppedPackets() uint32 {
	if m != nil {
		return m.NumberOfHeldButDroppedPackets
	}
	return 0
}

func (m *TcpNsrSummaryStatsBag) GetNumberOfHeldInternalAcks() uint32 {
	if m != nil {
		return m.NumberOfHeldInternalAcks
	}
	return 0
}

func (m *TcpNsrSummaryStatsBag) GetNumberOfHeldButDroppedInternalAcks() uint32 {
	if m != nil {
		return m.NumberOfHeldButDroppedInternalAcks
	}
	return 0
}

func (m *TcpNsrSummaryStatsBag) GetNumberOfSentInternalAcks() uint32 {
	if m != nil {
		return m.NumberOfSentInternalAcks
	}
	return 0
}

func (m *TcpNsrSummaryStatsBag) GetNumberOfReceivedInternalAcks() uint32 {
	if m != nil {
		return m.NumberOfReceivedInternalAcks
	}
	return 0
}

func (m *TcpNsrSummaryStatsBag) GetNumberOfQadReceiveMessagesDrops() uint32 {
	if m != nil {
		return m.NumberOfQadReceiveMessagesDrops
	}
	return 0
}

func (m *TcpNsrSummaryStatsBag) GetNumberOfQadReceiveMessagesUnknowns() uint32 {
	if m != nil {
		return m.NumberOfQadReceiveMessagesUnknowns
	}
	return 0
}

func (m *TcpNsrSummaryStatsBag) GetNumberOfQadReceiveMessagesAccepts() uint32 {
	if m != nil {
		return m.NumberOfQadReceiveMessagesAccepts
	}
	return 0
}

func (m *TcpNsrSummaryStatsBag) GetNumberOfQadStaleReceiveMessagesDrops() uint32 {
	if m != nil {
		return m.NumberOfQadStaleReceiveMessagesDrops
	}
	return 0
}

func (m *TcpNsrSummaryStatsBag) GetNumberOfQadTransferMessageSent() uint32 {
	if m != nil {
		return m.NumberOfQadTransferMessageSent
	}
	return 0
}

func (m *TcpNsrSummaryStatsBag) GetNumberOfQadTransferMessageDrops() uint32 {
	if m != nil {
		return m.NumberOfQadTransferMessageDrops
	}
	return 0
}

func (m *TcpNsrSummaryStatsBag) GetNumberOfInternalAckDropsNoPcb() uint32 {
	if m != nil {
		return m.NumberOfInternalAckDropsNoPcb
	}
	return 0
}

func (m *TcpNsrSummaryStatsBag) GetNumberOfInternalAckDropsNoScbdp() uint32 {
	if m != nil {
		return m.NumberOfInternalAckDropsNoScbdp
	}
	return 0
}

func (m *TcpNsrSummaryStatsBag) GetInternalAckDropsNotReplicated() uint32 {
	if m != nil {
		return m.InternalAckDropsNotReplicated
	}
	return 0
}

func (m *TcpNsrSummaryStatsBag) GetInternalAckDropsInitsyncFirstPhase() uint32 {
	if m != nil {
		return m.InternalAckDropsInitsyncFirstPhase
	}
	return 0
}

func (m *TcpNsrSummaryStatsBag) GetInternalAckDropsStale() uint32 {
	if m != nil {
		return m.InternalAckDropsStale
	}
	return 0
}

func (m *TcpNsrSummaryStatsBag) GetInternalAckDropsImmediateMatch() uint32 {
	if m != nil {
		return m.InternalAckDropsImmediateMatch
	}
	return 0
}

func (m *TcpNsrSummaryStatsBag) GetHeldPacketDrops() uint32 {
	if m != nil {
		return m.HeldPacketDrops
	}
	return 0
}

func (m *TcpNsrSummaryStatsBag) GetSndCounters() *TcpNsrSndCountersAggrNode {
	if m != nil {
		return m.SndCounters
	}
	return nil
}

func (m *TcpNsrSummaryStatsBag) GetAuditCounters() *TcpNsrAuditCountersAggrNode {
	if m != nil {
		return m.AuditCounters
	}
	return nil
}

func init() {
	proto.RegisterType((*TcpNsrSummaryStatsBag_KEYS)(nil), "cisco_ios_xr_ip_tcp_oper.tcp_nsr.nodes.node.statistics.summary.tcp_nsr_summary_stats_bag_KEYS")
	proto.RegisterType((*TssNotifStats)(nil), "cisco_ios_xr_ip_tcp_oper.tcp_nsr.nodes.node.statistics.summary.tss_notif_stats")
	proto.RegisterType((*TcpNsrSndCountersNode)(nil), "cisco_ios_xr_ip_tcp_oper.tcp_nsr.nodes.node.statistics.summary.tcp_nsr_snd_counters_node")
	proto.RegisterType((*TcpNsrSndCountersAggrOnlyNode)(nil), "cisco_ios_xr_ip_tcp_oper.tcp_nsr.nodes.node.statistics.summary.tcp_nsr_snd_counters_aggr_only_node")
	proto.RegisterType((*TcpNsrSndCountersAggrNode)(nil), "cisco_ios_xr_ip_tcp_oper.tcp_nsr.nodes.node.statistics.summary.tcp_nsr_snd_counters_aggr_node")
	proto.RegisterType((*TcpNsrAuditCountersNode)(nil), "cisco_ios_xr_ip_tcp_oper.tcp_nsr.nodes.node.statistics.summary.tcp_nsr_audit_counters_node")
	proto.RegisterType((*TcpNsrAuditCountersAggrOnlyNode)(nil), "cisco_ios_xr_ip_tcp_oper.tcp_nsr.nodes.node.statistics.summary.tcp_nsr_audit_counters_aggr_only_node")
	proto.RegisterType((*TcpNsrAuditCountersAggrNode)(nil), "cisco_ios_xr_ip_tcp_oper.tcp_nsr.nodes.node.statistics.summary.tcp_nsr_audit_counters_aggr_node")
	proto.RegisterType((*TcpNsrSummaryStatsBag)(nil), "cisco_ios_xr_ip_tcp_oper.tcp_nsr.nodes.node.statistics.summary.tcp_nsr_summary_stats_bag")
}

func init() { proto.RegisterFile("tcp_nsr_summary_stats_bag.proto", fileDescriptor_a4fb794398297255) }

var fileDescriptor_a4fb794398297255 = []byte{
	// 2135 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x59, 0xcd, 0x72, 0xdc, 0xc6,
	0x11, 0x2e, 0x52, 0xb6, 0x2c, 0x36, 0xff, 0xc1, 0x3f, 0x2c, 0x29, 0x92, 0xe2, 0x4a, 0xb6, 0x55,
	0xae, 0x0a, 0x1d, 0x4b, 0x8a, 0x65, 0xc9, 0xb2, 0x2c, 0xfe, 0x98, 0x11, 0xa5, 0x88, 0xa4, 0x76,
	0xa9, 0x2a, 0xbb, 0x52, 0x15, 0x04, 0x0b, 0xcc, 0x52, 0x28, 0xed, 0x0e, 0x20, 0xcc, 0x2c, 0x6d,
	0xde, 0x92, 0x1c, 0x92, 0x4b, 0xce, 0x39, 0xe5, 0x9a, 0x27, 0x49, 0x5e, 0x26, 0x4f, 0x90, 0x6b,
	0x6a, 0xba, 0x07, 0xd8, 0x19, 0x60, 0x96, 0x3a, 0xd8, 0xba, 0xa8, 0x6a, 0x31, 0xdf, 0xf7, 0x75,
	0xf7, 0x74, 0x4f, 0x4f, 0x73, 0x04, 0x9b, 0x32, 0xca, 0x02, 0x2e, 0xf2, 0x40, 0x0c, 0xfa, 0xfd,
	0x30, 0xbf, 0x08, 0x84, 0x0c, 0xa5, 0x08, 0x3a, 0xe1, 0xd9, 0x76, 0x96, 0xa7, 0x32, 0xf5, 0x1e,
	0x47, 0x89, 0x88, 0xd2, 0x20, 0x49, 0x45, 0xf0, 0x53, 0x1e, 0x24, 0x59, 0xa0, 0x08, 0x69, 0xc6,
	0xf2, 0x6d, 0xcd, 0xdc, 0xe6, 0x69, 0xcc, 0x04, 0xfe, 0xbb, 0xad, 0xc8, 0x89, 0x90, 0x49, 0x24,
	0xb6, 0xb5, 0x5e, 0xf3, 0xd7, 0xb0, 0x31, 0xd2, 0x44, 0xf0, 0xfc, 0xbb, 0x1f, 0xda, 0xde, 0x0c,
	0x8c, 0x27, 0xb1, 0x3f, 0x76, 0x63, 0xec, 0xf6, 0x44, 0x6b, 0x3c, 0x89, 0x9b, 0xff, 0x1a, 0x83,
	0x59, 0x29, 0x44, 0xc0, 0x53, 0x99, 0x74, 0x09, 0xec, 0x6d, 0xc1, 0xd4, 0xdb, 0x01, 0x1b, 0xb0,
	0x38, 0x88, 0xd2, 0x01, 0x97, 0x88, 0x9e, 0x6e, 0x4d, 0xd2, 0xb7, 0x3d, 0xf5, 0x49, 0x41, 0xba,
	0x61, 0xd2, 0x2b, 0x21, 0xe3, 0x04, 0xa1, 0x6f, 0x04, 0xf9, 0x14, 0x66, 0x63, 0xd6, 0x4b, 0xce,
	0x59, 0x5e, 0xa2, 0xae, 0x20, 0x6a, 0xa6, 0xfc, 0x4c, 0xc0, 0x9b, 0x30, 0x1d, 0xe7, 0x69, 0x96,
	0x95, 0xb0, 0x0f, 0x10, 0x36, 0xa5, 0x3f, 0x22, 0xa8, 0xf9, 0x9f, 0x09, 0x68, 0x94, 0xa1, 0x71,
	0x8d, 0x64, 0xb9, 0x72, 0x3c, 0x66, 0xde, 0x2d, 0x98, 0x89, 0x43, 0x19, 0x06, 0x3f, 0x75, 0x59,
	0x1e, 0x08, 0xc6, 0x63, 0xed, 0xf3, 0x94, 0xfa, 0xfa, 0x7d, 0x97, 0xe5, 0x6d, 0xc6, 0x63, 0xef,
	0x73, 0x58, 0xb4, 0x51, 0x81, 0x4c, 0x65, 0xd8, 0x43, 0xe7, 0x3f, 0x68, 0xcd, 0x9b, 0xd8, 0x53,
	0xb5, 0xe0, 0xfd, 0x0a, 0x16, 0x2a, 0x04, 0xe5, 0x93, 0x0e, 0x63, 0xce, 0xc4, 0xef, 0xe7, 0x69,
	0xe6, 0x7d, 0x09, 0x7e, 0x05, 0x9e, 0xa4, 0xe7, 0x41, 0xd8, 0xeb, 0xa5, 0x91, 0x8e, 0x69, 0xd1,
	0xe4, 0x1c, 0xa6, 0xe7, 0x3b, 0x6a, 0xcd, 0x6b, 0xc2, 0xf4, 0x90, 0x97, 0x47, 0xe7, 0xfe, 0x87,
	0xb4, 0x9b, 0x05, 0xb8, 0x15, 0x9d, 0x7b, 0x5f, 0xc0, 0x92, 0x85, 0x09, 0xc4, 0x20, 0x8a, 0x98,
	0x10, 0xfe, 0x55, 0xc4, 0x7a, 0x06, 0xb6, 0x4d, 0x2b, 0xde, 0x0e, 0x6c, 0xd8, 0x14, 0x95, 0x9d,
	0xa0, 0x33, 0xe8, 0xaa, 0xdf, 0x32, 0x4f, 0xfa, 0xfe, 0x47, 0xc8, 0x6d, 0x18, 0xdc, 0x83, 0x30,
	0xe9, 0xed, 0x22, 0xe2, 0x34, 0x4f, 0xfa, 0xde, 0x11, 0x7c, 0xe2, 0x90, 0x50, 0xfb, 0x3f, 0xe0,
	0x61, 0x90, 0x0e, 0x64, 0x90, 0x76, 0x03, 0x71, 0xc1, 0x23, 0xff, 0x1a, 0x4a, 0x6d, 0x54, 0xa4,
	0xda, 0x3c, 0x7e, 0xc5, 0xc3, 0xe3, 0x81, 0x3c, 0xee, 0xb6, 0x2f, 0x78, 0xa4, 0xf2, 0x24, 0xd8,
	0x59, 0x90, 0x70, 0x21, 0x75, 0x9e, 0x26, 0x28, 0x4f, 0x82, 0x9d, 0x1d, 0xaa, 0x8f, 0x45, 0x9e,
	0x6c, 0x54, 0x30, 0xe0, 0x89, 0x14, 0x3e, 0x20, 0x76, 0xde, 0xc4, 0xbe, 0x52, 0x0b, 0x2a, 0x4f,
	0x15, 0x02, 0xe6, 0x69, 0x92, 0xf2, 0x64, 0xe2, 0x31, 0x4f, 0x4d, 0x98, 0x1e, 0xc2, 0xd5, 0x7e,
	0x4f, 0xd1, 0x7e, 0x17, 0x40, 0xbd, 0xdf, 0x16, 0xa6, 0xdc, 0xef, 0x69, 0xda, 0x6f, 0x03, 0x6b,
	0xec, 0xb7, 0x4d, 0xa9, 0xed, 0xf7, 0x0c, 0xed, 0xb7, 0xc1, 0xad, 0xec, 0xb7, 0x5b, 0x42, 0xd5,
	0x7d, 0x96, 0xa7, 0x68, 0x7e, 0xd6, 0x29, 0x71, 0x1a, 0x65, 0x27, 0x04, 0xf0, 0xd6, 0x60, 0x82,
	0x87, 0xd1, 0x1b, 0xda, 0xdd, 0x39, 0x44, 0x5f, 0x53, 0x1f, 0x70, 0x67, 0x6f, 0xc1, 0x4c, 0xb9,
	0x48, 0x7b, 0x34, 0x4f, 0xfb, 0x5f, 0x20, 0x70, 0x7f, 0x1a, 0x80, 0x0c, 0xdc, 0x1a, 0x0f, 0xd7,
	0x3f, 0x52, 0xbf, 0xd5, 0xb6, 0xdc, 0x86, 0xb9, 0x62, 0xa9, 0xdc, 0x91, 0x05, 0x3a, 0xd5, 0x1a,
	0x52, 0xec, 0xc6, 0x3d, 0x58, 0x29, 0x91, 0x18, 0x05, 0x16, 0x12, 0x7a, 0xb5, 0x88, 0x84, 0x05,
	0x4d, 0x50, 0xfe, 0xef, 0x87, 0x32, 0x44, 0x07, 0xb7, 0x60, 0x2a, 0xea, 0xb1, 0x90, 0x0f, 0x32,
	0x82, 0x2e, 0x51, 0x66, 0xf4, 0x37, 0x84, 0x7c, 0x06, 0xf3, 0x26, 0x84, 0xc2, 0x58, 0x46, 0xdc,
	0xac, 0x81, 0xc3, 0x48, 0x36, 0xa1, 0xa0, 0x62, 0x30, 0x2b, 0x88, 0x02, 0xfd, 0x49, 0xc5, 0xb3,
	0x0d, 0x0b, 0x06, 0xa0, 0x0c, 0xc9, 0xa7, 0x4a, 0x1b, 0x02, 0x8b, 0xa8, 0x1e, 0xc3, 0x75, 0x13,
	0x5f, 0xcb, 0x70, 0x03, 0x89, 0xfe, 0x90, 0x68, 0x27, 0xb8, 0xf9, 0xdf, 0x2b, 0x70, 0xd3, 0xd9,
	0xc6, 0xc2, 0xb3, 0xb3, 0x3c, 0x48, 0x79, 0xef, 0x82, 0x1a, 0xda, 0x7d, 0x68, 0xd8, 0x07, 0x4f,
	0x45, 0x19, 0xf0, 0x34, 0xc8, 0xa2, 0x8e, 0xee, 0x6d, 0x8b, 0xc6, 0x59, 0x53, 0xc1, 0x1e, 0xa5,
	0x27, 0x51, 0xc7, 0x7b, 0x04, 0xd7, 0xdd, 0x44, 0x11, 0x75, 0x82, 0x38, 0xd3, 0x8d, 0x7a, 0xb9,
	0xc6, 0x6d, 0x47, 0x9d, 0xfd, 0x4c, 0x99, 0xb5, 0xeb, 0xcf, 0x34, 0x4b, 0x6d, 0x6f, 0xd1, 0x28,
	0x3d, 0xcb, 0xac, 0x9b, 0xa8, 0xcd, 0x52, 0xfb, 0x5b, 0xae, 0x71, 0xc9, 0xec, 0x36, 0x2c, 0x96,
	0xb5, 0x62, 0x5a, 0xa4, 0x3e, 0x38, 0xa7, 0x0b, 0x65, 0x68, 0xed, 0xae, 0x51, 0x5b, 0x15, 0x43,
	0xba, 0x1d, 0x5a, 0x14, 0x32, 0x72, 0x0f, 0x56, 0xcc, 0xd4, 0x99, 0x76, 0xa8, 0x0f, 0x2e, 0x0c,
	0xb3, 0x36, 0x34, 0xf5, 0x00, 0x56, 0x5d, 0x2c, 0x6d, 0x8d, 0xba, 0xde, 0x52, 0x95, 0x88, 0x06,
	0x9b, 0xff, 0x18, 0x37, 0x6e, 0xe3, 0x5a, 0xae, 0x31, 0xcd, 0x6f, 0xe1, 0x6a, 0x94, 0xf6, 0xfb,
	0x29, 0xc7, 0x9c, 0x4e, 0xde, 0xf9, 0x61, 0xfb, 0xe7, 0x0d, 0x00, 0xdb, 0x23, 0xaf, 0xc8, 0x96,
	0x36, 0xe4, 0xfd, 0x69, 0x0c, 0x26, 0xca, 0x62, 0xc3, 0x72, 0x98, 0xbc, 0x13, 0xbd, 0x17, 0xb3,
	0x76, 0x49, 0xb7, 0xae, 0xa9, 0xdf, 0xc7, 0xbc, 0x77, 0xd1, 0xfc, 0x1f, 0xc0, 0x5a, 0xc1, 0x08,
	0x07, 0x71, 0x22, 0x2b, 0xb7, 0xf9, 0x17, 0xb0, 0xd4, 0x0f, 0x73, 0xd5, 0xa5, 0x84, 0x48, 0x52,
	0x1e, 0x08, 0x26, 0xcd, 0x4b, 0xdd, 0x53, 0x8b, 0x6d, 0x5a, 0x6b, 0x33, 0x89, 0x4d, 0xe1, 0x21,
	0xac, 0x3a, 0x29, 0xd4, 0x1d, 0x74, 0xd1, 0xd7, 0x79, 0xd8, 0x24, 0x3e, 0x87, 0xc5, 0x1a, 0x57,
	0x75, 0x0b, 0xaa, 0xf7, 0x79, 0x9b, 0xa5, 0x9a, 0xc6, 0x57, 0xd0, 0x70, 0x11, 0xc8, 0x16, 0x55,
	0xfa, 0x52, 0x8d, 0x85, 0xa6, 0xb6, 0x60, 0x6a, 0x48, 0xe2, 0x71, 0x71, 0xd1, 0x8b, 0x02, 0x48,
	0xed, 0xcd, 0x84, 0x90, 0x28, 0x55, 0xf5, 0xac, 0x81, 0x2b, 0xda, 0x5b, 0x81, 0x55, 0x0e, 0x53,
	0x19, 0x83, 0xfe, 0xa4, 0xdb, 0xb5, 0x01, 0x20, 0x2d, 0xaa, 0xd9, 0x99, 0x21, 0x0a, 0xa5, 0xee,
	0xc2, 0xb2, 0xf8, 0x91, 0xb1, 0xac, 0xbe, 0xe9, 0x74, 0x43, 0x2f, 0xe0, 0x6a, 0x65, 0xd7, 0x1f,
	0xc1, 0x9a, 0x9b, 0x44, 0x96, 0xe8, 0xbe, 0x5e, 0x71, 0x30, 0xd1, 0xa4, 0xba, 0x62, 0x6b, 0x6c,
	0x15, 0xc7, 0xa4, 0xbe, 0x62, 0x6d, 0x9e, 0x8a, 0xe7, 0x21, 0xac, 0x3a, 0x29, 0x64, 0x6f, 0x4a,
	0x37, 0x99, 0x1a, 0x0f, 0xcd, 0x3d, 0x50, 0xbd, 0xcd, 0x60, 0x31, 0x91, 0xa5, 0x5c, 0x30, 0x0a,
	0x72, 0xba, 0xe8, 0x4f, 0x25, 0x4b, 0x2f, 0x63, 0x9c, 0xbb, 0xea, 0x5a, 0x1e, 0x41, 0x25, 0xd3,
	0x74, 0xb3, 0xaf, 0xba, 0xf9, 0x68, 0xfe, 0x3e, 0xf8, 0x4e, 0x0d, 0x15, 0x30, 0x5d, 0xea, 0x4b,
	0x75, 0xb6, 0x8a, 0xf9, 0x09, 0xac, 0x8f, 0x22, 0x92, 0xed, 0xb9, 0x62, 0x24, 0x70, 0xb0, 0xd1,
	0xb4, 0xab, 0x5e, 0xcb, 0x11, 0x61, 0xde, 0x55, 0xaf, 0x3b, 0x7a, 0x5e, 0xd8, 0x81, 0x8d, 0x91,
	0x4c, 0x32, 0x4e, 0xf3, 0x41, 0xc3, 0x49, 0x2f, 0x86, 0x62, 0xa7, 0x84, 0x8a, 0x9b, 0x26, 0x87,
	0xc5, 0x1a, 0x59, 0x85, 0xfd, 0x2d, 0xac, 0x8f, 0xe2, 0x91, 0x65, 0x9a, 0x22, 0x7c, 0x17, 0x19,
	0x0d, 0xbb, 0x5a, 0xc2, 0x70, 0x32, 0x5a, 0x72, 0xb5, 0x84, 0xa3, 0x62, 0x4e, 0xda, 0x83, 0xcd,
	0xd1, 0x5c, 0x73, 0xe2, 0x58, 0x75, 0x0b, 0x8c, 0xdc, 0xf6, 0x72, 0xae, 0x5a, 0x71, 0x6d, 0xfb,
	0x91, 0x9e, 0xb2, 0x5c, 0xdb, 0x6e, 0x5d, 0x78, 0x7a, 0x40, 0x69, 0x38, 0xe9, 0x68, 0x7c, 0x11,
	0x3e, 0x0c, 0x3b, 0x69, 0x2e, 0xf5, 0x44, 0x42, 0x3f, 0x9a, 0xff, 0xbe, 0x02, 0x1f, 0x8f, 0xe8,
	0xbc, 0x95, 0x01, 0xc4, 0xe5, 0x42, 0x79, 0x01, 0x2a, 0xac, 0x6e, 0xc6, 0x0d, 0x67, 0xa3, 0xdb,
	0x39, 0x3b, 0xcb, 0x69, 0x84, 0xb6, 0x9b, 0x0f, 0x31, 0xc7, 0x8b, 0x11, 0xda, 0xec, 0x40, 0x48,
	0xd9, 0x83, 0xcd, 0xd1, 0xe7, 0x9b, 0xc8, 0x57, 0xf4, 0x49, 0x73, 0x1e, 0x72, 0x14, 0x39, 0x84,
	0xe6, 0xa5, 0x07, 0x86, 0x74, 0xa8, 0x4f, 0xaf, 0x8f, 0x3c, 0x35, 0x28, 0xf5, 0x14, 0x9a, 0x97,
	0x16, 0x21, 0x49, 0x51, 0x17, 0xbf, 0x3e, 0xaa, 0x12, 0x51, 0xe9, 0x19, 0xdc, 0xbc, 0x3c, 0xa5,
	0x24, 0x45, 0x8d, 0x7e, 0x7d, 0x64, 0x5e, 0x95, 0x56, 0xf3, 0x9f, 0xe3, 0x70, 0xe3, 0xb2, 0x2c,
	0x62, 0x02, 0x45, 0x65, 0xb4, 0xf8, 0xfd, 0x2f, 0x75, 0xc7, 0x3b, 0x6e, 0xec, 0x72, 0xb8, 0xf8,
	0x8b, 0x63, 0xb8, 0x60, 0xef, 0xc9, 0xf0, 0xc8, 0xf1, 0xe2, 0xef, 0x4b, 0xc6, 0x53, 0x41, 0xf5,
	0x15, 0x44, 0xdd, 0xaf, 0xbd, 0x50, 0xc8, 0x40, 0xcd, 0x6c, 0x39, 0x8b, 0x03, 0x99, 0xf4, 0x99,
	0x7f, 0x87, 0xee, 0x57, 0xb5, 0xb0, 0x47, 0xdf, 0x4f, 0x93, 0x3e, 0xf3, 0xfe, 0x3a, 0x06, 0xcb,
	0xf8, 0x30, 0x92, 0x44, 0xa1, 0xc4, 0xac, 0x15, 0xde, 0xf9, 0x77, 0x6f, 0x5c, 0xb9, 0x3d, 0x79,
	0xe7, 0xf8, 0x67, 0xc7, 0x66, 0x3f, 0xbd, 0xb4, 0x96, 0x4c, 0x73, 0xed, 0x02, 0xef, 0x7d, 0x03,
	0x6b, 0x7c, 0xd0, 0xef, 0xb0, 0x5c, 0xfd, 0xbd, 0x1d, 0xa5, 0x9c, 0xb3, 0x48, 0xb2, 0x38, 0x88,
	0x7a, 0x09, 0xe3, 0x52, 0xf8, 0xf7, 0xa8, 0x15, 0x12, 0xe4, 0xb8, 0xbb, 0x57, 0x00, 0xf6, 0x68,
	0xdd, 0xdb, 0x83, 0x8d, 0x21, 0x3d, 0x56, 0x1e, 0x57, 0x15, 0x7e, 0x83, 0x0a, 0x6b, 0x85, 0xc2,
	0xbe, 0x81, 0x29, 0x44, 0x1e, 0x40, 0xc3, 0xf0, 0x61, 0x90, 0xe7, 0x8c, 0xcb, 0x92, 0xff, 0x25,
	0xb5, 0xd3, 0xd2, 0x03, 0x5a, 0x2e, 0xa8, 0xbb, 0xa6, 0xfd, 0x28, 0x67, 0xa1, 0x32, 0x6d, 0x9c,
	0x04, 0xe1, 0xdf, 0xa7, 0x53, 0x5d, 0xf2, 0x09, 0x33, 0x3c, 0x02, 0xc2, 0x3b, 0x80, 0x1b, 0x46,
	0x0c, 0x4c, 0xc8, 0x3c, 0xbd, 0xa8, 0xaa, 0x7c, 0x45, 0x07, 0xb1, 0x8c, 0xa2, 0x40, 0x99, 0x3a,
	0xb6, 0x2f, 0x3a, 0x0c, 0x4b, 0xe5, 0x41, 0xc5, 0x17, 0xc2, 0x98, 0x1a, 0xf7, 0xc1, 0x1f, 0x6a,
	0x84, 0x71, 0x3c, 0xf4, 0x43, 0xf8, 0x0f, 0xa9, 0xb1, 0x17, 0xec, 0x1d, 0xb5, 0xaa, 0xb9, 0xc2,
	0xfb, 0x1a, 0x56, 0xcd, 0x20, 0x7a, 0x4c, 0x9a, 0xd4, 0xaf, 0x69, 0x5e, 0x1a, 0xba, 0x8f, 0xeb,
	0x6e, 0x72, 0xc5, 0x73, 0xe1, 0x3f, 0xb2, 0xc9, 0xb6, 0xd7, 0x42, 0xcd, 0x77, 0x43, 0x72, 0x16,
	0xe6, 0x92, 0x33, 0x6a, 0x14, 0xfe, 0x37, 0xfa, 0xaf, 0x71, 0x4d, 0x3c, 0xa1, 0xb5, 0x23, 0xd5,
	0x43, 0x9e, 0xc0, 0xba, 0x11, 0xa7, 0x94, 0xac, 0x9f, 0x29, 0x87, 0x13, 0x9e, 0x48, 0x7a, 0xf5,
	0x79, 0x4c, 0x77, 0x40, 0x19, 0x6c, 0x01, 0x39, 0xe4, 0x89, 0xc4, 0x07, 0x1f, 0x4b, 0x01, 0xff,
	0xba, 0x66, 0xb1, 0xa5, 0xf0, 0xad, 0xad, 0xd0, 0x2e, 0x20, 0xa5, 0xc2, 0x43, 0x33, 0x6a, 0xfd,
	0xe6, 0x38, 0xa4, 0x3f, 0xb1, 0xeb, 0xee, 0x00, 0xd7, 0x4b, 0xae, 0x15, 0xf4, 0x6b, 0xd6, 0x8b,
	0x83, 0x2c, 0x8c, 0xde, 0xa8, 0x1c, 0xef, 0xd8, 0x41, 0x3f, 0x65, 0xbd, 0xf8, 0x84, 0x96, 0xd4,
	0xf5, 0x51, 0x21, 0x75, 0x06, 0x32, 0x28, 0x5e, 0x28, 0x0b, 0x81, 0x5d, 0x6a, 0xd4, 0xa6, 0xc0,
	0xee, 0x40, 0xee, 0x13, 0xaa, 0x90, 0x7a, 0x0c, 0xd7, 0x2b, 0x52, 0x89, 0xea, 0x5d, 0x3c, 0xec,
	0xa9, 0x5b, 0x44, 0xf8, 0x7b, 0xf6, 0xb9, 0x55, 0x22, 0x87, 0x1a, 0xb0, 0x13, 0xbd, 0x11, 0xde,
	0x29, 0xdc, 0xbe, 0xc4, 0x15, 0x5b, 0x6b, 0x1f, 0xb5, 0x9a, 0x6e, 0x87, 0x2c, 0x55, 0xcb, 0x2b,
	0xa1, 0x8a, 0xc8, 0x56, 0xfa, 0xce, 0xf6, 0xaa, 0xcd, 0xb8, 0xb4, 0xf8, 0xd6, 0x49, 0xcc, 0x59,
	0xc4, 0x92, 0xf3, 0x9a, 0x37, 0x07, 0xf6, 0x49, 0x6c, 0x69, 0x94, 0xa5, 0xf3, 0x02, 0x6e, 0x0d,
	0x75, 0xde, 0x86, 0x71, 0xa1, 0x15, 0xf4, 0x99, 0x10, 0xe1, 0x19, 0x13, 0x18, 0xa9, 0xf0, 0x7f,
	0x8b, 0x5a, 0x9b, 0x85, 0xd6, 0xcb, 0x30, 0xd6, 0x72, 0x2f, 0x34, 0x4e, 0x05, 0x29, 0xbc, 0x36,
	0x7c, 0xfa, 0x0e, 0xb9, 0x01, 0x7f, 0xc3, 0xd3, 0x1f, 0xb9, 0xf0, 0x9f, 0xda, 0x7b, 0x55, 0x57,
	0x7c, 0xa5, 0x91, 0xde, 0x4b, 0xf8, 0xe4, 0x1d, 0xa2, 0x61, 0x14, 0xb1, 0x4c, 0x0a, 0xff, 0x10,
	0x35, 0xb7, 0x46, 0x6b, 0xee, 0x10, 0xd0, 0xfb, 0x1e, 0x3e, 0xb3, 0x25, 0x85, 0x0c, 0x7b, 0x6c,
	0x54, 0xf0, 0xcf, 0x50, 0xf6, 0x96, 0x21, 0xdb, 0x56, 0x70, 0xe7, 0x0e, 0x3c, 0x87, 0x9b, 0xb6,
	0xb2, 0xcc, 0x43, 0x2e, 0xba, 0x2c, 0x2f, 0x44, 0x31, 0xdb, 0xfe, 0x73, 0x7a, 0xaa, 0x35, 0x24,
	0x4f, 0x35, 0x4e, 0xcb, 0xa9, 0x8c, 0xd7, 0xb3, 0x53, 0x13, 0x23, 0x07, 0x7f, 0x57, 0xcb, 0x4e,
	0x45, 0x8d, 0x7c, 0x7b, 0x66, 0xfa, 0x66, 0xd6, 0x0a, 0xc9, 0x14, 0x2f, 0x31, 0x2f, 0xec, 0x63,
	0x65, 0xd4, 0x0b, 0xca, 0xd0, 0x9b, 0xcc, 0x11, 0x7c, 0xfc, 0x2e, 0x2d, 0x11, 0x75, 0xe2, 0xcc,
	0x3f, 0xb2, 0x7d, 0xab, 0xab, 0xb5, 0x15, 0xcc, 0x7b, 0x0a, 0x5b, 0x4e, 0x15, 0x35, 0x3b, 0x66,
	0x3d, 0x75, 0x19, 0xb3, 0xd8, 0x3f, 0x26, 0xcf, 0x92, 0x9a, 0x86, 0x6c, 0x95, 0x20, 0x55, 0x83,
	0x0e, 0x25, 0xd5, 0xae, 0x54, 0xb7, 0x0a, 0xba, 0x49, 0x2e, 0x64, 0x90, 0xbd, 0x0e, 0x05, 0xf3,
	0x4f, 0xa8, 0x06, 0xab, 0x7a, 0x87, 0x1a, 0x7b, 0xa0, 0xa0, 0x27, 0x0a, 0xa9, 0x6e, 0x1b, 0x87,
	0x28, 0x56, 0x8d, 0xff, 0x92, 0x6e, 0x9b, 0xaa, 0x0a, 0xd6, 0x88, 0xf7, 0x0c, 0x9a, 0x2e, 0x6f,
	0xfa, 0x7d, 0x16, 0x27, 0xa1, 0x64, 0x41, 0x3f, 0x94, 0xd1, 0x6b, 0xbf, 0x45, 0xe5, 0x50, 0x73,
	0xa4, 0x80, 0xbd, 0x50, 0x28, 0x35, 0x36, 0x19, 0x0d, 0x54, 0xe7, 0xbe, 0x4d, 0x63, 0xd3, 0xeb,
	0xb2, 0x7b, 0x52, 0xae, 0xff, 0x3c, 0x06, 0x53, 0xe6, 0x4b, 0x90, 0x7f, 0x8a, 0x83, 0xe0, 0x1f,
	0xde, 0xdf, 0x2b, 0x13, 0x4e, 0x80, 0x93, 0x82, 0xd3, 0x7f, 0x16, 0xb1, 0x5c, 0x78, 0x7f, 0x1b,
	0x83, 0x19, 0x7b, 0x60, 0xf4, 0x5f, 0xa1, 0x17, 0x7f, 0x7c, 0x9f, 0xe3, 0x28, 0xfa, 0x31, 0x8d,
	0x2b, 0x85, 0x27, 0x9d, 0xab, 0xf8, 0x5f, 0x7b, 0x77, 0xff, 0x1f, 0x00, 0x00, 0xff, 0xff, 0xf6,
	0xb4, 0x45, 0x3d, 0xfd, 0x1b, 0x00, 0x00,
}
