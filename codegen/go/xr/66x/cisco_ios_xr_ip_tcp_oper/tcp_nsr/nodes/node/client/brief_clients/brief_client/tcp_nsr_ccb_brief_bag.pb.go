/*
Copyright 2019 Cisco Systems

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: tcp_nsr_ccb_brief_bag.proto

package cisco_ios_xr_ip_tcp_oper_tcp_nsr_nodes_node_client_brief_clients_brief_client

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type TcpNsrCcbBriefBag_KEYS struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Id_1                 string   `protobuf:"bytes,2,opt,name=id_1,json=id1,proto3" json:"id_1,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TcpNsrCcbBriefBag_KEYS) Reset()         { *m = TcpNsrCcbBriefBag_KEYS{} }
func (m *TcpNsrCcbBriefBag_KEYS) String() string { return proto.CompactTextString(m) }
func (*TcpNsrCcbBriefBag_KEYS) ProtoMessage()    {}
func (*TcpNsrCcbBriefBag_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_17451b139c0e145a, []int{0}
}

func (m *TcpNsrCcbBriefBag_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TcpNsrCcbBriefBag_KEYS.Unmarshal(m, b)
}
func (m *TcpNsrCcbBriefBag_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TcpNsrCcbBriefBag_KEYS.Marshal(b, m, deterministic)
}
func (m *TcpNsrCcbBriefBag_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TcpNsrCcbBriefBag_KEYS.Merge(m, src)
}
func (m *TcpNsrCcbBriefBag_KEYS) XXX_Size() int {
	return xxx_messageInfo_TcpNsrCcbBriefBag_KEYS.Size(m)
}
func (m *TcpNsrCcbBriefBag_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_TcpNsrCcbBriefBag_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_TcpNsrCcbBriefBag_KEYS proto.InternalMessageInfo

func (m *TcpNsrCcbBriefBag_KEYS) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *TcpNsrCcbBriefBag_KEYS) GetId_1() string {
	if m != nil {
		return m.Id_1
	}
	return ""
}

type TcpNsrCcbBriefBag struct {
	Ccb                  uint64   `protobuf:"varint,50,opt,name=ccb,proto3" json:"ccb,omitempty"`
	Pid                  uint32   `protobuf:"varint,51,opt,name=pid,proto3" json:"pid,omitempty"`
	ProcessName          []string `protobuf:"bytes,52,rep,name=process_name,json=processName,proto3" json:"process_name,omitempty"`
	JobId                int32    `protobuf:"zigzag32,53,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	Instance             uint32   `protobuf:"varint,54,opt,name=instance,proto3" json:"instance,omitempty"`
	NumberofSets         uint32   `protobuf:"varint,55,opt,name=numberof_sets,json=numberofSets,proto3" json:"numberof_sets,omitempty"`
	NumberOfSessions     uint32   `protobuf:"varint,56,opt,name=number_of_sessions,json=numberOfSessions,proto3" json:"number_of_sessions,omitempty"`
	NumberOfUpSessions   uint32   `protobuf:"varint,57,opt,name=number_of_up_sessions,json=numberOfUpSessions,proto3" json:"number_of_up_sessions,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TcpNsrCcbBriefBag) Reset()         { *m = TcpNsrCcbBriefBag{} }
func (m *TcpNsrCcbBriefBag) String() string { return proto.CompactTextString(m) }
func (*TcpNsrCcbBriefBag) ProtoMessage()    {}
func (*TcpNsrCcbBriefBag) Descriptor() ([]byte, []int) {
	return fileDescriptor_17451b139c0e145a, []int{1}
}

func (m *TcpNsrCcbBriefBag) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TcpNsrCcbBriefBag.Unmarshal(m, b)
}
func (m *TcpNsrCcbBriefBag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TcpNsrCcbBriefBag.Marshal(b, m, deterministic)
}
func (m *TcpNsrCcbBriefBag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TcpNsrCcbBriefBag.Merge(m, src)
}
func (m *TcpNsrCcbBriefBag) XXX_Size() int {
	return xxx_messageInfo_TcpNsrCcbBriefBag.Size(m)
}
func (m *TcpNsrCcbBriefBag) XXX_DiscardUnknown() {
	xxx_messageInfo_TcpNsrCcbBriefBag.DiscardUnknown(m)
}

var xxx_messageInfo_TcpNsrCcbBriefBag proto.InternalMessageInfo

func (m *TcpNsrCcbBriefBag) GetCcb() uint64 {
	if m != nil {
		return m.Ccb
	}
	return 0
}

func (m *TcpNsrCcbBriefBag) GetPid() uint32 {
	if m != nil {
		return m.Pid
	}
	return 0
}

func (m *TcpNsrCcbBriefBag) GetProcessName() []string {
	if m != nil {
		return m.ProcessName
	}
	return nil
}

func (m *TcpNsrCcbBriefBag) GetJobId() int32 {
	if m != nil {
		return m.JobId
	}
	return 0
}

func (m *TcpNsrCcbBriefBag) GetInstance() uint32 {
	if m != nil {
		return m.Instance
	}
	return 0
}

func (m *TcpNsrCcbBriefBag) GetNumberofSets() uint32 {
	if m != nil {
		return m.NumberofSets
	}
	return 0
}

func (m *TcpNsrCcbBriefBag) GetNumberOfSessions() uint32 {
	if m != nil {
		return m.NumberOfSessions
	}
	return 0
}

func (m *TcpNsrCcbBriefBag) GetNumberOfUpSessions() uint32 {
	if m != nil {
		return m.NumberOfUpSessions
	}
	return 0
}

func init() {
	proto.RegisterType((*TcpNsrCcbBriefBag_KEYS)(nil), "cisco_ios_xr_ip_tcp_oper.tcp_nsr.nodes.node.client.brief_clients.brief_client.tcp_nsr_ccb_brief_bag_KEYS")
	proto.RegisterType((*TcpNsrCcbBriefBag)(nil), "cisco_ios_xr_ip_tcp_oper.tcp_nsr.nodes.node.client.brief_clients.brief_client.tcp_nsr_ccb_brief_bag")
}

func init() { proto.RegisterFile("tcp_nsr_ccb_brief_bag.proto", fileDescriptor_17451b139c0e145a) }

var fileDescriptor_17451b139c0e145a = []byte{
	// 311 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x91, 0x4d, 0x6b, 0x2a, 0x31,
	0x14, 0x86, 0x99, 0xd1, 0x2b, 0xd7, 0x5c, 0xbd, 0x68, 0x40, 0x08, 0xde, 0xcd, 0x5c, 0xbb, 0x99,
	0x45, 0x19, 0xb0, 0xf6, 0x73, 0xd5, 0x55, 0x17, 0xa5, 0xb4, 0x85, 0x91, 0x2e, 0xba, 0x3a, 0x4c,
	0x3e, 0x2c, 0x47, 0x6a, 0x12, 0x72, 0x46, 0xe8, 0x3f, 0xe9, 0xdf, 0x2d, 0x93, 0xd1, 0x4a, 0xc1,
	0x4d, 0x38, 0xef, 0x9b, 0xe7, 0x39, 0x59, 0x84, 0xfd, 0xab, 0x95, 0x07, 0x4b, 0x01, 0x94, 0x92,
	0x20, 0x03, 0x9a, 0x15, 0xc8, 0xea, 0xad, 0xf0, 0xc1, 0xd5, 0x8e, 0x3f, 0x2a, 0x24, 0xe5, 0x00,
	0x1d, 0xc1, 0x47, 0x00, 0xf4, 0xd0, 0xc0, 0xce, 0x9b, 0x50, 0xec, 0xac, 0xc2, 0x3a, 0x6d, 0x28,
	0x9e, 0x85, 0x7a, 0x47, 0x63, 0xeb, 0xa2, 0xdd, 0xd1, 0x06, 0xfa, 0x91, 0x66, 0xb7, 0x6c, 0x7a,
	0xf4, 0x35, 0x78, 0xb8, 0x7b, 0x5d, 0xf2, 0xbf, 0x2c, 0x45, 0x2d, 0x92, 0x2c, 0xc9, 0xfb, 0x65,
	0x8a, 0x9a, 0x8f, 0x59, 0x17, 0x35, 0xcc, 0x45, 0x1a, 0x9b, 0x0e, 0xea, 0xf9, 0xec, 0x33, 0x65,
	0x93, 0xa3, 0x1b, 0xf8, 0x88, 0x75, 0x94, 0x92, 0xe2, 0x2c, 0x4b, 0xf2, 0x6e, 0xd9, 0x8c, 0x4d,
	0xe3, 0x51, 0x8b, 0x45, 0x96, 0xe4, 0xc3, 0xb2, 0x19, 0xf9, 0x7f, 0x36, 0xf0, 0xc1, 0x29, 0x43,
	0x04, 0xb6, 0xda, 0x18, 0x71, 0x9e, 0x75, 0xf2, 0x7e, 0xf9, 0x67, 0xd7, 0x3d, 0x55, 0x1b, 0xc3,
	0x27, 0xac, 0xb7, 0x76, 0x12, 0x50, 0x8b, 0x8b, 0x2c, 0xc9, 0xc7, 0xe5, 0xaf, 0xb5, 0x93, 0xf7,
	0x9a, 0x4f, 0xd9, 0x6f, 0xb4, 0x54, 0x57, 0x56, 0x19, 0x71, 0x19, 0x17, 0x7e, 0x67, 0x7e, 0xc2,
	0x86, 0x76, 0xbb, 0x91, 0x26, 0xb8, 0x15, 0x90, 0xa9, 0x49, 0x5c, 0x45, 0x60, 0xb0, 0x2f, 0x97,
	0xa6, 0x26, 0x7e, 0xca, 0x78, 0x9b, 0x21, 0x52, 0x44, 0xe8, 0x2c, 0x89, 0xeb, 0x48, 0x8e, 0xda,
	0x9b, 0xe7, 0xd5, 0x72, 0xd7, 0xf3, 0x39, 0x9b, 0x1c, 0xe8, 0xad, 0x3f, 0x08, 0x37, 0x51, 0xe0,
	0x7b, 0xe1, 0xc5, 0xef, 0x15, 0xd9, 0x8b, 0x1f, 0xb6, 0xf8, 0x0a, 0x00, 0x00, 0xff, 0xff, 0xd0,
	0xb0, 0x1b, 0xfa, 0xcf, 0x01, 0x00, 0x00,
}
