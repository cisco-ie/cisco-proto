/*
Copyright 2019 Cisco Systems

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ipsla_lpd_path_stats_bag.proto

package cisco_ios_xr_man_ipsla_oper_ipsla_operation_data_operations_operation_statistics_aggregated_hours_hour_non_distributed_lpd_paths_lpd_path

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type IpslaLpdPathStatsBag_KEYS struct {
	OperationId          uint32   `protobuf:"varint,1,opt,name=operation_id,json=operationId,proto3" json:"operation_id,omitempty"`
	HourIndex            uint32   `protobuf:"varint,2,opt,name=hour_index,json=hourIndex,proto3" json:"hour_index,omitempty"`
	PathIndex            uint32   `protobuf:"varint,3,opt,name=path_index,json=pathIndex,proto3" json:"path_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IpslaLpdPathStatsBag_KEYS) Reset()         { *m = IpslaLpdPathStatsBag_KEYS{} }
func (m *IpslaLpdPathStatsBag_KEYS) String() string { return proto.CompactTextString(m) }
func (*IpslaLpdPathStatsBag_KEYS) ProtoMessage()    {}
func (*IpslaLpdPathStatsBag_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_512bd9dcc9e794c2, []int{0}
}

func (m *IpslaLpdPathStatsBag_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IpslaLpdPathStatsBag_KEYS.Unmarshal(m, b)
}
func (m *IpslaLpdPathStatsBag_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IpslaLpdPathStatsBag_KEYS.Marshal(b, m, deterministic)
}
func (m *IpslaLpdPathStatsBag_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IpslaLpdPathStatsBag_KEYS.Merge(m, src)
}
func (m *IpslaLpdPathStatsBag_KEYS) XXX_Size() int {
	return xxx_messageInfo_IpslaLpdPathStatsBag_KEYS.Size(m)
}
func (m *IpslaLpdPathStatsBag_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_IpslaLpdPathStatsBag_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_IpslaLpdPathStatsBag_KEYS proto.InternalMessageInfo

func (m *IpslaLpdPathStatsBag_KEYS) GetOperationId() uint32 {
	if m != nil {
		return m.OperationId
	}
	return 0
}

func (m *IpslaLpdPathStatsBag_KEYS) GetHourIndex() uint32 {
	if m != nil {
		return m.HourIndex
	}
	return 0
}

func (m *IpslaLpdPathStatsBag_KEYS) GetPathIndex() uint32 {
	if m != nil {
		return m.PathIndex
	}
	return 0
}

type IpslaLpdPathIdBag struct {
	LspSelector          string   `protobuf:"bytes,1,opt,name=lsp_selector,json=lspSelector,proto3" json:"lsp_selector,omitempty"`
	OutputInterface      string   `protobuf:"bytes,2,opt,name=output_interface,json=outputInterface,proto3" json:"output_interface,omitempty"`
	NexthopAddress       string   `protobuf:"bytes,3,opt,name=nexthop_address,json=nexthopAddress,proto3" json:"nexthop_address,omitempty"`
	DownstreamLabel      []uint32 `protobuf:"varint,4,rep,packed,name=downstream_label,json=downstreamLabel,proto3" json:"downstream_label,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IpslaLpdPathIdBag) Reset()         { *m = IpslaLpdPathIdBag{} }
func (m *IpslaLpdPathIdBag) String() string { return proto.CompactTextString(m) }
func (*IpslaLpdPathIdBag) ProtoMessage()    {}
func (*IpslaLpdPathIdBag) Descriptor() ([]byte, []int) {
	return fileDescriptor_512bd9dcc9e794c2, []int{1}
}

func (m *IpslaLpdPathIdBag) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IpslaLpdPathIdBag.Unmarshal(m, b)
}
func (m *IpslaLpdPathIdBag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IpslaLpdPathIdBag.Marshal(b, m, deterministic)
}
func (m *IpslaLpdPathIdBag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IpslaLpdPathIdBag.Merge(m, src)
}
func (m *IpslaLpdPathIdBag) XXX_Size() int {
	return xxx_messageInfo_IpslaLpdPathIdBag.Size(m)
}
func (m *IpslaLpdPathIdBag) XXX_DiscardUnknown() {
	xxx_messageInfo_IpslaLpdPathIdBag.DiscardUnknown(m)
}

var xxx_messageInfo_IpslaLpdPathIdBag proto.InternalMessageInfo

func (m *IpslaLpdPathIdBag) GetLspSelector() string {
	if m != nil {
		return m.LspSelector
	}
	return ""
}

func (m *IpslaLpdPathIdBag) GetOutputInterface() string {
	if m != nil {
		return m.OutputInterface
	}
	return ""
}

func (m *IpslaLpdPathIdBag) GetNexthopAddress() string {
	if m != nil {
		return m.NexthopAddress
	}
	return ""
}

func (m *IpslaLpdPathIdBag) GetDownstreamLabel() []uint32 {
	if m != nil {
		return m.DownstreamLabel
	}
	return nil
}

type IpslaLpdPathStatsBag struct {
	PathId               *IpslaLpdPathIdBag `protobuf:"bytes,50,opt,name=path_id,json=pathId,proto3" json:"path_id,omitempty"`
	ReturnCode           string             `protobuf:"bytes,51,opt,name=return_code,json=returnCode,proto3" json:"return_code,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *IpslaLpdPathStatsBag) Reset()         { *m = IpslaLpdPathStatsBag{} }
func (m *IpslaLpdPathStatsBag) String() string { return proto.CompactTextString(m) }
func (*IpslaLpdPathStatsBag) ProtoMessage()    {}
func (*IpslaLpdPathStatsBag) Descriptor() ([]byte, []int) {
	return fileDescriptor_512bd9dcc9e794c2, []int{2}
}

func (m *IpslaLpdPathStatsBag) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IpslaLpdPathStatsBag.Unmarshal(m, b)
}
func (m *IpslaLpdPathStatsBag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IpslaLpdPathStatsBag.Marshal(b, m, deterministic)
}
func (m *IpslaLpdPathStatsBag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IpslaLpdPathStatsBag.Merge(m, src)
}
func (m *IpslaLpdPathStatsBag) XXX_Size() int {
	return xxx_messageInfo_IpslaLpdPathStatsBag.Size(m)
}
func (m *IpslaLpdPathStatsBag) XXX_DiscardUnknown() {
	xxx_messageInfo_IpslaLpdPathStatsBag.DiscardUnknown(m)
}

var xxx_messageInfo_IpslaLpdPathStatsBag proto.InternalMessageInfo

func (m *IpslaLpdPathStatsBag) GetPathId() *IpslaLpdPathIdBag {
	if m != nil {
		return m.PathId
	}
	return nil
}

func (m *IpslaLpdPathStatsBag) GetReturnCode() string {
	if m != nil {
		return m.ReturnCode
	}
	return ""
}

func init() {
	proto.RegisterType((*IpslaLpdPathStatsBag_KEYS)(nil), "cisco_ios_xr_man_ipsla_oper.ipsla.operation_data.operations.operation.statistics.aggregated.hours.hour.non_distributed.lpd_paths.lpd_path.ipsla_lpd_path_stats_bag_KEYS")
	proto.RegisterType((*IpslaLpdPathIdBag)(nil), "cisco_ios_xr_man_ipsla_oper.ipsla.operation_data.operations.operation.statistics.aggregated.hours.hour.non_distributed.lpd_paths.lpd_path.ipsla_lpd_path_id_bag")
	proto.RegisterType((*IpslaLpdPathStatsBag)(nil), "cisco_ios_xr_man_ipsla_oper.ipsla.operation_data.operations.operation.statistics.aggregated.hours.hour.non_distributed.lpd_paths.lpd_path.ipsla_lpd_path_stats_bag")
}

func init() { proto.RegisterFile("ipsla_lpd_path_stats_bag.proto", fileDescriptor_512bd9dcc9e794c2) }

var fileDescriptor_512bd9dcc9e794c2 = []byte{
	// 375 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x92, 0xcf, 0x8e, 0xd3, 0x30,
	0x10, 0xc6, 0x65, 0x8a, 0x8a, 0xe2, 0x50, 0x8a, 0x22, 0x21, 0xe5, 0x52, 0x28, 0xbd, 0x50, 0x2e,
	0x3e, 0xb4, 0x4f, 0x80, 0x10, 0x87, 0x0a, 0x4e, 0xe9, 0x89, 0xd3, 0xc8, 0x89, 0x4d, 0x6a, 0x29,
	0xb5, 0x2d, 0xcf, 0x44, 0xf4, 0xc8, 0x95, 0xb7, 0xd8, 0xd7, 0xd8, 0x7d, 0xb2, 0x3d, 0xae, 0xec,
	0xf4, 0xcf, 0x6a, 0xb5, 0xbd, 0xef, 0x25, 0x9a, 0xfc, 0xbe, 0x78, 0xbe, 0x2f, 0x33, 0xe6, 0x1f,
	0x8d, 0xc7, 0x4e, 0x42, 0xe7, 0x15, 0x78, 0x49, 0x3b, 0x40, 0x92, 0x84, 0x50, 0xcb, 0x56, 0xf8,
	0xe0, 0xc8, 0x15, 0xff, 0x59, 0x63, 0xb0, 0x71, 0x60, 0x1c, 0xc2, 0x21, 0xc0, 0x5e, 0x5a, 0x18,
	0x4e, 0x38, 0xaf, 0x83, 0x48, 0xa5, 0x88, 0xa5, 0x24, 0xe3, 0x2c, 0x28, 0x49, 0x8f, 0x5e, 0xf1,
	0x52, 0x8a, 0xd8, 0xd7, 0x20, 0x99, 0x06, 0x85, 0x6c, 0xdb, 0xa0, 0x5b, 0x49, 0x5a, 0x89, 0x9d,
	0xeb, 0x03, 0xa6, 0xa7, 0xb0, 0xf1, 0xb8, 0x41, 0x0a, 0xa6, 0xee, 0xa3, 0x74, 0x4a, 0x84, 0xe7,
	0x6a, 0xf1, 0x8f, 0xf1, 0xd9, 0xb5, 0xb8, 0xf0, 0xf3, 0xc7, 0xef, 0x6d, 0xf1, 0x99, 0xbf, 0xbd,
	0x84, 0x31, 0xaa, 0x64, 0x73, 0xb6, 0x9c, 0x54, 0xf9, 0x99, 0x6d, 0x54, 0x31, 0xe3, 0x3c, 0xfa,
	0x81, 0xb1, 0x4a, 0x1f, 0xca, 0x57, 0xe9, 0x83, 0x2c, 0x92, 0x4d, 0x04, 0x51, 0x4e, 0x8d, 0x07,
	0x79, 0x34, 0xc8, 0x91, 0x24, 0x79, 0x71, 0xcb, 0xf8, 0x87, 0x27, 0x11, 0x8c, 0x8a, 0xfe, 0xd1,
	0xba, 0x43, 0x0f, 0xa8, 0x3b, 0xdd, 0x90, 0x0b, 0xc9, 0x3a, 0xab, 0xf2, 0x0e, 0xfd, 0xf6, 0x88,
	0x8a, 0xaf, 0xfc, 0xbd, 0xeb, 0xc9, 0xf7, 0x04, 0xc6, 0x92, 0x0e, 0x7f, 0x64, 0xa3, 0x53, 0x80,
	0xac, 0x9a, 0x0e, 0x7c, 0x73, 0xc2, 0xc5, 0x17, 0x3e, 0xb5, 0xfa, 0x40, 0x3b, 0xe7, 0x41, 0x2a,
	0x15, 0x34, 0x62, 0xca, 0x92, 0x55, 0xef, 0x8e, 0xf8, 0xdb, 0x40, 0x63, 0x4f, 0xe5, 0xfe, 0x5a,
	0xa4, 0xa0, 0xe5, 0x1e, 0x3a, 0x59, 0xeb, 0xae, 0x7c, 0x3d, 0x1f, 0x2d, 0x27, 0xd5, 0xf4, 0xc2,
	0x7f, 0x45, 0xbc, 0xb8, 0x67, 0xbc, 0xbc, 0x36, 0xbe, 0xe2, 0x8e, 0xf1, 0x37, 0xc7, 0xdf, 0x29,
	0x57, 0x73, 0xb6, 0xcc, 0x57, 0x37, 0x4c, 0xbc, 0x98, 0xd5, 0x8b, 0x67, 0x67, 0x5e, 0x8d, 0xd3,
	0x62, 0x54, 0xf1, 0x89, 0xe7, 0x41, 0x53, 0x1f, 0x2c, 0x34, 0x4e, 0xe9, 0x72, 0x9d, 0x26, 0xc5,
	0x07, 0xf4, 0xdd, 0x29, 0x5d, 0x8f, 0xd3, 0x65, 0x5e, 0x3f, 0x04, 0x00, 0x00, 0xff, 0xff, 0xd7,
	0x7a, 0xf4, 0x20, 0xee, 0x02, 0x00, 0x00,
}
