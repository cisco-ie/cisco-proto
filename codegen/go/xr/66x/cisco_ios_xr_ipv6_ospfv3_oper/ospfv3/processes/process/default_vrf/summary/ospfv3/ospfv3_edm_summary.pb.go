/*
Copyright 2019 Cisco Systems

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ospfv3_edm_summary.proto

package cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_default_vrf_summary_ospfv3

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Ospfv3EdmSummary_KEYS struct {
	ProcessName          string   `protobuf:"bytes,1,opt,name=process_name,json=processName,proto3" json:"process_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Ospfv3EdmSummary_KEYS) Reset()         { *m = Ospfv3EdmSummary_KEYS{} }
func (m *Ospfv3EdmSummary_KEYS) String() string { return proto.CompactTextString(m) }
func (*Ospfv3EdmSummary_KEYS) ProtoMessage()    {}
func (*Ospfv3EdmSummary_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_6a5ebca8c6f037c2, []int{0}
}

func (m *Ospfv3EdmSummary_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Ospfv3EdmSummary_KEYS.Unmarshal(m, b)
}
func (m *Ospfv3EdmSummary_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Ospfv3EdmSummary_KEYS.Marshal(b, m, deterministic)
}
func (m *Ospfv3EdmSummary_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ospfv3EdmSummary_KEYS.Merge(m, src)
}
func (m *Ospfv3EdmSummary_KEYS) XXX_Size() int {
	return xxx_messageInfo_Ospfv3EdmSummary_KEYS.Size(m)
}
func (m *Ospfv3EdmSummary_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_Ospfv3EdmSummary_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_Ospfv3EdmSummary_KEYS proto.InternalMessageInfo

func (m *Ospfv3EdmSummary_KEYS) GetProcessName() string {
	if m != nil {
		return m.ProcessName
	}
	return ""
}

type Ospfv3ShDomainIdEntry struct {
	DomainIdType         uint32   `protobuf:"varint,1,opt,name=domain_id_type,json=domainIdType,proto3" json:"domain_id_type,omitempty"`
	DomainIdValue        string   `protobuf:"bytes,2,opt,name=domain_id_value,json=domainIdValue,proto3" json:"domain_id_value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Ospfv3ShDomainIdEntry) Reset()         { *m = Ospfv3ShDomainIdEntry{} }
func (m *Ospfv3ShDomainIdEntry) String() string { return proto.CompactTextString(m) }
func (*Ospfv3ShDomainIdEntry) ProtoMessage()    {}
func (*Ospfv3ShDomainIdEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_6a5ebca8c6f037c2, []int{1}
}

func (m *Ospfv3ShDomainIdEntry) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Ospfv3ShDomainIdEntry.Unmarshal(m, b)
}
func (m *Ospfv3ShDomainIdEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Ospfv3ShDomainIdEntry.Marshal(b, m, deterministic)
}
func (m *Ospfv3ShDomainIdEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ospfv3ShDomainIdEntry.Merge(m, src)
}
func (m *Ospfv3ShDomainIdEntry) XXX_Size() int {
	return xxx_messageInfo_Ospfv3ShDomainIdEntry.Size(m)
}
func (m *Ospfv3ShDomainIdEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_Ospfv3ShDomainIdEntry.DiscardUnknown(m)
}

var xxx_messageInfo_Ospfv3ShDomainIdEntry proto.InternalMessageInfo

func (m *Ospfv3ShDomainIdEntry) GetDomainIdType() uint32 {
	if m != nil {
		return m.DomainIdType
	}
	return 0
}

func (m *Ospfv3ShDomainIdEntry) GetDomainIdValue() string {
	if m != nil {
		return m.DomainIdValue
	}
	return ""
}

type Ospfv3ShDomainId struct {
	PrimaryDomainId      *Ospfv3ShDomainIdEntry   `protobuf:"bytes,1,opt,name=primary_domain_id,json=primaryDomainId,proto3" json:"primary_domain_id,omitempty"`
	SecondaryDomainId    []*Ospfv3ShDomainIdEntry `protobuf:"bytes,2,rep,name=secondary_domain_id,json=secondaryDomainId,proto3" json:"secondary_domain_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *Ospfv3ShDomainId) Reset()         { *m = Ospfv3ShDomainId{} }
func (m *Ospfv3ShDomainId) String() string { return proto.CompactTextString(m) }
func (*Ospfv3ShDomainId) ProtoMessage()    {}
func (*Ospfv3ShDomainId) Descriptor() ([]byte, []int) {
	return fileDescriptor_6a5ebca8c6f037c2, []int{2}
}

func (m *Ospfv3ShDomainId) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Ospfv3ShDomainId.Unmarshal(m, b)
}
func (m *Ospfv3ShDomainId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Ospfv3ShDomainId.Marshal(b, m, deterministic)
}
func (m *Ospfv3ShDomainId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ospfv3ShDomainId.Merge(m, src)
}
func (m *Ospfv3ShDomainId) XXX_Size() int {
	return xxx_messageInfo_Ospfv3ShDomainId.Size(m)
}
func (m *Ospfv3ShDomainId) XXX_DiscardUnknown() {
	xxx_messageInfo_Ospfv3ShDomainId.DiscardUnknown(m)
}

var xxx_messageInfo_Ospfv3ShDomainId proto.InternalMessageInfo

func (m *Ospfv3ShDomainId) GetPrimaryDomainId() *Ospfv3ShDomainIdEntry {
	if m != nil {
		return m.PrimaryDomainId
	}
	return nil
}

func (m *Ospfv3ShDomainId) GetSecondaryDomainId() []*Ospfv3ShDomainIdEntry {
	if m != nil {
		return m.SecondaryDomainId
	}
	return nil
}

type Ospfv3EdmTime struct {
	Second               uint32   `protobuf:"varint,1,opt,name=second,proto3" json:"second,omitempty"`
	Nanosecond           uint32   `protobuf:"varint,2,opt,name=nanosecond,proto3" json:"nanosecond,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Ospfv3EdmTime) Reset()         { *m = Ospfv3EdmTime{} }
func (m *Ospfv3EdmTime) String() string { return proto.CompactTextString(m) }
func (*Ospfv3EdmTime) ProtoMessage()    {}
func (*Ospfv3EdmTime) Descriptor() ([]byte, []int) {
	return fileDescriptor_6a5ebca8c6f037c2, []int{3}
}

func (m *Ospfv3EdmTime) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Ospfv3EdmTime.Unmarshal(m, b)
}
func (m *Ospfv3EdmTime) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Ospfv3EdmTime.Marshal(b, m, deterministic)
}
func (m *Ospfv3EdmTime) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ospfv3EdmTime.Merge(m, src)
}
func (m *Ospfv3EdmTime) XXX_Size() int {
	return xxx_messageInfo_Ospfv3EdmTime.Size(m)
}
func (m *Ospfv3EdmTime) XXX_DiscardUnknown() {
	xxx_messageInfo_Ospfv3EdmTime.DiscardUnknown(m)
}

var xxx_messageInfo_Ospfv3EdmTime proto.InternalMessageInfo

func (m *Ospfv3EdmTime) GetSecond() uint32 {
	if m != nil {
		return m.Second
	}
	return 0
}

func (m *Ospfv3EdmTime) GetNanosecond() uint32 {
	if m != nil {
		return m.Nanosecond
	}
	return 0
}

type Ospfv3ShStubRouterTrigger struct {
	Trigger              string         `protobuf:"bytes,1,opt,name=trigger,proto3" json:"trigger,omitempty"`
	WaitForBgp           bool           `protobuf:"varint,2,opt,name=wait_for_bgp,json=waitForBgp,proto3" json:"wait_for_bgp,omitempty"`
	UnsetReason          string         `protobuf:"bytes,3,opt,name=unset_reason,json=unsetReason,proto3" json:"unset_reason,omitempty"`
	Time                 uint32         `protobuf:"varint,4,opt,name=time,proto3" json:"time,omitempty"`
	UnsetTime            *Ospfv3EdmTime `protobuf:"bytes,5,opt,name=unset_time,json=unsetTime,proto3" json:"unset_time,omitempty"`
	StartTime            *Ospfv3EdmTime `protobuf:"bytes,6,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *Ospfv3ShStubRouterTrigger) Reset()         { *m = Ospfv3ShStubRouterTrigger{} }
func (m *Ospfv3ShStubRouterTrigger) String() string { return proto.CompactTextString(m) }
func (*Ospfv3ShStubRouterTrigger) ProtoMessage()    {}
func (*Ospfv3ShStubRouterTrigger) Descriptor() ([]byte, []int) {
	return fileDescriptor_6a5ebca8c6f037c2, []int{4}
}

func (m *Ospfv3ShStubRouterTrigger) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Ospfv3ShStubRouterTrigger.Unmarshal(m, b)
}
func (m *Ospfv3ShStubRouterTrigger) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Ospfv3ShStubRouterTrigger.Marshal(b, m, deterministic)
}
func (m *Ospfv3ShStubRouterTrigger) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ospfv3ShStubRouterTrigger.Merge(m, src)
}
func (m *Ospfv3ShStubRouterTrigger) XXX_Size() int {
	return xxx_messageInfo_Ospfv3ShStubRouterTrigger.Size(m)
}
func (m *Ospfv3ShStubRouterTrigger) XXX_DiscardUnknown() {
	xxx_messageInfo_Ospfv3ShStubRouterTrigger.DiscardUnknown(m)
}

var xxx_messageInfo_Ospfv3ShStubRouterTrigger proto.InternalMessageInfo

func (m *Ospfv3ShStubRouterTrigger) GetTrigger() string {
	if m != nil {
		return m.Trigger
	}
	return ""
}

func (m *Ospfv3ShStubRouterTrigger) GetWaitForBgp() bool {
	if m != nil {
		return m.WaitForBgp
	}
	return false
}

func (m *Ospfv3ShStubRouterTrigger) GetUnsetReason() string {
	if m != nil {
		return m.UnsetReason
	}
	return ""
}

func (m *Ospfv3ShStubRouterTrigger) GetTime() uint32 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *Ospfv3ShStubRouterTrigger) GetUnsetTime() *Ospfv3EdmTime {
	if m != nil {
		return m.UnsetTime
	}
	return nil
}

func (m *Ospfv3ShStubRouterTrigger) GetStartTime() *Ospfv3EdmTime {
	if m != nil {
		return m.StartTime
	}
	return nil
}

type Ospfv3ShStubRouter struct {
	Mode                 string                       `protobuf:"bytes,1,opt,name=mode,proto3" json:"mode,omitempty"`
	Active               bool                         `protobuf:"varint,2,opt,name=active,proto3" json:"active,omitempty"`
	RemainingTime        uint32                       `protobuf:"varint,3,opt,name=remaining_time,json=remainingTime,proto3" json:"remaining_time,omitempty"`
	SetReason            string                       `protobuf:"bytes,4,opt,name=set_reason,json=setReason,proto3" json:"set_reason,omitempty"`
	UnsetReason          string                       `protobuf:"bytes,5,opt,name=unset_reason,json=unsetReason,proto3" json:"unset_reason,omitempty"`
	UnsetTime            *Ospfv3EdmTime               `protobuf:"bytes,6,opt,name=unset_time,json=unsetTime,proto3" json:"unset_time,omitempty"`
	StartTime            *Ospfv3EdmTime               `protobuf:"bytes,7,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	IncludeStubLinks     bool                         `protobuf:"varint,8,opt,name=include_stub_links,json=includeStubLinks,proto3" json:"include_stub_links,omitempty"`
	SummaryLsaMetric     uint32                       `protobuf:"varint,9,opt,name=summary_lsa_metric,json=summaryLsaMetric,proto3" json:"summary_lsa_metric,omitempty"`
	ExternalLsaMetric    uint32                       `protobuf:"varint,10,opt,name=external_lsa_metric,json=externalLsaMetric,proto3" json:"external_lsa_metric,omitempty"`
	Trigger              []*Ospfv3ShStubRouterTrigger `protobuf:"bytes,11,rep,name=trigger,proto3" json:"trigger,omitempty"`
	AbrResumeTime        *Ospfv3EdmTime               `protobuf:"bytes,12,opt,name=abr_resume_time,json=abrResumeTime,proto3" json:"abr_resume_time,omitempty"`
	AbrOffReason         string                       `protobuf:"bytes,13,opt,name=abr_off_reason,json=abrOffReason,proto3" json:"abr_off_reason,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *Ospfv3ShStubRouter) Reset()         { *m = Ospfv3ShStubRouter{} }
func (m *Ospfv3ShStubRouter) String() string { return proto.CompactTextString(m) }
func (*Ospfv3ShStubRouter) ProtoMessage()    {}
func (*Ospfv3ShStubRouter) Descriptor() ([]byte, []int) {
	return fileDescriptor_6a5ebca8c6f037c2, []int{5}
}

func (m *Ospfv3ShStubRouter) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Ospfv3ShStubRouter.Unmarshal(m, b)
}
func (m *Ospfv3ShStubRouter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Ospfv3ShStubRouter.Marshal(b, m, deterministic)
}
func (m *Ospfv3ShStubRouter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ospfv3ShStubRouter.Merge(m, src)
}
func (m *Ospfv3ShStubRouter) XXX_Size() int {
	return xxx_messageInfo_Ospfv3ShStubRouter.Size(m)
}
func (m *Ospfv3ShStubRouter) XXX_DiscardUnknown() {
	xxx_messageInfo_Ospfv3ShStubRouter.DiscardUnknown(m)
}

var xxx_messageInfo_Ospfv3ShStubRouter proto.InternalMessageInfo

func (m *Ospfv3ShStubRouter) GetMode() string {
	if m != nil {
		return m.Mode
	}
	return ""
}

func (m *Ospfv3ShStubRouter) GetActive() bool {
	if m != nil {
		return m.Active
	}
	return false
}

func (m *Ospfv3ShStubRouter) GetRemainingTime() uint32 {
	if m != nil {
		return m.RemainingTime
	}
	return 0
}

func (m *Ospfv3ShStubRouter) GetSetReason() string {
	if m != nil {
		return m.SetReason
	}
	return ""
}

func (m *Ospfv3ShStubRouter) GetUnsetReason() string {
	if m != nil {
		return m.UnsetReason
	}
	return ""
}

func (m *Ospfv3ShStubRouter) GetUnsetTime() *Ospfv3EdmTime {
	if m != nil {
		return m.UnsetTime
	}
	return nil
}

func (m *Ospfv3ShStubRouter) GetStartTime() *Ospfv3EdmTime {
	if m != nil {
		return m.StartTime
	}
	return nil
}

func (m *Ospfv3ShStubRouter) GetIncludeStubLinks() bool {
	if m != nil {
		return m.IncludeStubLinks
	}
	return false
}

func (m *Ospfv3ShStubRouter) GetSummaryLsaMetric() uint32 {
	if m != nil {
		return m.SummaryLsaMetric
	}
	return 0
}

func (m *Ospfv3ShStubRouter) GetExternalLsaMetric() uint32 {
	if m != nil {
		return m.ExternalLsaMetric
	}
	return 0
}

func (m *Ospfv3ShStubRouter) GetTrigger() []*Ospfv3ShStubRouterTrigger {
	if m != nil {
		return m.Trigger
	}
	return nil
}

func (m *Ospfv3ShStubRouter) GetAbrResumeTime() *Ospfv3EdmTime {
	if m != nil {
		return m.AbrResumeTime
	}
	return nil
}

func (m *Ospfv3ShStubRouter) GetAbrOffReason() string {
	if m != nil {
		return m.AbrOffReason
	}
	return ""
}

type OspfShIpfrrTb struct {
	TiebreakerType       string   `protobuf:"bytes,1,opt,name=tiebreaker_type,json=tiebreakerType,proto3" json:"tiebreaker_type,omitempty"`
	TiebreakerIndex      uint32   `protobuf:"varint,2,opt,name=tiebreaker_index,json=tiebreakerIndex,proto3" json:"tiebreaker_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OspfShIpfrrTb) Reset()         { *m = OspfShIpfrrTb{} }
func (m *OspfShIpfrrTb) String() string { return proto.CompactTextString(m) }
func (*OspfShIpfrrTb) ProtoMessage()    {}
func (*OspfShIpfrrTb) Descriptor() ([]byte, []int) {
	return fileDescriptor_6a5ebca8c6f037c2, []int{6}
}

func (m *OspfShIpfrrTb) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OspfShIpfrrTb.Unmarshal(m, b)
}
func (m *OspfShIpfrrTb) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OspfShIpfrrTb.Marshal(b, m, deterministic)
}
func (m *OspfShIpfrrTb) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OspfShIpfrrTb.Merge(m, src)
}
func (m *OspfShIpfrrTb) XXX_Size() int {
	return xxx_messageInfo_OspfShIpfrrTb.Size(m)
}
func (m *OspfShIpfrrTb) XXX_DiscardUnknown() {
	xxx_messageInfo_OspfShIpfrrTb.DiscardUnknown(m)
}

var xxx_messageInfo_OspfShIpfrrTb proto.InternalMessageInfo

func (m *OspfShIpfrrTb) GetTiebreakerType() string {
	if m != nil {
		return m.TiebreakerType
	}
	return ""
}

func (m *OspfShIpfrrTb) GetTiebreakerIndex() uint32 {
	if m != nil {
		return m.TiebreakerIndex
	}
	return 0
}

type Ospfv3EdmSummary struct {
	RouterId                        string                `protobuf:"bytes,50,opt,name=router_id,json=routerId,proto3" json:"router_id,omitempty"`
	IsRoleStandby                   bool                  `protobuf:"varint,51,opt,name=is_role_standby,json=isRoleStandby,proto3" json:"is_role_standby,omitempty"`
	Role                            uint32                `protobuf:"varint,52,opt,name=role,proto3" json:"role,omitempty"`
	IsNsrEnabled                    bool                  `protobuf:"varint,53,opt,name=is_nsr_enabled,json=isNsrEnabled,proto3" json:"is_nsr_enabled,omitempty"`
	IsNsrSwitchoverOnRestart        bool                  `protobuf:"varint,54,opt,name=is_nsr_switchover_on_restart,json=isNsrSwitchoverOnRestart,proto3" json:"is_nsr_switchover_on_restart,omitempty"`
	IsRouterIdStalled               bool                  `protobuf:"varint,55,opt,name=is_router_id_stalled,json=isRouterIdStalled,proto3" json:"is_router_id_stalled,omitempty"`
	IsOpaqueCapable                 bool                  `protobuf:"varint,56,opt,name=is_opaque_capable,json=isOpaqueCapable,proto3" json:"is_opaque_capable,omitempty"`
	IsAreaBorderRouter              bool                  `protobuf:"varint,57,opt,name=is_area_border_router,json=isAreaBorderRouter,proto3" json:"is_area_border_router,omitempty"`
	IsAsBorderRouter                bool                  `protobuf:"varint,58,opt,name=is_as_border_router,json=isAsBorderRouter,proto3" json:"is_as_border_router,omitempty"`
	CapabilityPreferType7           bool                  `protobuf:"varint,59,opt,name=capability_prefer_type7,json=capabilityPreferType7,proto3" json:"capability_prefer_type7,omitempty"`
	Metric                          uint32                `protobuf:"varint,60,opt,name=metric,proto3" json:"metric,omitempty"`
	IsDefaultOriginated             bool                  `protobuf:"varint,61,opt,name=is_default_originated,json=isDefaultOriginated,proto3" json:"is_default_originated,omitempty"`
	IsDefaultAlways                 bool                  `protobuf:"varint,62,opt,name=is_default_always,json=isDefaultAlways,proto3" json:"is_default_always,omitempty"`
	DefaultMetric                   uint32                `protobuf:"varint,63,opt,name=default_metric,json=defaultMetric,proto3" json:"default_metric,omitempty"`
	DefaultMetricType               string                `protobuf:"bytes,64,opt,name=default_metric_type,json=defaultMetricType,proto3" json:"default_metric_type,omitempty"`
	DefaultTag                      uint32                `protobuf:"varint,65,opt,name=default_tag,json=defaultTag,proto3" json:"default_tag,omitempty"`
	IsDefaultPolicy                 bool                  `protobuf:"varint,66,opt,name=is_default_policy,json=isDefaultPolicy,proto3" json:"is_default_policy,omitempty"`
	DefaultPolicyName               string                `protobuf:"bytes,67,opt,name=default_policy_name,json=defaultPolicyName,proto3" json:"default_policy_name,omitempty"`
	SpfStartTime                    uint32                `protobuf:"varint,68,opt,name=spf_start_time,json=spfStartTime,proto3" json:"spf_start_time,omitempty"`
	SpfHoldTime                     uint32                `protobuf:"varint,69,opt,name=spf_hold_time,json=spfHoldTime,proto3" json:"spf_hold_time,omitempty"`
	SpfMaximumTime                  uint32                `protobuf:"varint,70,opt,name=spf_maximum_time,json=spfMaximumTime,proto3" json:"spf_maximum_time,omitempty"`
	LsaStartTime                    uint32                `protobuf:"varint,71,opt,name=lsa_start_time,json=lsaStartTime,proto3" json:"lsa_start_time,omitempty"`
	LsaHoldTime                     uint32                `protobuf:"varint,72,opt,name=lsa_hold_time,json=lsaHoldTime,proto3" json:"lsa_hold_time,omitempty"`
	LsaMaximumTime                  uint32                `protobuf:"varint,73,opt,name=lsa_maximum_time,json=lsaMaximumTime,proto3" json:"lsa_maximum_time,omitempty"`
	MinimumLsaInterval              uint32                `protobuf:"varint,74,opt,name=minimum_lsa_interval,json=minimumLsaInterval,proto3" json:"minimum_lsa_interval,omitempty"`
	LsaGroupInterval                uint32                `protobuf:"varint,75,opt,name=lsa_group_interval,json=lsaGroupInterval,proto3" json:"lsa_group_interval,omitempty"`
	LsaFloodPacingInterval          uint32                `protobuf:"varint,76,opt,name=lsa_flood_pacing_interval,json=lsaFloodPacingInterval,proto3" json:"lsa_flood_pacing_interval,omitempty"`
	LsaRetransmissionPacingInterval uint32                `protobuf:"varint,77,opt,name=lsa_retransmission_pacing_interval,json=lsaRetransmissionPacingInterval,proto3" json:"lsa_retransmission_pacing_interval,omitempty"`
	AsLsAs                          uint32                `protobuf:"varint,78,opt,name=as_ls_as,json=asLsAs,proto3" json:"as_ls_as,omitempty"`
	OpaqueLsas                      uint32                `protobuf:"varint,79,opt,name=opaque_lsas,json=opaqueLsas,proto3" json:"opaque_lsas,omitempty"`
	OpaqueLsaChecksum               uint32                `protobuf:"varint,80,opt,name=opaque_lsa_checksum,json=opaqueLsaChecksum,proto3" json:"opaque_lsa_checksum,omitempty"`
	AsDcBitlessLsAs                 uint32                `protobuf:"varint,81,opt,name=as_dc_bitless_ls_as,json=asDcBitlessLsAs,proto3" json:"as_dc_bitless_ls_as,omitempty"`
	AsDoNotAgeLsAs                  uint32                `protobuf:"varint,82,opt,name=as_do_not_age_ls_as,json=asDoNotAgeLsAs,proto3" json:"as_do_not_age_ls_as,omitempty"`
	Areas                           uint32                `protobuf:"varint,83,opt,name=areas,proto3" json:"areas,omitempty"`
	NormalAreas                     uint32                `protobuf:"varint,84,opt,name=normal_areas,json=normalAreas,proto3" json:"normal_areas,omitempty"`
	StubAreas                       uint32                `protobuf:"varint,85,opt,name=stub_areas,json=stubAreas,proto3" json:"stub_areas,omitempty"`
	NssaAreas                       uint32                `protobuf:"varint,86,opt,name=nssa_areas,json=nssaAreas,proto3" json:"nssa_areas,omitempty"`
	AsLsaFloodListLength            uint32                `protobuf:"varint,87,opt,name=as_lsa_flood_list_length,json=asLsaFloodListLength,proto3" json:"as_lsa_flood_list_length,omitempty"`
	IsGraceRestartEnabled           bool                  `protobuf:"varint,88,opt,name=is_grace_restart_enabled,json=isGraceRestartEnabled,proto3" json:"is_grace_restart_enabled,omitempty"`
	LastNsfTime                     uint32                `protobuf:"varint,89,opt,name=last_nsf_time,json=lastNsfTime,proto3" json:"last_nsf_time,omitempty"`
	GraceResyncTime                 uint32                `protobuf:"varint,90,opt,name=grace_resync_time,json=graceResyncTime,proto3" json:"grace_resync_time,omitempty"`
	MaximumInterfaces               uint32                `protobuf:"varint,91,opt,name=maximum_interfaces,json=maximumInterfaces,proto3" json:"maximum_interfaces,omitempty"`
	MaximumPaths                    uint32                `protobuf:"varint,92,opt,name=maximum_paths,json=maximumPaths,proto3" json:"maximum_paths,omitempty"`
	RedistributionLimit             uint32                `protobuf:"varint,93,opt,name=redistribution_limit,json=redistributionLimit,proto3" json:"redistribution_limit,omitempty"`
	RedistributionThreshold         uint32                `protobuf:"varint,94,opt,name=redistribution_threshold,json=redistributionThreshold,proto3" json:"redistribution_threshold,omitempty"`
	IsAutoCost                      bool                  `protobuf:"varint,95,opt,name=is_auto_cost,json=isAutoCost,proto3" json:"is_auto_cost,omitempty"`
	ReferenceBandwidth              uint32                `protobuf:"varint,96,opt,name=reference_bandwidth,json=referenceBandwidth,proto3" json:"reference_bandwidth,omitempty"`
	DomainId                        *Ospfv3ShDomainId     `protobuf:"bytes,97,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
	StubRouter                      []*Ospfv3ShStubRouter `protobuf:"bytes,98,rep,name=stub_router,json=stubRouter,proto3" json:"stub_router,omitempty"`
	IpfrrTiebreakers                []*OspfShIpfrrTb      `protobuf:"bytes,99,rep,name=ipfrr_tiebreakers,json=ipfrrTiebreakers,proto3" json:"ipfrr_tiebreakers,omitempty"`
	ContextName                     string                `protobuf:"bytes,100,opt,name=context_name,json=contextName,proto3" json:"context_name,omitempty"`
	SnmpTrapEnabled                 bool                  `protobuf:"varint,101,opt,name=snmp_trap_enabled,json=snmpTrapEnabled,proto3" json:"snmp_trap_enabled,omitempty"`
	GracefulShutdownState           string                `protobuf:"bytes,102,opt,name=graceful_shutdown_state,json=gracefulShutdownState,proto3" json:"graceful_shutdown_state,omitempty"`
	XXX_NoUnkeyedLiteral            struct{}              `json:"-"`
	XXX_unrecognized                []byte                `json:"-"`
	XXX_sizecache                   int32                 `json:"-"`
}

func (m *Ospfv3EdmSummary) Reset()         { *m = Ospfv3EdmSummary{} }
func (m *Ospfv3EdmSummary) String() string { return proto.CompactTextString(m) }
func (*Ospfv3EdmSummary) ProtoMessage()    {}
func (*Ospfv3EdmSummary) Descriptor() ([]byte, []int) {
	return fileDescriptor_6a5ebca8c6f037c2, []int{7}
}

func (m *Ospfv3EdmSummary) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Ospfv3EdmSummary.Unmarshal(m, b)
}
func (m *Ospfv3EdmSummary) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Ospfv3EdmSummary.Marshal(b, m, deterministic)
}
func (m *Ospfv3EdmSummary) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ospfv3EdmSummary.Merge(m, src)
}
func (m *Ospfv3EdmSummary) XXX_Size() int {
	return xxx_messageInfo_Ospfv3EdmSummary.Size(m)
}
func (m *Ospfv3EdmSummary) XXX_DiscardUnknown() {
	xxx_messageInfo_Ospfv3EdmSummary.DiscardUnknown(m)
}

var xxx_messageInfo_Ospfv3EdmSummary proto.InternalMessageInfo

func (m *Ospfv3EdmSummary) GetRouterId() string {
	if m != nil {
		return m.RouterId
	}
	return ""
}

func (m *Ospfv3EdmSummary) GetIsRoleStandby() bool {
	if m != nil {
		return m.IsRoleStandby
	}
	return false
}

func (m *Ospfv3EdmSummary) GetRole() uint32 {
	if m != nil {
		return m.Role
	}
	return 0
}

func (m *Ospfv3EdmSummary) GetIsNsrEnabled() bool {
	if m != nil {
		return m.IsNsrEnabled
	}
	return false
}

func (m *Ospfv3EdmSummary) GetIsNsrSwitchoverOnRestart() bool {
	if m != nil {
		return m.IsNsrSwitchoverOnRestart
	}
	return false
}

func (m *Ospfv3EdmSummary) GetIsRouterIdStalled() bool {
	if m != nil {
		return m.IsRouterIdStalled
	}
	return false
}

func (m *Ospfv3EdmSummary) GetIsOpaqueCapable() bool {
	if m != nil {
		return m.IsOpaqueCapable
	}
	return false
}

func (m *Ospfv3EdmSummary) GetIsAreaBorderRouter() bool {
	if m != nil {
		return m.IsAreaBorderRouter
	}
	return false
}

func (m *Ospfv3EdmSummary) GetIsAsBorderRouter() bool {
	if m != nil {
		return m.IsAsBorderRouter
	}
	return false
}

func (m *Ospfv3EdmSummary) GetCapabilityPreferType7() bool {
	if m != nil {
		return m.CapabilityPreferType7
	}
	return false
}

func (m *Ospfv3EdmSummary) GetMetric() uint32 {
	if m != nil {
		return m.Metric
	}
	return 0
}

func (m *Ospfv3EdmSummary) GetIsDefaultOriginated() bool {
	if m != nil {
		return m.IsDefaultOriginated
	}
	return false
}

func (m *Ospfv3EdmSummary) GetIsDefaultAlways() bool {
	if m != nil {
		return m.IsDefaultAlways
	}
	return false
}

func (m *Ospfv3EdmSummary) GetDefaultMetric() uint32 {
	if m != nil {
		return m.DefaultMetric
	}
	return 0
}

func (m *Ospfv3EdmSummary) GetDefaultMetricType() string {
	if m != nil {
		return m.DefaultMetricType
	}
	return ""
}

func (m *Ospfv3EdmSummary) GetDefaultTag() uint32 {
	if m != nil {
		return m.DefaultTag
	}
	return 0
}

func (m *Ospfv3EdmSummary) GetIsDefaultPolicy() bool {
	if m != nil {
		return m.IsDefaultPolicy
	}
	return false
}

func (m *Ospfv3EdmSummary) GetDefaultPolicyName() string {
	if m != nil {
		return m.DefaultPolicyName
	}
	return ""
}

func (m *Ospfv3EdmSummary) GetSpfStartTime() uint32 {
	if m != nil {
		return m.SpfStartTime
	}
	return 0
}

func (m *Ospfv3EdmSummary) GetSpfHoldTime() uint32 {
	if m != nil {
		return m.SpfHoldTime
	}
	return 0
}

func (m *Ospfv3EdmSummary) GetSpfMaximumTime() uint32 {
	if m != nil {
		return m.SpfMaximumTime
	}
	return 0
}

func (m *Ospfv3EdmSummary) GetLsaStartTime() uint32 {
	if m != nil {
		return m.LsaStartTime
	}
	return 0
}

func (m *Ospfv3EdmSummary) GetLsaHoldTime() uint32 {
	if m != nil {
		return m.LsaHoldTime
	}
	return 0
}

func (m *Ospfv3EdmSummary) GetLsaMaximumTime() uint32 {
	if m != nil {
		return m.LsaMaximumTime
	}
	return 0
}

func (m *Ospfv3EdmSummary) GetMinimumLsaInterval() uint32 {
	if m != nil {
		return m.MinimumLsaInterval
	}
	return 0
}

func (m *Ospfv3EdmSummary) GetLsaGroupInterval() uint32 {
	if m != nil {
		return m.LsaGroupInterval
	}
	return 0
}

func (m *Ospfv3EdmSummary) GetLsaFloodPacingInterval() uint32 {
	if m != nil {
		return m.LsaFloodPacingInterval
	}
	return 0
}

func (m *Ospfv3EdmSummary) GetLsaRetransmissionPacingInterval() uint32 {
	if m != nil {
		return m.LsaRetransmissionPacingInterval
	}
	return 0
}

func (m *Ospfv3EdmSummary) GetAsLsAs() uint32 {
	if m != nil {
		return m.AsLsAs
	}
	return 0
}

func (m *Ospfv3EdmSummary) GetOpaqueLsas() uint32 {
	if m != nil {
		return m.OpaqueLsas
	}
	return 0
}

func (m *Ospfv3EdmSummary) GetOpaqueLsaChecksum() uint32 {
	if m != nil {
		return m.OpaqueLsaChecksum
	}
	return 0
}

func (m *Ospfv3EdmSummary) GetAsDcBitlessLsAs() uint32 {
	if m != nil {
		return m.AsDcBitlessLsAs
	}
	return 0
}

func (m *Ospfv3EdmSummary) GetAsDoNotAgeLsAs() uint32 {
	if m != nil {
		return m.AsDoNotAgeLsAs
	}
	return 0
}

func (m *Ospfv3EdmSummary) GetAreas() uint32 {
	if m != nil {
		return m.Areas
	}
	return 0
}

func (m *Ospfv3EdmSummary) GetNormalAreas() uint32 {
	if m != nil {
		return m.NormalAreas
	}
	return 0
}

func (m *Ospfv3EdmSummary) GetStubAreas() uint32 {
	if m != nil {
		return m.StubAreas
	}
	return 0
}

func (m *Ospfv3EdmSummary) GetNssaAreas() uint32 {
	if m != nil {
		return m.NssaAreas
	}
	return 0
}

func (m *Ospfv3EdmSummary) GetAsLsaFloodListLength() uint32 {
	if m != nil {
		return m.AsLsaFloodListLength
	}
	return 0
}

func (m *Ospfv3EdmSummary) GetIsGraceRestartEnabled() bool {
	if m != nil {
		return m.IsGraceRestartEnabled
	}
	return false
}

func (m *Ospfv3EdmSummary) GetLastNsfTime() uint32 {
	if m != nil {
		return m.LastNsfTime
	}
	return 0
}

func (m *Ospfv3EdmSummary) GetGraceResyncTime() uint32 {
	if m != nil {
		return m.GraceResyncTime
	}
	return 0
}

func (m *Ospfv3EdmSummary) GetMaximumInterfaces() uint32 {
	if m != nil {
		return m.MaximumInterfaces
	}
	return 0
}

func (m *Ospfv3EdmSummary) GetMaximumPaths() uint32 {
	if m != nil {
		return m.MaximumPaths
	}
	return 0
}

func (m *Ospfv3EdmSummary) GetRedistributionLimit() uint32 {
	if m != nil {
		return m.RedistributionLimit
	}
	return 0
}

func (m *Ospfv3EdmSummary) GetRedistributionThreshold() uint32 {
	if m != nil {
		return m.RedistributionThreshold
	}
	return 0
}

func (m *Ospfv3EdmSummary) GetIsAutoCost() bool {
	if m != nil {
		return m.IsAutoCost
	}
	return false
}

func (m *Ospfv3EdmSummary) GetReferenceBandwidth() uint32 {
	if m != nil {
		return m.ReferenceBandwidth
	}
	return 0
}

func (m *Ospfv3EdmSummary) GetDomainId() *Ospfv3ShDomainId {
	if m != nil {
		return m.DomainId
	}
	return nil
}

func (m *Ospfv3EdmSummary) GetStubRouter() []*Ospfv3ShStubRouter {
	if m != nil {
		return m.StubRouter
	}
	return nil
}

func (m *Ospfv3EdmSummary) GetIpfrrTiebreakers() []*OspfShIpfrrTb {
	if m != nil {
		return m.IpfrrTiebreakers
	}
	return nil
}

func (m *Ospfv3EdmSummary) GetContextName() string {
	if m != nil {
		return m.ContextName
	}
	return ""
}

func (m *Ospfv3EdmSummary) GetSnmpTrapEnabled() bool {
	if m != nil {
		return m.SnmpTrapEnabled
	}
	return false
}

func (m *Ospfv3EdmSummary) GetGracefulShutdownState() string {
	if m != nil {
		return m.GracefulShutdownState
	}
	return ""
}

func init() {
	proto.RegisterType((*Ospfv3EdmSummary_KEYS)(nil), "cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.default_vrf.summary.ospfv3.ospfv3_edm_summary_KEYS")
	proto.RegisterType((*Ospfv3ShDomainIdEntry)(nil), "cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.default_vrf.summary.ospfv3.ospfv3_sh_domain_id_entry")
	proto.RegisterType((*Ospfv3ShDomainId)(nil), "cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.default_vrf.summary.ospfv3.ospfv3_sh_domain_id")
	proto.RegisterType((*Ospfv3EdmTime)(nil), "cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.default_vrf.summary.ospfv3.ospfv3_edm_time")
	proto.RegisterType((*Ospfv3ShStubRouterTrigger)(nil), "cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.default_vrf.summary.ospfv3.ospfv3_sh_stub_router_trigger")
	proto.RegisterType((*Ospfv3ShStubRouter)(nil), "cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.default_vrf.summary.ospfv3.ospfv3_sh_stub_router")
	proto.RegisterType((*OspfShIpfrrTb)(nil), "cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.default_vrf.summary.ospfv3.ospf_sh_ipfrr_tb")
	proto.RegisterType((*Ospfv3EdmSummary)(nil), "cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.default_vrf.summary.ospfv3.ospfv3_edm_summary")
}

func init() { proto.RegisterFile("ospfv3_edm_summary.proto", fileDescriptor_6a5ebca8c6f037c2) }

var fileDescriptor_6a5ebca8c6f037c2 = []byte{
	// 1701 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x58, 0xdd, 0x77, 0x1c, 0x37,
	0x15, 0x3f, 0x9b, 0x34, 0x89, 0x2d, 0xdb, 0xb1, 0x2d, 0x3b, 0x8d, 0x7a, 0xa0, 0x34, 0x2c, 0x05,
	0x4a, 0x68, 0x0d, 0x4d, 0xc0, 0x21, 0x50, 0x0a, 0x76, 0x9c, 0xa4, 0x26, 0x8e, 0xed, 0xee, 0x9a,
	0x42, 0xf9, 0x12, 0xda, 0x19, 0xcd, 0xae, 0x4e, 0x66, 0xa4, 0x41, 0x57, 0x63, 0x7b, 0xdf, 0xe0,
	0xf0, 0x44, 0x9f, 0x78, 0xe4, 0x70, 0x78, 0xe5, 0xef, 0xe1, 0x5f, 0xe2, 0xdc, 0x2b, 0xcd, 0x7e,
	0x38, 0xe1, 0x8d, 0x18, 0xde, 0x66, 0xef, 0xef, 0x77, 0x75, 0xaf, 0x74, 0xbf, 0xa4, 0x65, 0xc2,
	0x41, 0x5d, 0x9c, 0xde, 0x97, 0x3a, 0xaf, 0x24, 0x34, 0x55, 0xa5, 0xfc, 0x78, 0xab, 0xf6, 0x2e,
	0x38, 0xfe, 0x69, 0x66, 0x20, 0x73, 0xd2, 0x38, 0x90, 0xe7, 0x5e, 0x9a, 0xfa, 0x74, 0x5b, 0x26,
	0xae, 0xab, 0xb5, 0xdf, 0x8a, 0xdf, 0xc8, 0xcd, 0x34, 0x80, 0x86, 0xf6, 0x6b, 0x2b, 0xd7, 0x85,
	0x6a, 0xca, 0x20, 0x4f, 0x7d, 0xb1, 0xd5, 0xae, 0x18, 0xc9, 0xdd, 0x8f, 0xd8, 0xed, 0x97, 0xcd,
	0xc9, 0x67, 0x8f, 0x3f, 0xef, 0xf3, 0xaf, 0xb2, 0xe5, 0xb4, 0x80, 0xb4, 0xaa, 0xd2, 0xa2, 0x73,
	0xa7, 0xf3, 0xde, 0x62, 0x6f, 0x29, 0xc9, 0x0e, 0x55, 0xa5, 0xbb, 0x86, 0xbd, 0x95, 0xb4, 0x61,
	0x24, 0x73, 0x57, 0x29, 0x63, 0xa5, 0xc9, 0xa5, 0xb6, 0xc1, 0x8f, 0xf9, 0xbb, 0xec, 0xe6, 0x54,
	0x14, 0xc6, 0x75, 0x5c, 0x61, 0xa5, 0xb7, 0x1c, 0xa5, 0xfb, 0xf9, 0xc9, 0xb8, 0xd6, 0xfc, 0x1b,
	0x6c, 0x75, 0xca, 0x3a, 0x55, 0x65, 0xa3, 0xc5, 0x15, 0x32, 0xb4, 0xd2, 0xd2, 0x3e, 0x43, 0x61,
	0xf7, 0x5f, 0x57, 0xd8, 0xc6, 0x2b, 0x6c, 0xf1, 0xbf, 0x75, 0xd8, 0x7a, 0xed, 0x0d, 0xb9, 0x3d,
	0x91, 0x92, 0xa5, 0xa5, 0x7b, 0xe5, 0xd6, 0x7f, 0xfd, 0xc0, 0xb6, 0xfe, 0xe3, 0x7e, 0x7b, 0xab,
	0xc9, 0x8d, 0xbd, 0xe4, 0x37, 0xff, 0x47, 0x87, 0x6d, 0x80, 0xce, 0x9c, 0xcd, 0xe7, 0x9d, 0xbb,
	0x72, 0xe7, 0xea, 0xa5, 0x3b, 0xb7, 0x3e, 0x71, 0xa4, 0x75, 0xaf, 0xbb, 0xcf, 0x56, 0x67, 0x42,
	0x1f, 0x4c, 0xa5, 0xf9, 0x9b, 0xec, 0x7a, 0xe4, 0xa5, 0x50, 0xa5, 0x5f, 0xfc, 0x2b, 0x8c, 0x59,
	0x65, 0x5d, 0xc2, 0xae, 0x10, 0x36, 0x23, 0xe9, 0xfe, 0xfd, 0x2a, 0x7b, 0x7b, 0x6a, 0x1b, 0x42,
	0x33, 0x90, 0xde, 0x35, 0x41, 0x7b, 0x19, 0xbc, 0x19, 0x0e, 0xb5, 0xe7, 0x82, 0xdd, 0x48, 0x9f,
	0x29, 0x8f, 0xda, 0x9f, 0xfc, 0x0e, 0x5b, 0x3e, 0x53, 0x26, 0xc8, 0xc2, 0x79, 0x39, 0x18, 0xd6,
	0xb4, 0xfa, 0x42, 0x8f, 0xa1, 0xec, 0x89, 0xf3, 0xbb, 0xc3, 0x1a, 0x13, 0xb1, 0xb1, 0xa0, 0x83,
	0xf4, 0x5a, 0x81, 0xb3, 0xe2, 0x6a, 0x4c, 0x44, 0x92, 0xf5, 0x48, 0xc4, 0x39, 0x7b, 0x03, 0x37,
	0x20, 0xde, 0x20, 0xd7, 0xe8, 0x9b, 0xff, 0xa9, 0xc3, 0x58, 0xd4, 0x23, 0xe8, 0x1a, 0xa5, 0xc4,
	0xe0, 0xf5, 0x9d, 0x7a, 0x7b, 0x8a, 0xbd, 0x45, 0xb2, 0x7a, 0xd2, 0xfa, 0x00, 0x41, 0xf9, 0xe4,
	0xc3, 0xf5, 0xcb, 0xf3, 0x81, 0xac, 0xa2, 0x0f, 0xdd, 0x3f, 0xde, 0x60, 0xb7, 0x5e, 0x19, 0x1c,
	0x3c, 0xb5, 0xca, 0xe5, 0x6d, 0x65, 0xd3, 0x37, 0xa6, 0x80, 0xca, 0x82, 0x39, 0xd5, 0x29, 0x10,
	0xe9, 0x17, 0xff, 0x3a, 0xbb, 0xe9, 0x35, 0x66, 0x8e, 0xb1, 0xc3, 0xb8, 0x99, 0xab, 0x74, 0xd6,
	0x2b, 0x13, 0x29, 0x6d, 0xf8, 0x6d, 0xc6, 0x66, 0x22, 0xf5, 0x06, 0x2d, 0xbc, 0x38, 0x8d, 0xd3,
	0xc5, 0x50, 0x5e, 0x7b, 0x39, 0x94, 0x17, 0xc2, 0x76, 0xfd, 0xff, 0x20, 0x6c, 0x37, 0xfe, 0x07,
	0x61, 0xe3, 0xef, 0x33, 0x6e, 0x6c, 0x56, 0x36, 0xb9, 0x8e, 0x31, 0x2b, 0x8d, 0x7d, 0x01, 0x62,
	0x81, 0x82, 0xb2, 0x96, 0x90, 0x7e, 0x68, 0x06, 0x07, 0x28, 0x47, 0x76, 0xdb, 0xbc, 0x4b, 0x50,
	0xb2, 0xd2, 0xc1, 0x9b, 0x4c, 0x2c, 0x52, 0x88, 0xd6, 0x12, 0x72, 0x00, 0xea, 0x39, 0xc9, 0xf9,
	0x16, 0xdb, 0xd0, 0xe7, 0x41, 0x7b, 0xab, 0xca, 0x59, 0x3a, 0x23, 0xfa, 0x7a, 0x0b, 0x4d, 0xf9,
	0x5f, 0x74, 0xa6, 0xe5, 0xbb, 0x44, 0xdd, 0xab, 0x7e, 0xad, 0xdd, 0xeb, 0x15, 0x1d, 0x64, 0xda,
	0x30, 0xbe, 0xe8, 0xb0, 0x55, 0x35, 0xf0, 0xd2, 0x6b, 0x68, 0x2a, 0x1d, 0x23, 0xb4, 0x7c, 0x69,
	0x11, 0x5a, 0x51, 0x03, 0xdf, 0x23, 0xcb, 0x14, 0xa5, 0x77, 0xd9, 0x4d, 0xf4, 0xc5, 0x15, 0x45,
	0x9b, 0xd2, 0x2b, 0x94, 0xd2, 0xcb, 0x6a, 0xe0, 0x8f, 0x8a, 0x22, 0xe6, 0x74, 0xb7, 0x60, 0x6b,
	0xb8, 0x0e, 0x6e, 0xcd, 0xd4, 0x85, 0xf7, 0x32, 0x0c, 0xf8, 0x37, 0xd9, 0x6a, 0x30, 0x7a, 0xe0,
	0xb5, 0x7a, 0x81, 0xbb, 0x6c, 0xe7, 0xe3, 0x62, 0xef, 0xe6, 0x54, 0x4c, 0x13, 0xf2, 0x5b, 0x6c,
	0x6d, 0x86, 0x68, 0x6c, 0xae, 0xcf, 0x53, 0x0b, 0x9e, 0x59, 0x60, 0x1f, 0xc5, 0xdd, 0x7f, 0x6e,
	0x32, 0xfe, 0xf2, 0x38, 0xe7, 0x5f, 0x62, 0x8b, 0xe9, 0x30, 0x4d, 0x2e, 0xee, 0x91, 0x91, 0x85,
	0x28, 0xd8, 0xcf, 0x71, 0x00, 0x1b, 0x90, 0xde, 0x95, 0x98, 0x67, 0xca, 0xe6, 0x83, 0xb1, 0xb8,
	0x4f, 0x49, 0xb6, 0x62, 0xa0, 0xe7, 0x4a, 0xdd, 0x8f, 0x42, 0x6c, 0x16, 0x48, 0x12, 0xdf, 0x8b,
	0x2d, 0x16, 0xbf, 0x71, 0xf7, 0x06, 0xa4, 0x05, 0x2f, 0xb5, 0x55, 0x83, 0x52, 0xe7, 0xe2, 0xfb,
	0xa4, 0xba, 0x6c, 0xe0, 0x10, 0xfc, 0xe3, 0x28, 0xe3, 0x1f, 0xb3, 0x2f, 0x27, 0x16, 0x9c, 0x99,
	0x90, 0x8d, 0xdc, 0xa9, 0xf6, 0xd2, 0x59, 0x0c, 0x20, 0x66, 0xbb, 0xd8, 0x26, 0x1d, 0x41, 0x3a,
	0xfd, 0x09, 0xe3, 0xc8, 0xf6, 0x22, 0xce, 0xbf, 0xc3, 0x36, 0xc9, 0xc3, 0xb4, 0x03, 0x74, 0xb3,
	0x44, 0x5b, 0x0f, 0x48, 0x6f, 0x1d, 0xdd, 0x8c, 0x7b, 0xe9, 0x47, 0x80, 0xdf, 0x65, 0xeb, 0x06,
	0xa4, 0xab, 0xd5, 0x1f, 0x1a, 0x2d, 0x33, 0x55, 0xa3, 0x1b, 0xe2, 0x07, 0xc4, 0x5e, 0x35, 0x70,
	0x44, 0xf2, 0x47, 0x51, 0xcc, 0x3f, 0x64, 0xb7, 0x0c, 0x48, 0xe5, 0xb5, 0x92, 0x03, 0xe7, 0x73,
	0xed, 0x93, 0x21, 0xf1, 0x90, 0xf8, 0xdc, 0xc0, 0x8e, 0xd7, 0x6a, 0x97, 0xa0, 0x68, 0x87, 0x7f,
	0xc0, 0x36, 0x50, 0x05, 0x2e, 0x28, 0xfc, 0x30, 0x95, 0x26, 0xec, 0xc0, 0x1c, 0x7d, 0x9b, 0xdd,
	0x26, 0x1f, 0x4c, 0x69, 0xc2, 0x58, 0xd6, 0x5e, 0x17, 0x29, 0xde, 0x0f, 0xc4, 0x8f, 0x48, 0xe5,
	0xd6, 0x14, 0x3e, 0x26, 0x14, 0xc3, 0xfe, 0x00, 0x3b, 0x71, 0xaa, 0xcb, 0x8f, 0xe2, 0x30, 0x8e,
	0xbf, 0xf8, 0x3d, 0xf2, 0xb8, 0x4d, 0x59, 0xe7, 0xcd, 0xd0, 0x58, 0x15, 0x74, 0x2e, 0x7e, 0x4c,
	0xab, 0x6d, 0x18, 0xd8, 0x8b, 0xd8, 0xd1, 0x04, 0x4a, 0x27, 0xd2, 0xea, 0xa8, 0xf2, 0x4c, 0x8d,
	0x41, 0x7c, 0xdc, 0x9e, 0x48, 0xe2, 0xef, 0x90, 0x18, 0x3b, 0x7d, 0x4b, 0x4c, 0xf6, 0x7f, 0x12,
	0x3b, 0x7d, 0x92, 0x4e, 0x7b, 0xc8, 0x3c, 0x2d, 0xe6, 0xf0, 0x4f, 0x29, 0xbd, 0xd6, 0xe7, 0xb8,
	0x94, 0xc6, 0xef, 0xb0, 0xa5, 0x96, 0x1f, 0xd4, 0x50, 0xec, 0xc4, 0x4b, 0x44, 0x12, 0x9d, 0xa8,
	0xe1, 0x05, 0x1f, 0x6b, 0x57, 0x9a, 0x6c, 0x2c, 0x76, 0x2f, 0xf8, 0x78, 0x4c, 0xe2, 0x59, 0xe3,
	0x91, 0x18, 0xaf, 0xa8, 0x8f, 0xe6, 0x8c, 0x47, 0x2e, 0x5e, 0x54, 0x31, 0x51, 0xa9, 0xfe, 0xa6,
	0x3d, 0x7d, 0x2f, 0xde, 0x45, 0xa1, 0x2e, 0xfa, 0x93, 0x96, 0xdb, 0x65, 0x2b, 0xc8, 0x1a, 0xb9,
	0x32, 0x8f, 0xa4, 0xc7, 0x44, 0x5a, 0x82, 0xba, 0xf8, 0xc4, 0x95, 0x39, 0x71, 0xde, 0x63, 0x6b,
	0xc8, 0xa9, 0xd4, 0xb9, 0xa9, 0x9a, 0xd8, 0x13, 0xc4, 0x13, 0xa2, 0xa1, 0x85, 0xe7, 0x51, 0xdc,
	0xb6, 0x06, 0xec, 0xad, 0x33, 0x36, 0x9f, 0x46, 0x9b, 0x25, 0xa8, 0x39, 0x9b, 0xc8, 0x9a, 0xda,
	0xfc, 0x24, 0xda, 0x2c, 0x41, 0xcd, 0xda, 0xa4, 0x2e, 0x3d, 0x6b, 0x73, 0x3f, 0xda, 0x2c, 0x41,
	0xcd, 0xda, 0xfc, 0x2e, 0xdb, 0xac, 0x8c, 0x25, 0x16, 0x6a, 0x18, 0x1b, 0xb4, 0x3f, 0x55, 0xa5,
	0xf8, 0x19, 0xb1, 0x79, 0xc2, 0x0e, 0x40, 0xed, 0x27, 0x04, 0x07, 0x07, 0x32, 0x87, 0xde, 0x35,
	0xf5, 0x94, 0xff, 0x2c, 0x0e, 0x8e, 0x12, 0xd4, 0x53, 0x04, 0x26, 0xec, 0x87, 0xec, 0x2d, 0x64,
	0x17, 0xa5, 0x73, 0xb9, 0xac, 0x55, 0x86, 0x97, 0x81, 0x89, 0xd2, 0x01, 0x29, 0xbd, 0x59, 0x82,
	0x7a, 0x82, 0xf8, 0x31, 0xc1, 0x13, 0xd5, 0x67, 0xac, 0x8b, 0xaa, 0x5e, 0x07, 0xaf, 0x2c, 0x54,
	0x06, 0xc0, 0x38, 0xfb, 0xd2, 0x1a, 0xcf, 0x69, 0x8d, 0x77, 0x4a, 0x50, 0xbd, 0x39, 0xe2, 0x85,
	0xc5, 0x04, 0x5b, 0x50, 0x20, 0x4b, 0xac, 0x42, 0x71, 0x18, 0xab, 0x43, 0xc1, 0x01, 0xec, 0x00,
	0xa6, 0x59, 0x2a, 0xfc, 0x12, 0x14, 0x88, 0xa3, 0x98, 0x66, 0x51, 0x74, 0x00, 0x0a, 0x30, 0x75,
	0xa6, 0x04, 0x99, 0x8d, 0x74, 0xf6, 0x02, 0x9a, 0x4a, 0x1c, 0xc7, 0xd9, 0x37, 0x21, 0x3e, 0x4a,
	0x00, 0x7f, 0x9f, 0x6d, 0x28, 0x90, 0x79, 0x26, 0x07, 0x26, 0x94, 0xf8, 0x18, 0x8a, 0x56, 0x3f,
	0x8d, 0x1d, 0x58, 0xc1, 0x5e, 0xb6, 0x1b, 0x01, 0x32, 0xff, 0xed, 0xc8, 0x76, 0xd2, 0xba, 0x20,
	0xd5, 0x50, 0x27, 0x76, 0x2f, 0x46, 0x4b, 0xc1, 0x9e, 0x3b, 0x74, 0x61, 0x67, 0xa8, 0x89, 0xbc,
	0xc9, 0xae, 0x61, 0xe3, 0x01, 0xd1, 0x27, 0x38, 0xfe, 0xc0, 0x3b, 0x92, 0x75, 0xbe, 0x52, 0xa5,
	0x8c, 0xe0, 0x49, 0x4c, 0x88, 0x28, 0xdb, 0x21, 0x0a, 0xde, 0xb2, 0x70, 0x44, 0x46, 0xc2, 0xcf,
	0x89, 0xb0, 0x88, 0x92, 0x09, 0x6c, 0x01, 0x54, 0x82, 0x3f, 0x8b, 0x30, 0x4a, 0x22, 0xbc, 0xcd,
	0x04, 0x1d, 0x5e, 0x1b, 0xc7, 0xd2, 0x40, 0x90, 0xa5, 0xb6, 0xc3, 0x30, 0x12, 0xbf, 0x20, 0xf2,
	0x26, 0x1e, 0x66, 0x8c, 0xe2, 0x81, 0x81, 0x70, 0x40, 0x18, 0x7f, 0xc0, 0x84, 0x01, 0x39, 0xf4,
	0x2a, 0xd3, 0x6d, 0xef, 0x9e, 0xf4, 0xfd, 0x5f, 0xc6, 0x4e, 0x66, 0xe0, 0x29, 0xc2, 0xa9, 0x73,
	0xb7, 0x03, 0x00, 0x73, 0x5c, 0x41, 0x90, 0x16, 0x8a, 0x98, 0xbc, 0x9f, 0xa7, 0x1c, 0x57, 0x10,
	0x0e, 0xa1, 0xa0, 0xcc, 0xbd, 0xcb, 0xd6, 0x27, 0x2b, 0x8f, 0x6d, 0x16, 0x79, 0xbf, 0x8a, 0x87,
	0x3c, 0x4c, 0x6b, 0x8e, 0x6d, 0x46, 0xdc, 0x0f, 0x18, 0x6f, 0x6b, 0x81, 0x12, 0xa7, 0x50, 0x99,
	0x06, 0xf1, 0xeb, 0x18, 0xc1, 0x84, 0xec, 0x4f, 0x00, 0xfe, 0x35, 0xb6, 0xd2, 0xd2, 0x6b, 0x15,
	0x46, 0x20, 0x7e, 0x13, 0xeb, 0x30, 0x09, 0x8f, 0x51, 0xc6, 0x3f, 0x64, 0x9b, 0x5e, 0xe7, 0x06,
	0x82, 0x37, 0x83, 0x26, 0x60, 0x6a, 0x96, 0xa6, 0x32, 0x41, 0xfc, 0x96, 0xb8, 0x1b, 0xf3, 0xd8,
	0x01, 0x42, 0xfc, 0x21, 0x13, 0x17, 0x54, 0xc2, 0xc8, 0x6b, 0xc0, 0x52, 0x16, 0xbf, 0x23, 0xb5,
	0xdb, 0xf3, 0xf8, 0x49, 0x0b, 0xe3, 0xa3, 0x07, 0x47, 0x48, 0x13, 0x9c, 0xcc, 0x1c, 0x04, 0x21,
	0xe3, 0xa3, 0xc7, 0xc0, 0x4e, 0x13, 0xdc, 0x23, 0x07, 0x38, 0xf4, 0x36, 0x68, 0x16, 0x68, 0x9b,
	0x69, 0x39, 0x50, 0x36, 0x3f, 0x33, 0x79, 0x18, 0x89, 0xdf, 0xc7, 0x42, 0x9e, 0x40, 0xbb, 0x2d,
	0xc2, 0xff, 0xdc, 0x61, 0x8b, 0xd3, 0x37, 0xa6, 0xa2, 0x0b, 0x51, 0x71, 0x39, 0x6f, 0xcc, 0xde,
	0x42, 0xfb, 0x56, 0xe7, 0x7f, 0xe9, 0xb0, 0xa5, 0x99, 0xdb, 0x9b, 0x18, 0xd0, 0x6d, 0x71, 0x74,
	0x59, 0xb7, 0xc5, 0x1e, 0xd5, 0x45, 0x1a, 0xbc, 0x7f, 0xed, 0xb0, 0xf5, 0x74, 0xdd, 0x9a, 0xdc,
	0x93, 0x40, 0x64, 0xe4, 0x51, 0xf6, 0x9a, 0x3c, 0x9a, 0xbd, 0xe2, 0xf5, 0xd6, 0xe8, 0xeb, 0x64,
	0x6a, 0x1c, 0x6b, 0x3b, 0x73, 0x36, 0xe8, 0xf3, 0x10, 0x07, 0x56, 0x1e, 0xdf, 0x3f, 0x49, 0x46,
	0xa3, 0xea, 0x2e, 0x5b, 0x07, 0x5b, 0xd5, 0x32, 0x78, 0x55, 0x4f, 0xca, 0x4b, 0xc7, 0x31, 0x88,
	0xc0, 0x89, 0x57, 0x75, 0x5b, 0x58, 0xdb, 0xec, 0x36, 0xd5, 0x46, 0xd1, 0x94, 0x12, 0x46, 0x4d,
	0xc8, 0xdd, 0x99, 0xc5, 0x81, 0x13, 0xb4, 0x28, 0x68, 0xe5, 0x5b, 0x2d, 0xdc, 0x4f, 0x68, 0x1f,
	0xc1, 0xc1, 0x75, 0xfa, 0x3f, 0xe9, 0xfe, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff, 0xb8, 0x6c, 0x4e,
	0x8e, 0x6b, 0x12, 0x00, 0x00,
}
