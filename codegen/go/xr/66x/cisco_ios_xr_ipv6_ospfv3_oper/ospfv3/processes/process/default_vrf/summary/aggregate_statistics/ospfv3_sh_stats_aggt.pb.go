/*
Copyright 2019 Cisco Systems

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ospfv3_sh_stats_aggt.proto

package cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_default_vrf_summary_aggregate_statistics

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Ospfv3ShStatsAggt_KEYS struct {
	ProcessName          string   `protobuf:"bytes,1,opt,name=process_name,json=processName,proto3" json:"process_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Ospfv3ShStatsAggt_KEYS) Reset()         { *m = Ospfv3ShStatsAggt_KEYS{} }
func (m *Ospfv3ShStatsAggt_KEYS) String() string { return proto.CompactTextString(m) }
func (*Ospfv3ShStatsAggt_KEYS) ProtoMessage()    {}
func (*Ospfv3ShStatsAggt_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_7dd35b30d61298fc, []int{0}
}

func (m *Ospfv3ShStatsAggt_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Ospfv3ShStatsAggt_KEYS.Unmarshal(m, b)
}
func (m *Ospfv3ShStatsAggt_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Ospfv3ShStatsAggt_KEYS.Marshal(b, m, deterministic)
}
func (m *Ospfv3ShStatsAggt_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ospfv3ShStatsAggt_KEYS.Merge(m, src)
}
func (m *Ospfv3ShStatsAggt_KEYS) XXX_Size() int {
	return xxx_messageInfo_Ospfv3ShStatsAggt_KEYS.Size(m)
}
func (m *Ospfv3ShStatsAggt_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_Ospfv3ShStatsAggt_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_Ospfv3ShStatsAggt_KEYS proto.InternalMessageInfo

func (m *Ospfv3ShStatsAggt_KEYS) GetProcessName() string {
	if m != nil {
		return m.ProcessName
	}
	return ""
}

type Ospfv3ShStatsAggt struct {
	NeighborNumber          uint32   `protobuf:"varint,50,opt,name=neighbor_number,json=neighborNumber,proto3" json:"neighbor_number,omitempty"`
	AdjacentNeighborNumber  uint32   `protobuf:"varint,51,opt,name=adjacent_neighbor_number,json=adjacentNeighborNumber,proto3" json:"adjacent_neighbor_number,omitempty"`
	InterfaceNumber         uint32   `protobuf:"varint,52,opt,name=interface_number,json=interfaceNumber,proto3" json:"interface_number,omitempty"`
	InterfaceUpNumber       uint32   `protobuf:"varint,53,opt,name=interface_up_number,json=interfaceUpNumber,proto3" json:"interface_up_number,omitempty"`
	VirtualLinkUpNumber     uint32   `protobuf:"varint,54,opt,name=virtual_link_up_number,json=virtualLinkUpNumber,proto3" json:"virtual_link_up_number,omitempty"`
	ShamLinkUpNumber        uint32   `protobuf:"varint,55,opt,name=sham_link_up_number,json=shamLinkUpNumber,proto3" json:"sham_link_up_number,omitempty"`
	AreaNumaber             uint32   `protobuf:"varint,56,opt,name=area_numaber,json=areaNumaber,proto3" json:"area_numaber,omitempty"`
	UnknownLsaCount         uint32   `protobuf:"varint,57,opt,name=unknown_lsa_count,json=unknownLsaCount,proto3" json:"unknown_lsa_count,omitempty"`
	RouterLsaCount          uint32   `protobuf:"varint,58,opt,name=router_lsa_count,json=routerLsaCount,proto3" json:"router_lsa_count,omitempty"`
	NetworkLsaCount         uint32   `protobuf:"varint,59,opt,name=network_lsa_count,json=networkLsaCount,proto3" json:"network_lsa_count,omitempty"`
	InterAreaPrefixLsaCount uint32   `protobuf:"varint,60,opt,name=inter_area_prefix_lsa_count,json=interAreaPrefixLsaCount,proto3" json:"inter_area_prefix_lsa_count,omitempty"`
	InterAreaRouterLsaCount uint32   `protobuf:"varint,61,opt,name=inter_area_router_lsa_count,json=interAreaRouterLsaCount,proto3" json:"inter_area_router_lsa_count,omitempty"`
	AseLsaCount             uint32   `protobuf:"varint,62,opt,name=ase_lsa_count,json=aseLsaCount,proto3" json:"ase_lsa_count,omitempty"`
	MospfLsaCount           uint32   `protobuf:"varint,63,opt,name=mospf_lsa_count,json=mospfLsaCount,proto3" json:"mospf_lsa_count,omitempty"`
	Type7AseLsaCount        uint32   `protobuf:"varint,64,opt,name=type7_ase_lsa_count,json=type7AseLsaCount,proto3" json:"type7_ase_lsa_count,omitempty"`
	LinkLsaCount            uint32   `protobuf:"varint,65,opt,name=link_lsa_count,json=linkLsaCount,proto3" json:"link_lsa_count,omitempty"`
	PrefixLsaCount          uint32   `protobuf:"varint,66,opt,name=prefix_lsa_count,json=prefixLsaCount,proto3" json:"prefix_lsa_count,omitempty"`
	Type10LsaCount          uint32   `protobuf:"varint,67,opt,name=type10lsa_count,json=type10lsaCount,proto3" json:"type10lsa_count,omitempty"`
	GraceLsaCount           uint32   `protobuf:"varint,68,opt,name=grace_lsa_count,json=graceLsaCount,proto3" json:"grace_lsa_count,omitempty"`
	OpaqueLinkLsaCount      uint32   `protobuf:"varint,69,opt,name=opaque_link_lsa_count,json=opaqueLinkLsaCount,proto3" json:"opaque_link_lsa_count,omitempty"`
	OpaqueAreaLsaCount      uint32   `protobuf:"varint,70,opt,name=opaque_area_lsa_count,json=opaqueAreaLsaCount,proto3" json:"opaque_area_lsa_count,omitempty"`
	OpaqueAsLsaCount        uint32   `protobuf:"varint,71,opt,name=opaque_as_lsa_count,json=opaqueAsLsaCount,proto3" json:"opaque_as_lsa_count,omitempty"`
	UnknownAreaLsaCount     uint32   `protobuf:"varint,72,opt,name=unknown_area_lsa_count,json=unknownAreaLsaCount,proto3" json:"unknown_area_lsa_count,omitempty"`
	UnknownLinkLsaCount     uint32   `protobuf:"varint,73,opt,name=unknown_link_lsa_count,json=unknownLinkLsaCount,proto3" json:"unknown_link_lsa_count,omitempty"`
	UnknownAsLsaCount       uint32   `protobuf:"varint,74,opt,name=unknown_as_lsa_count,json=unknownAsLsaCount,proto3" json:"unknown_as_lsa_count,omitempty"`
	XXX_NoUnkeyedLiteral    struct{} `json:"-"`
	XXX_unrecognized        []byte   `json:"-"`
	XXX_sizecache           int32    `json:"-"`
}

func (m *Ospfv3ShStatsAggt) Reset()         { *m = Ospfv3ShStatsAggt{} }
func (m *Ospfv3ShStatsAggt) String() string { return proto.CompactTextString(m) }
func (*Ospfv3ShStatsAggt) ProtoMessage()    {}
func (*Ospfv3ShStatsAggt) Descriptor() ([]byte, []int) {
	return fileDescriptor_7dd35b30d61298fc, []int{1}
}

func (m *Ospfv3ShStatsAggt) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Ospfv3ShStatsAggt.Unmarshal(m, b)
}
func (m *Ospfv3ShStatsAggt) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Ospfv3ShStatsAggt.Marshal(b, m, deterministic)
}
func (m *Ospfv3ShStatsAggt) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ospfv3ShStatsAggt.Merge(m, src)
}
func (m *Ospfv3ShStatsAggt) XXX_Size() int {
	return xxx_messageInfo_Ospfv3ShStatsAggt.Size(m)
}
func (m *Ospfv3ShStatsAggt) XXX_DiscardUnknown() {
	xxx_messageInfo_Ospfv3ShStatsAggt.DiscardUnknown(m)
}

var xxx_messageInfo_Ospfv3ShStatsAggt proto.InternalMessageInfo

func (m *Ospfv3ShStatsAggt) GetNeighborNumber() uint32 {
	if m != nil {
		return m.NeighborNumber
	}
	return 0
}

func (m *Ospfv3ShStatsAggt) GetAdjacentNeighborNumber() uint32 {
	if m != nil {
		return m.AdjacentNeighborNumber
	}
	return 0
}

func (m *Ospfv3ShStatsAggt) GetInterfaceNumber() uint32 {
	if m != nil {
		return m.InterfaceNumber
	}
	return 0
}

func (m *Ospfv3ShStatsAggt) GetInterfaceUpNumber() uint32 {
	if m != nil {
		return m.InterfaceUpNumber
	}
	return 0
}

func (m *Ospfv3ShStatsAggt) GetVirtualLinkUpNumber() uint32 {
	if m != nil {
		return m.VirtualLinkUpNumber
	}
	return 0
}

func (m *Ospfv3ShStatsAggt) GetShamLinkUpNumber() uint32 {
	if m != nil {
		return m.ShamLinkUpNumber
	}
	return 0
}

func (m *Ospfv3ShStatsAggt) GetAreaNumaber() uint32 {
	if m != nil {
		return m.AreaNumaber
	}
	return 0
}

func (m *Ospfv3ShStatsAggt) GetUnknownLsaCount() uint32 {
	if m != nil {
		return m.UnknownLsaCount
	}
	return 0
}

func (m *Ospfv3ShStatsAggt) GetRouterLsaCount() uint32 {
	if m != nil {
		return m.RouterLsaCount
	}
	return 0
}

func (m *Ospfv3ShStatsAggt) GetNetworkLsaCount() uint32 {
	if m != nil {
		return m.NetworkLsaCount
	}
	return 0
}

func (m *Ospfv3ShStatsAggt) GetInterAreaPrefixLsaCount() uint32 {
	if m != nil {
		return m.InterAreaPrefixLsaCount
	}
	return 0
}

func (m *Ospfv3ShStatsAggt) GetInterAreaRouterLsaCount() uint32 {
	if m != nil {
		return m.InterAreaRouterLsaCount
	}
	return 0
}

func (m *Ospfv3ShStatsAggt) GetAseLsaCount() uint32 {
	if m != nil {
		return m.AseLsaCount
	}
	return 0
}

func (m *Ospfv3ShStatsAggt) GetMospfLsaCount() uint32 {
	if m != nil {
		return m.MospfLsaCount
	}
	return 0
}

func (m *Ospfv3ShStatsAggt) GetType7AseLsaCount() uint32 {
	if m != nil {
		return m.Type7AseLsaCount
	}
	return 0
}

func (m *Ospfv3ShStatsAggt) GetLinkLsaCount() uint32 {
	if m != nil {
		return m.LinkLsaCount
	}
	return 0
}

func (m *Ospfv3ShStatsAggt) GetPrefixLsaCount() uint32 {
	if m != nil {
		return m.PrefixLsaCount
	}
	return 0
}

func (m *Ospfv3ShStatsAggt) GetType10LsaCount() uint32 {
	if m != nil {
		return m.Type10LsaCount
	}
	return 0
}

func (m *Ospfv3ShStatsAggt) GetGraceLsaCount() uint32 {
	if m != nil {
		return m.GraceLsaCount
	}
	return 0
}

func (m *Ospfv3ShStatsAggt) GetOpaqueLinkLsaCount() uint32 {
	if m != nil {
		return m.OpaqueLinkLsaCount
	}
	return 0
}

func (m *Ospfv3ShStatsAggt) GetOpaqueAreaLsaCount() uint32 {
	if m != nil {
		return m.OpaqueAreaLsaCount
	}
	return 0
}

func (m *Ospfv3ShStatsAggt) GetOpaqueAsLsaCount() uint32 {
	if m != nil {
		return m.OpaqueAsLsaCount
	}
	return 0
}

func (m *Ospfv3ShStatsAggt) GetUnknownAreaLsaCount() uint32 {
	if m != nil {
		return m.UnknownAreaLsaCount
	}
	return 0
}

func (m *Ospfv3ShStatsAggt) GetUnknownLinkLsaCount() uint32 {
	if m != nil {
		return m.UnknownLinkLsaCount
	}
	return 0
}

func (m *Ospfv3ShStatsAggt) GetUnknownAsLsaCount() uint32 {
	if m != nil {
		return m.UnknownAsLsaCount
	}
	return 0
}

func init() {
	proto.RegisterType((*Ospfv3ShStatsAggt_KEYS)(nil), "cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.default_vrf.summary.aggregate_statistics.ospfv3_sh_stats_aggt_KEYS")
	proto.RegisterType((*Ospfv3ShStatsAggt)(nil), "cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.default_vrf.summary.aggregate_statistics.ospfv3_sh_stats_aggt")
}

func init() { proto.RegisterFile("ospfv3_sh_stats_aggt.proto", fileDescriptor_7dd35b30d61298fc) }

var fileDescriptor_7dd35b30d61298fc = []byte{
	// 587 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x94, 0xdf, 0x6f, 0xd3, 0x3e,
	0x10, 0xc0, 0xb5, 0x97, 0xaf, 0xb4, 0x5b, 0xbb, 0xb6, 0xe9, 0xbe, 0xa5, 0xc0, 0xcb, 0x56, 0x21,
	0x56, 0x26, 0x2d, 0x30, 0x0a, 0xdb, 0x80, 0x31, 0x28, 0x63, 0xfc, 0xac, 0x2a, 0x54, 0xc4, 0x03,
	0x4f, 0x96, 0x9b, 0xb9, 0x69, 0x68, 0x63, 0x07, 0xdb, 0xe9, 0xb6, 0x3f, 0x88, 0xff, 0x13, 0xc5,
	0x76, 0x1c, 0x27, 0x1b, 0x6f, 0xd5, 0xdd, 0xe7, 0x73, 0x77, 0x3e, 0x3b, 0x85, 0x7b, 0x4c, 0x24,
	0xb3, 0xd5, 0x00, 0x89, 0x39, 0x12, 0x12, 0x4b, 0x81, 0x70, 0x18, 0x4a, 0x3f, 0xe1, 0x4c, 0x32,
	0x0f, 0x05, 0x91, 0x08, 0x18, 0x8a, 0x98, 0x40, 0x57, 0x1c, 0x45, 0xc9, 0xea, 0x10, 0x19, 0x9a,
	0x25, 0x84, 0xfb, 0xfa, 0x77, 0xc6, 0x06, 0x44, 0x08, 0x22, 0xf2, 0x5f, 0xfe, 0x05, 0x99, 0xe1,
	0x74, 0x29, 0xd1, 0x8a, 0xcf, 0x7c, 0x91, 0xc6, 0x31, 0xe6, 0xd7, 0x3e, 0x0e, 0x43, 0x4e, 0x42,
	0x2c, 0x89, 0x6a, 0x13, 0x09, 0x19, 0x05, 0xa2, 0x77, 0x0a, 0x77, 0x6f, 0x6b, 0x8f, 0xbe, 0x9e,
	0xff, 0xfc, 0xee, 0xed, 0x40, 0xcd, 0x14, 0x44, 0x14, 0xc7, 0xa4, 0xbb, 0xb6, 0xbd, 0xd6, 0x5f,
	0x9f, 0x6c, 0x98, 0xd8, 0x18, 0xc7, 0xa4, 0xf7, 0x67, 0x1d, 0xb6, 0x6e, 0x2b, 0xe0, 0xed, 0x42,
	0x83, 0x92, 0x28, 0x9c, 0x4f, 0x19, 0x47, 0x34, 0x8d, 0xa7, 0x84, 0x77, 0x9f, 0x6e, 0xaf, 0xf5,
	0xeb, 0x93, 0xcd, 0x3c, 0x3c, 0x56, 0x51, 0xef, 0x18, 0xba, 0xf8, 0xe2, 0x17, 0x0e, 0x08, 0x95,
	0xa8, 0x6a, 0x0c, 0x94, 0xd1, 0xc9, 0xf3, 0xe3, 0xb2, 0xf9, 0x08, 0x9a, 0x11, 0x95, 0x84, 0xcf,
	0x70, 0x40, 0x72, 0xe3, 0x99, 0x32, 0x1a, 0x36, 0x6e, 0x50, 0x1f, 0xda, 0x05, 0x9a, 0x26, 0x39,
	0xfd, 0x5c, 0xd1, 0x2d, 0x9b, 0xfa, 0x91, 0x18, 0x7e, 0x00, 0x9d, 0x55, 0xc4, 0x65, 0x8a, 0x97,
	0x68, 0x19, 0xd1, 0x85, 0xa3, 0x1c, 0x2a, 0xa5, 0x6d, 0xb2, 0xa3, 0x88, 0x2e, 0xac, 0xb4, 0x0f,
	0x6d, 0x31, 0xc7, 0x71, 0xd5, 0x38, 0x52, 0x46, 0x33, 0x4b, 0x95, 0xf0, 0x1d, 0xa8, 0x61, 0x4e,
	0x70, 0x86, 0xe1, 0x8c, 0x3b, 0x56, 0xdc, 0x46, 0x16, 0x1b, 0xeb, 0x90, 0xb7, 0x07, 0xad, 0x94,
	0x2e, 0x28, 0xbb, 0xa4, 0x68, 0x29, 0x30, 0x0a, 0x58, 0x4a, 0x65, 0xf7, 0x85, 0x3e, 0xa2, 0x49,
	0x8c, 0x04, 0x3e, 0xcb, 0xc2, 0x5e, 0x1f, 0x9a, 0x9c, 0xa5, 0x92, 0x70, 0x07, 0x7d, 0xa9, 0x37,
	0xae, 0xe3, 0x96, 0xdc, 0x83, 0x16, 0x25, 0xf2, 0x92, 0xf1, 0x85, 0x83, 0xbe, 0xd2, 0x55, 0x4d,
	0xc2, 0xb2, 0x27, 0x70, 0x5f, 0x6d, 0x07, 0xa9, 0x51, 0x13, 0x4e, 0x66, 0xd1, 0x95, 0x63, 0x9d,
	0x28, 0xeb, 0x8e, 0x42, 0x86, 0x9c, 0xe0, 0x6f, 0x0a, 0xf8, 0x87, 0x7d, 0x63, 0xbc, 0xd7, 0x15,
	0x7b, 0x52, 0x9e, 0xb3, 0x07, 0x75, 0x2c, 0x88, 0xc3, 0x9f, 0x9a, 0x0d, 0x09, 0x62, 0x99, 0x87,
	0xd0, 0x88, 0xb3, 0xf7, 0xe7, 0x50, 0x6f, 0x14, 0x55, 0x57, 0x61, 0xcb, 0xed, 0x43, 0x5b, 0x5e,
	0x27, 0xe4, 0x08, 0x95, 0x2b, 0xbe, 0xd5, 0x77, 0xa3, 0x52, 0x43, 0xa7, 0xec, 0x03, 0xd8, 0x54,
	0xb7, 0x58, 0x90, 0x43, 0x45, 0xd6, 0xb2, 0xa8, 0xbb, 0xf2, 0x1b, 0x1b, 0x79, 0xa7, 0x57, 0x9e,
	0x94, 0x17, 0xb1, 0x0b, 0x8d, 0xac, 0xc7, 0xc1, 0x93, 0x02, 0x3c, 0xd3, 0xa0, 0x0d, 0xdb, 0xf3,
	0x84, 0x3c, 0x7b, 0xa4, 0x05, 0xf8, 0x5e, 0x9f, 0x47, 0x85, 0x6d, 0xc1, 0x03, 0xf8, 0x9f, 0x25,
	0xf8, 0x77, 0x4a, 0x50, 0x65, 0xce, 0x73, 0x45, 0x7b, 0x3a, 0x39, 0x72, 0xa7, 0x2d, 0x14, 0x75,
	0x1b, 0x85, 0xf2, 0xc1, 0x55, 0xb2, 0x7b, 0x70, 0xb7, 0x96, 0x2b, 0xc2, 0x11, 0x3e, 0xea, 0xad,
	0x19, 0x41, 0x58, 0x7c, 0x00, 0x9d, 0xfc, 0xb9, 0x56, 0x5a, 0x7c, 0xd2, 0x5f, 0x8d, 0xc9, 0x96,
	0x7a, 0x38, 0x52, 0xe5, 0x28, 0x9f, 0x4b, 0x52, 0xe9, 0x2c, 0x8f, 0x61, 0xcb, 0x76, 0x72, 0x27,
	0xfb, 0xa2, 0x3f, 0xe8, 0xbc, 0x8f, 0x1d, 0x6d, 0xfa, 0x9f, 0xfa, 0x3f, 0x1d, 0xfc, 0x0d, 0x00,
	0x00, 0xff, 0xff, 0xd8, 0x14, 0xbb, 0xe6, 0x6d, 0x05, 0x00, 0x00,
}
