/*
Copyright 2019 Cisco Systems

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: vrrp_vrouter_info.proto

package cisco_ios_xr_ipv4_vrrp_oper_vrrp_ipv6_virtual_routers_virtual_router

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type VrrpVrouterInfo_KEYS struct {
	InterfaceName        string   `protobuf:"bytes,1,opt,name=interface_name,json=interfaceName,proto3" json:"interface_name,omitempty"`
	VirtualRouterId      uint32   `protobuf:"varint,2,opt,name=virtual_router_id,json=virtualRouterId,proto3" json:"virtual_router_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VrrpVrouterInfo_KEYS) Reset()         { *m = VrrpVrouterInfo_KEYS{} }
func (m *VrrpVrouterInfo_KEYS) String() string { return proto.CompactTextString(m) }
func (*VrrpVrouterInfo_KEYS) ProtoMessage()    {}
func (*VrrpVrouterInfo_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_d1ae68bde8871189, []int{0}
}

func (m *VrrpVrouterInfo_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VrrpVrouterInfo_KEYS.Unmarshal(m, b)
}
func (m *VrrpVrouterInfo_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VrrpVrouterInfo_KEYS.Marshal(b, m, deterministic)
}
func (m *VrrpVrouterInfo_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VrrpVrouterInfo_KEYS.Merge(m, src)
}
func (m *VrrpVrouterInfo_KEYS) XXX_Size() int {
	return xxx_messageInfo_VrrpVrouterInfo_KEYS.Size(m)
}
func (m *VrrpVrouterInfo_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_VrrpVrouterInfo_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_VrrpVrouterInfo_KEYS proto.InternalMessageInfo

func (m *VrrpVrouterInfo_KEYS) GetInterfaceName() string {
	if m != nil {
		return m.InterfaceName
	}
	return ""
}

func (m *VrrpVrouterInfo_KEYS) GetVirtualRouterId() uint32 {
	if m != nil {
		return m.VirtualRouterId
	}
	return 0
}

type Ipv6BagAddr_ struct {
	Ipv6Address          string   `protobuf:"bytes,1,opt,name=ipv6_address,json=ipv6Address,proto3" json:"ipv6_address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Ipv6BagAddr_) Reset()         { *m = Ipv6BagAddr_{} }
func (m *Ipv6BagAddr_) String() string { return proto.CompactTextString(m) }
func (*Ipv6BagAddr_) ProtoMessage()    {}
func (*Ipv6BagAddr_) Descriptor() ([]byte, []int) {
	return fileDescriptor_d1ae68bde8871189, []int{1}
}

func (m *Ipv6BagAddr_) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Ipv6BagAddr_.Unmarshal(m, b)
}
func (m *Ipv6BagAddr_) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Ipv6BagAddr_.Marshal(b, m, deterministic)
}
func (m *Ipv6BagAddr_) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ipv6BagAddr_.Merge(m, src)
}
func (m *Ipv6BagAddr_) XXX_Size() int {
	return xxx_messageInfo_Ipv6BagAddr_.Size(m)
}
func (m *Ipv6BagAddr_) XXX_DiscardUnknown() {
	xxx_messageInfo_Ipv6BagAddr_.DiscardUnknown(m)
}

var xxx_messageInfo_Ipv6BagAddr_ proto.InternalMessageInfo

func (m *Ipv6BagAddr_) GetIpv6Address() string {
	if m != nil {
		return m.Ipv6Address
	}
	return ""
}

type VrrpTrackitemInfo struct {
	Interface            string   `protobuf:"bytes,1,opt,name=interface,proto3" json:"interface,omitempty"`
	VirtualRouterIdXr    uint32   `protobuf:"varint,2,opt,name=virtual_router_id_xr,json=virtualRouterIdXr,proto3" json:"virtual_router_id_xr,omitempty"`
	TrackedItemType      uint32   `protobuf:"varint,3,opt,name=tracked_item_type,json=trackedItemType,proto3" json:"tracked_item_type,omitempty"`
	TrackedItemIndex     string   `protobuf:"bytes,4,opt,name=tracked_item_index,json=trackedItemIndex,proto3" json:"tracked_item_index,omitempty"`
	State                uint32   `protobuf:"varint,5,opt,name=state,proto3" json:"state,omitempty"`
	Priority             uint32   `protobuf:"varint,6,opt,name=priority,proto3" json:"priority,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VrrpTrackitemInfo) Reset()         { *m = VrrpTrackitemInfo{} }
func (m *VrrpTrackitemInfo) String() string { return proto.CompactTextString(m) }
func (*VrrpTrackitemInfo) ProtoMessage()    {}
func (*VrrpTrackitemInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d1ae68bde8871189, []int{2}
}

func (m *VrrpTrackitemInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VrrpTrackitemInfo.Unmarshal(m, b)
}
func (m *VrrpTrackitemInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VrrpTrackitemInfo.Marshal(b, m, deterministic)
}
func (m *VrrpTrackitemInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VrrpTrackitemInfo.Merge(m, src)
}
func (m *VrrpTrackitemInfo) XXX_Size() int {
	return xxx_messageInfo_VrrpTrackitemInfo.Size(m)
}
func (m *VrrpTrackitemInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_VrrpTrackitemInfo.DiscardUnknown(m)
}

var xxx_messageInfo_VrrpTrackitemInfo proto.InternalMessageInfo

func (m *VrrpTrackitemInfo) GetInterface() string {
	if m != nil {
		return m.Interface
	}
	return ""
}

func (m *VrrpTrackitemInfo) GetVirtualRouterIdXr() uint32 {
	if m != nil {
		return m.VirtualRouterIdXr
	}
	return 0
}

func (m *VrrpTrackitemInfo) GetTrackedItemType() uint32 {
	if m != nil {
		return m.TrackedItemType
	}
	return 0
}

func (m *VrrpTrackitemInfo) GetTrackedItemIndex() string {
	if m != nil {
		return m.TrackedItemIndex
	}
	return ""
}

func (m *VrrpTrackitemInfo) GetState() uint32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *VrrpTrackitemInfo) GetPriority() uint32 {
	if m != nil {
		return m.Priority
	}
	return 0
}

type VrrpBagTimestamp struct {
	Seconds              uint32   `protobuf:"varint,1,opt,name=seconds,proto3" json:"seconds,omitempty"`
	Nanoseconds          uint32   `protobuf:"varint,2,opt,name=nanoseconds,proto3" json:"nanoseconds,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VrrpBagTimestamp) Reset()         { *m = VrrpBagTimestamp{} }
func (m *VrrpBagTimestamp) String() string { return proto.CompactTextString(m) }
func (*VrrpBagTimestamp) ProtoMessage()    {}
func (*VrrpBagTimestamp) Descriptor() ([]byte, []int) {
	return fileDescriptor_d1ae68bde8871189, []int{3}
}

func (m *VrrpBagTimestamp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VrrpBagTimestamp.Unmarshal(m, b)
}
func (m *VrrpBagTimestamp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VrrpBagTimestamp.Marshal(b, m, deterministic)
}
func (m *VrrpBagTimestamp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VrrpBagTimestamp.Merge(m, src)
}
func (m *VrrpBagTimestamp) XXX_Size() int {
	return xxx_messageInfo_VrrpBagTimestamp.Size(m)
}
func (m *VrrpBagTimestamp) XXX_DiscardUnknown() {
	xxx_messageInfo_VrrpBagTimestamp.DiscardUnknown(m)
}

var xxx_messageInfo_VrrpBagTimestamp proto.InternalMessageInfo

func (m *VrrpBagTimestamp) GetSeconds() uint32 {
	if m != nil {
		return m.Seconds
	}
	return 0
}

func (m *VrrpBagTimestamp) GetNanoseconds() uint32 {
	if m != nil {
		return m.Nanoseconds
	}
	return 0
}

type VrrpStateChangeInfoType struct {
	OldState             string            `protobuf:"bytes,1,opt,name=old_state,json=oldState,proto3" json:"old_state,omitempty"`
	NewState             string            `protobuf:"bytes,2,opt,name=new_state,json=newState,proto3" json:"new_state,omitempty"`
	Reason               string            `protobuf:"bytes,3,opt,name=reason,proto3" json:"reason,omitempty"`
	Time                 *VrrpBagTimestamp `protobuf:"bytes,4,opt,name=time,proto3" json:"time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *VrrpStateChangeInfoType) Reset()         { *m = VrrpStateChangeInfoType{} }
func (m *VrrpStateChangeInfoType) String() string { return proto.CompactTextString(m) }
func (*VrrpStateChangeInfoType) ProtoMessage()    {}
func (*VrrpStateChangeInfoType) Descriptor() ([]byte, []int) {
	return fileDescriptor_d1ae68bde8871189, []int{4}
}

func (m *VrrpStateChangeInfoType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VrrpStateChangeInfoType.Unmarshal(m, b)
}
func (m *VrrpStateChangeInfoType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VrrpStateChangeInfoType.Marshal(b, m, deterministic)
}
func (m *VrrpStateChangeInfoType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VrrpStateChangeInfoType.Merge(m, src)
}
func (m *VrrpStateChangeInfoType) XXX_Size() int {
	return xxx_messageInfo_VrrpStateChangeInfoType.Size(m)
}
func (m *VrrpStateChangeInfoType) XXX_DiscardUnknown() {
	xxx_messageInfo_VrrpStateChangeInfoType.DiscardUnknown(m)
}

var xxx_messageInfo_VrrpStateChangeInfoType proto.InternalMessageInfo

func (m *VrrpStateChangeInfoType) GetOldState() string {
	if m != nil {
		return m.OldState
	}
	return ""
}

func (m *VrrpStateChangeInfoType) GetNewState() string {
	if m != nil {
		return m.NewState
	}
	return ""
}

func (m *VrrpStateChangeInfoType) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *VrrpStateChangeInfoType) GetTime() *VrrpBagTimestamp {
	if m != nil {
		return m.Time
	}
	return nil
}

type VrrpVrouterInfo struct {
	InterfaceNameXr                string                     `protobuf:"bytes,50,opt,name=interface_name_xr,json=interfaceNameXr,proto3" json:"interface_name_xr,omitempty"`
	VirtualRouterIdXr              uint32                     `protobuf:"varint,51,opt,name=virtual_router_id_xr,json=virtualRouterIdXr,proto3" json:"virtual_router_id_xr,omitempty"`
	Version                        uint32                     `protobuf:"varint,52,opt,name=version,proto3" json:"version,omitempty"`
	AddressFamily                  string                     `protobuf:"bytes,53,opt,name=address_family,json=addressFamily,proto3" json:"address_family,omitempty"`
	SessionName                    string                     `protobuf:"bytes,54,opt,name=session_name,json=sessionName,proto3" json:"session_name,omitempty"`
	Slaves                         uint32                     `protobuf:"varint,55,opt,name=slaves,proto3" json:"slaves,omitempty"`
	IsSlave                        bool                       `protobuf:"varint,56,opt,name=is_slave,json=isSlave,proto3" json:"is_slave,omitempty"`
	FollowedSessionName            string                     `protobuf:"bytes,57,opt,name=followed_session_name,json=followedSessionName,proto3" json:"followed_session_name,omitempty"`
	SecondaryAddressCount          uint32                     `protobuf:"varint,58,opt,name=secondary_address_count,json=secondaryAddressCount,proto3" json:"secondary_address_count,omitempty"`
	OperationalAddressCount        uint32                     `protobuf:"varint,59,opt,name=operational_address_count,json=operationalAddressCount,proto3" json:"operational_address_count,omitempty"`
	OperationalAddress             []string                   `protobuf:"bytes,60,rep,name=operational_address,json=operationalAddress,proto3" json:"operational_address,omitempty"`
	PrimaryVirtualIp               string                     `protobuf:"bytes,61,opt,name=primary_virtual_ip,json=primaryVirtualIp,proto3" json:"primary_virtual_ip,omitempty"`
	Ipv6OperationalAddress         []*Ipv6BagAddr_            `protobuf:"bytes,62,rep,name=ipv6_operational_address,json=ipv6OperationalAddress,proto3" json:"ipv6_operational_address,omitempty"`
	ConfiguredDownAddressCount     uint32                     `protobuf:"varint,63,opt,name=configured_down_address_count,json=configuredDownAddressCount,proto3" json:"configured_down_address_count,omitempty"`
	Ipv4ConfiguredDownAddress      []string                   `protobuf:"bytes,64,rep,name=ipv4_configured_down_address,json=ipv4ConfiguredDownAddress,proto3" json:"ipv4_configured_down_address,omitempty"`
	Ipv6ConfiguredDownAddress      []*Ipv6BagAddr_            `protobuf:"bytes,65,rep,name=ipv6_configured_down_address,json=ipv6ConfiguredDownAddress,proto3" json:"ipv6_configured_down_address,omitempty"`
	VirtualLinklocalIpv6Address    string                     `protobuf:"bytes,66,opt,name=virtual_linklocal_ipv6_address,json=virtualLinklocalIpv6Address,proto3" json:"virtual_linklocal_ipv6_address,omitempty"`
	PrimaryState                   string                     `protobuf:"bytes,67,opt,name=primary_state,json=primaryState,proto3" json:"primary_state,omitempty"`
	MasterIpAddress                string                     `protobuf:"bytes,68,opt,name=master_ip_address,json=masterIpAddress,proto3" json:"master_ip_address,omitempty"`
	MasterIpv6Address              string                     `protobuf:"bytes,69,opt,name=master_ipv6_address,json=masterIpv6Address,proto3" json:"master_ipv6_address,omitempty"`
	MasterPriority                 uint32                     `protobuf:"varint,70,opt,name=master_priority,json=masterPriority,proto3" json:"master_priority,omitempty"`
	VrrpState                      string                     `protobuf:"bytes,71,opt,name=vrrp_state,json=vrrpState,proto3" json:"vrrp_state,omitempty"`
	AuthenticationType             string                     `protobuf:"bytes,72,opt,name=authentication_type,json=authenticationType,proto3" json:"authentication_type,omitempty"`
	AuthenticationString           string                     `protobuf:"bytes,73,opt,name=authentication_string,json=authenticationString,proto3" json:"authentication_string,omitempty"`
	ConfiguredAdvertizeTime        uint32                     `protobuf:"varint,74,opt,name=configured_advertize_time,json=configuredAdvertizeTime,proto3" json:"configured_advertize_time,omitempty"`
	OperAdvertizeTime              uint32                     `protobuf:"varint,75,opt,name=oper_advertize_time,json=operAdvertizeTime,proto3" json:"oper_advertize_time,omitempty"`
	MinDelayTime                   uint32                     `protobuf:"varint,76,opt,name=min_delay_time,json=minDelayTime,proto3" json:"min_delay_time,omitempty"`
	ReloadDelayTime                uint32                     `protobuf:"varint,77,opt,name=reload_delay_time,json=reloadDelayTime,proto3" json:"reload_delay_time,omitempty"`
	DelayTimerFlag                 bool                       `protobuf:"varint,78,opt,name=delay_timer_flag,json=delayTimerFlag,proto3" json:"delay_timer_flag,omitempty"`
	DelayTimerSecs                 uint32                     `protobuf:"varint,79,opt,name=delay_timer_secs,json=delayTimerSecs,proto3" json:"delay_timer_secs,omitempty"`
	DelayTimerMsecs                uint32                     `protobuf:"varint,80,opt,name=delay_timer_msecs,json=delayTimerMsecs,proto3" json:"delay_timer_msecs,omitempty"`
	AuthenticationFlag             bool                       `protobuf:"varint,81,opt,name=authentication_flag,json=authenticationFlag,proto3" json:"authentication_flag,omitempty"`
	ForceTimerFlag                 bool                       `protobuf:"varint,82,opt,name=force_timer_flag,json=forceTimerFlag,proto3" json:"force_timer_flag,omitempty"`
	PreemptFlag                    bool                       `protobuf:"varint,83,opt,name=preempt_flag,json=preemptFlag,proto3" json:"preempt_flag,omitempty"`
	IpAddressOwnerFlag             bool                       `protobuf:"varint,84,opt,name=ip_address_owner_flag,json=ipAddressOwnerFlag,proto3" json:"ip_address_owner_flag,omitempty"`
	IsAcceptMode                   bool                       `protobuf:"varint,85,opt,name=is_accept_mode,json=isAcceptMode,proto3" json:"is_accept_mode,omitempty"`
	PreemptDelayTime               uint32                     `protobuf:"varint,86,opt,name=preempt_delay_time,json=preemptDelayTime,proto3" json:"preempt_delay_time,omitempty"`
	ConfiguredPriority             uint32                     `protobuf:"varint,87,opt,name=configured_priority,json=configuredPriority,proto3" json:"configured_priority,omitempty"`
	OperationalPriority            uint32                     `protobuf:"varint,88,opt,name=operational_priority,json=operationalPriority,proto3" json:"operational_priority,omitempty"`
	PriorityDecrement              uint32                     `protobuf:"varint,89,opt,name=priority_decrement,json=priorityDecrement,proto3" json:"priority_decrement,omitempty"`
	TrackedInterfaceCount          uint32                     `protobuf:"varint,90,opt,name=tracked_interface_count,json=trackedInterfaceCount,proto3" json:"tracked_interface_count,omitempty"`
	TrackedInterfaceUpCount        uint32                     `protobuf:"varint,91,opt,name=tracked_interface_up_count,json=trackedInterfaceUpCount,proto3" json:"tracked_interface_up_count,omitempty"`
	TrackedItemCount               uint32                     `protobuf:"varint,92,opt,name=tracked_item_count,json=trackedItemCount,proto3" json:"tracked_item_count,omitempty"`
	TrackedItemUpCount             uint32                     `protobuf:"varint,93,opt,name=tracked_item_up_count,json=trackedItemUpCount,proto3" json:"tracked_item_up_count,omitempty"`
	TrackItemInfo                  []*VrrpTrackitemInfo       `protobuf:"bytes,94,rep,name=track_item_info,json=trackItemInfo,proto3" json:"track_item_info,omitempty"`
	TimeInCurrentState             uint32                     `protobuf:"varint,95,opt,name=time_in_current_state,json=timeInCurrentState,proto3" json:"time_in_current_state,omitempty"`
	StateChangeCount               uint32                     `protobuf:"varint,96,opt,name=state_change_count,json=stateChangeCount,proto3" json:"state_change_count,omitempty"`
	TimeVrouterUp                  uint32                     `protobuf:"varint,97,opt,name=time_vrouter_up,json=timeVrouterUp,proto3" json:"time_vrouter_up,omitempty"`
	MasterCount                    uint32                     `protobuf:"varint,98,opt,name=master_count,json=masterCount,proto3" json:"master_count,omitempty"`
	AdvertsReceivedCount           uint32                     `protobuf:"varint,99,opt,name=adverts_received_count,json=advertsReceivedCount,proto3" json:"adverts_received_count,omitempty"`
	AdvertIntervalErrorCount       uint32                     `protobuf:"varint,100,opt,name=advert_interval_error_count,json=advertIntervalErrorCount,proto3" json:"advert_interval_error_count,omitempty"`
	AdvertsSentCount               uint32                     `protobuf:"varint,101,opt,name=adverts_sent_count,json=advertsSentCount,proto3" json:"adverts_sent_count,omitempty"`
	AuthenticationFailCount        uint32                     `protobuf:"varint,102,opt,name=authentication_fail_count,json=authenticationFailCount,proto3" json:"authentication_fail_count,omitempty"`
	TtlErrorCount                  uint32                     `protobuf:"varint,103,opt,name=ttl_error_count,json=ttlErrorCount,proto3" json:"ttl_error_count,omitempty"`
	PriorityZeroReceivedCount      uint32                     `protobuf:"varint,104,opt,name=priority_zero_received_count,json=priorityZeroReceivedCount,proto3" json:"priority_zero_received_count,omitempty"`
	PriorityZeroSentCount          uint32                     `protobuf:"varint,105,opt,name=priority_zero_sent_count,json=priorityZeroSentCount,proto3" json:"priority_zero_sent_count,omitempty"`
	InvalidPacketCount             uint32                     `protobuf:"varint,106,opt,name=invalid_packet_count,json=invalidPacketCount,proto3" json:"invalid_packet_count,omitempty"`
	AddressListErrorCount          uint32                     `protobuf:"varint,107,opt,name=address_list_error_count,json=addressListErrorCount,proto3" json:"address_list_error_count,omitempty"`
	InvalidAuthTypeCount           uint32                     `protobuf:"varint,108,opt,name=invalid_auth_type_count,json=invalidAuthTypeCount,proto3" json:"invalid_auth_type_count,omitempty"`
	AuthTypeMismatchCount          uint32                     `protobuf:"varint,109,opt,name=auth_type_mismatch_count,json=authTypeMismatchCount,proto3" json:"auth_type_mismatch_count,omitempty"`
	PktLengthErrorsCount           uint32                     `protobuf:"varint,110,opt,name=pkt_length_errors_count,json=pktLengthErrorsCount,proto3" json:"pkt_length_errors_count,omitempty"`
	TimeStatsDiscontinuity         uint32                     `protobuf:"varint,111,opt,name=time_stats_discontinuity,json=timeStatsDiscontinuity,proto3" json:"time_stats_discontinuity,omitempty"`
	BfdSessionState                string                     `protobuf:"bytes,112,opt,name=bfd_session_state,json=bfdSessionState,proto3" json:"bfd_session_state,omitempty"`
	BfdInterval                    uint32                     `protobuf:"varint,113,opt,name=bfd_interval,json=bfdInterval,proto3" json:"bfd_interval,omitempty"`
	BfdMultiplier                  uint32                     `protobuf:"varint,114,opt,name=bfd_multiplier,json=bfdMultiplier,proto3" json:"bfd_multiplier,omitempty"`
	BfdCfgRemoteIp                 string                     `protobuf:"bytes,115,opt,name=bfd_cfg_remote_ip,json=bfdCfgRemoteIp,proto3" json:"bfd_cfg_remote_ip,omitempty"`
	BfdConfiguredRemoteIpv6Address string                     `protobuf:"bytes,116,opt,name=bfd_configured_remote_ipv6_address,json=bfdConfiguredRemoteIpv6Address,proto3" json:"bfd_configured_remote_ipv6_address,omitempty"`
	StateFromCheckpoint            bool                       `protobuf:"varint,117,opt,name=state_from_checkpoint,json=stateFromCheckpoint,proto3" json:"state_from_checkpoint,omitempty"`
	ResignSentTime                 *VrrpBagTimestamp          `protobuf:"bytes,118,opt,name=resign_sent_time,json=resignSentTime,proto3" json:"resign_sent_time,omitempty"`
	ResignReceivedTime             *VrrpBagTimestamp          `protobuf:"bytes,119,opt,name=resign_received_time,json=resignReceivedTime,proto3" json:"resign_received_time,omitempty"`
	StateChangeHistory             []*VrrpStateChangeInfoType `protobuf:"bytes,120,rep,name=state_change_history,json=stateChangeHistory,proto3" json:"state_change_history,omitempty"`
	InterfaceIpv4Address           string                     `protobuf:"bytes,121,opt,name=interface_ipv4_address,json=interfaceIpv4Address,proto3" json:"interface_ipv4_address,omitempty"`
	InterfaceIpv6Address           string                     `protobuf:"bytes,122,opt,name=interface_ipv6_address,json=interfaceIpv6Address,proto3" json:"interface_ipv6_address,omitempty"`
	VirtualMacAddress              string                     `protobuf:"bytes,123,opt,name=virtual_mac_address,json=virtualMacAddress,proto3" json:"virtual_mac_address,omitempty"`
	VirtualMacAddressState         string                     `protobuf:"bytes,124,opt,name=virtual_mac_address_state,json=virtualMacAddressState,proto3" json:"virtual_mac_address_state,omitempty"`
	XXX_NoUnkeyedLiteral           struct{}                   `json:"-"`
	XXX_unrecognized               []byte                     `json:"-"`
	XXX_sizecache                  int32                      `json:"-"`
}

func (m *VrrpVrouterInfo) Reset()         { *m = VrrpVrouterInfo{} }
func (m *VrrpVrouterInfo) String() string { return proto.CompactTextString(m) }
func (*VrrpVrouterInfo) ProtoMessage()    {}
func (*VrrpVrouterInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d1ae68bde8871189, []int{5}
}

func (m *VrrpVrouterInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VrrpVrouterInfo.Unmarshal(m, b)
}
func (m *VrrpVrouterInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VrrpVrouterInfo.Marshal(b, m, deterministic)
}
func (m *VrrpVrouterInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VrrpVrouterInfo.Merge(m, src)
}
func (m *VrrpVrouterInfo) XXX_Size() int {
	return xxx_messageInfo_VrrpVrouterInfo.Size(m)
}
func (m *VrrpVrouterInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_VrrpVrouterInfo.DiscardUnknown(m)
}

var xxx_messageInfo_VrrpVrouterInfo proto.InternalMessageInfo

func (m *VrrpVrouterInfo) GetInterfaceNameXr() string {
	if m != nil {
		return m.InterfaceNameXr
	}
	return ""
}

func (m *VrrpVrouterInfo) GetVirtualRouterIdXr() uint32 {
	if m != nil {
		return m.VirtualRouterIdXr
	}
	return 0
}

func (m *VrrpVrouterInfo) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *VrrpVrouterInfo) GetAddressFamily() string {
	if m != nil {
		return m.AddressFamily
	}
	return ""
}

func (m *VrrpVrouterInfo) GetSessionName() string {
	if m != nil {
		return m.SessionName
	}
	return ""
}

func (m *VrrpVrouterInfo) GetSlaves() uint32 {
	if m != nil {
		return m.Slaves
	}
	return 0
}

func (m *VrrpVrouterInfo) GetIsSlave() bool {
	if m != nil {
		return m.IsSlave
	}
	return false
}

func (m *VrrpVrouterInfo) GetFollowedSessionName() string {
	if m != nil {
		return m.FollowedSessionName
	}
	return ""
}

func (m *VrrpVrouterInfo) GetSecondaryAddressCount() uint32 {
	if m != nil {
		return m.SecondaryAddressCount
	}
	return 0
}

func (m *VrrpVrouterInfo) GetOperationalAddressCount() uint32 {
	if m != nil {
		return m.OperationalAddressCount
	}
	return 0
}

func (m *VrrpVrouterInfo) GetOperationalAddress() []string {
	if m != nil {
		return m.OperationalAddress
	}
	return nil
}

func (m *VrrpVrouterInfo) GetPrimaryVirtualIp() string {
	if m != nil {
		return m.PrimaryVirtualIp
	}
	return ""
}

func (m *VrrpVrouterInfo) GetIpv6OperationalAddress() []*Ipv6BagAddr_ {
	if m != nil {
		return m.Ipv6OperationalAddress
	}
	return nil
}

func (m *VrrpVrouterInfo) GetConfiguredDownAddressCount() uint32 {
	if m != nil {
		return m.ConfiguredDownAddressCount
	}
	return 0
}

func (m *VrrpVrouterInfo) GetIpv4ConfiguredDownAddress() []string {
	if m != nil {
		return m.Ipv4ConfiguredDownAddress
	}
	return nil
}

func (m *VrrpVrouterInfo) GetIpv6ConfiguredDownAddress() []*Ipv6BagAddr_ {
	if m != nil {
		return m.Ipv6ConfiguredDownAddress
	}
	return nil
}

func (m *VrrpVrouterInfo) GetVirtualLinklocalIpv6Address() string {
	if m != nil {
		return m.VirtualLinklocalIpv6Address
	}
	return ""
}

func (m *VrrpVrouterInfo) GetPrimaryState() string {
	if m != nil {
		return m.PrimaryState
	}
	return ""
}

func (m *VrrpVrouterInfo) GetMasterIpAddress() string {
	if m != nil {
		return m.MasterIpAddress
	}
	return ""
}

func (m *VrrpVrouterInfo) GetMasterIpv6Address() string {
	if m != nil {
		return m.MasterIpv6Address
	}
	return ""
}

func (m *VrrpVrouterInfo) GetMasterPriority() uint32 {
	if m != nil {
		return m.MasterPriority
	}
	return 0
}

func (m *VrrpVrouterInfo) GetVrrpState() string {
	if m != nil {
		return m.VrrpState
	}
	return ""
}

func (m *VrrpVrouterInfo) GetAuthenticationType() string {
	if m != nil {
		return m.AuthenticationType
	}
	return ""
}

func (m *VrrpVrouterInfo) GetAuthenticationString() string {
	if m != nil {
		return m.AuthenticationString
	}
	return ""
}

func (m *VrrpVrouterInfo) GetConfiguredAdvertizeTime() uint32 {
	if m != nil {
		return m.ConfiguredAdvertizeTime
	}
	return 0
}

func (m *VrrpVrouterInfo) GetOperAdvertizeTime() uint32 {
	if m != nil {
		return m.OperAdvertizeTime
	}
	return 0
}

func (m *VrrpVrouterInfo) GetMinDelayTime() uint32 {
	if m != nil {
		return m.MinDelayTime
	}
	return 0
}

func (m *VrrpVrouterInfo) GetReloadDelayTime() uint32 {
	if m != nil {
		return m.ReloadDelayTime
	}
	return 0
}

func (m *VrrpVrouterInfo) GetDelayTimerFlag() bool {
	if m != nil {
		return m.DelayTimerFlag
	}
	return false
}

func (m *VrrpVrouterInfo) GetDelayTimerSecs() uint32 {
	if m != nil {
		return m.DelayTimerSecs
	}
	return 0
}

func (m *VrrpVrouterInfo) GetDelayTimerMsecs() uint32 {
	if m != nil {
		return m.DelayTimerMsecs
	}
	return 0
}

func (m *VrrpVrouterInfo) GetAuthenticationFlag() bool {
	if m != nil {
		return m.AuthenticationFlag
	}
	return false
}

func (m *VrrpVrouterInfo) GetForceTimerFlag() bool {
	if m != nil {
		return m.ForceTimerFlag
	}
	return false
}

func (m *VrrpVrouterInfo) GetPreemptFlag() bool {
	if m != nil {
		return m.PreemptFlag
	}
	return false
}

func (m *VrrpVrouterInfo) GetIpAddressOwnerFlag() bool {
	if m != nil {
		return m.IpAddressOwnerFlag
	}
	return false
}

func (m *VrrpVrouterInfo) GetIsAcceptMode() bool {
	if m != nil {
		return m.IsAcceptMode
	}
	return false
}

func (m *VrrpVrouterInfo) GetPreemptDelayTime() uint32 {
	if m != nil {
		return m.PreemptDelayTime
	}
	return 0
}

func (m *VrrpVrouterInfo) GetConfiguredPriority() uint32 {
	if m != nil {
		return m.ConfiguredPriority
	}
	return 0
}

func (m *VrrpVrouterInfo) GetOperationalPriority() uint32 {
	if m != nil {
		return m.OperationalPriority
	}
	return 0
}

func (m *VrrpVrouterInfo) GetPriorityDecrement() uint32 {
	if m != nil {
		return m.PriorityDecrement
	}
	return 0
}

func (m *VrrpVrouterInfo) GetTrackedInterfaceCount() uint32 {
	if m != nil {
		return m.TrackedInterfaceCount
	}
	return 0
}

func (m *VrrpVrouterInfo) GetTrackedInterfaceUpCount() uint32 {
	if m != nil {
		return m.TrackedInterfaceUpCount
	}
	return 0
}

func (m *VrrpVrouterInfo) GetTrackedItemCount() uint32 {
	if m != nil {
		return m.TrackedItemCount
	}
	return 0
}

func (m *VrrpVrouterInfo) GetTrackedItemUpCount() uint32 {
	if m != nil {
		return m.TrackedItemUpCount
	}
	return 0
}

func (m *VrrpVrouterInfo) GetTrackItemInfo() []*VrrpTrackitemInfo {
	if m != nil {
		return m.TrackItemInfo
	}
	return nil
}

func (m *VrrpVrouterInfo) GetTimeInCurrentState() uint32 {
	if m != nil {
		return m.TimeInCurrentState
	}
	return 0
}

func (m *VrrpVrouterInfo) GetStateChangeCount() uint32 {
	if m != nil {
		return m.StateChangeCount
	}
	return 0
}

func (m *VrrpVrouterInfo) GetTimeVrouterUp() uint32 {
	if m != nil {
		return m.TimeVrouterUp
	}
	return 0
}

func (m *VrrpVrouterInfo) GetMasterCount() uint32 {
	if m != nil {
		return m.MasterCount
	}
	return 0
}

func (m *VrrpVrouterInfo) GetAdvertsReceivedCount() uint32 {
	if m != nil {
		return m.AdvertsReceivedCount
	}
	return 0
}

func (m *VrrpVrouterInfo) GetAdvertIntervalErrorCount() uint32 {
	if m != nil {
		return m.AdvertIntervalErrorCount
	}
	return 0
}

func (m *VrrpVrouterInfo) GetAdvertsSentCount() uint32 {
	if m != nil {
		return m.AdvertsSentCount
	}
	return 0
}

func (m *VrrpVrouterInfo) GetAuthenticationFailCount() uint32 {
	if m != nil {
		return m.AuthenticationFailCount
	}
	return 0
}

func (m *VrrpVrouterInfo) GetTtlErrorCount() uint32 {
	if m != nil {
		return m.TtlErrorCount
	}
	return 0
}

func (m *VrrpVrouterInfo) GetPriorityZeroReceivedCount() uint32 {
	if m != nil {
		return m.PriorityZeroReceivedCount
	}
	return 0
}

func (m *VrrpVrouterInfo) GetPriorityZeroSentCount() uint32 {
	if m != nil {
		return m.PriorityZeroSentCount
	}
	return 0
}

func (m *VrrpVrouterInfo) GetInvalidPacketCount() uint32 {
	if m != nil {
		return m.InvalidPacketCount
	}
	return 0
}

func (m *VrrpVrouterInfo) GetAddressListErrorCount() uint32 {
	if m != nil {
		return m.AddressListErrorCount
	}
	return 0
}

func (m *VrrpVrouterInfo) GetInvalidAuthTypeCount() uint32 {
	if m != nil {
		return m.InvalidAuthTypeCount
	}
	return 0
}

func (m *VrrpVrouterInfo) GetAuthTypeMismatchCount() uint32 {
	if m != nil {
		return m.AuthTypeMismatchCount
	}
	return 0
}

func (m *VrrpVrouterInfo) GetPktLengthErrorsCount() uint32 {
	if m != nil {
		return m.PktLengthErrorsCount
	}
	return 0
}

func (m *VrrpVrouterInfo) GetTimeStatsDiscontinuity() uint32 {
	if m != nil {
		return m.TimeStatsDiscontinuity
	}
	return 0
}

func (m *VrrpVrouterInfo) GetBfdSessionState() string {
	if m != nil {
		return m.BfdSessionState
	}
	return ""
}

func (m *VrrpVrouterInfo) GetBfdInterval() uint32 {
	if m != nil {
		return m.BfdInterval
	}
	return 0
}

func (m *VrrpVrouterInfo) GetBfdMultiplier() uint32 {
	if m != nil {
		return m.BfdMultiplier
	}
	return 0
}

func (m *VrrpVrouterInfo) GetBfdCfgRemoteIp() string {
	if m != nil {
		return m.BfdCfgRemoteIp
	}
	return ""
}

func (m *VrrpVrouterInfo) GetBfdConfiguredRemoteIpv6Address() string {
	if m != nil {
		return m.BfdConfiguredRemoteIpv6Address
	}
	return ""
}

func (m *VrrpVrouterInfo) GetStateFromCheckpoint() bool {
	if m != nil {
		return m.StateFromCheckpoint
	}
	return false
}

func (m *VrrpVrouterInfo) GetResignSentTime() *VrrpBagTimestamp {
	if m != nil {
		return m.ResignSentTime
	}
	return nil
}

func (m *VrrpVrouterInfo) GetResignReceivedTime() *VrrpBagTimestamp {
	if m != nil {
		return m.ResignReceivedTime
	}
	return nil
}

func (m *VrrpVrouterInfo) GetStateChangeHistory() []*VrrpStateChangeInfoType {
	if m != nil {
		return m.StateChangeHistory
	}
	return nil
}

func (m *VrrpVrouterInfo) GetInterfaceIpv4Address() string {
	if m != nil {
		return m.InterfaceIpv4Address
	}
	return ""
}

func (m *VrrpVrouterInfo) GetInterfaceIpv6Address() string {
	if m != nil {
		return m.InterfaceIpv6Address
	}
	return ""
}

func (m *VrrpVrouterInfo) GetVirtualMacAddress() string {
	if m != nil {
		return m.VirtualMacAddress
	}
	return ""
}

func (m *VrrpVrouterInfo) GetVirtualMacAddressState() string {
	if m != nil {
		return m.VirtualMacAddressState
	}
	return ""
}

func init() {
	proto.RegisterType((*VrrpVrouterInfo_KEYS)(nil), "cisco_ios_xr_ipv4_vrrp_oper.vrrp.ipv6.virtual_routers.virtual_router.vrrp_vrouter_info_KEYS")
	proto.RegisterType((*Ipv6BagAddr_)(nil), "cisco_ios_xr_ipv4_vrrp_oper.vrrp.ipv6.virtual_routers.virtual_router.ipv6_bag_addr_")
	proto.RegisterType((*VrrpTrackitemInfo)(nil), "cisco_ios_xr_ipv4_vrrp_oper.vrrp.ipv6.virtual_routers.virtual_router.vrrp_trackitem_info")
	proto.RegisterType((*VrrpBagTimestamp)(nil), "cisco_ios_xr_ipv4_vrrp_oper.vrrp.ipv6.virtual_routers.virtual_router.vrrp_bag_timestamp")
	proto.RegisterType((*VrrpStateChangeInfoType)(nil), "cisco_ios_xr_ipv4_vrrp_oper.vrrp.ipv6.virtual_routers.virtual_router.vrrp_state_change_info_type")
	proto.RegisterType((*VrrpVrouterInfo)(nil), "cisco_ios_xr_ipv4_vrrp_oper.vrrp.ipv6.virtual_routers.virtual_router.vrrp_vrouter_info")
}

func init() { proto.RegisterFile("vrrp_vrouter_info.proto", fileDescriptor_d1ae68bde8871189) }

var fileDescriptor_d1ae68bde8871189 = []byte{
	// 1823 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x58, 0x5b, 0x77, 0x14, 0xc7,
	0x11, 0x3e, 0x6b, 0x6c, 0x40, 0xa5, 0x0b, 0x68, 0x74, 0x61, 0x84, 0xb0, 0x8f, 0x50, 0x9c, 0x44,
	0xe1, 0x38, 0x22, 0x08, 0x2c, 0xdf, 0xe2, 0x10, 0x45, 0x82, 0x78, 0x6d, 0x64, 0xc8, 0x0a, 0x08,
	0x38, 0x97, 0x4e, 0x6b, 0xa6, 0x77, 0xd5, 0xd1, 0x4c, 0xf7, 0xa4, 0xa7, 0x77, 0x85, 0x48, 0x5e,
	0x92, 0xc7, 0x3c, 0xe4, 0x25, 0x27, 0x3f, 0x2f, 0xff, 0x21, 0x8f, 0x79, 0xf4, 0xe9, 0xaa, 0xee,
	0xb9, 0xec, 0x8a, 0x37, 0xf1, 0xa6, 0xa9, 0xef, 0xfb, 0xba, 0xaa, 0xbb, 0xab, 0xaa, 0x4b, 0x0b,
	0xd7, 0x46, 0xc6, 0x14, 0x6c, 0x64, 0xf4, 0xd0, 0x0a, 0xc3, 0xa4, 0xea, 0xeb, 0xcd, 0xc2, 0x68,
	0xab, 0xa3, 0xbd, 0x44, 0x96, 0x89, 0x66, 0x52, 0x97, 0xec, 0x95, 0x61, 0xb2, 0x18, 0xdd, 0x63,
	0x48, 0xd5, 0x85, 0x30, 0x9b, 0xee, 0xaf, 0x4d, 0x59, 0x8c, 0xb6, 0x37, 0x47, 0xd2, 0xd8, 0x21,
	0xcf, 0x18, 0x2d, 0x50, 0x8e, 0x7d, 0xaf, 0x1f, 0xc3, 0xf2, 0x84, 0x03, 0xf6, 0xcd, 0x83, 0x97,
	0x07, 0xd1, 0x0f, 0x61, 0x4e, 0x2a, 0x2b, 0x4c, 0x9f, 0x27, 0x82, 0x29, 0x9e, 0x8b, 0xb8, 0xb3,
	0xd6, 0xd9, 0x98, 0xea, 0xcd, 0x56, 0xd6, 0x6f, 0x79, 0x2e, 0xa2, 0x5b, 0x30, 0xdf, 0x5e, 0x92,
	0xc9, 0x34, 0x7e, 0x67, 0xad, 0xb3, 0x31, 0xdb, 0xbb, 0xe2, 0x81, 0x1e, 0xda, 0xbb, 0xe9, 0xfa,
	0x5d, 0x98, 0x73, 0x31, 0xb1, 0x43, 0x3e, 0x60, 0x3c, 0x4d, 0x0d, 0x8b, 0x6e, 0xc2, 0x0c, 0x5a,
	0xdc, 0x97, 0x28, 0x4b, 0xef, 0x62, 0xda, 0xd9, 0x76, 0xc8, 0xb4, 0xfe, 0xbf, 0x0e, 0x2c, 0x60,
	0x88, 0xd6, 0xf0, 0xe4, 0x58, 0x5a, 0x91, 0x63, 0x90, 0xd1, 0x0d, 0x98, 0xaa, 0x22, 0xf1, 0xba,
	0xda, 0x10, 0xdd, 0x86, 0xc5, 0x89, 0xb0, 0xd8, 0x2b, 0xe3, 0x23, 0x9b, 0x1f, 0x8b, 0xec, 0x85,
	0x71, 0xfb, 0x40, 0x07, 0x22, 0x65, 0xe8, 0xc3, 0x9e, 0x16, 0x22, 0xbe, 0x40, 0xfb, 0xf0, 0x40,
	0xd7, 0x8a, 0xfc, 0xe9, 0x69, 0x21, 0xa2, 0x8f, 0x20, 0x6a, 0x71, 0xa5, 0x4a, 0xc5, 0xab, 0xf8,
	0x5d, 0x8c, 0xe1, 0x6a, 0x83, 0xdc, 0x75, 0xf6, 0x68, 0x11, 0xde, 0x2b, 0x2d, 0xb7, 0x22, 0x7e,
	0x0f, 0x57, 0xa3, 0x8f, 0xe8, 0x3a, 0x5c, 0x2e, 0x8c, 0xd4, 0x46, 0xda, 0xd3, 0xf8, 0x22, 0x02,
	0xd5, 0xf7, 0xfa, 0x13, 0x88, 0x70, 0xc7, 0xee, 0x9c, 0xac, 0xcc, 0x45, 0x69, 0x79, 0x5e, 0x44,
	0x31, 0x5c, 0x2a, 0x45, 0xa2, 0x55, 0x4a, 0xc7, 0x34, 0xdb, 0x0b, 0x9f, 0xd1, 0x1a, 0x4c, 0x2b,
	0xae, 0x74, 0x40, 0x69, 0x8f, 0x4d, 0xd3, 0xfa, 0x7f, 0x3b, 0xb0, 0x8a, 0x4b, 0xa2, 0x73, 0x96,
	0x1c, 0x71, 0x35, 0x10, 0x74, 0xd9, 0x6e, 0xa3, 0xd1, 0x2a, 0x4c, 0xe9, 0x2c, 0x25, 0xd4, 0x1f,
	0xe6, 0x65, 0x9d, 0xa5, 0x07, 0x18, 0xea, 0x2a, 0x4c, 0x29, 0x71, 0xe2, 0xc1, 0x77, 0x08, 0x54,
	0xe2, 0x84, 0xc0, 0x65, 0xb8, 0x68, 0x04, 0x2f, 0xb5, 0xc2, 0xc3, 0x9a, 0xea, 0xf9, 0xaf, 0x28,
	0x83, 0x77, 0x5d, 0xe8, 0x78, 0x2a, 0xd3, 0x5b, 0x2f, 0x36, 0xcf, 0x23, 0x5b, 0x37, 0x27, 0x4f,
	0xa5, 0x87, 0x5e, 0xd6, 0xff, 0xbf, 0x06, 0xf3, 0x13, 0x79, 0xec, 0xee, 0xb4, 0x9d, 0xc2, 0x2e,
	0x03, 0xb6, 0x30, 0xcc, 0x2b, 0xad, 0x2c, 0x7e, 0x61, 0xde, 0x98, 0x30, 0x77, 0xdf, 0x94, 0x30,
	0x31, 0x5c, 0x1a, 0x09, 0x53, 0x4a, 0xad, 0xe2, 0x7b, 0x74, 0x1d, 0xfe, 0xd3, 0x55, 0x8e, 0xcf,
	0x67, 0xd6, 0xe7, 0xb9, 0xcc, 0x4e, 0xe3, 0x8f, 0xa9, 0x72, 0xbc, 0xf5, 0x21, 0x1a, 0x5d, 0xee,
	0x97, 0xa2, 0x74, 0x0a, 0x2a, 0xaf, 0x6d, 0xca, 0x7d, 0x6f, 0xc3, 0xe2, 0x5a, 0x86, 0x8b, 0x65,
	0xc6, 0x47, 0xa2, 0x8c, 0x3f, 0x41, 0x17, 0xfe, 0x2b, 0x5a, 0x81, 0xcb, 0xb2, 0x64, 0xf8, 0x11,
	0x7f, 0xba, 0xd6, 0xd9, 0xb8, 0xdc, 0xbb, 0x24, 0xcb, 0x03, 0xf7, 0x19, 0x6d, 0xc1, 0x52, 0x5f,
	0x67, 0x99, 0x3e, 0x11, 0x29, 0x6b, 0x2d, 0xff, 0x19, 0x2e, 0xbf, 0x10, 0xc0, 0x83, 0x86, 0x9b,
	0x6d, 0xb8, 0x46, 0x89, 0xc2, 0xcd, 0x69, 0x28, 0x45, 0x96, 0xe8, 0xa1, 0xb2, 0xf1, 0xe7, 0xe8,
	0x77, 0xa9, 0x82, 0x7d, 0x55, 0xee, 0x3a, 0x30, 0xfa, 0x1c, 0x56, 0xdc, 0xfd, 0x71, 0x2b, 0xb5,
	0xe2, 0xd9, 0x98, 0xf2, 0x0b, 0x54, 0x5e, 0x6b, 0x10, 0x5a, 0xda, 0xdb, 0xb0, 0x70, 0x86, 0x36,
	0xfe, 0xf9, 0xda, 0x85, 0x8d, 0xa9, 0x5e, 0x34, 0xa9, 0x72, 0x45, 0x57, 0x18, 0x99, 0xbb, 0x10,
	0xc3, 0x45, 0xc9, 0x22, 0xfe, 0x92, 0x8a, 0xce, 0x23, 0xcf, 0x09, 0xe8, 0x16, 0xd1, 0xbf, 0x3a,
	0x10, 0x63, 0x67, 0x39, 0xcb, 0xc9, 0x2f, 0xd6, 0x2e, 0x6c, 0x4c, 0x6f, 0x3d, 0x3d, 0x9f, 0x9c,
	0x6c, 0x77, 0xb4, 0xde, 0xb2, 0xfb, 0x7e, 0x3c, 0x19, 0xfe, 0x0e, 0xbc, 0x9f, 0x68, 0xd5, 0x97,
	0x83, 0xa1, 0x11, 0x29, 0x4b, 0xf5, 0x89, 0x1a, 0x3b, 0xaf, 0xfb, 0x78, 0x5e, 0xd7, 0x6b, 0xd2,
	0x9e, 0x3e, 0x51, 0xad, 0x23, 0xbb, 0x0f, 0x37, 0x30, 0xc8, 0x37, 0xac, 0x13, 0xff, 0x12, 0xcf,
	0x6e, 0xc5, 0x71, 0x76, 0xcf, 0x5a, 0x25, 0xfa, 0x4f, 0x07, 0x57, 0xd8, 0x7e, 0xe3, 0x0a, 0x3b,
	0x6f, 0xf1, 0x60, 0x5c, 0x5c, 0xdb, 0x67, 0xc7, 0xb5, 0x0b, 0x1f, 0x04, 0x6d, 0x26, 0xd5, 0x71,
	0xa6, 0x13, 0xbc, 0xdc, 0xc6, 0xbb, 0xf0, 0x2b, 0xbc, 0xe6, 0x55, 0xcf, 0x7a, 0x14, 0x48, 0xdd,
	0xfa, 0x9d, 0x88, 0x7e, 0x00, 0xb3, 0x21, 0x3f, 0xa8, 0x53, 0xed, 0xa2, 0x66, 0xc6, 0x1b, 0xa9,
	0x5b, 0xdd, 0x82, 0xf9, 0x9c, 0x97, 0x58, 0xdd, 0x45, 0xb5, 0xf8, 0x1e, 0x75, 0x04, 0x02, 0xba,
	0x45, 0x58, 0x70, 0x13, 0x16, 0x2a, 0x6e, 0x23, 0x94, 0x07, 0xc8, 0x9e, 0x0f, 0xec, 0x3a, 0x80,
	0x1f, 0x83, 0x5f, 0x82, 0x55, 0x8d, 0xfd, 0x21, 0xde, 0xe9, 0x1c, 0x99, 0x9f, 0x78, 0x6b, 0xf4,
	0x3e, 0x40, 0xdd, 0x8b, 0xe3, 0x5f, 0xd3, 0xd3, 0xe5, 0x2c, 0x14, 0xe3, 0x6d, 0x58, 0xe0, 0x43,
	0x7b, 0x24, 0x94, 0x95, 0x09, 0x26, 0x11, 0xbd, 0x45, 0x5f, 0x21, 0x2f, 0x6a, 0x43, 0xf8, 0x1c,
	0xdd, 0x85, 0xa5, 0x31, 0x41, 0x69, 0x8d, 0x54, 0x83, 0xb8, 0x8b, 0x92, 0xc5, 0x36, 0x78, 0x80,
	0x98, 0xab, 0xdd, 0x46, 0x16, 0xf0, 0x74, 0x24, 0x8c, 0x95, 0xaf, 0x05, 0x76, 0xd6, 0xf8, 0x6b,
	0xaa, 0xdd, 0x9a, 0xb0, 0x13, 0xf0, 0xa7, 0x32, 0x17, 0xee, 0x64, 0x5c, 0x2a, 0x8c, 0xab, 0xbe,
	0xa1, 0x56, 0xe9, 0xa0, 0x36, 0xff, 0x43, 0x98, 0xcb, 0xa5, 0x62, 0xa9, 0xc8, 0xf8, 0x29, 0x51,
	0x1f, 0x21, 0x75, 0x26, 0x97, 0x6a, 0xcf, 0x19, 0x91, 0x75, 0x0b, 0xe6, 0x8d, 0xc8, 0x34, 0x4f,
	0x9b, 0xc4, 0x7d, 0x7a, 0x81, 0x09, 0xa8, 0xb9, 0x1b, 0x70, 0xb5, 0x26, 0x19, 0xd6, 0xcf, 0xf8,
	0x20, 0xfe, 0x16, 0x1b, 0xe1, 0x5c, 0x1a, 0x48, 0xe6, 0x61, 0xc6, 0x07, 0xe3, 0xcc, 0x52, 0x24,
	0x65, 0xfc, 0x98, 0xae, 0xa5, 0x66, 0x1e, 0x88, 0xa4, 0x74, 0xfe, 0x9b, 0xcc, 0x1c, 0xa9, 0x4f,
	0xc8, 0x7f, 0x4d, 0xdd, 0x77, 0xe6, 0x33, 0xee, 0x08, 0x43, 0xf8, 0x0d, 0x86, 0x30, 0x76, 0x47,
	0x21, 0x8c, 0xbe, 0x36, 0x89, 0x68, 0x06, 0xdc, 0xa3, 0x80, 0xd1, 0x5e, 0x07, 0x7c, 0x13, 0x66,
	0x0a, 0x23, 0x44, 0x5e, 0x58, 0x62, 0x1d, 0x20, 0x6b, 0xda, 0xdb, 0x90, 0x72, 0x07, 0x96, 0xea,
	0xf4, 0x65, 0xfa, 0x44, 0x85, 0x15, 0x9f, 0x92, 0x7f, 0x19, 0x72, 0xf8, 0xb1, 0x83, 0x50, 0xf2,
	0x21, 0xcc, 0xc9, 0x92, 0xf1, 0x24, 0x11, 0x85, 0x65, 0xb9, 0x4e, 0x45, 0xfc, 0x0c, 0xb9, 0x33,
	0xb2, 0xdc, 0x41, 0xe3, 0xbe, 0x4e, 0x05, 0xf5, 0x58, 0xf2, 0xdd, 0xb8, 0x83, 0xe7, 0x78, 0x06,
	0x57, 0x3d, 0x52, 0x5f, 0xc2, 0x6d, 0x58, 0x68, 0xa4, 0x50, 0x95, 0xf4, 0xbf, 0x45, 0x7a, 0x54,
	0x43, 0x55, 0xe2, 0xdf, 0x81, 0xc5, 0x66, 0x3b, 0xae, 0x14, 0x2f, 0x50, 0xd1, 0x7c, 0x0f, 0x2a,
	0xc9, 0x4f, 0xb1, 0xeb, 0xe3, 0xdf, 0x2c, 0x15, 0x89, 0x11, 0xb9, 0x50, 0x36, 0x7e, 0x49, 0x99,
	0x16, 0x90, 0xbd, 0x00, 0xb8, 0x97, 0xac, 0x9a, 0xcc, 0xaa, 0x97, 0x9f, 0xfa, 0xeb, 0x77, 0xf4,
	0x92, 0x85, 0xf1, 0x2c, 0xa0, 0xd4, 0x5a, 0xbf, 0x80, 0xeb, 0x93, 0xba, 0x61, 0xe1, 0xa5, 0xbf,
	0xa3, 0x72, 0x18, 0x97, 0x3e, 0x2b, 0x48, 0x3c, 0x3e, 0x0e, 0x92, 0xe8, 0xf7, 0x74, 0x6a, 0x8d,
	0x71, 0x90, 0xd8, 0x77, 0x60, 0xa9, 0xc5, 0xae, 0xbc, 0xfc, 0x81, 0xce, 0xad, 0x21, 0x08, 0x0e,
	0xfe, 0xde, 0x01, 0x9a, 0x41, 0x59, 0x35, 0xfe, 0xc6, 0x7f, 0xc4, 0x56, 0xfd, 0xf2, 0x1c, 0xe7,
	0xaa, 0xf6, 0x7c, 0xdd, 0x9b, 0xc5, 0x6f, 0x1a, 0x63, 0xfb, 0x1a, 0xc3, 0x96, 0xb9, 0x9b, 0x19,
	0x59, 0x32, 0x34, 0x46, 0x28, 0xeb, 0xfb, 0x17, 0xf3, 0x61, 0xcb, 0x5c, 0x74, 0xd5, 0x2e, 0x41,
	0xd4, 0xc8, 0x3e, 0x82, 0xa8, 0x35, 0x6e, 0xd2, 0x36, 0xff, 0x44, 0xe7, 0x82, 0xc8, 0x2e, 0x02,
	0xb4, 0xc9, 0x1f, 0xc1, 0x15, 0x74, 0x10, 0x26, 0xb8, 0x61, 0x11, 0x73, 0xa4, 0xce, 0x3a, 0xf3,
	0x73, 0xb2, 0x3e, 0x2b, 0x5c, 0x7d, 0xf8, 0x36, 0x4b, 0xeb, 0x1d, 0xd2, 0xb4, 0x4b, 0x36, 0x5a,
	0xea, 0x1e, 0x2c, 0x53, 0x6b, 0x2a, 0x99, 0x11, 0x89, 0x90, 0x23, 0x91, 0x7a, 0x72, 0x82, 0xe4,
	0x45, 0x8f, 0xf6, 0x3c, 0x48, 0xaa, 0x2f, 0x61, 0x95, 0xec, 0x94, 0x02, 0x23, 0x9e, 0x31, 0x61,
	0x8c, 0x0e, 0x7e, 0x52, 0x94, 0xc6, 0x44, 0xe9, 0x7a, 0xc6, 0x03, 0x47, 0xa8, 0xb2, 0x20, 0x38,
	0x2d, 0xdd, 0xe9, 0x90, 0x4a, 0xd0, 0x6e, 0x3d, 0x72, 0x20, 0x94, 0xad, 0x46, 0xa7, 0xf1, 0x06,
	0xc2, 0x65, 0xe6, 0x45, 0x7d, 0xca, 0xb7, 0xb1, 0x36, 0xc2, 0x65, 0x56, 0x9f, 0x94, 0x6d, 0x07,
	0x37, 0xf0, 0x27, 0x65, 0x9b, 0x11, 0xdd, 0x87, 0x1b, 0x55, 0xed, 0xbc, 0x16, 0x46, 0x8f, 0x1f,
	0xc6, 0x11, 0x8a, 0x56, 0x02, 0xe7, 0x3b, 0x61, 0x74, 0xfb, 0x44, 0x3e, 0x81, 0xb8, 0xbd, 0x40,
	0x63, 0x63, 0x92, 0xca, 0xa9, 0x29, 0xae, 0x77, 0xf7, 0x33, 0x58, 0x94, 0x6a, 0xc4, 0x33, 0x99,
	0xb2, 0xc2, 0x65, 0x73, 0x10, 0xfd, 0x99, 0x72, 0xc5, 0x63, 0x4f, 0x10, 0xaa, 0x5c, 0x85, 0x7e,
	0x96, 0xc9, 0xd2, 0xb6, 0x36, 0x77, 0x4c, 0xae, 0x3c, 0xfe, 0x48, 0x96, 0xb6, 0xb1, 0xc9, 0x8f,
	0xe1, 0x5a, 0x70, 0xe5, 0xce, 0x0b, 0xdf, 0x4a, 0xaf, 0xcb, 0xe8, 0xb2, 0x3d, 0xbc, 0x33, 0xb4,
	0x47, 0xee, 0xb9, 0xac, 0xfd, 0x55, 0xf4, 0x5c, 0x96, 0x39, 0xb7, 0xc9, 0x91, 0xd7, 0xe5, 0xde,
	0x9f, 0x17, 0xec, 0x7b, 0xb4, 0xf2, 0x57, 0x1c, 0x5b, 0x96, 0x09, 0x35, 0xb0, 0x47, 0x14, 0x66,
	0x98, 0xe0, 0x14, 0xf9, 0x2b, 0x8e, 0xed, 0x23, 0x44, 0x31, 0x4a, 0x3f, 0xbb, 0x7d, 0x0a, 0x31,
	0x66, 0xb7, 0x4b, 0xfb, 0x92, 0xa5, 0xae, 0x68, 0x95, 0x95, 0x6a, 0xe8, 0xda, 0x9f, 0x46, 0xdd,
	0xb2, 0xc3, 0x5d, 0xe1, 0x94, 0x7b, 0x4d, 0xd4, 0x3d, 0x4b, 0x87, 0xfd, 0x7a, 0x96, 0xa7, 0xa2,
	0x2b, 0x68, 0x64, 0x39, 0xec, 0x87, 0x39, 0x9e, 0x2a, 0xee, 0x26, 0xcc, 0x38, 0x6e, 0xc8, 0xdf,
	0xf8, 0x2f, 0x54, 0x1b, 0x87, 0xfd, 0x34, 0x24, 0xac, 0xfb, 0xe7, 0xc4, 0x51, 0xf2, 0x61, 0x66,
	0x65, 0x91, 0x49, 0x61, 0x62, 0x43, 0xb9, 0x73, 0xd8, 0x4f, 0xf7, 0x2b, 0x63, 0xf4, 0x13, 0xf2,
	0x9a, 0xf4, 0x07, 0xcc, 0x88, 0x5c, 0x5b, 0xe1, 0x86, 0xed, 0x12, 0xbd, 0x3a, 0xfd, 0x6e, 0x7f,
	0xd0, 0x43, 0x73, 0xb7, 0x88, 0xbe, 0x86, 0x75, 0xa4, 0xd6, 0x4f, 0x41, 0xa5, 0x68, 0x8c, 0x4d,
	0x16, 0xb5, 0x1f, 0x38, 0x6d, 0x45, 0x0c, 0x4b, 0xd4, 0x33, 0xd4, 0x16, 0x2c, 0x51, 0xcb, 0xe8,
	0x1b, 0x9d, 0xb3, 0xe4, 0x48, 0x24, 0xc7, 0x85, 0x96, 0xca, 0xc6, 0x43, 0x7c, 0xad, 0x16, 0x10,
	0x7c, 0x68, 0x74, 0xbe, 0x5b, 0x41, 0xd1, 0x3f, 0x3a, 0x70, 0xd5, 0x88, 0x52, 0x0e, 0x14, 0xe5,
	0x27, 0xbe, 0x59, 0xa3, 0xb7, 0xfc, 0x6f, 0xe7, 0x1c, 0x79, 0x74, 0x29, 0x8f, 0x6f, 0xe1, 0x3f,
	0x3b, 0xb0, 0xe8, 0x83, 0xa8, 0xaa, 0x0c, 0x03, 0x39, 0x79, 0xcb, 0x81, 0x44, 0xe4, 0x35, 0x14,
	0x2e, 0x06, 0xf3, 0xef, 0x0e, 0x2c, 0xb6, 0x3a, 0xef, 0x91, 0x2c, 0xad, 0x36, 0xa7, 0xf1, 0x2b,
	0x7c, 0x34, 0xf8, 0x39, 0x06, 0x73, 0xf6, 0xef, 0x09, 0xbd, 0xa8, 0xd1, 0xde, 0xbf, 0x22, 0xe7,
	0xae, 0x2b, 0xd7, 0x6f, 0x2b, 0x3a, 0x0d, 0xb9, 0x71, 0x4a, 0x73, 0x6a, 0x85, 0x76, 0x8b, 0xd1,
	0xbd, 0x90, 0x11, 0xe3, 0xaa, 0x3a, 0xa3, 0x5e, 0x4f, 0xaa, 0xb6, 0x1b, 0xb3, 0x7b, 0x88, 0x36,
	0xe7, 0x49, 0x25, 0xf9, 0x2b, 0xcd, 0xee, 0x1e, 0xda, 0xe7, 0x49, 0xe0, 0x7f, 0x06, 0x2b, 0x67,
	0xf0, 0x7d, 0xb1, 0xfd, 0x0d, 0x55, 0xcb, 0x13, 0x2a, 0xac, 0xb9, 0xc3, 0x8b, 0xf8, 0x73, 0xdc,
	0xdd, 0xef, 0x03, 0x00, 0x00, 0xff, 0xff, 0xba, 0x40, 0x3f, 0x15, 0xa9, 0x13, 0x00, 0x00,
}
