/*
Copyright 2019 Cisco Systems

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: isis_sh_te_adv.proto

package cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_te_advertisements

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type IsisShTeAdv_KEYS struct {
	InstanceName         string   `protobuf:"bytes,1,opt,name=instance_name,json=instanceName,proto3" json:"instance_name,omitempty"`
	AfName               string   `protobuf:"bytes,2,opt,name=af_name,json=afName,proto3" json:"af_name,omitempty"`
	SafName              string   `protobuf:"bytes,3,opt,name=saf_name,json=safName,proto3" json:"saf_name,omitempty"`
	TopologyName         string   `protobuf:"bytes,4,opt,name=topology_name,json=topologyName,proto3" json:"topology_name,omitempty"`
	Level                string   `protobuf:"bytes,5,opt,name=level,proto3" json:"level,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IsisShTeAdv_KEYS) Reset()         { *m = IsisShTeAdv_KEYS{} }
func (m *IsisShTeAdv_KEYS) String() string { return proto.CompactTextString(m) }
func (*IsisShTeAdv_KEYS) ProtoMessage()    {}
func (*IsisShTeAdv_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_4960dc1e0cb19b53, []int{0}
}

func (m *IsisShTeAdv_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IsisShTeAdv_KEYS.Unmarshal(m, b)
}
func (m *IsisShTeAdv_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IsisShTeAdv_KEYS.Marshal(b, m, deterministic)
}
func (m *IsisShTeAdv_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IsisShTeAdv_KEYS.Merge(m, src)
}
func (m *IsisShTeAdv_KEYS) XXX_Size() int {
	return xxx_messageInfo_IsisShTeAdv_KEYS.Size(m)
}
func (m *IsisShTeAdv_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_IsisShTeAdv_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_IsisShTeAdv_KEYS proto.InternalMessageInfo

func (m *IsisShTeAdv_KEYS) GetInstanceName() string {
	if m != nil {
		return m.InstanceName
	}
	return ""
}

func (m *IsisShTeAdv_KEYS) GetAfName() string {
	if m != nil {
		return m.AfName
	}
	return ""
}

func (m *IsisShTeAdv_KEYS) GetSafName() string {
	if m != nil {
		return m.SafName
	}
	return ""
}

func (m *IsisShTeAdv_KEYS) GetTopologyName() string {
	if m != nil {
		return m.TopologyName
	}
	return ""
}

func (m *IsisShTeAdv_KEYS) GetLevel() string {
	if m != nil {
		return m.Level
	}
	return ""
}

type IsisShTeAdvSubTlv struct {
	TeSubTlvType         uint32   `protobuf:"varint,1,opt,name=te_sub_tlv_type,json=teSubTlvType,proto3" json:"te_sub_tlv_type,omitempty"`
	TeSubTlvLength       uint32   `protobuf:"varint,2,opt,name=te_sub_tlv_length,json=teSubTlvLength,proto3" json:"te_sub_tlv_length,omitempty"`
	TeSubTlvValue        string   `protobuf:"bytes,3,opt,name=te_sub_tlv_value,json=teSubTlvValue,proto3" json:"te_sub_tlv_value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IsisShTeAdvSubTlv) Reset()         { *m = IsisShTeAdvSubTlv{} }
func (m *IsisShTeAdvSubTlv) String() string { return proto.CompactTextString(m) }
func (*IsisShTeAdvSubTlv) ProtoMessage()    {}
func (*IsisShTeAdvSubTlv) Descriptor() ([]byte, []int) {
	return fileDescriptor_4960dc1e0cb19b53, []int{1}
}

func (m *IsisShTeAdvSubTlv) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IsisShTeAdvSubTlv.Unmarshal(m, b)
}
func (m *IsisShTeAdvSubTlv) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IsisShTeAdvSubTlv.Marshal(b, m, deterministic)
}
func (m *IsisShTeAdvSubTlv) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IsisShTeAdvSubTlv.Merge(m, src)
}
func (m *IsisShTeAdvSubTlv) XXX_Size() int {
	return xxx_messageInfo_IsisShTeAdvSubTlv.Size(m)
}
func (m *IsisShTeAdvSubTlv) XXX_DiscardUnknown() {
	xxx_messageInfo_IsisShTeAdvSubTlv.DiscardUnknown(m)
}

var xxx_messageInfo_IsisShTeAdvSubTlv proto.InternalMessageInfo

func (m *IsisShTeAdvSubTlv) GetTeSubTlvType() uint32 {
	if m != nil {
		return m.TeSubTlvType
	}
	return 0
}

func (m *IsisShTeAdvSubTlv) GetTeSubTlvLength() uint32 {
	if m != nil {
		return m.TeSubTlvLength
	}
	return 0
}

func (m *IsisShTeAdvSubTlv) GetTeSubTlvValue() string {
	if m != nil {
		return m.TeSubTlvValue
	}
	return ""
}

type IsisShTeAdvEntry struct {
	TeNeighborSystemId             string               `protobuf:"bytes,1,opt,name=te_neighbor_system_id,json=teNeighborSystemId,proto3" json:"te_neighbor_system_id,omitempty"`
	LinkType                       string               `protobuf:"bytes,2,opt,name=link_type,json=linkType,proto3" json:"link_type,omitempty"`
	LocalIpAddress                 string               `protobuf:"bytes,3,opt,name=local_ip_address,json=localIpAddress,proto3" json:"local_ip_address,omitempty"`
	TeNeighborIpAddress            string               `protobuf:"bytes,4,opt,name=te_neighbor_ip_address,json=teNeighborIpAddress,proto3" json:"te_neighbor_ip_address,omitempty"`
	TeMetric                       uint32               `protobuf:"varint,5,opt,name=te_metric,json=teMetric,proto3" json:"te_metric,omitempty"`
	TePhysicalLinkBandwidth        uint32               `protobuf:"varint,6,opt,name=te_physical_link_bandwidth,json=tePhysicalLinkBandwidth,proto3" json:"te_physical_link_bandwidth,omitempty"`
	TeReservedLinkBandwidth        uint32               `protobuf:"varint,7,opt,name=te_reserved_link_bandwidth,json=teReservedLinkBandwidth,proto3" json:"te_reserved_link_bandwidth,omitempty"`
	TeTransmittedBandwidth         []uint32             `protobuf:"varint,8,rep,packed,name=te_transmitted_bandwidth,json=teTransmittedBandwidth,proto3" json:"te_transmitted_bandwidth,omitempty"`
	TeSubpoolReservedLinkBandwidth uint32               `protobuf:"varint,9,opt,name=te_subpool_reserved_link_bandwidth,json=teSubpoolReservedLinkBandwidth,proto3" json:"te_subpool_reserved_link_bandwidth,omitempty"`
	TeSubpoolTransmittedBandwidth  []uint32             `protobuf:"varint,10,rep,packed,name=te_subpool_transmitted_bandwidth,json=teSubpoolTransmittedBandwidth,proto3" json:"te_subpool_transmitted_bandwidth,omitempty"`
	TeAffinity                     uint32               `protobuf:"varint,11,opt,name=te_affinity,json=teAffinity,proto3" json:"te_affinity,omitempty"`
	TeExtAdminNum                  uint32               `protobuf:"varint,12,opt,name=te_ext_admin_num,json=teExtAdminNum,proto3" json:"te_ext_admin_num,omitempty"`
	TeExtAdminSub                  []uint32             `protobuf:"varint,13,rep,packed,name=te_ext_admin_sub,json=teExtAdminSub,proto3" json:"te_ext_admin_sub,omitempty"`
	TeSubTlvDataPresent            bool                 `protobuf:"varint,14,opt,name=te_sub_tlv_data_present,json=teSubTlvDataPresent,proto3" json:"te_sub_tlv_data_present,omitempty"`
	TeSubTlv                       []*IsisShTeAdvSubTlv `protobuf:"bytes,15,rep,name=te_sub_tlv,json=teSubTlv,proto3" json:"te_sub_tlv,omitempty"`
	XXX_NoUnkeyedLiteral           struct{}             `json:"-"`
	XXX_unrecognized               []byte               `json:"-"`
	XXX_sizecache                  int32                `json:"-"`
}

func (m *IsisShTeAdvEntry) Reset()         { *m = IsisShTeAdvEntry{} }
func (m *IsisShTeAdvEntry) String() string { return proto.CompactTextString(m) }
func (*IsisShTeAdvEntry) ProtoMessage()    {}
func (*IsisShTeAdvEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_4960dc1e0cb19b53, []int{2}
}

func (m *IsisShTeAdvEntry) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IsisShTeAdvEntry.Unmarshal(m, b)
}
func (m *IsisShTeAdvEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IsisShTeAdvEntry.Marshal(b, m, deterministic)
}
func (m *IsisShTeAdvEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IsisShTeAdvEntry.Merge(m, src)
}
func (m *IsisShTeAdvEntry) XXX_Size() int {
	return xxx_messageInfo_IsisShTeAdvEntry.Size(m)
}
func (m *IsisShTeAdvEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_IsisShTeAdvEntry.DiscardUnknown(m)
}

var xxx_messageInfo_IsisShTeAdvEntry proto.InternalMessageInfo

func (m *IsisShTeAdvEntry) GetTeNeighborSystemId() string {
	if m != nil {
		return m.TeNeighborSystemId
	}
	return ""
}

func (m *IsisShTeAdvEntry) GetLinkType() string {
	if m != nil {
		return m.LinkType
	}
	return ""
}

func (m *IsisShTeAdvEntry) GetLocalIpAddress() string {
	if m != nil {
		return m.LocalIpAddress
	}
	return ""
}

func (m *IsisShTeAdvEntry) GetTeNeighborIpAddress() string {
	if m != nil {
		return m.TeNeighborIpAddress
	}
	return ""
}

func (m *IsisShTeAdvEntry) GetTeMetric() uint32 {
	if m != nil {
		return m.TeMetric
	}
	return 0
}

func (m *IsisShTeAdvEntry) GetTePhysicalLinkBandwidth() uint32 {
	if m != nil {
		return m.TePhysicalLinkBandwidth
	}
	return 0
}

func (m *IsisShTeAdvEntry) GetTeReservedLinkBandwidth() uint32 {
	if m != nil {
		return m.TeReservedLinkBandwidth
	}
	return 0
}

func (m *IsisShTeAdvEntry) GetTeTransmittedBandwidth() []uint32 {
	if m != nil {
		return m.TeTransmittedBandwidth
	}
	return nil
}

func (m *IsisShTeAdvEntry) GetTeSubpoolReservedLinkBandwidth() uint32 {
	if m != nil {
		return m.TeSubpoolReservedLinkBandwidth
	}
	return 0
}

func (m *IsisShTeAdvEntry) GetTeSubpoolTransmittedBandwidth() []uint32 {
	if m != nil {
		return m.TeSubpoolTransmittedBandwidth
	}
	return nil
}

func (m *IsisShTeAdvEntry) GetTeAffinity() uint32 {
	if m != nil {
		return m.TeAffinity
	}
	return 0
}

func (m *IsisShTeAdvEntry) GetTeExtAdminNum() uint32 {
	if m != nil {
		return m.TeExtAdminNum
	}
	return 0
}

func (m *IsisShTeAdvEntry) GetTeExtAdminSub() []uint32 {
	if m != nil {
		return m.TeExtAdminSub
	}
	return nil
}

func (m *IsisShTeAdvEntry) GetTeSubTlvDataPresent() bool {
	if m != nil {
		return m.TeSubTlvDataPresent
	}
	return false
}

func (m *IsisShTeAdvEntry) GetTeSubTlv() []*IsisShTeAdvSubTlv {
	if m != nil {
		return m.TeSubTlv
	}
	return nil
}

type IsisShTePceAdv struct {
	PceAdvDataPresent    bool     `protobuf:"varint,1,opt,name=pce_adv_data_present,json=pceAdvDataPresent,proto3" json:"pce_adv_data_present,omitempty"`
	PceFloodingScope     string   `protobuf:"bytes,2,opt,name=pce_flooding_scope,json=pceFloodingScope,proto3" json:"pce_flooding_scope,omitempty"`
	PceAddressIpv4       string   `protobuf:"bytes,3,opt,name=pce_address_ipv4,json=pceAddressIpv4,proto3" json:"pce_address_ipv4,omitempty"`
	PcePathScopeBits     uint32   `protobuf:"varint,4,opt,name=pce_path_scope_bits,json=pcePathScopeBits,proto3" json:"pce_path_scope_bits,omitempty"`
	PcePathScopePrefs    uint32   `protobuf:"varint,5,opt,name=pce_path_scope_prefs,json=pcePathScopePrefs,proto3" json:"pce_path_scope_prefs,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IsisShTePceAdv) Reset()         { *m = IsisShTePceAdv{} }
func (m *IsisShTePceAdv) String() string { return proto.CompactTextString(m) }
func (*IsisShTePceAdv) ProtoMessage()    {}
func (*IsisShTePceAdv) Descriptor() ([]byte, []int) {
	return fileDescriptor_4960dc1e0cb19b53, []int{3}
}

func (m *IsisShTePceAdv) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IsisShTePceAdv.Unmarshal(m, b)
}
func (m *IsisShTePceAdv) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IsisShTePceAdv.Marshal(b, m, deterministic)
}
func (m *IsisShTePceAdv) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IsisShTePceAdv.Merge(m, src)
}
func (m *IsisShTePceAdv) XXX_Size() int {
	return xxx_messageInfo_IsisShTePceAdv.Size(m)
}
func (m *IsisShTePceAdv) XXX_DiscardUnknown() {
	xxx_messageInfo_IsisShTePceAdv.DiscardUnknown(m)
}

var xxx_messageInfo_IsisShTePceAdv proto.InternalMessageInfo

func (m *IsisShTePceAdv) GetPceAdvDataPresent() bool {
	if m != nil {
		return m.PceAdvDataPresent
	}
	return false
}

func (m *IsisShTePceAdv) GetPceFloodingScope() string {
	if m != nil {
		return m.PceFloodingScope
	}
	return ""
}

func (m *IsisShTePceAdv) GetPceAddressIpv4() string {
	if m != nil {
		return m.PceAddressIpv4
	}
	return ""
}

func (m *IsisShTePceAdv) GetPcePathScopeBits() uint32 {
	if m != nil {
		return m.PcePathScopeBits
	}
	return 0
}

func (m *IsisShTePceAdv) GetPcePathScopePrefs() uint32 {
	if m != nil {
		return m.PcePathScopePrefs
	}
	return 0
}

type IsisShTeAdv struct {
	TeAdvDataPresent     bool                `protobuf:"varint,50,opt,name=te_adv_data_present,json=teAdvDataPresent,proto3" json:"te_adv_data_present,omitempty"`
	TeSystemId           string              `protobuf:"bytes,51,opt,name=te_system_id,json=teSystemId,proto3" json:"te_system_id,omitempty"`
	TeLocalRouterId      string              `protobuf:"bytes,52,opt,name=te_local_router_id,json=teLocalRouterId,proto3" json:"te_local_router_id,omitempty"`
	TeAdv                []*IsisShTeAdvEntry `protobuf:"bytes,53,rep,name=te_adv,json=teAdv,proto3" json:"te_adv,omitempty"`
	Tepceadv             *IsisShTePceAdv     `protobuf:"bytes,54,opt,name=tepceadv,proto3" json:"tepceadv,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *IsisShTeAdv) Reset()         { *m = IsisShTeAdv{} }
func (m *IsisShTeAdv) String() string { return proto.CompactTextString(m) }
func (*IsisShTeAdv) ProtoMessage()    {}
func (*IsisShTeAdv) Descriptor() ([]byte, []int) {
	return fileDescriptor_4960dc1e0cb19b53, []int{4}
}

func (m *IsisShTeAdv) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IsisShTeAdv.Unmarshal(m, b)
}
func (m *IsisShTeAdv) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IsisShTeAdv.Marshal(b, m, deterministic)
}
func (m *IsisShTeAdv) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IsisShTeAdv.Merge(m, src)
}
func (m *IsisShTeAdv) XXX_Size() int {
	return xxx_messageInfo_IsisShTeAdv.Size(m)
}
func (m *IsisShTeAdv) XXX_DiscardUnknown() {
	xxx_messageInfo_IsisShTeAdv.DiscardUnknown(m)
}

var xxx_messageInfo_IsisShTeAdv proto.InternalMessageInfo

func (m *IsisShTeAdv) GetTeAdvDataPresent() bool {
	if m != nil {
		return m.TeAdvDataPresent
	}
	return false
}

func (m *IsisShTeAdv) GetTeSystemId() string {
	if m != nil {
		return m.TeSystemId
	}
	return ""
}

func (m *IsisShTeAdv) GetTeLocalRouterId() string {
	if m != nil {
		return m.TeLocalRouterId
	}
	return ""
}

func (m *IsisShTeAdv) GetTeAdv() []*IsisShTeAdvEntry {
	if m != nil {
		return m.TeAdv
	}
	return nil
}

func (m *IsisShTeAdv) GetTepceadv() *IsisShTePceAdv {
	if m != nil {
		return m.Tepceadv
	}
	return nil
}

func init() {
	proto.RegisterType((*IsisShTeAdv_KEYS)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.te_advertisements.isis_sh_te_adv_KEYS")
	proto.RegisterType((*IsisShTeAdvSubTlv)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.te_advertisements.isis_sh_te_adv_sub_tlv")
	proto.RegisterType((*IsisShTeAdvEntry)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.te_advertisements.isis_sh_te_adv_entry")
	proto.RegisterType((*IsisShTePceAdv)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.te_advertisements.isis_sh_te_pce_adv")
	proto.RegisterType((*IsisShTeAdv)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.te_advertisements.isis_sh_te_adv")
}

func init() { proto.RegisterFile("isis_sh_te_adv.proto", fileDescriptor_4960dc1e0cb19b53) }

var fileDescriptor_4960dc1e0cb19b53 = []byte{
	// 845 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x56, 0xcd, 0x6e, 0x23, 0x45,
	0x10, 0xd6, 0x10, 0x92, 0x38, 0x95, 0x4c, 0x7e, 0x3a, 0x21, 0x19, 0x58, 0x01, 0x96, 0x57, 0x08,
	0x23, 0xc0, 0x88, 0x24, 0x20, 0x24, 0x4e, 0x59, 0xb1, 0xa0, 0x40, 0x88, 0x22, 0x3b, 0x42, 0xe2,
	0xd4, 0x6a, 0xcf, 0x94, 0xe3, 0xd6, 0xce, 0x4f, 0x6b, 0xba, 0x6c, 0xe2, 0x17, 0xe0, 0x84, 0x10,
	0x12, 0xef, 0x80, 0xb4, 0x27, 0x1e, 0x8a, 0xe7, 0x40, 0x42, 0x5d, 0x3d, 0x63, 0x8f, 0x8d, 0x39,
	0xb3, 0xb7, 0x9e, 0xfa, 0xbe, 0xaa, 0xfa, 0xaa, 0xba, 0xaa, 0x35, 0x70, 0xa2, 0xad, 0xb6, 0xd2,
	0x8e, 0x25, 0xa1, 0x54, 0xc9, 0xb4, 0x67, 0xca, 0x82, 0x0a, 0xf1, 0x18, 0x6b, 0x1b, 0x17, 0x52,
	0x17, 0x56, 0x3e, 0x96, 0x32, 0x4e, 0x73, 0x2b, 0x99, 0x57, 0x18, 0x2c, 0x7b, 0xee, 0xd4, 0xd3,
	0xb9, 0x25, 0x95, 0xc7, 0xb8, 0x38, 0xf5, 0xa8, 0x30, 0x45, 0x5a, 0x3c, 0x68, 0xb4, 0xf5, 0x71,
	0x36, 0x3f, 0xc8, 0x14, 0xa7, 0x98, 0xda, 0x95, 0xef, 0x9e, 0x4f, 0x8a, 0x25, 0x69, 0x8b, 0x19,
	0xe6, 0x64, 0x3b, 0x2f, 0x03, 0x38, 0x5e, 0x96, 0x24, 0xbf, 0x7b, 0xfe, 0xe3, 0x40, 0x3c, 0x85,
	0xb0, 0x4e, 0x24, 0x73, 0x95, 0x61, 0x14, 0xb4, 0x83, 0xee, 0x4e, 0x7f, 0xaf, 0x36, 0xde, 0xaa,
	0x0c, 0xc5, 0x19, 0x6c, 0xab, 0x91, 0x87, 0x5f, 0x63, 0x78, 0x4b, 0x8d, 0x18, 0x78, 0x13, 0x5a,
	0xb6, 0x46, 0x36, 0x18, 0xd9, 0xb6, 0x15, 0xf4, 0x14, 0xc2, 0xb9, 0x28, 0xc6, 0x5f, 0xf7, 0x81,
	0x6b, 0x23, 0x93, 0x4e, 0x60, 0x93, 0x05, 0x47, 0x9b, 0x0c, 0xfa, 0x8f, 0xce, 0xef, 0x01, 0x9c,
	0xae, 0x68, 0xb5, 0x93, 0xa1, 0xa4, 0x74, 0x2a, 0xde, 0x83, 0x03, 0xc2, 0xfa, 0x4b, 0xd2, 0xcc,
	0x78, 0xc1, 0x61, 0x7f, 0x8f, 0x70, 0x30, 0x19, 0xde, 0xa7, 0xd3, 0xfb, 0x99, 0x41, 0xf1, 0x01,
	0x1c, 0x35, 0x68, 0x29, 0xe6, 0x0f, 0x34, 0x66, 0xe9, 0x61, 0x7f, 0xbf, 0x26, 0xde, 0xb0, 0x55,
	0xbc, 0x0f, 0x87, 0x0d, 0xea, 0x54, 0xa5, 0x93, 0xba, 0x94, 0xb0, 0x66, 0xfe, 0xe0, 0x8c, 0x9d,
	0x9f, 0xb7, 0x57, 0x2f, 0x55, 0x62, 0x4e, 0xe5, 0x4c, 0x7c, 0x0a, 0x6f, 0x10, 0xca, 0x1c, 0xf5,
	0xc3, 0x78, 0x58, 0x94, 0xd2, 0xce, 0x2c, 0x61, 0x26, 0x75, 0x52, 0xb5, 0x52, 0x10, 0xde, 0x56,
	0xd8, 0x80, 0xa1, 0xeb, 0x44, 0x3c, 0x81, 0x9d, 0x54, 0xe7, 0x2f, 0x7c, 0x01, 0xbe, 0xa5, 0x2d,
	0x67, 0x60, 0xf1, 0x5d, 0x38, 0x4c, 0x8b, 0x58, 0xa5, 0x52, 0x1b, 0xa9, 0x92, 0xa4, 0x44, 0x6b,
	0x2b, 0x45, 0xfb, 0x6c, 0xbf, 0x36, 0x57, 0xde, 0x2a, 0x2e, 0xe0, 0xb4, 0x99, 0xb9, 0xc1, 0xf7,
	0xcd, 0x3e, 0x5e, 0xa4, 0x5e, 0x38, 0x3d, 0x81, 0x1d, 0x42, 0x99, 0x21, 0x95, 0x3a, 0xe6, 0xbe,
	0x87, 0xfd, 0x16, 0xe1, 0xf7, 0xfc, 0x2d, 0xbe, 0x84, 0xb7, 0x08, 0xa5, 0x19, 0xcf, 0xac, 0x76,
	0x0a, 0x58, 0xe4, 0x50, 0xe5, 0xc9, 0x4f, 0x3a, 0xa1, 0x71, 0xb4, 0xc5, 0xec, 0x33, 0xc2, 0xbb,
	0x8a, 0x70, 0xa3, 0xf3, 0x17, 0xcf, 0x6a, 0xb8, 0x72, 0x2e, 0xd1, 0x62, 0x39, 0xc5, 0x64, 0xd5,
	0x79, 0xbb, 0x76, 0xee, 0x57, 0x84, 0x65, 0xe7, 0x2f, 0x20, 0x22, 0x94, 0x54, 0xaa, 0xdc, 0x66,
	0x9a, 0x08, 0x93, 0x86, 0x6b, 0xab, 0xbd, 0xd1, 0x0d, 0xfb, 0xa7, 0x84, 0xf7, 0x0b, 0x78, 0xe1,
	0xf9, 0x2d, 0x74, 0xfc, 0x0d, 0x9a, 0xa2, 0x48, 0xff, 0x33, 0xfd, 0x0e, 0xa7, 0x7f, 0x87, 0xef,
	0xd4, 0x11, 0xd7, 0xab, 0xf8, 0x06, 0xda, 0x8d, 0x58, 0xeb, 0xd5, 0x00, 0xab, 0x79, 0x7b, 0x1e,
	0x69, 0xad, 0xa8, 0x77, 0x61, 0xd7, 0x0d, 0xc9, 0x68, 0xa4, 0x73, 0x4d, 0xb3, 0x68, 0x97, 0xb3,
	0x03, 0xe1, 0x55, 0x65, 0xa9, 0xe6, 0x0e, 0x1f, 0x49, 0xaa, 0x24, 0xd3, 0xb9, 0xcc, 0x27, 0x59,
	0xb4, 0xc7, 0xac, 0x90, 0xf0, 0xf9, 0x23, 0x5d, 0x39, 0xeb, 0xed, 0x24, 0xfb, 0x17, 0xd1, 0x4e,
	0x86, 0x51, 0xc8, 0x12, 0x1a, 0xc4, 0xc1, 0x64, 0x28, 0x2e, 0xe1, 0xac, 0x31, 0xc9, 0x89, 0x22,
	0x25, 0x8d, 0xeb, 0x46, 0x4e, 0xd1, 0x7e, 0x3b, 0xe8, 0xb6, 0xdc, 0x38, 0xf8, 0x81, 0xfe, 0x4a,
	0x91, 0xba, 0xf3, 0x90, 0xf8, 0x33, 0x00, 0x58, 0xb8, 0x45, 0x07, 0xed, 0x8d, 0xee, 0xee, 0xf9,
	0x6f, 0x41, 0xef, 0xff, 0x7a, 0xa9, 0x7a, 0xeb, 0x37, 0xdf, 0xcd, 0xa8, 0x17, 0xdf, 0xf9, 0x3b,
	0x00, 0xd1, 0x20, 0x99, 0x98, 0x89, 0xe2, 0x13, 0x38, 0xa9, 0x8e, 0xcb, 0xb5, 0x07, 0x5c, 0xfb,
	0x91, 0x89, 0xf1, 0x2a, 0x59, 0xaa, 0xfc, 0x23, 0x10, 0xce, 0x61, 0x94, 0x16, 0x45, 0xa2, 0xf3,
	0x07, 0x69, 0xe3, 0x62, 0xbe, 0x8d, 0x87, 0x26, 0xc6, 0xaf, 0x2b, 0x60, 0xe0, 0xec, 0x6e, 0x2b,
	0x7d, 0x78, 0xde, 0x22, 0xa9, 0xcd, 0xf4, 0xb2, 0xde, 0x4a, 0x0e, 0xcd, 0xe6, 0x6b, 0x33, 0xbd,
	0x14, 0x1f, 0xc3, 0xb1, 0x63, 0x1a, 0x45, 0x63, 0x1f, 0x53, 0x0e, 0x35, 0xf9, 0x95, 0x0c, 0x39,
	0xf0, 0x9d, 0xa2, 0x31, 0x07, 0x7d, 0xa6, 0xc9, 0xd6, 0xba, 0x1b, 0x74, 0x53, 0xe2, 0xc8, 0x56,
	0xab, 0x79, 0xd4, 0xe4, 0xdf, 0x39, 0xa0, 0xf3, 0xd7, 0x06, 0xec, 0x2f, 0x37, 0xc9, 0xa5, 0xa4,
	0x35, 0xa5, 0x9f, 0x73, 0xe9, 0x87, 0xb4, 0x5a, 0x79, 0x1b, 0xf6, 0xdc, 0x95, 0xcf, 0x1f, 0xaa,
	0x0b, 0xae, 0x03, 0x08, 0xe7, 0x0f, 0xd4, 0x87, 0x20, 0x08, 0xa5, 0x7f, 0x86, 0xca, 0x62, 0x42,
	0x58, 0x3a, 0xde, 0x25, 0xf3, 0x0e, 0x08, 0x6f, 0x1c, 0xd0, 0x67, 0xfb, 0x75, 0x22, 0xfe, 0x08,
	0x60, 0xcb, 0xa7, 0x8f, 0x3e, 0xe3, 0xf1, 0xf9, 0xf5, 0xd5, 0x19, 0x1f, 0x7e, 0xa2, 0xfb, 0x9b,
	0xdc, 0x02, 0xf1, 0x32, 0x80, 0x16, 0xa1, 0x89, 0xd1, 0x49, 0xfd, 0xbc, 0x1d, 0x74, 0x77, 0xcf,
	0x7f, 0x79, 0x35, 0xa4, 0x56, 0x93, 0xdb, 0x9f, 0xcb, 0x1b, 0x6e, 0xf1, 0x1f, 0xc3, 0xc5, 0x3f,
	0x01, 0x00, 0x00, 0xff, 0xff, 0xe5, 0xa2, 0x7c, 0x10, 0x49, 0x08, 0x00, 0x00,
}
