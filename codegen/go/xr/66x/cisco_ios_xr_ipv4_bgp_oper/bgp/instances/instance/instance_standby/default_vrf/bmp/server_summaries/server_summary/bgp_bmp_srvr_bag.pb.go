/*
Copyright 2019 Cisco Systems

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: bgp_bmp_srvr_bag.proto

package cisco_ios_xr_ipv4_bgp_oper_bgp_instances_instance_instance_standby_default_vrf_bmp_server_summaries_server_summary

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type BgpBmpSrvrBag_KEYS struct {
	InstanceName         string   `protobuf:"bytes,1,opt,name=instance_name,json=instanceName,proto3" json:"instance_name,omitempty"`
	ServerId             uint32   `protobuf:"varint,2,opt,name=server_id,json=serverId,proto3" json:"server_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BgpBmpSrvrBag_KEYS) Reset()         { *m = BgpBmpSrvrBag_KEYS{} }
func (m *BgpBmpSrvrBag_KEYS) String() string { return proto.CompactTextString(m) }
func (*BgpBmpSrvrBag_KEYS) ProtoMessage()    {}
func (*BgpBmpSrvrBag_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_315ebc160084fa39, []int{0}
}

func (m *BgpBmpSrvrBag_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BgpBmpSrvrBag_KEYS.Unmarshal(m, b)
}
func (m *BgpBmpSrvrBag_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BgpBmpSrvrBag_KEYS.Marshal(b, m, deterministic)
}
func (m *BgpBmpSrvrBag_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpBmpSrvrBag_KEYS.Merge(m, src)
}
func (m *BgpBmpSrvrBag_KEYS) XXX_Size() int {
	return xxx_messageInfo_BgpBmpSrvrBag_KEYS.Size(m)
}
func (m *BgpBmpSrvrBag_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpBmpSrvrBag_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_BgpBmpSrvrBag_KEYS proto.InternalMessageInfo

func (m *BgpBmpSrvrBag_KEYS) GetInstanceName() string {
	if m != nil {
		return m.InstanceName
	}
	return ""
}

func (m *BgpBmpSrvrBag_KEYS) GetServerId() uint32 {
	if m != nil {
		return m.ServerId
	}
	return 0
}

type BgpTimespec struct {
	Seconds              uint32   `protobuf:"varint,1,opt,name=seconds,proto3" json:"seconds,omitempty"`
	Nanoseconds          uint32   `protobuf:"varint,2,opt,name=nanoseconds,proto3" json:"nanoseconds,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BgpTimespec) Reset()         { *m = BgpTimespec{} }
func (m *BgpTimespec) String() string { return proto.CompactTextString(m) }
func (*BgpTimespec) ProtoMessage()    {}
func (*BgpTimespec) Descriptor() ([]byte, []int) {
	return fileDescriptor_315ebc160084fa39, []int{1}
}

func (m *BgpTimespec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BgpTimespec.Unmarshal(m, b)
}
func (m *BgpTimespec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BgpTimespec.Marshal(b, m, deterministic)
}
func (m *BgpTimespec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpTimespec.Merge(m, src)
}
func (m *BgpTimespec) XXX_Size() int {
	return xxx_messageInfo_BgpTimespec.Size(m)
}
func (m *BgpTimespec) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpTimespec.DiscardUnknown(m)
}

var xxx_messageInfo_BgpTimespec proto.InternalMessageInfo

func (m *BgpTimespec) GetSeconds() uint32 {
	if m != nil {
		return m.Seconds
	}
	return 0
}

func (m *BgpTimespec) GetNanoseconds() uint32 {
	if m != nil {
		return m.Nanoseconds
	}
	return 0
}

type BgpL2VpnAddrT struct {
	L2VpnAddress         []uint32 `protobuf:"varint,1,rep,packed,name=l2vpn_address,json=l2vpnAddress,proto3" json:"l2vpn_address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BgpL2VpnAddrT) Reset()         { *m = BgpL2VpnAddrT{} }
func (m *BgpL2VpnAddrT) String() string { return proto.CompactTextString(m) }
func (*BgpL2VpnAddrT) ProtoMessage()    {}
func (*BgpL2VpnAddrT) Descriptor() ([]byte, []int) {
	return fileDescriptor_315ebc160084fa39, []int{2}
}

func (m *BgpL2VpnAddrT) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BgpL2VpnAddrT.Unmarshal(m, b)
}
func (m *BgpL2VpnAddrT) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BgpL2VpnAddrT.Marshal(b, m, deterministic)
}
func (m *BgpL2VpnAddrT) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpL2VpnAddrT.Merge(m, src)
}
func (m *BgpL2VpnAddrT) XXX_Size() int {
	return xxx_messageInfo_BgpL2VpnAddrT.Size(m)
}
func (m *BgpL2VpnAddrT) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpL2VpnAddrT.DiscardUnknown(m)
}

var xxx_messageInfo_BgpL2VpnAddrT proto.InternalMessageInfo

func (m *BgpL2VpnAddrT) GetL2VpnAddress() []uint32 {
	if m != nil {
		return m.L2VpnAddress
	}
	return nil
}

type BgpL2VpnMspwAddrT struct {
	L2VpnAddress         []uint32 `protobuf:"varint,1,rep,packed,name=l2vpn_address,json=l2vpnAddress,proto3" json:"l2vpn_address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BgpL2VpnMspwAddrT) Reset()         { *m = BgpL2VpnMspwAddrT{} }
func (m *BgpL2VpnMspwAddrT) String() string { return proto.CompactTextString(m) }
func (*BgpL2VpnMspwAddrT) ProtoMessage()    {}
func (*BgpL2VpnMspwAddrT) Descriptor() ([]byte, []int) {
	return fileDescriptor_315ebc160084fa39, []int{3}
}

func (m *BgpL2VpnMspwAddrT) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BgpL2VpnMspwAddrT.Unmarshal(m, b)
}
func (m *BgpL2VpnMspwAddrT) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BgpL2VpnMspwAddrT.Marshal(b, m, deterministic)
}
func (m *BgpL2VpnMspwAddrT) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpL2VpnMspwAddrT.Merge(m, src)
}
func (m *BgpL2VpnMspwAddrT) XXX_Size() int {
	return xxx_messageInfo_BgpL2VpnMspwAddrT.Size(m)
}
func (m *BgpL2VpnMspwAddrT) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpL2VpnMspwAddrT.DiscardUnknown(m)
}

var xxx_messageInfo_BgpL2VpnMspwAddrT proto.InternalMessageInfo

func (m *BgpL2VpnMspwAddrT) GetL2VpnAddress() []uint32 {
	if m != nil {
		return m.L2VpnAddress
	}
	return nil
}

type BgpIpv4SrpolicyAddrT struct {
	Ipv4SrpolicyAddress  []uint32 `protobuf:"varint,1,rep,packed,name=ipv4_srpolicy_address,json=ipv4SrpolicyAddress,proto3" json:"ipv4_srpolicy_address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BgpIpv4SrpolicyAddrT) Reset()         { *m = BgpIpv4SrpolicyAddrT{} }
func (m *BgpIpv4SrpolicyAddrT) String() string { return proto.CompactTextString(m) }
func (*BgpIpv4SrpolicyAddrT) ProtoMessage()    {}
func (*BgpIpv4SrpolicyAddrT) Descriptor() ([]byte, []int) {
	return fileDescriptor_315ebc160084fa39, []int{4}
}

func (m *BgpIpv4SrpolicyAddrT) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BgpIpv4SrpolicyAddrT.Unmarshal(m, b)
}
func (m *BgpIpv4SrpolicyAddrT) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BgpIpv4SrpolicyAddrT.Marshal(b, m, deterministic)
}
func (m *BgpIpv4SrpolicyAddrT) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpIpv4SrpolicyAddrT.Merge(m, src)
}
func (m *BgpIpv4SrpolicyAddrT) XXX_Size() int {
	return xxx_messageInfo_BgpIpv4SrpolicyAddrT.Size(m)
}
func (m *BgpIpv4SrpolicyAddrT) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpIpv4SrpolicyAddrT.DiscardUnknown(m)
}

var xxx_messageInfo_BgpIpv4SrpolicyAddrT proto.InternalMessageInfo

func (m *BgpIpv4SrpolicyAddrT) GetIpv4SrpolicyAddress() []uint32 {
	if m != nil {
		return m.Ipv4SrpolicyAddress
	}
	return nil
}

type BgpIpv6SrpolicyAddrT struct {
	Ipv6SrpolicyAddress  []uint32 `protobuf:"varint,1,rep,packed,name=ipv6_srpolicy_address,json=ipv6SrpolicyAddress,proto3" json:"ipv6_srpolicy_address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BgpIpv6SrpolicyAddrT) Reset()         { *m = BgpIpv6SrpolicyAddrT{} }
func (m *BgpIpv6SrpolicyAddrT) String() string { return proto.CompactTextString(m) }
func (*BgpIpv6SrpolicyAddrT) ProtoMessage()    {}
func (*BgpIpv6SrpolicyAddrT) Descriptor() ([]byte, []int) {
	return fileDescriptor_315ebc160084fa39, []int{5}
}

func (m *BgpIpv6SrpolicyAddrT) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BgpIpv6SrpolicyAddrT.Unmarshal(m, b)
}
func (m *BgpIpv6SrpolicyAddrT) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BgpIpv6SrpolicyAddrT.Marshal(b, m, deterministic)
}
func (m *BgpIpv6SrpolicyAddrT) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpIpv6SrpolicyAddrT.Merge(m, src)
}
func (m *BgpIpv6SrpolicyAddrT) XXX_Size() int {
	return xxx_messageInfo_BgpIpv6SrpolicyAddrT.Size(m)
}
func (m *BgpIpv6SrpolicyAddrT) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpIpv6SrpolicyAddrT.DiscardUnknown(m)
}

var xxx_messageInfo_BgpIpv6SrpolicyAddrT proto.InternalMessageInfo

func (m *BgpIpv6SrpolicyAddrT) GetIpv6SrpolicyAddress() []uint32 {
	if m != nil {
		return m.Ipv6SrpolicyAddress
	}
	return nil
}

type BgpAddrtype struct {
	Afi                    string                `protobuf:"bytes,1,opt,name=afi,proto3" json:"afi,omitempty"`
	Ipv4Address            string                `protobuf:"bytes,2,opt,name=ipv4_address,json=ipv4Address,proto3" json:"ipv4_address,omitempty"`
	Ipv4McastAddress       string                `protobuf:"bytes,3,opt,name=ipv4_mcast_address,json=ipv4McastAddress,proto3" json:"ipv4_mcast_address,omitempty"`
	Ipv4LabelAddress       string                `protobuf:"bytes,4,opt,name=ipv4_label_address,json=ipv4LabelAddress,proto3" json:"ipv4_label_address,omitempty"`
	Ipv4TunnelAddress      string                `protobuf:"bytes,5,opt,name=ipv4_tunnel_address,json=ipv4TunnelAddress,proto3" json:"ipv4_tunnel_address,omitempty"`
	Ipv4MdtAddress         string                `protobuf:"bytes,6,opt,name=ipv4_mdt_address,json=ipv4MdtAddress,proto3" json:"ipv4_mdt_address,omitempty"`
	Ipv4VpnAddress         string                `protobuf:"bytes,7,opt,name=ipv4vpn_address,json=ipv4vpnAddress,proto3" json:"ipv4vpn_address,omitempty"`
	Ipv4VpnaMcastddress    string                `protobuf:"bytes,8,opt,name=ipv4vpna_mcastddress,json=ipv4vpnaMcastddress,proto3" json:"ipv4vpna_mcastddress,omitempty"`
	Ipv6Address            string                `protobuf:"bytes,9,opt,name=ipv6_address,json=ipv6Address,proto3" json:"ipv6_address,omitempty"`
	Ipv6McastAddress       string                `protobuf:"bytes,10,opt,name=ipv6_mcast_address,json=ipv6McastAddress,proto3" json:"ipv6_mcast_address,omitempty"`
	Ipv6LabelAddress       string                `protobuf:"bytes,11,opt,name=ipv6_label_address,json=ipv6LabelAddress,proto3" json:"ipv6_label_address,omitempty"`
	Ipv6VpnAddress         string                `protobuf:"bytes,12,opt,name=ipv6vpn_address,json=ipv6vpnAddress,proto3" json:"ipv6vpn_address,omitempty"`
	Ipv6VpnMcastAddress    string                `protobuf:"bytes,13,opt,name=ipv6vpn_mcast_address,json=ipv6vpnMcastAddress,proto3" json:"ipv6vpn_mcast_address,omitempty"`
	L2VpnVplsAddress       *BgpL2VpnAddrT        `protobuf:"bytes,14,opt,name=l2vpn_vpls_address,json=l2vpnVplsAddress,proto3" json:"l2vpn_vpls_address,omitempty"`
	RtConstraintAddress    string                `protobuf:"bytes,15,opt,name=rt_constraint_address,json=rtConstraintAddress,proto3" json:"rt_constraint_address,omitempty"`
	Ipv6MvpnAddress        string                `protobuf:"bytes,16,opt,name=ipv6mvpn_address,json=ipv6mvpnAddress,proto3" json:"ipv6mvpn_address,omitempty"`
	Ipv4MvpnAddress        string                `protobuf:"bytes,17,opt,name=ipv4mvpn_address,json=ipv4mvpnAddress,proto3" json:"ipv4mvpn_address,omitempty"`
	L2VpnEvpnAddress       string                `protobuf:"bytes,18,opt,name=l2vpn_evpn_address,json=l2vpnEvpnAddress,proto3" json:"l2vpn_evpn_address,omitempty"`
	LsLsAddress            string                `protobuf:"bytes,19,opt,name=ls_ls_address,json=lsLsAddress,proto3" json:"ls_ls_address,omitempty"`
	L2VpnMspwAddress       *BgpL2VpnMspwAddrT    `protobuf:"bytes,20,opt,name=l2vpn_mspw_address,json=l2vpnMspwAddress,proto3" json:"l2vpn_mspw_address,omitempty"`
	Ipv4FlowspecAddress    string                `protobuf:"bytes,21,opt,name=ipv4_flowspec_address,json=ipv4FlowspecAddress,proto3" json:"ipv4_flowspec_address,omitempty"`
	Ipv6FlowspecAddress    string                `protobuf:"bytes,22,opt,name=ipv6_flowspec_address,json=ipv6FlowspecAddress,proto3" json:"ipv6_flowspec_address,omitempty"`
	Ipv4VpnFlowspecAddress string                `protobuf:"bytes,23,opt,name=ipv4vpn_flowspec_address,json=ipv4vpnFlowspecAddress,proto3" json:"ipv4vpn_flowspec_address,omitempty"`
	Ipv6VpnFlowspecAddress string                `protobuf:"bytes,24,opt,name=ipv6vpn_flowspec_address,json=ipv6vpnFlowspecAddress,proto3" json:"ipv6vpn_flowspec_address,omitempty"`
	Ipv4SrPolicyAddress    *BgpIpv4SrpolicyAddrT `protobuf:"bytes,25,opt,name=ipv4_sr_policy_address,json=ipv4SrPolicyAddress,proto3" json:"ipv4_sr_policy_address,omitempty"`
	Ipv6SrPolicyAddress    *BgpIpv6SrpolicyAddrT `protobuf:"bytes,26,opt,name=ipv6_sr_policy_address,json=ipv6SrPolicyAddress,proto3" json:"ipv6_sr_policy_address,omitempty"`
	XXX_NoUnkeyedLiteral   struct{}              `json:"-"`
	XXX_unrecognized       []byte                `json:"-"`
	XXX_sizecache          int32                 `json:"-"`
}

func (m *BgpAddrtype) Reset()         { *m = BgpAddrtype{} }
func (m *BgpAddrtype) String() string { return proto.CompactTextString(m) }
func (*BgpAddrtype) ProtoMessage()    {}
func (*BgpAddrtype) Descriptor() ([]byte, []int) {
	return fileDescriptor_315ebc160084fa39, []int{6}
}

func (m *BgpAddrtype) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BgpAddrtype.Unmarshal(m, b)
}
func (m *BgpAddrtype) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BgpAddrtype.Marshal(b, m, deterministic)
}
func (m *BgpAddrtype) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpAddrtype.Merge(m, src)
}
func (m *BgpAddrtype) XXX_Size() int {
	return xxx_messageInfo_BgpAddrtype.Size(m)
}
func (m *BgpAddrtype) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpAddrtype.DiscardUnknown(m)
}

var xxx_messageInfo_BgpAddrtype proto.InternalMessageInfo

func (m *BgpAddrtype) GetAfi() string {
	if m != nil {
		return m.Afi
	}
	return ""
}

func (m *BgpAddrtype) GetIpv4Address() string {
	if m != nil {
		return m.Ipv4Address
	}
	return ""
}

func (m *BgpAddrtype) GetIpv4McastAddress() string {
	if m != nil {
		return m.Ipv4McastAddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv4LabelAddress() string {
	if m != nil {
		return m.Ipv4LabelAddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv4TunnelAddress() string {
	if m != nil {
		return m.Ipv4TunnelAddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv4MdtAddress() string {
	if m != nil {
		return m.Ipv4MdtAddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv4VpnAddress() string {
	if m != nil {
		return m.Ipv4VpnAddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv4VpnaMcastddress() string {
	if m != nil {
		return m.Ipv4VpnaMcastddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv6Address() string {
	if m != nil {
		return m.Ipv6Address
	}
	return ""
}

func (m *BgpAddrtype) GetIpv6McastAddress() string {
	if m != nil {
		return m.Ipv6McastAddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv6LabelAddress() string {
	if m != nil {
		return m.Ipv6LabelAddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv6VpnAddress() string {
	if m != nil {
		return m.Ipv6VpnAddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv6VpnMcastAddress() string {
	if m != nil {
		return m.Ipv6VpnMcastAddress
	}
	return ""
}

func (m *BgpAddrtype) GetL2VpnVplsAddress() *BgpL2VpnAddrT {
	if m != nil {
		return m.L2VpnVplsAddress
	}
	return nil
}

func (m *BgpAddrtype) GetRtConstraintAddress() string {
	if m != nil {
		return m.RtConstraintAddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv6MvpnAddress() string {
	if m != nil {
		return m.Ipv6MvpnAddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv4MvpnAddress() string {
	if m != nil {
		return m.Ipv4MvpnAddress
	}
	return ""
}

func (m *BgpAddrtype) GetL2VpnEvpnAddress() string {
	if m != nil {
		return m.L2VpnEvpnAddress
	}
	return ""
}

func (m *BgpAddrtype) GetLsLsAddress() string {
	if m != nil {
		return m.LsLsAddress
	}
	return ""
}

func (m *BgpAddrtype) GetL2VpnMspwAddress() *BgpL2VpnMspwAddrT {
	if m != nil {
		return m.L2VpnMspwAddress
	}
	return nil
}

func (m *BgpAddrtype) GetIpv4FlowspecAddress() string {
	if m != nil {
		return m.Ipv4FlowspecAddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv6FlowspecAddress() string {
	if m != nil {
		return m.Ipv6FlowspecAddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv4VpnFlowspecAddress() string {
	if m != nil {
		return m.Ipv4VpnFlowspecAddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv6VpnFlowspecAddress() string {
	if m != nil {
		return m.Ipv6VpnFlowspecAddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv4SrPolicyAddress() *BgpIpv4SrpolicyAddrT {
	if m != nil {
		return m.Ipv4SrPolicyAddress
	}
	return nil
}

func (m *BgpAddrtype) GetIpv6SrPolicyAddress() *BgpIpv6SrpolicyAddrT {
	if m != nil {
		return m.Ipv6SrPolicyAddress
	}
	return nil
}

type BgpPrefixtype struct {
	Prefix               *BgpAddrtype `protobuf:"bytes,1,opt,name=prefix,proto3" json:"prefix,omitempty"`
	PrefixLength         uint32       `protobuf:"varint,2,opt,name=prefix_length,json=prefixLength,proto3" json:"prefix_length,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *BgpPrefixtype) Reset()         { *m = BgpPrefixtype{} }
func (m *BgpPrefixtype) String() string { return proto.CompactTextString(m) }
func (*BgpPrefixtype) ProtoMessage()    {}
func (*BgpPrefixtype) Descriptor() ([]byte, []int) {
	return fileDescriptor_315ebc160084fa39, []int{7}
}

func (m *BgpPrefixtype) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BgpPrefixtype.Unmarshal(m, b)
}
func (m *BgpPrefixtype) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BgpPrefixtype.Marshal(b, m, deterministic)
}
func (m *BgpPrefixtype) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpPrefixtype.Merge(m, src)
}
func (m *BgpPrefixtype) XXX_Size() int {
	return xxx_messageInfo_BgpPrefixtype.Size(m)
}
func (m *BgpPrefixtype) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpPrefixtype.DiscardUnknown(m)
}

var xxx_messageInfo_BgpPrefixtype proto.InternalMessageInfo

func (m *BgpPrefixtype) GetPrefix() *BgpAddrtype {
	if m != nil {
		return m.Prefix
	}
	return nil
}

func (m *BgpPrefixtype) GetPrefixLength() uint32 {
	if m != nil {
		return m.PrefixLength
	}
	return 0
}

type BgpBmpSrvrAfi_ struct {
	BmpafName                   string         `protobuf:"bytes,1,opt,name=bmpaf_name,json=bmpafName,proto3" json:"bmpaf_name,omitempty"`
	BmpResumePrefix             *BgpPrefixtype `protobuf:"bytes,2,opt,name=bmp_resume_prefix,json=bmpResumePrefix,proto3" json:"bmp_resume_prefix,omitempty"`
	BmpResumePrefixLen          uint32         `protobuf:"varint,3,opt,name=bmp_resume_prefix_len,json=bmpResumePrefixLen,proto3" json:"bmp_resume_prefix_len,omitempty"`
	BmpUpdGenResumeStartVersion uint32         `protobuf:"varint,4,opt,name=bmp_upd_gen_resume_start_version,json=bmpUpdGenResumeStartVersion,proto3" json:"bmp_upd_gen_resume_start_version,omitempty"`
	BmpUpdGenResumeEndVersion   uint32         `protobuf:"varint,5,opt,name=bmp_upd_gen_resume_end_version,json=bmpUpdGenResumeEndVersion,proto3" json:"bmp_upd_gen_resume_end_version,omitempty"`
	BmpUpdGenWalkStopped        bool           `protobuf:"varint,6,opt,name=bmp_upd_gen_walk_stopped,json=bmpUpdGenWalkStopped,proto3" json:"bmp_upd_gen_walk_stopped,omitempty"`
	BmpUpdGenResumeNetVersion   uint32         `protobuf:"varint,7,opt,name=bmp_upd_gen_resume_net_version,json=bmpUpdGenResumeNetVersion,proto3" json:"bmp_upd_gen_resume_net_version,omitempty"`
	BmpUpdGenWalkRunTimeStamp   uint64         `protobuf:"varint,8,opt,name=bmp_upd_gen_walk_run_time_stamp,json=bmpUpdGenWalkRunTimeStamp,proto3" json:"bmp_upd_gen_walk_run_time_stamp,omitempty"`
	BmpUpdGenWalkRunCount       uint64         `protobuf:"varint,9,opt,name=bmp_upd_gen_walk_run_count,json=bmpUpdGenWalkRunCount,proto3" json:"bmp_upd_gen_walk_run_count,omitempty"`
	BmpUpdGenWalkStopTimeStamp  uint64         `protobuf:"varint,10,opt,name=bmp_upd_gen_walk_stop_time_stamp,json=bmpUpdGenWalkStopTimeStamp,proto3" json:"bmp_upd_gen_walk_stop_time_stamp,omitempty"`
	BmpUpdGenWalkStopCount      uint64         `protobuf:"varint,11,opt,name=bmp_upd_gen_walk_stop_count,json=bmpUpdGenWalkStopCount,proto3" json:"bmp_upd_gen_walk_stop_count,omitempty"`
	BmpInitEorEndVersion        uint32         `protobuf:"varint,12,opt,name=bmp_init_eor_end_version,json=bmpInitEorEndVersion,proto3" json:"bmp_init_eor_end_version,omitempty"`
	BmpInitEorPendingCnt        uint32         `protobuf:"varint,13,opt,name=bmp_init_eor_pending_cnt,json=bmpInitEorPendingCnt,proto3" json:"bmp_init_eor_pending_cnt,omitempty"`
	BmpFilterNeighborAddress    *BgpAddrtype   `protobuf:"bytes,14,opt,name=bmp_filter_neighbor_address,json=bmpFilterNeighborAddress,proto3" json:"bmp_filter_neighbor_address,omitempty"`
	BmpFilterNeighborAddressSet bool           `protobuf:"varint,15,opt,name=bmp_filter_neighbor_address_set,json=bmpFilterNeighborAddressSet,proto3" json:"bmp_filter_neighbor_address_set,omitempty"`
	BmpFilterNbrCnt             uint32         `protobuf:"varint,16,opt,name=bmp_filter_nbr_cnt,json=bmpFilterNbrCnt,proto3" json:"bmp_filter_nbr_cnt,omitempty"`
	BmpSendVersion              uint32         `protobuf:"varint,17,opt,name=bmp_send_version,json=bmpSendVersion,proto3" json:"bmp_send_version,omitempty"`
	XXX_NoUnkeyedLiteral        struct{}       `json:"-"`
	XXX_unrecognized            []byte         `json:"-"`
	XXX_sizecache               int32          `json:"-"`
}

func (m *BgpBmpSrvrAfi_) Reset()         { *m = BgpBmpSrvrAfi_{} }
func (m *BgpBmpSrvrAfi_) String() string { return proto.CompactTextString(m) }
func (*BgpBmpSrvrAfi_) ProtoMessage()    {}
func (*BgpBmpSrvrAfi_) Descriptor() ([]byte, []int) {
	return fileDescriptor_315ebc160084fa39, []int{8}
}

func (m *BgpBmpSrvrAfi_) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BgpBmpSrvrAfi_.Unmarshal(m, b)
}
func (m *BgpBmpSrvrAfi_) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BgpBmpSrvrAfi_.Marshal(b, m, deterministic)
}
func (m *BgpBmpSrvrAfi_) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpBmpSrvrAfi_.Merge(m, src)
}
func (m *BgpBmpSrvrAfi_) XXX_Size() int {
	return xxx_messageInfo_BgpBmpSrvrAfi_.Size(m)
}
func (m *BgpBmpSrvrAfi_) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpBmpSrvrAfi_.DiscardUnknown(m)
}

var xxx_messageInfo_BgpBmpSrvrAfi_ proto.InternalMessageInfo

func (m *BgpBmpSrvrAfi_) GetBmpafName() string {
	if m != nil {
		return m.BmpafName
	}
	return ""
}

func (m *BgpBmpSrvrAfi_) GetBmpResumePrefix() *BgpPrefixtype {
	if m != nil {
		return m.BmpResumePrefix
	}
	return nil
}

func (m *BgpBmpSrvrAfi_) GetBmpResumePrefixLen() uint32 {
	if m != nil {
		return m.BmpResumePrefixLen
	}
	return 0
}

func (m *BgpBmpSrvrAfi_) GetBmpUpdGenResumeStartVersion() uint32 {
	if m != nil {
		return m.BmpUpdGenResumeStartVersion
	}
	return 0
}

func (m *BgpBmpSrvrAfi_) GetBmpUpdGenResumeEndVersion() uint32 {
	if m != nil {
		return m.BmpUpdGenResumeEndVersion
	}
	return 0
}

func (m *BgpBmpSrvrAfi_) GetBmpUpdGenWalkStopped() bool {
	if m != nil {
		return m.BmpUpdGenWalkStopped
	}
	return false
}

func (m *BgpBmpSrvrAfi_) GetBmpUpdGenResumeNetVersion() uint32 {
	if m != nil {
		return m.BmpUpdGenResumeNetVersion
	}
	return 0
}

func (m *BgpBmpSrvrAfi_) GetBmpUpdGenWalkRunTimeStamp() uint64 {
	if m != nil {
		return m.BmpUpdGenWalkRunTimeStamp
	}
	return 0
}

func (m *BgpBmpSrvrAfi_) GetBmpUpdGenWalkRunCount() uint64 {
	if m != nil {
		return m.BmpUpdGenWalkRunCount
	}
	return 0
}

func (m *BgpBmpSrvrAfi_) GetBmpUpdGenWalkStopTimeStamp() uint64 {
	if m != nil {
		return m.BmpUpdGenWalkStopTimeStamp
	}
	return 0
}

func (m *BgpBmpSrvrAfi_) GetBmpUpdGenWalkStopCount() uint64 {
	if m != nil {
		return m.BmpUpdGenWalkStopCount
	}
	return 0
}

func (m *BgpBmpSrvrAfi_) GetBmpInitEorEndVersion() uint32 {
	if m != nil {
		return m.BmpInitEorEndVersion
	}
	return 0
}

func (m *BgpBmpSrvrAfi_) GetBmpInitEorPendingCnt() uint32 {
	if m != nil {
		return m.BmpInitEorPendingCnt
	}
	return 0
}

func (m *BgpBmpSrvrAfi_) GetBmpFilterNeighborAddress() *BgpAddrtype {
	if m != nil {
		return m.BmpFilterNeighborAddress
	}
	return nil
}

func (m *BgpBmpSrvrAfi_) GetBmpFilterNeighborAddressSet() bool {
	if m != nil {
		return m.BmpFilterNeighborAddressSet
	}
	return false
}

func (m *BgpBmpSrvrAfi_) GetBmpFilterNbrCnt() uint32 {
	if m != nil {
		return m.BmpFilterNbrCnt
	}
	return 0
}

func (m *BgpBmpSrvrAfi_) GetBmpSendVersion() uint32 {
	if m != nil {
		return m.BmpSendVersion
	}
	return 0
}

type BgpBmpSrvrBag struct {
	BmpServerId                   uint32            `protobuf:"varint,50,opt,name=bmp_server_id,json=bmpServerId,proto3" json:"bmp_server_id,omitempty"`
	BmpServerHostName             string            `protobuf:"bytes,51,opt,name=bmp_server_host_name,json=bmpServerHostName,proto3" json:"bmp_server_host_name,omitempty"`
	BmpServerPort                 uint32            `protobuf:"varint,52,opt,name=bmp_server_port,json=bmpServerPort,proto3" json:"bmp_server_port,omitempty"`
	BmpServerState                string            `protobuf:"bytes,53,opt,name=bmp_server_state,json=bmpServerState,proto3" json:"bmp_server_state,omitempty"`
	BmpServerIsFlapping           bool              `protobuf:"varint,54,opt,name=bmp_server_is_flapping,json=bmpServerIsFlapping,proto3" json:"bmp_server_is_flapping,omitempty"`
	BmpServerStateAge             *BgpTimespec      `protobuf:"bytes,55,opt,name=bmp_server_state_age,json=bmpServerStateAge,proto3" json:"bmp_server_state_age,omitempty"`
	BmpServerStateTimeSpec        *BgpTimespec      `protobuf:"bytes,56,opt,name=bmp_server_state_time_spec,json=bmpServerStateTimeSpec,proto3" json:"bmp_server_state_time_spec,omitempty"`
	BmpServerLastDisconTime       *BgpTimespec      `protobuf:"bytes,57,opt,name=bmp_server_last_discon_time,json=bmpServerLastDisconTime,proto3" json:"bmp_server_last_discon_time,omitempty"`
	BmpServerNbrCount             uint32            `protobuf:"varint,58,opt,name=bmp_server_nbr_count,json=bmpServerNbrCount,proto3" json:"bmp_server_nbr_count,omitempty"`
	BmpInitMsgCount               uint32            `protobuf:"varint,59,opt,name=bmp_init_msg_count,json=bmpInitMsgCount,proto3" json:"bmp_init_msg_count,omitempty"`
	BmpTerminationMsgCount        uint32            `protobuf:"varint,60,opt,name=bmp_termination_msg_count,json=bmpTerminationMsgCount,proto3" json:"bmp_termination_msg_count,omitempty"`
	BmpStatusReportCount          uint32            `protobuf:"varint,61,opt,name=bmp_status_report_count,json=bmpStatusReportCount,proto3" json:"bmp_status_report_count,omitempty"`
	BmpPerPeerMsgCount            uint32            `protobuf:"varint,62,opt,name=bmp_per_peer_msg_count,json=bmpPerPeerMsgCount,proto3" json:"bmp_per_peer_msg_count,omitempty"`
	BmpPeerMsgDropCount           uint32            `protobuf:"varint,63,opt,name=bmp_peer_msg_drop_count,json=bmpPeerMsgDropCount,proto3" json:"bmp_peer_msg_drop_count,omitempty"`
	BmpPeerMsgPendingCount        uint32            `protobuf:"varint,64,opt,name=bmp_peer_msg_pending_count,json=bmpPeerMsgPendingCount,proto3" json:"bmp_peer_msg_pending_count,omitempty"`
	TosType                       uint32            `protobuf:"varint,65,opt,name=tos_type,json=tosType,proto3" json:"tos_type,omitempty"`
	TosValue                      uint32            `protobuf:"varint,66,opt,name=tos_value,json=tosValue,proto3" json:"tos_value,omitempty"`
	UpdateSourceInterfaceName     string            `protobuf:"bytes,67,opt,name=update_source_interface_name,json=updateSourceInterfaceName,proto3" json:"update_source_interface_name,omitempty"`
	UpdateSourceAddress           *BgpAddrtype      `protobuf:"bytes,68,opt,name=update_source_address,json=updateSourceAddress,proto3" json:"update_source_address,omitempty"`
	UpdateSourceVrfId             uint32            `protobuf:"varint,69,opt,name=update_source_vrf_id,json=updateSourceVrfId,proto3" json:"update_source_vrf_id,omitempty"`
	BmpVrfName                    string            `protobuf:"bytes,70,opt,name=bmp_vrf_name,json=bmpVrfName,proto3" json:"bmp_vrf_name,omitempty"`
	BmpVrfId                      uint32            `protobuf:"varint,71,opt,name=bmp_vrf_id,json=bmpVrfId,proto3" json:"bmp_vrf_id,omitempty"`
	BmpafiInfo                    []*BgpBmpSrvrAfi_ `protobuf:"bytes,72,rep,name=bmpafi_info,json=bmpafiInfo,proto3" json:"bmpafi_info,omitempty"`
	BmpUpdateMode                 string            `protobuf:"bytes,73,opt,name=bmp_update_mode,json=bmpUpdateMode,proto3" json:"bmp_update_mode,omitempty"`
	TcpKeepAliveInterval          uint32            `protobuf:"varint,74,opt,name=tcp_keep_alive_interval,json=tcpKeepAliveInterval,proto3" json:"tcp_keep_alive_interval,omitempty"`
	TcpMaximumSegmentSize         uint32            `protobuf:"varint,75,opt,name=tcp_maximum_segment_size,json=tcpMaximumSegmentSize,proto3" json:"tcp_maximum_segment_size,omitempty"`
	TcpWriteCbPending             uint32            `protobuf:"varint,76,opt,name=tcp_write_cb_pending,json=tcpWriteCbPending,proto3" json:"tcp_write_cb_pending,omitempty"`
	TcpLastWriteResult            uint32            `protobuf:"varint,77,opt,name=tcp_last_write_result,json=tcpLastWriteResult,proto3" json:"tcp_last_write_result,omitempty"`
	TcpLastWriteCbTime            uint64            `protobuf:"varint,78,opt,name=tcp_last_write_cb_time,json=tcpLastWriteCbTime,proto3" json:"tcp_last_write_cb_time,omitempty"`
	TcpLastWriteTime              uint64            `protobuf:"varint,79,opt,name=tcp_last_write_time,json=tcpLastWriteTime,proto3" json:"tcp_last_write_time,omitempty"`
	BmpqLastWritePulseSentTime    uint64            `protobuf:"varint,80,opt,name=bmpq_last_write_pulse_sent_time,json=bmpqLastWritePulseSentTime,proto3" json:"bmpq_last_write_pulse_sent_time,omitempty"`
	BmpqLastAllWritePulseSentTime uint64            `protobuf:"varint,81,opt,name=bmpq_last_all_write_pulse_sent_time,json=bmpqLastAllWritePulseSentTime,proto3" json:"bmpq_last_all_write_pulse_sent_time,omitempty"`
	BmpqLastWritePulseCbTime      uint64            `protobuf:"varint,82,opt,name=bmpq_last_write_pulse_cb_time,json=bmpqLastWritePulseCbTime,proto3" json:"bmpq_last_write_pulse_cb_time,omitempty"`
	PathUpdateCount               uint32            `protobuf:"varint,83,opt,name=path_update_count,json=pathUpdateCount,proto3" json:"path_update_count,omitempty"`
	PathWithdrawCount             uint32            `protobuf:"varint,84,opt,name=path_withdraw_count,json=pathWithdrawCount,proto3" json:"path_withdraw_count,omitempty"`
	PathUpdateDrop                uint32            `protobuf:"varint,85,opt,name=path_update_drop,json=pathUpdateDrop,proto3" json:"path_update_drop,omitempty"`
	PathWithdrawDrop              uint32            `protobuf:"varint,86,opt,name=path_withdraw_drop,json=pathWithdrawDrop,proto3" json:"path_withdraw_drop,omitempty"`
	BmpPeerMsgPendingCountMax     uint32            `protobuf:"varint,87,opt,name=bmp_peer_msg_pending_count_max,json=bmpPeerMsgPendingCountMax,proto3" json:"bmp_peer_msg_pending_count_max,omitempty"`
	BmpPeerMsgPendingCountHwts    uint64            `protobuf:"varint,88,opt,name=bmp_peer_msg_pending_count_hwts,json=bmpPeerMsgPendingCountHwts,proto3" json:"bmp_peer_msg_pending_count_hwts,omitempty"`
	BmpBytesWrittenTcp            uint64            `protobuf:"varint,89,opt,name=bmp_bytes_written_tcp,json=bmpBytesWrittenTcp,proto3" json:"bmp_bytes_written_tcp,omitempty"`
	TcpWriteTime                  uint32            `protobuf:"varint,90,opt,name=tcp_write_time,json=tcpWriteTime,proto3" json:"tcp_write_time,omitempty"`
	BmprMonUpdMessages            uint32            `protobuf:"varint,91,opt,name=bmpr_mon_upd_messages,json=bmprMonUpdMessages,proto3" json:"bmpr_mon_upd_messages,omitempty"`
	BmprMonWdrawMessages          uint32            `protobuf:"varint,92,opt,name=bmpr_mon_wdraw_messages,json=bmprMonWdrawMessages,proto3" json:"bmpr_mon_wdraw_messages,omitempty"`
	BmpMessagesWdrawDiscarded     uint32            `protobuf:"varint,93,opt,name=bmp_messages_wdraw_discarded,json=bmpMessagesWdrawDiscarded,proto3" json:"bmp_messages_wdraw_discarded,omitempty"`
	BmpPfxWdrawDiscarded          uint32            `protobuf:"varint,94,opt,name=bmp_pfx_wdraw_discarded,json=bmpPfxWdrawDiscarded,proto3" json:"bmp_pfx_wdraw_discarded,omitempty"`
	BmpPerPeerMsgRouteMonCount    uint32            `protobuf:"varint,95,opt,name=bmp_per_peer_msg_route_mon_count,json=bmpPerPeerMsgRouteMonCount,proto3" json:"bmp_per_peer_msg_route_mon_count,omitempty"`
	BmprMonUpdateGenTime          uint32            `protobuf:"varint,96,opt,name=bmpr_mon_update_gen_time,json=bmprMonUpdateGenTime,proto3" json:"bmpr_mon_update_gen_time,omitempty"`
	BmprMonEoRmessages            uint32            `protobuf:"varint,97,opt,name=bmpr_mon_eo_rmessages,json=bmprMonEoRmessages,proto3" json:"bmpr_mon_eo_rmessages,omitempty"`
	BmpRmonCurBufferSize          uint64            `protobuf:"varint,98,opt,name=bmp_rmon_cur_buffer_size,json=bmpRmonCurBufferSize,proto3" json:"bmp_rmon_cur_buffer_size,omitempty"`
	BmpMaximumBufferSizeRouteMon  uint64            `protobuf:"varint,99,opt,name=bmp_maximum_buffer_size_route_mon,json=bmpMaximumBufferSizeRouteMon,proto3" json:"bmp_maximum_buffer_size_route_mon,omitempty"`
	BmpServerUpCount              uint32            `protobuf:"varint,100,opt,name=bmp_server_up_count,json=bmpServerUpCount,proto3" json:"bmp_server_up_count,omitempty"`
	BmpUpdGenInProgress           bool              `protobuf:"varint,101,opt,name=bmp_upd_gen_in_progress,json=bmpUpdGenInProgress,proto3" json:"bmp_upd_gen_in_progress,omitempty"`
	BmpResetWalkInProgress        bool              `protobuf:"varint,102,opt,name=bmp_reset_walk_in_progress,json=bmpResetWalkInProgress,proto3" json:"bmp_reset_walk_in_progress,omitempty"`
	XXX_NoUnkeyedLiteral          struct{}          `json:"-"`
	XXX_unrecognized              []byte            `json:"-"`
	XXX_sizecache                 int32             `json:"-"`
}

func (m *BgpBmpSrvrBag) Reset()         { *m = BgpBmpSrvrBag{} }
func (m *BgpBmpSrvrBag) String() string { return proto.CompactTextString(m) }
func (*BgpBmpSrvrBag) ProtoMessage()    {}
func (*BgpBmpSrvrBag) Descriptor() ([]byte, []int) {
	return fileDescriptor_315ebc160084fa39, []int{9}
}

func (m *BgpBmpSrvrBag) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BgpBmpSrvrBag.Unmarshal(m, b)
}
func (m *BgpBmpSrvrBag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BgpBmpSrvrBag.Marshal(b, m, deterministic)
}
func (m *BgpBmpSrvrBag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpBmpSrvrBag.Merge(m, src)
}
func (m *BgpBmpSrvrBag) XXX_Size() int {
	return xxx_messageInfo_BgpBmpSrvrBag.Size(m)
}
func (m *BgpBmpSrvrBag) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpBmpSrvrBag.DiscardUnknown(m)
}

var xxx_messageInfo_BgpBmpSrvrBag proto.InternalMessageInfo

func (m *BgpBmpSrvrBag) GetBmpServerId() uint32 {
	if m != nil {
		return m.BmpServerId
	}
	return 0
}

func (m *BgpBmpSrvrBag) GetBmpServerHostName() string {
	if m != nil {
		return m.BmpServerHostName
	}
	return ""
}

func (m *BgpBmpSrvrBag) GetBmpServerPort() uint32 {
	if m != nil {
		return m.BmpServerPort
	}
	return 0
}

func (m *BgpBmpSrvrBag) GetBmpServerState() string {
	if m != nil {
		return m.BmpServerState
	}
	return ""
}

func (m *BgpBmpSrvrBag) GetBmpServerIsFlapping() bool {
	if m != nil {
		return m.BmpServerIsFlapping
	}
	return false
}

func (m *BgpBmpSrvrBag) GetBmpServerStateAge() *BgpTimespec {
	if m != nil {
		return m.BmpServerStateAge
	}
	return nil
}

func (m *BgpBmpSrvrBag) GetBmpServerStateTimeSpec() *BgpTimespec {
	if m != nil {
		return m.BmpServerStateTimeSpec
	}
	return nil
}

func (m *BgpBmpSrvrBag) GetBmpServerLastDisconTime() *BgpTimespec {
	if m != nil {
		return m.BmpServerLastDisconTime
	}
	return nil
}

func (m *BgpBmpSrvrBag) GetBmpServerNbrCount() uint32 {
	if m != nil {
		return m.BmpServerNbrCount
	}
	return 0
}

func (m *BgpBmpSrvrBag) GetBmpInitMsgCount() uint32 {
	if m != nil {
		return m.BmpInitMsgCount
	}
	return 0
}

func (m *BgpBmpSrvrBag) GetBmpTerminationMsgCount() uint32 {
	if m != nil {
		return m.BmpTerminationMsgCount
	}
	return 0
}

func (m *BgpBmpSrvrBag) GetBmpStatusReportCount() uint32 {
	if m != nil {
		return m.BmpStatusReportCount
	}
	return 0
}

func (m *BgpBmpSrvrBag) GetBmpPerPeerMsgCount() uint32 {
	if m != nil {
		return m.BmpPerPeerMsgCount
	}
	return 0
}

func (m *BgpBmpSrvrBag) GetBmpPeerMsgDropCount() uint32 {
	if m != nil {
		return m.BmpPeerMsgDropCount
	}
	return 0
}

func (m *BgpBmpSrvrBag) GetBmpPeerMsgPendingCount() uint32 {
	if m != nil {
		return m.BmpPeerMsgPendingCount
	}
	return 0
}

func (m *BgpBmpSrvrBag) GetTosType() uint32 {
	if m != nil {
		return m.TosType
	}
	return 0
}

func (m *BgpBmpSrvrBag) GetTosValue() uint32 {
	if m != nil {
		return m.TosValue
	}
	return 0
}

func (m *BgpBmpSrvrBag) GetUpdateSourceInterfaceName() string {
	if m != nil {
		return m.UpdateSourceInterfaceName
	}
	return ""
}

func (m *BgpBmpSrvrBag) GetUpdateSourceAddress() *BgpAddrtype {
	if m != nil {
		return m.UpdateSourceAddress
	}
	return nil
}

func (m *BgpBmpSrvrBag) GetUpdateSourceVrfId() uint32 {
	if m != nil {
		return m.UpdateSourceVrfId
	}
	return 0
}

func (m *BgpBmpSrvrBag) GetBmpVrfName() string {
	if m != nil {
		return m.BmpVrfName
	}
	return ""
}

func (m *BgpBmpSrvrBag) GetBmpVrfId() uint32 {
	if m != nil {
		return m.BmpVrfId
	}
	return 0
}

func (m *BgpBmpSrvrBag) GetBmpafiInfo() []*BgpBmpSrvrAfi_ {
	if m != nil {
		return m.BmpafiInfo
	}
	return nil
}

func (m *BgpBmpSrvrBag) GetBmpUpdateMode() string {
	if m != nil {
		return m.BmpUpdateMode
	}
	return ""
}

func (m *BgpBmpSrvrBag) GetTcpKeepAliveInterval() uint32 {
	if m != nil {
		return m.TcpKeepAliveInterval
	}
	return 0
}

func (m *BgpBmpSrvrBag) GetTcpMaximumSegmentSize() uint32 {
	if m != nil {
		return m.TcpMaximumSegmentSize
	}
	return 0
}

func (m *BgpBmpSrvrBag) GetTcpWriteCbPending() uint32 {
	if m != nil {
		return m.TcpWriteCbPending
	}
	return 0
}

func (m *BgpBmpSrvrBag) GetTcpLastWriteResult() uint32 {
	if m != nil {
		return m.TcpLastWriteResult
	}
	return 0
}

func (m *BgpBmpSrvrBag) GetTcpLastWriteCbTime() uint64 {
	if m != nil {
		return m.TcpLastWriteCbTime
	}
	return 0
}

func (m *BgpBmpSrvrBag) GetTcpLastWriteTime() uint64 {
	if m != nil {
		return m.TcpLastWriteTime
	}
	return 0
}

func (m *BgpBmpSrvrBag) GetBmpqLastWritePulseSentTime() uint64 {
	if m != nil {
		return m.BmpqLastWritePulseSentTime
	}
	return 0
}

func (m *BgpBmpSrvrBag) GetBmpqLastAllWritePulseSentTime() uint64 {
	if m != nil {
		return m.BmpqLastAllWritePulseSentTime
	}
	return 0
}

func (m *BgpBmpSrvrBag) GetBmpqLastWritePulseCbTime() uint64 {
	if m != nil {
		return m.BmpqLastWritePulseCbTime
	}
	return 0
}

func (m *BgpBmpSrvrBag) GetPathUpdateCount() uint32 {
	if m != nil {
		return m.PathUpdateCount
	}
	return 0
}

func (m *BgpBmpSrvrBag) GetPathWithdrawCount() uint32 {
	if m != nil {
		return m.PathWithdrawCount
	}
	return 0
}

func (m *BgpBmpSrvrBag) GetPathUpdateDrop() uint32 {
	if m != nil {
		return m.PathUpdateDrop
	}
	return 0
}

func (m *BgpBmpSrvrBag) GetPathWithdrawDrop() uint32 {
	if m != nil {
		return m.PathWithdrawDrop
	}
	return 0
}

func (m *BgpBmpSrvrBag) GetBmpPeerMsgPendingCountMax() uint32 {
	if m != nil {
		return m.BmpPeerMsgPendingCountMax
	}
	return 0
}

func (m *BgpBmpSrvrBag) GetBmpPeerMsgPendingCountHwts() uint64 {
	if m != nil {
		return m.BmpPeerMsgPendingCountHwts
	}
	return 0
}

func (m *BgpBmpSrvrBag) GetBmpBytesWrittenTcp() uint64 {
	if m != nil {
		return m.BmpBytesWrittenTcp
	}
	return 0
}

func (m *BgpBmpSrvrBag) GetTcpWriteTime() uint32 {
	if m != nil {
		return m.TcpWriteTime
	}
	return 0
}

func (m *BgpBmpSrvrBag) GetBmprMonUpdMessages() uint32 {
	if m != nil {
		return m.BmprMonUpdMessages
	}
	return 0
}

func (m *BgpBmpSrvrBag) GetBmprMonWdrawMessages() uint32 {
	if m != nil {
		return m.BmprMonWdrawMessages
	}
	return 0
}

func (m *BgpBmpSrvrBag) GetBmpMessagesWdrawDiscarded() uint32 {
	if m != nil {
		return m.BmpMessagesWdrawDiscarded
	}
	return 0
}

func (m *BgpBmpSrvrBag) GetBmpPfxWdrawDiscarded() uint32 {
	if m != nil {
		return m.BmpPfxWdrawDiscarded
	}
	return 0
}

func (m *BgpBmpSrvrBag) GetBmpPerPeerMsgRouteMonCount() uint32 {
	if m != nil {
		return m.BmpPerPeerMsgRouteMonCount
	}
	return 0
}

func (m *BgpBmpSrvrBag) GetBmprMonUpdateGenTime() uint32 {
	if m != nil {
		return m.BmprMonUpdateGenTime
	}
	return 0
}

func (m *BgpBmpSrvrBag) GetBmprMonEoRmessages() uint32 {
	if m != nil {
		return m.BmprMonEoRmessages
	}
	return 0
}

func (m *BgpBmpSrvrBag) GetBmpRmonCurBufferSize() uint64 {
	if m != nil {
		return m.BmpRmonCurBufferSize
	}
	return 0
}

func (m *BgpBmpSrvrBag) GetBmpMaximumBufferSizeRouteMon() uint64 {
	if m != nil {
		return m.BmpMaximumBufferSizeRouteMon
	}
	return 0
}

func (m *BgpBmpSrvrBag) GetBmpServerUpCount() uint32 {
	if m != nil {
		return m.BmpServerUpCount
	}
	return 0
}

func (m *BgpBmpSrvrBag) GetBmpUpdGenInProgress() bool {
	if m != nil {
		return m.BmpUpdGenInProgress
	}
	return false
}

func (m *BgpBmpSrvrBag) GetBmpResetWalkInProgress() bool {
	if m != nil {
		return m.BmpResetWalkInProgress
	}
	return false
}

func init() {
	proto.RegisterType((*BgpBmpSrvrBag_KEYS)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.default_vrf.bmp.server_summaries.server_summary.bgp_bmp_srvr_bag_KEYS")
	proto.RegisterType((*BgpTimespec)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.default_vrf.bmp.server_summaries.server_summary.bgp_timespec")
	proto.RegisterType((*BgpL2VpnAddrT)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.default_vrf.bmp.server_summaries.server_summary.bgp_l2vpn_addr_t")
	proto.RegisterType((*BgpL2VpnMspwAddrT)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.default_vrf.bmp.server_summaries.server_summary.bgp_l2vpn_mspw_addr_t")
	proto.RegisterType((*BgpIpv4SrpolicyAddrT)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.default_vrf.bmp.server_summaries.server_summary.bgp_ipv4_srpolicy_addr_t")
	proto.RegisterType((*BgpIpv6SrpolicyAddrT)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.default_vrf.bmp.server_summaries.server_summary.bgp_ipv6_srpolicy_addr_t")
	proto.RegisterType((*BgpAddrtype)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.default_vrf.bmp.server_summaries.server_summary.bgp_addrtype")
	proto.RegisterType((*BgpPrefixtype)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.default_vrf.bmp.server_summaries.server_summary.bgp_prefixtype")
	proto.RegisterType((*BgpBmpSrvrAfi_)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.default_vrf.bmp.server_summaries.server_summary.bgp_bmp_srvr_afi_")
	proto.RegisterType((*BgpBmpSrvrBag)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.default_vrf.bmp.server_summaries.server_summary.bgp_bmp_srvr_bag")
}

func init() { proto.RegisterFile("bgp_bmp_srvr_bag.proto", fileDescriptor_315ebc160084fa39) }

var fileDescriptor_315ebc160084fa39 = []byte{
	// 2269 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x59, 0xdd, 0x6e, 0x1c, 0x49,
	0x15, 0xd6, 0x6c, 0x76, 0x37, 0x71, 0xd9, 0x13, 0x8f, 0xdb, 0xb1, 0xd3, 0xf9, 0x03, 0xaf, 0x17,
	0x81, 0x81, 0xe0, 0xd5, 0x3a, 0xde, 0xc9, 0x66, 0x77, 0x21, 0x38, 0xb6, 0x93, 0x38, 0xf1, 0x04,
	0x33, 0xe3, 0xd8, 0x84, 0xbf, 0xa2, 0x7f, 0x6a, 0xc6, 0xad, 0x74, 0x57, 0xd7, 0x56, 0xd5, 0x8c,
	0x9d, 0xbd, 0x42, 0x08, 0x2e, 0x90, 0x78, 0x01, 0x9e, 0x80, 0x4b, 0x24, 0x10, 0x12, 0x37, 0x08,
	0xc4, 0x1b, 0xf0, 0x0a, 0x88, 0x6b, 0x9e, 0x01, 0x9d, 0x53, 0x5d, 0xd5, 0xdd, 0x33, 0x13, 0x24,
	0x6e, 0x70, 0xae, 0x62, 0xd7, 0xf9, 0xbe, 0xaf, 0xcf, 0x4f, 0xd5, 0xa9, 0x53, 0x0e, 0x59, 0x0e,
	0x07, 0x82, 0x86, 0x99, 0xa0, 0x4a, 0x8e, 0x24, 0x0d, 0x83, 0xc1, 0xba, 0x90, 0xb9, 0xce, 0x3d,
	0x19, 0x25, 0x2a, 0xca, 0x69, 0x92, 0x2b, 0x7a, 0x26, 0x69, 0x22, 0x46, 0x9b, 0x14, 0x90, 0xb9,
	0x60, 0x72, 0x3d, 0x1c, 0x88, 0xf5, 0x84, 0x2b, 0x1d, 0xf0, 0x88, 0x29, 0xf7, 0x93, 0xfb, 0x81,
	0xc2, 0x3f, 0x71, 0xf8, 0x6a, 0x3d, 0x66, 0xfd, 0x60, 0x98, 0x6a, 0x3a, 0x92, 0xfd, 0xf5, 0x30,
	0x13, 0xeb, 0x8a, 0xc9, 0x11, 0x93, 0x54, 0x0d, 0xb3, 0x2c, 0x90, 0x09, 0x53, 0xf5, 0x85, 0x57,
	0xab, 0x2f, 0xc8, 0xd2, 0xb8, 0x37, 0xf4, 0xe9, 0xee, 0x8b, 0x9e, 0xf7, 0x3e, 0x69, 0x3a, 0x71,
	0x1e, 0x64, 0xcc, 0x6f, 0xac, 0x34, 0xd6, 0x66, 0xba, 0x73, 0x76, 0xf1, 0x59, 0x90, 0x31, 0xef,
	0x06, 0x99, 0x29, 0xf4, 0x92, 0xd8, 0x7f, 0x6b, 0xa5, 0xb1, 0xd6, 0xec, 0x5e, 0x32, 0x0b, 0x7b,
	0xf1, 0xea, 0x13, 0x32, 0x07, 0xd2, 0x3a, 0xc9, 0x98, 0x12, 0x2c, 0xf2, 0x7c, 0x72, 0x51, 0xb1,
	0x28, 0xe7, 0xb1, 0x42, 0xad, 0x66, 0xd7, 0xfe, 0xea, 0xad, 0x90, 0x59, 0x1e, 0xf0, 0xdc, 0x5a,
	0x8d, 0x50, 0x75, 0x69, 0xf5, 0x2e, 0x69, 0x81, 0x56, 0xba, 0x31, 0x12, 0x9c, 0x06, 0x71, 0x2c,
	0xa9, 0x06, 0x0f, 0xcb, 0xdf, 0x99, 0x02, 0xd5, 0x0b, 0x6b, 0xcd, 0xee, 0x1c, 0x2e, 0x6e, 0x99,
	0xb5, 0xd5, 0xcf, 0x4c, 0x7c, 0x06, 0x98, 0x29, 0x71, 0xfa, 0x3f, 0xb1, 0x9f, 0x11, 0x1f, 0xd8,
	0x58, 0x0a, 0x25, 0x45, 0x9e, 0x26, 0xd1, 0x2b, 0x2b, 0xb0, 0x41, 0x96, 0x26, 0xd7, 0x4b, 0xa1,
	0x45, 0x30, 0xf6, 0x0a, 0xdb, 0xa4, 0x5e, 0xfb, 0x35, 0x7a, 0xed, 0xff, 0xa6, 0xd7, 0x1e, 0xd7,
	0xfb, 0x57, 0xd3, 0xe4, 0x18, 0xa0, 0xfa, 0x95, 0x60, 0x5e, 0x8b, 0x5c, 0x08, 0xfa, 0x49, 0x51,
	0x2b, 0xf8, 0xd1, 0x7b, 0x8f, 0xcc, 0xa1, 0x9b, 0x56, 0xed, 0x2d, 0x34, 0xcd, 0xc2, 0x5a, 0xa1,
	0xe2, 0xdd, 0x26, 0x1e, 0x42, 0xb2, 0x28, 0x50, 0xda, 0x01, 0x2f, 0x20, 0xb0, 0x05, 0x96, 0x0e,
	0x18, 0xc6, 0xd1, 0x69, 0x10, 0xb2, 0xd4, 0xa1, 0xdf, 0x2e, 0xd1, 0xfb, 0x60, 0xb0, 0xe8, 0x75,
	0x82, 0x89, 0xa0, 0x7a, 0xc8, 0x79, 0x05, 0xfe, 0x0e, 0xc2, 0x17, 0xc0, 0x74, 0x88, 0x16, 0x8b,
	0x5f, 0x23, 0x2d, 0xe3, 0x4b, 0x5c, 0x7a, 0xf2, 0x2e, 0x82, 0x2f, 0xa3, 0x27, 0xb1, 0xf3, 0xe3,
	0x6b, 0x64, 0x1e, 0x56, 0xaa, 0x25, 0xbc, 0x58, 0x02, 0xcb, 0x22, 0x7a, 0x1f, 0x92, 0x2b, 0xc5,
	0x4a, 0x60, 0x42, 0x2c, 0xd0, 0x97, 0x10, 0xbd, 0x68, 0x6d, 0x9d, 0xd2, 0x54, 0x24, 0xad, 0xed,
	0x84, 0x67, 0x5c, 0xd2, 0xda, 0xf5, 0x34, 0xb4, 0xc7, 0x92, 0x46, 0x5c, 0x1a, 0xda, 0x53, 0x92,
	0xd6, 0x1e, 0x4b, 0xda, 0x6c, 0x89, 0xae, 0x25, 0xcd, 0x84, 0xd6, 0xae, 0x86, 0x36, 0xe7, 0x42,
	0x6b, 0x57, 0x42, 0x2b, 0xf6, 0x0c, 0xee, 0xed, 0x9a, 0x1f, 0x4d, 0x17, 0x1b, 0x18, 0x6b, 0xae,
	0xfc, 0xb1, 0x41, 0x3c, 0xb3, 0xf3, 0x47, 0x22, 0x55, 0x8e, 0x71, 0x79, 0xa5, 0xb1, 0x36, 0xbb,
	0xf1, 0xcb, 0xc6, 0xfa, 0xff, 0xbf, 0x09, 0xad, 0x8f, 0x1f, 0xed, 0x6e, 0x0b, 0x7f, 0x3b, 0x12,
	0xa9, 0xaa, 0x44, 0x2a, 0x35, 0x8d, 0x72, 0xae, 0xb4, 0x0c, 0x12, 0x5e, 0x46, 0x3a, 0x6f, 0x22,
	0x95, 0x7a, 0xdb, 0xd9, 0x2c, 0xe7, 0xeb, 0xb8, 0x97, 0xda, 0x59, 0x35, 0x8f, 0x2d, 0x84, 0xcf,
	0xdb, 0xf5, 0x3a, 0x74, 0xb3, 0x06, 0x5d, 0x70, 0xd0, 0xcd, 0x2a, 0xf4, 0xb6, 0x4d, 0x1f, 0xab,
	0x82, 0x3d, 0x53, 0x4a, 0xb4, 0xec, 0x56, 0xd0, 0xab, 0xa4, 0x99, 0x2a, 0x5a, 0xc9, 0xf3, 0xa2,
	0xd9, 0x4a, 0xa9, 0xda, 0x77, 0xb1, 0xfd, 0xd9, 0x55, 0xc4, 0x35, 0x28, 0x40, 0x5e, 0xc1, 0x8a,
	0xfc, 0xfa, 0x9c, 0x2b, 0x52, 0xe9, 0x99, 0x45, 0x78, 0x1d, 0x25, 0x4e, 0xeb, 0x1b, 0x70, 0x93,
	0xf6, 0xd3, 0xfc, 0x14, 0x9a, 0xbc, 0x73, 0x7e, 0xa9, 0x3c, 0x5c, 0x0f, 0x0b, 0xdb, 0xd8, 0xa6,
	0x9d, 0xe4, 0x2c, 0x97, 0x9b, 0x76, 0x9c, 0xf3, 0x31, 0xf1, 0xed, 0x61, 0x9f, 0xa0, 0x5d, 0x45,
	0xda, 0x72, 0x61, 0x9f, 0xce, 0x6c, 0x4f, 0x65, 0xfa, 0x8e, 0xd9, 0x9e, 0xc2, 0xfc, 0x7b, 0x83,
	0x2c, 0x17, 0x1d, 0x9e, 0x8e, 0xb5, 0xe4, 0x6b, 0x58, 0x9a, 0xdf, 0x9c, 0x5b, 0x69, 0xa6, 0x5d,
	0x48, 0xf6, 0xc6, 0x39, 0xa8, 0xde, 0x10, 0x36, 0x88, 0xf6, 0x94, 0x20, 0xae, 0x9f, 0x7f, 0x10,
	0xed, 0xa9, 0x41, 0xb4, 0xc7, 0x82, 0x58, 0xfd, 0x47, 0x83, 0x5c, 0x06, 0x86, 0x90, 0xac, 0x9f,
	0x9c, 0xe1, 0x45, 0xf7, 0xdb, 0x06, 0x79, 0xd7, 0xfc, 0x8a, 0x97, 0xdd, 0xec, 0xc6, 0xcf, 0xcf,
	0x2d, 0x0e, 0x7b, 0xf9, 0x76, 0x0b, 0x87, 0x60, 0xb4, 0x30, 0x3f, 0xd1, 0x94, 0xf1, 0x81, 0x3e,
	0x29, 0x06, 0x9a, 0x39, 0xb3, 0xb8, 0x8f, 0x6b, 0xab, 0xff, 0x9e, 0x21, 0x0b, 0xb5, 0xc9, 0x2b,
	0xe8, 0x27, 0xd4, 0xbb, 0x45, 0x48, 0x98, 0x89, 0xa0, 0x5f, 0x1d, 0xb9, 0x66, 0x70, 0x05, 0xe7,
	0xad, 0xdf, 0x37, 0xc8, 0x02, 0x10, 0x24, 0x53, 0xc3, 0x8c, 0x15, 0xf9, 0x40, 0xf9, 0xd9, 0x8d,
	0x5f, 0x9c, 0x5b, 0x02, 0xca, 0xb2, 0x74, 0xe7, 0xc3, 0x4c, 0x74, 0xd1, 0xb9, 0x03, 0x93, 0x8b,
	0x0f, 0xc9, 0xd2, 0x84, 0xc3, 0x90, 0x16, 0x1c, 0x2f, 0x9a, 0x5d, 0x6f, 0x0c, 0xbf, 0xcf, 0xb8,
	0xb7, 0x4b, 0x56, 0x80, 0x32, 0x14, 0x31, 0x1d, 0x30, 0x6e, 0xa9, 0x4a, 0x07, 0x52, 0xd3, 0x11,
	0x93, 0x2a, 0xc9, 0x39, 0x8e, 0x1b, 0xcd, 0xee, 0x8d, 0x30, 0x13, 0xcf, 0x45, 0xfc, 0x88, 0x71,
	0xa3, 0xd1, 0x03, 0xcc, 0x91, 0x81, 0x78, 0x5b, 0xe4, 0x4b, 0x53, 0x64, 0x18, 0x8f, 0x9d, 0xc8,
	0x3b, 0x28, 0x72, 0x6d, 0x4c, 0x64, 0x97, 0xc7, 0x56, 0xa2, 0x4d, 0xfc, 0xaa, 0xc4, 0x69, 0x90,
	0xbe, 0xa4, 0x4a, 0xe7, 0x42, 0xb0, 0x18, 0x87, 0x92, 0x4b, 0xdd, 0x2b, 0x8e, 0x7c, 0x1c, 0xa4,
	0x2f, 0x7b, 0xc6, 0xf6, 0x9a, 0x4f, 0x73, 0x56, 0xfa, 0x7f, 0x71, 0xea, 0xa7, 0x9f, 0x31, 0xe7,
	0xfd, 0x03, 0xf2, 0xe5, 0x89, 0x4f, 0xcb, 0x21, 0xc7, 0x69, 0x1a, 0x72, 0x91, 0x09, 0x9c, 0x5f,
	0xde, 0xae, 0x68, 0x80, 0x07, 0xdd, 0x21, 0x3f, 0x4c, 0x30, 0x11, 0x99, 0xf0, 0xee, 0x91, 0xeb,
	0x53, 0x35, 0xa2, 0x7c, 0xc8, 0x35, 0xce, 0x34, 0x6f, 0x77, 0x97, 0xc6, 0xe9, 0xdb, 0x60, 0xf4,
	0x76, 0xea, 0x35, 0x70, 0x91, 0x57, 0xbf, 0x4f, 0x50, 0xe0, 0xfa, 0x44, 0x06, 0x4a, 0x07, 0x3e,
	0x25, 0x37, 0xa6, 0xab, 0x18, 0x0f, 0x66, 0x51, 0x60, 0x79, 0x42, 0xc0, 0xb8, 0x50, 0x24, 0x3f,
	0xe1, 0x89, 0xa6, 0x2c, 0x97, 0xb5, 0xca, 0xcd, 0x61, 0xfa, 0x20, 0xf9, 0x7b, 0x3c, 0xd1, 0xbb,
	0xb9, 0x9c, 0x2c, 0x9a, 0xe3, 0x09, 0xc6, 0xe3, 0x84, 0x0f, 0x68, 0xc4, 0x35, 0x8e, 0x45, 0x35,
	0xde, 0x81, 0x31, 0x6e, 0x73, 0xed, 0xfd, 0xad, 0x61, 0xbc, 0xed, 0x27, 0xa9, 0x66, 0x92, 0x72,
	0x96, 0x0c, 0x4e, 0xc2, 0x5c, 0x8e, 0x0d, 0x48, 0x6f, 0x40, 0x9b, 0x81, 0xf0, 0x1e, 0xa2, 0x93,
	0xcf, 0x0a, 0x1f, 0x6d, 0xb3, 0xdf, 0x31, 0x9b, 0xe6, 0x35, 0x11, 0x50, 0xc5, 0x34, 0x8e, 0x4b,
	0x97, 0xf0, 0xe0, 0x4c, 0x95, 0xe8, 0x31, 0xed, 0x7d, 0x93, 0x78, 0x55, 0x95, 0x50, 0x62, 0xea,
	0x5a, 0x98, 0xba, 0xf9, 0x92, 0x18, 0x4a, 0xc8, 0xda, 0x1a, 0x69, 0x61, 0x07, 0xab, 0x56, 0x67,
	0x01, 0xa1, 0x97, 0xc3, 0x4c, 0xf4, 0x98, 0xab, 0xcb, 0xea, 0x3f, 0xaf, 0x9b, 0x37, 0x5c, 0xf5,
	0xa9, 0x09, 0xe3, 0x91, 0xa1, 0xdb, 0x47, 0xe4, 0x86, 0x79, 0xfb, 0x21, 0xd7, 0xbc, 0x23, 0xbd,
	0x0f, 0xc8, 0x95, 0x0a, 0xe6, 0x24, 0x57, 0xda, 0x74, 0xc7, 0x3b, 0xe6, 0x0d, 0xe1, 0xa0, 0x8f,
	0x73, 0xa5, 0xb1, 0x4b, 0x7e, 0x95, 0xcc, 0x57, 0x08, 0x22, 0x97, 0xda, 0xdf, 0x44, 0xd9, 0xa6,
	0xc3, 0x1e, 0xe4, 0xb2, 0xe2, 0xbb, 0xc9, 0xb5, 0x0e, 0x34, 0xf3, 0x3f, 0x32, 0x73, 0xb6, 0x03,
	0xf6, 0x60, 0xd5, 0xbb, 0x43, 0x96, 0xab, 0x6e, 0x2a, 0xda, 0x4f, 0x03, 0x21, 0x12, 0x3e, 0xf0,
	0xdb, 0x98, 0xcf, 0xc5, 0xd2, 0x5f, 0xf5, 0xb0, 0x30, 0x79, 0x7f, 0x68, 0xd4, 0x1c, 0x47, 0x7d,
	0x1a, 0x0c, 0x98, 0x7f, 0xf7, 0x9c, 0x77, 0x92, 0x7d, 0x91, 0x57, 0x72, 0x87, 0x61, 0x6e, 0x0d,
	0x98, 0xf7, 0x97, 0x86, 0x69, 0x1a, 0x35, 0xa7, 0xcd, 0xa1, 0x17, 0x2c, 0xf2, 0x3f, 0x7e, 0x53,
	0x5c, 0x5f, 0xae, 0xbb, 0x8e, 0x3d, 0x47, 0xb0, 0xc8, 0xfb, 0x6b, 0x71, 0x8a, 0x0b, 0x6e, 0x0a,
	0x8f, 0xa2, 0x18, 0x7c, 0x35, 0xad, 0xd3, 0xbf, 0xf7, 0xa6, 0x04, 0x70, 0xd5, 0x05, 0xb0, 0x1f,
	0x28, 0xbd, 0x83, 0x2e, 0x42, 0x14, 0x63, 0xdb, 0x1d, 0x8f, 0x1f, 0x76, 0xcb, 0x4f, 0x70, 0x0b,
	0x97, 0x25, 0x83, 0x03, 0x88, 0x8d, 0xb2, 0x38, 0xaf, 0xd8, 0xf0, 0x32, 0x35, 0x28, 0xe0, 0x9f,
	0xba, 0xf3, 0x0a, 0xad, 0xae, 0xa3, 0x06, 0x06, 0x7c, 0x8f, 0xc0, 0x85, 0x41, 0x35, 0x93, 0x59,
	0xc2, 0x03, 0x9d, 0xe4, 0xbc, 0xc2, 0xf9, 0x0c, 0x39, 0x90, 0xda, 0xc3, 0xd2, 0xee, 0xa8, 0x1f,
	0x91, 0xab, 0xe8, 0x98, 0x0e, 0xf4, 0x50, 0x51, 0xc9, 0xe0, 0x60, 0x15, 0xc4, 0x6f, 0xbb, 0xbe,
	0xda, 0x43, 0x6b, 0x17, 0x8d, 0x86, 0xb6, 0x61, 0xce, 0x8e, 0x80, 0xa3, 0xc8, 0x98, 0xac, 0x7c,
	0xee, 0x3b, 0x6e, 0x04, 0x38, 0x60, 0xf2, 0x80, 0x31, 0xe9, 0x3e, 0xb5, 0x69, 0x3e, 0xe5, 0xf0,
	0xb1, 0x74, 0x97, 0xc6, 0x7d, 0x24, 0x2d, 0x22, 0x09, 0x19, 0x3b, 0xd2, 0xde, 0x18, 0x9f, 0x98,
	0xad, 0xeb, 0x58, 0xae, 0xf3, 0x23, 0xf1, 0xbb, 0x2e, 0xb8, 0x82, 0x68, 0x7b, 0x3f, 0x72, 0xaf,
	0x91, 0x4b, 0x3a, 0x57, 0x14, 0x1a, 0xac, 0xbf, 0x65, 0xfe, 0x3a, 0xa5, 0x73, 0x75, 0x08, 0xa3,
	0xe6, 0x0d, 0x32, 0x03, 0xa6, 0x51, 0x90, 0x0e, 0x99, 0xff, 0xc0, 0xfc, 0x91, 0x4b, 0xe7, 0xea,
	0x08, 0x7e, 0xf7, 0xee, 0x93, 0x9b, 0x43, 0x11, 0xc3, 0x21, 0x51, 0xf9, 0x50, 0x46, 0x8c, 0x26,
	0x5c, 0x33, 0xd9, 0x0f, 0xec, 0x5f, 0xcd, 0xb6, 0xb1, 0x9f, 0x5c, 0x33, 0x98, 0x1e, 0x42, 0xf6,
	0x2c, 0x02, 0x9b, 0xd5, 0x9f, 0x1a, 0x64, 0xa9, 0xae, 0x60, 0x2f, 0x9c, 0x9d, 0x37, 0xe5, 0xc2,
	0x59, 0xac, 0x7a, 0x6f, 0xef, 0x9a, 0x0f, 0xc8, 0x95, 0xba, 0xdb, 0x23, 0xd9, 0x87, 0x06, 0xbe,
	0x6b, 0xb6, 0x69, 0x95, 0x72, 0x24, 0xfb, 0x7b, 0xb1, 0xb7, 0x42, 0xe6, 0xa0, 0x3a, 0x00, 0xc3,
	0xcc, 0x3c, 0xc4, 0xcc, 0xc0, 0xb8, 0x7b, 0x24, 0xcd, 0x74, 0x7b, 0x13, 0x87, 0x5f, 0x2b, 0xf4,
	0xc8, 0x64, 0xda, 0xd8, 0xf7, 0x62, 0xef, 0x77, 0x0d, 0x32, 0x8b, 0x93, 0x70, 0x42, 0x13, 0xde,
	0xcf, 0xfd, 0xc7, 0x2b, 0x17, 0xd6, 0x66, 0x37, 0x7e, 0x75, 0x6e, 0xe9, 0xa9, 0x0d, 0xee, 0x5d,
	0x33, 0xb6, 0x27, 0x7b, 0xbc, 0x9f, 0xdb, 0xfb, 0xa7, 0x48, 0x4f, 0x96, 0xc7, 0xcc, 0xdf, 0xc3,
	0x60, 0x9b, 0x66, 0xd4, 0x09, 0x34, 0xeb, 0xe4, 0x31, 0x83, 0x03, 0xa5, 0x23, 0x41, 0x5f, 0x32,
	0x26, 0x68, 0x90, 0x26, 0xa3, 0x62, 0xf3, 0x8c, 0x82, 0xd4, 0x7f, 0x62, 0x0e, 0x94, 0x8e, 0xc4,
	0x53, 0xc6, 0xc4, 0x16, 0x18, 0xf7, 0x0a, 0x9b, 0x77, 0x97, 0xf8, 0x40, 0xcb, 0x82, 0xb3, 0x24,
	0x1b, 0x66, 0x54, 0xb1, 0x41, 0xc6, 0xb8, 0xa6, 0x2a, 0xf9, 0x82, 0xf9, 0x4f, 0x91, 0xb7, 0xa4,
	0x23, 0xd1, 0x31, 0xe6, 0x9e, 0xb1, 0xf6, 0x92, 0x2f, 0xb0, 0xb3, 0x00, 0xf1, 0x54, 0x26, 0x9a,
	0xd1, 0x28, 0xb4, 0xe7, 0xc3, 0xdf, 0x37, 0x25, 0xd3, 0x91, 0x38, 0x06, 0xd3, 0x76, 0x58, 0x9c,
	0x0c, 0x18, 0xde, 0x81, 0x80, 0x4d, 0xd4, 0xb0, 0x60, 0x94, 0x4d, 0xb5, 0xdf, 0x31, 0x27, 0x57,
	0x47, 0x02, 0x9a, 0x17, 0xb2, 0xba, 0x68, 0x81, 0xd3, 0x3e, 0x46, 0x89, 0x42, 0xd3, 0x79, 0x9f,
	0xe1, 0xb4, 0x57, 0xe3, 0x6c, 0x87, 0xd8, 0xf1, 0xbe, 0x45, 0x16, 0xc7, 0x38, 0x48, 0xf8, 0x1e,
	0x12, 0x5a, 0x55, 0x02, 0xc2, 0xb7, 0x71, 0xca, 0xf9, 0xbc, 0x8a, 0x17, 0xc3, 0x54, 0x31, 0x18,
	0x42, 0xb4, 0xa1, 0x1e, 0xb8, 0xd1, 0xf4, 0x73, 0xc7, 0x3d, 0x00, 0x4c, 0x8f, 0x71, 0x8d, 0x22,
	0x4f, 0xc8, 0xfb, 0xa5, 0x48, 0x90, 0xa6, 0xaf, 0x11, 0xfa, 0x3e, 0x0a, 0xdd, 0xb2, 0x42, 0x5b,
	0x69, 0x3a, 0x45, 0xeb, 0x3e, 0xb9, 0x35, 0xdd, 0x21, 0x1b, 0x7a, 0x17, 0x55, 0xfc, 0x49, 0x77,
	0x8a, 0x04, 0x7c, 0x83, 0x2c, 0x88, 0x40, 0x9f, 0xd8, 0x1d, 0x63, 0xfa, 0x55, 0xcf, 0x34, 0x70,
	0x30, 0x98, 0x3d, 0x63, 0x1a, 0xd5, 0x3a, 0x59, 0x44, 0xec, 0x69, 0xa2, 0x4f, 0x62, 0x19, 0x9c,
	0x16, 0xe8, 0x43, 0x53, 0x43, 0x30, 0x1d, 0x17, 0x16, 0x83, 0x5f, 0x23, 0xad, 0xaa, 0x36, 0x74,
	0x52, 0xff, 0xb9, 0x19, 0xd0, 0x4a, 0x69, 0xe8, 0xa1, 0xde, 0x6d, 0xe2, 0xd5, 0x95, 0x11, 0x7b,
	0x84, 0xd8, 0x56, 0x55, 0x18, 0xd1, 0xc5, 0x1b, 0x67, 0x7a, 0xb3, 0x85, 0xcd, 0xe9, 0x1f, 0xbb,
	0x37, 0xce, 0x94, 0x86, 0xdb, 0x09, 0xce, 0x8a, 0x42, 0xbe, 0x4e, 0xe2, 0xe4, 0x54, 0x2b, 0xff,
	0x07, 0xae, 0x90, 0x53, 0x34, 0x1e, 0x9f, 0x6a, 0x65, 0x1f, 0x98, 0xe1, 0x2b, 0xcd, 0x14, 0x26,
	0x5f, 0x33, 0x4e, 0x75, 0x24, 0xfc, 0x17, 0x66, 0xbf, 0x85, 0x99, 0x78, 0x00, 0xb6, 0x63, 0x63,
	0x3a, 0x8c, 0x84, 0xf7, 0x15, 0x72, 0xb9, 0x3c, 0x07, 0x58, 0xa0, 0x1f, 0x9a, 0x07, 0xba, 0x3d,
	0x01, 0x58, 0x14, 0x23, 0x2c, 0x69, 0x96, 0x73, 0x7c, 0xc1, 0x64, 0x4c, 0xa9, 0x60, 0xc0, 0x94,
	0xff, 0x23, 0x77, 0x6d, 0xc9, 0x4e, 0xce, 0x9f, 0x8b, 0xb8, 0x53, 0x58, 0x8a, 0x1b, 0xd2, 0x50,
	0x4e, 0x31, 0x85, 0x8e, 0xf4, 0x63, 0x77, 0x43, 0x02, 0xe9, 0x18, 0x8c, 0x8e, 0x76, 0x9f, 0xdc,
	0x84, 0x10, 0x2c, 0xb6, 0xa0, 0xc2, 0xd4, 0x12, 0xc8, 0x98, 0xc5, 0xfe, 0x4f, 0x5c, 0x22, 0x2d,
	0x05, 0xf9, 0x3b, 0x16, 0x60, 0x6f, 0x66, 0xd1, 0x3f, 0x9b, 0xe0, 0xfe, 0xd4, 0x7d, 0xf7, 0xa0,
	0x7f, 0x36, 0x46, 0x2b, 0x1e, 0x79, 0xb5, 0x9b, 0x59, 0xe6, 0x43, 0xec, 0x59, 0xf6, 0x95, 0x48,
	0x91, 0x7f, 0xbd, 0x76, 0x47, 0x77, 0x01, 0xd3, 0xc9, 0x79, 0xf5, 0x9d, 0xe6, 0xf2, 0x04, 0x9b,
	0x0c, 0x1e, 0x7b, 0x98, 0xd7, 0x9f, 0xd5, 0xa2, 0x36, 0x7b, 0xed, 0x11, 0xe3, 0x13, 0xf9, 0x65,
	0x39, 0x95, 0x2e, 0x55, 0x41, 0x2d, 0xbf, 0xbb, 0x79, 0xd7, 0x5a, 0xec, 0xd3, 0x4e, 0xa2, 0x7b,
	0x43, 0x49, 0xc3, 0x61, 0xbf, 0x0f, 0x5d, 0x19, 0x3a, 0x5f, 0x88, 0xe5, 0x86, 0x4f, 0x75, 0xb3,
	0x9c, 0x6f, 0x0f, 0xe5, 0x03, 0x34, 0x62, 0xe3, 0x7b, 0x44, 0xde, 0xc3, 0x04, 0x17, 0x1d, 0xb3,
	0x42, 0x2b, 0xe3, 0xf5, 0x23, 0x14, 0x80, 0x4a, 0x14, 0xad, 0xb3, 0x14, 0xb0, 0x01, 0x43, 0xa7,
	0xaa, 0xcc, 0x66, 0x43, 0x3b, 0x93, 0xc4, 0xe6, 0x8c, 0xb8, 0xd1, 0xec, 0xb9, 0xa8, 0x8d, 0x31,
	0xf6, 0xfd, 0x9b, 0x70, 0x2a, 0x64, 0x3e, 0xc0, 0xcb, 0x9d, 0xb9, 0x77, 0x83, 0x79, 0xfb, 0xee,
	0xf1, 0x83, 0xc2, 0x64, 0xc7, 0x18, 0xc9, 0x14, 0xd3, 0xe6, 0xcd, 0x5c, 0x25, 0xf6, 0x91, 0xb8,
	0x6c, 0xfe, 0x6e, 0xc2, 0x34, 0xbc, 0x99, 0x4b, 0x6e, 0xf8, 0x2e, 0xfe, 0x4f, 0xe2, 0x9d, 0xff,
	0x04, 0x00, 0x00, 0xff, 0xff, 0xcd, 0x95, 0xb9, 0xf9, 0x63, 0x1c, 0x00, 0x00,
}
