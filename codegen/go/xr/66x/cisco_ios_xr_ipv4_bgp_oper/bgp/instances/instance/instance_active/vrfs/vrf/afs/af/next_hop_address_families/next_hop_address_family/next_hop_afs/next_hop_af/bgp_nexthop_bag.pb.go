/*
Copyright 2019 Cisco Systems

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: bgp_nexthop_bag.proto

package cisco_ios_xr_ipv4_bgp_oper_bgp_instances_instance_instance_active_vrfs_vrf_afs_af_next_hop_address_families_next_hop_address_family_next_hop_afs_next_hop_af

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type BgpNexthopBag_KEYS struct {
	InstanceName         string   `protobuf:"bytes,1,opt,name=instance_name,json=instanceName,proto3" json:"instance_name,omitempty"`
	VrfName              string   `protobuf:"bytes,2,opt,name=vrf_name,json=vrfName,proto3" json:"vrf_name,omitempty"`
	AfName               string   `protobuf:"bytes,3,opt,name=af_name,json=afName,proto3" json:"af_name,omitempty"`
	NextHopAfName        string   `protobuf:"bytes,4,opt,name=next_hop_af_name,json=nextHopAfName,proto3" json:"next_hop_af_name,omitempty"`
	NextHopAddress       string   `protobuf:"bytes,5,opt,name=next_hop_address,json=nextHopAddress,proto3" json:"next_hop_address,omitempty"`
	AttributeSet         string   `protobuf:"bytes,6,opt,name=attribute_set,json=attributeSet,proto3" json:"attribute_set,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BgpNexthopBag_KEYS) Reset()         { *m = BgpNexthopBag_KEYS{} }
func (m *BgpNexthopBag_KEYS) String() string { return proto.CompactTextString(m) }
func (*BgpNexthopBag_KEYS) ProtoMessage()    {}
func (*BgpNexthopBag_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_a770d9b108335c9b, []int{0}
}

func (m *BgpNexthopBag_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BgpNexthopBag_KEYS.Unmarshal(m, b)
}
func (m *BgpNexthopBag_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BgpNexthopBag_KEYS.Marshal(b, m, deterministic)
}
func (m *BgpNexthopBag_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpNexthopBag_KEYS.Merge(m, src)
}
func (m *BgpNexthopBag_KEYS) XXX_Size() int {
	return xxx_messageInfo_BgpNexthopBag_KEYS.Size(m)
}
func (m *BgpNexthopBag_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpNexthopBag_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_BgpNexthopBag_KEYS proto.InternalMessageInfo

func (m *BgpNexthopBag_KEYS) GetInstanceName() string {
	if m != nil {
		return m.InstanceName
	}
	return ""
}

func (m *BgpNexthopBag_KEYS) GetVrfName() string {
	if m != nil {
		return m.VrfName
	}
	return ""
}

func (m *BgpNexthopBag_KEYS) GetAfName() string {
	if m != nil {
		return m.AfName
	}
	return ""
}

func (m *BgpNexthopBag_KEYS) GetNextHopAfName() string {
	if m != nil {
		return m.NextHopAfName
	}
	return ""
}

func (m *BgpNexthopBag_KEYS) GetNextHopAddress() string {
	if m != nil {
		return m.NextHopAddress
	}
	return ""
}

func (m *BgpNexthopBag_KEYS) GetAttributeSet() string {
	if m != nil {
		return m.AttributeSet
	}
	return ""
}

type BgpL2VpnAddrT struct {
	L2VpnAddress         []uint32 `protobuf:"varint,1,rep,packed,name=l2vpn_address,json=l2vpnAddress,proto3" json:"l2vpn_address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BgpL2VpnAddrT) Reset()         { *m = BgpL2VpnAddrT{} }
func (m *BgpL2VpnAddrT) String() string { return proto.CompactTextString(m) }
func (*BgpL2VpnAddrT) ProtoMessage()    {}
func (*BgpL2VpnAddrT) Descriptor() ([]byte, []int) {
	return fileDescriptor_a770d9b108335c9b, []int{1}
}

func (m *BgpL2VpnAddrT) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BgpL2VpnAddrT.Unmarshal(m, b)
}
func (m *BgpL2VpnAddrT) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BgpL2VpnAddrT.Marshal(b, m, deterministic)
}
func (m *BgpL2VpnAddrT) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpL2VpnAddrT.Merge(m, src)
}
func (m *BgpL2VpnAddrT) XXX_Size() int {
	return xxx_messageInfo_BgpL2VpnAddrT.Size(m)
}
func (m *BgpL2VpnAddrT) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpL2VpnAddrT.DiscardUnknown(m)
}

var xxx_messageInfo_BgpL2VpnAddrT proto.InternalMessageInfo

func (m *BgpL2VpnAddrT) GetL2VpnAddress() []uint32 {
	if m != nil {
		return m.L2VpnAddress
	}
	return nil
}

type BgpL2VpnMspwAddrT struct {
	L2VpnAddress         []uint32 `protobuf:"varint,1,rep,packed,name=l2vpn_address,json=l2vpnAddress,proto3" json:"l2vpn_address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BgpL2VpnMspwAddrT) Reset()         { *m = BgpL2VpnMspwAddrT{} }
func (m *BgpL2VpnMspwAddrT) String() string { return proto.CompactTextString(m) }
func (*BgpL2VpnMspwAddrT) ProtoMessage()    {}
func (*BgpL2VpnMspwAddrT) Descriptor() ([]byte, []int) {
	return fileDescriptor_a770d9b108335c9b, []int{2}
}

func (m *BgpL2VpnMspwAddrT) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BgpL2VpnMspwAddrT.Unmarshal(m, b)
}
func (m *BgpL2VpnMspwAddrT) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BgpL2VpnMspwAddrT.Marshal(b, m, deterministic)
}
func (m *BgpL2VpnMspwAddrT) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpL2VpnMspwAddrT.Merge(m, src)
}
func (m *BgpL2VpnMspwAddrT) XXX_Size() int {
	return xxx_messageInfo_BgpL2VpnMspwAddrT.Size(m)
}
func (m *BgpL2VpnMspwAddrT) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpL2VpnMspwAddrT.DiscardUnknown(m)
}

var xxx_messageInfo_BgpL2VpnMspwAddrT proto.InternalMessageInfo

func (m *BgpL2VpnMspwAddrT) GetL2VpnAddress() []uint32 {
	if m != nil {
		return m.L2VpnAddress
	}
	return nil
}

type BgpIpv4SrpolicyAddrT struct {
	Ipv4SrpolicyAddress  []uint32 `protobuf:"varint,1,rep,packed,name=ipv4_srpolicy_address,json=ipv4SrpolicyAddress,proto3" json:"ipv4_srpolicy_address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BgpIpv4SrpolicyAddrT) Reset()         { *m = BgpIpv4SrpolicyAddrT{} }
func (m *BgpIpv4SrpolicyAddrT) String() string { return proto.CompactTextString(m) }
func (*BgpIpv4SrpolicyAddrT) ProtoMessage()    {}
func (*BgpIpv4SrpolicyAddrT) Descriptor() ([]byte, []int) {
	return fileDescriptor_a770d9b108335c9b, []int{3}
}

func (m *BgpIpv4SrpolicyAddrT) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BgpIpv4SrpolicyAddrT.Unmarshal(m, b)
}
func (m *BgpIpv4SrpolicyAddrT) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BgpIpv4SrpolicyAddrT.Marshal(b, m, deterministic)
}
func (m *BgpIpv4SrpolicyAddrT) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpIpv4SrpolicyAddrT.Merge(m, src)
}
func (m *BgpIpv4SrpolicyAddrT) XXX_Size() int {
	return xxx_messageInfo_BgpIpv4SrpolicyAddrT.Size(m)
}
func (m *BgpIpv4SrpolicyAddrT) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpIpv4SrpolicyAddrT.DiscardUnknown(m)
}

var xxx_messageInfo_BgpIpv4SrpolicyAddrT proto.InternalMessageInfo

func (m *BgpIpv4SrpolicyAddrT) GetIpv4SrpolicyAddress() []uint32 {
	if m != nil {
		return m.Ipv4SrpolicyAddress
	}
	return nil
}

type BgpIpv6SrpolicyAddrT struct {
	Ipv6SrpolicyAddress  []uint32 `protobuf:"varint,1,rep,packed,name=ipv6_srpolicy_address,json=ipv6SrpolicyAddress,proto3" json:"ipv6_srpolicy_address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BgpIpv6SrpolicyAddrT) Reset()         { *m = BgpIpv6SrpolicyAddrT{} }
func (m *BgpIpv6SrpolicyAddrT) String() string { return proto.CompactTextString(m) }
func (*BgpIpv6SrpolicyAddrT) ProtoMessage()    {}
func (*BgpIpv6SrpolicyAddrT) Descriptor() ([]byte, []int) {
	return fileDescriptor_a770d9b108335c9b, []int{4}
}

func (m *BgpIpv6SrpolicyAddrT) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BgpIpv6SrpolicyAddrT.Unmarshal(m, b)
}
func (m *BgpIpv6SrpolicyAddrT) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BgpIpv6SrpolicyAddrT.Marshal(b, m, deterministic)
}
func (m *BgpIpv6SrpolicyAddrT) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpIpv6SrpolicyAddrT.Merge(m, src)
}
func (m *BgpIpv6SrpolicyAddrT) XXX_Size() int {
	return xxx_messageInfo_BgpIpv6SrpolicyAddrT.Size(m)
}
func (m *BgpIpv6SrpolicyAddrT) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpIpv6SrpolicyAddrT.DiscardUnknown(m)
}

var xxx_messageInfo_BgpIpv6SrpolicyAddrT proto.InternalMessageInfo

func (m *BgpIpv6SrpolicyAddrT) GetIpv6SrpolicyAddress() []uint32 {
	if m != nil {
		return m.Ipv6SrpolicyAddress
	}
	return nil
}

type BgpAddrtype struct {
	Afi                    string                `protobuf:"bytes,1,opt,name=afi,proto3" json:"afi,omitempty"`
	Ipv4Address            string                `protobuf:"bytes,2,opt,name=ipv4_address,json=ipv4Address,proto3" json:"ipv4_address,omitempty"`
	Ipv4McastAddress       string                `protobuf:"bytes,3,opt,name=ipv4_mcast_address,json=ipv4McastAddress,proto3" json:"ipv4_mcast_address,omitempty"`
	Ipv4LabelAddress       string                `protobuf:"bytes,4,opt,name=ipv4_label_address,json=ipv4LabelAddress,proto3" json:"ipv4_label_address,omitempty"`
	Ipv4TunnelAddress      string                `protobuf:"bytes,5,opt,name=ipv4_tunnel_address,json=ipv4TunnelAddress,proto3" json:"ipv4_tunnel_address,omitempty"`
	Ipv4MdtAddress         string                `protobuf:"bytes,6,opt,name=ipv4_mdt_address,json=ipv4MdtAddress,proto3" json:"ipv4_mdt_address,omitempty"`
	Ipv4VpnAddress         string                `protobuf:"bytes,7,opt,name=ipv4vpn_address,json=ipv4vpnAddress,proto3" json:"ipv4vpn_address,omitempty"`
	Ipv4VpnaMcastddress    string                `protobuf:"bytes,8,opt,name=ipv4vpna_mcastddress,json=ipv4vpnaMcastddress,proto3" json:"ipv4vpna_mcastddress,omitempty"`
	Ipv6Address            string                `protobuf:"bytes,9,opt,name=ipv6_address,json=ipv6Address,proto3" json:"ipv6_address,omitempty"`
	Ipv6McastAddress       string                `protobuf:"bytes,10,opt,name=ipv6_mcast_address,json=ipv6McastAddress,proto3" json:"ipv6_mcast_address,omitempty"`
	Ipv6LabelAddress       string                `protobuf:"bytes,11,opt,name=ipv6_label_address,json=ipv6LabelAddress,proto3" json:"ipv6_label_address,omitempty"`
	Ipv6VpnAddress         string                `protobuf:"bytes,12,opt,name=ipv6vpn_address,json=ipv6vpnAddress,proto3" json:"ipv6vpn_address,omitempty"`
	Ipv6VpnMcastAddress    string                `protobuf:"bytes,13,opt,name=ipv6vpn_mcast_address,json=ipv6vpnMcastAddress,proto3" json:"ipv6vpn_mcast_address,omitempty"`
	L2VpnVplsAddress       *BgpL2VpnAddrT        `protobuf:"bytes,14,opt,name=l2vpn_vpls_address,json=l2vpnVplsAddress,proto3" json:"l2vpn_vpls_address,omitempty"`
	RtConstraintAddress    string                `protobuf:"bytes,15,opt,name=rt_constraint_address,json=rtConstraintAddress,proto3" json:"rt_constraint_address,omitempty"`
	Ipv6MvpnAddress        string                `protobuf:"bytes,16,opt,name=ipv6mvpn_address,json=ipv6mvpnAddress,proto3" json:"ipv6mvpn_address,omitempty"`
	Ipv4MvpnAddress        string                `protobuf:"bytes,17,opt,name=ipv4mvpn_address,json=ipv4mvpnAddress,proto3" json:"ipv4mvpn_address,omitempty"`
	L2VpnEvpnAddress       string                `protobuf:"bytes,18,opt,name=l2vpn_evpn_address,json=l2vpnEvpnAddress,proto3" json:"l2vpn_evpn_address,omitempty"`
	LsLsAddress            string                `protobuf:"bytes,19,opt,name=ls_ls_address,json=lsLsAddress,proto3" json:"ls_ls_address,omitempty"`
	L2VpnMspwAddress       *BgpL2VpnMspwAddrT    `protobuf:"bytes,20,opt,name=l2vpn_mspw_address,json=l2vpnMspwAddress,proto3" json:"l2vpn_mspw_address,omitempty"`
	Ipv4FlowspecAddress    string                `protobuf:"bytes,21,opt,name=ipv4_flowspec_address,json=ipv4FlowspecAddress,proto3" json:"ipv4_flowspec_address,omitempty"`
	Ipv6FlowspecAddress    string                `protobuf:"bytes,22,opt,name=ipv6_flowspec_address,json=ipv6FlowspecAddress,proto3" json:"ipv6_flowspec_address,omitempty"`
	Ipv4VpnFlowspecAddress string                `protobuf:"bytes,23,opt,name=ipv4vpn_flowspec_address,json=ipv4vpnFlowspecAddress,proto3" json:"ipv4vpn_flowspec_address,omitempty"`
	Ipv6VpnFlowspecAddress string                `protobuf:"bytes,24,opt,name=ipv6vpn_flowspec_address,json=ipv6vpnFlowspecAddress,proto3" json:"ipv6vpn_flowspec_address,omitempty"`
	Ipv4SrPolicyAddress    *BgpIpv4SrpolicyAddrT `protobuf:"bytes,25,opt,name=ipv4_sr_policy_address,json=ipv4SrPolicyAddress,proto3" json:"ipv4_sr_policy_address,omitempty"`
	Ipv6SrPolicyAddress    *BgpIpv6SrpolicyAddrT `protobuf:"bytes,26,opt,name=ipv6_sr_policy_address,json=ipv6SrPolicyAddress,proto3" json:"ipv6_sr_policy_address,omitempty"`
	XXX_NoUnkeyedLiteral   struct{}              `json:"-"`
	XXX_unrecognized       []byte                `json:"-"`
	XXX_sizecache          int32                 `json:"-"`
}

func (m *BgpAddrtype) Reset()         { *m = BgpAddrtype{} }
func (m *BgpAddrtype) String() string { return proto.CompactTextString(m) }
func (*BgpAddrtype) ProtoMessage()    {}
func (*BgpAddrtype) Descriptor() ([]byte, []int) {
	return fileDescriptor_a770d9b108335c9b, []int{5}
}

func (m *BgpAddrtype) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BgpAddrtype.Unmarshal(m, b)
}
func (m *BgpAddrtype) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BgpAddrtype.Marshal(b, m, deterministic)
}
func (m *BgpAddrtype) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpAddrtype.Merge(m, src)
}
func (m *BgpAddrtype) XXX_Size() int {
	return xxx_messageInfo_BgpAddrtype.Size(m)
}
func (m *BgpAddrtype) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpAddrtype.DiscardUnknown(m)
}

var xxx_messageInfo_BgpAddrtype proto.InternalMessageInfo

func (m *BgpAddrtype) GetAfi() string {
	if m != nil {
		return m.Afi
	}
	return ""
}

func (m *BgpAddrtype) GetIpv4Address() string {
	if m != nil {
		return m.Ipv4Address
	}
	return ""
}

func (m *BgpAddrtype) GetIpv4McastAddress() string {
	if m != nil {
		return m.Ipv4McastAddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv4LabelAddress() string {
	if m != nil {
		return m.Ipv4LabelAddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv4TunnelAddress() string {
	if m != nil {
		return m.Ipv4TunnelAddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv4MdtAddress() string {
	if m != nil {
		return m.Ipv4MdtAddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv4VpnAddress() string {
	if m != nil {
		return m.Ipv4VpnAddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv4VpnaMcastddress() string {
	if m != nil {
		return m.Ipv4VpnaMcastddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv6Address() string {
	if m != nil {
		return m.Ipv6Address
	}
	return ""
}

func (m *BgpAddrtype) GetIpv6McastAddress() string {
	if m != nil {
		return m.Ipv6McastAddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv6LabelAddress() string {
	if m != nil {
		return m.Ipv6LabelAddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv6VpnAddress() string {
	if m != nil {
		return m.Ipv6VpnAddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv6VpnMcastAddress() string {
	if m != nil {
		return m.Ipv6VpnMcastAddress
	}
	return ""
}

func (m *BgpAddrtype) GetL2VpnVplsAddress() *BgpL2VpnAddrT {
	if m != nil {
		return m.L2VpnVplsAddress
	}
	return nil
}

func (m *BgpAddrtype) GetRtConstraintAddress() string {
	if m != nil {
		return m.RtConstraintAddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv6MvpnAddress() string {
	if m != nil {
		return m.Ipv6MvpnAddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv4MvpnAddress() string {
	if m != nil {
		return m.Ipv4MvpnAddress
	}
	return ""
}

func (m *BgpAddrtype) GetL2VpnEvpnAddress() string {
	if m != nil {
		return m.L2VpnEvpnAddress
	}
	return ""
}

func (m *BgpAddrtype) GetLsLsAddress() string {
	if m != nil {
		return m.LsLsAddress
	}
	return ""
}

func (m *BgpAddrtype) GetL2VpnMspwAddress() *BgpL2VpnMspwAddrT {
	if m != nil {
		return m.L2VpnMspwAddress
	}
	return nil
}

func (m *BgpAddrtype) GetIpv4FlowspecAddress() string {
	if m != nil {
		return m.Ipv4FlowspecAddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv6FlowspecAddress() string {
	if m != nil {
		return m.Ipv6FlowspecAddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv4VpnFlowspecAddress() string {
	if m != nil {
		return m.Ipv4VpnFlowspecAddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv6VpnFlowspecAddress() string {
	if m != nil {
		return m.Ipv6VpnFlowspecAddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv4SrPolicyAddress() *BgpIpv4SrpolicyAddrT {
	if m != nil {
		return m.Ipv4SrPolicyAddress
	}
	return nil
}

func (m *BgpAddrtype) GetIpv6SrPolicyAddress() *BgpIpv6SrpolicyAddrT {
	if m != nil {
		return m.Ipv6SrPolicyAddress
	}
	return nil
}

type BgpTeTunnel struct {
	TunnelType           string   `protobuf:"bytes,1,opt,name=tunnel_type,json=tunnelType,proto3" json:"tunnel_type,omitempty"`
	TunnelName           string   `protobuf:"bytes,2,opt,name=tunnel_name,json=tunnelName,proto3" json:"tunnel_name,omitempty"`
	IsTunnelUp           bool     `protobuf:"varint,3,opt,name=is_tunnel_up,json=isTunnelUp,proto3" json:"is_tunnel_up,omitempty"`
	IsTunnelInfoStale    bool     `protobuf:"varint,4,opt,name=is_tunnel_info_stale,json=isTunnelInfoStale,proto3" json:"is_tunnel_info_stale,omitempty"`
	IsTunnelRegistered   bool     `protobuf:"varint,5,opt,name=is_tunnel_registered,json=isTunnelRegistered,proto3" json:"is_tunnel_registered,omitempty"`
	IsBgpTeRegistered    bool     `protobuf:"varint,6,opt,name=is_bgp_te_registered,json=isBgpTeRegistered,proto3" json:"is_bgp_te_registered,omitempty"`
	TunnelV6Required     bool     `protobuf:"varint,7,opt,name=tunnel_v6_required,json=tunnelV6Required,proto3" json:"tunnel_v6_required,omitempty"`
	TunnelV6Enabled      bool     `protobuf:"varint,8,opt,name=tunnel_v6_enabled,json=tunnelV6Enabled,proto3" json:"tunnel_v6_enabled,omitempty"`
	TunnelNotifFirstRcvd bool     `protobuf:"varint,9,opt,name=tunnel_notif_first_rcvd,json=tunnelNotifFirstRcvd,proto3" json:"tunnel_notif_first_rcvd,omitempty"`
	TunnelStateSkipReg   bool     `protobuf:"varint,10,opt,name=tunnel_state_skip_reg,json=tunnelStateSkipReg,proto3" json:"tunnel_state_skip_reg,omitempty"`
	BindingLabel         uint32   `protobuf:"varint,11,opt,name=binding_label,json=bindingLabel,proto3" json:"binding_label,omitempty"`
	TunnelIfHandle       uint32   `protobuf:"varint,12,opt,name=tunnel_if_handle,json=tunnelIfHandle,proto3" json:"tunnel_if_handle,omitempty"`
	LastTunnelUpdate     uint32   `protobuf:"varint,13,opt,name=last_tunnel_update,json=lastTunnelUpdate,proto3" json:"last_tunnel_update,omitempty"`
	TunnelColor          uint32   `protobuf:"varint,14,opt,name=tunnel_color,json=tunnelColor,proto3" json:"tunnel_color,omitempty"`
	IsTunnelColorOnly    bool     `protobuf:"varint,15,opt,name=is_tunnel_color_only,json=isTunnelColorOnly,proto3" json:"is_tunnel_color_only,omitempty"`
	TunnelEndpointAfi    string   `protobuf:"bytes,16,opt,name=tunnel_endpoint_afi,json=tunnelEndpointAfi,proto3" json:"tunnel_endpoint_afi,omitempty"`
	Flags                uint32   `protobuf:"varint,17,opt,name=flags,proto3" json:"flags,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BgpTeTunnel) Reset()         { *m = BgpTeTunnel{} }
func (m *BgpTeTunnel) String() string { return proto.CompactTextString(m) }
func (*BgpTeTunnel) ProtoMessage()    {}
func (*BgpTeTunnel) Descriptor() ([]byte, []int) {
	return fileDescriptor_a770d9b108335c9b, []int{6}
}

func (m *BgpTeTunnel) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BgpTeTunnel.Unmarshal(m, b)
}
func (m *BgpTeTunnel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BgpTeTunnel.Marshal(b, m, deterministic)
}
func (m *BgpTeTunnel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpTeTunnel.Merge(m, src)
}
func (m *BgpTeTunnel) XXX_Size() int {
	return xxx_messageInfo_BgpTeTunnel.Size(m)
}
func (m *BgpTeTunnel) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpTeTunnel.DiscardUnknown(m)
}

var xxx_messageInfo_BgpTeTunnel proto.InternalMessageInfo

func (m *BgpTeTunnel) GetTunnelType() string {
	if m != nil {
		return m.TunnelType
	}
	return ""
}

func (m *BgpTeTunnel) GetTunnelName() string {
	if m != nil {
		return m.TunnelName
	}
	return ""
}

func (m *BgpTeTunnel) GetIsTunnelUp() bool {
	if m != nil {
		return m.IsTunnelUp
	}
	return false
}

func (m *BgpTeTunnel) GetIsTunnelInfoStale() bool {
	if m != nil {
		return m.IsTunnelInfoStale
	}
	return false
}

func (m *BgpTeTunnel) GetIsTunnelRegistered() bool {
	if m != nil {
		return m.IsTunnelRegistered
	}
	return false
}

func (m *BgpTeTunnel) GetIsBgpTeRegistered() bool {
	if m != nil {
		return m.IsBgpTeRegistered
	}
	return false
}

func (m *BgpTeTunnel) GetTunnelV6Required() bool {
	if m != nil {
		return m.TunnelV6Required
	}
	return false
}

func (m *BgpTeTunnel) GetTunnelV6Enabled() bool {
	if m != nil {
		return m.TunnelV6Enabled
	}
	return false
}

func (m *BgpTeTunnel) GetTunnelNotifFirstRcvd() bool {
	if m != nil {
		return m.TunnelNotifFirstRcvd
	}
	return false
}

func (m *BgpTeTunnel) GetTunnelStateSkipReg() bool {
	if m != nil {
		return m.TunnelStateSkipReg
	}
	return false
}

func (m *BgpTeTunnel) GetBindingLabel() uint32 {
	if m != nil {
		return m.BindingLabel
	}
	return 0
}

func (m *BgpTeTunnel) GetTunnelIfHandle() uint32 {
	if m != nil {
		return m.TunnelIfHandle
	}
	return 0
}

func (m *BgpTeTunnel) GetLastTunnelUpdate() uint32 {
	if m != nil {
		return m.LastTunnelUpdate
	}
	return 0
}

func (m *BgpTeTunnel) GetTunnelColor() uint32 {
	if m != nil {
		return m.TunnelColor
	}
	return 0
}

func (m *BgpTeTunnel) GetIsTunnelColorOnly() bool {
	if m != nil {
		return m.IsTunnelColorOnly
	}
	return false
}

func (m *BgpTeTunnel) GetTunnelEndpointAfi() string {
	if m != nil {
		return m.TunnelEndpointAfi
	}
	return ""
}

func (m *BgpTeTunnel) GetFlags() uint32 {
	if m != nil {
		return m.Flags
	}
	return 0
}

type BgpNexthopGwInfo_ struct {
	NexthopRoute             *BgpAddrtype   `protobuf:"bytes,1,opt,name=nexthop_route,json=nexthopRoute,proto3" json:"nexthop_route,omitempty"`
	NexthopRoutePrefixLength uint32         `protobuf:"varint,2,opt,name=nexthop_route_prefix_length,json=nexthopRoutePrefixLength,proto3" json:"nexthop_route_prefix_length,omitempty"`
	NexthopRouteProtocol     string         `protobuf:"bytes,3,opt,name=nexthop_route_protocol,json=nexthopRouteProtocol,proto3" json:"nexthop_route_protocol,omitempty"`
	NexthopRoutePathCount    uint32         `protobuf:"varint,4,opt,name=nexthop_route_path_count,json=nexthopRoutePathCount,proto3" json:"nexthop_route_path_count,omitempty"`
	NexthopRoutePath         []*BgpAddrtype `protobuf:"bytes,5,rep,name=nexthop_route_path,json=nexthopRoutePath,proto3" json:"nexthop_route_path,omitempty"`
	NexthopAfInvalidBits     uint32         `protobuf:"varint,6,opt,name=nexthop_af_invalid_bits,json=nexthopAfInvalidBits,proto3" json:"nexthop_af_invalid_bits,omitempty"`
	NexthopStatus            uint32         `protobuf:"varint,7,opt,name=nexthop_status,json=nexthopStatus,proto3" json:"nexthop_status,omitempty"`
	NexthopTableid           uint64         `protobuf:"varint,8,opt,name=nexthop_tableid,json=nexthopTableid,proto3" json:"nexthop_tableid,omitempty"`
	NexthopMetric            uint32         `protobuf:"varint,9,opt,name=nexthop_metric,json=nexthopMetric,proto3" json:"nexthop_metric,omitempty"`
	LastEventType            string         `protobuf:"bytes,10,opt,name=last_event_type,json=lastEventType,proto3" json:"last_event_type,omitempty"`
	LastUpdateType           string         `protobuf:"bytes,11,opt,name=last_update_type,json=lastUpdateType,proto3" json:"last_update_type,omitempty"`
	CriticalEvents           uint32         `protobuf:"varint,12,opt,name=critical_events,json=criticalEvents,proto3" json:"critical_events,omitempty"`
	NonCriticalEvents        uint32         `protobuf:"varint,13,opt,name=non_critical_events,json=nonCriticalEvents,proto3" json:"non_critical_events,omitempty"`
	LastEventSince           uint32         `protobuf:"varint,14,opt,name=last_event_since,json=lastEventSince,proto3" json:"last_event_since,omitempty"`
	LastRibUpdate            uint32         `protobuf:"varint,15,opt,name=last_rib_update,json=lastRibUpdate,proto3" json:"last_rib_update,omitempty"`
	NexthopMplsEnabled       bool           `protobuf:"varint,16,opt,name=nexthop_mpls_enabled,json=nexthopMplsEnabled,proto3" json:"nexthop_mpls_enabled,omitempty"`
	NexthopMplsInterfaces    uint32         `protobuf:"varint,17,opt,name=nexthop_mpls_interfaces,json=nexthopMplsInterfaces,proto3" json:"nexthop_mpls_interfaces,omitempty"`
	NexthopMplsLabel         uint32         `protobuf:"varint,18,opt,name=nexthop_mpls_label,json=nexthopMplsLabel,proto3" json:"nexthop_mpls_label,omitempty"`
	XXX_NoUnkeyedLiteral     struct{}       `json:"-"`
	XXX_unrecognized         []byte         `json:"-"`
	XXX_sizecache            int32          `json:"-"`
}

func (m *BgpNexthopGwInfo_) Reset()         { *m = BgpNexthopGwInfo_{} }
func (m *BgpNexthopGwInfo_) String() string { return proto.CompactTextString(m) }
func (*BgpNexthopGwInfo_) ProtoMessage()    {}
func (*BgpNexthopGwInfo_) Descriptor() ([]byte, []int) {
	return fileDescriptor_a770d9b108335c9b, []int{7}
}

func (m *BgpNexthopGwInfo_) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BgpNexthopGwInfo_.Unmarshal(m, b)
}
func (m *BgpNexthopGwInfo_) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BgpNexthopGwInfo_.Marshal(b, m, deterministic)
}
func (m *BgpNexthopGwInfo_) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpNexthopGwInfo_.Merge(m, src)
}
func (m *BgpNexthopGwInfo_) XXX_Size() int {
	return xxx_messageInfo_BgpNexthopGwInfo_.Size(m)
}
func (m *BgpNexthopGwInfo_) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpNexthopGwInfo_.DiscardUnknown(m)
}

var xxx_messageInfo_BgpNexthopGwInfo_ proto.InternalMessageInfo

func (m *BgpNexthopGwInfo_) GetNexthopRoute() *BgpAddrtype {
	if m != nil {
		return m.NexthopRoute
	}
	return nil
}

func (m *BgpNexthopGwInfo_) GetNexthopRoutePrefixLength() uint32 {
	if m != nil {
		return m.NexthopRoutePrefixLength
	}
	return 0
}

func (m *BgpNexthopGwInfo_) GetNexthopRouteProtocol() string {
	if m != nil {
		return m.NexthopRouteProtocol
	}
	return ""
}

func (m *BgpNexthopGwInfo_) GetNexthopRoutePathCount() uint32 {
	if m != nil {
		return m.NexthopRoutePathCount
	}
	return 0
}

func (m *BgpNexthopGwInfo_) GetNexthopRoutePath() []*BgpAddrtype {
	if m != nil {
		return m.NexthopRoutePath
	}
	return nil
}

func (m *BgpNexthopGwInfo_) GetNexthopAfInvalidBits() uint32 {
	if m != nil {
		return m.NexthopAfInvalidBits
	}
	return 0
}

func (m *BgpNexthopGwInfo_) GetNexthopStatus() uint32 {
	if m != nil {
		return m.NexthopStatus
	}
	return 0
}

func (m *BgpNexthopGwInfo_) GetNexthopTableid() uint64 {
	if m != nil {
		return m.NexthopTableid
	}
	return 0
}

func (m *BgpNexthopGwInfo_) GetNexthopMetric() uint32 {
	if m != nil {
		return m.NexthopMetric
	}
	return 0
}

func (m *BgpNexthopGwInfo_) GetLastEventType() string {
	if m != nil {
		return m.LastEventType
	}
	return ""
}

func (m *BgpNexthopGwInfo_) GetLastUpdateType() string {
	if m != nil {
		return m.LastUpdateType
	}
	return ""
}

func (m *BgpNexthopGwInfo_) GetCriticalEvents() uint32 {
	if m != nil {
		return m.CriticalEvents
	}
	return 0
}

func (m *BgpNexthopGwInfo_) GetNonCriticalEvents() uint32 {
	if m != nil {
		return m.NonCriticalEvents
	}
	return 0
}

func (m *BgpNexthopGwInfo_) GetLastEventSince() uint32 {
	if m != nil {
		return m.LastEventSince
	}
	return 0
}

func (m *BgpNexthopGwInfo_) GetLastRibUpdate() uint32 {
	if m != nil {
		return m.LastRibUpdate
	}
	return 0
}

func (m *BgpNexthopGwInfo_) GetNexthopMplsEnabled() bool {
	if m != nil {
		return m.NexthopMplsEnabled
	}
	return false
}

func (m *BgpNexthopGwInfo_) GetNexthopMplsInterfaces() uint32 {
	if m != nil {
		return m.NexthopMplsInterfaces
	}
	return 0
}

func (m *BgpNexthopGwInfo_) GetNexthopMplsLabel() uint32 {
	if m != nil {
		return m.NexthopMplsLabel
	}
	return 0
}

type BgpIntNhGw_ struct {
	GatewayFlags         uint32   `protobuf:"varint,1,opt,name=gateway_flags,json=gatewayFlags,proto3" json:"gateway_flags,omitempty"`
	RegistrationType     string   `protobuf:"bytes,2,opt,name=registration_type,json=registrationType,proto3" json:"registration_type,omitempty"`
	RegistrationSince    uint32   `protobuf:"varint,3,opt,name=registration_since,json=registrationSince,proto3" json:"registration_since,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BgpIntNhGw_) Reset()         { *m = BgpIntNhGw_{} }
func (m *BgpIntNhGw_) String() string { return proto.CompactTextString(m) }
func (*BgpIntNhGw_) ProtoMessage()    {}
func (*BgpIntNhGw_) Descriptor() ([]byte, []int) {
	return fileDescriptor_a770d9b108335c9b, []int{8}
}

func (m *BgpIntNhGw_) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BgpIntNhGw_.Unmarshal(m, b)
}
func (m *BgpIntNhGw_) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BgpIntNhGw_.Marshal(b, m, deterministic)
}
func (m *BgpIntNhGw_) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpIntNhGw_.Merge(m, src)
}
func (m *BgpIntNhGw_) XXX_Size() int {
	return xxx_messageInfo_BgpIntNhGw_.Size(m)
}
func (m *BgpIntNhGw_) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpIntNhGw_.DiscardUnknown(m)
}

var xxx_messageInfo_BgpIntNhGw_ proto.InternalMessageInfo

func (m *BgpIntNhGw_) GetGatewayFlags() uint32 {
	if m != nil {
		return m.GatewayFlags
	}
	return 0
}

func (m *BgpIntNhGw_) GetRegistrationType() string {
	if m != nil {
		return m.RegistrationType
	}
	return ""
}

func (m *BgpIntNhGw_) GetRegistrationSince() uint32 {
	if m != nil {
		return m.RegistrationSince
	}
	return 0
}

type BgpIntNh_ struct {
	NexthopAddress             *BgpAddrtype   `protobuf:"bytes,1,opt,name=nexthop_address,json=nexthopAddress,proto3" json:"nexthop_address,omitempty"`
	NexthopId                  uint32         `protobuf:"varint,2,opt,name=nexthop_id,json=nexthopId,proto3" json:"nexthop_id,omitempty"`
	NexthopVersion             uint32         `protobuf:"varint,3,opt,name=nexthop_version,json=nexthopVersion,proto3" json:"nexthop_version,omitempty"`
	NexthopFlags               uint32         `protobuf:"varint,4,opt,name=nexthop_flags,json=nexthopFlags,proto3" json:"nexthop_flags,omitempty"`
	NexthopIfHandle            uint32         `protobuf:"varint,5,opt,name=nexthop_if_handle,json=nexthopIfHandle,proto3" json:"nexthop_if_handle,omitempty"`
	NexthopMetrice             []uint32       `protobuf:"varint,6,rep,packed,name=nexthop_metrice,json=nexthopMetrice,proto3" json:"nexthop_metrice,omitempty"`
	NexthopRefcount            []uint32       `protobuf:"varint,7,rep,packed,name=nexthop_refcount,json=nexthopRefcount,proto3" json:"nexthop_refcount,omitempty"`
	NexthopAfUserBits          uint32         `protobuf:"varint,8,opt,name=nexthop_af_user_bits,json=nexthopAfUserBits,proto3" json:"nexthop_af_user_bits,omitempty"`
	NexthopLabel               uint32         `protobuf:"varint,9,opt,name=nexthop_label,json=nexthopLabel,proto3" json:"nexthop_label,omitempty"`
	GatewayFlags               uint32         `protobuf:"varint,10,opt,name=gateway_flags,json=gatewayFlags,proto3" json:"gateway_flags,omitempty"`
	NexthopGatewayInternalInfo []*BgpIntNhGw_ `protobuf:"bytes,11,rep,name=nexthop_gateway_internal_info,json=nexthopGatewayInternalInfo,proto3" json:"nexthop_gateway_internal_info,omitempty"`
	XXX_NoUnkeyedLiteral       struct{}       `json:"-"`
	XXX_unrecognized           []byte         `json:"-"`
	XXX_sizecache              int32          `json:"-"`
}

func (m *BgpIntNh_) Reset()         { *m = BgpIntNh_{} }
func (m *BgpIntNh_) String() string { return proto.CompactTextString(m) }
func (*BgpIntNh_) ProtoMessage()    {}
func (*BgpIntNh_) Descriptor() ([]byte, []int) {
	return fileDescriptor_a770d9b108335c9b, []int{9}
}

func (m *BgpIntNh_) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BgpIntNh_.Unmarshal(m, b)
}
func (m *BgpIntNh_) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BgpIntNh_.Marshal(b, m, deterministic)
}
func (m *BgpIntNh_) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpIntNh_.Merge(m, src)
}
func (m *BgpIntNh_) XXX_Size() int {
	return xxx_messageInfo_BgpIntNh_.Size(m)
}
func (m *BgpIntNh_) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpIntNh_.DiscardUnknown(m)
}

var xxx_messageInfo_BgpIntNh_ proto.InternalMessageInfo

func (m *BgpIntNh_) GetNexthopAddress() *BgpAddrtype {
	if m != nil {
		return m.NexthopAddress
	}
	return nil
}

func (m *BgpIntNh_) GetNexthopId() uint32 {
	if m != nil {
		return m.NexthopId
	}
	return 0
}

func (m *BgpIntNh_) GetNexthopVersion() uint32 {
	if m != nil {
		return m.NexthopVersion
	}
	return 0
}

func (m *BgpIntNh_) GetNexthopFlags() uint32 {
	if m != nil {
		return m.NexthopFlags
	}
	return 0
}

func (m *BgpIntNh_) GetNexthopIfHandle() uint32 {
	if m != nil {
		return m.NexthopIfHandle
	}
	return 0
}

func (m *BgpIntNh_) GetNexthopMetrice() []uint32 {
	if m != nil {
		return m.NexthopMetrice
	}
	return nil
}

func (m *BgpIntNh_) GetNexthopRefcount() []uint32 {
	if m != nil {
		return m.NexthopRefcount
	}
	return nil
}

func (m *BgpIntNh_) GetNexthopAfUserBits() uint32 {
	if m != nil {
		return m.NexthopAfUserBits
	}
	return 0
}

func (m *BgpIntNh_) GetNexthopLabel() uint32 {
	if m != nil {
		return m.NexthopLabel
	}
	return 0
}

func (m *BgpIntNh_) GetGatewayFlags() uint32 {
	if m != nil {
		return m.GatewayFlags
	}
	return 0
}

func (m *BgpIntNh_) GetNexthopGatewayInternalInfo() []*BgpIntNhGw_ {
	if m != nil {
		return m.NexthopGatewayInternalInfo
	}
	return nil
}

type BgpNexthopBag struct {
	AfName                        string               `protobuf:"bytes,50,opt,name=af_name,json=afName,proto3" json:"af_name,omitempty"`
	NexthopAddress                *BgpAddrtype         `protobuf:"bytes,51,opt,name=nexthop_address,json=nexthopAddress,proto3" json:"nexthop_address,omitempty"`
	NhTunnel                      *BgpTeTunnel         `protobuf:"bytes,52,opt,name=nh_tunnel,json=nhTunnel,proto3" json:"nh_tunnel,omitempty"`
	RibNexthopId                  uint32               `protobuf:"varint,53,opt,name=rib_nexthop_id,json=ribNexthopId,proto3" json:"rib_nexthop_id,omitempty"`
	NexthopPendingRegistration    uint32               `protobuf:"varint,54,opt,name=nexthop_pending_registration,json=nexthopPendingRegistration,proto3" json:"nexthop_pending_registration,omitempty"`
	NexthopReferenceCount         uint32               `protobuf:"varint,55,opt,name=nexthop_reference_count,json=nexthopReferenceCount,proto3" json:"nexthop_reference_count,omitempty"`
	NhReferenceCountTotal         uint32               `protobuf:"varint,56,opt,name=nh_reference_count_total,json=nhReferenceCountTotal,proto3" json:"nh_reference_count_total,omitempty"`
	NhFirstHopIfHandle            string               `protobuf:"bytes,57,opt,name=nh_first_hop_if_handle,json=nhFirstHopIfHandle,proto3" json:"nh_first_hop_if_handle,omitempty"`
	NexthopGatewayInfo            []*BgpNexthopGwInfo_ `protobuf:"bytes,58,rep,name=nexthop_gateway_info,json=nexthopGatewayInfo,proto3" json:"nexthop_gateway_info,omitempty"`
	NexthopAigpMetric             uint32               `protobuf:"varint,59,opt,name=nexthop_aigp_metric,json=nexthopAigpMetric,proto3" json:"nexthop_aigp_metric,omitempty"`
	NexthopInternalInfo           *BgpIntNh_           `protobuf:"bytes,60,opt,name=nexthop_internal_info,json=nexthopInternalInfo,proto3" json:"nexthop_internal_info,omitempty"`
	NeighborAddress               []*BgpAddrtype       `protobuf:"bytes,61,rep,name=neighbor_address,json=neighborAddress,proto3" json:"neighbor_address,omitempty"`
	NexthopGatewayReachable       bool                 `protobuf:"varint,62,opt,name=nexthop_gateway_reachable,json=nexthopGatewayReachable,proto3" json:"nexthop_gateway_reachable,omitempty"`
	NexthopGatewayPrefixConnected bool                 `protobuf:"varint,63,opt,name=nexthop_gateway_prefix_connected,json=nexthopGatewayPrefixConnected,proto3" json:"nexthop_gateway_prefix_connected,omitempty"`
	NexthopGatewayPrefixLength    uint32               `protobuf:"varint,64,opt,name=nexthop_gateway_prefix_length,json=nexthopGatewayPrefixLength,proto3" json:"nexthop_gateway_prefix_length,omitempty"`
	XXX_NoUnkeyedLiteral          struct{}             `json:"-"`
	XXX_unrecognized              []byte               `json:"-"`
	XXX_sizecache                 int32                `json:"-"`
}

func (m *BgpNexthopBag) Reset()         { *m = BgpNexthopBag{} }
func (m *BgpNexthopBag) String() string { return proto.CompactTextString(m) }
func (*BgpNexthopBag) ProtoMessage()    {}
func (*BgpNexthopBag) Descriptor() ([]byte, []int) {
	return fileDescriptor_a770d9b108335c9b, []int{10}
}

func (m *BgpNexthopBag) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BgpNexthopBag.Unmarshal(m, b)
}
func (m *BgpNexthopBag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BgpNexthopBag.Marshal(b, m, deterministic)
}
func (m *BgpNexthopBag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpNexthopBag.Merge(m, src)
}
func (m *BgpNexthopBag) XXX_Size() int {
	return xxx_messageInfo_BgpNexthopBag.Size(m)
}
func (m *BgpNexthopBag) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpNexthopBag.DiscardUnknown(m)
}

var xxx_messageInfo_BgpNexthopBag proto.InternalMessageInfo

func (m *BgpNexthopBag) GetAfName() string {
	if m != nil {
		return m.AfName
	}
	return ""
}

func (m *BgpNexthopBag) GetNexthopAddress() *BgpAddrtype {
	if m != nil {
		return m.NexthopAddress
	}
	return nil
}

func (m *BgpNexthopBag) GetNhTunnel() *BgpTeTunnel {
	if m != nil {
		return m.NhTunnel
	}
	return nil
}

func (m *BgpNexthopBag) GetRibNexthopId() uint32 {
	if m != nil {
		return m.RibNexthopId
	}
	return 0
}

func (m *BgpNexthopBag) GetNexthopPendingRegistration() uint32 {
	if m != nil {
		return m.NexthopPendingRegistration
	}
	return 0
}

func (m *BgpNexthopBag) GetNexthopReferenceCount() uint32 {
	if m != nil {
		return m.NexthopReferenceCount
	}
	return 0
}

func (m *BgpNexthopBag) GetNhReferenceCountTotal() uint32 {
	if m != nil {
		return m.NhReferenceCountTotal
	}
	return 0
}

func (m *BgpNexthopBag) GetNhFirstHopIfHandle() string {
	if m != nil {
		return m.NhFirstHopIfHandle
	}
	return ""
}

func (m *BgpNexthopBag) GetNexthopGatewayInfo() []*BgpNexthopGwInfo_ {
	if m != nil {
		return m.NexthopGatewayInfo
	}
	return nil
}

func (m *BgpNexthopBag) GetNexthopAigpMetric() uint32 {
	if m != nil {
		return m.NexthopAigpMetric
	}
	return 0
}

func (m *BgpNexthopBag) GetNexthopInternalInfo() *BgpIntNh_ {
	if m != nil {
		return m.NexthopInternalInfo
	}
	return nil
}

func (m *BgpNexthopBag) GetNeighborAddress() []*BgpAddrtype {
	if m != nil {
		return m.NeighborAddress
	}
	return nil
}

func (m *BgpNexthopBag) GetNexthopGatewayReachable() bool {
	if m != nil {
		return m.NexthopGatewayReachable
	}
	return false
}

func (m *BgpNexthopBag) GetNexthopGatewayPrefixConnected() bool {
	if m != nil {
		return m.NexthopGatewayPrefixConnected
	}
	return false
}

func (m *BgpNexthopBag) GetNexthopGatewayPrefixLength() uint32 {
	if m != nil {
		return m.NexthopGatewayPrefixLength
	}
	return 0
}

func init() {
	proto.RegisterType((*BgpNexthopBag_KEYS)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.vrfs.vrf.afs.af.next_hop_address_families.next_hop_address_family.next_hop_afs.next_hop_af.bgp_nexthop_bag_KEYS")
	proto.RegisterType((*BgpL2VpnAddrT)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.vrfs.vrf.afs.af.next_hop_address_families.next_hop_address_family.next_hop_afs.next_hop_af.bgp_l2vpn_addr_t")
	proto.RegisterType((*BgpL2VpnMspwAddrT)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.vrfs.vrf.afs.af.next_hop_address_families.next_hop_address_family.next_hop_afs.next_hop_af.bgp_l2vpn_mspw_addr_t")
	proto.RegisterType((*BgpIpv4SrpolicyAddrT)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.vrfs.vrf.afs.af.next_hop_address_families.next_hop_address_family.next_hop_afs.next_hop_af.bgp_ipv4_srpolicy_addr_t")
	proto.RegisterType((*BgpIpv6SrpolicyAddrT)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.vrfs.vrf.afs.af.next_hop_address_families.next_hop_address_family.next_hop_afs.next_hop_af.bgp_ipv6_srpolicy_addr_t")
	proto.RegisterType((*BgpAddrtype)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.vrfs.vrf.afs.af.next_hop_address_families.next_hop_address_family.next_hop_afs.next_hop_af.bgp_addrtype")
	proto.RegisterType((*BgpTeTunnel)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.vrfs.vrf.afs.af.next_hop_address_families.next_hop_address_family.next_hop_afs.next_hop_af.bgp_te_tunnel")
	proto.RegisterType((*BgpNexthopGwInfo_)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.vrfs.vrf.afs.af.next_hop_address_families.next_hop_address_family.next_hop_afs.next_hop_af.bgp_nexthop_gw_info_")
	proto.RegisterType((*BgpIntNhGw_)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.vrfs.vrf.afs.af.next_hop_address_families.next_hop_address_family.next_hop_afs.next_hop_af.bgp_int_nh_gw_")
	proto.RegisterType((*BgpIntNh_)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.vrfs.vrf.afs.af.next_hop_address_families.next_hop_address_family.next_hop_afs.next_hop_af.bgp_int_nh_")
	proto.RegisterType((*BgpNexthopBag)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.vrfs.vrf.afs.af.next_hop_address_families.next_hop_address_family.next_hop_afs.next_hop_af.bgp_nexthop_bag")
}

func init() { proto.RegisterFile("bgp_nexthop_bag.proto", fileDescriptor_a770d9b108335c9b) }

var fileDescriptor_a770d9b108335c9b = []byte{
	// 1977 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x58, 0xcd, 0x6f, 0x1c, 0x49,
	0x15, 0x57, 0xe3, 0xd8, 0x1e, 0x97, 0x3d, 0x1f, 0xae, 0xd8, 0xce, 0x64, 0x21, 0xc2, 0x98, 0x8f,
	0x98, 0x25, 0x0c, 0xbb, 0x5e, 0x6f, 0x67, 0x59, 0x76, 0x61, 0xb3, 0x96, 0xb3, 0xb1, 0x48, 0x42,
	0xd4, 0xf6, 0x46, 0xe2, 0xd4, 0xaa, 0xe9, 0xa9, 0x9e, 0x29, 0x6d, 0xbb, 0xba, 0xe9, 0x2e, 0x8f,
	0xe3, 0xff, 0x81, 0x0b, 0x77, 0xfe, 0x01, 0x3e, 0xc4, 0x01, 0xa4, 0xbd, 0x72, 0xe6, 0xc6, 0x01,
	0x21, 0x71, 0x80, 0xc3, 0x4a, 0x88, 0x0b, 0x07, 0x0e, 0xfc, 0x01, 0xa8, 0xde, 0xab, 0xaa, 0xae,
	0x6e, 0x7b, 0x91, 0xb8, 0x31, 0x97, 0x28, 0x7e, 0xef, 0xf7, 0xaa, 0xeb, 0x7d, 0xfd, 0xde, 0xab,
	0x21, 0xdb, 0xe3, 0x69, 0x11, 0x4b, 0xfe, 0x4a, 0xcd, 0xf2, 0x22, 0x1e, 0xb3, 0xe9, 0xa8, 0x28,
	0x73, 0x95, 0xd3, 0x9f, 0x07, 0x89, 0xa8, 0x92, 0x3c, 0x16, 0x79, 0x15, 0xbf, 0x2a, 0x63, 0x51,
	0xcc, 0x0f, 0x63, 0x8d, 0xcc, 0x0b, 0x5e, 0x8e, 0xc6, 0xd3, 0x62, 0x24, 0x64, 0xa5, 0x98, 0x4c,
	0x78, 0xe5, 0xfe, 0xe7, 0xfe, 0x13, 0xb3, 0x44, 0x89, 0x39, 0x1f, 0xcd, 0xcb, 0xb4, 0xd2, 0xff,
	0x8c, 0x58, 0x5a, 0x8d, 0x58, 0x3a, 0xd2, 0x5f, 0x89, 0xf5, 0x67, 0xd8, 0x64, 0x52, 0xf2, 0xaa,
	0x8a, 0x53, 0x76, 0x2e, 0x32, 0xc1, 0xab, 0xcf, 0xd1, 0x5c, 0x79, 0xf2, 0xd4, 0x07, 0xa5, 0x7b,
	0xff, 0x08, 0xc8, 0x56, 0xeb, 0xe2, 0xf1, 0x0f, 0x8f, 0x7f, 0x7c, 0x4a, 0xbf, 0x4a, 0xba, 0xee,
	0x1a, 0x92, 0x9d, 0xf3, 0x61, 0xb0, 0x1b, 0xec, 0xaf, 0x45, 0x1b, 0x56, 0xf8, 0x9c, 0x9d, 0x73,
	0x7a, 0x97, 0x74, 0xe6, 0x65, 0x8a, 0xfa, 0x2f, 0x80, 0x7e, 0x75, 0x5e, 0xa6, 0xa0, 0xba, 0x43,
	0x56, 0x99, 0xd1, 0x2c, 0x81, 0x66, 0x85, 0xa1, 0xe2, 0x3e, 0x19, 0x78, 0x17, 0x40, 0xc4, 0x2d,
	0x40, 0x74, 0xb5, 0xfc, 0x49, 0x5e, 0x3c, 0x42, 0xe0, 0xbe, 0x0f, 0x44, 0x77, 0x86, 0xcb, 0x00,
	0xec, 0x59, 0x20, 0x4a, 0xf5, 0x5d, 0x99, 0x52, 0xa5, 0x18, 0x5f, 0x28, 0x1e, 0x57, 0x5c, 0x0d,
	0x57, 0xf0, 0xae, 0x4e, 0x78, 0xca, 0xd5, 0xde, 0x43, 0x32, 0xd0, 0x8e, 0x66, 0x07, 0xf3, 0x42,
	0xc2, 0x79, 0xb1, 0xd2, 0x86, 0xf5, 0xdf, 0xfa, 0xfc, 0x60, 0x77, 0x69, 0xbf, 0x1b, 0x6d, 0x80,
	0xd0, 0x9c, 0xbe, 0xf7, 0x1e, 0xa6, 0x16, 0x81, 0xe7, 0x55, 0x71, 0xf9, 0x3f, 0x59, 0x3f, 0x27,
	0x43, 0x6d, 0x0d, 0x79, 0xaf, 0xca, 0x22, 0xcf, 0x44, 0x72, 0x65, 0x0f, 0x38, 0x20, 0xdb, 0xd7,
	0xe5, 0xf5, 0x41, 0xb7, 0xb5, 0xf2, 0xd4, 0xe8, 0xae, 0x9f, 0x17, 0x7e, 0xce, 0x79, 0xe1, 0x7f,
	0x3b, 0x2f, 0x6c, 0x9f, 0xf7, 0xd3, 0x3e, 0xd9, 0xd0, 0x07, 0x6a, 0xa8, 0xba, 0x2a, 0x38, 0x1d,
	0x90, 0x25, 0x96, 0x0a, 0x93, 0x6e, 0xfd, 0x5f, 0xfa, 0x15, 0xb2, 0x01, 0xd7, 0xb4, 0xa7, 0x61,
	0xa6, 0xd7, 0xb5, 0xcc, 0x66, 0xe0, 0x01, 0xa1, 0x00, 0x39, 0x4f, 0x58, 0xa5, 0x1c, 0x10, 0x13,
	0x3f, 0xd0, 0x9a, 0x67, 0x5a, 0xd1, 0x46, 0x67, 0x6c, 0xcc, 0x33, 0x87, 0xbe, 0x55, 0xa3, 0x9f,
	0x6a, 0x85, 0x45, 0x8f, 0x08, 0x04, 0x22, 0x56, 0x17, 0x52, 0x7a, 0x70, 0x2c, 0x85, 0x4d, 0xad,
	0x3a, 0x03, 0x8d, 0xc5, 0xef, 0x93, 0x01, 0xde, 0x65, 0x52, 0xdf, 0x04, 0x0b, 0xa2, 0x07, 0x37,
	0x99, 0xb8, 0x7b, 0xdc, 0x27, 0x7d, 0x2d, 0xf1, 0x53, 0xb8, 0x5a, 0x03, 0xeb, 0x24, 0xd2, 0x37,
	0xc9, 0x96, 0x91, 0x30, 0x74, 0xd1, 0xa0, 0x3b, 0x80, 0xbe, 0x6d, 0x75, 0xcf, 0x6a, 0x95, 0x09,
	0x5a, 0xe8, 0x0e, 0x5e, 0x73, 0x41, 0x0b, 0x9b, 0x61, 0x08, 0x5b, 0x41, 0x23, 0x2e, 0x0c, 0xe1,
	0x0d, 0x41, 0x0b, 0x5b, 0x41, 0x5b, 0xaf, 0xd1, 0x8d, 0xa0, 0xa1, 0x6b, 0xa1, 0xef, 0xda, 0x86,
	0x73, 0x2d, 0xf4, 0x5c, 0x33, 0x35, 0x03, 0xb5, 0xdd, 0xb8, 0x47, 0xd7, 0xf9, 0xa6, 0x95, 0x8d,
	0xab, 0xfc, 0x35, 0x20, 0x14, 0x2b, 0x7f, 0x5e, 0x64, 0x95, 0xb3, 0xe8, 0xed, 0x06, 0xfb, 0xeb,
	0x07, 0xbf, 0x09, 0x46, 0xff, 0xcf, 0x8c, 0x37, 0x6a, 0x93, 0x40, 0x34, 0x80, 0xbf, 0x5e, 0x16,
	0x59, 0xe5, 0xc5, 0xa4, 0x54, 0x71, 0x92, 0xcb, 0x4a, 0x95, 0x4c, 0xc8, 0x3a, 0x26, 0x7d, 0x8c,
	0x49, 0xa9, 0x8e, 0x9c, 0xce, 0xda, 0x7c, 0x13, 0xaa, 0x2e, 0x3c, 0xf7, 0x23, 0x3e, 0x00, 0x78,
	0xdf, 0xca, 0x9b, 0xd0, 0xc3, 0x06, 0x74, 0xd3, 0x41, 0x0f, 0x7d, 0xe8, 0x03, 0x1b, 0x68, 0xee,
	0x83, 0x29, 0x26, 0x1d, 0x34, 0xc7, 0x1e, 0x7a, 0x8f, 0x74, 0xb3, 0x2a, 0xf6, 0x32, 0x72, 0x1b,
	0x8b, 0x2e, 0xab, 0x9e, 0x3a, 0xdf, 0x3e, 0x73, 0xb9, 0x73, 0x54, 0xa6, 0x91, 0x5b, 0x90, 0xbb,
	0xdf, 0x2d, 0x4c, 0xee, 0x3c, 0x1e, 0x36, 0x81, 0x78, 0x56, 0x15, 0x97, 0xcd, 0xa2, 0x3e, 0x8c,
	0xd3, 0x2c, 0xbf, 0xac, 0x0a, 0x9e, 0x38, 0x37, 0xb7, 0xeb, 0x86, 0x7d, 0x6c, 0x74, 0xad, 0x46,
	0xb8, 0x6e, 0xb3, 0x53, 0x37, 0x42, 0xdb, 0xe6, 0x1d, 0x32, 0xb4, 0x04, 0x72, 0xcd, 0xec, 0x0e,
	0x98, 0xed, 0x18, 0xfd, 0xcd, 0x96, 0xe1, 0x8d, 0x96, 0x43, 0x67, 0x19, 0xde, 0x60, 0xf9, 0xcf,
	0x80, 0xec, 0x98, 0xa9, 0x11, 0xb7, 0x68, 0xfe, 0x2e, 0x24, 0xf1, 0xd3, 0x05, 0x48, 0xe2, 0x4d,
	0xe3, 0xd0, 0xce, 0xbb, 0x17, 0xfe, 0x7c, 0xb2, 0xee, 0x86, 0x37, 0xb8, 0xfb, 0xda, 0x22, 0xb9,
	0x1b, 0xde, 0xe8, 0x6e, 0xd8, 0x72, 0x77, 0xef, 0xb3, 0x65, 0xd2, 0xd5, 0x16, 0x8a, 0x9b, 0x79,
	0x47, 0xbf, 0x4c, 0xd6, 0xcd, 0xe4, 0xd3, 0xe3, 0xd9, 0xcc, 0x65, 0x82, 0xa2, 0x33, 0x3d, 0xb0,
	0x6b, 0x80, 0xb7, 0x87, 0x19, 0x00, 0x2c, 0x52, 0xbb, 0x64, 0x43, 0x54, 0x76, 0x7c, 0x5e, 0x14,
	0x30, 0x96, 0x3b, 0x11, 0x11, 0x15, 0xce, 0xcd, 0x8f, 0x0b, 0xfa, 0x1d, 0xb2, 0x55, 0x23, 0x84,
	0x4c, 0xf3, 0xb8, 0x52, 0x2c, 0xc3, 0xbd, 0xac, 0x13, 0x6d, 0x5a, 0xe4, 0x89, 0x4c, 0xf3, 0x53,
	0xad, 0xa0, 0x6f, 0xf8, 0x06, 0x25, 0x9f, 0x8a, 0x4a, 0xf1, 0x92, 0x4f, 0x60, 0x28, 0x77, 0x22,
	0x6a, 0x0d, 0x22, 0xa7, 0x31, 0x9f, 0x30, 0xae, 0x79, 0x16, 0x2b, 0xf6, 0x13, 0x1f, 0x4e, 0x8b,
	0x33, 0xee, 0x19, 0x3c, 0x20, 0xd4, 0x9c, 0x3f, 0x0f, 0xe3, 0x92, 0xff, 0xe4, 0x42, 0x68, 0xf8,
	0x2a, 0xc0, 0x07, 0xa8, 0x79, 0x19, 0x46, 0x46, 0x4e, 0x5f, 0x27, 0x9b, 0x35, 0x9a, 0x4b, 0x36,
	0xce, 0xf8, 0x04, 0xc6, 0x73, 0x27, 0xea, 0x5b, 0xf0, 0x31, 0x8a, 0xe9, 0xdb, 0xe4, 0x8e, 0x0d,
	0x58, 0xae, 0x44, 0x1a, 0xa7, 0xa2, 0xac, 0x54, 0x5c, 0x26, 0xf3, 0x09, 0x4c, 0xe9, 0x4e, 0xb4,
	0x65, 0x82, 0xa7, 0xb5, 0x8f, 0xb5, 0x32, 0x4a, 0xe6, 0x13, 0xfa, 0x26, 0xd9, 0x36, 0x66, 0x95,
	0x62, 0x7a, 0xd1, 0xfc, 0x44, 0x14, 0xda, 0x13, 0x98, 0xd8, 0x9d, 0xc8, 0xdc, 0xf6, 0x54, 0xeb,
	0x4e, 0x3f, 0x11, 0x45, 0xc4, 0xa7, 0x7a, 0x43, 0x1c, 0x0b, 0x39, 0x11, 0x72, 0x8a, 0x63, 0x1b,
	0xc6, 0x75, 0x37, 0xda, 0x30, 0x42, 0x98, 0xd8, 0x7a, 0x5f, 0xb1, 0x91, 0x4f, 0xe3, 0x19, 0x93,
	0x93, 0x8c, 0xc3, 0xac, 0xee, 0x46, 0x3d, 0x94, 0x9f, 0xa4, 0x4f, 0x40, 0x0a, 0xd3, 0x40, 0x8f,
	0x68, 0x97, 0xca, 0x09, 0x53, 0x1c, 0x06, 0x75, 0x37, 0x1a, 0x68, 0x8d, 0x4d, 0xa8, 0x96, 0xeb,
	0x0d, 0xc4, 0x00, 0x93, 0x3c, 0xcb, 0x4b, 0x18, 0xcf, 0xdd, 0xc8, 0xd4, 0xca, 0x91, 0x16, 0x35,
	0xf3, 0x0e, 0xa8, 0x38, 0x97, 0xd9, 0x15, 0xcc, 0x39, 0x2f, 0xef, 0x00, 0xfe, 0x91, 0xcc, 0xae,
	0xf4, 0x2e, 0x66, 0xd0, 0x5c, 0x4e, 0x8a, 0x1c, 0x66, 0x63, 0x2a, 0xcc, 0xa0, 0x33, 0x19, 0x38,
	0x36, 0x9a, 0x47, 0xa9, 0xa0, 0x5b, 0x64, 0x39, 0xcd, 0xd8, 0x14, 0xe7, 0x5b, 0x37, 0xc2, 0x3f,
	0xf6, 0x3e, 0x5d, 0x6b, 0x3e, 0x3a, 0xa6, 0x97, 0x58, 0x74, 0xf4, 0x8f, 0x01, 0xe9, 0x5a, 0x61,
	0x99, 0x5f, 0x28, 0x2c, 0xf7, 0xf5, 0x83, 0x5f, 0x2e, 0x40, 0x8f, 0xdb, 0x05, 0x3a, 0xda, 0x30,
	0x1e, 0x44, 0xda, 0x01, 0xfa, 0x3e, 0xf9, 0x62, 0xc3, 0xa3, 0xb8, 0x28, 0x79, 0x2a, 0x5e, 0xc5,
	0x19, 0x97, 0x53, 0x35, 0x83, 0x6e, 0xed, 0x46, 0x43, 0xdf, 0xe4, 0x05, 0x00, 0x9e, 0x82, 0x9e,
	0x1e, 0x92, 0x9d, 0xb6, 0x79, 0xae, 0xf2, 0x24, 0xcf, 0xcc, 0x72, 0xbd, 0xd5, 0xb4, 0x44, 0x1d,
	0x7d, 0x48, 0x86, 0x2d, 0x2b, 0xa6, 0x66, 0x71, 0x92, 0x5f, 0x48, 0x05, 0x3d, 0xdd, 0x8d, 0xb6,
	0x1b, 0x76, 0x4c, 0xcd, 0x8e, 0xb4, 0x92, 0xfe, 0x25, 0x20, 0xf4, 0xba, 0xe5, 0x70, 0x79, 0x77,
	0x69, 0xd1, 0xb2, 0x30, 0x68, 0x3b, 0xa8, 0xdb, 0xde, 0xba, 0xc6, 0xd2, 0x58, 0xc8, 0x39, 0xcb,
	0xc4, 0x24, 0x1e, 0x0b, 0x85, 0xcf, 0x83, 0xae, 0x8b, 0xe5, 0xa3, 0xf4, 0x04, 0x95, 0x1f, 0x0a,
	0x55, 0xd1, 0xaf, 0x93, 0x9e, 0x35, 0xd3, 0x7d, 0x7f, 0x81, 0x6f, 0x84, 0x6e, 0x64, 0x0b, 0xf5,
	0x14, 0x84, 0x7a, 0xe1, 0xb6, 0x30, 0xa5, 0x69, 0x46, 0x20, 0xfd, 0xdc, 0x8a, 0xac, 0xf5, 0x19,
	0x4a, 0xfd, 0xf3, 0xce, 0xb9, 0x2a, 0x45, 0x02, 0xa4, 0x53, 0x9f, 0xf7, 0x0c, 0x84, 0xf4, 0x1b,
	0xa4, 0x0f, 0xbd, 0xce, 0xe7, 0x5c, 0x2a, 0xa4, 0x7e, 0x7c, 0x19, 0x74, 0xb5, 0xf8, 0x58, 0x4b,
	0x81, 0xfd, 0xf7, 0x09, 0x74, 0xbe, 0x21, 0x03, 0x04, 0xe2, 0xa3, 0xa0, 0xa7, 0xe5, 0xc8, 0x05,
	0x80, 0xbc, 0x4f, 0xfa, 0x49, 0x29, 0x94, 0x48, 0x58, 0x86, 0xa7, 0x56, 0x96, 0x66, 0xac, 0x18,
	0x4e, 0x85, 0x07, 0x97, 0xcc, 0x65, 0xdc, 0x06, 0x23, 0xcf, 0x6c, 0xca, 0x5c, 0x1e, 0x35, 0xf1,
	0xf6, 0x0a, 0x78, 0xd5, 0x4a, 0xc8, 0x84, 0x1b, 0xb2, 0xe9, 0xb9, 0xbb, 0x9e, 0x6a, 0xa9, 0x73,
	0xaa, 0x14, 0x63, 0xcb, 0x5e, 0x7d, 0x74, 0x5e, 0x8b, 0x23, 0x31, 0x36, 0xd4, 0xf5, 0x06, 0xd9,
	0x72, 0x31, 0xd2, 0x2f, 0x0c, 0x4b, 0xe8, 0x03, 0x64, 0x5a, 0x1b, 0xa9, 0x22, 0xab, 0x2c, 0xa7,
	0x87, 0x75, 0x72, 0xc1, 0x42, 0x48, 0xc5, 0xcb, 0x94, 0x25, 0xdc, 0x52, 0xcf, 0xb6, 0x67, 0x74,
	0xe2, 0x94, 0x9a, 0x52, 0x1b, 0x76, 0x48, 0xd3, 0x14, 0x29, 0xd5, 0x33, 0x01, 0xaa, 0xde, 0xfb,
	0x59, 0x40, 0x7a, 0x30, 0xcf, 0xa5, 0x8a, 0xe5, 0x4c, 0xf3, 0x96, 0xa6, 0xf8, 0x29, 0x53, 0xfc,
	0x92, 0x5d, 0xc5, 0xc8, 0x74, 0x01, 0x52, 0xbc, 0x11, 0x3e, 0xd6, 0x32, 0xfa, 0x2d, 0xb2, 0x89,
	0x23, 0xaf, 0x64, 0x4a, 0xe4, 0x12, 0xb3, 0x84, 0x83, 0x7a, 0xe0, 0x2b, 0x20, 0x4f, 0xdf, 0x26,
	0xb4, 0x01, 0xc6, 0x80, 0x2e, 0x61, 0xf4, 0x7d, 0x0d, 0xc4, 0x74, 0xef, 0xf7, 0x2b, 0x64, 0xdd,
	0xbb, 0x13, 0xfd, 0x53, 0x50, 0x57, 0x62, 0xfd, 0xfe, 0x5f, 0x38, 0x16, 0xb5, 0x4d, 0x62, 0xf7,
	0xc0, 0x7b, 0x84, 0x58, 0xaf, 0xc4, 0xc4, 0xd0, 0xe6, 0x9a, 0x91, 0x9c, 0x4c, 0xfc, 0xf6, 0x9b,
	0xf3, 0xb2, 0x12, 0xb9, 0x34, 0x11, 0xb3, 0xe7, 0xbc, 0x44, 0xa9, 0xce, 0x97, 0x05, 0x62, 0xbe,
	0x90, 0x0f, 0x2d, 0x69, 0x63, 0xbe, 0x5e, 0x27, 0x9b, 0xee, 0x63, 0x6e, 0x26, 0x2f, 0x03, 0xd0,
	0x7e, 0xc6, 0x0d, 0x65, 0xef, 0xcb, 0xd8, 0xcf, 0x7c, 0xb8, 0x02, 0x3f, 0xb7, 0xf4, 0x1a, 0x0d,
	0xcd, 0xf5, 0xb3, 0xcf, 0x51, 0x2b, 0x4f, 0x91, 0x8c, 0x57, 0x01, 0x69, 0x0f, 0x88, 0x8c, 0x58,
	0xcf, 0x65, 0x8f, 0xaa, 0x2e, 0x2a, 0x5e, 0x22, 0x4f, 0x75, 0x4c, 0x0b, 0x5a, 0x9e, 0xfa, 0xb8,
	0xe2, 0x25, 0x90, 0x94, 0xe7, 0x15, 0x56, 0xf0, 0x5a, 0xc3, 0x2b, 0x5c, 0x34, 0xae, 0x95, 0x2a,
	0xb9, 0xa1, 0x54, 0xff, 0x15, 0x90, 0x7b, 0x6e, 0x2e, 0x1b, 0x34, 0x34, 0x93, 0x64, 0xb8, 0x1a,
	0x0e, 0xd7, 0x61, 0x18, 0xfc, 0x7a, 0x11, 0xd6, 0x6e, 0xd7, 0xa6, 0xd1, 0x6b, 0xc6, 0xa7, 0x8f,
	0xd0, 0xa5, 0x13, 0xe3, 0x91, 0xde, 0x68, 0xf7, 0xfe, 0xbd, 0x41, 0xfa, 0xad, 0xdf, 0x40, 0xfd,
	0x9f, 0x2f, 0x0f, 0x1a, 0x3f, 0x5f, 0xde, 0xd4, 0x5e, 0x6f, 0x2d, 0x7e, 0x7b, 0xfd, 0x21, 0x20,
	0x6b, 0x72, 0x66, 0x56, 0xc1, 0xe1, 0x21, 0x38, 0xf4, 0xab, 0x05, 0x70, 0xc8, 0xbd, 0x93, 0xa2,
	0x8e, 0x9c, 0xe1, 0xb6, 0x4a, 0xbf, 0x46, 0x7a, 0x7a, 0xc0, 0x78, 0x74, 0xf1, 0x36, 0x16, 0x7a,
	0x29, 0xc6, 0xcf, 0x1d, 0x63, 0x7c, 0x40, 0xbe, 0x64, 0x11, 0x05, 0xc7, 0x1d, 0xdd, 0x27, 0xd7,
	0x61, 0x08, 0x36, 0xb6, 0x6e, 0x5e, 0x20, 0x24, 0xf2, 0x10, 0xfe, 0xcc, 0x29, 0x79, 0xca, 0x4b,
	0xae, 0xdd, 0xc6, 0xbe, 0x7e, 0xd8, 0x5c, 0xb2, 0xac, 0x16, 0x97, 0x2c, 0xbd, 0x9d, 0xcd, 0xda,
	0x26, 0xb1, 0xca, 0x15, 0xcb, 0x86, 0xef, 0x18, 0xc3, 0x59, 0xd3, 0xe6, 0x4c, 0x2b, 0xe9, 0x01,
	0xd9, 0x91, 0x33, 0xf3, 0x5c, 0x69, 0x72, 0xd3, 0x77, 0xa1, 0x46, 0xa9, 0x9c, 0xc1, 0x73, 0xe5,
	0x89, 0x47, 0x4f, 0x7f, 0x0f, 0x6a, 0x2e, 0xa9, 0xfb, 0x39, 0xcd, 0x87, 0xef, 0x42, 0x1b, 0xff,
	0x76, 0x01, 0x72, 0xdc, 0x7e, 0x26, 0xb8, 0x05, 0xc0, 0x35, 0x73, 0x9a, 0xc3, 0xd2, 0x62, 0xdb,
	0x52, 0x4c, 0xdd, 0x6e, 0xf5, 0xbd, 0x26, 0x63, 0x8a, 0xa9, 0xdd, 0xaf, 0xfe, 0x16, 0x90, 0x6d,
	0x57, 0x21, 0x0d, 0x7e, 0x7b, 0x0f, 0x8a, 0xff, 0x17, 0x8b, 0xc3, 0x6f, 0x91, 0xf5, 0xdc, 0x67,
	0x35, 0xfa, 0xe7, 0x40, 0xcf, 0x1b, 0x31, 0x9d, 0x8d, 0xf3, 0xd2, 0x31, 0xd5, 0xfb, 0x8b, 0xb7,
	0xc8, 0xf7, 0xad, 0x13, 0x96, 0xaa, 0xde, 0x25, 0x77, 0xdb, 0x05, 0x5d, 0x72, 0x96, 0xcc, 0xf4,
	0x22, 0x38, 0xfc, 0x3e, 0x6c, 0x88, 0x77, 0x9a, 0x05, 0x12, 0x59, 0x35, 0xfd, 0x88, 0xec, 0xb6,
	0x6d, 0xcd, 0x7b, 0x2c, 0xc9, 0xa5, 0xe4, 0x89, 0xe2, 0x93, 0xe1, 0x0f, 0xe0, 0x88, 0x7b, 0xcd,
	0x23, 0xf0, 0x51, 0x76, 0x64, 0x41, 0xf4, 0xd1, 0xf5, 0x29, 0xd9, 0x7c, 0xd8, 0x7d, 0xd0, 0xa0,
	0x8f, 0xc6, 0x29, 0xf8, 0xb4, 0x1b, 0xaf, 0xc0, 0x53, 0xee, 0xad, 0xff, 0x04, 0x00, 0x00, 0xff,
	0xff, 0x75, 0x5d, 0x70, 0xc9, 0x39, 0x1c, 0x00, 0x00,
}
