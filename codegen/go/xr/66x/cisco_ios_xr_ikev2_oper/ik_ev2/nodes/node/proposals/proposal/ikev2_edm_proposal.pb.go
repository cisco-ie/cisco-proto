/*
Copyright 2019 Cisco Systems

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ikev2_edm_proposal.proto

package cisco_ios_xr_ikev2_oper_ik_ev2_nodes_node_proposals_proposal

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Ikev2EdmProposal_KEYS struct {
	NodeName             string   `protobuf:"bytes,1,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Ikev2EdmProposal_KEYS) Reset()         { *m = Ikev2EdmProposal_KEYS{} }
func (m *Ikev2EdmProposal_KEYS) String() string { return proto.CompactTextString(m) }
func (*Ikev2EdmProposal_KEYS) ProtoMessage()    {}
func (*Ikev2EdmProposal_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6c3ff3d3aed9094, []int{0}
}

func (m *Ikev2EdmProposal_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Ikev2EdmProposal_KEYS.Unmarshal(m, b)
}
func (m *Ikev2EdmProposal_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Ikev2EdmProposal_KEYS.Marshal(b, m, deterministic)
}
func (m *Ikev2EdmProposal_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ikev2EdmProposal_KEYS.Merge(m, src)
}
func (m *Ikev2EdmProposal_KEYS) XXX_Size() int {
	return xxx_messageInfo_Ikev2EdmProposal_KEYS.Size(m)
}
func (m *Ikev2EdmProposal_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_Ikev2EdmProposal_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_Ikev2EdmProposal_KEYS proto.InternalMessageInfo

func (m *Ikev2EdmProposal_KEYS) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

func (m *Ikev2EdmProposal_KEYS) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type Ikev2EdmProposal struct {
	ProposalName         string   `protobuf:"bytes,50,opt,name=proposal_name,json=proposalName,proto3" json:"proposal_name,omitempty"`
	EncryptionAlg        []string `protobuf:"bytes,51,rep,name=encryption_alg,json=encryptionAlg,proto3" json:"encryption_alg,omitempty"`
	HashAlg              []string `protobuf:"bytes,52,rep,name=hash_alg,json=hashAlg,proto3" json:"hash_alg,omitempty"`
	PrfAlg               []string `protobuf:"bytes,53,rep,name=prf_alg,json=prfAlg,proto3" json:"prf_alg,omitempty"`
	GroupAlg             []string `protobuf:"bytes,54,rep,name=group_alg,json=groupAlg,proto3" json:"group_alg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Ikev2EdmProposal) Reset()         { *m = Ikev2EdmProposal{} }
func (m *Ikev2EdmProposal) String() string { return proto.CompactTextString(m) }
func (*Ikev2EdmProposal) ProtoMessage()    {}
func (*Ikev2EdmProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6c3ff3d3aed9094, []int{1}
}

func (m *Ikev2EdmProposal) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Ikev2EdmProposal.Unmarshal(m, b)
}
func (m *Ikev2EdmProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Ikev2EdmProposal.Marshal(b, m, deterministic)
}
func (m *Ikev2EdmProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ikev2EdmProposal.Merge(m, src)
}
func (m *Ikev2EdmProposal) XXX_Size() int {
	return xxx_messageInfo_Ikev2EdmProposal.Size(m)
}
func (m *Ikev2EdmProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_Ikev2EdmProposal.DiscardUnknown(m)
}

var xxx_messageInfo_Ikev2EdmProposal proto.InternalMessageInfo

func (m *Ikev2EdmProposal) GetProposalName() string {
	if m != nil {
		return m.ProposalName
	}
	return ""
}

func (m *Ikev2EdmProposal) GetEncryptionAlg() []string {
	if m != nil {
		return m.EncryptionAlg
	}
	return nil
}

func (m *Ikev2EdmProposal) GetHashAlg() []string {
	if m != nil {
		return m.HashAlg
	}
	return nil
}

func (m *Ikev2EdmProposal) GetPrfAlg() []string {
	if m != nil {
		return m.PrfAlg
	}
	return nil
}

func (m *Ikev2EdmProposal) GetGroupAlg() []string {
	if m != nil {
		return m.GroupAlg
	}
	return nil
}

func init() {
	proto.RegisterType((*Ikev2EdmProposal_KEYS)(nil), "cisco_ios_xr_ikev2_oper.ik_ev2.nodes.node.proposals.proposal.ikev2_edm_proposal_KEYS")
	proto.RegisterType((*Ikev2EdmProposal)(nil), "cisco_ios_xr_ikev2_oper.ik_ev2.nodes.node.proposals.proposal.ikev2_edm_proposal")
}

func init() { proto.RegisterFile("ikev2_edm_proposal.proto", fileDescriptor_d6c3ff3d3aed9094) }

var fileDescriptor_d6c3ff3d3aed9094 = []byte{
	// 245 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x90, 0x31, 0x4f, 0xc3, 0x30,
	0x10, 0x85, 0x15, 0x40, 0x6d, 0x72, 0xa2, 0x0c, 0x5e, 0x1a, 0xd4, 0xa5, 0x2a, 0x42, 0xea, 0x94,
	0x21, 0x05, 0x26, 0x96, 0x0e, 0x2c, 0x20, 0x31, 0x94, 0x89, 0xe9, 0x64, 0x52, 0x37, 0xb5, 0x9a,
	0xe4, 0x4e, 0xe7, 0x52, 0xc1, 0xcf, 0xe2, 0x1f, 0x22, 0x1f, 0x6a, 0x19, 0xb2, 0x44, 0x97, 0xef,
	0x7b, 0xef, 0x0d, 0x86, 0xdc, 0xef, 0xdc, 0xa1, 0x44, 0xb7, 0x6e, 0x91, 0x85, 0x98, 0x82, 0x6d,
	0x0a, 0x16, 0xda, 0x93, 0x79, 0xac, 0x7c, 0xa8, 0x08, 0x3d, 0x05, 0xfc, 0x12, 0xfc, 0x8b, 0x11,
	0x3b, 0x29, 0xfc, 0x0e, 0xdd, 0xa1, 0x2c, 0x3a, 0x5a, 0xbb, 0xa0, 0xdf, 0xe2, 0xd8, 0x0c, 0xa7,
	0x6b, 0xf6, 0x0c, 0xe3, 0xfe, 0x32, 0xbe, 0x3c, 0xbd, 0xbf, 0x99, 0x09, 0x64, 0xb1, 0x85, 0x9d,
	0x6d, 0x5d, 0x9e, 0x4c, 0x93, 0x79, 0xb6, 0x4a, 0x23, 0x78, 0xb5, 0xad, 0x33, 0x06, 0x2e, 0x94,
	0x9f, 0x29, 0xd7, 0x7b, 0xf6, 0x93, 0x80, 0xe9, 0x8f, 0x99, 0x1b, 0x18, 0x9d, 0x86, 0xb5, 0x53,
	0x6a, 0xe7, 0xf2, 0x08, 0x75, 0xef, 0x16, 0xae, 0x5c, 0x57, 0xc9, 0x37, 0xef, 0x3d, 0x75, 0x68,
	0x9b, 0x3a, 0x5f, 0x4c, 0xcf, 0xe7, 0xd9, 0x6a, 0xf4, 0x4f, 0x97, 0x4d, 0x6d, 0xae, 0x21, 0xdd,
	0xda, 0xb0, 0xd5, 0xc0, 0x9d, 0x06, 0x86, 0xf1, 0x3f, 0xaa, 0x31, 0x0c, 0x59, 0x36, 0x6a, 0xee,
	0xd5, 0x0c, 0x58, 0x36, 0x51, 0x4c, 0x20, 0xab, 0x85, 0x3e, 0x59, 0xd5, 0x83, 0xaa, 0x54, 0xc1,
	0xb2, 0xa9, 0x3f, 0x06, 0xfa, 0x88, 0x8b, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xea, 0x58, 0x6d,
	0x5c, 0x60, 0x01, 0x00, 0x00,
}
