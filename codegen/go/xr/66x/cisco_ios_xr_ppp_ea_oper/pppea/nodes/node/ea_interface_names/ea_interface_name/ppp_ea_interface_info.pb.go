/*
Copyright 2019 Cisco Systems

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ppp_ea_interface_info.proto

package cisco_ios_xr_ppp_ea_oper_pppea_nodes_node_ea_interface_names_ea_interface_name

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type PppEaInterfaceInfo_KEYS struct {
	NodeName             string   `protobuf:"bytes,1,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	InterfaceName        string   `protobuf:"bytes,2,opt,name=interface_name,json=interfaceName,proto3" json:"interface_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PppEaInterfaceInfo_KEYS) Reset()         { *m = PppEaInterfaceInfo_KEYS{} }
func (m *PppEaInterfaceInfo_KEYS) String() string { return proto.CompactTextString(m) }
func (*PppEaInterfaceInfo_KEYS) ProtoMessage()    {}
func (*PppEaInterfaceInfo_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_88e681e90af15c1b, []int{0}
}

func (m *PppEaInterfaceInfo_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PppEaInterfaceInfo_KEYS.Unmarshal(m, b)
}
func (m *PppEaInterfaceInfo_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PppEaInterfaceInfo_KEYS.Marshal(b, m, deterministic)
}
func (m *PppEaInterfaceInfo_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PppEaInterfaceInfo_KEYS.Merge(m, src)
}
func (m *PppEaInterfaceInfo_KEYS) XXX_Size() int {
	return xxx_messageInfo_PppEaInterfaceInfo_KEYS.Size(m)
}
func (m *PppEaInterfaceInfo_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_PppEaInterfaceInfo_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_PppEaInterfaceInfo_KEYS proto.InternalMessageInfo

func (m *PppEaInterfaceInfo_KEYS) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

func (m *PppEaInterfaceInfo_KEYS) GetInterfaceName() string {
	if m != nil {
		return m.InterfaceName
	}
	return ""
}

type PppEaInterfaceInfo struct {
	Interface                      string   `protobuf:"bytes,50,opt,name=interface,proto3" json:"interface,omitempty"`
	IsLcpRunning                   bool     `protobuf:"varint,51,opt,name=is_lcp_running,json=isLcpRunning,proto3" json:"is_lcp_running,omitempty"`
	IsIpcpRunning                  bool     `protobuf:"varint,52,opt,name=is_ipcp_running,json=isIpcpRunning,proto3" json:"is_ipcp_running,omitempty"`
	IsIpv6CpRunning                bool     `protobuf:"varint,53,opt,name=is_ipv6cp_running,json=isIpv6cpRunning,proto3" json:"is_ipv6cp_running,omitempty"`
	IsMplscpRunning                bool     `protobuf:"varint,54,opt,name=is_mplscp_running,json=isMplscpRunning,proto3" json:"is_mplscp_running,omitempty"`
	LocalMtu                       uint32   `protobuf:"varint,55,opt,name=local_mtu,json=localMtu,proto3" json:"local_mtu,omitempty"`
	LocalMrru                      uint32   `protobuf:"varint,56,opt,name=local_mrru,json=localMrru,proto3" json:"local_mrru,omitempty"`
	PeerMrru                       uint32   `protobuf:"varint,57,opt,name=peer_mrru,json=peerMrru,proto3" json:"peer_mrru,omitempty"`
	LocalMagic                     uint32   `protobuf:"varint,58,opt,name=local_magic,json=localMagic,proto3" json:"local_magic,omitempty"`
	PeerMagic                      uint32   `protobuf:"varint,59,opt,name=peer_magic,json=peerMagic,proto3" json:"peer_magic,omitempty"`
	LocalMcmpClasses               uint32   `protobuf:"varint,60,opt,name=local_mcmp_classes,json=localMcmpClasses,proto3" json:"local_mcmp_classes,omitempty"`
	PeerMcmpClasses                uint32   `protobuf:"varint,61,opt,name=peer_mcmp_classes,json=peerMcmpClasses,proto3" json:"peer_mcmp_classes,omitempty"`
	EchoRequestInterval            uint32   `protobuf:"varint,62,opt,name=echo_request_interval,json=echoRequestInterval,proto3" json:"echo_request_interval,omitempty"`
	EchoRequestRetryCount          uint32   `protobuf:"varint,63,opt,name=echo_request_retry_count,json=echoRequestRetryCount,proto3" json:"echo_request_retry_count,omitempty"`
	IsMultilinkBundle              bool     `protobuf:"varint,64,opt,name=is_multilink_bundle,json=isMultilinkBundle,proto3" json:"is_multilink_bundle,omitempty"`
	Synchronized                   bool     `protobuf:"varint,65,opt,name=synchronized,proto3" json:"synchronized,omitempty"`
	ForwardingEnabled              bool     `protobuf:"varint,66,opt,name=forwarding_enabled,json=forwardingEnabled,proto3" json:"forwarding_enabled,omitempty"`
	MultilinkInterface             string   `protobuf:"bytes,67,opt,name=multilink_interface,json=multilinkInterface,proto3" json:"multilink_interface,omitempty"`
	L2TunnelEnabled                bool     `protobuf:"varint,68,opt,name=l2_tunnel_enabled,json=l2TunnelEnabled,proto3" json:"l2_tunnel_enabled,omitempty"`
	L2Provisioned                  bool     `protobuf:"varint,69,opt,name=l2_provisioned,json=l2Provisioned,proto3" json:"l2_provisioned,omitempty"`
	L2IpInterworkingEnabled        bool     `protobuf:"varint,70,opt,name=l2ip_interworking_enabled,json=l2ipInterworkingEnabled,proto3" json:"l2ip_interworking_enabled,omitempty"`
	IsVpdnTunneled                 bool     `protobuf:"varint,71,opt,name=is_vpdn_tunneled,json=isVpdnTunneled,proto3" json:"is_vpdn_tunneled,omitempty"`
	XconnectId                     uint32   `protobuf:"varint,72,opt,name=xconnect_id,json=xconnectId,proto3" json:"xconnect_id,omitempty"`
	ParentInterfaceHandle          string   `protobuf:"bytes,73,opt,name=parent_interface_handle,json=parentInterfaceHandle,proto3" json:"parent_interface_handle,omitempty"`
	VrfTableId                     uint32   `protobuf:"varint,74,opt,name=vrf_table_id,json=vrfTableId,proto3" json:"vrf_table_id,omitempty"`
	Ipv6VrfTableId                 uint32   `protobuf:"varint,75,opt,name=ipv6vrf_table_id,json=ipv6vrfTableId,proto3" json:"ipv6vrf_table_id,omitempty"`
	L2AdjacencyState               string   `protobuf:"bytes,76,opt,name=l2_adjacency_state,json=l2AdjacencyState,proto3" json:"l2_adjacency_state,omitempty"`
	L2IpInterworkingAdjacencyState string   `protobuf:"bytes,77,opt,name=l2ip_interworking_adjacency_state,json=l2ipInterworkingAdjacencyState,proto3" json:"l2ip_interworking_adjacency_state,omitempty"`
	LacAdjacencyState              string   `protobuf:"bytes,78,opt,name=lac_adjacency_state,json=lacAdjacencyState,proto3" json:"lac_adjacency_state,omitempty"`
	InterfaceAdjacencyState        string   `protobuf:"bytes,79,opt,name=interface_adjacency_state,json=interfaceAdjacencyState,proto3" json:"interface_adjacency_state,omitempty"`
	Ipv4AdjacencyState             string   `protobuf:"bytes,80,opt,name=ipv4_adjacency_state,json=ipv4AdjacencyState,proto3" json:"ipv4_adjacency_state,omitempty"`
	Ipv6AdjacencyState             string   `protobuf:"bytes,81,opt,name=ipv6_adjacency_state,json=ipv6AdjacencyState,proto3" json:"ipv6_adjacency_state,omitempty"`
	MplsAdjacencyState             string   `protobuf:"bytes,82,opt,name=mpls_adjacency_state,json=mplsAdjacencyState,proto3" json:"mpls_adjacency_state,omitempty"`
	XXX_NoUnkeyedLiteral           struct{} `json:"-"`
	XXX_unrecognized               []byte   `json:"-"`
	XXX_sizecache                  int32    `json:"-"`
}

func (m *PppEaInterfaceInfo) Reset()         { *m = PppEaInterfaceInfo{} }
func (m *PppEaInterfaceInfo) String() string { return proto.CompactTextString(m) }
func (*PppEaInterfaceInfo) ProtoMessage()    {}
func (*PppEaInterfaceInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_88e681e90af15c1b, []int{1}
}

func (m *PppEaInterfaceInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PppEaInterfaceInfo.Unmarshal(m, b)
}
func (m *PppEaInterfaceInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PppEaInterfaceInfo.Marshal(b, m, deterministic)
}
func (m *PppEaInterfaceInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PppEaInterfaceInfo.Merge(m, src)
}
func (m *PppEaInterfaceInfo) XXX_Size() int {
	return xxx_messageInfo_PppEaInterfaceInfo.Size(m)
}
func (m *PppEaInterfaceInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PppEaInterfaceInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PppEaInterfaceInfo proto.InternalMessageInfo

func (m *PppEaInterfaceInfo) GetInterface() string {
	if m != nil {
		return m.Interface
	}
	return ""
}

func (m *PppEaInterfaceInfo) GetIsLcpRunning() bool {
	if m != nil {
		return m.IsLcpRunning
	}
	return false
}

func (m *PppEaInterfaceInfo) GetIsIpcpRunning() bool {
	if m != nil {
		return m.IsIpcpRunning
	}
	return false
}

func (m *PppEaInterfaceInfo) GetIsIpv6CpRunning() bool {
	if m != nil {
		return m.IsIpv6CpRunning
	}
	return false
}

func (m *PppEaInterfaceInfo) GetIsMplscpRunning() bool {
	if m != nil {
		return m.IsMplscpRunning
	}
	return false
}

func (m *PppEaInterfaceInfo) GetLocalMtu() uint32 {
	if m != nil {
		return m.LocalMtu
	}
	return 0
}

func (m *PppEaInterfaceInfo) GetLocalMrru() uint32 {
	if m != nil {
		return m.LocalMrru
	}
	return 0
}

func (m *PppEaInterfaceInfo) GetPeerMrru() uint32 {
	if m != nil {
		return m.PeerMrru
	}
	return 0
}

func (m *PppEaInterfaceInfo) GetLocalMagic() uint32 {
	if m != nil {
		return m.LocalMagic
	}
	return 0
}

func (m *PppEaInterfaceInfo) GetPeerMagic() uint32 {
	if m != nil {
		return m.PeerMagic
	}
	return 0
}

func (m *PppEaInterfaceInfo) GetLocalMcmpClasses() uint32 {
	if m != nil {
		return m.LocalMcmpClasses
	}
	return 0
}

func (m *PppEaInterfaceInfo) GetPeerMcmpClasses() uint32 {
	if m != nil {
		return m.PeerMcmpClasses
	}
	return 0
}

func (m *PppEaInterfaceInfo) GetEchoRequestInterval() uint32 {
	if m != nil {
		return m.EchoRequestInterval
	}
	return 0
}

func (m *PppEaInterfaceInfo) GetEchoRequestRetryCount() uint32 {
	if m != nil {
		return m.EchoRequestRetryCount
	}
	return 0
}

func (m *PppEaInterfaceInfo) GetIsMultilinkBundle() bool {
	if m != nil {
		return m.IsMultilinkBundle
	}
	return false
}

func (m *PppEaInterfaceInfo) GetSynchronized() bool {
	if m != nil {
		return m.Synchronized
	}
	return false
}

func (m *PppEaInterfaceInfo) GetForwardingEnabled() bool {
	if m != nil {
		return m.ForwardingEnabled
	}
	return false
}

func (m *PppEaInterfaceInfo) GetMultilinkInterface() string {
	if m != nil {
		return m.MultilinkInterface
	}
	return ""
}

func (m *PppEaInterfaceInfo) GetL2TunnelEnabled() bool {
	if m != nil {
		return m.L2TunnelEnabled
	}
	return false
}

func (m *PppEaInterfaceInfo) GetL2Provisioned() bool {
	if m != nil {
		return m.L2Provisioned
	}
	return false
}

func (m *PppEaInterfaceInfo) GetL2IpInterworkingEnabled() bool {
	if m != nil {
		return m.L2IpInterworkingEnabled
	}
	return false
}

func (m *PppEaInterfaceInfo) GetIsVpdnTunneled() bool {
	if m != nil {
		return m.IsVpdnTunneled
	}
	return false
}

func (m *PppEaInterfaceInfo) GetXconnectId() uint32 {
	if m != nil {
		return m.XconnectId
	}
	return 0
}

func (m *PppEaInterfaceInfo) GetParentInterfaceHandle() string {
	if m != nil {
		return m.ParentInterfaceHandle
	}
	return ""
}

func (m *PppEaInterfaceInfo) GetVrfTableId() uint32 {
	if m != nil {
		return m.VrfTableId
	}
	return 0
}

func (m *PppEaInterfaceInfo) GetIpv6VrfTableId() uint32 {
	if m != nil {
		return m.Ipv6VrfTableId
	}
	return 0
}

func (m *PppEaInterfaceInfo) GetL2AdjacencyState() string {
	if m != nil {
		return m.L2AdjacencyState
	}
	return ""
}

func (m *PppEaInterfaceInfo) GetL2IpInterworkingAdjacencyState() string {
	if m != nil {
		return m.L2IpInterworkingAdjacencyState
	}
	return ""
}

func (m *PppEaInterfaceInfo) GetLacAdjacencyState() string {
	if m != nil {
		return m.LacAdjacencyState
	}
	return ""
}

func (m *PppEaInterfaceInfo) GetInterfaceAdjacencyState() string {
	if m != nil {
		return m.InterfaceAdjacencyState
	}
	return ""
}

func (m *PppEaInterfaceInfo) GetIpv4AdjacencyState() string {
	if m != nil {
		return m.Ipv4AdjacencyState
	}
	return ""
}

func (m *PppEaInterfaceInfo) GetIpv6AdjacencyState() string {
	if m != nil {
		return m.Ipv6AdjacencyState
	}
	return ""
}

func (m *PppEaInterfaceInfo) GetMplsAdjacencyState() string {
	if m != nil {
		return m.MplsAdjacencyState
	}
	return ""
}

func init() {
	proto.RegisterType((*PppEaInterfaceInfo_KEYS)(nil), "cisco_ios_xr_ppp_ea_oper.pppea.nodes.node.ea_interface_names.ea_interface_name.ppp_ea_interface_info_KEYS")
	proto.RegisterType((*PppEaInterfaceInfo)(nil), "cisco_ios_xr_ppp_ea_oper.pppea.nodes.node.ea_interface_names.ea_interface_name.ppp_ea_interface_info")
}

func init() { proto.RegisterFile("ppp_ea_interface_info.proto", fileDescriptor_88e681e90af15c1b) }

var fileDescriptor_88e681e90af15c1b = []byte{
	// 767 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x95, 0x5f, 0x73, 0x1b, 0x35,
	0x14, 0xc5, 0xc7, 0x3c, 0x30, 0xb1, 0x9a, 0x38, 0xb1, 0x8c, 0x27, 0x2a, 0xe1, 0x8f, 0xc9, 0x50,
	0xc6, 0xd3, 0x01, 0xc3, 0x6c, 0x8b, 0x0b, 0xe1, 0x6f, 0x1b, 0x02, 0x5d, 0x5a, 0x87, 0xe2, 0x66,
	0x98, 0xe1, 0x49, 0x28, 0x5a, 0x39, 0x11, 0x95, 0x25, 0x21, 0xed, 0x6e, 0x1b, 0x3e, 0x21, 0x1f,
	0x8b, 0xd1, 0xd5, 0xee, 0x7a, 0x6d, 0xe7, 0x25, 0x0f, 0xe7, 0xfc, 0xce, 0xb9, 0x8a, 0x74, 0x6d,
	0xa3, 0x23, 0x6b, 0x2d, 0x15, 0x8c, 0x4a, 0x9d, 0x0b, 0xb7, 0x60, 0x5c, 0x50, 0xa9, 0x17, 0x66,
	0x62, 0x9d, 0xc9, 0x0d, 0x3e, 0xe7, 0xd2, 0x73, 0x43, 0xa5, 0xf1, 0xf4, 0x8d, 0xa3, 0x15, 0x69,
	0xac, 0x70, 0x13, 0x6b, 0xad, 0x60, 0x13, 0x6d, 0x32, 0xe1, 0xe1, 0xef, 0x64, 0xad, 0x42, 0xb3,
	0xa5, 0xf0, 0xdb, 0xd2, 0xf1, 0x5f, 0xe8, 0xdd, 0x5b, 0xc7, 0xd1, 0x67, 0x67, 0x7f, 0xbe, 0xc4,
	0x47, 0xa8, 0x1b, 0xaa, 0x00, 0x25, 0x9d, 0x51, 0x67, 0xdc, 0x9d, 0xef, 0x04, 0xe1, 0x9c, 0x2d,
	0x05, 0xbe, 0x87, 0x7a, 0xeb, 0x65, 0xe4, 0x2d, 0x20, 0xf6, 0x1a, 0x35, 0x60, 0xc7, 0xff, 0xdd,
	0x41, 0xc3, 0x5b, 0x47, 0xe0, 0xf7, 0x50, 0xb7, 0x51, 0x48, 0x02, 0xd9, 0x95, 0x80, 0x3f, 0x46,
	0x3d, 0xe9, 0xa9, 0xe2, 0x96, 0xba, 0x42, 0x6b, 0xa9, 0xaf, 0xc8, 0x83, 0x51, 0x67, 0xbc, 0x33,
	0xdf, 0x95, 0xfe, 0x39, 0xb7, 0xf3, 0xa8, 0xe1, 0x4f, 0xd0, 0xbe, 0xf4, 0x54, 0xda, 0x16, 0xf6,
	0x10, 0xb0, 0x3d, 0xe9, 0x53, 0xbb, 0xe2, 0xee, 0xa3, 0x3e, 0x70, 0xe5, 0xb4, 0x45, 0x7e, 0x09,
	0xe4, 0x7e, 0x20, 0x83, 0xbe, 0xce, 0x2e, 0xad, 0xf2, 0x2d, 0x76, 0x5a, 0xb3, 0x33, 0xd0, 0x6b,
	0xf6, 0x08, 0x75, 0x95, 0xe1, 0x4c, 0xd1, 0x65, 0x5e, 0x90, 0x47, 0xa3, 0xce, 0x78, 0x6f, 0xbe,
	0x03, 0xc2, 0x2c, 0x2f, 0xf0, 0xfb, 0x08, 0x55, 0xa6, 0x73, 0x05, 0xf9, 0x0a, 0xdc, 0x88, 0xcf,
	0x9c, 0x2b, 0x42, 0xd6, 0x0a, 0xe1, 0xa2, 0xfb, 0x75, 0xcc, 0x06, 0x01, 0xcc, 0x0f, 0xd1, 0x9d,
	0x2a, 0xcb, 0xae, 0x24, 0x27, 0x27, 0x60, 0xc7, 0xba, 0x59, 0x50, 0x42, 0x79, 0x4c, 0x83, 0xff,
	0x4d, 0x2c, 0x87, 0x38, 0xd8, 0x9f, 0x22, 0x5c, 0xe5, 0xf9, 0xd2, 0x52, 0xae, 0x98, 0xf7, 0xc2,
	0x93, 0x6f, 0x01, 0x3b, 0x88, 0x35, 0x7c, 0x69, 0x4f, 0xa3, 0x1e, 0xfe, 0xe5, 0x58, 0xd6, 0x86,
	0xbf, 0x03, 0x78, 0x1f, 0x3a, 0x5b, 0x6c, 0x82, 0x86, 0x82, 0x5f, 0x1b, 0xea, 0xc4, 0x3f, 0x85,
	0xf0, 0x79, 0x7c, 0xd5, 0x92, 0x29, 0xf2, 0x3d, 0xf0, 0x83, 0x60, 0xce, 0xa3, 0x97, 0x56, 0x16,
	0x7e, 0x84, 0xc8, 0x5a, 0xc6, 0x89, 0xdc, 0xdd, 0x50, 0x6e, 0x0a, 0x9d, 0x93, 0x1f, 0x20, 0x36,
	0x6c, 0xc5, 0xe6, 0xc1, 0x3d, 0x0d, 0x26, 0x9e, 0xa0, 0x41, 0x78, 0x8b, 0x42, 0xe5, 0x52, 0x49,
	0xfd, 0x8a, 0x5e, 0x16, 0x3a, 0x53, 0x82, 0xfc, 0x08, 0xaf, 0xd1, 0x97, 0x7e, 0x56, 0x3b, 0x4f,
	0xc0, 0xc0, 0xc7, 0x68, 0xd7, 0xdf, 0x68, 0x7e, 0xed, 0x8c, 0x96, 0xff, 0x8a, 0x8c, 0x3c, 0x8e,
	0x3b, 0xd3, 0xd6, 0xf0, 0x67, 0x08, 0x2f, 0x8c, 0x7b, 0xcd, 0x5c, 0x26, 0xf5, 0x15, 0x15, 0x9a,
	0x5d, 0x2a, 0x91, 0x91, 0x27, 0xb1, 0x72, 0xe5, 0x9c, 0x45, 0x03, 0x7f, 0x8e, 0x06, 0xab, 0xf9,
	0xab, 0x85, 0x3d, 0x85, 0x85, 0xc5, 0x8d, 0x95, 0x36, 0x9b, 0x7b, 0x1f, 0xf5, 0x55, 0x42, 0xf3,
	0x42, 0x6b, 0xa1, 0x9a, 0xfa, 0x9f, 0xe2, 0xfe, 0xa8, 0xe4, 0x02, 0xf4, 0xba, 0xfc, 0x1e, 0xea,
	0xa9, 0x84, 0x5a, 0x67, 0x4a, 0xe9, 0xa5, 0xd1, 0x22, 0x23, 0x67, 0x71, 0x7d, 0x55, 0xf2, 0x62,
	0x25, 0xe2, 0x13, 0x74, 0x57, 0x25, 0xd2, 0xc6, 0xf1, 0xaf, 0x8d, 0x7b, 0xd5, 0x3e, 0xf9, 0xcf,
	0x90, 0x38, 0x0c, 0x40, 0xda, 0xf2, 0xeb, 0x11, 0x63, 0x74, 0x20, 0x3d, 0x2d, 0x6d, 0xa6, 0xab,
	0x33, 0x89, 0x8c, 0xfc, 0x02, 0x91, 0x9e, 0xf4, 0x7f, 0xd8, 0x4c, 0x5f, 0x54, 0x6a, 0xd8, 0xb9,
	0x37, 0xdc, 0x68, 0x2d, 0x78, 0x4e, 0x65, 0x46, 0x9e, 0xc6, 0x9d, 0xab, 0xa5, 0x34, 0xc3, 0x53,
	0x74, 0x68, 0x99, 0x13, 0x3a, 0x6f, 0x7d, 0x94, 0xaf, 0x19, 0xbc, 0x48, 0x0a, 0xd7, 0x31, 0x8c,
	0x76, 0x73, 0x17, 0x4f, 0xc1, 0xc4, 0x23, 0xb4, 0x5b, 0xba, 0x05, 0xcd, 0xc3, 0x81, 0x42, 0xf3,
	0xaf, 0xb1, 0xb9, 0x74, 0x8b, 0x8b, 0x20, 0xa5, 0xf1, 0x90, 0xb6, 0x9c, 0xae, 0x51, 0xcf, 0x80,
	0xea, 0x55, 0x7a, 0x4d, 0x86, 0xc5, 0x4e, 0x28, 0xcb, 0xfe, 0x66, 0x5c, 0x68, 0x7e, 0x43, 0x7d,
	0xce, 0x72, 0x41, 0x9e, 0xc3, 0xf8, 0x03, 0x95, 0x3c, 0xae, 0x8d, 0x97, 0x41, 0xc7, 0x29, 0xfa,
	0x68, 0xfb, 0xe2, 0x36, 0xc3, 0x33, 0x08, 0x7f, 0xb0, 0x79, 0x81, 0x1b, 0x55, 0x13, 0x34, 0x50,
	0x8c, 0x6f, 0x85, 0xcf, 0x21, 0xdc, 0x57, 0x8c, 0x6f, 0xf0, 0x27, 0xe8, 0xee, 0xea, 0x96, 0x36,
	0x53, 0xbf, 0x41, 0xea, 0xb0, 0x01, 0x36, 0xb2, 0x5f, 0xa0, 0x77, 0xa4, 0x2d, 0x1f, 0x6e, 0xc5,
	0x5e, 0xc4, 0xa5, 0x0b, 0xde, 0xad, 0x89, 0xe9, 0x56, 0xe2, 0xf7, 0x26, 0x31, 0xdd, 0x4e, 0x84,
	0xef, 0xb8, 0xad, 0xc4, 0xbc, 0x5a, 0x6c, 0xab, 0xfc, 0x7a, 0xe2, 0xf2, 0x6d, 0xf8, 0x0d, 0x7a,
	0xf0, 0x7f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x62, 0x28, 0x8f, 0x6c, 0xa2, 0x06, 0x00, 0x00,
}
