/*
Copyright 2019 Cisco Systems

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rcmd_regen_lsp_info.proto

package cisco_ios_xr_infra_rcmd_oper_rcmd_isis_instances_instance_lsp_regenerateds_lsp_regenerated

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type RcmdRegenLspInfo_KEYS struct {
	InstanceName         string   `protobuf:"bytes,1,opt,name=instance_name,json=instanceName,proto3" json:"instance_name,omitempty"`
	SerialNumber         uint32   `protobuf:"varint,2,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RcmdRegenLspInfo_KEYS) Reset()         { *m = RcmdRegenLspInfo_KEYS{} }
func (m *RcmdRegenLspInfo_KEYS) String() string { return proto.CompactTextString(m) }
func (*RcmdRegenLspInfo_KEYS) ProtoMessage()    {}
func (*RcmdRegenLspInfo_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_e746b35d60890104, []int{0}
}

func (m *RcmdRegenLspInfo_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RcmdRegenLspInfo_KEYS.Unmarshal(m, b)
}
func (m *RcmdRegenLspInfo_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RcmdRegenLspInfo_KEYS.Marshal(b, m, deterministic)
}
func (m *RcmdRegenLspInfo_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RcmdRegenLspInfo_KEYS.Merge(m, src)
}
func (m *RcmdRegenLspInfo_KEYS) XXX_Size() int {
	return xxx_messageInfo_RcmdRegenLspInfo_KEYS.Size(m)
}
func (m *RcmdRegenLspInfo_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_RcmdRegenLspInfo_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_RcmdRegenLspInfo_KEYS proto.InternalMessageInfo

func (m *RcmdRegenLspInfo_KEYS) GetInstanceName() string {
	if m != nil {
		return m.InstanceName
	}
	return ""
}

func (m *RcmdRegenLspInfo_KEYS) GetSerialNumber() uint32 {
	if m != nil {
		return m.SerialNumber
	}
	return 0
}

type RcmdRegenLspInfo struct {
	SerialNumberXr       uint32   `protobuf:"varint,50,opt,name=serial_number_xr,json=serialNumberXr,proto3" json:"serial_number_xr,omitempty"`
	LspId                string   `protobuf:"bytes,51,opt,name=lsp_id,json=lspId,proto3" json:"lsp_id,omitempty"`
	SequenceNumber       uint32   `protobuf:"varint,52,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`
	ReceptionTime        string   `protobuf:"bytes,53,opt,name=reception_time,json=receptionTime,proto3" json:"reception_time,omitempty"`
	IsisLevel            string   `protobuf:"bytes,54,opt,name=isis_level,json=isisLevel,proto3" json:"isis_level,omitempty"`
	SpfRunNumber         uint32   `protobuf:"varint,55,opt,name=spf_run_number,json=spfRunNumber,proto3" json:"spf_run_number,omitempty"`
	Reason               string   `protobuf:"bytes,56,opt,name=reason,proto3" json:"reason,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RcmdRegenLspInfo) Reset()         { *m = RcmdRegenLspInfo{} }
func (m *RcmdRegenLspInfo) String() string { return proto.CompactTextString(m) }
func (*RcmdRegenLspInfo) ProtoMessage()    {}
func (*RcmdRegenLspInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_e746b35d60890104, []int{1}
}

func (m *RcmdRegenLspInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RcmdRegenLspInfo.Unmarshal(m, b)
}
func (m *RcmdRegenLspInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RcmdRegenLspInfo.Marshal(b, m, deterministic)
}
func (m *RcmdRegenLspInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RcmdRegenLspInfo.Merge(m, src)
}
func (m *RcmdRegenLspInfo) XXX_Size() int {
	return xxx_messageInfo_RcmdRegenLspInfo.Size(m)
}
func (m *RcmdRegenLspInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_RcmdRegenLspInfo.DiscardUnknown(m)
}

var xxx_messageInfo_RcmdRegenLspInfo proto.InternalMessageInfo

func (m *RcmdRegenLspInfo) GetSerialNumberXr() uint32 {
	if m != nil {
		return m.SerialNumberXr
	}
	return 0
}

func (m *RcmdRegenLspInfo) GetLspId() string {
	if m != nil {
		return m.LspId
	}
	return ""
}

func (m *RcmdRegenLspInfo) GetSequenceNumber() uint32 {
	if m != nil {
		return m.SequenceNumber
	}
	return 0
}

func (m *RcmdRegenLspInfo) GetReceptionTime() string {
	if m != nil {
		return m.ReceptionTime
	}
	return ""
}

func (m *RcmdRegenLspInfo) GetIsisLevel() string {
	if m != nil {
		return m.IsisLevel
	}
	return ""
}

func (m *RcmdRegenLspInfo) GetSpfRunNumber() uint32 {
	if m != nil {
		return m.SpfRunNumber
	}
	return 0
}

func (m *RcmdRegenLspInfo) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func init() {
	proto.RegisterType((*RcmdRegenLspInfo_KEYS)(nil), "cisco_ios_xr_infra_rcmd_oper.rcmd.isis.instances.instance.lsp_regenerateds.lsp_regenerated.rcmd_regen_lsp_info_KEYS")
	proto.RegisterType((*RcmdRegenLspInfo)(nil), "cisco_ios_xr_infra_rcmd_oper.rcmd.isis.instances.instance.lsp_regenerateds.lsp_regenerated.rcmd_regen_lsp_info")
}

func init() { proto.RegisterFile("rcmd_regen_lsp_info.proto", fileDescriptor_e746b35d60890104) }

var fileDescriptor_e746b35d60890104 = []byte{
	// 306 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x91, 0xcb, 0x4b, 0x3b, 0x31,
	0x10, 0xc7, 0x69, 0xe1, 0x57, 0x68, 0x68, 0xfb, 0x93, 0x88, 0x12, 0x0f, 0x42, 0xa9, 0x8a, 0x3d,
	0xed, 0xc1, 0xfa, 0xfa, 0x07, 0x3c, 0x88, 0xd2, 0x43, 0xf5, 0xa0, 0x5e, 0x86, 0x74, 0x77, 0x2a,
	0x81, 0xcd, 0xc3, 0x99, 0x5d, 0xe9, 0xdd, 0x7f, 0x5c, 0x92, 0xed, 0xfa, 0xa2, 0xb7, 0xd9, 0xcf,
	0x7e, 0x1f, 0x93, 0x44, 0x1c, 0x50, 0x6e, 0x0b, 0x20, 0x7c, 0x45, 0x07, 0x25, 0x07, 0x30, 0x6e,
	0xe5, 0xb3, 0x40, 0xbe, 0xf2, 0xf2, 0x25, 0x37, 0x9c, 0x7b, 0x30, 0x9e, 0x61, 0x4d, 0xf1, 0x07,
	0x69, 0x48, 0x6a, 0x1f, 0x90, 0xb2, 0x38, 0x65, 0x86, 0x0d, 0x67, 0xc6, 0x71, 0xa5, 0x5d, 0x8e,
	0xdf, 0x53, 0x16, 0x93, 0x52, 0x26, 0x92, 0xae, 0xb0, 0xe0, 0xbf, 0x60, 0x52, 0x08, 0xb5, 0xa5,
	0x18, 0xee, 0x6e, 0x9e, 0x1f, 0xe4, 0x91, 0x18, 0xb6, 0x41, 0xe0, 0xb4, 0x45, 0xd5, 0x19, 0x77,
	0xa6, 0xfd, 0xc5, 0xa0, 0x85, 0x73, 0x6d, 0x31, 0x8a, 0x18, 0xc9, 0xe8, 0x12, 0x5c, 0x6d, 0x97,
	0x48, 0xaa, 0x3b, 0xee, 0x4c, 0x87, 0x8b, 0x41, 0x03, 0xe7, 0x89, 0x4d, 0x3e, 0xba, 0x62, 0x77,
	0x4b, 0x8d, 0x9c, 0x8a, 0x9d, 0x5f, 0x66, 0x58, 0x93, 0x3a, 0x4b, 0xfe, 0xd1, 0x4f, 0xff, 0x13,
	0xc9, 0x3d, 0xd1, 0x4b, 0xae, 0x42, 0xcd, 0xd2, 0x12, 0xff, 0x4a, 0x0e, 0xb7, 0x85, 0x3c, 0x15,
	0xff, 0x19, 0xdf, 0x6a, 0x4c, 0x2b, 0x36, 0xfd, 0xe7, 0xad, 0xbf, 0xc1, 0x4d, 0x82, 0x3c, 0x11,
	0x23, 0xc2, 0x1c, 0x43, 0x65, 0xbc, 0x83, 0xca, 0x58, 0x54, 0x17, 0x29, 0x67, 0xf8, 0x45, 0x1f,
	0x8d, 0x45, 0x79, 0x28, 0x44, 0xbc, 0x4a, 0x28, 0xf1, 0x1d, 0x4b, 0x75, 0x99, 0x24, 0xfd, 0x48,
	0xee, 0x23, 0x90, 0xc7, 0x62, 0xc4, 0x61, 0x05, 0x54, 0xbb, 0xb6, 0xed, 0x6a, 0x73, 0xda, 0xb0,
	0x5a, 0xd4, 0x6e, 0xd3, 0xb5, 0x2f, 0x7a, 0x84, 0x9a, 0xbd, 0x53, 0xd7, 0x29, 0x60, 0xf3, 0xb5,
	0xec, 0xa5, 0xe7, 0x9c, 0x7d, 0x06, 0x00, 0x00, 0xff, 0xff, 0xe9, 0xb7, 0x49, 0xf3, 0xeb, 0x01,
	0x00, 0x00,
}
