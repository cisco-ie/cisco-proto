/*
Copyright 2019 Cisco Systems

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rsvp_mgmt_all_db_counters.proto

package cisco_ios_xr_ip_rsvp_oper_rsvp_counters_database

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type RsvpMgmtAllDbCounters_KEYS struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RsvpMgmtAllDbCounters_KEYS) Reset()         { *m = RsvpMgmtAllDbCounters_KEYS{} }
func (m *RsvpMgmtAllDbCounters_KEYS) String() string { return proto.CompactTextString(m) }
func (*RsvpMgmtAllDbCounters_KEYS) ProtoMessage()    {}
func (*RsvpMgmtAllDbCounters_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_09ec1ffcb33dec0a, []int{0}
}

func (m *RsvpMgmtAllDbCounters_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RsvpMgmtAllDbCounters_KEYS.Unmarshal(m, b)
}
func (m *RsvpMgmtAllDbCounters_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RsvpMgmtAllDbCounters_KEYS.Marshal(b, m, deterministic)
}
func (m *RsvpMgmtAllDbCounters_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RsvpMgmtAllDbCounters_KEYS.Merge(m, src)
}
func (m *RsvpMgmtAllDbCounters_KEYS) XXX_Size() int {
	return xxx_messageInfo_RsvpMgmtAllDbCounters_KEYS.Size(m)
}
func (m *RsvpMgmtAllDbCounters_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_RsvpMgmtAllDbCounters_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_RsvpMgmtAllDbCounters_KEYS proto.InternalMessageInfo

type RsvpMgmtAllDbCounters struct {
	Sessions             uint32   `protobuf:"varint,50,opt,name=sessions,proto3" json:"sessions,omitempty"`
	IncomingPaths        uint32   `protobuf:"varint,51,opt,name=incoming_paths,json=incomingPaths,proto3" json:"incoming_paths,omitempty"`
	OutgoingPaths        uint32   `protobuf:"varint,52,opt,name=outgoing_paths,json=outgoingPaths,proto3" json:"outgoing_paths,omitempty"`
	IncomingReservations uint32   `protobuf:"varint,53,opt,name=incoming_reservations,json=incomingReservations,proto3" json:"incoming_reservations,omitempty"`
	OutgoingReservations uint32   `protobuf:"varint,54,opt,name=outgoing_reservations,json=outgoingReservations,proto3" json:"outgoing_reservations,omitempty"`
	Interfaces           uint32   `protobuf:"varint,55,opt,name=interfaces,proto3" json:"interfaces,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RsvpMgmtAllDbCounters) Reset()         { *m = RsvpMgmtAllDbCounters{} }
func (m *RsvpMgmtAllDbCounters) String() string { return proto.CompactTextString(m) }
func (*RsvpMgmtAllDbCounters) ProtoMessage()    {}
func (*RsvpMgmtAllDbCounters) Descriptor() ([]byte, []int) {
	return fileDescriptor_09ec1ffcb33dec0a, []int{1}
}

func (m *RsvpMgmtAllDbCounters) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RsvpMgmtAllDbCounters.Unmarshal(m, b)
}
func (m *RsvpMgmtAllDbCounters) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RsvpMgmtAllDbCounters.Marshal(b, m, deterministic)
}
func (m *RsvpMgmtAllDbCounters) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RsvpMgmtAllDbCounters.Merge(m, src)
}
func (m *RsvpMgmtAllDbCounters) XXX_Size() int {
	return xxx_messageInfo_RsvpMgmtAllDbCounters.Size(m)
}
func (m *RsvpMgmtAllDbCounters) XXX_DiscardUnknown() {
	xxx_messageInfo_RsvpMgmtAllDbCounters.DiscardUnknown(m)
}

var xxx_messageInfo_RsvpMgmtAllDbCounters proto.InternalMessageInfo

func (m *RsvpMgmtAllDbCounters) GetSessions() uint32 {
	if m != nil {
		return m.Sessions
	}
	return 0
}

func (m *RsvpMgmtAllDbCounters) GetIncomingPaths() uint32 {
	if m != nil {
		return m.IncomingPaths
	}
	return 0
}

func (m *RsvpMgmtAllDbCounters) GetOutgoingPaths() uint32 {
	if m != nil {
		return m.OutgoingPaths
	}
	return 0
}

func (m *RsvpMgmtAllDbCounters) GetIncomingReservations() uint32 {
	if m != nil {
		return m.IncomingReservations
	}
	return 0
}

func (m *RsvpMgmtAllDbCounters) GetOutgoingReservations() uint32 {
	if m != nil {
		return m.OutgoingReservations
	}
	return 0
}

func (m *RsvpMgmtAllDbCounters) GetInterfaces() uint32 {
	if m != nil {
		return m.Interfaces
	}
	return 0
}

func init() {
	proto.RegisterType((*RsvpMgmtAllDbCounters_KEYS)(nil), "cisco_ios_xr_ip_rsvp_oper.rsvp.counters.database.rsvp_mgmt_all_db_counters_KEYS")
	proto.RegisterType((*RsvpMgmtAllDbCounters)(nil), "cisco_ios_xr_ip_rsvp_oper.rsvp.counters.database.rsvp_mgmt_all_db_counters")
}

func init() { proto.RegisterFile("rsvp_mgmt_all_db_counters.proto", fileDescriptor_09ec1ffcb33dec0a) }

var fileDescriptor_09ec1ffcb33dec0a = []byte{
	// 234 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x90, 0xcd, 0x4a, 0xc4, 0x30,
	0x14, 0x85, 0xd1, 0x85, 0xc8, 0x85, 0x71, 0x51, 0x14, 0xaa, 0x8b, 0x71, 0x18, 0x10, 0x5c, 0x15,
	0xb1, 0xfe, 0x3c, 0x81, 0x2b, 0x37, 0x32, 0xae, 0x5c, 0x5d, 0xd2, 0x4c, 0xac, 0x81, 0x69, 0x6e,
	0xc8, 0x4d, 0x8b, 0x6f, 0xe1, 0x2b, 0x4b, 0x52, 0x92, 0x69, 0x17, 0xdd, 0xb5, 0xe7, 0x7c, 0xdf,
	0x09, 0x09, 0xdc, 0x3a, 0x1e, 0x2c, 0x76, 0x6d, 0xe7, 0x51, 0x1c, 0x0e, 0xb8, 0x6f, 0x50, 0x52,
	0x6f, 0xbc, 0x72, 0x5c, 0x59, 0x47, 0x9e, 0x8a, 0x07, 0xa9, 0x59, 0x12, 0x6a, 0x62, 0xfc, 0x75,
	0xa8, 0x2d, 0x46, 0x81, 0xac, 0x72, 0x55, 0xf8, 0xaa, 0x32, 0xbe, 0x17, 0x5e, 0x34, 0x82, 0xd5,
	0x76, 0x03, 0xeb, 0xc5, 0x51, 0x7c, 0x7f, 0xfb, 0xfa, 0xdc, 0xfe, 0x9d, 0xc2, 0xf5, 0x22, 0x52,
	0xdc, 0xc0, 0x39, 0x2b, 0x66, 0x4d, 0x86, 0xcb, 0xc7, 0xcd, 0xc9, 0xfd, 0x6a, 0x97, 0xff, 0x8b,
	0x3b, 0xb8, 0xd0, 0x46, 0x52, 0xa7, 0x4d, 0x8b, 0x56, 0xf8, 0x1f, 0x2e, 0xeb, 0x48, 0xac, 0x52,
	0xfa, 0x11, 0xc2, 0x80, 0x51, 0xef, 0x5b, 0x3a, 0x62, 0x4f, 0x23, 0x96, 0xd2, 0x11, 0xab, 0xe1,
	0x2a, 0xaf, 0x39, 0xc5, 0xca, 0x0d, 0xc2, 0xc7, 0x63, 0x9f, 0x23, 0x7d, 0x99, 0xca, 0xdd, 0xa4,
	0x0b, 0x52, 0xde, 0x9e, 0x49, 0x2f, 0xa3, 0x94, 0xca, 0x99, 0xb4, 0x06, 0xd0, 0xe1, 0x76, 0xdf,
	0x42, 0x2a, 0x2e, 0x5f, 0x23, 0x39, 0x49, 0x9a, 0xb3, 0xf8, 0xd8, 0xf5, 0x7f, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x63, 0x7e, 0xa8, 0xdb, 0x8f, 0x01, 0x00, 0x00,
}
