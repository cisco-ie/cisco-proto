/*
Copyright 2019 Cisco Systems

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ospf_sh_summary.proto

package cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_process_information_process_summary

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type OspfShSummary_KEYS struct {
	ProcessName          string   `protobuf:"bytes,1,opt,name=process_name,json=processName,proto3" json:"process_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OspfShSummary_KEYS) Reset()         { *m = OspfShSummary_KEYS{} }
func (m *OspfShSummary_KEYS) String() string { return proto.CompactTextString(m) }
func (*OspfShSummary_KEYS) ProtoMessage()    {}
func (*OspfShSummary_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_baf3042e63c4ef92, []int{0}
}

func (m *OspfShSummary_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OspfShSummary_KEYS.Unmarshal(m, b)
}
func (m *OspfShSummary_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OspfShSummary_KEYS.Marshal(b, m, deterministic)
}
func (m *OspfShSummary_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OspfShSummary_KEYS.Merge(m, src)
}
func (m *OspfShSummary_KEYS) XXX_Size() int {
	return xxx_messageInfo_OspfShSummary_KEYS.Size(m)
}
func (m *OspfShSummary_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_OspfShSummary_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_OspfShSummary_KEYS proto.InternalMessageInfo

func (m *OspfShSummary_KEYS) GetProcessName() string {
	if m != nil {
		return m.ProcessName
	}
	return ""
}

type OspfShTime struct {
	Second               uint32   `protobuf:"varint,1,opt,name=second,proto3" json:"second,omitempty"`
	Nanosecond           uint32   `protobuf:"varint,2,opt,name=nanosecond,proto3" json:"nanosecond,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OspfShTime) Reset()         { *m = OspfShTime{} }
func (m *OspfShTime) String() string { return proto.CompactTextString(m) }
func (*OspfShTime) ProtoMessage()    {}
func (*OspfShTime) Descriptor() ([]byte, []int) {
	return fileDescriptor_baf3042e63c4ef92, []int{1}
}

func (m *OspfShTime) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OspfShTime.Unmarshal(m, b)
}
func (m *OspfShTime) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OspfShTime.Marshal(b, m, deterministic)
}
func (m *OspfShTime) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OspfShTime.Merge(m, src)
}
func (m *OspfShTime) XXX_Size() int {
	return xxx_messageInfo_OspfShTime.Size(m)
}
func (m *OspfShTime) XXX_DiscardUnknown() {
	xxx_messageInfo_OspfShTime.DiscardUnknown(m)
}

var xxx_messageInfo_OspfShTime proto.InternalMessageInfo

func (m *OspfShTime) GetSecond() uint32 {
	if m != nil {
		return m.Second
	}
	return 0
}

func (m *OspfShTime) GetNanosecond() uint32 {
	if m != nil {
		return m.Nanosecond
	}
	return 0
}

type OspfShMaxMetric struct {
	MaxMetricReason                uint32      `protobuf:"varint,1,opt,name=max_metric_reason,json=maxMetricReason,proto3" json:"max_metric_reason,omitempty"`
	MaxMetricEnabled               bool        `protobuf:"varint,2,opt,name=max_metric_enabled,json=maxMetricEnabled,proto3" json:"max_metric_enabled,omitempty"`
	UnsetMaximumMetric             bool        `protobuf:"varint,3,opt,name=unset_maximum_metric,json=unsetMaximumMetric,proto3" json:"unset_maximum_metric,omitempty"`
	SavedUnsetMaximumMetric        bool        `protobuf:"varint,4,opt,name=saved_unset_maximum_metric,json=savedUnsetMaximumMetric,proto3" json:"saved_unset_maximum_metric,omitempty"`
	MaximumMetricStartTime         uint32      `protobuf:"varint,5,opt,name=maximum_metric_start_time,json=maximumMetricStartTime,proto3" json:"maximum_metric_start_time,omitempty"`
	SavedStartupTime               uint32      `protobuf:"varint,6,opt,name=saved_startup_time,json=savedStartupTime,proto3" json:"saved_startup_time,omitempty"`
	MaximumMetricIncludeStubs      bool        `protobuf:"varint,7,opt,name=maximum_metric_include_stubs,json=maximumMetricIncludeStubs,proto3" json:"maximum_metric_include_stubs,omitempty"`
	MaximumMetricSummaryLsa        bool        `protobuf:"varint,8,opt,name=maximum_metric_summary_lsa,json=maximumMetricSummaryLsa,proto3" json:"maximum_metric_summary_lsa,omitempty"`
	MaximumMetricSummaryLsaMetric  uint32      `protobuf:"varint,9,opt,name=maximum_metric_summary_lsa_metric,json=maximumMetricSummaryLsaMetric,proto3" json:"maximum_metric_summary_lsa_metric,omitempty"`
	MaximumMetricExternalLsa       bool        `protobuf:"varint,10,opt,name=maximum_metric_external_lsa,json=maximumMetricExternalLsa,proto3" json:"maximum_metric_external_lsa,omitempty"`
	MaximumMetricExternalLsaMetric uint32      `protobuf:"varint,11,opt,name=maximum_metric_external_lsa_metric,json=maximumMetricExternalLsaMetric,proto3" json:"maximum_metric_external_lsa_metric,omitempty"`
	MaximumMetricOriginatedFor     uint32      `protobuf:"varint,12,opt,name=maximum_metric_originated_for,json=maximumMetricOriginatedFor,proto3" json:"maximum_metric_originated_for,omitempty"`
	MaximumMetricTimeUnset         *OspfShTime `protobuf:"bytes,13,opt,name=maximum_metric_time_unset,json=maximumMetricTimeUnset,proto3" json:"maximum_metric_time_unset,omitempty"`
	MaximumMetricUnsetReason       string      `protobuf:"bytes,14,opt,name=maximum_metric_unset_reason,json=maximumMetricUnsetReason,proto3" json:"maximum_metric_unset_reason,omitempty"`
	XXX_NoUnkeyedLiteral           struct{}    `json:"-"`
	XXX_unrecognized               []byte      `json:"-"`
	XXX_sizecache                  int32       `json:"-"`
}

func (m *OspfShMaxMetric) Reset()         { *m = OspfShMaxMetric{} }
func (m *OspfShMaxMetric) String() string { return proto.CompactTextString(m) }
func (*OspfShMaxMetric) ProtoMessage()    {}
func (*OspfShMaxMetric) Descriptor() ([]byte, []int) {
	return fileDescriptor_baf3042e63c4ef92, []int{2}
}

func (m *OspfShMaxMetric) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OspfShMaxMetric.Unmarshal(m, b)
}
func (m *OspfShMaxMetric) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OspfShMaxMetric.Marshal(b, m, deterministic)
}
func (m *OspfShMaxMetric) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OspfShMaxMetric.Merge(m, src)
}
func (m *OspfShMaxMetric) XXX_Size() int {
	return xxx_messageInfo_OspfShMaxMetric.Size(m)
}
func (m *OspfShMaxMetric) XXX_DiscardUnknown() {
	xxx_messageInfo_OspfShMaxMetric.DiscardUnknown(m)
}

var xxx_messageInfo_OspfShMaxMetric proto.InternalMessageInfo

func (m *OspfShMaxMetric) GetMaxMetricReason() uint32 {
	if m != nil {
		return m.MaxMetricReason
	}
	return 0
}

func (m *OspfShMaxMetric) GetMaxMetricEnabled() bool {
	if m != nil {
		return m.MaxMetricEnabled
	}
	return false
}

func (m *OspfShMaxMetric) GetUnsetMaximumMetric() bool {
	if m != nil {
		return m.UnsetMaximumMetric
	}
	return false
}

func (m *OspfShMaxMetric) GetSavedUnsetMaximumMetric() bool {
	if m != nil {
		return m.SavedUnsetMaximumMetric
	}
	return false
}

func (m *OspfShMaxMetric) GetMaximumMetricStartTime() uint32 {
	if m != nil {
		return m.MaximumMetricStartTime
	}
	return 0
}

func (m *OspfShMaxMetric) GetSavedStartupTime() uint32 {
	if m != nil {
		return m.SavedStartupTime
	}
	return 0
}

func (m *OspfShMaxMetric) GetMaximumMetricIncludeStubs() bool {
	if m != nil {
		return m.MaximumMetricIncludeStubs
	}
	return false
}

func (m *OspfShMaxMetric) GetMaximumMetricSummaryLsa() bool {
	if m != nil {
		return m.MaximumMetricSummaryLsa
	}
	return false
}

func (m *OspfShMaxMetric) GetMaximumMetricSummaryLsaMetric() uint32 {
	if m != nil {
		return m.MaximumMetricSummaryLsaMetric
	}
	return 0
}

func (m *OspfShMaxMetric) GetMaximumMetricExternalLsa() bool {
	if m != nil {
		return m.MaximumMetricExternalLsa
	}
	return false
}

func (m *OspfShMaxMetric) GetMaximumMetricExternalLsaMetric() uint32 {
	if m != nil {
		return m.MaximumMetricExternalLsaMetric
	}
	return 0
}

func (m *OspfShMaxMetric) GetMaximumMetricOriginatedFor() uint32 {
	if m != nil {
		return m.MaximumMetricOriginatedFor
	}
	return 0
}

func (m *OspfShMaxMetric) GetMaximumMetricTimeUnset() *OspfShTime {
	if m != nil {
		return m.MaximumMetricTimeUnset
	}
	return nil
}

func (m *OspfShMaxMetric) GetMaximumMetricUnsetReason() string {
	if m != nil {
		return m.MaximumMetricUnsetReason
	}
	return ""
}

type OspfShRedistProto struct {
	ProtocolType         string   `protobuf:"bytes,1,opt,name=protocol_type,json=protocolType,proto3" json:"protocol_type,omitempty"`
	IsisInstanceId       string   `protobuf:"bytes,2,opt,name=isis_instance_id,json=isisInstanceId,proto3" json:"isis_instance_id,omitempty"`
	OspfProcessId        string   `protobuf:"bytes,3,opt,name=ospf_process_id,json=ospfProcessId,proto3" json:"ospf_process_id,omitempty"`
	BgpAsNumber          string   `protobuf:"bytes,4,opt,name=bgp_as_number,json=bgpAsNumber,proto3" json:"bgp_as_number,omitempty"`
	EigrpAsNumber        string   `protobuf:"bytes,5,opt,name=eigrp_as_number,json=eigrpAsNumber,proto3" json:"eigrp_as_number,omitempty"`
	ConnectedInstance    string   `protobuf:"bytes,6,opt,name=connected_instance,json=connectedInstance,proto3" json:"connected_instance,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OspfShRedistProto) Reset()         { *m = OspfShRedistProto{} }
func (m *OspfShRedistProto) String() string { return proto.CompactTextString(m) }
func (*OspfShRedistProto) ProtoMessage()    {}
func (*OspfShRedistProto) Descriptor() ([]byte, []int) {
	return fileDescriptor_baf3042e63c4ef92, []int{3}
}

func (m *OspfShRedistProto) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OspfShRedistProto.Unmarshal(m, b)
}
func (m *OspfShRedistProto) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OspfShRedistProto.Marshal(b, m, deterministic)
}
func (m *OspfShRedistProto) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OspfShRedistProto.Merge(m, src)
}
func (m *OspfShRedistProto) XXX_Size() int {
	return xxx_messageInfo_OspfShRedistProto.Size(m)
}
func (m *OspfShRedistProto) XXX_DiscardUnknown() {
	xxx_messageInfo_OspfShRedistProto.DiscardUnknown(m)
}

var xxx_messageInfo_OspfShRedistProto proto.InternalMessageInfo

func (m *OspfShRedistProto) GetProtocolType() string {
	if m != nil {
		return m.ProtocolType
	}
	return ""
}

func (m *OspfShRedistProto) GetIsisInstanceId() string {
	if m != nil {
		return m.IsisInstanceId
	}
	return ""
}

func (m *OspfShRedistProto) GetOspfProcessId() string {
	if m != nil {
		return m.OspfProcessId
	}
	return ""
}

func (m *OspfShRedistProto) GetBgpAsNumber() string {
	if m != nil {
		return m.BgpAsNumber
	}
	return ""
}

func (m *OspfShRedistProto) GetEigrpAsNumber() string {
	if m != nil {
		return m.EigrpAsNumber
	}
	return ""
}

func (m *OspfShRedistProto) GetConnectedInstance() string {
	if m != nil {
		return m.ConnectedInstance
	}
	return ""
}

type OspfShRedist struct {
	RedistributionProtocol *OspfShRedistProto `protobuf:"bytes,1,opt,name=redistribution_protocol,json=redistributionProtocol,proto3" json:"redistribution_protocol,omitempty"`
	MetricFlag             bool               `protobuf:"varint,2,opt,name=metric_flag,json=metricFlag,proto3" json:"metric_flag,omitempty"`
	Metric                 uint32             `protobuf:"varint,3,opt,name=metric,proto3" json:"metric,omitempty"`
	Classless              bool               `protobuf:"varint,4,opt,name=classless,proto3" json:"classless,omitempty"`
	NssaOnly               bool               `protobuf:"varint,5,opt,name=nssa_only,json=nssaOnly,proto3" json:"nssa_only,omitempty"`
	XXX_NoUnkeyedLiteral   struct{}           `json:"-"`
	XXX_unrecognized       []byte             `json:"-"`
	XXX_sizecache          int32              `json:"-"`
}

func (m *OspfShRedist) Reset()         { *m = OspfShRedist{} }
func (m *OspfShRedist) String() string { return proto.CompactTextString(m) }
func (*OspfShRedist) ProtoMessage()    {}
func (*OspfShRedist) Descriptor() ([]byte, []int) {
	return fileDescriptor_baf3042e63c4ef92, []int{4}
}

func (m *OspfShRedist) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OspfShRedist.Unmarshal(m, b)
}
func (m *OspfShRedist) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OspfShRedist.Marshal(b, m, deterministic)
}
func (m *OspfShRedist) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OspfShRedist.Merge(m, src)
}
func (m *OspfShRedist) XXX_Size() int {
	return xxx_messageInfo_OspfShRedist.Size(m)
}
func (m *OspfShRedist) XXX_DiscardUnknown() {
	xxx_messageInfo_OspfShRedist.DiscardUnknown(m)
}

var xxx_messageInfo_OspfShRedist proto.InternalMessageInfo

func (m *OspfShRedist) GetRedistributionProtocol() *OspfShRedistProto {
	if m != nil {
		return m.RedistributionProtocol
	}
	return nil
}

func (m *OspfShRedist) GetMetricFlag() bool {
	if m != nil {
		return m.MetricFlag
	}
	return false
}

func (m *OspfShRedist) GetMetric() uint32 {
	if m != nil {
		return m.Metric
	}
	return 0
}

func (m *OspfShRedist) GetClassless() bool {
	if m != nil {
		return m.Classless
	}
	return false
}

func (m *OspfShRedist) GetNssaOnly() bool {
	if m != nil {
		return m.NssaOnly
	}
	return false
}

type OspfShDomainIdEntry struct {
	DomainIdType         uint32   `protobuf:"varint,1,opt,name=domain_id_type,json=domainIdType,proto3" json:"domain_id_type,omitempty"`
	DomainIdValue        string   `protobuf:"bytes,2,opt,name=domain_id_value,json=domainIdValue,proto3" json:"domain_id_value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OspfShDomainIdEntry) Reset()         { *m = OspfShDomainIdEntry{} }
func (m *OspfShDomainIdEntry) String() string { return proto.CompactTextString(m) }
func (*OspfShDomainIdEntry) ProtoMessage()    {}
func (*OspfShDomainIdEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_baf3042e63c4ef92, []int{5}
}

func (m *OspfShDomainIdEntry) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OspfShDomainIdEntry.Unmarshal(m, b)
}
func (m *OspfShDomainIdEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OspfShDomainIdEntry.Marshal(b, m, deterministic)
}
func (m *OspfShDomainIdEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OspfShDomainIdEntry.Merge(m, src)
}
func (m *OspfShDomainIdEntry) XXX_Size() int {
	return xxx_messageInfo_OspfShDomainIdEntry.Size(m)
}
func (m *OspfShDomainIdEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_OspfShDomainIdEntry.DiscardUnknown(m)
}

var xxx_messageInfo_OspfShDomainIdEntry proto.InternalMessageInfo

func (m *OspfShDomainIdEntry) GetDomainIdType() uint32 {
	if m != nil {
		return m.DomainIdType
	}
	return 0
}

func (m *OspfShDomainIdEntry) GetDomainIdValue() string {
	if m != nil {
		return m.DomainIdValue
	}
	return ""
}

type OspfShDomainId struct {
	PrimaryDomainId      *OspfShDomainIdEntry   `protobuf:"bytes,1,opt,name=primary_domain_id,json=primaryDomainId,proto3" json:"primary_domain_id,omitempty"`
	SecondaryDomainId    []*OspfShDomainIdEntry `protobuf:"bytes,2,rep,name=secondary_domain_id,json=secondaryDomainId,proto3" json:"secondary_domain_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *OspfShDomainId) Reset()         { *m = OspfShDomainId{} }
func (m *OspfShDomainId) String() string { return proto.CompactTextString(m) }
func (*OspfShDomainId) ProtoMessage()    {}
func (*OspfShDomainId) Descriptor() ([]byte, []int) {
	return fileDescriptor_baf3042e63c4ef92, []int{6}
}

func (m *OspfShDomainId) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OspfShDomainId.Unmarshal(m, b)
}
func (m *OspfShDomainId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OspfShDomainId.Marshal(b, m, deterministic)
}
func (m *OspfShDomainId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OspfShDomainId.Merge(m, src)
}
func (m *OspfShDomainId) XXX_Size() int {
	return xxx_messageInfo_OspfShDomainId.Size(m)
}
func (m *OspfShDomainId) XXX_DiscardUnknown() {
	xxx_messageInfo_OspfShDomainId.DiscardUnknown(m)
}

var xxx_messageInfo_OspfShDomainId proto.InternalMessageInfo

func (m *OspfShDomainId) GetPrimaryDomainId() *OspfShDomainIdEntry {
	if m != nil {
		return m.PrimaryDomainId
	}
	return nil
}

func (m *OspfShDomainId) GetSecondaryDomainId() []*OspfShDomainIdEntry {
	if m != nil {
		return m.SecondaryDomainId
	}
	return nil
}

type OspfShSummary struct {
	RoleStandby                   bool               `protobuf:"varint,50,opt,name=role_standby,json=roleStandby,proto3" json:"role_standby,omitempty"`
	Role                          uint32             `protobuf:"varint,51,opt,name=role,proto3" json:"role,omitempty"`
	NsrEnabled                    bool               `protobuf:"varint,52,opt,name=nsr_enabled,json=nsrEnabled,proto3" json:"nsr_enabled,omitempty"`
	NsrSwitchoverOnRestart        bool               `protobuf:"varint,53,opt,name=nsr_switchover_on_restart,json=nsrSwitchoverOnRestart,proto3" json:"nsr_switchover_on_restart,omitempty"`
	IgpIntactOn                   bool               `protobuf:"varint,54,opt,name=igp_intact_on,json=igpIntactOn,proto3" json:"igp_intact_on,omitempty"`
	RouterId                      string             `protobuf:"bytes,55,opt,name=router_id,json=routerId,proto3" json:"router_id,omitempty"`
	TosOptions                    uint32             `protobuf:"varint,56,opt,name=tos_options,json=tosOptions,proto3" json:"tos_options,omitempty"`
	OpaqueCapable                 bool               `protobuf:"varint,57,opt,name=opaque_capable,json=opaqueCapable,proto3" json:"opaque_capable,omitempty"`
	AreaBorderRouter              bool               `protobuf:"varint,58,opt,name=area_border_router,json=areaBorderRouter,proto3" json:"area_border_router,omitempty"`
	AsBorderRouter                bool               `protobuf:"varint,59,opt,name=as_border_router,json=asBorderRouter,proto3" json:"as_border_router,omitempty"`
	VrfLiteEnabled                bool               `protobuf:"varint,60,opt,name=vrf_lite_enabled,json=vrfLiteEnabled,proto3" json:"vrf_lite_enabled,omitempty"`
	CapabilityPreferType7         bool               `protobuf:"varint,61,opt,name=capability_prefer_type7,json=capabilityPreferType7,proto3" json:"capability_prefer_type7,omitempty"`
	MaximumMetricStart            bool               `protobuf:"varint,62,opt,name=maximum_metric_start,json=maximumMetricStart,proto3" json:"maximum_metric_start,omitempty"`
	MaximumMetricStartTimer       uint32             `protobuf:"varint,63,opt,name=maximum_metric_start_timer,json=maximumMetricStartTimer,proto3" json:"maximum_metric_start_timer,omitempty"`
	MaximumMetricSetReason        string             `protobuf:"bytes,64,opt,name=maximum_metric_set_reason,json=maximumMetricSetReason,proto3" json:"maximum_metric_set_reason,omitempty"`
	MaximumMetricAbrOffMode       bool               `protobuf:"varint,65,opt,name=maximum_metric_abr_off_mode,json=maximumMetricAbrOffMode,proto3" json:"maximum_metric_abr_off_mode,omitempty"`
	MaximumMetricAbrOffReasons    string             `protobuf:"bytes,66,opt,name=maximum_metric_abr_off_reasons,json=maximumMetricAbrOffReasons,proto3" json:"maximum_metric_abr_off_reasons,omitempty"`
	MaximumMetricAbrOffBufferTime uint32             `protobuf:"varint,67,opt,name=maximum_metric_abr_off_buffer_time,json=maximumMetricAbrOffBufferTime,proto3" json:"maximum_metric_abr_off_buffer_time,omitempty"`
	MaximumMetric                 []*OspfShMaxMetric `protobuf:"bytes,68,rep,name=maximum_metric,json=maximumMetric,proto3" json:"maximum_metric,omitempty"`
	Redistribution                []*OspfShRedist    `protobuf:"bytes,69,rep,name=redistribution,proto3" json:"redistribution,omitempty"`
	SpfStartTime                  uint32             `protobuf:"varint,70,opt,name=spf_start_time,json=spfStartTime,proto3" json:"spf_start_time,omitempty"`
	SpfHoldTime                   uint32             `protobuf:"varint,71,opt,name=spf_hold_time,json=spfHoldTime,proto3" json:"spf_hold_time,omitempty"`
	SpfMaximumTime                uint32             `protobuf:"varint,72,opt,name=spf_maximum_time,json=spfMaximumTime,proto3" json:"spf_maximum_time,omitempty"`
	SpfPrefixPriority             bool               `protobuf:"varint,73,opt,name=spf_prefix_priority,json=spfPrefixPriority,proto3" json:"spf_prefix_priority,omitempty"`
	SpfPrefixPriorityRoutePolicy  string             `protobuf:"bytes,74,opt,name=spf_prefix_priority_route_policy,json=spfPrefixPriorityRoutePolicy,proto3" json:"spf_prefix_priority_route_policy,omitempty"`
	LsaStartTime                  int32              `protobuf:"zigzag32,75,opt,name=lsa_start_time,json=lsaStartTime,proto3" json:"lsa_start_time,omitempty"`
	LsaHoldTime                   uint32             `protobuf:"varint,76,opt,name=lsa_hold_time,json=lsaHoldTime,proto3" json:"lsa_hold_time,omitempty"`
	LsaMaximumTime                uint32             `protobuf:"varint,77,opt,name=lsa_maximum_time,json=lsaMaximumTime,proto3" json:"lsa_maximum_time,omitempty"`
	MinimumLsaInterval            uint32             `protobuf:"varint,78,opt,name=minimum_lsa_interval,json=minimumLsaInterval,proto3" json:"minimum_lsa_interval,omitempty"`
	LsaRefreshInterval            uint32             `protobuf:"varint,79,opt,name=lsa_refresh_interval,json=lsaRefreshInterval,proto3" json:"lsa_refresh_interval,omitempty"`
	MinimumLsaArrivalInterval     uint32             `protobuf:"varint,80,opt,name=minimum_lsa_arrival_interval,json=minimumLsaArrivalInterval,proto3" json:"minimum_lsa_arrival_interval,omitempty"`
	IfFloodPacingInterval         uint32             `protobuf:"varint,81,opt,name=if_flood_pacing_interval,json=ifFloodPacingInterval,proto3" json:"if_flood_pacing_interval,omitempty"`
	IfRetransPacingInterval       uint32             `protobuf:"varint,82,opt,name=if_retrans_pacing_interval,json=ifRetransPacingInterval,proto3" json:"if_retrans_pacing_interval,omitempty"`
	AdjStagInitNumNbr             uint32             `protobuf:"varint,83,opt,name=adj_stag_init_num_nbr,json=adjStagInitNumNbr,proto3" json:"adj_stag_init_num_nbr,omitempty"`
	AdjStagMaxNumNbr              uint32             `protobuf:"varint,84,opt,name=adj_stag_max_num_nbr,json=adjStagMaxNumNbr,proto3" json:"adj_stag_max_num_nbr,omitempty"`
	AdjStaggerEnabled             bool               `protobuf:"varint,85,opt,name=adj_stagger_enabled,json=adjStaggerEnabled,proto3" json:"adj_stagger_enabled,omitempty"`
	AdjStagNumNbrForming          uint32             `protobuf:"varint,86,opt,name=adj_stag_num_nbr_forming,json=adjStagNumNbrForming,proto3" json:"adj_stag_num_nbr_forming,omitempty"`
	NumberNbrsFull                uint32             `protobuf:"varint,87,opt,name=number_nbrs_full,json=numberNbrsFull,proto3" json:"number_nbrs_full,omitempty"`
	AsLsaCount                    uint32             `protobuf:"varint,88,opt,name=as_lsa_count,json=asLsaCount,proto3" json:"as_lsa_count,omitempty"`
	AsLsaChecksum                 uint32             `protobuf:"varint,89,opt,name=as_lsa_checksum,json=asLsaChecksum,proto3" json:"as_lsa_checksum,omitempty"`
	OpaqueLsaCount                uint32             `protobuf:"varint,90,opt,name=opaque_lsa_count,json=opaqueLsaCount,proto3" json:"opaque_lsa_count,omitempty"`
	OpaqueLsaChecksum             uint32             `protobuf:"varint,91,opt,name=opaque_lsa_checksum,json=opaqueLsaChecksum,proto3" json:"opaque_lsa_checksum,omitempty"`
	AsDcBitlessLsaCount           uint32             `protobuf:"varint,92,opt,name=as_dc_bitless_lsa_count,json=asDcBitlessLsaCount,proto3" json:"as_dc_bitless_lsa_count,omitempty"`
	AsDnaLsaCount                 uint32             `protobuf:"varint,93,opt,name=as_dna_lsa_count,json=asDnaLsaCount,proto3" json:"as_dna_lsa_count,omitempty"`
	AreaCount                     uint32             `protobuf:"varint,94,opt,name=area_count,json=areaCount,proto3" json:"area_count,omitempty"`
	NormalAreaCount               uint32             `protobuf:"varint,95,opt,name=normal_area_count,json=normalAreaCount,proto3" json:"normal_area_count,omitempty"`
	StubAreaCount                 uint32             `protobuf:"varint,96,opt,name=stub_area_count,json=stubAreaCount,proto3" json:"stub_area_count,omitempty"`
	NssaAreaCount                 uint32             `protobuf:"varint,97,opt,name=nssa_area_count,json=nssaAreaCount,proto3" json:"nssa_area_count,omitempty"`
	MaximumInterfaces             uint32             `protobuf:"varint,98,opt,name=maximum_interfaces,json=maximumInterfaces,proto3" json:"maximum_interfaces,omitempty"`
	AsLsaFloodListLength          uint32             `protobuf:"varint,99,opt,name=as_lsa_flood_list_length,json=asLsaFloodListLength,proto3" json:"as_lsa_flood_list_length,omitempty"`
	NsfEnabled                    bool               `protobuf:"varint,100,opt,name=nsf_enabled,json=nsfEnabled,proto3" json:"nsf_enabled,omitempty"`
	LastNsfTime                   uint32             `protobuf:"varint,101,opt,name=last_nsf_time,json=lastNsfTime,proto3" json:"last_nsf_time,omitempty"`
	NsfTime                       uint32             `protobuf:"varint,102,opt,name=nsf_time,json=nsfTime,proto3" json:"nsf_time,omitempty"`
	RedistributionLimit           uint32             `protobuf:"varint,103,opt,name=redistribution_limit,json=redistributionLimit,proto3" json:"redistribution_limit,omitempty"`
	RedistributionThreshold       uint32             `protobuf:"varint,104,opt,name=redistribution_threshold,json=redistributionThreshold,proto3" json:"redistribution_threshold,omitempty"`
	RedistributionLimitWarn       bool               `protobuf:"varint,105,opt,name=redistribution_limit_warn,json=redistributionLimitWarn,proto3" json:"redistribution_limit_warn,omitempty"`
	GracefulShutdownRetentionTime uint32             `protobuf:"varint,106,opt,name=graceful_shutdown_retention_time,json=gracefulShutdownRetentionTime,proto3" json:"graceful_shutdown_retention_time,omitempty"`
	GracefulShutdownState         string             `protobuf:"bytes,107,opt,name=graceful_shutdown_state,json=gracefulShutdownState,proto3" json:"graceful_shutdown_state,omitempty"`
	DomainId                      *OspfShDomainId    `protobuf:"bytes,108,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
	TablePrefixLimitReached       bool               `protobuf:"varint,109,opt,name=table_prefix_limit_reached,json=tablePrefixLimitReached,proto3" json:"table_prefix_limit_reached,omitempty"`
	NonSelfLsaCount               uint32             `protobuf:"varint,110,opt,name=non_self_lsa_count,json=nonSelfLsaCount,proto3" json:"non_self_lsa_count,omitempty"`
	MaxLsaEnabled                 bool               `protobuf:"varint,111,opt,name=max_lsa_enabled,json=maxLsaEnabled,proto3" json:"max_lsa_enabled,omitempty"`
	MaxLsaLimit                   uint32             `protobuf:"varint,112,opt,name=max_lsa_limit,json=maxLsaLimit,proto3" json:"max_lsa_limit,omitempty"`
	MaxLsaTreshold                uint32             `protobuf:"varint,113,opt,name=max_lsa_treshold,json=maxLsaTreshold,proto3" json:"max_lsa_treshold,omitempty"`
	MaxLsaWarningOnly             bool               `protobuf:"varint,114,opt,name=max_lsa_warning_only,json=maxLsaWarningOnly,proto3" json:"max_lsa_warning_only,omitempty"`
	MaxLsaIgnoreTime              uint32             `protobuf:"varint,115,opt,name=max_lsa_ignore_time,json=maxLsaIgnoreTime,proto3" json:"max_lsa_ignore_time,omitempty"`
	MaxLsaResetTime               uint32             `protobuf:"varint,116,opt,name=max_lsa_reset_time,json=maxLsaResetTime,proto3" json:"max_lsa_reset_time,omitempty"`
	MaxLsaIgnoreLimit             uint32             `protobuf:"varint,117,opt,name=max_lsa_ignore_limit,json=maxLsaIgnoreLimit,proto3" json:"max_lsa_ignore_limit,omitempty"`
	MaxLsaIgnoreCount             uint32             `protobuf:"varint,118,opt,name=max_lsa_ignore_count,json=maxLsaIgnoreCount,proto3" json:"max_lsa_ignore_count,omitempty"`
	MaxLsaIgnoreTimer             uint32             `protobuf:"varint,119,opt,name=max_lsa_ignore_timer,json=maxLsaIgnoreTimer,proto3" json:"max_lsa_ignore_timer,omitempty"`
	MaxLsaResetTimer              uint32             `protobuf:"varint,120,opt,name=max_lsa_reset_timer,json=maxLsaResetTimer,proto3" json:"max_lsa_reset_timer,omitempty"`
	ContextName                   string             `protobuf:"bytes,121,opt,name=context_name,json=contextName,proto3" json:"context_name,omitempty"`
	SnmpTrapEnabled               bool               `protobuf:"varint,122,opt,name=snmp_trap_enabled,json=snmpTrapEnabled,proto3" json:"snmp_trap_enabled,omitempty"`
	Ucmp                          bool               `protobuf:"varint,123,opt,name=ucmp,proto3" json:"ucmp,omitempty"`
	UcmpPrefixList                string             `protobuf:"bytes,124,opt,name=ucmp_prefix_list,json=ucmpPrefixList,proto3" json:"ucmp_prefix_list,omitempty"`
	UcmpVariance                  int32              `protobuf:"zigzag32,125,opt,name=ucmp_variance,json=ucmpVariance,proto3" json:"ucmp_variance,omitempty"`
	UcmpDelay                     uint32             `protobuf:"varint,126,opt,name=ucmp_delay,json=ucmpDelay,proto3" json:"ucmp_delay,omitempty"`
	MicroloopAvoidanceType        string             `protobuf:"bytes,127,opt,name=microloop_avoidance_type,json=microloopAvoidanceType,proto3" json:"microloop_avoidance_type,omitempty"`
	MicroloopAvoidanceDelay       uint32             `protobuf:"varint,128,opt,name=microloop_avoidance_delay,json=microloopAvoidanceDelay,proto3" json:"microloop_avoidance_delay,omitempty"`
	MicroloopAvoidanceActive      bool               `protobuf:"varint,129,opt,name=microloop_avoidance_active,json=microloopAvoidanceActive,proto3" json:"microloop_avoidance_active,omitempty"`
	MicroloopAvoidanceDelayExpiry uint32             `protobuf:"varint,130,opt,name=microloop_avoidance_delay_expiry,json=microloopAvoidanceDelayExpiry,proto3" json:"microloop_avoidance_delay_expiry,omitempty"`
	LsdConnected                  bool               `protobuf:"varint,131,opt,name=lsd_connected,json=lsdConnected,proto3" json:"lsd_connected,omitempty"`
	LsdRegistered                 bool               `protobuf:"varint,132,opt,name=lsd_registered,json=lsdRegistered,proto3" json:"lsd_registered,omitempty"`
	LsdBound                      bool               `protobuf:"varint,133,opt,name=lsd_bound,json=lsdBound,proto3" json:"lsd_bound,omitempty"`
	LsdConnectionRevision         uint32             `protobuf:"varint,134,opt,name=lsd_connection_revision,json=lsdConnectionRevision,proto3" json:"lsd_connection_revision,omitempty"`
	SrgbConfigured                bool               `protobuf:"varint,135,opt,name=srgb_configured,json=srgbConfigured,proto3" json:"srgb_configured,omitempty"`
	SrgbStart                     uint32             `protobuf:"varint,136,opt,name=srgb_start,json=srgbStart,proto3" json:"srgb_start,omitempty"`
	SrgbEnd                       uint32             `protobuf:"varint,137,opt,name=srgb_end,json=srgbEnd,proto3" json:"srgb_end,omitempty"`
	SrgbStatus                    string             `protobuf:"bytes,138,opt,name=srgb_status,json=srgbStatus,proto3" json:"srgb_status,omitempty"`
	SrStrictSpfCap                bool               `protobuf:"varint,139,opt,name=sr_strict_spf_cap,json=srStrictSpfCap,proto3" json:"sr_strict_spf_cap,omitempty"`
	SrlbStart                     uint32             `protobuf:"varint,140,opt,name=srlb_start,json=srlbStart,proto3" json:"srlb_start,omitempty"`
	SrlbEnd                       uint32             `protobuf:"varint,141,opt,name=srlb_end,json=srlbEnd,proto3" json:"srlb_end,omitempty"`
	SrlbStatus                    string             `protobuf:"bytes,142,opt,name=srlb_status,json=srlbStatus,proto3" json:"srlb_status,omitempty"`
	XXX_NoUnkeyedLiteral          struct{}           `json:"-"`
	XXX_unrecognized              []byte             `json:"-"`
	XXX_sizecache                 int32              `json:"-"`
}

func (m *OspfShSummary) Reset()         { *m = OspfShSummary{} }
func (m *OspfShSummary) String() string { return proto.CompactTextString(m) }
func (*OspfShSummary) ProtoMessage()    {}
func (*OspfShSummary) Descriptor() ([]byte, []int) {
	return fileDescriptor_baf3042e63c4ef92, []int{7}
}

func (m *OspfShSummary) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OspfShSummary.Unmarshal(m, b)
}
func (m *OspfShSummary) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OspfShSummary.Marshal(b, m, deterministic)
}
func (m *OspfShSummary) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OspfShSummary.Merge(m, src)
}
func (m *OspfShSummary) XXX_Size() int {
	return xxx_messageInfo_OspfShSummary.Size(m)
}
func (m *OspfShSummary) XXX_DiscardUnknown() {
	xxx_messageInfo_OspfShSummary.DiscardUnknown(m)
}

var xxx_messageInfo_OspfShSummary proto.InternalMessageInfo

func (m *OspfShSummary) GetRoleStandby() bool {
	if m != nil {
		return m.RoleStandby
	}
	return false
}

func (m *OspfShSummary) GetRole() uint32 {
	if m != nil {
		return m.Role
	}
	return 0
}

func (m *OspfShSummary) GetNsrEnabled() bool {
	if m != nil {
		return m.NsrEnabled
	}
	return false
}

func (m *OspfShSummary) GetNsrSwitchoverOnRestart() bool {
	if m != nil {
		return m.NsrSwitchoverOnRestart
	}
	return false
}

func (m *OspfShSummary) GetIgpIntactOn() bool {
	if m != nil {
		return m.IgpIntactOn
	}
	return false
}

func (m *OspfShSummary) GetRouterId() string {
	if m != nil {
		return m.RouterId
	}
	return ""
}

func (m *OspfShSummary) GetTosOptions() uint32 {
	if m != nil {
		return m.TosOptions
	}
	return 0
}

func (m *OspfShSummary) GetOpaqueCapable() bool {
	if m != nil {
		return m.OpaqueCapable
	}
	return false
}

func (m *OspfShSummary) GetAreaBorderRouter() bool {
	if m != nil {
		return m.AreaBorderRouter
	}
	return false
}

func (m *OspfShSummary) GetAsBorderRouter() bool {
	if m != nil {
		return m.AsBorderRouter
	}
	return false
}

func (m *OspfShSummary) GetVrfLiteEnabled() bool {
	if m != nil {
		return m.VrfLiteEnabled
	}
	return false
}

func (m *OspfShSummary) GetCapabilityPreferType7() bool {
	if m != nil {
		return m.CapabilityPreferType7
	}
	return false
}

func (m *OspfShSummary) GetMaximumMetricStart() bool {
	if m != nil {
		return m.MaximumMetricStart
	}
	return false
}

func (m *OspfShSummary) GetMaximumMetricStartTimer() uint32 {
	if m != nil {
		return m.MaximumMetricStartTimer
	}
	return 0
}

func (m *OspfShSummary) GetMaximumMetricSetReason() string {
	if m != nil {
		return m.MaximumMetricSetReason
	}
	return ""
}

func (m *OspfShSummary) GetMaximumMetricAbrOffMode() bool {
	if m != nil {
		return m.MaximumMetricAbrOffMode
	}
	return false
}

func (m *OspfShSummary) GetMaximumMetricAbrOffReasons() string {
	if m != nil {
		return m.MaximumMetricAbrOffReasons
	}
	return ""
}

func (m *OspfShSummary) GetMaximumMetricAbrOffBufferTime() uint32 {
	if m != nil {
		return m.MaximumMetricAbrOffBufferTime
	}
	return 0
}

func (m *OspfShSummary) GetMaximumMetric() []*OspfShMaxMetric {
	if m != nil {
		return m.MaximumMetric
	}
	return nil
}

func (m *OspfShSummary) GetRedistribution() []*OspfShRedist {
	if m != nil {
		return m.Redistribution
	}
	return nil
}

func (m *OspfShSummary) GetSpfStartTime() uint32 {
	if m != nil {
		return m.SpfStartTime
	}
	return 0
}

func (m *OspfShSummary) GetSpfHoldTime() uint32 {
	if m != nil {
		return m.SpfHoldTime
	}
	return 0
}

func (m *OspfShSummary) GetSpfMaximumTime() uint32 {
	if m != nil {
		return m.SpfMaximumTime
	}
	return 0
}

func (m *OspfShSummary) GetSpfPrefixPriority() bool {
	if m != nil {
		return m.SpfPrefixPriority
	}
	return false
}

func (m *OspfShSummary) GetSpfPrefixPriorityRoutePolicy() string {
	if m != nil {
		return m.SpfPrefixPriorityRoutePolicy
	}
	return ""
}

func (m *OspfShSummary) GetLsaStartTime() int32 {
	if m != nil {
		return m.LsaStartTime
	}
	return 0
}

func (m *OspfShSummary) GetLsaHoldTime() uint32 {
	if m != nil {
		return m.LsaHoldTime
	}
	return 0
}

func (m *OspfShSummary) GetLsaMaximumTime() uint32 {
	if m != nil {
		return m.LsaMaximumTime
	}
	return 0
}

func (m *OspfShSummary) GetMinimumLsaInterval() uint32 {
	if m != nil {
		return m.MinimumLsaInterval
	}
	return 0
}

func (m *OspfShSummary) GetLsaRefreshInterval() uint32 {
	if m != nil {
		return m.LsaRefreshInterval
	}
	return 0
}

func (m *OspfShSummary) GetMinimumLsaArrivalInterval() uint32 {
	if m != nil {
		return m.MinimumLsaArrivalInterval
	}
	return 0
}

func (m *OspfShSummary) GetIfFloodPacingInterval() uint32 {
	if m != nil {
		return m.IfFloodPacingInterval
	}
	return 0
}

func (m *OspfShSummary) GetIfRetransPacingInterval() uint32 {
	if m != nil {
		return m.IfRetransPacingInterval
	}
	return 0
}

func (m *OspfShSummary) GetAdjStagInitNumNbr() uint32 {
	if m != nil {
		return m.AdjStagInitNumNbr
	}
	return 0
}

func (m *OspfShSummary) GetAdjStagMaxNumNbr() uint32 {
	if m != nil {
		return m.AdjStagMaxNumNbr
	}
	return 0
}

func (m *OspfShSummary) GetAdjStaggerEnabled() bool {
	if m != nil {
		return m.AdjStaggerEnabled
	}
	return false
}

func (m *OspfShSummary) GetAdjStagNumNbrForming() uint32 {
	if m != nil {
		return m.AdjStagNumNbrForming
	}
	return 0
}

func (m *OspfShSummary) GetNumberNbrsFull() uint32 {
	if m != nil {
		return m.NumberNbrsFull
	}
	return 0
}

func (m *OspfShSummary) GetAsLsaCount() uint32 {
	if m != nil {
		return m.AsLsaCount
	}
	return 0
}

func (m *OspfShSummary) GetAsLsaChecksum() uint32 {
	if m != nil {
		return m.AsLsaChecksum
	}
	return 0
}

func (m *OspfShSummary) GetOpaqueLsaCount() uint32 {
	if m != nil {
		return m.OpaqueLsaCount
	}
	return 0
}

func (m *OspfShSummary) GetOpaqueLsaChecksum() uint32 {
	if m != nil {
		return m.OpaqueLsaChecksum
	}
	return 0
}

func (m *OspfShSummary) GetAsDcBitlessLsaCount() uint32 {
	if m != nil {
		return m.AsDcBitlessLsaCount
	}
	return 0
}

func (m *OspfShSummary) GetAsDnaLsaCount() uint32 {
	if m != nil {
		return m.AsDnaLsaCount
	}
	return 0
}

func (m *OspfShSummary) GetAreaCount() uint32 {
	if m != nil {
		return m.AreaCount
	}
	return 0
}

func (m *OspfShSummary) GetNormalAreaCount() uint32 {
	if m != nil {
		return m.NormalAreaCount
	}
	return 0
}

func (m *OspfShSummary) GetStubAreaCount() uint32 {
	if m != nil {
		return m.StubAreaCount
	}
	return 0
}

func (m *OspfShSummary) GetNssaAreaCount() uint32 {
	if m != nil {
		return m.NssaAreaCount
	}
	return 0
}

func (m *OspfShSummary) GetMaximumInterfaces() uint32 {
	if m != nil {
		return m.MaximumInterfaces
	}
	return 0
}

func (m *OspfShSummary) GetAsLsaFloodListLength() uint32 {
	if m != nil {
		return m.AsLsaFloodListLength
	}
	return 0
}

func (m *OspfShSummary) GetNsfEnabled() bool {
	if m != nil {
		return m.NsfEnabled
	}
	return false
}

func (m *OspfShSummary) GetLastNsfTime() uint32 {
	if m != nil {
		return m.LastNsfTime
	}
	return 0
}

func (m *OspfShSummary) GetNsfTime() uint32 {
	if m != nil {
		return m.NsfTime
	}
	return 0
}

func (m *OspfShSummary) GetRedistributionLimit() uint32 {
	if m != nil {
		return m.RedistributionLimit
	}
	return 0
}

func (m *OspfShSummary) GetRedistributionThreshold() uint32 {
	if m != nil {
		return m.RedistributionThreshold
	}
	return 0
}

func (m *OspfShSummary) GetRedistributionLimitWarn() bool {
	if m != nil {
		return m.RedistributionLimitWarn
	}
	return false
}

func (m *OspfShSummary) GetGracefulShutdownRetentionTime() uint32 {
	if m != nil {
		return m.GracefulShutdownRetentionTime
	}
	return 0
}

func (m *OspfShSummary) GetGracefulShutdownState() string {
	if m != nil {
		return m.GracefulShutdownState
	}
	return ""
}

func (m *OspfShSummary) GetDomainId() *OspfShDomainId {
	if m != nil {
		return m.DomainId
	}
	return nil
}

func (m *OspfShSummary) GetTablePrefixLimitReached() bool {
	if m != nil {
		return m.TablePrefixLimitReached
	}
	return false
}

func (m *OspfShSummary) GetNonSelfLsaCount() uint32 {
	if m != nil {
		return m.NonSelfLsaCount
	}
	return 0
}

func (m *OspfShSummary) GetMaxLsaEnabled() bool {
	if m != nil {
		return m.MaxLsaEnabled
	}
	return false
}

func (m *OspfShSummary) GetMaxLsaLimit() uint32 {
	if m != nil {
		return m.MaxLsaLimit
	}
	return 0
}

func (m *OspfShSummary) GetMaxLsaTreshold() uint32 {
	if m != nil {
		return m.MaxLsaTreshold
	}
	return 0
}

func (m *OspfShSummary) GetMaxLsaWarningOnly() bool {
	if m != nil {
		return m.MaxLsaWarningOnly
	}
	return false
}

func (m *OspfShSummary) GetMaxLsaIgnoreTime() uint32 {
	if m != nil {
		return m.MaxLsaIgnoreTime
	}
	return 0
}

func (m *OspfShSummary) GetMaxLsaResetTime() uint32 {
	if m != nil {
		return m.MaxLsaResetTime
	}
	return 0
}

func (m *OspfShSummary) GetMaxLsaIgnoreLimit() uint32 {
	if m != nil {
		return m.MaxLsaIgnoreLimit
	}
	return 0
}

func (m *OspfShSummary) GetMaxLsaIgnoreCount() uint32 {
	if m != nil {
		return m.MaxLsaIgnoreCount
	}
	return 0
}

func (m *OspfShSummary) GetMaxLsaIgnoreTimer() uint32 {
	if m != nil {
		return m.MaxLsaIgnoreTimer
	}
	return 0
}

func (m *OspfShSummary) GetMaxLsaResetTimer() uint32 {
	if m != nil {
		return m.MaxLsaResetTimer
	}
	return 0
}

func (m *OspfShSummary) GetContextName() string {
	if m != nil {
		return m.ContextName
	}
	return ""
}

func (m *OspfShSummary) GetSnmpTrapEnabled() bool {
	if m != nil {
		return m.SnmpTrapEnabled
	}
	return false
}

func (m *OspfShSummary) GetUcmp() bool {
	if m != nil {
		return m.Ucmp
	}
	return false
}

func (m *OspfShSummary) GetUcmpPrefixList() string {
	if m != nil {
		return m.UcmpPrefixList
	}
	return ""
}

func (m *OspfShSummary) GetUcmpVariance() int32 {
	if m != nil {
		return m.UcmpVariance
	}
	return 0
}

func (m *OspfShSummary) GetUcmpDelay() uint32 {
	if m != nil {
		return m.UcmpDelay
	}
	return 0
}

func (m *OspfShSummary) GetMicroloopAvoidanceType() string {
	if m != nil {
		return m.MicroloopAvoidanceType
	}
	return ""
}

func (m *OspfShSummary) GetMicroloopAvoidanceDelay() uint32 {
	if m != nil {
		return m.MicroloopAvoidanceDelay
	}
	return 0
}

func (m *OspfShSummary) GetMicroloopAvoidanceActive() bool {
	if m != nil {
		return m.MicroloopAvoidanceActive
	}
	return false
}

func (m *OspfShSummary) GetMicroloopAvoidanceDelayExpiry() uint32 {
	if m != nil {
		return m.MicroloopAvoidanceDelayExpiry
	}
	return 0
}

func (m *OspfShSummary) GetLsdConnected() bool {
	if m != nil {
		return m.LsdConnected
	}
	return false
}

func (m *OspfShSummary) GetLsdRegistered() bool {
	if m != nil {
		return m.LsdRegistered
	}
	return false
}

func (m *OspfShSummary) GetLsdBound() bool {
	if m != nil {
		return m.LsdBound
	}
	return false
}

func (m *OspfShSummary) GetLsdConnectionRevision() uint32 {
	if m != nil {
		return m.LsdConnectionRevision
	}
	return 0
}

func (m *OspfShSummary) GetSrgbConfigured() bool {
	if m != nil {
		return m.SrgbConfigured
	}
	return false
}

func (m *OspfShSummary) GetSrgbStart() uint32 {
	if m != nil {
		return m.SrgbStart
	}
	return 0
}

func (m *OspfShSummary) GetSrgbEnd() uint32 {
	if m != nil {
		return m.SrgbEnd
	}
	return 0
}

func (m *OspfShSummary) GetSrgbStatus() string {
	if m != nil {
		return m.SrgbStatus
	}
	return ""
}

func (m *OspfShSummary) GetSrStrictSpfCap() bool {
	if m != nil {
		return m.SrStrictSpfCap
	}
	return false
}

func (m *OspfShSummary) GetSrlbStart() uint32 {
	if m != nil {
		return m.SrlbStart
	}
	return 0
}

func (m *OspfShSummary) GetSrlbEnd() uint32 {
	if m != nil {
		return m.SrlbEnd
	}
	return 0
}

func (m *OspfShSummary) GetSrlbStatus() string {
	if m != nil {
		return m.SrlbStatus
	}
	return ""
}

func init() {
	proto.RegisterType((*OspfShSummary_KEYS)(nil), "cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.process_information.process_summary.ospf_sh_summary_KEYS")
	proto.RegisterType((*OspfShTime)(nil), "cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.process_information.process_summary.ospf_sh_time")
	proto.RegisterType((*OspfShMaxMetric)(nil), "cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.process_information.process_summary.ospf_sh_max_metric")
	proto.RegisterType((*OspfShRedistProto)(nil), "cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.process_information.process_summary.ospf_sh_redist_proto")
	proto.RegisterType((*OspfShRedist)(nil), "cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.process_information.process_summary.ospf_sh_redist")
	proto.RegisterType((*OspfShDomainIdEntry)(nil), "cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.process_information.process_summary.ospf_sh_domain_id_entry")
	proto.RegisterType((*OspfShDomainId)(nil), "cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.process_information.process_summary.ospf_sh_domain_id")
	proto.RegisterType((*OspfShSummary)(nil), "cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.process_information.process_summary.ospf_sh_summary")
}

func init() { proto.RegisterFile("ospf_sh_summary.proto", fileDescriptor_baf3042e63c4ef92) }

var fileDescriptor_baf3042e63c4ef92 = []byte{
	// 2543 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x58, 0x49, 0x77, 0x1c, 0xb7,
	0x11, 0x7e, 0x94, 0x17, 0x91, 0xe0, 0x26, 0x42, 0x0b, 0x41, 0x59, 0x56, 0x68, 0xda, 0x51, 0xf8,
	0xbc, 0x30, 0x8e, 0xed, 0x58, 0x96, 0x65, 0xc7, 0xa1, 0x16, 0x5a, 0xb4, 0x29, 0x92, 0x19, 0xca,
	0x76, 0x9c, 0x0d, 0xc1, 0x74, 0xa3, 0x87, 0xb0, 0x7b, 0xd0, 0x6d, 0x00, 0x3d, 0xe2, 0xc4, 0xd9,
	0x57, 0x67, 0x3d, 0xe4, 0x98, 0xf7, 0x72, 0xce, 0x21, 0xa7, 0xdc, 0xf2, 0x17, 0xf2, 0x47, 0x72,
	0xc9, 0x9f, 0xc8, 0xab, 0xaa, 0xde, 0x66, 0x51, 0x6e, 0x91, 0x4f, 0x1c, 0x56, 0x7d, 0x5f, 0x55,
	0x01, 0x28, 0x54, 0x15, 0x9a, 0x9d, 0xcf, 0x7c, 0x9e, 0x48, 0x7f, 0x2c, 0x7d, 0xd1, 0xef, 0x2b,
	0x37, 0xdc, 0xca, 0x5d, 0x16, 0x32, 0xde, 0x8d, 0x8c, 0x8f, 0x32, 0x69, 0x32, 0x2f, 0x4f, 0x9c,
	0x34, 0xf9, 0xe0, 0x15, 0x89, 0xc0, 0x2c, 0xd7, 0x6e, 0x0b, 0x7e, 0x01, 0x2e, 0xd2, 0xde, 0x6b,
	0x5f, 0xfd, 0xda, 0x8a, 0x75, 0xa2, 0x8a, 0x34, 0xc8, 0x81, 0xab, 0xb5, 0xd2, 0xd8, 0x24, 0x73,
	0x7d, 0x15, 0x4c, 0x66, 0x6b, 0x59, 0xe9, 0x69, 0xe3, 0x1a, 0x3b, 0x37, 0xe6, 0x5c, 0xbe, 0x7b,
	0xfb, 0xc3, 0x23, 0xfe, 0x14, 0x5b, 0xa8, 0xa0, 0x56, 0xf5, 0xb5, 0x98, 0x59, 0x9f, 0xd9, 0x9c,
	0xeb, 0xcc, 0x97, 0xb2, 0x7d, 0xd5, 0xd7, 0x1b, 0x3b, 0x6c, 0xa1, 0xa2, 0x06, 0xd3, 0xd7, 0xfc,
	0x02, 0x7b, 0xdc, 0xeb, 0x28, 0xb3, 0x31, 0x82, 0x17, 0x3b, 0xe5, 0x7f, 0xfc, 0x32, 0x63, 0x56,
	0xd9, 0xac, 0xd4, 0x9d, 0x42, 0x5d, 0x4b, 0xb2, 0xf1, 0xaf, 0xd3, 0x8c, 0x57, 0x86, 0xfa, 0xea,
	0x44, 0xf6, 0x75, 0x70, 0x26, 0xe2, 0xcf, 0xb2, 0x95, 0xe6, 0x3f, 0xe9, 0xb4, 0xf2, 0x99, 0x2d,
	0x2d, 0x2f, 0xf7, 0xd5, 0xc9, 0x5d, 0x94, 0x77, 0x50, 0xcc, 0x9f, 0x67, 0xbc, 0x85, 0xd5, 0x56,
	0x75, 0x53, 0x4d, 0xae, 0x66, 0x3b, 0x67, 0x6a, 0xf0, 0x6d, 0x92, 0xf3, 0x17, 0xd9, 0xb9, 0xc2,
	0x7a, 0x1d, 0xc0, 0x9b, 0xe9, 0x17, 0xfd, 0x92, 0x27, 0x1e, 0x41, 0x3c, 0x47, 0xdd, 0x5d, 0x52,
	0x11, 0x91, 0x5f, 0x67, 0x17, 0xbd, 0x1a, 0xe8, 0x58, 0x4e, 0xe5, 0x3d, 0x8a, 0xbc, 0x55, 0x44,
	0xbc, 0x37, 0x49, 0xbe, 0xc6, 0xd6, 0x46, 0x09, 0xd2, 0x07, 0xe5, 0x02, 0x6e, 0x9a, 0x78, 0x0c,
	0x17, 0x74, 0xa1, 0xdf, 0x66, 0x1c, 0x81, 0xfa, 0x1e, 0x6c, 0xe9, 0xf3, 0x8c, 0x93, 0x5f, 0x64,
	0x14, 0x39, 0x71, 0x1e, 0x47, 0xce, 0x19, 0xd4, 0x1c, 0x91, 0x02, 0xd1, 0x6f, 0xb1, 0x4b, 0x63,
	0x8e, 0x8c, 0x8d, 0xd2, 0x22, 0xd6, 0xd2, 0x87, 0xa2, 0xeb, 0xc5, 0x69, 0x8c, 0x73, 0x6d, 0xc4,
	0xd7, 0x2e, 0x21, 0x8e, 0x00, 0x00, 0xcb, 0x1c, 0x8f, 0xb4, 0xcc, 0x89, 0xd4, 0x2b, 0x31, 0x4b,
	0xcb, 0x1c, 0x0d, 0x95, 0xf4, 0x7b, 0x5e, 0xf1, 0x3b, 0xec, 0xa9, 0x07, 0x93, 0xab, 0xad, 0x9a,
	0xc3, 0xd0, 0x9f, 0x7c, 0x80, 0x8d, 0x72, 0xc3, 0xde, 0x64, 0x4f, 0x8c, 0x59, 0xd2, 0x27, 0x41,
	0x3b, 0xab, 0x52, 0x8c, 0x83, 0x61, 0x1c, 0x62, 0xc4, 0xc6, 0xed, 0x12, 0x00, 0x81, 0xbc, 0xc3,
	0x36, 0xfe, 0x07, 0xbd, 0x8a, 0x64, 0x1e, 0x23, 0xb9, 0xfc, 0x20, 0x2b, 0x65, 0x28, 0xdb, 0xec,
	0xc9, 0x31, 0x5b, 0x99, 0x33, 0x3d, 0x63, 0x55, 0xd0, 0xb1, 0x4c, 0x32, 0x27, 0x16, 0xd0, 0xcc,
	0xc5, 0x11, 0x33, 0x07, 0x35, 0x64, 0x27, 0x73, 0xfc, 0xef, 0x33, 0x13, 0xe7, 0x0f, 0xa7, 0x48,
	0xa9, 0x24, 0x16, 0xd7, 0x67, 0x36, 0xe7, 0x5f, 0xca, 0xb7, 0xfe, 0xff, 0x57, 0x7d, 0xab, 0x7d,
	0x59, 0xc7, 0x32, 0x0e, 0xd2, 0x07, 0x33, 0x77, 0xca, 0xde, 0x53, 0xca, 0x97, 0xf7, 0x6f, 0x09,
	0xcb, 0xc0, 0xe8, 0xde, 0x23, 0x91, 0x2e, 0xe2, 0xc6, 0x67, 0xa7, 0x9a, 0x7a, 0xe2, 0x74, 0x6c,
	0x7c, 0x90, 0x54, 0xcb, 0x9e, 0x66, 0x8b, 0xf8, 0x23, 0xca, 0x52, 0x19, 0x86, 0x79, 0x55, 0x50,
	0x16, 0x2a, 0xe1, 0xbd, 0x61, 0xae, 0xf9, 0x26, 0x3b, 0x63, 0xbc, 0x81, 0x55, 0xf8, 0xa0, 0x6c,
	0xa4, 0xa5, 0xa1, 0x4b, 0x3c, 0xd7, 0x59, 0x02, 0xf9, 0x6e, 0x29, 0xde, 0x8d, 0xf9, 0x15, 0xb6,
	0x8c, 0x6e, 0xea, 0x75, 0xc7, 0x78, 0x7b, 0xe7, 0x3a, 0x8b, 0x20, 0x3e, 0x24, 0xe9, 0x6e, 0xcc,
	0x37, 0xd8, 0x62, 0xb7, 0x97, 0x4b, 0xe5, 0xa5, 0x2d, 0xfa, 0x5d, 0xed, 0xf0, 0xae, 0xce, 0x75,
	0xe6, 0xbb, 0xbd, 0x7c, 0xdb, 0xef, 0xa3, 0x08, 0x6c, 0x69, 0xd3, 0x73, 0x6d, 0xd4, 0x63, 0x64,
	0x0b, 0xc5, 0x35, 0xee, 0x05, 0xc6, 0xa3, 0xcc, 0x5a, 0x1d, 0xc1, 0xd9, 0x57, 0x21, 0xe2, 0x65,
	0x9c, 0xeb, 0xac, 0xd4, 0x9a, 0x2a, 0xc8, 0x8d, 0x7f, 0x9e, 0x62, 0x4b, 0xa3, 0x5b, 0xc1, 0xff,
	0x31, 0xc3, 0x56, 0xe9, 0xa7, 0x33, 0xdd, 0x02, 0x0e, 0x49, 0x56, 0xeb, 0xc7, 0xfd, 0x98, 0x7f,
	0xe9, 0xe4, 0x61, 0x26, 0x42, 0xfb, 0x80, 0x3a, 0x17, 0x46, 0x03, 0x3b, 0x2c, 0xe3, 0xe2, 0x5f,
	0x60, 0xf3, 0x65, 0x22, 0x24, 0xa9, 0xea, 0x95, 0x35, 0x95, 0x91, 0x68, 0x27, 0x55, 0x3d, 0x28,
	0xfb, 0xad, 0xfa, 0xb9, 0xd8, 0x29, 0xff, 0xe3, 0x97, 0xd8, 0x5c, 0x94, 0x2a, 0xef, 0x53, 0xed,
	0x7d, 0x59, 0x22, 0x1b, 0x01, 0x7f, 0x82, 0xcd, 0x59, 0xef, 0x95, 0xcc, 0x6c, 0x3a, 0xc4, 0xed,
	0x9e, 0xed, 0xcc, 0x82, 0xe0, 0xc0, 0xa6, 0xc3, 0x8d, 0x1e, 0x5b, 0xad, 0x62, 0x8c, 0xb3, 0xbe,
	0x32, 0x56, 0x9a, 0x58, 0x6a, 0x1b, 0xdc, 0x90, 0x3f, 0xc3, 0x96, 0x1a, 0x51, 0x9d, 0x48, 0x8b,
	0x9d, 0x05, 0x92, 0xee, 0xc6, 0x98, 0x48, 0x57, 0xd8, 0x72, 0x83, 0x1a, 0xa8, 0xb4, 0xd0, 0x65,
	0x1e, 0x2d, 0x56, 0xb0, 0xf7, 0x41, 0xb8, 0xf1, 0x9f, 0x53, 0x6c, 0x65, 0xc2, 0x13, 0xff, 0xdb,
	0x0c, 0x5b, 0xc9, 0x9d, 0xc1, 0xda, 0x55, 0x4b, 0xcb, 0x03, 0xfa, 0xf4, 0x61, 0x1e, 0xd0, 0xd8,
	0xe2, 0x3b, 0xcb, 0x65, 0x54, 0xb7, 0xca, 0x45, 0x40, 0x6d, 0x39, 0x4b, 0x5d, 0x74, 0x34, 0xd6,
	0x53, 0xeb, 0x8f, 0x7c, 0xde, 0xb1, 0xae, 0xd4, 0x71, 0x55, 0xd1, 0x6e, 0xfc, 0xfb, 0xe9, 0xf2,
	0xd6, 0x36, 0xc3, 0x06, 0xcc, 0x19, 0x2e, 0x4b, 0xa1, 0x43, 0x29, 0x1b, 0x77, 0x87, 0xe2, 0x25,
	0x4c, 0x85, 0x79, 0x90, 0x1d, 0x91, 0x88, 0x73, 0xf6, 0x28, 0xfc, 0x2b, 0x5e, 0xc6, 0x83, 0xc6,
	0xdf, 0x90, 0x95, 0xd6, 0xbb, 0xba, 0xd3, 0xbf, 0x42, 0x59, 0x69, 0xbd, 0xab, 0x7a, 0xfc, 0x35,
	0xb6, 0x06, 0x00, 0x7f, 0xdf, 0x84, 0xe8, 0x38, 0x1b, 0x68, 0x27, 0x33, 0x2b, 0x9d, 0xc6, 0x3e,
	0x2a, 0xbe, 0x8a, 0xf0, 0x0b, 0xd6, 0xbb, 0xa3, 0x5a, 0x7f, 0x60, 0x3b, 0xa4, 0x85, 0x9a, 0x61,
	0x7a, 0xb9, 0x34, 0x36, 0xa8, 0x28, 0xc8, 0xcc, 0x8a, 0x57, 0x29, 0x26, 0xd3, 0xcb, 0x77, 0x51,
	0x76, 0x60, 0x21, 0x7d, 0x5d, 0x56, 0x04, 0xed, 0x60, 0xb7, 0xaf, 0x62, 0x6a, 0xcd, 0x92, 0x60,
	0x37, 0x86, 0xe0, 0x42, 0xe6, 0x65, 0x96, 0xc3, 0x86, 0x79, 0xf1, 0x1a, 0x4d, 0x3c, 0x21, 0xf3,
	0x07, 0x24, 0xe1, 0x5f, 0x64, 0x4b, 0x59, 0xae, 0x3e, 0x29, 0xb4, 0x8c, 0x54, 0x0e, 0xf1, 0x8a,
	0x6b, 0xe8, 0x62, 0x91, 0xa4, 0x37, 0x49, 0x08, 0xdd, 0x5f, 0x39, 0xad, 0x64, 0x37, 0x73, 0xb1,
	0x76, 0x92, 0xec, 0x8b, 0xd7, 0x69, 0xaa, 0x01, 0xcd, 0x0d, 0x54, 0x74, 0x50, 0x0e, 0xc5, 0x53,
	0xf9, 0x31, 0xec, 0x75, 0xc4, 0x2e, 0x29, 0x3f, 0x8e, 0x1c, 0xb8, 0x44, 0xa6, 0x26, 0xe8, 0x7a,
	0x07, 0xdf, 0x20, 0xe4, 0xc0, 0x25, 0x7b, 0x26, 0xe8, 0x6a, 0x17, 0x5f, 0x65, 0xab, 0x18, 0xa1,
	0x49, 0x4d, 0x18, 0xca, 0xdc, 0xe9, 0x44, 0x3b, 0xbc, 0x75, 0x57, 0xc5, 0x9b, 0x48, 0x38, 0xdf,
	0xa8, 0x0f, 0x51, 0x0b, 0xd7, 0xef, 0x2a, 0x4c, 0x58, 0xd3, 0x46, 0x1e, 0xf1, 0x35, 0x9a, 0xb0,
	0x26, 0xa7, 0x9d, 0x69, 0xa3, 0x47, 0x3d, 0x24, 0x39, 0xf1, 0x16, 0x6e, 0xe1, 0xea, 0xf4, 0x29,
	0xc9, 0x4d, 0x9b, 0xb0, 0x9a, 0x96, 0xf5, 0x75, 0x3c, 0x9d, 0xb1, 0x09, 0xab, 0x6a, 0x58, 0xfc,
	0x8d, 0x89, 0x7e, 0xa7, 0xba, 0x4e, 0x66, 0x49, 0x22, 0xfb, 0x59, 0xac, 0xc5, 0xf6, 0x94, 0x99,
	0x67, 0xbb, 0xeb, 0x0e, 0x92, 0xe4, 0x6e, 0x16, 0x6b, 0x7e, 0x83, 0x5d, 0x7e, 0x00, 0x9b, 0x9c,
	0x7b, 0x71, 0x03, 0xbd, 0x5f, 0x9c, 0x62, 0x80, 0x02, 0xf0, 0x7c, 0x77, 0x62, 0x5c, 0xa9, 0x6c,
	0x74, 0x8b, 0x04, 0xf7, 0x1b, 0x66, 0xbe, 0x9b, 0x53, 0x06, 0x27, 0xb2, 0x73, 0x03, 0x51, 0x38,
	0x00, 0xfe, 0x75, 0x86, 0x2d, 0x8d, 0xcd, 0xa6, 0xb7, 0xb0, 0x12, 0x0c, 0x1e, 0x66, 0x25, 0x68,
	0x26, 0xf1, 0xce, 0xe2, 0x48, 0xbc, 0xfc, 0x2f, 0x33, 0x6c, 0x69, 0xb4, 0xcd, 0x88, 0xdb, 0x18,
	0x9f, 0x7b, 0xf8, 0x6d, 0xaf, 0x33, 0x16, 0x09, 0x74, 0x16, 0x04, 0x34, 0xb3, 0xf9, 0x0e, 0x75,
	0x16, 0x9f, 0x27, 0xcd, 0x44, 0xbe, 0xc1, 0x16, 0x01, 0x75, 0x9c, 0xa5, 0x31, 0x81, 0xde, 0x46,
	0xd0, 0xbc, 0xcf, 0x93, 0x3b, 0x59, 0x1a, 0x23, 0x66, 0x93, 0x9d, 0x01, 0x4c, 0x75, 0x12, 0x08,
	0xbb, 0x83, 0x30, 0xf0, 0x50, 0x3e, 0x0e, 0x10, 0xb9, 0xc5, 0xce, 0xd2, 0x14, 0xa3, 0x13, 0x73,
	0x22, 0x73, 0x67, 0x32, 0x67, 0xc2, 0x50, 0xec, 0x62, 0xd6, 0xad, 0xe0, 0x24, 0x03, 0x9a, 0xc3,
	0x52, 0xc1, 0x77, 0xd8, 0xfa, 0x14, 0x3c, 0xdd, 0x76, 0x99, 0x67, 0xa9, 0x89, 0x86, 0xe2, 0x1d,
	0xcc, 0xb8, 0x4b, 0x13, 0x64, 0xbc, 0xfc, 0x87, 0x88, 0x81, 0xb5, 0xc2, 0x28, 0xdc, 0x5a, 0xeb,
	0xbb, 0xeb, 0x33, 0x9b, 0x2b, 0x9d, 0x85, 0xd4, 0xab, 0x91, 0xb5, 0x02, 0xaa, 0x59, 0xeb, 0x1e,
	0xad, 0x35, 0xf5, 0xaa, 0xbd, 0x56, 0x1c, 0xaa, 0xdb, 0x6b, 0xbd, 0x4b, 0x6b, 0x4d, 0xbd, 0x6a,
	0xaf, 0x15, 0x6a, 0x82, 0xb1, 0x88, 0x02, 0x86, 0xb1, 0x41, 0xbb, 0x81, 0x4a, 0xc5, 0x3e, 0xa2,
	0x79, 0xa9, 0xdb, 0xf3, 0x6a, 0xb7, 0xd4, 0x00, 0x03, 0x90, 0x4e, 0x27, 0x4e, 0xfb, 0xe3, 0x86,
	0x71, 0x40, 0x8c, 0xd4, 0xab, 0x0e, 0xa9, 0x6a, 0x06, 0xbc, 0x80, 0x5a, 0x3e, 0x94, 0x73, 0x66,
	0xa0, 0xd2, 0x86, 0x79, 0x88, 0xcc, 0xb5, 0xc6, 0xd7, 0x36, 0x21, 0x6a, 0x03, 0x57, 0x99, 0x30,
	0x89, 0x4c, 0xd2, 0x2c, 0x8b, 0x65, 0xae, 0x22, 0x63, 0x7b, 0x0d, 0xf9, 0x1b, 0x48, 0x3e, 0x6f,
	0x92, 0x1d, 0x50, 0x1f, 0xa2, 0xb6, 0x26, 0x5e, 0x67, 0x17, 0x0d, 0xdc, 0xfa, 0xe0, 0x94, 0xf5,
	0x13, 0xd4, 0x0e, 0xd5, 0x2f, 0x93, 0x74, 0x08, 0x30, 0x46, 0x7e, 0x91, 0x9d, 0x57, 0xf1, 0x47,
	0x70, 0x1c, 0xc0, 0x31, 0x01, 0xc6, 0x50, 0x69, 0xbb, 0x4e, 0x1c, 0x21, 0x6f, 0x45, 0xc5, 0x1f,
	0x1d, 0x05, 0xd5, 0xdb, 0xb5, 0x26, 0xec, 0x17, 0xfd, 0xfd, 0xae, 0xe3, 0x5b, 0xec, 0x5c, 0xcd,
	0x80, 0xfb, 0x56, 0x11, 0xee, 0xd1, 0xd3, 0xb0, 0x24, 0xdc, 0x55, 0x27, 0x35, 0xfe, 0x6c, 0x85,
	0xef, 0xe9, 0xa6, 0x6f, 0xbe, 0x47, 0x89, 0x56, 0xc2, 0x7b, 0xda, 0x35, 0x85, 0x5f, 0xd4, 0xf6,
	0x4b, 0xdb, 0xf0, 0xdc, 0xe9, 0x1b, 0xdb, 0x13, 0xef, 0xa3, 0x8f, 0x73, 0x25, 0x89, 0x1c, 0xec,
	0x90, 0x0e, 0xd2, 0x81, 0x46, 0x68, 0x60, 0x78, 0x99, 0x14, 0x69, 0x2a, 0x3e, 0xa0, 0x74, 0x20,
	0xf9, 0x7e, 0xd7, 0xf9, 0x9d, 0x22, 0x4d, 0xf9, 0x3a, 0x5b, 0x50, 0x1e, 0x4f, 0x29, 0xca, 0x0a,
	0x1b, 0xc4, 0x37, 0xa9, 0x4b, 0x2a, 0xbf, 0xe7, 0xd5, 0x4d, 0x90, 0xc0, 0x10, 0x57, 0x21, 0x8e,
	0x75, 0xf4, 0xb1, 0x2f, 0xfa, 0xe2, 0x43, 0x04, 0x2d, 0x12, 0xa8, 0x14, 0x82, 0xcf, 0xb2, 0x9b,
	0x36, 0xd6, 0xbe, 0x45, 0x3e, 0x49, 0x5e, 0x5b, 0xdc, 0x62, 0x67, 0xdb, 0xc8, 0xca, 0xea, 0xb7,
	0x69, 0x97, 0x1b, 0x70, 0x65, 0xf9, 0x15, 0xb6, 0xaa, 0xbc, 0x8c, 0x23, 0xd9, 0x35, 0x01, 0xa6,
	0xd6, 0x96, 0x83, 0xef, 0x20, 0xe7, 0xac, 0xf2, 0xb7, 0xa2, 0x1b, 0xa4, 0xac, 0xbd, 0x7c, 0x09,
	0x1b, 0x71, 0x6c, 0x55, 0x0b, 0xfe, 0xdd, 0x2a, 0xf0, 0x5b, 0x56, 0xd5, 0xc0, 0x27, 0x19, 0xc3,
	0xfe, 0x4e, 0x90, 0xef, 0x21, 0x64, 0x0e, 0x24, 0xa4, 0x7e, 0x96, 0xad, 0x58, 0x28, 0x66, 0xa9,
	0x6c, 0xa1, 0x24, 0x7d, 0x00, 0x21, 0xc5, 0x76, 0x8d, 0xbd, 0xc2, 0x96, 0xe1, 0x8d, 0xdf, 0x46,
	0x7e, 0x9f, 0x5c, 0x82, 0x78, 0x04, 0x87, 0x63, 0x77, 0x0b, 0xa7, 0x08, 0x07, 0xe2, 0x06, 0xf7,
	0x02, 0xab, 0x9a, 0x34, 0x25, 0x71, 0xa2, 0x22, 0xed, 0x45, 0x97, 0x36, 0xaa, 0xd4, 0xec, 0xd6,
	0x0a, 0x4c, 0x17, 0xda, 0x1d, 0xba, 0x3a, 0x29, 0xbc, 0x2b, 0x52, 0x6d, 0x7b, 0xe1, 0x58, 0x44,
	0x65, 0xba, 0xc0, 0x06, 0xe1, 0xcd, 0xd9, 0x33, 0x3e, 0xec, 0xa1, 0x8e, 0xc6, 0xb8, 0xa4, 0x4e,
	0xc7, 0xb8, 0x1a, 0xe3, 0x92, 0x2a, 0x0f, 0xa1, 0x04, 0x29, 0x1f, 0x24, 0xa0, 0xb0, 0xb6, 0xe8,
	0xb2, 0x04, 0x29, 0x1f, 0xf6, 0x7d, 0x82, 0x85, 0x65, 0x8d, 0xcd, 0xd6, 0xea, 0x04, 0xd5, 0xa7,
	0x6d, 0xa9, 0xfa, 0x0a, 0x3b, 0x37, 0xf6, 0xde, 0x4a, 0x4d, 0xdf, 0x04, 0xd1, 0xa3, 0xd3, 0x1b,
	0xd5, 0xed, 0x81, 0x8a, 0x5f, 0x63, 0x62, 0x8c, 0x12, 0x8e, 0xa1, 0xc6, 0x64, 0x69, 0x2c, 0x8e,
	0xe9, 0x1a, 0x8f, 0xea, 0xef, 0x55, 0x6a, 0xfe, 0x3a, 0x5b, 0x9b, 0xe6, 0x4d, 0xde, 0x57, 0xce,
	0x0a, 0x43, 0x93, 0xc4, 0x14, 0x97, 0x1f, 0x28, 0x67, 0xf9, 0xdb, 0x6c, 0xbd, 0xe7, 0x54, 0xa4,
	0x93, 0x22, 0x95, 0xfe, 0xb8, 0x08, 0x71, 0x76, 0x1f, 0xe6, 0xd5, 0xa0, 0x2d, 0xc5, 0x00, 0x8b,
	0xfb, 0x88, 0x66, 0x80, 0x0a, 0x77, 0x54, 0xc2, 0x3a, 0x15, 0x0a, 0x97, 0xfc, 0x2a, 0x5b, 0x9d,
	0x34, 0xe4, 0x83, 0x0a, 0x5a, 0x7c, 0x8c, 0x9d, 0xe1, 0xfc, 0x38, 0xff, 0x08, 0x94, 0xfc, 0xcf,
	0x33, 0x6c, 0xae, 0x79, 0x40, 0xa4, 0xf8, 0xd8, 0x29, 0x3e, 0x97, 0x07, 0x44, 0x67, 0xb6, 0x7a,
	0xa4, 0x41, 0x55, 0x0d, 0x90, 0x08, 0x55, 0xc7, 0xa3, 0xfd, 0x74, 0x5a, 0x45, 0xc7, 0x3a, 0x16,
	0x7d, 0xda, 0x52, 0x44, 0x50, 0xaf, 0xc3, 0xfd, 0xec, 0x90, 0x9a, 0x3f, 0xc7, 0xb8, 0xcd, 0xac,
	0xf4, 0x3a, 0x4d, 0x5a, 0x37, 0xd1, 0x56, 0x17, 0xc8, 0x1e, 0xe9, 0x34, 0x69, 0x17, 0x1b, 0xa8,
	0xa3, 0x80, 0xab, 0xb2, 0x31, 0xa3, 0x99, 0xbc, 0xaf, 0x4e, 0xf6, 0xbc, 0x6a, 0x25, 0x64, 0x85,
	0xa3, 0x54, 0xca, 0x29, 0x21, 0x09, 0x45, 0x29, 0xb4, 0xc9, 0xce, 0x54, 0x98, 0x50, 0xa5, 0xce,
	0x27, 0x54, 0x90, 0x08, 0x76, 0xaf, 0xca, 0x98, 0x2f, 0xe3, 0x9c, 0x8c, 0x48, 0x48, 0x12, 0xe8,
	0x19, 0xf8, 0x20, 0x76, 0x54, 0x97, 0x09, 0xfd, 0x01, 0x69, 0xe0, 0x65, 0xcc, 0x5f, 0x60, 0x67,
	0x2b, 0x82, 0xe9, 0xd9, 0xcc, 0x69, 0xca, 0x0c, 0x4f, 0x65, 0x9f, 0xf0, 0xbb, 0xa8, 0xc0, 0x64,
	0x78, 0x8e, 0xbe, 0x8b, 0x52, 0x17, 0x85, 0x99, 0x18, 0xd1, 0xa1, 0xfe, 0x88, 0xba, 0x07, 0x2d,
	0xd4, 0x6b, 0x6a, 0xf7, 0xad, 0x60, 0x4a, 0xdb, 0xb4, 0xc2, 0xa2, 0xbe, 0xf5, 0xb5, 0x71, 0x5a,
	0xe7, 0x24, 0x81, 0xb6, 0x78, 0x30, 0x49, 0xa0, 0x4d, 0x9e, 0x24, 0xd0, 0x78, 0x7f, 0x7f, 0x92,
	0x40, 0x83, 0x7d, 0x6b, 0xb9, 0x4d, 0xfc, 0x4e, 0x9c, 0xb4, 0x97, 0x5b, 0x2f, 0xc0, 0xc1, 0x63,
	0x32, 0xca, 0x6c, 0xd0, 0x27, 0x81, 0x3e, 0x5a, 0x0f, 0xe9, 0x63, 0x4f, 0x29, 0xdb, 0x57, 0x7d,
	0x0d, 0x45, 0xd5, 0xdb, 0x7e, 0x2e, 0x83, 0x53, 0x79, 0x7d, 0xd2, 0x3f, 0xc0, 0xed, 0x5e, 0x06,
	0xc5, 0x3d, 0xa7, 0xf2, 0xea, 0xac, 0x39, 0x7b, 0xb4, 0x88, 0xfa, 0xb9, 0xf8, 0x14, 0xd5, 0xf8,
	0x1b, 0xce, 0x16, 0xfe, 0x36, 0x09, 0xe9, 0x83, 0xf8, 0x21, 0x7d, 0xa2, 0x02, 0x79, 0x95, 0x86,
	0x3e, 0xf0, 0xa7, 0xd9, 0x22, 0x22, 0x07, 0xca, 0x19, 0xfc, 0x52, 0xf4, 0x23, 0x1a, 0xb1, 0x40,
	0xf8, 0x7e, 0x29, 0x83, 0x16, 0x80, 0xa0, 0x58, 0xa7, 0x6a, 0x28, 0x7e, 0x4c, 0x2d, 0x00, 0x24,
	0xb7, 0x40, 0xc0, 0x5f, 0x63, 0xa2, 0x6f, 0x22, 0x97, 0xa5, 0x59, 0x96, 0x4b, 0x35, 0xc8, 0x4c,
	0x8c, 0x9f, 0xc5, 0xf0, 0xbb, 0xc7, 0x4f, 0xca, 0x77, 0x4d, 0xa5, 0xdf, 0xae, 0xd4, 0xf8, 0x05,
	0xe4, 0x3a, 0x5b, 0x9b, 0xc6, 0x24, 0x3f, 0x3f, 0x9d, 0x29, 0xdf, 0x53, 0x13, 0x5c, 0x72, 0xfb,
	0x26, 0xbb, 0x38, 0x8d, 0xac, 0xa2, 0x60, 0x06, 0x5a, 0xfc, 0x6c, 0xa6, 0xfc, 0x00, 0x3b, 0xc1,
	0xde, 0x46, 0x00, 0xbf, 0xc3, 0xd6, 0x1f, 0xe8, 0x5b, 0xea, 0x93, 0xdc, 0xb8, 0xa1, 0xf8, 0xf9,
	0x4c, 0xf9, 0xa0, 0x99, 0x1e, 0xc2, 0x6d, 0x44, 0xf1, 0x67, 0x60, 0x02, 0x8d, 0x65, 0xfd, 0x71,
	0x4d, 0xfc, 0x82, 0x7c, 0x2f, 0xa4, 0x3e, 0xbe, 0x59, 0x09, 0xf9, 0x15, 0x98, 0x66, 0x63, 0xe9,
	0x74, 0xcf, 0xf8, 0xa0, 0x9d, 0x8e, 0xc5, 0x2f, 0x09, 0x06, 0xe4, 0x4e, 0x2d, 0xe5, 0x97, 0xd8,
	0x1c, 0xe0, 0xba, 0x59, 0x61, 0x63, 0xf1, 0x2b, 0x82, 0xcc, 0xa6, 0x3e, 0xbe, 0x01, 0x02, 0x7e,
	0x95, 0xad, 0xb6, 0x7c, 0x19, 0xfc, 0x5c, 0x30, 0x30, 0x1e, 0x1e, 0x29, 0xbf, 0xa6, 0x60, 0xcf,
	0x37, 0x5e, 0x4d, 0x66, 0x3b, 0xa5, 0x96, 0x6f, 0xb2, 0x65, 0xef, 0x7a, 0x5d, 0x60, 0x26, 0xa6,
	0x57, 0x80, 0xff, 0xdf, 0x90, 0xf1, 0x25, 0x90, 0xdf, 0xac, 0xc5, 0xfc, 0x32, 0x63, 0x88, 0xa4,
	0xc7, 0xf0, 0x67, 0x64, 0x75, 0x0e, 0x44, 0xf4, 0x08, 0xbe, 0xc8, 0x66, 0x51, 0xaf, 0x6d, 0x2c,
	0x7e, 0x4b, 0xda, 0xd3, 0x20, 0xb8, 0x6d, 0x63, 0xbe, 0xce, 0xe6, 0x2b, 0x6e, 0x28, 0xbc, 0xf8,
	0x1d, 0x7d, 0x3f, 0x65, 0x25, 0x39, 0x14, 0x1e, 0x53, 0xdb, 0x49, 0x68, 0x2e, 0x51, 0x90, 0x50,
	0x54, 0x23, 0x95, 0x8b, 0xdf, 0xd7, 0x91, 0x1c, 0xa1, 0xe2, 0x28, 0x4f, 0x6e, 0xaa, 0x9c, 0x22,
	0x49, 0xab, 0x48, 0xfe, 0x50, 0x47, 0x92, 0xb6, 0x23, 0x49, 0x29, 0x92, 0x3f, 0xd6, 0x91, 0xa4,
	0x4d, 0x24, 0x69, 0x1d, 0xc9, 0x9f, 0xea, 0x48, 0xd2, 0x32, 0x92, 0xee, 0xe3, 0xf8, 0x49, 0xf1,
	0xe5, 0xff, 0x06, 0x00, 0x00, 0xff, 0xff, 0x2b, 0xe6, 0x32, 0xb7, 0xd8, 0x1a, 0x00, 0x00,
}
