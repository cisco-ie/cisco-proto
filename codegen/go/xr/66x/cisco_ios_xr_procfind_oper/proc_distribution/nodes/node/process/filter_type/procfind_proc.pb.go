/*
Copyright 2019 Cisco Systems

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: procfind_proc.proto

package cisco_ios_xr_procfind_oper_proc_distribution_nodes_node_process_filter_type

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ProcfindProc_KEYS struct {
	NodeName             string   `protobuf:"bytes,1,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	ProcName             string   `protobuf:"bytes,2,opt,name=proc_name,json=procName,proto3" json:"proc_name,omitempty"`
	FilterType           string   `protobuf:"bytes,3,opt,name=filter_type,json=filterType,proto3" json:"filter_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProcfindProc_KEYS) Reset()         { *m = ProcfindProc_KEYS{} }
func (m *ProcfindProc_KEYS) String() string { return proto.CompactTextString(m) }
func (*ProcfindProc_KEYS) ProtoMessage()    {}
func (*ProcfindProc_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_bd7cb5136ab556a7, []int{0}
}

func (m *ProcfindProc_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProcfindProc_KEYS.Unmarshal(m, b)
}
func (m *ProcfindProc_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProcfindProc_KEYS.Marshal(b, m, deterministic)
}
func (m *ProcfindProc_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProcfindProc_KEYS.Merge(m, src)
}
func (m *ProcfindProc_KEYS) XXX_Size() int {
	return xxx_messageInfo_ProcfindProc_KEYS.Size(m)
}
func (m *ProcfindProc_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_ProcfindProc_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_ProcfindProc_KEYS proto.InternalMessageInfo

func (m *ProcfindProc_KEYS) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

func (m *ProcfindProc_KEYS) GetProcName() string {
	if m != nil {
		return m.ProcName
	}
	return ""
}

func (m *ProcfindProc_KEYS) GetFilterType() string {
	if m != nil {
		return m.FilterType
	}
	return ""
}

type ProcfindProc struct {
	Nodeid               uint32   `protobuf:"varint,50,opt,name=nodeid,proto3" json:"nodeid,omitempty"`
	Nodetype             uint32   `protobuf:"varint,51,opt,name=nodetype,proto3" json:"nodetype,omitempty"`
	Pid                  int32    `protobuf:"zigzag32,52,opt,name=pid,proto3" json:"pid,omitempty"`
	Jid                  int32    `protobuf:"zigzag32,53,opt,name=jid,proto3" json:"jid,omitempty"`
	NumThreads           int32    `protobuf:"zigzag32,54,opt,name=num_threads,json=numThreads,proto3" json:"num_threads,omitempty"`
	Name                 string   `protobuf:"bytes,55,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProcfindProc) Reset()         { *m = ProcfindProc{} }
func (m *ProcfindProc) String() string { return proto.CompactTextString(m) }
func (*ProcfindProc) ProtoMessage()    {}
func (*ProcfindProc) Descriptor() ([]byte, []int) {
	return fileDescriptor_bd7cb5136ab556a7, []int{1}
}

func (m *ProcfindProc) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProcfindProc.Unmarshal(m, b)
}
func (m *ProcfindProc) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProcfindProc.Marshal(b, m, deterministic)
}
func (m *ProcfindProc) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProcfindProc.Merge(m, src)
}
func (m *ProcfindProc) XXX_Size() int {
	return xxx_messageInfo_ProcfindProc.Size(m)
}
func (m *ProcfindProc) XXX_DiscardUnknown() {
	xxx_messageInfo_ProcfindProc.DiscardUnknown(m)
}

var xxx_messageInfo_ProcfindProc proto.InternalMessageInfo

func (m *ProcfindProc) GetNodeid() uint32 {
	if m != nil {
		return m.Nodeid
	}
	return 0
}

func (m *ProcfindProc) GetNodetype() uint32 {
	if m != nil {
		return m.Nodetype
	}
	return 0
}

func (m *ProcfindProc) GetPid() int32 {
	if m != nil {
		return m.Pid
	}
	return 0
}

func (m *ProcfindProc) GetJid() int32 {
	if m != nil {
		return m.Jid
	}
	return 0
}

func (m *ProcfindProc) GetNumThreads() int32 {
	if m != nil {
		return m.NumThreads
	}
	return 0
}

func (m *ProcfindProc) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func init() {
	proto.RegisterType((*ProcfindProc_KEYS)(nil), "cisco_ios_xr_procfind_oper.proc_distribution.nodes.node.process.filter_type.procfind_proc_KEYS")
	proto.RegisterType((*ProcfindProc)(nil), "cisco_ios_xr_procfind_oper.proc_distribution.nodes.node.process.filter_type.procfind_proc")
}

func init() { proto.RegisterFile("procfind_proc.proto", fileDescriptor_bd7cb5136ab556a7) }

var fileDescriptor_bd7cb5136ab556a7 = []byte{
	// 259 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x90, 0x4f, 0x4b, 0x33, 0x31,
	0x10, 0xc6, 0xc9, 0xdb, 0x97, 0x62, 0x47, 0x0a, 0x1a, 0x41, 0x82, 0x1e, 0x5c, 0x3c, 0xed, 0x69,
	0x0f, 0xd6, 0x3f, 0x9f, 0xc0, 0x53, 0xc1, 0xc3, 0xda, 0x8b, 0xa7, 0xb0, 0xdd, 0xa4, 0x38, 0xc5,
	0xcd, 0x84, 0x24, 0x0b, 0xfa, 0x5d, 0xfc, 0xb0, 0x32, 0xb3, 0x52, 0xec, 0x25, 0xcc, 0x3c, 0xbf,
	0xc9, 0xf3, 0x4c, 0x02, 0x17, 0x31, 0x51, 0xbf, 0xc3, 0xe0, 0x2c, 0x17, 0x4d, 0x4c, 0x54, 0x48,
	0xaf, 0x7b, 0xcc, 0x3d, 0x59, 0xa4, 0x6c, 0x3f, 0x93, 0x3d, 0x4c, 0x50, 0xf4, 0x89, 0x27, 0x7a,
	0xeb, 0x30, 0x97, 0x84, 0xdb, 0xb1, 0x20, 0x85, 0x26, 0x90, 0xf3, 0x59, 0x4e, 0x81, 0x3e, 0xe7,
	0x66, 0x87, 0x1f, 0xc5, 0x27, 0x5b, 0xbe, 0xa2, 0xbf, 0x25, 0xd0, 0x47, 0x19, 0x76, 0xfd, 0xfc,
	0xf6, 0xaa, 0xaf, 0x61, 0xc1, 0x37, 0x6c, 0xe8, 0x06, 0x6f, 0x54, 0xa5, 0xea, 0x45, 0x7b, 0xc2,
	0xc2, 0x4b, 0x37, 0x78, 0x86, 0x32, 0x29, 0xf0, 0xdf, 0x04, 0x59, 0x10, 0x78, 0x03, 0xa7, 0x7f,
	0xec, 0xcd, 0x4c, 0x30, 0x4c, 0xd2, 0x86, 0x03, 0xbf, 0x15, 0x2c, 0x8f, 0x12, 0xf5, 0x25, 0xcc,
	0xd9, 0x1b, 0x9d, 0xb9, 0xab, 0x54, 0xbd, 0x6c, 0x7f, 0x3b, 0x7d, 0x05, 0x92, 0x29, 0x3e, 0x2b,
	0x21, 0x87, 0x5e, 0x9f, 0xc1, 0x2c, 0xa2, 0x33, 0xf7, 0x95, 0xaa, 0xcf, 0x5b, 0x2e, 0x59, 0xd9,
	0xa3, 0x33, 0x0f, 0x93, 0xb2, 0x47, 0xc7, 0xab, 0x84, 0x71, 0xb0, 0xe5, 0x3d, 0xf9, 0xce, 0x65,
	0xf3, 0x28, 0x04, 0xc2, 0x38, 0x6c, 0x26, 0x45, 0x6b, 0xf8, 0x2f, 0x6f, 0x78, 0x92, 0x25, 0xa5,
	0xde, 0xce, 0xe5, 0x8f, 0x57, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xf0, 0xf0, 0x15, 0x49, 0x7a,
	0x01, 0x00, 0x00,
}
