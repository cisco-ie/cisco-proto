/*
Copyright 2019 Cisco Systems

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ipv4_rib_edm_route.proto

package cisco_ios_xr_ip_rib_ipv4_oper_rib_stdby_vrfs_vrf_afs_af_safs_saf_ip_rib_route_table_names_ip_rib_route_table_name_protocol_bgp_as_protocol_routes_protocol_route

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Ipv4RibEdmRoute_KEYS struct {
	VrfName              string   `protobuf:"bytes,1,opt,name=vrf_name,json=vrfName,proto3" json:"vrf_name,omitempty"`
	AfName               string   `protobuf:"bytes,2,opt,name=af_name,json=afName,proto3" json:"af_name,omitempty"`
	SafName              string   `protobuf:"bytes,3,opt,name=saf_name,json=safName,proto3" json:"saf_name,omitempty"`
	RouteTableName       string   `protobuf:"bytes,4,opt,name=route_table_name,json=routeTableName,proto3" json:"route_table_name,omitempty"`
	As                   string   `protobuf:"bytes,5,opt,name=as,proto3" json:"as,omitempty"`
	Address              string   `protobuf:"bytes,6,opt,name=address,proto3" json:"address,omitempty"`
	PrefixLength         uint32   `protobuf:"varint,7,opt,name=prefix_length,json=prefixLength,proto3" json:"prefix_length,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Ipv4RibEdmRoute_KEYS) Reset()         { *m = Ipv4RibEdmRoute_KEYS{} }
func (m *Ipv4RibEdmRoute_KEYS) String() string { return proto.CompactTextString(m) }
func (*Ipv4RibEdmRoute_KEYS) ProtoMessage()    {}
func (*Ipv4RibEdmRoute_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_44c1b2f42127243a, []int{0}
}

func (m *Ipv4RibEdmRoute_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Ipv4RibEdmRoute_KEYS.Unmarshal(m, b)
}
func (m *Ipv4RibEdmRoute_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Ipv4RibEdmRoute_KEYS.Marshal(b, m, deterministic)
}
func (m *Ipv4RibEdmRoute_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ipv4RibEdmRoute_KEYS.Merge(m, src)
}
func (m *Ipv4RibEdmRoute_KEYS) XXX_Size() int {
	return xxx_messageInfo_Ipv4RibEdmRoute_KEYS.Size(m)
}
func (m *Ipv4RibEdmRoute_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_Ipv4RibEdmRoute_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_Ipv4RibEdmRoute_KEYS proto.InternalMessageInfo

func (m *Ipv4RibEdmRoute_KEYS) GetVrfName() string {
	if m != nil {
		return m.VrfName
	}
	return ""
}

func (m *Ipv4RibEdmRoute_KEYS) GetAfName() string {
	if m != nil {
		return m.AfName
	}
	return ""
}

func (m *Ipv4RibEdmRoute_KEYS) GetSafName() string {
	if m != nil {
		return m.SafName
	}
	return ""
}

func (m *Ipv4RibEdmRoute_KEYS) GetRouteTableName() string {
	if m != nil {
		return m.RouteTableName
	}
	return ""
}

func (m *Ipv4RibEdmRoute_KEYS) GetAs() string {
	if m != nil {
		return m.As
	}
	return ""
}

func (m *Ipv4RibEdmRoute_KEYS) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Ipv4RibEdmRoute_KEYS) GetPrefixLength() uint32 {
	if m != nil {
		return m.PrefixLength
	}
	return 0
}

type RibEdmNnh struct {
	Type                 string   `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Unknownval           uint32   `protobuf:"varint,2,opt,name=unknownval,proto3" json:"unknownval,omitempty"`
	Address              string   `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	InterfaceIndex       uint32   `protobuf:"varint,4,opt,name=interface_index,json=interfaceIndex,proto3" json:"interface_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RibEdmNnh) Reset()         { *m = RibEdmNnh{} }
func (m *RibEdmNnh) String() string { return proto.CompactTextString(m) }
func (*RibEdmNnh) ProtoMessage()    {}
func (*RibEdmNnh) Descriptor() ([]byte, []int) {
	return fileDescriptor_44c1b2f42127243a, []int{1}
}

func (m *RibEdmNnh) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RibEdmNnh.Unmarshal(m, b)
}
func (m *RibEdmNnh) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RibEdmNnh.Marshal(b, m, deterministic)
}
func (m *RibEdmNnh) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RibEdmNnh.Merge(m, src)
}
func (m *RibEdmNnh) XXX_Size() int {
	return xxx_messageInfo_RibEdmNnh.Size(m)
}
func (m *RibEdmNnh) XXX_DiscardUnknown() {
	xxx_messageInfo_RibEdmNnh.DiscardUnknown(m)
}

var xxx_messageInfo_RibEdmNnh proto.InternalMessageInfo

func (m *RibEdmNnh) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *RibEdmNnh) GetUnknownval() uint32 {
	if m != nil {
		return m.Unknownval
	}
	return 0
}

func (m *RibEdmNnh) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *RibEdmNnh) GetInterfaceIndex() uint32 {
	if m != nil {
		return m.InterfaceIndex
	}
	return 0
}

type RibEdmSrv6Sid struct {
	Sid                  string   `protobuf:"bytes,1,opt,name=sid,proto3" json:"sid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RibEdmSrv6Sid) Reset()         { *m = RibEdmSrv6Sid{} }
func (m *RibEdmSrv6Sid) String() string { return proto.CompactTextString(m) }
func (*RibEdmSrv6Sid) ProtoMessage()    {}
func (*RibEdmSrv6Sid) Descriptor() ([]byte, []int) {
	return fileDescriptor_44c1b2f42127243a, []int{2}
}

func (m *RibEdmSrv6Sid) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RibEdmSrv6Sid.Unmarshal(m, b)
}
func (m *RibEdmSrv6Sid) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RibEdmSrv6Sid.Marshal(b, m, deterministic)
}
func (m *RibEdmSrv6Sid) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RibEdmSrv6Sid.Merge(m, src)
}
func (m *RibEdmSrv6Sid) XXX_Size() int {
	return xxx_messageInfo_RibEdmSrv6Sid.Size(m)
}
func (m *RibEdmSrv6Sid) XXX_DiscardUnknown() {
	xxx_messageInfo_RibEdmSrv6Sid.DiscardUnknown(m)
}

var xxx_messageInfo_RibEdmSrv6Sid proto.InternalMessageInfo

func (m *RibEdmSrv6Sid) GetSid() string {
	if m != nil {
		return m.Sid
	}
	return ""
}

type Ipv4RibEdmPathItem struct {
	Address                      string           `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	InformationSource            string           `protobuf:"bytes,2,opt,name=information_source,json=informationSource,proto3" json:"information_source,omitempty"`
	V6Nexthop                    string           `protobuf:"bytes,3,opt,name=v6_nexthop,json=v6Nexthop,proto3" json:"v6_nexthop,omitempty"`
	V6InformationSource          string           `protobuf:"bytes,4,opt,name=v6_information_source,json=v6InformationSource,proto3" json:"v6_information_source,omitempty"`
	InterfaceName                string           `protobuf:"bytes,5,opt,name=interface_name,json=interfaceName,proto3" json:"interface_name,omitempty"`
	Metric                       uint32           `protobuf:"varint,6,opt,name=metric,proto3" json:"metric,omitempty"`
	LoadMetric                   uint32           `protobuf:"varint,7,opt,name=load_metric,json=loadMetric,proto3" json:"load_metric,omitempty"`
	Flags64                      uint64           `protobuf:"varint,8,opt,name=flags64,proto3" json:"flags64,omitempty"`
	Flags                        uint32           `protobuf:"varint,9,opt,name=flags,proto3" json:"flags,omitempty"`
	PrivateFlags                 uint32           `protobuf:"varint,10,opt,name=private_flags,json=privateFlags,proto3" json:"private_flags,omitempty"`
	Looped                       bool             `protobuf:"varint,11,opt,name=looped,proto3" json:"looped,omitempty"`
	NextHopTableId               uint32           `protobuf:"varint,12,opt,name=next_hop_table_id,json=nextHopTableId,proto3" json:"next_hop_table_id,omitempty"`
	NextHopVrfName               string           `protobuf:"bytes,13,opt,name=next_hop_vrf_name,json=nextHopVrfName,proto3" json:"next_hop_vrf_name,omitempty"`
	NextHopTableName             string           `protobuf:"bytes,14,opt,name=next_hop_table_name,json=nextHopTableName,proto3" json:"next_hop_table_name,omitempty"`
	NextHopAfi                   uint32           `protobuf:"varint,15,opt,name=next_hop_afi,json=nextHopAfi,proto3" json:"next_hop_afi,omitempty"`
	NextHopSafi                  uint32           `protobuf:"varint,16,opt,name=next_hop_safi,json=nextHopSafi,proto3" json:"next_hop_safi,omitempty"`
	RouteLabel                   uint32           `protobuf:"varint,17,opt,name=route_label,json=routeLabel,proto3" json:"route_label,omitempty"`
	TunnelId                     uint32           `protobuf:"varint,18,opt,name=tunnel_id,json=tunnelId,proto3" json:"tunnel_id,omitempty"`
	Pathid                       uint32           `protobuf:"varint,19,opt,name=pathid,proto3" json:"pathid,omitempty"`
	BackupPathid                 uint32           `protobuf:"varint,20,opt,name=backup_pathid,json=backupPathid,proto3" json:"backup_pathid,omitempty"`
	RefCntOfBackup               uint32           `protobuf:"varint,21,opt,name=ref_cnt_of_backup,json=refCntOfBackup,proto3" json:"ref_cnt_of_backup,omitempty"`
	NumberOfExtendedCommunities  uint32           `protobuf:"varint,22,opt,name=number_of_extended_communities,json=numberOfExtendedCommunities,proto3" json:"number_of_extended_communities,omitempty"`
	MvpnPresent                  bool             `protobuf:"varint,23,opt,name=mvpn_present,json=mvpnPresent,proto3" json:"mvpn_present,omitempty"`
	PathRtPresent                bool             `protobuf:"varint,24,opt,name=path_rt_present,json=pathRtPresent,proto3" json:"path_rt_present,omitempty"`
	VrfImportRtPresent           bool             `protobuf:"varint,25,opt,name=vrf_import_rt_present,json=vrfImportRtPresent,proto3" json:"vrf_import_rt_present,omitempty"`
	SourceAsrtPresent            bool             `protobuf:"varint,26,opt,name=source_asrt_present,json=sourceAsrtPresent,proto3" json:"source_asrt_present,omitempty"`
	SourceRdPresent              bool             `protobuf:"varint,27,opt,name=source_rd_present,json=sourceRdPresent,proto3" json:"source_rd_present,omitempty"`
	SegmentedNexthopPresent      bool             `protobuf:"varint,28,opt,name=segmented_nexthop_present,json=segmentedNexthopPresent,proto3" json:"segmented_nexthop_present,omitempty"`
	NumberOfNnh                  uint32           `protobuf:"varint,29,opt,name=number_of_nnh,json=numberOfNnh,proto3" json:"number_of_nnh,omitempty"`
	NextNextHop                  []*RibEdmNnh     `protobuf:"bytes,30,rep,name=next_next_hop,json=nextNextHop,proto3" json:"next_next_hop,omitempty"`
	NextHopId                    uint32           `protobuf:"varint,31,opt,name=next_hop_id,json=nextHopId,proto3" json:"next_hop_id,omitempty"`
	NextHopIdRefcount            uint32           `protobuf:"varint,32,opt,name=next_hop_id_refcount,json=nextHopIdRefcount,proto3" json:"next_hop_id_refcount,omitempty"`
	OspfAreaId                   string           `protobuf:"bytes,33,opt,name=ospf_area_id,json=ospfAreaId,proto3" json:"ospf_area_id,omitempty"`
	RemoteBackupAddr             []string         `protobuf:"bytes,34,rep,name=remote_backup_addr,json=remoteBackupAddr,proto3" json:"remote_backup_addr,omitempty"`
	HasLabelstk                  bool             `protobuf:"varint,35,opt,name=has_labelstk,json=hasLabelstk,proto3" json:"has_labelstk,omitempty"`
	NumLabels                    uint32           `protobuf:"varint,36,opt,name=num_labels,json=numLabels,proto3" json:"num_labels,omitempty"`
	Labelstk                     []uint32         `protobuf:"varint,37,rep,packed,name=labelstk,proto3" json:"labelstk,omitempty"`
	BindingLabel                 uint32           `protobuf:"varint,38,opt,name=binding_label,json=bindingLabel,proto3" json:"binding_label,omitempty"`
	NhidFeid                     uint64           `protobuf:"varint,39,opt,name=nhid_feid,json=nhidFeid,proto3" json:"nhid_feid,omitempty"`
	MplsFeid                     uint64           `protobuf:"varint,40,opt,name=mpls_feid,json=mplsFeid,proto3" json:"mpls_feid,omitempty"`
	HasVxlanNetworkId            bool             `protobuf:"varint,41,opt,name=has_vxlan_network_id,json=hasVxlanNetworkId,proto3" json:"has_vxlan_network_id,omitempty"`
	VxlanNetworkId               uint32           `protobuf:"varint,42,opt,name=vxlan_network_id,json=vxlanNetworkId,proto3" json:"vxlan_network_id,omitempty"`
	HasXcid                      bool             `protobuf:"varint,43,opt,name=has_xcid,json=hasXcid,proto3" json:"has_xcid,omitempty"`
	Xcid                         uint32           `protobuf:"varint,44,opt,name=xcid,proto3" json:"xcid,omitempty"`
	HasSpanDiagInterface         bool             `protobuf:"varint,45,opt,name=has_span_diag_interface,json=hasSpanDiagInterface,proto3" json:"has_span_diag_interface,omitempty"`
	SpanDiagInterface            string           `protobuf:"bytes,46,opt,name=span_diag_interface,json=spanDiagInterface,proto3" json:"span_diag_interface,omitempty"`
	HasSubscriberParentInterface bool             `protobuf:"varint,47,opt,name=has_subscriber_parent_interface,json=hasSubscriberParentInterface,proto3" json:"has_subscriber_parent_interface,omitempty"`
	SubscriberParentInterface    string           `protobuf:"bytes,48,opt,name=subscriber_parent_interface,json=subscriberParentInterface,proto3" json:"subscriber_parent_interface,omitempty"`
	InterfaceIndexPresent        bool             `protobuf:"varint,49,opt,name=interface_index_present,json=interfaceIndexPresent,proto3" json:"interface_index_present,omitempty"`
	InterfaceIndexAttribute      uint32           `protobuf:"varint,50,opt,name=interface_index_attribute,json=interfaceIndexAttribute,proto3" json:"interface_index_attribute,omitempty"`
	NumberOfSrv6Sids             uint32           `protobuf:"varint,51,opt,name=number_of_srv6_sids,json=numberOfSrv6Sids,proto3" json:"number_of_srv6_sids,omitempty"`
	Srv6Sid                      []*RibEdmSrv6Sid `protobuf:"bytes,52,rep,name=srv6_sid,json=srv6Sid,proto3" json:"srv6_sid,omitempty"`
	HasSrv6TransitFunction       bool             `protobuf:"varint,53,opt,name=has_srv6_transit_function,json=hasSrv6TransitFunction,proto3" json:"has_srv6_transit_function,omitempty"`
	Srv6TransitFunction          string           `protobuf:"bytes,54,opt,name=srv6_transit_function,json=srv6TransitFunction,proto3" json:"srv6_transit_function,omitempty"`
	XXX_NoUnkeyedLiteral         struct{}         `json:"-"`
	XXX_unrecognized             []byte           `json:"-"`
	XXX_sizecache                int32            `json:"-"`
}

func (m *Ipv4RibEdmPathItem) Reset()         { *m = Ipv4RibEdmPathItem{} }
func (m *Ipv4RibEdmPathItem) String() string { return proto.CompactTextString(m) }
func (*Ipv4RibEdmPathItem) ProtoMessage()    {}
func (*Ipv4RibEdmPathItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_44c1b2f42127243a, []int{3}
}

func (m *Ipv4RibEdmPathItem) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Ipv4RibEdmPathItem.Unmarshal(m, b)
}
func (m *Ipv4RibEdmPathItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Ipv4RibEdmPathItem.Marshal(b, m, deterministic)
}
func (m *Ipv4RibEdmPathItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ipv4RibEdmPathItem.Merge(m, src)
}
func (m *Ipv4RibEdmPathItem) XXX_Size() int {
	return xxx_messageInfo_Ipv4RibEdmPathItem.Size(m)
}
func (m *Ipv4RibEdmPathItem) XXX_DiscardUnknown() {
	xxx_messageInfo_Ipv4RibEdmPathItem.DiscardUnknown(m)
}

var xxx_messageInfo_Ipv4RibEdmPathItem proto.InternalMessageInfo

func (m *Ipv4RibEdmPathItem) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Ipv4RibEdmPathItem) GetInformationSource() string {
	if m != nil {
		return m.InformationSource
	}
	return ""
}

func (m *Ipv4RibEdmPathItem) GetV6Nexthop() string {
	if m != nil {
		return m.V6Nexthop
	}
	return ""
}

func (m *Ipv4RibEdmPathItem) GetV6InformationSource() string {
	if m != nil {
		return m.V6InformationSource
	}
	return ""
}

func (m *Ipv4RibEdmPathItem) GetInterfaceName() string {
	if m != nil {
		return m.InterfaceName
	}
	return ""
}

func (m *Ipv4RibEdmPathItem) GetMetric() uint32 {
	if m != nil {
		return m.Metric
	}
	return 0
}

func (m *Ipv4RibEdmPathItem) GetLoadMetric() uint32 {
	if m != nil {
		return m.LoadMetric
	}
	return 0
}

func (m *Ipv4RibEdmPathItem) GetFlags64() uint64 {
	if m != nil {
		return m.Flags64
	}
	return 0
}

func (m *Ipv4RibEdmPathItem) GetFlags() uint32 {
	if m != nil {
		return m.Flags
	}
	return 0
}

func (m *Ipv4RibEdmPathItem) GetPrivateFlags() uint32 {
	if m != nil {
		return m.PrivateFlags
	}
	return 0
}

func (m *Ipv4RibEdmPathItem) GetLooped() bool {
	if m != nil {
		return m.Looped
	}
	return false
}

func (m *Ipv4RibEdmPathItem) GetNextHopTableId() uint32 {
	if m != nil {
		return m.NextHopTableId
	}
	return 0
}

func (m *Ipv4RibEdmPathItem) GetNextHopVrfName() string {
	if m != nil {
		return m.NextHopVrfName
	}
	return ""
}

func (m *Ipv4RibEdmPathItem) GetNextHopTableName() string {
	if m != nil {
		return m.NextHopTableName
	}
	return ""
}

func (m *Ipv4RibEdmPathItem) GetNextHopAfi() uint32 {
	if m != nil {
		return m.NextHopAfi
	}
	return 0
}

func (m *Ipv4RibEdmPathItem) GetNextHopSafi() uint32 {
	if m != nil {
		return m.NextHopSafi
	}
	return 0
}

func (m *Ipv4RibEdmPathItem) GetRouteLabel() uint32 {
	if m != nil {
		return m.RouteLabel
	}
	return 0
}

func (m *Ipv4RibEdmPathItem) GetTunnelId() uint32 {
	if m != nil {
		return m.TunnelId
	}
	return 0
}

func (m *Ipv4RibEdmPathItem) GetPathid() uint32 {
	if m != nil {
		return m.Pathid
	}
	return 0
}

func (m *Ipv4RibEdmPathItem) GetBackupPathid() uint32 {
	if m != nil {
		return m.BackupPathid
	}
	return 0
}

func (m *Ipv4RibEdmPathItem) GetRefCntOfBackup() uint32 {
	if m != nil {
		return m.RefCntOfBackup
	}
	return 0
}

func (m *Ipv4RibEdmPathItem) GetNumberOfExtendedCommunities() uint32 {
	if m != nil {
		return m.NumberOfExtendedCommunities
	}
	return 0
}

func (m *Ipv4RibEdmPathItem) GetMvpnPresent() bool {
	if m != nil {
		return m.MvpnPresent
	}
	return false
}

func (m *Ipv4RibEdmPathItem) GetPathRtPresent() bool {
	if m != nil {
		return m.PathRtPresent
	}
	return false
}

func (m *Ipv4RibEdmPathItem) GetVrfImportRtPresent() bool {
	if m != nil {
		return m.VrfImportRtPresent
	}
	return false
}

func (m *Ipv4RibEdmPathItem) GetSourceAsrtPresent() bool {
	if m != nil {
		return m.SourceAsrtPresent
	}
	return false
}

func (m *Ipv4RibEdmPathItem) GetSourceRdPresent() bool {
	if m != nil {
		return m.SourceRdPresent
	}
	return false
}

func (m *Ipv4RibEdmPathItem) GetSegmentedNexthopPresent() bool {
	if m != nil {
		return m.SegmentedNexthopPresent
	}
	return false
}

func (m *Ipv4RibEdmPathItem) GetNumberOfNnh() uint32 {
	if m != nil {
		return m.NumberOfNnh
	}
	return 0
}

func (m *Ipv4RibEdmPathItem) GetNextNextHop() []*RibEdmNnh {
	if m != nil {
		return m.NextNextHop
	}
	return nil
}

func (m *Ipv4RibEdmPathItem) GetNextHopId() uint32 {
	if m != nil {
		return m.NextHopId
	}
	return 0
}

func (m *Ipv4RibEdmPathItem) GetNextHopIdRefcount() uint32 {
	if m != nil {
		return m.NextHopIdRefcount
	}
	return 0
}

func (m *Ipv4RibEdmPathItem) GetOspfAreaId() string {
	if m != nil {
		return m.OspfAreaId
	}
	return ""
}

func (m *Ipv4RibEdmPathItem) GetRemoteBackupAddr() []string {
	if m != nil {
		return m.RemoteBackupAddr
	}
	return nil
}

func (m *Ipv4RibEdmPathItem) GetHasLabelstk() bool {
	if m != nil {
		return m.HasLabelstk
	}
	return false
}

func (m *Ipv4RibEdmPathItem) GetNumLabels() uint32 {
	if m != nil {
		return m.NumLabels
	}
	return 0
}

func (m *Ipv4RibEdmPathItem) GetLabelstk() []uint32 {
	if m != nil {
		return m.Labelstk
	}
	return nil
}

func (m *Ipv4RibEdmPathItem) GetBindingLabel() uint32 {
	if m != nil {
		return m.BindingLabel
	}
	return 0
}

func (m *Ipv4RibEdmPathItem) GetNhidFeid() uint64 {
	if m != nil {
		return m.NhidFeid
	}
	return 0
}

func (m *Ipv4RibEdmPathItem) GetMplsFeid() uint64 {
	if m != nil {
		return m.MplsFeid
	}
	return 0
}

func (m *Ipv4RibEdmPathItem) GetHasVxlanNetworkId() bool {
	if m != nil {
		return m.HasVxlanNetworkId
	}
	return false
}

func (m *Ipv4RibEdmPathItem) GetVxlanNetworkId() uint32 {
	if m != nil {
		return m.VxlanNetworkId
	}
	return 0
}

func (m *Ipv4RibEdmPathItem) GetHasXcid() bool {
	if m != nil {
		return m.HasXcid
	}
	return false
}

func (m *Ipv4RibEdmPathItem) GetXcid() uint32 {
	if m != nil {
		return m.Xcid
	}
	return 0
}

func (m *Ipv4RibEdmPathItem) GetHasSpanDiagInterface() bool {
	if m != nil {
		return m.HasSpanDiagInterface
	}
	return false
}

func (m *Ipv4RibEdmPathItem) GetSpanDiagInterface() string {
	if m != nil {
		return m.SpanDiagInterface
	}
	return ""
}

func (m *Ipv4RibEdmPathItem) GetHasSubscriberParentInterface() bool {
	if m != nil {
		return m.HasSubscriberParentInterface
	}
	return false
}

func (m *Ipv4RibEdmPathItem) GetSubscriberParentInterface() string {
	if m != nil {
		return m.SubscriberParentInterface
	}
	return ""
}

func (m *Ipv4RibEdmPathItem) GetInterfaceIndexPresent() bool {
	if m != nil {
		return m.InterfaceIndexPresent
	}
	return false
}

func (m *Ipv4RibEdmPathItem) GetInterfaceIndexAttribute() uint32 {
	if m != nil {
		return m.InterfaceIndexAttribute
	}
	return 0
}

func (m *Ipv4RibEdmPathItem) GetNumberOfSrv6Sids() uint32 {
	if m != nil {
		return m.NumberOfSrv6Sids
	}
	return 0
}

func (m *Ipv4RibEdmPathItem) GetSrv6Sid() []*RibEdmSrv6Sid {
	if m != nil {
		return m.Srv6Sid
	}
	return nil
}

func (m *Ipv4RibEdmPathItem) GetHasSrv6TransitFunction() bool {
	if m != nil {
		return m.HasSrv6TransitFunction
	}
	return false
}

func (m *Ipv4RibEdmPathItem) GetSrv6TransitFunction() string {
	if m != nil {
		return m.Srv6TransitFunction
	}
	return ""
}

type Ipv4RibEdmPathEntry struct {
	Ipv4RibEdmPath       []*Ipv4RibEdmPathItem `protobuf:"bytes,1,rep,name=ipv4_rib_edm_path,json=ipv4RibEdmPath,proto3" json:"ipv4_rib_edm_path,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *Ipv4RibEdmPathEntry) Reset()         { *m = Ipv4RibEdmPathEntry{} }
func (m *Ipv4RibEdmPathEntry) String() string { return proto.CompactTextString(m) }
func (*Ipv4RibEdmPathEntry) ProtoMessage()    {}
func (*Ipv4RibEdmPathEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_44c1b2f42127243a, []int{4}
}

func (m *Ipv4RibEdmPathEntry) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Ipv4RibEdmPathEntry.Unmarshal(m, b)
}
func (m *Ipv4RibEdmPathEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Ipv4RibEdmPathEntry.Marshal(b, m, deterministic)
}
func (m *Ipv4RibEdmPathEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ipv4RibEdmPathEntry.Merge(m, src)
}
func (m *Ipv4RibEdmPathEntry) XXX_Size() int {
	return xxx_messageInfo_Ipv4RibEdmPathEntry.Size(m)
}
func (m *Ipv4RibEdmPathEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_Ipv4RibEdmPathEntry.DiscardUnknown(m)
}

var xxx_messageInfo_Ipv4RibEdmPathEntry proto.InternalMessageInfo

func (m *Ipv4RibEdmPathEntry) GetIpv4RibEdmPath() []*Ipv4RibEdmPathItem {
	if m != nil {
		return m.Ipv4RibEdmPath
	}
	return nil
}

type Ipv4RibEdmRoute struct {
	Prefix               string               `protobuf:"bytes,50,opt,name=prefix,proto3" json:"prefix,omitempty"`
	PrefixLengthXr       uint32               `protobuf:"varint,51,opt,name=prefix_length_xr,json=prefixLengthXr,proto3" json:"prefix_length_xr,omitempty"`
	RouteVersion         uint32               `protobuf:"varint,52,opt,name=route_version,json=routeVersion,proto3" json:"route_version,omitempty"`
	ProtocolId           uint32               `protobuf:"varint,53,opt,name=protocol_id,json=protocolId,proto3" json:"protocol_id,omitempty"`
	ProtocolName         string               `protobuf:"bytes,54,opt,name=protocol_name,json=protocolName,proto3" json:"protocol_name,omitempty"`
	Instance             string               `protobuf:"bytes,55,opt,name=instance,proto3" json:"instance,omitempty"`
	ClientId             uint32               `protobuf:"varint,56,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	RouteType            uint32               `protobuf:"varint,57,opt,name=route_type,json=routeType,proto3" json:"route_type,omitempty"`
	Priority             uint32               `protobuf:"varint,58,opt,name=priority,proto3" json:"priority,omitempty"`
	SvdType              uint32               `protobuf:"varint,59,opt,name=svd_type,json=svdType,proto3" json:"svd_type,omitempty"`
	Flags                uint32               `protobuf:"varint,60,opt,name=flags,proto3" json:"flags,omitempty"`
	ExtendedFlags        uint64               `protobuf:"varint,61,opt,name=extended_flags,json=extendedFlags,proto3" json:"extended_flags,omitempty"`
	Tag                  uint32               `protobuf:"varint,62,opt,name=tag,proto3" json:"tag,omitempty"`
	Distance             uint32               `protobuf:"varint,63,opt,name=distance,proto3" json:"distance,omitempty"`
	DiversionDistance    uint32               `protobuf:"varint,64,opt,name=diversion_distance,json=diversionDistance,proto3" json:"diversion_distance,omitempty"`
	Metric               uint32               `protobuf:"varint,65,opt,name=metric,proto3" json:"metric,omitempty"`
	PathsCount           uint32               `protobuf:"varint,66,opt,name=paths_count,json=pathsCount,proto3" json:"paths_count,omitempty"`
	AttributeIdentity    uint32               `protobuf:"varint,67,opt,name=attribute_identity,json=attributeIdentity,proto3" json:"attribute_identity,omitempty"`
	TrafficIndex         uint32               `protobuf:"varint,68,opt,name=traffic_index,json=trafficIndex,proto3" json:"traffic_index,omitempty"`
	RoutePrecedence      uint32               `protobuf:"varint,69,opt,name=route_precedence,json=routePrecedence,proto3" json:"route_precedence,omitempty"`
	QosGroup             uint32               `protobuf:"varint,70,opt,name=qos_group,json=qosGroup,proto3" json:"qos_group,omitempty"`
	FlowTag              uint32               `protobuf:"varint,71,opt,name=flow_tag,json=flowTag,proto3" json:"flow_tag,omitempty"`
	FwdClass             uint32               `protobuf:"varint,72,opt,name=fwd_class,json=fwdClass,proto3" json:"fwd_class,omitempty"`
	PicCount             uint32               `protobuf:"varint,73,opt,name=pic_count,json=picCount,proto3" json:"pic_count,omitempty"`
	Active               bool                 `protobuf:"varint,74,opt,name=active,proto3" json:"active,omitempty"`
	Diversion            bool                 `protobuf:"varint,75,opt,name=diversion,proto3" json:"diversion,omitempty"`
	DiversionProtoName   string               `protobuf:"bytes,76,opt,name=diversion_proto_name,json=diversionProtoName,proto3" json:"diversion_proto_name,omitempty"`
	RouteAge             uint32               `protobuf:"varint,77,opt,name=route_age,json=routeAge,proto3" json:"route_age,omitempty"`
	RouteLabel           uint32               `protobuf:"varint,78,opt,name=route_label,json=routeLabel,proto3" json:"route_label,omitempty"`
	Version              uint32               `protobuf:"varint,79,opt,name=version,proto3" json:"version,omitempty"`
	TblVersion           uint64               `protobuf:"varint,80,opt,name=tbl_version,json=tblVersion,proto3" json:"tbl_version,omitempty"`
	RouteModifyTime      uint64               `protobuf:"varint,81,opt,name=route_modify_time,json=routeModifyTime,proto3" json:"route_modify_time,omitempty"`
	RoutePath            *Ipv4RibEdmPathEntry `protobuf:"bytes,82,opt,name=route_path,json=routePath,proto3" json:"route_path,omitempty"`
	HasSrv6Function      bool                 `protobuf:"varint,83,opt,name=has_srv6_function,json=hasSrv6Function,proto3" json:"has_srv6_function,omitempty"`
	Srv6Function         string               `protobuf:"bytes,84,opt,name=srv6_function,json=srv6Function,proto3" json:"srv6_function,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Ipv4RibEdmRoute) Reset()         { *m = Ipv4RibEdmRoute{} }
func (m *Ipv4RibEdmRoute) String() string { return proto.CompactTextString(m) }
func (*Ipv4RibEdmRoute) ProtoMessage()    {}
func (*Ipv4RibEdmRoute) Descriptor() ([]byte, []int) {
	return fileDescriptor_44c1b2f42127243a, []int{5}
}

func (m *Ipv4RibEdmRoute) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Ipv4RibEdmRoute.Unmarshal(m, b)
}
func (m *Ipv4RibEdmRoute) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Ipv4RibEdmRoute.Marshal(b, m, deterministic)
}
func (m *Ipv4RibEdmRoute) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ipv4RibEdmRoute.Merge(m, src)
}
func (m *Ipv4RibEdmRoute) XXX_Size() int {
	return xxx_messageInfo_Ipv4RibEdmRoute.Size(m)
}
func (m *Ipv4RibEdmRoute) XXX_DiscardUnknown() {
	xxx_messageInfo_Ipv4RibEdmRoute.DiscardUnknown(m)
}

var xxx_messageInfo_Ipv4RibEdmRoute proto.InternalMessageInfo

func (m *Ipv4RibEdmRoute) GetPrefix() string {
	if m != nil {
		return m.Prefix
	}
	return ""
}

func (m *Ipv4RibEdmRoute) GetPrefixLengthXr() uint32 {
	if m != nil {
		return m.PrefixLengthXr
	}
	return 0
}

func (m *Ipv4RibEdmRoute) GetRouteVersion() uint32 {
	if m != nil {
		return m.RouteVersion
	}
	return 0
}

func (m *Ipv4RibEdmRoute) GetProtocolId() uint32 {
	if m != nil {
		return m.ProtocolId
	}
	return 0
}

func (m *Ipv4RibEdmRoute) GetProtocolName() string {
	if m != nil {
		return m.ProtocolName
	}
	return ""
}

func (m *Ipv4RibEdmRoute) GetInstance() string {
	if m != nil {
		return m.Instance
	}
	return ""
}

func (m *Ipv4RibEdmRoute) GetClientId() uint32 {
	if m != nil {
		return m.ClientId
	}
	return 0
}

func (m *Ipv4RibEdmRoute) GetRouteType() uint32 {
	if m != nil {
		return m.RouteType
	}
	return 0
}

func (m *Ipv4RibEdmRoute) GetPriority() uint32 {
	if m != nil {
		return m.Priority
	}
	return 0
}

func (m *Ipv4RibEdmRoute) GetSvdType() uint32 {
	if m != nil {
		return m.SvdType
	}
	return 0
}

func (m *Ipv4RibEdmRoute) GetFlags() uint32 {
	if m != nil {
		return m.Flags
	}
	return 0
}

func (m *Ipv4RibEdmRoute) GetExtendedFlags() uint64 {
	if m != nil {
		return m.ExtendedFlags
	}
	return 0
}

func (m *Ipv4RibEdmRoute) GetTag() uint32 {
	if m != nil {
		return m.Tag
	}
	return 0
}

func (m *Ipv4RibEdmRoute) GetDistance() uint32 {
	if m != nil {
		return m.Distance
	}
	return 0
}

func (m *Ipv4RibEdmRoute) GetDiversionDistance() uint32 {
	if m != nil {
		return m.DiversionDistance
	}
	return 0
}

func (m *Ipv4RibEdmRoute) GetMetric() uint32 {
	if m != nil {
		return m.Metric
	}
	return 0
}

func (m *Ipv4RibEdmRoute) GetPathsCount() uint32 {
	if m != nil {
		return m.PathsCount
	}
	return 0
}

func (m *Ipv4RibEdmRoute) GetAttributeIdentity() uint32 {
	if m != nil {
		return m.AttributeIdentity
	}
	return 0
}

func (m *Ipv4RibEdmRoute) GetTrafficIndex() uint32 {
	if m != nil {
		return m.TrafficIndex
	}
	return 0
}

func (m *Ipv4RibEdmRoute) GetRoutePrecedence() uint32 {
	if m != nil {
		return m.RoutePrecedence
	}
	return 0
}

func (m *Ipv4RibEdmRoute) GetQosGroup() uint32 {
	if m != nil {
		return m.QosGroup
	}
	return 0
}

func (m *Ipv4RibEdmRoute) GetFlowTag() uint32 {
	if m != nil {
		return m.FlowTag
	}
	return 0
}

func (m *Ipv4RibEdmRoute) GetFwdClass() uint32 {
	if m != nil {
		return m.FwdClass
	}
	return 0
}

func (m *Ipv4RibEdmRoute) GetPicCount() uint32 {
	if m != nil {
		return m.PicCount
	}
	return 0
}

func (m *Ipv4RibEdmRoute) GetActive() bool {
	if m != nil {
		return m.Active
	}
	return false
}

func (m *Ipv4RibEdmRoute) GetDiversion() bool {
	if m != nil {
		return m.Diversion
	}
	return false
}

func (m *Ipv4RibEdmRoute) GetDiversionProtoName() string {
	if m != nil {
		return m.DiversionProtoName
	}
	return ""
}

func (m *Ipv4RibEdmRoute) GetRouteAge() uint32 {
	if m != nil {
		return m.RouteAge
	}
	return 0
}

func (m *Ipv4RibEdmRoute) GetRouteLabel() uint32 {
	if m != nil {
		return m.RouteLabel
	}
	return 0
}

func (m *Ipv4RibEdmRoute) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *Ipv4RibEdmRoute) GetTblVersion() uint64 {
	if m != nil {
		return m.TblVersion
	}
	return 0
}

func (m *Ipv4RibEdmRoute) GetRouteModifyTime() uint64 {
	if m != nil {
		return m.RouteModifyTime
	}
	return 0
}

func (m *Ipv4RibEdmRoute) GetRoutePath() *Ipv4RibEdmPathEntry {
	if m != nil {
		return m.RoutePath
	}
	return nil
}

func (m *Ipv4RibEdmRoute) GetHasSrv6Function() bool {
	if m != nil {
		return m.HasSrv6Function
	}
	return false
}

func (m *Ipv4RibEdmRoute) GetSrv6Function() string {
	if m != nil {
		return m.Srv6Function
	}
	return ""
}

func init() {
	proto.RegisterType((*Ipv4RibEdmRoute_KEYS)(nil), "cisco_ios_xr_ip_rib_ipv4_oper.rib_stdby.vrfs.vrf.afs.af.safs.saf.ip_rib_route_table_names.ip_rib_route_table_name.protocol.bgp.as.protocol_routes.protocol_route.ipv4_rib_edm_route_KEYS")
	proto.RegisterType((*RibEdmNnh)(nil), "cisco_ios_xr_ip_rib_ipv4_oper.rib_stdby.vrfs.vrf.afs.af.safs.saf.ip_rib_route_table_names.ip_rib_route_table_name.protocol.bgp.as.protocol_routes.protocol_route.rib_edm_nnh")
	proto.RegisterType((*RibEdmSrv6Sid)(nil), "cisco_ios_xr_ip_rib_ipv4_oper.rib_stdby.vrfs.vrf.afs.af.safs.saf.ip_rib_route_table_names.ip_rib_route_table_name.protocol.bgp.as.protocol_routes.protocol_route.rib_edm_srv6_sid")
	proto.RegisterType((*Ipv4RibEdmPathItem)(nil), "cisco_ios_xr_ip_rib_ipv4_oper.rib_stdby.vrfs.vrf.afs.af.safs.saf.ip_rib_route_table_names.ip_rib_route_table_name.protocol.bgp.as.protocol_routes.protocol_route.ipv4_rib_edm_path_item")
	proto.RegisterType((*Ipv4RibEdmPathEntry)(nil), "cisco_ios_xr_ip_rib_ipv4_oper.rib_stdby.vrfs.vrf.afs.af.safs.saf.ip_rib_route_table_names.ip_rib_route_table_name.protocol.bgp.as.protocol_routes.protocol_route.ipv4_rib_edm_path_entry")
	proto.RegisterType((*Ipv4RibEdmRoute)(nil), "cisco_ios_xr_ip_rib_ipv4_oper.rib_stdby.vrfs.vrf.afs.af.safs.saf.ip_rib_route_table_names.ip_rib_route_table_name.protocol.bgp.as.protocol_routes.protocol_route.ipv4_rib_edm_route")
}

func init() { proto.RegisterFile("ipv4_rib_edm_route.proto", fileDescriptor_44c1b2f42127243a) }

var fileDescriptor_44c1b2f42127243a = []byte{
	// 1868 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x57, 0x4d, 0x73, 0x1b, 0xb7,
	0x19, 0x1e, 0x5a, 0x89, 0x44, 0x41, 0xa6, 0x3e, 0x20, 0x59, 0x82, 0x2c, 0xc7, 0x66, 0xe4, 0x38,
	0x91, 0xdd, 0x98, 0x4e, 0x1c, 0x87, 0x6d, 0xd2, 0x36, 0xad, 0x22, 0xcb, 0x09, 0x1b, 0x5b, 0x56,
	0x29, 0x8d, 0x27, 0x3d, 0x61, 0xc0, 0x05, 0x96, 0xc4, 0x98, 0x8b, 0xdd, 0x00, 0xe0, 0x4a, 0xba,
	0xf5, 0xd0, 0x1f, 0xd2, 0x3f, 0xd0, 0x4b, 0x4f, 0xed, 0x9f, 0xc8, 0xa1, 0xb7, 0x1e, 0x3b, 0xd3,
	0xff, 0xd1, 0x0e, 0xde, 0x17, 0xbb, 0xa2, 0x24, 0xa7, 0xe7, 0xfa, 0x22, 0x11, 0xcf, 0xf3, 0xbc,
	0x58, 0xe0, 0xfd, 0x02, 0x40, 0x98, 0x2e, 0xca, 0x27, 0xdc, 0xea, 0x01, 0x57, 0x32, 0xe3, 0x36,
	0x9f, 0x78, 0xd5, 0x29, 0x6c, 0xee, 0x73, 0xfa, 0xe7, 0x46, 0xa2, 0x5d, 0x92, 0x73, 0x9d, 0x3b,
	0x7e, 0x6a, 0xb9, 0x2e, 0x40, 0x05, 0xf2, 0xbc, 0x50, 0xb6, 0x13, 0x46, 0xce, 0xcb, 0xc1, 0x59,
	0xa7, 0xb4, 0xa9, 0x0b, 0x7f, 0x3a, 0x22, 0x75, 0x1d, 0x91, 0x76, 0x5c, 0xf8, 0xef, 0x44, 0xda,
	0x89, 0x36, 0x30, 0x2b, 0xf7, 0x62, 0x30, 0x56, 0xdc, 0x88, 0x4c, 0xb9, 0x9f, 0x22, 0xf0, 0xcb,
	0x49, 0x3e, 0xee, 0x0c, 0x86, 0x45, 0x47, 0xb8, 0x7a, 0x8c, 0xca, 0xcb, 0xe3, 0xed, 0x7f, 0x35,
	0xc8, 0xc6, 0xd5, 0xf5, 0xf3, 0xef, 0xf6, 0xff, 0x70, 0x44, 0x37, 0x49, 0xb3, 0xb4, 0x29, 0x4c,
	0xcb, 0x1a, 0xed, 0xc6, 0xce, 0x7c, 0x7f, 0xae, 0xb4, 0xe9, 0x81, 0xc8, 0x14, 0xdd, 0x20, 0x73,
	0x22, 0x32, 0xd7, 0x80, 0x99, 0x15, 0x48, 0x6c, 0x92, 0xa6, 0xab, 0x98, 0x19, 0xb4, 0x71, 0x91,
	0xda, 0x21, 0xcb, 0x97, 0x57, 0xcb, 0xde, 0x01, 0xc9, 0x22, 0xe0, 0xc7, 0x01, 0x06, 0xe5, 0x22,
	0xb9, 0x26, 0x1c, 0x7b, 0x17, 0xb8, 0x6b, 0xc2, 0x51, 0x46, 0xe6, 0x84, 0x94, 0x56, 0x39, 0xc7,
	0x66, 0x71, 0xce, 0x38, 0xa4, 0x77, 0x49, 0xab, 0xb0, 0x2a, 0xd5, 0xa7, 0x7c, 0xac, 0xcc, 0xd0,
	0x8f, 0xd8, 0x5c, 0xbb, 0xb1, 0xd3, 0xea, 0x5f, 0x47, 0xf0, 0x39, 0x60, 0xdb, 0x7f, 0x6a, 0x90,
	0x85, 0x6a, 0x7b, 0xc6, 0x8c, 0x28, 0x25, 0xef, 0xf8, 0xb3, 0xa2, 0xda, 0x13, 0xfc, 0xa6, 0xb7,
	0x09, 0x99, 0x98, 0xd7, 0x26, 0x3f, 0x31, 0xa5, 0x18, 0xc3, 0x9e, 0x5a, 0xfd, 0x29, 0x64, 0x7a,
	0x09, 0x33, 0x17, 0x97, 0xf0, 0x11, 0x59, 0xd2, 0xc6, 0x2b, 0x9b, 0x8a, 0x44, 0x71, 0x6d, 0xa4,
	0x3a, 0x85, 0x5d, 0xb5, 0xfa, 0x8b, 0x35, 0xdc, 0x0b, 0xe8, 0xf6, 0x07, 0x64, 0xb9, 0x5a, 0x85,
	0xb3, 0x65, 0x97, 0x3b, 0x2d, 0xe9, 0x32, 0x99, 0x71, 0x5a, 0xc6, 0x95, 0x84, 0x9f, 0xdb, 0xff,
	0x59, 0x25, 0xeb, 0x17, 0x02, 0x52, 0x08, 0x3f, 0xe2, 0xda, 0xab, 0x6c, 0x7a, 0x0d, 0x8d, 0x8b,
	0x6b, 0x78, 0x48, 0xa8, 0x36, 0x69, 0x6e, 0x33, 0xe1, 0x75, 0x6e, 0xb8, 0xcb, 0x27, 0x36, 0xa9,
	0x22, 0xb3, 0x32, 0xc5, 0x1c, 0x01, 0x41, 0xdf, 0x23, 0xa4, 0xec, 0x72, 0xa3, 0x4e, 0xfd, 0x28,
	0x2f, 0xe2, 0x7e, 0xe6, 0xcb, 0xee, 0x01, 0x02, 0xf4, 0x31, 0xb9, 0x51, 0x76, 0xf9, 0x1b, 0x26,
	0xc4, 0x68, 0xad, 0x96, 0xdd, 0xde, 0x95, 0x29, 0xef, 0x91, 0xf3, 0xed, 0x62, 0x68, 0x31, 0x7c,
	0xad, 0x1a, 0x85, 0xc8, 0xae, 0x93, 0xd9, 0x4c, 0x79, 0xab, 0x13, 0x08, 0x64, 0xab, 0x1f, 0x47,
	0xf4, 0x0e, 0x59, 0x18, 0xe7, 0x42, 0xf2, 0x48, 0x62, 0x14, 0x49, 0x80, 0x5e, 0xa0, 0x80, 0x91,
	0xb9, 0x74, 0x2c, 0x86, 0xae, 0xfb, 0x84, 0x35, 0xdb, 0x8d, 0x9d, 0x77, 0xfa, 0xd5, 0x90, 0xae,
	0x91, 0x77, 0xe1, 0x27, 0x9b, 0x07, 0x23, 0x1c, 0x60, 0x62, 0xe8, 0x52, 0x78, 0xc5, 0x91, 0x25,
	0x55, 0x62, 0x00, 0xf8, 0x0c, 0x44, 0xeb, 0x64, 0x76, 0x9c, 0xe7, 0x85, 0x92, 0x6c, 0xa1, 0xdd,
	0xd8, 0x69, 0xf6, 0xe3, 0x88, 0xde, 0x27, 0x2b, 0xc1, 0x39, 0x7c, 0x94, 0x17, 0x31, 0x59, 0xb5,
	0x64, 0xd7, 0x31, 0xa8, 0x81, 0xf8, 0x36, 0x2f, 0x20, 0x59, 0x7b, 0x17, 0xa5, 0x75, 0xb1, 0xb4,
	0x30, 0xab, 0xa3, 0xf4, 0x55, 0xac, 0x99, 0x87, 0x64, 0xf5, 0xd2, 0xac, 0x20, 0x5e, 0x04, 0xf1,
	0xf2, 0xf4, 0xbc, 0x20, 0x6f, 0x93, 0xeb, 0xb5, 0x5c, 0xa4, 0x9a, 0x2d, 0xa1, 0x4f, 0xa2, 0x6e,
	0x37, 0xd5, 0x74, 0x9b, 0xb4, 0x6a, 0x85, 0x0b, 0x92, 0x65, 0x90, 0x2c, 0x44, 0xc9, 0x91, 0x48,
	0x75, 0x70, 0x2c, 0x16, 0xdd, 0x58, 0x0c, 0xd4, 0x98, 0xad, 0xe0, 0x24, 0x00, 0x3d, 0x0f, 0x08,
	0xdd, 0x22, 0xf3, 0x7e, 0x62, 0x8c, 0x1a, 0x87, 0x3d, 0x52, 0xa0, 0x9b, 0x08, 0xf4, 0x64, 0x70,
	0x50, 0x48, 0x3f, 0x2d, 0xd9, 0x2a, 0x86, 0x0b, 0x47, 0xc1, 0xbb, 0x03, 0x91, 0xbc, 0x9e, 0x14,
	0x3c, 0xd2, 0x6b, 0xe8, 0x5d, 0x04, 0x0f, 0x51, 0x74, 0x9f, 0xac, 0x58, 0x95, 0xf2, 0xc4, 0x78,
	0x9e, 0xa7, 0x1c, 0x29, 0x76, 0x03, 0xbd, 0x68, 0x55, 0xba, 0x67, 0xfc, 0xcb, 0xf4, 0x6b, 0x40,
	0xe9, 0x1e, 0xb9, 0x6d, 0x26, 0xd9, 0x40, 0xd9, 0xa0, 0x54, 0xa7, 0x5e, 0x19, 0xa9, 0x24, 0x4f,
	0xf2, 0x2c, 0x9b, 0x18, 0xed, 0xb5, 0x72, 0x6c, 0x1d, 0xec, 0xb6, 0x50, 0xf5, 0x32, 0xdd, 0x8f,
	0x9a, 0xbd, 0x73, 0x09, 0x7d, 0x9f, 0x5c, 0xcf, 0xca, 0xc2, 0xf0, 0xc2, 0x2a, 0xa7, 0x8c, 0x67,
	0x1b, 0x10, 0xd3, 0x85, 0x80, 0x1d, 0x22, 0x44, 0x3f, 0x24, 0x4b, 0x50, 0x4e, 0xd6, 0xd7, 0x2a,
	0x06, 0xaa, 0x56, 0x80, 0xfb, 0xbe, 0xd2, 0x7d, 0x4a, 0x6e, 0x84, 0x60, 0xea, 0xac, 0xc8, 0xad,
	0x9f, 0x56, 0x6f, 0x82, 0x9a, 0x96, 0x36, 0xed, 0x01, 0x77, 0x6e, 0xd2, 0x21, 0xab, 0x58, 0x25,
	0x5c, 0xb8, 0x29, 0x83, 0x9b, 0x60, 0xb0, 0x82, 0xd4, 0xae, 0xb3, 0xb5, 0xfe, 0x01, 0x89, 0x20,
	0xb7, 0xb2, 0x56, 0x6f, 0x81, 0x7a, 0x09, 0x89, 0xbe, 0xac, 0xb4, 0x5f, 0x92, 0x4d, 0xa7, 0x86,
	0x99, 0x32, 0x5e, 0xc9, 0xaa, 0x6c, 0x6b, 0x9b, 0x5b, 0x60, 0xb3, 0x51, 0x0b, 0x62, 0x15, 0x57,
	0xb6, 0x21, 0x49, 0x6a, 0xd7, 0x1a, 0x33, 0x62, 0xef, 0xc5, 0x24, 0x89, 0x9e, 0x3c, 0x30, 0x23,
	0xfa, 0x8f, 0x46, 0xcc, 0xa4, 0x2a, 0x9d, 0xd8, 0xed, 0xf6, 0xcc, 0xce, 0xc2, 0xe3, 0xbf, 0x34,
	0x3a, 0xff, 0xef, 0x07, 0x58, 0x67, 0xaa, 0xb1, 0x63, 0xe6, 0x1f, 0x60, 0xf6, 0xd3, 0xdb, 0x64,
	0xa1, 0xae, 0x0e, 0x2d, 0xd9, 0x1d, 0xd8, 0xf6, 0x7c, 0xac, 0x8d, 0x9e, 0xa4, 0x8f, 0xc8, 0xda,
	0x14, 0xcf, 0xad, 0x4a, 0x93, 0x7c, 0x62, 0x3c, 0x6b, 0x83, 0x70, 0xa5, 0x16, 0xf6, 0x23, 0x11,
	0x0a, 0x32, 0x77, 0x45, 0xca, 0x85, 0x55, 0x22, 0xcc, 0xf8, 0x3e, 0x14, 0x2e, 0x09, 0xd8, 0xae,
	0x55, 0xa2, 0x27, 0xe9, 0xc7, 0x84, 0x5a, 0x95, 0xe5, 0x5e, 0xc5, 0x6c, 0xe7, 0xa1, 0x3f, 0xb3,
	0xed, 0xf6, 0x4c, 0x28, 0x70, 0x64, 0x30, 0xe1, 0x77, 0xa5, 0xb4, 0x21, 0x5f, 0x47, 0xc2, 0x61,
	0x61, 0x3a, 0xff, 0x9a, 0xdd, 0xc5, 0x7c, 0x1d, 0x09, 0xf7, 0x3c, 0x42, 0xa1, 0x51, 0x9b, 0x49,
	0x16, 0x25, 0xec, 0x83, 0xb8, 0x85, 0x49, 0x86, 0x02, 0x7a, 0x93, 0x34, 0x6b, 0xeb, 0x7b, 0xed,
	0x99, 0x50, 0xba, 0xd5, 0x18, 0x4a, 0x54, 0x1b, 0xa9, 0xcd, 0x30, 0x96, 0xfe, 0x87, 0xb1, 0x44,
	0x11, 0xac, 0x8b, 0xdf, 0x8c, 0xb4, 0xe4, 0xa9, 0xd2, 0x92, 0x7d, 0x04, 0x7d, 0xb5, 0x19, 0x80,
	0x67, 0x4a, 0xcb, 0x40, 0x66, 0xc5, 0xd8, 0x21, 0xb9, 0x83, 0x64, 0x00, 0x80, 0x7c, 0x44, 0xd6,
	0xc2, 0xe2, 0xcb, 0xd3, 0xb1, 0x30, 0xdc, 0x28, 0x7f, 0x92, 0xdb, 0xd7, 0xc1, 0x29, 0xf7, 0x31,
	0xdf, 0x47, 0xc2, 0xbd, 0x0a, 0xd4, 0x01, 0x32, 0x3d, 0x19, 0x4e, 0xff, 0x2b, 0xe2, 0x07, 0xd8,
	0x0c, 0xca, 0x8b, 0xca, 0x4d, 0xd2, 0x0c, 0x53, 0x9f, 0x26, 0x5a, 0xb2, 0x9f, 0xc1, 0x74, 0x73,
	0x23, 0xe1, 0xbe, 0x4f, 0xb4, 0x0c, 0x27, 0x37, 0xc0, 0x1f, 0x83, 0x21, 0xfc, 0xa6, 0x9f, 0x93,
	0x8d, 0x20, 0x77, 0x85, 0x30, 0x5c, 0x6a, 0x31, 0xe4, 0xf5, 0x89, 0xc3, 0x1e, 0x82, 0x75, 0x58,
	0xe8, 0x51, 0x21, 0xcc, 0x53, 0x2d, 0x86, 0xbd, 0x8a, 0x83, 0x7a, 0x7d, 0x83, 0x49, 0x07, 0xcf,
	0x4c, 0x77, 0x45, 0xbf, 0x4f, 0xee, 0xc0, 0x67, 0x26, 0x03, 0x97, 0x58, 0x1d, 0xea, 0xa9, 0x10,
	0x56, 0x19, 0x3f, 0x65, 0xfb, 0x08, 0x3e, 0x77, 0x2b, 0x7c, 0xae, 0x56, 0x1d, 0x82, 0xe8, 0x7c,
	0x9a, 0xaf, 0xc8, 0xd6, 0xff, 0x9a, 0xe2, 0x13, 0xf8, 0xfc, 0xa6, 0xfb, 0x49, 0xfb, 0x2e, 0xd9,
	0xb8, 0x74, 0xdb, 0xa8, 0x1b, 0xc1, 0xa7, 0xf0, 0xf9, 0x1b, 0x17, 0x6f, 0x1d, 0x53, 0x2d, 0xe4,
	0xb2, 0x9d, 0xf0, 0xde, 0xea, 0xc1, 0xc4, 0x2b, 0xf6, 0x18, 0xdc, 0xb9, 0x71, 0xd1, 0x72, 0xb7,
	0xa2, 0xe1, 0xe0, 0xaa, 0x5b, 0x48, 0x75, 0x75, 0x71, 0xec, 0x33, 0xb0, 0x5a, 0xae, 0x1a, 0xc9,
	0x91, 0x2d, 0xbb, 0x47, 0x5a, 0x3a, 0xfa, 0x63, 0x83, 0x34, 0x2b, 0x15, 0x7b, 0x02, 0x8d, 0xe4,
	0xaf, 0x6f, 0x51, 0x23, 0xa9, 0x96, 0xde, 0x9f, 0x73, 0xb8, 0x23, 0xfa, 0x05, 0xd9, 0x84, 0xd0,
	0x07, 0xc2, 0x5b, 0x61, 0x9c, 0xf6, 0x3c, 0x9d, 0x98, 0x24, 0x5c, 0x7f, 0xd8, 0xe7, 0xe0, 0xf5,
	0xf5, 0x10, 0x74, 0x5b, 0x76, 0x8f, 0x91, 0x7e, 0x16, 0xd9, 0x70, 0x95, 0x7a, 0xb3, 0x59, 0x17,
	0xaf, 0x52, 0xee, 0xaa, 0xcd, 0xf6, 0x1f, 0xaf, 0x5d, 0xba, 0x92, 0xc3, 0x91, 0xa5, 0x8c, 0xb7,
	0x67, 0xf4, 0xdf, 0x0d, 0xb2, 0x72, 0x85, 0x63, 0x0d, 0x70, 0xf2, 0xdf, 0xde, 0x02, 0x27, 0xbf,
	0xf9, 0x66, 0xdb, 0x5f, 0x0c, 0x78, 0x5f, 0x0f, 0xf6, 0x65, 0x16, 0x2e, 0x0f, 0xdb, 0x3f, 0x12,
	0x42, 0xaf, 0xbe, 0x4a, 0xe0, 0x3a, 0x02, 0x17, 0x7b, 0xc8, 0xd8, 0xf9, 0x7e, 0x1c, 0x85, 0xde,
	0x72, 0xe1, 0x15, 0xc0, 0x4f, 0x6d, 0xcc, 0xce, 0xc5, 0xe9, 0x87, 0xc0, 0xf7, 0x36, 0x74, 0x45,
	0xdc, 0x42, 0xa9, 0xac, 0x0b, 0x71, 0x78, 0x82, 0x5d, 0x11, 0xc0, 0x57, 0x88, 0x85, 0x3b, 0x53,
	0xbd, 0x6c, 0x2d, 0x21, 0xc2, 0xad, 0x3e, 0xa9, 0xa0, 0x9e, 0xc4, 0xcb, 0x65, 0x14, 0xc0, 0x1d,
	0x0e, 0xa3, 0x79, 0xbd, 0x02, 0xe1, 0xfe, 0x76, 0x93, 0x34, 0xb5, 0x71, 0x5e, 0x98, 0x44, 0xb1,
	0x9f, 0x03, 0x5f, 0x8f, 0x43, 0x6b, 0x4d, 0xc6, 0x1a, 0x4a, 0x5f, 0xb2, 0x5f, 0xe0, 0xa5, 0x0b,
	0x81, 0x9e, 0x0c, 0x4d, 0x3f, 0xba, 0x39, 0x3c, 0x52, 0xbe, 0xc0, 0xa6, 0x8f, 0x2f, 0xa4, 0xf0,
	0x52, 0xb9, 0x49, 0x9a, 0x85, 0xd5, 0xb9, 0xd5, 0xfe, 0x8c, 0x7d, 0x89, 0xa6, 0xd5, 0x18, 0x5e,
	0x5f, 0xa5, 0x44, 0xc3, 0x5f, 0x02, 0x37, 0xe7, 0x4a, 0x09, 0x66, 0xf5, 0x35, 0xf9, 0x57, 0xd3,
	0xd7, 0xe4, 0x7b, 0x64, 0xb1, 0xbe, 0x6e, 0x21, 0xfd, 0x6b, 0x68, 0xf4, 0xad, 0x0a, 0xc5, 0x8b,
	0xf2, 0x32, 0x99, 0xf1, 0x62, 0xc8, 0xbe, 0x02, 0xd3, 0xf0, 0x33, 0xac, 0x42, 0xea, 0xb8, 0xbb,
	0xdf, 0xe0, 0x2a, 0xaa, 0x71, 0x78, 0x8d, 0x48, 0x1d, 0x1d, 0xcc, 0x6b, 0xd5, 0x6f, 0xf1, 0x5c,
	0xad, 0x99, 0xa7, 0x95, 0xfc, 0xfc, 0x4d, 0xb0, 0x7b, 0xf9, 0x4d, 0x10, 0x32, 0xc4, 0x71, 0x3c,
	0x97, 0xbf, 0x8e, 0x61, 0x08, 0xd0, 0x1e, 0x1c, 0xc8, 0x0f, 0x09, 0xad, 0x7b, 0x18, 0xd7, 0x52,
	0x19, 0x1f, 0x7c, 0xb2, 0x87, 0xdf, 0xa9, 0x99, 0x5e, 0x24, 0x42, 0xd4, 0xbc, 0x15, 0x69, 0xaa,
	0x93, 0xf8, 0x4c, 0x7b, 0x8a, 0xb1, 0x8f, 0x20, 0x34, 0x3d, 0x7a, 0xbf, 0x7a, 0xa4, 0x16, 0x56,
	0x25, 0x4a, 0xaa, 0xb0, 0xf2, 0x7d, 0xd0, 0x2d, 0x01, 0x7e, 0x58, 0xc3, 0x21, 0x88, 0x3f, 0xe4,
	0x8e, 0x0f, 0x6d, 0x3e, 0x29, 0xd8, 0x33, 0xf4, 0xc1, 0x0f, 0xb9, 0xfb, 0x26, 0x8c, 0x43, 0x24,
	0xd2, 0x71, 0x7e, 0xc2, 0x83, 0xdb, 0xbe, 0xc1, 0x48, 0x84, 0xf1, 0xb1, 0x18, 0x06, 0xbb, 0xf4,
	0x44, 0xf2, 0x64, 0x2c, 0x9c, 0x63, 0xdf, 0xa2, 0x5d, 0x7a, 0x22, 0xf7, 0xc2, 0x38, 0x90, 0x85,
	0x4e, 0xe2, 0x96, 0x7b, 0x31, 0xbc, 0x3a, 0xc1, 0x0d, 0xaf, 0x93, 0x59, 0x91, 0x78, 0x5d, 0x2a,
	0xf6, 0x3b, 0x7c, 0xaf, 0xe0, 0x88, 0xde, 0x22, 0xf3, 0xb5, 0x5b, 0xd9, 0x77, 0x40, 0x9d, 0x03,
	0xf4, 0x13, 0xb2, 0x76, 0x1e, 0x0e, 0x48, 0x51, 0x4c, 0xda, 0xe7, 0x90, 0x94, 0xe7, 0xa1, 0x3a,
	0x0c, 0x14, 0xa4, 0xee, 0x16, 0xc1, 0x7c, 0xe3, 0x62, 0xa8, 0xd8, 0x0b, 0x5c, 0x04, 0x00, 0xbb,
	0x43, 0x75, 0xf9, 0x45, 0x71, 0x70, 0xe5, 0x45, 0xc1, 0xc8, 0x5c, 0xb5, 0x96, 0x97, 0xb8, 0xf3,
	0xf2, 0xbc, 0xb0, 0xfc, 0x60, 0x5c, 0xd7, 0xde, 0x21, 0xa4, 0x1a, 0xf1, 0x83, 0x71, 0x55, 0x79,
	0x0f, 0xc8, 0x0a, 0xce, 0x9d, 0xe5, 0x52, 0xa7, 0x67, 0xdc, 0xeb, 0x4c, 0xb1, 0xdf, 0x83, 0x0c,
	0xdd, 0xff, 0x02, 0xf0, 0x63, 0x9d, 0x29, 0xfa, 0xcf, 0x46, 0x55, 0x27, 0xd0, 0x03, 0xfb, 0xed,
	0xc6, 0xce, 0xc2, 0xe3, 0xbf, 0xbf, 0x95, 0x3d, 0x10, 0x7a, 0x7b, 0xac, 0xf1, 0xd0, 0xff, 0x82,
	0x1f, 0xea, 0x13, 0xa7, 0x3e, 0x32, 0x8e, 0xf0, 0x71, 0x10, 0x4f, 0x9a, 0xfa, 0x88, 0xb9, 0x4b,
	0x5a, 0x17, 0x75, 0xc7, 0xd8, 0x8c, 0xdc, 0x94, 0x68, 0x30, 0x0b, 0x6b, 0xf8, 0xec, 0xbf, 0x01,
	0x00, 0x00, 0xff, 0xff, 0x3b, 0x04, 0xcf, 0x26, 0xac, 0x12, 0x00, 0x00,
}
