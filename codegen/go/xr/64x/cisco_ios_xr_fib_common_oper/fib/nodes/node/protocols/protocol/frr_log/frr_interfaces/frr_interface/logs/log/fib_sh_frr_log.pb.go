/*
Copyright 2019 Cisco Systems

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: fib_sh_frr_log.proto

package cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_frr_log_frr_interfaces_frr_interface_logs_log

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type FibShFrrLog_KEYS struct {
	NodeName             string   `protobuf:"bytes,1,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	ProtocolName         string   `protobuf:"bytes,2,opt,name=protocol_name,json=protocolName,proto3" json:"protocol_name,omitempty"`
	FrrInterfaceName     string   `protobuf:"bytes,3,opt,name=frr_interface_name,json=frrInterfaceName,proto3" json:"frr_interface_name,omitempty"`
	LogIndex             uint32   `protobuf:"varint,4,opt,name=log_index,json=logIndex,proto3" json:"log_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FibShFrrLog_KEYS) Reset()         { *m = FibShFrrLog_KEYS{} }
func (m *FibShFrrLog_KEYS) String() string { return proto.CompactTextString(m) }
func (*FibShFrrLog_KEYS) ProtoMessage()    {}
func (*FibShFrrLog_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd43158ec13d3a6c, []int{0}
}

func (m *FibShFrrLog_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FibShFrrLog_KEYS.Unmarshal(m, b)
}
func (m *FibShFrrLog_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FibShFrrLog_KEYS.Marshal(b, m, deterministic)
}
func (m *FibShFrrLog_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FibShFrrLog_KEYS.Merge(m, src)
}
func (m *FibShFrrLog_KEYS) XXX_Size() int {
	return xxx_messageInfo_FibShFrrLog_KEYS.Size(m)
}
func (m *FibShFrrLog_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_FibShFrrLog_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_FibShFrrLog_KEYS proto.InternalMessageInfo

func (m *FibShFrrLog_KEYS) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

func (m *FibShFrrLog_KEYS) GetProtocolName() string {
	if m != nil {
		return m.ProtocolName
	}
	return ""
}

func (m *FibShFrrLog_KEYS) GetFrrInterfaceName() string {
	if m != nil {
		return m.FrrInterfaceName
	}
	return ""
}

func (m *FibShFrrLog_KEYS) GetLogIndex() uint32 {
	if m != nil {
		return m.LogIndex
	}
	return 0
}

type FibShTimespec struct {
	Seconds              int32    `protobuf:"zigzag32,1,opt,name=seconds,proto3" json:"seconds,omitempty"`
	NanoSeconds          int32    `protobuf:"zigzag32,2,opt,name=nano_seconds,json=nanoSeconds,proto3" json:"nano_seconds,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FibShTimespec) Reset()         { *m = FibShTimespec{} }
func (m *FibShTimespec) String() string { return proto.CompactTextString(m) }
func (*FibShTimespec) ProtoMessage()    {}
func (*FibShTimespec) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd43158ec13d3a6c, []int{1}
}

func (m *FibShTimespec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FibShTimespec.Unmarshal(m, b)
}
func (m *FibShTimespec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FibShTimespec.Marshal(b, m, deterministic)
}
func (m *FibShTimespec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FibShTimespec.Merge(m, src)
}
func (m *FibShTimespec) XXX_Size() int {
	return xxx_messageInfo_FibShTimespec.Size(m)
}
func (m *FibShTimespec) XXX_DiscardUnknown() {
	xxx_messageInfo_FibShTimespec.DiscardUnknown(m)
}

var xxx_messageInfo_FibShTimespec proto.InternalMessageInfo

func (m *FibShTimespec) GetSeconds() int32 {
	if m != nil {
		return m.Seconds
	}
	return 0
}

func (m *FibShTimespec) GetNanoSeconds() int32 {
	if m != nil {
		return m.NanoSeconds
	}
	return 0
}

type FibShFrrLog struct {
	FrrProtocolType           string         `protobuf:"bytes,50,opt,name=frr_protocol_type,json=frrProtocolType,proto3" json:"frr_protocol_type,omitempty"`
	FrrInterfaceName          string         `protobuf:"bytes,51,opt,name=frr_interface_name,json=frrInterfaceName,proto3" json:"frr_interface_name,omitempty"`
	FrrPrefix                 string         `protobuf:"bytes,52,opt,name=frr_prefix,json=frrPrefix,proto3" json:"frr_prefix,omitempty"`
	FrrTimestamp              *FibShTimespec `protobuf:"bytes,53,opt,name=frr_timestamp,json=frrTimestamp,proto3" json:"frr_timestamp,omitempty"`
	FrrSwitchingTime          uint32         `protobuf:"varint,54,opt,name=frr_switching_time,json=frrSwitchingTime,proto3" json:"frr_switching_time,omitempty"`
	BundleMemberInterfaceName string         `protobuf:"bytes,55,opt,name=bundle_member_interface_name,json=bundleMemberInterfaceName,proto3" json:"bundle_member_interface_name,omitempty"`
	XXX_NoUnkeyedLiteral      struct{}       `json:"-"`
	XXX_unrecognized          []byte         `json:"-"`
	XXX_sizecache             int32          `json:"-"`
}

func (m *FibShFrrLog) Reset()         { *m = FibShFrrLog{} }
func (m *FibShFrrLog) String() string { return proto.CompactTextString(m) }
func (*FibShFrrLog) ProtoMessage()    {}
func (*FibShFrrLog) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd43158ec13d3a6c, []int{2}
}

func (m *FibShFrrLog) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FibShFrrLog.Unmarshal(m, b)
}
func (m *FibShFrrLog) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FibShFrrLog.Marshal(b, m, deterministic)
}
func (m *FibShFrrLog) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FibShFrrLog.Merge(m, src)
}
func (m *FibShFrrLog) XXX_Size() int {
	return xxx_messageInfo_FibShFrrLog.Size(m)
}
func (m *FibShFrrLog) XXX_DiscardUnknown() {
	xxx_messageInfo_FibShFrrLog.DiscardUnknown(m)
}

var xxx_messageInfo_FibShFrrLog proto.InternalMessageInfo

func (m *FibShFrrLog) GetFrrProtocolType() string {
	if m != nil {
		return m.FrrProtocolType
	}
	return ""
}

func (m *FibShFrrLog) GetFrrInterfaceName() string {
	if m != nil {
		return m.FrrInterfaceName
	}
	return ""
}

func (m *FibShFrrLog) GetFrrPrefix() string {
	if m != nil {
		return m.FrrPrefix
	}
	return ""
}

func (m *FibShFrrLog) GetFrrTimestamp() *FibShTimespec {
	if m != nil {
		return m.FrrTimestamp
	}
	return nil
}

func (m *FibShFrrLog) GetFrrSwitchingTime() uint32 {
	if m != nil {
		return m.FrrSwitchingTime
	}
	return 0
}

func (m *FibShFrrLog) GetBundleMemberInterfaceName() string {
	if m != nil {
		return m.BundleMemberInterfaceName
	}
	return ""
}

func init() {
	proto.RegisterType((*FibShFrrLog_KEYS)(nil), "cisco_ios_xr_fib_common_oper.fib.nodes.node.protocols.protocol.frr_log.frr_interfaces.frr_interface.logs.log.fib_sh_frr_log_KEYS")
	proto.RegisterType((*FibShTimespec)(nil), "cisco_ios_xr_fib_common_oper.fib.nodes.node.protocols.protocol.frr_log.frr_interfaces.frr_interface.logs.log.fib_sh_timespec")
	proto.RegisterType((*FibShFrrLog)(nil), "cisco_ios_xr_fib_common_oper.fib.nodes.node.protocols.protocol.frr_log.frr_interfaces.frr_interface.logs.log.fib_sh_frr_log")
}

func init() { proto.RegisterFile("fib_sh_frr_log.proto", fileDescriptor_cd43158ec13d3a6c) }

var fileDescriptor_cd43158ec13d3a6c = []byte{
	// 395 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x92, 0xcf, 0x8e, 0xda, 0x30,
	0x10, 0xc6, 0x15, 0xa8, 0x5a, 0x62, 0xa0, 0x14, 0xb7, 0x87, 0x54, 0xb4, 0x12, 0xa5, 0x17, 0x54,
	0x55, 0x39, 0x40, 0xff, 0x1c, 0x7b, 0xea, 0x01, 0xad, 0x16, 0xad, 0x02, 0x97, 0x3d, 0x59, 0x89,
	0x63, 0x07, 0x4b, 0xb1, 0x1d, 0xd9, 0x59, 0x2d, 0x1c, 0xf6, 0x51, 0xf6, 0xc2, 0x93, 0xae, 0x3c,
	0xc1, 0x48, 0xd9, 0x15, 0xd7, 0xbd, 0x18, 0xcf, 0x37, 0x3f, 0xcf, 0xcc, 0x37, 0x04, 0x7d, 0xe2,
	0x22, 0x23, 0x76, 0x47, 0xb8, 0x31, 0xa4, 0xd4, 0x45, 0x5c, 0x19, 0x5d, 0x6b, 0x5c, 0x52, 0x61,
	0xa9, 0x26, 0x42, 0x5b, 0xb2, 0x37, 0xc4, 0x21, 0x54, 0x4b, 0xa9, 0x15, 0xd1, 0x15, 0x33, 0x31,
	0x17, 0x59, 0xac, 0x74, 0xce, 0x2c, 0x9c, 0xcd, 0x13, 0xaa, 0x4b, 0x7b, 0xbe, 0xc5, 0xbe, 0x9a,
	0xfb, 0x15, 0xaa, 0x66, 0x86, 0xa7, 0x94, 0xd9, 0x76, 0x18, 0x97, 0xba, 0xb0, 0xee, 0x98, 0x1d,
	0x03, 0xf4, 0xb1, 0x3d, 0x06, 0xb9, 0xfa, 0x7f, 0xbb, 0xc1, 0x13, 0x14, 0xba, 0x06, 0x44, 0xa5,
	0x92, 0x45, 0xc1, 0x34, 0x98, 0x87, 0x49, 0xcf, 0x09, 0xeb, 0x54, 0x32, 0xfc, 0x1d, 0x0d, 0x7d,
	0xbb, 0x06, 0xe8, 0x00, 0x30, 0xf0, 0x22, 0x40, 0x3f, 0x11, 0x6e, 0xf5, 0x6c, 0xc8, 0x2e, 0x90,
	0x1f, 0xb8, 0x31, 0x2b, 0x9f, 0x00, 0x7a, 0x82, 0x42, 0xd7, 0x5b, 0xa8, 0x9c, 0xed, 0xa3, 0x37,
	0xd3, 0x60, 0x3e, 0x4c, 0x7a, 0xa5, 0x2e, 0x56, 0x2e, 0x9e, 0xad, 0xd1, 0xe8, 0x34, 0x63, 0x2d,
	0x24, 0xb3, 0x15, 0xa3, 0x38, 0x42, 0xef, 0x2c, 0xa3, 0x5a, 0xe5, 0x16, 0xa6, 0x1b, 0x27, 0x3e,
	0xc4, 0xdf, 0xd0, 0x40, 0xa5, 0x4a, 0x13, 0x9f, 0xee, 0x40, 0xba, 0xef, 0xb4, 0x4d, 0x23, 0xcd,
	0x1e, 0xbb, 0xe8, 0x7d, 0xdb, 0x34, 0xfe, 0x81, 0xc6, 0xee, 0x7a, 0xb6, 0x55, 0x1f, 0x2a, 0x16,
	0x2d, 0x60, 0xd8, 0x11, 0x37, 0xe6, 0xe6, 0xa4, 0x6f, 0x0f, 0xd5, 0x25, 0x67, 0xcb, 0x0b, 0xce,
	0xbe, 0x22, 0xd4, 0x54, 0x66, 0x5c, 0xec, 0xa3, 0x5f, 0x40, 0x85, 0x50, 0xd2, 0x09, 0xf8, 0x18,
	0xa0, 0xa1, 0xcb, 0x83, 0xb3, 0x3a, 0x95, 0x55, 0xf4, 0x7b, 0x1a, 0xcc, 0xfb, 0x8b, 0x87, 0xf8,
	0x35, 0xbf, 0x83, 0xf8, 0xd9, 0x7e, 0x93, 0x01, 0x37, 0x66, 0xeb, 0x47, 0xf2, 0x8e, 0xed, 0xbd,
	0xa8, 0xe9, 0x4e, 0xa8, 0x02, 0xb8, 0xe8, 0x0f, 0xfc, 0x4d, 0xce, 0xf1, 0xc6, 0x27, 0xdc, 0x13,
	0xfc, 0x0f, 0x7d, 0xc9, 0xee, 0x54, 0x5e, 0x32, 0x22, 0x99, 0xcc, 0xd8, 0x8b, 0x4d, 0xfd, 0x85,
	0x1d, 0x7c, 0x6e, 0x98, 0x6b, 0x40, 0x5a, 0x2b, 0xcb, 0xde, 0x82, 0x89, 0xe5, 0x53, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x98, 0xc9, 0x19, 0x6e, 0x21, 0x03, 0x00, 0x00,
}
