/*
Copyright 2019 Cisco Systems

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: nve_show_vni_bd.proto

package cisco_ios_xr_tunnel_nve_oper_nve_vnis_vni

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type NveShowVniBd_KEYS struct {
	Vni                  string   `protobuf:"bytes,1,opt,name=vni,proto3" json:"vni,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NveShowVniBd_KEYS) Reset()         { *m = NveShowVniBd_KEYS{} }
func (m *NveShowVniBd_KEYS) String() string { return proto.CompactTextString(m) }
func (*NveShowVniBd_KEYS) ProtoMessage()    {}
func (*NveShowVniBd_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_8c2ea47b59d59cc9, []int{0}
}

func (m *NveShowVniBd_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NveShowVniBd_KEYS.Unmarshal(m, b)
}
func (m *NveShowVniBd_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NveShowVniBd_KEYS.Marshal(b, m, deterministic)
}
func (m *NveShowVniBd_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NveShowVniBd_KEYS.Merge(m, src)
}
func (m *NveShowVniBd_KEYS) XXX_Size() int {
	return xxx_messageInfo_NveShowVniBd_KEYS.Size(m)
}
func (m *NveShowVniBd_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_NveShowVniBd_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_NveShowVniBd_KEYS proto.InternalMessageInfo

func (m *NveShowVniBd_KEYS) GetVni() string {
	if m != nil {
		return m.Vni
	}
	return ""
}

type NveShowVniBd struct {
	InterfaceName        string   `protobuf:"bytes,50,opt,name=interface_name,json=interfaceName,proto3" json:"interface_name,omitempty"`
	VniXr                uint32   `protobuf:"varint,51,opt,name=vni_xr,json=vniXr,proto3" json:"vni_xr,omitempty"`
	State                string   `protobuf:"bytes,52,opt,name=state,proto3" json:"state,omitempty"`
	McastIpv4Address     string   `protobuf:"bytes,53,opt,name=mcast_ipv4_address,json=mcastIpv4Address,proto3" json:"mcast_ipv4_address,omitempty"`
	Flags                uint32   `protobuf:"varint,54,opt,name=flags,proto3" json:"flags,omitempty"`
	VniMin               uint32   `protobuf:"varint,55,opt,name=vni_min,json=vniMin,proto3" json:"vni_min,omitempty"`
	VniMax               uint32   `protobuf:"varint,56,opt,name=vni_max,json=vniMax,proto3" json:"vni_max,omitempty"`
	McastFlags           uint32   `protobuf:"varint,57,opt,name=mcast_flags,json=mcastFlags,proto3" json:"mcast_flags,omitempty"`
	UdpPort              uint32   `protobuf:"varint,58,opt,name=udp_port,json=udpPort,proto3" json:"udp_port,omitempty"`
	BviIfh               uint32   `protobuf:"varint,59,opt,name=bvi_ifh,json=bviIfh,proto3" json:"bvi_ifh,omitempty"`
	BviState             uint32   `protobuf:"varint,60,opt,name=bvi_state,json=bviState,proto3" json:"bvi_state,omitempty"`
	BviMac               []uint32 `protobuf:"varint,61,rep,packed,name=bvi_mac,json=bviMac,proto3" json:"bvi_mac,omitempty"`
	VrfName              string   `protobuf:"bytes,62,opt,name=vrf_name,json=vrfName,proto3" json:"vrf_name,omitempty"`
	VrfId                uint32   `protobuf:"varint,63,opt,name=vrf_id,json=vrfId,proto3" json:"vrf_id,omitempty"`
	Ipv4TblId            uint32   `protobuf:"varint,64,opt,name=ipv4_tbl_id,json=ipv4TblId,proto3" json:"ipv4_tbl_id,omitempty"`
	Ipv6TblId            uint32   `protobuf:"varint,65,opt,name=ipv6_tbl_id,json=ipv6TblId,proto3" json:"ipv6_tbl_id,omitempty"`
	VrfVni               uint32   `protobuf:"varint,66,opt,name=vrf_vni,json=vrfVni,proto3" json:"vrf_vni,omitempty"`
	TopoValid            bool     `protobuf:"varint,67,opt,name=topo_valid,json=topoValid,proto3" json:"topo_valid,omitempty"`
	TopoId               uint32   `protobuf:"varint,68,opt,name=topo_id,json=topoId,proto3" json:"topo_id,omitempty"`
	TopoName             []string `protobuf:"bytes,69,rep,name=topo_name,json=topoName,proto3" json:"topo_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NveShowVniBd) Reset()         { *m = NveShowVniBd{} }
func (m *NveShowVniBd) String() string { return proto.CompactTextString(m) }
func (*NveShowVniBd) ProtoMessage()    {}
func (*NveShowVniBd) Descriptor() ([]byte, []int) {
	return fileDescriptor_8c2ea47b59d59cc9, []int{1}
}

func (m *NveShowVniBd) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NveShowVniBd.Unmarshal(m, b)
}
func (m *NveShowVniBd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NveShowVniBd.Marshal(b, m, deterministic)
}
func (m *NveShowVniBd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NveShowVniBd.Merge(m, src)
}
func (m *NveShowVniBd) XXX_Size() int {
	return xxx_messageInfo_NveShowVniBd.Size(m)
}
func (m *NveShowVniBd) XXX_DiscardUnknown() {
	xxx_messageInfo_NveShowVniBd.DiscardUnknown(m)
}

var xxx_messageInfo_NveShowVniBd proto.InternalMessageInfo

func (m *NveShowVniBd) GetInterfaceName() string {
	if m != nil {
		return m.InterfaceName
	}
	return ""
}

func (m *NveShowVniBd) GetVniXr() uint32 {
	if m != nil {
		return m.VniXr
	}
	return 0
}

func (m *NveShowVniBd) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *NveShowVniBd) GetMcastIpv4Address() string {
	if m != nil {
		return m.McastIpv4Address
	}
	return ""
}

func (m *NveShowVniBd) GetFlags() uint32 {
	if m != nil {
		return m.Flags
	}
	return 0
}

func (m *NveShowVniBd) GetVniMin() uint32 {
	if m != nil {
		return m.VniMin
	}
	return 0
}

func (m *NveShowVniBd) GetVniMax() uint32 {
	if m != nil {
		return m.VniMax
	}
	return 0
}

func (m *NveShowVniBd) GetMcastFlags() uint32 {
	if m != nil {
		return m.McastFlags
	}
	return 0
}

func (m *NveShowVniBd) GetUdpPort() uint32 {
	if m != nil {
		return m.UdpPort
	}
	return 0
}

func (m *NveShowVniBd) GetBviIfh() uint32 {
	if m != nil {
		return m.BviIfh
	}
	return 0
}

func (m *NveShowVniBd) GetBviState() uint32 {
	if m != nil {
		return m.BviState
	}
	return 0
}

func (m *NveShowVniBd) GetBviMac() []uint32 {
	if m != nil {
		return m.BviMac
	}
	return nil
}

func (m *NveShowVniBd) GetVrfName() string {
	if m != nil {
		return m.VrfName
	}
	return ""
}

func (m *NveShowVniBd) GetVrfId() uint32 {
	if m != nil {
		return m.VrfId
	}
	return 0
}

func (m *NveShowVniBd) GetIpv4TblId() uint32 {
	if m != nil {
		return m.Ipv4TblId
	}
	return 0
}

func (m *NveShowVniBd) GetIpv6TblId() uint32 {
	if m != nil {
		return m.Ipv6TblId
	}
	return 0
}

func (m *NveShowVniBd) GetVrfVni() uint32 {
	if m != nil {
		return m.VrfVni
	}
	return 0
}

func (m *NveShowVniBd) GetTopoValid() bool {
	if m != nil {
		return m.TopoValid
	}
	return false
}

func (m *NveShowVniBd) GetTopoId() uint32 {
	if m != nil {
		return m.TopoId
	}
	return 0
}

func (m *NveShowVniBd) GetTopoName() []string {
	if m != nil {
		return m.TopoName
	}
	return nil
}

func init() {
	proto.RegisterType((*NveShowVniBd_KEYS)(nil), "cisco_ios_xr_tunnel_nve_oper.nve.vnis.vni.nve_show_vni_bd_KEYS")
	proto.RegisterType((*NveShowVniBd)(nil), "cisco_ios_xr_tunnel_nve_oper.nve.vnis.vni.nve_show_vni_bd")
}

func init() { proto.RegisterFile("nve_show_vni_bd.proto", fileDescriptor_8c2ea47b59d59cc9) }

var fileDescriptor_8c2ea47b59d59cc9 = []byte{
	// 443 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x92, 0x5f, 0x6b, 0x14, 0x31,
	0x14, 0xc5, 0x59, 0x6a, 0xbb, 0x3b, 0x29, 0xd5, 0x12, 0x5a, 0x8c, 0x88, 0x3a, 0x14, 0x84, 0x11,
	0x64, 0x1f, 0xec, 0xba, 0xfe, 0xff, 0x53, 0xb5, 0xc2, 0x22, 0x15, 0xd9, 0x4a, 0xd1, 0xa7, 0x90,
	0x99, 0x24, 0x6e, 0x60, 0x26, 0x19, 0x92, 0x6c, 0xdc, 0x4f, 0xe8, 0xe7, 0x92, 0x7b, 0xb3, 0x8e,
	0xd0, 0x97, 0x61, 0x72, 0x7e, 0x39, 0xe7, 0x72, 0xcf, 0x0c, 0x39, 0xb6, 0x49, 0xf1, 0xb0, 0x72,
	0xbf, 0x79, 0xb2, 0x86, 0xd7, 0x72, 0xda, 0x7b, 0x17, 0x1d, 0x7d, 0xd4, 0x98, 0xd0, 0x38, 0x6e,
	0x5c, 0xe0, 0x1b, 0xcf, 0xe3, 0xda, 0x5a, 0xd5, 0x72, 0xb8, 0xea, 0x7a, 0xe5, 0xa7, 0x36, 0xa9,
	0x69, 0xb2, 0x26, 0xc0, 0xe3, 0xa4, 0x22, 0x47, 0xd7, 0x32, 0xf8, 0x97, 0xf3, 0x9f, 0x97, 0xf4,
	0x90, 0xec, 0x24, 0x6b, 0xd8, 0xa8, 0x1c, 0x55, 0xc5, 0x12, 0x5e, 0x4f, 0xfe, 0xdc, 0x20, 0xb7,
	0xae, 0x5d, 0xa5, 0x0f, 0xc9, 0x4d, 0x63, 0xa3, 0xf2, 0x5a, 0x34, 0x8a, 0x5b, 0xd1, 0x29, 0xf6,
	0x04, 0x0d, 0x07, 0x83, 0xfa, 0x55, 0x74, 0x8a, 0x1e, 0x93, 0x3d, 0x30, 0x6c, 0x3c, 0x3b, 0x2d,
	0x47, 0xd5, 0xc1, 0x72, 0x37, 0x59, 0xf3, 0xc3, 0xd3, 0x23, 0xb2, 0x1b, 0xa2, 0x88, 0x8a, 0xcd,
	0xd0, 0x94, 0x0f, 0xf4, 0x31, 0xa1, 0x5d, 0x23, 0x42, 0xe4, 0xa6, 0x4f, 0x33, 0x2e, 0xa4, 0xf4,
	0x2a, 0x04, 0xf6, 0x14, 0xaf, 0x1c, 0x22, 0x59, 0xf4, 0x69, 0x76, 0x96, 0x75, 0xc8, 0xd0, 0xad,
	0xf8, 0x15, 0xd8, 0x3c, 0x27, 0xe3, 0x81, 0xde, 0x26, 0x63, 0x18, 0xd8, 0x19, 0xcb, 0x9e, 0xa1,
	0x0e, 0xf3, 0x2f, 0x8c, 0x1d, 0x80, 0xd8, 0xb0, 0xe7, 0xff, 0x81, 0xd8, 0xd0, 0x07, 0x64, 0x3f,
	0x4f, 0xcd, 0x69, 0x2f, 0x10, 0x12, 0x94, 0x3e, 0x63, 0xe4, 0x1d, 0x32, 0x59, 0xcb, 0x9e, 0xf7,
	0xce, 0x47, 0xf6, 0x12, 0xe9, 0x78, 0x2d, 0xfb, 0x6f, 0xce, 0x47, 0x08, 0xad, 0x93, 0xe1, 0x46,
	0xaf, 0xd8, 0xab, 0x1c, 0x5a, 0x27, 0xb3, 0xd0, 0x2b, 0x7a, 0x97, 0x14, 0x00, 0xf2, 0x92, 0xaf,
	0x11, 0x4d, 0xea, 0x64, 0x2e, 0x71, 0xcf, 0xad, 0xab, 0x13, 0x0d, 0x7b, 0x53, 0xee, 0x6c, 0x5d,
	0x17, 0xa2, 0x81, 0x49, 0xc9, 0xeb, 0x5c, 0xe7, 0x5b, 0x5c, 0x7b, 0x9c, 0xbc, 0x1e, 0x8a, 0xf4,
	0x9a, 0x1b, 0xc9, 0xde, 0x6d, 0x8b, 0xf4, 0x7a, 0x21, 0xe9, 0x7d, 0xb2, 0x8f, 0x65, 0xc5, 0xba,
	0x05, 0xf6, 0x1e, 0x59, 0x01, 0xd2, 0xf7, 0xba, 0x1d, 0xf8, 0xfc, 0x1f, 0x3f, 0x1b, 0xf8, 0x3c,
	0x73, 0x68, 0xc5, 0x6b, 0xf8, 0xa8, 0xec, 0xc3, 0xb6, 0x15, 0xaf, 0xaf, 0xac, 0xa1, 0xf7, 0x08,
	0x89, 0xae, 0x77, 0x3c, 0x89, 0xd6, 0x48, 0xf6, 0xb1, 0x1c, 0x55, 0x93, 0x65, 0x01, 0xca, 0x15,
	0x08, 0xe0, 0x43, 0x6c, 0x24, 0xfb, 0x94, 0x7d, 0x70, 0x5c, 0x48, 0x58, 0x1c, 0x01, 0xee, 0x70,
	0x5e, 0xee, 0x54, 0xc5, 0x72, 0x02, 0x02, 0x2c, 0x51, 0xef, 0xe1, 0x4f, 0x7a, 0xfa, 0x37, 0x00,
	0x00, 0xff, 0xff, 0xad, 0x10, 0x96, 0x0f, 0xbd, 0x02, 0x00, 0x00,
}
