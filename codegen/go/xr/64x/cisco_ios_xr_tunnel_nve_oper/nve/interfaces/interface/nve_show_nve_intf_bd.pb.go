/*
Copyright 2019 Cisco Systems

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: nve_show_nve_intf_bd.proto

package cisco_ios_xr_tunnel_nve_oper_nve_interfaces_interface

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type NveShowNveIntfBd_KEYS struct {
	InterfaceName        string   `protobuf:"bytes,1,opt,name=interface_name,json=interfaceName,proto3" json:"interface_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NveShowNveIntfBd_KEYS) Reset()         { *m = NveShowNveIntfBd_KEYS{} }
func (m *NveShowNveIntfBd_KEYS) String() string { return proto.CompactTextString(m) }
func (*NveShowNveIntfBd_KEYS) ProtoMessage()    {}
func (*NveShowNveIntfBd_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a6ada6d217a9d34, []int{0}
}

func (m *NveShowNveIntfBd_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NveShowNveIntfBd_KEYS.Unmarshal(m, b)
}
func (m *NveShowNveIntfBd_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NveShowNveIntfBd_KEYS.Marshal(b, m, deterministic)
}
func (m *NveShowNveIntfBd_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NveShowNveIntfBd_KEYS.Merge(m, src)
}
func (m *NveShowNveIntfBd_KEYS) XXX_Size() int {
	return xxx_messageInfo_NveShowNveIntfBd_KEYS.Size(m)
}
func (m *NveShowNveIntfBd_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_NveShowNveIntfBd_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_NveShowNveIntfBd_KEYS proto.InternalMessageInfo

func (m *NveShowNveIntfBd_KEYS) GetInterfaceName() string {
	if m != nil {
		return m.InterfaceName
	}
	return ""
}

type NveShowNveIntfBd struct {
	InterfaceNameXr            string   `protobuf:"bytes,50,opt,name=interface_name_xr,json=interfaceNameXr,proto3" json:"interface_name_xr,omitempty"`
	State                      string   `protobuf:"bytes,51,opt,name=state,proto3" json:"state,omitempty"`
	AdminState                 string   `protobuf:"bytes,52,opt,name=admin_state,json=adminState,proto3" json:"admin_state,omitempty"`
	Flags                      uint32   `protobuf:"varint,53,opt,name=flags,proto3" json:"flags,omitempty"`
	Encap                      string   `protobuf:"bytes,54,opt,name=encap,proto3" json:"encap,omitempty"`
	SourceInterfaceName        string   `protobuf:"bytes,55,opt,name=source_interface_name,json=sourceInterfaceName,proto3" json:"source_interface_name,omitempty"`
	SourceIpv4Address          string   `protobuf:"bytes,56,opt,name=source_ipv4_address,json=sourceIpv4Address,proto3" json:"source_ipv4_address,omitempty"`
	IfHandle                   uint64   `protobuf:"varint,57,opt,name=if_handle,json=ifHandle,proto3" json:"if_handle,omitempty"`
	SourceState                string   `protobuf:"bytes,58,opt,name=source_state,json=sourceState,proto3" json:"source_state,omitempty"`
	UdpPort                    uint32   `protobuf:"varint,59,opt,name=udp_port,json=udpPort,proto3" json:"udp_port,omitempty"`
	AnyCastSourceInterfaceName string   `protobuf:"bytes,60,opt,name=any_cast_source_interface_name,json=anyCastSourceInterfaceName,proto3" json:"any_cast_source_interface_name,omitempty"`
	AnyCastSourceIpv4Address   string   `protobuf:"bytes,61,opt,name=any_cast_source_ipv4_address,json=anyCastSourceIpv4Address,proto3" json:"any_cast_source_ipv4_address,omitempty"`
	AnyCastSourceState         string   `protobuf:"bytes,62,opt,name=any_cast_source_state,json=anyCastSourceState,proto3" json:"any_cast_source_state,omitempty"`
	SyncMcastIpv4Address       string   `protobuf:"bytes,63,opt,name=sync_mcast_ipv4_address,json=syncMcastIpv4Address,proto3" json:"sync_mcast_ipv4_address,omitempty"`
	SyncMcastFlags             uint32   `protobuf:"varint,64,opt,name=sync_mcast_flags,json=syncMcastFlags,proto3" json:"sync_mcast_flags,omitempty"`
	XXX_NoUnkeyedLiteral       struct{} `json:"-"`
	XXX_unrecognized           []byte   `json:"-"`
	XXX_sizecache              int32    `json:"-"`
}

func (m *NveShowNveIntfBd) Reset()         { *m = NveShowNveIntfBd{} }
func (m *NveShowNveIntfBd) String() string { return proto.CompactTextString(m) }
func (*NveShowNveIntfBd) ProtoMessage()    {}
func (*NveShowNveIntfBd) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a6ada6d217a9d34, []int{1}
}

func (m *NveShowNveIntfBd) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NveShowNveIntfBd.Unmarshal(m, b)
}
func (m *NveShowNveIntfBd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NveShowNveIntfBd.Marshal(b, m, deterministic)
}
func (m *NveShowNveIntfBd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NveShowNveIntfBd.Merge(m, src)
}
func (m *NveShowNveIntfBd) XXX_Size() int {
	return xxx_messageInfo_NveShowNveIntfBd.Size(m)
}
func (m *NveShowNveIntfBd) XXX_DiscardUnknown() {
	xxx_messageInfo_NveShowNveIntfBd.DiscardUnknown(m)
}

var xxx_messageInfo_NveShowNveIntfBd proto.InternalMessageInfo

func (m *NveShowNveIntfBd) GetInterfaceNameXr() string {
	if m != nil {
		return m.InterfaceNameXr
	}
	return ""
}

func (m *NveShowNveIntfBd) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *NveShowNveIntfBd) GetAdminState() string {
	if m != nil {
		return m.AdminState
	}
	return ""
}

func (m *NveShowNveIntfBd) GetFlags() uint32 {
	if m != nil {
		return m.Flags
	}
	return 0
}

func (m *NveShowNveIntfBd) GetEncap() string {
	if m != nil {
		return m.Encap
	}
	return ""
}

func (m *NveShowNveIntfBd) GetSourceInterfaceName() string {
	if m != nil {
		return m.SourceInterfaceName
	}
	return ""
}

func (m *NveShowNveIntfBd) GetSourceIpv4Address() string {
	if m != nil {
		return m.SourceIpv4Address
	}
	return ""
}

func (m *NveShowNveIntfBd) GetIfHandle() uint64 {
	if m != nil {
		return m.IfHandle
	}
	return 0
}

func (m *NveShowNveIntfBd) GetSourceState() string {
	if m != nil {
		return m.SourceState
	}
	return ""
}

func (m *NveShowNveIntfBd) GetUdpPort() uint32 {
	if m != nil {
		return m.UdpPort
	}
	return 0
}

func (m *NveShowNveIntfBd) GetAnyCastSourceInterfaceName() string {
	if m != nil {
		return m.AnyCastSourceInterfaceName
	}
	return ""
}

func (m *NveShowNveIntfBd) GetAnyCastSourceIpv4Address() string {
	if m != nil {
		return m.AnyCastSourceIpv4Address
	}
	return ""
}

func (m *NveShowNveIntfBd) GetAnyCastSourceState() string {
	if m != nil {
		return m.AnyCastSourceState
	}
	return ""
}

func (m *NveShowNveIntfBd) GetSyncMcastIpv4Address() string {
	if m != nil {
		return m.SyncMcastIpv4Address
	}
	return ""
}

func (m *NveShowNveIntfBd) GetSyncMcastFlags() uint32 {
	if m != nil {
		return m.SyncMcastFlags
	}
	return 0
}

func init() {
	proto.RegisterType((*NveShowNveIntfBd_KEYS)(nil), "cisco_ios_xr_tunnel_nve_oper.nve.interfaces.interface.nve_show_nve_intf_bd_KEYS")
	proto.RegisterType((*NveShowNveIntfBd)(nil), "cisco_ios_xr_tunnel_nve_oper.nve.interfaces.interface.nve_show_nve_intf_bd")
}

func init() { proto.RegisterFile("nve_show_nve_intf_bd.proto", fileDescriptor_8a6ada6d217a9d34) }

var fileDescriptor_8a6ada6d217a9d34 = []byte{
	// 418 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x93, 0x5f, 0x6f, 0xd3, 0x30,
	0x14, 0xc5, 0x15, 0x69, 0x83, 0xed, 0x8e, 0x0d, 0xe6, 0x65, 0xc2, 0x1b, 0x08, 0xca, 0x24, 0xa4,
	0x88, 0x87, 0x48, 0x6c, 0x2d, 0xff, 0x19, 0x30, 0x04, 0x02, 0x21, 0x10, 0x6a, 0x5f, 0xe0, 0xe9,
	0xca, 0x4b, 0x1c, 0x16, 0xa9, 0xb1, 0x2d, 0xdb, 0x09, 0xeb, 0x77, 0xe7, 0x01, 0xe5, 0xba, 0x94,
	0x04, 0xf2, 0xe6, 0x7b, 0xcf, 0x39, 0x3f, 0xfb, 0xb4, 0x0a, 0x1c, 0xaa, 0x46, 0xa2, 0xbb, 0xd0,
	0x3f, 0xb1, 0x3d, 0x94, 0xca, 0x17, 0x78, 0x9e, 0xa7, 0xc6, 0x6a, 0xaf, 0xd9, 0x24, 0x2b, 0x5d,
	0xa6, 0xb1, 0xd4, 0x0e, 0x2f, 0x2d, 0xfa, 0x5a, 0x29, 0x39, 0x27, 0x9b, 0x36, 0xd2, 0xa6, 0xaa,
	0x91, 0x69, 0xa9, 0xbc, 0xb4, 0x85, 0xc8, 0xa4, 0xfb, 0x7b, 0x3c, 0x3a, 0x83, 0x83, 0x21, 0x28,
	0x7e, 0x7a, 0xf7, 0x7d, 0xc6, 0xee, 0xc3, 0xce, 0xca, 0x89, 0x4a, 0x54, 0x92, 0x47, 0xa3, 0x28,
	0xd9, 0x9c, 0x6e, 0xaf, 0xb6, 0x5f, 0x44, 0x25, 0x8f, 0x7e, 0xad, 0x41, 0x3c, 0x04, 0x61, 0x0f,
	0x60, 0xb7, 0x9f, 0xc7, 0x4b, 0xcb, 0x8f, 0x09, 0x71, 0xbd, 0x87, 0xf8, 0x66, 0x59, 0x0c, 0xeb,
	0xce, 0x0b, 0x2f, 0xf9, 0x09, 0xe9, 0x61, 0x60, 0x77, 0x61, 0x4b, 0xe4, 0x55, 0xa9, 0x30, 0x68,
	0x63, 0xd2, 0x80, 0x56, 0x33, 0x32, 0xc4, 0xb0, 0x5e, 0xcc, 0xc5, 0x0f, 0xc7, 0x27, 0xa3, 0x28,
	0xd9, 0x9e, 0x86, 0xa1, 0xdd, 0x4a, 0x95, 0x09, 0xc3, 0x1f, 0x05, 0x18, 0x0d, 0xec, 0x18, 0xf6,
	0x9d, 0xae, 0x6d, 0x46, 0x0f, 0xec, 0xb6, 0x7a, 0x4c, 0xae, 0xbd, 0x20, 0x7e, 0xec, 0x3e, 0x8c,
	0xa5, 0xb0, 0xf7, 0x27, 0x63, 0x9a, 0x31, 0x8a, 0x3c, 0xb7, 0xd2, 0x39, 0xfe, 0x84, 0x12, 0xbb,
	0xcb, 0x84, 0x69, 0xc6, 0x6f, 0x82, 0xc0, 0x6e, 0xc1, 0x66, 0x59, 0xe0, 0x85, 0x50, 0xf9, 0x5c,
	0xf2, 0xa7, 0xa3, 0x28, 0x59, 0x9b, 0x6e, 0x94, 0xc5, 0x07, 0x9a, 0xd9, 0x3d, 0xb8, 0xb6, 0x84,
	0x85, 0x3a, 0xcf, 0x88, 0xb2, 0x15, 0x76, 0xa1, 0xcf, 0x01, 0x6c, 0xd4, 0xb9, 0x41, 0xa3, 0xad,
	0xe7, 0xcf, 0xa9, 0xd2, 0xd5, 0x3a, 0x37, 0x5f, 0xb5, 0xf5, 0xec, 0x0c, 0xee, 0x08, 0xb5, 0xc0,
	0x4c, 0x38, 0x8f, 0xc3, 0x3d, 0x5e, 0x10, 0xef, 0x50, 0xa8, 0xc5, 0x5b, 0xe1, 0xfc, 0x6c, 0xa0,
	0xce, 0x29, 0xdc, 0xfe, 0x8f, 0xd1, 0xed, 0xf5, 0x92, 0x08, 0xbc, 0x4f, 0xe8, 0xd4, 0x7b, 0x08,
	0xfb, 0xff, 0xe6, 0x43, 0x95, 0x53, 0x0a, 0xb2, 0x5e, 0x30, 0x34, 0x9a, 0xc0, 0x4d, 0xb7, 0x50,
	0x19, 0x56, 0x14, 0xea, 0xdd, 0xf6, 0x8a, 0x42, 0x71, 0x2b, 0x7f, 0x6e, 0xd5, 0xee, 0x4d, 0x09,
	0xdc, 0xe8, 0xc4, 0xc2, 0x7f, 0xfc, 0x9a, 0x7e, 0x90, 0x9d, 0x95, 0xff, 0x7d, 0xbb, 0x3d, 0xbf,
	0x42, 0x1f, 0xc0, 0xc9, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0xd1, 0x83, 0xe4, 0x84, 0x1e, 0x03,
	0x00, 0x00,
}
