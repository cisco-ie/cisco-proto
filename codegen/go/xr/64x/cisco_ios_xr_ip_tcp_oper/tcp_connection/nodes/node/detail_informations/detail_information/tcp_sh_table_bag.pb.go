/*
Copyright 2019 Cisco Systems

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: tcp_sh_table_bag.proto

package cisco_ios_xr_ip_tcp_oper_tcp_connection_nodes_node_detail_informations_detail_information

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type TcpShTableBag_KEYS struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	PcbId                string   `protobuf:"bytes,2,opt,name=pcb_id,json=pcbId,proto3" json:"pcb_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TcpShTableBag_KEYS) Reset()         { *m = TcpShTableBag_KEYS{} }
func (m *TcpShTableBag_KEYS) String() string { return proto.CompactTextString(m) }
func (*TcpShTableBag_KEYS) ProtoMessage()    {}
func (*TcpShTableBag_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb3b1b24b7c4375a, []int{0}
}

func (m *TcpShTableBag_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TcpShTableBag_KEYS.Unmarshal(m, b)
}
func (m *TcpShTableBag_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TcpShTableBag_KEYS.Marshal(b, m, deterministic)
}
func (m *TcpShTableBag_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TcpShTableBag_KEYS.Merge(m, src)
}
func (m *TcpShTableBag_KEYS) XXX_Size() int {
	return xxx_messageInfo_TcpShTableBag_KEYS.Size(m)
}
func (m *TcpShTableBag_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_TcpShTableBag_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_TcpShTableBag_KEYS proto.InternalMessageInfo

func (m *TcpShTableBag_KEYS) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *TcpShTableBag_KEYS) GetPcbId() string {
	if m != nil {
		return m.PcbId
	}
	return ""
}

type TcpAddressType struct {
	AfName               string   `protobuf:"bytes,1,opt,name=af_name,json=afName,proto3" json:"af_name,omitempty"`
	Ipv4Address          string   `protobuf:"bytes,2,opt,name=ipv4_address,json=ipv4Address,proto3" json:"ipv4_address,omitempty"`
	Ipv6Address          string   `protobuf:"bytes,3,opt,name=ipv6_address,json=ipv6Address,proto3" json:"ipv6_address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TcpAddressType) Reset()         { *m = TcpAddressType{} }
func (m *TcpAddressType) String() string { return proto.CompactTextString(m) }
func (*TcpAddressType) ProtoMessage()    {}
func (*TcpAddressType) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb3b1b24b7c4375a, []int{1}
}

func (m *TcpAddressType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TcpAddressType.Unmarshal(m, b)
}
func (m *TcpAddressType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TcpAddressType.Marshal(b, m, deterministic)
}
func (m *TcpAddressType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TcpAddressType.Merge(m, src)
}
func (m *TcpAddressType) XXX_Size() int {
	return xxx_messageInfo_TcpAddressType.Size(m)
}
func (m *TcpAddressType) XXX_DiscardUnknown() {
	xxx_messageInfo_TcpAddressType.DiscardUnknown(m)
}

var xxx_messageInfo_TcpAddressType proto.InternalMessageInfo

func (m *TcpAddressType) GetAfName() string {
	if m != nil {
		return m.AfName
	}
	return ""
}

func (m *TcpAddressType) GetIpv4Address() string {
	if m != nil {
		return m.Ipv4Address
	}
	return ""
}

func (m *TcpAddressType) GetIpv6Address() string {
	if m != nil {
		return m.Ipv6Address
	}
	return ""
}

type TcpTimerBag_ struct {
	TimerType            string   `protobuf:"bytes,1,opt,name=timer_type,json=timerType,proto3" json:"timer_type,omitempty"`
	TimerActivations     uint32   `protobuf:"varint,2,opt,name=timer_activations,json=timerActivations,proto3" json:"timer_activations,omitempty"`
	TimerExpirations     uint32   `protobuf:"varint,3,opt,name=timer_expirations,json=timerExpirations,proto3" json:"timer_expirations,omitempty"`
	TimerNextActivation  uint32   `protobuf:"varint,4,opt,name=timer_next_activation,json=timerNextActivation,proto3" json:"timer_next_activation,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TcpTimerBag_) Reset()         { *m = TcpTimerBag_{} }
func (m *TcpTimerBag_) String() string { return proto.CompactTextString(m) }
func (*TcpTimerBag_) ProtoMessage()    {}
func (*TcpTimerBag_) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb3b1b24b7c4375a, []int{2}
}

func (m *TcpTimerBag_) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TcpTimerBag_.Unmarshal(m, b)
}
func (m *TcpTimerBag_) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TcpTimerBag_.Marshal(b, m, deterministic)
}
func (m *TcpTimerBag_) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TcpTimerBag_.Merge(m, src)
}
func (m *TcpTimerBag_) XXX_Size() int {
	return xxx_messageInfo_TcpTimerBag_.Size(m)
}
func (m *TcpTimerBag_) XXX_DiscardUnknown() {
	xxx_messageInfo_TcpTimerBag_.DiscardUnknown(m)
}

var xxx_messageInfo_TcpTimerBag_ proto.InternalMessageInfo

func (m *TcpTimerBag_) GetTimerType() string {
	if m != nil {
		return m.TimerType
	}
	return ""
}

func (m *TcpTimerBag_) GetTimerActivations() uint32 {
	if m != nil {
		return m.TimerActivations
	}
	return 0
}

func (m *TcpTimerBag_) GetTimerExpirations() uint32 {
	if m != nil {
		return m.TimerExpirations
	}
	return 0
}

func (m *TcpTimerBag_) GetTimerNextActivation() uint32 {
	if m != nil {
		return m.TimerNextActivation
	}
	return 0
}

type TcpSockOptionsBag_ struct {
	Debug                bool     `protobuf:"varint,1,opt,name=debug,proto3" json:"debug,omitempty"`
	AcceptConnection     bool     `protobuf:"varint,2,opt,name=accept_connection,json=acceptConnection,proto3" json:"accept_connection,omitempty"`
	ReuseAddress         bool     `protobuf:"varint,3,opt,name=reuse_address,json=reuseAddress,proto3" json:"reuse_address,omitempty"`
	KeepAlive            bool     `protobuf:"varint,4,opt,name=keep_alive,json=keepAlive,proto3" json:"keep_alive,omitempty"`
	DontRoute            bool     `protobuf:"varint,5,opt,name=dont_route,json=dontRoute,proto3" json:"dont_route,omitempty"`
	Broadcast            bool     `protobuf:"varint,6,opt,name=broadcast,proto3" json:"broadcast,omitempty"`
	UseLoopback          bool     `protobuf:"varint,7,opt,name=use_loopback,json=useLoopback,proto3" json:"use_loopback,omitempty"`
	Linger               bool     `protobuf:"varint,8,opt,name=linger,proto3" json:"linger,omitempty"`
	OutOfBandInline      bool     `protobuf:"varint,9,opt,name=out_of_band_inline,json=outOfBandInline,proto3" json:"out_of_band_inline,omitempty"`
	ReusePort            bool     `protobuf:"varint,10,opt,name=reuse_port,json=reusePort,proto3" json:"reuse_port,omitempty"`
	NonblockingIo        bool     `protobuf:"varint,11,opt,name=nonblocking_io,json=nonblockingIo,proto3" json:"nonblocking_io,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TcpSockOptionsBag_) Reset()         { *m = TcpSockOptionsBag_{} }
func (m *TcpSockOptionsBag_) String() string { return proto.CompactTextString(m) }
func (*TcpSockOptionsBag_) ProtoMessage()    {}
func (*TcpSockOptionsBag_) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb3b1b24b7c4375a, []int{3}
}

func (m *TcpSockOptionsBag_) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TcpSockOptionsBag_.Unmarshal(m, b)
}
func (m *TcpSockOptionsBag_) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TcpSockOptionsBag_.Marshal(b, m, deterministic)
}
func (m *TcpSockOptionsBag_) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TcpSockOptionsBag_.Merge(m, src)
}
func (m *TcpSockOptionsBag_) XXX_Size() int {
	return xxx_messageInfo_TcpSockOptionsBag_.Size(m)
}
func (m *TcpSockOptionsBag_) XXX_DiscardUnknown() {
	xxx_messageInfo_TcpSockOptionsBag_.DiscardUnknown(m)
}

var xxx_messageInfo_TcpSockOptionsBag_ proto.InternalMessageInfo

func (m *TcpSockOptionsBag_) GetDebug() bool {
	if m != nil {
		return m.Debug
	}
	return false
}

func (m *TcpSockOptionsBag_) GetAcceptConnection() bool {
	if m != nil {
		return m.AcceptConnection
	}
	return false
}

func (m *TcpSockOptionsBag_) GetReuseAddress() bool {
	if m != nil {
		return m.ReuseAddress
	}
	return false
}

func (m *TcpSockOptionsBag_) GetKeepAlive() bool {
	if m != nil {
		return m.KeepAlive
	}
	return false
}

func (m *TcpSockOptionsBag_) GetDontRoute() bool {
	if m != nil {
		return m.DontRoute
	}
	return false
}

func (m *TcpSockOptionsBag_) GetBroadcast() bool {
	if m != nil {
		return m.Broadcast
	}
	return false
}

func (m *TcpSockOptionsBag_) GetUseLoopback() bool {
	if m != nil {
		return m.UseLoopback
	}
	return false
}

func (m *TcpSockOptionsBag_) GetLinger() bool {
	if m != nil {
		return m.Linger
	}
	return false
}

func (m *TcpSockOptionsBag_) GetOutOfBandInline() bool {
	if m != nil {
		return m.OutOfBandInline
	}
	return false
}

func (m *TcpSockOptionsBag_) GetReusePort() bool {
	if m != nil {
		return m.ReusePort
	}
	return false
}

func (m *TcpSockOptionsBag_) GetNonblockingIo() bool {
	if m != nil {
		return m.NonblockingIo
	}
	return false
}

type TcpSockStatesBag_ struct {
	NoFileDescriptorReference bool     `protobuf:"varint,1,opt,name=no_file_descriptor_reference,json=noFileDescriptorReference,proto3" json:"no_file_descriptor_reference,omitempty"`
	IsConnected               bool     `protobuf:"varint,2,opt,name=is_connected,json=isConnected,proto3" json:"is_connected,omitempty"`
	IsConnecting              bool     `protobuf:"varint,3,opt,name=is_connecting,json=isConnecting,proto3" json:"is_connecting,omitempty"`
	IsDisconnecting           bool     `protobuf:"varint,4,opt,name=is_disconnecting,json=isDisconnecting,proto3" json:"is_disconnecting,omitempty"`
	CantSendMore              bool     `protobuf:"varint,5,opt,name=cant_send_more,json=cantSendMore,proto3" json:"cant_send_more,omitempty"`
	CantReceiveMore           bool     `protobuf:"varint,6,opt,name=cant_receive_more,json=cantReceiveMore,proto3" json:"cant_receive_more,omitempty"`
	ReceivedAtMark            bool     `protobuf:"varint,7,opt,name=received_at_mark,json=receivedAtMark,proto3" json:"received_at_mark,omitempty"`
	Privileged                bool     `protobuf:"varint,8,opt,name=privileged,proto3" json:"privileged,omitempty"`
	BlockClose                bool     `protobuf:"varint,9,opt,name=block_close,json=blockClose,proto3" json:"block_close,omitempty"`
	AsyncIoNotify             bool     `protobuf:"varint,10,opt,name=async_io_notify,json=asyncIoNotify,proto3" json:"async_io_notify,omitempty"`
	IsConfirming              bool     `protobuf:"varint,11,opt,name=is_confirming,json=isConfirming,proto3" json:"is_confirming,omitempty"`
	IsSolock                  bool     `protobuf:"varint,12,opt,name=is_solock,json=isSolock,proto3" json:"is_solock,omitempty"`
	IsDetached                bool     `protobuf:"varint,13,opt,name=is_detached,json=isDetached,proto3" json:"is_detached,omitempty"`
	BlockReceive              bool     `protobuf:"varint,14,opt,name=block_receive,json=blockReceive,proto3" json:"block_receive,omitempty"`
	BlockSend                 bool     `protobuf:"varint,15,opt,name=block_send,json=blockSend,proto3" json:"block_send,omitempty"`
	XXX_NoUnkeyedLiteral      struct{} `json:"-"`
	XXX_unrecognized          []byte   `json:"-"`
	XXX_sizecache             int32    `json:"-"`
}

func (m *TcpSockStatesBag_) Reset()         { *m = TcpSockStatesBag_{} }
func (m *TcpSockStatesBag_) String() string { return proto.CompactTextString(m) }
func (*TcpSockStatesBag_) ProtoMessage()    {}
func (*TcpSockStatesBag_) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb3b1b24b7c4375a, []int{4}
}

func (m *TcpSockStatesBag_) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TcpSockStatesBag_.Unmarshal(m, b)
}
func (m *TcpSockStatesBag_) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TcpSockStatesBag_.Marshal(b, m, deterministic)
}
func (m *TcpSockStatesBag_) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TcpSockStatesBag_.Merge(m, src)
}
func (m *TcpSockStatesBag_) XXX_Size() int {
	return xxx_messageInfo_TcpSockStatesBag_.Size(m)
}
func (m *TcpSockStatesBag_) XXX_DiscardUnknown() {
	xxx_messageInfo_TcpSockStatesBag_.DiscardUnknown(m)
}

var xxx_messageInfo_TcpSockStatesBag_ proto.InternalMessageInfo

func (m *TcpSockStatesBag_) GetNoFileDescriptorReference() bool {
	if m != nil {
		return m.NoFileDescriptorReference
	}
	return false
}

func (m *TcpSockStatesBag_) GetIsConnected() bool {
	if m != nil {
		return m.IsConnected
	}
	return false
}

func (m *TcpSockStatesBag_) GetIsConnecting() bool {
	if m != nil {
		return m.IsConnecting
	}
	return false
}

func (m *TcpSockStatesBag_) GetIsDisconnecting() bool {
	if m != nil {
		return m.IsDisconnecting
	}
	return false
}

func (m *TcpSockStatesBag_) GetCantSendMore() bool {
	if m != nil {
		return m.CantSendMore
	}
	return false
}

func (m *TcpSockStatesBag_) GetCantReceiveMore() bool {
	if m != nil {
		return m.CantReceiveMore
	}
	return false
}

func (m *TcpSockStatesBag_) GetReceivedAtMark() bool {
	if m != nil {
		return m.ReceivedAtMark
	}
	return false
}

func (m *TcpSockStatesBag_) GetPrivileged() bool {
	if m != nil {
		return m.Privileged
	}
	return false
}

func (m *TcpSockStatesBag_) GetBlockClose() bool {
	if m != nil {
		return m.BlockClose
	}
	return false
}

func (m *TcpSockStatesBag_) GetAsyncIoNotify() bool {
	if m != nil {
		return m.AsyncIoNotify
	}
	return false
}

func (m *TcpSockStatesBag_) GetIsConfirming() bool {
	if m != nil {
		return m.IsConfirming
	}
	return false
}

func (m *TcpSockStatesBag_) GetIsSolock() bool {
	if m != nil {
		return m.IsSolock
	}
	return false
}

func (m *TcpSockStatesBag_) GetIsDetached() bool {
	if m != nil {
		return m.IsDetached
	}
	return false
}

func (m *TcpSockStatesBag_) GetBlockReceive() bool {
	if m != nil {
		return m.BlockReceive
	}
	return false
}

func (m *TcpSockStatesBag_) GetBlockSend() bool {
	if m != nil {
		return m.BlockSend
	}
	return false
}

type TcpConnFeaturesBag_ struct {
	SelectiveAck             bool     `protobuf:"varint,1,opt,name=selective_ack,json=selectiveAck,proto3" json:"selective_ack,omitempty"`
	Md5                      bool     `protobuf:"varint,2,opt,name=md5,proto3" json:"md5,omitempty"`
	Timestamps               bool     `protobuf:"varint,3,opt,name=timestamps,proto3" json:"timestamps,omitempty"`
	WindowScaling            bool     `protobuf:"varint,4,opt,name=window_scaling,json=windowScaling,proto3" json:"window_scaling,omitempty"`
	Nagle                    bool     `protobuf:"varint,5,opt,name=nagle,proto3" json:"nagle,omitempty"`
	GiveupTimer              bool     `protobuf:"varint,6,opt,name=giveup_timer,json=giveupTimer,proto3" json:"giveup_timer,omitempty"`
	ConnectionKeepAliveTimer bool     `protobuf:"varint,7,opt,name=connection_keep_alive_timer,json=connectionKeepAliveTimer,proto3" json:"connection_keep_alive_timer,omitempty"`
	PathMtuDiscovery         bool     `protobuf:"varint,8,opt,name=path_mtu_discovery,json=pathMtuDiscovery,proto3" json:"path_mtu_discovery,omitempty"`
	MssCisco                 bool     `protobuf:"varint,9,opt,name=mss_cisco,json=mssCisco,proto3" json:"mss_cisco,omitempty"`
	XXX_NoUnkeyedLiteral     struct{} `json:"-"`
	XXX_unrecognized         []byte   `json:"-"`
	XXX_sizecache            int32    `json:"-"`
}

func (m *TcpConnFeaturesBag_) Reset()         { *m = TcpConnFeaturesBag_{} }
func (m *TcpConnFeaturesBag_) String() string { return proto.CompactTextString(m) }
func (*TcpConnFeaturesBag_) ProtoMessage()    {}
func (*TcpConnFeaturesBag_) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb3b1b24b7c4375a, []int{5}
}

func (m *TcpConnFeaturesBag_) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TcpConnFeaturesBag_.Unmarshal(m, b)
}
func (m *TcpConnFeaturesBag_) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TcpConnFeaturesBag_.Marshal(b, m, deterministic)
}
func (m *TcpConnFeaturesBag_) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TcpConnFeaturesBag_.Merge(m, src)
}
func (m *TcpConnFeaturesBag_) XXX_Size() int {
	return xxx_messageInfo_TcpConnFeaturesBag_.Size(m)
}
func (m *TcpConnFeaturesBag_) XXX_DiscardUnknown() {
	xxx_messageInfo_TcpConnFeaturesBag_.DiscardUnknown(m)
}

var xxx_messageInfo_TcpConnFeaturesBag_ proto.InternalMessageInfo

func (m *TcpConnFeaturesBag_) GetSelectiveAck() bool {
	if m != nil {
		return m.SelectiveAck
	}
	return false
}

func (m *TcpConnFeaturesBag_) GetMd5() bool {
	if m != nil {
		return m.Md5
	}
	return false
}

func (m *TcpConnFeaturesBag_) GetTimestamps() bool {
	if m != nil {
		return m.Timestamps
	}
	return false
}

func (m *TcpConnFeaturesBag_) GetWindowScaling() bool {
	if m != nil {
		return m.WindowScaling
	}
	return false
}

func (m *TcpConnFeaturesBag_) GetNagle() bool {
	if m != nil {
		return m.Nagle
	}
	return false
}

func (m *TcpConnFeaturesBag_) GetGiveupTimer() bool {
	if m != nil {
		return m.GiveupTimer
	}
	return false
}

func (m *TcpConnFeaturesBag_) GetConnectionKeepAliveTimer() bool {
	if m != nil {
		return m.ConnectionKeepAliveTimer
	}
	return false
}

func (m *TcpConnFeaturesBag_) GetPathMtuDiscovery() bool {
	if m != nil {
		return m.PathMtuDiscovery
	}
	return false
}

func (m *TcpConnFeaturesBag_) GetMssCisco() bool {
	if m != nil {
		return m.MssCisco
	}
	return false
}

type TcpConnStatesBag_ struct {
	NagleWait            bool     `protobuf:"varint,1,opt,name=nagle_wait,json=nagleWait,proto3" json:"nagle_wait,omitempty"`
	AckNeeded            bool     `protobuf:"varint,2,opt,name=ack_needed,json=ackNeeded,proto3" json:"ack_needed,omitempty"`
	FinSent              bool     `protobuf:"varint,3,opt,name=fin_sent,json=finSent,proto3" json:"fin_sent,omitempty"`
	Probing              bool     `protobuf:"varint,4,opt,name=probing,proto3" json:"probing,omitempty"`
	NeedPush             bool     `protobuf:"varint,5,opt,name=need_push,json=needPush,proto3" json:"need_push,omitempty"`
	Pushed               bool     `protobuf:"varint,6,opt,name=pushed,proto3" json:"pushed,omitempty"`
	InSynCache           bool     `protobuf:"varint,7,opt,name=in_syn_cache,json=inSynCache,proto3" json:"in_syn_cache,omitempty"`
	PathMtuAger          bool     `protobuf:"varint,8,opt,name=path_mtu_ager,json=pathMtuAger,proto3" json:"path_mtu_ager,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TcpConnStatesBag_) Reset()         { *m = TcpConnStatesBag_{} }
func (m *TcpConnStatesBag_) String() string { return proto.CompactTextString(m) }
func (*TcpConnStatesBag_) ProtoMessage()    {}
func (*TcpConnStatesBag_) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb3b1b24b7c4375a, []int{6}
}

func (m *TcpConnStatesBag_) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TcpConnStatesBag_.Unmarshal(m, b)
}
func (m *TcpConnStatesBag_) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TcpConnStatesBag_.Marshal(b, m, deterministic)
}
func (m *TcpConnStatesBag_) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TcpConnStatesBag_.Merge(m, src)
}
func (m *TcpConnStatesBag_) XXX_Size() int {
	return xxx_messageInfo_TcpConnStatesBag_.Size(m)
}
func (m *TcpConnStatesBag_) XXX_DiscardUnknown() {
	xxx_messageInfo_TcpConnStatesBag_.DiscardUnknown(m)
}

var xxx_messageInfo_TcpConnStatesBag_ proto.InternalMessageInfo

func (m *TcpConnStatesBag_) GetNagleWait() bool {
	if m != nil {
		return m.NagleWait
	}
	return false
}

func (m *TcpConnStatesBag_) GetAckNeeded() bool {
	if m != nil {
		return m.AckNeeded
	}
	return false
}

func (m *TcpConnStatesBag_) GetFinSent() bool {
	if m != nil {
		return m.FinSent
	}
	return false
}

func (m *TcpConnStatesBag_) GetProbing() bool {
	if m != nil {
		return m.Probing
	}
	return false
}

func (m *TcpConnStatesBag_) GetNeedPush() bool {
	if m != nil {
		return m.NeedPush
	}
	return false
}

func (m *TcpConnStatesBag_) GetPushed() bool {
	if m != nil {
		return m.Pushed
	}
	return false
}

func (m *TcpConnStatesBag_) GetInSynCache() bool {
	if m != nil {
		return m.InSynCache
	}
	return false
}

func (m *TcpConnStatesBag_) GetPathMtuAger() bool {
	if m != nil {
		return m.PathMtuAger
	}
	return false
}

type SackblkBag_ struct {
	Start                uint32   `protobuf:"varint,1,opt,name=start,proto3" json:"start,omitempty"`
	End                  uint32   `protobuf:"varint,2,opt,name=end,proto3" json:"end,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SackblkBag_) Reset()         { *m = SackblkBag_{} }
func (m *SackblkBag_) String() string { return proto.CompactTextString(m) }
func (*SackblkBag_) ProtoMessage()    {}
func (*SackblkBag_) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb3b1b24b7c4375a, []int{7}
}

func (m *SackblkBag_) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SackblkBag_.Unmarshal(m, b)
}
func (m *SackblkBag_) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SackblkBag_.Marshal(b, m, deterministic)
}
func (m *SackblkBag_) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SackblkBag_.Merge(m, src)
}
func (m *SackblkBag_) XXX_Size() int {
	return xxx_messageInfo_SackblkBag_.Size(m)
}
func (m *SackblkBag_) XXX_DiscardUnknown() {
	xxx_messageInfo_SackblkBag_.DiscardUnknown(m)
}

var xxx_messageInfo_SackblkBag_ proto.InternalMessageInfo

func (m *SackblkBag_) GetStart() uint32 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *SackblkBag_) GetEnd() uint32 {
	if m != nil {
		return m.End
	}
	return 0
}

type SackholeBag_ struct {
	Start                uint32   `protobuf:"varint,1,opt,name=start,proto3" json:"start,omitempty"`
	End                  uint32   `protobuf:"varint,2,opt,name=end,proto3" json:"end,omitempty"`
	DuplicatedAck        uint32   `protobuf:"varint,3,opt,name=duplicated_ack,json=duplicatedAck,proto3" json:"duplicated_ack,omitempty"`
	Retransmitted        uint32   `protobuf:"varint,4,opt,name=retransmitted,proto3" json:"retransmitted,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SackholeBag_) Reset()         { *m = SackholeBag_{} }
func (m *SackholeBag_) String() string { return proto.CompactTextString(m) }
func (*SackholeBag_) ProtoMessage()    {}
func (*SackholeBag_) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb3b1b24b7c4375a, []int{8}
}

func (m *SackholeBag_) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SackholeBag_.Unmarshal(m, b)
}
func (m *SackholeBag_) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SackholeBag_.Marshal(b, m, deterministic)
}
func (m *SackholeBag_) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SackholeBag_.Merge(m, src)
}
func (m *SackholeBag_) XXX_Size() int {
	return xxx_messageInfo_SackholeBag_.Size(m)
}
func (m *SackholeBag_) XXX_DiscardUnknown() {
	xxx_messageInfo_SackholeBag_.DiscardUnknown(m)
}

var xxx_messageInfo_SackholeBag_ proto.InternalMessageInfo

func (m *SackholeBag_) GetStart() uint32 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *SackholeBag_) GetEnd() uint32 {
	if m != nil {
		return m.End
	}
	return 0
}

func (m *SackholeBag_) GetDuplicatedAck() uint32 {
	if m != nil {
		return m.DuplicatedAck
	}
	return 0
}

func (m *SackholeBag_) GetRetransmitted() uint32 {
	if m != nil {
		return m.Retransmitted
	}
	return 0
}

type TcpSockbufStatesBag_ struct {
	Locked               bool     `protobuf:"varint,1,opt,name=locked,proto3" json:"locked,omitempty"`
	WaitingForLock       bool     `protobuf:"varint,2,opt,name=waiting_for_lock,json=waitingForLock,proto3" json:"waiting_for_lock,omitempty"`
	WaitingForData       bool     `protobuf:"varint,3,opt,name=waiting_for_data,json=waitingForData,proto3" json:"waiting_for_data,omitempty"`
	InputSelect          bool     `protobuf:"varint,4,opt,name=input_select,json=inputSelect,proto3" json:"input_select,omitempty"`
	AsyncIo              bool     `protobuf:"varint,5,opt,name=async_io,json=asyncIo,proto3" json:"async_io,omitempty"`
	NotInterruptible     bool     `protobuf:"varint,6,opt,name=not_interruptible,json=notInterruptible,proto3" json:"not_interruptible,omitempty"`
	IoTimerSet           bool     `protobuf:"varint,7,opt,name=io_timer_set,json=ioTimerSet,proto3" json:"io_timer_set,omitempty"`
	DelayedWakeup        bool     `protobuf:"varint,8,opt,name=delayed_wakeup,json=delayedWakeup,proto3" json:"delayed_wakeup,omitempty"`
	Wakeup               bool     `protobuf:"varint,9,opt,name=wakeup,proto3" json:"wakeup,omitempty"`
	ConnectWakeup        bool     `protobuf:"varint,10,opt,name=connect_wakeup,json=connectWakeup,proto3" json:"connect_wakeup,omitempty"`
	OutputSelect         bool     `protobuf:"varint,11,opt,name=output_select,json=outputSelect,proto3" json:"output_select,omitempty"`
	OutOfBandSelect      bool     `protobuf:"varint,12,opt,name=out_of_band_select,json=outOfBandSelect,proto3" json:"out_of_band_select,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TcpSockbufStatesBag_) Reset()         { *m = TcpSockbufStatesBag_{} }
func (m *TcpSockbufStatesBag_) String() string { return proto.CompactTextString(m) }
func (*TcpSockbufStatesBag_) ProtoMessage()    {}
func (*TcpSockbufStatesBag_) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb3b1b24b7c4375a, []int{9}
}

func (m *TcpSockbufStatesBag_) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TcpSockbufStatesBag_.Unmarshal(m, b)
}
func (m *TcpSockbufStatesBag_) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TcpSockbufStatesBag_.Marshal(b, m, deterministic)
}
func (m *TcpSockbufStatesBag_) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TcpSockbufStatesBag_.Merge(m, src)
}
func (m *TcpSockbufStatesBag_) XXX_Size() int {
	return xxx_messageInfo_TcpSockbufStatesBag_.Size(m)
}
func (m *TcpSockbufStatesBag_) XXX_DiscardUnknown() {
	xxx_messageInfo_TcpSockbufStatesBag_.DiscardUnknown(m)
}

var xxx_messageInfo_TcpSockbufStatesBag_ proto.InternalMessageInfo

func (m *TcpSockbufStatesBag_) GetLocked() bool {
	if m != nil {
		return m.Locked
	}
	return false
}

func (m *TcpSockbufStatesBag_) GetWaitingForLock() bool {
	if m != nil {
		return m.WaitingForLock
	}
	return false
}

func (m *TcpSockbufStatesBag_) GetWaitingForData() bool {
	if m != nil {
		return m.WaitingForData
	}
	return false
}

func (m *TcpSockbufStatesBag_) GetInputSelect() bool {
	if m != nil {
		return m.InputSelect
	}
	return false
}

func (m *TcpSockbufStatesBag_) GetAsyncIo() bool {
	if m != nil {
		return m.AsyncIo
	}
	return false
}

func (m *TcpSockbufStatesBag_) GetNotInterruptible() bool {
	if m != nil {
		return m.NotInterruptible
	}
	return false
}

func (m *TcpSockbufStatesBag_) GetIoTimerSet() bool {
	if m != nil {
		return m.IoTimerSet
	}
	return false
}

func (m *TcpSockbufStatesBag_) GetDelayedWakeup() bool {
	if m != nil {
		return m.DelayedWakeup
	}
	return false
}

func (m *TcpSockbufStatesBag_) GetWakeup() bool {
	if m != nil {
		return m.Wakeup
	}
	return false
}

func (m *TcpSockbufStatesBag_) GetConnectWakeup() bool {
	if m != nil {
		return m.ConnectWakeup
	}
	return false
}

func (m *TcpSockbufStatesBag_) GetOutputSelect() bool {
	if m != nil {
		return m.OutputSelect
	}
	return false
}

func (m *TcpSockbufStatesBag_) GetOutOfBandSelect() bool {
	if m != nil {
		return m.OutOfBandSelect
	}
	return false
}

type TcpShTableBag struct {
	AddressFamily                 string                `protobuf:"bytes,50,opt,name=address_family,json=addressFamily,proto3" json:"address_family,omitempty"`
	Pcb                           uint64                `protobuf:"varint,51,opt,name=pcb,proto3" json:"pcb,omitempty"`
	So                            uint64                `protobuf:"varint,52,opt,name=so,proto3" json:"so,omitempty"`
	Tcpcb                         uint64                `protobuf:"varint,53,opt,name=tcpcb,proto3" json:"tcpcb,omitempty"`
	VrfId                         uint32                `protobuf:"varint,54,opt,name=vrf_id,json=vrfId,proto3" json:"vrf_id,omitempty"`
	ConnectionState               string                `protobuf:"bytes,55,opt,name=connection_state,json=connectionState,proto3" json:"connection_state,omitempty"`
	EstablishedTime               uint32                `protobuf:"varint,56,opt,name=established_time,json=establishedTime,proto3" json:"established_time,omitempty"`
	LocalPid                      uint32                `protobuf:"varint,57,opt,name=local_pid,json=localPid,proto3" json:"local_pid,omitempty"`
	LocalAddress                  *TcpAddressType       `protobuf:"bytes,58,opt,name=local_address,json=localAddress,proto3" json:"local_address,omitempty"`
	ForeignAddress                *TcpAddressType       `protobuf:"bytes,59,opt,name=foreign_address,json=foreignAddress,proto3" json:"foreign_address,omitempty"`
	LocalPort                     uint32                `protobuf:"varint,60,opt,name=local_port,json=localPort,proto3" json:"local_port,omitempty"`
	ForeignPort                   uint32                `protobuf:"varint,61,opt,name=foreign_port,json=foreignPort,proto3" json:"foreign_port,omitempty"`
	PacketPriority                string                `protobuf:"bytes,62,opt,name=packet_priority,json=packetPriority,proto3" json:"packet_priority,omitempty"`
	PacketTos                     uint32                `protobuf:"varint,63,opt,name=packet_tos,json=packetTos,proto3" json:"packet_tos,omitempty"`
	PacketTtl                     uint32                `protobuf:"varint,64,opt,name=packet_ttl,json=packetTtl,proto3" json:"packet_ttl,omitempty"`
	HashIndex                     uint32                `protobuf:"varint,65,opt,name=hash_index,json=hashIndex,proto3" json:"hash_index,omitempty"`
	CurrentReceiveQueueSize       uint32                `protobuf:"varint,66,opt,name=current_receive_queue_size,json=currentReceiveQueueSize,proto3" json:"current_receive_queue_size,omitempty"`
	MaxReceiveQueueSize           uint32                `protobuf:"varint,67,opt,name=max_receive_queue_size,json=maxReceiveQueueSize,proto3" json:"max_receive_queue_size,omitempty"`
	CurrentSendQueueSize          uint32                `protobuf:"varint,68,opt,name=current_send_queue_size,json=currentSendQueueSize,proto3" json:"current_send_queue_size,omitempty"`
	MaxSendQueueSize              uint32                `protobuf:"varint,69,opt,name=max_send_queue_size,json=maxSendQueueSize,proto3" json:"max_send_queue_size,omitempty"`
	CurrentReceiveQueuePacketSize uint32                `protobuf:"varint,70,opt,name=current_receive_queue_packet_size,json=currentReceiveQueuePacketSize,proto3" json:"current_receive_queue_packet_size,omitempty"`
	MaxReceiveQueuePacketSize     uint32                `protobuf:"varint,71,opt,name=max_receive_queue_packet_size,json=maxReceiveQueuePacketSize,proto3" json:"max_receive_queue_packet_size,omitempty"`
	SaveQueueSize                 uint32                `protobuf:"varint,72,opt,name=save_queue_size,json=saveQueueSize,proto3" json:"save_queue_size,omitempty"`
	SendInitialSequenceNum        uint32                `protobuf:"varint,73,opt,name=send_initial_sequence_num,json=sendInitialSequenceNum,proto3" json:"send_initial_sequence_num,omitempty"`
	SendUnackSequenceNum          uint32                `protobuf:"varint,74,opt,name=send_unack_sequence_num,json=sendUnackSequenceNum,proto3" json:"send_unack_sequence_num,omitempty"`
	SendNextSequenceNum           uint32                `protobuf:"varint,75,opt,name=send_next_sequence_num,json=sendNextSequenceNum,proto3" json:"send_next_sequence_num,omitempty"`
	SendMaxSequenceNum            uint32                `protobuf:"varint,76,opt,name=send_max_sequence_num,json=sendMaxSequenceNum,proto3" json:"send_max_sequence_num,omitempty"`
	SendWindowSize                uint32                `protobuf:"varint,77,opt,name=send_window_size,json=sendWindowSize,proto3" json:"send_window_size,omitempty"`
	SendCongestionWindowSize      uint32                `protobuf:"varint,78,opt,name=send_congestion_window_size,json=sendCongestionWindowSize,proto3" json:"send_congestion_window_size,omitempty"`
	ReceiveInitialSequenceNum     uint32                `protobuf:"varint,79,opt,name=receive_initial_sequence_num,json=receiveInitialSequenceNum,proto3" json:"receive_initial_sequence_num,omitempty"`
	ReceiveNextSequenceNum        uint32                `protobuf:"varint,80,opt,name=receive_next_sequence_num,json=receiveNextSequenceNum,proto3" json:"receive_next_sequence_num,omitempty"`
	ReceiveAdvWindowSize          uint32                `protobuf:"varint,81,opt,name=receive_adv_window_size,json=receiveAdvWindowSize,proto3" json:"receive_adv_window_size,omitempty"`
	ReceiveWindowSize             uint32                `protobuf:"varint,82,opt,name=receive_window_size,json=receiveWindowSize,proto3" json:"receive_window_size,omitempty"`
	Mss                           uint32                `protobuf:"varint,83,opt,name=mss,proto3" json:"mss,omitempty"`
	PeerMss                       uint32                `protobuf:"varint,84,opt,name=peer_mss,json=peerMss,proto3" json:"peer_mss,omitempty"`
	Srtt                          uint32                `protobuf:"varint,85,opt,name=srtt,proto3" json:"srtt,omitempty"`
	Rtto                          uint32                `protobuf:"varint,86,opt,name=rtto,proto3" json:"rtto,omitempty"`
	Krtt                          uint32                `protobuf:"varint,87,opt,name=krtt,proto3" json:"krtt,omitempty"`
	Srtv                          uint32                `protobuf:"varint,88,opt,name=srtv,proto3" json:"srtv,omitempty"`
	MinRtt                        uint32                `protobuf:"varint,89,opt,name=min_rtt,json=minRtt,proto3" json:"min_rtt,omitempty"`
	MaxRtt                        uint32                `protobuf:"varint,90,opt,name=max_rtt,json=maxRtt,proto3" json:"max_rtt,omitempty"`
	Retries                       uint32                `protobuf:"varint,91,opt,name=retries,proto3" json:"retries,omitempty"`
	AckHoldTime                   uint32                `protobuf:"varint,92,opt,name=ack_hold_time,json=ackHoldTime,proto3" json:"ack_hold_time,omitempty"`
	GiveupTime                    uint32                `protobuf:"varint,93,opt,name=giveup_time,json=giveupTime,proto3" json:"giveup_time,omitempty"`
	KeepAliveTime                 uint32                `protobuf:"varint,94,opt,name=keep_alive_time,json=keepAliveTime,proto3" json:"keep_alive_time,omitempty"`
	SynWaitTime                   uint32                `protobuf:"varint,95,opt,name=syn_wait_time,json=synWaitTime,proto3" json:"syn_wait_time,omitempty"`
	Timer                         []*TcpTimerBag_       `protobuf:"bytes,96,rep,name=timer,proto3" json:"timer,omitempty"`
	SocketOptionFlags             *TcpSockOptionsBag_   `protobuf:"bytes,97,opt,name=socket_option_flags,json=socketOptionFlags,proto3" json:"socket_option_flags,omitempty"`
	SocketStateFlags              *TcpSockStatesBag_    `protobuf:"bytes,98,opt,name=socket_state_flags,json=socketStateFlags,proto3" json:"socket_state_flags,omitempty"`
	FeatureFlags                  *TcpConnFeaturesBag_  `protobuf:"bytes,99,opt,name=feature_flags,json=featureFlags,proto3" json:"feature_flags,omitempty"`
	StateFlags                    *TcpConnStatesBag_    `protobuf:"bytes,100,opt,name=state_flags,json=stateFlags,proto3" json:"state_flags,omitempty"`
	RequestFlags                  *TcpConnFeaturesBag_  `protobuf:"bytes,101,opt,name=request_flags,json=requestFlags,proto3" json:"request_flags,omitempty"`
	RxsyNaclname                  []string              `protobuf:"bytes,102,rep,name=rxsy_naclname,json=rxsyNaclname,proto3" json:"rxsy_naclname,omitempty"`
	SoftError                     int32                 `protobuf:"zigzag32,103,opt,name=soft_error,json=softError,proto3" json:"soft_error,omitempty"`
	SockError                     int32                 `protobuf:"zigzag32,104,opt,name=sock_error,json=sockError,proto3" json:"sock_error,omitempty"`
	IsRetransForever              bool                  `protobuf:"varint,105,opt,name=is_retrans_forever,json=isRetransForever,proto3" json:"is_retrans_forever,omitempty"`
	MinMss                        uint32                `protobuf:"varint,106,opt,name=min_mss,json=minMss,proto3" json:"min_mss,omitempty"`
	MaxMss                        uint32                `protobuf:"varint,107,opt,name=max_mss,json=maxMss,proto3" json:"max_mss,omitempty"`
	ConnectRetries                uint32                `protobuf:"varint,108,opt,name=connect_retries,json=connectRetries,proto3" json:"connect_retries,omitempty"`
	ConnectRetryInterval          uint32                `protobuf:"varint,109,opt,name=connect_retry_interval,json=connectRetryInterval,proto3" json:"connect_retry_interval,omitempty"`
	ReceiveWindowScale            uint32                `protobuf:"varint,110,opt,name=receive_window_scale,json=receiveWindowScale,proto3" json:"receive_window_scale,omitempty"`
	SendWindowScale               uint32                `protobuf:"varint,111,opt,name=send_window_scale,json=sendWindowScale,proto3" json:"send_window_scale,omitempty"`
	RequestReceiveWindowScale     uint32                `protobuf:"varint,112,opt,name=request_receive_window_scale,json=requestReceiveWindowScale,proto3" json:"request_receive_window_scale,omitempty"`
	RqstSendWndScale              uint32                `protobuf:"varint,113,opt,name=rqst_send_wnd_scale,json=rqstSendWndScale,proto3" json:"rqst_send_wnd_scale,omitempty"`
	TimeStampRecent               uint32                `protobuf:"varint,114,opt,name=time_stamp_recent,json=timeStampRecent,proto3" json:"time_stamp_recent,omitempty"`
	TimeStampRecentAge            uint32                `protobuf:"varint,115,opt,name=time_stamp_recent_age,json=timeStampRecentAge,proto3" json:"time_stamp_recent_age,omitempty"`
	LastAckSent                   uint32                `protobuf:"varint,116,opt,name=last_ack_sent,json=lastAckSent,proto3" json:"last_ack_sent,omitempty"`
	SackBlk                       []*SackblkBag_        `protobuf:"bytes,117,rep,name=sack_blk,json=sackBlk,proto3" json:"sack_blk,omitempty"`
	SendSackHole                  []*SackholeBag_       `protobuf:"bytes,118,rep,name=send_sack_hole,json=sendSackHole,proto3" json:"send_sack_hole,omitempty"`
	ReceiveBufStateFlags          *TcpSockbufStatesBag_ `protobuf:"bytes,119,opt,name=receive_buf_state_flags,json=receiveBufStateFlags,proto3" json:"receive_buf_state_flags,omitempty"`
	SendBufStateFlags             *TcpSockbufStatesBag_ `protobuf:"bytes,120,opt,name=send_buf_state_flags,json=sendBufStateFlags,proto3" json:"send_buf_state_flags,omitempty"`
	SendbufLowwat                 uint32                `protobuf:"varint,121,opt,name=sendbuf_lowwat,json=sendbufLowwat,proto3" json:"sendbuf_lowwat,omitempty"`
	RecvbufLowwat                 uint32                `protobuf:"varint,122,opt,name=recvbuf_lowwat,json=recvbufLowwat,proto3" json:"recvbuf_lowwat,omitempty"`
	SendbufHiwat                  uint32                `protobuf:"varint,123,opt,name=sendbuf_hiwat,json=sendbufHiwat,proto3" json:"sendbuf_hiwat,omitempty"`
	RecvbufHiwat                  uint32                `protobuf:"varint,124,opt,name=recvbuf_hiwat,json=recvbufHiwat,proto3" json:"recvbuf_hiwat,omitempty"`
	SendbufNotifyThresh           uint32                `protobuf:"varint,125,opt,name=sendbuf_notify_thresh,json=sendbufNotifyThresh,proto3" json:"sendbuf_notify_thresh,omitempty"`
	RecvbufDatasize               uint32                `protobuf:"varint,126,opt,name=recvbuf_datasize,json=recvbufDatasize,proto3" json:"recvbuf_datasize,omitempty"`
	QueueLength                   uint32                `protobuf:"varint,127,opt,name=queue_length,json=queueLength,proto3" json:"queue_length,omitempty"`
	QueueZeroLength               uint32                `protobuf:"varint,128,opt,name=queue_zero_length,json=queueZeroLength,proto3" json:"queue_zero_length,omitempty"`
	QueueLimit                    uint32                `protobuf:"varint,129,opt,name=queue_limit,json=queueLimit,proto3" json:"queue_limit,omitempty"`
	SocketError                   uint32                `protobuf:"varint,130,opt,name=socket_error,json=socketError,proto3" json:"socket_error,omitempty"`
	AutoRearm                     uint32                `protobuf:"varint,131,opt,name=auto_rearm,json=autoRearm,proto3" json:"auto_rearm,omitempty"`
	SendPduCount                  uint32                `protobuf:"varint,132,opt,name=send_pdu_count,json=sendPduCount,proto3" json:"send_pdu_count,omitempty"`
	OutputIfhandle                uint32                `protobuf:"varint,133,opt,name=output_ifhandle,json=outputIfhandle,proto3" json:"output_ifhandle,omitempty"`
	FibPdCtxSize                  uint32                `protobuf:"varint,134,opt,name=fib_pd_ctx_size,json=fibPdCtxSize,proto3" json:"fib_pd_ctx_size,omitempty"`
	FibPdCtx                      []uint32              `protobuf:"varint,135,rep,packed,name=fib_pd_ctx,json=fibPdCtx,proto3" json:"fib_pd_ctx,omitempty"`
	NumLabels                     uint32                `protobuf:"varint,136,opt,name=num_labels,json=numLabels,proto3" json:"num_labels,omitempty"`
	FibLabelOutput                []uint32              `protobuf:"varint,137,rep,packed,name=fib_label_output,json=fibLabelOutput,proto3" json:"fib_label_output,omitempty"`
	LocalAppInstance              uint32                `protobuf:"varint,138,opt,name=local_app_instance,json=localAppInstance,proto3" json:"local_app_instance,omitempty"`
	XXX_NoUnkeyedLiteral          struct{}              `json:"-"`
	XXX_unrecognized              []byte                `json:"-"`
	XXX_sizecache                 int32                 `json:"-"`
}

func (m *TcpShTableBag) Reset()         { *m = TcpShTableBag{} }
func (m *TcpShTableBag) String() string { return proto.CompactTextString(m) }
func (*TcpShTableBag) ProtoMessage()    {}
func (*TcpShTableBag) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb3b1b24b7c4375a, []int{10}
}

func (m *TcpShTableBag) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TcpShTableBag.Unmarshal(m, b)
}
func (m *TcpShTableBag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TcpShTableBag.Marshal(b, m, deterministic)
}
func (m *TcpShTableBag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TcpShTableBag.Merge(m, src)
}
func (m *TcpShTableBag) XXX_Size() int {
	return xxx_messageInfo_TcpShTableBag.Size(m)
}
func (m *TcpShTableBag) XXX_DiscardUnknown() {
	xxx_messageInfo_TcpShTableBag.DiscardUnknown(m)
}

var xxx_messageInfo_TcpShTableBag proto.InternalMessageInfo

func (m *TcpShTableBag) GetAddressFamily() string {
	if m != nil {
		return m.AddressFamily
	}
	return ""
}

func (m *TcpShTableBag) GetPcb() uint64 {
	if m != nil {
		return m.Pcb
	}
	return 0
}

func (m *TcpShTableBag) GetSo() uint64 {
	if m != nil {
		return m.So
	}
	return 0
}

func (m *TcpShTableBag) GetTcpcb() uint64 {
	if m != nil {
		return m.Tcpcb
	}
	return 0
}

func (m *TcpShTableBag) GetVrfId() uint32 {
	if m != nil {
		return m.VrfId
	}
	return 0
}

func (m *TcpShTableBag) GetConnectionState() string {
	if m != nil {
		return m.ConnectionState
	}
	return ""
}

func (m *TcpShTableBag) GetEstablishedTime() uint32 {
	if m != nil {
		return m.EstablishedTime
	}
	return 0
}

func (m *TcpShTableBag) GetLocalPid() uint32 {
	if m != nil {
		return m.LocalPid
	}
	return 0
}

func (m *TcpShTableBag) GetLocalAddress() *TcpAddressType {
	if m != nil {
		return m.LocalAddress
	}
	return nil
}

func (m *TcpShTableBag) GetForeignAddress() *TcpAddressType {
	if m != nil {
		return m.ForeignAddress
	}
	return nil
}

func (m *TcpShTableBag) GetLocalPort() uint32 {
	if m != nil {
		return m.LocalPort
	}
	return 0
}

func (m *TcpShTableBag) GetForeignPort() uint32 {
	if m != nil {
		return m.ForeignPort
	}
	return 0
}

func (m *TcpShTableBag) GetPacketPriority() string {
	if m != nil {
		return m.PacketPriority
	}
	return ""
}

func (m *TcpShTableBag) GetPacketTos() uint32 {
	if m != nil {
		return m.PacketTos
	}
	return 0
}

func (m *TcpShTableBag) GetPacketTtl() uint32 {
	if m != nil {
		return m.PacketTtl
	}
	return 0
}

func (m *TcpShTableBag) GetHashIndex() uint32 {
	if m != nil {
		return m.HashIndex
	}
	return 0
}

func (m *TcpShTableBag) GetCurrentReceiveQueueSize() uint32 {
	if m != nil {
		return m.CurrentReceiveQueueSize
	}
	return 0
}

func (m *TcpShTableBag) GetMaxReceiveQueueSize() uint32 {
	if m != nil {
		return m.MaxReceiveQueueSize
	}
	return 0
}

func (m *TcpShTableBag) GetCurrentSendQueueSize() uint32 {
	if m != nil {
		return m.CurrentSendQueueSize
	}
	return 0
}

func (m *TcpShTableBag) GetMaxSendQueueSize() uint32 {
	if m != nil {
		return m.MaxSendQueueSize
	}
	return 0
}

func (m *TcpShTableBag) GetCurrentReceiveQueuePacketSize() uint32 {
	if m != nil {
		return m.CurrentReceiveQueuePacketSize
	}
	return 0
}

func (m *TcpShTableBag) GetMaxReceiveQueuePacketSize() uint32 {
	if m != nil {
		return m.MaxReceiveQueuePacketSize
	}
	return 0
}

func (m *TcpShTableBag) GetSaveQueueSize() uint32 {
	if m != nil {
		return m.SaveQueueSize
	}
	return 0
}

func (m *TcpShTableBag) GetSendInitialSequenceNum() uint32 {
	if m != nil {
		return m.SendInitialSequenceNum
	}
	return 0
}

func (m *TcpShTableBag) GetSendUnackSequenceNum() uint32 {
	if m != nil {
		return m.SendUnackSequenceNum
	}
	return 0
}

func (m *TcpShTableBag) GetSendNextSequenceNum() uint32 {
	if m != nil {
		return m.SendNextSequenceNum
	}
	return 0
}

func (m *TcpShTableBag) GetSendMaxSequenceNum() uint32 {
	if m != nil {
		return m.SendMaxSequenceNum
	}
	return 0
}

func (m *TcpShTableBag) GetSendWindowSize() uint32 {
	if m != nil {
		return m.SendWindowSize
	}
	return 0
}

func (m *TcpShTableBag) GetSendCongestionWindowSize() uint32 {
	if m != nil {
		return m.SendCongestionWindowSize
	}
	return 0
}

func (m *TcpShTableBag) GetReceiveInitialSequenceNum() uint32 {
	if m != nil {
		return m.ReceiveInitialSequenceNum
	}
	return 0
}

func (m *TcpShTableBag) GetReceiveNextSequenceNum() uint32 {
	if m != nil {
		return m.ReceiveNextSequenceNum
	}
	return 0
}

func (m *TcpShTableBag) GetReceiveAdvWindowSize() uint32 {
	if m != nil {
		return m.ReceiveAdvWindowSize
	}
	return 0
}

func (m *TcpShTableBag) GetReceiveWindowSize() uint32 {
	if m != nil {
		return m.ReceiveWindowSize
	}
	return 0
}

func (m *TcpShTableBag) GetMss() uint32 {
	if m != nil {
		return m.Mss
	}
	return 0
}

func (m *TcpShTableBag) GetPeerMss() uint32 {
	if m != nil {
		return m.PeerMss
	}
	return 0
}

func (m *TcpShTableBag) GetSrtt() uint32 {
	if m != nil {
		return m.Srtt
	}
	return 0
}

func (m *TcpShTableBag) GetRtto() uint32 {
	if m != nil {
		return m.Rtto
	}
	return 0
}

func (m *TcpShTableBag) GetKrtt() uint32 {
	if m != nil {
		return m.Krtt
	}
	return 0
}

func (m *TcpShTableBag) GetSrtv() uint32 {
	if m != nil {
		return m.Srtv
	}
	return 0
}

func (m *TcpShTableBag) GetMinRtt() uint32 {
	if m != nil {
		return m.MinRtt
	}
	return 0
}

func (m *TcpShTableBag) GetMaxRtt() uint32 {
	if m != nil {
		return m.MaxRtt
	}
	return 0
}

func (m *TcpShTableBag) GetRetries() uint32 {
	if m != nil {
		return m.Retries
	}
	return 0
}

func (m *TcpShTableBag) GetAckHoldTime() uint32 {
	if m != nil {
		return m.AckHoldTime
	}
	return 0
}

func (m *TcpShTableBag) GetGiveupTime() uint32 {
	if m != nil {
		return m.GiveupTime
	}
	return 0
}

func (m *TcpShTableBag) GetKeepAliveTime() uint32 {
	if m != nil {
		return m.KeepAliveTime
	}
	return 0
}

func (m *TcpShTableBag) GetSynWaitTime() uint32 {
	if m != nil {
		return m.SynWaitTime
	}
	return 0
}

func (m *TcpShTableBag) GetTimer() []*TcpTimerBag_ {
	if m != nil {
		return m.Timer
	}
	return nil
}

func (m *TcpShTableBag) GetSocketOptionFlags() *TcpSockOptionsBag_ {
	if m != nil {
		return m.SocketOptionFlags
	}
	return nil
}

func (m *TcpShTableBag) GetSocketStateFlags() *TcpSockStatesBag_ {
	if m != nil {
		return m.SocketStateFlags
	}
	return nil
}

func (m *TcpShTableBag) GetFeatureFlags() *TcpConnFeaturesBag_ {
	if m != nil {
		return m.FeatureFlags
	}
	return nil
}

func (m *TcpShTableBag) GetStateFlags() *TcpConnStatesBag_ {
	if m != nil {
		return m.StateFlags
	}
	return nil
}

func (m *TcpShTableBag) GetRequestFlags() *TcpConnFeaturesBag_ {
	if m != nil {
		return m.RequestFlags
	}
	return nil
}

func (m *TcpShTableBag) GetRxsyNaclname() []string {
	if m != nil {
		return m.RxsyNaclname
	}
	return nil
}

func (m *TcpShTableBag) GetSoftError() int32 {
	if m != nil {
		return m.SoftError
	}
	return 0
}

func (m *TcpShTableBag) GetSockError() int32 {
	if m != nil {
		return m.SockError
	}
	return 0
}

func (m *TcpShTableBag) GetIsRetransForever() bool {
	if m != nil {
		return m.IsRetransForever
	}
	return false
}

func (m *TcpShTableBag) GetMinMss() uint32 {
	if m != nil {
		return m.MinMss
	}
	return 0
}

func (m *TcpShTableBag) GetMaxMss() uint32 {
	if m != nil {
		return m.MaxMss
	}
	return 0
}

func (m *TcpShTableBag) GetConnectRetries() uint32 {
	if m != nil {
		return m.ConnectRetries
	}
	return 0
}

func (m *TcpShTableBag) GetConnectRetryInterval() uint32 {
	if m != nil {
		return m.ConnectRetryInterval
	}
	return 0
}

func (m *TcpShTableBag) GetReceiveWindowScale() uint32 {
	if m != nil {
		return m.ReceiveWindowScale
	}
	return 0
}

func (m *TcpShTableBag) GetSendWindowScale() uint32 {
	if m != nil {
		return m.SendWindowScale
	}
	return 0
}

func (m *TcpShTableBag) GetRequestReceiveWindowScale() uint32 {
	if m != nil {
		return m.RequestReceiveWindowScale
	}
	return 0
}

func (m *TcpShTableBag) GetRqstSendWndScale() uint32 {
	if m != nil {
		return m.RqstSendWndScale
	}
	return 0
}

func (m *TcpShTableBag) GetTimeStampRecent() uint32 {
	if m != nil {
		return m.TimeStampRecent
	}
	return 0
}

func (m *TcpShTableBag) GetTimeStampRecentAge() uint32 {
	if m != nil {
		return m.TimeStampRecentAge
	}
	return 0
}

func (m *TcpShTableBag) GetLastAckSent() uint32 {
	if m != nil {
		return m.LastAckSent
	}
	return 0
}

func (m *TcpShTableBag) GetSackBlk() []*SackblkBag_ {
	if m != nil {
		return m.SackBlk
	}
	return nil
}

func (m *TcpShTableBag) GetSendSackHole() []*SackholeBag_ {
	if m != nil {
		return m.SendSackHole
	}
	return nil
}

func (m *TcpShTableBag) GetReceiveBufStateFlags() *TcpSockbufStatesBag_ {
	if m != nil {
		return m.ReceiveBufStateFlags
	}
	return nil
}

func (m *TcpShTableBag) GetSendBufStateFlags() *TcpSockbufStatesBag_ {
	if m != nil {
		return m.SendBufStateFlags
	}
	return nil
}

func (m *TcpShTableBag) GetSendbufLowwat() uint32 {
	if m != nil {
		return m.SendbufLowwat
	}
	return 0
}

func (m *TcpShTableBag) GetRecvbufLowwat() uint32 {
	if m != nil {
		return m.RecvbufLowwat
	}
	return 0
}

func (m *TcpShTableBag) GetSendbufHiwat() uint32 {
	if m != nil {
		return m.SendbufHiwat
	}
	return 0
}

func (m *TcpShTableBag) GetRecvbufHiwat() uint32 {
	if m != nil {
		return m.RecvbufHiwat
	}
	return 0
}

func (m *TcpShTableBag) GetSendbufNotifyThresh() uint32 {
	if m != nil {
		return m.SendbufNotifyThresh
	}
	return 0
}

func (m *TcpShTableBag) GetRecvbufDatasize() uint32 {
	if m != nil {
		return m.RecvbufDatasize
	}
	return 0
}

func (m *TcpShTableBag) GetQueueLength() uint32 {
	if m != nil {
		return m.QueueLength
	}
	return 0
}

func (m *TcpShTableBag) GetQueueZeroLength() uint32 {
	if m != nil {
		return m.QueueZeroLength
	}
	return 0
}

func (m *TcpShTableBag) GetQueueLimit() uint32 {
	if m != nil {
		return m.QueueLimit
	}
	return 0
}

func (m *TcpShTableBag) GetSocketError() uint32 {
	if m != nil {
		return m.SocketError
	}
	return 0
}

func (m *TcpShTableBag) GetAutoRearm() uint32 {
	if m != nil {
		return m.AutoRearm
	}
	return 0
}

func (m *TcpShTableBag) GetSendPduCount() uint32 {
	if m != nil {
		return m.SendPduCount
	}
	return 0
}

func (m *TcpShTableBag) GetOutputIfhandle() uint32 {
	if m != nil {
		return m.OutputIfhandle
	}
	return 0
}

func (m *TcpShTableBag) GetFibPdCtxSize() uint32 {
	if m != nil {
		return m.FibPdCtxSize
	}
	return 0
}

func (m *TcpShTableBag) GetFibPdCtx() []uint32 {
	if m != nil {
		return m.FibPdCtx
	}
	return nil
}

func (m *TcpShTableBag) GetNumLabels() uint32 {
	if m != nil {
		return m.NumLabels
	}
	return 0
}

func (m *TcpShTableBag) GetFibLabelOutput() []uint32 {
	if m != nil {
		return m.FibLabelOutput
	}
	return nil
}

func (m *TcpShTableBag) GetLocalAppInstance() uint32 {
	if m != nil {
		return m.LocalAppInstance
	}
	return 0
}

func init() {
	proto.RegisterType((*TcpShTableBag_KEYS)(nil), "cisco_ios_xr_ip_tcp_oper.tcp_connection.nodes.node.detail_informations.detail_information.tcp_sh_table_bag_KEYS")
	proto.RegisterType((*TcpAddressType)(nil), "cisco_ios_xr_ip_tcp_oper.tcp_connection.nodes.node.detail_informations.detail_information.tcp_address_type")
	proto.RegisterType((*TcpTimerBag_)(nil), "cisco_ios_xr_ip_tcp_oper.tcp_connection.nodes.node.detail_informations.detail_information.tcp_timer_bag_")
	proto.RegisterType((*TcpSockOptionsBag_)(nil), "cisco_ios_xr_ip_tcp_oper.tcp_connection.nodes.node.detail_informations.detail_information.tcp_sock_options_bag_")
	proto.RegisterType((*TcpSockStatesBag_)(nil), "cisco_ios_xr_ip_tcp_oper.tcp_connection.nodes.node.detail_informations.detail_information.tcp_sock_states_bag_")
	proto.RegisterType((*TcpConnFeaturesBag_)(nil), "cisco_ios_xr_ip_tcp_oper.tcp_connection.nodes.node.detail_informations.detail_information.tcp_conn_features_bag_")
	proto.RegisterType((*TcpConnStatesBag_)(nil), "cisco_ios_xr_ip_tcp_oper.tcp_connection.nodes.node.detail_informations.detail_information.tcp_conn_states_bag_")
	proto.RegisterType((*SackblkBag_)(nil), "cisco_ios_xr_ip_tcp_oper.tcp_connection.nodes.node.detail_informations.detail_information.sackblk_bag_")
	proto.RegisterType((*SackholeBag_)(nil), "cisco_ios_xr_ip_tcp_oper.tcp_connection.nodes.node.detail_informations.detail_information.sackhole_bag_")
	proto.RegisterType((*TcpSockbufStatesBag_)(nil), "cisco_ios_xr_ip_tcp_oper.tcp_connection.nodes.node.detail_informations.detail_information.tcp_sockbuf_states_bag_")
	proto.RegisterType((*TcpShTableBag)(nil), "cisco_ios_xr_ip_tcp_oper.tcp_connection.nodes.node.detail_informations.detail_information.tcp_sh_table_bag")
}

func init() { proto.RegisterFile("tcp_sh_table_bag.proto", fileDescriptor_cb3b1b24b7c4375a) }

var fileDescriptor_cb3b1b24b7c4375a = []byte{
	// 2872 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x59, 0x5b, 0x73, 0x1c, 0xb7,
	0xb1, 0xae, 0x15, 0x25, 0x91, 0xc4, 0xee, 0x92, 0xd4, 0xe8, 0x06, 0x1d, 0x5b, 0x36, 0x4d, 0xf9,
	0x42, 0xdf, 0x54, 0xe7, 0x48, 0x96, 0xce, 0xf1, 0x71, 0x7c, 0xa1, 0x28, 0x29, 0x62, 0x2c, 0x51,
	0xf4, 0x52, 0x8e, 0x62, 0xe7, 0x82, 0x60, 0x67, 0xb0, 0xbb, 0xc8, 0xce, 0x02, 0x23, 0x00, 0xb3,
	0x24, 0x95, 0x8b, 0x13, 0xc7, 0xb9, 0x38, 0x0f, 0x29, 0x3f, 0xa4, 0xf2, 0x94, 0x54, 0xa5, 0x2a,
	0x4f, 0xf9, 0x11, 0xf9, 0x03, 0xf9, 0x01, 0xa9, 0xca, 0xbf, 0x49, 0x75, 0x37, 0x66, 0x77, 0x78,
	0x79, 0xc8, 0x8b, 0xe4, 0x17, 0xd6, 0xe2, 0xeb, 0xaf, 0x81, 0x9e, 0x6e, 0xa0, 0xbb, 0x01, 0xb2,
	0x73, 0x21, 0x2d, 0x84, 0x1f, 0x88, 0x20, 0xbb, 0xb9, 0x12, 0x5d, 0xd9, 0xbf, 0x5c, 0x38, 0x1b,
	0x6c, 0xf2, 0x49, 0xaa, 0x7d, 0x6a, 0x85, 0xb6, 0x5e, 0xec, 0x3a, 0xa1, 0x0b, 0x01, 0x3c, 0x5b,
	0x28, 0x77, 0x19, 0x7e, 0xa4, 0xd6, 0x18, 0x95, 0x06, 0x6d, 0xcd, 0x65, 0x63, 0x33, 0xe5, 0xf1,
	0xef, 0xe5, 0x4c, 0x05, 0xa9, 0x73, 0xa1, 0x4d, 0xcf, 0xba, 0x91, 0x04, 0xa9, 0x3f, 0x02, 0x5b,
	0x79, 0x8f, 0x9d, 0x3d, 0xb8, 0xa8, 0xf8, 0xf0, 0xd6, 0x27, 0xdb, 0xc9, 0x02, 0x3b, 0xa6, 0x33,
	0xde, 0x58, 0x6e, 0xac, 0xce, 0x77, 0x8e, 0xe9, 0x2c, 0x39, 0xcb, 0x4e, 0x16, 0x69, 0x57, 0xe8,
	0x8c, 0x1f, 0x43, 0xec, 0x44, 0x91, 0x76, 0x37, 0xb2, 0x95, 0x47, 0x6c, 0x09, 0xf4, 0x65, 0x96,
	0x39, 0xe5, 0xbd, 0x08, 0x7b, 0x85, 0x4a, 0xce, 0xb3, 0x59, 0xd9, 0x13, 0x46, 0x8e, 0x54, 0xd4,
	0x3f, 0x29, 0x7b, 0x9b, 0x72, 0xa4, 0x92, 0x17, 0x58, 0x4b, 0x17, 0xe3, 0xb7, 0x2a, 0x76, 0x9c,
	0xa9, 0x09, 0xd8, 0x1a, 0x41, 0x91, 0x72, 0x7d, 0x42, 0x99, 0x99, 0x50, 0xae, 0x47, 0xca, 0xca,
	0xdf, 0x1b, 0x6c, 0x01, 0xd6, 0x0c, 0x7a, 0xa4, 0x1c, 0x1a, 0x9c, 0x5c, 0x64, 0x8c, 0x46, 0xb0,
	0x7e, 0x5c, 0x74, 0x1e, 0x91, 0x07, 0x60, 0xd0, 0xeb, 0xec, 0x14, 0x89, 0x65, 0x1a, 0xf4, 0x98,
	0x9c, 0x81, 0x8b, 0xb7, 0x3b, 0x4b, 0x28, 0x58, 0x9b, 0xe2, 0x53, 0xb2, 0xda, 0x2d, 0xb4, 0x8b,
	0xe4, 0x99, 0x1a, 0xf9, 0xd6, 0x14, 0x4f, 0xae, 0xb0, 0xb3, 0x44, 0x36, 0x6a, 0x37, 0xd4, 0xa6,
	0xe7, 0xc7, 0x51, 0xe1, 0x34, 0x0a, 0x37, 0xd5, 0x6e, 0x98, 0xae, 0xb0, 0xf2, 0xe5, 0x4c, 0xf4,
	0xb9, 0x4d, 0x87, 0xc2, 0x16, 0x38, 0x11, 0x7d, 0xc6, 0x19, 0x76, 0x22, 0x53, 0xdd, 0xb2, 0x8f,
	0x5f, 0x30, 0xd7, 0xa1, 0x01, 0x18, 0x24, 0xd3, 0x54, 0x15, 0xa1, 0x16, 0x69, 0xb4, 0x7e, 0xae,
	0xb3, 0x44, 0x82, 0xf5, 0x09, 0x9e, 0x5c, 0x62, 0x6d, 0xa7, 0x4a, 0xaf, 0xf6, 0x39, 0x70, 0xae,
	0xd3, 0x42, 0xb0, 0x72, 0xf2, 0x45, 0xc6, 0x86, 0x4a, 0x15, 0x42, 0xe6, 0x7a, 0xac, 0xd0, 0xd4,
	0xb9, 0xce, 0x3c, 0x20, 0x6b, 0x00, 0x80, 0x38, 0xb3, 0x26, 0x08, 0x67, 0xcb, 0xa0, 0xf8, 0x09,
	0x12, 0x03, 0xd2, 0x01, 0x20, 0x79, 0x96, 0xcd, 0x77, 0x9d, 0x95, 0x59, 0x2a, 0x7d, 0xe0, 0x27,
	0x49, 0x3a, 0x01, 0x20, 0x80, 0xb0, 0x7c, 0x6e, 0x6d, 0xd1, 0x95, 0xe9, 0x90, 0xcf, 0x22, 0xa1,
	0x59, 0x7a, 0x75, 0x37, 0x42, 0xc9, 0x39, 0x76, 0x32, 0xd7, 0xa6, 0xaf, 0x1c, 0x9f, 0x43, 0x61,
	0x1c, 0x25, 0xaf, 0xb3, 0xc4, 0x96, 0x41, 0xd8, 0x9e, 0xe8, 0x4a, 0x93, 0x09, 0x6d, 0x72, 0x6d,
	0x14, 0x9f, 0x47, 0xce, 0xa2, 0x2d, 0xc3, 0xfd, 0xde, 0x0d, 0x69, 0xb2, 0x0d, 0x84, 0xc1, 0x48,
	0xfa, 0xd0, 0xc2, 0xba, 0xc0, 0x19, 0x99, 0x81, 0xc8, 0x96, 0x75, 0x21, 0x79, 0x89, 0x2d, 0x18,
	0x6b, 0xba, 0xb9, 0x4d, 0x87, 0xda, 0xf4, 0x85, 0xb6, 0xbc, 0x89, 0x94, 0x76, 0x0d, 0xdd, 0xb0,
	0x2b, 0xff, 0x3c, 0xce, 0xce, 0x4c, 0x62, 0xe1, 0x83, 0x0c, 0x2a, 0x86, 0xe2, 0x7d, 0xf6, 0xac,
	0xb1, 0xa2, 0xa7, 0x73, 0x25, 0x32, 0xe5, 0x53, 0xa7, 0x8b, 0x60, 0x9d, 0x70, 0xaa, 0xa7, 0x9c,
	0x32, 0xa9, 0x8a, 0x11, 0xba, 0x60, 0xec, 0x6d, 0x9d, 0xab, 0x9b, 0x13, 0x46, 0xa7, 0x22, 0xe0,
	0x46, 0xf6, 0x55, 0xc4, 0x54, 0x16, 0x03, 0xd6, 0xd4, 0x7e, 0xbd, 0x82, 0x20, 0x56, 0x53, 0x8a,
	0x36, 0xfd, 0x2a, 0x56, 0x13, 0x8e, 0x36, 0xfd, 0xe4, 0x55, 0xb6, 0xa4, 0xbd, 0xc8, 0x20, 0x01,
	0x4c, 0x78, 0x14, 0xb1, 0x45, 0xed, 0x6f, 0xd6, 0xe1, 0xe4, 0x45, 0xb6, 0x90, 0x4a, 0x13, 0x84,
	0x57, 0x26, 0x13, 0x23, 0xeb, 0xaa, 0xd8, 0xb5, 0x00, 0xdd, 0x56, 0x26, 0xbb, 0x67, 0x9d, 0x4a,
	0x5e, 0x63, 0xa7, 0x90, 0xe5, 0x54, 0xaa, 0xf4, 0x58, 0x11, 0x91, 0xc2, 0xb8, 0x08, 0x82, 0x0e,
	0xe1, 0xc8, 0x5d, 0x65, 0x4b, 0x91, 0x96, 0x09, 0x19, 0xc4, 0x48, 0xba, 0x2a, 0xa0, 0x0b, 0x15,
	0xbe, 0x16, 0xee, 0x49, 0x37, 0x4c, 0x9e, 0x63, 0xac, 0x70, 0x7a, 0xac, 0x73, 0xd5, 0x57, 0x59,
	0x8c, 0x6b, 0x0d, 0x49, 0x9e, 0x67, 0x4d, 0x74, 0xbb, 0x48, 0x73, 0xeb, 0xab, 0xa0, 0x32, 0x84,
	0xd6, 0x01, 0x49, 0x5e, 0x66, 0x8b, 0xd2, 0xef, 0x99, 0x54, 0x68, 0x2b, 0x8c, 0x0d, 0xba, 0xb7,
	0x17, 0x83, 0xda, 0x46, 0x78, 0xc3, 0x6e, 0x22, 0x38, 0x75, 0x5a, 0x4f, 0xbb, 0x11, 0x38, 0xa3,
	0x59, 0x73, 0x5a, 0xc4, 0x92, 0x67, 0xd8, 0xbc, 0xf6, 0xc2, 0x5b, 0x98, 0x9e, 0xb7, 0x90, 0x30,
	0xa7, 0xfd, 0x36, 0x8e, 0xc1, 0x14, 0xf0, 0xa8, 0x0a, 0x32, 0x1d, 0xa8, 0x8c, 0xb7, 0xc9, 0x14,
	0xed, 0x6f, 0x46, 0x04, 0x96, 0x20, 0x5b, 0xe3, 0x37, 0xf2, 0x05, 0x5a, 0x02, 0xc1, 0xe8, 0x1e,
	0xd8, 0x7f, 0x44, 0x02, 0x6f, 0xf3, 0xc5, 0x78, 0x0c, 0x00, 0x01, 0x4f, 0xaf, 0xfc, 0xeb, 0x18,
	0x65, 0x73, 0x08, 0x8f, 0xe8, 0x29, 0x19, 0x4a, 0x57, 0x6d, 0xad, 0x4b, 0xac, 0xed, 0x55, 0x0e,
	0x31, 0x1b, 0x2b, 0x01, 0x47, 0x84, 0xf6, 0x52, 0x6b, 0x02, 0xae, 0xa5, 0xc3, 0x64, 0x89, 0xcd,
	0x8c, 0xb2, 0x6b, 0x71, 0xd7, 0xc0, 0x4f, 0xf0, 0x30, 0x64, 0x13, 0x1f, 0xe4, 0xa8, 0xa8, 0x8e,
	0x75, 0x0d, 0x81, 0x1d, 0xbf, 0xa3, 0x4d, 0x66, 0x77, 0x84, 0x4f, 0x65, 0x3e, 0xdd, 0x26, 0x6d,
	0x42, 0xb7, 0x09, 0x84, 0x1c, 0x63, 0x64, 0x3f, 0xaf, 0xf6, 0x06, 0x0d, 0x60, 0xb7, 0xf6, 0xf5,
	0x58, 0x95, 0x31, 0xab, 0xc6, 0xfd, 0xd0, 0x24, 0xec, 0x01, 0x40, 0xc9, 0xbb, 0xec, 0x99, 0x69,
	0xfe, 0x11, 0xd3, 0xfc, 0x11, 0x35, 0x68, 0x5b, 0xf0, 0x29, 0xe5, 0xc3, 0x2a, 0x9f, 0x90, 0xfa,
	0x1b, 0x2c, 0x29, 0x64, 0x18, 0x88, 0x51, 0x28, 0x69, 0x37, 0x8f, 0x95, 0xdb, 0x8b, 0x1b, 0x65,
	0x09, 0x24, 0xf7, 0x42, 0x79, 0xb3, 0xc2, 0x21, 0x80, 0x23, 0xef, 0x05, 0xd6, 0xbd, 0xb8, 0x59,
	0xe6, 0x46, 0xde, 0xaf, 0xc3, 0x78, 0xe5, 0x8b, 0x63, 0x74, 0x68, 0xd1, 0xb7, 0xf5, 0x43, 0x7b,
	0x91, 0x31, 0xfc, 0x1c, 0xb1, 0x23, 0x75, 0x88, 0x6e, 0x9d, 0x47, 0xe4, 0xa1, 0xd4, 0x01, 0xc4,
	0x32, 0x1d, 0x0a, 0xa3, 0x54, 0x36, 0x39, 0x90, 0xf3, 0x32, 0x1d, 0x6e, 0x22, 0x90, 0x5c, 0x60,
	0x73, 0x3d, 0x6d, 0x20, 0x9e, 0x21, 0xba, 0x77, 0xb6, 0xa7, 0xcd, 0xb6, 0x32, 0x21, 0xe1, 0x6c,
	0xb6, 0x70, 0xb6, 0x3b, 0x75, 0x6a, 0x35, 0x04, 0x43, 0x61, 0x3e, 0x51, 0x94, 0x7e, 0x10, 0x5d,
	0x3a, 0x07, 0xc0, 0x56, 0xe9, 0x07, 0x90, 0xe8, 0x00, 0x57, 0x59, 0xf4, 0x67, 0x1c, 0x25, 0xcb,
	0xac, 0x05, 0x0b, 0xed, 0x19, 0x91, 0xc2, 0x8e, 0x8b, 0xbe, 0x63, 0xda, 0x6c, 0xef, 0x99, 0x75,
	0x40, 0x92, 0x15, 0xd6, 0x9e, 0x78, 0x4b, 0x4e, 0x33, 0x65, 0x33, 0x3a, 0x6a, 0xad, 0xaf, 0xdc,
	0xca, 0x75, 0xd6, 0xf2, 0x32, 0x1d, 0x76, 0xf3, 0xe1, 0xa4, 0x7a, 0xf8, 0x20, 0x1d, 0x7d, 0x78,
	0xbb, 0x43, 0x03, 0xd8, 0x48, 0xb0, 0x41, 0xa9, 0xda, 0xc1, 0xcf, 0x95, 0x2f, 0x1a, 0xac, 0x0d,
	0x8a, 0x03, 0x1b, 0xeb, 0xfd, 0x7f, 0xaa, 0x09, 0x5b, 0x2c, 0x2b, 0x8b, 0x5c, 0xa7, 0x32, 0x40,
	0x42, 0x48, 0x87, 0xb1, 0x2e, 0xb6, 0xa7, 0x28, 0xec, 0xdd, 0x17, 0xa1, 0x06, 0x05, 0x27, 0x8d,
	0x1f, 0xe9, 0x00, 0xb9, 0x8f, 0x8a, 0xe1, 0x7e, 0x70, 0xe5, 0x1f, 0x33, 0xec, 0x7c, 0x95, 0x7a,
	0xbb, 0x65, 0x6f, 0x5f, 0x20, 0xa1, 0x42, 0xd8, 0x74, 0xa8, 0xb2, 0x18, 0xc4, 0x38, 0x82, 0x7c,
	0x04, 0xa1, 0x85, 0x8c, 0xde, 0xb3, 0x4e, 0xe0, 0xf1, 0xa6, 0x38, 0x2e, 0x44, 0xfc, 0xb6, 0x75,
	0x77, 0xe1, 0x90, 0x1f, 0x60, 0x66, 0x32, 0xc8, 0x18, 0xd4, 0x1a, 0xf3, 0xa6, 0x0c, 0x12, 0x13,
	0xb5, 0x29, 0x4a, 0x48, 0x9b, 0x70, 0xfe, 0x62, 0x80, 0x9b, 0x88, 0x6d, 0x23, 0x04, 0x3b, 0xa3,
	0xca, 0x4d, 0x31, 0xc6, 0xb3, 0x31, 0x29, 0x41, 0x71, 0x36, 0x36, 0x08, 0x6d, 0x82, 0x72, 0xae,
	0x2c, 0x82, 0xee, 0xe6, 0x55, 0x36, 0x5d, 0x32, 0x36, 0x6c, 0xd4, 0x71, 0x8c, 0xbb, 0x8d, 0x7d,
	0x8b, 0x57, 0x61, 0x12, 0x77, 0x8b, 0x47, 0x64, 0x5b, 0x61, 0xd9, 0xca, 0x54, 0x2e, 0xf7, 0x54,
	0x26, 0x76, 0xe4, 0x50, 0x95, 0x45, 0x0c, 0x7c, 0x3b, 0xa2, 0x0f, 0x11, 0x04, 0xff, 0x44, 0x31,
	0x9d, 0x8d, 0x38, 0x02, 0xf5, 0x78, 0x00, 0x2b, 0xf5, 0x98, 0x43, 0x23, 0x1a, 0xd5, 0x2f, 0xb1,
	0xb6, 0x2d, 0x43, 0xed, 0x9b, 0x63, 0x0e, 0x25, 0x30, 0x7e, 0xf4, 0x81, 0x6a, 0x1c, 0x99, 0xad,
	0x03, 0xd5, 0x98, 0xc8, 0x2b, 0x7f, 0x7a, 0x99, 0xfa, 0xc0, 0x7a, 0x1f, 0x09, 0xd6, 0x54, 0x7d,
	0x61, 0x4f, 0x8e, 0x74, 0xbe, 0xc7, 0xaf, 0x60, 0x67, 0xd6, 0x8e, 0xe8, 0x6d, 0x04, 0x61, 0x9f,
	0x15, 0x69, 0x97, 0x5f, 0x5d, 0x6e, 0xac, 0x1e, 0xef, 0xc0, 0x4f, 0xe8, 0x3d, 0xbd, 0xe5, 0x6f,
	0x21, 0x70, 0xcc, 0x5b, 0xd8, 0x9f, 0x21, 0x05, 0xce, 0x35, 0x84, 0x68, 0x00, 0x1d, 0xe9, 0xd8,
	0xf5, 0xa0, 0x23, 0xbd, 0x4e, 0xdb, 0x76, 0xec, 0x7a, 0x1b, 0x19, 0x14, 0xcc, 0x5a, 0x9e, 0xc2,
	0x5d, 0xc5, 0xff, 0x17, 0xd7, 0x5d, 0x9c, 0xe2, 0xdb, 0x00, 0x03, 0x15, 0xb2, 0x67, 0x37, 0xd7,
	0x70, 0x2c, 0x31, 0x30, 0xfc, 0xff, 0x70, 0xae, 0xc5, 0x1a, 0x0e, 0xc1, 0x81, 0x73, 0x9e, 0xdb,
	0x54, 0xe6, 0xa2, 0xd0, 0x19, 0x7f, 0x1b, 0x39, 0x73, 0x08, 0x6c, 0xe9, 0x2c, 0xf9, 0xaa, 0xc1,
	0xda, 0x24, 0xad, 0xba, 0xae, 0xff, 0x5f, 0x6e, 0xac, 0x36, 0xaf, 0x0c, 0x2f, 0x3f, 0xb1, 0xc6,
	0xfd, 0xf2, 0xc1, 0xae, 0xbb, 0xd3, 0x42, 0x0b, 0xaa, 0x16, 0xef, 0x0f, 0x0d, 0xb6, 0xd8, 0xb3,
	0x4e, 0xe9, 0xbe, 0x99, 0x18, 0xf5, 0xce, 0xd3, 0x37, 0x6a, 0x21, 0xda, 0x50, 0xeb, 0x3c, 0xa3,
	0x1b, 0xa1, 0x6b, 0xfb, 0x06, 0xfa, 0x91, 0x1c, 0x8b, 0x5d, 0xdb, 0x0b, 0xac, 0x55, 0x19, 0x8d,
	0x84, 0x77, 0x91, 0xd0, 0x8c, 0x18, 0x52, 0x5e, 0x61, 0x8b, 0x85, 0x4c, 0x87, 0x2a, 0x88, 0xc2,
	0x69, 0xeb, 0x74, 0xd8, 0xe3, 0xef, 0x61, 0x74, 0x17, 0x08, 0xde, 0x8a, 0x28, 0x2c, 0x15, 0x89,
	0xc1, 0x7a, 0xfe, 0x3e, 0x2d, 0x45, 0xc8, 0x03, 0xeb, 0xeb, 0xe2, 0x90, 0xf3, 0x0f, 0xf6, 0x89,
	0x43, 0x0e, 0xe2, 0x81, 0xf4, 0x03, 0xa1, 0x4d, 0xa6, 0x76, 0xf9, 0x1a, 0x89, 0x01, 0xd9, 0x00,
	0x20, 0x79, 0x87, 0xfd, 0x57, 0x5a, 0x3a, 0xa7, 0x6a, 0x7d, 0xd4, 0xa3, 0x52, 0x95, 0x4a, 0x78,
	0xfd, 0x58, 0xf1, 0x1b, 0x48, 0x3f, 0x1f, 0x19, 0xb1, 0x63, 0xf8, 0x08, 0xe4, 0xdb, 0xfa, 0xb1,
	0x4a, 0xae, 0xb2, 0x73, 0x23, 0xb9, 0x7b, 0x94, 0xe2, 0x3a, 0xdd, 0x1a, 0x46, 0x72, 0xf7, 0x90,
	0xd2, 0x35, 0x56, 0xcd, 0x47, 0xfd, 0x5d, 0x4d, 0xeb, 0x26, 0x6a, 0x9d, 0x89, 0x62, 0x68, 0x3f,
	0xa6, 0x6a, 0x6f, 0x32, 0x98, 0xed, 0x90, 0xca, 0x2d, 0xba, 0xcf, 0x8c, 0xe4, 0xee, 0x7e, 0xfa,
	0x1d, 0xf6, 0xc2, 0xd1, 0xdf, 0x15, 0x7d, 0x85, 0xca, 0xb7, 0x51, 0xf9, 0xe2, 0x11, 0x9f, 0xb7,
	0x85, 0x2c, 0x9c, 0xe9, 0x03, 0x76, 0xf1, 0xf0, 0x47, 0xd6, 0x67, 0xf9, 0x26, 0xce, 0x72, 0xe1,
	0xc0, 0xb7, 0xd6, 0x66, 0x78, 0x99, 0x2d, 0x7a, 0xb9, 0xdf, 0x3f, 0x77, 0xa8, 0x90, 0x00, 0x3c,
	0xb5, 0xf9, 0x6d, 0x76, 0x01, 0x3f, 0x4f, 0x1b, 0x1d, 0xb4, 0xcc, 0x85, 0x57, 0x8f, 0x4a, 0x68,
	0xc1, 0x85, 0x29, 0x47, 0x7c, 0x03, 0x35, 0xce, 0x01, 0x61, 0x83, 0xe4, 0xdb, 0x51, 0xbc, 0x59,
	0x8e, 0xc0, 0xa9, 0xa8, 0x5a, 0x1a, 0x89, 0x9d, 0x5c, 0x4d, 0xf1, 0x5b, 0xe4, 0x54, 0x10, 0x7f,
	0x0c, 0xd2, 0xba, 0xda, 0x55, 0x86, 0x13, 0xd2, 0xa5, 0x6f, 0x9f, 0xd6, 0x87, 0x14, 0x40, 0x90,
	0xc2, 0xad, 0xaf, 0xae, 0xf4, 0x3f, 0xec, 0x2c, 0x35, 0xe6, 0x18, 0x8e, 0x9a, 0xce, 0x5d, 0xd4,
	0x49, 0x40, 0x78, 0x0f, 0xe2, 0x31, 0x55, 0x59, 0x65, 0x4b, 0xa8, 0x52, 0xf5, 0x75, 0xe0, 0x82,
	0x7b, 0xc8, 0x5e, 0x00, 0xfc, 0x21, 0x35, 0x76, 0xe0, 0x83, 0x77, 0xd9, 0x33, 0xc8, 0x4c, 0xad,
	0xe9, 0x2b, 0x8f, 0x99, 0xaf, 0xae, 0xb4, 0x89, 0x4a, 0x1c, 0x28, 0xeb, 0x13, 0x46, 0x4d, 0xfd,
	0x7d, 0xf6, 0x6c, 0x15, 0xa8, 0x23, 0xbd, 0x78, 0x9f, 0x62, 0x15, 0x39, 0x47, 0x38, 0xf2, 0x6d,
	0x56, 0x09, 0x8f, 0x70, 0xca, 0x16, 0xc5, 0x20, 0x12, 0x0e, 0xfa, 0xe5, 0x1a, 0x3b, 0x5f, 0xa9,
	0xca, 0x6c, 0xbc, 0xcf, 0xec, 0x8f, 0x28, 0x06, 0x51, 0xbc, 0x96, 0x8d, 0x6b, 0x26, 0x5f, 0x66,
	0xa7, 0x2b, 0xb5, 0xba, 0x4a, 0x07, 0x55, 0x4e, 0x45, 0x51, 0x8d, 0x0f, 0x0d, 0xb5, 0xf7, 0x7c,
	0x9b, 0xba, 0x99, 0x91, 0xf7, 0x50, 0xd5, 0x0b, 0xa5, 0x9c, 0x00, 0xf8, 0x01, 0xc2, 0xb3, 0x30,
	0xbe, 0xe7, 0x7d, 0x92, 0xb0, 0xe3, 0xde, 0x85, 0xc0, 0x3f, 0x46, 0x18, 0x7f, 0x03, 0xe6, 0x42,
	0xb0, 0xfc, 0xdb, 0x84, 0xc1, 0x6f, 0xc0, 0x86, 0xc0, 0x7b, 0x48, 0xd8, 0x30, 0xf2, 0xbc, 0x0b,
	0x63, 0xfe, 0x9d, 0x89, 0xee, 0x38, 0x39, 0xcf, 0x66, 0x47, 0xda, 0x08, 0xa0, 0x7e, 0x82, 0xf0,
	0xc9, 0x91, 0x36, 0x9d, 0x10, 0x50, 0x00, 0xa7, 0x24, 0x04, 0xfe, 0x69, 0x14, 0xc8, 0x5d, 0x10,
	0x70, 0x36, 0x0b, 0xed, 0x92, 0x56, 0x9e, 0x7f, 0x97, 0x6c, 0x8b, 0x43, 0x68, 0x0d, 0x61, 0xb3,
	0x0e, 0x6c, 0x1e, 0x2b, 0xd6, 0xf7, 0x28, 0x49, 0xca, 0x74, 0x78, 0xc7, 0xe6, 0x54, 0xad, 0x9e,
	0x67, 0xcd, 0x5a, 0x3b, 0xcf, 0xbf, 0x8f, 0x0c, 0x36, 0xed, 0xe6, 0xe1, 0x6c, 0x1d, 0xe8, 0xe0,
	0xf9, 0x0f, 0xe8, 0x6c, 0x0d, 0xeb, 0x6d, 0x3b, 0x2c, 0x06, 0x6d, 0x2a, 0xb4, 0x4c, 0xc4, 0x12,
	0xb4, 0x98, 0xdf, 0x33, 0xd0, 0x52, 0x23, 0xe7, 0x33, 0x76, 0x82, 0xae, 0x00, 0x3f, 0x5c, 0x9e,
	0x59, 0x6d, 0x5e, 0xd1, 0x4f, 0xb8, 0xbe, 0x4c, 0x9f, 0x7d, 0x3a, 0xb4, 0x6e, 0xf2, 0x97, 0x06,
	0x3b, 0x0d, 0x5d, 0xa4, 0x0a, 0xf1, 0x39, 0x45, 0xf4, 0x72, 0xd9, 0xf7, 0x5c, 0x62, 0xbd, 0x2b,
	0x9e, 0xb0, 0x3d, 0x87, 0x9e, 0x71, 0x3a, 0xa7, 0xc8, 0x98, 0xfb, 0x88, 0xdd, 0x06, 0x53, 0x92,
	0x3f, 0x37, 0x58, 0x12, 0x4d, 0xc4, 0x8e, 0x24, 0x5a, 0xd8, 0x45, 0x0b, 0xed, 0xd3, 0xb0, 0xb0,
	0xd6, 0x5e, 0x77, 0x96, 0xc8, 0x14, 0x6c, 0x82, 0xc8, 0xbe, 0x3f, 0x36, 0x58, 0x3b, 0xde, 0x52,
	0xa3, 0x69, 0x29, 0x9a, 0xf6, 0xe8, 0x09, 0x9b, 0x76, 0xf8, 0x7a, 0xdc, 0x69, 0xc5, 0x21, 0x19,
	0xf6, 0x55, 0x83, 0x35, 0xeb, 0x1e, 0xcb, 0x9e, 0x8a, 0xc7, 0x0e, 0xde, 0x2c, 0x3b, 0xcc, 0xef,
	0xf7, 0x95, 0x83, 0x04, 0xe6, 0x43, 0x34, 0x4a, 0x7d, 0x6d, 0xbe, 0x8a, 0x76, 0x90, 0x61, 0x97,
	0x58, 0xdb, 0xed, 0xfa, 0x3d, 0x61, 0x64, 0x9a, 0xe3, 0xeb, 0x6b, 0x6f, 0x79, 0x66, 0x75, 0xbe,
	0xd3, 0x02, 0x70, 0x33, 0x62, 0xd0, 0xd8, 0x78, 0xdb, 0x0b, 0x42, 0x39, 0x67, 0x1d, 0xef, 0x2f,
	0x37, 0x56, 0x4f, 0x75, 0xe6, 0x01, 0xb9, 0x05, 0x00, 0x89, 0xd3, 0x61, 0x14, 0x0f, 0x2a, 0x71,
	0x3a, 0x24, 0xf1, 0x1b, 0x2c, 0xd1, 0x5e, 0xc4, 0x8b, 0x1c, 0xdc, 0xac, 0xd4, 0x58, 0x39, 0xae,
	0xe9, 0xbe, 0xa3, 0x7d, 0x87, 0x04, 0xb7, 0x09, 0xaf, 0xd2, 0x1e, 0x24, 0xd8, 0x1f, 0x4d, 0xd2,
	0x1e, 0xe4, 0xd7, 0x98, 0xf6, 0x40, 0x30, 0x9c, 0xa4, 0x3d, 0x10, 0xbc, 0xc2, 0xaa, 0x26, 0x5d,
	0x54, 0xe9, 0x2f, 0xa7, 0x82, 0x17, 0xe1, 0x4e, 0xcc, 0x82, 0x6f, 0xb1, 0x73, 0x75, 0xe2, 0x1e,
	0xdd, 0xc0, 0xc6, 0x32, 0xe7, 0xa3, 0xd8, 0x0d, 0x4d, 0xf9, 0x7b, 0x1b, 0x51, 0x96, 0xfc, 0x37,
	0x3b, 0x73, 0xb0, 0x68, 0xa4, 0x32, 0x57, 0xdc, 0x50, 0x09, 0xde, 0x5f, 0x35, 0x40, 0x92, 0xbc,
	0xc6, 0x4e, 0xed, 0x2b, 0xc1, 0x48, 0xb7, 0x74, 0x47, 0xa8, 0xd5, 0x60, 0xe4, 0x62, 0x15, 0xa5,
	0x7d, 0x71, 0xe4, 0x2a, 0x45, 0x55, 0x45, 0x91, 0xd3, 0x39, 0xbc, 0xd8, 0x9b, 0xec, 0xb4, 0x7b,
	0xe4, 0x63, 0x83, 0xb7, 0x03, 0x97, 0x2e, 0xd4, 0x7b, 0x44, 0xcd, 0x1a, 0x88, 0xa0, 0x5b, 0x7b,
	0x68, 0xb2, 0x89, 0x6d, 0x90, 0x00, 0x05, 0x3e, 0x00, 0xe1, 0x92, 0x26, 0x70, 0x47, 0xb6, 0x81,
	0x60, 0x1b, 0xf0, 0x0e, 0xc2, 0xd0, 0x7d, 0x1c, 0xe2, 0x0a, 0xd9, 0x57, 0xdc, 0xd3, 0xa7, 0x1f,
	0xe0, 0xaf, 0xf5, 0x31, 0xf7, 0xe7, 0xd2, 0x07, 0x41, 0xad, 0x91, 0x09, 0x3c, 0x50, 0xee, 0x07,
	0x70, 0x0d, 0x9f, 0xb9, 0x42, 0xf2, 0x79, 0x83, 0xcd, 0x79, 0x20, 0x74, 0xf3, 0x21, 0x2f, 0x31,
	0xff, 0xf7, 0x9f, 0xe0, 0x31, 0xa8, 0xbf, 0x77, 0x74, 0x66, 0x61, 0x74, 0x23, 0x1f, 0x26, 0xbf,
	0x6f, 0x30, 0xec, 0x87, 0x84, 0x8f, 0x85, 0x51, 0xf1, 0x31, 0x9a, 0x32, 0x78, 0xc2, 0xa6, 0x4c,
	0x5e, 0x50, 0x3a, 0x2d, 0x58, 0x7f, 0x9b, 0x4a, 0xb0, 0x4a, 0xfe, 0xd6, 0x98, 0xf6, 0x34, 0x93,
	0xa7, 0x8d, 0x98, 0x2b, 0x76, 0x30, 0x57, 0xb8, 0xa7, 0x90, 0xf2, 0x0f, 0x3c, 0xaa, 0x4c, 0xfa,
	0xa8, 0x1b, 0x65, 0xaf, 0x96, 0xf9, 0xff, 0xda, 0x60, 0xd8, 0xe4, 0x1e, 0x32, 0x74, 0xf7, 0x6b,
	0x33, 0x14, 0x4f, 0xdc, 0x7e, 0x2b, 0x5f, 0xa2, 0x08, 0x03, 0x33, 0xb7, 0x3b, 0x3b, 0x32, 0xf0,
	0xbd, 0x78, 0x15, 0x20, 0xf4, 0x2e, 0x82, 0x40, 0x73, 0x2a, 0x1d, 0xd7, 0x68, 0x8f, 0xab, 0xa7,
	0x27, 0x44, 0x23, 0x0d, 0x5f, 0x60, 0x69, 0xb6, 0x81, 0x06, 0xd6, 0x8f, 0x91, 0xd5, 0x8a, 0xe0,
	0x1d, 0x1d, 0x49, 0xd5, 0x5c, 0x44, 0xfa, 0x09, 0x91, 0x22, 0x48, 0xa4, 0x2b, 0xd4, 0xd4, 0x03,
	0x89, 0x1e, 0xad, 0x45, 0x18, 0x38, 0xe5, 0x07, 0xfc, 0xa7, 0xd3, 0x8b, 0x40, 0xb7, 0xec, 0xd1,
	0xdb, 0xf5, 0x03, 0x14, 0x25, 0xaf, 0xe2, 0xa3, 0x3a, 0x4e, 0x9c, 0xc9, 0x20, 0xb1, 0x6d, 0xfd,
	0x19, 0x9d, 0xda, 0x88, 0xdf, 0x8c, 0x30, 0xdc, 0x87, 0xe9, 0xf6, 0x93, 0x2b, 0xd3, 0x0f, 0x03,
	0xfe, 0x19, 0x9d, 0x40, 0xc4, 0xee, 0x22, 0x94, 0xbc, 0xce, 0x4e, 0x11, 0xe5, 0xb1, 0x72, 0xb6,
	0xe2, 0xfd, 0x9c, 0x1e, 0xf2, 0x16, 0x51, 0xf2, 0xa9, 0x72, 0x36, 0x92, 0x97, 0x59, 0x33, 0xce,
	0xa7, 0x47, 0x3a, 0xf0, 0x5f, 0x10, 0x8d, 0xd1, 0x7c, 0x00, 0x25, 0x2b, 0xac, 0x15, 0xfb, 0x14,
	0xaa, 0x00, 0x9f, 0x37, 0x62, 0xc3, 0x87, 0x20, 0x15, 0x81, 0xe7, 0x18, 0x93, 0x65, 0xb0, 0xc2,
	0x29, 0xe9, 0x46, 0xfc, 0x97, 0xc4, 0x98, 0x07, 0xa8, 0x03, 0x48, 0x15, 0x2c, 0x51, 0x64, 0xa5,
	0x48, 0x6d, 0x69, 0x02, 0xff, 0xa2, 0x31, 0x75, 0xf0, 0x56, 0x56, 0xae, 0x03, 0x98, 0xac, 0xb2,
	0xc5, 0xf8, 0x0a, 0xa5, 0x7b, 0x03, 0x69, 0xb2, 0x5c, 0xf1, 0x5f, 0x11, 0x6f, 0x81, 0xf0, 0x8d,
	0x08, 0x43, 0xb7, 0xda, 0xd3, 0x5d, 0x51, 0x64, 0x22, 0x0d, 0xbb, 0xd4, 0xe7, 0xff, 0x3a, 0xce,
	0xd8, 0xd3, 0xdd, 0xad, 0x6c, 0x3d, 0xec, 0x62, 0x8f, 0x7f, 0x91, 0xb1, 0x29, 0x8f, 0xff, 0xa6,
	0xb1, 0x3c, 0xb3, 0xda, 0xee, 0xcc, 0x55, 0x14, 0xb0, 0xdb, 0x94, 0x23, 0x91, 0xcb, 0xae, 0xca,
	0x3d, 0xff, 0x6d, 0xb4, 0xdb, 0x94, 0xa3, 0xbb, 0x88, 0x40, 0x60, 0x40, 0x1d, 0xe5, 0x82, 0x4c,
	0xe0, 0x5f, 0xd2, 0x24, 0x0b, 0x3d, 0xdd, 0x45, 0xd6, 0x7d, 0x84, 0x93, 0x37, 0x59, 0x12, 0x1f,
	0x7c, 0x8a, 0x42, 0x68, 0xe3, 0x83, 0x34, 0xa9, 0xe2, 0xbf, 0xa3, 0x29, 0x97, 0xe8, 0x25, 0xa6,
	0x28, 0x36, 0xa2, 0xa0, 0x7b, 0x12, 0xff, 0x8f, 0x7b, 0xf5, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff,
	0x72, 0x6f, 0xeb, 0x4c, 0xe1, 0x1d, 0x00, 0x00,
}
