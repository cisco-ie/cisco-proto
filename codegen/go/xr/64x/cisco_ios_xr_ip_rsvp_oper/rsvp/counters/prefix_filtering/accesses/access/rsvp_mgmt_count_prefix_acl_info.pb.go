/*
Copyright 2019 Cisco Systems

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rsvp_mgmt_count_prefix_acl_info.proto

package cisco_ios_xr_ip_rsvp_oper_rsvp_counters_prefix_filtering_accesses_access

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type RsvpMgmtCountPrefixAclInfo_KEYS struct {
	AccessListName       string   `protobuf:"bytes,1,opt,name=access_list_name,json=accessListName,proto3" json:"access_list_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RsvpMgmtCountPrefixAclInfo_KEYS) Reset()         { *m = RsvpMgmtCountPrefixAclInfo_KEYS{} }
func (m *RsvpMgmtCountPrefixAclInfo_KEYS) String() string { return proto.CompactTextString(m) }
func (*RsvpMgmtCountPrefixAclInfo_KEYS) ProtoMessage()    {}
func (*RsvpMgmtCountPrefixAclInfo_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_c73bfdfd9d32e191, []int{0}
}

func (m *RsvpMgmtCountPrefixAclInfo_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RsvpMgmtCountPrefixAclInfo_KEYS.Unmarshal(m, b)
}
func (m *RsvpMgmtCountPrefixAclInfo_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RsvpMgmtCountPrefixAclInfo_KEYS.Marshal(b, m, deterministic)
}
func (m *RsvpMgmtCountPrefixAclInfo_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RsvpMgmtCountPrefixAclInfo_KEYS.Merge(m, src)
}
func (m *RsvpMgmtCountPrefixAclInfo_KEYS) XXX_Size() int {
	return xxx_messageInfo_RsvpMgmtCountPrefixAclInfo_KEYS.Size(m)
}
func (m *RsvpMgmtCountPrefixAclInfo_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_RsvpMgmtCountPrefixAclInfo_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_RsvpMgmtCountPrefixAclInfo_KEYS proto.InternalMessageInfo

func (m *RsvpMgmtCountPrefixAclInfo_KEYS) GetAccessListName() string {
	if m != nil {
		return m.AccessListName
	}
	return ""
}

type RsvpMgmtCountPrefixMsg struct {
	Path                 uint32   `protobuf:"varint,1,opt,name=path,proto3" json:"path,omitempty"`
	PathTear             uint32   `protobuf:"varint,2,opt,name=path_tear,json=pathTear,proto3" json:"path_tear,omitempty"`
	ReservationConfirm   uint32   `protobuf:"varint,3,opt,name=reservation_confirm,json=reservationConfirm,proto3" json:"reservation_confirm,omitempty"`
	Total                uint32   `protobuf:"varint,4,opt,name=total,proto3" json:"total,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RsvpMgmtCountPrefixMsg) Reset()         { *m = RsvpMgmtCountPrefixMsg{} }
func (m *RsvpMgmtCountPrefixMsg) String() string { return proto.CompactTextString(m) }
func (*RsvpMgmtCountPrefixMsg) ProtoMessage()    {}
func (*RsvpMgmtCountPrefixMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_c73bfdfd9d32e191, []int{1}
}

func (m *RsvpMgmtCountPrefixMsg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RsvpMgmtCountPrefixMsg.Unmarshal(m, b)
}
func (m *RsvpMgmtCountPrefixMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RsvpMgmtCountPrefixMsg.Marshal(b, m, deterministic)
}
func (m *RsvpMgmtCountPrefixMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RsvpMgmtCountPrefixMsg.Merge(m, src)
}
func (m *RsvpMgmtCountPrefixMsg) XXX_Size() int {
	return xxx_messageInfo_RsvpMgmtCountPrefixMsg.Size(m)
}
func (m *RsvpMgmtCountPrefixMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_RsvpMgmtCountPrefixMsg.DiscardUnknown(m)
}

var xxx_messageInfo_RsvpMgmtCountPrefixMsg proto.InternalMessageInfo

func (m *RsvpMgmtCountPrefixMsg) GetPath() uint32 {
	if m != nil {
		return m.Path
	}
	return 0
}

func (m *RsvpMgmtCountPrefixMsg) GetPathTear() uint32 {
	if m != nil {
		return m.PathTear
	}
	return 0
}

func (m *RsvpMgmtCountPrefixMsg) GetReservationConfirm() uint32 {
	if m != nil {
		return m.ReservationConfirm
	}
	return 0
}

func (m *RsvpMgmtCountPrefixMsg) GetTotal() uint32 {
	if m != nil {
		return m.Total
	}
	return 0
}

type RsvpMgmtCountPrefixAclInfo struct {
	Forwarded            *RsvpMgmtCountPrefixMsg `protobuf:"bytes,50,opt,name=forwarded,proto3" json:"forwarded,omitempty"`
	LocallyDestined      *RsvpMgmtCountPrefixMsg `protobuf:"bytes,51,opt,name=locally_destined,json=locallyDestined,proto3" json:"locally_destined,omitempty"`
	Dropped              *RsvpMgmtCountPrefixMsg `protobuf:"bytes,52,opt,name=dropped,proto3" json:"dropped,omitempty"`
	Total                *RsvpMgmtCountPrefixMsg `protobuf:"bytes,53,opt,name=total,proto3" json:"total,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *RsvpMgmtCountPrefixAclInfo) Reset()         { *m = RsvpMgmtCountPrefixAclInfo{} }
func (m *RsvpMgmtCountPrefixAclInfo) String() string { return proto.CompactTextString(m) }
func (*RsvpMgmtCountPrefixAclInfo) ProtoMessage()    {}
func (*RsvpMgmtCountPrefixAclInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_c73bfdfd9d32e191, []int{2}
}

func (m *RsvpMgmtCountPrefixAclInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RsvpMgmtCountPrefixAclInfo.Unmarshal(m, b)
}
func (m *RsvpMgmtCountPrefixAclInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RsvpMgmtCountPrefixAclInfo.Marshal(b, m, deterministic)
}
func (m *RsvpMgmtCountPrefixAclInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RsvpMgmtCountPrefixAclInfo.Merge(m, src)
}
func (m *RsvpMgmtCountPrefixAclInfo) XXX_Size() int {
	return xxx_messageInfo_RsvpMgmtCountPrefixAclInfo.Size(m)
}
func (m *RsvpMgmtCountPrefixAclInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_RsvpMgmtCountPrefixAclInfo.DiscardUnknown(m)
}

var xxx_messageInfo_RsvpMgmtCountPrefixAclInfo proto.InternalMessageInfo

func (m *RsvpMgmtCountPrefixAclInfo) GetForwarded() *RsvpMgmtCountPrefixMsg {
	if m != nil {
		return m.Forwarded
	}
	return nil
}

func (m *RsvpMgmtCountPrefixAclInfo) GetLocallyDestined() *RsvpMgmtCountPrefixMsg {
	if m != nil {
		return m.LocallyDestined
	}
	return nil
}

func (m *RsvpMgmtCountPrefixAclInfo) GetDropped() *RsvpMgmtCountPrefixMsg {
	if m != nil {
		return m.Dropped
	}
	return nil
}

func (m *RsvpMgmtCountPrefixAclInfo) GetTotal() *RsvpMgmtCountPrefixMsg {
	if m != nil {
		return m.Total
	}
	return nil
}

func init() {
	proto.RegisterType((*RsvpMgmtCountPrefixAclInfo_KEYS)(nil), "cisco_ios_xr_ip_rsvp_oper.rsvp.counters.prefix_filtering.accesses.access.rsvp_mgmt_count_prefix_acl_info_KEYS")
	proto.RegisterType((*RsvpMgmtCountPrefixMsg)(nil), "cisco_ios_xr_ip_rsvp_oper.rsvp.counters.prefix_filtering.accesses.access.rsvp_mgmt_count_prefix_msg")
	proto.RegisterType((*RsvpMgmtCountPrefixAclInfo)(nil), "cisco_ios_xr_ip_rsvp_oper.rsvp.counters.prefix_filtering.accesses.access.rsvp_mgmt_count_prefix_acl_info")
}

func init() {
	proto.RegisterFile("rsvp_mgmt_count_prefix_acl_info.proto", fileDescriptor_c73bfdfd9d32e191)
}

var fileDescriptor_c73bfdfd9d32e191 = []byte{
	// 340 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x93, 0xcf, 0x4a, 0x03, 0x31,
	0x10, 0xc6, 0x59, 0xad, 0x7f, 0x1a, 0x51, 0x4b, 0xf4, 0xb0, 0xe8, 0xc1, 0x52, 0x14, 0x7a, 0x5a,
	0xa1, 0xd5, 0x27, 0x50, 0x41, 0x50, 0x44, 0xaa, 0x17, 0x4f, 0x43, 0xcc, 0xce, 0xd6, 0x40, 0x36,
	0x09, 0x93, 0x58, 0xab, 0x07, 0x0f, 0xbe, 0x80, 0x17, 0x1f, 0xc5, 0x07, 0x94, 0x66, 0xb7, 0xe8,
	0xa5, 0xf4, 0x22, 0x3d, 0x65, 0x32, 0xdf, 0x7c, 0xf9, 0x4d, 0x26, 0x84, 0x1d, 0x91, 0x1f, 0x39,
	0x28, 0x87, 0x65, 0x00, 0x69, 0x9f, 0x4d, 0x00, 0x47, 0x58, 0xa8, 0x31, 0x08, 0xa9, 0x41, 0x99,
	0xc2, 0x66, 0x8e, 0x6c, 0xb0, 0xfc, 0x52, 0x2a, 0x2f, 0x2d, 0x28, 0xeb, 0x61, 0x4c, 0xa0, 0x1c,
	0x44, 0x9b, 0x75, 0x48, 0xd9, 0x24, 0xca, 0xa2, 0x17, 0xc9, 0x67, 0xb5, 0xbd, 0x50, 0x3a, 0x20,
	0x29, 0x33, 0xcc, 0x84, 0x94, 0xe8, 0x3d, 0xfa, 0x3a, 0xe8, 0xdc, 0xb2, 0xc3, 0x39, 0x48, 0xb8,
	0xba, 0x78, 0xb8, 0xe3, 0x5d, 0xd6, 0xaa, 0x1c, 0xa0, 0x95, 0x0f, 0x60, 0x44, 0x89, 0x69, 0xd2,
	0x4e, 0xba, 0xcd, 0xc1, 0x56, 0x95, 0xbf, 0x56, 0x3e, 0xdc, 0x88, 0x12, 0x3b, 0x5f, 0x09, 0xdb,
	0x9b, 0x71, 0x64, 0xe9, 0x87, 0x9c, 0xb3, 0x86, 0x13, 0xe1, 0x29, 0x9a, 0x37, 0x07, 0x31, 0xe6,
	0xfb, 0xac, 0x39, 0x59, 0x21, 0xa0, 0xa0, 0x74, 0x29, 0x0a, 0xeb, 0x93, 0xc4, 0x3d, 0x0a, 0xe2,
	0xc7, 0x6c, 0x87, 0xd0, 0x23, 0x8d, 0x44, 0x50, 0xd6, 0x80, 0xb4, 0xa6, 0x50, 0x54, 0xa6, 0xcb,
	0xb1, 0x8c, 0xff, 0x91, 0xce, 0x2a, 0x85, 0xef, 0xb2, 0x95, 0x60, 0x83, 0xd0, 0x69, 0x23, 0x96,
	0x54, 0x9b, 0xce, 0x77, 0x83, 0x1d, 0xcc, 0xb9, 0x29, 0xff, 0x48, 0x58, 0xb3, 0xb0, 0xf4, 0x22,
	0x28, 0xc7, 0x3c, 0xed, 0xb5, 0x93, 0xee, 0x46, 0x2f, 0xcf, 0xfe, 0x6b, 0xd6, 0xd9, 0xec, 0xa9,
	0x0c, 0x7e, 0xb1, 0xfc, 0x33, 0x61, 0x2d, 0x6d, 0xa5, 0xd0, 0xfa, 0x15, 0x72, 0xf4, 0x41, 0x19,
	0xcc, 0xd3, 0xfe, 0x02, 0x7b, 0xd9, 0xae, 0xe9, 0xe7, 0x35, 0x9c, 0xbf, 0xb3, 0xb5, 0x9c, 0xac,
	0x73, 0x98, 0xa7, 0x27, 0x0b, 0xec, 0x63, 0x0a, 0xe5, 0x6f, 0xd3, 0x07, 0x3d, 0x5d, 0x20, 0xbd,
	0x42, 0x3e, 0xae, 0xc6, 0x0f, 0xd7, 0xff, 0x09, 0x00, 0x00, 0xff, 0xff, 0x01, 0x19, 0x04, 0x3f,
	0x99, 0x03, 0x00, 0x00,
}
