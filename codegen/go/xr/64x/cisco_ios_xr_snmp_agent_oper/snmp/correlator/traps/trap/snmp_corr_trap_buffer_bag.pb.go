/*
Copyright 2019 Cisco Systems

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: snmp_corr_trap_buffer_bag.proto

package cisco_ios_xr_snmp_agent_oper_snmp_correlator_traps_trap

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type SnmpCorrTrapBufferBag_KEYS struct {
	EntryId              uint32   `protobuf:"varint,1,opt,name=entry_id,json=entryId,proto3" json:"entry_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SnmpCorrTrapBufferBag_KEYS) Reset()         { *m = SnmpCorrTrapBufferBag_KEYS{} }
func (m *SnmpCorrTrapBufferBag_KEYS) String() string { return proto.CompactTextString(m) }
func (*SnmpCorrTrapBufferBag_KEYS) ProtoMessage()    {}
func (*SnmpCorrTrapBufferBag_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_cc6c4e731001cf01, []int{0}
}

func (m *SnmpCorrTrapBufferBag_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SnmpCorrTrapBufferBag_KEYS.Unmarshal(m, b)
}
func (m *SnmpCorrTrapBufferBag_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SnmpCorrTrapBufferBag_KEYS.Marshal(b, m, deterministic)
}
func (m *SnmpCorrTrapBufferBag_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SnmpCorrTrapBufferBag_KEYS.Merge(m, src)
}
func (m *SnmpCorrTrapBufferBag_KEYS) XXX_Size() int {
	return xxx_messageInfo_SnmpCorrTrapBufferBag_KEYS.Size(m)
}
func (m *SnmpCorrTrapBufferBag_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_SnmpCorrTrapBufferBag_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_SnmpCorrTrapBufferBag_KEYS proto.InternalMessageInfo

func (m *SnmpCorrTrapBufferBag_KEYS) GetEntryId() uint32 {
	if m != nil {
		return m.EntryId
	}
	return 0
}

type SnmpCorrVbind struct {
	Oid                  string   `protobuf:"bytes,1,opt,name=oid,proto3" json:"oid,omitempty"`
	Value                string   `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SnmpCorrVbind) Reset()         { *m = SnmpCorrVbind{} }
func (m *SnmpCorrVbind) String() string { return proto.CompactTextString(m) }
func (*SnmpCorrVbind) ProtoMessage()    {}
func (*SnmpCorrVbind) Descriptor() ([]byte, []int) {
	return fileDescriptor_cc6c4e731001cf01, []int{1}
}

func (m *SnmpCorrVbind) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SnmpCorrVbind.Unmarshal(m, b)
}
func (m *SnmpCorrVbind) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SnmpCorrVbind.Marshal(b, m, deterministic)
}
func (m *SnmpCorrVbind) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SnmpCorrVbind.Merge(m, src)
}
func (m *SnmpCorrVbind) XXX_Size() int {
	return xxx_messageInfo_SnmpCorrVbind.Size(m)
}
func (m *SnmpCorrVbind) XXX_DiscardUnknown() {
	xxx_messageInfo_SnmpCorrVbind.DiscardUnknown(m)
}

var xxx_messageInfo_SnmpCorrVbind proto.InternalMessageInfo

func (m *SnmpCorrVbind) GetOid() string {
	if m != nil {
		return m.Oid
	}
	return ""
}

func (m *SnmpCorrVbind) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type SnmpCorrTrapBag struct {
	Oid                  string           `protobuf:"bytes,1,opt,name=oid,proto3" json:"oid,omitempty"`
	RelativeTimestamp    uint32           `protobuf:"varint,2,opt,name=relative_timestamp,json=relativeTimestamp,proto3" json:"relative_timestamp,omitempty"`
	Timestamp            uint64           `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	VarBind              []*SnmpCorrVbind `protobuf:"bytes,4,rep,name=var_bind,json=varBind,proto3" json:"var_bind,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *SnmpCorrTrapBag) Reset()         { *m = SnmpCorrTrapBag{} }
func (m *SnmpCorrTrapBag) String() string { return proto.CompactTextString(m) }
func (*SnmpCorrTrapBag) ProtoMessage()    {}
func (*SnmpCorrTrapBag) Descriptor() ([]byte, []int) {
	return fileDescriptor_cc6c4e731001cf01, []int{2}
}

func (m *SnmpCorrTrapBag) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SnmpCorrTrapBag.Unmarshal(m, b)
}
func (m *SnmpCorrTrapBag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SnmpCorrTrapBag.Marshal(b, m, deterministic)
}
func (m *SnmpCorrTrapBag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SnmpCorrTrapBag.Merge(m, src)
}
func (m *SnmpCorrTrapBag) XXX_Size() int {
	return xxx_messageInfo_SnmpCorrTrapBag.Size(m)
}
func (m *SnmpCorrTrapBag) XXX_DiscardUnknown() {
	xxx_messageInfo_SnmpCorrTrapBag.DiscardUnknown(m)
}

var xxx_messageInfo_SnmpCorrTrapBag proto.InternalMessageInfo

func (m *SnmpCorrTrapBag) GetOid() string {
	if m != nil {
		return m.Oid
	}
	return ""
}

func (m *SnmpCorrTrapBag) GetRelativeTimestamp() uint32 {
	if m != nil {
		return m.RelativeTimestamp
	}
	return 0
}

func (m *SnmpCorrTrapBag) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *SnmpCorrTrapBag) GetVarBind() []*SnmpCorrVbind {
	if m != nil {
		return m.VarBind
	}
	return nil
}

type SnmpCorrTrapBufferBag struct {
	CorrelationId        uint32           `protobuf:"varint,50,opt,name=correlation_id,json=correlationId,proto3" json:"correlation_id,omitempty"`
	IsRootCause          bool             `protobuf:"varint,51,opt,name=is_root_cause,json=isRootCause,proto3" json:"is_root_cause,omitempty"`
	RuleName             string           `protobuf:"bytes,52,opt,name=rule_name,json=ruleName,proto3" json:"rule_name,omitempty"`
	TrapInfo             *SnmpCorrTrapBag `protobuf:"bytes,53,opt,name=trap_info,json=trapInfo,proto3" json:"trap_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *SnmpCorrTrapBufferBag) Reset()         { *m = SnmpCorrTrapBufferBag{} }
func (m *SnmpCorrTrapBufferBag) String() string { return proto.CompactTextString(m) }
func (*SnmpCorrTrapBufferBag) ProtoMessage()    {}
func (*SnmpCorrTrapBufferBag) Descriptor() ([]byte, []int) {
	return fileDescriptor_cc6c4e731001cf01, []int{3}
}

func (m *SnmpCorrTrapBufferBag) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SnmpCorrTrapBufferBag.Unmarshal(m, b)
}
func (m *SnmpCorrTrapBufferBag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SnmpCorrTrapBufferBag.Marshal(b, m, deterministic)
}
func (m *SnmpCorrTrapBufferBag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SnmpCorrTrapBufferBag.Merge(m, src)
}
func (m *SnmpCorrTrapBufferBag) XXX_Size() int {
	return xxx_messageInfo_SnmpCorrTrapBufferBag.Size(m)
}
func (m *SnmpCorrTrapBufferBag) XXX_DiscardUnknown() {
	xxx_messageInfo_SnmpCorrTrapBufferBag.DiscardUnknown(m)
}

var xxx_messageInfo_SnmpCorrTrapBufferBag proto.InternalMessageInfo

func (m *SnmpCorrTrapBufferBag) GetCorrelationId() uint32 {
	if m != nil {
		return m.CorrelationId
	}
	return 0
}

func (m *SnmpCorrTrapBufferBag) GetIsRootCause() bool {
	if m != nil {
		return m.IsRootCause
	}
	return false
}

func (m *SnmpCorrTrapBufferBag) GetRuleName() string {
	if m != nil {
		return m.RuleName
	}
	return ""
}

func (m *SnmpCorrTrapBufferBag) GetTrapInfo() *SnmpCorrTrapBag {
	if m != nil {
		return m.TrapInfo
	}
	return nil
}

func init() {
	proto.RegisterType((*SnmpCorrTrapBufferBag_KEYS)(nil), "cisco_ios_xr_snmp_agent_oper.snmp.correlator.traps.trap.snmp_corr_trap_buffer_bag_KEYS")
	proto.RegisterType((*SnmpCorrVbind)(nil), "cisco_ios_xr_snmp_agent_oper.snmp.correlator.traps.trap.snmp_corr_vbind")
	proto.RegisterType((*SnmpCorrTrapBag)(nil), "cisco_ios_xr_snmp_agent_oper.snmp.correlator.traps.trap.snmp_corr_trap_bag")
	proto.RegisterType((*SnmpCorrTrapBufferBag)(nil), "cisco_ios_xr_snmp_agent_oper.snmp.correlator.traps.trap.snmp_corr_trap_buffer_bag")
}

func init() { proto.RegisterFile("snmp_corr_trap_buffer_bag.proto", fileDescriptor_cc6c4e731001cf01) }

var fileDescriptor_cc6c4e731001cf01 = []byte{
	// 361 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x52, 0x41, 0x4b, 0xeb, 0x40,
	0x10, 0x26, 0xaf, 0x7d, 0xaf, 0xc9, 0x96, 0xbc, 0xf7, 0x5c, 0x3c, 0xa4, 0x28, 0x1a, 0x02, 0x42,
	0x2e, 0xe6, 0xd0, 0x2a, 0x22, 0xde, 0x14, 0xc1, 0x52, 0xf0, 0xb0, 0x7a, 0xf1, 0xb4, 0x6c, 0x92,
	0x4d, 0x5d, 0x68, 0x76, 0xc2, 0xee, 0x26, 0xe8, 0x3f, 0xf5, 0x4f, 0xf8, 0x1f, 0x64, 0x57, 0x43,
	0xa5, 0xd8, 0x8b, 0x78, 0x09, 0x33, 0xdf, 0xcc, 0x7c, 0x33, 0xdf, 0x97, 0x45, 0x87, 0x5a, 0xd6,
	0x0d, 0x2d, 0x40, 0x29, 0x6a, 0x14, 0x6b, 0x68, 0xde, 0x56, 0x15, 0x57, 0x34, 0x67, 0xcb, 0xac,
	0x51, 0x60, 0x00, 0x9f, 0x15, 0x42, 0x17, 0x40, 0x05, 0x68, 0xfa, 0xa4, 0xa8, 0xeb, 0x66, 0x4b,
	0x2e, 0x0d, 0x85, 0x86, 0xab, 0xcc, 0xe6, 0x99, 0x9d, 0xe6, 0x2b, 0x66, 0x40, 0x65, 0x96, 0x43,
	0xbb, 0x6f, 0x72, 0x81, 0x0e, 0xb6, 0x72, 0xd3, 0xc5, 0xf5, 0xc3, 0x1d, 0x9e, 0x20, 0x9f, 0x4b,
	0xa3, 0x9e, 0xa9, 0x28, 0x23, 0x2f, 0xf6, 0xd2, 0x90, 0x8c, 0x5c, 0x3e, 0x2f, 0x93, 0x73, 0xf4,
	0x6f, 0x3d, 0xdc, 0xe5, 0x42, 0x96, 0xf8, 0x3f, 0x1a, 0xc0, 0x47, 0x63, 0x40, 0x6c, 0x88, 0x77,
	0xd1, 0xef, 0x8e, 0xad, 0x5a, 0x1e, 0xfd, 0x72, 0xd8, 0x7b, 0x92, 0xbc, 0x78, 0x08, 0x6f, 0x2e,
	0x66, 0xcb, 0x2f, 0xc6, 0x8f, 0x11, 0x76, 0x67, 0x8b, 0x8e, 0x53, 0x23, 0x6a, 0xae, 0x0d, 0xab,
	0x1b, 0xc7, 0x15, 0x92, 0x9d, 0xbe, 0x72, 0xdf, 0x17, 0xf0, 0x3e, 0x0a, 0xd6, 0x5d, 0x83, 0xd8,
	0x4b, 0x87, 0x64, 0x0d, 0xe0, 0x02, 0xf9, 0x1d, 0x53, 0xd4, 0x5e, 0x1a, 0x0d, 0xe3, 0x41, 0x3a,
	0x9e, 0xde, 0x64, 0xdf, 0x74, 0x2e, 0xdb, 0x50, 0x4e, 0x46, 0x1d, 0x53, 0x97, 0x42, 0x96, 0xc9,
	0xab, 0x87, 0x26, 0x5b, 0x3d, 0xc5, 0x47, 0xe8, 0x6f, 0xcf, 0x27, 0x40, 0x5a, 0x53, 0xa7, 0x4e,
	0x4b, 0xf8, 0x09, 0x9d, 0x97, 0x38, 0x41, 0xa1, 0xd0, 0x54, 0x01, 0x18, 0x5a, 0xb0, 0x56, 0xf3,
	0x68, 0x16, 0x7b, 0xa9, 0x4f, 0xc6, 0x42, 0x13, 0x00, 0x73, 0x65, 0x21, 0xbc, 0x87, 0x02, 0xd5,
	0xae, 0x38, 0x95, 0xac, 0xe6, 0xd1, 0x89, 0xb3, 0xcc, 0xb7, 0xc0, 0x2d, 0xab, 0x39, 0x7e, 0x44,
	0x81, 0x5b, 0x2d, 0x64, 0x05, 0xd1, 0x69, 0xec, 0xa5, 0xe3, 0xe9, 0xe2, 0x07, 0xb4, 0xf6, 0x7f,
	0x8a, 0xf8, 0x36, 0x9a, 0xcb, 0x0a, 0xf2, 0x3f, 0xee, 0x09, 0xce, 0xde, 0x02, 0x00, 0x00, 0xff,
	0xff, 0x5c, 0xd4, 0xd3, 0x84, 0xa5, 0x02, 0x00, 0x00,
}
