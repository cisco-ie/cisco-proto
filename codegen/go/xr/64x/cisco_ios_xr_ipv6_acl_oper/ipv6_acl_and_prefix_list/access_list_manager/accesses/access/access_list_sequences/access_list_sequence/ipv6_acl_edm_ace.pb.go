/*
Copyright 2019 Cisco Systems

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ipv6_acl_edm_ace.proto

package cisco_ios_xr_ipv6_acl_oper_ipv6_acl_and_prefix_list_access_list_manager_accesses_access_access_list_sequences_access_list_sequence

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Ipv6AclEdmAce_KEYS struct {
	AccessListName       string   `protobuf:"bytes,1,opt,name=access_list_name,json=accessListName,proto3" json:"access_list_name,omitempty"`
	SequenceNumber       uint32   `protobuf:"varint,2,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Ipv6AclEdmAce_KEYS) Reset()         { *m = Ipv6AclEdmAce_KEYS{} }
func (m *Ipv6AclEdmAce_KEYS) String() string { return proto.CompactTextString(m) }
func (*Ipv6AclEdmAce_KEYS) ProtoMessage()    {}
func (*Ipv6AclEdmAce_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_a280e520230d78eb, []int{0}
}

func (m *Ipv6AclEdmAce_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Ipv6AclEdmAce_KEYS.Unmarshal(m, b)
}
func (m *Ipv6AclEdmAce_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Ipv6AclEdmAce_KEYS.Marshal(b, m, deterministic)
}
func (m *Ipv6AclEdmAce_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ipv6AclEdmAce_KEYS.Merge(m, src)
}
func (m *Ipv6AclEdmAce_KEYS) XXX_Size() int {
	return xxx_messageInfo_Ipv6AclEdmAce_KEYS.Size(m)
}
func (m *Ipv6AclEdmAce_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_Ipv6AclEdmAce_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_Ipv6AclEdmAce_KEYS proto.InternalMessageInfo

func (m *Ipv6AclEdmAce_KEYS) GetAccessListName() string {
	if m != nil {
		return m.AccessListName
	}
	return ""
}

func (m *Ipv6AclEdmAce_KEYS) GetSequenceNumber() uint32 {
	if m != nil {
		return m.SequenceNumber
	}
	return 0
}

type Ipv6AclBagNhInfo struct {
	NextHop              string   `protobuf:"bytes,1,opt,name=next_hop,json=nextHop,proto3" json:"next_hop,omitempty"`
	VrfName              string   `protobuf:"bytes,2,opt,name=vrf_name,json=vrfName,proto3" json:"vrf_name,omitempty"`
	TrackName            string   `protobuf:"bytes,3,opt,name=track_name,json=trackName,proto3" json:"track_name,omitempty"`
	Status               string   `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	AtStatus             string   `protobuf:"bytes,5,opt,name=at_status,json=atStatus,proto3" json:"at_status,omitempty"`
	AclNhExist           int32    `protobuf:"zigzag32,6,opt,name=acl_nh_exist,json=aclNhExist,proto3" json:"acl_nh_exist,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Ipv6AclBagNhInfo) Reset()         { *m = Ipv6AclBagNhInfo{} }
func (m *Ipv6AclBagNhInfo) String() string { return proto.CompactTextString(m) }
func (*Ipv6AclBagNhInfo) ProtoMessage()    {}
func (*Ipv6AclBagNhInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_a280e520230d78eb, []int{1}
}

func (m *Ipv6AclBagNhInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Ipv6AclBagNhInfo.Unmarshal(m, b)
}
func (m *Ipv6AclBagNhInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Ipv6AclBagNhInfo.Marshal(b, m, deterministic)
}
func (m *Ipv6AclBagNhInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ipv6AclBagNhInfo.Merge(m, src)
}
func (m *Ipv6AclBagNhInfo) XXX_Size() int {
	return xxx_messageInfo_Ipv6AclBagNhInfo.Size(m)
}
func (m *Ipv6AclBagNhInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_Ipv6AclBagNhInfo.DiscardUnknown(m)
}

var xxx_messageInfo_Ipv6AclBagNhInfo proto.InternalMessageInfo

func (m *Ipv6AclBagNhInfo) GetNextHop() string {
	if m != nil {
		return m.NextHop
	}
	return ""
}

func (m *Ipv6AclBagNhInfo) GetVrfName() string {
	if m != nil {
		return m.VrfName
	}
	return ""
}

func (m *Ipv6AclBagNhInfo) GetTrackName() string {
	if m != nil {
		return m.TrackName
	}
	return ""
}

func (m *Ipv6AclBagNhInfo) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *Ipv6AclBagNhInfo) GetAtStatus() string {
	if m != nil {
		return m.AtStatus
	}
	return ""
}

func (m *Ipv6AclBagNhInfo) GetAclNhExist() int32 {
	if m != nil {
		return m.AclNhExist
	}
	return 0
}

type Ipv6AclBagHwNhInfo struct {
	Type                 string   `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	NextHop              string   `protobuf:"bytes,2,opt,name=next_hop,json=nextHop,proto3" json:"next_hop,omitempty"`
	TableId              uint32   `protobuf:"varint,3,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
	VrfName              string   `protobuf:"bytes,4,opt,name=vrf_name,json=vrfName,proto3" json:"vrf_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Ipv6AclBagHwNhInfo) Reset()         { *m = Ipv6AclBagHwNhInfo{} }
func (m *Ipv6AclBagHwNhInfo) String() string { return proto.CompactTextString(m) }
func (*Ipv6AclBagHwNhInfo) ProtoMessage()    {}
func (*Ipv6AclBagHwNhInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_a280e520230d78eb, []int{2}
}

func (m *Ipv6AclBagHwNhInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Ipv6AclBagHwNhInfo.Unmarshal(m, b)
}
func (m *Ipv6AclBagHwNhInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Ipv6AclBagHwNhInfo.Marshal(b, m, deterministic)
}
func (m *Ipv6AclBagHwNhInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ipv6AclBagHwNhInfo.Merge(m, src)
}
func (m *Ipv6AclBagHwNhInfo) XXX_Size() int {
	return xxx_messageInfo_Ipv6AclBagHwNhInfo.Size(m)
}
func (m *Ipv6AclBagHwNhInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_Ipv6AclBagHwNhInfo.DiscardUnknown(m)
}

var xxx_messageInfo_Ipv6AclBagHwNhInfo proto.InternalMessageInfo

func (m *Ipv6AclBagHwNhInfo) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Ipv6AclBagHwNhInfo) GetNextHop() string {
	if m != nil {
		return m.NextHop
	}
	return ""
}

func (m *Ipv6AclBagHwNhInfo) GetTableId() uint32 {
	if m != nil {
		return m.TableId
	}
	return 0
}

func (m *Ipv6AclBagHwNhInfo) GetVrfName() string {
	if m != nil {
		return m.VrfName
	}
	return ""
}

type AclUdfAce struct {
	UdfName              []string `protobuf:"bytes,1,rep,name=udf_name,json=udfName,proto3" json:"udf_name,omitempty"`
	UdfValue             uint32   `protobuf:"varint,2,opt,name=udf_value,json=udfValue,proto3" json:"udf_value,omitempty"`
	UdfMask              uint32   `protobuf:"varint,3,opt,name=udf_mask,json=udfMask,proto3" json:"udf_mask,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AclUdfAce) Reset()         { *m = AclUdfAce{} }
func (m *AclUdfAce) String() string { return proto.CompactTextString(m) }
func (*AclUdfAce) ProtoMessage()    {}
func (*AclUdfAce) Descriptor() ([]byte, []int) {
	return fileDescriptor_a280e520230d78eb, []int{3}
}

func (m *AclUdfAce) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AclUdfAce.Unmarshal(m, b)
}
func (m *AclUdfAce) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AclUdfAce.Marshal(b, m, deterministic)
}
func (m *AclUdfAce) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AclUdfAce.Merge(m, src)
}
func (m *AclUdfAce) XXX_Size() int {
	return xxx_messageInfo_AclUdfAce.Size(m)
}
func (m *AclUdfAce) XXX_DiscardUnknown() {
	xxx_messageInfo_AclUdfAce.DiscardUnknown(m)
}

var xxx_messageInfo_AclUdfAce proto.InternalMessageInfo

func (m *AclUdfAce) GetUdfName() []string {
	if m != nil {
		return m.UdfName
	}
	return nil
}

func (m *AclUdfAce) GetUdfValue() uint32 {
	if m != nil {
		return m.UdfValue
	}
	return 0
}

func (m *AclUdfAce) GetUdfMask() uint32 {
	if m != nil {
		return m.UdfMask
	}
	return 0
}

type Ipv6AclEdmAce struct {
	IsAceType                        string              `protobuf:"bytes,50,opt,name=is_ace_type,json=isAceType,proto3" json:"is_ace_type,omitempty"`
	IsAceSequenceNumber              uint32              `protobuf:"varint,51,opt,name=is_ace_sequence_number,json=isAceSequenceNumber,proto3" json:"is_ace_sequence_number,omitempty"`
	IsPacketAllowOrDeny              string              `protobuf:"bytes,52,opt,name=is_packet_allow_or_deny,json=isPacketAllowOrDeny,proto3" json:"is_packet_allow_or_deny,omitempty"`
	IsProtocolOperator               string              `protobuf:"bytes,53,opt,name=is_protocol_operator,json=isProtocolOperator,proto3" json:"is_protocol_operator,omitempty"`
	IsIpv6ProtocolType               int32               `protobuf:"zigzag32,54,opt,name=is_ipv6_protocol_type,json=isIpv6ProtocolType,proto3" json:"is_ipv6_protocol_type,omitempty"`
	IsIpv6Protocol2Type              int32               `protobuf:"zigzag32,55,opt,name=is_ipv6_protocol2_type,json=isIpv6Protocol2Type,proto3" json:"is_ipv6_protocol2_type,omitempty"`
	IsSourceAddressInNumbers         string              `protobuf:"bytes,56,opt,name=is_source_address_in_numbers,json=isSourceAddressInNumbers,proto3" json:"is_source_address_in_numbers,omitempty"`
	IsSourceAddressPrefixLength      uint32              `protobuf:"varint,57,opt,name=is_source_address_prefix_length,json=isSourceAddressPrefixLength,proto3" json:"is_source_address_prefix_length,omitempty"`
	SourceMask                       string              `protobuf:"bytes,58,opt,name=source_mask,json=sourceMask,proto3" json:"source_mask,omitempty"`
	IsDestinationAddressInNumbers    string              `protobuf:"bytes,59,opt,name=is_destination_address_in_numbers,json=isDestinationAddressInNumbers,proto3" json:"is_destination_address_in_numbers,omitempty"`
	IsDestinationAddressPrefixLength uint32              `protobuf:"varint,60,opt,name=is_destination_address_prefix_length,json=isDestinationAddressPrefixLength,proto3" json:"is_destination_address_prefix_length,omitempty"`
	DestinationMask                  string              `protobuf:"bytes,61,opt,name=destination_mask,json=destinationMask,proto3" json:"destination_mask,omitempty"`
	IsSourceOperator                 string              `protobuf:"bytes,62,opt,name=is_source_operator,json=isSourceOperator,proto3" json:"is_source_operator,omitempty"`
	IsSourcePort1                    uint32              `protobuf:"varint,63,opt,name=is_source_port1,json=isSourcePort1,proto3" json:"is_source_port1,omitempty"`
	IsSourcePort2                    uint32              `protobuf:"varint,64,opt,name=is_source_port2,json=isSourcePort2,proto3" json:"is_source_port2,omitempty"`
	IsDestinationOperator            string              `protobuf:"bytes,65,opt,name=is_destination_operator,json=isDestinationOperator,proto3" json:"is_destination_operator,omitempty"`
	IsDestinationPort1               uint32              `protobuf:"varint,66,opt,name=is_destination_port1,json=isDestinationPort1,proto3" json:"is_destination_port1,omitempty"`
	IsDestinationPort2               uint32              `protobuf:"varint,67,opt,name=is_destination_port2,json=isDestinationPort2,proto3" json:"is_destination_port2,omitempty"`
	IsLogOption                      string              `protobuf:"bytes,68,opt,name=is_log_option,json=isLogOption,proto3" json:"is_log_option,omitempty"`
	CounterName                      string              `protobuf:"bytes,69,opt,name=counter_name,json=counterName,proto3" json:"counter_name,omitempty"`
	IsTcpBitsOperator                string              `protobuf:"bytes,70,opt,name=is_tcp_bits_operator,json=isTcpBitsOperator,proto3" json:"is_tcp_bits_operator,omitempty"`
	IsTcpBits                        uint32              `protobuf:"varint,71,opt,name=is_tcp_bits,json=isTcpBits,proto3" json:"is_tcp_bits,omitempty"`
	IsTcpBitsMask                    uint32              `protobuf:"varint,72,opt,name=is_tcp_bits_mask,json=isTcpBitsMask,proto3" json:"is_tcp_bits_mask,omitempty"`
	IsDscpPresent                    int32               `protobuf:"zigzag32,73,opt,name=is_dscp_present,json=isDscpPresent,proto3" json:"is_dscp_present,omitempty"`
	DscpOperator                     uint32              `protobuf:"varint,74,opt,name=dscp_operator,json=dscpOperator,proto3" json:"dscp_operator,omitempty"`
	IsDscpValu                       uint32              `protobuf:"varint,75,opt,name=is_dscp_valu,json=isDscpValu,proto3" json:"is_dscp_valu,omitempty"`
	IsDscpValu2                      uint32              `protobuf:"varint,76,opt,name=is_dscp_valu2,json=isDscpValu2,proto3" json:"is_dscp_valu2,omitempty"`
	IsPrecedencePresent              int32               `protobuf:"zigzag32,77,opt,name=is_precedence_present,json=isPrecedencePresent,proto3" json:"is_precedence_present,omitempty"`
	IsPrecedenceValue                uint32              `protobuf:"varint,78,opt,name=is_precedence_value,json=isPrecedenceValue,proto3" json:"is_precedence_value,omitempty"`
	IsHeaderMatches                  uint32              `protobuf:"varint,79,opt,name=is_header_matches,json=isHeaderMatches,proto3" json:"is_header_matches,omitempty"`
	IsPacketLengthOperator           string              `protobuf:"bytes,80,opt,name=is_packet_length_operator,json=isPacketLengthOperator,proto3" json:"is_packet_length_operator,omitempty"`
	IsPacketLengthStart              uint32              `protobuf:"varint,81,opt,name=is_packet_length_start,json=isPacketLengthStart,proto3" json:"is_packet_length_start,omitempty"`
	IsPacketLengthEnd                uint32              `protobuf:"varint,82,opt,name=is_packet_length_end,json=isPacketLengthEnd,proto3" json:"is_packet_length_end,omitempty"`
	IsTimeToLiveOperator             string              `protobuf:"bytes,83,opt,name=is_time_to_live_operator,json=isTimeToLiveOperator,proto3" json:"is_time_to_live_operator,omitempty"`
	IsTimeToLiveStart                uint32              `protobuf:"varint,84,opt,name=is_time_to_live_start,json=isTimeToLiveStart,proto3" json:"is_time_to_live_start,omitempty"`
	IsTimeToLiveEnd                  uint32              `protobuf:"varint,85,opt,name=is_time_to_live_end,json=isTimeToLiveEnd,proto3" json:"is_time_to_live_end,omitempty"`
	NoStats                          int32               `protobuf:"zigzag32,86,opt,name=no_stats,json=noStats,proto3" json:"no_stats,omitempty"`
	Hits                             uint64              `protobuf:"varint,87,opt,name=hits,proto3" json:"hits,omitempty"`
	Capture                          uint32              `protobuf:"varint,88,opt,name=capture,proto3" json:"capture,omitempty"`
	UndeterminedTransport            uint32              `protobuf:"varint,89,opt,name=undetermined_transport,json=undeterminedTransport,proto3" json:"undetermined_transport,omitempty"`
	IsIcmpMessageOff                 int32               `protobuf:"zigzag32,90,opt,name=is_icmp_message_off,json=isIcmpMessageOff,proto3" json:"is_icmp_message_off,omitempty"`
	QosGroup                         uint32              `protobuf:"varint,91,opt,name=qos_group,json=qosGroup,proto3" json:"qos_group,omitempty"`
	IsCommentForEntry                string              `protobuf:"bytes,92,opt,name=is_comment_for_entry,json=isCommentForEntry,proto3" json:"is_comment_for_entry,omitempty"`
	NextHopType                      string              `protobuf:"bytes,93,opt,name=next_hop_type,json=nextHopType,proto3" json:"next_hop_type,omitempty"`
	NextHopInfo                      []*Ipv6AclBagNhInfo `protobuf:"bytes,94,rep,name=next_hop_info,json=nextHopInfo,proto3" json:"next_hop_info,omitempty"`
	HwNextHopInfo                    *Ipv6AclBagHwNhInfo `protobuf:"bytes,95,opt,name=hw_next_hop_info,json=hwNextHopInfo,proto3" json:"hw_next_hop_info,omitempty"`
	IsFlowId                         uint32              `protobuf:"varint,96,opt,name=is_flow_id,json=isFlowId,proto3" json:"is_flow_id,omitempty"`
	SourcePrefixGroup                string              `protobuf:"bytes,97,opt,name=source_prefix_group,json=sourcePrefixGroup,proto3" json:"source_prefix_group,omitempty"`
	DestinationPrefixGroup           string              `protobuf:"bytes,98,opt,name=destination_prefix_group,json=destinationPrefixGroup,proto3" json:"destination_prefix_group,omitempty"`
	SourcePortGroup                  string              `protobuf:"bytes,99,opt,name=source_port_group,json=sourcePortGroup,proto3" json:"source_port_group,omitempty"`
	DestinationPortGroup             string              `protobuf:"bytes,100,opt,name=destination_port_group,json=destinationPortGroup,proto3" json:"destination_port_group,omitempty"`
	AclName                          string              `protobuf:"bytes,101,opt,name=acl_name,json=aclName,proto3" json:"acl_name,omitempty"`
	SequenceStr                      string              `protobuf:"bytes,102,opt,name=sequence_str,json=sequenceStr,proto3" json:"sequence_str,omitempty"`
	Udf                              []*AclUdfAce        `protobuf:"bytes,103,rep,name=udf,proto3" json:"udf,omitempty"`
	SetTtl                           uint32              `protobuf:"varint,104,opt,name=set_ttl,json=setTtl,proto3" json:"set_ttl,omitempty"`
	XXX_NoUnkeyedLiteral             struct{}            `json:"-"`
	XXX_unrecognized                 []byte              `json:"-"`
	XXX_sizecache                    int32               `json:"-"`
}

func (m *Ipv6AclEdmAce) Reset()         { *m = Ipv6AclEdmAce{} }
func (m *Ipv6AclEdmAce) String() string { return proto.CompactTextString(m) }
func (*Ipv6AclEdmAce) ProtoMessage()    {}
func (*Ipv6AclEdmAce) Descriptor() ([]byte, []int) {
	return fileDescriptor_a280e520230d78eb, []int{4}
}

func (m *Ipv6AclEdmAce) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Ipv6AclEdmAce.Unmarshal(m, b)
}
func (m *Ipv6AclEdmAce) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Ipv6AclEdmAce.Marshal(b, m, deterministic)
}
func (m *Ipv6AclEdmAce) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ipv6AclEdmAce.Merge(m, src)
}
func (m *Ipv6AclEdmAce) XXX_Size() int {
	return xxx_messageInfo_Ipv6AclEdmAce.Size(m)
}
func (m *Ipv6AclEdmAce) XXX_DiscardUnknown() {
	xxx_messageInfo_Ipv6AclEdmAce.DiscardUnknown(m)
}

var xxx_messageInfo_Ipv6AclEdmAce proto.InternalMessageInfo

func (m *Ipv6AclEdmAce) GetIsAceType() string {
	if m != nil {
		return m.IsAceType
	}
	return ""
}

func (m *Ipv6AclEdmAce) GetIsAceSequenceNumber() uint32 {
	if m != nil {
		return m.IsAceSequenceNumber
	}
	return 0
}

func (m *Ipv6AclEdmAce) GetIsPacketAllowOrDeny() string {
	if m != nil {
		return m.IsPacketAllowOrDeny
	}
	return ""
}

func (m *Ipv6AclEdmAce) GetIsProtocolOperator() string {
	if m != nil {
		return m.IsProtocolOperator
	}
	return ""
}

func (m *Ipv6AclEdmAce) GetIsIpv6ProtocolType() int32 {
	if m != nil {
		return m.IsIpv6ProtocolType
	}
	return 0
}

func (m *Ipv6AclEdmAce) GetIsIpv6Protocol2Type() int32 {
	if m != nil {
		return m.IsIpv6Protocol2Type
	}
	return 0
}

func (m *Ipv6AclEdmAce) GetIsSourceAddressInNumbers() string {
	if m != nil {
		return m.IsSourceAddressInNumbers
	}
	return ""
}

func (m *Ipv6AclEdmAce) GetIsSourceAddressPrefixLength() uint32 {
	if m != nil {
		return m.IsSourceAddressPrefixLength
	}
	return 0
}

func (m *Ipv6AclEdmAce) GetSourceMask() string {
	if m != nil {
		return m.SourceMask
	}
	return ""
}

func (m *Ipv6AclEdmAce) GetIsDestinationAddressInNumbers() string {
	if m != nil {
		return m.IsDestinationAddressInNumbers
	}
	return ""
}

func (m *Ipv6AclEdmAce) GetIsDestinationAddressPrefixLength() uint32 {
	if m != nil {
		return m.IsDestinationAddressPrefixLength
	}
	return 0
}

func (m *Ipv6AclEdmAce) GetDestinationMask() string {
	if m != nil {
		return m.DestinationMask
	}
	return ""
}

func (m *Ipv6AclEdmAce) GetIsSourceOperator() string {
	if m != nil {
		return m.IsSourceOperator
	}
	return ""
}

func (m *Ipv6AclEdmAce) GetIsSourcePort1() uint32 {
	if m != nil {
		return m.IsSourcePort1
	}
	return 0
}

func (m *Ipv6AclEdmAce) GetIsSourcePort2() uint32 {
	if m != nil {
		return m.IsSourcePort2
	}
	return 0
}

func (m *Ipv6AclEdmAce) GetIsDestinationOperator() string {
	if m != nil {
		return m.IsDestinationOperator
	}
	return ""
}

func (m *Ipv6AclEdmAce) GetIsDestinationPort1() uint32 {
	if m != nil {
		return m.IsDestinationPort1
	}
	return 0
}

func (m *Ipv6AclEdmAce) GetIsDestinationPort2() uint32 {
	if m != nil {
		return m.IsDestinationPort2
	}
	return 0
}

func (m *Ipv6AclEdmAce) GetIsLogOption() string {
	if m != nil {
		return m.IsLogOption
	}
	return ""
}

func (m *Ipv6AclEdmAce) GetCounterName() string {
	if m != nil {
		return m.CounterName
	}
	return ""
}

func (m *Ipv6AclEdmAce) GetIsTcpBitsOperator() string {
	if m != nil {
		return m.IsTcpBitsOperator
	}
	return ""
}

func (m *Ipv6AclEdmAce) GetIsTcpBits() uint32 {
	if m != nil {
		return m.IsTcpBits
	}
	return 0
}

func (m *Ipv6AclEdmAce) GetIsTcpBitsMask() uint32 {
	if m != nil {
		return m.IsTcpBitsMask
	}
	return 0
}

func (m *Ipv6AclEdmAce) GetIsDscpPresent() int32 {
	if m != nil {
		return m.IsDscpPresent
	}
	return 0
}

func (m *Ipv6AclEdmAce) GetDscpOperator() uint32 {
	if m != nil {
		return m.DscpOperator
	}
	return 0
}

func (m *Ipv6AclEdmAce) GetIsDscpValu() uint32 {
	if m != nil {
		return m.IsDscpValu
	}
	return 0
}

func (m *Ipv6AclEdmAce) GetIsDscpValu2() uint32 {
	if m != nil {
		return m.IsDscpValu2
	}
	return 0
}

func (m *Ipv6AclEdmAce) GetIsPrecedencePresent() int32 {
	if m != nil {
		return m.IsPrecedencePresent
	}
	return 0
}

func (m *Ipv6AclEdmAce) GetIsPrecedenceValue() uint32 {
	if m != nil {
		return m.IsPrecedenceValue
	}
	return 0
}

func (m *Ipv6AclEdmAce) GetIsHeaderMatches() uint32 {
	if m != nil {
		return m.IsHeaderMatches
	}
	return 0
}

func (m *Ipv6AclEdmAce) GetIsPacketLengthOperator() string {
	if m != nil {
		return m.IsPacketLengthOperator
	}
	return ""
}

func (m *Ipv6AclEdmAce) GetIsPacketLengthStart() uint32 {
	if m != nil {
		return m.IsPacketLengthStart
	}
	return 0
}

func (m *Ipv6AclEdmAce) GetIsPacketLengthEnd() uint32 {
	if m != nil {
		return m.IsPacketLengthEnd
	}
	return 0
}

func (m *Ipv6AclEdmAce) GetIsTimeToLiveOperator() string {
	if m != nil {
		return m.IsTimeToLiveOperator
	}
	return ""
}

func (m *Ipv6AclEdmAce) GetIsTimeToLiveStart() uint32 {
	if m != nil {
		return m.IsTimeToLiveStart
	}
	return 0
}

func (m *Ipv6AclEdmAce) GetIsTimeToLiveEnd() uint32 {
	if m != nil {
		return m.IsTimeToLiveEnd
	}
	return 0
}

func (m *Ipv6AclEdmAce) GetNoStats() int32 {
	if m != nil {
		return m.NoStats
	}
	return 0
}

func (m *Ipv6AclEdmAce) GetHits() uint64 {
	if m != nil {
		return m.Hits
	}
	return 0
}

func (m *Ipv6AclEdmAce) GetCapture() uint32 {
	if m != nil {
		return m.Capture
	}
	return 0
}

func (m *Ipv6AclEdmAce) GetUndeterminedTransport() uint32 {
	if m != nil {
		return m.UndeterminedTransport
	}
	return 0
}

func (m *Ipv6AclEdmAce) GetIsIcmpMessageOff() int32 {
	if m != nil {
		return m.IsIcmpMessageOff
	}
	return 0
}

func (m *Ipv6AclEdmAce) GetQosGroup() uint32 {
	if m != nil {
		return m.QosGroup
	}
	return 0
}

func (m *Ipv6AclEdmAce) GetIsCommentForEntry() string {
	if m != nil {
		return m.IsCommentForEntry
	}
	return ""
}

func (m *Ipv6AclEdmAce) GetNextHopType() string {
	if m != nil {
		return m.NextHopType
	}
	return ""
}

func (m *Ipv6AclEdmAce) GetNextHopInfo() []*Ipv6AclBagNhInfo {
	if m != nil {
		return m.NextHopInfo
	}
	return nil
}

func (m *Ipv6AclEdmAce) GetHwNextHopInfo() *Ipv6AclBagHwNhInfo {
	if m != nil {
		return m.HwNextHopInfo
	}
	return nil
}

func (m *Ipv6AclEdmAce) GetIsFlowId() uint32 {
	if m != nil {
		return m.IsFlowId
	}
	return 0
}

func (m *Ipv6AclEdmAce) GetSourcePrefixGroup() string {
	if m != nil {
		return m.SourcePrefixGroup
	}
	return ""
}

func (m *Ipv6AclEdmAce) GetDestinationPrefixGroup() string {
	if m != nil {
		return m.DestinationPrefixGroup
	}
	return ""
}

func (m *Ipv6AclEdmAce) GetSourcePortGroup() string {
	if m != nil {
		return m.SourcePortGroup
	}
	return ""
}

func (m *Ipv6AclEdmAce) GetDestinationPortGroup() string {
	if m != nil {
		return m.DestinationPortGroup
	}
	return ""
}

func (m *Ipv6AclEdmAce) GetAclName() string {
	if m != nil {
		return m.AclName
	}
	return ""
}

func (m *Ipv6AclEdmAce) GetSequenceStr() string {
	if m != nil {
		return m.SequenceStr
	}
	return ""
}

func (m *Ipv6AclEdmAce) GetUdf() []*AclUdfAce {
	if m != nil {
		return m.Udf
	}
	return nil
}

func (m *Ipv6AclEdmAce) GetSetTtl() uint32 {
	if m != nil {
		return m.SetTtl
	}
	return 0
}

func init() {
	proto.RegisterType((*Ipv6AclEdmAce_KEYS)(nil), "cisco_ios_xr_ipv6_acl_oper.ipv6_acl_and_prefix_list.access_list_manager.accesses.access.access_list_sequences.access_list_sequence.ipv6_acl_edm_ace_KEYS")
	proto.RegisterType((*Ipv6AclBagNhInfo)(nil), "cisco_ios_xr_ipv6_acl_oper.ipv6_acl_and_prefix_list.access_list_manager.accesses.access.access_list_sequences.access_list_sequence.ipv6_acl_bag_nh_info")
	proto.RegisterType((*Ipv6AclBagHwNhInfo)(nil), "cisco_ios_xr_ipv6_acl_oper.ipv6_acl_and_prefix_list.access_list_manager.accesses.access.access_list_sequences.access_list_sequence.ipv6_acl_bag_hw_nh_info")
	proto.RegisterType((*AclUdfAce)(nil), "cisco_ios_xr_ipv6_acl_oper.ipv6_acl_and_prefix_list.access_list_manager.accesses.access.access_list_sequences.access_list_sequence.acl_udf_ace")
	proto.RegisterType((*Ipv6AclEdmAce)(nil), "cisco_ios_xr_ipv6_acl_oper.ipv6_acl_and_prefix_list.access_list_manager.accesses.access.access_list_sequences.access_list_sequence.ipv6_acl_edm_ace")
}

func init() { proto.RegisterFile("ipv6_acl_edm_ace.proto", fileDescriptor_a280e520230d78eb) }

var fileDescriptor_a280e520230d78eb = []byte{
	// 1438 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x56, 0xdd, 0x52, 0x1c, 0xb7,
	0x12, 0xae, 0x35, 0x1c, 0x30, 0x02, 0x0c, 0x08, 0x83, 0xe5, 0xb2, 0x7d, 0xbc, 0xe6, 0x9c, 0x3a,
	0xe6, 0xb8, 0x1c, 0x12, 0xaf, 0x6d, 0x62, 0xe7, 0xc7, 0x09, 0x36, 0xd8, 0x10, 0xf3, 0x97, 0x65,
	0xe3, 0xc4, 0xf9, 0x93, 0xc5, 0x8c, 0x66, 0x57, 0x61, 0x67, 0x34, 0x56, 0x6b, 0x17, 0xb8, 0xc9,
	0x45, 0x5e, 0x20, 0xb7, 0xa9, 0xca, 0x5d, 0xde, 0x23, 0x37, 0xa9, 0xca, 0xc3, 0xe4, 0x2d, 0x52,
	0x6a, 0xcd, 0xcc, 0xce, 0x00, 0xbe, 0x8e, 0xef, 0x66, 0xba, 0xbf, 0x4f, 0xfa, 0x5a, 0xdd, 0xea,
	0x16, 0x99, 0x57, 0x69, 0x7f, 0x99, 0x8b, 0xa0, 0xcb, 0x65, 0x18, 0x73, 0x11, 0xc8, 0xa5, 0xd4,
	0x68, 0xab, 0xe9, 0x4f, 0xb5, 0x40, 0x41, 0xa0, 0xb9, 0xd2, 0xc0, 0x8f, 0x0c, 0x2f, 0x50, 0x3a,
	0x95, 0x66, 0xa9, 0xf8, 0x13, 0x49, 0xc8, 0x53, 0x23, 0x23, 0x75, 0xc4, 0xbb, 0x0a, 0xec, 0x92,
	0x08, 0x02, 0x09, 0x80, 0xdf, 0x3c, 0x16, 0x89, 0x68, 0x4b, 0x93, 0xd9, 0x24, 0x64, 0x1f, 0x15,
	0x0c, 0xc8, 0xd7, 0x3d, 0x99, 0x04, 0xf2, 0x6c, 0xeb, 0xc2, 0x0f, 0x64, 0xee, 0xa4, 0x3c, 0xfe,
	0x7c, 0xed, 0xe5, 0x1e, 0x5d, 0x24, 0xd3, 0x65, 0x42, 0x22, 0x62, 0xc9, 0x6a, 0xf5, 0xda, 0xe2,
	0x58, 0xf3, 0x82, 0xb7, 0x6f, 0x2a, 0xb0, 0xdb, 0x22, 0x96, 0xf4, 0x26, 0x99, 0xca, 0x97, 0xe3,
	0x49, 0x2f, 0xde, 0x97, 0x86, 0x9d, 0xab, 0xd7, 0x16, 0x27, 0x9b, 0x17, 0x72, 0xf3, 0x36, 0x5a,
	0x17, 0xfe, 0xa8, 0x91, 0x8b, 0xc5, 0x66, 0xfb, 0xa2, 0xcd, 0x93, 0x0e, 0x57, 0x49, 0xa4, 0xe9,
	0x65, 0x72, 0x3e, 0x91, 0x47, 0x96, 0x77, 0x74, 0x9a, 0xed, 0x31, 0xea, 0xfe, 0xd7, 0x75, 0xea,
	0x5c, 0x7d, 0x13, 0xf9, 0xed, 0xcf, 0x79, 0x57, 0xdf, 0x44, 0xb8, 0xef, 0x35, 0x42, 0xac, 0x11,
	0xc1, 0x81, 0x77, 0x0e, 0xa1, 0x73, 0x0c, 0x2d, 0xe8, 0x9e, 0x27, 0x23, 0x60, 0x85, 0xed, 0x01,
	0x1b, 0x46, 0x57, 0xf6, 0x47, 0xaf, 0x90, 0x31, 0x61, 0x79, 0xe6, 0xfa, 0x17, 0xba, 0xce, 0x0b,
	0xbb, 0xe7, 0x9d, 0x75, 0x32, 0xe1, 0xc4, 0x25, 0x1d, 0x2e, 0x8f, 0x14, 0x58, 0x36, 0x52, 0xaf,
	0x2d, 0xce, 0x34, 0x89, 0x08, 0xba, 0xdb, 0x9d, 0x35, 0x67, 0x59, 0xf8, 0x91, 0x5c, 0xaa, 0xc4,
	0xd0, 0x39, 0x2c, 0xc2, 0xa0, 0x64, 0xd8, 0x1e, 0xa7, 0xf9, 0x31, 0xe1, 0x77, 0x25, 0xb4, 0x73,
	0xa7, 0x42, 0xb3, 0x62, 0xbf, 0x2b, 0xb9, 0x0a, 0x51, 0xfd, 0x64, 0x73, 0x14, 0xff, 0x37, 0xc2,
	0x4a, 0xd4, 0xc3, 0x95, 0xa8, 0x17, 0x5e, 0x91, 0x71, 0xb7, 0x75, 0x2f, 0x8c, 0x5c, 0xae, 0x1c,
	0xd2, 0x7d, 0x66, 0xe9, 0x19, 0x72, 0xc8, 0x5e, 0xe8, 0xcf, 0xe7, 0x0a, 0x19, 0x73, 0xae, 0xbe,
	0xe8, 0xf6, 0x64, 0x96, 0x11, 0x87, 0x7d, 0xe1, 0xfe, 0x73, 0x5e, 0x2c, 0xe0, 0x20, 0xdf, 0xbc,
	0x17, 0x46, 0x5b, 0x02, 0x0e, 0x16, 0xfe, 0x9a, 0x27, 0xd3, 0x27, 0x6b, 0x82, 0xfe, 0x9b, 0x8c,
	0x2b, 0xc0, 0xea, 0xc0, 0x10, 0x1b, 0xfe, 0xb4, 0x15, 0xac, 0x04, 0xb2, 0xe5, 0xe2, 0xbc, 0x4b,
	0xe6, 0x33, 0xff, 0xc9, 0x5a, 0xb8, 0x8b, 0xab, 0xcf, 0x22, 0x74, 0xaf, 0x52, 0x10, 0xf4, 0x1e,
	0xb9, 0xa4, 0x80, 0xa7, 0x22, 0x38, 0x90, 0x96, 0x8b, 0x6e, 0x57, 0x1f, 0x72, 0x6d, 0x78, 0x28,
	0x93, 0x63, 0x76, 0x0f, 0x37, 0x98, 0x55, 0xb0, 0x8b, 0xde, 0x15, 0xe7, 0xdc, 0x31, 0xab, 0x32,
	0x39, 0xa6, 0xef, 0x91, 0x8b, 0x8e, 0xe5, 0xee, 0x50, 0xa0, 0xfd, 0x75, 0x11, 0x56, 0x1b, 0x76,
	0x1f, 0x29, 0x54, 0xc1, 0x6e, 0xe6, 0xda, 0xc9, 0x3c, 0xf4, 0x0e, 0x99, 0x53, 0xe0, 0x2f, 0x58,
	0x41, 0xc3, 0x30, 0x96, 0x31, 0xbd, 0x54, 0xc1, 0x46, 0xda, 0x5f, 0xce, 0x69, 0xa5, 0x78, 0x2a,
	0x94, 0x86, 0xe7, 0xbc, 0x8f, 0x9c, 0xd9, 0x2a, 0xa7, 0x81, 0xa4, 0x47, 0xe4, 0xaa, 0x02, 0x0e,
	0xba, 0x67, 0x02, 0xc9, 0x45, 0x18, 0x1a, 0x77, 0x7d, 0x54, 0x92, 0x9d, 0x04, 0xb0, 0x07, 0xa8,
	0x90, 0x29, 0xd8, 0x43, 0xc8, 0x8a, 0x47, 0x6c, 0x24, 0xfe, 0x38, 0x80, 0xae, 0x92, 0xeb, 0xa7,
	0xf9, 0xf9, 0xe5, 0x97, 0x49, 0xdb, 0x76, 0xd8, 0x43, 0x3c, 0xcd, 0x2b, 0x27, 0x96, 0xd8, 0x45,
	0xcc, 0x26, 0x42, 0xe8, 0x75, 0x32, 0x9e, 0x2d, 0x81, 0xd9, 0xfd, 0x00, 0x37, 0x25, 0xde, 0xe4,
	0x12, 0x4c, 0xd7, 0xc9, 0x0d, 0x05, 0x3c, 0x94, 0x60, 0x55, 0x22, 0xac, 0xd2, 0xc9, 0x59, 0x5a,
	0x3f, 0x44, 0xda, 0x35, 0x05, 0xab, 0x03, 0xdc, 0x29, 0xc1, 0xdb, 0xe4, 0xbf, 0x6f, 0x58, 0xa9,
	0xaa, 0xfa, 0x23, 0x54, 0x5d, 0x3f, 0x6b, 0xb1, 0x8a, 0xf4, 0xff, 0x93, 0xe9, 0xf2, 0x62, 0xa8,
	0xff, 0x63, 0x14, 0x32, 0x55, 0xb2, 0x63, 0x10, 0xb7, 0x09, 0x1d, 0x9c, 0x55, 0x51, 0x03, 0x8f,
	0x10, 0x3c, 0x9d, 0x1f, 0x4f, 0x51, 0x01, 0xff, 0x23, 0x53, 0x03, 0x74, 0xaa, 0x8d, 0xbd, 0xc3,
	0x3e, 0x41, 0x4d, 0x93, 0x39, 0x74, 0xd7, 0x19, 0x4f, 0xe3, 0x1a, 0xec, 0xd3, 0xd3, 0xb8, 0x06,
	0x5d, 0xc6, 0xca, 0x2d, 0x6b, 0x2d, 0x24, 0xac, 0xa0, 0x84, 0xb9, 0x4a, 0xac, 0x85, 0x0e, 0x5f,
	0xbb, 0x65, 0x9e, 0x17, 0xf3, 0x18, 0x37, 0xa1, 0x15, 0x92, 0x57, 0x74, 0x36, 0xa3, 0xc1, 0x9e,
	0xbc, 0x81, 0xd1, 0xa0, 0x0b, 0x64, 0x52, 0x01, 0xef, 0xea, 0x36, 0xd7, 0xa9, 0xb3, 0xb2, 0x55,
	0x54, 0x34, 0xae, 0x60, 0x53, 0xb7, 0x77, 0xd0, 0x44, 0x6f, 0x90, 0x89, 0x40, 0xf7, 0x12, 0x2b,
	0x8d, 0x6f, 0x1d, 0x6b, 0x1e, 0x92, 0xd9, 0xb0, 0x7d, 0xbc, 0x8b, 0x1b, 0xdb, 0x20, 0xe5, 0xfb,
	0xca, 0xc2, 0x20, 0xbe, 0xa7, 0x08, 0x9d, 0x51, 0xd0, 0x0a, 0xd2, 0xc7, 0xca, 0x42, 0x11, 0x9b,
	0x6f, 0x11, 0x39, 0x81, 0x3d, 0x43, 0x81, 0x63, 0x05, 0x8e, 0xde, 0x24, 0xd3, 0xe5, 0x05, 0x31,
	0xb9, 0xeb, 0xf9, 0xe1, 0x66, 0x20, 0x4c, 0xad, 0x4f, 0x42, 0x08, 0x41, 0xea, 0xca, 0x08, 0x64,
	0x62, 0xd9, 0x06, 0x5e, 0xba, 0x49, 0x05, 0xab, 0x10, 0xa4, 0xbb, 0xde, 0x48, 0xff, 0x43, 0x26,
	0x11, 0x54, 0x48, 0xfb, 0x0c, 0x57, 0x9b, 0x70, 0xc6, 0x42, 0x55, 0x9d, 0x4c, 0xe4, 0x8b, 0xb9,
	0x4e, 0xc8, 0x9e, 0x23, 0x86, 0xf8, 0x95, 0x5c, 0x2f, 0xcc, 0xce, 0xab, 0x40, 0x34, 0xd8, 0x26,
	0x42, 0xc6, 0x07, 0x90, 0x06, 0x6d, 0x60, 0x07, 0x49, 0x8d, 0x0c, 0x64, 0x88, 0xcd, 0x2d, 0x17,
	0xb6, 0x95, 0x77, 0x83, 0xdd, 0xc2, 0x97, 0xcb, 0x5b, 0x22, 0xb3, 0x55, 0x8e, 0xef, 0xc4, 0xdb,
	0xb8, 0xfa, 0x4c, 0x99, 0xe1, 0x5b, 0xf2, 0x2d, 0x32, 0xa3, 0x80, 0x77, 0xa4, 0x08, 0xa5, 0xe1,
	0xb1, 0xb0, 0x41, 0x47, 0x02, 0xdb, 0x41, 0xf4, 0x94, 0x82, 0x75, 0xb4, 0x6f, 0x79, 0x33, 0x7d,
	0x48, 0x2e, 0x0f, 0x3a, 0xa7, 0xbf, 0x64, 0x83, 0x63, 0xd8, 0xc5, 0x0c, 0xcd, 0xe7, 0xbd, 0xd3,
	0xdf, 0xad, 0xe2, 0x40, 0x7c, 0x67, 0xab, 0x52, 0xc1, 0x0a, 0x63, 0xd9, 0xe7, 0x79, 0xa7, 0x2e,
	0xf3, 0xf6, 0x9c, 0x2b, 0x2b, 0x86, 0x2a, 0x49, 0x26, 0x21, 0x6b, 0x16, 0xc1, 0x94, 0x28, 0x6b,
	0x49, 0x48, 0x97, 0x09, 0x73, 0xc9, 0x56, 0xb1, 0xe4, 0x56, 0xf3, 0xae, 0xea, 0x97, 0x2e, 0xe9,
	0x1e, 0xea, 0xbb, 0xa8, 0xa0, 0xa5, 0x62, 0xd9, 0xd2, 0x9b, 0xaa, 0x2f, 0x4b, 0x17, 0x64, 0xee,
	0x24, 0xcf, 0x8b, 0x6b, 0xe5, 0x3b, 0x0d, 0x48, 0x5e, 0xda, 0x6d, 0x3c, 0xe6, 0x0a, 0xc3, 0x29,
	0xfb, 0x22, 0x3f, 0xb8, 0x01, 0xde, 0xe9, 0x72, 0xf3, 0x58, 0xe3, 0xf4, 0x07, 0xf6, 0x02, 0x73,
	0x37, 0x9a, 0x68, 0x37, 0xfc, 0xc1, 0x8d, 0xef, 0x8e, 0x2b, 0xdc, 0x2f, 0xeb, 0xb5, 0xc5, 0xe1,
	0x26, 0x7e, 0x53, 0x46, 0x46, 0x03, 0x91, 0xda, 0x9e, 0x91, 0xec, 0x2b, 0x3f, 0x25, 0xb3, 0x5f,
	0x7a, 0x9f, 0xcc, 0xf7, 0x92, 0x50, 0x5a, 0x69, 0x62, 0x95, 0xc8, 0x90, 0x5b, 0x23, 0x12, 0x70,
	0x57, 0x93, 0xbd, 0x44, 0xe0, 0x5c, 0xd9, 0xdb, 0xca, 0x9d, 0xf4, 0x1d, 0x54, 0xab, 0x82, 0x38,
	0xe5, 0xb1, 0x04, 0x10, 0x6d, 0xc9, 0x75, 0x14, 0xb1, 0xaf, 0x51, 0xca, 0xb4, 0x82, 0x8d, 0x20,
	0x4e, 0xb7, 0xbc, 0x63, 0x27, 0x8a, 0xdc, 0x0c, 0x7f, 0xad, 0x81, 0xb7, 0x8d, 0xee, 0xa5, 0xec,
	0x1b, 0x3f, 0xc3, 0x5f, 0x6b, 0x78, 0xe6, 0xfe, 0xb3, 0xa4, 0x04, 0x3a, 0x8e, 0x65, 0x62, 0x79,
	0xa4, 0x0d, 0x97, 0x89, 0x35, 0xc7, 0xec, 0xdb, 0xfc, 0x86, 0x3e, 0xf1, 0xae, 0xa7, 0xda, 0xac,
	0x39, 0x87, 0xab, 0xf4, 0xfc, 0x31, 0xe2, 0x67, 0xd9, 0x77, 0xfe, 0xda, 0x67, 0x2f, 0x12, 0x9c,
	0x61, 0xbf, 0xd7, 0x4a, 0x20, 0xf7, 0xac, 0x61, 0xdf, 0xd7, 0x87, 0x16, 0xc7, 0x1b, 0xbf, 0xd4,
	0x96, 0xfe, 0xf9, 0xe7, 0xea, 0xd2, 0x59, 0xcf, 0xc7, 0x42, 0xff, 0x86, 0x7b, 0x84, 0xfd, 0x59,
	0x23, 0xd3, 0xee, 0x4d, 0x56, 0x09, 0x81, 0xd7, 0x6b, 0x8b, 0xe3, 0x8d, 0x5f, 0xdf, 0xbe, 0x10,
	0x06, 0xaf, 0xc7, 0xe6, 0x64, 0xe7, 0x70, 0xbb, 0x14, 0xc7, 0x55, 0x42, 0x14, 0xf0, 0xc8, 0xbd,
	0x89, 0x54, 0xc8, 0x5e, 0xf9, 0xd4, 0x2b, 0x78, 0xda, 0xd5, 0x87, 0x1b, 0xa1, 0xeb, 0x2d, 0xf9,
	0x90, 0xf2, 0x4a, 0x7d, 0x85, 0x08, 0x9f, 0x79, 0xef, 0xf2, 0x93, 0xd5, 0x97, 0xca, 0x03, 0xc2,
	0x2a, 0x23, 0xa4, 0x4c, 0xda, 0xf7, 0xed, 0xa2, 0xe4, 0x2f, 0x33, 0x6f, 0x91, 0x99, 0xd2, 0x38,
	0xcc, 0x28, 0x81, 0x9f, 0xc9, 0x50, 0x4c, 0x44, 0x8f, 0xbd, 0x47, 0xe6, 0x4f, 0x0e, 0xaa, 0x8c,
	0x10, 0xfa, 0x2b, 0x1f, 0x56, 0x67, 0x95, 0x67, 0x5d, 0x26, 0xe7, 0xf1, 0xcd, 0xed, 0xe6, 0x90,
	0xf4, 0x8f, 0x5d, 0xf7, 0xde, 0x76, 0x33, 0xe8, 0x06, 0x99, 0x28, 0x9e, 0x93, 0x60, 0x0d, 0x8b,
	0x7c, 0xbd, 0xe6, 0xb6, 0x3d, 0x6b, 0xe8, 0x6f, 0x35, 0x32, 0xd4, 0x0b, 0x23, 0xd6, 0xc6, 0x2a,
	0xfd, 0xf9, 0xad, 0x48, 0x71, 0xe9, 0x81, 0xde, 0x74, 0xe2, 0xe8, 0x25, 0x32, 0x0a, 0xd2, 0x72,
	0x6b, 0xbb, 0xac, 0x83, 0x99, 0x1c, 0x01, 0x69, 0x5b, 0xb6, 0xbb, 0x3f, 0x82, 0x8f, 0xcb, 0xbb,
	0x7f, 0x07, 0x00, 0x00, 0xff, 0xff, 0x27, 0x94, 0x8f, 0xc8, 0x24, 0x0e, 0x00, 0x00,
}
