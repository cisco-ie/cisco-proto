/*
Copyright 2019 Cisco Systems

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: evpn_grp_info.proto

package cisco_ios_xr_evpn_oper_evpn_active_evpn_groups_evpn_group

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type EvpnGrpInfo_KEYS struct {
	GroupNumber          uint32   `protobuf:"varint,1,opt,name=group_number,json=groupNumber,proto3" json:"group_number,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EvpnGrpInfo_KEYS) Reset()         { *m = EvpnGrpInfo_KEYS{} }
func (m *EvpnGrpInfo_KEYS) String() string { return proto.CompactTextString(m) }
func (*EvpnGrpInfo_KEYS) ProtoMessage()    {}
func (*EvpnGrpInfo_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_2947777f5470ef38, []int{0}
}

func (m *EvpnGrpInfo_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EvpnGrpInfo_KEYS.Unmarshal(m, b)
}
func (m *EvpnGrpInfo_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EvpnGrpInfo_KEYS.Marshal(b, m, deterministic)
}
func (m *EvpnGrpInfo_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EvpnGrpInfo_KEYS.Merge(m, src)
}
func (m *EvpnGrpInfo_KEYS) XXX_Size() int {
	return xxx_messageInfo_EvpnGrpInfo_KEYS.Size(m)
}
func (m *EvpnGrpInfo_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_EvpnGrpInfo_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_EvpnGrpInfo_KEYS proto.InternalMessageInfo

func (m *EvpnGrpInfo_KEYS) GetGroupNumber() uint32 {
	if m != nil {
		return m.GroupNumber
	}
	return 0
}

type EvpnGrpIntfInfo struct {
	InterfaceName        string   `protobuf:"bytes,1,opt,name=interface_name,json=interfaceName,proto3" json:"interface_name,omitempty"`
	State                string   `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EvpnGrpIntfInfo) Reset()         { *m = EvpnGrpIntfInfo{} }
func (m *EvpnGrpIntfInfo) String() string { return proto.CompactTextString(m) }
func (*EvpnGrpIntfInfo) ProtoMessage()    {}
func (*EvpnGrpIntfInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_2947777f5470ef38, []int{1}
}

func (m *EvpnGrpIntfInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EvpnGrpIntfInfo.Unmarshal(m, b)
}
func (m *EvpnGrpIntfInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EvpnGrpIntfInfo.Marshal(b, m, deterministic)
}
func (m *EvpnGrpIntfInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EvpnGrpIntfInfo.Merge(m, src)
}
func (m *EvpnGrpIntfInfo) XXX_Size() int {
	return xxx_messageInfo_EvpnGrpIntfInfo.Size(m)
}
func (m *EvpnGrpIntfInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_EvpnGrpIntfInfo.DiscardUnknown(m)
}

var xxx_messageInfo_EvpnGrpIntfInfo proto.InternalMessageInfo

func (m *EvpnGrpIntfInfo) GetInterfaceName() string {
	if m != nil {
		return m.InterfaceName
	}
	return ""
}

func (m *EvpnGrpIntfInfo) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

type EvpnGrpInfo struct {
	GroupId              uint32             `protobuf:"varint,50,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	State                string             `protobuf:"bytes,51,opt,name=state,proto3" json:"state,omitempty"`
	CoreInterface        []*EvpnGrpIntfInfo `protobuf:"bytes,52,rep,name=core_interface,json=coreInterface,proto3" json:"core_interface,omitempty"`
	AccessInterface      []*EvpnGrpIntfInfo `protobuf:"bytes,53,rep,name=access_interface,json=accessInterface,proto3" json:"access_interface,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *EvpnGrpInfo) Reset()         { *m = EvpnGrpInfo{} }
func (m *EvpnGrpInfo) String() string { return proto.CompactTextString(m) }
func (*EvpnGrpInfo) ProtoMessage()    {}
func (*EvpnGrpInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_2947777f5470ef38, []int{2}
}

func (m *EvpnGrpInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EvpnGrpInfo.Unmarshal(m, b)
}
func (m *EvpnGrpInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EvpnGrpInfo.Marshal(b, m, deterministic)
}
func (m *EvpnGrpInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EvpnGrpInfo.Merge(m, src)
}
func (m *EvpnGrpInfo) XXX_Size() int {
	return xxx_messageInfo_EvpnGrpInfo.Size(m)
}
func (m *EvpnGrpInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_EvpnGrpInfo.DiscardUnknown(m)
}

var xxx_messageInfo_EvpnGrpInfo proto.InternalMessageInfo

func (m *EvpnGrpInfo) GetGroupId() uint32 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

func (m *EvpnGrpInfo) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *EvpnGrpInfo) GetCoreInterface() []*EvpnGrpIntfInfo {
	if m != nil {
		return m.CoreInterface
	}
	return nil
}

func (m *EvpnGrpInfo) GetAccessInterface() []*EvpnGrpIntfInfo {
	if m != nil {
		return m.AccessInterface
	}
	return nil
}

func init() {
	proto.RegisterType((*EvpnGrpInfo_KEYS)(nil), "cisco_ios_xr_evpn_oper.evpn.active.evpn_groups.evpn_group.evpn_grp_info_KEYS")
	proto.RegisterType((*EvpnGrpIntfInfo)(nil), "cisco_ios_xr_evpn_oper.evpn.active.evpn_groups.evpn_group.evpn_grp_intf_info")
	proto.RegisterType((*EvpnGrpInfo)(nil), "cisco_ios_xr_evpn_oper.evpn.active.evpn_groups.evpn_group.evpn_grp_info")
}

func init() { proto.RegisterFile("evpn_grp_info.proto", fileDescriptor_2947777f5470ef38) }

var fileDescriptor_2947777f5470ef38 = []byte{
	// 263 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x92, 0xcd, 0x4a, 0x3b, 0x31,
	0x14, 0xc5, 0x69, 0xff, 0xfc, 0xfd, 0xb8, 0x75, 0xaa, 0x44, 0x17, 0xe3, 0xae, 0x0e, 0x08, 0x5d,
	0x65, 0xd1, 0x2a, 0xe2, 0x03, 0xb8, 0x28, 0x62, 0xc1, 0x71, 0xe5, 0xea, 0x92, 0xa6, 0x77, 0x24,
	0x8b, 0x49, 0x42, 0x92, 0x96, 0x3e, 0x96, 0x8f, 0x28, 0xbd, 0xa3, 0xe3, 0x0c, 0xee, 0x04, 0x77,
	0xf7, 0x23, 0xe7, 0xfc, 0x4e, 0x42, 0xe0, 0x9c, 0xb6, 0xde, 0xe2, 0x5b, 0xf0, 0x68, 0x6c, 0xe5,
	0xa4, 0x0f, 0x2e, 0x39, 0x71, 0xaf, 0x4d, 0xd4, 0x0e, 0x8d, 0x8b, 0xb8, 0x0b, 0xc8, 0x27, 0x9c,
	0xa7, 0x20, 0xf7, 0x95, 0x54, 0x3a, 0x99, 0x2d, 0xc9, 0x4f, 0x9d, 0xdb, 0xf8, 0xd8, 0xa9, 0x8b,
	0x3b, 0x10, 0x3d, 0x47, 0x7c, 0x7c, 0x78, 0x7d, 0x11, 0x57, 0x70, 0xc2, 0x6b, 0xb4, 0x9b, 0x7a,
	0x45, 0x21, 0x1f, 0x4c, 0x06, 0xd3, 0xac, 0x1c, 0xf1, 0x6c, 0xc9, 0xa3, 0xe2, 0xb9, 0x27, 0x4c,
	0x15, 0xab, 0xc5, 0x35, 0x8c, 0x8d, 0x4d, 0x14, 0x2a, 0xa5, 0x09, 0xad, 0xaa, 0x89, 0xa5, 0xc7,
	0x65, 0xd6, 0x4e, 0x97, 0xaa, 0x26, 0x71, 0x01, 0xff, 0x63, 0x52, 0x89, 0xf2, 0x21, 0x6f, 0x9b,
	0xa6, 0x78, 0x1f, 0x42, 0xd6, 0x0b, 0x23, 0x2e, 0xe1, 0xa8, 0xc9, 0x61, 0xd6, 0xf9, 0x8c, 0x33,
	0x1c, 0x72, 0xbf, 0x58, 0x7f, 0x5b, 0xcc, 0x3b, 0x16, 0x22, 0xc1, 0x58, 0xbb, 0x40, 0xd8, 0xe2,
	0xf2, 0x9b, 0xc9, 0xbf, 0xe9, 0x68, 0xf6, 0x24, 0x7f, 0xfd, 0x44, 0xf2, 0xe7, 0x35, 0xcb, 0x6c,
	0x0f, 0x59, 0x7c, 0x31, 0xc4, 0x0e, 0xce, 0x94, 0xd6, 0x14, 0x63, 0x87, 0x7b, 0xfb, 0x17, 0xdc,
	0xd3, 0x06, 0xd3, 0x92, 0x57, 0x07, 0xfc, 0x01, 0xe6, 0x1f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x34,
	0xdd, 0x30, 0x76, 0x17, 0x02, 0x00, 0x00,
}
