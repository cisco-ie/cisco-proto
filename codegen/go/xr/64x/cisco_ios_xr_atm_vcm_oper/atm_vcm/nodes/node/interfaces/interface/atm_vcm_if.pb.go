/*
Copyright 2019 Cisco Systems

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: atm_vcm_if.proto

package cisco_ios_xr_atm_vcm_oper_atm_vcm_nodes_node_interfaces_interface

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type AtmVcmIf_KEYS struct {
	NodeName             string   `protobuf:"bytes,1,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	InterfaceName        string   `protobuf:"bytes,2,opt,name=interface_name,json=interfaceName,proto3" json:"interface_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AtmVcmIf_KEYS) Reset()         { *m = AtmVcmIf_KEYS{} }
func (m *AtmVcmIf_KEYS) String() string { return proto.CompactTextString(m) }
func (*AtmVcmIf_KEYS) ProtoMessage()    {}
func (*AtmVcmIf_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a75517a3e9fd84e, []int{0}
}

func (m *AtmVcmIf_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AtmVcmIf_KEYS.Unmarshal(m, b)
}
func (m *AtmVcmIf_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AtmVcmIf_KEYS.Marshal(b, m, deterministic)
}
func (m *AtmVcmIf_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AtmVcmIf_KEYS.Merge(m, src)
}
func (m *AtmVcmIf_KEYS) XXX_Size() int {
	return xxx_messageInfo_AtmVcmIf_KEYS.Size(m)
}
func (m *AtmVcmIf_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_AtmVcmIf_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_AtmVcmIf_KEYS proto.InternalMessageInfo

func (m *AtmVcmIf_KEYS) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

func (m *AtmVcmIf_KEYS) GetInterfaceName() string {
	if m != nil {
		return m.InterfaceName
	}
	return ""
}

type AtmVcmCellPackingInfo struct {
	LocalMaxCellsPackedPerPacket      uint32   `protobuf:"varint,1,opt,name=local_max_cells_packed_per_packet,json=localMaxCellsPackedPerPacket,proto3" json:"local_max_cells_packed_per_packet,omitempty"`
	NegotiatedMaxCellsPackedPerPacket uint32   `protobuf:"varint,2,opt,name=negotiated_max_cells_packed_per_packet,json=negotiatedMaxCellsPackedPerPacket,proto3" json:"negotiated_max_cells_packed_per_packet,omitempty"`
	MaxCellPackedTimeout              uint32   `protobuf:"varint,3,opt,name=max_cell_packed_timeout,json=maxCellPackedTimeout,proto3" json:"max_cell_packed_timeout,omitempty"`
	XXX_NoUnkeyedLiteral              struct{} `json:"-"`
	XXX_unrecognized                  []byte   `json:"-"`
	XXX_sizecache                     int32    `json:"-"`
}

func (m *AtmVcmCellPackingInfo) Reset()         { *m = AtmVcmCellPackingInfo{} }
func (m *AtmVcmCellPackingInfo) String() string { return proto.CompactTextString(m) }
func (*AtmVcmCellPackingInfo) ProtoMessage()    {}
func (*AtmVcmCellPackingInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a75517a3e9fd84e, []int{1}
}

func (m *AtmVcmCellPackingInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AtmVcmCellPackingInfo.Unmarshal(m, b)
}
func (m *AtmVcmCellPackingInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AtmVcmCellPackingInfo.Marshal(b, m, deterministic)
}
func (m *AtmVcmCellPackingInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AtmVcmCellPackingInfo.Merge(m, src)
}
func (m *AtmVcmCellPackingInfo) XXX_Size() int {
	return xxx_messageInfo_AtmVcmCellPackingInfo.Size(m)
}
func (m *AtmVcmCellPackingInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_AtmVcmCellPackingInfo.DiscardUnknown(m)
}

var xxx_messageInfo_AtmVcmCellPackingInfo proto.InternalMessageInfo

func (m *AtmVcmCellPackingInfo) GetLocalMaxCellsPackedPerPacket() uint32 {
	if m != nil {
		return m.LocalMaxCellsPackedPerPacket
	}
	return 0
}

func (m *AtmVcmCellPackingInfo) GetNegotiatedMaxCellsPackedPerPacket() uint32 {
	if m != nil {
		return m.NegotiatedMaxCellsPackedPerPacket
	}
	return 0
}

func (m *AtmVcmCellPackingInfo) GetMaxCellPackedTimeout() uint32 {
	if m != nil {
		return m.MaxCellPackedTimeout
	}
	return 0
}

type AtmVcmIf struct {
	IlmiVpi                         uint32                 `protobuf:"varint,50,opt,name=ilmi_vpi,json=ilmiVpi,proto3" json:"ilmi_vpi,omitempty"`
	IlmiVci                         uint32                 `protobuf:"varint,51,opt,name=ilmi_vci,json=ilmiVci,proto3" json:"ilmi_vci,omitempty"`
	PvcFailures                     uint32                 `protobuf:"varint,52,opt,name=pvc_failures,json=pvcFailures,proto3" json:"pvc_failures,omitempty"`
	CurrentlyFailingLayer2PvPs      uint32                 `protobuf:"varint,53,opt,name=currently_failing_layer2pv_ps,json=currentlyFailingLayer2pvPs,proto3" json:"currently_failing_layer2pv_ps,omitempty"`
	CurrentlyFailingLayer2PvCs      uint32                 `protobuf:"varint,54,opt,name=currently_failing_layer2pv_cs,json=currentlyFailingLayer2pvCs,proto3" json:"currently_failing_layer2pv_cs,omitempty"`
	CurrentlyFailingLayer3VpTunnels uint32                 `protobuf:"varint,55,opt,name=currently_failing_layer3vp_tunnels,json=currentlyFailingLayer3vpTunnels,proto3" json:"currently_failing_layer3vp_tunnels,omitempty"`
	CurrentlyFailingLayer3PvCs      uint32                 `protobuf:"varint,56,opt,name=currently_failing_layer3pv_cs,json=currentlyFailingLayer3pvCs,proto3" json:"currently_failing_layer3pv_cs,omitempty"`
	PvcFailuresTrapEnable           bool                   `protobuf:"varint,57,opt,name=pvc_failures_trap_enable,json=pvcFailuresTrapEnable,proto3" json:"pvc_failures_trap_enable,omitempty"`
	PvcNotificationInterval         uint32                 `protobuf:"varint,58,opt,name=pvc_notification_interval,json=pvcNotificationInterval,proto3" json:"pvc_notification_interval,omitempty"`
	ConfiguredLayer2PvPs            uint32                 `protobuf:"varint,59,opt,name=configured_layer2pv_ps,json=configuredLayer2pvPs,proto3" json:"configured_layer2pv_ps,omitempty"`
	ConfiguredLayer2PvCs            uint32                 `protobuf:"varint,60,opt,name=configured_layer2pv_cs,json=configuredLayer2pvCs,proto3" json:"configured_layer2pv_cs,omitempty"`
	ConfiguredLayer3VpTunnels       uint32                 `protobuf:"varint,61,opt,name=configured_layer3vp_tunnels,json=configuredLayer3vpTunnels,proto3" json:"configured_layer3vp_tunnels,omitempty"`
	ConfiguredLayer3PvCs            uint32                 `protobuf:"varint,62,opt,name=configured_layer3pv_cs,json=configuredLayer3pvCs,proto3" json:"configured_layer3pv_cs,omitempty"`
	CellPackingData                 *AtmVcmCellPackingInfo `protobuf:"bytes,63,opt,name=cell_packing_data,json=cellPackingData,proto3" json:"cell_packing_data,omitempty"`
	PortType                        string                 `protobuf:"bytes,64,opt,name=port_type,json=portType,proto3" json:"port_type,omitempty"`
	MainInterface                   string                 `protobuf:"bytes,65,opt,name=main_interface,json=mainInterface,proto3" json:"main_interface,omitempty"`
	L2CellPackingCount              uint32                 `protobuf:"varint,66,opt,name=l2_cell_packing_count,json=l2CellPackingCount,proto3" json:"l2_cell_packing_count,omitempty"`
	XXX_NoUnkeyedLiteral            struct{}               `json:"-"`
	XXX_unrecognized                []byte                 `json:"-"`
	XXX_sizecache                   int32                  `json:"-"`
}

func (m *AtmVcmIf) Reset()         { *m = AtmVcmIf{} }
func (m *AtmVcmIf) String() string { return proto.CompactTextString(m) }
func (*AtmVcmIf) ProtoMessage()    {}
func (*AtmVcmIf) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a75517a3e9fd84e, []int{2}
}

func (m *AtmVcmIf) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AtmVcmIf.Unmarshal(m, b)
}
func (m *AtmVcmIf) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AtmVcmIf.Marshal(b, m, deterministic)
}
func (m *AtmVcmIf) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AtmVcmIf.Merge(m, src)
}
func (m *AtmVcmIf) XXX_Size() int {
	return xxx_messageInfo_AtmVcmIf.Size(m)
}
func (m *AtmVcmIf) XXX_DiscardUnknown() {
	xxx_messageInfo_AtmVcmIf.DiscardUnknown(m)
}

var xxx_messageInfo_AtmVcmIf proto.InternalMessageInfo

func (m *AtmVcmIf) GetIlmiVpi() uint32 {
	if m != nil {
		return m.IlmiVpi
	}
	return 0
}

func (m *AtmVcmIf) GetIlmiVci() uint32 {
	if m != nil {
		return m.IlmiVci
	}
	return 0
}

func (m *AtmVcmIf) GetPvcFailures() uint32 {
	if m != nil {
		return m.PvcFailures
	}
	return 0
}

func (m *AtmVcmIf) GetCurrentlyFailingLayer2PvPs() uint32 {
	if m != nil {
		return m.CurrentlyFailingLayer2PvPs
	}
	return 0
}

func (m *AtmVcmIf) GetCurrentlyFailingLayer2PvCs() uint32 {
	if m != nil {
		return m.CurrentlyFailingLayer2PvCs
	}
	return 0
}

func (m *AtmVcmIf) GetCurrentlyFailingLayer3VpTunnels() uint32 {
	if m != nil {
		return m.CurrentlyFailingLayer3VpTunnels
	}
	return 0
}

func (m *AtmVcmIf) GetCurrentlyFailingLayer3PvCs() uint32 {
	if m != nil {
		return m.CurrentlyFailingLayer3PvCs
	}
	return 0
}

func (m *AtmVcmIf) GetPvcFailuresTrapEnable() bool {
	if m != nil {
		return m.PvcFailuresTrapEnable
	}
	return false
}

func (m *AtmVcmIf) GetPvcNotificationInterval() uint32 {
	if m != nil {
		return m.PvcNotificationInterval
	}
	return 0
}

func (m *AtmVcmIf) GetConfiguredLayer2PvPs() uint32 {
	if m != nil {
		return m.ConfiguredLayer2PvPs
	}
	return 0
}

func (m *AtmVcmIf) GetConfiguredLayer2PvCs() uint32 {
	if m != nil {
		return m.ConfiguredLayer2PvCs
	}
	return 0
}

func (m *AtmVcmIf) GetConfiguredLayer3VpTunnels() uint32 {
	if m != nil {
		return m.ConfiguredLayer3VpTunnels
	}
	return 0
}

func (m *AtmVcmIf) GetConfiguredLayer3PvCs() uint32 {
	if m != nil {
		return m.ConfiguredLayer3PvCs
	}
	return 0
}

func (m *AtmVcmIf) GetCellPackingData() *AtmVcmCellPackingInfo {
	if m != nil {
		return m.CellPackingData
	}
	return nil
}

func (m *AtmVcmIf) GetPortType() string {
	if m != nil {
		return m.PortType
	}
	return ""
}

func (m *AtmVcmIf) GetMainInterface() string {
	if m != nil {
		return m.MainInterface
	}
	return ""
}

func (m *AtmVcmIf) GetL2CellPackingCount() uint32 {
	if m != nil {
		return m.L2CellPackingCount
	}
	return 0
}

func init() {
	proto.RegisterType((*AtmVcmIf_KEYS)(nil), "cisco_ios_xr_atm_vcm_oper.atm_vcm.nodes.node.interfaces.interface.atm_vcm_if_KEYS")
	proto.RegisterType((*AtmVcmCellPackingInfo)(nil), "cisco_ios_xr_atm_vcm_oper.atm_vcm.nodes.node.interfaces.interface.atm_vcm_cell_packing_info")
	proto.RegisterType((*AtmVcmIf)(nil), "cisco_ios_xr_atm_vcm_oper.atm_vcm.nodes.node.interfaces.interface.atm_vcm_if")
}

func init() { proto.RegisterFile("atm_vcm_if.proto", fileDescriptor_5a75517a3e9fd84e) }

var fileDescriptor_5a75517a3e9fd84e = []byte{
	// 608 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x54, 0xdf, 0x4e, 0x14, 0x3d,
	0x14, 0xcf, 0xf2, 0x25, 0x1f, 0x50, 0x44, 0xb4, 0x11, 0xe9, 0x8a, 0x46, 0xd8, 0x44, 0xc3, 0xd5,
	0x26, 0xee, 0x80, 0x28, 0x2a, 0x8a, 0x2b, 0x18, 0x82, 0x12, 0x5c, 0x57, 0x13, 0x13, 0x93, 0xa6,
	0x74, 0x3b, 0x9b, 0xc6, 0x4e, 0xdb, 0xb4, 0x9d, 0x09, 0xfb, 0x06, 0x3e, 0xa0, 0xcf, 0xe1, 0x33,
	0x98, 0xb6, 0xb3, 0xcc, 0x40, 0x76, 0xd7, 0x0b, 0x6f, 0x26, 0x9d, 0xf3, 0xfb, 0x73, 0x4e, 0x7e,
	0x33, 0x3d, 0xe0, 0x16, 0x71, 0x19, 0x2e, 0x68, 0x86, 0x79, 0xda, 0xd6, 0x46, 0x39, 0x05, 0x0f,
	0x28, 0xb7, 0x54, 0x61, 0xae, 0x2c, 0xbe, 0x30, 0x78, 0x0c, 0x2b, 0xcd, 0x4c, 0xbb, 0x7c, 0x69,
	0x4b, 0x35, 0x60, 0x36, 0x3c, 0xdb, 0x5c, 0x3a, 0x66, 0x52, 0x42, 0x99, 0xad, 0x8e, 0xad, 0x2f,
	0x60, 0xa5, 0xb2, 0xc5, 0x27, 0x87, 0xdf, 0x3e, 0xc3, 0x75, 0xb0, 0xe8, 0xf9, 0x58, 0x92, 0x8c,
	0xa1, 0xc6, 0x46, 0x63, 0x6b, 0xb1, 0xb7, 0xe0, 0x0b, 0xa7, 0x24, 0x63, 0xf0, 0x11, 0xb8, 0x79,
	0x29, 0x8e, 0x8c, 0xb9, 0xc0, 0x58, 0xbe, 0xac, 0x7a, 0x5a, 0xeb, 0x77, 0x03, 0x34, 0xc7, 0xbe,
	0x94, 0x09, 0x81, 0x35, 0xa1, 0x3f, 0xb8, 0x1c, 0x62, 0x2e, 0x53, 0x05, 0xdf, 0x83, 0x4d, 0xa1,
	0x28, 0x11, 0x38, 0x23, 0x17, 0x01, 0xb6, 0x01, 0x67, 0x03, 0xac, 0x99, 0x89, 0x47, 0x17, 0x3a,
	0x2f, 0xf7, 0xee, 0x07, 0xe2, 0x47, 0x72, 0xd1, 0xf5, 0xb4, 0xb3, 0xc0, 0x3a, 0x63, 0x26, 0x1c,
	0x1c, 0xfc, 0x04, 0x1e, 0x4b, 0x36, 0x54, 0x8e, 0x13, 0xc7, 0x06, 0x33, 0xdd, 0xe6, 0x82, 0xdb,
	0x66, 0xc5, 0x9e, 0x66, 0xb9, 0x03, 0xd6, 0xc6, 0x3e, 0x63, 0x1b, 0xc7, 0x33, 0xa6, 0x72, 0x87,
	0xfe, 0x0b, 0x1e, 0x77, 0xb2, 0xa8, 0x8c, 0xc2, 0x7e, 0xc4, 0x5a, 0xbf, 0xe6, 0x01, 0xa8, 0x82,
	0x84, 0x4d, 0xb0, 0xc0, 0x45, 0xc6, 0x71, 0xa1, 0x39, 0xea, 0x04, 0xd9, 0xbc, 0x7f, 0xff, 0xaa,
	0x79, 0x05, 0x51, 0x8e, 0x92, 0x1a, 0x44, 0x39, 0xdc, 0x04, 0x37, 0x74, 0x41, 0x71, 0x4a, 0xb8,
	0xc8, 0x0d, 0xb3, 0x68, 0x3b, 0xc0, 0x4b, 0xba, 0xa0, 0x47, 0x65, 0x09, 0x1e, 0x80, 0x07, 0x34,
	0x37, 0x86, 0x49, 0x27, 0x46, 0x81, 0xe8, 0x43, 0x15, 0x64, 0xc4, 0x4c, 0x47, 0x17, 0x58, 0x5b,
	0xb4, 0x13, 0x34, 0xf7, 0x2e, 0x49, 0x47, 0x91, 0xf3, 0xa1, 0xa4, 0x9c, 0xfd, 0xcd, 0x82, 0x5a,
	0xf4, 0x74, 0xb6, 0x45, 0xd7, 0xc2, 0x13, 0xd0, 0x9a, 0x62, 0x91, 0x14, 0x1a, 0xbb, 0x5c, 0x4a,
	0x26, 0x2c, 0xda, 0x0d, 0x3e, 0x0f, 0x27, 0xfa, 0x24, 0x85, 0xee, 0x47, 0xda, 0x8c, 0x79, 0x92,
	0x38, 0xcf, 0xb3, 0x19, 0xf3, 0x24, 0x61, 0x9e, 0x5d, 0x80, 0xea, 0xc1, 0x61, 0x67, 0x88, 0xc6,
	0x4c, 0x92, 0x73, 0xc1, 0xd0, 0xf3, 0x8d, 0xc6, 0xd6, 0x42, 0x6f, 0xb5, 0x16, 0x62, 0xdf, 0x10,
	0x7d, 0x18, 0x40, 0xb8, 0x07, 0x9a, 0x5e, 0x28, 0x95, 0xe3, 0x29, 0xa7, 0xc4, 0x71, 0x25, 0x71,
	0xf8, 0x93, 0x0b, 0x22, 0xd0, 0x5e, 0xe8, 0xbb, 0xa6, 0x0b, 0x7a, 0x5a, 0xc3, 0x8f, 0x4b, 0x18,
	0x6e, 0x83, 0xbb, 0x54, 0xc9, 0x94, 0x0f, 0x73, 0xc3, 0x06, 0x57, 0xbe, 0xc1, 0x8b, 0xf8, 0xa3,
	0x54, 0x68, 0x2d, 0xfd, 0x29, 0x2a, 0x6a, 0xd1, 0xcb, 0x69, 0xaa, 0xae, 0x85, 0xfb, 0x60, 0xfd,
	0xba, 0xaa, 0x9e, 0xf4, 0xab, 0x20, 0x6d, 0x5e, 0x93, 0xd6, 0x32, 0x9e, 0xd0, 0xb5, 0x0c, 0x77,
	0x7f, 0x62, 0xd7, 0x18, 0xeb, 0xcf, 0x06, 0xb8, 0x7d, 0xe5, 0xf6, 0x0e, 0x88, 0x23, 0xe8, 0xf5,
	0x46, 0x63, 0x6b, 0xa9, 0xf3, 0xbd, 0xfd, 0xcf, 0xcb, 0xa7, 0x3d, 0x75, 0x43, 0xf4, 0x56, 0x68,
	0x79, 0xc3, 0xb8, 0x1c, 0xbe, 0x23, 0x8e, 0xf8, 0xa5, 0xa4, 0x95, 0x71, 0xd8, 0x8d, 0x34, 0x43,
	0x6f, 0xe2, 0x52, 0xf2, 0x85, 0xfe, 0x48, 0x87, 0xa5, 0x94, 0x11, 0x5e, 0x7e, 0x39, 0xef, 0x8c,
	0x0e, 0xe2, 0x52, 0xf2, 0xd5, 0xe3, 0x71, 0x11, 0x3e, 0x01, 0xab, 0xa2, 0x73, 0xb5, 0x19, 0x55,
	0xb9, 0x74, 0xe8, 0x6d, 0xc8, 0x00, 0x8a, 0x4e, 0xb7, 0xea, 0xda, 0xf5, 0xc8, 0xf9, 0xff, 0x61,
	0xd1, 0x26, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0xe6, 0x5d, 0x19, 0x74, 0x7c, 0x05, 0x00, 0x00,
}
