/*
Copyright 2019 Cisco Systems

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: atm_vcm_vp.proto

package cisco_ios_xr_atm_vcm_oper_atm_vcm_nodes_node_vp_tunnels_vp_tunnel

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type AtmVcmVp_KEYS struct {
	NodeName             string   `protobuf:"bytes,1,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	InterfaceName        string   `protobuf:"bytes,2,opt,name=interface_name,json=interfaceName,proto3" json:"interface_name,omitempty"`
	Vpi                  uint32   `protobuf:"varint,3,opt,name=vpi,proto3" json:"vpi,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AtmVcmVp_KEYS) Reset()         { *m = AtmVcmVp_KEYS{} }
func (m *AtmVcmVp_KEYS) String() string { return proto.CompactTextString(m) }
func (*AtmVcmVp_KEYS) ProtoMessage()    {}
func (*AtmVcmVp_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_c6c02d7b4bc34cbd, []int{0}
}

func (m *AtmVcmVp_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AtmVcmVp_KEYS.Unmarshal(m, b)
}
func (m *AtmVcmVp_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AtmVcmVp_KEYS.Marshal(b, m, deterministic)
}
func (m *AtmVcmVp_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AtmVcmVp_KEYS.Merge(m, src)
}
func (m *AtmVcmVp_KEYS) XXX_Size() int {
	return xxx_messageInfo_AtmVcmVp_KEYS.Size(m)
}
func (m *AtmVcmVp_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_AtmVcmVp_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_AtmVcmVp_KEYS proto.InternalMessageInfo

func (m *AtmVcmVp_KEYS) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

func (m *AtmVcmVp_KEYS) GetInterfaceName() string {
	if m != nil {
		return m.InterfaceName
	}
	return ""
}

func (m *AtmVcmVp_KEYS) GetVpi() uint32 {
	if m != nil {
		return m.Vpi
	}
	return 0
}

type AtmVcmVp struct {
	MainInterface         string   `protobuf:"bytes,50,opt,name=main_interface,json=mainInterface,proto3" json:"main_interface,omitempty"`
	VpInterface           string   `protobuf:"bytes,51,opt,name=vp_interface,json=vpInterface,proto3" json:"vp_interface,omitempty"`
	VpiXr                 uint32   `protobuf:"varint,52,opt,name=vpi_xr,json=vpiXr,proto3" json:"vpi_xr,omitempty"`
	Shape                 string   `protobuf:"bytes,53,opt,name=shape,proto3" json:"shape,omitempty"`
	PeakCellRate          uint32   `protobuf:"varint,54,opt,name=peak_cell_rate,json=peakCellRate,proto3" json:"peak_cell_rate,omitempty"`
	SustainedCellRate     uint32   `protobuf:"varint,55,opt,name=sustained_cell_rate,json=sustainedCellRate,proto3" json:"sustained_cell_rate,omitempty"`
	BurstRate             uint32   `protobuf:"varint,56,opt,name=burst_rate,json=burstRate,proto3" json:"burst_rate,omitempty"`
	F4OamEnabled          bool     `protobuf:"varint,57,opt,name=f4oam_enabled,json=f4oamEnabled,proto3" json:"f4oam_enabled,omitempty"`
	DataVcCount           uint32   `protobuf:"varint,58,opt,name=data_vc_count,json=dataVcCount,proto3" json:"data_vc_count,omitempty"`
	OperStatus            bool     `protobuf:"varint,59,opt,name=oper_status,json=operStatus,proto3" json:"oper_status,omitempty"`
	AminStatus            bool     `protobuf:"varint,60,opt,name=amin_status,json=aminStatus,proto3" json:"amin_status,omitempty"`
	InternalState         string   `protobuf:"bytes,61,opt,name=internal_state,json=internalState,proto3" json:"internal_state,omitempty"`
	LastVpStateChangeTime uint32   `protobuf:"varint,62,opt,name=last_vp_state_change_time,json=lastVpStateChangeTime,proto3" json:"last_vp_state_change_time,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *AtmVcmVp) Reset()         { *m = AtmVcmVp{} }
func (m *AtmVcmVp) String() string { return proto.CompactTextString(m) }
func (*AtmVcmVp) ProtoMessage()    {}
func (*AtmVcmVp) Descriptor() ([]byte, []int) {
	return fileDescriptor_c6c02d7b4bc34cbd, []int{1}
}

func (m *AtmVcmVp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AtmVcmVp.Unmarshal(m, b)
}
func (m *AtmVcmVp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AtmVcmVp.Marshal(b, m, deterministic)
}
func (m *AtmVcmVp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AtmVcmVp.Merge(m, src)
}
func (m *AtmVcmVp) XXX_Size() int {
	return xxx_messageInfo_AtmVcmVp.Size(m)
}
func (m *AtmVcmVp) XXX_DiscardUnknown() {
	xxx_messageInfo_AtmVcmVp.DiscardUnknown(m)
}

var xxx_messageInfo_AtmVcmVp proto.InternalMessageInfo

func (m *AtmVcmVp) GetMainInterface() string {
	if m != nil {
		return m.MainInterface
	}
	return ""
}

func (m *AtmVcmVp) GetVpInterface() string {
	if m != nil {
		return m.VpInterface
	}
	return ""
}

func (m *AtmVcmVp) GetVpiXr() uint32 {
	if m != nil {
		return m.VpiXr
	}
	return 0
}

func (m *AtmVcmVp) GetShape() string {
	if m != nil {
		return m.Shape
	}
	return ""
}

func (m *AtmVcmVp) GetPeakCellRate() uint32 {
	if m != nil {
		return m.PeakCellRate
	}
	return 0
}

func (m *AtmVcmVp) GetSustainedCellRate() uint32 {
	if m != nil {
		return m.SustainedCellRate
	}
	return 0
}

func (m *AtmVcmVp) GetBurstRate() uint32 {
	if m != nil {
		return m.BurstRate
	}
	return 0
}

func (m *AtmVcmVp) GetF4OamEnabled() bool {
	if m != nil {
		return m.F4OamEnabled
	}
	return false
}

func (m *AtmVcmVp) GetDataVcCount() uint32 {
	if m != nil {
		return m.DataVcCount
	}
	return 0
}

func (m *AtmVcmVp) GetOperStatus() bool {
	if m != nil {
		return m.OperStatus
	}
	return false
}

func (m *AtmVcmVp) GetAminStatus() bool {
	if m != nil {
		return m.AminStatus
	}
	return false
}

func (m *AtmVcmVp) GetInternalState() string {
	if m != nil {
		return m.InternalState
	}
	return ""
}

func (m *AtmVcmVp) GetLastVpStateChangeTime() uint32 {
	if m != nil {
		return m.LastVpStateChangeTime
	}
	return 0
}

func init() {
	proto.RegisterType((*AtmVcmVp_KEYS)(nil), "cisco_ios_xr_atm_vcm_oper.atm_vcm.nodes.node.vp_tunnels.vp_tunnel.atm_vcm_vp_KEYS")
	proto.RegisterType((*AtmVcmVp)(nil), "cisco_ios_xr_atm_vcm_oper.atm_vcm.nodes.node.vp_tunnels.vp_tunnel.atm_vcm_vp")
}

func init() { proto.RegisterFile("atm_vcm_vp.proto", fileDescriptor_c6c02d7b4bc34cbd) }

var fileDescriptor_c6c02d7b4bc34cbd = []byte{
	// 419 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x92, 0x4d, 0x6b, 0x1b, 0x3d,
	0x10, 0xc7, 0xf1, 0x63, 0x12, 0xe2, 0xb1, 0x9d, 0x27, 0x55, 0x1b, 0x50, 0x29, 0xa5, 0xae, 0xdb,
	0x82, 0x4f, 0x7b, 0x68, 0xd2, 0x36, 0x7d, 0x85, 0x62, 0x72, 0x28, 0x85, 0x1e, 0x9c, 0x12, 0xda,
	0xd3, 0x30, 0x5e, 0x4f, 0x12, 0xd1, 0x95, 0x56, 0xac, 0xb4, 0x22, 0x1f, 0xb8, 0x1f, 0xa4, 0x68,
	0xd6, 0x6f, 0x97, 0x45, 0xfa, 0xcd, 0x6f, 0xfe, 0x5a, 0x98, 0x81, 0x13, 0x8a, 0x16, 0x53, 0x69,
	0x31, 0xf9, 0xc2, 0x37, 0x75, 0xac, 0xd5, 0xd7, 0xd2, 0x84, 0xb2, 0x46, 0x53, 0x07, 0xbc, 0x6f,
	0x70, 0x53, 0xae, 0x3d, 0x37, 0xc5, 0xfa, 0x52, 0xb8, 0x7a, 0xc5, 0x41, 0xbe, 0x45, 0xf2, 0x18,
	0x5b, 0xe7, 0xb8, 0x0a, 0xbb, 0xe3, 0xf4, 0x16, 0xfe, 0xdf, 0xc5, 0xe2, 0xf7, 0xcb, 0xdf, 0x57,
	0xea, 0x09, 0x0c, 0xb2, 0x8f, 0x8e, 0x2c, 0xeb, 0xde, 0xa4, 0x37, 0x1b, 0x2c, 0x8e, 0x32, 0xf8,
	0x41, 0x96, 0xd5, 0x2b, 0x38, 0x36, 0x2e, 0x72, 0x73, 0x43, 0xe5, 0xda, 0xf8, 0x4f, 0x8c, 0xf1,
	0x96, 0x8a, 0x76, 0x02, 0xfd, 0xe4, 0x8d, 0xee, 0x4f, 0x7a, 0xb3, 0xf1, 0x22, 0x1f, 0xa7, 0x7f,
	0xfb, 0x00, 0xbb, 0x97, 0x72, 0x8e, 0x25, 0xe3, 0x70, 0xdb, 0xa6, 0x5f, 0x77, 0x39, 0x99, 0x7e,
	0xdb, 0x40, 0xf5, 0x1c, 0x46, 0xc9, 0xef, 0x49, 0x67, 0x22, 0x0d, 0x93, 0xdf, 0x29, 0xa7, 0x70,
	0x98, 0xbc, 0xc1, 0xfb, 0x46, 0x9f, 0xcb, 0x6b, 0x07, 0xc9, 0x9b, 0x5f, 0x8d, 0x7a, 0x04, 0x07,
	0xe1, 0x8e, 0x3c, 0xeb, 0x37, 0xd2, 0xd2, 0x5d, 0xd4, 0x4b, 0x38, 0xf6, 0x4c, 0x7f, 0xb0, 0xe4,
	0xaa, 0xc2, 0x86, 0x22, 0xeb, 0xb7, 0xd2, 0x34, 0xca, 0x74, 0xce, 0x55, 0xb5, 0xa0, 0xc8, 0xaa,
	0x80, 0x87, 0xa1, 0x0d, 0x91, 0x8c, 0xe3, 0xd5, 0x9e, 0xfa, 0x4e, 0xd4, 0x07, 0xdb, 0xd2, 0xd6,
	0x7f, 0x0a, 0xb0, 0x6c, 0x9b, 0x10, 0x3b, 0xed, 0x42, 0xb4, 0x81, 0x10, 0x29, 0xbf, 0x80, 0xf1,
	0xcd, 0x79, 0x4d, 0x16, 0xd9, 0xd1, 0xb2, 0xe2, 0x95, 0x7e, 0x3f, 0xe9, 0xcd, 0x8e, 0x16, 0x23,
	0x81, 0x97, 0x1d, 0x53, 0x53, 0x18, 0xaf, 0x28, 0x12, 0xa6, 0x12, 0xcb, 0xba, 0x75, 0x51, 0x7f,
	0x90, 0x98, 0x61, 0x86, 0xd7, 0xe5, 0x3c, 0x23, 0xf5, 0x0c, 0x86, 0x79, 0xb8, 0x18, 0x22, 0xc5,
	0x36, 0xe8, 0x8f, 0x12, 0x03, 0x19, 0x5d, 0x09, 0xc9, 0x02, 0x59, 0xe3, 0x36, 0xc2, 0xa7, 0x4e,
	0xc8, 0x68, 0x2d, 0x6c, 0xc6, 0xe7, 0xa8, 0x12, 0x89, 0xf5, 0xe7, 0xbd, 0xf1, 0x39, 0xaa, 0xb2,
	0xc7, 0xea, 0x02, 0x1e, 0x57, 0x14, 0x62, 0x5e, 0x09, 0xb1, 0xb0, 0xbc, 0x23, 0x77, 0xcb, 0x18,
	0x8d, 0x65, 0xfd, 0x45, 0x7e, 0xec, 0x34, 0x0b, 0xd7, 0x5e, 0xfc, 0xb9, 0x54, 0x7f, 0x1a, 0xcb,
	0xcb, 0x43, 0xd9, 0xcc, 0xb3, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xa2, 0xe2, 0x30, 0xea, 0xad,
	0x02, 0x00, 0x00,
}
