/*
Copyright 2019 Cisco Systems

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: inv_phy_entity_asset_info.proto

package cisco_ios_xr_invmgr_oper_inventory_racks_rack_entity_slot_tsi1s_tsi1_attributes_inv_asset_bag

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type InvPhyEntityAssetInfo_KEYS struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Name_1               string   `protobuf:"bytes,2,opt,name=name_1,json=name1,proto3" json:"name_1,omitempty"`
	Name_2               string   `protobuf:"bytes,3,opt,name=name_2,json=name2,proto3" json:"name_2,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InvPhyEntityAssetInfo_KEYS) Reset()         { *m = InvPhyEntityAssetInfo_KEYS{} }
func (m *InvPhyEntityAssetInfo_KEYS) String() string { return proto.CompactTextString(m) }
func (*InvPhyEntityAssetInfo_KEYS) ProtoMessage()    {}
func (*InvPhyEntityAssetInfo_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4a1ef5b8d4a67fa, []int{0}
}

func (m *InvPhyEntityAssetInfo_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InvPhyEntityAssetInfo_KEYS.Unmarshal(m, b)
}
func (m *InvPhyEntityAssetInfo_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InvPhyEntityAssetInfo_KEYS.Marshal(b, m, deterministic)
}
func (m *InvPhyEntityAssetInfo_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InvPhyEntityAssetInfo_KEYS.Merge(m, src)
}
func (m *InvPhyEntityAssetInfo_KEYS) XXX_Size() int {
	return xxx_messageInfo_InvPhyEntityAssetInfo_KEYS.Size(m)
}
func (m *InvPhyEntityAssetInfo_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_InvPhyEntityAssetInfo_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_InvPhyEntityAssetInfo_KEYS proto.InternalMessageInfo

func (m *InvPhyEntityAssetInfo_KEYS) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *InvPhyEntityAssetInfo_KEYS) GetName_1() string {
	if m != nil {
		return m.Name_1
	}
	return ""
}

func (m *InvPhyEntityAssetInfo_KEYS) GetName_2() string {
	if m != nil {
		return m.Name_2
	}
	return ""
}

type InvPhyEntityAssetInfo struct {
	PartNumber                                    string   `protobuf:"bytes,50,opt,name=part_number,json=partNumber,proto3" json:"part_number,omitempty"`
	ManufacturerAssemblyNumber                    string   `protobuf:"bytes,51,opt,name=manufacturer_assembly_number,json=manufacturerAssemblyNumber,proto3" json:"manufacturer_assembly_number,omitempty"`
	ManufacturerAssemblyRevision                  string   `protobuf:"bytes,52,opt,name=manufacturer_assembly_revision,json=manufacturerAssemblyRevision,proto3" json:"manufacturer_assembly_revision,omitempty"`
	ManufacturerFirmwareIdentifier                string   `protobuf:"bytes,53,opt,name=manufacturer_firmware_identifier,json=manufacturerFirmwareIdentifier,proto3" json:"manufacturer_firmware_identifier,omitempty"`
	ManufacturerSoftwareIdentifier                string   `protobuf:"bytes,54,opt,name=manufacturer_software_identifier,json=manufacturerSoftwareIdentifier,proto3" json:"manufacturer_software_identifier,omitempty"`
	ManufacturerCommonLanguageEquipmentIdentifier string   `protobuf:"bytes,55,opt,name=manufacturer_common_language_equipment_identifier,json=manufacturerCommonLanguageEquipmentIdentifier,proto3" json:"manufacturer_common_language_equipment_identifier,omitempty"`
	OriginalEquipmentManufacturerString           string   `protobuf:"bytes,56,opt,name=original_equipment_manufacturer_string,json=originalEquipmentManufacturerString,proto3" json:"original_equipment_manufacturer_string,omitempty"`
	XXX_NoUnkeyedLiteral                          struct{} `json:"-"`
	XXX_unrecognized                              []byte   `json:"-"`
	XXX_sizecache                                 int32    `json:"-"`
}

func (m *InvPhyEntityAssetInfo) Reset()         { *m = InvPhyEntityAssetInfo{} }
func (m *InvPhyEntityAssetInfo) String() string { return proto.CompactTextString(m) }
func (*InvPhyEntityAssetInfo) ProtoMessage()    {}
func (*InvPhyEntityAssetInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4a1ef5b8d4a67fa, []int{1}
}

func (m *InvPhyEntityAssetInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InvPhyEntityAssetInfo.Unmarshal(m, b)
}
func (m *InvPhyEntityAssetInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InvPhyEntityAssetInfo.Marshal(b, m, deterministic)
}
func (m *InvPhyEntityAssetInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InvPhyEntityAssetInfo.Merge(m, src)
}
func (m *InvPhyEntityAssetInfo) XXX_Size() int {
	return xxx_messageInfo_InvPhyEntityAssetInfo.Size(m)
}
func (m *InvPhyEntityAssetInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_InvPhyEntityAssetInfo.DiscardUnknown(m)
}

var xxx_messageInfo_InvPhyEntityAssetInfo proto.InternalMessageInfo

func (m *InvPhyEntityAssetInfo) GetPartNumber() string {
	if m != nil {
		return m.PartNumber
	}
	return ""
}

func (m *InvPhyEntityAssetInfo) GetManufacturerAssemblyNumber() string {
	if m != nil {
		return m.ManufacturerAssemblyNumber
	}
	return ""
}

func (m *InvPhyEntityAssetInfo) GetManufacturerAssemblyRevision() string {
	if m != nil {
		return m.ManufacturerAssemblyRevision
	}
	return ""
}

func (m *InvPhyEntityAssetInfo) GetManufacturerFirmwareIdentifier() string {
	if m != nil {
		return m.ManufacturerFirmwareIdentifier
	}
	return ""
}

func (m *InvPhyEntityAssetInfo) GetManufacturerSoftwareIdentifier() string {
	if m != nil {
		return m.ManufacturerSoftwareIdentifier
	}
	return ""
}

func (m *InvPhyEntityAssetInfo) GetManufacturerCommonLanguageEquipmentIdentifier() string {
	if m != nil {
		return m.ManufacturerCommonLanguageEquipmentIdentifier
	}
	return ""
}

func (m *InvPhyEntityAssetInfo) GetOriginalEquipmentManufacturerString() string {
	if m != nil {
		return m.OriginalEquipmentManufacturerString
	}
	return ""
}

func init() {
	proto.RegisterType((*InvPhyEntityAssetInfo_KEYS)(nil), "cisco_ios_xr_invmgr_oper.inventory.racks.rack.entity.slot.tsi1s.tsi1.attributes.inv_asset_bag.inv_phy_entity_asset_info_KEYS")
	proto.RegisterType((*InvPhyEntityAssetInfo)(nil), "cisco_ios_xr_invmgr_oper.inventory.racks.rack.entity.slot.tsi1s.tsi1.attributes.inv_asset_bag.inv_phy_entity_asset_info")
}

func init() { proto.RegisterFile("inv_phy_entity_asset_info.proto", fileDescriptor_e4a1ef5b8d4a67fa) }

var fileDescriptor_e4a1ef5b8d4a67fa = []byte{
	// 381 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x92, 0x4d, 0x4b, 0xeb, 0x40,
	0x14, 0x86, 0xe9, 0xbd, 0xbd, 0x85, 0x3b, 0xee, 0x02, 0x42, 0x94, 0xd2, 0x96, 0x0a, 0xe2, 0xc6,
	0x40, 0x5a, 0xbf, 0x96, 0x8a, 0x56, 0x14, 0x3f, 0x16, 0xed, 0xca, 0x85, 0x0c, 0x93, 0x38, 0x49,
	0x0f, 0x66, 0x66, 0xe2, 0x99, 0x49, 0x34, 0xbf, 0xc4, 0xbf, 0x2b, 0x19, 0xd3, 0x9a, 0xd8, 0x76,
	0x33, 0x49, 0x5e, 0xde, 0xe7, 0x39, 0x39, 0x30, 0xa4, 0x0f, 0x32, 0xa7, 0xe9, 0xbc, 0xa0, 0x5c,
	0x1a, 0x30, 0x05, 0x65, 0x5a, 0x73, 0x43, 0x41, 0x46, 0xca, 0x4b, 0x51, 0x19, 0xe5, 0x3c, 0x87,
	0xa0, 0x43, 0x45, 0x41, 0x69, 0xfa, 0x81, 0x14, 0x64, 0x2e, 0x62, 0xa4, 0x2a, 0xe5, 0xe8, 0x81,
	0xcc, 0xb9, 0x34, 0x0a, 0x0b, 0x0f, 0x59, 0xf8, 0xaa, 0xed, 0xe9, 0x7d, 0x6b, 0x3c, 0x9d, 0x28,
	0xe3, 0x19, 0x0d, 0xbe, 0xb6, 0xa7, 0xc7, 0x8c, 0x41, 0x08, 0x32, 0xc3, 0x75, 0x89, 0x55, 0x53,
	0x02, 0x16, 0x0f, 0x03, 0xd2, 0xdb, 0xf8, 0x07, 0xf4, 0x6e, 0xf2, 0x34, 0x73, 0x1c, 0xd2, 0x96,
	0x4c, 0x70, 0xb7, 0x35, 0x68, 0x1d, 0xfc, 0x9f, 0xda, 0x77, 0x67, 0x9b, 0x74, 0xca, 0x27, 0xf5,
	0xdd, 0x3f, 0x36, 0xfd, 0x57, 0x7e, 0xf9, 0xcb, 0x78, 0xe4, 0xfe, 0xfd, 0x89, 0x47, 0xc3, 0xcf,
	0x36, 0xd9, 0xd9, 0x38, 0xc4, 0xe9, 0x93, 0xad, 0x94, 0xa1, 0xa1, 0x32, 0x13, 0x01, 0x47, 0x77,
	0x64, 0x49, 0x52, 0x46, 0x8f, 0x36, 0x71, 0xce, 0x49, 0x57, 0x30, 0x99, 0x45, 0x2c, 0x34, 0x19,
	0x72, 0xb4, 0xac, 0x08, 0x92, 0x62, 0x41, 0x8c, 0x2d, 0xb1, 0x5b, 0xef, 0x5c, 0x54, 0x95, 0xca,
	0x70, 0x45, 0x7a, 0xeb, 0x0d, 0xc8, 0x73, 0xd0, 0xa0, 0xa4, 0x7b, 0x64, 0x1d, 0xdd, 0x75, 0x8e,
	0x69, 0xd5, 0x71, 0x6e, 0xc8, 0xa0, 0x61, 0x89, 0x00, 0xc5, 0x3b, 0x43, 0x4e, 0xe1, 0xa5, 0xdc,
	0x2a, 0x02, 0x8e, 0xee, 0xb1, 0xf5, 0x34, 0xa6, 0x5d, 0x57, 0xb5, 0xdb, 0x65, 0x6b, 0xc5, 0xa4,
	0x55, 0x64, 0x7e, 0x9b, 0x4e, 0x56, 0x4d, 0xb3, 0xaa, 0x56, 0x33, 0xcd, 0x89, 0xdf, 0x30, 0x85,
	0x4a, 0x08, 0x25, 0x69, 0xc2, 0x64, 0x9c, 0xb1, 0x98, 0x53, 0xfe, 0x96, 0x41, 0x2a, 0xb8, 0x34,
	0x75, 0xf5, 0xa9, 0x55, 0x1f, 0xd6, 0xc1, 0x4b, 0xcb, 0xdd, 0x57, 0xd8, 0x64, 0x41, 0xd5, 0x26,
	0xcd, 0xc8, 0xbe, 0x42, 0x88, 0x41, 0xb2, 0xa4, 0x66, 0x6d, 0xae, 0x61, 0x10, 0x64, 0xec, 0x9e,
	0x59, 0xfd, 0xde, 0xa2, 0xbd, 0x94, 0x3d, 0xd4, 0x57, 0xb1, 0xd5, 0xa0, 0x63, 0xef, 0xf8, 0xf8,
	0x2b, 0x00, 0x00, 0xff, 0xff, 0xd4, 0x6f, 0x29, 0x8c, 0x06, 0x03, 0x00, 0x00,
}
