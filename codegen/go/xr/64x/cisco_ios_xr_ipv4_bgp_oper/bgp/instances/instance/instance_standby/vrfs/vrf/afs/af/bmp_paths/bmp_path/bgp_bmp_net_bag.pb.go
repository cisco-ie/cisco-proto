/*
Copyright 2019 Cisco Systems

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: bgp_bmp_net_bag.proto

package cisco_ios_xr_ipv4_bgp_oper_bgp_instances_instance_instance_standby_vrfs_vrf_afs_af_bmp_paths_bmp_path

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type BgpBmpNetBag_KEYS struct {
	InstanceName         string   `protobuf:"bytes,1,opt,name=instance_name,json=instanceName,proto3" json:"instance_name,omitempty"`
	VrfName              string   `protobuf:"bytes,2,opt,name=vrf_name,json=vrfName,proto3" json:"vrf_name,omitempty"`
	AfName               string   `protobuf:"bytes,3,opt,name=af_name,json=afName,proto3" json:"af_name,omitempty"`
	Network              string   `protobuf:"bytes,4,opt,name=network,proto3" json:"network,omitempty"`
	PrefixLength         uint32   `protobuf:"varint,5,opt,name=prefix_length,json=prefixLength,proto3" json:"prefix_length,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BgpBmpNetBag_KEYS) Reset()         { *m = BgpBmpNetBag_KEYS{} }
func (m *BgpBmpNetBag_KEYS) String() string { return proto.CompactTextString(m) }
func (*BgpBmpNetBag_KEYS) ProtoMessage()    {}
func (*BgpBmpNetBag_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b62712d7052d9c5, []int{0}
}

func (m *BgpBmpNetBag_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BgpBmpNetBag_KEYS.Unmarshal(m, b)
}
func (m *BgpBmpNetBag_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BgpBmpNetBag_KEYS.Marshal(b, m, deterministic)
}
func (m *BgpBmpNetBag_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpBmpNetBag_KEYS.Merge(m, src)
}
func (m *BgpBmpNetBag_KEYS) XXX_Size() int {
	return xxx_messageInfo_BgpBmpNetBag_KEYS.Size(m)
}
func (m *BgpBmpNetBag_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpBmpNetBag_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_BgpBmpNetBag_KEYS proto.InternalMessageInfo

func (m *BgpBmpNetBag_KEYS) GetInstanceName() string {
	if m != nil {
		return m.InstanceName
	}
	return ""
}

func (m *BgpBmpNetBag_KEYS) GetVrfName() string {
	if m != nil {
		return m.VrfName
	}
	return ""
}

func (m *BgpBmpNetBag_KEYS) GetAfName() string {
	if m != nil {
		return m.AfName
	}
	return ""
}

func (m *BgpBmpNetBag_KEYS) GetNetwork() string {
	if m != nil {
		return m.Network
	}
	return ""
}

func (m *BgpBmpNetBag_KEYS) GetPrefixLength() uint32 {
	if m != nil {
		return m.PrefixLength
	}
	return 0
}

type BgpL2VpnAddrT struct {
	L2VpnAddress         []uint32 `protobuf:"varint,1,rep,packed,name=l2vpn_address,json=l2vpnAddress,proto3" json:"l2vpn_address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BgpL2VpnAddrT) Reset()         { *m = BgpL2VpnAddrT{} }
func (m *BgpL2VpnAddrT) String() string { return proto.CompactTextString(m) }
func (*BgpL2VpnAddrT) ProtoMessage()    {}
func (*BgpL2VpnAddrT) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b62712d7052d9c5, []int{1}
}

func (m *BgpL2VpnAddrT) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BgpL2VpnAddrT.Unmarshal(m, b)
}
func (m *BgpL2VpnAddrT) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BgpL2VpnAddrT.Marshal(b, m, deterministic)
}
func (m *BgpL2VpnAddrT) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpL2VpnAddrT.Merge(m, src)
}
func (m *BgpL2VpnAddrT) XXX_Size() int {
	return xxx_messageInfo_BgpL2VpnAddrT.Size(m)
}
func (m *BgpL2VpnAddrT) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpL2VpnAddrT.DiscardUnknown(m)
}

var xxx_messageInfo_BgpL2VpnAddrT proto.InternalMessageInfo

func (m *BgpL2VpnAddrT) GetL2VpnAddress() []uint32 {
	if m != nil {
		return m.L2VpnAddress
	}
	return nil
}

type BgpL2VpnMspwAddrT struct {
	L2VpnAddress         []uint32 `protobuf:"varint,1,rep,packed,name=l2vpn_address,json=l2vpnAddress,proto3" json:"l2vpn_address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BgpL2VpnMspwAddrT) Reset()         { *m = BgpL2VpnMspwAddrT{} }
func (m *BgpL2VpnMspwAddrT) String() string { return proto.CompactTextString(m) }
func (*BgpL2VpnMspwAddrT) ProtoMessage()    {}
func (*BgpL2VpnMspwAddrT) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b62712d7052d9c5, []int{2}
}

func (m *BgpL2VpnMspwAddrT) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BgpL2VpnMspwAddrT.Unmarshal(m, b)
}
func (m *BgpL2VpnMspwAddrT) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BgpL2VpnMspwAddrT.Marshal(b, m, deterministic)
}
func (m *BgpL2VpnMspwAddrT) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpL2VpnMspwAddrT.Merge(m, src)
}
func (m *BgpL2VpnMspwAddrT) XXX_Size() int {
	return xxx_messageInfo_BgpL2VpnMspwAddrT.Size(m)
}
func (m *BgpL2VpnMspwAddrT) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpL2VpnMspwAddrT.DiscardUnknown(m)
}

var xxx_messageInfo_BgpL2VpnMspwAddrT proto.InternalMessageInfo

func (m *BgpL2VpnMspwAddrT) GetL2VpnAddress() []uint32 {
	if m != nil {
		return m.L2VpnAddress
	}
	return nil
}

type BgpIpv4SrpolicyAddrT struct {
	Ipv4SrpolicyAddress  []uint32 `protobuf:"varint,1,rep,packed,name=ipv4_srpolicy_address,json=ipv4SrpolicyAddress,proto3" json:"ipv4_srpolicy_address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BgpIpv4SrpolicyAddrT) Reset()         { *m = BgpIpv4SrpolicyAddrT{} }
func (m *BgpIpv4SrpolicyAddrT) String() string { return proto.CompactTextString(m) }
func (*BgpIpv4SrpolicyAddrT) ProtoMessage()    {}
func (*BgpIpv4SrpolicyAddrT) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b62712d7052d9c5, []int{3}
}

func (m *BgpIpv4SrpolicyAddrT) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BgpIpv4SrpolicyAddrT.Unmarshal(m, b)
}
func (m *BgpIpv4SrpolicyAddrT) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BgpIpv4SrpolicyAddrT.Marshal(b, m, deterministic)
}
func (m *BgpIpv4SrpolicyAddrT) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpIpv4SrpolicyAddrT.Merge(m, src)
}
func (m *BgpIpv4SrpolicyAddrT) XXX_Size() int {
	return xxx_messageInfo_BgpIpv4SrpolicyAddrT.Size(m)
}
func (m *BgpIpv4SrpolicyAddrT) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpIpv4SrpolicyAddrT.DiscardUnknown(m)
}

var xxx_messageInfo_BgpIpv4SrpolicyAddrT proto.InternalMessageInfo

func (m *BgpIpv4SrpolicyAddrT) GetIpv4SrpolicyAddress() []uint32 {
	if m != nil {
		return m.Ipv4SrpolicyAddress
	}
	return nil
}

type BgpIpv6SrpolicyAddrT struct {
	Ipv6SrpolicyAddress  []uint32 `protobuf:"varint,1,rep,packed,name=ipv6_srpolicy_address,json=ipv6SrpolicyAddress,proto3" json:"ipv6_srpolicy_address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BgpIpv6SrpolicyAddrT) Reset()         { *m = BgpIpv6SrpolicyAddrT{} }
func (m *BgpIpv6SrpolicyAddrT) String() string { return proto.CompactTextString(m) }
func (*BgpIpv6SrpolicyAddrT) ProtoMessage()    {}
func (*BgpIpv6SrpolicyAddrT) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b62712d7052d9c5, []int{4}
}

func (m *BgpIpv6SrpolicyAddrT) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BgpIpv6SrpolicyAddrT.Unmarshal(m, b)
}
func (m *BgpIpv6SrpolicyAddrT) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BgpIpv6SrpolicyAddrT.Marshal(b, m, deterministic)
}
func (m *BgpIpv6SrpolicyAddrT) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpIpv6SrpolicyAddrT.Merge(m, src)
}
func (m *BgpIpv6SrpolicyAddrT) XXX_Size() int {
	return xxx_messageInfo_BgpIpv6SrpolicyAddrT.Size(m)
}
func (m *BgpIpv6SrpolicyAddrT) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpIpv6SrpolicyAddrT.DiscardUnknown(m)
}

var xxx_messageInfo_BgpIpv6SrpolicyAddrT proto.InternalMessageInfo

func (m *BgpIpv6SrpolicyAddrT) GetIpv6SrpolicyAddress() []uint32 {
	if m != nil {
		return m.Ipv6SrpolicyAddress
	}
	return nil
}

type BgpAddrtype struct {
	Afi                    string                `protobuf:"bytes,1,opt,name=afi,proto3" json:"afi,omitempty"`
	Ipv4Address            string                `protobuf:"bytes,2,opt,name=ipv4_address,json=ipv4Address,proto3" json:"ipv4_address,omitempty"`
	Ipv4McastAddress       string                `protobuf:"bytes,3,opt,name=ipv4_mcast_address,json=ipv4McastAddress,proto3" json:"ipv4_mcast_address,omitempty"`
	Ipv4LabelAddress       string                `protobuf:"bytes,4,opt,name=ipv4_label_address,json=ipv4LabelAddress,proto3" json:"ipv4_label_address,omitempty"`
	Ipv4TunnelAddress      string                `protobuf:"bytes,5,opt,name=ipv4_tunnel_address,json=ipv4TunnelAddress,proto3" json:"ipv4_tunnel_address,omitempty"`
	Ipv4MdtAddress         string                `protobuf:"bytes,6,opt,name=ipv4_mdt_address,json=ipv4MdtAddress,proto3" json:"ipv4_mdt_address,omitempty"`
	Ipv4VpnAddress         string                `protobuf:"bytes,7,opt,name=ipv4vpn_address,json=ipv4vpnAddress,proto3" json:"ipv4vpn_address,omitempty"`
	Ipv4VpnaMcastddress    string                `protobuf:"bytes,8,opt,name=ipv4vpna_mcastddress,json=ipv4vpnaMcastddress,proto3" json:"ipv4vpna_mcastddress,omitempty"`
	Ipv6Address            string                `protobuf:"bytes,9,opt,name=ipv6_address,json=ipv6Address,proto3" json:"ipv6_address,omitempty"`
	Ipv6McastAddress       string                `protobuf:"bytes,10,opt,name=ipv6_mcast_address,json=ipv6McastAddress,proto3" json:"ipv6_mcast_address,omitempty"`
	Ipv6LabelAddress       string                `protobuf:"bytes,11,opt,name=ipv6_label_address,json=ipv6LabelAddress,proto3" json:"ipv6_label_address,omitempty"`
	Ipv6VpnAddress         string                `protobuf:"bytes,12,opt,name=ipv6vpn_address,json=ipv6vpnAddress,proto3" json:"ipv6vpn_address,omitempty"`
	Ipv6VpnMcastAddress    string                `protobuf:"bytes,13,opt,name=ipv6vpn_mcast_address,json=ipv6vpnMcastAddress,proto3" json:"ipv6vpn_mcast_address,omitempty"`
	L2VpnVplsAddress       *BgpL2VpnAddrT        `protobuf:"bytes,14,opt,name=l2vpn_vpls_address,json=l2vpnVplsAddress,proto3" json:"l2vpn_vpls_address,omitempty"`
	RtConstraintAddress    string                `protobuf:"bytes,15,opt,name=rt_constraint_address,json=rtConstraintAddress,proto3" json:"rt_constraint_address,omitempty"`
	Ipv6MvpnAddress        string                `protobuf:"bytes,16,opt,name=ipv6mvpn_address,json=ipv6mvpnAddress,proto3" json:"ipv6mvpn_address,omitempty"`
	Ipv4MvpnAddress        string                `protobuf:"bytes,17,opt,name=ipv4mvpn_address,json=ipv4mvpnAddress,proto3" json:"ipv4mvpn_address,omitempty"`
	L2VpnEvpnAddress       string                `protobuf:"bytes,18,opt,name=l2vpn_evpn_address,json=l2vpnEvpnAddress,proto3" json:"l2vpn_evpn_address,omitempty"`
	LsLsAddress            string                `protobuf:"bytes,19,opt,name=ls_ls_address,json=lsLsAddress,proto3" json:"ls_ls_address,omitempty"`
	L2VpnMspwAddress       *BgpL2VpnMspwAddrT    `protobuf:"bytes,20,opt,name=l2vpn_mspw_address,json=l2vpnMspwAddress,proto3" json:"l2vpn_mspw_address,omitempty"`
	Ipv4FlowspecAddress    string                `protobuf:"bytes,21,opt,name=ipv4_flowspec_address,json=ipv4FlowspecAddress,proto3" json:"ipv4_flowspec_address,omitempty"`
	Ipv6FlowspecAddress    string                `protobuf:"bytes,22,opt,name=ipv6_flowspec_address,json=ipv6FlowspecAddress,proto3" json:"ipv6_flowspec_address,omitempty"`
	Ipv4VpnFlowspecAddress string                `protobuf:"bytes,23,opt,name=ipv4vpn_flowspec_address,json=ipv4vpnFlowspecAddress,proto3" json:"ipv4vpn_flowspec_address,omitempty"`
	Ipv6VpnFlowspecAddress string                `protobuf:"bytes,24,opt,name=ipv6vpn_flowspec_address,json=ipv6vpnFlowspecAddress,proto3" json:"ipv6vpn_flowspec_address,omitempty"`
	Ipv4SrPolicyAddress    *BgpIpv4SrpolicyAddrT `protobuf:"bytes,25,opt,name=ipv4_sr_policy_address,json=ipv4SrPolicyAddress,proto3" json:"ipv4_sr_policy_address,omitempty"`
	Ipv6SrPolicyAddress    *BgpIpv6SrpolicyAddrT `protobuf:"bytes,26,opt,name=ipv6_sr_policy_address,json=ipv6SrPolicyAddress,proto3" json:"ipv6_sr_policy_address,omitempty"`
	XXX_NoUnkeyedLiteral   struct{}              `json:"-"`
	XXX_unrecognized       []byte                `json:"-"`
	XXX_sizecache          int32                 `json:"-"`
}

func (m *BgpAddrtype) Reset()         { *m = BgpAddrtype{} }
func (m *BgpAddrtype) String() string { return proto.CompactTextString(m) }
func (*BgpAddrtype) ProtoMessage()    {}
func (*BgpAddrtype) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b62712d7052d9c5, []int{5}
}

func (m *BgpAddrtype) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BgpAddrtype.Unmarshal(m, b)
}
func (m *BgpAddrtype) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BgpAddrtype.Marshal(b, m, deterministic)
}
func (m *BgpAddrtype) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpAddrtype.Merge(m, src)
}
func (m *BgpAddrtype) XXX_Size() int {
	return xxx_messageInfo_BgpAddrtype.Size(m)
}
func (m *BgpAddrtype) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpAddrtype.DiscardUnknown(m)
}

var xxx_messageInfo_BgpAddrtype proto.InternalMessageInfo

func (m *BgpAddrtype) GetAfi() string {
	if m != nil {
		return m.Afi
	}
	return ""
}

func (m *BgpAddrtype) GetIpv4Address() string {
	if m != nil {
		return m.Ipv4Address
	}
	return ""
}

func (m *BgpAddrtype) GetIpv4McastAddress() string {
	if m != nil {
		return m.Ipv4McastAddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv4LabelAddress() string {
	if m != nil {
		return m.Ipv4LabelAddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv4TunnelAddress() string {
	if m != nil {
		return m.Ipv4TunnelAddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv4MdtAddress() string {
	if m != nil {
		return m.Ipv4MdtAddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv4VpnAddress() string {
	if m != nil {
		return m.Ipv4VpnAddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv4VpnaMcastddress() string {
	if m != nil {
		return m.Ipv4VpnaMcastddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv6Address() string {
	if m != nil {
		return m.Ipv6Address
	}
	return ""
}

func (m *BgpAddrtype) GetIpv6McastAddress() string {
	if m != nil {
		return m.Ipv6McastAddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv6LabelAddress() string {
	if m != nil {
		return m.Ipv6LabelAddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv6VpnAddress() string {
	if m != nil {
		return m.Ipv6VpnAddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv6VpnMcastAddress() string {
	if m != nil {
		return m.Ipv6VpnMcastAddress
	}
	return ""
}

func (m *BgpAddrtype) GetL2VpnVplsAddress() *BgpL2VpnAddrT {
	if m != nil {
		return m.L2VpnVplsAddress
	}
	return nil
}

func (m *BgpAddrtype) GetRtConstraintAddress() string {
	if m != nil {
		return m.RtConstraintAddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv6MvpnAddress() string {
	if m != nil {
		return m.Ipv6MvpnAddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv4MvpnAddress() string {
	if m != nil {
		return m.Ipv4MvpnAddress
	}
	return ""
}

func (m *BgpAddrtype) GetL2VpnEvpnAddress() string {
	if m != nil {
		return m.L2VpnEvpnAddress
	}
	return ""
}

func (m *BgpAddrtype) GetLsLsAddress() string {
	if m != nil {
		return m.LsLsAddress
	}
	return ""
}

func (m *BgpAddrtype) GetL2VpnMspwAddress() *BgpL2VpnMspwAddrT {
	if m != nil {
		return m.L2VpnMspwAddress
	}
	return nil
}

func (m *BgpAddrtype) GetIpv4FlowspecAddress() string {
	if m != nil {
		return m.Ipv4FlowspecAddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv6FlowspecAddress() string {
	if m != nil {
		return m.Ipv6FlowspecAddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv4VpnFlowspecAddress() string {
	if m != nil {
		return m.Ipv4VpnFlowspecAddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv6VpnFlowspecAddress() string {
	if m != nil {
		return m.Ipv6VpnFlowspecAddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv4SrPolicyAddress() *BgpIpv4SrpolicyAddrT {
	if m != nil {
		return m.Ipv4SrPolicyAddress
	}
	return nil
}

func (m *BgpAddrtype) GetIpv6SrPolicyAddress() *BgpIpv6SrpolicyAddrT {
	if m != nil {
		return m.Ipv6SrPolicyAddress
	}
	return nil
}

type BgpPrefixtype struct {
	Prefix               *BgpAddrtype `protobuf:"bytes,1,opt,name=prefix,proto3" json:"prefix,omitempty"`
	PrefixLength         uint32       `protobuf:"varint,2,opt,name=prefix_length,json=prefixLength,proto3" json:"prefix_length,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *BgpPrefixtype) Reset()         { *m = BgpPrefixtype{} }
func (m *BgpPrefixtype) String() string { return proto.CompactTextString(m) }
func (*BgpPrefixtype) ProtoMessage()    {}
func (*BgpPrefixtype) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b62712d7052d9c5, []int{6}
}

func (m *BgpPrefixtype) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BgpPrefixtype.Unmarshal(m, b)
}
func (m *BgpPrefixtype) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BgpPrefixtype.Marshal(b, m, deterministic)
}
func (m *BgpPrefixtype) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpPrefixtype.Merge(m, src)
}
func (m *BgpPrefixtype) XXX_Size() int {
	return xxx_messageInfo_BgpPrefixtype.Size(m)
}
func (m *BgpPrefixtype) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpPrefixtype.DiscardUnknown(m)
}

var xxx_messageInfo_BgpPrefixtype proto.InternalMessageInfo

func (m *BgpPrefixtype) GetPrefix() *BgpAddrtype {
	if m != nil {
		return m.Prefix
	}
	return nil
}

func (m *BgpPrefixtype) GetPrefixLength() uint32 {
	if m != nil {
		return m.PrefixLength
	}
	return 0
}

type BgpTimespec struct {
	Seconds              uint32   `protobuf:"varint,1,opt,name=seconds,proto3" json:"seconds,omitempty"`
	Nanoseconds          uint32   `protobuf:"varint,2,opt,name=nanoseconds,proto3" json:"nanoseconds,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BgpTimespec) Reset()         { *m = BgpTimespec{} }
func (m *BgpTimespec) String() string { return proto.CompactTextString(m) }
func (*BgpTimespec) ProtoMessage()    {}
func (*BgpTimespec) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b62712d7052d9c5, []int{7}
}

func (m *BgpTimespec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BgpTimespec.Unmarshal(m, b)
}
func (m *BgpTimespec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BgpTimespec.Marshal(b, m, deterministic)
}
func (m *BgpTimespec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpTimespec.Merge(m, src)
}
func (m *BgpTimespec) XXX_Size() int {
	return xxx_messageInfo_BgpTimespec.Size(m)
}
func (m *BgpTimespec) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpTimespec.DiscardUnknown(m)
}

var xxx_messageInfo_BgpTimespec proto.InternalMessageInfo

func (m *BgpTimespec) GetSeconds() uint32 {
	if m != nil {
		return m.Seconds
	}
	return 0
}

func (m *BgpTimespec) GetNanoseconds() uint32 {
	if m != nil {
		return m.Nanoseconds
	}
	return 0
}

type BgpBmpPathBag struct {
	NeighborAddress      *BgpAddrtype `protobuf:"bytes,1,opt,name=neighbor_address,json=neighborAddress,proto3" json:"neighbor_address,omitempty"`
	BmpPathFlags         uint32       `protobuf:"varint,2,opt,name=bmp_path_flags,json=bmpPathFlags,proto3" json:"bmp_path_flags,omitempty"`
	BmpPathAdvBitMap     uint32       `protobuf:"varint,3,opt,name=bmp_path_adv_bit_map,json=bmpPathAdvBitMap,proto3" json:"bmp_path_adv_bit_map,omitempty"`
	BmpPathSndBitMap     uint32       `protobuf:"varint,4,opt,name=bmp_path_snd_bit_map,json=bmpPathSndBitMap,proto3" json:"bmp_path_snd_bit_map,omitempty"`
	BmpNbrBitMap         uint32       `protobuf:"varint,5,opt,name=bmp_nbr_bit_map,json=bmpNbrBitMap,proto3" json:"bmp_nbr_bit_map,omitempty"`
	LocalPath            bool         `protobuf:"varint,6,opt,name=local_path,json=localPath,proto3" json:"local_path,omitempty"`
	ReceivedLabel        []uint32     `protobuf:"varint,7,rep,packed,name=received_label,json=receivedLabel,proto3" json:"received_label,omitempty"`
	BpathPointer         uint64       `protobuf:"varint,8,opt,name=bpath_pointer,json=bpathPointer,proto3" json:"bpath_pointer,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *BgpBmpPathBag) Reset()         { *m = BgpBmpPathBag{} }
func (m *BgpBmpPathBag) String() string { return proto.CompactTextString(m) }
func (*BgpBmpPathBag) ProtoMessage()    {}
func (*BgpBmpPathBag) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b62712d7052d9c5, []int{8}
}

func (m *BgpBmpPathBag) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BgpBmpPathBag.Unmarshal(m, b)
}
func (m *BgpBmpPathBag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BgpBmpPathBag.Marshal(b, m, deterministic)
}
func (m *BgpBmpPathBag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpBmpPathBag.Merge(m, src)
}
func (m *BgpBmpPathBag) XXX_Size() int {
	return xxx_messageInfo_BgpBmpPathBag.Size(m)
}
func (m *BgpBmpPathBag) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpBmpPathBag.DiscardUnknown(m)
}

var xxx_messageInfo_BgpBmpPathBag proto.InternalMessageInfo

func (m *BgpBmpPathBag) GetNeighborAddress() *BgpAddrtype {
	if m != nil {
		return m.NeighborAddress
	}
	return nil
}

func (m *BgpBmpPathBag) GetBmpPathFlags() uint32 {
	if m != nil {
		return m.BmpPathFlags
	}
	return 0
}

func (m *BgpBmpPathBag) GetBmpPathAdvBitMap() uint32 {
	if m != nil {
		return m.BmpPathAdvBitMap
	}
	return 0
}

func (m *BgpBmpPathBag) GetBmpPathSndBitMap() uint32 {
	if m != nil {
		return m.BmpPathSndBitMap
	}
	return 0
}

func (m *BgpBmpPathBag) GetBmpNbrBitMap() uint32 {
	if m != nil {
		return m.BmpNbrBitMap
	}
	return 0
}

func (m *BgpBmpPathBag) GetLocalPath() bool {
	if m != nil {
		return m.LocalPath
	}
	return false
}

func (m *BgpBmpPathBag) GetReceivedLabel() []uint32 {
	if m != nil {
		return m.ReceivedLabel
	}
	return nil
}

func (m *BgpBmpPathBag) GetBpathPointer() uint64 {
	if m != nil {
		return m.BpathPointer
	}
	return 0
}

type BgpBmpNetBag struct {
	AfName               string           `protobuf:"bytes,50,opt,name=af_name,json=afName,proto3" json:"af_name,omitempty"`
	BgpPrefix            *BgpPrefixtype   `protobuf:"bytes,51,opt,name=bgp_prefix,json=bgpPrefix,proto3" json:"bgp_prefix,omitempty"`
	BmpNetFlags          uint32           `protobuf:"varint,52,opt,name=bmp_net_flags,json=bmpNetFlags,proto3" json:"bmp_net_flags,omitempty"`
	BmpNetVersion        uint32           `protobuf:"varint,53,opt,name=bmp_net_version,json=bmpNetVersion,proto3" json:"bmp_net_version,omitempty"`
	NumOfPath            uint32           `protobuf:"varint,54,opt,name=num_of_path,json=numOfPath,proto3" json:"num_of_path,omitempty"`
	VersionTimestamp     *BgpTimespec     `protobuf:"bytes,55,opt,name=version_timestamp,json=versionTimestamp,proto3" json:"version_timestamp,omitempty"`
	VersionAge           *BgpTimespec     `protobuf:"bytes,56,opt,name=version_age,json=versionAge,proto3" json:"version_age,omitempty"`
	HasLocalLabel        bool             `protobuf:"varint,57,opt,name=has_local_label,json=hasLocalLabel,proto3" json:"has_local_label,omitempty"`
	NetLocalLabel        uint32           `protobuf:"varint,58,opt,name=net_local_label,json=netLocalLabel,proto3" json:"net_local_label,omitempty"`
	BmpPath              []*BgpBmpPathBag `protobuf:"bytes,59,rep,name=bmp_path,json=bmpPath,proto3" json:"bmp_path,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *BgpBmpNetBag) Reset()         { *m = BgpBmpNetBag{} }
func (m *BgpBmpNetBag) String() string { return proto.CompactTextString(m) }
func (*BgpBmpNetBag) ProtoMessage()    {}
func (*BgpBmpNetBag) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b62712d7052d9c5, []int{9}
}

func (m *BgpBmpNetBag) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BgpBmpNetBag.Unmarshal(m, b)
}
func (m *BgpBmpNetBag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BgpBmpNetBag.Marshal(b, m, deterministic)
}
func (m *BgpBmpNetBag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpBmpNetBag.Merge(m, src)
}
func (m *BgpBmpNetBag) XXX_Size() int {
	return xxx_messageInfo_BgpBmpNetBag.Size(m)
}
func (m *BgpBmpNetBag) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpBmpNetBag.DiscardUnknown(m)
}

var xxx_messageInfo_BgpBmpNetBag proto.InternalMessageInfo

func (m *BgpBmpNetBag) GetAfName() string {
	if m != nil {
		return m.AfName
	}
	return ""
}

func (m *BgpBmpNetBag) GetBgpPrefix() *BgpPrefixtype {
	if m != nil {
		return m.BgpPrefix
	}
	return nil
}

func (m *BgpBmpNetBag) GetBmpNetFlags() uint32 {
	if m != nil {
		return m.BmpNetFlags
	}
	return 0
}

func (m *BgpBmpNetBag) GetBmpNetVersion() uint32 {
	if m != nil {
		return m.BmpNetVersion
	}
	return 0
}

func (m *BgpBmpNetBag) GetNumOfPath() uint32 {
	if m != nil {
		return m.NumOfPath
	}
	return 0
}

func (m *BgpBmpNetBag) GetVersionTimestamp() *BgpTimespec {
	if m != nil {
		return m.VersionTimestamp
	}
	return nil
}

func (m *BgpBmpNetBag) GetVersionAge() *BgpTimespec {
	if m != nil {
		return m.VersionAge
	}
	return nil
}

func (m *BgpBmpNetBag) GetHasLocalLabel() bool {
	if m != nil {
		return m.HasLocalLabel
	}
	return false
}

func (m *BgpBmpNetBag) GetNetLocalLabel() uint32 {
	if m != nil {
		return m.NetLocalLabel
	}
	return 0
}

func (m *BgpBmpNetBag) GetBmpPath() []*BgpBmpPathBag {
	if m != nil {
		return m.BmpPath
	}
	return nil
}

func init() {
	proto.RegisterType((*BgpBmpNetBag_KEYS)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.vrfs.vrf.afs.af.bmp_paths.bmp_path.bgp_bmp_net_bag_KEYS")
	proto.RegisterType((*BgpL2VpnAddrT)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.vrfs.vrf.afs.af.bmp_paths.bmp_path.bgp_l2vpn_addr_t")
	proto.RegisterType((*BgpL2VpnMspwAddrT)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.vrfs.vrf.afs.af.bmp_paths.bmp_path.bgp_l2vpn_mspw_addr_t")
	proto.RegisterType((*BgpIpv4SrpolicyAddrT)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.vrfs.vrf.afs.af.bmp_paths.bmp_path.bgp_ipv4_srpolicy_addr_t")
	proto.RegisterType((*BgpIpv6SrpolicyAddrT)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.vrfs.vrf.afs.af.bmp_paths.bmp_path.bgp_ipv6_srpolicy_addr_t")
	proto.RegisterType((*BgpAddrtype)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.vrfs.vrf.afs.af.bmp_paths.bmp_path.bgp_addrtype")
	proto.RegisterType((*BgpPrefixtype)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.vrfs.vrf.afs.af.bmp_paths.bmp_path.bgp_prefixtype")
	proto.RegisterType((*BgpTimespec)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.vrfs.vrf.afs.af.bmp_paths.bmp_path.bgp_timespec")
	proto.RegisterType((*BgpBmpPathBag)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.vrfs.vrf.afs.af.bmp_paths.bmp_path.bgp_bmp_path_bag")
	proto.RegisterType((*BgpBmpNetBag)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.vrfs.vrf.afs.af.bmp_paths.bmp_path.bgp_bmp_net_bag")
}

func init() { proto.RegisterFile("bgp_bmp_net_bag.proto", fileDescriptor_3b62712d7052d9c5) }

var fileDescriptor_3b62712d7052d9c5 = []byte{
	// 1141 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x57, 0x4b, 0x6f, 0xe4, 0x44,
	0x10, 0x96, 0x37, 0x8f, 0x49, 0x7a, 0xc6, 0x99, 0x89, 0xf3, 0x58, 0x2f, 0x12, 0x68, 0x18, 0xd8,
	0x25, 0x48, 0x2b, 0x4b, 0x64, 0x83, 0x77, 0x79, 0x5c, 0x02, 0xda, 0x3d, 0x40, 0x12, 0x22, 0x67,
	0xb5, 0x12, 0xa7, 0x56, 0x7b, 0xdc, 0x9e, 0xb1, 0xb0, 0xdb, 0x2d, 0x77, 0x67, 0xb2, 0x91, 0x90,
	0xf8, 0x01, 0xdc, 0x10, 0x67, 0xc4, 0x85, 0x0b, 0x42, 0x9c, 0xf8, 0x07, 0x1c, 0xe1, 0x47, 0xa1,
	0x7e, 0xda, 0xe3, 0x19, 0x90, 0xb8, 0x4c, 0x2e, 0x89, 0x5d, 0xf5, 0x55, 0xf9, 0xab, 0x47, 0x77,
	0xd5, 0x80, 0x83, 0x78, 0x42, 0x61, 0x5c, 0x50, 0x48, 0x30, 0x87, 0x31, 0x9a, 0x04, 0xb4, 0x2a,
	0x79, 0xe9, 0xe1, 0x71, 0xc6, 0xc6, 0x25, 0xcc, 0x4a, 0x06, 0x5f, 0x57, 0x30, 0xa3, 0xb3, 0x13,
	0x28, 0x80, 0x25, 0xc5, 0x55, 0x10, 0x4f, 0x68, 0x90, 0x11, 0xc6, 0x11, 0x19, 0x63, 0x66, 0x9f,
	0xec, 0x03, 0x14, 0xff, 0x92, 0xf8, 0x36, 0x98, 0x55, 0x29, 0x13, 0x7f, 0x02, 0x94, 0xb2, 0x00,
	0xa5, 0x81, 0xf8, 0x0a, 0x45, 0x7c, 0xca, 0xec, 0xd3, 0xe8, 0x77, 0x07, 0xec, 0xb7, 0x08, 0xc0,
	0x2f, 0x9f, 0x7f, 0x7d, 0xe5, 0xbd, 0x03, 0x5c, 0xeb, 0x8f, 0xa0, 0x02, 0xfb, 0xce, 0xd0, 0x39,
	0xda, 0x8e, 0x7a, 0x46, 0x78, 0x81, 0x0a, 0xec, 0x3d, 0x00, 0x5b, 0xb3, 0x2a, 0x55, 0xfa, 0x7b,
	0x52, 0xdf, 0x99, 0x55, 0xa9, 0x54, 0xdd, 0x07, 0x1d, 0xa4, 0x35, 0x6b, 0x52, 0xb3, 0x89, 0x94,
	0xc2, 0x07, 0x1d, 0x82, 0xf9, 0x4d, 0x59, 0x7d, 0xe3, 0xaf, 0x2b, 0x13, 0xfd, 0x2a, 0x3e, 0x49,
	0x2b, 0x9c, 0x66, 0xaf, 0x61, 0x8e, 0xc9, 0x84, 0x4f, 0xfd, 0x8d, 0xa1, 0x73, 0xe4, 0x46, 0x3d,
	0x25, 0x3c, 0x93, 0xb2, 0xd1, 0x53, 0x30, 0x10, 0x7c, 0xf3, 0xe3, 0x19, 0x25, 0x10, 0x25, 0x49,
	0x05, 0xb9, 0x30, 0xac, 0xdf, 0x31, 0x63, 0xbe, 0x33, 0x5c, 0x13, 0x86, 0x52, 0x78, 0xaa, 0x64,
	0xa3, 0x4f, 0x55, 0xa6, 0x15, 0xb0, 0x60, 0xf4, 0xe6, 0x7f, 0x59, 0x5f, 0x00, 0x5f, 0x58, 0xcb,
	0x3a, 0xb0, 0x8a, 0x96, 0x79, 0x36, 0xbe, 0x35, 0x0e, 0x8e, 0xc1, 0xc1, 0xa2, 0xbc, 0x76, 0xb4,
	0x27, 0x94, 0x57, 0x5a, 0xb7, 0xe8, 0x2f, 0xfc, 0x17, 0x7f, 0xe1, 0x7f, 0xf9, 0x0b, 0xdb, 0xfe,
	0x7e, 0x73, 0x41, 0x4f, 0x38, 0x14, 0x50, 0x7e, 0x4b, 0xb1, 0x37, 0x00, 0x6b, 0x28, 0xcd, 0x74,
	0xd5, 0xc4, 0xa3, 0xf7, 0x36, 0xe8, 0x49, 0x9a, 0xc6, 0x9b, 0x2a, 0x58, 0x57, 0xc8, 0xb4, 0x17,
	0xef, 0x31, 0xf0, 0x24, 0xa4, 0x18, 0x23, 0xc6, 0x2d, 0x50, 0xd5, 0x6f, 0x20, 0x34, 0xe7, 0x42,
	0xd1, 0x46, 0xe7, 0x28, 0xc6, 0xb9, 0x45, 0xaf, 0xd7, 0xe8, 0x33, 0xa1, 0x30, 0xe8, 0x00, 0xc8,
	0x44, 0x40, 0x7e, 0x4d, 0x48, 0x03, 0xbe, 0x21, 0xe1, 0xbb, 0x42, 0xf5, 0x52, 0x6a, 0x0c, 0xfe,
	0x08, 0x0c, 0x14, 0x97, 0xa4, 0x66, 0xb2, 0x29, 0xc1, 0x3b, 0x92, 0x49, 0x62, 0x79, 0xbc, 0x07,
	0xfa, 0x42, 0xd2, 0x2c, 0x61, 0xa7, 0x06, 0xd6, 0x45, 0xf4, 0x3e, 0x00, 0xfb, 0x5a, 0x82, 0x54,
	0x88, 0x1a, 0xbd, 0x25, 0xd1, 0x7b, 0x46, 0x77, 0x5e, 0xab, 0x74, 0xd2, 0x42, 0xeb, 0x78, 0xdb,
	0x26, 0x2d, 0x9c, 0x4f, 0x43, 0xd8, 0x4a, 0x1a, 0xb0, 0x69, 0x08, 0x97, 0x24, 0x2d, 0x6c, 0x25,
	0xad, 0x5b, 0xa3, 0xe7, 0x92, 0xa6, 0x42, 0x0b, 0x9b, 0xa1, 0xf5, 0x6c, 0x68, 0x61, 0x23, 0x34,
	0xdd, 0x33, 0xb2, 0xb7, 0xe7, 0x78, 0xb8, 0x36, 0x36, 0xa1, 0x9c, 0xa3, 0xf2, 0x8b, 0x03, 0x3c,
	0xd5, 0xf9, 0x33, 0x9a, 0x33, 0x6b, 0xb1, 0x33, 0x74, 0x8e, 0xba, 0xc7, 0x37, 0xc1, 0x4a, 0x2e,
	0xa0, 0xa0, 0x7d, 0x98, 0xa3, 0x81, 0x7c, 0x7b, 0x45, 0x73, 0xd6, 0x88, 0xad, 0xe2, 0x70, 0x5c,
	0x12, 0xc6, 0x2b, 0x94, 0x91, 0x3a, 0xb6, 0xbe, 0x8a, 0xad, 0xe2, 0x9f, 0x5b, 0x9d, 0xb1, 0x79,
	0x5f, 0x76, 0x4f, 0x58, 0x34, 0x33, 0x37, 0x90, 0xf0, 0xbe, 0x91, 0xcf, 0x43, 0x4f, 0xe6, 0xa0,
	0xbb, 0x16, 0x7a, 0xd2, 0x84, 0x3e, 0x36, 0x09, 0xc3, 0x4d, 0xb0, 0xa7, 0x8a, 0x27, 0x35, 0xcf,
	0x1b, 0xe8, 0x11, 0x70, 0x73, 0x06, 0x1b, 0x99, 0xdd, 0x53, 0xcd, 0x93, 0xb3, 0x33, 0x1b, 0xdb,
	0xaf, 0xb6, 0x06, 0xf6, 0x4a, 0x12, 0xc8, 0x7d, 0x59, 0x83, 0x6f, 0x57, 0x5e, 0x83, 0xc6, 0xbd,
	0xa8, 0x03, 0x3a, 0x67, 0xf4, 0x66, 0xbe, 0xc9, 0x4e, 0x60, 0x9a, 0x97, 0x37, 0x8c, 0xe2, 0xb1,
	0xa5, 0x7b, 0x50, 0x1f, 0xa0, 0x17, 0x5a, 0xd7, 0x6a, 0xcc, 0x45, 0x9b, 0xc3, 0xba, 0x31, 0xdb,
	0x36, 0xcf, 0x80, 0x6f, 0x0e, 0xf4, 0x82, 0xd9, 0x7d, 0x69, 0x76, 0xa8, 0xf5, 0xcb, 0x2d, 0xc3,
	0xa5, 0x96, 0xbe, 0xb5, 0x0c, 0x97, 0x58, 0xfe, 0xe1, 0x80, 0x43, 0x7d, 0x8b, 0xc3, 0xd6, 0xb5,
	0xfb, 0x40, 0x16, 0xe3, 0xbb, 0x15, 0x16, 0x63, 0xd9, 0x98, 0x31, 0x73, 0xe4, 0xb2, 0x79, 0xef,
	0x1b, 0xda, 0xe1, 0x12, 0xda, 0x6f, 0xdc, 0x05, 0xed, 0x70, 0x29, 0xed, 0xb0, 0x45, 0x7b, 0xf4,
	0xa7, 0x03, 0x76, 0x84, 0x85, 0x1a, 0xed, 0x72, 0x60, 0x7d, 0xef, 0x80, 0x4d, 0xf5, 0x2a, 0x87,
	0x56, 0xf7, 0x98, 0xad, 0x90, 0xb9, 0x19, 0x9b, 0x91, 0xa6, 0xb0, 0xb8, 0x8b, 0xdc, 0x5b, 0xb2,
	0x8b, 0x7c, 0xa1, 0x66, 0x2e, 0xcf, 0x0a, 0x2c, 0x5a, 0x49, 0xac, 0x36, 0x0c, 0x8f, 0x4b, 0x92,
	0x30, 0x19, 0x82, 0x1b, 0x99, 0x57, 0x6f, 0x08, 0xba, 0x04, 0x91, 0xd2, 0x68, 0x95, 0xb3, 0xa6,
	0x68, 0xf4, 0xd7, 0x9a, 0x5a, 0x6c, 0x0c, 0x2d, 0xb1, 0x89, 0x79, 0x3f, 0x39, 0x60, 0x40, 0x70,
	0x36, 0x99, 0xc6, 0x65, 0xd5, 0xd8, 0x02, 0xee, 0x2c, 0x3b, 0x7d, 0x43, 0xc6, 0xb4, 0xdf, 0xbb,
	0x60, 0xc7, 0x12, 0x4e, 0x73, 0x34, 0x31, 0xa1, 0xf5, 0xe2, 0x82, 0x5e, 0x22, 0x3e, 0x7d, 0x21,
	0x64, 0x5e, 0x00, 0xf6, 0x2d, 0x0a, 0x25, 0x33, 0x18, 0x67, 0x1c, 0x16, 0x88, 0xca, 0xc5, 0xc2,
	0x8d, 0x06, 0x1a, 0x7b, 0x9a, 0xcc, 0x3e, 0xcb, 0xf8, 0x39, 0xa2, 0x73, 0x78, 0x46, 0x12, 0x8b,
	0x5f, 0x9f, 0xc3, 0x5f, 0x91, 0x44, 0xe3, 0x1f, 0x82, 0xbe, 0xdc, 0x5f, 0xe3, 0xca, 0x42, 0x37,
	0x2c, 0x8d, 0x8b, 0xb8, 0xd2, 0xb0, 0x37, 0x01, 0xc8, 0xcb, 0x31, 0xca, 0xa5, 0x63, 0xb9, 0x4b,
	0x6c, 0x45, 0xdb, 0x52, 0x22, 0xdc, 0x79, 0x0f, 0xc1, 0x4e, 0x85, 0xc7, 0x38, 0x9b, 0xe1, 0x44,
	0x4d, 0x67, 0xbf, 0x23, 0xf7, 0x2d, 0xd7, 0x48, 0xe5, 0x64, 0x16, 0x9d, 0x11, 0x4b, 0x66, 0xb4,
	0xcc, 0x08, 0xc7, 0x95, 0xdc, 0x1e, 0xd6, 0xa3, 0x9e, 0x14, 0x5e, 0x2a, 0xd9, 0xe8, 0xef, 0x4d,
	0xd0, 0x6f, 0xad, 0xd5, 0xcd, 0x8d, 0xf8, 0x78, 0x6e, 0x23, 0xfe, 0xd1, 0x01, 0xa0, 0x3e, 0x0c,
	0xfe, 0x13, 0x59, 0xdf, 0xeb, 0x15, 0xd6, 0xb7, 0x3e, 0x85, 0xd1, 0x76, 0x3c, 0xa1, 0x97, 0xea,
	0x08, 0x8c, 0x80, 0x6b, 0xe8, 0xab, 0xd2, 0x9e, 0xa8, 0xae, 0x15, 0x39, 0xc5, 0x5c, 0x55, 0xf6,
	0x91, 0xce, 0x3c, 0xe6, 0x70, 0x86, 0x2b, 0x96, 0x95, 0xc4, 0xff, 0x50, 0xa2, 0x5c, 0x85, 0x7a,
	0xa5, 0x84, 0xde, 0x5b, 0xa0, 0x4b, 0xae, 0x0b, 0x58, 0xa6, 0x2a, 0xf7, 0xa1, 0xc4, 0x6c, 0x93,
	0xeb, 0xe2, 0xab, 0x54, 0xe6, 0xfe, 0x67, 0x07, 0xec, 0x6a, 0x07, 0xea, 0x38, 0x71, 0x54, 0x50,
	0xff, 0xe9, 0xca, 0x3b, 0xdd, 0x1c, 0xe5, 0x68, 0xa0, 0xd9, 0xbc, 0x34, 0x64, 0x44, 0x95, 0xba,
	0x86, 0x22, 0x9a, 0x60, 0xff, 0xd9, 0xdd, 0x91, 0x03, 0x9a, 0xc7, 0xe9, 0x04, 0x8b, 0x0a, 0x4c,
	0x11, 0x83, 0xaa, 0xb1, 0x55, 0xdb, 0x7e, 0x24, 0x3b, 0xdb, 0x9d, 0x22, 0x76, 0x26, 0xa4, 0xaa,
	0x6d, 0x1f, 0x81, 0xbe, 0xa8, 0x52, 0x13, 0xf7, 0xb1, 0xaa, 0x14, 0xc1, 0xbc, 0x81, 0xfb, 0xc1,
	0x01, 0x5b, 0xe6, 0xab, 0xfe, 0x27, 0xc3, 0xb5, 0x15, 0xaf, 0x82, 0xcd, 0xeb, 0x2f, 0xea, 0xe8,
	0x93, 0x1e, 0x6f, 0xca, 0xdf, 0xc4, 0x4f, 0xfe, 0x09, 0x00, 0x00, 0xff, 0xff, 0xeb, 0xe6, 0x06,
	0x08, 0x2c, 0x0f, 0x00, 0x00,
}
