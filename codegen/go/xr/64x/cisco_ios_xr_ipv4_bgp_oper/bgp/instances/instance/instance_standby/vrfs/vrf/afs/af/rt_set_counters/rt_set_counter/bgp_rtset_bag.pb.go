/*
Copyright 2019 Cisco Systems

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: bgp_rtset_bag.proto

package cisco_ios_xr_ipv4_bgp_oper_bgp_instances_instance_instance_standby_vrfs_vrf_afs_af_rt_set_counters_rt_set_counter

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type BgpRtsetBag_KEYS struct {
	InstanceName         string   `protobuf:"bytes,1,opt,name=instance_name,json=instanceName,proto3" json:"instance_name,omitempty"`
	VrfName              string   `protobuf:"bytes,2,opt,name=vrf_name,json=vrfName,proto3" json:"vrf_name,omitempty"`
	AfName               string   `protobuf:"bytes,3,opt,name=af_name,json=afName,proto3" json:"af_name,omitempty"`
	RtSetId              uint32   `protobuf:"varint,4,opt,name=rt_set_id,json=rtSetId,proto3" json:"rt_set_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BgpRtsetBag_KEYS) Reset()         { *m = BgpRtsetBag_KEYS{} }
func (m *BgpRtsetBag_KEYS) String() string { return proto.CompactTextString(m) }
func (*BgpRtsetBag_KEYS) ProtoMessage()    {}
func (*BgpRtsetBag_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_82cb80d94ad8d5ee, []int{0}
}

func (m *BgpRtsetBag_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BgpRtsetBag_KEYS.Unmarshal(m, b)
}
func (m *BgpRtsetBag_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BgpRtsetBag_KEYS.Marshal(b, m, deterministic)
}
func (m *BgpRtsetBag_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpRtsetBag_KEYS.Merge(m, src)
}
func (m *BgpRtsetBag_KEYS) XXX_Size() int {
	return xxx_messageInfo_BgpRtsetBag_KEYS.Size(m)
}
func (m *BgpRtsetBag_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpRtsetBag_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_BgpRtsetBag_KEYS proto.InternalMessageInfo

func (m *BgpRtsetBag_KEYS) GetInstanceName() string {
	if m != nil {
		return m.InstanceName
	}
	return ""
}

func (m *BgpRtsetBag_KEYS) GetVrfName() string {
	if m != nil {
		return m.VrfName
	}
	return ""
}

func (m *BgpRtsetBag_KEYS) GetAfName() string {
	if m != nil {
		return m.AfName
	}
	return ""
}

func (m *BgpRtsetBag_KEYS) GetRtSetId() uint32 {
	if m != nil {
		return m.RtSetId
	}
	return 0
}

type BgpRtset_ struct {
	RtSet                []uint32 `protobuf:"varint,1,rep,packed,name=rt_set,json=rtSet,proto3" json:"rt_set,omitempty"`
	RtSetLen             uint32   `protobuf:"varint,2,opt,name=rt_set_len,json=rtSetLen,proto3" json:"rt_set_len,omitempty"`
	RtSetId              uint32   `protobuf:"varint,3,opt,name=rt_set_id,json=rtSetId,proto3" json:"rt_set_id,omitempty"`
	RtSetNetCount        uint32   `protobuf:"varint,4,opt,name=rt_set_net_count,json=rtSetNetCount,proto3" json:"rt_set_net_count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BgpRtset_) Reset()         { *m = BgpRtset_{} }
func (m *BgpRtset_) String() string { return proto.CompactTextString(m) }
func (*BgpRtset_) ProtoMessage()    {}
func (*BgpRtset_) Descriptor() ([]byte, []int) {
	return fileDescriptor_82cb80d94ad8d5ee, []int{1}
}

func (m *BgpRtset_) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BgpRtset_.Unmarshal(m, b)
}
func (m *BgpRtset_) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BgpRtset_.Marshal(b, m, deterministic)
}
func (m *BgpRtset_) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpRtset_.Merge(m, src)
}
func (m *BgpRtset_) XXX_Size() int {
	return xxx_messageInfo_BgpRtset_.Size(m)
}
func (m *BgpRtset_) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpRtset_.DiscardUnknown(m)
}

var xxx_messageInfo_BgpRtset_ proto.InternalMessageInfo

func (m *BgpRtset_) GetRtSet() []uint32 {
	if m != nil {
		return m.RtSet
	}
	return nil
}

func (m *BgpRtset_) GetRtSetLen() uint32 {
	if m != nil {
		return m.RtSetLen
	}
	return 0
}

func (m *BgpRtset_) GetRtSetId() uint32 {
	if m != nil {
		return m.RtSetId
	}
	return 0
}

func (m *BgpRtset_) GetRtSetNetCount() uint32 {
	if m != nil {
		return m.RtSetNetCount
	}
	return 0
}

type BgpRtsetBag struct {
	RouteTargetSet       *BgpRtset_ `protobuf:"bytes,50,opt,name=route_target_set,json=routeTargetSet,proto3" json:"route_target_set,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *BgpRtsetBag) Reset()         { *m = BgpRtsetBag{} }
func (m *BgpRtsetBag) String() string { return proto.CompactTextString(m) }
func (*BgpRtsetBag) ProtoMessage()    {}
func (*BgpRtsetBag) Descriptor() ([]byte, []int) {
	return fileDescriptor_82cb80d94ad8d5ee, []int{2}
}

func (m *BgpRtsetBag) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BgpRtsetBag.Unmarshal(m, b)
}
func (m *BgpRtsetBag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BgpRtsetBag.Marshal(b, m, deterministic)
}
func (m *BgpRtsetBag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpRtsetBag.Merge(m, src)
}
func (m *BgpRtsetBag) XXX_Size() int {
	return xxx_messageInfo_BgpRtsetBag.Size(m)
}
func (m *BgpRtsetBag) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpRtsetBag.DiscardUnknown(m)
}

var xxx_messageInfo_BgpRtsetBag proto.InternalMessageInfo

func (m *BgpRtsetBag) GetRouteTargetSet() *BgpRtset_ {
	if m != nil {
		return m.RouteTargetSet
	}
	return nil
}

func init() {
	proto.RegisterType((*BgpRtsetBag_KEYS)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.vrfs.vrf.afs.af.rt_set_counters.rt_set_counter.bgp_rtset_bag_KEYS")
	proto.RegisterType((*BgpRtset_)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.vrfs.vrf.afs.af.rt_set_counters.rt_set_counter.bgp_rtset_")
	proto.RegisterType((*BgpRtsetBag)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.vrfs.vrf.afs.af.rt_set_counters.rt_set_counter.bgp_rtset_bag")
}

func init() { proto.RegisterFile("bgp_rtset_bag.proto", fileDescriptor_82cb80d94ad8d5ee) }

var fileDescriptor_82cb80d94ad8d5ee = []byte{
	// 324 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x92, 0xbd, 0x4e, 0xf3, 0x30,
	0x14, 0x86, 0xe5, 0xaf, 0x1f, 0xfd, 0x39, 0x10, 0x54, 0x19, 0x21, 0x0a, 0x62, 0x88, 0xca, 0x40,
	0x26, 0x0f, 0x85, 0x3b, 0x40, 0x0c, 0x08, 0xd4, 0x21, 0x65, 0x61, 0xb2, 0x9c, 0xf4, 0x24, 0x8a,
	0x44, 0xed, 0x60, 0x9f, 0x46, 0x30, 0xb0, 0x22, 0x71, 0x25, 0x5c, 0x03, 0x77, 0x87, 0xe2, 0xa4,
	0xad, 0xc2, 0x05, 0xb0, 0x24, 0x8e, 0x9f, 0x57, 0xaf, 0x1f, 0x9d, 0x18, 0x8e, 0x92, 0xbc, 0x94,
	0x96, 0x1c, 0x92, 0x4c, 0x54, 0x2e, 0x4a, 0x6b, 0xc8, 0xf0, 0x97, 0xb4, 0x70, 0xa9, 0x91, 0x85,
	0x71, 0xf2, 0xd5, 0xca, 0xa2, 0xac, 0xae, 0x65, 0x1d, 0x33, 0x25, 0x5a, 0x91, 0xe4, 0xa5, 0x28,
	0xb4, 0x23, 0xa5, 0x53, 0x74, 0xdb, 0xd5, 0x76, 0x21, 0xeb, 0xd7, 0x32, 0x79, 0x13, 0x95, 0xcd,
	0x5c, 0xfd, 0x10, 0x2a, 0x73, 0x42, 0x65, 0xc2, 0x92, 0xac, 0x0f, 0x49, 0xcd, 0x5a, 0x13, 0x5a,
	0xf7, 0xeb, 0x7b, 0xfa, 0xc9, 0x80, 0x77, 0x54, 0xe4, 0xfd, 0xed, 0xd3, 0x82, 0x5f, 0x40, 0xb0,
	0x6d, 0xd6, 0x6a, 0x85, 0x13, 0x16, 0xb2, 0x68, 0x14, 0x1f, 0x6c, 0x36, 0xe7, 0x6a, 0x85, 0xfc,
	0x14, 0x86, 0x95, 0xcd, 0x1a, 0xfe, 0xcf, 0xf3, 0x41, 0x65, 0x33, 0x8f, 0x4e, 0x60, 0xa0, 0x5a,
	0xd2, 0xf3, 0xa4, 0xaf, 0x1a, 0x70, 0x06, 0xa3, 0xd6, 0xa0, 0x58, 0x4e, 0xfe, 0x87, 0x2c, 0x0a,
	0xe2, 0x81, 0xa5, 0x05, 0xd2, 0xdd, 0x72, 0xfa, 0xc1, 0x00, 0x76, 0x2e, 0xfc, 0x18, 0xfa, 0x4d,
	0x74, 0xc2, 0xc2, 0x5e, 0x14, 0xc4, 0x7b, 0x3e, 0xc7, 0xcf, 0x01, 0xda, 0x86, 0x67, 0xd4, 0xfe,
	0xdc, 0x20, 0x1e, 0x7a, 0xf4, 0x80, 0xba, 0xdb, 0xdf, 0xeb, 0xf4, 0xf3, 0x4b, 0x18, 0xb7, 0x4c,
	0x6f, 0x26, 0xd0, 0x2a, 0x04, 0x3e, 0x32, 0x47, 0xba, 0xa9, 0x37, 0xa7, 0xdf, 0x0c, 0x82, 0xce,
	0x50, 0xf8, 0x17, 0x83, 0xb1, 0x35, 0x6b, 0x42, 0x49, 0xca, 0xe6, 0xd8, 0x68, 0xcd, 0x42, 0x16,
	0xed, 0xcf, 0xde, 0xc5, 0x9f, 0xff, 0x35, 0xb1, 0x93, 0x8b, 0x0f, 0xbd, 0xd6, 0xa3, 0xb7, 0x5a,
	0x20, 0x25, 0x7d, 0x7f, 0x95, 0xae, 0x7e, 0x02, 0x00, 0x00, 0xff, 0xff, 0x08, 0xd6, 0x7f, 0x67,
	0x61, 0x02, 0x00, 0x00,
}
