/*
Copyright 2019 Cisco Systems

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: bgp_nbr_bag.proto

package cisco_ios_xr_ipv4_bgp_oper_bgp_instances_instance_instance_standby_vrfs_vrf_afs_af_neighbor_af_table_neighbor

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type BgpNbrBag_KEYS struct {
	InstanceName         string   `protobuf:"bytes,1,opt,name=instance_name,json=instanceName,proto3" json:"instance_name,omitempty"`
	VrfName              string   `protobuf:"bytes,2,opt,name=vrf_name,json=vrfName,proto3" json:"vrf_name,omitempty"`
	AfName               string   `protobuf:"bytes,3,opt,name=af_name,json=afName,proto3" json:"af_name,omitempty"`
	NeighborAddress      string   `protobuf:"bytes,4,opt,name=neighbor_address,json=neighborAddress,proto3" json:"neighbor_address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BgpNbrBag_KEYS) Reset()         { *m = BgpNbrBag_KEYS{} }
func (m *BgpNbrBag_KEYS) String() string { return proto.CompactTextString(m) }
func (*BgpNbrBag_KEYS) ProtoMessage()    {}
func (*BgpNbrBag_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_be84ba08d516c4d3, []int{0}
}

func (m *BgpNbrBag_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BgpNbrBag_KEYS.Unmarshal(m, b)
}
func (m *BgpNbrBag_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BgpNbrBag_KEYS.Marshal(b, m, deterministic)
}
func (m *BgpNbrBag_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpNbrBag_KEYS.Merge(m, src)
}
func (m *BgpNbrBag_KEYS) XXX_Size() int {
	return xxx_messageInfo_BgpNbrBag_KEYS.Size(m)
}
func (m *BgpNbrBag_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpNbrBag_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_BgpNbrBag_KEYS proto.InternalMessageInfo

func (m *BgpNbrBag_KEYS) GetInstanceName() string {
	if m != nil {
		return m.InstanceName
	}
	return ""
}

func (m *BgpNbrBag_KEYS) GetVrfName() string {
	if m != nil {
		return m.VrfName
	}
	return ""
}

func (m *BgpNbrBag_KEYS) GetAfName() string {
	if m != nil {
		return m.AfName
	}
	return ""
}

func (m *BgpNbrBag_KEYS) GetNeighborAddress() string {
	if m != nil {
		return m.NeighborAddress
	}
	return ""
}

type BgpL2VpnAddrT struct {
	L2VpnAddress         []uint32 `protobuf:"varint,1,rep,packed,name=l2vpn_address,json=l2vpnAddress,proto3" json:"l2vpn_address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BgpL2VpnAddrT) Reset()         { *m = BgpL2VpnAddrT{} }
func (m *BgpL2VpnAddrT) String() string { return proto.CompactTextString(m) }
func (*BgpL2VpnAddrT) ProtoMessage()    {}
func (*BgpL2VpnAddrT) Descriptor() ([]byte, []int) {
	return fileDescriptor_be84ba08d516c4d3, []int{1}
}

func (m *BgpL2VpnAddrT) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BgpL2VpnAddrT.Unmarshal(m, b)
}
func (m *BgpL2VpnAddrT) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BgpL2VpnAddrT.Marshal(b, m, deterministic)
}
func (m *BgpL2VpnAddrT) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpL2VpnAddrT.Merge(m, src)
}
func (m *BgpL2VpnAddrT) XXX_Size() int {
	return xxx_messageInfo_BgpL2VpnAddrT.Size(m)
}
func (m *BgpL2VpnAddrT) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpL2VpnAddrT.DiscardUnknown(m)
}

var xxx_messageInfo_BgpL2VpnAddrT proto.InternalMessageInfo

func (m *BgpL2VpnAddrT) GetL2VpnAddress() []uint32 {
	if m != nil {
		return m.L2VpnAddress
	}
	return nil
}

type BgpL2VpnMspwAddrT struct {
	L2VpnAddress         []uint32 `protobuf:"varint,1,rep,packed,name=l2vpn_address,json=l2vpnAddress,proto3" json:"l2vpn_address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BgpL2VpnMspwAddrT) Reset()         { *m = BgpL2VpnMspwAddrT{} }
func (m *BgpL2VpnMspwAddrT) String() string { return proto.CompactTextString(m) }
func (*BgpL2VpnMspwAddrT) ProtoMessage()    {}
func (*BgpL2VpnMspwAddrT) Descriptor() ([]byte, []int) {
	return fileDescriptor_be84ba08d516c4d3, []int{2}
}

func (m *BgpL2VpnMspwAddrT) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BgpL2VpnMspwAddrT.Unmarshal(m, b)
}
func (m *BgpL2VpnMspwAddrT) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BgpL2VpnMspwAddrT.Marshal(b, m, deterministic)
}
func (m *BgpL2VpnMspwAddrT) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpL2VpnMspwAddrT.Merge(m, src)
}
func (m *BgpL2VpnMspwAddrT) XXX_Size() int {
	return xxx_messageInfo_BgpL2VpnMspwAddrT.Size(m)
}
func (m *BgpL2VpnMspwAddrT) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpL2VpnMspwAddrT.DiscardUnknown(m)
}

var xxx_messageInfo_BgpL2VpnMspwAddrT proto.InternalMessageInfo

func (m *BgpL2VpnMspwAddrT) GetL2VpnAddress() []uint32 {
	if m != nil {
		return m.L2VpnAddress
	}
	return nil
}

type BgpIpv4SrpolicyAddrT struct {
	Ipv4SrpolicyAddress  []uint32 `protobuf:"varint,1,rep,packed,name=ipv4_srpolicy_address,json=ipv4SrpolicyAddress,proto3" json:"ipv4_srpolicy_address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BgpIpv4SrpolicyAddrT) Reset()         { *m = BgpIpv4SrpolicyAddrT{} }
func (m *BgpIpv4SrpolicyAddrT) String() string { return proto.CompactTextString(m) }
func (*BgpIpv4SrpolicyAddrT) ProtoMessage()    {}
func (*BgpIpv4SrpolicyAddrT) Descriptor() ([]byte, []int) {
	return fileDescriptor_be84ba08d516c4d3, []int{3}
}

func (m *BgpIpv4SrpolicyAddrT) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BgpIpv4SrpolicyAddrT.Unmarshal(m, b)
}
func (m *BgpIpv4SrpolicyAddrT) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BgpIpv4SrpolicyAddrT.Marshal(b, m, deterministic)
}
func (m *BgpIpv4SrpolicyAddrT) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpIpv4SrpolicyAddrT.Merge(m, src)
}
func (m *BgpIpv4SrpolicyAddrT) XXX_Size() int {
	return xxx_messageInfo_BgpIpv4SrpolicyAddrT.Size(m)
}
func (m *BgpIpv4SrpolicyAddrT) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpIpv4SrpolicyAddrT.DiscardUnknown(m)
}

var xxx_messageInfo_BgpIpv4SrpolicyAddrT proto.InternalMessageInfo

func (m *BgpIpv4SrpolicyAddrT) GetIpv4SrpolicyAddress() []uint32 {
	if m != nil {
		return m.Ipv4SrpolicyAddress
	}
	return nil
}

type BgpIpv6SrpolicyAddrT struct {
	Ipv6SrpolicyAddress  []uint32 `protobuf:"varint,1,rep,packed,name=ipv6_srpolicy_address,json=ipv6SrpolicyAddress,proto3" json:"ipv6_srpolicy_address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BgpIpv6SrpolicyAddrT) Reset()         { *m = BgpIpv6SrpolicyAddrT{} }
func (m *BgpIpv6SrpolicyAddrT) String() string { return proto.CompactTextString(m) }
func (*BgpIpv6SrpolicyAddrT) ProtoMessage()    {}
func (*BgpIpv6SrpolicyAddrT) Descriptor() ([]byte, []int) {
	return fileDescriptor_be84ba08d516c4d3, []int{4}
}

func (m *BgpIpv6SrpolicyAddrT) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BgpIpv6SrpolicyAddrT.Unmarshal(m, b)
}
func (m *BgpIpv6SrpolicyAddrT) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BgpIpv6SrpolicyAddrT.Marshal(b, m, deterministic)
}
func (m *BgpIpv6SrpolicyAddrT) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpIpv6SrpolicyAddrT.Merge(m, src)
}
func (m *BgpIpv6SrpolicyAddrT) XXX_Size() int {
	return xxx_messageInfo_BgpIpv6SrpolicyAddrT.Size(m)
}
func (m *BgpIpv6SrpolicyAddrT) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpIpv6SrpolicyAddrT.DiscardUnknown(m)
}

var xxx_messageInfo_BgpIpv6SrpolicyAddrT proto.InternalMessageInfo

func (m *BgpIpv6SrpolicyAddrT) GetIpv6SrpolicyAddress() []uint32 {
	if m != nil {
		return m.Ipv6SrpolicyAddress
	}
	return nil
}

type BgpAddrtype struct {
	Afi                    string                `protobuf:"bytes,1,opt,name=afi,proto3" json:"afi,omitempty"`
	Ipv4Address            string                `protobuf:"bytes,2,opt,name=ipv4_address,json=ipv4Address,proto3" json:"ipv4_address,omitempty"`
	Ipv4McastAddress       string                `protobuf:"bytes,3,opt,name=ipv4_mcast_address,json=ipv4McastAddress,proto3" json:"ipv4_mcast_address,omitempty"`
	Ipv4LabelAddress       string                `protobuf:"bytes,4,opt,name=ipv4_label_address,json=ipv4LabelAddress,proto3" json:"ipv4_label_address,omitempty"`
	Ipv4TunnelAddress      string                `protobuf:"bytes,5,opt,name=ipv4_tunnel_address,json=ipv4TunnelAddress,proto3" json:"ipv4_tunnel_address,omitempty"`
	Ipv4MdtAddress         string                `protobuf:"bytes,6,opt,name=ipv4_mdt_address,json=ipv4MdtAddress,proto3" json:"ipv4_mdt_address,omitempty"`
	Ipv4VpnAddress         string                `protobuf:"bytes,7,opt,name=ipv4vpn_address,json=ipv4vpnAddress,proto3" json:"ipv4vpn_address,omitempty"`
	Ipv4VpnaMcastddress    string                `protobuf:"bytes,8,opt,name=ipv4vpna_mcastddress,json=ipv4vpnaMcastddress,proto3" json:"ipv4vpna_mcastddress,omitempty"`
	Ipv6Address            string                `protobuf:"bytes,9,opt,name=ipv6_address,json=ipv6Address,proto3" json:"ipv6_address,omitempty"`
	Ipv6McastAddress       string                `protobuf:"bytes,10,opt,name=ipv6_mcast_address,json=ipv6McastAddress,proto3" json:"ipv6_mcast_address,omitempty"`
	Ipv6LabelAddress       string                `protobuf:"bytes,11,opt,name=ipv6_label_address,json=ipv6LabelAddress,proto3" json:"ipv6_label_address,omitempty"`
	Ipv6VpnAddress         string                `protobuf:"bytes,12,opt,name=ipv6vpn_address,json=ipv6vpnAddress,proto3" json:"ipv6vpn_address,omitempty"`
	Ipv6VpnMcastAddress    string                `protobuf:"bytes,13,opt,name=ipv6vpn_mcast_address,json=ipv6vpnMcastAddress,proto3" json:"ipv6vpn_mcast_address,omitempty"`
	L2VpnVplsAddress       *BgpL2VpnAddrT        `protobuf:"bytes,14,opt,name=l2vpn_vpls_address,json=l2vpnVplsAddress,proto3" json:"l2vpn_vpls_address,omitempty"`
	RtConstraintAddress    string                `protobuf:"bytes,15,opt,name=rt_constraint_address,json=rtConstraintAddress,proto3" json:"rt_constraint_address,omitempty"`
	Ipv6MvpnAddress        string                `protobuf:"bytes,16,opt,name=ipv6mvpn_address,json=ipv6mvpnAddress,proto3" json:"ipv6mvpn_address,omitempty"`
	Ipv4MvpnAddress        string                `protobuf:"bytes,17,opt,name=ipv4mvpn_address,json=ipv4mvpnAddress,proto3" json:"ipv4mvpn_address,omitempty"`
	L2VpnEvpnAddress       string                `protobuf:"bytes,18,opt,name=l2vpn_evpn_address,json=l2vpnEvpnAddress,proto3" json:"l2vpn_evpn_address,omitempty"`
	LsLsAddress            string                `protobuf:"bytes,19,opt,name=ls_ls_address,json=lsLsAddress,proto3" json:"ls_ls_address,omitempty"`
	L2VpnMspwAddress       *BgpL2VpnMspwAddrT    `protobuf:"bytes,20,opt,name=l2vpn_mspw_address,json=l2vpnMspwAddress,proto3" json:"l2vpn_mspw_address,omitempty"`
	Ipv4FlowspecAddress    string                `protobuf:"bytes,21,opt,name=ipv4_flowspec_address,json=ipv4FlowspecAddress,proto3" json:"ipv4_flowspec_address,omitempty"`
	Ipv6FlowspecAddress    string                `protobuf:"bytes,22,opt,name=ipv6_flowspec_address,json=ipv6FlowspecAddress,proto3" json:"ipv6_flowspec_address,omitempty"`
	Ipv4VpnFlowspecAddress string                `protobuf:"bytes,23,opt,name=ipv4vpn_flowspec_address,json=ipv4vpnFlowspecAddress,proto3" json:"ipv4vpn_flowspec_address,omitempty"`
	Ipv6VpnFlowspecAddress string                `protobuf:"bytes,24,opt,name=ipv6vpn_flowspec_address,json=ipv6vpnFlowspecAddress,proto3" json:"ipv6vpn_flowspec_address,omitempty"`
	Ipv4SrPolicyAddress    *BgpIpv4SrpolicyAddrT `protobuf:"bytes,25,opt,name=ipv4_sr_policy_address,json=ipv4SrPolicyAddress,proto3" json:"ipv4_sr_policy_address,omitempty"`
	Ipv6SrPolicyAddress    *BgpIpv6SrpolicyAddrT `protobuf:"bytes,26,opt,name=ipv6_sr_policy_address,json=ipv6SrPolicyAddress,proto3" json:"ipv6_sr_policy_address,omitempty"`
	XXX_NoUnkeyedLiteral   struct{}              `json:"-"`
	XXX_unrecognized       []byte                `json:"-"`
	XXX_sizecache          int32                 `json:"-"`
}

func (m *BgpAddrtype) Reset()         { *m = BgpAddrtype{} }
func (m *BgpAddrtype) String() string { return proto.CompactTextString(m) }
func (*BgpAddrtype) ProtoMessage()    {}
func (*BgpAddrtype) Descriptor() ([]byte, []int) {
	return fileDescriptor_be84ba08d516c4d3, []int{5}
}

func (m *BgpAddrtype) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BgpAddrtype.Unmarshal(m, b)
}
func (m *BgpAddrtype) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BgpAddrtype.Marshal(b, m, deterministic)
}
func (m *BgpAddrtype) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpAddrtype.Merge(m, src)
}
func (m *BgpAddrtype) XXX_Size() int {
	return xxx_messageInfo_BgpAddrtype.Size(m)
}
func (m *BgpAddrtype) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpAddrtype.DiscardUnknown(m)
}

var xxx_messageInfo_BgpAddrtype proto.InternalMessageInfo

func (m *BgpAddrtype) GetAfi() string {
	if m != nil {
		return m.Afi
	}
	return ""
}

func (m *BgpAddrtype) GetIpv4Address() string {
	if m != nil {
		return m.Ipv4Address
	}
	return ""
}

func (m *BgpAddrtype) GetIpv4McastAddress() string {
	if m != nil {
		return m.Ipv4McastAddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv4LabelAddress() string {
	if m != nil {
		return m.Ipv4LabelAddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv4TunnelAddress() string {
	if m != nil {
		return m.Ipv4TunnelAddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv4MdtAddress() string {
	if m != nil {
		return m.Ipv4MdtAddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv4VpnAddress() string {
	if m != nil {
		return m.Ipv4VpnAddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv4VpnaMcastddress() string {
	if m != nil {
		return m.Ipv4VpnaMcastddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv6Address() string {
	if m != nil {
		return m.Ipv6Address
	}
	return ""
}

func (m *BgpAddrtype) GetIpv6McastAddress() string {
	if m != nil {
		return m.Ipv6McastAddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv6LabelAddress() string {
	if m != nil {
		return m.Ipv6LabelAddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv6VpnAddress() string {
	if m != nil {
		return m.Ipv6VpnAddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv6VpnMcastAddress() string {
	if m != nil {
		return m.Ipv6VpnMcastAddress
	}
	return ""
}

func (m *BgpAddrtype) GetL2VpnVplsAddress() *BgpL2VpnAddrT {
	if m != nil {
		return m.L2VpnVplsAddress
	}
	return nil
}

func (m *BgpAddrtype) GetRtConstraintAddress() string {
	if m != nil {
		return m.RtConstraintAddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv6MvpnAddress() string {
	if m != nil {
		return m.Ipv6MvpnAddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv4MvpnAddress() string {
	if m != nil {
		return m.Ipv4MvpnAddress
	}
	return ""
}

func (m *BgpAddrtype) GetL2VpnEvpnAddress() string {
	if m != nil {
		return m.L2VpnEvpnAddress
	}
	return ""
}

func (m *BgpAddrtype) GetLsLsAddress() string {
	if m != nil {
		return m.LsLsAddress
	}
	return ""
}

func (m *BgpAddrtype) GetL2VpnMspwAddress() *BgpL2VpnMspwAddrT {
	if m != nil {
		return m.L2VpnMspwAddress
	}
	return nil
}

func (m *BgpAddrtype) GetIpv4FlowspecAddress() string {
	if m != nil {
		return m.Ipv4FlowspecAddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv6FlowspecAddress() string {
	if m != nil {
		return m.Ipv6FlowspecAddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv4VpnFlowspecAddress() string {
	if m != nil {
		return m.Ipv4VpnFlowspecAddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv6VpnFlowspecAddress() string {
	if m != nil {
		return m.Ipv6VpnFlowspecAddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv4SrPolicyAddress() *BgpIpv4SrpolicyAddrT {
	if m != nil {
		return m.Ipv4SrPolicyAddress
	}
	return nil
}

func (m *BgpAddrtype) GetIpv6SrPolicyAddress() *BgpIpv6SrpolicyAddrT {
	if m != nil {
		return m.Ipv6SrPolicyAddress
	}
	return nil
}

type BgpNotfntype_ struct {
	TimeSinceLastNotification uint32   `protobuf:"varint,1,opt,name=time_since_last_notification,json=timeSinceLastNotification,proto3" json:"time_since_last_notification,omitempty"`
	NotificationErrorCode     uint32   `protobuf:"varint,2,opt,name=notification_error_code,json=notificationErrorCode,proto3" json:"notification_error_code,omitempty"`
	NotificationErrorSubcode  uint32   `protobuf:"varint,3,opt,name=notification_error_subcode,json=notificationErrorSubcode,proto3" json:"notification_error_subcode,omitempty"`
	LastNotificationData      []uint32 `protobuf:"varint,4,rep,packed,name=last_notification_data,json=lastNotificationData,proto3" json:"last_notification_data,omitempty"`
	XXX_NoUnkeyedLiteral      struct{} `json:"-"`
	XXX_unrecognized          []byte   `json:"-"`
	XXX_sizecache             int32    `json:"-"`
}

func (m *BgpNotfntype_) Reset()         { *m = BgpNotfntype_{} }
func (m *BgpNotfntype_) String() string { return proto.CompactTextString(m) }
func (*BgpNotfntype_) ProtoMessage()    {}
func (*BgpNotfntype_) Descriptor() ([]byte, []int) {
	return fileDescriptor_be84ba08d516c4d3, []int{6}
}

func (m *BgpNotfntype_) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BgpNotfntype_.Unmarshal(m, b)
}
func (m *BgpNotfntype_) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BgpNotfntype_.Marshal(b, m, deterministic)
}
func (m *BgpNotfntype_) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpNotfntype_.Merge(m, src)
}
func (m *BgpNotfntype_) XXX_Size() int {
	return xxx_messageInfo_BgpNotfntype_.Size(m)
}
func (m *BgpNotfntype_) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpNotfntype_.DiscardUnknown(m)
}

var xxx_messageInfo_BgpNotfntype_ proto.InternalMessageInfo

func (m *BgpNotfntype_) GetTimeSinceLastNotification() uint32 {
	if m != nil {
		return m.TimeSinceLastNotification
	}
	return 0
}

func (m *BgpNotfntype_) GetNotificationErrorCode() uint32 {
	if m != nil {
		return m.NotificationErrorCode
	}
	return 0
}

func (m *BgpNotfntype_) GetNotificationErrorSubcode() uint32 {
	if m != nil {
		return m.NotificationErrorSubcode
	}
	return 0
}

func (m *BgpNotfntype_) GetLastNotificationData() []uint32 {
	if m != nil {
		return m.LastNotificationData
	}
	return nil
}

type BgpPerfNbr_ struct {
	ReadThrottles               uint32   `protobuf:"varint,1,opt,name=read_throttles,json=readThrottles,proto3" json:"read_throttles,omitempty"`
	LowThrottledRead            uint32   `protobuf:"varint,2,opt,name=low_throttled_read,json=lowThrottledRead,proto3" json:"low_throttled_read,omitempty"`
	HighThrottledRead           uint32   `protobuf:"varint,3,opt,name=high_throttled_read,json=highThrottledRead,proto3" json:"high_throttled_read,omitempty"`
	TimeSinceLastThrottledRead  uint32   `protobuf:"varint,4,opt,name=time_since_last_throttled_read,json=timeSinceLastThrottledRead,proto3" json:"time_since_last_throttled_read,omitempty"`
	ReadCallsCount              uint32   `protobuf:"varint,5,opt,name=read_calls_count,json=readCallsCount,proto3" json:"read_calls_count,omitempty"`
	ReadMessagesCount           uint32   `protobuf:"varint,6,opt,name=read_messages_count,json=readMessagesCount,proto3" json:"read_messages_count,omitempty"`
	DataBytesRead               uint32   `protobuf:"varint,7,opt,name=data_bytes_read,json=dataBytesRead,proto3" json:"data_bytes_read,omitempty"`
	IoReadTime                  uint32   `protobuf:"varint,8,opt,name=io_read_time,json=ioReadTime,proto3" json:"io_read_time,omitempty"`
	WriteCallsCount             uint32   `protobuf:"varint,9,opt,name=write_calls_count,json=writeCallsCount,proto3" json:"write_calls_count,omitempty"`
	DataBytesWritten            uint32   `protobuf:"varint,10,opt,name=data_bytes_written,json=dataBytesWritten,proto3" json:"data_bytes_written,omitempty"`
	IoWriteTime                 uint32   `protobuf:"varint,11,opt,name=io_write_time,json=ioWriteTime,proto3" json:"io_write_time,omitempty"`
	LastSentSeqNo               uint32   `protobuf:"varint,12,opt,name=last_sent_seq_no,json=lastSentSeqNo,proto3" json:"last_sent_seq_no,omitempty"`
	WriteSubgroupCallsCount     uint32   `protobuf:"varint,13,opt,name=write_subgroup_calls_count,json=writeSubgroupCallsCount,proto3" json:"write_subgroup_calls_count,omitempty"`
	WriteSubgroupMessagesCount  uint32   `protobuf:"varint,14,opt,name=write_subgroup_messages_count,json=writeSubgroupMessagesCount,proto3" json:"write_subgroup_messages_count,omitempty"`
	SubgroupListTime            uint32   `protobuf:"varint,15,opt,name=subgroup_list_time,json=subgroupListTime,proto3" json:"subgroup_list_time,omitempty"`
	WriteQueueCallsCount        uint32   `protobuf:"varint,16,opt,name=write_queue_calls_count,json=writeQueueCallsCount,proto3" json:"write_queue_calls_count,omitempty"`
	WriteQueueMessagesCount     uint32   `protobuf:"varint,17,opt,name=write_queue_messages_count,json=writeQueueMessagesCount,proto3" json:"write_queue_messages_count,omitempty"`
	WriteQueueTime              uint32   `protobuf:"varint,18,opt,name=write_queue_time,json=writeQueueTime,proto3" json:"write_queue_time,omitempty"`
	InboundUpdateMessages       uint32   `protobuf:"varint,19,opt,name=inbound_update_messages,json=inboundUpdateMessages,proto3" json:"inbound_update_messages,omitempty"`
	InboundUpdateMessagesTime   uint32   `protobuf:"varint,20,opt,name=inbound_update_messages_time,json=inboundUpdateMessagesTime,proto3" json:"inbound_update_messages_time,omitempty"`
	MaximumReadSize             uint32   `protobuf:"varint,21,opt,name=maximum_read_size,json=maximumReadSize,proto3" json:"maximum_read_size,omitempty"`
	Actives                     uint32   `protobuf:"varint,22,opt,name=actives,proto3" json:"actives,omitempty"`
	FailedPostActives           uint32   `protobuf:"varint,23,opt,name=failed_post_actives,json=failedPostActives,proto3" json:"failed_post_actives,omitempty"`
	Passives                    uint32   `protobuf:"varint,24,opt,name=passives,proto3" json:"passives,omitempty"`
	RejectedPassives            uint32   `protobuf:"varint,25,opt,name=rejected_passives,json=rejectedPassives,proto3" json:"rejected_passives,omitempty"`
	ActiveCollision             uint32   `protobuf:"varint,26,opt,name=active_collision,json=activeCollision,proto3" json:"active_collision,omitempty"`
	PassiveCollision            uint32   `protobuf:"varint,27,opt,name=passive_collision,json=passiveCollision,proto3" json:"passive_collision,omitempty"`
	ControlToReadThreadTrigger  uint32   `protobuf:"varint,28,opt,name=control_to_read_thread_trigger,json=controlToReadThreadTrigger,proto3" json:"control_to_read_thread_trigger,omitempty"`
	ControlToWriteThreadTrigger uint32   `protobuf:"varint,29,opt,name=control_to_write_thread_trigger,json=controlToWriteThreadTrigger,proto3" json:"control_to_write_thread_trigger,omitempty"`
	NetworkStatus               uint32   `protobuf:"varint,30,opt,name=network_status,json=networkStatus,proto3" json:"network_status,omitempty"`
	ResetFlags                  uint32   `protobuf:"varint,31,opt,name=reset_flags,json=resetFlags,proto3" json:"reset_flags,omitempty"`
	NbrFlags                    uint32   `protobuf:"varint,32,opt,name=nbr_flags,json=nbrFlags,proto3" json:"nbr_flags,omitempty"`
	NbrFd                       int32    `protobuf:"zigzag32,33,opt,name=nbr_fd,json=nbrFd,proto3" json:"nbr_fd,omitempty"`
	ResetRetries                uint32   `protobuf:"varint,34,opt,name=reset_retries,json=resetRetries,proto3" json:"reset_retries,omitempty"`
	SyncFlags                   uint32   `protobuf:"varint,35,opt,name=sync_flags,json=syncFlags,proto3" json:"sync_flags,omitempty"`
	NsrOperDownCount            uint32   `protobuf:"varint,36,opt,name=nsr_oper_down_count,json=nsrOperDownCount,proto3" json:"nsr_oper_down_count,omitempty"`
	LastNsrScopedSync           uint32   `protobuf:"varint,37,opt,name=last_nsr_scoped_sync,json=lastNsrScopedSync,proto3" json:"last_nsr_scoped_sync,omitempty"`
	XXX_NoUnkeyedLiteral        struct{} `json:"-"`
	XXX_unrecognized            []byte   `json:"-"`
	XXX_sizecache               int32    `json:"-"`
}

func (m *BgpPerfNbr_) Reset()         { *m = BgpPerfNbr_{} }
func (m *BgpPerfNbr_) String() string { return proto.CompactTextString(m) }
func (*BgpPerfNbr_) ProtoMessage()    {}
func (*BgpPerfNbr_) Descriptor() ([]byte, []int) {
	return fileDescriptor_be84ba08d516c4d3, []int{7}
}

func (m *BgpPerfNbr_) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BgpPerfNbr_.Unmarshal(m, b)
}
func (m *BgpPerfNbr_) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BgpPerfNbr_.Marshal(b, m, deterministic)
}
func (m *BgpPerfNbr_) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpPerfNbr_.Merge(m, src)
}
func (m *BgpPerfNbr_) XXX_Size() int {
	return xxx_messageInfo_BgpPerfNbr_.Size(m)
}
func (m *BgpPerfNbr_) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpPerfNbr_.DiscardUnknown(m)
}

var xxx_messageInfo_BgpPerfNbr_ proto.InternalMessageInfo

func (m *BgpPerfNbr_) GetReadThrottles() uint32 {
	if m != nil {
		return m.ReadThrottles
	}
	return 0
}

func (m *BgpPerfNbr_) GetLowThrottledRead() uint32 {
	if m != nil {
		return m.LowThrottledRead
	}
	return 0
}

func (m *BgpPerfNbr_) GetHighThrottledRead() uint32 {
	if m != nil {
		return m.HighThrottledRead
	}
	return 0
}

func (m *BgpPerfNbr_) GetTimeSinceLastThrottledRead() uint32 {
	if m != nil {
		return m.TimeSinceLastThrottledRead
	}
	return 0
}

func (m *BgpPerfNbr_) GetReadCallsCount() uint32 {
	if m != nil {
		return m.ReadCallsCount
	}
	return 0
}

func (m *BgpPerfNbr_) GetReadMessagesCount() uint32 {
	if m != nil {
		return m.ReadMessagesCount
	}
	return 0
}

func (m *BgpPerfNbr_) GetDataBytesRead() uint32 {
	if m != nil {
		return m.DataBytesRead
	}
	return 0
}

func (m *BgpPerfNbr_) GetIoReadTime() uint32 {
	if m != nil {
		return m.IoReadTime
	}
	return 0
}

func (m *BgpPerfNbr_) GetWriteCallsCount() uint32 {
	if m != nil {
		return m.WriteCallsCount
	}
	return 0
}

func (m *BgpPerfNbr_) GetDataBytesWritten() uint32 {
	if m != nil {
		return m.DataBytesWritten
	}
	return 0
}

func (m *BgpPerfNbr_) GetIoWriteTime() uint32 {
	if m != nil {
		return m.IoWriteTime
	}
	return 0
}

func (m *BgpPerfNbr_) GetLastSentSeqNo() uint32 {
	if m != nil {
		return m.LastSentSeqNo
	}
	return 0
}

func (m *BgpPerfNbr_) GetWriteSubgroupCallsCount() uint32 {
	if m != nil {
		return m.WriteSubgroupCallsCount
	}
	return 0
}

func (m *BgpPerfNbr_) GetWriteSubgroupMessagesCount() uint32 {
	if m != nil {
		return m.WriteSubgroupMessagesCount
	}
	return 0
}

func (m *BgpPerfNbr_) GetSubgroupListTime() uint32 {
	if m != nil {
		return m.SubgroupListTime
	}
	return 0
}

func (m *BgpPerfNbr_) GetWriteQueueCallsCount() uint32 {
	if m != nil {
		return m.WriteQueueCallsCount
	}
	return 0
}

func (m *BgpPerfNbr_) GetWriteQueueMessagesCount() uint32 {
	if m != nil {
		return m.WriteQueueMessagesCount
	}
	return 0
}

func (m *BgpPerfNbr_) GetWriteQueueTime() uint32 {
	if m != nil {
		return m.WriteQueueTime
	}
	return 0
}

func (m *BgpPerfNbr_) GetInboundUpdateMessages() uint32 {
	if m != nil {
		return m.InboundUpdateMessages
	}
	return 0
}

func (m *BgpPerfNbr_) GetInboundUpdateMessagesTime() uint32 {
	if m != nil {
		return m.InboundUpdateMessagesTime
	}
	return 0
}

func (m *BgpPerfNbr_) GetMaximumReadSize() uint32 {
	if m != nil {
		return m.MaximumReadSize
	}
	return 0
}

func (m *BgpPerfNbr_) GetActives() uint32 {
	if m != nil {
		return m.Actives
	}
	return 0
}

func (m *BgpPerfNbr_) GetFailedPostActives() uint32 {
	if m != nil {
		return m.FailedPostActives
	}
	return 0
}

func (m *BgpPerfNbr_) GetPassives() uint32 {
	if m != nil {
		return m.Passives
	}
	return 0
}

func (m *BgpPerfNbr_) GetRejectedPassives() uint32 {
	if m != nil {
		return m.RejectedPassives
	}
	return 0
}

func (m *BgpPerfNbr_) GetActiveCollision() uint32 {
	if m != nil {
		return m.ActiveCollision
	}
	return 0
}

func (m *BgpPerfNbr_) GetPassiveCollision() uint32 {
	if m != nil {
		return m.PassiveCollision
	}
	return 0
}

func (m *BgpPerfNbr_) GetControlToReadThreadTrigger() uint32 {
	if m != nil {
		return m.ControlToReadThreadTrigger
	}
	return 0
}

func (m *BgpPerfNbr_) GetControlToWriteThreadTrigger() uint32 {
	if m != nil {
		return m.ControlToWriteThreadTrigger
	}
	return 0
}

func (m *BgpPerfNbr_) GetNetworkStatus() uint32 {
	if m != nil {
		return m.NetworkStatus
	}
	return 0
}

func (m *BgpPerfNbr_) GetResetFlags() uint32 {
	if m != nil {
		return m.ResetFlags
	}
	return 0
}

func (m *BgpPerfNbr_) GetNbrFlags() uint32 {
	if m != nil {
		return m.NbrFlags
	}
	return 0
}

func (m *BgpPerfNbr_) GetNbrFd() int32 {
	if m != nil {
		return m.NbrFd
	}
	return 0
}

func (m *BgpPerfNbr_) GetResetRetries() uint32 {
	if m != nil {
		return m.ResetRetries
	}
	return 0
}

func (m *BgpPerfNbr_) GetSyncFlags() uint32 {
	if m != nil {
		return m.SyncFlags
	}
	return 0
}

func (m *BgpPerfNbr_) GetNsrOperDownCount() uint32 {
	if m != nil {
		return m.NsrOperDownCount
	}
	return 0
}

func (m *BgpPerfNbr_) GetLastNsrScopedSync() uint32 {
	if m != nil {
		return m.LastNsrScopedSync
	}
	return 0
}

type BgpPerfNbrAf_ struct {
	SubGroupPendingMessageCount  uint32   `protobuf:"varint,1,opt,name=sub_group_pending_message_count,json=subGroupPendingMessageCount,proto3" json:"sub_group_pending_message_count,omitempty"`
	ProcessedMessages            uint32   `protobuf:"varint,2,opt,name=processed_messages,json=processedMessages,proto3" json:"processed_messages,omitempty"`
	SentMessages                 uint32   `protobuf:"varint,3,opt,name=sent_messages,json=sentMessages,proto3" json:"sent_messages,omitempty"`
	SplitHorizonUpdateTransmit   uint32   `protobuf:"varint,4,opt,name=split_horizon_update_transmit,json=splitHorizonUpdateTransmit,proto3" json:"split_horizon_update_transmit,omitempty"`
	SplitHorizonUpdateBlocked    uint32   `protobuf:"varint,5,opt,name=split_horizon_update_blocked,json=splitHorizonUpdateBlocked,proto3" json:"split_horizon_update_blocked,omitempty"`
	SplitHorizonWithdrawTransmit uint32   `protobuf:"varint,6,opt,name=split_horizon_withdraw_transmit,json=splitHorizonWithdrawTransmit,proto3" json:"split_horizon_withdraw_transmit,omitempty"`
	SplitHorizonWithdrawBlocked  uint32   `protobuf:"varint,7,opt,name=split_horizon_withdraw_blocked,json=splitHorizonWithdrawBlocked,proto3" json:"split_horizon_withdraw_blocked,omitempty"`
	XXX_NoUnkeyedLiteral         struct{} `json:"-"`
	XXX_unrecognized             []byte   `json:"-"`
	XXX_sizecache                int32    `json:"-"`
}

func (m *BgpPerfNbrAf_) Reset()         { *m = BgpPerfNbrAf_{} }
func (m *BgpPerfNbrAf_) String() string { return proto.CompactTextString(m) }
func (*BgpPerfNbrAf_) ProtoMessage()    {}
func (*BgpPerfNbrAf_) Descriptor() ([]byte, []int) {
	return fileDescriptor_be84ba08d516c4d3, []int{8}
}

func (m *BgpPerfNbrAf_) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BgpPerfNbrAf_.Unmarshal(m, b)
}
func (m *BgpPerfNbrAf_) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BgpPerfNbrAf_.Marshal(b, m, deterministic)
}
func (m *BgpPerfNbrAf_) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpPerfNbrAf_.Merge(m, src)
}
func (m *BgpPerfNbrAf_) XXX_Size() int {
	return xxx_messageInfo_BgpPerfNbrAf_.Size(m)
}
func (m *BgpPerfNbrAf_) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpPerfNbrAf_.DiscardUnknown(m)
}

var xxx_messageInfo_BgpPerfNbrAf_ proto.InternalMessageInfo

func (m *BgpPerfNbrAf_) GetSubGroupPendingMessageCount() uint32 {
	if m != nil {
		return m.SubGroupPendingMessageCount
	}
	return 0
}

func (m *BgpPerfNbrAf_) GetProcessedMessages() uint32 {
	if m != nil {
		return m.ProcessedMessages
	}
	return 0
}

func (m *BgpPerfNbrAf_) GetSentMessages() uint32 {
	if m != nil {
		return m.SentMessages
	}
	return 0
}

func (m *BgpPerfNbrAf_) GetSplitHorizonUpdateTransmit() uint32 {
	if m != nil {
		return m.SplitHorizonUpdateTransmit
	}
	return 0
}

func (m *BgpPerfNbrAf_) GetSplitHorizonUpdateBlocked() uint32 {
	if m != nil {
		return m.SplitHorizonUpdateBlocked
	}
	return 0
}

func (m *BgpPerfNbrAf_) GetSplitHorizonWithdrawTransmit() uint32 {
	if m != nil {
		return m.SplitHorizonWithdrawTransmit
	}
	return 0
}

func (m *BgpPerfNbrAf_) GetSplitHorizonWithdrawBlocked() uint32 {
	if m != nil {
		return m.SplitHorizonWithdrawBlocked
	}
	return 0
}

type BgpNbrAf_ struct {
	AfName                                        string         `protobuf:"bytes,1,opt,name=af_name,json=afName,proto3" json:"af_name,omitempty"`
	IsNeighborRouteReflectorClient                bool           `protobuf:"varint,2,opt,name=is_neighbor_route_reflector_client,json=isNeighborRouteReflectorClient,proto3" json:"is_neighbor_route_reflector_client,omitempty"`
	IsLegacyPeRt                                  bool           `protobuf:"varint,3,opt,name=is_legacy_pe_rt,json=isLegacyPeRt,proto3" json:"is_legacy_pe_rt,omitempty"`
	IsNeighborAfCapable                           bool           `protobuf:"varint,4,opt,name=is_neighbor_af_capable,json=isNeighborAfCapable,proto3" json:"is_neighbor_af_capable,omitempty"`
	IsSoftReconfigurationInboundAllowed           bool           `protobuf:"varint,5,opt,name=is_soft_reconfiguration_inbound_allowed,json=isSoftReconfigurationInboundAllowed,proto3" json:"is_soft_reconfiguration_inbound_allowed,omitempty"`
	IsUseSoftReconfigurationAlwaysOn              bool           `protobuf:"varint,6,opt,name=is_use_soft_reconfiguration_always_on,json=isUseSoftReconfigurationAlwaysOn,proto3" json:"is_use_soft_reconfiguration_always_on,omitempty"`
	RemovePrivateAsFromUpdates                    bool           `protobuf:"varint,7,opt,name=remove_private_as_from_updates,json=removePrivateAsFromUpdates,proto3" json:"remove_private_as_from_updates,omitempty"`
	RemovePrivateAsEntireAspathFromUpdates        bool           `protobuf:"varint,8,opt,name=remove_private_as_entire_aspath_from_updates,json=removePrivateAsEntireAspathFromUpdates,proto3" json:"remove_private_as_entire_aspath_from_updates,omitempty"`
	RemovePrivateAsFromInboundUpdates             bool           `protobuf:"varint,9,opt,name=remove_private_as_from_inbound_updates,json=removePrivateAsFromInboundUpdates,proto3" json:"remove_private_as_from_inbound_updates,omitempty"`
	RemovePrivateAsEntireAspathFromInboundUpdates bool           `protobuf:"varint,10,opt,name=remove_private_as_entire_aspath_from_inbound_updates,json=removePrivateAsEntireAspathFromInboundUpdates,proto3" json:"remove_private_as_entire_aspath_from_inbound_updates,omitempty"`
	FlowspecValidationDIsable                     bool           `protobuf:"varint,11,opt,name=flowspec_validation_d_isable,json=flowspecValidationDIsable,proto3" json:"flowspec_validation_d_isable,omitempty"`
	FlowspecRedirectValidationDIsable             bool           `protobuf:"varint,12,opt,name=flowspec_redirect_validation_d_isable,json=flowspecRedirectValidationDIsable,proto3" json:"flowspec_redirect_validation_d_isable,omitempty"`
	OrrGroupName                                  string         `protobuf:"bytes,13,opt,name=orr_group_name,json=orrGroupName,proto3" json:"orr_group_name,omitempty"`
	OrrGroupIndex                                 uint32         `protobuf:"varint,14,opt,name=orr_group_index,json=orrGroupIndex,proto3" json:"orr_group_index,omitempty"`
	IsOrrRootAddressConfigured                    bool           `protobuf:"varint,15,opt,name=is_orr_root_address_configured,json=isOrrRootAddressConfigured,proto3" json:"is_orr_root_address_configured,omitempty"`
	AdvertiseAfi                                  bool           `protobuf:"varint,16,opt,name=advertise_afi,json=advertiseAfi,proto3" json:"advertise_afi,omitempty"`
	AdvertiseAfiReorg                             bool           `protobuf:"varint,17,opt,name=advertise_afi_reorg,json=advertiseAfiReorg,proto3" json:"advertise_afi_reorg,omitempty"`
	AdvertiseAfiDisable                           bool           `protobuf:"varint,18,opt,name=advertise_afi_disable,json=advertiseAfiDisable,proto3" json:"advertise_afi_disable,omitempty"`
	EncapsulationType                             uint32         `protobuf:"varint,19,opt,name=encapsulation_type,json=encapsulationType,proto3" json:"encapsulation_type,omitempty"`
	AdvertiseRtType                               uint32         `protobuf:"varint,20,opt,name=advertise_rt_type,json=advertiseRtType,proto3" json:"advertise_rt_type,omitempty"`
	AdvertiseAfiDefVrfImpDisable                  bool           `protobuf:"varint,21,opt,name=advertise_afi_def_vrf_imp_disable,json=advertiseAfiDefVrfImpDisable,proto3" json:"advertise_afi_def_vrf_imp_disable,omitempty"`
	AdvertiseEvpnv4AfiDefVrfImpDisable            bool           `protobuf:"varint,22,opt,name=advertise_evpnv4_afi_def_vrf_imp_disable,json=advertiseEvpnv4AfiDefVrfImpDisable,proto3" json:"advertise_evpnv4_afi_def_vrf_imp_disable,omitempty"`
	AdvertiseEvpnv6AfiDefVrfImpDisable            bool           `protobuf:"varint,23,opt,name=advertise_evpnv6_afi_def_vrf_imp_disable,json=advertiseEvpnv6AfiDefVrfImpDisable,proto3" json:"advertise_evpnv6_afi_def_vrf_imp_disable,omitempty"`
	AdvertiseAfiVrfReImpDisable                   bool           `protobuf:"varint,24,opt,name=advertise_afi_vrf_re_imp_disable,json=advertiseAfiVrfReImpDisable,proto3" json:"advertise_afi_vrf_re_imp_disable,omitempty"`
	AdvertiseEvpnv4AfiVrfReImpDisable             bool           `protobuf:"varint,25,opt,name=advertise_evpnv4_afi_vrf_re_imp_disable,json=advertiseEvpnv4AfiVrfReImpDisable,proto3" json:"advertise_evpnv4_afi_vrf_re_imp_disable,omitempty"`
	AdvertiseEvpnv6AfiVrfReImpDisable             bool           `protobuf:"varint,26,opt,name=advertise_evpnv6_afi_vrf_re_imp_disable,json=advertiseEvpnv6AfiVrfReImpDisable,proto3" json:"advertise_evpnv6_afi_vrf_re_imp_disable,omitempty"`
	AdvertiseAfiEoRReady                          bool           `protobuf:"varint,27,opt,name=advertise_afi_eo_r_ready,json=advertiseAfiEoRReady,proto3" json:"advertise_afi_eo_r_ready,omitempty"`
	AlwaysUseNextHopLocal                         bool           `protobuf:"varint,28,opt,name=always_use_next_hop_local,json=alwaysUseNextHopLocal,proto3" json:"always_use_next_hop_local,omitempty"`
	SentCommunityToNeighbor                       bool           `protobuf:"varint,29,opt,name=sent_community_to_neighbor,json=sentCommunityToNeighbor,proto3" json:"sent_community_to_neighbor,omitempty"`
	SentGshutCommunityToNeighbor                  bool           `protobuf:"varint,30,opt,name=sent_gshut_community_to_neighbor,json=sentGshutCommunityToNeighbor,proto3" json:"sent_gshut_community_to_neighbor,omitempty"`
	SentExtendedCommunityToNeighbor               bool           `protobuf:"varint,31,opt,name=sent_extended_community_to_neighbor,json=sentExtendedCommunityToNeighbor,proto3" json:"sent_extended_community_to_neighbor,omitempty"`
	NeighborDefaultOriginate                      bool           `protobuf:"varint,32,opt,name=neighbor_default_originate,json=neighborDefaultOriginate,proto3" json:"neighbor_default_originate,omitempty"`
	IsOrfSent                                     bool           `protobuf:"varint,33,opt,name=is_orf_sent,json=isOrfSent,proto3" json:"is_orf_sent,omitempty"`
	IsUpdateDeferred                              bool           `protobuf:"varint,34,opt,name=is_update_deferred,json=isUpdateDeferred,proto3" json:"is_update_deferred,omitempty"`
	IsOrfSendScheduled                            bool           `protobuf:"varint,35,opt,name=is_orf_send_scheduled,json=isOrfSendScheduled,proto3" json:"is_orf_send_scheduled,omitempty"`
	UpdateGroupNumber                             uint32         `protobuf:"varint,36,opt,name=update_group_number,json=updateGroupNumber,proto3" json:"update_group_number,omitempty"`
	FilterGroupIndex                              uint32         `protobuf:"varint,37,opt,name=filter_group_index,json=filterGroupIndex,proto3" json:"filter_group_index,omitempty"`
	IsUpdateThrottled                             bool           `protobuf:"varint,38,opt,name=is_update_throttled,json=isUpdateThrottled,proto3" json:"is_update_throttled,omitempty"`
	IsUpdateLeaving                               bool           `protobuf:"varint,39,opt,name=is_update_leaving,json=isUpdateLeaving,proto3" json:"is_update_leaving,omitempty"`
	VpnUpdateGenEnabled                           bool           `protobuf:"varint,40,opt,name=vpn_update_gen_enabled,json=vpnUpdateGenEnabled,proto3" json:"vpn_update_gen_enabled,omitempty"`
	VpnUpdateGenTriggerEnabled                    bool           `protobuf:"varint,41,opt,name=vpn_update_gen_trigger_enabled,json=vpnUpdateGenTriggerEnabled,proto3" json:"vpn_update_gen_trigger_enabled,omitempty"`
	IsAddpathSendOperational                      bool           `protobuf:"varint,42,opt,name=is_addpath_send_operational,json=isAddpathSendOperational,proto3" json:"is_addpath_send_operational,omitempty"`
	IsAddpathReceiveOperational                   bool           `protobuf:"varint,43,opt,name=is_addpath_receive_operational,json=isAddpathReceiveOperational,proto3" json:"is_addpath_receive_operational,omitempty"`
	NeighborVersion                               uint32         `protobuf:"varint,44,opt,name=neighbor_version,json=neighborVersion,proto3" json:"neighbor_version,omitempty"`
	Weight                                        uint32         `protobuf:"varint,45,opt,name=weight,proto3" json:"weight,omitempty"`
	MaxPrefixLimit                                uint32         `protobuf:"varint,46,opt,name=max_prefix_limit,json=maxPrefixLimit,proto3" json:"max_prefix_limit,omitempty"`
	UseMaxPrefixWarningOnly                       bool           `protobuf:"varint,47,opt,name=use_max_prefix_warning_only,json=useMaxPrefixWarningOnly,proto3" json:"use_max_prefix_warning_only,omitempty"`
	MaxPrefixDiscardExtraPaths                    bool           `protobuf:"varint,48,opt,name=max_prefix_discard_extra_paths,json=maxPrefixDiscardExtraPaths,proto3" json:"max_prefix_discard_extra_paths,omitempty"`
	MaxPrefixExceedDiscardPaths                   bool           `protobuf:"varint,49,opt,name=max_prefix_exceed_discard_paths,json=maxPrefixExceedDiscardPaths,proto3" json:"max_prefix_exceed_discard_paths,omitempty"`
	MaxPrefixThresholdPercent                     uint32         `protobuf:"varint,50,opt,name=max_prefix_threshold_percent,json=maxPrefixThresholdPercent,proto3" json:"max_prefix_threshold_percent,omitempty"`
	MaxPrefixRestartTime                          uint32         `protobuf:"varint,51,opt,name=max_prefix_restart_time,json=maxPrefixRestartTime,proto3" json:"max_prefix_restart_time,omitempty"`
	PrefixesAccepted                              uint32         `protobuf:"varint,52,opt,name=prefixes_accepted,json=prefixesAccepted,proto3" json:"prefixes_accepted,omitempty"`
	PrefixesSynced                                uint32         `protobuf:"varint,53,opt,name=prefixes_synced,json=prefixesSynced,proto3" json:"prefixes_synced,omitempty"`
	PrefixesWithdrawnNotFound                     uint32         `protobuf:"varint,54,opt,name=prefixes_withdrawn_not_found,json=prefixesWithdrawnNotFound,proto3" json:"prefixes_withdrawn_not_found,omitempty"`
	PrefixesDenied                                uint32         `protobuf:"varint,55,opt,name=prefixes_denied,json=prefixesDenied,proto3" json:"prefixes_denied,omitempty"`
	PrefixesDeniedNoPolicy                        uint32         `protobuf:"varint,56,opt,name=prefixes_denied_no_policy,json=prefixesDeniedNoPolicy,proto3" json:"prefixes_denied_no_policy,omitempty"`
	PrefixesDeniedRtPermit                        uint32         `protobuf:"varint,57,opt,name=prefixes_denied_rt_permit,json=prefixesDeniedRtPermit,proto3" json:"prefixes_denied_rt_permit,omitempty"`
	PrefixesDeniedOrfPolicy                       uint32         `protobuf:"varint,58,opt,name=prefixes_denied_orf_policy,json=prefixesDeniedOrfPolicy,proto3" json:"prefixes_denied_orf_policy,omitempty"`
	PrefixesDeniedPolicy                          uint32         `protobuf:"varint,59,opt,name=prefixes_denied_policy,json=prefixesDeniedPolicy,proto3" json:"prefixes_denied_policy,omitempty"`
	NumberOfBestpaths                             uint32         `protobuf:"varint,60,opt,name=number_of_bestpaths,json=numberOfBestpaths,proto3" json:"number_of_bestpaths,omitempty"`
	NumberOfBestExternalpaths                     uint32         `protobuf:"varint,61,opt,name=number_of_best_externalpaths,json=numberOfBestExternalpaths,proto3" json:"number_of_best_externalpaths,omitempty"`
	PrefixesAdvertised                            uint32         `protobuf:"varint,62,opt,name=prefixes_advertised,json=prefixesAdvertised,proto3" json:"prefixes_advertised,omitempty"`
	PrefixesBeAdvertised                          uint32         `protobuf:"varint,63,opt,name=prefixes_be_advertised,json=prefixesBeAdvertised,proto3" json:"prefixes_be_advertised,omitempty"`
	PrefixesSuppressed                            uint32         `protobuf:"varint,64,opt,name=prefixes_suppressed,json=prefixesSuppressed,proto3" json:"prefixes_suppressed,omitempty"`
	PrefixesWithdrawn                             uint32         `protobuf:"varint,65,opt,name=prefixes_withdrawn,json=prefixesWithdrawn,proto3" json:"prefixes_withdrawn,omitempty"`
	IsPeerOrfCapable                              bool           `protobuf:"varint,66,opt,name=is_peer_orf_capable,json=isPeerOrfCapable,proto3" json:"is_peer_orf_capable,omitempty"`
	IsAdvertisedOrfSend                           bool           `protobuf:"varint,67,opt,name=is_advertised_orf_send,json=isAdvertisedOrfSend,proto3" json:"is_advertised_orf_send,omitempty"`
	IsReceivedOrfSendCapable                      bool           `protobuf:"varint,68,opt,name=is_received_orf_send_capable,json=isReceivedOrfSendCapable,proto3" json:"is_received_orf_send_capable,omitempty"`
	IsAdvertisedOrfReceive                        bool           `protobuf:"varint,69,opt,name=is_advertised_orf_receive,json=isAdvertisedOrfReceive,proto3" json:"is_advertised_orf_receive,omitempty"`
	IsReceivedOrfReceiveCapable                   bool           `protobuf:"varint,70,opt,name=is_received_orf_receive_capable,json=isReceivedOrfReceiveCapable,proto3" json:"is_received_orf_receive_capable,omitempty"`
	IsAdvertisedGracefulRestart                   bool           `protobuf:"varint,71,opt,name=is_advertised_graceful_restart,json=isAdvertisedGracefulRestart,proto3" json:"is_advertised_graceful_restart,omitempty"`
	IsGracefulRestartStateFlag                    bool           `protobuf:"varint,72,opt,name=is_graceful_restart_state_flag,json=isGracefulRestartStateFlag,proto3" json:"is_graceful_restart_state_flag,omitempty"`
	IsReceivedGracefulRestartCapable              bool           `protobuf:"varint,73,opt,name=is_received_graceful_restart_capable,json=isReceivedGracefulRestartCapable,proto3" json:"is_received_graceful_restart_capable,omitempty"`
	IsAddPathSendCapabilityAdvertised             bool           `protobuf:"varint,74,opt,name=is_add_path_send_capability_advertised,json=isAddPathSendCapabilityAdvertised,proto3" json:"is_add_path_send_capability_advertised,omitempty"`
	IsAddPathSendCapabilityReceived               bool           `protobuf:"varint,75,opt,name=is_add_path_send_capability_received,json=isAddPathSendCapabilityReceived,proto3" json:"is_add_path_send_capability_received,omitempty"`
	IsAddPathReceiveCapabilityAdvertised          bool           `protobuf:"varint,76,opt,name=is_add_path_receive_capability_advertised,json=isAddPathReceiveCapabilityAdvertised,proto3" json:"is_add_path_receive_capability_advertised,omitempty"`
	IsAddPathReceiveCapabilityReceived            bool           `protobuf:"varint,77,opt,name=is_add_path_receive_capability_received,json=isAddPathReceiveCapabilityReceived,proto3" json:"is_add_path_receive_capability_received,omitempty"`
	IsExtNhEncodingCapabilityReceived             bool           `protobuf:"varint,78,opt,name=is_ext_nh_encoding_capability_received,json=isExtNhEncodingCapabilityReceived,proto3" json:"is_ext_nh_encoding_capability_received,omitempty"`
	IsExtNhEncodingCapabilitySent                 bool           `protobuf:"varint,79,opt,name=is_ext_nh_encoding_capability_sent,json=isExtNhEncodingCapabilitySent,proto3" json:"is_ext_nh_encoding_capability_sent,omitempty"`
	RestartTime                                   uint32         `protobuf:"varint,80,opt,name=restart_time,json=restartTime,proto3" json:"restart_time,omitempty"`
	LocalRestartTime                              uint32         `protobuf:"varint,81,opt,name=local_restart_time,json=localRestartTime,proto3" json:"local_restart_time,omitempty"`
	StalePathTimeout                              uint32         `protobuf:"varint,82,opt,name=stale_path_timeout,json=stalePathTimeout,proto3" json:"stale_path_timeout,omitempty"`
	RibPurgeTimeoutValue                          uint32         `protobuf:"varint,83,opt,name=rib_purge_timeout_value,json=ribPurgeTimeoutValue,proto3" json:"rib_purge_timeout_value,omitempty"`
	NeighborPreservedForwardingState              bool           `protobuf:"varint,84,opt,name=neighbor_preserved_forwarding_state,json=neighborPreservedForwardingState,proto3" json:"neighbor_preserved_forwarding_state,omitempty"`
	LongLivedGracefulRestartStaleTimeConfigured   bool           `protobuf:"varint,85,opt,name=long_lived_graceful_restart_stale_time_configured,json=longLivedGracefulRestartStaleTimeConfigured,proto3" json:"long_lived_graceful_restart_stale_time_configured,omitempty"`
	LongLivedGracefulRestartStaleTimeSent         uint32         `protobuf:"varint,86,opt,name=long_lived_graceful_restart_stale_time_sent,json=longLivedGracefulRestartStaleTimeSent,proto3" json:"long_lived_graceful_restart_stale_time_sent,omitempty"`
	LongLivedGracefulRestartStaleTimeAccept       uint32         `protobuf:"varint,87,opt,name=long_lived_graceful_restart_stale_time_accept,json=longLivedGracefulRestartStaleTimeAccept,proto3" json:"long_lived_graceful_restart_stale_time_accept,omitempty"`
	LongLivedGracefulRestartCapabilityReceived    bool           `protobuf:"varint,88,opt,name=long_lived_graceful_restart_capability_received,json=longLivedGracefulRestartCapabilityReceived,proto3" json:"long_lived_graceful_restart_capability_received,omitempty"`
	LongLivedGracefulRestartStaleTimeReceived     uint32         `protobuf:"varint,89,opt,name=long_lived_graceful_restart_stale_time_received,json=longLivedGracefulRestartStaleTimeReceived,proto3" json:"long_lived_graceful_restart_stale_time_received,omitempty"`
	NeighborPreservedLongLivedForwardingState     bool           `protobuf:"varint,90,opt,name=neighbor_preserved_long_lived_forwarding_state,json=neighborPreservedLongLivedForwardingState,proto3" json:"neighbor_preserved_long_lived_forwarding_state,omitempty"`
	NeighborLongLivedGracefulRestartCapable       bool           `protobuf:"varint,91,opt,name=neighbor_long_lived_graceful_restart_capable,json=neighborLongLivedGracefulRestartCapable,proto3" json:"neighbor_long_lived_graceful_restart_capable,omitempty"`
	NeighborLongLivedGracefulRestartTimeRemaining uint32         `protobuf:"varint,92,opt,name=neighbor_long_lived_graceful_restart_time_remaining,json=neighborLongLivedGracefulRestartTimeRemaining,proto3" json:"neighbor_long_lived_graceful_restart_time_remaining,omitempty"`
	RouteRefreshesReceived                        uint32         `protobuf:"varint,93,opt,name=route_refreshes_received,json=routeRefreshesReceived,proto3" json:"route_refreshes_received,omitempty"`
	RouteRefreshesSent                            uint32         `protobuf:"varint,94,opt,name=route_refreshes_sent,json=routeRefreshesSent,proto3" json:"route_refreshes_sent,omitempty"`
	RefreshTargetVersion                          uint32         `protobuf:"varint,95,opt,name=refresh_target_version,json=refreshTargetVersion,proto3" json:"refresh_target_version,omitempty"`
	RefreshVersion                                uint32         `protobuf:"varint,96,opt,name=refresh_version,json=refreshVersion,proto3" json:"refresh_version,omitempty"`
	RefreshAckedVersion                           uint32         `protobuf:"varint,97,opt,name=refresh_acked_version,json=refreshAckedVersion,proto3" json:"refresh_acked_version,omitempty"`
	IsPrefixOrfPresent                            bool           `protobuf:"varint,98,opt,name=is_prefix_orf_present,json=isPrefixOrfPresent,proto3" json:"is_prefix_orf_present,omitempty"`
	OrfEntriesReceived                            uint32         `protobuf:"varint,99,opt,name=orf_entries_received,json=orfEntriesReceived,proto3" json:"orf_entries_received,omitempty"`
	IsDefaultOriginateSent                        bool           `protobuf:"varint,100,opt,name=is_default_originate_sent,json=isDefaultOriginateSent,proto3" json:"is_default_originate_sent,omitempty"`
	RoutePolicyPrefixOrf                          string         `protobuf:"bytes,101,opt,name=route_policy_prefix_orf,json=routePolicyPrefixOrf,proto3" json:"route_policy_prefix_orf,omitempty"`
	RoutePolicyIn                                 string         `protobuf:"bytes,102,opt,name=route_policy_in,json=routePolicyIn,proto3" json:"route_policy_in,omitempty"`
	RoutePolicyOut                                string         `protobuf:"bytes,103,opt,name=route_policy_out,json=routePolicyOut,proto3" json:"route_policy_out,omitempty"`
	RoutePolicyDefaultOriginate                   string         `protobuf:"bytes,104,opt,name=route_policy_default_originate,json=routePolicyDefaultOriginate,proto3" json:"route_policy_default_originate,omitempty"`
	IsNeighborEbgpWithoutInboundPolicy            bool           `protobuf:"varint,105,opt,name=is_neighbor_ebgp_without_inbound_policy,json=isNeighborEbgpWithoutInboundPolicy,proto3" json:"is_neighbor_ebgp_without_inbound_policy,omitempty"`
	IsNeighborEbgpWithoutOutboundPolicy           bool           `protobuf:"varint,106,opt,name=is_neighbor_ebgp_without_outbound_policy,json=isNeighborEbgpWithoutOutboundPolicy,proto3" json:"is_neighbor_ebgp_without_outbound_policy,omitempty"`
	IsAsOverrideSet                               bool           `protobuf:"varint,107,opt,name=is_as_override_set,json=isAsOverrideSet,proto3" json:"is_as_override_set,omitempty"`
	IsAllowAsInSet                                bool           `protobuf:"varint,108,opt,name=is_allow_as_in_set,json=isAllowAsInSet,proto3" json:"is_allow_as_in_set,omitempty"`
	AllowAsInCount                                uint32         `protobuf:"varint,109,opt,name=allow_as_in_count,json=allowAsInCount,proto3" json:"allow_as_in_count,omitempty"`
	AddressFamilyLongLivedTime                    uint32         `protobuf:"varint,110,opt,name=address_family_long_lived_time,json=addressFamilyLongLivedTime,proto3" json:"address_family_long_lived_time,omitempty"`
	EoRReceivedInReadOnly                         bool           `protobuf:"varint,111,opt,name=eo_r_received_in_read_only,json=eoRReceivedInReadOnly,proto3" json:"eo_r_received_in_read_only,omitempty"`
	AckedVersion                                  uint32         `protobuf:"varint,112,opt,name=acked_version,json=ackedVersion,proto3" json:"acked_version,omitempty"`
	SyncedAckedVersion                            uint32         `protobuf:"varint,113,opt,name=synced_acked_version,json=syncedAckedVersion,proto3" json:"synced_acked_version,omitempty"`
	OutstandingVersion                            uint32         `protobuf:"varint,114,opt,name=outstanding_version,json=outstandingVersion,proto3" json:"outstanding_version,omitempty"`
	OutstandingRefreshVersion                     uint32         `protobuf:"varint,115,opt,name=outstanding_refresh_version,json=outstandingRefreshVersion,proto3" json:"outstanding_refresh_version,omitempty"`
	OutstandingVersionMax                         uint32         `protobuf:"varint,116,opt,name=outstanding_version_max,json=outstandingVersionMax,proto3" json:"outstanding_version_max,omitempty"`
	NeighborAfPerformanceStatistics               *BgpPerfNbrAf_ `protobuf:"bytes,117,opt,name=neighbor_af_performance_statistics,json=neighborAfPerformanceStatistics,proto3" json:"neighbor_af_performance_statistics,omitempty"`
	IsAigpSet                                     bool           `protobuf:"varint,118,opt,name=is_aigp_set,json=isAigpSet,proto3" json:"is_aigp_set,omitempty"`
	IsRtPresent                                   bool           `protobuf:"varint,119,opt,name=is_rt_present,json=isRtPresent,proto3" json:"is_rt_present,omitempty"`
	ExtendedCommunity                             []uint32       `protobuf:"varint,120,rep,packed,name=extended_community,json=extendedCommunity,proto3" json:"extended_community,omitempty"`
	IsRtPresentStandby                            bool           `protobuf:"varint,121,opt,name=is_rt_present_standby,json=isRtPresentStandby,proto3" json:"is_rt_present_standby,omitempty"`
	ExtendedCommunityStandby                      []uint32       `protobuf:"varint,122,rep,packed,name=extended_community_standby,json=extendedCommunityStandby,proto3" json:"extended_community_standby,omitempty"`
	AcceptOwnEnabled                              bool           `protobuf:"varint,123,opt,name=accept_own_enabled,json=acceptOwnEnabled,proto3" json:"accept_own_enabled,omitempty"`
	SelectiveMultipathEligible                    bool           `protobuf:"varint,124,opt,name=selective_multipath_eligible,json=selectiveMultipathEligible,proto3" json:"selective_multipath_eligible,omitempty"`
	AfrpkiDisable                                 bool           `protobuf:"varint,125,opt,name=afrpki_disable,json=afrpkiDisable,proto3" json:"afrpki_disable,omitempty"`
	AfrpkiUseValidity                             bool           `protobuf:"varint,126,opt,name=afrpki_use_validity,json=afrpkiUseValidity,proto3" json:"afrpki_use_validity,omitempty"`
	AfrpkiAllowInvalid                            bool           `protobuf:"varint,127,opt,name=afrpki_allow_invalid,json=afrpkiAllowInvalid,proto3" json:"afrpki_allow_invalid,omitempty"`
	AfrpkiSignalIbgp                              bool           `protobuf:"varint,128,opt,name=afrpki_signal_ibgp,json=afrpkiSignalIbgp,proto3" json:"afrpki_signal_ibgp,omitempty"`
	IsAdvertisePermanentNetwork                   bool           `protobuf:"varint,129,opt,name=is_advertise_permanent_network,json=isAdvertisePermanentNetwork,proto3" json:"is_advertise_permanent_network,omitempty"`
	IsSendMcastAttr                               bool           `protobuf:"varint,130,opt,name=is_send_mcast_attr,json=isSendMcastAttr,proto3" json:"is_send_mcast_attr,omitempty"`
	ImportStitching                               bool           `protobuf:"varint,131,opt,name=import_stitching,json=importStitching,proto3" json:"import_stitching,omitempty"`
	ImportReoriginate                             bool           `protobuf:"varint,132,opt,name=import_reoriginate,json=importReoriginate,proto3" json:"import_reoriginate,omitempty"`
	ImportReoriginateStitching                    bool           `protobuf:"varint,133,opt,name=import_reoriginate_stitching,json=importReoriginateStitching,proto3" json:"import_reoriginate_stitching,omitempty"`
	AdvertiseV4Flags                              uint32         `protobuf:"varint,134,opt,name=advertise_v4_flags,json=advertiseV4Flags,proto3" json:"advertise_v4_flags,omitempty"`
	AdvertiseV6Flags                              uint32         `protobuf:"varint,135,opt,name=advertise_v6_flags,json=advertiseV6Flags,proto3" json:"advertise_v6_flags,omitempty"`
	AdvertiseLocalLabeledRouteUnicast             bool           `protobuf:"varint,136,opt,name=advertise_local_labeled_route_unicast,json=advertiseLocalLabeledRouteUnicast,proto3" json:"advertise_local_labeled_route_unicast,omitempty"`
	PrefixesDeniedNonCumulative                   uint32         `protobuf:"varint,137,opt,name=prefixes_denied_non_cumulative,json=prefixesDeniedNonCumulative,proto3" json:"prefixes_denied_non_cumulative,omitempty"`
	EnableLabelStack                              bool           `protobuf:"varint,138,opt,name=enable_label_stack,json=enableLabelStack,proto3" json:"enable_label_stack,omitempty"`
	XXX_NoUnkeyedLiteral                          struct{}       `json:"-"`
	XXX_unrecognized                              []byte         `json:"-"`
	XXX_sizecache                                 int32          `json:"-"`
}

func (m *BgpNbrAf_) Reset()         { *m = BgpNbrAf_{} }
func (m *BgpNbrAf_) String() string { return proto.CompactTextString(m) }
func (*BgpNbrAf_) ProtoMessage()    {}
func (*BgpNbrAf_) Descriptor() ([]byte, []int) {
	return fileDescriptor_be84ba08d516c4d3, []int{9}
}

func (m *BgpNbrAf_) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BgpNbrAf_.Unmarshal(m, b)
}
func (m *BgpNbrAf_) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BgpNbrAf_.Marshal(b, m, deterministic)
}
func (m *BgpNbrAf_) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpNbrAf_.Merge(m, src)
}
func (m *BgpNbrAf_) XXX_Size() int {
	return xxx_messageInfo_BgpNbrAf_.Size(m)
}
func (m *BgpNbrAf_) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpNbrAf_.DiscardUnknown(m)
}

var xxx_messageInfo_BgpNbrAf_ proto.InternalMessageInfo

func (m *BgpNbrAf_) GetAfName() string {
	if m != nil {
		return m.AfName
	}
	return ""
}

func (m *BgpNbrAf_) GetIsNeighborRouteReflectorClient() bool {
	if m != nil {
		return m.IsNeighborRouteReflectorClient
	}
	return false
}

func (m *BgpNbrAf_) GetIsLegacyPeRt() bool {
	if m != nil {
		return m.IsLegacyPeRt
	}
	return false
}

func (m *BgpNbrAf_) GetIsNeighborAfCapable() bool {
	if m != nil {
		return m.IsNeighborAfCapable
	}
	return false
}

func (m *BgpNbrAf_) GetIsSoftReconfigurationInboundAllowed() bool {
	if m != nil {
		return m.IsSoftReconfigurationInboundAllowed
	}
	return false
}

func (m *BgpNbrAf_) GetIsUseSoftReconfigurationAlwaysOn() bool {
	if m != nil {
		return m.IsUseSoftReconfigurationAlwaysOn
	}
	return false
}

func (m *BgpNbrAf_) GetRemovePrivateAsFromUpdates() bool {
	if m != nil {
		return m.RemovePrivateAsFromUpdates
	}
	return false
}

func (m *BgpNbrAf_) GetRemovePrivateAsEntireAspathFromUpdates() bool {
	if m != nil {
		return m.RemovePrivateAsEntireAspathFromUpdates
	}
	return false
}

func (m *BgpNbrAf_) GetRemovePrivateAsFromInboundUpdates() bool {
	if m != nil {
		return m.RemovePrivateAsFromInboundUpdates
	}
	return false
}

func (m *BgpNbrAf_) GetRemovePrivateAsEntireAspathFromInboundUpdates() bool {
	if m != nil {
		return m.RemovePrivateAsEntireAspathFromInboundUpdates
	}
	return false
}

func (m *BgpNbrAf_) GetFlowspecValidationDIsable() bool {
	if m != nil {
		return m.FlowspecValidationDIsable
	}
	return false
}

func (m *BgpNbrAf_) GetFlowspecRedirectValidationDIsable() bool {
	if m != nil {
		return m.FlowspecRedirectValidationDIsable
	}
	return false
}

func (m *BgpNbrAf_) GetOrrGroupName() string {
	if m != nil {
		return m.OrrGroupName
	}
	return ""
}

func (m *BgpNbrAf_) GetOrrGroupIndex() uint32 {
	if m != nil {
		return m.OrrGroupIndex
	}
	return 0
}

func (m *BgpNbrAf_) GetIsOrrRootAddressConfigured() bool {
	if m != nil {
		return m.IsOrrRootAddressConfigured
	}
	return false
}

func (m *BgpNbrAf_) GetAdvertiseAfi() bool {
	if m != nil {
		return m.AdvertiseAfi
	}
	return false
}

func (m *BgpNbrAf_) GetAdvertiseAfiReorg() bool {
	if m != nil {
		return m.AdvertiseAfiReorg
	}
	return false
}

func (m *BgpNbrAf_) GetAdvertiseAfiDisable() bool {
	if m != nil {
		return m.AdvertiseAfiDisable
	}
	return false
}

func (m *BgpNbrAf_) GetEncapsulationType() uint32 {
	if m != nil {
		return m.EncapsulationType
	}
	return 0
}

func (m *BgpNbrAf_) GetAdvertiseRtType() uint32 {
	if m != nil {
		return m.AdvertiseRtType
	}
	return 0
}

func (m *BgpNbrAf_) GetAdvertiseAfiDefVrfImpDisable() bool {
	if m != nil {
		return m.AdvertiseAfiDefVrfImpDisable
	}
	return false
}

func (m *BgpNbrAf_) GetAdvertiseEvpnv4AfiDefVrfImpDisable() bool {
	if m != nil {
		return m.AdvertiseEvpnv4AfiDefVrfImpDisable
	}
	return false
}

func (m *BgpNbrAf_) GetAdvertiseEvpnv6AfiDefVrfImpDisable() bool {
	if m != nil {
		return m.AdvertiseEvpnv6AfiDefVrfImpDisable
	}
	return false
}

func (m *BgpNbrAf_) GetAdvertiseAfiVrfReImpDisable() bool {
	if m != nil {
		return m.AdvertiseAfiVrfReImpDisable
	}
	return false
}

func (m *BgpNbrAf_) GetAdvertiseEvpnv4AfiVrfReImpDisable() bool {
	if m != nil {
		return m.AdvertiseEvpnv4AfiVrfReImpDisable
	}
	return false
}

func (m *BgpNbrAf_) GetAdvertiseEvpnv6AfiVrfReImpDisable() bool {
	if m != nil {
		return m.AdvertiseEvpnv6AfiVrfReImpDisable
	}
	return false
}

func (m *BgpNbrAf_) GetAdvertiseAfiEoRReady() bool {
	if m != nil {
		return m.AdvertiseAfiEoRReady
	}
	return false
}

func (m *BgpNbrAf_) GetAlwaysUseNextHopLocal() bool {
	if m != nil {
		return m.AlwaysUseNextHopLocal
	}
	return false
}

func (m *BgpNbrAf_) GetSentCommunityToNeighbor() bool {
	if m != nil {
		return m.SentCommunityToNeighbor
	}
	return false
}

func (m *BgpNbrAf_) GetSentGshutCommunityToNeighbor() bool {
	if m != nil {
		return m.SentGshutCommunityToNeighbor
	}
	return false
}

func (m *BgpNbrAf_) GetSentExtendedCommunityToNeighbor() bool {
	if m != nil {
		return m.SentExtendedCommunityToNeighbor
	}
	return false
}

func (m *BgpNbrAf_) GetNeighborDefaultOriginate() bool {
	if m != nil {
		return m.NeighborDefaultOriginate
	}
	return false
}

func (m *BgpNbrAf_) GetIsOrfSent() bool {
	if m != nil {
		return m.IsOrfSent
	}
	return false
}

func (m *BgpNbrAf_) GetIsUpdateDeferred() bool {
	if m != nil {
		return m.IsUpdateDeferred
	}
	return false
}

func (m *BgpNbrAf_) GetIsOrfSendScheduled() bool {
	if m != nil {
		return m.IsOrfSendScheduled
	}
	return false
}

func (m *BgpNbrAf_) GetUpdateGroupNumber() uint32 {
	if m != nil {
		return m.UpdateGroupNumber
	}
	return 0
}

func (m *BgpNbrAf_) GetFilterGroupIndex() uint32 {
	if m != nil {
		return m.FilterGroupIndex
	}
	return 0
}

func (m *BgpNbrAf_) GetIsUpdateThrottled() bool {
	if m != nil {
		return m.IsUpdateThrottled
	}
	return false
}

func (m *BgpNbrAf_) GetIsUpdateLeaving() bool {
	if m != nil {
		return m.IsUpdateLeaving
	}
	return false
}

func (m *BgpNbrAf_) GetVpnUpdateGenEnabled() bool {
	if m != nil {
		return m.VpnUpdateGenEnabled
	}
	return false
}

func (m *BgpNbrAf_) GetVpnUpdateGenTriggerEnabled() bool {
	if m != nil {
		return m.VpnUpdateGenTriggerEnabled
	}
	return false
}

func (m *BgpNbrAf_) GetIsAddpathSendOperational() bool {
	if m != nil {
		return m.IsAddpathSendOperational
	}
	return false
}

func (m *BgpNbrAf_) GetIsAddpathReceiveOperational() bool {
	if m != nil {
		return m.IsAddpathReceiveOperational
	}
	return false
}

func (m *BgpNbrAf_) GetNeighborVersion() uint32 {
	if m != nil {
		return m.NeighborVersion
	}
	return 0
}

func (m *BgpNbrAf_) GetWeight() uint32 {
	if m != nil {
		return m.Weight
	}
	return 0
}

func (m *BgpNbrAf_) GetMaxPrefixLimit() uint32 {
	if m != nil {
		return m.MaxPrefixLimit
	}
	return 0
}

func (m *BgpNbrAf_) GetUseMaxPrefixWarningOnly() bool {
	if m != nil {
		return m.UseMaxPrefixWarningOnly
	}
	return false
}

func (m *BgpNbrAf_) GetMaxPrefixDiscardExtraPaths() bool {
	if m != nil {
		return m.MaxPrefixDiscardExtraPaths
	}
	return false
}

func (m *BgpNbrAf_) GetMaxPrefixExceedDiscardPaths() bool {
	if m != nil {
		return m.MaxPrefixExceedDiscardPaths
	}
	return false
}

func (m *BgpNbrAf_) GetMaxPrefixThresholdPercent() uint32 {
	if m != nil {
		return m.MaxPrefixThresholdPercent
	}
	return 0
}

func (m *BgpNbrAf_) GetMaxPrefixRestartTime() uint32 {
	if m != nil {
		return m.MaxPrefixRestartTime
	}
	return 0
}

func (m *BgpNbrAf_) GetPrefixesAccepted() uint32 {
	if m != nil {
		return m.PrefixesAccepted
	}
	return 0
}

func (m *BgpNbrAf_) GetPrefixesSynced() uint32 {
	if m != nil {
		return m.PrefixesSynced
	}
	return 0
}

func (m *BgpNbrAf_) GetPrefixesWithdrawnNotFound() uint32 {
	if m != nil {
		return m.PrefixesWithdrawnNotFound
	}
	return 0
}

func (m *BgpNbrAf_) GetPrefixesDenied() uint32 {
	if m != nil {
		return m.PrefixesDenied
	}
	return 0
}

func (m *BgpNbrAf_) GetPrefixesDeniedNoPolicy() uint32 {
	if m != nil {
		return m.PrefixesDeniedNoPolicy
	}
	return 0
}

func (m *BgpNbrAf_) GetPrefixesDeniedRtPermit() uint32 {
	if m != nil {
		return m.PrefixesDeniedRtPermit
	}
	return 0
}

func (m *BgpNbrAf_) GetPrefixesDeniedOrfPolicy() uint32 {
	if m != nil {
		return m.PrefixesDeniedOrfPolicy
	}
	return 0
}

func (m *BgpNbrAf_) GetPrefixesDeniedPolicy() uint32 {
	if m != nil {
		return m.PrefixesDeniedPolicy
	}
	return 0
}

func (m *BgpNbrAf_) GetNumberOfBestpaths() uint32 {
	if m != nil {
		return m.NumberOfBestpaths
	}
	return 0
}

func (m *BgpNbrAf_) GetNumberOfBestExternalpaths() uint32 {
	if m != nil {
		return m.NumberOfBestExternalpaths
	}
	return 0
}

func (m *BgpNbrAf_) GetPrefixesAdvertised() uint32 {
	if m != nil {
		return m.PrefixesAdvertised
	}
	return 0
}

func (m *BgpNbrAf_) GetPrefixesBeAdvertised() uint32 {
	if m != nil {
		return m.PrefixesBeAdvertised
	}
	return 0
}

func (m *BgpNbrAf_) GetPrefixesSuppressed() uint32 {
	if m != nil {
		return m.PrefixesSuppressed
	}
	return 0
}

func (m *BgpNbrAf_) GetPrefixesWithdrawn() uint32 {
	if m != nil {
		return m.PrefixesWithdrawn
	}
	return 0
}

func (m *BgpNbrAf_) GetIsPeerOrfCapable() bool {
	if m != nil {
		return m.IsPeerOrfCapable
	}
	return false
}

func (m *BgpNbrAf_) GetIsAdvertisedOrfSend() bool {
	if m != nil {
		return m.IsAdvertisedOrfSend
	}
	return false
}

func (m *BgpNbrAf_) GetIsReceivedOrfSendCapable() bool {
	if m != nil {
		return m.IsReceivedOrfSendCapable
	}
	return false
}

func (m *BgpNbrAf_) GetIsAdvertisedOrfReceive() bool {
	if m != nil {
		return m.IsAdvertisedOrfReceive
	}
	return false
}

func (m *BgpNbrAf_) GetIsReceivedOrfReceiveCapable() bool {
	if m != nil {
		return m.IsReceivedOrfReceiveCapable
	}
	return false
}

func (m *BgpNbrAf_) GetIsAdvertisedGracefulRestart() bool {
	if m != nil {
		return m.IsAdvertisedGracefulRestart
	}
	return false
}

func (m *BgpNbrAf_) GetIsGracefulRestartStateFlag() bool {
	if m != nil {
		return m.IsGracefulRestartStateFlag
	}
	return false
}

func (m *BgpNbrAf_) GetIsReceivedGracefulRestartCapable() bool {
	if m != nil {
		return m.IsReceivedGracefulRestartCapable
	}
	return false
}

func (m *BgpNbrAf_) GetIsAddPathSendCapabilityAdvertised() bool {
	if m != nil {
		return m.IsAddPathSendCapabilityAdvertised
	}
	return false
}

func (m *BgpNbrAf_) GetIsAddPathSendCapabilityReceived() bool {
	if m != nil {
		return m.IsAddPathSendCapabilityReceived
	}
	return false
}

func (m *BgpNbrAf_) GetIsAddPathReceiveCapabilityAdvertised() bool {
	if m != nil {
		return m.IsAddPathReceiveCapabilityAdvertised
	}
	return false
}

func (m *BgpNbrAf_) GetIsAddPathReceiveCapabilityReceived() bool {
	if m != nil {
		return m.IsAddPathReceiveCapabilityReceived
	}
	return false
}

func (m *BgpNbrAf_) GetIsExtNhEncodingCapabilityReceived() bool {
	if m != nil {
		return m.IsExtNhEncodingCapabilityReceived
	}
	return false
}

func (m *BgpNbrAf_) GetIsExtNhEncodingCapabilitySent() bool {
	if m != nil {
		return m.IsExtNhEncodingCapabilitySent
	}
	return false
}

func (m *BgpNbrAf_) GetRestartTime() uint32 {
	if m != nil {
		return m.RestartTime
	}
	return 0
}

func (m *BgpNbrAf_) GetLocalRestartTime() uint32 {
	if m != nil {
		return m.LocalRestartTime
	}
	return 0
}

func (m *BgpNbrAf_) GetStalePathTimeout() uint32 {
	if m != nil {
		return m.StalePathTimeout
	}
	return 0
}

func (m *BgpNbrAf_) GetRibPurgeTimeoutValue() uint32 {
	if m != nil {
		return m.RibPurgeTimeoutValue
	}
	return 0
}

func (m *BgpNbrAf_) GetNeighborPreservedForwardingState() bool {
	if m != nil {
		return m.NeighborPreservedForwardingState
	}
	return false
}

func (m *BgpNbrAf_) GetLongLivedGracefulRestartStaleTimeConfigured() bool {
	if m != nil {
		return m.LongLivedGracefulRestartStaleTimeConfigured
	}
	return false
}

func (m *BgpNbrAf_) GetLongLivedGracefulRestartStaleTimeSent() uint32 {
	if m != nil {
		return m.LongLivedGracefulRestartStaleTimeSent
	}
	return 0
}

func (m *BgpNbrAf_) GetLongLivedGracefulRestartStaleTimeAccept() uint32 {
	if m != nil {
		return m.LongLivedGracefulRestartStaleTimeAccept
	}
	return 0
}

func (m *BgpNbrAf_) GetLongLivedGracefulRestartCapabilityReceived() bool {
	if m != nil {
		return m.LongLivedGracefulRestartCapabilityReceived
	}
	return false
}

func (m *BgpNbrAf_) GetLongLivedGracefulRestartStaleTimeReceived() uint32 {
	if m != nil {
		return m.LongLivedGracefulRestartStaleTimeReceived
	}
	return 0
}

func (m *BgpNbrAf_) GetNeighborPreservedLongLivedForwardingState() bool {
	if m != nil {
		return m.NeighborPreservedLongLivedForwardingState
	}
	return false
}

func (m *BgpNbrAf_) GetNeighborLongLivedGracefulRestartCapable() bool {
	if m != nil {
		return m.NeighborLongLivedGracefulRestartCapable
	}
	return false
}

func (m *BgpNbrAf_) GetNeighborLongLivedGracefulRestartTimeRemaining() uint32 {
	if m != nil {
		return m.NeighborLongLivedGracefulRestartTimeRemaining
	}
	return 0
}

func (m *BgpNbrAf_) GetRouteRefreshesReceived() uint32 {
	if m != nil {
		return m.RouteRefreshesReceived
	}
	return 0
}

func (m *BgpNbrAf_) GetRouteRefreshesSent() uint32 {
	if m != nil {
		return m.RouteRefreshesSent
	}
	return 0
}

func (m *BgpNbrAf_) GetRefreshTargetVersion() uint32 {
	if m != nil {
		return m.RefreshTargetVersion
	}
	return 0
}

func (m *BgpNbrAf_) GetRefreshVersion() uint32 {
	if m != nil {
		return m.RefreshVersion
	}
	return 0
}

func (m *BgpNbrAf_) GetRefreshAckedVersion() uint32 {
	if m != nil {
		return m.RefreshAckedVersion
	}
	return 0
}

func (m *BgpNbrAf_) GetIsPrefixOrfPresent() bool {
	if m != nil {
		return m.IsPrefixOrfPresent
	}
	return false
}

func (m *BgpNbrAf_) GetOrfEntriesReceived() uint32 {
	if m != nil {
		return m.OrfEntriesReceived
	}
	return 0
}

func (m *BgpNbrAf_) GetIsDefaultOriginateSent() bool {
	if m != nil {
		return m.IsDefaultOriginateSent
	}
	return false
}

func (m *BgpNbrAf_) GetRoutePolicyPrefixOrf() string {
	if m != nil {
		return m.RoutePolicyPrefixOrf
	}
	return ""
}

func (m *BgpNbrAf_) GetRoutePolicyIn() string {
	if m != nil {
		return m.RoutePolicyIn
	}
	return ""
}

func (m *BgpNbrAf_) GetRoutePolicyOut() string {
	if m != nil {
		return m.RoutePolicyOut
	}
	return ""
}

func (m *BgpNbrAf_) GetRoutePolicyDefaultOriginate() string {
	if m != nil {
		return m.RoutePolicyDefaultOriginate
	}
	return ""
}

func (m *BgpNbrAf_) GetIsNeighborEbgpWithoutInboundPolicy() bool {
	if m != nil {
		return m.IsNeighborEbgpWithoutInboundPolicy
	}
	return false
}

func (m *BgpNbrAf_) GetIsNeighborEbgpWithoutOutboundPolicy() bool {
	if m != nil {
		return m.IsNeighborEbgpWithoutOutboundPolicy
	}
	return false
}

func (m *BgpNbrAf_) GetIsAsOverrideSet() bool {
	if m != nil {
		return m.IsAsOverrideSet
	}
	return false
}

func (m *BgpNbrAf_) GetIsAllowAsInSet() bool {
	if m != nil {
		return m.IsAllowAsInSet
	}
	return false
}

func (m *BgpNbrAf_) GetAllowAsInCount() uint32 {
	if m != nil {
		return m.AllowAsInCount
	}
	return 0
}

func (m *BgpNbrAf_) GetAddressFamilyLongLivedTime() uint32 {
	if m != nil {
		return m.AddressFamilyLongLivedTime
	}
	return 0
}

func (m *BgpNbrAf_) GetEoRReceivedInReadOnly() bool {
	if m != nil {
		return m.EoRReceivedInReadOnly
	}
	return false
}

func (m *BgpNbrAf_) GetAckedVersion() uint32 {
	if m != nil {
		return m.AckedVersion
	}
	return 0
}

func (m *BgpNbrAf_) GetSyncedAckedVersion() uint32 {
	if m != nil {
		return m.SyncedAckedVersion
	}
	return 0
}

func (m *BgpNbrAf_) GetOutstandingVersion() uint32 {
	if m != nil {
		return m.OutstandingVersion
	}
	return 0
}

func (m *BgpNbrAf_) GetOutstandingRefreshVersion() uint32 {
	if m != nil {
		return m.OutstandingRefreshVersion
	}
	return 0
}

func (m *BgpNbrAf_) GetOutstandingVersionMax() uint32 {
	if m != nil {
		return m.OutstandingVersionMax
	}
	return 0
}

func (m *BgpNbrAf_) GetNeighborAfPerformanceStatistics() *BgpPerfNbrAf_ {
	if m != nil {
		return m.NeighborAfPerformanceStatistics
	}
	return nil
}

func (m *BgpNbrAf_) GetIsAigpSet() bool {
	if m != nil {
		return m.IsAigpSet
	}
	return false
}

func (m *BgpNbrAf_) GetIsRtPresent() bool {
	if m != nil {
		return m.IsRtPresent
	}
	return false
}

func (m *BgpNbrAf_) GetExtendedCommunity() []uint32 {
	if m != nil {
		return m.ExtendedCommunity
	}
	return nil
}

func (m *BgpNbrAf_) GetIsRtPresentStandby() bool {
	if m != nil {
		return m.IsRtPresentStandby
	}
	return false
}

func (m *BgpNbrAf_) GetExtendedCommunityStandby() []uint32 {
	if m != nil {
		return m.ExtendedCommunityStandby
	}
	return nil
}

func (m *BgpNbrAf_) GetAcceptOwnEnabled() bool {
	if m != nil {
		return m.AcceptOwnEnabled
	}
	return false
}

func (m *BgpNbrAf_) GetSelectiveMultipathEligible() bool {
	if m != nil {
		return m.SelectiveMultipathEligible
	}
	return false
}

func (m *BgpNbrAf_) GetAfrpkiDisable() bool {
	if m != nil {
		return m.AfrpkiDisable
	}
	return false
}

func (m *BgpNbrAf_) GetAfrpkiUseValidity() bool {
	if m != nil {
		return m.AfrpkiUseValidity
	}
	return false
}

func (m *BgpNbrAf_) GetAfrpkiAllowInvalid() bool {
	if m != nil {
		return m.AfrpkiAllowInvalid
	}
	return false
}

func (m *BgpNbrAf_) GetAfrpkiSignalIbgp() bool {
	if m != nil {
		return m.AfrpkiSignalIbgp
	}
	return false
}

func (m *BgpNbrAf_) GetIsAdvertisePermanentNetwork() bool {
	if m != nil {
		return m.IsAdvertisePermanentNetwork
	}
	return false
}

func (m *BgpNbrAf_) GetIsSendMcastAttr() bool {
	if m != nil {
		return m.IsSendMcastAttr
	}
	return false
}

func (m *BgpNbrAf_) GetImportStitching() bool {
	if m != nil {
		return m.ImportStitching
	}
	return false
}

func (m *BgpNbrAf_) GetImportReoriginate() bool {
	if m != nil {
		return m.ImportReoriginate
	}
	return false
}

func (m *BgpNbrAf_) GetImportReoriginateStitching() bool {
	if m != nil {
		return m.ImportReoriginateStitching
	}
	return false
}

func (m *BgpNbrAf_) GetAdvertiseV4Flags() uint32 {
	if m != nil {
		return m.AdvertiseV4Flags
	}
	return 0
}

func (m *BgpNbrAf_) GetAdvertiseV6Flags() uint32 {
	if m != nil {
		return m.AdvertiseV6Flags
	}
	return 0
}

func (m *BgpNbrAf_) GetAdvertiseLocalLabeledRouteUnicast() bool {
	if m != nil {
		return m.AdvertiseLocalLabeledRouteUnicast
	}
	return false
}

func (m *BgpNbrAf_) GetPrefixesDeniedNonCumulative() uint32 {
	if m != nil {
		return m.PrefixesDeniedNonCumulative
	}
	return 0
}

func (m *BgpNbrAf_) GetEnableLabelStack() bool {
	if m != nil {
		return m.EnableLabelStack
	}
	return false
}

type BgpTimespec struct {
	Seconds              uint32   `protobuf:"varint,1,opt,name=seconds,proto3" json:"seconds,omitempty"`
	Nanoseconds          uint32   `protobuf:"varint,2,opt,name=nanoseconds,proto3" json:"nanoseconds,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BgpTimespec) Reset()         { *m = BgpTimespec{} }
func (m *BgpTimespec) String() string { return proto.CompactTextString(m) }
func (*BgpTimespec) ProtoMessage()    {}
func (*BgpTimespec) Descriptor() ([]byte, []int) {
	return fileDescriptor_be84ba08d516c4d3, []int{10}
}

func (m *BgpTimespec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BgpTimespec.Unmarshal(m, b)
}
func (m *BgpTimespec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BgpTimespec.Marshal(b, m, deterministic)
}
func (m *BgpTimespec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpTimespec.Merge(m, src)
}
func (m *BgpTimespec) XXX_Size() int {
	return xxx_messageInfo_BgpTimespec.Size(m)
}
func (m *BgpTimespec) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpTimespec.DiscardUnknown(m)
}

var xxx_messageInfo_BgpTimespec proto.InternalMessageInfo

func (m *BgpTimespec) GetSeconds() uint32 {
	if m != nil {
		return m.Seconds
	}
	return 0
}

func (m *BgpTimespec) GetNanoseconds() uint32 {
	if m != nil {
		return m.Nanoseconds
	}
	return 0
}

type BgpNbrMsgStatsUnit struct {
	Count                uint32       `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	LastTimeSpec         *BgpTimespec `protobuf:"bytes,2,opt,name=last_time_spec,json=lastTimeSpec,proto3" json:"last_time_spec,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *BgpNbrMsgStatsUnit) Reset()         { *m = BgpNbrMsgStatsUnit{} }
func (m *BgpNbrMsgStatsUnit) String() string { return proto.CompactTextString(m) }
func (*BgpNbrMsgStatsUnit) ProtoMessage()    {}
func (*BgpNbrMsgStatsUnit) Descriptor() ([]byte, []int) {
	return fileDescriptor_be84ba08d516c4d3, []int{11}
}

func (m *BgpNbrMsgStatsUnit) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BgpNbrMsgStatsUnit.Unmarshal(m, b)
}
func (m *BgpNbrMsgStatsUnit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BgpNbrMsgStatsUnit.Marshal(b, m, deterministic)
}
func (m *BgpNbrMsgStatsUnit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpNbrMsgStatsUnit.Merge(m, src)
}
func (m *BgpNbrMsgStatsUnit) XXX_Size() int {
	return xxx_messageInfo_BgpNbrMsgStatsUnit.Size(m)
}
func (m *BgpNbrMsgStatsUnit) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpNbrMsgStatsUnit.DiscardUnknown(m)
}

var xxx_messageInfo_BgpNbrMsgStatsUnit proto.InternalMessageInfo

func (m *BgpNbrMsgStatsUnit) GetCount() uint32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *BgpNbrMsgStatsUnit) GetLastTimeSpec() *BgpTimespec {
	if m != nil {
		return m.LastTimeSpec
	}
	return nil
}

type BgpNbrMsgStatsOp struct {
	Tx                   *BgpNbrMsgStatsUnit `protobuf:"bytes,1,opt,name=tx,proto3" json:"tx,omitempty"`
	Rx                   *BgpNbrMsgStatsUnit `protobuf:"bytes,2,opt,name=rx,proto3" json:"rx,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *BgpNbrMsgStatsOp) Reset()         { *m = BgpNbrMsgStatsOp{} }
func (m *BgpNbrMsgStatsOp) String() string { return proto.CompactTextString(m) }
func (*BgpNbrMsgStatsOp) ProtoMessage()    {}
func (*BgpNbrMsgStatsOp) Descriptor() ([]byte, []int) {
	return fileDescriptor_be84ba08d516c4d3, []int{12}
}

func (m *BgpNbrMsgStatsOp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BgpNbrMsgStatsOp.Unmarshal(m, b)
}
func (m *BgpNbrMsgStatsOp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BgpNbrMsgStatsOp.Marshal(b, m, deterministic)
}
func (m *BgpNbrMsgStatsOp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpNbrMsgStatsOp.Merge(m, src)
}
func (m *BgpNbrMsgStatsOp) XXX_Size() int {
	return xxx_messageInfo_BgpNbrMsgStatsOp.Size(m)
}
func (m *BgpNbrMsgStatsOp) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpNbrMsgStatsOp.DiscardUnknown(m)
}

var xxx_messageInfo_BgpNbrMsgStatsOp proto.InternalMessageInfo

func (m *BgpNbrMsgStatsOp) GetTx() *BgpNbrMsgStatsUnit {
	if m != nil {
		return m.Tx
	}
	return nil
}

func (m *BgpNbrMsgStatsOp) GetRx() *BgpNbrMsgStatsUnit {
	if m != nil {
		return m.Rx
	}
	return nil
}

type BgpNbrMsgStats struct {
	Open                 *BgpNbrMsgStatsOp `protobuf:"bytes,1,opt,name=open,proto3" json:"open,omitempty"`
	Notification         *BgpNbrMsgStatsOp `protobuf:"bytes,2,opt,name=notification,proto3" json:"notification,omitempty"`
	Update               *BgpNbrMsgStatsOp `protobuf:"bytes,3,opt,name=update,proto3" json:"update,omitempty"`
	Keepalive            *BgpNbrMsgStatsOp `protobuf:"bytes,4,opt,name=keepalive,proto3" json:"keepalive,omitempty"`
	RouteRefresh         *BgpNbrMsgStatsOp `protobuf:"bytes,5,opt,name=route_refresh,json=routeRefresh,proto3" json:"route_refresh,omitempty"`
	Total                *BgpNbrMsgStatsOp `protobuf:"bytes,6,opt,name=total,proto3" json:"total,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *BgpNbrMsgStats) Reset()         { *m = BgpNbrMsgStats{} }
func (m *BgpNbrMsgStats) String() string { return proto.CompactTextString(m) }
func (*BgpNbrMsgStats) ProtoMessage()    {}
func (*BgpNbrMsgStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_be84ba08d516c4d3, []int{13}
}

func (m *BgpNbrMsgStats) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BgpNbrMsgStats.Unmarshal(m, b)
}
func (m *BgpNbrMsgStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BgpNbrMsgStats.Marshal(b, m, deterministic)
}
func (m *BgpNbrMsgStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpNbrMsgStats.Merge(m, src)
}
func (m *BgpNbrMsgStats) XXX_Size() int {
	return xxx_messageInfo_BgpNbrMsgStats.Size(m)
}
func (m *BgpNbrMsgStats) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpNbrMsgStats.DiscardUnknown(m)
}

var xxx_messageInfo_BgpNbrMsgStats proto.InternalMessageInfo

func (m *BgpNbrMsgStats) GetOpen() *BgpNbrMsgStatsOp {
	if m != nil {
		return m.Open
	}
	return nil
}

func (m *BgpNbrMsgStats) GetNotification() *BgpNbrMsgStatsOp {
	if m != nil {
		return m.Notification
	}
	return nil
}

func (m *BgpNbrMsgStats) GetUpdate() *BgpNbrMsgStatsOp {
	if m != nil {
		return m.Update
	}
	return nil
}

func (m *BgpNbrMsgStats) GetKeepalive() *BgpNbrMsgStatsOp {
	if m != nil {
		return m.Keepalive
	}
	return nil
}

func (m *BgpNbrMsgStats) GetRouteRefresh() *BgpNbrMsgStatsOp {
	if m != nil {
		return m.RouteRefresh
	}
	return nil
}

func (m *BgpNbrMsgStats) GetTotal() *BgpNbrMsgStatsOp {
	if m != nil {
		return m.Total
	}
	return nil
}

type BgpNbrGshut_ struct {
	GshutExists          bool     `protobuf:"varint,1,opt,name=gshut_exists,json=gshutExists,proto3" json:"gshut_exists,omitempty"`
	GshutLocalActive     bool     `protobuf:"varint,2,opt,name=gshut_local_active,json=gshutLocalActive,proto3" json:"gshut_local_active,omitempty"`
	GshutActive          bool     `protobuf:"varint,3,opt,name=gshut_active,json=gshutActive,proto3" json:"gshut_active,omitempty"`
	GshutLocprefSet      bool     `protobuf:"varint,4,opt,name=gshut_locpref_set,json=gshutLocprefSet,proto3" json:"gshut_locpref_set,omitempty"`
	GshutLocpref         uint32   `protobuf:"varint,5,opt,name=gshut_locpref,json=gshutLocpref,proto3" json:"gshut_locpref,omitempty"`
	GshutPrepends        uint32   `protobuf:"varint,6,opt,name=gshut_prepends,json=gshutPrepends,proto3" json:"gshut_prepends,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BgpNbrGshut_) Reset()         { *m = BgpNbrGshut_{} }
func (m *BgpNbrGshut_) String() string { return proto.CompactTextString(m) }
func (*BgpNbrGshut_) ProtoMessage()    {}
func (*BgpNbrGshut_) Descriptor() ([]byte, []int) {
	return fileDescriptor_be84ba08d516c4d3, []int{14}
}

func (m *BgpNbrGshut_) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BgpNbrGshut_.Unmarshal(m, b)
}
func (m *BgpNbrGshut_) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BgpNbrGshut_.Marshal(b, m, deterministic)
}
func (m *BgpNbrGshut_) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpNbrGshut_.Merge(m, src)
}
func (m *BgpNbrGshut_) XXX_Size() int {
	return xxx_messageInfo_BgpNbrGshut_.Size(m)
}
func (m *BgpNbrGshut_) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpNbrGshut_.DiscardUnknown(m)
}

var xxx_messageInfo_BgpNbrGshut_ proto.InternalMessageInfo

func (m *BgpNbrGshut_) GetGshutExists() bool {
	if m != nil {
		return m.GshutExists
	}
	return false
}

func (m *BgpNbrGshut_) GetGshutLocalActive() bool {
	if m != nil {
		return m.GshutLocalActive
	}
	return false
}

func (m *BgpNbrGshut_) GetGshutActive() bool {
	if m != nil {
		return m.GshutActive
	}
	return false
}

func (m *BgpNbrGshut_) GetGshutLocprefSet() bool {
	if m != nil {
		return m.GshutLocprefSet
	}
	return false
}

func (m *BgpNbrGshut_) GetGshutLocpref() uint32 {
	if m != nil {
		return m.GshutLocpref
	}
	return 0
}

func (m *BgpNbrGshut_) GetGshutPrepends() uint32 {
	if m != nil {
		return m.GshutPrepends
	}
	return 0
}

type BgpNbrBag struct {
	SpeakerId                               uint32          `protobuf:"varint,50,opt,name=speaker_id,json=speakerId,proto3" json:"speaker_id,omitempty"`
	Description                             string          `protobuf:"bytes,51,opt,name=description,proto3" json:"description,omitempty"`
	LocalAs                                 uint32          `protobuf:"varint,52,opt,name=local_as,json=localAs,proto3" json:"local_as,omitempty"`
	RemoteAs                                uint32          `protobuf:"varint,53,opt,name=remote_as,json=remoteAs,proto3" json:"remote_as,omitempty"`
	HasInternalLink                         bool            `protobuf:"varint,54,opt,name=has_internal_link,json=hasInternalLink,proto3" json:"has_internal_link,omitempty"`
	IsExternalNeighborNotDirectlyConnected  bool            `protobuf:"varint,55,opt,name=is_external_neighbor_not_directly_connected,json=isExternalNeighborNotDirectlyConnected,proto3" json:"is_external_neighbor_not_directly_connected,omitempty"`
	MessagesReceived                        uint32          `protobuf:"varint,56,opt,name=messages_received,json=messagesReceived,proto3" json:"messages_received,omitempty"`
	MessagesSent                            uint32          `protobuf:"varint,57,opt,name=messages_sent,json=messagesSent,proto3" json:"messages_sent,omitempty"`
	UpdateMessagesIn                        uint32          `protobuf:"varint,58,opt,name=update_messages_in,json=updateMessagesIn,proto3" json:"update_messages_in,omitempty"`
	UpdateMessagesOut                       uint32          `protobuf:"varint,59,opt,name=update_messages_out,json=updateMessagesOut,proto3" json:"update_messages_out,omitempty"`
	MessagesQueuedIn                        uint32          `protobuf:"varint,60,opt,name=messages_queued_in,json=messagesQueuedIn,proto3" json:"messages_queued_in,omitempty"`
	MessagesQueuedOut                       uint32          `protobuf:"varint,61,opt,name=messages_queued_out,json=messagesQueuedOut,proto3" json:"messages_queued_out,omitempty"`
	ConnectionEstablishedTime               uint32          `protobuf:"varint,62,opt,name=connection_established_time,json=connectionEstablishedTime,proto3" json:"connection_established_time,omitempty"`
	ConnectionState                         string          `protobuf:"bytes,63,opt,name=connection_state,json=connectionState,proto3" json:"connection_state,omitempty"`
	PreviousConnectionState                 uint32          `protobuf:"varint,64,opt,name=previous_connection_state,json=previousConnectionState,proto3" json:"previous_connection_state,omitempty"`
	ConnectionAdminStatus                   uint32          `protobuf:"varint,65,opt,name=connection_admin_status,json=connectionAdminStatus,proto3" json:"connection_admin_status,omitempty"`
	OpenCheckErrorCode                      string          `protobuf:"bytes,66,opt,name=open_check_error_code,json=openCheckErrorCode,proto3" json:"open_check_error_code,omitempty"`
	ConnectionLocalAddress                  *BgpAddrtype    `protobuf:"bytes,67,opt,name=connection_local_address,json=connectionLocalAddress,proto3" json:"connection_local_address,omitempty"`
	IsLocalAddressConfigured                bool            `protobuf:"varint,68,opt,name=is_local_address_configured,json=isLocalAddressConfigured,proto3" json:"is_local_address_configured,omitempty"`
	ConnectionLocalPort                     uint32          `protobuf:"varint,69,opt,name=connection_local_port,json=connectionLocalPort,proto3" json:"connection_local_port,omitempty"`
	ConnectionRemoteAddress                 *BgpAddrtype    `protobuf:"bytes,70,opt,name=connection_remote_address,json=connectionRemoteAddress,proto3" json:"connection_remote_address,omitempty"`
	ConnectionRemotePort                    uint32          `protobuf:"varint,71,opt,name=connection_remote_port,json=connectionRemotePort,proto3" json:"connection_remote_port,omitempty"`
	NeighborInterfaceHandle                 uint32          `protobuf:"varint,72,opt,name=neighbor_interface_handle,json=neighborInterfaceHandle,proto3" json:"neighbor_interface_handle,omitempty"`
	ResetNotificationSent                   bool            `protobuf:"varint,73,opt,name=reset_notification_sent,json=resetNotificationSent,proto3" json:"reset_notification_sent,omitempty"`
	IsAdministrativelyShutDown              bool            `protobuf:"varint,74,opt,name=is_administratively_shut_down,json=isAdministrativelyShutDown,proto3" json:"is_administratively_shut_down,omitempty"`
	IsNeighborMaxPrefixShutdown             bool            `protobuf:"varint,75,opt,name=is_neighbor_max_prefix_shutdown,json=isNeighborMaxPrefixShutdown,proto3" json:"is_neighbor_max_prefix_shutdown,omitempty"`
	IsOutOfMemoryShutdown                   bool            `protobuf:"varint,76,opt,name=is_out_of_memory_shutdown,json=isOutOfMemoryShutdown,proto3" json:"is_out_of_memory_shutdown,omitempty"`
	IsOutOfMemoryForcedUp                   bool            `protobuf:"varint,77,opt,name=is_out_of_memory_forced_up,json=isOutOfMemoryForcedUp,proto3" json:"is_out_of_memory_forced_up,omitempty"`
	IsEbgpPeerAsLeague                      bool            `protobuf:"varint,78,opt,name=is_ebgp_peer_as_league,json=isEbgpPeerAsLeague,proto3" json:"is_ebgp_peer_as_league,omitempty"`
	IsEbgpPeerCommonAdmin                   bool            `protobuf:"varint,79,opt,name=is_ebgp_peer_common_admin,json=isEbgpPeerCommonAdmin,proto3" json:"is_ebgp_peer_common_admin,omitempty"`
	TtlSecurityEnabled                      bool            `protobuf:"varint,80,opt,name=ttl_security_enabled,json=ttlSecurityEnabled,proto3" json:"ttl_security_enabled,omitempty"`
	Suppress4ByteAs                         bool            `protobuf:"varint,81,opt,name=suppress4_byte_as,json=suppress4ByteAs,proto3" json:"suppress4_byte_as,omitempty"`
	BfdSessionState                         string          `protobuf:"bytes,82,opt,name=bfd_session_state,json=bfdSessionState,proto3" json:"bfd_session_state,omitempty"`
	BfdSessionCreatedState                  string          `protobuf:"bytes,83,opt,name=bfd_session_created_state,json=bfdSessionCreatedState,proto3" json:"bfd_session_created_state,omitempty"`
	BfdSessionEnableMode                    string          `protobuf:"bytes,84,opt,name=bfd_session_enable_mode,json=bfdSessionEnableMode,proto3" json:"bfd_session_enable_mode,omitempty"`
	BfdMinintervalval                       uint32          `protobuf:"varint,85,opt,name=bfd_minintervalval,json=bfdMinintervalval,proto3" json:"bfd_minintervalval,omitempty"`
	BfdMultiplierval                        uint32          `protobuf:"varint,86,opt,name=bfd_multiplierval,json=bfdMultiplierval,proto3" json:"bfd_multiplierval,omitempty"`
	BfdStateTs                              uint64          `protobuf:"varint,87,opt,name=bfd_state_ts,json=bfdStateTs,proto3" json:"bfd_state_ts,omitempty"`
	RouterId                                string          `protobuf:"bytes,88,opt,name=router_id,json=routerId,proto3" json:"router_id,omitempty"`
	NegotiatedProtocolVersion               uint32          `protobuf:"varint,89,opt,name=negotiated_protocol_version,json=negotiatedProtocolVersion,proto3" json:"negotiated_protocol_version,omitempty"`
	EbgpTimeToLive                          uint32          `protobuf:"varint,90,opt,name=ebgp_time_to_live,json=ebgpTimeToLive,proto3" json:"ebgp_time_to_live,omitempty"`
	IsEbgpMultihopBgpMplsForwardingDisabled bool            `protobuf:"varint,91,opt,name=is_ebgp_multihop_bgp_mpls_forwarding_disabled,json=isEbgpMultihopBgpMplsForwardingDisabled,proto3" json:"is_ebgp_multihop_bgp_mpls_forwarding_disabled,omitempty"`
	Tcpmss                                  uint32          `protobuf:"varint,92,opt,name=tcpmss,proto3" json:"tcpmss,omitempty"`
	MsgLogIn                                uint32          `protobuf:"varint,93,opt,name=msg_log_in,json=msgLogIn,proto3" json:"msg_log_in,omitempty"`
	MsgLogOut                               uint32          `protobuf:"varint,94,opt,name=msg_log_out,json=msgLogOut,proto3" json:"msg_log_out,omitempty"`
	NeighborLocalAs                         uint32          `protobuf:"varint,95,opt,name=neighbor_local_as,json=neighborLocalAs,proto3" json:"neighbor_local_as,omitempty"`
	LocalAsNoPrepend                        bool            `protobuf:"varint,96,opt,name=local_as_no_prepend,json=localAsNoPrepend,proto3" json:"local_as_no_prepend,omitempty"`
	IsCapabilityNegotiationSuppressed       bool            `protobuf:"varint,97,opt,name=is_capability_negotiation_suppressed,json=isCapabilityNegotiationSuppressed,proto3" json:"is_capability_negotiation_suppressed,omitempty"`
	IsCapabilityNegotiationPerformed        bool            `protobuf:"varint,98,opt,name=is_capability_negotiation_performed,json=isCapabilityNegotiationPerformed,proto3" json:"is_capability_negotiation_performed,omitempty"`
	IsRouteRefreshCapabilityReceived        bool            `protobuf:"varint,99,opt,name=is_route_refresh_capability_received,json=isRouteRefreshCapabilityReceived,proto3" json:"is_route_refresh_capability_received,omitempty"`
	IsRouteRefreshOldCapabilityReceived     bool            `protobuf:"varint,100,opt,name=is_route_refresh_old_capability_received,json=isRouteRefreshOldCapabilityReceived,proto3" json:"is_route_refresh_old_capability_received,omitempty"`
	IsGrAware                               bool            `protobuf:"varint,101,opt,name=is_gr_aware,json=isGrAware,proto3" json:"is_gr_aware,omitempty"`
	Is4ByteAsCapabilityReceived             bool            `protobuf:"varint,102,opt,name=is4_byte_as_capability_received,json=is4ByteAsCapabilityReceived,proto3" json:"is4_byte_as_capability_received,omitempty"`
	Is4ByteAsCapabilitySent                 bool            `protobuf:"varint,103,opt,name=is4_byte_as_capability_sent,json=is4ByteAsCapabilitySent,proto3" json:"is4_byte_as_capability_sent,omitempty"`
	MultiProtocolCapabilityReceived         bool            `protobuf:"varint,104,opt,name=multi_protocol_capability_received,json=multiProtocolCapabilityReceived,proto3" json:"multi_protocol_capability_received,omitempty"`
	HoldTime                                uint32          `protobuf:"varint,105,opt,name=hold_time,json=holdTime,proto3" json:"hold_time,omitempty"`
	KeepAliveTime                           uint32          `protobuf:"varint,106,opt,name=keep_alive_time,json=keepAliveTime,proto3" json:"keep_alive_time,omitempty"`
	ConfiguredHoldTime                      uint32          `protobuf:"varint,107,opt,name=configured_hold_time,json=configuredHoldTime,proto3" json:"configured_hold_time,omitempty"`
	ConfiguredKeepalive                     uint32          `protobuf:"varint,108,opt,name=configured_keepalive,json=configuredKeepalive,proto3" json:"configured_keepalive,omitempty"`
	ConfiguredMinAccHoldTime                uint32          `protobuf:"varint,109,opt,name=configured_min_acc_hold_time,json=configuredMinAccHoldTime,proto3" json:"configured_min_acc_hold_time,omitempty"`
	MinAdvertiseInterval                    uint32          `protobuf:"varint,110,opt,name=min_advertise_interval,json=minAdvertiseInterval,proto3" json:"min_advertise_interval,omitempty"`
	MinAdvertiseIntervalMsecs               uint32          `protobuf:"varint,111,opt,name=min_advertise_interval_msecs,json=minAdvertiseIntervalMsecs,proto3" json:"min_advertise_interval_msecs,omitempty"`
	MinOriginationInterval                  uint32          `protobuf:"varint,112,opt,name=min_origination_interval,json=minOriginationInterval,proto3" json:"min_origination_interval,omitempty"`
	ConnectRetryInterval                    uint32          `protobuf:"varint,113,opt,name=connect_retry_interval,json=connectRetryInterval,proto3" json:"connect_retry_interval,omitempty"`
	TimeSinceLastUpdate                     uint32          `protobuf:"varint,114,opt,name=time_since_last_update,json=timeSinceLastUpdate,proto3" json:"time_since_last_update,omitempty"`
	TimeSinceLastRead                       uint32          `protobuf:"varint,115,opt,name=time_since_last_read,json=timeSinceLastRead,proto3" json:"time_since_last_read,omitempty"`
	TimeSinceLastReadReset                  uint32          `protobuf:"varint,116,opt,name=time_since_last_read_reset,json=timeSinceLastReadReset,proto3" json:"time_since_last_read_reset,omitempty"`
	TimeLastCb                              uint64          `protobuf:"varint,117,opt,name=time_last_cb,json=timeLastCb,proto3" json:"time_last_cb,omitempty"`
	TimeLastCbReset                         uint32          `protobuf:"varint,118,opt,name=time_last_cb_reset,json=timeLastCbReset,proto3" json:"time_last_cb_reset,omitempty"`
	TimeLastFb                              uint64          `protobuf:"varint,119,opt,name=time_last_fb,json=timeLastFb,proto3" json:"time_last_fb,omitempty"`
	CountLastWrite                          uint32          `protobuf:"varint,120,opt,name=count_last_write,json=countLastWrite,proto3" json:"count_last_write,omitempty"`
	TimeSinceLastWrite                      uint32          `protobuf:"varint,121,opt,name=time_since_last_write,json=timeSinceLastWrite,proto3" json:"time_since_last_write,omitempty"`
	AttemptedLastWriteBytes                 uint32          `protobuf:"varint,122,opt,name=attempted_last_write_bytes,json=attemptedLastWriteBytes,proto3" json:"attempted_last_write_bytes,omitempty"`
	ActualLastWriteBytes                    uint32          `protobuf:"varint,123,opt,name=actual_last_write_bytes,json=actualLastWriteBytes,proto3" json:"actual_last_write_bytes,omitempty"`
	TimeSinceSecondLastWrite                uint32          `protobuf:"varint,124,opt,name=time_since_second_last_write,json=timeSinceSecondLastWrite,proto3" json:"time_since_second_last_write,omitempty"`
	AttemptedSecondLastWriteBytes           uint32          `protobuf:"varint,125,opt,name=attempted_second_last_write_bytes,json=attemptedSecondLastWriteBytes,proto3" json:"attempted_second_last_write_bytes,omitempty"`
	ActualSecondLastWriteBytes              uint32          `protobuf:"varint,126,opt,name=actual_second_last_write_bytes,json=actualSecondLastWriteBytes,proto3" json:"actual_second_last_write_bytes,omitempty"`
	TimeSinceLastWriteReset                 uint32          `protobuf:"varint,127,opt,name=time_since_last_write_reset,json=timeSinceLastWriteReset,proto3" json:"time_since_last_write_reset,omitempty"`
	AttemptedLastWriteResetBytes            uint32          `protobuf:"varint,128,opt,name=attempted_last_write_reset_bytes,json=attemptedLastWriteResetBytes,proto3" json:"attempted_last_write_reset_bytes,omitempty"`
	ActualLastWriteResetBytes               uint32          `protobuf:"varint,129,opt,name=actual_last_write_reset_bytes,json=actualLastWriteResetBytes,proto3" json:"actual_last_write_reset_bytes,omitempty"`
	TimeSinceSecondLastWriteReset           uint32          `protobuf:"varint,130,opt,name=time_since_second_last_write_reset,json=timeSinceSecondLastWriteReset,proto3" json:"time_since_second_last_write_reset,omitempty"`
	AttemptedSecondLastWriteResetBytes      uint32          `protobuf:"varint,131,opt,name=attempted_second_last_write_reset_bytes,json=attemptedSecondLastWriteResetBytes,proto3" json:"attempted_second_last_write_reset_bytes,omitempty"`
	ActualSecondLastWriteResetBytes         uint32          `protobuf:"varint,132,opt,name=actual_second_last_write_reset_bytes,json=actualSecondLastWriteResetBytes,proto3" json:"actual_second_last_write_reset_bytes,omitempty"`
	LastWriteEvent                          uint32          `protobuf:"varint,133,opt,name=last_write_event,json=lastWriteEvent,proto3" json:"last_write_event,omitempty"`
	SecondLastWriteEvent                    uint32          `protobuf:"varint,134,opt,name=second_last_write_event,json=secondLastWriteEvent,proto3" json:"second_last_write_event,omitempty"`
	LastKAexpiryReset                       uint32          `protobuf:"varint,135,opt,name=last_k_aexpiry_reset,json=lastKAexpiryReset,proto3" json:"last_k_aexpiry_reset,omitempty"`
	SecondLastKAexpiryReset                 uint32          `protobuf:"varint,136,opt,name=second_last_k_aexpiry_reset,json=secondLastKAexpiryReset,proto3" json:"second_last_k_aexpiry_reset,omitempty"`
	LastKAnotsentReset                      uint32          `protobuf:"varint,137,opt,name=last_k_anotsent_reset,json=lastKAnotsentReset,proto3" json:"last_k_anotsent_reset,omitempty"`
	LastKAerrorReset                        uint32          `protobuf:"varint,138,opt,name=last_k_aerror_reset,json=lastKAerrorReset,proto3" json:"last_k_aerror_reset,omitempty"`
	LastKAstartReset                        uint32          `protobuf:"varint,139,opt,name=last_k_astart_reset,json=lastKAstartReset,proto3" json:"last_k_astart_reset,omitempty"`
	SecondLastKAstartReset                  uint32          `protobuf:"varint,140,opt,name=second_last_k_astart_reset,json=secondLastKAstartReset,proto3" json:"second_last_k_astart_reset,omitempty"`
	ConnectionUpCount                       uint32          `protobuf:"varint,141,opt,name=connection_up_count,json=connectionUpCount,proto3" json:"connection_up_count,omitempty"`
	ConnectionDownCount                     uint32          `protobuf:"varint,142,opt,name=connection_down_count,json=connectionDownCount,proto3" json:"connection_down_count,omitempty"`
	TimeSinceConnectionLastDropped          uint32          `protobuf:"varint,143,opt,name=time_since_connection_last_dropped,json=timeSinceConnectionLastDropped,proto3" json:"time_since_connection_last_dropped,omitempty"`
	ResetReason                             string          `protobuf:"bytes,144,opt,name=reset_reason,json=resetReason,proto3" json:"reset_reason,omitempty"`
	PeerResetReason                         string          `protobuf:"bytes,145,opt,name=peer_reset_reason,json=peerResetReason,proto3" json:"peer_reset_reason,omitempty"`
	PeerErrorCode                           uint32          `protobuf:"varint,146,opt,name=peer_error_code,json=peerErrorCode,proto3" json:"peer_error_code,omitempty"`
	LastNotifyErrorCode                     uint32          `protobuf:"varint,147,opt,name=last_notify_error_code,json=lastNotifyErrorCode,proto3" json:"last_notify_error_code,omitempty"`
	LastNotifyErrorSubcode                  uint32          `protobuf:"varint,148,opt,name=last_notify_error_subcode,json=lastNotifyErrorSubcode,proto3" json:"last_notify_error_subcode,omitempty"`
	SendNotificationInfo                    *BgpNotfntype_  `protobuf:"bytes,149,opt,name=send_notification_info,json=sendNotificationInfo,proto3" json:"send_notification_info,omitempty"`
	ReceivedNotificationInfo                *BgpNotfntype_  `protobuf:"bytes,150,opt,name=received_notification_info,json=receivedNotificationInfo,proto3" json:"received_notification_info,omitempty"`
	ErrorNotifiesReceived                   uint32          `protobuf:"varint,151,opt,name=error_notifies_received,json=errorNotifiesReceived,proto3" json:"error_notifies_received,omitempty"`
	ErrorNotifiesSent                       uint32          `protobuf:"varint,152,opt,name=error_notifies_sent,json=errorNotifiesSent,proto3" json:"error_notifies_sent,omitempty"`
	RemoteAsNumber                          uint32          `protobuf:"varint,153,opt,name=remote_as_number,json=remoteAsNumber,proto3" json:"remote_as_number,omitempty"`
	DmzLinkBandwidth                        uint32          `protobuf:"varint,154,opt,name=dmz_link_bandwidth,json=dmzLinkBandwidth,proto3" json:"dmz_link_bandwidth,omitempty"`
	EbgpRecvDmz                             bool            `protobuf:"varint,155,opt,name=ebgp_recv_dmz,json=ebgpRecvDmz,proto3" json:"ebgp_recv_dmz,omitempty"`
	EbgpSendDmzMode                         string          `protobuf:"bytes,156,opt,name=ebgp_send_dmz_mode,json=ebgpSendDmzMode,proto3" json:"ebgp_send_dmz_mode,omitempty"`
	TosType                                 uint32          `protobuf:"varint,157,opt,name=tos_type,json=tosType,proto3" json:"tos_type,omitempty"`
	TosValue                                uint32          `protobuf:"varint,158,opt,name=tos_value,json=tosValue,proto3" json:"tos_value,omitempty"`
	PerformanceStatistics                   *BgpPerfNbr_    `protobuf:"bytes,159,opt,name=performance_statistics,json=performanceStatistics,proto3" json:"performance_statistics,omitempty"`
	AfData                                  []*BgpNbrAf_    `protobuf:"bytes,160,rep,name=af_data,json=afData,proto3" json:"af_data,omitempty"`
	TcpSessionOpenMode                      string          `protobuf:"bytes,161,opt,name=tcp_session_open_mode,json=tcpSessionOpenMode,proto3" json:"tcp_session_open_mode,omitempty"`
	VrfName                                 string          `protobuf:"bytes,162,opt,name=vrf_name,json=vrfName,proto3" json:"vrf_name,omitempty"`
	StandbyRp                               bool            `protobuf:"varint,163,opt,name=standby_rp,json=standbyRp,proto3" json:"standby_rp,omitempty"`
	NsrEnabled                              bool            `protobuf:"varint,164,opt,name=nsr_enabled,json=nsrEnabled,proto3" json:"nsr_enabled,omitempty"`
	GracefulRestartEnabledNbr               bool            `protobuf:"varint,165,opt,name=graceful_restart_enabled_nbr,json=gracefulRestartEnabledNbr,proto3" json:"graceful_restart_enabled_nbr,omitempty"`
	GrRestartTime                           uint32          `protobuf:"varint,166,opt,name=gr_restart_time,json=grRestartTime,proto3" json:"gr_restart_time,omitempty"`
	GrStalePathTime                         uint32          `protobuf:"varint,167,opt,name=gr_stale_path_time,json=grStalePathTime,proto3" json:"gr_stale_path_time,omitempty"`
	FssnOffset                              uint32          `protobuf:"varint,168,opt,name=fssn_offset,json=fssnOffset,proto3" json:"fssn_offset,omitempty"`
	FpbsnOffset                             uint32          `protobuf:"varint,169,opt,name=fpbsn_offset,json=fpbsnOffset,proto3" json:"fpbsn_offset,omitempty"`
	LastAckdSeqNo                           uint32          `protobuf:"varint,170,opt,name=last_ackd_seq_no,json=lastAckdSeqNo,proto3" json:"last_ackd_seq_no,omitempty"`
	BytesWritten                            uint32          `protobuf:"varint,171,opt,name=bytes_written,json=bytesWritten,proto3" json:"bytes_written,omitempty"`
	BytesRead                               uint32          `protobuf:"varint,172,opt,name=bytes_read,json=bytesRead,proto3" json:"bytes_read,omitempty"`
	SocketReadBytes                         uint32          `protobuf:"varint,173,opt,name=socket_read_bytes,json=socketReadBytes,proto3" json:"socket_read_bytes,omitempty"`
	IsReadDisabled                          bool            `protobuf:"varint,174,opt,name=is_read_disabled,json=isReadDisabled,proto3" json:"is_read_disabled,omitempty"`
	UpdateBytesRead                         uint32          `protobuf:"varint,175,opt,name=update_bytes_read,json=updateBytesRead,proto3" json:"update_bytes_read,omitempty"`
	NsrState                                string          `protobuf:"bytes,176,opt,name=nsr_state,json=nsrState,proto3" json:"nsr_state,omitempty"`
	IsPassiveClose                          bool            `protobuf:"varint,177,opt,name=is_passive_close,json=isPassiveClose,proto3" json:"is_passive_close,omitempty"`
	NbrEnforceFirstAs                       bool            `protobuf:"varint,178,opt,name=nbr_enforce_first_as,json=nbrEnforceFirstAs,proto3" json:"nbr_enforce_first_as,omitempty"`
	ActiveBmpServers                        uint32          `protobuf:"varint,179,opt,name=active_bmp_servers,json=activeBmpServers,proto3" json:"active_bmp_servers,omitempty"`
	NbrClusterId                            uint32          `protobuf:"varint,180,opt,name=nbr_cluster_id,json=nbrClusterId,proto3" json:"nbr_cluster_id,omitempty"`
	NbrInCluster                            uint32          `protobuf:"varint,181,opt,name=nbr_in_cluster,json=nbrInCluster,proto3" json:"nbr_in_cluster,omitempty"`
	IgnoreConnected                         bool            `protobuf:"varint,182,opt,name=ignore_connected,json=ignoreConnected,proto3" json:"ignore_connected,omitempty"`
	InternalVpnClient                       bool            `protobuf:"varint,183,opt,name=internal_vpn_client,json=internalVpnClient,proto3" json:"internal_vpn_client,omitempty"`
	IoArmed                                 bool            `protobuf:"varint,184,opt,name=io_armed,json=ioArmed,proto3" json:"io_armed,omitempty"`
	ReadArmed                               bool            `protobuf:"varint,185,opt,name=read_armed,json=readArmed,proto3" json:"read_armed,omitempty"`
	WriteArmed                              bool            `protobuf:"varint,186,opt,name=write_armed,json=writeArmed,proto3" json:"write_armed,omitempty"`
	MessageStatistics                       *BgpNbrMsgStats `protobuf:"bytes,187,opt,name=message_statistics,json=messageStatistics,proto3" json:"message_statistics,omitempty"`
	DiscardDataBytes                        uint32          `protobuf:"varint,188,opt,name=discard_data_bytes,json=discardDataBytes,proto3" json:"discard_data_bytes,omitempty"`
	LocalAsReplaceAs                        bool            `protobuf:"varint,189,opt,name=local_as_replace_as,json=localAsReplaceAs,proto3" json:"local_as_replace_as,omitempty"`
	LocalAsDualAs                           bool            `protobuf:"varint,190,opt,name=local_as_dual_as,json=localAsDualAs,proto3" json:"local_as_dual_as,omitempty"`
	LocalAsDualAsModeNative                 bool            `protobuf:"varint,191,opt,name=local_as_dual_as_mode_native,json=localAsDualAsModeNative,proto3" json:"local_as_dual_as_mode_native,omitempty"`
	EgressPeerEngineeringEnabled            bool            `protobuf:"varint,192,opt,name=egress_peer_engineering_enabled,json=egressPeerEngineeringEnabled,proto3" json:"egress_peer_engineering_enabled,omitempty"`
	TcpInitSyncTimeSpec                     *BgpTimespec    `protobuf:"bytes,193,opt,name=tcp_init_sync_time_spec,json=tcpInitSyncTimeSpec,proto3" json:"tcp_init_sync_time_spec,omitempty"`
	TcpInitSyncPhaseTwoTimeSpec             *BgpTimespec    `protobuf:"bytes,194,opt,name=tcp_init_sync_phase_two_time_spec,json=tcpInitSyncPhaseTwoTimeSpec,proto3" json:"tcp_init_sync_phase_two_time_spec,omitempty"`
	TcpInitSyncDoneTimeSpec                 *BgpTimespec    `protobuf:"bytes,195,opt,name=tcp_init_sync_done_time_spec,json=tcpInitSyncDoneTimeSpec,proto3" json:"tcp_init_sync_done_time_spec,omitempty"`
	DiscardAs4Path                          uint32          `protobuf:"varint,196,opt,name=discard_as4_path,json=discardAs4Path,proto3" json:"discard_as4_path,omitempty"`
	RpkiDisable                             bool            `protobuf:"varint,197,opt,name=rpki_disable,json=rpkiDisable,proto3" json:"rpki_disable,omitempty"`
	RpkiUseValidity                         bool            `protobuf:"varint,198,opt,name=rpki_use_validity,json=rpkiUseValidity,proto3" json:"rpki_use_validity,omitempty"`
	RpkiAllowInvalid                        bool            `protobuf:"varint,199,opt,name=rpki_allow_invalid,json=rpkiAllowInvalid,proto3" json:"rpki_allow_invalid,omitempty"`
	RpkiSignalIbgp                          bool            `protobuf:"varint,200,opt,name=rpki_signal_ibgp,json=rpkiSignalIbgp,proto3" json:"rpki_signal_ibgp,omitempty"`
	GracefulMaintenance                     *BgpNbrGshut_   `protobuf:"bytes,201,opt,name=graceful_maintenance,json=gracefulMaintenance,proto3" json:"graceful_maintenance,omitempty"`
	DynamicNeighbor                         bool            `protobuf:"varint,202,opt,name=dynamic_neighbor,json=dynamicNeighbor,proto3" json:"dynamic_neighbor,omitempty"`
	XXX_NoUnkeyedLiteral                    struct{}        `json:"-"`
	XXX_unrecognized                        []byte          `json:"-"`
	XXX_sizecache                           int32           `json:"-"`
}

func (m *BgpNbrBag) Reset()         { *m = BgpNbrBag{} }
func (m *BgpNbrBag) String() string { return proto.CompactTextString(m) }
func (*BgpNbrBag) ProtoMessage()    {}
func (*BgpNbrBag) Descriptor() ([]byte, []int) {
	return fileDescriptor_be84ba08d516c4d3, []int{15}
}

func (m *BgpNbrBag) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BgpNbrBag.Unmarshal(m, b)
}
func (m *BgpNbrBag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BgpNbrBag.Marshal(b, m, deterministic)
}
func (m *BgpNbrBag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpNbrBag.Merge(m, src)
}
func (m *BgpNbrBag) XXX_Size() int {
	return xxx_messageInfo_BgpNbrBag.Size(m)
}
func (m *BgpNbrBag) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpNbrBag.DiscardUnknown(m)
}

var xxx_messageInfo_BgpNbrBag proto.InternalMessageInfo

func (m *BgpNbrBag) GetSpeakerId() uint32 {
	if m != nil {
		return m.SpeakerId
	}
	return 0
}

func (m *BgpNbrBag) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *BgpNbrBag) GetLocalAs() uint32 {
	if m != nil {
		return m.LocalAs
	}
	return 0
}

func (m *BgpNbrBag) GetRemoteAs() uint32 {
	if m != nil {
		return m.RemoteAs
	}
	return 0
}

func (m *BgpNbrBag) GetHasInternalLink() bool {
	if m != nil {
		return m.HasInternalLink
	}
	return false
}

func (m *BgpNbrBag) GetIsExternalNeighborNotDirectlyConnected() bool {
	if m != nil {
		return m.IsExternalNeighborNotDirectlyConnected
	}
	return false
}

func (m *BgpNbrBag) GetMessagesReceived() uint32 {
	if m != nil {
		return m.MessagesReceived
	}
	return 0
}

func (m *BgpNbrBag) GetMessagesSent() uint32 {
	if m != nil {
		return m.MessagesSent
	}
	return 0
}

func (m *BgpNbrBag) GetUpdateMessagesIn() uint32 {
	if m != nil {
		return m.UpdateMessagesIn
	}
	return 0
}

func (m *BgpNbrBag) GetUpdateMessagesOut() uint32 {
	if m != nil {
		return m.UpdateMessagesOut
	}
	return 0
}

func (m *BgpNbrBag) GetMessagesQueuedIn() uint32 {
	if m != nil {
		return m.MessagesQueuedIn
	}
	return 0
}

func (m *BgpNbrBag) GetMessagesQueuedOut() uint32 {
	if m != nil {
		return m.MessagesQueuedOut
	}
	return 0
}

func (m *BgpNbrBag) GetConnectionEstablishedTime() uint32 {
	if m != nil {
		return m.ConnectionEstablishedTime
	}
	return 0
}

func (m *BgpNbrBag) GetConnectionState() string {
	if m != nil {
		return m.ConnectionState
	}
	return ""
}

func (m *BgpNbrBag) GetPreviousConnectionState() uint32 {
	if m != nil {
		return m.PreviousConnectionState
	}
	return 0
}

func (m *BgpNbrBag) GetConnectionAdminStatus() uint32 {
	if m != nil {
		return m.ConnectionAdminStatus
	}
	return 0
}

func (m *BgpNbrBag) GetOpenCheckErrorCode() string {
	if m != nil {
		return m.OpenCheckErrorCode
	}
	return ""
}

func (m *BgpNbrBag) GetConnectionLocalAddress() *BgpAddrtype {
	if m != nil {
		return m.ConnectionLocalAddress
	}
	return nil
}

func (m *BgpNbrBag) GetIsLocalAddressConfigured() bool {
	if m != nil {
		return m.IsLocalAddressConfigured
	}
	return false
}

func (m *BgpNbrBag) GetConnectionLocalPort() uint32 {
	if m != nil {
		return m.ConnectionLocalPort
	}
	return 0
}

func (m *BgpNbrBag) GetConnectionRemoteAddress() *BgpAddrtype {
	if m != nil {
		return m.ConnectionRemoteAddress
	}
	return nil
}

func (m *BgpNbrBag) GetConnectionRemotePort() uint32 {
	if m != nil {
		return m.ConnectionRemotePort
	}
	return 0
}

func (m *BgpNbrBag) GetNeighborInterfaceHandle() uint32 {
	if m != nil {
		return m.NeighborInterfaceHandle
	}
	return 0
}

func (m *BgpNbrBag) GetResetNotificationSent() bool {
	if m != nil {
		return m.ResetNotificationSent
	}
	return false
}

func (m *BgpNbrBag) GetIsAdministrativelyShutDown() bool {
	if m != nil {
		return m.IsAdministrativelyShutDown
	}
	return false
}

func (m *BgpNbrBag) GetIsNeighborMaxPrefixShutdown() bool {
	if m != nil {
		return m.IsNeighborMaxPrefixShutdown
	}
	return false
}

func (m *BgpNbrBag) GetIsOutOfMemoryShutdown() bool {
	if m != nil {
		return m.IsOutOfMemoryShutdown
	}
	return false
}

func (m *BgpNbrBag) GetIsOutOfMemoryForcedUp() bool {
	if m != nil {
		return m.IsOutOfMemoryForcedUp
	}
	return false
}

func (m *BgpNbrBag) GetIsEbgpPeerAsLeague() bool {
	if m != nil {
		return m.IsEbgpPeerAsLeague
	}
	return false
}

func (m *BgpNbrBag) GetIsEbgpPeerCommonAdmin() bool {
	if m != nil {
		return m.IsEbgpPeerCommonAdmin
	}
	return false
}

func (m *BgpNbrBag) GetTtlSecurityEnabled() bool {
	if m != nil {
		return m.TtlSecurityEnabled
	}
	return false
}

func (m *BgpNbrBag) GetSuppress4ByteAs() bool {
	if m != nil {
		return m.Suppress4ByteAs
	}
	return false
}

func (m *BgpNbrBag) GetBfdSessionState() string {
	if m != nil {
		return m.BfdSessionState
	}
	return ""
}

func (m *BgpNbrBag) GetBfdSessionCreatedState() string {
	if m != nil {
		return m.BfdSessionCreatedState
	}
	return ""
}

func (m *BgpNbrBag) GetBfdSessionEnableMode() string {
	if m != nil {
		return m.BfdSessionEnableMode
	}
	return ""
}

func (m *BgpNbrBag) GetBfdMinintervalval() uint32 {
	if m != nil {
		return m.BfdMinintervalval
	}
	return 0
}

func (m *BgpNbrBag) GetBfdMultiplierval() uint32 {
	if m != nil {
		return m.BfdMultiplierval
	}
	return 0
}

func (m *BgpNbrBag) GetBfdStateTs() uint64 {
	if m != nil {
		return m.BfdStateTs
	}
	return 0
}

func (m *BgpNbrBag) GetRouterId() string {
	if m != nil {
		return m.RouterId
	}
	return ""
}

func (m *BgpNbrBag) GetNegotiatedProtocolVersion() uint32 {
	if m != nil {
		return m.NegotiatedProtocolVersion
	}
	return 0
}

func (m *BgpNbrBag) GetEbgpTimeToLive() uint32 {
	if m != nil {
		return m.EbgpTimeToLive
	}
	return 0
}

func (m *BgpNbrBag) GetIsEbgpMultihopBgpMplsForwardingDisabled() bool {
	if m != nil {
		return m.IsEbgpMultihopBgpMplsForwardingDisabled
	}
	return false
}

func (m *BgpNbrBag) GetTcpmss() uint32 {
	if m != nil {
		return m.Tcpmss
	}
	return 0
}

func (m *BgpNbrBag) GetMsgLogIn() uint32 {
	if m != nil {
		return m.MsgLogIn
	}
	return 0
}

func (m *BgpNbrBag) GetMsgLogOut() uint32 {
	if m != nil {
		return m.MsgLogOut
	}
	return 0
}

func (m *BgpNbrBag) GetNeighborLocalAs() uint32 {
	if m != nil {
		return m.NeighborLocalAs
	}
	return 0
}

func (m *BgpNbrBag) GetLocalAsNoPrepend() bool {
	if m != nil {
		return m.LocalAsNoPrepend
	}
	return false
}

func (m *BgpNbrBag) GetIsCapabilityNegotiationSuppressed() bool {
	if m != nil {
		return m.IsCapabilityNegotiationSuppressed
	}
	return false
}

func (m *BgpNbrBag) GetIsCapabilityNegotiationPerformed() bool {
	if m != nil {
		return m.IsCapabilityNegotiationPerformed
	}
	return false
}

func (m *BgpNbrBag) GetIsRouteRefreshCapabilityReceived() bool {
	if m != nil {
		return m.IsRouteRefreshCapabilityReceived
	}
	return false
}

func (m *BgpNbrBag) GetIsRouteRefreshOldCapabilityReceived() bool {
	if m != nil {
		return m.IsRouteRefreshOldCapabilityReceived
	}
	return false
}

func (m *BgpNbrBag) GetIsGrAware() bool {
	if m != nil {
		return m.IsGrAware
	}
	return false
}

func (m *BgpNbrBag) GetIs4ByteAsCapabilityReceived() bool {
	if m != nil {
		return m.Is4ByteAsCapabilityReceived
	}
	return false
}

func (m *BgpNbrBag) GetIs4ByteAsCapabilitySent() bool {
	if m != nil {
		return m.Is4ByteAsCapabilitySent
	}
	return false
}

func (m *BgpNbrBag) GetMultiProtocolCapabilityReceived() bool {
	if m != nil {
		return m.MultiProtocolCapabilityReceived
	}
	return false
}

func (m *BgpNbrBag) GetHoldTime() uint32 {
	if m != nil {
		return m.HoldTime
	}
	return 0
}

func (m *BgpNbrBag) GetKeepAliveTime() uint32 {
	if m != nil {
		return m.KeepAliveTime
	}
	return 0
}

func (m *BgpNbrBag) GetConfiguredHoldTime() uint32 {
	if m != nil {
		return m.ConfiguredHoldTime
	}
	return 0
}

func (m *BgpNbrBag) GetConfiguredKeepalive() uint32 {
	if m != nil {
		return m.ConfiguredKeepalive
	}
	return 0
}

func (m *BgpNbrBag) GetConfiguredMinAccHoldTime() uint32 {
	if m != nil {
		return m.ConfiguredMinAccHoldTime
	}
	return 0
}

func (m *BgpNbrBag) GetMinAdvertiseInterval() uint32 {
	if m != nil {
		return m.MinAdvertiseInterval
	}
	return 0
}

func (m *BgpNbrBag) GetMinAdvertiseIntervalMsecs() uint32 {
	if m != nil {
		return m.MinAdvertiseIntervalMsecs
	}
	return 0
}

func (m *BgpNbrBag) GetMinOriginationInterval() uint32 {
	if m != nil {
		return m.MinOriginationInterval
	}
	return 0
}

func (m *BgpNbrBag) GetConnectRetryInterval() uint32 {
	if m != nil {
		return m.ConnectRetryInterval
	}
	return 0
}

func (m *BgpNbrBag) GetTimeSinceLastUpdate() uint32 {
	if m != nil {
		return m.TimeSinceLastUpdate
	}
	return 0
}

func (m *BgpNbrBag) GetTimeSinceLastRead() uint32 {
	if m != nil {
		return m.TimeSinceLastRead
	}
	return 0
}

func (m *BgpNbrBag) GetTimeSinceLastReadReset() uint32 {
	if m != nil {
		return m.TimeSinceLastReadReset
	}
	return 0
}

func (m *BgpNbrBag) GetTimeLastCb() uint64 {
	if m != nil {
		return m.TimeLastCb
	}
	return 0
}

func (m *BgpNbrBag) GetTimeLastCbReset() uint32 {
	if m != nil {
		return m.TimeLastCbReset
	}
	return 0
}

func (m *BgpNbrBag) GetTimeLastFb() uint64 {
	if m != nil {
		return m.TimeLastFb
	}
	return 0
}

func (m *BgpNbrBag) GetCountLastWrite() uint32 {
	if m != nil {
		return m.CountLastWrite
	}
	return 0
}

func (m *BgpNbrBag) GetTimeSinceLastWrite() uint32 {
	if m != nil {
		return m.TimeSinceLastWrite
	}
	return 0
}

func (m *BgpNbrBag) GetAttemptedLastWriteBytes() uint32 {
	if m != nil {
		return m.AttemptedLastWriteBytes
	}
	return 0
}

func (m *BgpNbrBag) GetActualLastWriteBytes() uint32 {
	if m != nil {
		return m.ActualLastWriteBytes
	}
	return 0
}

func (m *BgpNbrBag) GetTimeSinceSecondLastWrite() uint32 {
	if m != nil {
		return m.TimeSinceSecondLastWrite
	}
	return 0
}

func (m *BgpNbrBag) GetAttemptedSecondLastWriteBytes() uint32 {
	if m != nil {
		return m.AttemptedSecondLastWriteBytes
	}
	return 0
}

func (m *BgpNbrBag) GetActualSecondLastWriteBytes() uint32 {
	if m != nil {
		return m.ActualSecondLastWriteBytes
	}
	return 0
}

func (m *BgpNbrBag) GetTimeSinceLastWriteReset() uint32 {
	if m != nil {
		return m.TimeSinceLastWriteReset
	}
	return 0
}

func (m *BgpNbrBag) GetAttemptedLastWriteResetBytes() uint32 {
	if m != nil {
		return m.AttemptedLastWriteResetBytes
	}
	return 0
}

func (m *BgpNbrBag) GetActualLastWriteResetBytes() uint32 {
	if m != nil {
		return m.ActualLastWriteResetBytes
	}
	return 0
}

func (m *BgpNbrBag) GetTimeSinceSecondLastWriteReset() uint32 {
	if m != nil {
		return m.TimeSinceSecondLastWriteReset
	}
	return 0
}

func (m *BgpNbrBag) GetAttemptedSecondLastWriteResetBytes() uint32 {
	if m != nil {
		return m.AttemptedSecondLastWriteResetBytes
	}
	return 0
}

func (m *BgpNbrBag) GetActualSecondLastWriteResetBytes() uint32 {
	if m != nil {
		return m.ActualSecondLastWriteResetBytes
	}
	return 0
}

func (m *BgpNbrBag) GetLastWriteEvent() uint32 {
	if m != nil {
		return m.LastWriteEvent
	}
	return 0
}

func (m *BgpNbrBag) GetSecondLastWriteEvent() uint32 {
	if m != nil {
		return m.SecondLastWriteEvent
	}
	return 0
}

func (m *BgpNbrBag) GetLastKAexpiryReset() uint32 {
	if m != nil {
		return m.LastKAexpiryReset
	}
	return 0
}

func (m *BgpNbrBag) GetSecondLastKAexpiryReset() uint32 {
	if m != nil {
		return m.SecondLastKAexpiryReset
	}
	return 0
}

func (m *BgpNbrBag) GetLastKAnotsentReset() uint32 {
	if m != nil {
		return m.LastKAnotsentReset
	}
	return 0
}

func (m *BgpNbrBag) GetLastKAerrorReset() uint32 {
	if m != nil {
		return m.LastKAerrorReset
	}
	return 0
}

func (m *BgpNbrBag) GetLastKAstartReset() uint32 {
	if m != nil {
		return m.LastKAstartReset
	}
	return 0
}

func (m *BgpNbrBag) GetSecondLastKAstartReset() uint32 {
	if m != nil {
		return m.SecondLastKAstartReset
	}
	return 0
}

func (m *BgpNbrBag) GetConnectionUpCount() uint32 {
	if m != nil {
		return m.ConnectionUpCount
	}
	return 0
}

func (m *BgpNbrBag) GetConnectionDownCount() uint32 {
	if m != nil {
		return m.ConnectionDownCount
	}
	return 0
}

func (m *BgpNbrBag) GetTimeSinceConnectionLastDropped() uint32 {
	if m != nil {
		return m.TimeSinceConnectionLastDropped
	}
	return 0
}

func (m *BgpNbrBag) GetResetReason() string {
	if m != nil {
		return m.ResetReason
	}
	return ""
}

func (m *BgpNbrBag) GetPeerResetReason() string {
	if m != nil {
		return m.PeerResetReason
	}
	return ""
}

func (m *BgpNbrBag) GetPeerErrorCode() uint32 {
	if m != nil {
		return m.PeerErrorCode
	}
	return 0
}

func (m *BgpNbrBag) GetLastNotifyErrorCode() uint32 {
	if m != nil {
		return m.LastNotifyErrorCode
	}
	return 0
}

func (m *BgpNbrBag) GetLastNotifyErrorSubcode() uint32 {
	if m != nil {
		return m.LastNotifyErrorSubcode
	}
	return 0
}

func (m *BgpNbrBag) GetSendNotificationInfo() *BgpNotfntype_ {
	if m != nil {
		return m.SendNotificationInfo
	}
	return nil
}

func (m *BgpNbrBag) GetReceivedNotificationInfo() *BgpNotfntype_ {
	if m != nil {
		return m.ReceivedNotificationInfo
	}
	return nil
}

func (m *BgpNbrBag) GetErrorNotifiesReceived() uint32 {
	if m != nil {
		return m.ErrorNotifiesReceived
	}
	return 0
}

func (m *BgpNbrBag) GetErrorNotifiesSent() uint32 {
	if m != nil {
		return m.ErrorNotifiesSent
	}
	return 0
}

func (m *BgpNbrBag) GetRemoteAsNumber() uint32 {
	if m != nil {
		return m.RemoteAsNumber
	}
	return 0
}

func (m *BgpNbrBag) GetDmzLinkBandwidth() uint32 {
	if m != nil {
		return m.DmzLinkBandwidth
	}
	return 0
}

func (m *BgpNbrBag) GetEbgpRecvDmz() bool {
	if m != nil {
		return m.EbgpRecvDmz
	}
	return false
}

func (m *BgpNbrBag) GetEbgpSendDmzMode() string {
	if m != nil {
		return m.EbgpSendDmzMode
	}
	return ""
}

func (m *BgpNbrBag) GetTosType() uint32 {
	if m != nil {
		return m.TosType
	}
	return 0
}

func (m *BgpNbrBag) GetTosValue() uint32 {
	if m != nil {
		return m.TosValue
	}
	return 0
}

func (m *BgpNbrBag) GetPerformanceStatistics() *BgpPerfNbr_ {
	if m != nil {
		return m.PerformanceStatistics
	}
	return nil
}

func (m *BgpNbrBag) GetAfData() []*BgpNbrAf_ {
	if m != nil {
		return m.AfData
	}
	return nil
}

func (m *BgpNbrBag) GetTcpSessionOpenMode() string {
	if m != nil {
		return m.TcpSessionOpenMode
	}
	return ""
}

func (m *BgpNbrBag) GetVrfName() string {
	if m != nil {
		return m.VrfName
	}
	return ""
}

func (m *BgpNbrBag) GetStandbyRp() bool {
	if m != nil {
		return m.StandbyRp
	}
	return false
}

func (m *BgpNbrBag) GetNsrEnabled() bool {
	if m != nil {
		return m.NsrEnabled
	}
	return false
}

func (m *BgpNbrBag) GetGracefulRestartEnabledNbr() bool {
	if m != nil {
		return m.GracefulRestartEnabledNbr
	}
	return false
}

func (m *BgpNbrBag) GetGrRestartTime() uint32 {
	if m != nil {
		return m.GrRestartTime
	}
	return 0
}

func (m *BgpNbrBag) GetGrStalePathTime() uint32 {
	if m != nil {
		return m.GrStalePathTime
	}
	return 0
}

func (m *BgpNbrBag) GetFssnOffset() uint32 {
	if m != nil {
		return m.FssnOffset
	}
	return 0
}

func (m *BgpNbrBag) GetFpbsnOffset() uint32 {
	if m != nil {
		return m.FpbsnOffset
	}
	return 0
}

func (m *BgpNbrBag) GetLastAckdSeqNo() uint32 {
	if m != nil {
		return m.LastAckdSeqNo
	}
	return 0
}

func (m *BgpNbrBag) GetBytesWritten() uint32 {
	if m != nil {
		return m.BytesWritten
	}
	return 0
}

func (m *BgpNbrBag) GetBytesRead() uint32 {
	if m != nil {
		return m.BytesRead
	}
	return 0
}

func (m *BgpNbrBag) GetSocketReadBytes() uint32 {
	if m != nil {
		return m.SocketReadBytes
	}
	return 0
}

func (m *BgpNbrBag) GetIsReadDisabled() bool {
	if m != nil {
		return m.IsReadDisabled
	}
	return false
}

func (m *BgpNbrBag) GetUpdateBytesRead() uint32 {
	if m != nil {
		return m.UpdateBytesRead
	}
	return 0
}

func (m *BgpNbrBag) GetNsrState() string {
	if m != nil {
		return m.NsrState
	}
	return ""
}

func (m *BgpNbrBag) GetIsPassiveClose() bool {
	if m != nil {
		return m.IsPassiveClose
	}
	return false
}

func (m *BgpNbrBag) GetNbrEnforceFirstAs() bool {
	if m != nil {
		return m.NbrEnforceFirstAs
	}
	return false
}

func (m *BgpNbrBag) GetActiveBmpServers() uint32 {
	if m != nil {
		return m.ActiveBmpServers
	}
	return 0
}

func (m *BgpNbrBag) GetNbrClusterId() uint32 {
	if m != nil {
		return m.NbrClusterId
	}
	return 0
}

func (m *BgpNbrBag) GetNbrInCluster() uint32 {
	if m != nil {
		return m.NbrInCluster
	}
	return 0
}

func (m *BgpNbrBag) GetIgnoreConnected() bool {
	if m != nil {
		return m.IgnoreConnected
	}
	return false
}

func (m *BgpNbrBag) GetInternalVpnClient() bool {
	if m != nil {
		return m.InternalVpnClient
	}
	return false
}

func (m *BgpNbrBag) GetIoArmed() bool {
	if m != nil {
		return m.IoArmed
	}
	return false
}

func (m *BgpNbrBag) GetReadArmed() bool {
	if m != nil {
		return m.ReadArmed
	}
	return false
}

func (m *BgpNbrBag) GetWriteArmed() bool {
	if m != nil {
		return m.WriteArmed
	}
	return false
}

func (m *BgpNbrBag) GetMessageStatistics() *BgpNbrMsgStats {
	if m != nil {
		return m.MessageStatistics
	}
	return nil
}

func (m *BgpNbrBag) GetDiscardDataBytes() uint32 {
	if m != nil {
		return m.DiscardDataBytes
	}
	return 0
}

func (m *BgpNbrBag) GetLocalAsReplaceAs() bool {
	if m != nil {
		return m.LocalAsReplaceAs
	}
	return false
}

func (m *BgpNbrBag) GetLocalAsDualAs() bool {
	if m != nil {
		return m.LocalAsDualAs
	}
	return false
}

func (m *BgpNbrBag) GetLocalAsDualAsModeNative() bool {
	if m != nil {
		return m.LocalAsDualAsModeNative
	}
	return false
}

func (m *BgpNbrBag) GetEgressPeerEngineeringEnabled() bool {
	if m != nil {
		return m.EgressPeerEngineeringEnabled
	}
	return false
}

func (m *BgpNbrBag) GetTcpInitSyncTimeSpec() *BgpTimespec {
	if m != nil {
		return m.TcpInitSyncTimeSpec
	}
	return nil
}

func (m *BgpNbrBag) GetTcpInitSyncPhaseTwoTimeSpec() *BgpTimespec {
	if m != nil {
		return m.TcpInitSyncPhaseTwoTimeSpec
	}
	return nil
}

func (m *BgpNbrBag) GetTcpInitSyncDoneTimeSpec() *BgpTimespec {
	if m != nil {
		return m.TcpInitSyncDoneTimeSpec
	}
	return nil
}

func (m *BgpNbrBag) GetDiscardAs4Path() uint32 {
	if m != nil {
		return m.DiscardAs4Path
	}
	return 0
}

func (m *BgpNbrBag) GetRpkiDisable() bool {
	if m != nil {
		return m.RpkiDisable
	}
	return false
}

func (m *BgpNbrBag) GetRpkiUseValidity() bool {
	if m != nil {
		return m.RpkiUseValidity
	}
	return false
}

func (m *BgpNbrBag) GetRpkiAllowInvalid() bool {
	if m != nil {
		return m.RpkiAllowInvalid
	}
	return false
}

func (m *BgpNbrBag) GetRpkiSignalIbgp() bool {
	if m != nil {
		return m.RpkiSignalIbgp
	}
	return false
}

func (m *BgpNbrBag) GetGracefulMaintenance() *BgpNbrGshut_ {
	if m != nil {
		return m.GracefulMaintenance
	}
	return nil
}

func (m *BgpNbrBag) GetDynamicNeighbor() bool {
	if m != nil {
		return m.DynamicNeighbor
	}
	return false
}

func init() {
	proto.RegisterType((*BgpNbrBag_KEYS)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.vrfs.vrf.afs.af.neighbor_af_table.neighbor.bgp_nbr_bag_KEYS")
	proto.RegisterType((*BgpL2VpnAddrT)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.vrfs.vrf.afs.af.neighbor_af_table.neighbor.bgp_l2vpn_addr_t")
	proto.RegisterType((*BgpL2VpnMspwAddrT)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.vrfs.vrf.afs.af.neighbor_af_table.neighbor.bgp_l2vpn_mspw_addr_t")
	proto.RegisterType((*BgpIpv4SrpolicyAddrT)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.vrfs.vrf.afs.af.neighbor_af_table.neighbor.bgp_ipv4_srpolicy_addr_t")
	proto.RegisterType((*BgpIpv6SrpolicyAddrT)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.vrfs.vrf.afs.af.neighbor_af_table.neighbor.bgp_ipv6_srpolicy_addr_t")
	proto.RegisterType((*BgpAddrtype)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.vrfs.vrf.afs.af.neighbor_af_table.neighbor.bgp_addrtype")
	proto.RegisterType((*BgpNotfntype_)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.vrfs.vrf.afs.af.neighbor_af_table.neighbor.bgp_notfntype_")
	proto.RegisterType((*BgpPerfNbr_)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.vrfs.vrf.afs.af.neighbor_af_table.neighbor.bgp_perf_nbr_")
	proto.RegisterType((*BgpPerfNbrAf_)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.vrfs.vrf.afs.af.neighbor_af_table.neighbor.bgp_perf_nbr_af_")
	proto.RegisterType((*BgpNbrAf_)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.vrfs.vrf.afs.af.neighbor_af_table.neighbor.bgp_nbr_af_")
	proto.RegisterType((*BgpTimespec)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.vrfs.vrf.afs.af.neighbor_af_table.neighbor.bgp_timespec")
	proto.RegisterType((*BgpNbrMsgStatsUnit)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.vrfs.vrf.afs.af.neighbor_af_table.neighbor.bgp_nbr_msg_stats_unit")
	proto.RegisterType((*BgpNbrMsgStatsOp)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.vrfs.vrf.afs.af.neighbor_af_table.neighbor.bgp_nbr_msg_stats_op")
	proto.RegisterType((*BgpNbrMsgStats)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.vrfs.vrf.afs.af.neighbor_af_table.neighbor.bgp_nbr_msg_stats")
	proto.RegisterType((*BgpNbrGshut_)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.vrfs.vrf.afs.af.neighbor_af_table.neighbor.bgp_nbr_gshut_")
	proto.RegisterType((*BgpNbrBag)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.vrfs.vrf.afs.af.neighbor_af_table.neighbor.bgp_nbr_bag")
}

func init() { proto.RegisterFile("bgp_nbr_bag.proto", fileDescriptor_be84ba08d516c4d3) }

var fileDescriptor_be84ba08d516c4d3 = []byte{
	// 7865 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0xbc, 0xf9, 0x97, 0x1c, 0x47,
	0x72, 0x1f, 0xfe, 0x9a, 0xe4, 0x02, 0x83, 0x9c, 0x69, 0xcc, 0x4c, 0xcd, 0x55, 0x18, 0x0c, 0x0e,
	0x0e, 0x88, 0x8b, 0x00, 0x06, 0x24, 0x88, 0x9d, 0x25, 0xb9, 0x5c, 0x72, 0x1b, 0x33, 0x03, 0x70,
	0x96, 0x73, 0xb1, 0x7a, 0x00, 0x6a, 0x75, 0x6c, 0x7d, 0xab, 0xab, 0xb2, 0x7b, 0x6a, 0xa7, 0xba,
	0xaa, 0x98, 0x59, 0x3d, 0x07, 0x76, 0x57, 0xbb, 0xd2, 0xee, 0x7e, 0x25, 0xcb, 0xb7, 0x2d, 0xaf,
	0x65, 0x59, 0x3e, 0x24, 0x5f, 0x5a, 0xdb, 0xb2, 0xbd, 0x3a, 0x2c, 0xdb, 0x5a, 0xf9, 0x94, 0x6d,
	0xc9, 0xcf, 0xef, 0xf9, 0x3d, 0xff, 0xea, 0xdf, 0xfd, 0x57, 0xd8, 0xef, 0xf9, 0x45, 0x44, 0x66,
	0x56, 0x56, 0x77, 0x0f, 0x49, 0xff, 0x62, 0xe0, 0x17, 0x60, 0x3a, 0xe3, 0x13, 0x91, 0x91, 0x47,
	0x45, 0x46, 0x46, 0x44, 0x15, 0x9b, 0x6c, 0x75, 0x72, 0x3f, 0x6d, 0x09, 0xbf, 0x15, 0x74, 0x96,
	0x72, 0x91, 0x15, 0x99, 0xd3, 0x0d, 0x63, 0x19, 0x66, 0x7e, 0x9c, 0x49, 0xff, 0x48, 0xf8, 0x71,
	0x7e, 0x70, 0xdf, 0x07, 0x50, 0x96, 0x73, 0xb1, 0xd4, 0xea, 0xe4, 0x4b, 0x71, 0x2a, 0x8b, 0x20,
	0x0d, 0xb9, 0x34, 0x7f, 0x99, 0x3f, 0x7c, 0xf8, 0x2f, 0x6a, 0x1d, 0x2f, 0x1d, 0x88, 0xb6, 0x84,
	0x7f, 0x96, 0x82, 0xb6, 0x5c, 0x0a, 0xda, 0x4b, 0x29, 0x8f, 0x3b, 0x7b, 0xad, 0x4c, 0xf8, 0x41,
	0xdb, 0x2f, 0x82, 0x56, 0xc2, 0x4d, 0xcb, 0xe2, 0x0f, 0x6a, 0x6c, 0xc2, 0x52, 0xc2, 0xff, 0x60,
	0xed, 0xab, 0x4d, 0xe7, 0x0a, 0xab, 0x1b, 0x99, 0x69, 0xd0, 0xe5, 0x6e, 0xed, 0x72, 0xed, 0xc6,
	0x19, 0x6f, 0x4c, 0x37, 0x6e, 0x05, 0x5d, 0xee, 0x9c, 0x63, 0x23, 0x07, 0xa2, 0x4d, 0xf4, 0x17,
	0x90, 0x7e, 0xfa, 0x40, 0xb4, 0x91, 0x34, 0xc7, 0x4e, 0x07, 0x8a, 0xf2, 0x22, 0x52, 0x4e, 0x05,
	0x44, 0xb8, 0xc9, 0x26, 0x4a, 0x5d, 0xa2, 0x48, 0x70, 0x29, 0xdd, 0x97, 0x10, 0x31, 0xae, 0xdb,
	0x1b, 0xd4, 0xbc, 0xf8, 0x05, 0xd2, 0x2b, 0xb9, 0x77, 0x90, 0xa7, 0x88, 0xf5, 0x0b, 0xd0, 0xab,
	0xfc, 0x0d, 0xbc, 0xb5, 0xcb, 0x2f, 0xde, 0xa8, 0x7b, 0x63, 0xd8, 0xa8, 0x19, 0xdf, 0x61, 0x33,
	0x25, 0x63, 0x57, 0xe6, 0x87, 0xff, 0x57, 0xdc, 0x5b, 0xcc, 0x05, 0x6e, 0x9c, 0x77, 0x29, 0xf2,
	0x2c, 0x89, 0xc3, 0x63, 0x2d, 0xe0, 0x1e, 0x9b, 0x19, 0x6c, 0x2f, 0x05, 0x4d, 0x01, 0xb1, 0xa9,
	0x68, 0x83, 0xf2, 0x96, 0x4f, 0x90, 0xb7, 0xfc, 0x49, 0xf2, 0x96, 0xfb, 0xe5, 0xfd, 0xb7, 0x3a,
	0x1b, 0x03, 0x81, 0x00, 0x2d, 0x8e, 0x73, 0xee, 0x4c, 0xb0, 0x17, 0x83, 0x76, 0xac, 0x56, 0x08,
	0xfe, 0x74, 0x5e, 0x66, 0x63, 0xa8, 0xa6, 0x96, 0x46, 0x8b, 0x33, 0x0a, 0x6d, 0x4a, 0x8a, 0x73,
	0x9b, 0x39, 0x08, 0xe9, 0x86, 0x81, 0x2c, 0x0c, 0x90, 0xd6, 0x6a, 0x02, 0x28, 0x9b, 0x40, 0xe8,
	0x47, 0x27, 0x41, 0x8b, 0x27, 0x7d, 0xeb, 0x86, 0xe8, 0x0d, 0x20, 0x68, 0xf4, 0x12, 0xc3, 0x89,
	0xf0, 0x8b, 0x5e, 0x9a, 0x5a, 0xf0, 0xcf, 0x21, 0x7c, 0x12, 0x48, 0xbb, 0x48, 0xd1, 0xf8, 0x1b,
	0x6c, 0x82, 0x74, 0x89, 0x4a, 0x4d, 0x4e, 0x21, 0xf8, 0x2c, 0x6a, 0x12, 0x19, 0x3d, 0xae, 0xb3,
	0x71, 0x68, 0xb1, 0x97, 0xf0, 0x74, 0x09, 0x2c, 0x17, 0xd1, 0x79, 0x9d, 0x4d, 0xab, 0x96, 0x80,
	0x86, 0xa8, 0xd0, 0x23, 0x88, 0x9e, 0xd2, 0xb4, 0xcd, 0x92, 0xa4, 0x26, 0x6d, 0xd9, 0x08, 0x3e,
	0x63, 0x26, 0x6d, 0xb9, 0x3a, 0x0d, 0xcb, 0x7d, 0x93, 0xc6, 0xcc, 0x34, 0x2c, 0x0f, 0x99, 0xb4,
	0xe5, 0xbe, 0x49, 0x1b, 0x2d, 0xd1, 0x95, 0x49, 0xa3, 0xa1, 0x2d, 0xdb, 0x43, 0x1b, 0x33, 0x43,
	0x5b, 0xb6, 0x86, 0xa6, 0xf6, 0x0c, 0xee, 0xed, 0x8a, 0x1e, 0x75, 0x33, 0x36, 0x20, 0x56, 0x54,
	0xf9, 0xad, 0x1a, 0x73, 0x68, 0xe7, 0x1f, 0xe4, 0x89, 0x34, 0x1c, 0x67, 0x2f, 0xd7, 0x6e, 0x8c,
	0xde, 0xfb, 0xf6, 0xd2, 0xff, 0x53, 0x83, 0xb3, 0xd4, 0xff, 0x50, 0x7b, 0x13, 0xf8, 0xeb, 0x49,
	0x9e, 0x48, 0x6b, 0x8c, 0xa2, 0xf0, 0xc3, 0x2c, 0x95, 0x85, 0x08, 0xe2, 0xb4, 0x1c, 0xe3, 0x38,
	0x8d, 0x51, 0x14, 0x2b, 0x86, 0xa6, 0x79, 0x6e, 0xe2, 0x2e, 0x5a, 0xee, 0xda, 0x33, 0x38, 0x41,
	0x96, 0x45, 0xb7, 0x57, 0xa1, 0xf7, 0x2b, 0xd0, 0x49, 0x03, 0xbd, 0x6f, 0x43, 0x6f, 0xeb, 0x89,
	0xe3, 0x36, 0xd8, 0xa1, 0x45, 0x44, 0xca, 0x9a, 0x85, 0x5e, 0x64, 0xf5, 0x44, 0xfa, 0xd6, 0x0c,
	0x4f, 0xd1, 0x26, 0x4a, 0xe4, 0x86, 0x19, 0xdb, 0xef, 0x98, 0xb5, 0x30, 0xa6, 0x09, 0x90, 0xd3,
	0xb8, 0x16, 0xdf, 0xab, 0x3d, 0xb3, 0xc5, 0xb0, 0x0c, 0xa5, 0x1a, 0xd9, 0xa6, 0xcc, 0x0f, 0xab,
	0xbb, 0xee, 0xbe, 0xdf, 0x4e, 0xb2, 0x43, 0x99, 0xf3, 0xd0, 0xe8, 0x3d, 0x53, 0x3e, 0x51, 0x0f,
	0x15, 0xad, 0x6f, 0xa7, 0x0e, 0xf2, 0xcc, 0x96, 0x3b, 0xb5, 0x9f, 0xe7, 0x4d, 0xe6, 0xea, 0x27,
	0x7c, 0x80, 0x6d, 0x0e, 0xd9, 0x66, 0x15, 0x7d, 0x38, 0xe7, 0xf2, 0x50, 0x4e, 0xd7, 0x70, 0x2e,
	0x0f, 0xe1, 0xfc, 0xc3, 0x1a, 0x9b, 0x55, 0x66, 0xdd, 0xef, 0xb3, 0xc3, 0xe7, 0x70, 0x55, 0x7e,
	0xe1, 0x59, 0xac, 0xca, 0xb0, 0x03, 0x48, 0x9f, 0x30, 0x3b, 0xf6, 0x89, 0xa0, 0xf5, 0x5f, 0x1e,
	0xa2, 0xff, 0xfc, 0x33, 0xd5, 0x7f, 0x79, 0xa8, 0xfe, 0xcb, 0x7d, 0xfa, 0x2f, 0xfe, 0xef, 0x1a,
	0x3b, 0x8b, 0x1e, 0x48, 0x56, 0xb4, 0x53, 0x38, 0xd2, 0x7c, 0xe7, 0x3d, 0xb6, 0x50, 0xc4, 0x5d,
	0xee, 0xcb, 0x18, 0x34, 0x48, 0xc0, 0xcc, 0xa5, 0x59, 0x11, 0xb7, 0xe3, 0x30, 0x28, 0xe2, 0x2c,
	0xc5, 0xc3, 0xae, 0xee, 0x9d, 0x03, 0x4c, 0x13, 0x20, 0x1b, 0x81, 0x2c, 0xb6, 0x2c, 0x80, 0xb3,
	0xcc, 0xe6, 0x6c, 0x06, 0x9f, 0x0b, 0x91, 0x09, 0x3f, 0xcc, 0x22, 0x72, 0x55, 0xea, 0xde, 0x8c,
	0x4d, 0x5e, 0x03, 0xea, 0x4a, 0x16, 0x71, 0xe7, 0x1d, 0x36, 0x3f, 0x84, 0x4f, 0xf6, 0x5a, 0xc8,
	0xfa, 0x22, 0xb2, 0xba, 0x03, 0xac, 0x4d, 0xa2, 0x3b, 0xf7, 0xd9, 0xec, 0x80, 0xae, 0x7e, 0x14,
	0x14, 0x81, 0xfb, 0x12, 0x1e, 0xe8, 0xd3, 0x49, 0x9f, 0x9e, 0xab, 0x41, 0x11, 0x2c, 0xfe, 0xb0,
	0xce, 0xea, 0x30, 0xfe, 0x9c, 0x83, 0x37, 0xd5, 0x12, 0xbe, 0x73, 0x95, 0x9d, 0x15, 0x3c, 0x88,
	0xfc, 0x62, 0x4f, 0x64, 0x45, 0x91, 0x70, 0xa9, 0x06, 0x5c, 0x87, 0xd6, 0x5d, 0xdd, 0x88, 0xc6,
	0x29, 0x3b, 0x34, 0xa8, 0xc8, 0x07, 0xb2, 0x1a, 0xdf, 0x44, 0x92, 0x1d, 0x6a, 0x64, 0xe4, 0xf1,
	0x20, 0x82, 0x63, 0x79, 0x2f, 0xee, 0xec, 0xf5, 0xc3, 0x69, 0x4c, 0x93, 0x40, 0xaa, 0xe2, 0x1f,
	0xb0, 0x8b, 0xfd, 0x6b, 0xd0, 0xc7, 0xfa, 0x12, 0xb2, 0xce, 0x57, 0x56, 0xa1, 0x2a, 0xe3, 0x06,
	0x9b, 0xc0, 0x81, 0x84, 0x41, 0x92, 0x48, 0x3f, 0xcc, 0x7a, 0x69, 0x81, 0x7e, 0x40, 0xdd, 0xc3,
	0x01, 0xae, 0x40, 0xf3, 0x0a, 0xb4, 0x82, 0x76, 0x88, 0xec, 0x72, 0x29, 0x83, 0x0e, 0xd7, 0xe0,
	0x53, 0xa4, 0x1d, 0x90, 0x36, 0x15, 0x85, 0xf0, 0xd7, 0xd8, 0x38, 0x4c, 0xac, 0xdf, 0x3a, 0x2e,
	0xb8, 0x24, 0x75, 0x4e, 0xd3, 0x1c, 0x41, 0xf3, 0x03, 0x68, 0x45, 0x0d, 0x2e, 0xb3, 0xb1, 0x38,
	0xf3, 0x69, 0x36, 0xe3, 0x2e, 0x47, 0x0f, 0xa0, 0xee, 0xb1, 0x38, 0x03, 0xea, 0x6e, 0xdc, 0xe5,
	0xce, 0xab, 0x6c, 0xf2, 0x50, 0xc4, 0x05, 0xaf, 0x28, 0x79, 0x06, 0x61, 0xe3, 0x48, 0xb0, 0xb4,
	0xbc, 0xcd, 0x1c, 0xab, 0x57, 0xa0, 0x16, 0x3c, 0x45, 0x0f, 0xa0, 0xee, 0x4d, 0x98, 0x8e, 0x3f,
	0xa2, 0x76, 0x38, 0x0e, 0xe2, 0xcc, 0x27, 0xe1, 0xd8, 0xf9, 0x28, 0x02, 0x47, 0xe3, 0x0c, 0x10,
	0x1c, 0x7b, 0xbf, 0xce, 0x26, 0x70, 0x6a, 0x25, 0x4f, 0xe1, 0x9f, 0x8f, 0xfd, 0x34, 0xc3, 0x83,
	0xbf, 0xee, 0xd5, 0xa1, 0xbd, 0xc9, 0xd3, 0xa2, 0xc9, 0x3f, 0xde, 0xca, 0x9c, 0x2f, 0xb2, 0x79,
	0x92, 0x24, 0x7b, 0xad, 0x8e, 0xc8, 0x7a, 0x79, 0x45, 0xdf, 0x3a, 0xb2, 0xcc, 0x21, 0xa2, 0xa9,
	0x00, 0x96, 0xde, 0x0d, 0x76, 0xa1, 0x8f, 0xb9, 0x6f, 0x9e, 0xcf, 0xd2, 0x52, 0x56, 0xf8, 0xab,
	0x13, 0x7e, 0x9b, 0x39, 0x86, 0x39, 0x89, 0x61, 0x33, 0xc0, 0x88, 0xc6, 0x69, 0xe8, 0x9a, 0xb2,
	0x11, 0xcb, 0x02, 0x87, 0xf5, 0x79, 0x46, 0xba, 0xf8, 0x1f, 0xf7, 0x78, 0xaf, 0x3a, 0xb5, 0x13,
	0xc8, 0x32, 0x8d, 0xe4, 0x0f, 0x81, 0x6a, 0xe9, 0x69, 0x06, 0x49, 0x6c, 0x7d, 0x4a, 0x4e, 0x5a,
	0x83, 0x44, 0xce, 0xaa, 0x86, 0x37, 0xd8, 0x84, 0xcd, 0x8c, 0xfa, 0x39, 0xb4, 0xd9, 0x4a, 0x16,
	0xd4, 0x6e, 0x99, 0xcd, 0xc5, 0x69, 0x2b, 0xeb, 0xa5, 0x91, 0xdf, 0xcb, 0xa3, 0xa0, 0x28, 0x7b,
	0xc2, 0x13, 0xbb, 0xee, 0xcd, 0x28, 0xf2, 0x63, 0xa4, 0xea, 0x6e, 0xc0, 0x2c, 0x9d, 0xc0, 0x47,
	0xbd, 0x4d, 0x93, 0x59, 0x1a, 0xca, 0xac, 0xf7, 0x5a, 0x37, 0x38, 0x8a, 0xbb, 0xbd, 0x2e, 0x6d,
	0x49, 0x19, 0x3f, 0xe5, 0x78, 0x84, 0xd6, 0xbd, 0x71, 0x45, 0x80, 0x7d, 0xd9, 0x8c, 0x9f, 0x72,
	0xc7, 0x65, 0xa7, 0x83, 0xb0, 0x88, 0x0f, 0x38, 0x1d, 0x98, 0x75, 0x4f, 0xff, 0x84, 0x67, 0xa5,
	0x1d, 0xc4, 0xf0, 0x18, 0xe6, 0x19, 0x38, 0x80, 0x0a, 0x35, 0x47, 0xcf, 0x0a, 0x91, 0x76, 0x32,
	0x59, 0x34, 0x14, 0x7e, 0x9e, 0x8d, 0xe4, 0x81, 0x94, 0x08, 0x72, 0x11, 0x64, 0x7e, 0x3b, 0xb7,
	0xd8, 0xa4, 0xe0, 0x5f, 0xe7, 0x61, 0x01, 0xd2, 0x34, 0xe8, 0x1c, 0xad, 0xaa, 0x26, 0xec, 0x68,
	0xf0, 0x4d, 0x36, 0x41, 0x9d, 0xf9, 0x61, 0x96, 0x24, 0xb1, 0x04, 0x53, 0x3c, 0x4f, 0xda, 0x53,
	0xfb, 0x8a, 0x6e, 0x06, 0xb9, 0x4a, 0x9c, 0x85, 0x3d, 0x4f, 0x72, 0x15, 0xa1, 0x04, 0x3f, 0x60,
	0x17, 0xc3, 0x2c, 0x2d, 0x44, 0x96, 0xf8, 0x85, 0x7e, 0x58, 0xf7, 0xe8, 0x3f, 0x11, 0x77, 0x3a,
	0x5c, 0xb8, 0x0b, 0xb4, 0x3f, 0x15, 0x6a, 0x97, 0x9e, 0x5e, 0x84, 0xec, 0x12, 0xc2, 0x59, 0x65,
	0x97, 0x2c, 0x19, 0xea, 0xa1, 0xab, 0x0a, 0xb9, 0x80, 0x42, 0xce, 0x1b, 0x21, 0xf4, 0x14, 0x56,
	0xa4, 0x5c, 0x65, 0x67, 0x53, 0x5e, 0x1c, 0x66, 0x62, 0x1f, 0xce, 0xbd, 0xa2, 0x27, 0xdd, 0x8b,
	0xf4, 0x30, 0xaa, 0xd6, 0x26, 0x36, 0x3a, 0x97, 0xd8, 0xa8, 0xe0, 0x92, 0x17, 0x7e, 0x3b, 0x09,
	0x3a, 0xd2, 0xbd, 0x44, 0x46, 0x05, 0x9b, 0x1e, 0x42, 0x8b, 0x73, 0x9e, 0x9d, 0x01, 0x4b, 0x4e,
	0xe4, 0xcb, 0x34, 0xe7, 0x69, 0x4b, 0x10, 0x71, 0x86, 0x9d, 0x42, 0x62, 0xe4, 0xbe, 0x7c, 0xb9,
	0x76, 0x63, 0xd2, 0xfb, 0x1c, 0x50, 0x22, 0xb8, 0x9e, 0x92, 0x50, 0xc1, 0x0b, 0x11, 0x73, 0xe9,
	0x2e, 0x22, 0xdf, 0x18, 0x36, 0x7a, 0xd4, 0xe6, 0x5c, 0x60, 0x4c, 0x1e, 0xa7, 0xa1, 0x92, 0x7c,
	0x05, 0x11, 0x67, 0xa0, 0x85, 0x44, 0xdf, 0x61, 0x53, 0xa9, 0x14, 0x78, 0xb0, 0xfb, 0x51, 0x76,
	0x98, 0xaa, 0x27, 0xe7, 0x15, 0x9a, 0xf8, 0x54, 0x8a, 0xed, 0x9c, 0x8b, 0xd5, 0xec, 0x30, 0xa5,
	0x47, 0xe6, 0x2e, 0x9b, 0xa6, 0x03, 0x4b, 0x0a, 0x5f, 0x86, 0x59, 0xce, 0x23, 0x1f, 0x64, 0xb9,
	0x57, 0x69, 0x2b, 0xe1, 0x71, 0x25, 0x45, 0x13, 0x29, 0xcd, 0xe3, 0x34, 0x5c, 0xfc, 0xf1, 0x8b,
	0x74, 0x2b, 0x37, 0x67, 0x55, 0xd0, 0xf6, 0x61, 0xea, 0x65, 0xaf, 0xe5, 0x93, 0x6d, 0xc8, 0x79,
	0x1a, 0xc5, 0x69, 0x47, 0x3f, 0x19, 0x4a, 0x01, 0x3a, 0xbf, 0xce, 0xcb, 0x5e, 0xeb, 0x11, 0xa0,
	0x76, 0x08, 0xa4, 0x9e, 0x0d, 0xd2, 0xe5, 0x0e, 0x73, 0x72, 0x91, 0x85, 0x5c, 0x4a, 0x5e, 0x1e,
	0x03, 0xea, 0x34, 0x9b, 0x34, 0x14, 0xf3, 0x2c, 0x5e, 0x61, 0x75, 0xb4, 0x99, 0x06, 0x49, 0x07,
	0xd9, 0x18, 0x34, 0x1a, 0x50, 0x83, 0x5d, 0x90, 0x79, 0x12, 0x17, 0xfe, 0x5e, 0x26, 0xe2, 0xa7,
	0x59, 0xaa, 0x1f, 0xdb, 0x42, 0x04, 0xa9, 0xec, 0xc6, 0x85, 0x3e, 0xc2, 0x10, 0xf4, 0x3e, 0x61,
	0xe8, 0xb1, 0xdd, 0x55, 0x08, 0x78, 0xe6, 0x87, 0x8a, 0x68, 0x25, 0x59, 0xb8, 0xcf, 0x23, 0x75,
	0x9c, 0x9d, 0x1b, 0x94, 0xf0, 0x80, 0x00, 0xce, 0x1a, 0xbb, 0x54, 0x15, 0x70, 0x18, 0x17, 0x7b,
	0x91, 0x08, 0x0e, 0x4b, 0x2d, 0xe8, 0x94, 0x5b, 0xb0, 0x65, 0x7c, 0xa4, 0x40, 0x46, 0x8f, 0x15,
	0x76, 0xf1, 0x04, 0x31, 0x5a, 0x93, 0xd3, 0x6a, 0x8e, 0x87, 0x48, 0x51, 0xba, 0x2c, 0xfe, 0xc9,
	0x03, 0x36, 0xaa, 0x83, 0x3d, 0xb0, 0x72, 0x56, 0x9c, 0xa6, 0x56, 0x89, 0xd3, 0x7c, 0x85, 0x2d,
	0xc6, 0xd2, 0x37, 0x2e, 0x9e, 0xc8, 0x7a, 0x05, 0xf7, 0x05, 0x6f, 0x27, 0x3c, 0x2c, 0xc0, 0x91,
	0x4a, 0x62, 0x9e, 0x16, 0xb8, 0x38, 0x23, 0xde, 0xc5, 0x58, 0x6e, 0x29, 0xa0, 0x07, 0x38, 0x4f,
	0xc3, 0x56, 0x10, 0xe5, 0x5c, 0x65, 0xe3, 0xb1, 0xf4, 0x13, 0xde, 0x09, 0xc2, 0x63, 0x3f, 0xe7,
	0xbe, 0x28, 0x70, 0xad, 0x46, 0xbc, 0xb1, 0x58, 0x6e, 0x60, 0xeb, 0x0e, 0xf7, 0x0a, 0xe7, 0x0d,
	0x36, 0x6b, 0x77, 0x19, 0xb4, 0xfd, 0x30, 0xc8, 0xc1, 0xaf, 0xc4, 0x45, 0x1a, 0xf1, 0xa6, 0xca,
	0x6e, 0x1a, 0xed, 0x15, 0x22, 0x39, 0xbb, 0xec, 0x7a, 0x2c, 0x7d, 0x99, 0xb5, 0xe1, 0xa9, 0x09,
	0xb3, 0xb4, 0x1d, 0x77, 0x7a, 0x82, 0xfc, 0x2e, 0x6d, 0xa9, 0x83, 0x24, 0xc9, 0x0e, 0xd5, 0x42,
	0x8d, 0x78, 0x57, 0x62, 0xd9, 0xcc, 0xda, 0x85, 0x57, 0x05, 0xaf, 0x13, 0xb6, 0x41, 0x50, 0x67,
	0x9b, 0x5d, 0x8d, 0xa5, 0xdf, 0x93, 0x7c, 0xb8, 0xe4, 0x20, 0x39, 0x0c, 0x8e, 0xa5, 0x9f, 0xa5,
	0xb8, 0x70, 0x23, 0xde, 0xe5, 0x58, 0x3e, 0x96, 0x7c, 0x88, 0xd8, 0x06, 0x02, 0xb7, 0xd1, 0xc0,
	0x09, 0xde, 0xcd, 0x0e, 0xb8, 0x9f, 0x8b, 0xf8, 0x00, 0xb6, 0x4f, 0x20, 0xfd, 0xb6, 0xc8, 0xba,
	0x6a, 0x37, 0x51, 0x1c, 0x63, 0xc4, 0x9b, 0x27, 0xd4, 0x0e, 0x81, 0x1a, 0xf2, 0xa1, 0xc8, 0xba,
	0xb4, 0x9b, 0xa4, 0xf3, 0xd3, 0xec, 0xf6, 0xa0, 0x0c, 0x9e, 0x16, 0xb1, 0x80, 0xbf, 0xf2, 0xa0,
	0xd8, 0xab, 0x4a, 0x1c, 0x41, 0x89, 0xd7, 0xfa, 0x24, 0xae, 0x21, 0x43, 0x03, 0xf1, 0xb6, 0xf4,
	0x0f, 0xd9, 0xb5, 0x13, 0x34, 0xac, 0x9e, 0x78, 0x14, 0x18, 0x19, 0xf1, 0x5e, 0x1e, 0xa2, 0xe9,
	0xba, 0x7d, 0xee, 0x49, 0x67, 0x9f, 0xdd, 0xff, 0x4c, 0x0a, 0xf7, 0x77, 0xc0, 0xb0, 0x83, 0x3b,
	0x9f, 0xa2, 0x78, 0x5f, 0x67, 0xef, 0xb1, 0x05, 0x73, 0xed, 0x3b, 0x08, 0x92, 0x38, 0x52, 0xce,
	0xb7, 0x1f, 0x4b, 0xdc, 0x43, 0xa3, 0x28, 0xf4, 0x9c, 0xc6, 0x3c, 0x31, 0x90, 0xd5, 0x75, 0x04,
	0x38, 0x3b, 0xec, 0xaa, 0x11, 0x20, 0x78, 0x14, 0x0b, 0x1e, 0x16, 0x43, 0x25, 0x8d, 0xd1, 0xf8,
	0x35, 0xd8, 0x53, 0xd8, 0x41, 0x89, 0xaf, 0xb0, 0xb3, 0x99, 0x10, 0xca, 0x2c, 0xe2, 0x33, 0x46,
	0x21, 0x9a, 0xb1, 0x4c, 0x08, 0xb4, 0x82, 0xf8, 0xa4, 0x5d, 0x63, 0xe3, 0x25, 0x2a, 0x4e, 0x23,
	0x7e, 0xa4, 0x9c, 0xb1, 0xba, 0x86, 0xad, 0x43, 0x23, 0x6c, 0xa1, 0x58, 0xfa, 0x00, 0x15, 0x59,
	0x66, 0x22, 0x22, 0xbe, 0xde, 0x6f, 0x3c, 0x42, 0x5f, 0x6c, 0xc4, 0x9b, 0x8f, 0xe5, 0xb6, 0x10,
	0x5e, 0x96, 0xe9, 0xc8, 0xc8, 0x8a, 0x41, 0x80, 0xcd, 0x0c, 0xa2, 0x03, 0x2e, 0x8a, 0x58, 0x72,
	0x3f, 0x68, 0xc7, 0xe8, 0x8b, 0x8d, 0x78, 0x63, 0xa6, 0xb1, 0xd1, 0x8e, 0xc1, 0xbb, 0xa8, 0x80,
	0x7c, 0xc1, 0x33, 0xd1, 0x41, 0xe7, 0x6b, 0xc4, 0x9b, 0xb4, 0xa1, 0x1e, 0x10, 0xe0, 0x9a, 0x5f,
	0xc5, 0x47, 0x6a, 0xa2, 0x1c, 0x7a, 0x6c, 0x6d, 0x8e, 0x55, 0x22, 0x81, 0xad, 0xe7, 0x69, 0x18,
	0xe4, 0xb2, 0x97, 0xd0, 0xec, 0xc2, 0xb5, 0x4f, 0xf9, 0x5e, 0x93, 0x15, 0xca, 0xee, 0x71, 0x8e,
	0x6e, 0x53, 0xd9, 0x85, 0x28, 0x08, 0x3d, 0xad, 0x1c, 0x0f, 0x4d, 0xf0, 0x0a, 0xc4, 0x3e, 0x62,
	0x2f, 0xf7, 0xa9, 0xc3, 0xdb, 0xfe, 0x81, 0x68, 0xfb, 0x71, 0x37, 0x37, 0xaa, 0xcd, 0xa0, 0x6a,
	0x0b, 0x15, 0xd5, 0x78, 0xfb, 0x89, 0x68, 0xaf, 0x77, 0x73, 0xad, 0xe3, 0x2e, 0xbb, 0x51, 0x0a,
	0xe2, 0x07, 0x79, 0x7a, 0x70, 0xff, 0x44, 0x79, 0xb3, 0x28, 0x6f, 0xd1, 0xe0, 0xd7, 0x10, 0xfe,
	0xd9, 0xa4, 0x2e, 0x9f, 0x28, 0x75, 0x6e, 0x98, 0xd4, 0xe5, 0x61, 0x52, 0xd7, 0xd8, 0xe5, 0xea,
	0xa0, 0x41, 0x94, 0xe0, 0x15, 0x69, 0x2e, 0x4a, 0x3b, 0x6f, 0x8f, 0xf9, 0x89, 0x68, 0x7b, 0xdc,
	0x12, 0xe3, 0xb1, 0xeb, 0x43, 0x87, 0x3c, 0x44, 0xda, 0x39, 0x7a, 0x0a, 0x06, 0x47, 0xfc, 0xe9,
	0x32, 0x97, 0x4f, 0x92, 0x39, 0x3f, 0x4c, 0xe6, 0xf2, 0x10, 0x99, 0xcb, 0xcc, 0xad, 0x0e, 0x97,
	0x67, 0xbe, 0x40, 0xbf, 0xf1, 0x18, 0x7d, 0xcc, 0x11, 0x6f, 0xda, 0x1e, 0xe6, 0x5a, 0xe6, 0x81,
	0xbf, 0x78, 0xec, 0xbc, 0xc9, 0xce, 0x29, 0xdb, 0x0d, 0xb6, 0x3d, 0xe5, 0x47, 0x70, 0x9a, 0xe6,
	0x7e, 0x92, 0x85, 0x41, 0x82, 0x2e, 0xe6, 0x88, 0x37, 0x43, 0x80, 0xc7, 0x92, 0x6f, 0xf1, 0xa3,
	0xe2, 0xfd, 0x2c, 0xdf, 0x00, 0x22, 0x5c, 0x4c, 0xd0, 0xdb, 0x08, 0xb3, 0x6e, 0xb7, 0x97, 0xc6,
	0xc5, 0x31, 0x38, 0x99, 0xfa, 0xac, 0x42, 0xc7, 0x72, 0xc4, 0x9b, 0x03, 0xc4, 0x8a, 0x06, 0xec,
	0x66, 0xfa, 0xb4, 0x72, 0x1e, 0xb2, 0xcb, 0xc8, 0xdc, 0x91, 0x7b, 0xbd, 0x93, 0x44, 0x5c, 0xa4,
	0x1d, 0x09, 0xb8, 0x47, 0x00, 0x1b, 0x26, 0x67, 0x83, 0x5d, 0x41, 0x39, 0xfc, 0xa8, 0xe0, 0x69,
	0xc4, 0xa3, 0x13, 0x44, 0x5d, 0x42, 0x51, 0x97, 0x00, 0xba, 0xa6, 0x90, 0xc3, 0xa4, 0xbd, 0xc3,
	0xe6, 0xcd, 0x61, 0x1b, 0xf1, 0x76, 0xd0, 0x4b, 0x0a, 0x3f, 0x13, 0x71, 0x27, 0x4e, 0x83, 0x82,
	0xa3, 0xcf, 0x3a, 0xe2, 0xb9, 0x1a, 0xb1, 0x4a, 0x80, 0x6d, 0x4d, 0x77, 0x2e, 0xb2, 0x51, 0x34,
	0x47, 0x6d, 0xbc, 0xb9, 0xa2, 0x23, 0x3b, 0xe2, 0x9d, 0x01, 0xdb, 0xd3, 0x86, 0x3b, 0x2b, 0x46,
	0xbf, 0xa5, 0xf6, 0x95, 0x22, 0xde, 0xe6, 0x02, 0x4c, 0xd4, 0x22, 0xc2, 0x26, 0x62, 0x49, 0x66,
	0x7b, 0x55, 0xb5, 0x3b, 0xaf, 0xb3, 0x99, 0x52, 0x5a, 0xe4, 0xcb, 0x70, 0x8f, 0x47, 0xbd, 0x84,
	0x47, 0xe8, 0xe0, 0x8e, 0x78, 0x8e, 0x96, 0x1b, 0x35, 0x35, 0x05, 0xcc, 0x94, 0x92, 0xae, 0x0c,
	0x6c, 0xaf, 0xdb, 0xe2, 0x42, 0x79, 0xba, 0x93, 0x44, 0x22, 0x2b, 0x8b, 0x04, 0x50, 0xa8, 0x1d,
	0x27, 0x05, 0xaf, 0x9a, 0x5a, 0x72, 0x74, 0x27, 0x88, 0x62, 0x59, 0xdb, 0x25, 0x36, 0x55, 0xaa,
	0x6f, 0xc2, 0x1e, 0xee, 0x35, 0x32, 0x82, 0x5a, 0x7f, 0x13, 0xec, 0x00, 0x0b, 0x55, 0xe2, 0x13,
	0x1e, 0x1c, 0xc4, 0x69, 0xc7, 0xbd, 0x8e, 0xe8, 0x71, 0x8d, 0xde, 0xa0, 0x66, 0x70, 0x74, 0x0e,
	0x72, 0xe3, 0x47, 0x76, 0x78, 0xea, 0xf3, 0x14, 0xb6, 0x75, 0xe4, 0xde, 0x20, 0x8b, 0x79, 0x90,
	0x2b, 0x17, 0xf2, 0x11, 0x4f, 0xd7, 0x88, 0x04, 0xe6, 0xbf, 0x8f, 0x49, 0xdd, 0x6a, 0x0c, 0xf3,
	0x4d, 0x32, 0xff, 0x36, 0xb3, 0xba, 0xd5, 0x68, 0x19, 0x5f, 0x62, 0xe7, 0x63, 0x8c, 0x4d, 0xe3,
	0xd9, 0x8b, 0x33, 0x0d, 0x17, 0x05, 0xb4, 0xb3, 0x41, 0xe2, 0xbe, 0x4a, 0x4b, 0x1e, 0xcb, 0x06,
	0x21, 0x60, 0xbe, 0xb7, 0x4b, 0x3a, 0x78, 0xa0, 0x16, 0xbb, 0xe0, 0x21, 0x87, 0xdb, 0x9d, 0x2d,
	0xe1, 0x16, 0x99, 0x18, 0x23, 0xc1, 0x23, 0x8c, 0x2d, 0xc4, 0x4e, 0x00, 0x1e, 0x70, 0x81, 0xd7,
	0xc2, 0xdb, 0x64, 0xc9, 0x75, 0xfb, 0x13, 0x6a, 0x76, 0x66, 0xd9, 0xa9, 0x43, 0x68, 0x2a, 0xdc,
	0x3b, 0x08, 0x50, 0xbf, 0xe0, 0x9e, 0xdf, 0x0d, 0x8e, 0xfc, 0x5c, 0xf0, 0x76, 0x7c, 0xe4, 0x27,
	0x31, 0x78, 0xd0, 0x4b, 0x74, 0xcf, 0xef, 0x06, 0x47, 0x3b, 0xd8, 0xbc, 0x01, 0xad, 0xce, 0x3b,
	0xec, 0x3c, 0x3c, 0xe8, 0x16, 0xfa, 0x30, 0x10, 0x29, 0xdc, 0x4e, 0xb2, 0x34, 0x39, 0x76, 0xef,
	0xd2, 0x63, 0xdb, 0x93, 0x7c, 0x53, 0xf3, 0x7d, 0x44, 0xf4, 0xed, 0x34, 0x39, 0x86, 0x29, 0xb7,
	0x38, 0xa3, 0x58, 0x86, 0x81, 0x88, 0xe0, 0xe1, 0x13, 0x81, 0x0f, 0xa3, 0x93, 0xee, 0x6b, 0x34,
	0xe5, 0xa6, 0xd7, 0x55, 0xc2, 0xac, 0x01, 0x64, 0x07, 0x10, 0x70, 0x35, 0xb2, 0x64, 0xf0, 0xa3,
	0x90, 0xf3, 0xc8, 0x88, 0x22, 0x21, 0xaf, 0xd3, 0xa4, 0x19, 0x21, 0x6b, 0x08, 0x52, 0xa2, 0x48,
	0xca, 0x7b, 0x6c, 0xc1, 0x92, 0x02, 0xb7, 0x5a, 0xb9, 0x97, 0x25, 0x11, 0xdc, 0xc2, 0x42, 0x78,
	0xfa, 0xee, 0xd1, 0x1d, 0xc4, 0x88, 0xd8, 0xd5, 0x88, 0x1d, 0x02, 0x38, 0x9f, 0x67, 0x73, 0x96,
	0x00, 0xc1, 0x65, 0x11, 0x08, 0x15, 0xc1, 0x79, 0x83, 0xc2, 0x31, 0x86, 0xd7, 0x23, 0x22, 0x86,
	0x2b, 0xe0, 0x12, 0x8f, 0x8d, 0x5c, 0xfa, 0x41, 0x18, 0xf2, 0xbc, 0xe0, 0x91, 0x7b, 0x5f, 0x5d,
	0xe2, 0x15, 0xa1, 0xa1, 0xda, 0x9d, 0xeb, 0x6c, 0xdc, 0x80, 0xe1, 0x12, 0xc9, 0x23, 0xf7, 0xf3,
	0xb4, 0x2a, 0xba, 0xb9, 0x89, 0xad, 0x30, 0x1a, 0x03, 0xd4, 0x97, 0x98, 0xd4, 0x4f, 0xb3, 0xc2,
	0x6f, 0x83, 0x47, 0xe7, 0x2e, 0xd3, 0x68, 0x34, 0x46, 0xdf, 0x61, 0xd2, 0xad, 0xac, 0x78, 0x08,
	0x80, 0x4a, 0x4f, 0x11, 0x4f, 0x63, 0x1e, 0xb9, 0x5f, 0xa8, 0xf6, 0xb4, 0x8a, 0xad, 0xce, 0x5b,
	0xec, 0x5c, 0x1f, 0xd0, 0x4f, 0x33, 0x15, 0x23, 0x77, 0xdf, 0x44, 0x96, 0xd9, 0x2a, 0xcb, 0x56,
	0x46, 0xb1, 0xe9, 0x61, 0xac, 0xa2, 0x80, 0x09, 0x87, 0xdd, 0xf6, 0xd6, 0x30, 0x56, 0xaf, 0xd8,
	0x41, 0x2a, 0x9c, 0x15, 0xfd, 0xac, 0x60, 0xd9, 0x54, 0xb7, 0x6f, 0x53, 0x10, 0xab, 0xca, 0xbb,
	0x2d, 0xda, 0xaa, 0xdf, 0xfb, 0x6c, 0xb6, 0x9f, 0x59, 0x31, 0x7e, 0x91, 0x16, 0xaa, 0xca, 0xa8,
	0xb8, 0x96, 0xd8, 0x14, 0xd9, 0x3f, 0x3f, 0x6b, 0xfb, 0x2d, 0x2e, 0x0b, 0xda, 0x5a, 0xef, 0x90,
	0x31, 0x24, 0xd2, 0x76, 0xfb, 0x81, 0x26, 0xc0, 0x12, 0x54, 0xf1, 0x78, 0xa6, 0x88, 0x34, 0x48,
	0x88, 0xf1, 0x4b, 0xb4, 0x04, 0x36, 0xe3, 0x9a, 0x0d, 0x70, 0xee, 0xb2, 0xa9, 0x72, 0x67, 0xe8,
	0xa3, 0x36, 0x72, 0xdf, 0x45, 0x3e, 0xc7, 0xec, 0x0d, 0x43, 0xa9, 0x8c, 0xab, 0xc5, 0x6d, 0x9e,
	0xf7, 0xaa, 0xe3, 0x7a, 0xc0, 0x2d, 0x2e, 0xbb, 0x1b, 0xd9, 0xcb, 0x73, 0x81, 0x31, 0x00, 0xf7,
	0xcb, 0xd5, 0x6e, 0x9a, 0x86, 0x42, 0x41, 0x84, 0xfe, 0xbd, 0xe5, 0x36, 0x74, 0x10, 0xa1, 0x6f,
	0x47, 0x39, 0x77, 0xd0, 0xcc, 0xe7, 0x1c, 0x26, 0x42, 0x94, 0x17, 0xce, 0x07, 0xfa, 0x98, 0xda,
	0xe1, 0x5c, 0x6c, 0x0b, 0x73, 0xdb, 0xa4, 0x2b, 0x6a, 0xa9, 0xbb, 0x39, 0xb1, 0xdc, 0x15, 0x7d,
	0x45, 0x2d, 0x95, 0x57, 0x27, 0x96, 0xf3, 0x2e, 0x5b, 0x88, 0xa5, 0x36, 0x97, 0x25, 0x8b, 0xe9,
	0x6c, 0x55, 0x9b, 0x5d, 0x65, 0x2d, 0x35, 0xa3, 0xee, 0xf4, 0x2d, 0x76, 0x6e, 0xb0, 0x53, 0x25,
	0xce, 0x5d, 0x43, 0xe6, 0xd9, 0xbe, 0x7e, 0x95, 0x24, 0xb0, 0x3e, 0xfd, 0x5d, 0x6b, 0xb3, 0xad,
	0x7b, 0x7f, 0xa8, 0x4d, 0xb6, 0xd5, 0xbb, 0xfa, 0x53, 0x2b, 0xa0, 0xed, 0xbe, 0x51, 0xa0, 0x23,
	0x82, 0x90, 0xb7, 0x7b, 0x89, 0x36, 0x24, 0xee, 0xa3, 0xd2, 0xee, 0x6b, 0xd0, 0x23, 0x85, 0x51,
	0xe6, 0x44, 0x5d, 0x5f, 0xfa, 0x39, 0x31, 0xc8, 0xc6, 0x31, 0x98, 0xe5, 0xbe, 0xaf, 0xaf, 0x2f,
	0x7d, 0xac, 0x4d, 0x80, 0x3c, 0x4c, 0x82, 0x8e, 0xb3, 0xc5, 0x5e, 0xb1, 0x87, 0x33, 0x20, 0x4c,
	0x8f, 0x69, 0x5d, 0xdf, 0xca, 0xf5, 0x98, 0xfa, 0x24, 0xea, 0x81, 0x7d, 0xc8, 0xae, 0xd1, 0x81,
	0xe6, 0x97, 0x07, 0x22, 0xca, 0x88, 0x13, 0xf0, 0xa9, 0xac, 0x3d, 0xfa, 0x15, 0xf2, 0x4c, 0xf1,
	0x60, 0xdb, 0x51, 0x47, 0xe3, 0x8a, 0x41, 0x5a, 0x1b, 0x76, 0x13, 0x55, 0x3c, 0x51, 0xa4, 0xd6,
	0xdd, 0xfd, 0x80, 0x7c, 0xb4, 0x13, 0x04, 0x6a, 0xbd, 0x9d, 0x8f, 0xd8, 0x4d, 0x5b, 0x5c, 0x65,
	0xf1, 0x06, 0x94, 0xdc, 0x40, 0x99, 0xaf, 0x18, 0x99, 0xf6, 0x32, 0xf6, 0xeb, 0xd9, 0xc4, 0xb8,
	0xc9, 0x27, 0x09, 0x36, 0xaa, 0x6e, 0xd2, 0x2d, 0xe4, 0x64, 0xb1, 0x46, 0x5b, 0x9a, 0x4f, 0xf0,
	0xaa, 0xd3, 0x3d, 0x9f, 0xa7, 0x61, 0x86, 0x81, 0xc0, 0x61, 0x32, 0xb7, 0xf4, 0x7c, 0xae, 0x1d,
	0x15, 0x5b, 0x7b, 0x6b, 0x0a, 0x3a, 0x44, 0xe4, 0x3a, 0xc6, 0xa1, 0x3e, 0x41, 0x24, 0x7a, 0x9f,
	0xdb, 0x28, 0xee, 0xc2, 0x89, 0xe2, 0xd0, 0x23, 0x7d, 0x99, 0x8d, 0x55, 0x0e, 0xbe, 0x1d, 0x4a,
	0xc6, 0x08, 0xeb, 0xbc, 0xc3, 0x84, 0x5a, 0x18, 0x24, 0xd5, 0x13, 0xf2, 0x43, 0x9d, 0x50, 0x0b,
	0x83, 0xc4, 0xab, 0xa2, 0x65, 0x11, 0x24, 0x9c, 0xa6, 0x10, 0xa0, 0x59, 0xaf, 0x70, 0x3d, 0x95,
	0x11, 0x01, 0x0a, 0x4c, 0xd7, 0x2e, 0xb5, 0xc3, 0x11, 0x2c, 0xe2, 0x96, 0x9f, 0xf7, 0x44, 0x87,
	0x6b, 0xb0, 0x7f, 0x10, 0x24, 0x3d, 0xee, 0x36, 0xc9, 0x02, 0x8a, 0xb8, 0xb5, 0x03, 0x54, 0xc5,
	0xf1, 0x04, 0x68, 0xce, 0x26, 0xbb, 0x62, 0xfc, 0x25, 0x30, 0x72, 0x5c, 0xc0, 0xd6, 0x6f, 0x67,
	0xe2, 0x30, 0x10, 0x38, 0x17, 0xf8, 0x04, 0xb9, 0xbb, 0xb4, 0xe5, 0x35, 0x74, 0x47, 0x23, 0x1f,
	0x1a, 0x20, 0x3e, 0x46, 0x4e, 0x9b, 0xbd, 0x9e, 0x64, 0x69, 0xc7, 0x4f, 0x86, 0x3f, 0x41, 0x34,
	0x1e, 0x4c, 0xfb, 0x59, 0x81, 0x85, 0xc7, 0x28, 0xfc, 0x16, 0x30, 0x6e, 0x0c, 0x79, 0x9c, 0x9a,
	0xc0, 0x04, 0x4a, 0x5b, 0x91, 0x86, 0x9f, 0x64, 0xb7, 0x3e, 0x63, 0x3f, 0xb8, 0x80, 0x4f, 0x70,
	0x06, 0xae, 0x7e, 0x6a, 0x0f, 0xb8, 0x90, 0x5f, 0x63, 0x77, 0x3e, 0xa3, 0x6c, 0xf2, 0x59, 0xdc,
	0x8f, 0x50, 0xfa, 0xf5, 0x4f, 0x95, 0x4e, 0xae, 0x8c, 0x13, 0xb2, 0xbb, 0x9f, 0x24, 0x7f, 0xd8,
	0x7e, 0xfe, 0x09, 0x9c, 0xa1, 0x57, 0x4f, 0xea, 0x61, 0xc8, 0xc6, 0x6e, 0x7d, 0x72, 0x27, 0xd6,
	0x20, 0x4c, 0x27, 0x5f, 0xc5, 0x61, 0xdc, 0xfc, 0xd4, 0x61, 0x98, 0x3e, 0x02, 0xb6, 0x34, 0x64,
	0xef, 0x58, 0xdd, 0x0e, 0x6c, 0xa3, 0x9f, 0xc4, 0x71, 0xdc, 0x1c, 0xd8, 0x46, 0x1b, 0xba, 0xcf,
	0xfe, 0xfd, 0xf4, 0x33, 0xec, 0xb6, 0xe9, 0xe2, 0x53, 0x27, 0x2d, 0xe1, 0xee, 0x4f, 0x61, 0x07,
	0xd7, 0x35, 0xcf, 0xc6, 0x27, 0x4d, 0x58, 0xc2, 0x9d, 0xaf, 0xb3, 0x37, 0x3e, 0x93, 0x78, 0x35,
	0x51, 0xdd, 0x20, 0x06, 0xef, 0xdd, 0xfd, 0x69, 0x9c, 0xa9, 0x3b, 0x9f, 0xd6, 0x0b, 0x4d, 0x96,
	0x62, 0x72, 0xde, 0x64, 0xae, 0x09, 0x73, 0x83, 0xfb, 0xcc, 0xcb, 0xa3, 0xc6, 0xfd, 0x19, 0x72,
	0xf8, 0x84, 0x0a, 0x6f, 0x13, 0xd9, 0xcc, 0xf3, 0x6b, 0x6c, 0xba, 0x9f, 0x13, 0x77, 0xf5, 0xd7,
	0xc8, 0x4d, 0xa9, 0x72, 0xe1, 0x16, 0xbe, 0xcf, 0x66, 0x15, 0xd6, 0x2f, 0x02, 0xd1, 0xe1, 0x85,
	0xb9, 0x0b, 0xf9, 0xca, 0x16, 0x10, 0x75, 0x17, 0x89, 0xfa, 0x42, 0x74, 0x9d, 0x8d, 0x6b, 0x2e,
	0x0d, 0xff, 0xff, 0x74, 0x32, 0x1d, 0x9b, 0x35, 0xf0, 0x1e, 0x9b, 0xd1, 0xc0, 0x20, 0xdc, 0xe7,
	0x91, 0x81, 0x07, 0x08, 0x9f, 0x52, 0xc4, 0x06, 0xd0, 0x34, 0x0f, 0x5d, 0xc1, 0xd5, 0x0d, 0x01,
	0xfd, 0x55, 0x58, 0xfc, 0xb4, 0x70, 0x5b, 0xfa, 0x0a, 0x4e, 0xf7, 0x03, 0x70, 0x55, 0x89, 0x02,
	0xe3, 0x06, 0x20, 0x4f, 0x31, 0x35, 0x55, 0xce, 0x56, 0x48, 0xe3, 0xce, 0x44, 0x7b, 0x8d, 0x48,
	0x66, 0xa6, 0xc8, 0x97, 0x19, 0x88, 0x36, 0xd0, 0x74, 0x45, 0xda, 0x97, 0xe9, 0x0f, 0x36, 0x34,
	0xd5, 0x15, 0x86, 0x26, 0x59, 0x55, 0x94, 0x94, 0x9a, 0xba, 0x1c, 0xc3, 0xaa, 0xb4, 0x06, 0xe4,
	0x10, 0x1b, 0x55, 0x9d, 0x6b, 0x6c, 0xbc, 0xc2, 0x16, 0xa7, 0x6e, 0x1b, 0xe1, 0x75, 0x0b, 0xbe,
	0x9e, 0x62, 0xa5, 0x82, 0x8d, 0x03, 0x53, 0xde, 0xa1, 0x02, 0x3c, 0x0b, 0xb8, 0xdd, 0xc3, 0x44,
	0x4c, 0x05, 0x39, 0x18, 0x3b, 0xd9, 0x43, 0xbe, 0xf3, 0x16, 0xdf, 0x40, 0xf8, 0x84, 0xce, 0x5f,
	0xb3, 0xb7, 0x79, 0xab, 0x93, 0xa3, 0xbf, 0x0a, 0x87, 0x82, 0x8e, 0x87, 0x2b, 0xbf, 0x3f, 0xd6,
	0xe7, 0xaf, 0x8e, 0xdc, 0xac, 0xb5, 0x3a, 0xf9, 0x47, 0x84, 0x55, 0x41, 0x70, 0x75, 0x0b, 0x78,
	0xcc, 0x6e, 0x9c, 0x28, 0x34, 0xeb, 0x15, 0x15, 0xa9, 0x5f, 0xd7, 0xd9, 0x90, 0x21, 0x52, 0xb7,
	0x15, 0x56, 0x89, 0xbd, 0x85, 0xa1, 0x9c, 0x40, 0xfa, 0xd9, 0x01, 0x17, 0x22, 0x8e, 0x60, 0xb9,
	0x0a, 0x77, 0x5f, 0x07, 0x37, 0x1a, 0x72, 0x5b, 0xb5, 0x37, 0x79, 0xe1, 0xbc, 0x4a, 0xe0, 0x24,
	0xc9, 0x0e, 0x81, 0x25, 0x4e, 0x11, 0x9c, 0x20, 0xf8, 0x6c, 0x2c, 0x31, 0xc3, 0xd2, 0x90, 0xeb,
	0x29, 0x60, 0x6f, 0xb2, 0x49, 0x1b, 0x48, 0x99, 0xc2, 0x2e, 0xed, 0xe8, 0x40, 0x03, 0x29, 0x39,
	0xf8, 0x80, 0x5d, 0xd4, 0x11, 0xef, 0x76, 0xd0, 0x8d, 0x93, 0x63, 0xdb, 0x1c, 0xe0, 0x29, 0x9d,
	0x52, 0x26, 0x4f, 0xa1, 0x1e, 0x22, 0xc8, 0x3c, 0xf8, 0x78, 0x5e, 0xbf, 0xc5, 0xe6, 0x55, 0x9c,
	0x50, 0x39, 0x90, 0x71, 0x4a, 0xb9, 0x66, 0x0c, 0x06, 0x64, 0x14, 0xfe, 0xe3, 0x99, 0xa7, 0x77,
	0xeb, 0x7a, 0xea, 0xf1, 0x20, 0xc2, 0x50, 0xc0, 0x15, 0x56, 0xaf, 0x3e, 0x48, 0x39, 0x25, 0x1b,
	0x03, 0xfb, 0x09, 0x7a, 0x8d, 0x4d, 0xd3, 0xbd, 0xb7, 0xef, 0xa1, 0xfb, 0x98, 0x1e, 0x07, 0xa2,
	0x55, 0x9e, 0xb9, 0xbb, 0x6c, 0x2a, 0xeb, 0x15, 0x58, 0x60, 0x05, 0x36, 0x58, 0x33, 0x08, 0xf5,
	0xfc, 0x94, 0x24, 0xcd, 0xf0, 0x2e, 0x3b, 0x6f, 0x33, 0xf4, 0x5b, 0x03, 0x49, 0xd7, 0x36, 0x0b,
	0xe2, 0x55, 0x0d, 0xc3, 0x32, 0x9b, 0x1b, 0xd2, 0xa1, 0xdf, 0x0d, 0x8e, 0xdc, 0x82, 0x0a, 0x1f,
	0x06, 0x3b, 0xdd, 0x0c, 0x8e, 0x9c, 0xff, 0x5a, 0x63, 0x8b, 0x76, 0x66, 0x2e, 0xe7, 0xa2, 0x9d,
	0x89, 0xae, 0xae, 0x0f, 0x2b, 0x62, 0x59, 0xc4, 0xa1, 0x74, 0x7b, 0xcf, 0xac, 0xa0, 0xd4, 0xce,
	0x47, 0x7b, 0x97, 0x4c, 0x29, 0x79, 0x7b, 0xa7, 0x54, 0xb4, 0x69, 0xf4, 0x54, 0xc1, 0xcb, 0x20,
	0xee, 0xe4, 0xb8, 0x3b, 0x0f, 0x74, 0xf0, 0xb2, 0x11, 0x77, 0x72, 0xd8, 0x98, 0x8b, 0xac, 0x0e,
	0x17, 0x8d, 0xc2, 0xd8, 0xc0, 0x43, 0x44, 0x8c, 0xc6, 0xd2, 0x2b, 0xb4, 0xf1, 0xbb, 0xc3, 0x9c,
	0xc1, 0x38, 0xac, 0x7b, 0x84, 0x75, 0x5e, 0x93, 0xbc, 0x3f, 0xee, 0xaa, 0xcc, 0x6b, 0x29, 0x52,
	0x0f, 0xd4, 0x3d, 0xd6, 0xe6, 0xd5, 0x88, 0x6e, 0x12, 0xc5, 0x79, 0x87, 0xcd, 0x0f, 0x89, 0xf4,
	0x6a, 0xbe, 0xa7, 0xd8, 0x93, 0x3b, 0xd0, 0x93, 0xe6, 0xbe, 0xcd, 0x1c, 0x72, 0x7f, 0xfc, 0xec,
	0xb0, 0x8c, 0x30, 0x7e, 0x83, 0x6e, 0xb6, 0x44, 0xd9, 0x3e, 0x34, 0xe1, 0xc5, 0x2f, 0xb3, 0x05,
	0xc9, 0x13, 0x4e, 0xc5, 0x1d, 0xdd, 0x5e, 0x52, 0xc4, 0xe8, 0xd4, 0xf2, 0x24, 0xee, 0xc4, 0x70,
	0x6e, 0x7f, 0x93, 0x2e, 0x67, 0x06, 0xb3, 0xa9, 0x21, 0x6b, 0x0a, 0xe1, 0x5c, 0x65, 0x67, 0x83,
	0xb6, 0xc8, 0xf7, 0xcb, 0xfc, 0xcf, 0xb7, 0x90, 0xa7, 0x4e, 0xad, 0x3a, 0x74, 0xbf, 0xc4, 0xa6,
	0x14, 0xac, 0x27, 0x39, 0xe5, 0xd7, 0x60, 0xde, 0x7e, 0x56, 0x65, 0x97, 0x90, 0xf4, 0x58, 0xf2,
	0x27, 0x8a, 0x00, 0x0f, 0x95, 0xc2, 0x93, 0xa9, 0x88, 0x53, 0xe4, 0x71, 0xbf, 0x4d, 0xd3, 0x46,
	0x34, 0xb4, 0x2a, 0xeb, 0x44, 0x81, 0x85, 0x51, 0x1c, 0x32, 0xee, 0xa4, 0x41, 0xe2, 0xc7, 0xad,
	0x4e, 0xee, 0x7e, 0xa7, 0xa6, 0x46, 0x8e, 0xa4, 0x26, 0x52, 0xd6, 0x5b, 0x9d, 0xdc, 0x59, 0xad,
	0xde, 0x6e, 0x31, 0xc4, 0x13, 0xa4, 0xb0, 0x42, 0xaa, 0xe4, 0xc3, 0xfd, 0xb9, 0xda, 0xc0, 0xf5,
	0x76, 0x47, 0x83, 0xb6, 0x08, 0xa3, 0xc2, 0xdd, 0x78, 0xdd, 0x53, 0x55, 0xd9, 0x45, 0x21, 0xdc,
	0x9f, 0xaf, 0x69, 0x23, 0x09, 0xf7, 0x3b, 0x2a, 0xc9, 0x2e, 0x0a, 0xe1, 0xbc, 0xca, 0x26, 0xe2,
	0x6e, 0x9e, 0xa1, 0x9f, 0x17, 0x17, 0xe1, 0x1e, 0xf8, 0x2c, 0xdf, 0xd5, 0x58, 0x24, 0x34, 0x75,
	0xbb, 0xb3, 0xc4, 0x1c, 0x85, 0x15, 0xbc, 0x3c, 0x62, 0xbe, 0x57, 0x53, 0x91, 0x68, 0x24, 0x79,
	0x25, 0xc5, 0x69, 0xb0, 0x85, 0x41, 0xbc, 0xd5, 0xcf, 0xf7, 0x6b, 0xea, 0x9e, 0xdd, 0xcf, 0x59,
	0x76, 0x09, 0x33, 0x68, 0xe6, 0x03, 0x8b, 0x7e, 0x83, 0x8e, 0x74, 0xff, 0x7f, 0xaa, 0xe1, 0x98,
	0x30, 0xa4, 0x27, 0xf7, 0x75, 0xcd, 0x89, 0x0d, 0x5f, 0x56, 0xf0, 0x5f, 0x18, 0x80, 0x2f, 0x13,
	0xfc, 0x43, 0x76, 0xb5, 0x84, 0xd3, 0x75, 0x0b, 0x4b, 0xe4, 0x79, 0xa4, 0xca, 0x0c, 0x7a, 0x69,
	0x0c, 0x33, 0xe5, 0xfe, 0x62, 0xad, 0x2f, 0x1f, 0x84, 0xa9, 0x98, 0x0d, 0xc2, 0x62, 0xa5, 0xc1,
	0x63, 0x42, 0xc2, 0x1a, 0x0e, 0xc6, 0xf9, 0x52, 0x3f, 0xec, 0x75, 0x31, 0x8b, 0x78, 0xc0, 0xdd,
	0x3f, 0xa5, 0x0a, 0x50, 0xfa, 0xa3, 0x7d, 0xe9, 0x8a, 0xc1, 0x50, 0x52, 0x12, 0x36, 0xa9, 0x2a,
	0xd9, 0x97, 0x45, 0x10, 0xee, 0xbb, 0xbf, 0xa4, 0x36, 0x0e, 0x91, 0xb0, 0xf7, 0x26, 0x10, 0x16,
	0xbf, 0x42, 0xef, 0x61, 0xc0, 0xe1, 0x23, 0x73, 0x1e, 0x3a, 0x2e, 0x3b, 0x2d, 0x79, 0x98, 0xa5,
	0x91, 0xae, 0xd6, 0xd4, 0x3f, 0x9d, 0xcb, 0x6c, 0x34, 0x0d, 0xd2, 0x4c, 0x53, 0xa9, 0xa4, 0xc5,
	0x6e, 0x5a, 0xfc, 0xef, 0x35, 0x36, 0xab, 0xeb, 0x32, 0xba, 0x92, 0xbc, 0x71, 0x09, 0x13, 0x51,
	0x38, 0xd3, 0xec, 0x73, 0x76, 0x09, 0x0d, 0xfd, 0x70, 0x7e, 0xbd, 0xc6, 0xce, 0x52, 0x49, 0x26,
	0xde, 0xa1, 0x72, 0x1e, 0xa2, 0xd8, 0xd1, 0x7b, 0xdf, 0x78, 0x06, 0xc6, 0x57, 0x4f, 0x81, 0x37,
	0x06, 0x2a, 0xe1, 0x3d, 0x2d, 0xe7, 0xe1, 0xe2, 0x1f, 0xbf, 0xc0, 0xa6, 0x07, 0x07, 0x95, 0xe5,
	0xce, 0x0f, 0x6a, 0xec, 0x85, 0xe2, 0x08, 0x07, 0x34, 0x7a, 0xef, 0xfb, 0xcf, 0xa2, 0x38, 0x79,
	0x70, 0x9e, 0xbd, 0x17, 0x8a, 0x23, 0x54, 0x4c, 0x1c, 0xa9, 0x99, 0x7c, 0x6e, 0x14, 0x13, 0x47,
	0x8b, 0xff, 0xf3, 0x74, 0xf9, 0xa6, 0x98, 0x21, 0x3b, 0xbf, 0x52, 0x63, 0x2f, 0x65, 0x39, 0x4f,
	0xd5, 0x4c, 0x7e, 0xf7, 0xd9, 0x2b, 0x9c, 0xe5, 0x1e, 0x6a, 0xe4, 0xfc, 0x66, 0x8d, 0x8d, 0x55,
	0x2a, 0xb6, 0x5f, 0x78, 0x8e, 0x54, 0xac, 0x68, 0xe6, 0xfc, 0x5a, 0x8d, 0x9d, 0xa2, 0xb4, 0x1a,
	0x96, 0x25, 0x3d, 0x2f, 0x4a, 0x2a, 0x9d, 0x9c, 0xdf, 0xa8, 0xb1, 0x33, 0xfb, 0x9c, 0xe7, 0x01,
	0xf8, 0xba, 0x58, 0x0a, 0xf5, 0xbc, 0x68, 0x58, 0xaa, 0xe5, 0xfc, 0xb0, 0xc6, 0xea, 0x95, 0x2b,
	0x30, 0x56, 0x5b, 0x3d, 0x37, 0xeb, 0x6d, 0xdf, 0xc0, 0x9d, 0x5f, 0xad, 0xb1, 0xcf, 0x15, 0x59,
	0x11, 0x24, 0x58, 0xbd, 0xf5, 0xbc, 0xe8, 0x48, 0x2a, 0x2d, 0xfe, 0x2f, 0xfd, 0x2e, 0x44, 0x4b,
	0xa8, 0x72, 0x01, 0xe7, 0x65, 0x36, 0x46, 0x7f, 0xf1, 0xa3, 0x58, 0x16, 0x74, 0xb8, 0x8c, 0x78,
	0xa3, 0xd8, 0xb6, 0x86, 0x4d, 0xe0, 0x7d, 0x10, 0x84, 0x8e, 0x53, 0xaa, 0xc5, 0x55, 0xd5, 0x79,
	0x13, 0x48, 0xc1, 0xa3, 0x93, 0xea, 0x81, 0x4b, 0x81, 0x0a, 0xf7, 0xa2, 0x25, 0x50, 0x41, 0x5e,
	0x65, 0x93, 0x46, 0x20, 0x1c, 0x99, 0xe8, 0x26, 0x53, 0x19, 0xde, 0xb8, 0x96, 0x07, 0xed, 0xe0,
	0x2c, 0x5f, 0x61, 0xf5, 0x0a, 0x56, 0x55, 0x44, 0x8e, 0xd9, 0x38, 0xf0, 0x0e, 0x09, 0x94, 0x0b,
	0x9e, 0x73, 0x38, 0x05, 0xa9, 0xe6, 0x91, 0x58, 0x77, 0x54, 0xe3, 0xe2, 0xff, 0x78, 0x54, 0xd6,
	0x27, 0xb6, 0x82, 0x0e, 0x56, 0xbb, 0xe6, 0x3c, 0xd8, 0xe7, 0xc2, 0x8f, 0x23, 0x95, 0xe6, 0x3c,
	0xa3, 0x5a, 0xd6, 0x23, 0x38, 0x58, 0x23, 0x2e, 0x43, 0x11, 0xe7, 0x68, 0x63, 0xde, 0xa0, 0xb7,
	0xad, 0xac, 0x26, 0xe7, 0x1c, 0x1b, 0x51, 0x73, 0x22, 0x55, 0xe2, 0xf2, 0x34, 0xfe, 0x6e, 0x60,
	0x89, 0xae, 0xe0, 0xdd, 0x0c, 0xcb, 0xd2, 0x54, 0xa6, 0x72, 0x84, 0x1a, 0x1a, 0x12, 0x26, 0x60,
	0x0f, 0x6f, 0xa5, 0x94, 0xf4, 0xf2, 0x93, 0x38, 0xdd, 0xc7, 0xc4, 0xe4, 0x88, 0x37, 0xbe, 0x17,
	0xc8, 0x75, 0xd5, 0xbe, 0x11, 0xa7, 0xfb, 0xce, 0x4f, 0xb1, 0x5b, 0x14, 0xa3, 0x26, 0xa8, 0x59,
	0xf9, 0x34, 0x2b, 0x7c, 0xaa, 0x0d, 0x4b, 0x8e, 0xfd, 0x30, 0x4b, 0x53, 0x2c, 0xa6, 0xc6, 0x54,
	0xe5, 0x88, 0x77, 0x0d, 0x83, 0xd5, 0xc8, 0xa1, 0x6f, 0xe0, 0x5b, 0x59, 0xb1, 0xaa, 0xe0, 0x2b,
	0x1a, 0xed, 0xdc, 0x62, 0x93, 0xa6, 0xc6, 0xdc, 0x04, 0x58, 0x28, 0x75, 0x39, 0xa1, 0x09, 0x26,
	0xbc, 0x72, 0x85, 0xd5, 0x0d, 0x18, 0xef, 0x2d, 0x94, 0xa8, 0x1c, 0xd3, 0x8d, 0xba, 0x32, 0xa3,
	0xbf, 0x78, 0x3d, 0x4e, 0x55, 0x5a, 0x72, 0xa2, 0x57, 0xa9, 0x59, 0x5f, 0x4f, 0xad, 0x32, 0x0b,
	0x83, 0xce, 0x7a, 0x85, 0x4a, 0x46, 0x4e, 0x56, 0xe1, 0xdb, 0x3d, 0x94, 0x6e, 0x80, 0x58, 0x87,
	0x0f, 0xd7, 0x6c, 0x95, 0x88, 0x34, 0x0a, 0x63, 0x25, 0x7e, 0x44, 0xd2, 0xfb, 0xd1, 0x20, 0x9d,
	0xd2, 0x8f, 0x93, 0x55, 0x38, 0x48, 0x7f, 0x97, 0x9d, 0x57, 0x13, 0x89, 0x2f, 0xe7, 0x48, 0x78,
	0xb2, 0x62, 0xb9, 0xa7, 0x63, 0x00, 0x94, 0x7e, 0x3c, 0x57, 0x42, 0xd6, 0x4a, 0x04, 0x86, 0x00,
	0x6e, 0xb2, 0x09, 0x8b, 0x9f, 0x62, 0x9e, 0xef, 0xd1, 0x9b, 0x7f, 0x65, 0x3b, 0x45, 0x36, 0xdf,
	0xc6, 0x04, 0xf0, 0x41, 0x9c, 0xf5, 0xa4, 0x3f, 0xc0, 0xf3, 0x65, 0x93, 0xc4, 0x45, 0xc0, 0x4a,
	0x1f, 0xef, 0x32, 0x9b, 0xb3, 0x58, 0x82, 0xa8, 0x1b, 0xa7, 0xba, 0x9c, 0x9c, 0x52, 0x91, 0x33,
	0x25, 0xb9, 0x01, 0x54, 0x55, 0x56, 0xfe, 0x3a, 0x9b, 0x81, 0xd3, 0xd3, 0x0f, 0xf7, 0x78, 0xb8,
	0x6f, 0xbf, 0xb3, 0xf4, 0x00, 0x75, 0x74, 0x80, 0xb8, 0x02, 0xb4, 0xf2, 0x85, 0xa5, 0xdf, 0xab,
	0x31, 0xd7, 0xea, 0x4b, 0x6d, 0x76, 0xf5, 0xfa, 0xd7, 0xca, 0x33, 0x73, 0x09, 0xf5, 0xdb, 0xc9,
	0xde, 0x6c, 0xa9, 0x1c, 0xd9, 0x20, 0xf5, 0xd2, 0x1a, 0xd5, 0xa2, 0x54, 0xd4, 0xb5, 0x53, 0x0e,
	0x26, 0x29, 0x6a, 0x33, 0x59, 0xf9, 0x85, 0x7b, 0x6c, 0x66, 0x60, 0xd4, 0x70, 0x9f, 0xc1, 0x84,
	0x68, 0xdd, 0x9b, 0xea, 0xeb, 0x75, 0x27, 0x13, 0x85, 0xf3, 0xfb, 0x35, 0x66, 0x6d, 0x0d, 0x5f,
	0x3f, 0xfc, 0x6a, 0xae, 0x1e, 0x3e, 0xfb, 0xb9, 0xb2, 0x36, 0x8d, 0x47, 0x86, 0x48, 0x4d, 0xd6,
	0x7d, 0x36, 0x3b, 0xa8, 0x38, 0x0e, 0xf7, 0x11, 0x85, 0x8b, 0xfb, 0x19, 0x71, 0xbc, 0x6f, 0xb3,
	0x73, 0xa6, 0x67, 0x34, 0x64, 0xed, 0x20, 0xe4, 0xfe, 0x5e, 0x90, 0x46, 0x09, 0xc7, 0x6c, 0x6b,
	0xdd, 0x9b, 0xd3, 0x80, 0x75, 0x4d, 0x7f, 0x1f, 0xc9, 0xb0, 0x83, 0xe9, 0x5d, 0x84, 0xca, 0xab,
	0x6c, 0x68, 0x53, 0x28, 0xbb, 0x3a, 0x83, 0x64, 0xfb, 0x5d, 0x36, 0x34, 0x2e, 0x0d, 0x76, 0x01,
	0x6f, 0xd3, 0xdd, 0x38, 0x8d, 0x65, 0x21, 0xf0, 0x62, 0x95, 0x1c, 0xfb, 0x68, 0xfa, 0xa3, 0xec,
	0x30, 0x55, 0x99, 0xd4, 0x79, 0xb8, 0x4b, 0x57, 0x31, 0xcd, 0xbd, 0x5e, 0xb1, 0x9a, 0x1d, 0xa6,
	0x2a, 0x69, 0x6d, 0x34, 0xb7, 0xea, 0x56, 0x40, 0x0a, 0x0a, 0xf9, 0x40, 0x5f, 0xc8, 0xb5, 0xe9,
	0x34, 0xf5, 0x3b, 0x4d, 0x05, 0x71, 0xde, 0xc4, 0x48, 0x33, 0x46, 0x3e, 0xdb, 0x7e, 0x97, 0x77,
	0x33, 0x71, 0x5c, 0xf2, 0x53, 0xa6, 0x74, 0x26, 0x06, 0x8b, 0xb5, 0xdd, 0xde, 0x44, 0xaa, 0xe1,
	0x7c, 0x8b, 0xcd, 0x0f, 0x70, 0xb6, 0x33, 0x11, 0xf2, 0xc8, 0xef, 0xe5, 0x2a, 0x1b, 0x5a, 0x65,
	0x7d, 0x88, 0xd4, 0xc7, 0xb9, 0x73, 0x0f, 0xeb, 0x03, 0x38, 0x05, 0xa4, 0xb8, 0xf0, 0x03, 0xe9,
	0x27, 0x3c, 0xe8, 0xf4, 0xb8, 0x4a, 0x78, 0x3a, 0xb1, 0x5c, 0x6b, 0x75, 0xf2, 0x1d, 0xce, 0x45,
	0x43, 0x6e, 0x20, 0x45, 0x29, 0x5a, 0xf2, 0x84, 0x59, 0xb7, 0xab, 0x8d, 0x86, 0x4a, 0x6c, 0xce,
	0x94, 0x6c, 0x2b, 0x48, 0xc5, 0xb9, 0x73, 0x5e, 0x63, 0xd3, 0x45, 0x91, 0xf8, 0x92, 0x87, 0x3d,
	0x11, 0x17, 0xc7, 0x26, 0xc6, 0xb3, 0x43, 0x7d, 0x15, 0x45, 0xd2, 0x54, 0x24, 0x1d, 0xe5, 0x79,
	0x95, 0x4d, 0xea, 0x2a, 0x8a, 0xfb, 0xf8, 0x0e, 0x1b, 0x1c, 0x7d, 0x1f, 0xd2, 0xa9, 0x66, 0x08,
	0x0f, 0x8e, 0xf5, 0x09, 0xd8, 0x6a, 0x47, 0xbe, 0xe4, 0x52, 0x96, 0x76, 0xcf, 0x23, 0x5b, 0xd9,
	0x6a, 0x47, 0x4d, 0x6a, 0x27, 0x7b, 0xf7, 0x16, 0x3b, 0x67, 0x63, 0x43, 0xc1, 0x83, 0x82, 0x47,
	0x8a, 0xa7, 0x49, 0x2f, 0xdf, 0x96, 0x3c, 0x2b, 0x44, 0x26, 0xd6, 0xcf, 0xb3, 0x39, 0x9b, 0x55,
	0x5d, 0xc0, 0xbb, 0x60, 0xf4, 0x76, 0x29, 0xac, 0x5f, 0x32, 0xd2, 0x30, 0x36, 0xc1, 0xec, 0xdd,
	0x61, 0x0e, 0xb0, 0xc1, 0x16, 0x82, 0x9d, 0x7b, 0x10, 0x24, 0x07, 0x41, 0x82, 0x89, 0xca, 0xba,
	0x07, 0x7a, 0x6f, 0x56, 0x08, 0x70, 0x8a, 0x22, 0x1c, 0xa3, 0x56, 0x49, 0x8c, 0xed, 0x2a, 0xe9,
	0x38, 0x01, 0x68, 0xbb, 0xdd, 0xb9, 0xcc, 0xc6, 0x50, 0x25, 0x2c, 0x4d, 0x28, 0x24, 0xa6, 0x0f,
	0x5f, 0xf2, 0x18, 0xe8, 0x01, 0x4d, 0xbb, 0xe4, 0x3a, 0x80, 0x4b, 0x89, 0x5e, 0xc9, 0x4f, 0xa0,
	0x9a, 0x23, 0xd4, 0xb0, 0x1e, 0xc1, 0x19, 0x95, 0xf2, 0x4e, 0x56, 0xc4, 0x38, 0x07, 0xf8, 0x4d,
	0x8f, 0x30, 0x4b, 0x4c, 0x8c, 0xf6, 0xab, 0xaa, 0xb4, 0xc6, 0x40, 0x76, 0x14, 0x42, 0xc7, 0x68,
	0x6f, 0xb2, 0x49, 0xae, 0x6f, 0xd5, 0x7e, 0x91, 0x61, 0x8c, 0x1b, 0x13, 0x73, 0x75, 0xef, 0x2c,
	0x10, 0xe0, 0x20, 0xdb, 0xcd, 0x36, 0xc0, 0x4d, 0xfb, 0x1a, 0xbb, 0xa3, 0xf7, 0x0e, 0x0e, 0x6d,
	0x2f, 0xcb, 0xd1, 0x5a, 0x75, 0xf3, 0x44, 0xda, 0xc9, 0x3d, 0x15, 0x91, 0x8b, 0x74, 0xfa, 0x8d,
	0xf6, 0xd3, 0xa6, 0x62, 0x79, 0xd0, 0xc9, 0x37, 0xf3, 0x44, 0x96, 0xa9, 0x3d, 0x15, 0xab, 0x8b,
	0x9c, 0x59, 0x76, 0xaa, 0x08, 0xf3, 0xae, 0x94, 0x2a, 0xa3, 0xa6, 0x7e, 0x39, 0x0b, 0x8c, 0x81,
	0xf3, 0x9a, 0x64, 0x1d, 0x38, 0xdc, 0x29, 0x39, 0x36, 0xd2, 0x95, 0x9d, 0x8d, 0xac, 0xb3, 0x9e,
	0x3a, 0x17, 0xd9, 0xa8, 0xa6, 0xc2, 0x61, 0x4e, 0x59, 0xb0, 0x33, 0x44, 0x86, 0x43, 0xfc, 0x55,
	0x36, 0x69, 0x25, 0xf5, 0x94, 0x73, 0xe6, 0x57, 0x6b, 0x00, 0x37, 0x94, 0x93, 0x76, 0x87, 0x4d,
	0x69, 0x08, 0x96, 0x6e, 0x91, 0xa3, 0x88, 0x69, 0xaf, 0x11, 0x95, 0x92, 0x6f, 0xc8, 0xad, 0x4c,
	0x39, 0x90, 0xce, 0x36, 0x96, 0x5f, 0x58, 0x19, 0x5a, 0x3d, 0xcd, 0xb8, 0x85, 0xcb, 0x02, 0xa2,
	0x40, 0xd7, 0x1f, 0x94, 0x99, 0xd9, 0xad, 0x12, 0x69, 0xd5, 0x13, 0x6d, 0xb2, 0x2b, 0x27, 0x0b,
	0x54, 0x51, 0x70, 0x1e, 0xa9, 0x1c, 0xd9, 0xe5, 0x13, 0xe4, 0xed, 0x68, 0x9c, 0xae, 0x60, 0xb1,
	0x6f, 0x4a, 0x43, 0xf3, 0xc9, 0xa1, 0xa9, 0x60, 0xb1, 0x6e, 0x2e, 0x43, 0xb2, 0xc8, 0x94, 0xf1,
	0xa9, 0xca, 0xcb, 0x92, 0xe1, 0x25, 0x27, 0x91, 0xce, 0xf8, 0xd8, 0x32, 0xb7, 0x93, 0x61, 0x65,
	0x27, 0x14, 0x1f, 0xef, 0x08, 0x3f, 0x38, 0x0c, 0x04, 0xc7, 0xfc, 0x1a, 0xc6, 0xc7, 0x1f, 0x89,
	0x06, 0x34, 0x90, 0x89, 0x36, 0x16, 0x64, 0x68, 0x6f, 0x6d, 0x6d, 0xa2, 0x95, 0x3d, 0x19, 0xd2,
	0xcb, 0x3b, 0xe0, 0x02, 0x0c, 0x95, 0x82, 0xe7, 0x4c, 0x87, 0xaa, 0x33, 0x87, 0x48, 0xc0, 0x93,
	0xe6, 0x03, 0xb6, 0x88, 0x7b, 0xbe, 0x7c, 0xc2, 0x86, 0xa9, 0xb1, 0x47, 0x75, 0x36, 0x88, 0xd4,
	0x0f, 0xda, 0x10, 0x55, 0xce, 0xb3, 0x33, 0x58, 0x50, 0x89, 0x5e, 0x64, 0x4c, 0xfb, 0x19, 0x1a,
	0xd0, 0x69, 0xbc, 0xc6, 0xc6, 0xe1, 0xa6, 0xeb, 0xe3, 0x55, 0x97, 0x20, 0x5f, 0xa7, 0xcb, 0x0b,
	0x34, 0x37, 0xa0, 0x15, 0x71, 0xaf, 0xb1, 0xe9, 0xd2, 0x83, 0xf1, 0x4b, 0x79, 0xfb, 0x94, 0xce,
	0x29, 0x69, 0xef, 0x6b, 0xc9, 0xaf, 0x57, 0x38, 0xca, 0x5b, 0x7e, 0x62, 0x9c, 0x18, 0x45, 0xfb,
	0xc0, 0xdc, 0xb4, 0xdf, 0x65, 0x0b, 0x16, 0x0b, 0x38, 0x96, 0x41, 0x18, 0x5a, 0x9d, 0x51, 0xfa,
	0xcc, 0x2d, 0x31, 0x9b, 0x71, 0xda, 0x08, 0x43, 0xd3, 0xe5, 0x7d, 0x36, 0x8b, 0x4c, 0x26, 0x02,
	0xab, 0xcd, 0xa4, 0x4a, 0xa0, 0x4d, 0x77, 0xe3, 0xd4, 0x84, 0xb9, 0xd7, 0x15, 0x0d, 0x0b, 0x50,
	0x87, 0x72, 0xf9, 0x5d, 0xc9, 0x43, 0x89, 0xc9, 0xb3, 0xba, 0x77, 0x6e, 0x18, 0xef, 0x26, 0x00,
	0x9c, 0x37, 0x99, 0x0b, 0x02, 0x74, 0xb0, 0x99, 0xde, 0xcf, 0x52, 0x1d, 0x53, 0x2e, 0x0d, 0xd4,
	0xda, 0x2e, 0xc9, 0xa6, 0xeb, 0xd2, 0xf7, 0xc1, 0xf7, 0x22, 0x8f, 0x4b, 0xbe, 0x8f, 0x2b, 0xbe,
	0x8f, 0x07, 0x44, 0xc3, 0xf5, 0x06, 0x9b, 0xed, 0x7f, 0x79, 0x5d, 0xc5, 0x78, 0x28, 0xb9, 0x36,
	0x55, 0x79, 0x69, 0x9d, 0x0a, 0xa6, 0x9d, 0xbb, 0x6c, 0xba, 0x9f, 0x09, 0x5f, 0x2c, 0xa7, 0xb4,
	0xda, 0x64, 0x85, 0x05, 0x5f, 0x2e, 0x7f, 0x9b, 0xcd, 0x0f, 0x63, 0xf0, 0xd1, 0x37, 0x52, 0x19,
	0xb5, 0xd9, 0x01, 0x36, 0x0f, 0xa8, 0x70, 0xca, 0x20, 0x2f, 0x72, 0x85, 0x2d, 0xcc, 0x9d, 0xbd,
	0xe4, 0x31, 0x68, 0x03, 0xe0, 0x4a, 0xcb, 0xb9, 0xc5, 0x1c, 0x1b, 0xa1, 0xa4, 0x1e, 0x90, 0xa1,
	0x2c, 0x71, 0x43, 0xc4, 0xb5, 0x5b, 0x98, 0xb1, 0xb2, 0xc4, 0x3d, 0x6c, 0x39, 0x37, 0xe0, 0xee,
	0xd3, 0x4b, 0x0b, 0x82, 0xe0, 0x0b, 0xb2, 0xee, 0x11, 0x1d, 0x2b, 0xd8, 0x0e, 0x30, 0x7c, 0x23,
	0x16, 0xae, 0x21, 0xfd, 0xc3, 0x22, 0xf8, 0x31, 0xed, 0xe4, 0xca, 0x88, 0x88, 0xe5, 0x8b, 0x6c,
	0x3e, 0x28, 0x0a, 0xde, 0xcd, 0xe1, 0xcc, 0x2b, 0x39, 0xe8, 0x45, 0x79, 0xf7, 0x29, 0x39, 0x9b,
	0x06, 0x61, 0xf8, 0xf0, 0x75, 0x79, 0xf0, 0x01, 0x82, 0xb0, 0xe8, 0x61, 0x22, 0xa0, 0x8f, 0xf3,
	0x1b, 0xb4, 0xc6, 0x44, 0xee, 0x63, 0x7b, 0xb7, 0xf2, 0x91, 0x08, 0x0a, 0xa5, 0xdb, 0xda, 0x7e,
	0x93, 0x1e, 0x05, 0xa3, 0x6d, 0x13, 0x11, 0xa5, 0xce, 0xef, 0xb3, 0x97, 0x4b, 0x9d, 0x07, 0xd8,
	0x95, 0x02, 0xdf, 0x42, 0x21, 0x17, 0x0c, 0xb0, 0x4f, 0x08, 0x69, 0xf2, 0x80, 0x5d, 0x54, 0x03,
	0x38, 0x49, 0xcc, 0xcf, 0xaa, 0xec, 0x34, 0xa2, 0x86, 0xca, 0x78, 0x87, 0x9d, 0x1f, 0x3a, 0xe9,
	0x6a, 0xd9, 0xbf, 0x4d, 0x53, 0x38, 0x38, 0xf5, 0xb4, 0xfc, 0x8f, 0xd8, 0xe5, 0xa1, 0xf3, 0x4f,
	0x4e, 0x3c, 0xe9, 0xf0, 0x1d, 0xca, 0x20, 0x2c, 0x0c, 0x2e, 0x03, 0xca, 0x20, 0x35, 0x1a, 0xec,
	0xc2, 0xe0, 0x5a, 0xd8, 0x52, 0x7e, 0x4e, 0x7d, 0x7b, 0xa3, 0x6f, 0x49, 0x2c, 0x11, 0x5f, 0x61,
	0x8b, 0x9f, 0xb4, 0x2e, 0x6a, 0x40, 0x3f, 0x4f, 0x72, 0x2e, 0x9c, 0xb4, 0x3c, 0x34, 0xae, 0x5d,
	0x76, 0xfd, 0x93, 0xd6, 0xc8, 0x56, 0xec, 0xbb, 0x24, 0x70, 0xf1, 0xa4, 0xa5, 0xb2, 0x34, 0xdc,
	0x62, 0xaf, 0x9c, 0xb8, 0x5e, 0xb6, 0xc8, 0xef, 0x91, 0xc8, 0x4b, 0x43, 0x97, 0xcd, 0x92, 0x77,
	0x53, 0x7d, 0xc4, 0x81, 0x24, 0xf0, 0x03, 0x38, 0xbe, 0xbe, 0x4f, 0xbc, 0x98, 0xa5, 0x41, 0xfc,
	0x1a, 0x34, 0xc3, 0xc5, 0x6a, 0xb0, 0x4f, 0xe2, 0x50, 0x09, 0xb6, 0x69, 0x59, 0xed, 0x87, 0xf8,
	0x5e, 0x53, 0x6f, 0x6a, 0xef, 0xfb, 0x01, 0x3f, 0xca, 0x63, 0x71, 0xac, 0xa6, 0x51, 0xa5, 0xd9,
	0xf0, 0x55, 0xed, 0x0f, 0x1a, 0x44, 0xa2, 0xa9, 0xfb, 0x12, 0x3b, 0x6f, 0xf7, 0xd4, 0xcf, 0xf8,
	0x8b, 0xc4, 0x38, 0x57, 0xf6, 0x56, 0x65, 0xbf, 0xc7, 0x66, 0x34, 0x5f, 0x9a, 0x15, 0x98, 0xb2,
	0x26, 0x46, 0x95, 0x4a, 0x73, 0xa8, 0x47, 0x45, 0x23, 0x9e, 0x25, 0x36, 0x65, 0xfa, 0xc2, 0xe0,
	0x05, 0x71, 0xfc, 0x92, 0x4a, 0x05, 0x2a, 0x1d, 0x81, 0x32, 0x80, 0xa7, 0x3a, 0x2e, 0xc2, 0xff,
	0xe9, 0x0a, 0x1e, 0x29, 0x84, 0xc7, 0xb7, 0xb0, 0x2a, 0x43, 0xb2, 0xd9, 0xfe, 0x0c, 0xb1, 0xcd,
	0xda, 0x23, 0xb2, 0x98, 0xef, 0x32, 0x2b, 0x2a, 0xe0, 0xf7, 0x72, 0x55, 0x6f, 0xf2, 0x67, 0xd5,
	0x04, 0x96, 0xb4, 0xc7, 0x39, 0xd5, 0x9c, 0xbc, 0x51, 0x89, 0x31, 0x58, 0x6f, 0xd3, 0xff, 0xb9,
	0x5a, 0x7f, 0x90, 0xa1, 0x7c, 0xa3, 0xfe, 0x83, 0xca, 0xe6, 0xb7, 0x63, 0x14, 0xa0, 0x71, 0x24,
	0xb2, 0x3c, 0xe7, 0x91, 0xfb, 0xe7, 0x49, 0xc2, 0x45, 0xb3, 0xf9, 0xcb, 0x08, 0x12, 0xe8, 0xbd,
	0x4a, 0x30, 0x67, 0x91, 0x8d, 0xe9, 0x2f, 0x02, 0x04, 0x32, 0x4b, 0xdd, 0xbf, 0x40, 0x2f, 0x69,
	0x8f, 0xaa, 0x2f, 0x02, 0x40, 0x1b, 0xbe, 0xa3, 0x01, 0xf7, 0xc6, 0x0a, 0xf0, 0x2f, 0x12, 0x70,
	0x1c, 0x28, 0x9e, 0x05, 0xbe, 0xce, 0xb0, 0xc9, 0x0e, 0x2d, 0xfd, 0x25, 0xf5, 0x69, 0x19, 0x68,
	0x2f, 0xc3, 0x4a, 0x95, 0x2f, 0xd9, 0x1c, 0xdb, 0xf8, 0xbf, 0xac, 0x06, 0x6f, 0x3e, 0x65, 0x73,
	0x5c, 0x72, 0xbd, 0xcd, 0xce, 0x0d, 0x72, 0xe9, 0x8f, 0xe7, 0xfc, 0xb2, 0x5a, 0x9e, 0x3e, 0x46,
	0xfd, 0xed, 0x9c, 0xdf, 0xad, 0xb1, 0x59, 0xcc, 0x9f, 0x57, 0x22, 0x0e, 0x71, 0xda, 0xce, 0xdc,
	0xbf, 0x42, 0xf9, 0xad, 0x6f, 0x3d, 0x8b, 0x38, 0xbd, 0xf9, 0x26, 0x11, 0x3c, 0x97, 0x69, 0x64,
	0x07, 0x3c, 0xd6, 0xd3, 0x76, 0xe6, 0xfc, 0xb8, 0xc6, 0xe6, 0x4d, 0x41, 0xd1, 0xa0, 0xea, 0x3f,
	0x78, 0x2e, 0x54, 0x77, 0xb5, 0x86, 0x03, 0xea, 0x7f, 0x81, 0xcd, 0xd1, 0x2a, 0x91, 0xea, 0x76,
	0x90, 0xf9, 0xaf, 0xd2, 0x7a, 0xcd, 0x20, 0x7d, 0x4b, 0x91, 0x8d, 0xc7, 0x7c, 0x97, 0x4d, 0xf5,
	0x31, 0xa2, 0xd3, 0xfe, 0x2b, 0xea, 0x69, 0xaa, 0x30, 0xa1, 0xbf, 0x7e, 0x93, 0x4d, 0x98, 0x70,
	0xbb, 0x7e, 0x59, 0xef, 0xaf, 0xd5, 0x74, 0xf9, 0x22, 0x85, 0xdd, 0xd5, 0xab, 0x7a, 0x77, 0x98,
	0x13, 0x75, 0x9f, 0x62, 0xcc, 0xdd, 0x6f, 0x05, 0x69, 0x74, 0x18, 0x47, 0xc5, 0x9e, 0xfb, 0xab,
	0xca, 0x2a, 0x44, 0xdd, 0xa7, 0x1b, 0x71, 0xba, 0xff, 0x40, 0x13, 0x9c, 0x2b, 0xac, 0x8e, 0x57,
	0x60, 0xc1, 0xc3, 0x03, 0x3f, 0xea, 0x3e, 0x75, 0xff, 0xba, 0x4a, 0x91, 0x40, 0xab, 0xc7, 0xc3,
	0x83, 0xd5, 0xee, 0x53, 0xe7, 0x36, 0x73, 0x10, 0x84, 0x5b, 0x0c, 0xa4, 0x63, 0x88, 0xe1, 0xd7,
	0xd4, 0x73, 0x02, 0xa4, 0x26, 0x4f, 0xa3, 0xd5, 0xee, 0x53, 0x0c, 0x2f, 0xcc, 0xb3, 0x91, 0x22,
	0x93, 0xf4, 0x9e, 0xf1, 0xdf, 0x50, 0xd9, 0xfc, 0x22, 0x93, 0xf8, 0x82, 0xf1, 0x02, 0x3b, 0x03,
	0x34, 0x2a, 0xdd, 0xfe, 0x9b, 0x44, 0x04, 0x34, 0xd5, 0x6b, 0xc3, 0x36, 0x3e, 0xa1, 0x3a, 0xea,
	0x6f, 0xd1, 0x5e, 0xf8, 0xe6, 0xb3, 0x2c, 0x8f, 0xf2, 0x66, 0xf2, 0xa1, 0x15, 0x51, 0xbf, 0x5c,
	0xc3, 0x2f, 0x41, 0xe0, 0xb7, 0xaa, 0xfe, 0x76, 0xed, 0xf2, 0x8b, 0x37, 0x46, 0xef, 0x3d, 0x7d,
	0x46, 0x69, 0xb1, 0xa0, 0xed, 0x7b, 0xa7, 0x82, 0xf6, 0x6a, 0x50, 0x04, 0x70, 0x08, 0x15, 0x61,
	0x6e, 0xa2, 0x43, 0x18, 0x1c, 0xc7, 0x85, 0xfb, 0x75, 0x5a, 0x38, 0xa7, 0x08, 0x73, 0x15, 0x1c,
	0xda, 0xce, 0x79, 0xaa, 0xd7, 0xce, 0x7c, 0x96, 0xf4, 0x37, 0x6a, 0xd5, 0xef, 0x92, 0x5e, 0x64,
	0x4c, 0x69, 0xe6, 0x8b, 0xdc, 0xfd, 0x3b, 0xb4, 0x4f, 0xce, 0xa8, 0x26, 0x2f, 0xc7, 0x4a, 0x0d,
	0x59, 0xbe, 0x52, 0xf9, 0x77, 0x09, 0xc0, 0x52, 0x29, 0xac, 0x42, 0xa9, 0x81, 0xea, 0x63, 0x05,
	0x07, 0xed, 0xdd, 0xbf, 0x47, 0x2c, 0xe7, 0x3a, 0xd5, 0x52, 0x63, 0xc5, 0xbe, 0xd5, 0x12, 0x60,
	0x83, 0x3b, 0xa2, 0xfa, 0x86, 0xc1, 0xdf, 0x57, 0x36, 0xb8, 0x23, 0xfa, 0xde, 0x2f, 0xe8, 0x08,
	0xbf, 0xef, 0x15, 0x03, 0xf7, 0x1f, 0x10, 0x76, 0xbc, 0x23, 0x9a, 0xf6, 0x2b, 0x06, 0xa0, 0x7a,
	0x5b, 0xca, 0xd4, 0xcf, 0xda, 0x6d, 0x38, 0x0c, 0x7f, 0x93, 0x60, 0x0c, 0xda, 0xb6, 0xb1, 0x09,
	0x4e, 0x93, 0x76, 0xde, 0x2a, 0x21, 0x3f, 0x24, 0xc8, 0x28, 0x36, 0x2a, 0xcc, 0x0d, 0xe5, 0xc9,
	0x04, 0xe1, 0x7e, 0xa4, 0x3f, 0x47, 0xf5, 0x0f, 0x6b, 0xe5, 0xf7, 0xa8, 0x1a, 0xe1, 0x7e, 0x44,
	0xdf, 0xa3, 0x7a, 0x85, 0xd5, 0xab, 0x5f, 0xc1, 0xfa, 0x47, 0x04, 0x1b, 0x6b, 0xd9, 0x9f, 0xc0,
	0xba, 0xc8, 0x98, 0xf5, 0x85, 0xae, 0x7f, 0x4c, 0x90, 0x33, 0x2d, 0xf3, 0x79, 0xae, 0x5b, 0x6c,
	0x52, 0x66, 0xe1, 0x3e, 0x57, 0x17, 0x27, 0x72, 0xbb, 0x7e, 0x4b, 0x0d, 0x91, 0x28, 0x80, 0x33,
	0x6e, 0x56, 0x4c, 0x92, 0xca, 0x88, 0xd6, 0x3f, 0xa9, 0xe9, 0xd2, 0x52, 0xc0, 0x99, 0xc8, 0xd5,
	0x2d, 0x36, 0xa9, 0xbf, 0xd3, 0x52, 0x76, 0xff, 0x4f, 0x95, 0x5c, 0xa2, 0x94, 0xdf, 0x08, 0x5b,
	0x60, 0x67, 0xf0, 0x03, 0x38, 0x18, 0xae, 0xfc, 0x67, 0xb4, 0x65, 0x46, 0x52, 0x29, 0x28, 0x42,
	0x49, 0xbd, 0x9a, 0x8f, 0x19, 0x25, 0x99, 0xe4, 0xee, 0x8f, 0x4c, 0xaf, 0xea, 0xdb, 0x48, 0x2b,
	0xd0, 0x0c, 0x4e, 0x1a, 0xec, 0x60, 0x9e, 0x62, 0xbc, 0xd8, 0x6f, 0xc7, 0x02, 0xa6, 0x52, 0xba,
	0xbf, 0xad, 0xaa, 0xb5, 0xd2, 0x96, 0x58, 0x23, 0xda, 0x43, 0x20, 0x35, 0xa8, 0x76, 0x8a, 0x8a,
	0xee, 0x5a, 0x5d, 0xd8, 0xe7, 0xe2, 0x80, 0x0b, 0xe9, 0xfe, 0x8e, 0xae, 0x9d, 0x42, 0xd2, 0x83,
	0x6e, 0xde, 0x24, 0x02, 0x7e, 0x9e, 0xa8, 0x25, 0xfc, 0x30, 0xe9, 0x49, 0x15, 0x7d, 0xfc, 0x5d,
	0x35, 0xeb, 0x69, 0x4b, 0xac, 0x50, 0xeb, 0x7a, 0xa4, 0x61, 0x71, 0xaa, 0x91, 0xee, 0xef, 0x95,
	0xb0, 0xf5, 0x54, 0x01, 0xb1, 0x0c, 0xad, 0x93, 0x66, 0x82, 0x5b, 0xd9, 0xc9, 0x7f, 0xae, 0xcb,
	0xd0, 0x90, 0x50, 0xe6, 0x21, 0xef, 0xb2, 0x29, 0x93, 0x0c, 0x3d, 0xc8, 0x53, 0xfd, 0x05, 0x98,
	0xdf, 0xd7, 0x75, 0x68, 0x8a, 0xf6, 0x24, 0x4f, 0xd5, 0x57, 0x5f, 0xe6, 0xd9, 0x48, 0x9c, 0xf9,
	0x01, 0x86, 0xc7, 0xfe, 0x05, 0xa1, 0x4e, 0xc7, 0x59, 0x03, 0xc3, 0x60, 0x17, 0x19, 0xc3, 0x55,
	0x24, 0xea, 0xbf, 0x54, 0x8f, 0x21, 0x34, 0x11, 0xfd, 0x32, 0x1b, 0x25, 0xc7, 0x98, 0x00, 0xff,
	0x4a, 0x3d, 0x86, 0xd8, 0x46, 0x88, 0x1f, 0xd5, 0x4c, 0x9e, 0xd1, 0x36, 0xb1, 0x7f, 0x40, 0x26,
	0xf6, 0x3b, 0xcf, 0x3c, 0xa5, 0x6f, 0x92, 0x97, 0x96, 0x8d, 0x85, 0x63, 0x4d, 0xbd, 0xf9, 0x5b,
	0x7e, 0x44, 0xce, 0xfd, 0xb1, 0x3e, 0xd6, 0x88, 0xb4, 0xaa, 0x3f, 0x22, 0x87, 0xce, 0xb1, 0x0e,
	0x7d, 0x0a, 0x9e, 0x27, 0x41, 0x88, 0xe1, 0xfa, 0x3f, 0xac, 0x55, 0x62, 0x9f, 0x1e, 0x51, 0x1a,
	0xf8, 0x19, 0x5d, 0x83, 0x8f, 0x7a, 0x14, 0x55, 0xfd, 0xd7, 0x04, 0xae, 0x2b, 0xf0, 0x6a, 0x0f,
	0x83, 0xaa, 0xef, 0xb2, 0x85, 0x7e, 0x24, 0x5a, 0x55, 0x3f, 0xa5, 0x62, 0xb9, 0x7f, 0x43, 0x5c,
	0x73, 0x15, 0x2e, 0xb0, 0xad, 0x5b, 0x54, 0x28, 0xf7, 0x90, 0x5d, 0xe2, 0x1d, 0xcc, 0xd8, 0x91,
	0x33, 0x99, 0x76, 0xe2, 0x94, 0x73, 0x11, 0xa7, 0x1d, 0x63, 0x39, 0xff, 0x2d, 0x89, 0x58, 0x20,
	0xdc, 0x0e, 0xf8, 0x96, 0x25, 0x4a, 0xdb, 0xd2, 0xdf, 0xae, 0xb1, 0x39, 0x30, 0xef, 0x71, 0x1a,
	0x17, 0xf8, 0xca, 0xb0, 0x55, 0xcd, 0xf6, 0xef, 0x6a, 0xcf, 0xbe, 0x9c, 0x6d, 0xaa, 0x08, 0xf3,
	0xf5, 0x34, 0x2e, 0x9a, 0xc7, 0x69, 0xa8, 0xab, 0xda, 0x9c, 0x3f, 0xaa, 0xb1, 0x97, 0xab, 0x4a,
	0xe7, 0x7b, 0x81, 0xe4, 0x7e, 0x71, 0x98, 0x59, 0xea, 0xff, 0xfb, 0xe7, 0x40, 0xfd, 0xf3, 0x96,
	0xfa, 0x3b, 0xa0, 0xe3, 0xee, 0x61, 0x66, 0x86, 0xf1, 0x07, 0x35, 0xb6, 0x50, 0x1d, 0x46, 0x94,
	0xa5, 0xdc, 0x1a, 0xc1, 0x7f, 0x78, 0x0e, 0x46, 0x30, 0x67, 0x8d, 0x60, 0x35, 0x4b, 0xb9, 0xd1,
	0xfe, 0x26, 0xd3, 0xcf, 0x8b, 0x1f, 0xc8, 0xfb, 0x78, 0x3a, 0xba, 0x7f, 0xa4, 0x9c, 0x49, 0x45,
	0x68, 0xc8, 0xfb, 0x70, 0x36, 0xe2, 0x1d, 0xca, 0xae, 0x4a, 0xfe, 0x8f, 0xca, 0x39, 0xb4, 0x8b,
	0x92, 0x6f, 0xb1, 0xc9, 0xc1, 0x92, 0xe4, 0xff, 0xa4, 0x2c, 0x61, 0x7f, 0x45, 0xf2, 0x1d, 0xe6,
	0x0c, 0xa9, 0x47, 0xfe, 0xcf, 0xea, 0xb1, 0x1c, 0x28, 0x47, 0x06, 0xbf, 0xb7, 0xbf, 0x18, 0xf9,
	0x8f, 0xd5, 0xf1, 0xd1, 0x57, 0x8a, 0xfc, 0xa3, 0x1a, 0x9b, 0x36, 0xce, 0x45, 0x37, 0x00, 0x9b,
	0x9a, 0xc2, 0x3c, 0xba, 0x7f, 0xf2, 0x0c, 0x6f, 0x11, 0xa6, 0x10, 0xc9, 0x9b, 0xd2, 0xba, 0x6d,
	0x96, 0xaa, 0xc1, 0x19, 0x12, 0x1d, 0xa7, 0x41, 0x37, 0x0e, 0xcb, 0x0f, 0x90, 0xfc, 0x17, 0x35,
	0x73, 0x8a, 0xa0, 0x93, 0xb4, 0xad, 0x53, 0x18, 0xaa, 0x7f, 0xe3, 0xff, 0x04, 0x00, 0x00, 0xff,
	0xff, 0x1e, 0x97, 0x0a, 0xc5, 0xf5, 0x5e, 0x00, 0x00,
}
