/*
Copyright 2019 Cisco Systems

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rsi_agent_intf.proto

package cisco_ios_xr_rsi_agent_oper_rsi_agent_nodes_node_interfaces_interface

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type RsiAgentIntf_KEYS struct {
	NodeName             string   `protobuf:"bytes,1,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	VrfName              uint32   `protobuf:"varint,2,opt,name=vrf_name,json=vrfName,proto3" json:"vrf_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RsiAgentIntf_KEYS) Reset()         { *m = RsiAgentIntf_KEYS{} }
func (m *RsiAgentIntf_KEYS) String() string { return proto.CompactTextString(m) }
func (*RsiAgentIntf_KEYS) ProtoMessage()    {}
func (*RsiAgentIntf_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_75bdce64d521e25b, []int{0}
}

func (m *RsiAgentIntf_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RsiAgentIntf_KEYS.Unmarshal(m, b)
}
func (m *RsiAgentIntf_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RsiAgentIntf_KEYS.Marshal(b, m, deterministic)
}
func (m *RsiAgentIntf_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RsiAgentIntf_KEYS.Merge(m, src)
}
func (m *RsiAgentIntf_KEYS) XXX_Size() int {
	return xxx_messageInfo_RsiAgentIntf_KEYS.Size(m)
}
func (m *RsiAgentIntf_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_RsiAgentIntf_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_RsiAgentIntf_KEYS proto.InternalMessageInfo

func (m *RsiAgentIntf_KEYS) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

func (m *RsiAgentIntf_KEYS) GetVrfName() uint32 {
	if m != nil {
		return m.VrfName
	}
	return 0
}

type RsiAgentIntf struct {
	Ifhandle             string   `protobuf:"bytes,50,opt,name=ifhandle,proto3" json:"ifhandle,omitempty"`
	Ifname               string   `protobuf:"bytes,51,opt,name=ifname,proto3" json:"ifname,omitempty"`
	VrfId                uint32   `protobuf:"varint,52,opt,name=vrf_id,json=vrfId,proto3" json:"vrf_id,omitempty"`
	VrfNameXr            string   `protobuf:"bytes,53,opt,name=vrf_name_xr,json=vrfNameXr,proto3" json:"vrf_name_xr,omitempty"`
	VrId                 uint32   `protobuf:"varint,54,opt,name=vr_id,json=vrId,proto3" json:"vr_id,omitempty"`
	VrName               string   `protobuf:"bytes,55,opt,name=vr_name,json=vrName,proto3" json:"vr_name,omitempty"`
	IsVirtual            bool     `protobuf:"varint,56,opt,name=is_virtual,json=isVirtual,proto3" json:"is_virtual,omitempty"`
	IsLocal              bool     `protobuf:"varint,57,opt,name=is_local,json=isLocal,proto3" json:"is_local,omitempty"`
	IsLicensed           bool     `protobuf:"varint,58,opt,name=is_licensed,json=isLicensed,proto3" json:"is_licensed,omitempty"`
	Flags                uint32   `protobuf:"varint,59,opt,name=flags,proto3" json:"flags,omitempty"`
	Refcount             int32    `protobuf:"zigzag32,60,opt,name=refcount,proto3" json:"refcount,omitempty"`
	IntfByIfhRegs        int32    `protobuf:"zigzag32,61,opt,name=intf_by_ifh_regs,json=intfByIfhRegs,proto3" json:"intf_by_ifh_regs,omitempty"`
	IntfTblByIfhRegs     int32    `protobuf:"zigzag32,62,opt,name=intf_tbl_by_ifh_regs,json=intfTblByIfhRegs,proto3" json:"intf_tbl_by_ifh_regs,omitempty"`
	RaTblSet             []uint32 `protobuf:"varint,63,rep,packed,name=ra_tbl_set,json=raTblSet,proto3" json:"ra_tbl_set,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RsiAgentIntf) Reset()         { *m = RsiAgentIntf{} }
func (m *RsiAgentIntf) String() string { return proto.CompactTextString(m) }
func (*RsiAgentIntf) ProtoMessage()    {}
func (*RsiAgentIntf) Descriptor() ([]byte, []int) {
	return fileDescriptor_75bdce64d521e25b, []int{1}
}

func (m *RsiAgentIntf) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RsiAgentIntf.Unmarshal(m, b)
}
func (m *RsiAgentIntf) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RsiAgentIntf.Marshal(b, m, deterministic)
}
func (m *RsiAgentIntf) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RsiAgentIntf.Merge(m, src)
}
func (m *RsiAgentIntf) XXX_Size() int {
	return xxx_messageInfo_RsiAgentIntf.Size(m)
}
func (m *RsiAgentIntf) XXX_DiscardUnknown() {
	xxx_messageInfo_RsiAgentIntf.DiscardUnknown(m)
}

var xxx_messageInfo_RsiAgentIntf proto.InternalMessageInfo

func (m *RsiAgentIntf) GetIfhandle() string {
	if m != nil {
		return m.Ifhandle
	}
	return ""
}

func (m *RsiAgentIntf) GetIfname() string {
	if m != nil {
		return m.Ifname
	}
	return ""
}

func (m *RsiAgentIntf) GetVrfId() uint32 {
	if m != nil {
		return m.VrfId
	}
	return 0
}

func (m *RsiAgentIntf) GetVrfNameXr() string {
	if m != nil {
		return m.VrfNameXr
	}
	return ""
}

func (m *RsiAgentIntf) GetVrId() uint32 {
	if m != nil {
		return m.VrId
	}
	return 0
}

func (m *RsiAgentIntf) GetVrName() string {
	if m != nil {
		return m.VrName
	}
	return ""
}

func (m *RsiAgentIntf) GetIsVirtual() bool {
	if m != nil {
		return m.IsVirtual
	}
	return false
}

func (m *RsiAgentIntf) GetIsLocal() bool {
	if m != nil {
		return m.IsLocal
	}
	return false
}

func (m *RsiAgentIntf) GetIsLicensed() bool {
	if m != nil {
		return m.IsLicensed
	}
	return false
}

func (m *RsiAgentIntf) GetFlags() uint32 {
	if m != nil {
		return m.Flags
	}
	return 0
}

func (m *RsiAgentIntf) GetRefcount() int32 {
	if m != nil {
		return m.Refcount
	}
	return 0
}

func (m *RsiAgentIntf) GetIntfByIfhRegs() int32 {
	if m != nil {
		return m.IntfByIfhRegs
	}
	return 0
}

func (m *RsiAgentIntf) GetIntfTblByIfhRegs() int32 {
	if m != nil {
		return m.IntfTblByIfhRegs
	}
	return 0
}

func (m *RsiAgentIntf) GetRaTblSet() []uint32 {
	if m != nil {
		return m.RaTblSet
	}
	return nil
}

func init() {
	proto.RegisterType((*RsiAgentIntf_KEYS)(nil), "cisco_ios_xr_rsi_agent_oper.rsi_agent.nodes.node.interfaces.interface.rsi_agent_intf_KEYS")
	proto.RegisterType((*RsiAgentIntf)(nil), "cisco_ios_xr_rsi_agent_oper.rsi_agent.nodes.node.interfaces.interface.rsi_agent_intf")
}

func init() { proto.RegisterFile("rsi_agent_intf.proto", fileDescriptor_75bdce64d521e25b) }

var fileDescriptor_75bdce64d521e25b = []byte{
	// 400 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x52, 0x5b, 0x6f, 0xd3, 0x30,
	0x14, 0x56, 0x18, 0x6d, 0xd3, 0x33, 0x15, 0x81, 0x57, 0xc0, 0xdc, 0xa3, 0xbd, 0x90, 0xa7, 0x3c,
	0x30, 0xee, 0x57, 0x09, 0x69, 0x0f, 0x15, 0x83, 0x87, 0x6c, 0x42, 0xf0, 0x64, 0x39, 0x89, 0xdd,
	0x1e, 0x29, 0x4b, 0xa6, 0x63, 0xcf, 0xda, 0x7e, 0x14, 0xff, 0x11, 0xf9, 0xa4, 0x6b, 0xd5, 0x97,
	0x28, 0xdf, 0xf9, 0x6e, 0xf6, 0x91, 0x61, 0x4e, 0x0e, 0x95, 0x5e, 0x9a, 0xce, 0x2b, 0xec, 0xbc,
	0x2d, 0x2e, 0xa8, 0xf7, 0xbd, 0x38, 0xae, 0xd1, 0xd5, 0xbd, 0xc2, 0xde, 0xa9, 0x2b, 0x52, 0x5b,
	0x49, 0x7f, 0x61, 0xa8, 0xd8, 0xc0, 0xa2, 0xeb, 0x1b, 0xe3, 0xf8, 0x5b, 0x60, 0xe7, 0x0d, 0x59,
	0x5d, 0x1b, 0xb7, 0xfd, 0x3d, 0xfc, 0x09, 0x07, 0xbb, 0xf1, 0xea, 0xc7, 0xf1, 0xdf, 0x53, 0xf1,
	0x04, 0xa6, 0xd1, 0xa3, 0x3a, 0x7d, 0x6e, 0x64, 0x92, 0x25, 0xf9, 0xb4, 0x4c, 0xe3, 0xe0, 0x97,
	0x3e, 0x37, 0xe2, 0x11, 0xa4, 0x81, 0xec, 0xc0, 0xdd, 0xca, 0x92, 0x7c, 0x56, 0x4e, 0x02, 0xd9,
	0x48, 0x1d, 0xfe, 0xdb, 0x83, 0x3b, 0xbb, 0x79, 0xe2, 0x31, 0xa4, 0x68, 0x57, 0xba, 0x6b, 0x5a,
	0x23, 0x5f, 0x0d, 0x49, 0x37, 0x58, 0x3c, 0x80, 0x31, 0x5a, 0xce, 0x39, 0x62, 0x66, 0x8d, 0xc4,
	0x7d, 0x18, 0xc7, 0x06, 0x6c, 0xe4, 0x6b, 0xce, 0x1f, 0x05, 0xb2, 0x8b, 0x46, 0x3c, 0x87, 0xfd,
	0x9b, 0x62, 0x75, 0x45, 0xf2, 0x0d, 0x7b, 0xa6, 0xeb, 0xee, 0x3f, 0x24, 0x0e, 0x60, 0x14, 0x28,
	0xba, 0xde, 0xb2, 0xeb, 0x76, 0xa0, 0x45, 0x23, 0x1e, 0xc2, 0x24, 0xd0, 0x70, 0xd8, 0x77, 0x43,
	0x49, 0x20, 0xbe, 0xc6, 0x33, 0x00, 0x74, 0x2a, 0x20, 0xf9, 0x4b, 0xdd, 0xca, 0xf7, 0x59, 0x92,
	0xa7, 0xe5, 0x14, 0xdd, 0xef, 0x61, 0x10, 0x6f, 0x89, 0x4e, 0xb5, 0x7d, 0xad, 0x5b, 0xf9, 0x81,
	0xc9, 0x09, 0xba, 0x93, 0x08, 0xc5, 0x0b, 0xd8, 0x8f, 0x14, 0xd6, 0xa6, 0x73, 0xa6, 0x91, 0x1f,
	0x99, 0x05, 0x74, 0x27, 0xeb, 0x89, 0x98, 0xc3, 0xc8, 0xb6, 0x7a, 0xe9, 0xe4, 0xa7, 0xe1, 0xf8,
	0x0c, 0xe2, 0x26, 0xc8, 0xd8, 0xba, 0xbf, 0xec, 0xbc, 0xfc, 0x9c, 0x25, 0xf9, 0xbd, 0x72, 0x83,
	0xc5, 0x4b, 0xb8, 0xcb, 0xdb, 0xaf, 0xae, 0x15, 0xda, 0x95, 0x22, 0xb3, 0x74, 0xf2, 0x0b, 0x6b,
	0x66, 0x71, 0xfe, 0xfd, 0x7a, 0x61, 0x57, 0xa5, 0x59, 0x3a, 0x51, 0xc0, 0x9c, 0x85, 0xbe, 0x6a,
	0x77, 0xc4, 0x5f, 0x59, 0xcc, 0x21, 0x67, 0x55, 0xbb, 0xd5, 0x3f, 0x05, 0x20, 0xcd, 0x6a, 0x67,
	0xbc, 0xfc, 0x96, 0xed, 0xe5, 0xb3, 0x32, 0x25, 0x7d, 0x56, 0xb5, 0xa7, 0xc6, 0x57, 0x63, 0x7e,
	0x4c, 0x47, 0xff, 0x03, 0x00, 0x00, 0xff, 0xff, 0xce, 0x59, 0xa3, 0x3a, 0x64, 0x02, 0x00, 0x00,
}
