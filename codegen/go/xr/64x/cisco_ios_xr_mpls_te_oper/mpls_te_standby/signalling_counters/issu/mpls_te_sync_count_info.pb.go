/*
Copyright 2019 Cisco Systems

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: mpls_te_sync_count_info.proto

package cisco_ios_xr_mpls_te_oper_mpls_te_standby_signalling_counters_issu

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type MplsTeSyncCountInfo_KEYS struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MplsTeSyncCountInfo_KEYS) Reset()         { *m = MplsTeSyncCountInfo_KEYS{} }
func (m *MplsTeSyncCountInfo_KEYS) String() string { return proto.CompactTextString(m) }
func (*MplsTeSyncCountInfo_KEYS) ProtoMessage()    {}
func (*MplsTeSyncCountInfo_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_d665ecd1f10bad68, []int{0}
}

func (m *MplsTeSyncCountInfo_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MplsTeSyncCountInfo_KEYS.Unmarshal(m, b)
}
func (m *MplsTeSyncCountInfo_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MplsTeSyncCountInfo_KEYS.Marshal(b, m, deterministic)
}
func (m *MplsTeSyncCountInfo_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MplsTeSyncCountInfo_KEYS.Merge(m, src)
}
func (m *MplsTeSyncCountInfo_KEYS) XXX_Size() int {
	return xxx_messageInfo_MplsTeSyncCountInfo_KEYS.Size(m)
}
func (m *MplsTeSyncCountInfo_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_MplsTeSyncCountInfo_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_MplsTeSyncCountInfo_KEYS proto.InternalMessageInfo

type MplsTeSyncCountInfo struct {
	LastClearedTimestamp uint32   `protobuf:"varint,50,opt,name=last_cleared_timestamp,json=lastClearedTimestamp,proto3" json:"last_cleared_timestamp,omitempty"`
	Role                 string   `protobuf:"bytes,51,opt,name=role,proto3" json:"role,omitempty"`
	LastIdtStates        uint32   `protobuf:"varint,52,opt,name=last_idt_states,json=lastIdtStates,proto3" json:"last_idt_states,omitempty"`
	TotalStates          uint32   `protobuf:"varint,53,opt,name=total_states,json=totalStates,proto3" json:"total_states,omitempty"`
	TotalDeletions       uint32   `protobuf:"varint,54,opt,name=total_deletions,json=totalDeletions,proto3" json:"total_deletions,omitempty"`
	TotalNacKs           uint64   `protobuf:"varint,55,opt,name=total_nac_ks,json=totalNacKs,proto3" json:"total_nac_ks,omitempty"`
	TotalIdTs            uint32   `protobuf:"varint,56,opt,name=total_id_ts,json=totalIdTs,proto3" json:"total_id_ts,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MplsTeSyncCountInfo) Reset()         { *m = MplsTeSyncCountInfo{} }
func (m *MplsTeSyncCountInfo) String() string { return proto.CompactTextString(m) }
func (*MplsTeSyncCountInfo) ProtoMessage()    {}
func (*MplsTeSyncCountInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d665ecd1f10bad68, []int{1}
}

func (m *MplsTeSyncCountInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MplsTeSyncCountInfo.Unmarshal(m, b)
}
func (m *MplsTeSyncCountInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MplsTeSyncCountInfo.Marshal(b, m, deterministic)
}
func (m *MplsTeSyncCountInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MplsTeSyncCountInfo.Merge(m, src)
}
func (m *MplsTeSyncCountInfo) XXX_Size() int {
	return xxx_messageInfo_MplsTeSyncCountInfo.Size(m)
}
func (m *MplsTeSyncCountInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_MplsTeSyncCountInfo.DiscardUnknown(m)
}

var xxx_messageInfo_MplsTeSyncCountInfo proto.InternalMessageInfo

func (m *MplsTeSyncCountInfo) GetLastClearedTimestamp() uint32 {
	if m != nil {
		return m.LastClearedTimestamp
	}
	return 0
}

func (m *MplsTeSyncCountInfo) GetRole() string {
	if m != nil {
		return m.Role
	}
	return ""
}

func (m *MplsTeSyncCountInfo) GetLastIdtStates() uint32 {
	if m != nil {
		return m.LastIdtStates
	}
	return 0
}

func (m *MplsTeSyncCountInfo) GetTotalStates() uint32 {
	if m != nil {
		return m.TotalStates
	}
	return 0
}

func (m *MplsTeSyncCountInfo) GetTotalDeletions() uint32 {
	if m != nil {
		return m.TotalDeletions
	}
	return 0
}

func (m *MplsTeSyncCountInfo) GetTotalNacKs() uint64 {
	if m != nil {
		return m.TotalNacKs
	}
	return 0
}

func (m *MplsTeSyncCountInfo) GetTotalIdTs() uint32 {
	if m != nil {
		return m.TotalIdTs
	}
	return 0
}

func init() {
	proto.RegisterType((*MplsTeSyncCountInfo_KEYS)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te_standby.signalling_counters.issu.mpls_te_sync_count_info_KEYS")
	proto.RegisterType((*MplsTeSyncCountInfo)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te_standby.signalling_counters.issu.mpls_te_sync_count_info")
}

func init() { proto.RegisterFile("mpls_te_sync_count_info.proto", fileDescriptor_d665ecd1f10bad68) }

var fileDescriptor_d665ecd1f10bad68 = []byte{
	// 284 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x91, 0x4d, 0x4b, 0x33, 0x31,
	0x14, 0x46, 0xe9, 0x4b, 0x79, 0xa1, 0xd1, 0x5a, 0x08, 0xa2, 0x59, 0x68, 0x19, 0xbb, 0xd0, 0xae,
	0x66, 0x61, 0xeb, 0xc7, 0xda, 0x8f, 0x45, 0x29, 0xb8, 0x68, 0xbb, 0x71, 0x75, 0x49, 0x93, 0x58,
	0x82, 0x69, 0x32, 0xe4, 0xde, 0x82, 0xfd, 0x29, 0xfe, 0x5b, 0x99, 0x3b, 0x8e, 0xbb, 0xee, 0x86,
	0xf3, 0x9c, 0x39, 0x09, 0x44, 0x5c, 0x6e, 0xab, 0x80, 0x40, 0x0e, 0x70, 0x1f, 0x0d, 0x98, 0xb4,
	0x8b, 0x04, 0x3e, 0x7e, 0xa4, 0xb2, 0xca, 0x89, 0x92, 0x7c, 0x32, 0x1e, 0x4d, 0x02, 0x9f, 0x10,
	0xbe, 0x32, 0xb4, 0x6e, 0xaa, 0x5c, 0x2e, 0xff, 0x7e, 0x24, 0x1d, 0xed, 0x7a, 0x5f, 0xa2, 0xdf,
	0x44, 0x1d, 0x82, 0x8f, 0x9b, 0x26, 0xe3, 0x32, 0x96, 0x1e, 0x71, 0x37, 0x1a, 0x8a, 0x8b, 0x03,
	0x87, 0xc0, 0xfc, 0xf5, 0x7d, 0x39, 0xfa, 0xfe, 0x27, 0xce, 0x0f, 0x08, 0x72, 0x2a, 0xce, 0x82,
	0x46, 0x02, 0x13, 0x9c, 0xce, 0xce, 0x02, 0xf9, 0xad, 0x43, 0xd2, 0xdb, 0x4a, 0xdd, 0x16, 0x9d,
	0x71, 0x7f, 0x71, 0x5a, 0xaf, 0xcf, 0xcd, 0xb8, 0x6a, 0x37, 0x29, 0x45, 0x37, 0xa7, 0xe0, 0xd4,
	0xa4, 0xe8, 0x8c, 0x7b, 0x0b, 0xfe, 0x96, 0xd7, 0x62, 0xc0, 0x25, 0x6f, 0xa9, 0xbe, 0x32, 0x39,
	0x54, 0x53, 0x4e, 0xf4, 0x6b, 0x3c, 0xb3, 0xb4, 0x64, 0x28, 0xaf, 0xc4, 0x31, 0x25, 0xd2, 0xa1,
	0x95, 0xee, 0x58, 0x3a, 0x62, 0xf6, 0xab, 0xdc, 0x88, 0x41, 0xa3, 0x58, 0x17, 0x1c, 0xf9, 0x14,
	0x51, 0xdd, 0xb3, 0x75, 0xc2, 0xf8, 0xa5, 0xa5, 0xb2, 0x68, 0x5b, 0x51, 0x1b, 0xf8, 0x44, 0xf5,
	0x50, 0x74, 0xc6, 0xdd, 0x85, 0x60, 0xf6, 0xa6, 0xcd, 0x1c, 0xe5, 0x50, 0x34, 0x65, 0xf0, 0x16,
	0x08, 0xd5, 0x23, 0x67, 0x7a, 0x8c, 0x66, 0x76, 0x85, 0xeb, 0xff, 0xfc, 0x0c, 0x93, 0x9f, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x2c, 0xe5, 0x38, 0x69, 0xa7, 0x01, 0x00, 0x00,
}
