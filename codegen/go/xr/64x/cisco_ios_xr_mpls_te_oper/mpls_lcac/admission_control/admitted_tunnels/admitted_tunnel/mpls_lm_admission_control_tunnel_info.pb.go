/*
Copyright 2019 Cisco Systems

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: mpls_lm_admission_control_tunnel_info.proto

package cisco_ios_xr_mpls_te_oper_mpls_lcac_admission_control_admitted_tunnels_admitted_tunnel

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type MplsLmAdmissionControlTunnelInfo_KEYS struct {
	SourceAddress        string   `protobuf:"bytes,1,opt,name=source_address,json=sourceAddress,proto3" json:"source_address,omitempty"`
	DestinationPort      uint32   `protobuf:"varint,2,opt,name=destination_port,json=destinationPort,proto3" json:"destination_port,omitempty"`
	SourcePort           uint32   `protobuf:"varint,3,opt,name=source_port,json=sourcePort,proto3" json:"source_port,omitempty"`
	DestinationAddress   string   `protobuf:"bytes,4,opt,name=destination_address,json=destinationAddress,proto3" json:"destination_address,omitempty"`
	ExtendedTunnelId     string   `protobuf:"bytes,5,opt,name=extended_tunnel_id,json=extendedTunnelId,proto3" json:"extended_tunnel_id,omitempty"`
	NextHopAddress       string   `protobuf:"bytes,6,opt,name=next_hop_address,json=nextHopAddress,proto3" json:"next_hop_address,omitempty"`
	Ctype                string   `protobuf:"bytes,7,opt,name=ctype,proto3" json:"ctype,omitempty"`
	P2MpId               uint32   `protobuf:"varint,8,opt,name=p2mp_id,json=p2mpId,proto3" json:"p2mp_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MplsLmAdmissionControlTunnelInfo_KEYS) Reset()         { *m = MplsLmAdmissionControlTunnelInfo_KEYS{} }
func (m *MplsLmAdmissionControlTunnelInfo_KEYS) String() string { return proto.CompactTextString(m) }
func (*MplsLmAdmissionControlTunnelInfo_KEYS) ProtoMessage()    {}
func (*MplsLmAdmissionControlTunnelInfo_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_ba0bd9ba3fbe8899, []int{0}
}

func (m *MplsLmAdmissionControlTunnelInfo_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MplsLmAdmissionControlTunnelInfo_KEYS.Unmarshal(m, b)
}
func (m *MplsLmAdmissionControlTunnelInfo_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MplsLmAdmissionControlTunnelInfo_KEYS.Marshal(b, m, deterministic)
}
func (m *MplsLmAdmissionControlTunnelInfo_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MplsLmAdmissionControlTunnelInfo_KEYS.Merge(m, src)
}
func (m *MplsLmAdmissionControlTunnelInfo_KEYS) XXX_Size() int {
	return xxx_messageInfo_MplsLmAdmissionControlTunnelInfo_KEYS.Size(m)
}
func (m *MplsLmAdmissionControlTunnelInfo_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_MplsLmAdmissionControlTunnelInfo_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_MplsLmAdmissionControlTunnelInfo_KEYS proto.InternalMessageInfo

func (m *MplsLmAdmissionControlTunnelInfo_KEYS) GetSourceAddress() string {
	if m != nil {
		return m.SourceAddress
	}
	return ""
}

func (m *MplsLmAdmissionControlTunnelInfo_KEYS) GetDestinationPort() uint32 {
	if m != nil {
		return m.DestinationPort
	}
	return 0
}

func (m *MplsLmAdmissionControlTunnelInfo_KEYS) GetSourcePort() uint32 {
	if m != nil {
		return m.SourcePort
	}
	return 0
}

func (m *MplsLmAdmissionControlTunnelInfo_KEYS) GetDestinationAddress() string {
	if m != nil {
		return m.DestinationAddress
	}
	return ""
}

func (m *MplsLmAdmissionControlTunnelInfo_KEYS) GetExtendedTunnelId() string {
	if m != nil {
		return m.ExtendedTunnelId
	}
	return ""
}

func (m *MplsLmAdmissionControlTunnelInfo_KEYS) GetNextHopAddress() string {
	if m != nil {
		return m.NextHopAddress
	}
	return ""
}

func (m *MplsLmAdmissionControlTunnelInfo_KEYS) GetCtype() string {
	if m != nil {
		return m.Ctype
	}
	return ""
}

func (m *MplsLmAdmissionControlTunnelInfo_KEYS) GetP2MpId() uint32 {
	if m != nil {
		return m.P2MpId
	}
	return 0
}

type MplsLmAdmissionControlTunnelInfo struct {
	TunnelName           string   `protobuf:"bytes,50,opt,name=tunnel_name,json=tunnelName,proto3" json:"tunnel_name,omitempty"`
	BandwidthState       string   `protobuf:"bytes,51,opt,name=bandwidth_state,json=bandwidthState,proto3" json:"bandwidth_state,omitempty"`
	BandwidthPool        string   `protobuf:"bytes,52,opt,name=bandwidth_pool,json=bandwidthPool,proto3" json:"bandwidth_pool,omitempty"`
	SetupPriority        uint32   `protobuf:"varint,53,opt,name=setup_priority,json=setupPriority,proto3" json:"setup_priority,omitempty"`
	HoldPriority         uint32   `protobuf:"varint,54,opt,name=hold_priority,json=holdPriority,proto3" json:"hold_priority,omitempty"`
	UpLinkName           string   `protobuf:"bytes,55,opt,name=up_link_name,json=upLinkName,proto3" json:"up_link_name,omitempty"`
	DownLinkName         string   `protobuf:"bytes,56,opt,name=down_link_name,json=downLinkName,proto3" json:"down_link_name,omitempty"`
	TunnelState          string   `protobuf:"bytes,57,opt,name=tunnel_state,json=tunnelState,proto3" json:"tunnel_state,omitempty"`
	Bandwidth            uint64   `protobuf:"varint,58,opt,name=bandwidth,proto3" json:"bandwidth,omitempty"`
	LocalLabel           uint32   `protobuf:"varint,59,opt,name=local_label,json=localLabel,proto3" json:"local_label,omitempty"`
	OutgoingLabel        uint32   `protobuf:"varint,60,opt,name=outgoing_label,json=outgoingLabel,proto3" json:"outgoing_label,omitempty"`
	BackupInterface      string   `protobuf:"bytes,61,opt,name=backup_interface,json=backupInterface,proto3" json:"backup_interface,omitempty"`
	IsRerouted           bool     `protobuf:"varint,62,opt,name=is_rerouted,json=isRerouted,proto3" json:"is_rerouted,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MplsLmAdmissionControlTunnelInfo) Reset()         { *m = MplsLmAdmissionControlTunnelInfo{} }
func (m *MplsLmAdmissionControlTunnelInfo) String() string { return proto.CompactTextString(m) }
func (*MplsLmAdmissionControlTunnelInfo) ProtoMessage()    {}
func (*MplsLmAdmissionControlTunnelInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_ba0bd9ba3fbe8899, []int{1}
}

func (m *MplsLmAdmissionControlTunnelInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MplsLmAdmissionControlTunnelInfo.Unmarshal(m, b)
}
func (m *MplsLmAdmissionControlTunnelInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MplsLmAdmissionControlTunnelInfo.Marshal(b, m, deterministic)
}
func (m *MplsLmAdmissionControlTunnelInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MplsLmAdmissionControlTunnelInfo.Merge(m, src)
}
func (m *MplsLmAdmissionControlTunnelInfo) XXX_Size() int {
	return xxx_messageInfo_MplsLmAdmissionControlTunnelInfo.Size(m)
}
func (m *MplsLmAdmissionControlTunnelInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_MplsLmAdmissionControlTunnelInfo.DiscardUnknown(m)
}

var xxx_messageInfo_MplsLmAdmissionControlTunnelInfo proto.InternalMessageInfo

func (m *MplsLmAdmissionControlTunnelInfo) GetTunnelName() string {
	if m != nil {
		return m.TunnelName
	}
	return ""
}

func (m *MplsLmAdmissionControlTunnelInfo) GetBandwidthState() string {
	if m != nil {
		return m.BandwidthState
	}
	return ""
}

func (m *MplsLmAdmissionControlTunnelInfo) GetBandwidthPool() string {
	if m != nil {
		return m.BandwidthPool
	}
	return ""
}

func (m *MplsLmAdmissionControlTunnelInfo) GetSetupPriority() uint32 {
	if m != nil {
		return m.SetupPriority
	}
	return 0
}

func (m *MplsLmAdmissionControlTunnelInfo) GetHoldPriority() uint32 {
	if m != nil {
		return m.HoldPriority
	}
	return 0
}

func (m *MplsLmAdmissionControlTunnelInfo) GetUpLinkName() string {
	if m != nil {
		return m.UpLinkName
	}
	return ""
}

func (m *MplsLmAdmissionControlTunnelInfo) GetDownLinkName() string {
	if m != nil {
		return m.DownLinkName
	}
	return ""
}

func (m *MplsLmAdmissionControlTunnelInfo) GetTunnelState() string {
	if m != nil {
		return m.TunnelState
	}
	return ""
}

func (m *MplsLmAdmissionControlTunnelInfo) GetBandwidth() uint64 {
	if m != nil {
		return m.Bandwidth
	}
	return 0
}

func (m *MplsLmAdmissionControlTunnelInfo) GetLocalLabel() uint32 {
	if m != nil {
		return m.LocalLabel
	}
	return 0
}

func (m *MplsLmAdmissionControlTunnelInfo) GetOutgoingLabel() uint32 {
	if m != nil {
		return m.OutgoingLabel
	}
	return 0
}

func (m *MplsLmAdmissionControlTunnelInfo) GetBackupInterface() string {
	if m != nil {
		return m.BackupInterface
	}
	return ""
}

func (m *MplsLmAdmissionControlTunnelInfo) GetIsRerouted() bool {
	if m != nil {
		return m.IsRerouted
	}
	return false
}

func init() {
	proto.RegisterType((*MplsLmAdmissionControlTunnelInfo_KEYS)(nil), "cisco_ios_xr_mpls_te_oper.mpls_lcac.admission_control.admitted_tunnels.admitted_tunnel.mpls_lm_admission_control_tunnel_info_KEYS")
	proto.RegisterType((*MplsLmAdmissionControlTunnelInfo)(nil), "cisco_ios_xr_mpls_te_oper.mpls_lcac.admission_control.admitted_tunnels.admitted_tunnel.mpls_lm_admission_control_tunnel_info")
}

func init() {
	proto.RegisterFile("mpls_lm_admission_control_tunnel_info.proto", fileDescriptor_ba0bd9ba3fbe8899)
}

var fileDescriptor_ba0bd9ba3fbe8899 = []byte{
	// 523 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x93, 0x4b, 0x6f, 0x13, 0x3d,
	0x14, 0x86, 0x95, 0x7e, 0x69, 0xda, 0xfa, 0xcb, 0x4d, 0x03, 0x12, 0x5e, 0x20, 0x11, 0x0a, 0x15,
	0x29, 0xa0, 0x20, 0xb5, 0xdc, 0x6f, 0x12, 0x0b, 0x24, 0x22, 0x2a, 0x14, 0xa5, 0x08, 0x89, 0x95,
	0xe5, 0x8c, 0xdd, 0xc6, 0x8a, 0xc7, 0xc7, 0xb2, 0x3d, 0x6a, 0xba, 0xe4, 0x57, 0xf2, 0x77, 0x90,
	0x8f, 0x67, 0x26, 0x11, 0x6c, 0xba, 0xf4, 0xe3, 0x27, 0xef, 0xb9, 0x38, 0x43, 0x9e, 0x14, 0x56,
	0x7b, 0xa6, 0x0b, 0xc6, 0x45, 0xa1, 0xbc, 0x57, 0x60, 0x58, 0x0e, 0x26, 0x38, 0xd0, 0x2c, 0x94,
	0xc6, 0x48, 0xcd, 0x94, 0xb9, 0x80, 0x89, 0x75, 0x10, 0x20, 0xfb, 0x91, 0x2b, 0x9f, 0x03, 0x53,
	0xe0, 0xd9, 0xda, 0x31, 0xfc, 0x65, 0x90, 0x0c, 0xac, 0x74, 0x93, 0x14, 0x93, 0xf3, 0x7c, 0xf2,
	0x4f, 0x10, 0x92, 0x10, 0xa4, 0xa8, 0x12, 0xfd, 0xdf, 0xe0, 0xf0, 0xf7, 0x0e, 0x79, 0x7c, 0xa3,
	0x3e, 0xd8, 0xd7, 0xcf, 0x3f, 0xcf, 0xb3, 0x23, 0xd2, 0xf7, 0x50, 0xba, 0x5c, 0x32, 0x2e, 0x84,
	0x93, 0xde, 0xd3, 0xd6, 0xa8, 0x35, 0x3e, 0x98, 0xf7, 0x12, 0xfd, 0x94, 0x60, 0x76, 0x4c, 0x86,
	0x42, 0xfa, 0xa0, 0x0c, 0x0f, 0x31, 0xce, 0x82, 0x0b, 0x74, 0x67, 0xd4, 0x1a, 0xf7, 0xe6, 0x83,
	0x2d, 0x3e, 0x03, 0x17, 0xb2, 0x7b, 0xe4, 0xff, 0x2a, 0x11, 0xad, 0xff, 0xd0, 0x22, 0x09, 0xa1,
	0xf0, 0x8c, 0xdc, 0xda, 0xce, 0xaa, 0xeb, 0xb6, 0xb1, 0x6e, 0xb6, 0x75, 0x55, 0x17, 0x7f, 0x4a,
	0x32, 0xb9, 0x0e, 0xd2, 0x88, 0x66, 0x4a, 0xa6, 0x04, 0xdd, 0x45, 0x7f, 0x58, 0xdf, 0x7c, 0xc7,
	0x8b, 0xa9, 0xc8, 0xc6, 0x64, 0x68, 0xe4, 0x3a, 0xb0, 0x25, 0xd8, 0x26, 0xbb, 0x83, 0x6e, 0x3f,
	0xf2, 0x2f, 0x60, 0xeb, 0xdc, 0xdb, 0x64, 0x37, 0x0f, 0xd7, 0x56, 0xd2, 0x3d, 0xbc, 0x4e, 0x87,
	0xec, 0x0e, 0xd9, 0xb3, 0x27, 0x85, 0x8d, 0x25, 0xf6, 0xb1, 0xf7, 0x4e, 0x3c, 0x4e, 0xc5, 0xe1,
	0xaf, 0x36, 0x39, 0xba, 0xd1, 0x66, 0xe3, 0x0a, 0xaa, 0xa3, 0xe1, 0x85, 0xa4, 0x27, 0x18, 0x4f,
	0x12, 0xfa, 0xc6, 0x0b, 0x99, 0x3d, 0x22, 0x83, 0x05, 0x37, 0xe2, 0x4a, 0x89, 0xb0, 0x64, 0x3e,
	0xf0, 0x20, 0xe9, 0x69, 0x6a, 0xb1, 0xc1, 0xe7, 0x91, 0xc6, 0xe7, 0xd9, 0x88, 0x16, 0x40, 0xd3,
	0xe7, 0xe9, 0x79, 0x1a, 0x3a, 0x03, 0xd0, 0xf8, 0x8a, 0x32, 0x94, 0x96, 0x59, 0xa7, 0xc0, 0xa9,
	0x70, 0x4d, 0x5f, 0x60, 0xeb, 0x3d, 0xa4, 0xb3, 0x0a, 0x66, 0x0f, 0x48, 0x6f, 0x09, 0x5a, 0x6c,
	0xac, 0x97, 0x68, 0x75, 0x23, 0x6c, 0xa4, 0x11, 0xe9, 0x96, 0x96, 0x69, 0x65, 0x56, 0xa9, 0xfb,
	0x57, 0xa9, 0xfb, 0xd2, 0x9e, 0x29, 0xb3, 0xc2, 0xee, 0x1f, 0x92, 0xbe, 0x80, 0x2b, 0xb3, 0xe5,
	0xbc, 0x46, 0xa7, 0x1b, 0x69, 0x63, 0xdd, 0x27, 0xdd, 0x6a, 0x09, 0x69, 0xc0, 0x37, 0xe8, 0x54,
	0x8b, 0x49, 0xd3, 0xdd, 0x25, 0x07, 0xcd, 0x1c, 0xf4, 0xed, 0xa8, 0x35, 0x6e, 0xcf, 0x37, 0x20,
	0x6e, 0x51, 0x43, 0xce, 0x35, 0xd3, 0x7c, 0x21, 0x35, 0x7d, 0x97, 0xfe, 0x48, 0x88, 0xce, 0x22,
	0x89, 0x53, 0x43, 0x19, 0x2e, 0x41, 0x99, 0xcb, 0xca, 0x79, 0x9f, 0xa6, 0xae, 0x69, 0xd2, 0x8e,
	0xc9, 0x70, 0xc1, 0xf3, 0x55, 0x69, 0x99, 0x32, 0x41, 0xba, 0x0b, 0x9e, 0x4b, 0xfa, 0x01, 0x9b,
	0x19, 0x24, 0x3e, 0xad, 0x71, 0x2c, 0xa9, 0x3c, 0x73, 0xd2, 0x41, 0x19, 0xa4, 0xa0, 0x1f, 0x47,
	0xad, 0xf1, 0xfe, 0x9c, 0x28, 0x3f, 0xaf, 0xc8, 0xa2, 0x83, 0x1f, 0xef, 0xe9, 0x9f, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x4d, 0x92, 0xca, 0xc0, 0xeb, 0x03, 0x00, 0x00,
}
