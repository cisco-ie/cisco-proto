/*
Copyright 2019 Cisco Systems

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: icpe_oper_sat_status.proto

package cisco_ios_xr_icpe_infra_oper_nv_satellite_satellite_statuses_satellite_status

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type IcpeOperSatStatus_KEYS struct {
	SatelliteId          uint32   `protobuf:"varint,1,opt,name=satellite_id,json=satelliteId,proto3" json:"satellite_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IcpeOperSatStatus_KEYS) Reset()         { *m = IcpeOperSatStatus_KEYS{} }
func (m *IcpeOperSatStatus_KEYS) String() string { return proto.CompactTextString(m) }
func (*IcpeOperSatStatus_KEYS) ProtoMessage()    {}
func (*IcpeOperSatStatus_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_390611d8122ec789, []int{0}
}

func (m *IcpeOperSatStatus_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IcpeOperSatStatus_KEYS.Unmarshal(m, b)
}
func (m *IcpeOperSatStatus_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IcpeOperSatStatus_KEYS.Marshal(b, m, deterministic)
}
func (m *IcpeOperSatStatus_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IcpeOperSatStatus_KEYS.Merge(m, src)
}
func (m *IcpeOperSatStatus_KEYS) XXX_Size() int {
	return xxx_messageInfo_IcpeOperSatStatus_KEYS.Size(m)
}
func (m *IcpeOperSatStatus_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_IcpeOperSatStatus_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_IcpeOperSatStatus_KEYS proto.InternalMessageInfo

func (m *IcpeOperSatStatus_KEYS) GetSatelliteId() uint32 {
	if m != nil {
		return m.SatelliteId
	}
	return 0
}

type IcpeOperCandFabPortsCfgd struct {
	PortType             string   `protobuf:"bytes,1,opt,name=port_type,json=portType,proto3" json:"port_type,omitempty"`
	Slot                 uint32   `protobuf:"varint,2,opt,name=slot,proto3" json:"slot,omitempty"`
	Subslot              uint32   `protobuf:"varint,3,opt,name=subslot,proto3" json:"subslot,omitempty"`
	Port                 uint32   `protobuf:"varint,4,opt,name=port,proto3" json:"port,omitempty"`
	Valid                bool     `protobuf:"varint,5,opt,name=valid,proto3" json:"valid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IcpeOperCandFabPortsCfgd) Reset()         { *m = IcpeOperCandFabPortsCfgd{} }
func (m *IcpeOperCandFabPortsCfgd) String() string { return proto.CompactTextString(m) }
func (*IcpeOperCandFabPortsCfgd) ProtoMessage()    {}
func (*IcpeOperCandFabPortsCfgd) Descriptor() ([]byte, []int) {
	return fileDescriptor_390611d8122ec789, []int{1}
}

func (m *IcpeOperCandFabPortsCfgd) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IcpeOperCandFabPortsCfgd.Unmarshal(m, b)
}
func (m *IcpeOperCandFabPortsCfgd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IcpeOperCandFabPortsCfgd.Marshal(b, m, deterministic)
}
func (m *IcpeOperCandFabPortsCfgd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IcpeOperCandFabPortsCfgd.Merge(m, src)
}
func (m *IcpeOperCandFabPortsCfgd) XXX_Size() int {
	return xxx_messageInfo_IcpeOperCandFabPortsCfgd.Size(m)
}
func (m *IcpeOperCandFabPortsCfgd) XXX_DiscardUnknown() {
	xxx_messageInfo_IcpeOperCandFabPortsCfgd.DiscardUnknown(m)
}

var xxx_messageInfo_IcpeOperCandFabPortsCfgd proto.InternalMessageInfo

func (m *IcpeOperCandFabPortsCfgd) GetPortType() string {
	if m != nil {
		return m.PortType
	}
	return ""
}

func (m *IcpeOperCandFabPortsCfgd) GetSlot() uint32 {
	if m != nil {
		return m.Slot
	}
	return 0
}

func (m *IcpeOperCandFabPortsCfgd) GetSubslot() uint32 {
	if m != nil {
		return m.Subslot
	}
	return 0
}

func (m *IcpeOperCandFabPortsCfgd) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *IcpeOperCandFabPortsCfgd) GetValid() bool {
	if m != nil {
		return m.Valid
	}
	return false
}

type IcpeOperCandFabPortsCurr struct {
	PortType             string   `protobuf:"bytes,1,opt,name=port_type,json=portType,proto3" json:"port_type,omitempty"`
	Slot                 uint32   `protobuf:"varint,2,opt,name=slot,proto3" json:"slot,omitempty"`
	Subslot              uint32   `protobuf:"varint,3,opt,name=subslot,proto3" json:"subslot,omitempty"`
	Port                 uint32   `protobuf:"varint,4,opt,name=port,proto3" json:"port,omitempty"`
	Permanent            bool     `protobuf:"varint,5,opt,name=permanent,proto3" json:"permanent,omitempty"`
	Requested            bool     `protobuf:"varint,6,opt,name=requested,proto3" json:"requested,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IcpeOperCandFabPortsCurr) Reset()         { *m = IcpeOperCandFabPortsCurr{} }
func (m *IcpeOperCandFabPortsCurr) String() string { return proto.CompactTextString(m) }
func (*IcpeOperCandFabPortsCurr) ProtoMessage()    {}
func (*IcpeOperCandFabPortsCurr) Descriptor() ([]byte, []int) {
	return fileDescriptor_390611d8122ec789, []int{2}
}

func (m *IcpeOperCandFabPortsCurr) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IcpeOperCandFabPortsCurr.Unmarshal(m, b)
}
func (m *IcpeOperCandFabPortsCurr) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IcpeOperCandFabPortsCurr.Marshal(b, m, deterministic)
}
func (m *IcpeOperCandFabPortsCurr) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IcpeOperCandFabPortsCurr.Merge(m, src)
}
func (m *IcpeOperCandFabPortsCurr) XXX_Size() int {
	return xxx_messageInfo_IcpeOperCandFabPortsCurr.Size(m)
}
func (m *IcpeOperCandFabPortsCurr) XXX_DiscardUnknown() {
	xxx_messageInfo_IcpeOperCandFabPortsCurr.DiscardUnknown(m)
}

var xxx_messageInfo_IcpeOperCandFabPortsCurr proto.InternalMessageInfo

func (m *IcpeOperCandFabPortsCurr) GetPortType() string {
	if m != nil {
		return m.PortType
	}
	return ""
}

func (m *IcpeOperCandFabPortsCurr) GetSlot() uint32 {
	if m != nil {
		return m.Slot
	}
	return 0
}

func (m *IcpeOperCandFabPortsCurr) GetSubslot() uint32 {
	if m != nil {
		return m.Subslot
	}
	return 0
}

func (m *IcpeOperCandFabPortsCurr) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *IcpeOperCandFabPortsCurr) GetPermanent() bool {
	if m != nil {
		return m.Permanent
	}
	return false
}

func (m *IcpeOperCandFabPortsCurr) GetRequested() bool {
	if m != nil {
		return m.Requested
	}
	return false
}

type IcpeOperCandFabPorts struct {
	ConfiguredPort       []*IcpeOperCandFabPortsCfgd `protobuf:"bytes,1,rep,name=configured_port,json=configuredPort,proto3" json:"configured_port,omitempty"`
	ChannelUp            bool                        `protobuf:"varint,2,opt,name=channel_up,json=channelUp,proto3" json:"channel_up,omitempty"`
	CurrentPort          []*IcpeOperCandFabPortsCurr `protobuf:"bytes,3,rep,name=current_port,json=currentPort,proto3" json:"current_port,omitempty"`
	OutOfSync            bool                        `protobuf:"varint,4,opt,name=out_of_sync,json=outOfSync,proto3" json:"out_of_sync,omitempty"`
	ErrorString          string                      `protobuf:"bytes,5,opt,name=error_string,json=errorString,proto3" json:"error_string,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *IcpeOperCandFabPorts) Reset()         { *m = IcpeOperCandFabPorts{} }
func (m *IcpeOperCandFabPorts) String() string { return proto.CompactTextString(m) }
func (*IcpeOperCandFabPorts) ProtoMessage()    {}
func (*IcpeOperCandFabPorts) Descriptor() ([]byte, []int) {
	return fileDescriptor_390611d8122ec789, []int{3}
}

func (m *IcpeOperCandFabPorts) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IcpeOperCandFabPorts.Unmarshal(m, b)
}
func (m *IcpeOperCandFabPorts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IcpeOperCandFabPorts.Marshal(b, m, deterministic)
}
func (m *IcpeOperCandFabPorts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IcpeOperCandFabPorts.Merge(m, src)
}
func (m *IcpeOperCandFabPorts) XXX_Size() int {
	return xxx_messageInfo_IcpeOperCandFabPorts.Size(m)
}
func (m *IcpeOperCandFabPorts) XXX_DiscardUnknown() {
	xxx_messageInfo_IcpeOperCandFabPorts.DiscardUnknown(m)
}

var xxx_messageInfo_IcpeOperCandFabPorts proto.InternalMessageInfo

func (m *IcpeOperCandFabPorts) GetConfiguredPort() []*IcpeOperCandFabPortsCfgd {
	if m != nil {
		return m.ConfiguredPort
	}
	return nil
}

func (m *IcpeOperCandFabPorts) GetChannelUp() bool {
	if m != nil {
		return m.ChannelUp
	}
	return false
}

func (m *IcpeOperCandFabPorts) GetCurrentPort() []*IcpeOperCandFabPortsCurr {
	if m != nil {
		return m.CurrentPort
	}
	return nil
}

func (m *IcpeOperCandFabPorts) GetOutOfSync() bool {
	if m != nil {
		return m.OutOfSync
	}
	return false
}

func (m *IcpeOperCandFabPorts) GetErrorString() string {
	if m != nil {
		return m.ErrorString
	}
	return ""
}

type IcpeOpticalApplicationState struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	SyncState            string   `protobuf:"bytes,2,opt,name=sync_state,json=syncState,proto3" json:"sync_state,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IcpeOpticalApplicationState) Reset()         { *m = IcpeOpticalApplicationState{} }
func (m *IcpeOpticalApplicationState) String() string { return proto.CompactTextString(m) }
func (*IcpeOpticalApplicationState) ProtoMessage()    {}
func (*IcpeOpticalApplicationState) Descriptor() ([]byte, []int) {
	return fileDescriptor_390611d8122ec789, []int{4}
}

func (m *IcpeOpticalApplicationState) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IcpeOpticalApplicationState.Unmarshal(m, b)
}
func (m *IcpeOpticalApplicationState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IcpeOpticalApplicationState.Marshal(b, m, deterministic)
}
func (m *IcpeOpticalApplicationState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IcpeOpticalApplicationState.Merge(m, src)
}
func (m *IcpeOpticalApplicationState) XXX_Size() int {
	return xxx_messageInfo_IcpeOpticalApplicationState.Size(m)
}
func (m *IcpeOpticalApplicationState) XXX_DiscardUnknown() {
	xxx_messageInfo_IcpeOpticalApplicationState.DiscardUnknown(m)
}

var xxx_messageInfo_IcpeOpticalApplicationState proto.InternalMessageInfo

func (m *IcpeOpticalApplicationState) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *IcpeOpticalApplicationState) GetSyncState() string {
	if m != nil {
		return m.SyncState
	}
	return ""
}

type IcpeOpticalStatus struct {
	ChassisSyncState     string                         `protobuf:"bytes,1,opt,name=chassis_sync_state,json=chassisSyncState,proto3" json:"chassis_sync_state,omitempty"`
	Application          []*IcpeOpticalApplicationState `protobuf:"bytes,2,rep,name=application,proto3" json:"application,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-"`
	XXX_unrecognized     []byte                         `json:"-"`
	XXX_sizecache        int32                          `json:"-"`
}

func (m *IcpeOpticalStatus) Reset()         { *m = IcpeOpticalStatus{} }
func (m *IcpeOpticalStatus) String() string { return proto.CompactTextString(m) }
func (*IcpeOpticalStatus) ProtoMessage()    {}
func (*IcpeOpticalStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_390611d8122ec789, []int{5}
}

func (m *IcpeOpticalStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IcpeOpticalStatus.Unmarshal(m, b)
}
func (m *IcpeOpticalStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IcpeOpticalStatus.Marshal(b, m, deterministic)
}
func (m *IcpeOpticalStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IcpeOpticalStatus.Merge(m, src)
}
func (m *IcpeOpticalStatus) XXX_Size() int {
	return xxx_messageInfo_IcpeOpticalStatus.Size(m)
}
func (m *IcpeOpticalStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_IcpeOpticalStatus.DiscardUnknown(m)
}

var xxx_messageInfo_IcpeOpticalStatus proto.InternalMessageInfo

func (m *IcpeOpticalStatus) GetChassisSyncState() string {
	if m != nil {
		return m.ChassisSyncState
	}
	return ""
}

func (m *IcpeOpticalStatus) GetApplication() []*IcpeOpticalApplicationState {
	if m != nil {
		return m.Application
	}
	return nil
}

type IcpeOperReloadData struct {
	Level                string   `protobuf:"bytes,1,opt,name=level,proto3" json:"level,omitempty"`
	Time                 uint64   `protobuf:"varint,2,opt,name=time,proto3" json:"time,omitempty"`
	Info                 string   `protobuf:"bytes,3,opt,name=info,proto3" json:"info,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IcpeOperReloadData) Reset()         { *m = IcpeOperReloadData{} }
func (m *IcpeOperReloadData) String() string { return proto.CompactTextString(m) }
func (*IcpeOperReloadData) ProtoMessage()    {}
func (*IcpeOperReloadData) Descriptor() ([]byte, []int) {
	return fileDescriptor_390611d8122ec789, []int{6}
}

func (m *IcpeOperReloadData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IcpeOperReloadData.Unmarshal(m, b)
}
func (m *IcpeOperReloadData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IcpeOperReloadData.Marshal(b, m, deterministic)
}
func (m *IcpeOperReloadData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IcpeOperReloadData.Merge(m, src)
}
func (m *IcpeOperReloadData) XXX_Size() int {
	return xxx_messageInfo_IcpeOperReloadData.Size(m)
}
func (m *IcpeOperReloadData) XXX_DiscardUnknown() {
	xxx_messageInfo_IcpeOperReloadData.DiscardUnknown(m)
}

var xxx_messageInfo_IcpeOperReloadData proto.InternalMessageInfo

func (m *IcpeOperReloadData) GetLevel() string {
	if m != nil {
		return m.Level
	}
	return ""
}

func (m *IcpeOperReloadData) GetTime() uint64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *IcpeOperReloadData) GetInfo() string {
	if m != nil {
		return m.Info
	}
	return ""
}

type IcpeTimestamp struct {
	Seconds              uint32   `protobuf:"varint,1,opt,name=seconds,proto3" json:"seconds,omitempty"`
	Nanoseconds          uint32   `protobuf:"varint,2,opt,name=nanoseconds,proto3" json:"nanoseconds,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IcpeTimestamp) Reset()         { *m = IcpeTimestamp{} }
func (m *IcpeTimestamp) String() string { return proto.CompactTextString(m) }
func (*IcpeTimestamp) ProtoMessage()    {}
func (*IcpeTimestamp) Descriptor() ([]byte, []int) {
	return fileDescriptor_390611d8122ec789, []int{7}
}

func (m *IcpeTimestamp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IcpeTimestamp.Unmarshal(m, b)
}
func (m *IcpeTimestamp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IcpeTimestamp.Marshal(b, m, deterministic)
}
func (m *IcpeTimestamp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IcpeTimestamp.Merge(m, src)
}
func (m *IcpeTimestamp) XXX_Size() int {
	return xxx_messageInfo_IcpeTimestamp.Size(m)
}
func (m *IcpeTimestamp) XXX_DiscardUnknown() {
	xxx_messageInfo_IcpeTimestamp.DiscardUnknown(m)
}

var xxx_messageInfo_IcpeTimestamp proto.InternalMessageInfo

func (m *IcpeTimestamp) GetSeconds() uint32 {
	if m != nil {
		return m.Seconds
	}
	return 0
}

func (m *IcpeTimestamp) GetNanoseconds() uint32 {
	if m != nil {
		return m.Nanoseconds
	}
	return 0
}

type IcpeOperPortRange struct {
	Slot                 uint32   `protobuf:"varint,1,opt,name=slot,proto3" json:"slot,omitempty"`
	Subslot              uint32   `protobuf:"varint,2,opt,name=subslot,proto3" json:"subslot,omitempty"`
	LowPort              uint32   `protobuf:"varint,3,opt,name=low_port,json=lowPort,proto3" json:"low_port,omitempty"`
	HighPort             uint32   `protobuf:"varint,4,opt,name=high_port,json=highPort,proto3" json:"high_port,omitempty"`
	PortType             string   `protobuf:"bytes,5,opt,name=port_type,json=portType,proto3" json:"port_type,omitempty"`
	ConflictReason       string   `protobuf:"bytes,6,opt,name=conflict_reason,json=conflictReason,proto3" json:"conflict_reason,omitempty"`
	ConflictContext      string   `protobuf:"bytes,7,opt,name=conflict_context,json=conflictContext,proto3" json:"conflict_context,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IcpeOperPortRange) Reset()         { *m = IcpeOperPortRange{} }
func (m *IcpeOperPortRange) String() string { return proto.CompactTextString(m) }
func (*IcpeOperPortRange) ProtoMessage()    {}
func (*IcpeOperPortRange) Descriptor() ([]byte, []int) {
	return fileDescriptor_390611d8122ec789, []int{8}
}

func (m *IcpeOperPortRange) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IcpeOperPortRange.Unmarshal(m, b)
}
func (m *IcpeOperPortRange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IcpeOperPortRange.Marshal(b, m, deterministic)
}
func (m *IcpeOperPortRange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IcpeOperPortRange.Merge(m, src)
}
func (m *IcpeOperPortRange) XXX_Size() int {
	return xxx_messageInfo_IcpeOperPortRange.Size(m)
}
func (m *IcpeOperPortRange) XXX_DiscardUnknown() {
	xxx_messageInfo_IcpeOperPortRange.DiscardUnknown(m)
}

var xxx_messageInfo_IcpeOperPortRange proto.InternalMessageInfo

func (m *IcpeOperPortRange) GetSlot() uint32 {
	if m != nil {
		return m.Slot
	}
	return 0
}

func (m *IcpeOperPortRange) GetSubslot() uint32 {
	if m != nil {
		return m.Subslot
	}
	return 0
}

func (m *IcpeOperPortRange) GetLowPort() uint32 {
	if m != nil {
		return m.LowPort
	}
	return 0
}

func (m *IcpeOperPortRange) GetHighPort() uint32 {
	if m != nil {
		return m.HighPort
	}
	return 0
}

func (m *IcpeOperPortRange) GetPortType() string {
	if m != nil {
		return m.PortType
	}
	return ""
}

func (m *IcpeOperPortRange) GetConflictReason() string {
	if m != nil {
		return m.ConflictReason
	}
	return ""
}

func (m *IcpeOperPortRange) GetConflictContext() string {
	if m != nil {
		return m.ConflictContext
	}
	return ""
}

type IcpeOperDiscdLink struct {
	InterfaceHandle      string   `protobuf:"bytes,1,opt,name=interface_handle,json=interfaceHandle,proto3" json:"interface_handle,omitempty"`
	State                string   `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
	ConflictReason       string   `protobuf:"bytes,3,opt,name=conflict_reason,json=conflictReason,proto3" json:"conflict_reason,omitempty"`
	ConflictContext      string   `protobuf:"bytes,4,opt,name=conflict_context,json=conflictContext,proto3" json:"conflict_context,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IcpeOperDiscdLink) Reset()         { *m = IcpeOperDiscdLink{} }
func (m *IcpeOperDiscdLink) String() string { return proto.CompactTextString(m) }
func (*IcpeOperDiscdLink) ProtoMessage()    {}
func (*IcpeOperDiscdLink) Descriptor() ([]byte, []int) {
	return fileDescriptor_390611d8122ec789, []int{9}
}

func (m *IcpeOperDiscdLink) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IcpeOperDiscdLink.Unmarshal(m, b)
}
func (m *IcpeOperDiscdLink) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IcpeOperDiscdLink.Marshal(b, m, deterministic)
}
func (m *IcpeOperDiscdLink) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IcpeOperDiscdLink.Merge(m, src)
}
func (m *IcpeOperDiscdLink) XXX_Size() int {
	return xxx_messageInfo_IcpeOperDiscdLink.Size(m)
}
func (m *IcpeOperDiscdLink) XXX_DiscardUnknown() {
	xxx_messageInfo_IcpeOperDiscdLink.DiscardUnknown(m)
}

var xxx_messageInfo_IcpeOperDiscdLink proto.InternalMessageInfo

func (m *IcpeOperDiscdLink) GetInterfaceHandle() string {
	if m != nil {
		return m.InterfaceHandle
	}
	return ""
}

func (m *IcpeOperDiscdLink) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *IcpeOperDiscdLink) GetConflictReason() string {
	if m != nil {
		return m.ConflictReason
	}
	return ""
}

func (m *IcpeOperDiscdLink) GetConflictContext() string {
	if m != nil {
		return m.ConflictContext
	}
	return ""
}

type IcpeOperCfgdLink struct {
	InterfaceHandle           string               `protobuf:"bytes,1,opt,name=interface_handle,json=interfaceHandle,proto3" json:"interface_handle,omitempty"`
	IpAddress                 string               `protobuf:"bytes,2,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
	IpAddressAuto             bool                 `protobuf:"varint,3,opt,name=ip_address_auto,json=ipAddressAuto,proto3" json:"ip_address_auto,omitempty"`
	VrfIdPresent              bool                 `protobuf:"varint,4,opt,name=vrf_id_present,json=vrfIdPresent,proto3" json:"vrf_id_present,omitempty"`
	VrfId                     uint32               `protobuf:"varint,5,opt,name=vrf_id,json=vrfId,proto3" json:"vrf_id,omitempty"`
	MinimumPreferredLinks     uint32               `protobuf:"varint,6,opt,name=minimum_preferred_links,json=minimumPreferredLinks,proto3" json:"minimum_preferred_links,omitempty"`
	NumberActiveLinks         uint32               `protobuf:"varint,7,opt,name=number_active_links,json=numberActiveLinks,proto3" json:"number_active_links,omitempty"`
	MinLinksSatisfied         bool                 `protobuf:"varint,8,opt,name=min_links_satisfied,json=minLinksSatisfied,proto3" json:"min_links_satisfied,omitempty"`
	MinimumRequiredLinks      uint32               `protobuf:"varint,9,opt,name=minimum_required_links,json=minimumRequiredLinks,proto3" json:"minimum_required_links,omitempty"`
	RequiredMinLinksSatisfied bool                 `protobuf:"varint,10,opt,name=required_min_links_satisfied,json=requiredMinLinksSatisfied,proto3" json:"required_min_links_satisfied,omitempty"`
	ConflictReason            string               `protobuf:"bytes,11,opt,name=conflict_reason,json=conflictReason,proto3" json:"conflict_reason,omitempty"`
	ConflictContext           string               `protobuf:"bytes,12,opt,name=conflict_context,json=conflictContext,proto3" json:"conflict_context,omitempty"`
	PortRange                 []*IcpeOperPortRange `protobuf:"bytes,13,rep,name=port_range,json=portRange,proto3" json:"port_range,omitempty"`
	DiscoveredLink            []*IcpeOperDiscdLink `protobuf:"bytes,14,rep,name=discovered_link,json=discoveredLink,proto3" json:"discovered_link,omitempty"`
	XXX_NoUnkeyedLiteral      struct{}             `json:"-"`
	XXX_unrecognized          []byte               `json:"-"`
	XXX_sizecache             int32                `json:"-"`
}

func (m *IcpeOperCfgdLink) Reset()         { *m = IcpeOperCfgdLink{} }
func (m *IcpeOperCfgdLink) String() string { return proto.CompactTextString(m) }
func (*IcpeOperCfgdLink) ProtoMessage()    {}
func (*IcpeOperCfgdLink) Descriptor() ([]byte, []int) {
	return fileDescriptor_390611d8122ec789, []int{10}
}

func (m *IcpeOperCfgdLink) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IcpeOperCfgdLink.Unmarshal(m, b)
}
func (m *IcpeOperCfgdLink) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IcpeOperCfgdLink.Marshal(b, m, deterministic)
}
func (m *IcpeOperCfgdLink) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IcpeOperCfgdLink.Merge(m, src)
}
func (m *IcpeOperCfgdLink) XXX_Size() int {
	return xxx_messageInfo_IcpeOperCfgdLink.Size(m)
}
func (m *IcpeOperCfgdLink) XXX_DiscardUnknown() {
	xxx_messageInfo_IcpeOperCfgdLink.DiscardUnknown(m)
}

var xxx_messageInfo_IcpeOperCfgdLink proto.InternalMessageInfo

func (m *IcpeOperCfgdLink) GetInterfaceHandle() string {
	if m != nil {
		return m.InterfaceHandle
	}
	return ""
}

func (m *IcpeOperCfgdLink) GetIpAddress() string {
	if m != nil {
		return m.IpAddress
	}
	return ""
}

func (m *IcpeOperCfgdLink) GetIpAddressAuto() bool {
	if m != nil {
		return m.IpAddressAuto
	}
	return false
}

func (m *IcpeOperCfgdLink) GetVrfIdPresent() bool {
	if m != nil {
		return m.VrfIdPresent
	}
	return false
}

func (m *IcpeOperCfgdLink) GetVrfId() uint32 {
	if m != nil {
		return m.VrfId
	}
	return 0
}

func (m *IcpeOperCfgdLink) GetMinimumPreferredLinks() uint32 {
	if m != nil {
		return m.MinimumPreferredLinks
	}
	return 0
}

func (m *IcpeOperCfgdLink) GetNumberActiveLinks() uint32 {
	if m != nil {
		return m.NumberActiveLinks
	}
	return 0
}

func (m *IcpeOperCfgdLink) GetMinLinksSatisfied() bool {
	if m != nil {
		return m.MinLinksSatisfied
	}
	return false
}

func (m *IcpeOperCfgdLink) GetMinimumRequiredLinks() uint32 {
	if m != nil {
		return m.MinimumRequiredLinks
	}
	return 0
}

func (m *IcpeOperCfgdLink) GetRequiredMinLinksSatisfied() bool {
	if m != nil {
		return m.RequiredMinLinksSatisfied
	}
	return false
}

func (m *IcpeOperCfgdLink) GetConflictReason() string {
	if m != nil {
		return m.ConflictReason
	}
	return ""
}

func (m *IcpeOperCfgdLink) GetConflictContext() string {
	if m != nil {
		return m.ConflictContext
	}
	return ""
}

func (m *IcpeOperCfgdLink) GetPortRange() []*IcpeOperPortRange {
	if m != nil {
		return m.PortRange
	}
	return nil
}

func (m *IcpeOperCfgdLink) GetDiscoveredLink() []*IcpeOperDiscdLink {
	if m != nil {
		return m.DiscoveredLink
	}
	return nil
}

type IcpeOperSatStatus struct {
	SatelliteIdXr                 uint32                `protobuf:"varint,50,opt,name=satellite_id_xr,json=satelliteIdXr,proto3" json:"satellite_id_xr,omitempty"`
	CandidateFabricPorts          *IcpeOperCandFabPorts `protobuf:"bytes,51,opt,name=candidate_fabric_ports,json=candidateFabricPorts,proto3" json:"candidate_fabric_ports,omitempty"`
	VersionCheckState             string                `protobuf:"bytes,52,opt,name=version_check_state,json=versionCheckState,proto3" json:"version_check_state,omitempty"`
	RemoteVersionPresent          bool                  `protobuf:"varint,53,opt,name=remote_version_present,json=remoteVersionPresent,proto3" json:"remote_version_present,omitempty"`
	RemoteVersion                 []string              `protobuf:"bytes,54,rep,name=remote_version,json=remoteVersion,proto3" json:"remote_version,omitempty"`
	OpticalStatus                 *IcpeOpticalStatus    `protobuf:"bytes,55,opt,name=optical_status,json=opticalStatus,proto3" json:"optical_status,omitempty"`
	ReloadData                    []*IcpeOperReloadData `protobuf:"bytes,56,rep,name=reload_data,json=reloadData,proto3" json:"reload_data,omitempty"`
	Type                          string                `protobuf:"bytes,57,opt,name=type,proto3" json:"type,omitempty"`
	EthernetFabricSupported       bool                  `protobuf:"varint,58,opt,name=ethernet_fabric_supported,json=ethernetFabricSupported,proto3" json:"ethernet_fabric_supported,omitempty"`
	OpticalSupported              bool                  `protobuf:"varint,59,opt,name=optical_supported,json=opticalSupported,proto3" json:"optical_supported,omitempty"`
	IpAddress                     string                `protobuf:"bytes,60,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
	IpAddressPresent              bool                  `protobuf:"varint,61,opt,name=ip_address_present,json=ipAddressPresent,proto3" json:"ip_address_present,omitempty"`
	IpAddressAuto                 bool                  `protobuf:"varint,62,opt,name=ip_address_auto,json=ipAddressAuto,proto3" json:"ip_address_auto,omitempty"`
	Ipv6Address                   string                `protobuf:"bytes,63,opt,name=ipv6_address,json=ipv6Address,proto3" json:"ipv6_address,omitempty"`
	Ipv6AddressPresent            bool                  `protobuf:"varint,64,opt,name=ipv6_address_present,json=ipv6AddressPresent,proto3" json:"ipv6_address_present,omitempty"`
	VrfName                       string                `protobuf:"bytes,65,opt,name=vrf_name,json=vrfName,proto3" json:"vrf_name,omitempty"`
	Vrfid                         uint32                `protobuf:"varint,66,opt,name=vrfid,proto3" json:"vrfid,omitempty"`
	Description                   string                `protobuf:"bytes,67,opt,name=description,proto3" json:"description,omitempty"`
	DescriptionPresent            bool                  `protobuf:"varint,68,opt,name=description_present,json=descriptionPresent,proto3" json:"description_present,omitempty"`
	MacAddress                    string                `protobuf:"bytes,69,opt,name=mac_address,json=macAddress,proto3" json:"mac_address,omitempty"`
	MacAddressPresent             bool                  `protobuf:"varint,70,opt,name=mac_address_present,json=macAddressPresent,proto3" json:"mac_address_present,omitempty"`
	ConfiguredSerialNumber        string                `protobuf:"bytes,71,opt,name=configured_serial_number,json=configuredSerialNumber,proto3" json:"configured_serial_number,omitempty"`
	ConfiguredSerialNumberPresent bool                  `protobuf:"varint,72,opt,name=configured_serial_number_present,json=configuredSerialNumberPresent,proto3" json:"configured_serial_number_present,omitempty"`
	ReceivedSerialNumber          string                `protobuf:"bytes,73,opt,name=received_serial_number,json=receivedSerialNumber,proto3" json:"received_serial_number,omitempty"`
	ReceivedSerialNumberPresent   bool                  `protobuf:"varint,74,opt,name=received_serial_number_present,json=receivedSerialNumberPresent,proto3" json:"received_serial_number_present,omitempty"`
	Password                      string                `protobuf:"bytes,75,opt,name=password,proto3" json:"password,omitempty"`
	PasswordError                 string                `protobuf:"bytes,76,opt,name=password_error,json=passwordError,proto3" json:"password_error,omitempty"`
	ReceivedHostName              string                `protobuf:"bytes,77,opt,name=received_host_name,json=receivedHostName,proto3" json:"received_host_name,omitempty"`
	CfgdTimeout                   uint32                `protobuf:"varint,78,opt,name=cfgd_timeout,json=cfgdTimeout,proto3" json:"cfgd_timeout,omitempty"`
	TimeoutWarning                uint32                `protobuf:"varint,79,opt,name=timeout_warning,json=timeoutWarning,proto3" json:"timeout_warning,omitempty"`
	ConflictReason                string                `protobuf:"bytes,80,opt,name=conflict_reason,json=conflictReason,proto3" json:"conflict_reason,omitempty"`
	ConflictContext               string                `protobuf:"bytes,81,opt,name=conflict_context,json=conflictContext,proto3" json:"conflict_context,omitempty"`
	RedundancyIccpGroup           uint32                `protobuf:"varint,82,opt,name=redundancy_iccp_group,json=redundancyIccpGroup,proto3" json:"redundancy_iccp_group,omitempty"`
	RecoveryDelayTimeLeft         uint32                `protobuf:"varint,83,opt,name=recovery_delay_time_left,json=recoveryDelayTimeLeft,proto3" json:"recovery_delay_time_left,omitempty"`
	HostTreatingAsActive          bool                  `protobuf:"varint,84,opt,name=host_treating_as_active,json=hostTreatingAsActive,proto3" json:"host_treating_as_active,omitempty"`
	SatelliteTreatingAsActive     bool                  `protobuf:"varint,85,opt,name=satellite_treating_as_active,json=satelliteTreatingAsActive,proto3" json:"satellite_treating_as_active,omitempty"`
	RedundancyOutOfSyncTimestamp  *IcpeTimestamp        `protobuf:"bytes,86,opt,name=redundancy_out_of_sync_timestamp,json=redundancyOutOfSyncTimestamp,proto3" json:"redundancy_out_of_sync_timestamp,omitempty"`
	SdacpSessionState             string                `protobuf:"bytes,87,opt,name=sdacp_session_state,json=sdacpSessionState,proto3" json:"sdacp_session_state,omitempty"`
	SdacpSessionFailureReason     string                `protobuf:"bytes,88,opt,name=sdacp_session_failure_reason,json=sdacpSessionFailureReason,proto3" json:"sdacp_session_failure_reason,omitempty"`
	InstallState                  string                `protobuf:"bytes,89,opt,name=install_state,json=installState,proto3" json:"install_state,omitempty"`
	ConfiguredLink                []*IcpeOperCfgdLink   `protobuf:"bytes,90,rep,name=configured_link,json=configuredLink,proto3" json:"configured_link,omitempty"`
	XXX_NoUnkeyedLiteral          struct{}              `json:"-"`
	XXX_unrecognized              []byte                `json:"-"`
	XXX_sizecache                 int32                 `json:"-"`
}

func (m *IcpeOperSatStatus) Reset()         { *m = IcpeOperSatStatus{} }
func (m *IcpeOperSatStatus) String() string { return proto.CompactTextString(m) }
func (*IcpeOperSatStatus) ProtoMessage()    {}
func (*IcpeOperSatStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_390611d8122ec789, []int{11}
}

func (m *IcpeOperSatStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IcpeOperSatStatus.Unmarshal(m, b)
}
func (m *IcpeOperSatStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IcpeOperSatStatus.Marshal(b, m, deterministic)
}
func (m *IcpeOperSatStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IcpeOperSatStatus.Merge(m, src)
}
func (m *IcpeOperSatStatus) XXX_Size() int {
	return xxx_messageInfo_IcpeOperSatStatus.Size(m)
}
func (m *IcpeOperSatStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_IcpeOperSatStatus.DiscardUnknown(m)
}

var xxx_messageInfo_IcpeOperSatStatus proto.InternalMessageInfo

func (m *IcpeOperSatStatus) GetSatelliteIdXr() uint32 {
	if m != nil {
		return m.SatelliteIdXr
	}
	return 0
}

func (m *IcpeOperSatStatus) GetCandidateFabricPorts() *IcpeOperCandFabPorts {
	if m != nil {
		return m.CandidateFabricPorts
	}
	return nil
}

func (m *IcpeOperSatStatus) GetVersionCheckState() string {
	if m != nil {
		return m.VersionCheckState
	}
	return ""
}

func (m *IcpeOperSatStatus) GetRemoteVersionPresent() bool {
	if m != nil {
		return m.RemoteVersionPresent
	}
	return false
}

func (m *IcpeOperSatStatus) GetRemoteVersion() []string {
	if m != nil {
		return m.RemoteVersion
	}
	return nil
}

func (m *IcpeOperSatStatus) GetOpticalStatus() *IcpeOpticalStatus {
	if m != nil {
		return m.OpticalStatus
	}
	return nil
}

func (m *IcpeOperSatStatus) GetReloadData() []*IcpeOperReloadData {
	if m != nil {
		return m.ReloadData
	}
	return nil
}

func (m *IcpeOperSatStatus) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *IcpeOperSatStatus) GetEthernetFabricSupported() bool {
	if m != nil {
		return m.EthernetFabricSupported
	}
	return false
}

func (m *IcpeOperSatStatus) GetOpticalSupported() bool {
	if m != nil {
		return m.OpticalSupported
	}
	return false
}

func (m *IcpeOperSatStatus) GetIpAddress() string {
	if m != nil {
		return m.IpAddress
	}
	return ""
}

func (m *IcpeOperSatStatus) GetIpAddressPresent() bool {
	if m != nil {
		return m.IpAddressPresent
	}
	return false
}

func (m *IcpeOperSatStatus) GetIpAddressAuto() bool {
	if m != nil {
		return m.IpAddressAuto
	}
	return false
}

func (m *IcpeOperSatStatus) GetIpv6Address() string {
	if m != nil {
		return m.Ipv6Address
	}
	return ""
}

func (m *IcpeOperSatStatus) GetIpv6AddressPresent() bool {
	if m != nil {
		return m.Ipv6AddressPresent
	}
	return false
}

func (m *IcpeOperSatStatus) GetVrfName() string {
	if m != nil {
		return m.VrfName
	}
	return ""
}

func (m *IcpeOperSatStatus) GetVrfid() uint32 {
	if m != nil {
		return m.Vrfid
	}
	return 0
}

func (m *IcpeOperSatStatus) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *IcpeOperSatStatus) GetDescriptionPresent() bool {
	if m != nil {
		return m.DescriptionPresent
	}
	return false
}

func (m *IcpeOperSatStatus) GetMacAddress() string {
	if m != nil {
		return m.MacAddress
	}
	return ""
}

func (m *IcpeOperSatStatus) GetMacAddressPresent() bool {
	if m != nil {
		return m.MacAddressPresent
	}
	return false
}

func (m *IcpeOperSatStatus) GetConfiguredSerialNumber() string {
	if m != nil {
		return m.ConfiguredSerialNumber
	}
	return ""
}

func (m *IcpeOperSatStatus) GetConfiguredSerialNumberPresent() bool {
	if m != nil {
		return m.ConfiguredSerialNumberPresent
	}
	return false
}

func (m *IcpeOperSatStatus) GetReceivedSerialNumber() string {
	if m != nil {
		return m.ReceivedSerialNumber
	}
	return ""
}

func (m *IcpeOperSatStatus) GetReceivedSerialNumberPresent() bool {
	if m != nil {
		return m.ReceivedSerialNumberPresent
	}
	return false
}

func (m *IcpeOperSatStatus) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *IcpeOperSatStatus) GetPasswordError() string {
	if m != nil {
		return m.PasswordError
	}
	return ""
}

func (m *IcpeOperSatStatus) GetReceivedHostName() string {
	if m != nil {
		return m.ReceivedHostName
	}
	return ""
}

func (m *IcpeOperSatStatus) GetCfgdTimeout() uint32 {
	if m != nil {
		return m.CfgdTimeout
	}
	return 0
}

func (m *IcpeOperSatStatus) GetTimeoutWarning() uint32 {
	if m != nil {
		return m.TimeoutWarning
	}
	return 0
}

func (m *IcpeOperSatStatus) GetConflictReason() string {
	if m != nil {
		return m.ConflictReason
	}
	return ""
}

func (m *IcpeOperSatStatus) GetConflictContext() string {
	if m != nil {
		return m.ConflictContext
	}
	return ""
}

func (m *IcpeOperSatStatus) GetRedundancyIccpGroup() uint32 {
	if m != nil {
		return m.RedundancyIccpGroup
	}
	return 0
}

func (m *IcpeOperSatStatus) GetRecoveryDelayTimeLeft() uint32 {
	if m != nil {
		return m.RecoveryDelayTimeLeft
	}
	return 0
}

func (m *IcpeOperSatStatus) GetHostTreatingAsActive() bool {
	if m != nil {
		return m.HostTreatingAsActive
	}
	return false
}

func (m *IcpeOperSatStatus) GetSatelliteTreatingAsActive() bool {
	if m != nil {
		return m.SatelliteTreatingAsActive
	}
	return false
}

func (m *IcpeOperSatStatus) GetRedundancyOutOfSyncTimestamp() *IcpeTimestamp {
	if m != nil {
		return m.RedundancyOutOfSyncTimestamp
	}
	return nil
}

func (m *IcpeOperSatStatus) GetSdacpSessionState() string {
	if m != nil {
		return m.SdacpSessionState
	}
	return ""
}

func (m *IcpeOperSatStatus) GetSdacpSessionFailureReason() string {
	if m != nil {
		return m.SdacpSessionFailureReason
	}
	return ""
}

func (m *IcpeOperSatStatus) GetInstallState() string {
	if m != nil {
		return m.InstallState
	}
	return ""
}

func (m *IcpeOperSatStatus) GetConfiguredLink() []*IcpeOperCfgdLink {
	if m != nil {
		return m.ConfiguredLink
	}
	return nil
}

func init() {
	proto.RegisterType((*IcpeOperSatStatus_KEYS)(nil), "cisco_ios_xr_icpe_infra_oper.nv_satellite.satellite_statuses.satellite_status.icpe_oper_sat_status_KEYS")
	proto.RegisterType((*IcpeOperCandFabPortsCfgd)(nil), "cisco_ios_xr_icpe_infra_oper.nv_satellite.satellite_statuses.satellite_status.icpe_oper_cand_fab_ports_cfgd")
	proto.RegisterType((*IcpeOperCandFabPortsCurr)(nil), "cisco_ios_xr_icpe_infra_oper.nv_satellite.satellite_statuses.satellite_status.icpe_oper_cand_fab_ports_curr")
	proto.RegisterType((*IcpeOperCandFabPorts)(nil), "cisco_ios_xr_icpe_infra_oper.nv_satellite.satellite_statuses.satellite_status.icpe_oper_cand_fab_ports")
	proto.RegisterType((*IcpeOpticalApplicationState)(nil), "cisco_ios_xr_icpe_infra_oper.nv_satellite.satellite_statuses.satellite_status.icpe_optical_application_state")
	proto.RegisterType((*IcpeOpticalStatus)(nil), "cisco_ios_xr_icpe_infra_oper.nv_satellite.satellite_statuses.satellite_status.icpe_optical_status")
	proto.RegisterType((*IcpeOperReloadData)(nil), "cisco_ios_xr_icpe_infra_oper.nv_satellite.satellite_statuses.satellite_status.icpe_oper_reload_data")
	proto.RegisterType((*IcpeTimestamp)(nil), "cisco_ios_xr_icpe_infra_oper.nv_satellite.satellite_statuses.satellite_status.icpe_timestamp")
	proto.RegisterType((*IcpeOperPortRange)(nil), "cisco_ios_xr_icpe_infra_oper.nv_satellite.satellite_statuses.satellite_status.icpe_oper_port_range")
	proto.RegisterType((*IcpeOperDiscdLink)(nil), "cisco_ios_xr_icpe_infra_oper.nv_satellite.satellite_statuses.satellite_status.icpe_oper_discd_link")
	proto.RegisterType((*IcpeOperCfgdLink)(nil), "cisco_ios_xr_icpe_infra_oper.nv_satellite.satellite_statuses.satellite_status.icpe_oper_cfgd_link")
	proto.RegisterType((*IcpeOperSatStatus)(nil), "cisco_ios_xr_icpe_infra_oper.nv_satellite.satellite_statuses.satellite_status.icpe_oper_sat_status")
}

func init() { proto.RegisterFile("icpe_oper_sat_status.proto", fileDescriptor_390611d8122ec789) }

var fileDescriptor_390611d8122ec789 = []byte{
	// 1705 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x58, 0x5b, 0x8f, 0x1c, 0x39,
	0x15, 0x56, 0x65, 0x72, 0xe9, 0x3e, 0x3d, 0xdd, 0x49, 0x6a, 0x26, 0x49, 0xcd, 0xe6, 0x42, 0xa7,
	0xb9, 0x0d, 0x62, 0xd5, 0xa0, 0x6c, 0x36, 0xbb, 0x2c, 0xb0, 0xcb, 0x90, 0x3b, 0x9b, 0xcb, 0x50,
	0x3d, 0xd9, 0x0b, 0x12, 0xb2, 0x3c, 0x2e, 0x57, 0xb7, 0xb5, 0xd5, 0xae, 0xc2, 0x76, 0xf5, 0x64,
	0x5e, 0x91, 0x78, 0x40, 0x20, 0xf1, 0x02, 0x8f, 0x3c, 0xc2, 0x0b, 0xff, 0x00, 0x7e, 0x07, 0x4f,
	0xfc, 0x06, 0xfe, 0x03, 0xf2, 0x71, 0xb9, 0xaa, 0x7a, 0xa7, 0xb3, 0x0a, 0xd2, 0x76, 0xde, 0xca,
	0xe7, 0x3b, 0x37, 0xdb, 0xe7, 0xe6, 0x82, 0xb7, 0x04, 0x2b, 0x38, 0xc9, 0x0b, 0xae, 0x88, 0xa6,
	0x86, 0x68, 0x43, 0x4d, 0xa9, 0xc7, 0x85, 0xca, 0x4d, 0x1e, 0x3e, 0x65, 0x42, 0xb3, 0x9c, 0x88,
	0x5c, 0x93, 0x97, 0x8a, 0x20, 0xa3, 0x90, 0xa9, 0xa2, 0xc8, 0x3e, 0x96, 0x0b, 0x2b, 0xc1, 0xb3,
	0x4c, 0x18, 0x3e, 0xae, 0xbf, 0x2a, 0x0d, 0x5c, 0x9f, 0x20, 0x8d, 0x3e, 0x84, 0x9d, 0x55, 0xc6,
	0xc8, 0xc7, 0xf7, 0x3f, 0x9f, 0x84, 0x37, 0x61, 0xb3, 0x11, 0x10, 0x49, 0x14, 0x0c, 0x83, 0xdd,
	0x7e, 0xdc, 0xab, 0x69, 0x8f, 0x93, 0xd1, 0x9f, 0x03, 0xb8, 0xde, 0x28, 0x60, 0x54, 0x26, 0x24,
	0xa5, 0x87, 0xa4, 0xc8, 0x95, 0xd1, 0x84, 0xa5, 0xd3, 0x24, 0xbc, 0x0a, 0x5d, 0xbb, 0x22, 0xe6,
	0xb8, 0xe0, 0xa8, 0xa1, 0x1b, 0x77, 0x2c, 0xe1, 0xe0, 0xb8, 0xe0, 0x61, 0x08, 0xa7, 0x75, 0x96,
	0x9b, 0xe8, 0x14, 0x6a, 0xc6, 0xef, 0x30, 0x82, 0x73, 0xba, 0x3c, 0x44, 0xf2, 0x06, 0x92, 0xfd,
	0xd2, 0x72, 0x5b, 0xc9, 0xe8, 0xb4, 0xe3, 0xb6, 0xdf, 0xe1, 0x36, 0x9c, 0x59, 0xd0, 0x4c, 0x24,
	0xd1, 0x99, 0x61, 0xb0, 0xdb, 0x89, 0xdd, 0x62, 0xf4, 0xcf, 0xaf, 0x74, 0xab, 0x54, 0x6a, 0xdd,
	0x6e, 0x5d, 0x83, 0x6e, 0xc1, 0xd5, 0x9c, 0x4a, 0x2e, 0x4d, 0xe5, 0x5a, 0x43, 0xb0, 0xa8, 0xe2,
	0xbf, 0x29, 0xb9, 0x36, 0x3c, 0x89, 0xce, 0x3a, 0xb4, 0x26, 0x8c, 0xfe, 0xbe, 0x01, 0xd1, 0xab,
	0x9c, 0x0f, 0xff, 0x12, 0xc0, 0x79, 0x96, 0xcb, 0x54, 0x4c, 0x4b, 0xc5, 0x13, 0x24, 0x46, 0xc1,
	0x70, 0x63, 0xb7, 0x77, 0x2b, 0x1b, 0x7f, 0xad, 0xa1, 0x31, 0xfe, 0xca, 0x6b, 0x8d, 0x07, 0x8d,
	0x13, 0xfb, 0x76, 0xc3, 0xd7, 0x01, 0xd8, 0x8c, 0x4a, 0xc9, 0x33, 0x52, 0x16, 0x78, 0x70, 0x9d,
	0xb8, 0x5b, 0x51, 0x5e, 0x14, 0xe1, 0x9f, 0x02, 0xd8, 0xb4, 0xe7, 0xce, 0xa5, 0x71, 0x3e, 0x6f,
	0xbc, 0x61, 0x9f, 0x4b, 0xa5, 0xe2, 0x5e, 0xe5, 0x01, 0x3a, 0x7c, 0x03, 0x7a, 0x79, 0x69, 0x48,
	0x9e, 0x12, 0x7d, 0x2c, 0x19, 0x5e, 0x5e, 0x27, 0xee, 0xe6, 0xa5, 0x79, 0x9e, 0x4e, 0x8e, 0x25,
	0xb3, 0xc1, 0xcf, 0x95, 0xca, 0x15, 0xd1, 0x46, 0x09, 0x39, 0xc5, 0x4b, 0xec, 0xc6, 0x3d, 0xa4,
	0x4d, 0x90, 0x34, 0x9a, 0xc0, 0x8d, 0xca, 0xa0, 0x11, 0x8c, 0x66, 0x84, 0x16, 0x45, 0x26, 0x18,
	0x35, 0x22, 0x97, 0xe8, 0x10, 0x06, 0x92, 0xa4, 0x73, 0x1f, 0x60, 0xf8, 0x6d, 0x4f, 0xca, 0x5a,
	0x74, 0x1c, 0x78, 0x52, 0xdd, 0xb8, 0x6b, 0x29, 0x13, 0x4b, 0x18, 0xfd, 0x3b, 0x80, 0xad, 0x25,
	0xad, 0x6e, 0x6b, 0xe1, 0xdb, 0x10, 0xb2, 0x19, 0xd5, 0x5a, 0x68, 0xd2, 0x12, 0x77, 0x8a, 0x2f,
	0x54, 0xc8, 0xc4, 0x6b, 0xb1, 0xe7, 0xdd, 0x6b, 0xb9, 0x13, 0x9d, 0xc2, 0xe3, 0x9e, 0xaf, 0xe7,
	0xb8, 0x5f, 0xb1, 0xfb, 0xb8, 0xed, 0xc1, 0xe8, 0x05, 0x5c, 0x6a, 0x6e, 0x47, 0xf1, 0x2c, 0xa7,
	0x09, 0x49, 0xa8, 0xa1, 0x36, 0x83, 0x33, 0xbe, 0xe0, 0x59, 0xb5, 0x17, 0xb7, 0xb0, 0x27, 0x67,
	0xc4, 0xdc, 0x9d, 0xcf, 0xe9, 0x18, 0xbf, 0x2d, 0x4d, 0xc8, 0x34, 0xc7, 0xfc, 0xeb, 0xc6, 0xf8,
	0x3d, 0x7a, 0x02, 0x03, 0x54, 0x6b, 0x19, 0xb4, 0xa1, 0xf3, 0x02, 0x13, 0x95, 0xb3, 0x5c, 0x26,
	0xba, 0x2a, 0x58, 0x7e, 0x19, 0x0e, 0xa1, 0x27, 0xa9, 0xcc, 0x3d, 0xea, 0xb2, 0xbb, 0x4d, 0x1a,
	0xfd, 0x37, 0x80, 0xed, 0xc6, 0x4b, 0x2c, 0x10, 0x8a, 0xca, 0x69, 0x53, 0x11, 0x82, 0xd5, 0x15,
	0xe1, 0xd4, 0x72, 0x45, 0xd8, 0x81, 0x4e, 0x96, 0x1f, 0xf9, 0x40, 0x47, 0x28, 0xcb, 0x8f, 0x30,
	0xec, 0xae, 0x42, 0x77, 0x26, 0xa6, 0x33, 0xd2, 0xaa, 0x18, 0x1d, 0x4b, 0xf0, 0x60, 0x53, 0x94,
	0xce, 0x7c, 0xa9, 0x28, 0x7d, 0xd7, 0x25, 0x7e, 0x26, 0x98, 0x21, 0x8a, 0x53, 0x9d, 0x4b, 0x2c,
	0x1d, 0x5d, 0x97, 0x8a, 0x96, 0x1c, 0x23, 0x35, 0xfc, 0x1e, 0x5c, 0xa8, 0x19, 0x59, 0x2e, 0x0d,
	0x7f, 0x69, 0xa2, 0x73, 0xc8, 0x59, 0x2b, 0xb8, 0xeb, 0xc8, 0xa3, 0x7f, 0x2c, 0xed, 0x37, 0x11,
	0x9a, 0x25, 0x24, 0x13, 0xf2, 0x0b, 0xab, 0x43, 0x48, 0xc3, 0x55, 0x4a, 0x19, 0x27, 0x33, 0x2a,
	0x93, 0xcc, 0xc7, 0xda, 0xf9, 0x9a, 0xfe, 0x08, 0xc9, 0xf6, 0xfe, 0xda, 0xa1, 0xec, 0x16, 0xab,
	0xbc, 0xdd, 0x78, 0x6d, 0x6f, 0x4f, 0xaf, 0xf6, 0xf6, 0x5f, 0x67, 0xeb, 0xd4, 0xb0, 0x19, 0x9e,
	0x4e, 0xff, 0x7f, 0x67, 0xaf, 0x03, 0x88, 0x82, 0xd0, 0x24, 0x51, 0x5c, 0x6b, 0x9f, 0x7c, 0xa2,
	0xd8, 0x73, 0x84, 0xf0, 0x3b, 0x70, 0xbe, 0x81, 0x09, 0x2d, 0x8d, 0x0b, 0xb6, 0x4e, 0xdc, 0xaf,
	0x79, 0xf6, 0x4a, 0x93, 0x87, 0xdf, 0x82, 0xc1, 0x42, 0xa5, 0x44, 0x24, 0xa4, 0x50, 0x5c, 0xdb,
	0x1a, 0xef, 0xea, 0xc7, 0xe6, 0x42, 0xa5, 0x8f, 0x93, 0x7d, 0x47, 0x0b, 0x2f, 0xc1, 0x59, 0xc7,
	0x85, 0x77, 0xd9, 0x8f, 0xcf, 0x20, 0x1a, 0xde, 0x81, 0x2b, 0x73, 0x21, 0xc5, 0xbc, 0x9c, 0x5b,
	0xe9, 0x94, 0x2b, 0x5b, 0xc8, 0xed, 0x46, 0x34, 0x5e, 0x68, 0x3f, 0xbe, 0x54, 0xc1, 0xfb, 0x1e,
	0x7d, 0x62, 0xc1, 0x70, 0x0c, 0x5b, 0xb2, 0x9c, 0x1f, 0x72, 0x45, 0x28, 0x33, 0x62, 0xc1, 0x2b,
	0x99, 0x73, 0x28, 0x73, 0xd1, 0x41, 0x7b, 0x88, 0xd4, 0xfc, 0x73, 0x21, 0x1d, 0x97, 0x4d, 0x6c,
	0xa1, 0x53, 0xc1, 0x93, 0xa8, 0x83, 0x9e, 0x5e, 0x9c, 0x0b, 0x89, 0x6c, 0x13, 0x0f, 0x84, 0xb7,
	0xe1, 0xb2, 0xf7, 0xcb, 0x36, 0x23, 0xd1, 0xb8, 0xd5, 0x45, 0x13, 0xdb, 0x15, 0x1a, 0x57, 0xa0,
	0xb3, 0xf2, 0x11, 0x5c, 0xab, 0xb9, 0x57, 0x99, 0x03, 0x34, 0xb7, 0xe3, 0x79, 0x9e, 0x9e, 0x30,
	0xbb, 0x22, 0x52, 0x7a, 0xaf, 0x1d, 0x29, 0x9b, 0x2b, 0x23, 0x25, 0xfc, 0x6d, 0x00, 0xd0, 0x64,
	0x6f, 0xd4, 0xc7, 0xea, 0xc7, 0xd6, 0xd6, 0x6c, 0x1a, 0x53, 0x31, 0x26, 0x70, 0x8c, 0x35, 0xe3,
	0x8f, 0x01, 0x9c, 0xb7, 0x29, 0x95, 0x2f, 0xb8, 0x3f, 0xca, 0x68, 0xb0, 0x66, 0x4f, 0x9a, 0x14,
	0x8e, 0x07, 0x8d, 0x6d, 0x7b, 0xe2, 0xa3, 0xff, 0x84, 0xed, 0x5c, 0x6f, 0x66, 0x3d, 0x1b, 0xf4,
	0xed, 0x31, 0x8f, 0xbc, 0x54, 0xd1, 0x2d, 0xbc, 0xf0, 0x7e, 0x6b, 0xd2, 0xfb, 0x4c, 0x85, 0x7f,
	0x0d, 0xe0, 0xb2, 0x6d, 0xab, 0x22, 0xa1, 0x86, 0xdb, 0xde, 0xaa, 0x04, 0x73, 0xed, 0x35, 0x7a,
	0x67, 0x18, 0xec, 0xf6, 0x6e, 0x4d, 0xdf, 0x50, 0x37, 0x8f, 0xb7, 0x6b, 0x37, 0x1e, 0xa0, 0x17,
	0xfb, 0x38, 0x1a, 0x8d, 0x61, 0x6b, 0xc1, 0x95, 0xb6, 0xfd, 0x87, 0xcd, 0x38, 0xfb, 0xa2, 0x6a,
	0x91, 0xb7, 0x31, 0x44, 0x2e, 0x56, 0xd0, 0x5d, 0x8b, 0xb8, 0x1e, 0x79, 0x1b, 0x2e, 0x2b, 0x3e,
	0xcf, 0x0d, 0x27, 0x5e, 0xcc, 0x27, 0xf3, 0xbb, 0x18, 0xb3, 0xdb, 0x0e, 0xfd, 0xc4, 0x81, 0x3e,
	0xa9, 0xbf, 0x0d, 0x83, 0x65, 0xa9, 0xe8, 0xce, 0x70, 0x63, 0xb7, 0x1b, 0xf7, 0x97, 0xb8, 0xc3,
	0xdf, 0x07, 0x30, 0x58, 0xee, 0xe0, 0xd1, 0x7b, 0x78, 0x48, 0x87, 0xeb, 0xec, 0xc1, 0x8e, 0x16,
	0xf7, 0xab, 0xf5, 0xc4, 0x5d, 0xf0, 0xef, 0x02, 0xe8, 0xb5, 0x3a, 0x6e, 0xf4, 0x3e, 0x06, 0x61,
	0xb2, 0xb6, 0xdb, 0x6a, 0xd9, 0x8a, 0xc1, 0x2d, 0xee, 0xd9, 0x4e, 0x6f, 0x7b, 0xba, 0xed, 0x6c,
	0x3f, 0x72, 0xfd, 0xdb, 0x7e, 0x87, 0x1f, 0xc0, 0x0e, 0x37, 0x33, 0xae, 0x24, 0x37, 0x3e, 0xa4,
	0x74, 0x59, 0xd8, 0x6b, 0xe6, 0x49, 0xf4, 0x01, 0xde, 0xc3, 0x15, 0xcf, 0xe0, 0x2e, 0x7b, 0xe2,
	0xe1, 0xf0, 0xfb, 0x70, 0xb1, 0xde, 0x78, 0x2d, 0xf3, 0x63, 0x94, 0xb9, 0xe0, 0x4f, 0xa0, 0x66,
	0x5e, 0xae, 0xfc, 0x3f, 0xf9, 0x72, 0xe5, 0x7f, 0x1b, 0xc2, 0x56, 0xe5, 0xf7, 0x81, 0xf0, 0x53,
	0xa7, 0xac, 0x66, 0xf3, 0x41, 0xb0, 0xa2, 0x4f, 0x7c, 0xb8, 0xaa, 0x4f, 0xdc, 0x84, 0x4d, 0x51,
	0x2c, 0xee, 0xd4, 0x66, 0x3f, 0x72, 0x43, 0xa4, 0xa5, 0x79, 0xc3, 0x3f, 0x84, 0xed, 0x36, 0x4b,
	0x6d, 0xfa, 0x67, 0xa8, 0x2f, 0x6c, 0xb1, 0x7a, 0xe3, 0x3b, 0xd0, 0xb1, 0x6d, 0x05, 0x07, 0xcb,
	0x3d, 0x54, 0x78, 0x6e, 0xa1, 0xd2, 0x67, 0x76, 0xb6, 0xb4, 0xaf, 0x21, 0x95, 0x8a, 0x24, 0xfa,
	0x79, 0xdd, 0x70, 0x44, 0x62, 0xe7, 0x9e, 0x84, 0x6b, 0xa6, 0x44, 0x81, 0xb3, 0xe0, 0x5d, 0xe7,
	0x44, 0x8b, 0x14, 0xfe, 0x00, 0xb6, 0x5a, 0xcb, 0xda, 0x87, 0x7b, 0xce, 0x87, 0x16, 0xe4, 0x7d,
	0xf8, 0x06, 0xf4, 0xe6, 0x94, 0xd5, 0xfb, 0xba, 0x8f, 0x2a, 0x61, 0x4e, 0x99, 0xdf, 0x96, 0x6d,
	0x3e, 0x0d, 0x43, 0xad, 0xf1, 0x41, 0xd5, 0x7c, 0x6a, 0x46, 0xaf, 0xf0, 0x7d, 0x88, 0x5a, 0xcf,
	0x1a, 0xcd, 0x95, 0xa0, 0x19, 0x71, 0x3d, 0x2d, 0x7a, 0x88, 0xda, 0x2f, 0x37, 0xf8, 0x04, 0xe1,
	0x67, 0x88, 0x86, 0x0f, 0x61, 0xf8, 0x2a, 0xc9, 0xda, 0xec, 0x23, 0x34, 0x7b, 0x7d, 0xb5, 0x06,
	0xef, 0x02, 0xd6, 0x03, 0xc6, 0xc5, 0xe2, 0x84, 0x03, 0x8f, 0xd1, 0x81, 0x6d, 0x8f, 0x2e, 0x99,
	0xbf, 0x0b, 0x37, 0x56, 0x4b, 0xd5, 0xc6, 0x7f, 0x81, 0xc6, 0xaf, 0xae, 0x92, 0xf6, 0xa6, 0xdf,
	0x82, 0x4e, 0x41, 0xb5, 0x3e, 0xca, 0x55, 0x12, 0x7d, 0x5c, 0xcd, 0x7d, 0xd5, 0xda, 0x16, 0x1c,
	0xff, 0x4d, 0xf0, 0xf5, 0x11, 0x3d, 0x41, 0x8e, 0xbe, 0xa7, 0xde, 0xb7, 0x44, 0x1b, 0xc0, 0xb5,
	0x1f, 0xb3, 0x5c, 0x1b, 0x17, 0x1f, 0x4f, 0xdd, 0xfb, 0xc0, 0x23, 0x8f, 0x72, 0x6d, 0x30, 0x50,
	0x6e, 0xc2, 0x26, 0xce, 0x4f, 0x76, 0x6c, 0xce, 0x4b, 0x13, 0x3d, 0x73, 0xb3, 0xb0, 0xa5, 0x1d,
	0x38, 0x92, 0xed, 0xcb, 0x15, 0x4a, 0x8e, 0xa8, 0x92, 0xf6, 0x0d, 0xf4, 0x1c, 0xb9, 0x06, 0x15,
	0xf9, 0x53, 0x47, 0x5d, 0xd5, 0xc0, 0xf7, 0x5f, 0xbb, 0x81, 0xff, 0x72, 0x75, 0x03, 0xbf, 0x05,
	0x97, 0x14, 0x4f, 0x4a, 0x99, 0x50, 0xc9, 0x8e, 0x89, 0x60, 0xac, 0x20, 0x53, 0x95, 0x97, 0x45,
	0x14, 0xa3, 0x0b, 0x5b, 0x0d, 0xf8, 0x98, 0xb1, 0xe2, 0xa1, 0x85, 0xc2, 0xf7, 0x20, 0x52, 0x1c,
	0x3b, 0xde, 0x31, 0x49, 0x78, 0x46, 0x8f, 0x71, 0x77, 0x24, 0xe3, 0xa9, 0x89, 0x26, 0x6e, 0xb0,
	0xf2, 0xf8, 0x3d, 0x0b, 0xdb, 0x8d, 0x3e, 0xe1, 0xa9, 0x09, 0xdf, 0x85, 0x2b, 0x78, 0x62, 0x46,
	0x71, 0x6a, 0x84, 0x9c, 0x12, 0xaa, 0xab, 0x11, 0x2b, 0x3a, 0x70, 0x9d, 0xc0, 0xc2, 0x07, 0x15,
	0xba, 0xa7, 0xdd, 0x90, 0x65, 0x27, 0x9f, 0xa6, 0x08, 0xae, 0x90, 0x7d, 0xe1, 0x26, 0x9f, 0x9a,
	0xe7, 0x84, 0x82, 0xbf, 0x05, 0x30, 0x6c, 0xed, 0xb2, 0xf5, 0x1c, 0x6d, 0x9e, 0x33, 0xd1, 0x27,
	0xd8, 0x35, 0x7e, 0xbd, 0x8e, 0x62, 0x5d, 0x1b, 0x89, 0xaf, 0x35, 0x6e, 0x3c, 0xf7, 0x2f, 0xe0,
	0x83, 0xfa, 0x45, 0x35, 0x86, 0x2d, 0x9d, 0x50, 0x56, 0x10, 0xcd, 0xb5, 0xae, 0x9f, 0x77, 0xd1,
	0xa7, 0xae, 0xb1, 0x22, 0x34, 0x71, 0x88, 0x6b, 0xac, 0xf6, 0x60, 0x96, 0xf8, 0x53, 0x2a, 0xb2,
	0x52, 0x71, 0x1f, 0x1d, 0x9f, 0xa1, 0xe0, 0x4e, 0x5b, 0xf0, 0x81, 0xe3, 0xa8, 0x02, 0xe5, 0x9b,
	0xd0, 0x17, 0x52, 0x1b, 0x9a, 0x65, 0x95, 0xa9, 0xcf, 0x51, 0x62, 0xb3, 0x22, 0x3a, 0x2b, 0x7f,
	0x58, 0xfe, 0x13, 0x82, 0xe3, 0xd5, 0xaf, 0xb0, 0xb3, 0x1d, 0xae, 0x6f, 0x0e, 0xf1, 0x6f, 0x8e,
	0xf6, 0xff, 0x0f, 0x3b, 0x5d, 0x1d, 0x9e, 0xc5, 0xdf, 0x73, 0xef, 0xfc, 0x2f, 0x00, 0x00, 0xff,
	0xff, 0x31, 0xe2, 0x2c, 0xe6, 0xbc, 0x13, 0x00, 0x00,
}
