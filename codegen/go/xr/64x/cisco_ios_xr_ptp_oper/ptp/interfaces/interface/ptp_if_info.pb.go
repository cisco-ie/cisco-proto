/*
Copyright 2019 Cisco Systems

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ptp_if_info.proto

package cisco_ios_xr_ptp_oper_ptp_interfaces_interface

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type PtpIfInfo_KEYS struct {
	InterfaceName        string   `protobuf:"bytes,1,opt,name=interface_name,json=interfaceName,proto3" json:"interface_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PtpIfInfo_KEYS) Reset()         { *m = PtpIfInfo_KEYS{} }
func (m *PtpIfInfo_KEYS) String() string { return proto.CompactTextString(m) }
func (*PtpIfInfo_KEYS) ProtoMessage()    {}
func (*PtpIfInfo_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_044daa3b11182e32, []int{0}
}

func (m *PtpIfInfo_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PtpIfInfo_KEYS.Unmarshal(m, b)
}
func (m *PtpIfInfo_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PtpIfInfo_KEYS.Marshal(b, m, deterministic)
}
func (m *PtpIfInfo_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PtpIfInfo_KEYS.Merge(m, src)
}
func (m *PtpIfInfo_KEYS) XXX_Size() int {
	return xxx_messageInfo_PtpIfInfo_KEYS.Size(m)
}
func (m *PtpIfInfo_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_PtpIfInfo_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_PtpIfInfo_KEYS proto.InternalMessageInfo

func (m *PtpIfInfo_KEYS) GetInterfaceName() string {
	if m != nil {
		return m.InterfaceName
	}
	return ""
}

type PtpBagMacAddrType struct {
	Macaddr              string   `protobuf:"bytes,1,opt,name=macaddr,proto3" json:"macaddr,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PtpBagMacAddrType) Reset()         { *m = PtpBagMacAddrType{} }
func (m *PtpBagMacAddrType) String() string { return proto.CompactTextString(m) }
func (*PtpBagMacAddrType) ProtoMessage()    {}
func (*PtpBagMacAddrType) Descriptor() ([]byte, []int) {
	return fileDescriptor_044daa3b11182e32, []int{1}
}

func (m *PtpBagMacAddrType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PtpBagMacAddrType.Unmarshal(m, b)
}
func (m *PtpBagMacAddrType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PtpBagMacAddrType.Marshal(b, m, deterministic)
}
func (m *PtpBagMacAddrType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PtpBagMacAddrType.Merge(m, src)
}
func (m *PtpBagMacAddrType) XXX_Size() int {
	return xxx_messageInfo_PtpBagMacAddrType.Size(m)
}
func (m *PtpBagMacAddrType) XXX_DiscardUnknown() {
	xxx_messageInfo_PtpBagMacAddrType.DiscardUnknown(m)
}

var xxx_messageInfo_PtpBagMacAddrType proto.InternalMessageInfo

func (m *PtpBagMacAddrType) GetMacaddr() string {
	if m != nil {
		return m.Macaddr
	}
	return ""
}

type PtpBagIpv6AddrType struct {
	Ipv6Address          string   `protobuf:"bytes,1,opt,name=ipv6_address,json=ipv6Address,proto3" json:"ipv6_address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PtpBagIpv6AddrType) Reset()         { *m = PtpBagIpv6AddrType{} }
func (m *PtpBagIpv6AddrType) String() string { return proto.CompactTextString(m) }
func (*PtpBagIpv6AddrType) ProtoMessage()    {}
func (*PtpBagIpv6AddrType) Descriptor() ([]byte, []int) {
	return fileDescriptor_044daa3b11182e32, []int{2}
}

func (m *PtpBagIpv6AddrType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PtpBagIpv6AddrType.Unmarshal(m, b)
}
func (m *PtpBagIpv6AddrType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PtpBagIpv6AddrType.Marshal(b, m, deterministic)
}
func (m *PtpBagIpv6AddrType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PtpBagIpv6AddrType.Merge(m, src)
}
func (m *PtpBagIpv6AddrType) XXX_Size() int {
	return xxx_messageInfo_PtpBagIpv6AddrType.Size(m)
}
func (m *PtpBagIpv6AddrType) XXX_DiscardUnknown() {
	xxx_messageInfo_PtpBagIpv6AddrType.DiscardUnknown(m)
}

var xxx_messageInfo_PtpBagIpv6AddrType proto.InternalMessageInfo

func (m *PtpBagIpv6AddrType) GetIpv6Address() string {
	if m != nil {
		return m.Ipv6Address
	}
	return ""
}

type PtpBagAddress struct {
	Encapsulation        string              `protobuf:"bytes,1,opt,name=encapsulation,proto3" json:"encapsulation,omitempty"`
	AddressUnknown       bool                `protobuf:"varint,2,opt,name=address_unknown,json=addressUnknown,proto3" json:"address_unknown,omitempty"`
	MacAddress           *PtpBagMacAddrType  `protobuf:"bytes,3,opt,name=mac_address,json=macAddress,proto3" json:"mac_address,omitempty"`
	Ipv4Address          string              `protobuf:"bytes,4,opt,name=ipv4_address,json=ipv4Address,proto3" json:"ipv4_address,omitempty"`
	Ipv6Address          *PtpBagIpv6AddrType `protobuf:"bytes,5,opt,name=ipv6_address,json=ipv6Address,proto3" json:"ipv6_address,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *PtpBagAddress) Reset()         { *m = PtpBagAddress{} }
func (m *PtpBagAddress) String() string { return proto.CompactTextString(m) }
func (*PtpBagAddress) ProtoMessage()    {}
func (*PtpBagAddress) Descriptor() ([]byte, []int) {
	return fileDescriptor_044daa3b11182e32, []int{3}
}

func (m *PtpBagAddress) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PtpBagAddress.Unmarshal(m, b)
}
func (m *PtpBagAddress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PtpBagAddress.Marshal(b, m, deterministic)
}
func (m *PtpBagAddress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PtpBagAddress.Merge(m, src)
}
func (m *PtpBagAddress) XXX_Size() int {
	return xxx_messageInfo_PtpBagAddress.Size(m)
}
func (m *PtpBagAddress) XXX_DiscardUnknown() {
	xxx_messageInfo_PtpBagAddress.DiscardUnknown(m)
}

var xxx_messageInfo_PtpBagAddress proto.InternalMessageInfo

func (m *PtpBagAddress) GetEncapsulation() string {
	if m != nil {
		return m.Encapsulation
	}
	return ""
}

func (m *PtpBagAddress) GetAddressUnknown() bool {
	if m != nil {
		return m.AddressUnknown
	}
	return false
}

func (m *PtpBagAddress) GetMacAddress() *PtpBagMacAddrType {
	if m != nil {
		return m.MacAddress
	}
	return nil
}

func (m *PtpBagAddress) GetIpv4Address() string {
	if m != nil {
		return m.Ipv4Address
	}
	return ""
}

func (m *PtpBagAddress) GetIpv6Address() *PtpBagIpv6AddrType {
	if m != nil {
		return m.Ipv6Address
	}
	return nil
}

type PtpBagMasterTableEntry struct {
	Address              *PtpBagAddress `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	CommunicationModel   string         `protobuf:"bytes,2,opt,name=communication_model,json=communicationModel,proto3" json:"communication_model,omitempty"`
	Priority             uint32         `protobuf:"varint,3,opt,name=priority,proto3" json:"priority,omitempty"`
	Known                bool           `protobuf:"varint,4,opt,name=known,proto3" json:"known,omitempty"`
	Qualified            bool           `protobuf:"varint,5,opt,name=qualified,proto3" json:"qualified,omitempty"`
	IsGrandmaster        bool           `protobuf:"varint,6,opt,name=is_grandmaster,json=isGrandmaster,proto3" json:"is_grandmaster,omitempty"`
	PtsfLossAnnounce     uint32         `protobuf:"varint,7,opt,name=ptsf_loss_announce,json=ptsfLossAnnounce,proto3" json:"ptsf_loss_announce,omitempty"`
	PtsfLossSync         uint32         `protobuf:"varint,8,opt,name=ptsf_loss_sync,json=ptsfLossSync,proto3" json:"ptsf_loss_sync,omitempty"`
	IsNonnegotiated      bool           `protobuf:"varint,9,opt,name=is_nonnegotiated,json=isNonnegotiated,proto3" json:"is_nonnegotiated,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *PtpBagMasterTableEntry) Reset()         { *m = PtpBagMasterTableEntry{} }
func (m *PtpBagMasterTableEntry) String() string { return proto.CompactTextString(m) }
func (*PtpBagMasterTableEntry) ProtoMessage()    {}
func (*PtpBagMasterTableEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_044daa3b11182e32, []int{4}
}

func (m *PtpBagMasterTableEntry) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PtpBagMasterTableEntry.Unmarshal(m, b)
}
func (m *PtpBagMasterTableEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PtpBagMasterTableEntry.Marshal(b, m, deterministic)
}
func (m *PtpBagMasterTableEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PtpBagMasterTableEntry.Merge(m, src)
}
func (m *PtpBagMasterTableEntry) XXX_Size() int {
	return xxx_messageInfo_PtpBagMasterTableEntry.Size(m)
}
func (m *PtpBagMasterTableEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_PtpBagMasterTableEntry.DiscardUnknown(m)
}

var xxx_messageInfo_PtpBagMasterTableEntry proto.InternalMessageInfo

func (m *PtpBagMasterTableEntry) GetAddress() *PtpBagAddress {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *PtpBagMasterTableEntry) GetCommunicationModel() string {
	if m != nil {
		return m.CommunicationModel
	}
	return ""
}

func (m *PtpBagMasterTableEntry) GetPriority() uint32 {
	if m != nil {
		return m.Priority
	}
	return 0
}

func (m *PtpBagMasterTableEntry) GetKnown() bool {
	if m != nil {
		return m.Known
	}
	return false
}

func (m *PtpBagMasterTableEntry) GetQualified() bool {
	if m != nil {
		return m.Qualified
	}
	return false
}

func (m *PtpBagMasterTableEntry) GetIsGrandmaster() bool {
	if m != nil {
		return m.IsGrandmaster
	}
	return false
}

func (m *PtpBagMasterTableEntry) GetPtsfLossAnnounce() uint32 {
	if m != nil {
		return m.PtsfLossAnnounce
	}
	return 0
}

func (m *PtpBagMasterTableEntry) GetPtsfLossSync() uint32 {
	if m != nil {
		return m.PtsfLossSync
	}
	return 0
}

func (m *PtpBagMasterTableEntry) GetIsNonnegotiated() bool {
	if m != nil {
		return m.IsNonnegotiated
	}
	return false
}

type PtpIfInfo struct {
	PortState                  string                    `protobuf:"bytes,50,opt,name=port_state,json=portState,proto3" json:"port_state,omitempty"`
	PortNumber                 uint32                    `protobuf:"varint,51,opt,name=port_number,json=portNumber,proto3" json:"port_number,omitempty"`
	LineState                  string                    `protobuf:"bytes,52,opt,name=line_state,json=lineState,proto3" json:"line_state,omitempty"`
	Encapsulation              string                    `protobuf:"bytes,53,opt,name=encapsulation,proto3" json:"encapsulation,omitempty"`
	Ipv6Address                string                    `protobuf:"bytes,54,opt,name=ipv6_address,json=ipv6Address,proto3" json:"ipv6_address,omitempty"`
	Ipv4Address                string                    `protobuf:"bytes,55,opt,name=ipv4_address,json=ipv4Address,proto3" json:"ipv4_address,omitempty"`
	MacAddress                 *PtpBagMacAddrType        `protobuf:"bytes,56,opt,name=mac_address,json=macAddress,proto3" json:"mac_address,omitempty"`
	TwoStep                    bool                      `protobuf:"varint,57,opt,name=two_step,json=twoStep,proto3" json:"two_step,omitempty"`
	CommunicationModel         string                    `protobuf:"bytes,58,opt,name=communication_model,json=communicationModel,proto3" json:"communication_model,omitempty"`
	LogSyncInterval            int32                     `protobuf:"zigzag32,59,opt,name=log_sync_interval,json=logSyncInterval,proto3" json:"log_sync_interval,omitempty"`
	LogAnnounceInterval        int32                     `protobuf:"zigzag32,60,opt,name=log_announce_interval,json=logAnnounceInterval,proto3" json:"log_announce_interval,omitempty"`
	AnnounceTimeout            uint32                    `protobuf:"varint,61,opt,name=announce_timeout,json=announceTimeout,proto3" json:"announce_timeout,omitempty"`
	LogMinDelayRequestInterval int32                     `protobuf:"zigzag32,62,opt,name=log_min_delay_request_interval,json=logMinDelayRequestInterval,proto3" json:"log_min_delay_request_interval,omitempty"`
	MasterTable                []*PtpBagMasterTableEntry `protobuf:"bytes,63,rep,name=master_table,json=masterTable,proto3" json:"master_table,omitempty"`
	ConfiguredPortState        string                    `protobuf:"bytes,64,opt,name=configured_port_state,json=configuredPortState,proto3" json:"configured_port_state,omitempty"`
	SupportsUnicast            bool                      `protobuf:"varint,65,opt,name=supports_unicast,json=supportsUnicast,proto3" json:"supports_unicast,omitempty"`
	SupportsMaster             bool                      `protobuf:"varint,66,opt,name=supports_master,json=supportsMaster,proto3" json:"supports_master,omitempty"`
	SupportsOneStep            bool                      `protobuf:"varint,67,opt,name=supports_one_step,json=supportsOneStep,proto3" json:"supports_one_step,omitempty"`
	SupportsTwoStep            bool                      `protobuf:"varint,68,opt,name=supports_two_step,json=supportsTwoStep,proto3" json:"supports_two_step,omitempty"`
	SupportsEthernet           bool                      `protobuf:"varint,69,opt,name=supports_ethernet,json=supportsEthernet,proto3" json:"supports_ethernet,omitempty"`
	SupportsMulticast          bool                      `protobuf:"varint,70,opt,name=supports_multicast,json=supportsMulticast,proto3" json:"supports_multicast,omitempty"`
	SupportsIpv4               bool                      `protobuf:"varint,71,opt,name=supports_ipv4,json=supportsIpv4,proto3" json:"supports_ipv4,omitempty"`
	SupportsIpv6               bool                      `protobuf:"varint,72,opt,name=supports_ipv6,json=supportsIpv6,proto3" json:"supports_ipv6,omitempty"`
	SupportsSlave              bool                      `protobuf:"varint,73,opt,name=supports_slave,json=supportsSlave,proto3" json:"supports_slave,omitempty"`
	SupportsSourceIp           bool                      `protobuf:"varint,74,opt,name=supports_source_ip,json=supportsSourceIp,proto3" json:"supports_source_ip,omitempty"`
	MaxSyncRate                uint32                    `protobuf:"varint,75,opt,name=max_sync_rate,json=maxSyncRate,proto3" json:"max_sync_rate,omitempty"`
	EventCos                   uint32                    `protobuf:"varint,76,opt,name=event_cos,json=eventCos,proto3" json:"event_cos,omitempty"`
	GeneralCos                 uint32                    `protobuf:"varint,77,opt,name=general_cos,json=generalCos,proto3" json:"general_cos,omitempty"`
	EventDscp                  uint32                    `protobuf:"varint,78,opt,name=event_dscp,json=eventDscp,proto3" json:"event_dscp,omitempty"`
	GeneralDscp                uint32                    `protobuf:"varint,79,opt,name=general_dscp,json=generalDscp,proto3" json:"general_dscp,omitempty"`
	UnicastPeers               uint32                    `protobuf:"varint,80,opt,name=unicast_peers,json=unicastPeers,proto3" json:"unicast_peers,omitempty"`
	LocalPriority              uint32                    `protobuf:"varint,81,opt,name=local_priority,json=localPriority,proto3" json:"local_priority,omitempty"`
	SignalFail                 bool                      `protobuf:"varint,82,opt,name=signal_fail,json=signalFail,proto3" json:"signal_fail,omitempty"`
	XXX_NoUnkeyedLiteral       struct{}                  `json:"-"`
	XXX_unrecognized           []byte                    `json:"-"`
	XXX_sizecache              int32                     `json:"-"`
}

func (m *PtpIfInfo) Reset()         { *m = PtpIfInfo{} }
func (m *PtpIfInfo) String() string { return proto.CompactTextString(m) }
func (*PtpIfInfo) ProtoMessage()    {}
func (*PtpIfInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_044daa3b11182e32, []int{5}
}

func (m *PtpIfInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PtpIfInfo.Unmarshal(m, b)
}
func (m *PtpIfInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PtpIfInfo.Marshal(b, m, deterministic)
}
func (m *PtpIfInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PtpIfInfo.Merge(m, src)
}
func (m *PtpIfInfo) XXX_Size() int {
	return xxx_messageInfo_PtpIfInfo.Size(m)
}
func (m *PtpIfInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PtpIfInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PtpIfInfo proto.InternalMessageInfo

func (m *PtpIfInfo) GetPortState() string {
	if m != nil {
		return m.PortState
	}
	return ""
}

func (m *PtpIfInfo) GetPortNumber() uint32 {
	if m != nil {
		return m.PortNumber
	}
	return 0
}

func (m *PtpIfInfo) GetLineState() string {
	if m != nil {
		return m.LineState
	}
	return ""
}

func (m *PtpIfInfo) GetEncapsulation() string {
	if m != nil {
		return m.Encapsulation
	}
	return ""
}

func (m *PtpIfInfo) GetIpv6Address() string {
	if m != nil {
		return m.Ipv6Address
	}
	return ""
}

func (m *PtpIfInfo) GetIpv4Address() string {
	if m != nil {
		return m.Ipv4Address
	}
	return ""
}

func (m *PtpIfInfo) GetMacAddress() *PtpBagMacAddrType {
	if m != nil {
		return m.MacAddress
	}
	return nil
}

func (m *PtpIfInfo) GetTwoStep() bool {
	if m != nil {
		return m.TwoStep
	}
	return false
}

func (m *PtpIfInfo) GetCommunicationModel() string {
	if m != nil {
		return m.CommunicationModel
	}
	return ""
}

func (m *PtpIfInfo) GetLogSyncInterval() int32 {
	if m != nil {
		return m.LogSyncInterval
	}
	return 0
}

func (m *PtpIfInfo) GetLogAnnounceInterval() int32 {
	if m != nil {
		return m.LogAnnounceInterval
	}
	return 0
}

func (m *PtpIfInfo) GetAnnounceTimeout() uint32 {
	if m != nil {
		return m.AnnounceTimeout
	}
	return 0
}

func (m *PtpIfInfo) GetLogMinDelayRequestInterval() int32 {
	if m != nil {
		return m.LogMinDelayRequestInterval
	}
	return 0
}

func (m *PtpIfInfo) GetMasterTable() []*PtpBagMasterTableEntry {
	if m != nil {
		return m.MasterTable
	}
	return nil
}

func (m *PtpIfInfo) GetConfiguredPortState() string {
	if m != nil {
		return m.ConfiguredPortState
	}
	return ""
}

func (m *PtpIfInfo) GetSupportsUnicast() bool {
	if m != nil {
		return m.SupportsUnicast
	}
	return false
}

func (m *PtpIfInfo) GetSupportsMaster() bool {
	if m != nil {
		return m.SupportsMaster
	}
	return false
}

func (m *PtpIfInfo) GetSupportsOneStep() bool {
	if m != nil {
		return m.SupportsOneStep
	}
	return false
}

func (m *PtpIfInfo) GetSupportsTwoStep() bool {
	if m != nil {
		return m.SupportsTwoStep
	}
	return false
}

func (m *PtpIfInfo) GetSupportsEthernet() bool {
	if m != nil {
		return m.SupportsEthernet
	}
	return false
}

func (m *PtpIfInfo) GetSupportsMulticast() bool {
	if m != nil {
		return m.SupportsMulticast
	}
	return false
}

func (m *PtpIfInfo) GetSupportsIpv4() bool {
	if m != nil {
		return m.SupportsIpv4
	}
	return false
}

func (m *PtpIfInfo) GetSupportsIpv6() bool {
	if m != nil {
		return m.SupportsIpv6
	}
	return false
}

func (m *PtpIfInfo) GetSupportsSlave() bool {
	if m != nil {
		return m.SupportsSlave
	}
	return false
}

func (m *PtpIfInfo) GetSupportsSourceIp() bool {
	if m != nil {
		return m.SupportsSourceIp
	}
	return false
}

func (m *PtpIfInfo) GetMaxSyncRate() uint32 {
	if m != nil {
		return m.MaxSyncRate
	}
	return 0
}

func (m *PtpIfInfo) GetEventCos() uint32 {
	if m != nil {
		return m.EventCos
	}
	return 0
}

func (m *PtpIfInfo) GetGeneralCos() uint32 {
	if m != nil {
		return m.GeneralCos
	}
	return 0
}

func (m *PtpIfInfo) GetEventDscp() uint32 {
	if m != nil {
		return m.EventDscp
	}
	return 0
}

func (m *PtpIfInfo) GetGeneralDscp() uint32 {
	if m != nil {
		return m.GeneralDscp
	}
	return 0
}

func (m *PtpIfInfo) GetUnicastPeers() uint32 {
	if m != nil {
		return m.UnicastPeers
	}
	return 0
}

func (m *PtpIfInfo) GetLocalPriority() uint32 {
	if m != nil {
		return m.LocalPriority
	}
	return 0
}

func (m *PtpIfInfo) GetSignalFail() bool {
	if m != nil {
		return m.SignalFail
	}
	return false
}

func init() {
	proto.RegisterType((*PtpIfInfo_KEYS)(nil), "cisco_ios_xr_ptp_oper.ptp.interfaces.interface.ptp_if_info_KEYS")
	proto.RegisterType((*PtpBagMacAddrType)(nil), "cisco_ios_xr_ptp_oper.ptp.interfaces.interface.ptp_bag_mac_addr_type")
	proto.RegisterType((*PtpBagIpv6AddrType)(nil), "cisco_ios_xr_ptp_oper.ptp.interfaces.interface.ptp_bag_ipv6_addr_type")
	proto.RegisterType((*PtpBagAddress)(nil), "cisco_ios_xr_ptp_oper.ptp.interfaces.interface.ptp_bag_address")
	proto.RegisterType((*PtpBagMasterTableEntry)(nil), "cisco_ios_xr_ptp_oper.ptp.interfaces.interface.ptp_bag_master_table_entry")
	proto.RegisterType((*PtpIfInfo)(nil), "cisco_ios_xr_ptp_oper.ptp.interfaces.interface.ptp_if_info")
}

func init() { proto.RegisterFile("ptp_if_info.proto", fileDescriptor_044daa3b11182e32) }

var fileDescriptor_044daa3b11182e32 = []byte{
	// 1019 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x96, 0x6d, 0x57, 0x1c, 0x35,
	0x14, 0xc7, 0x0f, 0xa5, 0x2d, 0xec, 0x1d, 0x96, 0x87, 0x60, 0x3d, 0x11, 0xad, 0xc5, 0x6d, 0x3d,
	0x42, 0x55, 0x3c, 0x52, 0x44, 0x6b, 0xd5, 0x4a, 0x0b, 0x54, 0xda, 0x42, 0x71, 0x96, 0xbe, 0xe8,
	0xab, 0x9c, 0x30, 0x9b, 0x1d, 0x73, 0xcc, 0x24, 0xe9, 0x24, 0xb3, 0xb0, 0x5f, 0xc6, 0x8f, 0xe1,
	0x47, 0xf1, 0xf3, 0x78, 0x92, 0xcc, 0xc3, 0x3e, 0xb4, 0x2f, 0xe4, 0x1c, 0xdf, 0x31, 0xbf, 0xfb,
	0xbf, 0xc9, 0xcd, 0x7d, 0x5a, 0x60, 0x45, 0x5b, 0x4d, 0x78, 0x9f, 0x70, 0xd9, 0x57, 0x5b, 0x3a,
	0x57, 0x56, 0xa1, 0xad, 0x84, 0x9b, 0x44, 0x11, 0xae, 0x0c, 0xb9, 0xcc, 0x89, 0xb3, 0x2b, 0xcd,
	0xf2, 0x2d, 0x6d, 0xf5, 0x16, 0x97, 0x96, 0xe5, 0x7d, 0x9a, 0x30, 0xd3, 0xfc, 0xd9, 0x79, 0x08,
	0xcb, 0x23, 0x87, 0x90, 0x17, 0x07, 0x6f, 0xba, 0xe8, 0x73, 0x58, 0xac, 0x05, 0x44, 0xd2, 0x8c,
	0xe1, 0x99, 0xf5, 0x99, 0x8d, 0x56, 0xdc, 0xae, 0xe9, 0x09, 0xcd, 0x58, 0xe7, 0x5b, 0xb8, 0xe5,
	0x5c, 0xcf, 0x69, 0x4a, 0x32, 0x9a, 0x10, 0xda, 0xeb, 0xe5, 0xc4, 0x0e, 0x35, 0x43, 0x18, 0xe6,
	0x32, 0x9a, 0xb8, 0xef, 0xd2, 0xb1, 0xfa, 0xec, 0x3c, 0x82, 0x0f, 0x2b, 0x17, 0xae, 0x07, 0xbb,
	0x23, 0x3e, 0x9f, 0xc1, 0x42, 0x4d, 0x98, 0x31, 0xa5, 0x63, 0xe4, 0xd8, 0x5e, 0x40, 0x9d, 0x7f,
	0xae, 0xc1, 0x52, 0xe5, 0x5d, 0xca, 0xd0, 0x3d, 0x68, 0x33, 0x99, 0x50, 0x6d, 0x0a, 0x41, 0x2d,
	0x57, 0xb2, 0x8a, 0x74, 0x0c, 0xa2, 0x2f, 0x60, 0xa9, 0x74, 0x20, 0x85, 0xfc, 0x53, 0xaa, 0x0b,
	0x89, 0xaf, 0xad, 0xcf, 0x6c, 0xcc, 0xc7, 0x8b, 0x25, 0x7e, 0x1d, 0x28, 0xea, 0x43, 0x54, 0x3d,
	0xc5, 0x05, 0x31, 0xbb, 0x3e, 0xb3, 0x11, 0x6d, 0x1f, 0xfc, 0xc7, 0x9c, 0x6e, 0xbd, 0x33, 0x2b,
	0x31, 0x64, 0x34, 0x29, 0x9f, 0x52, 0xbe, 0x76, 0xa7, 0xbe, 0xe8, 0x7a, 0xfd, 0xda, 0x9d, 0x4a,
	0xc2, 0x27, 0x12, 0x72, 0xc3, 0xc7, 0x72, 0x78, 0xd5, 0x58, 0xc6, 0xd3, 0x3d, 0x9e, 0xd8, 0xbf,
	0x66, 0x61, 0xad, 0x89, 0xd9, 0x58, 0x96, 0x13, 0x4b, 0xcf, 0x05, 0x23, 0x4c, 0xda, 0x7c, 0x88,
	0xde, 0xc0, 0xdc, 0x68, 0x55, 0xa2, 0xed, 0xc7, 0x57, 0x0d, 0xa2, 0x3c, 0x26, 0xae, 0xce, 0x43,
	0xdf, 0xc0, 0x6a, 0xa2, 0xb2, 0xac, 0x90, 0x3c, 0xf1, 0x95, 0x22, 0x99, 0xea, 0x31, 0xe1, 0x8b,
	0xd3, 0x8a, 0xd1, 0x98, 0xe9, 0xd8, 0x59, 0xd0, 0x1a, 0xcc, 0xeb, 0x9c, 0xab, 0x9c, 0xdb, 0xa1,
	0xaf, 0x4e, 0x3b, 0xae, 0xbf, 0xd1, 0x07, 0x70, 0x23, 0xd4, 0xf6, 0xba, 0xaf, 0x6d, 0xf8, 0x40,
	0x9f, 0x40, 0xeb, 0x6d, 0x41, 0x05, 0xef, 0x73, 0xd6, 0xf3, 0x49, 0x9c, 0x8f, 0x1b, 0xe0, 0x5b,
	0xdd, 0x90, 0x34, 0xa7, 0xb2, 0x17, 0x5e, 0x8e, 0x6f, 0x7a, 0x49, 0x9b, 0x9b, 0x67, 0x0d, 0x44,
	0x5f, 0x01, 0xd2, 0xd6, 0xf4, 0x89, 0x50, 0xc6, 0x10, 0x2a, 0xa5, 0x2a, 0x64, 0xc2, 0xf0, 0x9c,
	0x0f, 0x60, 0xd9, 0x59, 0x5e, 0x2a, 0x63, 0xf6, 0x4a, 0x8e, 0xee, 0xc1, 0x62, 0xa3, 0x36, 0x43,
	0x99, 0xe0, 0x79, 0xaf, 0x5c, 0xa8, 0x94, 0xdd, 0xa1, 0x4c, 0xd0, 0x26, 0x2c, 0x73, 0x43, 0xa4,
	0x92, 0x92, 0xa5, 0xca, 0x72, 0x6a, 0x59, 0x0f, 0xb7, 0xfc, 0xe5, 0x4b, 0xdc, 0x9c, 0x8c, 0xe2,
	0xce, 0xdf, 0x11, 0x44, 0x23, 0x53, 0x8a, 0x6e, 0x03, 0x68, 0x95, 0x5b, 0x62, 0x2c, 0xb5, 0x0c,
	0x6f, 0xfb, 0x6c, 0xb5, 0x1c, 0xe9, 0x3a, 0x80, 0xee, 0x40, 0xe4, 0xcd, 0xb2, 0xc8, 0xce, 0x59,
	0x8e, 0x1f, 0xf8, 0xcb, 0xbd, 0xc7, 0x89, 0x27, 0xce, 0x5f, 0x70, 0xc9, 0x4a, 0xff, 0x9d, 0xe0,
	0xef, 0x48, 0xf0, 0x9f, 0x1a, 0xaa, 0xef, 0xde, 0x35, 0x54, 0x93, 0x13, 0xbb, 0x3b, 0x35, 0xb1,
	0x53, 0x6d, 0xfe, 0xfd, 0x74, 0x9b, 0x4f, 0x4c, 0xdc, 0x0f, 0xff, 0xd7, 0xc4, 0x7d, 0x04, 0xf3,
	0xf6, 0x42, 0x11, 0x63, 0x99, 0xc6, 0x0f, 0x7d, 0x96, 0xe7, 0xec, 0x85, 0xea, 0x5a, 0xa6, 0xdf,
	0xd7, 0x84, 0x3f, 0xbe, 0xb7, 0x09, 0xef, 0xc3, 0x8a, 0x50, 0xa9, 0xaf, 0x2c, 0xf1, 0x31, 0x0c,
	0xa8, 0xc0, 0x8f, 0xd6, 0x67, 0x36, 0x56, 0xe2, 0x25, 0xa1, 0x52, 0x57, 0xdd, 0xa3, 0x12, 0xa3,
	0x6d, 0xb8, 0xe5, 0xb4, 0x55, 0xcf, 0x34, 0xfa, 0x9f, 0xbc, 0x7e, 0x55, 0xa8, 0xb4, 0xea, 0x9b,
	0xda, 0x67, 0x13, 0x96, 0x6b, 0xbd, 0xe5, 0x19, 0x53, 0x85, 0xc5, 0x3f, 0xfb, 0x22, 0x2e, 0x55,
	0xfc, 0x2c, 0x60, 0xf4, 0x04, 0x3e, 0x75, 0xc7, 0x67, 0x5c, 0x92, 0x1e, 0x13, 0x74, 0x48, 0x72,
	0xf6, 0xb6, 0x60, 0xc6, 0x36, 0xf7, 0xfc, 0xe2, 0xef, 0x59, 0x13, 0x2a, 0x3d, 0xe6, 0x72, 0xdf,
	0x69, 0xe2, 0x20, 0xa9, 0xaf, 0xcb, 0x60, 0x61, 0x74, 0xea, 0xf1, 0xe3, 0xf5, 0xd9, 0x8d, 0x68,
	0xfb, 0xf9, 0xd5, 0x6b, 0x30, 0xb9, 0x41, 0xe2, 0x28, 0xb0, 0x33, 0x87, 0x5c, 0x46, 0x12, 0x25,
	0xfb, 0x3c, 0x2d, 0x72, 0xd6, 0x23, 0x23, 0x7d, 0xfc, 0xab, 0x4f, 0xf8, 0x6a, 0x63, 0x3c, 0xad,
	0x3b, 0x7a, 0x13, 0x96, 0x4d, 0xa1, 0x9d, 0xd6, 0x6d, 0x70, 0x9e, 0x50, 0x63, 0xf1, 0x5e, 0x98,
	0x95, 0x8a, 0xbf, 0x0e, 0xd8, 0xed, 0xfa, 0x5a, 0x5a, 0x8e, 0xf4, 0x93, 0xb0, 0xeb, 0x2b, 0x7c,
	0x1c, 0x66, 0xfa, 0x3e, 0xac, 0xd4, 0x42, 0xe5, 0x87, 0x81, 0x69, 0xfc, 0x74, 0xfc, 0xd0, 0x57,
	0x6e, 0x24, 0x98, 0x1e, 0xd3, 0xd6, 0x6d, 0xb4, 0x3f, 0xae, 0x3d, 0x2b, 0xdb, 0xe9, 0xcb, 0x11,
	0x2d, 0xb3, 0x7f, 0xb0, 0x5c, 0x32, 0x8b, 0x0f, 0xbc, 0xb6, 0x7e, 0xc4, 0x41, 0xc9, 0xd1, 0xd7,
	0x80, 0x9a, 0x68, 0x0b, 0x61, 0xc3, 0xd3, 0x0e, 0xbd, 0xba, 0x3e, 0xe6, 0xb8, 0x32, 0xa0, 0xbb,
	0xd0, 0xae, 0xe5, 0x6e, 0x8a, 0xf0, 0x33, 0xaf, 0x5c, 0xa8, 0xe0, 0x91, 0x1e, 0xec, 0x4c, 0x8a,
	0x76, 0xf1, 0x6f, 0x53, 0xa2, 0x5d, 0xb7, 0xf8, 0x6a, 0x91, 0x11, 0x74, 0xc0, 0xf0, 0x51, 0x58,
	0x7c, 0x15, 0xed, 0x3a, 0xe8, 0x16, 0x5f, 0x23, 0x53, 0x45, 0xee, 0x3a, 0x58, 0xe3, 0xe7, 0xe3,
	0xaf, 0xe9, 0x7a, 0xc3, 0x91, 0x46, 0x1d, 0x68, 0x67, 0xf4, 0x32, 0x0c, 0x46, 0xee, 0x4a, 0xfa,
	0xc2, 0x77, 0x6d, 0x94, 0xd1, 0x4b, 0x37, 0x14, 0xb1, 0x2b, 0xe5, 0xc7, 0xd0, 0x62, 0x03, 0x26,
	0x2d, 0x49, 0x94, 0xc1, 0x2f, 0xc3, 0x0a, 0xf7, 0xe0, 0xa9, 0x32, 0x6e, 0x73, 0xa5, 0x4c, 0xb2,
	0x9c, 0x0a, 0x6f, 0x3e, 0x0e, 0x9b, 0xab, 0x44, 0x4e, 0x70, 0x1b, 0x20, 0x78, 0xf7, 0x4c, 0xa2,
	0xf1, 0x89, 0xb7, 0x87, 0xf3, 0xf6, 0x4d, 0xa2, 0xdd, 0xc2, 0xa9, 0xfc, 0xbd, 0xe0, 0x55, 0xb8,
	0xbf, 0x64, 0x5e, 0x72, 0x17, 0xda, 0x65, 0x07, 0x11, 0xcd, 0x58, 0x6e, 0xf0, 0x69, 0xd8, 0xcd,
	0x25, 0x3c, 0x75, 0xcc, 0x65, 0x47, 0xa8, 0x84, 0x0a, 0x52, 0xff, 0xd8, 0xfc, 0xee, 0x55, 0x6d,
	0x4f, 0x4f, 0xab, 0x5f, 0x9c, 0x3b, 0x10, 0x19, 0x9e, 0x4a, 0x2a, 0x48, 0x9f, 0x72, 0x81, 0x63,
	0x9f, 0x16, 0x08, 0xe8, 0x90, 0x72, 0x71, 0x7e, 0xd3, 0xff, 0x53, 0xf6, 0xe0, 0xdf, 0x00, 0x00,
	0x00, 0xff, 0xff, 0xf5, 0x63, 0x37, 0xac, 0xa9, 0x09, 0x00, 0x00,
}
