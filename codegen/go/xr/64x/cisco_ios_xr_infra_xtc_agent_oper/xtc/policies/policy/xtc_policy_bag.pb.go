/*
Copyright 2019 Cisco Systems

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: xtc_policy_bag.proto

package cisco_ios_xr_infra_xtc_agent_oper_xtc_policies_policy

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type XtcPolicyBag_KEYS struct {
	Id                   uint32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *XtcPolicyBag_KEYS) Reset()         { *m = XtcPolicyBag_KEYS{} }
func (m *XtcPolicyBag_KEYS) String() string { return proto.CompactTextString(m) }
func (*XtcPolicyBag_KEYS) ProtoMessage()    {}
func (*XtcPolicyBag_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_41cb2097934c6119, []int{0}
}

func (m *XtcPolicyBag_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_XtcPolicyBag_KEYS.Unmarshal(m, b)
}
func (m *XtcPolicyBag_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_XtcPolicyBag_KEYS.Marshal(b, m, deterministic)
}
func (m *XtcPolicyBag_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_XtcPolicyBag_KEYS.Merge(m, src)
}
func (m *XtcPolicyBag_KEYS) XXX_Size() int {
	return xxx_messageInfo_XtcPolicyBag_KEYS.Size(m)
}
func (m *XtcPolicyBag_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_XtcPolicyBag_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_XtcPolicyBag_KEYS proto.InternalMessageInfo

func (m *XtcPolicyBag_KEYS) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type XtcIpAddrType struct {
	AfName               string   `protobuf:"bytes,1,opt,name=af_name,json=afName,proto3" json:"af_name,omitempty"`
	Ipv4                 string   `protobuf:"bytes,2,opt,name=ipv4,proto3" json:"ipv4,omitempty"`
	Ipv6                 string   `protobuf:"bytes,3,opt,name=ipv6,proto3" json:"ipv6,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *XtcIpAddrType) Reset()         { *m = XtcIpAddrType{} }
func (m *XtcIpAddrType) String() string { return proto.CompactTextString(m) }
func (*XtcIpAddrType) ProtoMessage()    {}
func (*XtcIpAddrType) Descriptor() ([]byte, []int) {
	return fileDescriptor_41cb2097934c6119, []int{1}
}

func (m *XtcIpAddrType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_XtcIpAddrType.Unmarshal(m, b)
}
func (m *XtcIpAddrType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_XtcIpAddrType.Marshal(b, m, deterministic)
}
func (m *XtcIpAddrType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_XtcIpAddrType.Merge(m, src)
}
func (m *XtcIpAddrType) XXX_Size() int {
	return xxx_messageInfo_XtcIpAddrType.Size(m)
}
func (m *XtcIpAddrType) XXX_DiscardUnknown() {
	xxx_messageInfo_XtcIpAddrType.DiscardUnknown(m)
}

var xxx_messageInfo_XtcIpAddrType proto.InternalMessageInfo

func (m *XtcIpAddrType) GetAfName() string {
	if m != nil {
		return m.AfName
	}
	return ""
}

func (m *XtcIpAddrType) GetIpv4() string {
	if m != nil {
		return m.Ipv4
	}
	return ""
}

func (m *XtcIpAddrType) GetIpv6() string {
	if m != nil {
		return m.Ipv6
	}
	return ""
}

type XtcPrefixSidType struct {
	SidType              string   `protobuf:"bytes,1,opt,name=sid_type,json=sidType,proto3" json:"sid_type,omitempty"`
	Label                uint32   `protobuf:"varint,2,opt,name=label,proto3" json:"label,omitempty"`
	Ipv6                 string   `protobuf:"bytes,3,opt,name=ipv6,proto3" json:"ipv6,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *XtcPrefixSidType) Reset()         { *m = XtcPrefixSidType{} }
func (m *XtcPrefixSidType) String() string { return proto.CompactTextString(m) }
func (*XtcPrefixSidType) ProtoMessage()    {}
func (*XtcPrefixSidType) Descriptor() ([]byte, []int) {
	return fileDescriptor_41cb2097934c6119, []int{2}
}

func (m *XtcPrefixSidType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_XtcPrefixSidType.Unmarshal(m, b)
}
func (m *XtcPrefixSidType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_XtcPrefixSidType.Marshal(b, m, deterministic)
}
func (m *XtcPrefixSidType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_XtcPrefixSidType.Merge(m, src)
}
func (m *XtcPrefixSidType) XXX_Size() int {
	return xxx_messageInfo_XtcPrefixSidType.Size(m)
}
func (m *XtcPrefixSidType) XXX_DiscardUnknown() {
	xxx_messageInfo_XtcPrefixSidType.DiscardUnknown(m)
}

var xxx_messageInfo_XtcPrefixSidType proto.InternalMessageInfo

func (m *XtcPrefixSidType) GetSidType() string {
	if m != nil {
		return m.SidType
	}
	return ""
}

func (m *XtcPrefixSidType) GetLabel() uint32 {
	if m != nil {
		return m.Label
	}
	return 0
}

func (m *XtcPrefixSidType) GetIpv6() string {
	if m != nil {
		return m.Ipv6
	}
	return ""
}

type XtcPolicyBsidBag struct {
	Value                *XtcPrefixSidType `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	BsidMode             string            `protobuf:"bytes,2,opt,name=bsid_mode,json=bsidMode,proto3" json:"bsid_mode,omitempty"`
	Error                string            `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
	State                string            `protobuf:"bytes,4,opt,name=state,proto3" json:"state,omitempty"`
	ExplicitBased        bool              `protobuf:"varint,5,opt,name=explicit_based,json=explicitBased,proto3" json:"explicit_based,omitempty"`
	PolicySelected       bool              `protobuf:"varint,6,opt,name=policy_selected,json=policySelected,proto3" json:"policy_selected,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *XtcPolicyBsidBag) Reset()         { *m = XtcPolicyBsidBag{} }
func (m *XtcPolicyBsidBag) String() string { return proto.CompactTextString(m) }
func (*XtcPolicyBsidBag) ProtoMessage()    {}
func (*XtcPolicyBsidBag) Descriptor() ([]byte, []int) {
	return fileDescriptor_41cb2097934c6119, []int{3}
}

func (m *XtcPolicyBsidBag) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_XtcPolicyBsidBag.Unmarshal(m, b)
}
func (m *XtcPolicyBsidBag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_XtcPolicyBsidBag.Marshal(b, m, deterministic)
}
func (m *XtcPolicyBsidBag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_XtcPolicyBsidBag.Merge(m, src)
}
func (m *XtcPolicyBsidBag) XXX_Size() int {
	return xxx_messageInfo_XtcPolicyBsidBag.Size(m)
}
func (m *XtcPolicyBsidBag) XXX_DiscardUnknown() {
	xxx_messageInfo_XtcPolicyBsidBag.DiscardUnknown(m)
}

var xxx_messageInfo_XtcPolicyBsidBag proto.InternalMessageInfo

func (m *XtcPolicyBsidBag) GetValue() *XtcPrefixSidType {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *XtcPolicyBsidBag) GetBsidMode() string {
	if m != nil {
		return m.BsidMode
	}
	return ""
}

func (m *XtcPolicyBsidBag) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *XtcPolicyBsidBag) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *XtcPolicyBsidBag) GetExplicitBased() bool {
	if m != nil {
		return m.ExplicitBased
	}
	return false
}

func (m *XtcPolicyBsidBag) GetPolicySelected() bool {
	if m != nil {
		return m.PolicySelected
	}
	return false
}

type XtcSrHopType struct {
	SidType              string            `protobuf:"bytes,1,opt,name=sid_type,json=sidType,proto3" json:"sid_type,omitempty"`
	Sid                  *XtcPrefixSidType `protobuf:"bytes,2,opt,name=sid,proto3" json:"sid,omitempty"`
	LocalAddress         *XtcIpAddrType    `protobuf:"bytes,3,opt,name=local_address,json=localAddress,proto3" json:"local_address,omitempty"`
	RemoteAddress        *XtcIpAddrType    `protobuf:"bytes,4,opt,name=remote_address,json=remoteAddress,proto3" json:"remote_address,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *XtcSrHopType) Reset()         { *m = XtcSrHopType{} }
func (m *XtcSrHopType) String() string { return proto.CompactTextString(m) }
func (*XtcSrHopType) ProtoMessage()    {}
func (*XtcSrHopType) Descriptor() ([]byte, []int) {
	return fileDescriptor_41cb2097934c6119, []int{4}
}

func (m *XtcSrHopType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_XtcSrHopType.Unmarshal(m, b)
}
func (m *XtcSrHopType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_XtcSrHopType.Marshal(b, m, deterministic)
}
func (m *XtcSrHopType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_XtcSrHopType.Merge(m, src)
}
func (m *XtcSrHopType) XXX_Size() int {
	return xxx_messageInfo_XtcSrHopType.Size(m)
}
func (m *XtcSrHopType) XXX_DiscardUnknown() {
	xxx_messageInfo_XtcSrHopType.DiscardUnknown(m)
}

var xxx_messageInfo_XtcSrHopType proto.InternalMessageInfo

func (m *XtcSrHopType) GetSidType() string {
	if m != nil {
		return m.SidType
	}
	return ""
}

func (m *XtcSrHopType) GetSid() *XtcPrefixSidType {
	if m != nil {
		return m.Sid
	}
	return nil
}

func (m *XtcSrHopType) GetLocalAddress() *XtcIpAddrType {
	if m != nil {
		return m.LocalAddress
	}
	return nil
}

func (m *XtcSrHopType) GetRemoteAddress() *XtcIpAddrType {
	if m != nil {
		return m.RemoteAddress
	}
	return nil
}

type XtcAffinityColor struct {
	Color                string   `protobuf:"bytes,1,opt,name=color,proto3" json:"color,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *XtcAffinityColor) Reset()         { *m = XtcAffinityColor{} }
func (m *XtcAffinityColor) String() string { return proto.CompactTextString(m) }
func (*XtcAffinityColor) ProtoMessage()    {}
func (*XtcAffinityColor) Descriptor() ([]byte, []int) {
	return fileDescriptor_41cb2097934c6119, []int{5}
}

func (m *XtcAffinityColor) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_XtcAffinityColor.Unmarshal(m, b)
}
func (m *XtcAffinityColor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_XtcAffinityColor.Marshal(b, m, deterministic)
}
func (m *XtcAffinityColor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_XtcAffinityColor.Merge(m, src)
}
func (m *XtcAffinityColor) XXX_Size() int {
	return xxx_messageInfo_XtcAffinityColor.Size(m)
}
func (m *XtcAffinityColor) XXX_DiscardUnknown() {
	xxx_messageInfo_XtcAffinityColor.DiscardUnknown(m)
}

var xxx_messageInfo_XtcAffinityColor proto.InternalMessageInfo

func (m *XtcAffinityColor) GetColor() string {
	if m != nil {
		return m.Color
	}
	return ""
}

type XtcAffinityConstraint struct {
	Type                 uint32              `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	Value                uint32              `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
	Color                []*XtcAffinityColor `protobuf:"bytes,3,rep,name=color,proto3" json:"color,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *XtcAffinityConstraint) Reset()         { *m = XtcAffinityConstraint{} }
func (m *XtcAffinityConstraint) String() string { return proto.CompactTextString(m) }
func (*XtcAffinityConstraint) ProtoMessage()    {}
func (*XtcAffinityConstraint) Descriptor() ([]byte, []int) {
	return fileDescriptor_41cb2097934c6119, []int{6}
}

func (m *XtcAffinityConstraint) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_XtcAffinityConstraint.Unmarshal(m, b)
}
func (m *XtcAffinityConstraint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_XtcAffinityConstraint.Marshal(b, m, deterministic)
}
func (m *XtcAffinityConstraint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_XtcAffinityConstraint.Merge(m, src)
}
func (m *XtcAffinityConstraint) XXX_Size() int {
	return xxx_messageInfo_XtcAffinityConstraint.Size(m)
}
func (m *XtcAffinityConstraint) XXX_DiscardUnknown() {
	xxx_messageInfo_XtcAffinityConstraint.DiscardUnknown(m)
}

var xxx_messageInfo_XtcAffinityConstraint proto.InternalMessageInfo

func (m *XtcAffinityConstraint) GetType() uint32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *XtcAffinityConstraint) GetValue() uint32 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *XtcAffinityConstraint) GetColor() []*XtcAffinityColor {
	if m != nil {
		return m.Color
	}
	return nil
}

type XtcPathMetricsBag struct {
	MarginRelative        uint32   `protobuf:"varint,1,opt,name=margin_relative,json=marginRelative,proto3" json:"margin_relative,omitempty"`
	MarginAbsolute        uint32   `protobuf:"varint,2,opt,name=margin_absolute,json=marginAbsolute,proto3" json:"margin_absolute,omitempty"`
	MaximumSegments       uint32   `protobuf:"varint,3,opt,name=maximum_segments,json=maximumSegments,proto3" json:"maximum_segments,omitempty"`
	AccumulativeTeMetric  uint32   `protobuf:"varint,4,opt,name=accumulative_te_metric,json=accumulativeTeMetric,proto3" json:"accumulative_te_metric,omitempty"`
	AccumulativeIgpMetric uint32   `protobuf:"varint,5,opt,name=accumulative_igp_metric,json=accumulativeIgpMetric,proto3" json:"accumulative_igp_metric,omitempty"`
	AccumulativeDelay     uint32   `protobuf:"varint,6,opt,name=accumulative_delay,json=accumulativeDelay,proto3" json:"accumulative_delay,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *XtcPathMetricsBag) Reset()         { *m = XtcPathMetricsBag{} }
func (m *XtcPathMetricsBag) String() string { return proto.CompactTextString(m) }
func (*XtcPathMetricsBag) ProtoMessage()    {}
func (*XtcPathMetricsBag) Descriptor() ([]byte, []int) {
	return fileDescriptor_41cb2097934c6119, []int{7}
}

func (m *XtcPathMetricsBag) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_XtcPathMetricsBag.Unmarshal(m, b)
}
func (m *XtcPathMetricsBag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_XtcPathMetricsBag.Marshal(b, m, deterministic)
}
func (m *XtcPathMetricsBag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_XtcPathMetricsBag.Merge(m, src)
}
func (m *XtcPathMetricsBag) XXX_Size() int {
	return xxx_messageInfo_XtcPathMetricsBag.Size(m)
}
func (m *XtcPathMetricsBag) XXX_DiscardUnknown() {
	xxx_messageInfo_XtcPathMetricsBag.DiscardUnknown(m)
}

var xxx_messageInfo_XtcPathMetricsBag proto.InternalMessageInfo

func (m *XtcPathMetricsBag) GetMarginRelative() uint32 {
	if m != nil {
		return m.MarginRelative
	}
	return 0
}

func (m *XtcPathMetricsBag) GetMarginAbsolute() uint32 {
	if m != nil {
		return m.MarginAbsolute
	}
	return 0
}

func (m *XtcPathMetricsBag) GetMaximumSegments() uint32 {
	if m != nil {
		return m.MaximumSegments
	}
	return 0
}

func (m *XtcPathMetricsBag) GetAccumulativeTeMetric() uint32 {
	if m != nil {
		return m.AccumulativeTeMetric
	}
	return 0
}

func (m *XtcPathMetricsBag) GetAccumulativeIgpMetric() uint32 {
	if m != nil {
		return m.AccumulativeIgpMetric
	}
	return 0
}

func (m *XtcPathMetricsBag) GetAccumulativeDelay() uint32 {
	if m != nil {
		return m.AccumulativeDelay
	}
	return 0
}

type XtcPathConstraintsBag struct {
	AffinityConstraint   []*XtcAffinityConstraint `protobuf:"bytes,1,rep,name=affinity_constraint,json=affinityConstraint,proto3" json:"affinity_constraint,omitempty"`
	PathMetrics          *XtcPathMetricsBag       `protobuf:"bytes,2,opt,name=path_metrics,json=pathMetrics,proto3" json:"path_metrics,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *XtcPathConstraintsBag) Reset()         { *m = XtcPathConstraintsBag{} }
func (m *XtcPathConstraintsBag) String() string { return proto.CompactTextString(m) }
func (*XtcPathConstraintsBag) ProtoMessage()    {}
func (*XtcPathConstraintsBag) Descriptor() ([]byte, []int) {
	return fileDescriptor_41cb2097934c6119, []int{8}
}

func (m *XtcPathConstraintsBag) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_XtcPathConstraintsBag.Unmarshal(m, b)
}
func (m *XtcPathConstraintsBag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_XtcPathConstraintsBag.Marshal(b, m, deterministic)
}
func (m *XtcPathConstraintsBag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_XtcPathConstraintsBag.Merge(m, src)
}
func (m *XtcPathConstraintsBag) XXX_Size() int {
	return xxx_messageInfo_XtcPathConstraintsBag.Size(m)
}
func (m *XtcPathConstraintsBag) XXX_DiscardUnknown() {
	xxx_messageInfo_XtcPathConstraintsBag.DiscardUnknown(m)
}

var xxx_messageInfo_XtcPathConstraintsBag proto.InternalMessageInfo

func (m *XtcPathConstraintsBag) GetAffinityConstraint() []*XtcAffinityConstraint {
	if m != nil {
		return m.AffinityConstraint
	}
	return nil
}

func (m *XtcPathConstraintsBag) GetPathMetrics() *XtcPathMetricsBag {
	if m != nil {
		return m.PathMetrics
	}
	return nil
}

type XtcPolicyPathBag struct {
	Index                uint32                 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	Type                 string                 `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Name                 string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Active               bool                   `protobuf:"varint,4,opt,name=active,proto3" json:"active,omitempty"`
	Weight               uint32                 `protobuf:"varint,5,opt,name=weight,proto3" json:"weight,omitempty"`
	MetricType           uint32                 `protobuf:"varint,6,opt,name=metric_type,json=metricType,proto3" json:"metric_type,omitempty"`
	MetricValue          uint32                 `protobuf:"varint,7,opt,name=metric_value,json=metricValue,proto3" json:"metric_value,omitempty"`
	Hops                 []*XtcSrHopType        `protobuf:"bytes,8,rep,name=hops,proto3" json:"hops,omitempty"`
	IsValid              bool                   `protobuf:"varint,9,opt,name=is_valid,json=isValid,proto3" json:"is_valid,omitempty"`
	PceBasedPath         bool                   `protobuf:"varint,10,opt,name=pce_based_path,json=pceBasedPath,proto3" json:"pce_based_path,omitempty"`
	PceAddress           string                 `protobuf:"bytes,11,opt,name=pce_address,json=pceAddress,proto3" json:"pce_address,omitempty"`
	Error                string                 `protobuf:"bytes,12,opt,name=error,proto3" json:"error,omitempty"`
	SrPathConstraints    *XtcPathConstraintsBag `protobuf:"bytes,13,opt,name=sr_path_constraints,json=srPathConstraints,proto3" json:"sr_path_constraints,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *XtcPolicyPathBag) Reset()         { *m = XtcPolicyPathBag{} }
func (m *XtcPolicyPathBag) String() string { return proto.CompactTextString(m) }
func (*XtcPolicyPathBag) ProtoMessage()    {}
func (*XtcPolicyPathBag) Descriptor() ([]byte, []int) {
	return fileDescriptor_41cb2097934c6119, []int{9}
}

func (m *XtcPolicyPathBag) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_XtcPolicyPathBag.Unmarshal(m, b)
}
func (m *XtcPolicyPathBag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_XtcPolicyPathBag.Marshal(b, m, deterministic)
}
func (m *XtcPolicyPathBag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_XtcPolicyPathBag.Merge(m, src)
}
func (m *XtcPolicyPathBag) XXX_Size() int {
	return xxx_messageInfo_XtcPolicyPathBag.Size(m)
}
func (m *XtcPolicyPathBag) XXX_DiscardUnknown() {
	xxx_messageInfo_XtcPolicyPathBag.DiscardUnknown(m)
}

var xxx_messageInfo_XtcPolicyPathBag proto.InternalMessageInfo

func (m *XtcPolicyPathBag) GetIndex() uint32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *XtcPolicyPathBag) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *XtcPolicyPathBag) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *XtcPolicyPathBag) GetActive() bool {
	if m != nil {
		return m.Active
	}
	return false
}

func (m *XtcPolicyPathBag) GetWeight() uint32 {
	if m != nil {
		return m.Weight
	}
	return 0
}

func (m *XtcPolicyPathBag) GetMetricType() uint32 {
	if m != nil {
		return m.MetricType
	}
	return 0
}

func (m *XtcPolicyPathBag) GetMetricValue() uint32 {
	if m != nil {
		return m.MetricValue
	}
	return 0
}

func (m *XtcPolicyPathBag) GetHops() []*XtcSrHopType {
	if m != nil {
		return m.Hops
	}
	return nil
}

func (m *XtcPolicyPathBag) GetIsValid() bool {
	if m != nil {
		return m.IsValid
	}
	return false
}

func (m *XtcPolicyPathBag) GetPceBasedPath() bool {
	if m != nil {
		return m.PceBasedPath
	}
	return false
}

func (m *XtcPolicyPathBag) GetPceAddress() string {
	if m != nil {
		return m.PceAddress
	}
	return ""
}

func (m *XtcPolicyPathBag) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *XtcPolicyPathBag) GetSrPathConstraints() *XtcPathConstraintsBag {
	if m != nil {
		return m.SrPathConstraints
	}
	return nil
}

type XtcPolicyAutoBag struct {
	CreatorName          string   `protobuf:"bytes,1,opt,name=creator_name,json=creatorName,proto3" json:"creator_name,omitempty"`
	Distinguisher        uint32   `protobuf:"varint,2,opt,name=distinguisher,proto3" json:"distinguisher,omitempty"`
	Preference           uint32   `protobuf:"varint,3,opt,name=preference,proto3" json:"preference,omitempty"`
	Ipv6CapsEnabled      bool     `protobuf:"varint,4,opt,name=ipv6_caps_enabled,json=ipv6CapsEnabled,proto3" json:"ipv6_caps_enabled,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *XtcPolicyAutoBag) Reset()         { *m = XtcPolicyAutoBag{} }
func (m *XtcPolicyAutoBag) String() string { return proto.CompactTextString(m) }
func (*XtcPolicyAutoBag) ProtoMessage()    {}
func (*XtcPolicyAutoBag) Descriptor() ([]byte, []int) {
	return fileDescriptor_41cb2097934c6119, []int{10}
}

func (m *XtcPolicyAutoBag) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_XtcPolicyAutoBag.Unmarshal(m, b)
}
func (m *XtcPolicyAutoBag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_XtcPolicyAutoBag.Marshal(b, m, deterministic)
}
func (m *XtcPolicyAutoBag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_XtcPolicyAutoBag.Merge(m, src)
}
func (m *XtcPolicyAutoBag) XXX_Size() int {
	return xxx_messageInfo_XtcPolicyAutoBag.Size(m)
}
func (m *XtcPolicyAutoBag) XXX_DiscardUnknown() {
	xxx_messageInfo_XtcPolicyAutoBag.DiscardUnknown(m)
}

var xxx_messageInfo_XtcPolicyAutoBag proto.InternalMessageInfo

func (m *XtcPolicyAutoBag) GetCreatorName() string {
	if m != nil {
		return m.CreatorName
	}
	return ""
}

func (m *XtcPolicyAutoBag) GetDistinguisher() uint32 {
	if m != nil {
		return m.Distinguisher
	}
	return 0
}

func (m *XtcPolicyAutoBag) GetPreference() uint32 {
	if m != nil {
		return m.Preference
	}
	return 0
}

func (m *XtcPolicyAutoBag) GetIpv6CapsEnabled() bool {
	if m != nil {
		return m.Ipv6CapsEnabled
	}
	return false
}

type XtcPolicyBag struct {
	PolicyName            string              `protobuf:"bytes,50,opt,name=policy_name,json=policyName,proto3" json:"policy_name,omitempty"`
	DestinationAddress    *XtcIpAddrType      `protobuf:"bytes,51,opt,name=destination_address,json=destinationAddress,proto3" json:"destination_address,omitempty"`
	AdministrativeUp      uint32              `protobuf:"varint,52,opt,name=administrative_up,json=administrativeUp,proto3" json:"administrative_up,omitempty"`
	OperationalUp         uint32              `protobuf:"varint,53,opt,name=operational_up,json=operationalUp,proto3" json:"operational_up,omitempty"`
	BindingSid            *XtcPolicyBsidBag   `protobuf:"bytes,54,opt,name=binding_sid,json=bindingSid,proto3" json:"binding_sid,omitempty"`
	Color                 uint32              `protobuf:"varint,55,opt,name=color,proto3" json:"color,omitempty"`
	Paths                 []*XtcPolicyPathBag `protobuf:"bytes,56,rep,name=paths,proto3" json:"paths,omitempty"`
	IsAutoPolicy          bool                `protobuf:"varint,57,opt,name=is_auto_policy,json=isAutoPolicy,proto3" json:"is_auto_policy,omitempty"`
	AutoPolicyInfo        *XtcPolicyAutoBag   `protobuf:"bytes,58,opt,name=auto_policy_info,json=autoPolicyInfo,proto3" json:"auto_policy_info,omitempty"`
	TransitionCount       uint32              `protobuf:"varint,59,opt,name=transition_count,json=transitionCount,proto3" json:"transition_count,omitempty"`
	ForwardClass          uint32              `protobuf:"varint,60,opt,name=forward_class,json=forwardClass,proto3" json:"forward_class,omitempty"`
	UpTime                uint64              `protobuf:"varint,61,opt,name=up_time,json=upTime,proto3" json:"up_time,omitempty"`
	UpAge                 uint64              `protobuf:"varint,62,opt,name=up_age,json=upAge,proto3" json:"up_age,omitempty"`
	DownTime              uint64              `protobuf:"varint,63,opt,name=down_time,json=downTime,proto3" json:"down_time,omitempty"`
	DownAge               uint64              `protobuf:"varint,64,opt,name=down_age,json=downAge,proto3" json:"down_age,omitempty"`
	LspId                 uint32              `protobuf:"varint,65,opt,name=lsp_id,json=lspId,proto3" json:"lsp_id,omitempty"`
	InterfaceHandle       uint32              `protobuf:"varint,66,opt,name=interface_handle,json=interfaceHandle,proto3" json:"interface_handle,omitempty"`
	PolicyGroupIdentifier uint32              `protobuf:"varint,67,opt,name=policy_group_identifier,json=policyGroupIdentifier,proto3" json:"policy_group_identifier,omitempty"`
	LocalLabelIdentifier  uint32              `protobuf:"varint,68,opt,name=local_label_identifier,json=localLabelIdentifier,proto3" json:"local_label_identifier,omitempty"`
	LocalLabel            uint32              `protobuf:"varint,69,opt,name=local_label,json=localLabel,proto3" json:"local_label,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}            `json:"-"`
	XXX_unrecognized      []byte              `json:"-"`
	XXX_sizecache         int32               `json:"-"`
}

func (m *XtcPolicyBag) Reset()         { *m = XtcPolicyBag{} }
func (m *XtcPolicyBag) String() string { return proto.CompactTextString(m) }
func (*XtcPolicyBag) ProtoMessage()    {}
func (*XtcPolicyBag) Descriptor() ([]byte, []int) {
	return fileDescriptor_41cb2097934c6119, []int{11}
}

func (m *XtcPolicyBag) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_XtcPolicyBag.Unmarshal(m, b)
}
func (m *XtcPolicyBag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_XtcPolicyBag.Marshal(b, m, deterministic)
}
func (m *XtcPolicyBag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_XtcPolicyBag.Merge(m, src)
}
func (m *XtcPolicyBag) XXX_Size() int {
	return xxx_messageInfo_XtcPolicyBag.Size(m)
}
func (m *XtcPolicyBag) XXX_DiscardUnknown() {
	xxx_messageInfo_XtcPolicyBag.DiscardUnknown(m)
}

var xxx_messageInfo_XtcPolicyBag proto.InternalMessageInfo

func (m *XtcPolicyBag) GetPolicyName() string {
	if m != nil {
		return m.PolicyName
	}
	return ""
}

func (m *XtcPolicyBag) GetDestinationAddress() *XtcIpAddrType {
	if m != nil {
		return m.DestinationAddress
	}
	return nil
}

func (m *XtcPolicyBag) GetAdministrativeUp() uint32 {
	if m != nil {
		return m.AdministrativeUp
	}
	return 0
}

func (m *XtcPolicyBag) GetOperationalUp() uint32 {
	if m != nil {
		return m.OperationalUp
	}
	return 0
}

func (m *XtcPolicyBag) GetBindingSid() *XtcPolicyBsidBag {
	if m != nil {
		return m.BindingSid
	}
	return nil
}

func (m *XtcPolicyBag) GetColor() uint32 {
	if m != nil {
		return m.Color
	}
	return 0
}

func (m *XtcPolicyBag) GetPaths() []*XtcPolicyPathBag {
	if m != nil {
		return m.Paths
	}
	return nil
}

func (m *XtcPolicyBag) GetIsAutoPolicy() bool {
	if m != nil {
		return m.IsAutoPolicy
	}
	return false
}

func (m *XtcPolicyBag) GetAutoPolicyInfo() *XtcPolicyAutoBag {
	if m != nil {
		return m.AutoPolicyInfo
	}
	return nil
}

func (m *XtcPolicyBag) GetTransitionCount() uint32 {
	if m != nil {
		return m.TransitionCount
	}
	return 0
}

func (m *XtcPolicyBag) GetForwardClass() uint32 {
	if m != nil {
		return m.ForwardClass
	}
	return 0
}

func (m *XtcPolicyBag) GetUpTime() uint64 {
	if m != nil {
		return m.UpTime
	}
	return 0
}

func (m *XtcPolicyBag) GetUpAge() uint64 {
	if m != nil {
		return m.UpAge
	}
	return 0
}

func (m *XtcPolicyBag) GetDownTime() uint64 {
	if m != nil {
		return m.DownTime
	}
	return 0
}

func (m *XtcPolicyBag) GetDownAge() uint64 {
	if m != nil {
		return m.DownAge
	}
	return 0
}

func (m *XtcPolicyBag) GetLspId() uint32 {
	if m != nil {
		return m.LspId
	}
	return 0
}

func (m *XtcPolicyBag) GetInterfaceHandle() uint32 {
	if m != nil {
		return m.InterfaceHandle
	}
	return 0
}

func (m *XtcPolicyBag) GetPolicyGroupIdentifier() uint32 {
	if m != nil {
		return m.PolicyGroupIdentifier
	}
	return 0
}

func (m *XtcPolicyBag) GetLocalLabelIdentifier() uint32 {
	if m != nil {
		return m.LocalLabelIdentifier
	}
	return 0
}

func (m *XtcPolicyBag) GetLocalLabel() uint32 {
	if m != nil {
		return m.LocalLabel
	}
	return 0
}

func init() {
	proto.RegisterType((*XtcPolicyBag_KEYS)(nil), "cisco_ios_xr_infra_xtc_agent_oper.xtc.policies.policy.xtc_policy_bag_KEYS")
	proto.RegisterType((*XtcIpAddrType)(nil), "cisco_ios_xr_infra_xtc_agent_oper.xtc.policies.policy.xtc_ip_addr_type")
	proto.RegisterType((*XtcPrefixSidType)(nil), "cisco_ios_xr_infra_xtc_agent_oper.xtc.policies.policy.xtc_prefix_sid_type")
	proto.RegisterType((*XtcPolicyBsidBag)(nil), "cisco_ios_xr_infra_xtc_agent_oper.xtc.policies.policy.xtc_policy_bsid_bag")
	proto.RegisterType((*XtcSrHopType)(nil), "cisco_ios_xr_infra_xtc_agent_oper.xtc.policies.policy.xtc_sr_hop_type")
	proto.RegisterType((*XtcAffinityColor)(nil), "cisco_ios_xr_infra_xtc_agent_oper.xtc.policies.policy.xtc_affinity_color")
	proto.RegisterType((*XtcAffinityConstraint)(nil), "cisco_ios_xr_infra_xtc_agent_oper.xtc.policies.policy.xtc_affinity_constraint")
	proto.RegisterType((*XtcPathMetricsBag)(nil), "cisco_ios_xr_infra_xtc_agent_oper.xtc.policies.policy.xtc_path_metrics_bag")
	proto.RegisterType((*XtcPathConstraintsBag)(nil), "cisco_ios_xr_infra_xtc_agent_oper.xtc.policies.policy.xtc_path_constraints_bag")
	proto.RegisterType((*XtcPolicyPathBag)(nil), "cisco_ios_xr_infra_xtc_agent_oper.xtc.policies.policy.xtc_policy_path_bag")
	proto.RegisterType((*XtcPolicyAutoBag)(nil), "cisco_ios_xr_infra_xtc_agent_oper.xtc.policies.policy.xtc_policy_auto_bag")
	proto.RegisterType((*XtcPolicyBag)(nil), "cisco_ios_xr_infra_xtc_agent_oper.xtc.policies.policy.xtc_policy_bag")
}

func init() { proto.RegisterFile("xtc_policy_bag.proto", fileDescriptor_41cb2097934c6119) }

var fileDescriptor_41cb2097934c6119 = []byte{
	// 1288 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x57, 0xdd, 0x6f, 0x14, 0x37,
	0x10, 0x57, 0x2e, 0x77, 0x97, 0x30, 0xf7, 0x91, 0xc4, 0x09, 0xb0, 0xa8, 0x52, 0x09, 0x57, 0x10,
	0x29, 0x55, 0xf3, 0x10, 0x20, 0xfd, 0xfe, 0x08, 0x81, 0xd2, 0x94, 0x42, 0xd1, 0x06, 0x90, 0x8a,
	0x2a, 0x19, 0xdf, 0xae, 0xef, 0xce, 0xea, 0xee, 0xda, 0xb2, 0xbd, 0x70, 0x79, 0xe2, 0xb9, 0xea,
	0x4b, 0xff, 0x80, 0x3e, 0xf6, 0xa9, 0x4f, 0xfd, 0xb3, 0xfa, 0x67, 0x54, 0x1e, 0x7b, 0xef, 0xf6,
	0x28, 0x52, 0xa5, 0x26, 0x6f, 0xeb, 0xdf, 0x7c, 0x7a, 0x66, 0x3c, 0x33, 0x0b, 0x5b, 0x53, 0x9b,
	0x50, 0x25, 0x33, 0x91, 0x9c, 0xd0, 0x21, 0x1b, 0xef, 0x2a, 0x2d, 0xad, 0x24, 0xb7, 0x13, 0x61,
	0x12, 0x49, 0x85, 0x34, 0x74, 0xaa, 0xa9, 0x28, 0x46, 0x9a, 0x51, 0xc7, 0xc8, 0xc6, 0xbc, 0xb0,
	0x54, 0x2a, 0xae, 0x77, 0xa7, 0x36, 0xd9, 0x45, 0x39, 0xc1, 0x8d, 0xff, 0x38, 0x19, 0x5c, 0x83,
	0xcd, 0x45, 0x75, 0xf4, 0xc1, 0xbd, 0x1f, 0x8f, 0x49, 0x1f, 0x1a, 0x22, 0x8d, 0x96, 0xb6, 0x97,
	0x76, 0x7a, 0x71, 0x43, 0xa4, 0x83, 0x63, 0x58, 0x77, 0x6c, 0x42, 0x51, 0x96, 0xa6, 0x9a, 0xda,
	0x13, 0xc5, 0xc9, 0x45, 0x58, 0x61, 0x23, 0x5a, 0xb0, 0x9c, 0x23, 0xe3, 0xb9, 0xb8, 0xcd, 0x46,
	0x8f, 0x58, 0xce, 0x09, 0x81, 0xa6, 0x50, 0x2f, 0x6f, 0x45, 0x0d, 0x44, 0xf1, 0x3b, 0x60, 0xfb,
	0xd1, 0xf2, 0x0c, 0xdb, 0x1f, 0x3c, 0x0f, 0xb6, 0x35, 0x1f, 0x89, 0x29, 0x35, 0x22, 0xf5, 0x7a,
	0x2f, 0xc1, 0x6a, 0xf5, 0x1d, 0x14, 0xaf, 0x18, 0x91, 0x3e, 0x71, 0xa4, 0x2d, 0x68, 0x65, 0x6c,
	0xc8, 0x33, 0x54, 0xdd, 0x8b, 0xfd, 0xe1, 0xad, 0xba, 0x7f, 0x6b, 0x2c, 0x5e, 0xcc, 0x69, 0x1c,
	0xb2, 0x31, 0x79, 0x01, 0xad, 0x97, 0x2c, 0x2b, 0xbd, 0xe6, 0xce, 0xde, 0x77, 0xbb, 0xff, 0x2b,
	0x6c, 0xbb, 0x6f, 0xf1, 0x3b, 0xf6, 0x8a, 0xc9, 0x3b, 0x70, 0x0e, 0xad, 0xe5, 0x32, 0xe5, 0x21,
	0x04, 0xab, 0x0e, 0x78, 0x28, 0x53, 0xbc, 0x00, 0xd7, 0x5a, 0xea, 0xe0, 0xab, 0x3f, 0x38, 0xd4,
	0x58, 0x66, 0x79, 0xd4, 0xf4, 0x28, 0x1e, 0xc8, 0x35, 0xe8, 0xf3, 0xa9, 0x72, 0x76, 0x2d, 0x1d,
	0x32, 0xc3, 0xd3, 0xa8, 0xb5, 0xbd, 0xb4, 0xb3, 0x1a, 0xf7, 0x2a, 0xf4, 0x8e, 0x03, 0xc9, 0x75,
	0x58, 0x0b, 0x97, 0x34, 0x3c, 0xe3, 0x89, 0xe5, 0x69, 0xd4, 0x46, 0xbe, 0xbe, 0x87, 0x8f, 0x03,
	0x3a, 0xf8, 0xbb, 0x01, 0x6b, 0xce, 0x6f, 0xa3, 0xe9, 0x44, 0xaa, 0xff, 0x8c, 0xf5, 0x4f, 0xb0,
	0x6c, 0x44, 0x8a, 0x37, 0x38, 0xdb, 0x38, 0x39, 0xb5, 0x24, 0x83, 0x5e, 0x26, 0x13, 0x96, 0x61,
	0x3d, 0x71, 0x63, 0x30, 0x20, 0x9d, 0xbd, 0xfb, 0xa7, 0xb0, 0x53, 0x2f, 0xce, 0xb8, 0x8b, 0xda,
	0x0f, 0xbc, 0x72, 0x52, 0x40, 0x5f, 0xf3, 0x5c, 0x5a, 0x3e, 0x33, 0xd7, 0x3c, 0x5b, 0x73, 0x3d,
	0xaf, 0x3e, 0xd8, 0x1b, 0xdc, 0x00, 0x82, 0x5a, 0x46, 0x23, 0x51, 0x08, 0x7b, 0x42, 0x13, 0x99,
	0xf9, 0x34, 0xe3, 0x47, 0x88, 0xb4, 0x3f, 0x0c, 0xfe, 0x58, 0x82, 0x8b, 0x6f, 0x30, 0x17, 0xc6,
	0x6a, 0x26, 0x0a, 0xeb, 0x2a, 0x7b, 0x96, 0x9a, 0x5e, 0x8c, 0xdf, 0x4e, 0x8b, 0xaf, 0xe0, 0xf0,
	0x06, 0x7c, 0xd5, 0xd1, 0x4a, 0xf7, 0xf2, 0xf6, 0xf2, 0x4e, 0x67, 0xef, 0xe8, 0x14, 0x17, 0x5b,
	0xf4, 0xba, 0x72, 0xf3, 0xaf, 0x46, 0x68, 0x3c, 0xcc, 0x4e, 0x68, 0xce, 0xad, 0x16, 0x89, 0xc1,
	0x17, 0x75, 0x1d, 0xd6, 0x72, 0xa6, 0xc7, 0xa2, 0xa0, 0x9a, 0x67, 0xcc, 0x8a, 0x97, 0x95, 0xbb,
	0x7d, 0x0f, 0xc7, 0x01, 0xad, 0x31, 0xb2, 0xa1, 0x91, 0x59, 0x69, 0xab, 0x2b, 0x04, 0xc6, 0x83,
	0x80, 0x92, 0xf7, 0x61, 0x3d, 0x67, 0x53, 0x91, 0x97, 0x39, 0x35, 0x7c, 0x9c, 0xf3, 0xc2, 0xfa,
	0xf2, 0xe8, 0xc5, 0x6b, 0x01, 0x3f, 0x0e, 0x30, 0xb9, 0x05, 0x17, 0x58, 0x92, 0x94, 0x79, 0xe9,
	0x6d, 0x50, 0xcb, 0x83, 0x6f, 0x98, 0xe0, 0x5e, 0xbc, 0x55, 0xa7, 0x3e, 0xe1, 0x0f, 0x91, 0x46,
	0xf6, 0xe1, 0xe2, 0x82, 0x94, 0x18, 0xab, 0x4a, 0xac, 0x85, 0x62, 0xe7, 0xeb, 0xe4, 0xa3, 0xb1,
	0x0a, 0x72, 0x1f, 0x02, 0x59, 0x90, 0x4b, 0x79, 0xc6, 0x4e, 0xf0, 0xb5, 0xf5, 0xe2, 0x8d, 0x3a,
	0xe5, 0xae, 0x23, 0x0c, 0x7e, 0x6d, 0x40, 0x34, 0x0b, 0xd9, 0x3c, 0xab, 0x3e, 0x6c, 0xaf, 0x61,
	0xf3, 0x2d, 0x19, 0x8f, 0x96, 0x30, 0x7d, 0x8f, 0xce, 0x26, 0x7d, 0x95, 0xd6, 0x98, 0x54, 0xe0,
	0xe1, 0xbc, 0xb6, 0x0a, 0xe8, 0xd6, 0x73, 0x19, 0x1e, 0xfa, 0x83, 0xd3, 0x3c, 0xf4, 0x37, 0x4a,
	0x23, 0xee, 0x38, 0xc4, 0xc7, 0xce, 0x0c, 0x7e, 0x6f, 0x2e, 0x74, 0x64, 0x64, 0x76, 0x81, 0xd8,
	0x82, 0x96, 0x28, 0x52, 0x3e, 0x0d, 0x55, 0xe3, 0x0f, 0xb3, 0xca, 0x0f, 0x33, 0x04, 0x2b, 0x9f,
	0x40, 0x13, 0xa7, 0x4d, 0xe8, 0xf3, 0xee, 0x9b, 0x5c, 0x80, 0x36, 0x4b, 0xb0, 0xe8, 0x9a, 0xd8,
	0xf4, 0xc2, 0xc9, 0xe1, 0xaf, 0xb8, 0x18, 0x4f, 0x6c, 0xc8, 0x68, 0x38, 0x91, 0xcb, 0xd0, 0xf1,
	0x1e, 0xfa, 0x9e, 0xe7, 0x73, 0x07, 0x1e, 0xc2, 0xb6, 0x77, 0x05, 0xba, 0x81, 0xc1, 0xbf, 0xb2,
	0x15, 0xe4, 0x08, 0x42, 0xcf, 0xf0, 0xad, 0x3d, 0x87, 0xe6, 0x44, 0x2a, 0x13, 0xad, 0x62, 0xae,
	0xbe, 0x39, 0x45, 0xc4, 0x6a, 0xad, 0x38, 0x46, 0x9d, 0xae, 0x21, 0x0b, 0xe3, 0x4c, 0x8b, 0x34,
	0x3a, 0x87, 0x37, 0x5a, 0x11, 0xe6, 0x99, 0x3b, 0x92, 0xab, 0xd0, 0x57, 0x09, 0xf7, 0xa3, 0x00,
	0xc3, 0x17, 0x01, 0x32, 0x74, 0x55, 0xc2, 0x71, 0x14, 0x3c, 0x66, 0x76, 0xe2, 0x2e, 0xe8, 0xb8,
	0xaa, 0x3e, 0xd7, 0xc1, 0x58, 0x81, 0x4a, 0xaa, 0xde, 0x34, 0x1f, 0x41, 0xdd, 0xfa, 0x08, 0x7a,
	0x0d, 0x9b, 0x46, 0xff, 0xab, 0x52, 0xa3, 0x1e, 0x16, 0xc5, 0x0f, 0xa7, 0x2d, 0x8a, 0x37, 0x8a,
	0x3f, 0xde, 0x30, 0xda, 0x39, 0x3b, 0xaf, 0x46, 0x33, 0xf8, 0x73, 0x69, 0xa1, 0x3c, 0x58, 0x69,
	0x25, 0x96, 0xc7, 0x15, 0xe8, 0x26, 0x9a, 0x33, 0x2b, 0x75, 0x7d, 0xd5, 0xe8, 0x04, 0x0c, 0xf7,
	0x8d, 0xab, 0xd0, 0x4b, 0x85, 0xb1, 0xa2, 0x18, 0x97, 0xc2, 0x4c, 0xb8, 0x0e, 0x6d, 0x65, 0x11,
	0x24, 0xef, 0x02, 0xb8, 0x49, 0xc4, 0x35, 0x2f, 0x12, 0x1e, 0xfa, 0x49, 0x0d, 0x21, 0x37, 0x60,
	0xc3, 0x6d, 0x0e, 0x34, 0x61, 0xca, 0x50, 0x5e, 0xb0, 0x61, 0xc6, 0xd3, 0x50, 0x54, 0x6b, 0x8e,
	0x70, 0xc8, 0x94, 0xb9, 0xe7, 0xe1, 0xc1, 0x2f, 0xab, 0xd0, 0x5f, 0x5c, 0x9b, 0x30, 0xee, 0xfe,
	0x84, 0x6e, 0xee, 0x85, 0xb8, 0x23, 0x84, 0x5e, 0x4e, 0x61, 0x33, 0xe5, 0xce, 0x21, 0x66, 0x85,
	0x2c, 0x66, 0x09, 0xba, 0x79, 0xb6, 0x83, 0x88, 0xd4, 0x6c, 0x54, 0x19, 0xff, 0x00, 0x36, 0x58,
	0x9a, 0x8b, 0x42, 0xb8, 0x60, 0x63, 0xe3, 0x2a, 0x55, 0x74, 0x0b, 0x03, 0xb0, 0xbe, 0x48, 0x78,
	0xaa, 0xdc, 0xd6, 0xe1, 0xac, 0xa1, 0x02, 0x96, 0x39, 0xce, 0xdb, 0x3e, 0x9a, 0x35, 0xf4, 0xa9,
	0x22, 0x3f, 0x43, 0x67, 0x28, 0x8a, 0x54, 0x14, 0x63, 0x37, 0xd8, 0xa3, 0xfd, 0xd3, 0x6f, 0x09,
	0x8b, 0x8b, 0x5a, 0x0c, 0x41, 0xfd, 0xb1, 0x48, 0xe7, 0x83, 0xf3, 0x23, 0xdf, 0x22, 0xfc, 0x38,
	0x7d, 0x01, 0x2d, 0x57, 0x5c, 0x26, 0xfa, 0x18, 0xdf, 0xe1, 0x19, 0x18, 0xaf, 0x7a, 0x52, 0xec,
	0x15, 0xbb, 0x17, 0x27, 0x8c, 0x2f, 0x45, 0xcf, 0x11, 0x7d, 0xe2, 0x5f, 0x9c, 0x30, 0x07, 0xa5,
	0x95, 0x8f, 0x11, 0x23, 0x16, 0xd6, 0x6b, 0x2c, 0xce, 0xb0, 0x8c, 0x3e, 0x3d, 0xab, 0x78, 0x54,
	0xef, 0x20, 0xee, 0xb3, 0x99, 0xc5, 0xa3, 0x62, 0x24, 0xdd, 0x90, 0xb4, 0x9a, 0x15, 0x46, 0x60,
	0x35, 0x25, 0xb2, 0x2c, 0x6c, 0xf4, 0x99, 0x1f, 0x92, 0x73, 0xfc, 0xd0, 0xc1, 0xe4, 0x3d, 0xe8,
	0x8d, 0xa4, 0x7e, 0xc5, 0x74, 0x4a, 0x93, 0x8c, 0x19, 0x13, 0x7d, 0x8e, 0x7c, 0xdd, 0x00, 0x1e,
	0x3a, 0xcc, 0x6d, 0xf3, 0xa5, 0xa2, 0x56, 0xe4, 0x3c, 0xfa, 0x62, 0x7b, 0x69, 0xa7, 0x19, 0xb7,
	0x4b, 0xf5, 0x44, 0xe4, 0x9c, 0x9c, 0x87, 0x76, 0xa9, 0x9c, 0xc7, 0xd1, 0x97, 0x88, 0xb7, 0x4a,
	0x75, 0x30, 0xc6, 0x35, 0x37, 0x95, 0xaf, 0x0a, 0x2f, 0xf1, 0x15, 0x52, 0x56, 0x1d, 0x80, 0x32,
	0x97, 0x00, 0xbf, 0x51, 0xea, 0x6b, 0xa4, 0xad, 0xb8, 0xb3, 0x93, 0x3b, 0x0f, 0xed, 0xcc, 0x28,
	0x2a, 0xd2, 0xe8, 0x20, 0xec, 0xf0, 0x46, 0x1d, 0xa5, 0xee, 0x3a, 0xa2, 0xb0, 0x5c, 0x8f, 0x58,
	0xc2, 0xe9, 0x84, 0x15, 0x69, 0xc6, 0xa3, 0x3b, 0xfe, 0x3a, 0x33, 0xfc, 0x5b, 0x84, 0xdd, 0xf4,
	0x0e, 0xc1, 0x19, 0x6b, 0x59, 0x3a, 0x55, 0xbc, 0xb0, 0x62, 0x24, 0xb8, 0x8e, 0x0e, 0xfd, 0xf4,
	0xf6, 0xe4, 0xfb, 0x8e, 0x7a, 0x34, 0x23, 0xba, 0x5d, 0xc1, 0xaf, 0x9c, 0xf8, 0xd7, 0x50, 0x17,
	0xbb, 0xeb, 0x77, 0x05, 0xa4, 0x7e, 0xef, 0x88, 0x35, 0xa9, 0xcb, 0xd0, 0xa9, 0x49, 0x45, 0xf7,
	0x7c, 0xdf, 0x98, 0xb3, 0x0e, 0xdb, 0xf8, 0xff, 0x75, 0xf3, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff,
	0xa0, 0x15, 0x61, 0x50, 0x97, 0x0d, 0x00, 0x00,
}
