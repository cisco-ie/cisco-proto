/*
Copyright 2019 Cisco Systems

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: sse_span_ea_udf_bag.proto

package cisco_ios_xr_sse_span_oper_ssespan_nodes_node_spanudf

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type SseSpanEaUdfBag_KEYS struct {
	Node                 string   `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SseSpanEaUdfBag_KEYS) Reset()         { *m = SseSpanEaUdfBag_KEYS{} }
func (m *SseSpanEaUdfBag_KEYS) String() string { return proto.CompactTextString(m) }
func (*SseSpanEaUdfBag_KEYS) ProtoMessage()    {}
func (*SseSpanEaUdfBag_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_d888c2a518099860, []int{0}
}

func (m *SseSpanEaUdfBag_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SseSpanEaUdfBag_KEYS.Unmarshal(m, b)
}
func (m *SseSpanEaUdfBag_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SseSpanEaUdfBag_KEYS.Marshal(b, m, deterministic)
}
func (m *SseSpanEaUdfBag_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SseSpanEaUdfBag_KEYS.Merge(m, src)
}
func (m *SseSpanEaUdfBag_KEYS) XXX_Size() int {
	return xxx_messageInfo_SseSpanEaUdfBag_KEYS.Size(m)
}
func (m *SseSpanEaUdfBag_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_SseSpanEaUdfBag_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_SseSpanEaUdfBag_KEYS proto.InternalMessageInfo

func (m *SseSpanEaUdfBag_KEYS) GetNode() string {
	if m != nil {
		return m.Node
	}
	return ""
}

type SseSpanEaUdfBag struct {
	UdfHdr               []uint32 `protobuf:"varint,50,rep,packed,name=udf_hdr,json=udfHdr,proto3" json:"udf_hdr,omitempty"`
	UdfType              []uint32 `protobuf:"varint,51,rep,packed,name=udf_type,json=udfType,proto3" json:"udf_type,omitempty"`
	UdfLen               []uint32 `protobuf:"varint,52,rep,packed,name=udf_len,json=udfLen,proto3" json:"udf_len,omitempty"`
	UdfValue             []uint32 `protobuf:"varint,53,rep,packed,name=udf_value,json=udfValue,proto3" json:"udf_value,omitempty"`
	UdfHwData            []uint32 `protobuf:"varint,54,rep,packed,name=udf_hw_data,json=udfHwData,proto3" json:"udf_hw_data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SseSpanEaUdfBag) Reset()         { *m = SseSpanEaUdfBag{} }
func (m *SseSpanEaUdfBag) String() string { return proto.CompactTextString(m) }
func (*SseSpanEaUdfBag) ProtoMessage()    {}
func (*SseSpanEaUdfBag) Descriptor() ([]byte, []int) {
	return fileDescriptor_d888c2a518099860, []int{1}
}

func (m *SseSpanEaUdfBag) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SseSpanEaUdfBag.Unmarshal(m, b)
}
func (m *SseSpanEaUdfBag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SseSpanEaUdfBag.Marshal(b, m, deterministic)
}
func (m *SseSpanEaUdfBag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SseSpanEaUdfBag.Merge(m, src)
}
func (m *SseSpanEaUdfBag) XXX_Size() int {
	return xxx_messageInfo_SseSpanEaUdfBag.Size(m)
}
func (m *SseSpanEaUdfBag) XXX_DiscardUnknown() {
	xxx_messageInfo_SseSpanEaUdfBag.DiscardUnknown(m)
}

var xxx_messageInfo_SseSpanEaUdfBag proto.InternalMessageInfo

func (m *SseSpanEaUdfBag) GetUdfHdr() []uint32 {
	if m != nil {
		return m.UdfHdr
	}
	return nil
}

func (m *SseSpanEaUdfBag) GetUdfType() []uint32 {
	if m != nil {
		return m.UdfType
	}
	return nil
}

func (m *SseSpanEaUdfBag) GetUdfLen() []uint32 {
	if m != nil {
		return m.UdfLen
	}
	return nil
}

func (m *SseSpanEaUdfBag) GetUdfValue() []uint32 {
	if m != nil {
		return m.UdfValue
	}
	return nil
}

func (m *SseSpanEaUdfBag) GetUdfHwData() []uint32 {
	if m != nil {
		return m.UdfHwData
	}
	return nil
}

func init() {
	proto.RegisterType((*SseSpanEaUdfBag_KEYS)(nil), "cisco_ios_xr_sse_span_oper.ssespan.nodes.node.spanudf.sse_span_ea_udf_bag_KEYS")
	proto.RegisterType((*SseSpanEaUdfBag)(nil), "cisco_ios_xr_sse_span_oper.ssespan.nodes.node.spanudf.sse_span_ea_udf_bag")
}

func init() { proto.RegisterFile("sse_span_ea_udf_bag.proto", fileDescriptor_d888c2a518099860) }

var fileDescriptor_d888c2a518099860 = []byte{
	// 224 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x90, 0x31, 0x4b, 0x83, 0x31,
	0x10, 0x86, 0xf9, 0x50, 0xaa, 0x3d, 0x71, 0x89, 0x83, 0x29, 0x82, 0x94, 0x4e, 0x9d, 0x32, 0x58,
	0xeb, 0x2f, 0x50, 0x28, 0xe8, 0x54, 0x45, 0x70, 0x3a, 0xae, 0xcd, 0x7d, 0x5a, 0x28, 0x49, 0xc8,
	0x25, 0xd6, 0xfe, 0x1a, 0xff, 0xaa, 0x5c, 0xc0, 0x4e, 0x5d, 0xc2, 0xbd, 0x3c, 0xcf, 0x7b, 0x81,
	0x83, 0x91, 0x08, 0xa3, 0x24, 0x0a, 0xc8, 0x84, 0xd5, 0xf7, 0xb8, 0xa2, 0x4f, 0x97, 0x72, 0x2c,
	0xd1, 0xcc, 0xd7, 0x1b, 0x59, 0x47, 0xdc, 0x44, 0xc1, 0x9f, 0x8c, 0x07, 0x2f, 0x26, 0xce, 0x4e,
	0x84, 0x35, 0xb8, 0x10, 0x3d, 0x4b, 0x7b, 0x9d, 0xe6, 0xea, 0xfb, 0x89, 0x03, 0x7b, 0x64, 0x27,
	0x3e, 0x3f, 0x7d, 0xbc, 0x1a, 0x03, 0xa7, 0xea, 0xda, 0x6e, 0xdc, 0x4d, 0x87, 0xcb, 0x36, 0x4f,
	0x7e, 0x3b, 0xb8, 0x3a, 0x52, 0x30, 0xd7, 0x70, 0xa6, 0xe3, 0x97, 0xcf, 0xf6, 0x6e, 0x7c, 0x32,
	0xbd, 0x5c, 0x0e, 0xaa, 0xef, 0x17, 0x3e, 0x9b, 0x11, 0x9c, 0x2b, 0x28, 0xfb, 0xc4, 0x76, 0xd6,
	0x88, 0x8a, 0x6f, 0xfb, 0xc4, 0xff, 0x9d, 0x2d, 0x07, 0x7b, 0x7f, 0xe8, 0xbc, 0x70, 0x30, 0x37,
	0x30, 0x54, 0xf0, 0x4d, 0xdb, 0xca, 0x76, 0xde, 0x90, 0x2e, 0x79, 0xd7, 0x6c, 0x6e, 0xe1, 0xa2,
	0xfd, 0xb4, 0x43, 0x4f, 0x85, 0xec, 0x43, 0xc3, 0xea, 0x2f, 0x76, 0x8f, 0x54, 0x68, 0x35, 0x68,
	0xf7, 0x98, 0xfd, 0x05, 0x00, 0x00, 0xff, 0xff, 0x20, 0xf1, 0x21, 0x64, 0x2c, 0x01, 0x00, 0x00,
}
