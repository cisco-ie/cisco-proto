/*
Copyright 2019 Cisco Systems

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rsi_vrfgroup_group_show.proto

package cisco_ios_xr_infra_rsi_oper_vrf_group_nodes_node_groups_group

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type RsiVrfgroupGroupShow_KEYS struct {
	NodeName             string   `protobuf:"bytes,1,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	GroupName            string   `protobuf:"bytes,2,opt,name=group_name,json=groupName,proto3" json:"group_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RsiVrfgroupGroupShow_KEYS) Reset()         { *m = RsiVrfgroupGroupShow_KEYS{} }
func (m *RsiVrfgroupGroupShow_KEYS) String() string { return proto.CompactTextString(m) }
func (*RsiVrfgroupGroupShow_KEYS) ProtoMessage()    {}
func (*RsiVrfgroupGroupShow_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4ab46bd82664465, []int{0}
}

func (m *RsiVrfgroupGroupShow_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RsiVrfgroupGroupShow_KEYS.Unmarshal(m, b)
}
func (m *RsiVrfgroupGroupShow_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RsiVrfgroupGroupShow_KEYS.Marshal(b, m, deterministic)
}
func (m *RsiVrfgroupGroupShow_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RsiVrfgroupGroupShow_KEYS.Merge(m, src)
}
func (m *RsiVrfgroupGroupShow_KEYS) XXX_Size() int {
	return xxx_messageInfo_RsiVrfgroupGroupShow_KEYS.Size(m)
}
func (m *RsiVrfgroupGroupShow_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_RsiVrfgroupGroupShow_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_RsiVrfgroupGroupShow_KEYS proto.InternalMessageInfo

func (m *RsiVrfgroupGroupShow_KEYS) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

func (m *RsiVrfgroupGroupShow_KEYS) GetGroupName() string {
	if m != nil {
		return m.GroupName
	}
	return ""
}

type RsiVrfgroupAttrBrief struct {
	VrfName              string   `protobuf:"bytes,1,opt,name=vrf_name,json=vrfName,proto3" json:"vrf_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RsiVrfgroupAttrBrief) Reset()         { *m = RsiVrfgroupAttrBrief{} }
func (m *RsiVrfgroupAttrBrief) String() string { return proto.CompactTextString(m) }
func (*RsiVrfgroupAttrBrief) ProtoMessage()    {}
func (*RsiVrfgroupAttrBrief) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4ab46bd82664465, []int{1}
}

func (m *RsiVrfgroupAttrBrief) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RsiVrfgroupAttrBrief.Unmarshal(m, b)
}
func (m *RsiVrfgroupAttrBrief) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RsiVrfgroupAttrBrief.Marshal(b, m, deterministic)
}
func (m *RsiVrfgroupAttrBrief) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RsiVrfgroupAttrBrief.Merge(m, src)
}
func (m *RsiVrfgroupAttrBrief) XXX_Size() int {
	return xxx_messageInfo_RsiVrfgroupAttrBrief.Size(m)
}
func (m *RsiVrfgroupAttrBrief) XXX_DiscardUnknown() {
	xxx_messageInfo_RsiVrfgroupAttrBrief.DiscardUnknown(m)
}

var xxx_messageInfo_RsiVrfgroupAttrBrief proto.InternalMessageInfo

func (m *RsiVrfgroupAttrBrief) GetVrfName() string {
	if m != nil {
		return m.VrfName
	}
	return ""
}

type RsiVrfgroupGroupShow struct {
	VrFs                 uint32                  `protobuf:"varint,50,opt,name=vr_fs,json=vrFs,proto3" json:"vr_fs,omitempty"`
	ForwardReference     bool                    `protobuf:"varint,51,opt,name=forward_reference,json=forwardReference,proto3" json:"forward_reference,omitempty"`
	Vrf                  []*RsiVrfgroupAttrBrief `protobuf:"bytes,52,rep,name=vrf,proto3" json:"vrf,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *RsiVrfgroupGroupShow) Reset()         { *m = RsiVrfgroupGroupShow{} }
func (m *RsiVrfgroupGroupShow) String() string { return proto.CompactTextString(m) }
func (*RsiVrfgroupGroupShow) ProtoMessage()    {}
func (*RsiVrfgroupGroupShow) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4ab46bd82664465, []int{2}
}

func (m *RsiVrfgroupGroupShow) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RsiVrfgroupGroupShow.Unmarshal(m, b)
}
func (m *RsiVrfgroupGroupShow) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RsiVrfgroupGroupShow.Marshal(b, m, deterministic)
}
func (m *RsiVrfgroupGroupShow) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RsiVrfgroupGroupShow.Merge(m, src)
}
func (m *RsiVrfgroupGroupShow) XXX_Size() int {
	return xxx_messageInfo_RsiVrfgroupGroupShow.Size(m)
}
func (m *RsiVrfgroupGroupShow) XXX_DiscardUnknown() {
	xxx_messageInfo_RsiVrfgroupGroupShow.DiscardUnknown(m)
}

var xxx_messageInfo_RsiVrfgroupGroupShow proto.InternalMessageInfo

func (m *RsiVrfgroupGroupShow) GetVrFs() uint32 {
	if m != nil {
		return m.VrFs
	}
	return 0
}

func (m *RsiVrfgroupGroupShow) GetForwardReference() bool {
	if m != nil {
		return m.ForwardReference
	}
	return false
}

func (m *RsiVrfgroupGroupShow) GetVrf() []*RsiVrfgroupAttrBrief {
	if m != nil {
		return m.Vrf
	}
	return nil
}

func init() {
	proto.RegisterType((*RsiVrfgroupGroupShow_KEYS)(nil), "cisco_ios_xr_infra_rsi_oper.vrf_group.nodes.node.groups.group.rsi_vrfgroup_group_show_KEYS")
	proto.RegisterType((*RsiVrfgroupAttrBrief)(nil), "cisco_ios_xr_infra_rsi_oper.vrf_group.nodes.node.groups.group.rsi_vrfgroup_attr_brief")
	proto.RegisterType((*RsiVrfgroupGroupShow)(nil), "cisco_ios_xr_infra_rsi_oper.vrf_group.nodes.node.groups.group.rsi_vrfgroup_group_show")
}

func init() { proto.RegisterFile("rsi_vrfgroup_group_show.proto", fileDescriptor_f4ab46bd82664465) }

var fileDescriptor_f4ab46bd82664465 = []byte{
	// 264 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x91, 0x4f, 0x4b, 0x03, 0x31,
	0x10, 0xc5, 0x59, 0xeb, 0x9f, 0xdd, 0x11, 0x41, 0xe3, 0xc1, 0x15, 0x2d, 0x2c, 0x3d, 0x2d, 0x08,
	0x39, 0xb4, 0xbd, 0x7a, 0xd4, 0x8b, 0xe0, 0x21, 0x82, 0xa0, 0x97, 0x21, 0xdd, 0x26, 0x36, 0x87,
	0xee, 0x2c, 0x93, 0x35, 0xf5, 0x0b, 0xfa, 0xbd, 0x24, 0x59, 0xc5, 0x3f, 0xd0, 0x93, 0x97, 0x09,
	0xbc, 0x97, 0xdf, 0xcb, 0x4b, 0x02, 0x63, 0xf6, 0x0e, 0x03, 0xdb, 0x17, 0xa6, 0xd7, 0x0e, 0x87,
	0xe9, 0x57, 0xb4, 0x91, 0x1d, 0x53, 0x4f, 0xe2, 0xba, 0x71, 0xbe, 0x21, 0x74, 0xe4, 0xf1, 0x8d,
	0xd1, 0xb5, 0x96, 0x35, 0x46, 0x82, 0x3a, 0xc3, 0x32, 0xb0, 0x1d, 0x08, 0xd9, 0xd2, 0xd2, 0xf8,
	0x34, 0x65, 0x12, 0xfc, 0xb0, 0x4c, 0x9e, 0xe1, 0x72, 0x4b, 0x3e, 0xde, 0xdd, 0x3c, 0x3d, 0x88,
	0x0b, 0x28, 0x22, 0x84, 0xad, 0x5e, 0x9b, 0x32, 0xab, 0xb2, 0xba, 0x50, 0x79, 0x14, 0xee, 0xf5,
	0xda, 0x88, 0x31, 0xc0, 0xb0, 0x3f, 0xb9, 0x3b, 0xc9, 0x2d, 0x92, 0x12, 0xed, 0xc9, 0x1c, 0xce,
	0x7e, 0x65, 0xeb, 0xbe, 0x67, 0x5c, 0xb0, 0x33, 0x56, 0x9c, 0x43, 0x1e, 0xbb, 0xfd, 0x48, 0x3d,
	0x08, 0x6c, 0x13, 0xf5, 0x9e, 0xfd, 0xc1, 0xbe, 0x2b, 0x89, 0x53, 0xd8, 0x0b, 0x8c, 0xd6, 0x97,
	0xd3, 0x2a, 0xab, 0x8f, 0xd4, 0x6e, 0xe0, 0x5b, 0x2f, 0xae, 0xe0, 0xc4, 0x12, 0x6f, 0x34, 0x2f,
	0x91, 0x8d, 0x35, 0x6c, 0xda, 0xc6, 0x94, 0xb3, 0x2a, 0xab, 0x73, 0x75, 0xfc, 0x69, 0xa8, 0x2f,
	0x5d, 0xac, 0x60, 0x14, 0xd8, 0x96, 0xf3, 0x6a, 0x54, 0x1f, 0x4e, 0x1f, 0xe5, 0xbf, 0x1e, 0x4f,
	0x6e, 0xb9, 0x9d, 0x8a, 0x47, 0x2c, 0xf6, 0xd3, 0xff, 0xcc, 0x3e, 0x02, 0x00, 0x00, 0xff, 0xff,
	0xe4, 0xe5, 0x99, 0x85, 0xc0, 0x01, 0x00, 0x00,
}
