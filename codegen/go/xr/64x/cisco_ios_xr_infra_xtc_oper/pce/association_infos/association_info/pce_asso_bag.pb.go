/*
Copyright 2019 Cisco Systems

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pce_asso_bag.proto

package cisco_ios_xr_infra_xtc_oper_pce_association_infos_association_info

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type PceAssoBag_KEYS struct {
	GroupId              uint32   `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	Type                 string   `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	SubId                string   `protobuf:"bytes,3,opt,name=sub_id,json=subId,proto3" json:"sub_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PceAssoBag_KEYS) Reset()         { *m = PceAssoBag_KEYS{} }
func (m *PceAssoBag_KEYS) String() string { return proto.CompactTextString(m) }
func (*PceAssoBag_KEYS) ProtoMessage()    {}
func (*PceAssoBag_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_6934e182f49bd6f3, []int{0}
}

func (m *PceAssoBag_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PceAssoBag_KEYS.Unmarshal(m, b)
}
func (m *PceAssoBag_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PceAssoBag_KEYS.Marshal(b, m, deterministic)
}
func (m *PceAssoBag_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PceAssoBag_KEYS.Merge(m, src)
}
func (m *PceAssoBag_KEYS) XXX_Size() int {
	return xxx_messageInfo_PceAssoBag_KEYS.Size(m)
}
func (m *PceAssoBag_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_PceAssoBag_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_PceAssoBag_KEYS proto.InternalMessageInfo

func (m *PceAssoBag_KEYS) GetGroupId() uint32 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

func (m *PceAssoBag_KEYS) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *PceAssoBag_KEYS) GetSubId() string {
	if m != nil {
		return m.SubId
	}
	return ""
}

type PceIpAddrType struct {
	AfName               string   `protobuf:"bytes,1,opt,name=af_name,json=afName,proto3" json:"af_name,omitempty"`
	Ipv4                 string   `protobuf:"bytes,2,opt,name=ipv4,proto3" json:"ipv4,omitempty"`
	Ipv6                 string   `protobuf:"bytes,3,opt,name=ipv6,proto3" json:"ipv6,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PceIpAddrType) Reset()         { *m = PceIpAddrType{} }
func (m *PceIpAddrType) String() string { return proto.CompactTextString(m) }
func (*PceIpAddrType) ProtoMessage()    {}
func (*PceIpAddrType) Descriptor() ([]byte, []int) {
	return fileDescriptor_6934e182f49bd6f3, []int{1}
}

func (m *PceIpAddrType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PceIpAddrType.Unmarshal(m, b)
}
func (m *PceIpAddrType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PceIpAddrType.Marshal(b, m, deterministic)
}
func (m *PceIpAddrType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PceIpAddrType.Merge(m, src)
}
func (m *PceIpAddrType) XXX_Size() int {
	return xxx_messageInfo_PceIpAddrType.Size(m)
}
func (m *PceIpAddrType) XXX_DiscardUnknown() {
	xxx_messageInfo_PceIpAddrType.DiscardUnknown(m)
}

var xxx_messageInfo_PceIpAddrType proto.InternalMessageInfo

func (m *PceIpAddrType) GetAfName() string {
	if m != nil {
		return m.AfName
	}
	return ""
}

func (m *PceIpAddrType) GetIpv4() string {
	if m != nil {
		return m.Ipv4
	}
	return ""
}

func (m *PceIpAddrType) GetIpv6() string {
	if m != nil {
		return m.Ipv6
	}
	return ""
}

type PceAssoLspInfo struct {
	PccAddress           *PceIpAddrType `protobuf:"bytes,1,opt,name=pcc_address,json=pccAddress,proto3" json:"pcc_address,omitempty"`
	TunnelId             uint32         `protobuf:"varint,2,opt,name=tunnel_id,json=tunnelId,proto3" json:"tunnel_id,omitempty"`
	Lspid                uint32         `protobuf:"varint,3,opt,name=lspid,proto3" json:"lspid,omitempty"`
	TunnelName           string         `protobuf:"bytes,4,opt,name=tunnel_name,json=tunnelName,proto3" json:"tunnel_name,omitempty"`
	PceBased             bool           `protobuf:"varint,5,opt,name=pce_based,json=pceBased,proto3" json:"pce_based,omitempty"`
	PlspId               uint32         `protobuf:"varint,6,opt,name=plsp_id,json=plspId,proto3" json:"plsp_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *PceAssoLspInfo) Reset()         { *m = PceAssoLspInfo{} }
func (m *PceAssoLspInfo) String() string { return proto.CompactTextString(m) }
func (*PceAssoLspInfo) ProtoMessage()    {}
func (*PceAssoLspInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_6934e182f49bd6f3, []int{2}
}

func (m *PceAssoLspInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PceAssoLspInfo.Unmarshal(m, b)
}
func (m *PceAssoLspInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PceAssoLspInfo.Marshal(b, m, deterministic)
}
func (m *PceAssoLspInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PceAssoLspInfo.Merge(m, src)
}
func (m *PceAssoLspInfo) XXX_Size() int {
	return xxx_messageInfo_PceAssoLspInfo.Size(m)
}
func (m *PceAssoLspInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PceAssoLspInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PceAssoLspInfo proto.InternalMessageInfo

func (m *PceAssoLspInfo) GetPccAddress() *PceIpAddrType {
	if m != nil {
		return m.PccAddress
	}
	return nil
}

func (m *PceAssoLspInfo) GetTunnelId() uint32 {
	if m != nil {
		return m.TunnelId
	}
	return 0
}

func (m *PceAssoLspInfo) GetLspid() uint32 {
	if m != nil {
		return m.Lspid
	}
	return 0
}

func (m *PceAssoLspInfo) GetTunnelName() string {
	if m != nil {
		return m.TunnelName
	}
	return ""
}

func (m *PceAssoLspInfo) GetPceBased() bool {
	if m != nil {
		return m.PceBased
	}
	return false
}

func (m *PceAssoLspInfo) GetPlspId() uint32 {
	if m != nil {
		return m.PlspId
	}
	return 0
}

type PceAssoBag struct {
	AssociationType      uint32            `protobuf:"varint,50,opt,name=association_type,json=associationType,proto3" json:"association_type,omitempty"`
	AssociationId        uint32            `protobuf:"varint,51,opt,name=association_id,json=associationId,proto3" json:"association_id,omitempty"`
	AssociationSource    *PceIpAddrType    `protobuf:"bytes,52,opt,name=association_source,json=associationSource,proto3" json:"association_source,omitempty"`
	AssociationLsp       []*PceAssoLspInfo `protobuf:"bytes,53,rep,name=association_lsp,json=associationLsp,proto3" json:"association_lsp,omitempty"`
	Strict               bool              `protobuf:"varint,54,opt,name=strict,proto3" json:"strict,omitempty"`
	Status               uint32            `protobuf:"varint,55,opt,name=status,proto3" json:"status,omitempty"`
	HeadendsSwapped      uint32            `protobuf:"varint,56,opt,name=headends_swapped,json=headendsSwapped,proto3" json:"headends_swapped,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *PceAssoBag) Reset()         { *m = PceAssoBag{} }
func (m *PceAssoBag) String() string { return proto.CompactTextString(m) }
func (*PceAssoBag) ProtoMessage()    {}
func (*PceAssoBag) Descriptor() ([]byte, []int) {
	return fileDescriptor_6934e182f49bd6f3, []int{3}
}

func (m *PceAssoBag) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PceAssoBag.Unmarshal(m, b)
}
func (m *PceAssoBag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PceAssoBag.Marshal(b, m, deterministic)
}
func (m *PceAssoBag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PceAssoBag.Merge(m, src)
}
func (m *PceAssoBag) XXX_Size() int {
	return xxx_messageInfo_PceAssoBag.Size(m)
}
func (m *PceAssoBag) XXX_DiscardUnknown() {
	xxx_messageInfo_PceAssoBag.DiscardUnknown(m)
}

var xxx_messageInfo_PceAssoBag proto.InternalMessageInfo

func (m *PceAssoBag) GetAssociationType() uint32 {
	if m != nil {
		return m.AssociationType
	}
	return 0
}

func (m *PceAssoBag) GetAssociationId() uint32 {
	if m != nil {
		return m.AssociationId
	}
	return 0
}

func (m *PceAssoBag) GetAssociationSource() *PceIpAddrType {
	if m != nil {
		return m.AssociationSource
	}
	return nil
}

func (m *PceAssoBag) GetAssociationLsp() []*PceAssoLspInfo {
	if m != nil {
		return m.AssociationLsp
	}
	return nil
}

func (m *PceAssoBag) GetStrict() bool {
	if m != nil {
		return m.Strict
	}
	return false
}

func (m *PceAssoBag) GetStatus() uint32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *PceAssoBag) GetHeadendsSwapped() uint32 {
	if m != nil {
		return m.HeadendsSwapped
	}
	return 0
}

func init() {
	proto.RegisterType((*PceAssoBag_KEYS)(nil), "cisco_ios_xr_infra_xtc_oper.pce.association_infos.association_info.pce_asso_bag_KEYS")
	proto.RegisterType((*PceIpAddrType)(nil), "cisco_ios_xr_infra_xtc_oper.pce.association_infos.association_info.pce_ip_addr_type")
	proto.RegisterType((*PceAssoLspInfo)(nil), "cisco_ios_xr_infra_xtc_oper.pce.association_infos.association_info.pce_asso_lsp_info")
	proto.RegisterType((*PceAssoBag)(nil), "cisco_ios_xr_infra_xtc_oper.pce.association_infos.association_info.pce_asso_bag")
}

func init() { proto.RegisterFile("pce_asso_bag.proto", fileDescriptor_6934e182f49bd6f3) }

var fileDescriptor_6934e182f49bd6f3 = []byte{
	// 461 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x53, 0x4d, 0x6f, 0x13, 0x31,
	0x10, 0xd5, 0x36, 0xcd, 0x36, 0x99, 0x10, 0x68, 0x2d, 0x3e, 0x8c, 0x7a, 0x20, 0x8a, 0x84, 0x14,
	0x2e, 0x7b, 0x48, 0x4b, 0xe1, 0x4a, 0x25, 0x0e, 0x2b, 0x10, 0x87, 0x4d, 0x39, 0xf4, 0x64, 0x79,
	0x6d, 0xa7, 0x58, 0x4a, 0xd7, 0xd6, 0xce, 0x2e, 0x94, 0x0b, 0x17, 0xfe, 0x02, 0x7f, 0x88, 0x7f,
	0x86, 0x3c, 0xde, 0x4a, 0x2e, 0x1c, 0x81, 0x9b, 0xe7, 0xed, 0xf8, 0xcd, 0xbc, 0xf7, 0xbc, 0xc0,
	0xbc, 0x32, 0x42, 0x22, 0x3a, 0x51, 0xcb, 0xab, 0xc2, 0xb7, 0xae, 0x73, 0xec, 0x5c, 0x59, 0x54,
	0x4e, 0x58, 0x87, 0xe2, 0xa6, 0x15, 0xb6, 0xd9, 0xb6, 0x52, 0xdc, 0x74, 0x4a, 0x38, 0x6f, 0xda,
	0xc2, 0x2b, 0x53, 0x84, 0x7e, 0x65, 0x65, 0x67, 0x5d, 0x13, 0x3e, 0x3b, 0xfc, 0x03, 0x59, 0x5e,
	0xc2, 0x51, 0xca, 0x2c, 0xde, 0xbd, 0xbd, 0xdc, 0xb0, 0xa7, 0x30, 0xb9, 0x6a, 0x5d, 0xef, 0x85,
	0xd5, 0x3c, 0x5b, 0x64, 0xab, 0x79, 0x75, 0x40, 0x75, 0xa9, 0x19, 0x83, 0xfd, 0xee, 0xab, 0x37,
	0x7c, 0x6f, 0x91, 0xad, 0xa6, 0x15, 0x9d, 0xd9, 0x23, 0xc8, 0xb1, 0xaf, 0x43, 0xf3, 0x88, 0xd0,
	0x31, 0xf6, 0x75, 0xa9, 0x97, 0x1b, 0x38, 0x0c, 0xd4, 0xd6, 0x0b, 0xa9, 0x75, 0x2b, 0xa8, 0xf5,
	0x09, 0x1c, 0xc8, 0xad, 0x68, 0xe4, 0xb5, 0x21, 0xe2, 0x69, 0x95, 0xcb, 0xed, 0x07, 0x79, 0x6d,
	0x02, 0xaf, 0xf5, 0x9f, 0x4f, 0x6f, 0x79, 0xc3, 0x79, 0xc0, 0xce, 0x06, 0x56, 0x3a, 0x2f, 0x7f,
	0xec, 0x25, 0x0b, 0xef, 0xd0, 0x93, 0x0a, 0xd6, 0xc3, 0xcc, 0x2b, 0x45, 0x73, 0x0c, 0x22, 0x51,
	0xcf, 0xd6, 0x17, 0xc5, 0xdf, 0xfb, 0x53, 0xfc, 0xae, 0xa0, 0x02, 0xaf, 0xd4, 0x9b, 0x38, 0x87,
	0x1d, 0xc3, 0xb4, 0xeb, 0x9b, 0xc6, 0xec, 0x82, 0xf6, 0x3d, 0x32, 0x6a, 0x12, 0x81, 0x52, 0xb3,
	0x87, 0x30, 0xde, 0xa1, 0x1f, 0x4c, 0x99, 0x57, 0xb1, 0x60, 0xcf, 0x60, 0x36, 0x5c, 0x21, 0x13,
	0xf6, 0x49, 0x1a, 0x44, 0x88, 0x8c, 0x38, 0x86, 0x69, 0x98, 0x59, 0x4b, 0x34, 0x9a, 0x8f, 0x17,
	0xd9, 0x6a, 0x52, 0x4d, 0xbc, 0x32, 0xe7, 0xa1, 0x0e, 0xf6, 0x79, 0x12, 0xad, 0x79, 0x4e, 0xac,
	0x79, 0x28, 0x4b, 0xbd, 0xfc, 0x39, 0x82, 0x7b, 0x69, 0x8e, 0xec, 0x05, 0x1c, 0xa6, 0x5a, 0x28,
	0xb3, 0x35, 0x5d, 0x79, 0x90, 0xe0, 0x17, 0x21, 0x93, 0xe7, 0x70, 0xff, 0x8e, 0x6c, 0xcd, 0x4f,
	0xa8, 0x71, 0x9e, 0xa0, 0xa5, 0x66, 0xdf, 0x33, 0x60, 0x69, 0x1f, 0xba, 0xbe, 0x55, 0x86, 0x9f,
	0xfe, 0x47, 0xaf, 0x8f, 0x92, 0x96, 0x0d, 0x8d, 0x63, 0xdf, 0x20, 0xdd, 0x3f, 0xbc, 0x00, 0xfe,
	0x72, 0x31, 0x5a, 0xcd, 0xd6, 0x1f, 0xff, 0xd5, 0x06, 0x77, 0x5e, 0x56, 0x95, 0x5a, 0xf3, 0x1e,
	0x3d, 0x7b, 0x0c, 0x39, 0x76, 0xad, 0x55, 0x1d, 0x3f, 0xa3, 0x6c, 0x86, 0x2a, 0xe2, 0xb2, 0xeb,
	0x91, 0xbf, 0x8a, 0xc1, 0xc4, 0x2a, 0xe4, 0xf0, 0xc9, 0x48, 0x6d, 0x1a, 0x8d, 0x02, 0xbf, 0x48,
	0xef, 0x8d, 0xe6, 0xaf, 0x63, 0x0e, 0xb7, 0xf8, 0x26, 0xc2, 0x75, 0x4e, 0x7f, 0xf5, 0xc9, 0xaf,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x9f, 0xa0, 0xca, 0x00, 0xeb, 0x03, 0x00, 0x00,
}
