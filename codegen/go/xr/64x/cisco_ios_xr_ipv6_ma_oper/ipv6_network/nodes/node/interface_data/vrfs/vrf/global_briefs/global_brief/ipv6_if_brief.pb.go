/*
Copyright 2019 Cisco Systems

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ipv6_if_brief.proto

package cisco_ios_xr_ipv6_ma_oper_ipv6_network_nodes_node_interface_data_vrfs_vrf_global_briefs_global_brief

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Ipv6IfBrief_KEYS struct {
	NodeName             string   `protobuf:"bytes,1,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	VrfName              string   `protobuf:"bytes,2,opt,name=vrf_name,json=vrfName,proto3" json:"vrf_name,omitempty"`
	InterfaceName        string   `protobuf:"bytes,3,opt,name=interface_name,json=interfaceName,proto3" json:"interface_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Ipv6IfBrief_KEYS) Reset()         { *m = Ipv6IfBrief_KEYS{} }
func (m *Ipv6IfBrief_KEYS) String() string { return proto.CompactTextString(m) }
func (*Ipv6IfBrief_KEYS) ProtoMessage()    {}
func (*Ipv6IfBrief_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_12de899f81f054b5, []int{0}
}

func (m *Ipv6IfBrief_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Ipv6IfBrief_KEYS.Unmarshal(m, b)
}
func (m *Ipv6IfBrief_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Ipv6IfBrief_KEYS.Marshal(b, m, deterministic)
}
func (m *Ipv6IfBrief_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ipv6IfBrief_KEYS.Merge(m, src)
}
func (m *Ipv6IfBrief_KEYS) XXX_Size() int {
	return xxx_messageInfo_Ipv6IfBrief_KEYS.Size(m)
}
func (m *Ipv6IfBrief_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_Ipv6IfBrief_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_Ipv6IfBrief_KEYS proto.InternalMessageInfo

func (m *Ipv6IfBrief_KEYS) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

func (m *Ipv6IfBrief_KEYS) GetVrfName() string {
	if m != nil {
		return m.VrfName
	}
	return ""
}

func (m *Ipv6IfBrief_KEYS) GetInterfaceName() string {
	if m != nil {
		return m.InterfaceName
	}
	return ""
}

type Ipv6AddrNode struct {
	Address              string   `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	PrefixLength         uint32   `protobuf:"varint,2,opt,name=prefix_length,json=prefixLength,proto3" json:"prefix_length,omitempty"`
	AddressState         string   `protobuf:"bytes,3,opt,name=address_state,json=addressState,proto3" json:"address_state,omitempty"`
	IsAnycast            bool     `protobuf:"varint,4,opt,name=is_anycast,json=isAnycast,proto3" json:"is_anycast,omitempty"`
	RouteTag             uint32   `protobuf:"varint,5,opt,name=route_tag,json=routeTag,proto3" json:"route_tag,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Ipv6AddrNode) Reset()         { *m = Ipv6AddrNode{} }
func (m *Ipv6AddrNode) String() string { return proto.CompactTextString(m) }
func (*Ipv6AddrNode) ProtoMessage()    {}
func (*Ipv6AddrNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_12de899f81f054b5, []int{1}
}

func (m *Ipv6AddrNode) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Ipv6AddrNode.Unmarshal(m, b)
}
func (m *Ipv6AddrNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Ipv6AddrNode.Marshal(b, m, deterministic)
}
func (m *Ipv6AddrNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ipv6AddrNode.Merge(m, src)
}
func (m *Ipv6AddrNode) XXX_Size() int {
	return xxx_messageInfo_Ipv6AddrNode.Size(m)
}
func (m *Ipv6AddrNode) XXX_DiscardUnknown() {
	xxx_messageInfo_Ipv6AddrNode.DiscardUnknown(m)
}

var xxx_messageInfo_Ipv6AddrNode proto.InternalMessageInfo

func (m *Ipv6AddrNode) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Ipv6AddrNode) GetPrefixLength() uint32 {
	if m != nil {
		return m.PrefixLength
	}
	return 0
}

func (m *Ipv6AddrNode) GetAddressState() string {
	if m != nil {
		return m.AddressState
	}
	return ""
}

func (m *Ipv6AddrNode) GetIsAnycast() bool {
	if m != nil {
		return m.IsAnycast
	}
	return false
}

func (m *Ipv6AddrNode) GetRouteTag() uint32 {
	if m != nil {
		return m.RouteTag
	}
	return 0
}

type Ipv6IfBrief struct {
	LineState            string          `protobuf:"bytes,50,opt,name=line_state,json=lineState,proto3" json:"line_state,omitempty"`
	VrfName              string          `protobuf:"bytes,51,opt,name=vrf_name,json=vrfName,proto3" json:"vrf_name,omitempty"`
	Address              []*Ipv6AddrNode `protobuf:"bytes,52,rep,name=address,proto3" json:"address,omitempty"`
	LinkLocalAddress     *Ipv6AddrNode   `protobuf:"bytes,53,opt,name=link_local_address,json=linkLocalAddress,proto3" json:"link_local_address,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *Ipv6IfBrief) Reset()         { *m = Ipv6IfBrief{} }
func (m *Ipv6IfBrief) String() string { return proto.CompactTextString(m) }
func (*Ipv6IfBrief) ProtoMessage()    {}
func (*Ipv6IfBrief) Descriptor() ([]byte, []int) {
	return fileDescriptor_12de899f81f054b5, []int{2}
}

func (m *Ipv6IfBrief) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Ipv6IfBrief.Unmarshal(m, b)
}
func (m *Ipv6IfBrief) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Ipv6IfBrief.Marshal(b, m, deterministic)
}
func (m *Ipv6IfBrief) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ipv6IfBrief.Merge(m, src)
}
func (m *Ipv6IfBrief) XXX_Size() int {
	return xxx_messageInfo_Ipv6IfBrief.Size(m)
}
func (m *Ipv6IfBrief) XXX_DiscardUnknown() {
	xxx_messageInfo_Ipv6IfBrief.DiscardUnknown(m)
}

var xxx_messageInfo_Ipv6IfBrief proto.InternalMessageInfo

func (m *Ipv6IfBrief) GetLineState() string {
	if m != nil {
		return m.LineState
	}
	return ""
}

func (m *Ipv6IfBrief) GetVrfName() string {
	if m != nil {
		return m.VrfName
	}
	return ""
}

func (m *Ipv6IfBrief) GetAddress() []*Ipv6AddrNode {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *Ipv6IfBrief) GetLinkLocalAddress() *Ipv6AddrNode {
	if m != nil {
		return m.LinkLocalAddress
	}
	return nil
}

func init() {
	proto.RegisterType((*Ipv6IfBrief_KEYS)(nil), "cisco_ios_xr_ipv6_ma_oper.ipv6_network.nodes.node.interface_data.vrfs.vrf.global_briefs.global_brief.ipv6_if_brief_KEYS")
	proto.RegisterType((*Ipv6AddrNode)(nil), "cisco_ios_xr_ipv6_ma_oper.ipv6_network.nodes.node.interface_data.vrfs.vrf.global_briefs.global_brief.ipv6_addr_node")
	proto.RegisterType((*Ipv6IfBrief)(nil), "cisco_ios_xr_ipv6_ma_oper.ipv6_network.nodes.node.interface_data.vrfs.vrf.global_briefs.global_brief.ipv6_if_brief")
}

func init() { proto.RegisterFile("ipv6_if_brief.proto", fileDescriptor_12de899f81f054b5) }

var fileDescriptor_12de899f81f054b5 = []byte{
	// 370 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x93, 0xb1, 0x4e, 0xeb, 0x30,
	0x18, 0x85, 0x95, 0xf6, 0xde, 0xdb, 0xc4, 0xb7, 0xa9, 0x90, 0x59, 0x82, 0x10, 0x52, 0x54, 0x84,
	0xd4, 0xc9, 0x43, 0x0b, 0xec, 0x1d, 0x98, 0xa8, 0x18, 0x5a, 0x16, 0xa6, 0x5f, 0x6e, 0xe2, 0x04,
	0xab, 0xae, 0x1d, 0xd9, 0x26, 0x94, 0x97, 0xe0, 0x21, 0x78, 0x02, 0xde, 0x10, 0x64, 0x27, 0xa5,
	0xe4, 0x05, 0x60, 0xb1, 0xf4, 0x1f, 0x1f, 0xfd, 0xdf, 0xf1, 0x89, 0x82, 0x8e, 0x79, 0x55, 0x5f,
	0x03, 0x2f, 0x60, 0xad, 0x39, 0x2b, 0x48, 0xa5, 0x95, 0x55, 0x38, 0xcf, 0xb8, 0xc9, 0x14, 0x70,
	0x65, 0x60, 0xa7, 0xc1, 0x3b, 0xb6, 0x14, 0x54, 0xc5, 0x34, 0xf1, 0x83, 0x64, 0xf6, 0x59, 0xe9,
	0x0d, 0x91, 0x2a, 0x67, 0xc6, 0x9f, 0x84, 0x4b, 0xcb, 0x74, 0x41, 0x33, 0x06, 0x39, 0xb5, 0x94,
	0xd4, 0xba, 0x30, 0xee, 0x20, 0xa5, 0x50, 0x6b, 0x2a, 0x9a, 0xed, 0xa6, 0x33, 0x8d, 0x0d, 0xc2,
	0x1d, 0x38, 0xdc, 0xde, 0x3c, 0xac, 0xf0, 0x29, 0x8a, 0xdc, 0x42, 0x90, 0x74, 0xcb, 0x92, 0x20,
	0x0d, 0x26, 0xd1, 0x32, 0x74, 0xc2, 0x1d, 0xdd, 0x32, 0x7c, 0x82, 0xc2, 0x5a, 0x17, 0xcd, 0x5d,
	0xcf, 0xdf, 0x0d, 0x6a, 0x5d, 0xf8, 0xab, 0x0b, 0x34, 0x3a, 0x64, 0xf0, 0x86, 0xbe, 0x37, 0xc4,
	0x5f, 0xaa, 0xb3, 0x8d, 0xdf, 0x03, 0x34, 0xf2, 0x54, 0x9a, 0xe7, 0x1a, 0xdc, 0x62, 0x9c, 0xa0,
	0x81, 0x1b, 0x98, 0x31, 0x2d, 0x6f, 0x3f, 0xe2, 0x73, 0x14, 0x57, 0x9a, 0x15, 0x7c, 0x07, 0x82,
	0xc9, 0xd2, 0x3e, 0x7a, 0x66, 0xbc, 0x1c, 0x36, 0xe2, 0xc2, 0x6b, 0xce, 0xd4, 0xfa, 0xc1, 0x58,
	0x6a, 0xf7, 0xdc, 0x61, 0x2b, 0xae, 0x9c, 0x86, 0xcf, 0x10, 0xe2, 0x06, 0xa8, 0x7c, 0xc9, 0xa8,
	0xb1, 0xc9, 0x9f, 0x34, 0x98, 0x84, 0xcb, 0x88, 0x9b, 0x79, 0x23, 0xb8, 0x47, 0x6b, 0xf5, 0x64,
	0x19, 0x58, 0x5a, 0x26, 0x7f, 0x3d, 0x24, 0xf4, 0xc2, 0x3d, 0x2d, 0xc7, 0x1f, 0x3d, 0x14, 0x77,
	0x8a, 0x72, 0xdb, 0x04, 0x97, 0xac, 0xe5, 0x4d, 0x3d, 0x2f, 0x72, 0x4a, 0x03, 0xfb, 0xde, 0xd2,
	0xac, 0xdb, 0xd2, 0x6b, 0x70, 0x78, 0xec, 0x65, 0xda, 0x9f, 0xfc, 0x9f, 0x5a, 0xf2, 0x13, 0x1f,
	0x9b, 0x74, 0x3b, 0x3f, 0x54, 0xfc, 0x16, 0x20, 0x2c, 0xb8, 0xdc, 0x80, 0x50, 0x19, 0x15, 0xb0,
	0xcf, 0x76, 0x95, 0x06, 0xbf, 0x96, 0xed, 0xc8, 0xe5, 0x59, 0xb8, 0x38, 0xf3, 0x26, 0xcd, 0xfa,
	0x9f, 0xff, 0x2d, 0x66, 0x9f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x13, 0xa1, 0x14, 0x8d, 0x2d, 0x03,
	0x00, 0x00,
}
