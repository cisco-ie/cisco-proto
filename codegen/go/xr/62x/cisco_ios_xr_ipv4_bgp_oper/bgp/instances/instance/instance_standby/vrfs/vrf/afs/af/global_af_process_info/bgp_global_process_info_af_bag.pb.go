/*
Copyright 2019 Cisco Systems

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: bgp_global_process_info_af_bag.proto

package cisco_ios_xr_ipv4_bgp_oper_bgp_instances_instance_instance_standby_vrfs_vrf_afs_af_global_af_process_info

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type BgpGlobalProcessInfoAfBag_KEYS struct {
	InstanceName         string   `protobuf:"bytes,1,opt,name=instance_name,json=instanceName,proto3" json:"instance_name,omitempty"`
	VrfName              string   `protobuf:"bytes,2,opt,name=vrf_name,json=vrfName,proto3" json:"vrf_name,omitempty"`
	AfName               string   `protobuf:"bytes,3,opt,name=af_name,json=afName,proto3" json:"af_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BgpGlobalProcessInfoAfBag_KEYS) Reset()         { *m = BgpGlobalProcessInfoAfBag_KEYS{} }
func (m *BgpGlobalProcessInfoAfBag_KEYS) String() string { return proto.CompactTextString(m) }
func (*BgpGlobalProcessInfoAfBag_KEYS) ProtoMessage()    {}
func (*BgpGlobalProcessInfoAfBag_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e79225ab6f81729, []int{0}
}

func (m *BgpGlobalProcessInfoAfBag_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BgpGlobalProcessInfoAfBag_KEYS.Unmarshal(m, b)
}
func (m *BgpGlobalProcessInfoAfBag_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BgpGlobalProcessInfoAfBag_KEYS.Marshal(b, m, deterministic)
}
func (m *BgpGlobalProcessInfoAfBag_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpGlobalProcessInfoAfBag_KEYS.Merge(m, src)
}
func (m *BgpGlobalProcessInfoAfBag_KEYS) XXX_Size() int {
	return xxx_messageInfo_BgpGlobalProcessInfoAfBag_KEYS.Size(m)
}
func (m *BgpGlobalProcessInfoAfBag_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpGlobalProcessInfoAfBag_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_BgpGlobalProcessInfoAfBag_KEYS proto.InternalMessageInfo

func (m *BgpGlobalProcessInfoAfBag_KEYS) GetInstanceName() string {
	if m != nil {
		return m.InstanceName
	}
	return ""
}

func (m *BgpGlobalProcessInfoAfBag_KEYS) GetVrfName() string {
	if m != nil {
		return m.VrfName
	}
	return ""
}

func (m *BgpGlobalProcessInfoAfBag_KEYS) GetAfName() string {
	if m != nil {
		return m.AfName
	}
	return ""
}

type BgpTimespec struct {
	Seconds              uint32   `protobuf:"varint,1,opt,name=seconds,proto3" json:"seconds,omitempty"`
	Nanoseconds          uint32   `protobuf:"varint,2,opt,name=nanoseconds,proto3" json:"nanoseconds,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BgpTimespec) Reset()         { *m = BgpTimespec{} }
func (m *BgpTimespec) String() string { return proto.CompactTextString(m) }
func (*BgpTimespec) ProtoMessage()    {}
func (*BgpTimespec) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e79225ab6f81729, []int{1}
}

func (m *BgpTimespec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BgpTimespec.Unmarshal(m, b)
}
func (m *BgpTimespec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BgpTimespec.Marshal(b, m, deterministic)
}
func (m *BgpTimespec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpTimespec.Merge(m, src)
}
func (m *BgpTimespec) XXX_Size() int {
	return xxx_messageInfo_BgpTimespec.Size(m)
}
func (m *BgpTimespec) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpTimespec.DiscardUnknown(m)
}

var xxx_messageInfo_BgpTimespec proto.InternalMessageInfo

func (m *BgpTimespec) GetSeconds() uint32 {
	if m != nil {
		return m.Seconds
	}
	return 0
}

func (m *BgpTimespec) GetNanoseconds() uint32 {
	if m != nil {
		return m.Nanoseconds
	}
	return 0
}

type BgpRibInstallTimeInfo struct {
	UpdateTime           *BgpTimespec `protobuf:"bytes,1,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	InstallTime          *BgpTimespec `protobuf:"bytes,2,opt,name=install_time,json=installTime,proto3" json:"install_time,omitempty"`
	InstalledCount       uint32       `protobuf:"varint,3,opt,name=installed_count,json=installedCount,proto3" json:"installed_count,omitempty"`
	ModifiedCount        uint32       `protobuf:"varint,4,opt,name=modified_count,json=modifiedCount,proto3" json:"modified_count,omitempty"`
	WithdrawnCount       uint32       `protobuf:"varint,5,opt,name=withdrawn_count,json=withdrawnCount,proto3" json:"withdrawn_count,omitempty"`
	StartVersion         uint32       `protobuf:"varint,6,opt,name=start_version,json=startVersion,proto3" json:"start_version,omitempty"`
	TargetVersion        uint32       `protobuf:"varint,7,opt,name=target_version,json=targetVersion,proto3" json:"target_version,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *BgpRibInstallTimeInfo) Reset()         { *m = BgpRibInstallTimeInfo{} }
func (m *BgpRibInstallTimeInfo) String() string { return proto.CompactTextString(m) }
func (*BgpRibInstallTimeInfo) ProtoMessage()    {}
func (*BgpRibInstallTimeInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e79225ab6f81729, []int{2}
}

func (m *BgpRibInstallTimeInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BgpRibInstallTimeInfo.Unmarshal(m, b)
}
func (m *BgpRibInstallTimeInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BgpRibInstallTimeInfo.Marshal(b, m, deterministic)
}
func (m *BgpRibInstallTimeInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpRibInstallTimeInfo.Merge(m, src)
}
func (m *BgpRibInstallTimeInfo) XXX_Size() int {
	return xxx_messageInfo_BgpRibInstallTimeInfo.Size(m)
}
func (m *BgpRibInstallTimeInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpRibInstallTimeInfo.DiscardUnknown(m)
}

var xxx_messageInfo_BgpRibInstallTimeInfo proto.InternalMessageInfo

func (m *BgpRibInstallTimeInfo) GetUpdateTime() *BgpTimespec {
	if m != nil {
		return m.UpdateTime
	}
	return nil
}

func (m *BgpRibInstallTimeInfo) GetInstallTime() *BgpTimespec {
	if m != nil {
		return m.InstallTime
	}
	return nil
}

func (m *BgpRibInstallTimeInfo) GetInstalledCount() uint32 {
	if m != nil {
		return m.InstalledCount
	}
	return 0
}

func (m *BgpRibInstallTimeInfo) GetModifiedCount() uint32 {
	if m != nil {
		return m.ModifiedCount
	}
	return 0
}

func (m *BgpRibInstallTimeInfo) GetWithdrawnCount() uint32 {
	if m != nil {
		return m.WithdrawnCount
	}
	return 0
}

func (m *BgpRibInstallTimeInfo) GetStartVersion() uint32 {
	if m != nil {
		return m.StartVersion
	}
	return 0
}

func (m *BgpRibInstallTimeInfo) GetTargetVersion() uint32 {
	if m != nil {
		return m.TargetVersion
	}
	return 0
}

type BgpGlobalProcessInfoAfGbl_ struct {
	ScannerPeriod             uint32                 `protobuf:"varint,1,opt,name=scanner_period,json=scannerPeriod,proto3" json:"scanner_period,omitempty"`
	NhTunnelVersion           uint32                 `protobuf:"varint,2,opt,name=nh_tunnel_version,json=nhTunnelVersion,proto3" json:"nh_tunnel_version,omitempty"`
	SyncgrpVersion            []uint32               `protobuf:"varint,3,rep,packed,name=syncgrp_version,json=syncgrpVersion,proto3" json:"syncgrp_version,omitempty"`
	ScanPrefixes              uint32                 `protobuf:"varint,4,opt,name=scan_prefixes,json=scanPrefixes,proto3" json:"scan_prefixes,omitempty"`
	ScanSegmentPrefixes       uint32                 `protobuf:"varint,5,opt,name=scan_segment_prefixes,json=scanSegmentPrefixes,proto3" json:"scan_segment_prefixes,omitempty"`
	ScanSegments              uint32                 `protobuf:"varint,6,opt,name=scan_segments,json=scanSegments,proto3" json:"scan_segments,omitempty"`
	InterAsInstallEnabled     bool                   `protobuf:"varint,7,opt,name=inter_as_install_enabled,json=interAsInstallEnabled,proto3" json:"inter_as_install_enabled,omitempty"`
	GlobalMcastEnabled        bool                   `protobuf:"varint,8,opt,name=global_mcast_enabled,json=globalMcastEnabled,proto3" json:"global_mcast_enabled,omitempty"`
	SegmentedMcastEnabled     bool                   `protobuf:"varint,9,opt,name=segmented_mcast_enabled,json=segmentedMcastEnabled,proto3" json:"segmented_mcast_enabled,omitempty"`
	GblafrpkiDisable          bool                   `protobuf:"varint,10,opt,name=gblafrpki_disable,json=gblafrpkiDisable,proto3" json:"gblafrpki_disable,omitempty"`
	GblafrpkiUseValidity      bool                   `protobuf:"varint,11,opt,name=gblafrpki_use_validity,json=gblafrpkiUseValidity,proto3" json:"gblafrpki_use_validity,omitempty"`
	GblafrpkiAllowInvalid     bool                   `protobuf:"varint,12,opt,name=gblafrpki_allow_invalid,json=gblafrpkiAllowInvalid,proto3" json:"gblafrpki_allow_invalid,omitempty"`
	GblafrpkiSignalIbgp       bool                   `protobuf:"varint,13,opt,name=gblafrpki_signal_ibgp,json=gblafrpkiSignalIbgp,proto3" json:"gblafrpki_signal_ibgp,omitempty"`
	UpdateWaitInstallEnabled  bool                   `protobuf:"varint,14,opt,name=update_wait_install_enabled,json=updateWaitInstallEnabled,proto3" json:"update_wait_install_enabled,omitempty"`
	RibAckRequests            uint32                 `protobuf:"varint,15,opt,name=rib_ack_requests,json=ribAckRequests,proto3" json:"rib_ack_requests,omitempty"`
	RibAcksReceived           uint32                 `protobuf:"varint,16,opt,name=rib_acks_received,json=ribAcksReceived,proto3" json:"rib_acks_received,omitempty"`
	RibSlowAcks               uint32                 `protobuf:"varint,17,opt,name=rib_slow_acks,json=ribSlowAcks,proto3" json:"rib_slow_acks,omitempty"`
	RibInstall                *BgpRibInstallTimeInfo `protobuf:"bytes,18,opt,name=rib_install,json=ribInstall,proto3" json:"rib_install,omitempty"`
	IsPermNetCfg              bool                   `protobuf:"varint,19,opt,name=is_perm_net_cfg,json=isPermNetCfg,proto3" json:"is_perm_net_cfg,omitempty"`
	PermNetDelCount           uint32                 `protobuf:"varint,20,opt,name=perm_net_del_count,json=permNetDelCount,proto3" json:"perm_net_del_count,omitempty"`
	PermNetStaleDelCount      uint32                 `protobuf:"varint,21,opt,name=perm_net_stale_del_count,json=permNetStaleDelCount,proto3" json:"perm_net_stale_del_count,omitempty"`
	PermNetStaleMarkCount     uint32                 `protobuf:"varint,22,opt,name=perm_net_stale_mark_count,json=permNetStaleMarkCount,proto3" json:"perm_net_stale_mark_count,omitempty"`
	PermNetInsertCount        uint32                 `protobuf:"varint,23,opt,name=perm_net_insert_count,json=permNetInsertCount,proto3" json:"perm_net_insert_count,omitempty"`
	PermNetExistingCount      uint32                 `protobuf:"varint,24,opt,name=perm_net_existing_count,json=permNetExistingCount,proto3" json:"perm_net_existing_count,omitempty"`
	PermNetRplQueryCount      uint32                 `protobuf:"varint,25,opt,name=perm_net_rpl_query_count,json=permNetRplQueryCount,proto3" json:"perm_net_rpl_query_count,omitempty"`
	PermNetRplProcessCount    uint32                 `protobuf:"varint,26,opt,name=perm_net_rpl_process_count,json=permNetRplProcessCount,proto3" json:"perm_net_rpl_process_count,omitempty"`
	PermNbrCount              uint32                 `protobuf:"varint,27,opt,name=perm_nbr_count,json=permNbrCount,proto3" json:"perm_nbr_count,omitempty"`
	RibPermPelemNotFoundCount uint32                 `protobuf:"varint,28,opt,name=rib_perm_pelem_not_found_count,json=ribPermPelemNotFoundCount,proto3" json:"rib_perm_pelem_not_found_count,omitempty"`
	RibPermPathNotFoundCount  uint32                 `protobuf:"varint,29,opt,name=rib_perm_path_not_found_count,json=ribPermPathNotFoundCount,proto3" json:"rib_perm_path_not_found_count,omitempty"`
	RibPermPelemFoundCount    uint32                 `protobuf:"varint,30,opt,name=rib_perm_pelem_found_count,json=ribPermPelemFoundCount,proto3" json:"rib_perm_pelem_found_count,omitempty"`
	RibRegPathFoundCount      uint32                 `protobuf:"varint,31,opt,name=rib_reg_path_found_count,json=ribRegPathFoundCount,proto3" json:"rib_reg_path_found_count,omitempty"`
	RibPermPathFoundCount     uint32                 `protobuf:"varint,32,opt,name=rib_perm_path_found_count,json=ribPermPathFoundCount,proto3" json:"rib_perm_path_found_count,omitempty"`
	PermPelemFreeCount        uint32                 `protobuf:"varint,33,opt,name=perm_pelem_free_count,json=permPelemFreeCount,proto3" json:"perm_pelem_free_count,omitempty"`
	PermPathRefreshCount      uint32                 `protobuf:"varint,34,opt,name=perm_path_refresh_count,json=permPathRefreshCount,proto3" json:"perm_path_refresh_count,omitempty"`
	PermPelemBumpCount        uint32                 `protobuf:"varint,35,opt,name=perm_pelem_bump_count,json=permPelemBumpCount,proto3" json:"perm_pelem_bump_count,omitempty"`
	PermPelemAllBumpCount     uint32                 `protobuf:"varint,36,opt,name=perm_pelem_all_bump_count,json=permPelemAllBumpCount,proto3" json:"perm_pelem_all_bump_count,omitempty"`
	XXX_NoUnkeyedLiteral      struct{}               `json:"-"`
	XXX_unrecognized          []byte                 `json:"-"`
	XXX_sizecache             int32                  `json:"-"`
}

func (m *BgpGlobalProcessInfoAfGbl_) Reset()         { *m = BgpGlobalProcessInfoAfGbl_{} }
func (m *BgpGlobalProcessInfoAfGbl_) String() string { return proto.CompactTextString(m) }
func (*BgpGlobalProcessInfoAfGbl_) ProtoMessage()    {}
func (*BgpGlobalProcessInfoAfGbl_) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e79225ab6f81729, []int{3}
}

func (m *BgpGlobalProcessInfoAfGbl_) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BgpGlobalProcessInfoAfGbl_.Unmarshal(m, b)
}
func (m *BgpGlobalProcessInfoAfGbl_) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BgpGlobalProcessInfoAfGbl_.Marshal(b, m, deterministic)
}
func (m *BgpGlobalProcessInfoAfGbl_) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpGlobalProcessInfoAfGbl_.Merge(m, src)
}
func (m *BgpGlobalProcessInfoAfGbl_) XXX_Size() int {
	return xxx_messageInfo_BgpGlobalProcessInfoAfGbl_.Size(m)
}
func (m *BgpGlobalProcessInfoAfGbl_) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpGlobalProcessInfoAfGbl_.DiscardUnknown(m)
}

var xxx_messageInfo_BgpGlobalProcessInfoAfGbl_ proto.InternalMessageInfo

func (m *BgpGlobalProcessInfoAfGbl_) GetScannerPeriod() uint32 {
	if m != nil {
		return m.ScannerPeriod
	}
	return 0
}

func (m *BgpGlobalProcessInfoAfGbl_) GetNhTunnelVersion() uint32 {
	if m != nil {
		return m.NhTunnelVersion
	}
	return 0
}

func (m *BgpGlobalProcessInfoAfGbl_) GetSyncgrpVersion() []uint32 {
	if m != nil {
		return m.SyncgrpVersion
	}
	return nil
}

func (m *BgpGlobalProcessInfoAfGbl_) GetScanPrefixes() uint32 {
	if m != nil {
		return m.ScanPrefixes
	}
	return 0
}

func (m *BgpGlobalProcessInfoAfGbl_) GetScanSegmentPrefixes() uint32 {
	if m != nil {
		return m.ScanSegmentPrefixes
	}
	return 0
}

func (m *BgpGlobalProcessInfoAfGbl_) GetScanSegments() uint32 {
	if m != nil {
		return m.ScanSegments
	}
	return 0
}

func (m *BgpGlobalProcessInfoAfGbl_) GetInterAsInstallEnabled() bool {
	if m != nil {
		return m.InterAsInstallEnabled
	}
	return false
}

func (m *BgpGlobalProcessInfoAfGbl_) GetGlobalMcastEnabled() bool {
	if m != nil {
		return m.GlobalMcastEnabled
	}
	return false
}

func (m *BgpGlobalProcessInfoAfGbl_) GetSegmentedMcastEnabled() bool {
	if m != nil {
		return m.SegmentedMcastEnabled
	}
	return false
}

func (m *BgpGlobalProcessInfoAfGbl_) GetGblafrpkiDisable() bool {
	if m != nil {
		return m.GblafrpkiDisable
	}
	return false
}

func (m *BgpGlobalProcessInfoAfGbl_) GetGblafrpkiUseValidity() bool {
	if m != nil {
		return m.GblafrpkiUseValidity
	}
	return false
}

func (m *BgpGlobalProcessInfoAfGbl_) GetGblafrpkiAllowInvalid() bool {
	if m != nil {
		return m.GblafrpkiAllowInvalid
	}
	return false
}

func (m *BgpGlobalProcessInfoAfGbl_) GetGblafrpkiSignalIbgp() bool {
	if m != nil {
		return m.GblafrpkiSignalIbgp
	}
	return false
}

func (m *BgpGlobalProcessInfoAfGbl_) GetUpdateWaitInstallEnabled() bool {
	if m != nil {
		return m.UpdateWaitInstallEnabled
	}
	return false
}

func (m *BgpGlobalProcessInfoAfGbl_) GetRibAckRequests() uint32 {
	if m != nil {
		return m.RibAckRequests
	}
	return 0
}

func (m *BgpGlobalProcessInfoAfGbl_) GetRibAcksReceived() uint32 {
	if m != nil {
		return m.RibAcksReceived
	}
	return 0
}

func (m *BgpGlobalProcessInfoAfGbl_) GetRibSlowAcks() uint32 {
	if m != nil {
		return m.RibSlowAcks
	}
	return 0
}

func (m *BgpGlobalProcessInfoAfGbl_) GetRibInstall() *BgpRibInstallTimeInfo {
	if m != nil {
		return m.RibInstall
	}
	return nil
}

func (m *BgpGlobalProcessInfoAfGbl_) GetIsPermNetCfg() bool {
	if m != nil {
		return m.IsPermNetCfg
	}
	return false
}

func (m *BgpGlobalProcessInfoAfGbl_) GetPermNetDelCount() uint32 {
	if m != nil {
		return m.PermNetDelCount
	}
	return 0
}

func (m *BgpGlobalProcessInfoAfGbl_) GetPermNetStaleDelCount() uint32 {
	if m != nil {
		return m.PermNetStaleDelCount
	}
	return 0
}

func (m *BgpGlobalProcessInfoAfGbl_) GetPermNetStaleMarkCount() uint32 {
	if m != nil {
		return m.PermNetStaleMarkCount
	}
	return 0
}

func (m *BgpGlobalProcessInfoAfGbl_) GetPermNetInsertCount() uint32 {
	if m != nil {
		return m.PermNetInsertCount
	}
	return 0
}

func (m *BgpGlobalProcessInfoAfGbl_) GetPermNetExistingCount() uint32 {
	if m != nil {
		return m.PermNetExistingCount
	}
	return 0
}

func (m *BgpGlobalProcessInfoAfGbl_) GetPermNetRplQueryCount() uint32 {
	if m != nil {
		return m.PermNetRplQueryCount
	}
	return 0
}

func (m *BgpGlobalProcessInfoAfGbl_) GetPermNetRplProcessCount() uint32 {
	if m != nil {
		return m.PermNetRplProcessCount
	}
	return 0
}

func (m *BgpGlobalProcessInfoAfGbl_) GetPermNbrCount() uint32 {
	if m != nil {
		return m.PermNbrCount
	}
	return 0
}

func (m *BgpGlobalProcessInfoAfGbl_) GetRibPermPelemNotFoundCount() uint32 {
	if m != nil {
		return m.RibPermPelemNotFoundCount
	}
	return 0
}

func (m *BgpGlobalProcessInfoAfGbl_) GetRibPermPathNotFoundCount() uint32 {
	if m != nil {
		return m.RibPermPathNotFoundCount
	}
	return 0
}

func (m *BgpGlobalProcessInfoAfGbl_) GetRibPermPelemFoundCount() uint32 {
	if m != nil {
		return m.RibPermPelemFoundCount
	}
	return 0
}

func (m *BgpGlobalProcessInfoAfGbl_) GetRibRegPathFoundCount() uint32 {
	if m != nil {
		return m.RibRegPathFoundCount
	}
	return 0
}

func (m *BgpGlobalProcessInfoAfGbl_) GetRibPermPathFoundCount() uint32 {
	if m != nil {
		return m.RibPermPathFoundCount
	}
	return 0
}

func (m *BgpGlobalProcessInfoAfGbl_) GetPermPelemFreeCount() uint32 {
	if m != nil {
		return m.PermPelemFreeCount
	}
	return 0
}

func (m *BgpGlobalProcessInfoAfGbl_) GetPermPathRefreshCount() uint32 {
	if m != nil {
		return m.PermPathRefreshCount
	}
	return 0
}

func (m *BgpGlobalProcessInfoAfGbl_) GetPermPelemBumpCount() uint32 {
	if m != nil {
		return m.PermPelemBumpCount
	}
	return 0
}

func (m *BgpGlobalProcessInfoAfGbl_) GetPermPelemAllBumpCount() uint32 {
	if m != nil {
		return m.PermPelemAllBumpCount
	}
	return 0
}

type BgpGlobalProcessInfoAfVrf_ struct {
	TableIsActive                                  bool     `protobuf:"varint,1,opt,name=table_is_active,json=tableIsActive,proto3" json:"table_is_active,omitempty"`
	TableId                                        uint32   `protobuf:"varint,2,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
	TableVersion                                   uint32   `protobuf:"varint,3,opt,name=table_version,json=tableVersion,proto3" json:"table_version,omitempty"`
	RdVersion                                      uint32   `protobuf:"varint,4,opt,name=rd_version,json=rdVersion,proto3" json:"rd_version,omitempty"`
	RibVersion                                     uint32   `protobuf:"varint,5,opt,name=rib_version,json=ribVersion,proto3" json:"rib_version,omitempty"`
	NsrConvVersion                                 uint32   `protobuf:"varint,6,opt,name=nsr_conv_version,json=nsrConvVersion,proto3" json:"nsr_conv_version,omitempty"`
	NsrIsConv                                      bool     `protobuf:"varint,7,opt,name=nsr_is_conv,json=nsrIsConv,proto3" json:"nsr_is_conv,omitempty"`
	ClientReflectionEnabled                        bool     `protobuf:"varint,8,opt,name=client_reflection_enabled,json=clientReflectionEnabled,proto3" json:"client_reflection_enabled,omitempty"`
	DampeningEnabled                               bool     `protobuf:"varint,9,opt,name=dampening_enabled,json=dampeningEnabled,proto3" json:"dampening_enabled,omitempty"`
	EbgpDistance                                   uint32   `protobuf:"varint,10,opt,name=ebgp_distance,json=ebgpDistance,proto3" json:"ebgp_distance,omitempty"`
	IbgpDistance                                   uint32   `protobuf:"varint,11,opt,name=ibgp_distance,json=ibgpDistance,proto3" json:"ibgp_distance,omitempty"`
	AggregatesDistance                             uint32   `protobuf:"varint,12,opt,name=aggregates_distance,json=aggregatesDistance,proto3" json:"aggregates_distance,omitempty"`
	DynamicMedEnabled                              bool     `protobuf:"varint,13,opt,name=dynamic_med_enabled,json=dynamicMedEnabled,proto3" json:"dynamic_med_enabled,omitempty"`
	DynamicMedInterval                             uint32   `protobuf:"varint,14,opt,name=dynamic_med_interval,json=dynamicMedInterval,proto3" json:"dynamic_med_interval,omitempty"`
	DynamicMedTimerRunning                         bool     `protobuf:"varint,15,opt,name=dynamic_med_timer_running,json=dynamicMedTimerRunning,proto3" json:"dynamic_med_timer_running,omitempty"`
	DynamicMedTimerValue                           uint32   `protobuf:"varint,16,opt,name=dynamic_med_timer_value,json=dynamicMedTimerValue,proto3" json:"dynamic_med_timer_value,omitempty"`
	DynamicMedPeriodicTimerRunning                 bool     `protobuf:"varint,17,opt,name=dynamic_med_periodic_timer_running,json=dynamicMedPeriodicTimerRunning,proto3" json:"dynamic_med_periodic_timer_running,omitempty"`
	DynamicMedPeriodicTimerValue                   uint32   `protobuf:"varint,18,opt,name=dynamic_med_periodic_timer_value,json=dynamicMedPeriodicTimerValue,proto3" json:"dynamic_med_periodic_timer_value,omitempty"`
	RibHasConverged                                bool     `protobuf:"varint,19,opt,name=rib_has_converged,json=ribHasConverged,proto3" json:"rib_has_converged,omitempty"`
	RibConvergenceVersion                          uint32   `protobuf:"varint,20,opt,name=rib_convergence_version,json=ribConvergenceVersion,proto3" json:"rib_convergence_version,omitempty"`
	IsRibTableFull                                 bool     `protobuf:"varint,21,opt,name=is_rib_table_full,json=isRibTableFull,proto3" json:"is_rib_table_full,omitempty"`
	RibTableFullVersion                            uint32   `protobuf:"varint,22,opt,name=rib_table_full_version,json=ribTableFullVersion,proto3" json:"rib_table_full_version,omitempty"`
	NexthopResolutionMinimumPrefixLengthConfigured bool     `protobuf:"varint,23,opt,name=nexthop_resolution_minimum_prefix_length_configured,json=nexthopResolutionMinimumPrefixLengthConfigured,proto3" json:"nexthop_resolution_minimum_prefix_length_configured,omitempty"`
	NexthopResolutionMinimumPrefixLength           uint32   `protobuf:"varint,24,opt,name=nexthop_resolution_minimum_prefix_length,json=nexthopResolutionMinimumPrefixLength,proto3" json:"nexthop_resolution_minimum_prefix_length,omitempty"`
	SelectiveEbgpMultipathEnabled                  bool     `protobuf:"varint,25,opt,name=selective_ebgp_multipath_enabled,json=selectiveEbgpMultipathEnabled,proto3" json:"selective_ebgp_multipath_enabled,omitempty"`
	SelectiveIbgpMultipathEnabled                  bool     `protobuf:"varint,26,opt,name=selective_ibgp_multipath_enabled,json=selectiveIbgpMultipathEnabled,proto3" json:"selective_ibgp_multipath_enabled,omitempty"`
	SelectiveEibgpMultipathEnabled                 bool     `protobuf:"varint,27,opt,name=selective_eibgp_multipath_enabled,json=selectiveEibgpMultipathEnabled,proto3" json:"selective_eibgp_multipath_enabled,omitempty"`
	RibAckedTableVersion                           uint32   `protobuf:"varint,28,opt,name=rib_acked_table_version,json=ribAckedTableVersion,proto3" json:"rib_acked_table_version,omitempty"`
	XXX_NoUnkeyedLiteral                           struct{} `json:"-"`
	XXX_unrecognized                               []byte   `json:"-"`
	XXX_sizecache                                  int32    `json:"-"`
}

func (m *BgpGlobalProcessInfoAfVrf_) Reset()         { *m = BgpGlobalProcessInfoAfVrf_{} }
func (m *BgpGlobalProcessInfoAfVrf_) String() string { return proto.CompactTextString(m) }
func (*BgpGlobalProcessInfoAfVrf_) ProtoMessage()    {}
func (*BgpGlobalProcessInfoAfVrf_) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e79225ab6f81729, []int{4}
}

func (m *BgpGlobalProcessInfoAfVrf_) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BgpGlobalProcessInfoAfVrf_.Unmarshal(m, b)
}
func (m *BgpGlobalProcessInfoAfVrf_) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BgpGlobalProcessInfoAfVrf_.Marshal(b, m, deterministic)
}
func (m *BgpGlobalProcessInfoAfVrf_) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpGlobalProcessInfoAfVrf_.Merge(m, src)
}
func (m *BgpGlobalProcessInfoAfVrf_) XXX_Size() int {
	return xxx_messageInfo_BgpGlobalProcessInfoAfVrf_.Size(m)
}
func (m *BgpGlobalProcessInfoAfVrf_) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpGlobalProcessInfoAfVrf_.DiscardUnknown(m)
}

var xxx_messageInfo_BgpGlobalProcessInfoAfVrf_ proto.InternalMessageInfo

func (m *BgpGlobalProcessInfoAfVrf_) GetTableIsActive() bool {
	if m != nil {
		return m.TableIsActive
	}
	return false
}

func (m *BgpGlobalProcessInfoAfVrf_) GetTableId() uint32 {
	if m != nil {
		return m.TableId
	}
	return 0
}

func (m *BgpGlobalProcessInfoAfVrf_) GetTableVersion() uint32 {
	if m != nil {
		return m.TableVersion
	}
	return 0
}

func (m *BgpGlobalProcessInfoAfVrf_) GetRdVersion() uint32 {
	if m != nil {
		return m.RdVersion
	}
	return 0
}

func (m *BgpGlobalProcessInfoAfVrf_) GetRibVersion() uint32 {
	if m != nil {
		return m.RibVersion
	}
	return 0
}

func (m *BgpGlobalProcessInfoAfVrf_) GetNsrConvVersion() uint32 {
	if m != nil {
		return m.NsrConvVersion
	}
	return 0
}

func (m *BgpGlobalProcessInfoAfVrf_) GetNsrIsConv() bool {
	if m != nil {
		return m.NsrIsConv
	}
	return false
}

func (m *BgpGlobalProcessInfoAfVrf_) GetClientReflectionEnabled() bool {
	if m != nil {
		return m.ClientReflectionEnabled
	}
	return false
}

func (m *BgpGlobalProcessInfoAfVrf_) GetDampeningEnabled() bool {
	if m != nil {
		return m.DampeningEnabled
	}
	return false
}

func (m *BgpGlobalProcessInfoAfVrf_) GetEbgpDistance() uint32 {
	if m != nil {
		return m.EbgpDistance
	}
	return 0
}

func (m *BgpGlobalProcessInfoAfVrf_) GetIbgpDistance() uint32 {
	if m != nil {
		return m.IbgpDistance
	}
	return 0
}

func (m *BgpGlobalProcessInfoAfVrf_) GetAggregatesDistance() uint32 {
	if m != nil {
		return m.AggregatesDistance
	}
	return 0
}

func (m *BgpGlobalProcessInfoAfVrf_) GetDynamicMedEnabled() bool {
	if m != nil {
		return m.DynamicMedEnabled
	}
	return false
}

func (m *BgpGlobalProcessInfoAfVrf_) GetDynamicMedInterval() uint32 {
	if m != nil {
		return m.DynamicMedInterval
	}
	return 0
}

func (m *BgpGlobalProcessInfoAfVrf_) GetDynamicMedTimerRunning() bool {
	if m != nil {
		return m.DynamicMedTimerRunning
	}
	return false
}

func (m *BgpGlobalProcessInfoAfVrf_) GetDynamicMedTimerValue() uint32 {
	if m != nil {
		return m.DynamicMedTimerValue
	}
	return 0
}

func (m *BgpGlobalProcessInfoAfVrf_) GetDynamicMedPeriodicTimerRunning() bool {
	if m != nil {
		return m.DynamicMedPeriodicTimerRunning
	}
	return false
}

func (m *BgpGlobalProcessInfoAfVrf_) GetDynamicMedPeriodicTimerValue() uint32 {
	if m != nil {
		return m.DynamicMedPeriodicTimerValue
	}
	return 0
}

func (m *BgpGlobalProcessInfoAfVrf_) GetRibHasConverged() bool {
	if m != nil {
		return m.RibHasConverged
	}
	return false
}

func (m *BgpGlobalProcessInfoAfVrf_) GetRibConvergenceVersion() uint32 {
	if m != nil {
		return m.RibConvergenceVersion
	}
	return 0
}

func (m *BgpGlobalProcessInfoAfVrf_) GetIsRibTableFull() bool {
	if m != nil {
		return m.IsRibTableFull
	}
	return false
}

func (m *BgpGlobalProcessInfoAfVrf_) GetRibTableFullVersion() uint32 {
	if m != nil {
		return m.RibTableFullVersion
	}
	return 0
}

func (m *BgpGlobalProcessInfoAfVrf_) GetNexthopResolutionMinimumPrefixLengthConfigured() bool {
	if m != nil {
		return m.NexthopResolutionMinimumPrefixLengthConfigured
	}
	return false
}

func (m *BgpGlobalProcessInfoAfVrf_) GetNexthopResolutionMinimumPrefixLength() uint32 {
	if m != nil {
		return m.NexthopResolutionMinimumPrefixLength
	}
	return 0
}

func (m *BgpGlobalProcessInfoAfVrf_) GetSelectiveEbgpMultipathEnabled() bool {
	if m != nil {
		return m.SelectiveEbgpMultipathEnabled
	}
	return false
}

func (m *BgpGlobalProcessInfoAfVrf_) GetSelectiveIbgpMultipathEnabled() bool {
	if m != nil {
		return m.SelectiveIbgpMultipathEnabled
	}
	return false
}

func (m *BgpGlobalProcessInfoAfVrf_) GetSelectiveEibgpMultipathEnabled() bool {
	if m != nil {
		return m.SelectiveEibgpMultipathEnabled
	}
	return false
}

func (m *BgpGlobalProcessInfoAfVrf_) GetRibAckedTableVersion() uint32 {
	if m != nil {
		return m.RibAckedTableVersion
	}
	return 0
}

type BgpGlobalProcessInfoAfBag struct {
	VrfName              string                      `protobuf:"bytes,50,opt,name=vrf_name,json=vrfName,proto3" json:"vrf_name,omitempty"`
	AfName               string                      `protobuf:"bytes,51,opt,name=af_name,json=afName,proto3" json:"af_name,omitempty"`
	IsNsrEnabled         bool                        `protobuf:"varint,52,opt,name=is_nsr_enabled,json=isNsrEnabled,proto3" json:"is_nsr_enabled,omitempty"`
	Global               *BgpGlobalProcessInfoAfGbl_ `protobuf:"bytes,53,opt,name=global,proto3" json:"global,omitempty"`
	Vrf                  *BgpGlobalProcessInfoAfVrf_ `protobuf:"bytes,54,opt,name=vrf,proto3" json:"vrf,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *BgpGlobalProcessInfoAfBag) Reset()         { *m = BgpGlobalProcessInfoAfBag{} }
func (m *BgpGlobalProcessInfoAfBag) String() string { return proto.CompactTextString(m) }
func (*BgpGlobalProcessInfoAfBag) ProtoMessage()    {}
func (*BgpGlobalProcessInfoAfBag) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e79225ab6f81729, []int{5}
}

func (m *BgpGlobalProcessInfoAfBag) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BgpGlobalProcessInfoAfBag.Unmarshal(m, b)
}
func (m *BgpGlobalProcessInfoAfBag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BgpGlobalProcessInfoAfBag.Marshal(b, m, deterministic)
}
func (m *BgpGlobalProcessInfoAfBag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpGlobalProcessInfoAfBag.Merge(m, src)
}
func (m *BgpGlobalProcessInfoAfBag) XXX_Size() int {
	return xxx_messageInfo_BgpGlobalProcessInfoAfBag.Size(m)
}
func (m *BgpGlobalProcessInfoAfBag) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpGlobalProcessInfoAfBag.DiscardUnknown(m)
}

var xxx_messageInfo_BgpGlobalProcessInfoAfBag proto.InternalMessageInfo

func (m *BgpGlobalProcessInfoAfBag) GetVrfName() string {
	if m != nil {
		return m.VrfName
	}
	return ""
}

func (m *BgpGlobalProcessInfoAfBag) GetAfName() string {
	if m != nil {
		return m.AfName
	}
	return ""
}

func (m *BgpGlobalProcessInfoAfBag) GetIsNsrEnabled() bool {
	if m != nil {
		return m.IsNsrEnabled
	}
	return false
}

func (m *BgpGlobalProcessInfoAfBag) GetGlobal() *BgpGlobalProcessInfoAfGbl_ {
	if m != nil {
		return m.Global
	}
	return nil
}

func (m *BgpGlobalProcessInfoAfBag) GetVrf() *BgpGlobalProcessInfoAfVrf_ {
	if m != nil {
		return m.Vrf
	}
	return nil
}

func init() {
	proto.RegisterType((*BgpGlobalProcessInfoAfBag_KEYS)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.vrfs.vrf.afs.af.global_af_process_info.bgp_global_process_info_af_bag_KEYS")
	proto.RegisterType((*BgpTimespec)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.vrfs.vrf.afs.af.global_af_process_info.bgp_timespec")
	proto.RegisterType((*BgpRibInstallTimeInfo)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.vrfs.vrf.afs.af.global_af_process_info.bgp_rib_install_time_info")
	proto.RegisterType((*BgpGlobalProcessInfoAfGbl_)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.vrfs.vrf.afs.af.global_af_process_info.bgp_global_process_info_af_gbl_")
	proto.RegisterType((*BgpGlobalProcessInfoAfVrf_)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.vrfs.vrf.afs.af.global_af_process_info.bgp_global_process_info_af_vrf_")
	proto.RegisterType((*BgpGlobalProcessInfoAfBag)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.vrfs.vrf.afs.af.global_af_process_info.bgp_global_process_info_af_bag")
}

func init() {
	proto.RegisterFile("bgp_global_process_info_af_bag.proto", fileDescriptor_1e79225ab6f81729)
}

var fileDescriptor_1e79225ab6f81729 = []byte{
	// 1741 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x58, 0x4b, 0x6f, 0xdc, 0xc8,
	0x11, 0x86, 0x56, 0x1b, 0x4b, 0xee, 0x99, 0xd1, 0x83, 0x7a, 0x71, 0xfc, 0x90, 0xb5, 0x23, 0x6f,
	0xec, 0x64, 0x81, 0x49, 0xe2, 0x57, 0x36, 0x06, 0x82, 0x40, 0x91, 0xed, 0x64, 0x36, 0x91, 0xa1,
	0x50, 0x8e, 0x83, 0x9c, 0x1a, 0x4d, 0xb2, 0xc8, 0x69, 0x88, 0x6c, 0x72, 0xbb, 0xc9, 0x91, 0x75,
	0xc9, 0x29, 0xa7, 0xfc, 0x82, 0x45, 0x80, 0x9c, 0x02, 0xe4, 0x77, 0x04, 0xf9, 0x5d, 0x39, 0x04,
	0xdd, 0xd5, 0x6c, 0x72, 0xc6, 0xb2, 0xe0, 0x93, 0xb3, 0x17, 0x5b, 0xaa, 0xef, 0xfb, 0xaa, 0x8a,
	0xcd, 0xea, 0xaa, 0x12, 0xc9, 0xfd, 0x30, 0x2d, 0x69, 0x9a, 0x15, 0x21, 0xcb, 0x68, 0x29, 0x8b,
	0x08, 0x94, 0xa2, 0x5c, 0x24, 0x05, 0x65, 0x09, 0x0d, 0x59, 0x3a, 0x2e, 0x65, 0x51, 0x15, 0x1e,
	0x8f, 0xb8, 0x8a, 0x0a, 0xca, 0x0b, 0x45, 0xdf, 0x49, 0xca, 0xcb, 0xd9, 0x13, 0xaa, 0x75, 0x45,
	0x09, 0x72, 0x1c, 0xa6, 0xe5, 0x98, 0x0b, 0x55, 0x31, 0x11, 0x81, 0x72, 0x3f, 0xb9, 0x1f, 0xa8,
	0xfe, 0x2f, 0x0e, 0x2f, 0xc7, 0x33, 0x99, 0x28, 0xfd, 0xcf, 0x98, 0x25, 0x6a, 0xcc, 0x92, 0xb1,
	0x0d, 0xca, 0x92, 0xb9, 0xb8, 0xa3, 0xbf, 0x90, 0xc3, 0xeb, 0x53, 0xa2, 0xbf, 0x7b, 0xf9, 0xe7,
	0x33, 0xef, 0x90, 0x0c, 0x5c, 0x04, 0xc1, 0x72, 0xf0, 0x97, 0x0e, 0x96, 0x1e, 0xde, 0x0c, 0xfa,
	0x8d, 0xf1, 0x35, 0xcb, 0xc1, 0x1b, 0x92, 0xd5, 0x99, 0x4c, 0x10, 0xff, 0xcc, 0xe0, 0x2b, 0x33,
	0x99, 0x18, 0x68, 0x8f, 0xac, 0x30, 0x8b, 0x2c, 0x1b, 0xe4, 0x06, 0x33, 0xc0, 0xe8, 0x1b, 0xd2,
	0xd7, 0xf1, 0x2b, 0x9e, 0x83, 0x2a, 0x21, 0xf2, 0x7c, 0xb2, 0xa2, 0x20, 0x2a, 0x44, 0xac, 0x4c,
	0x88, 0x41, 0xd0, 0xfc, 0xea, 0x1d, 0x90, 0x9e, 0x60, 0xa2, 0x68, 0xd0, 0xcf, 0x0c, 0xda, 0x35,
	0x8d, 0xbe, 0xfb, 0x9c, 0x0c, 0xb5, 0x33, 0xc9, 0x43, 0x6a, 0x12, 0xcb, 0x32, 0xe3, 0xd8, 0x3c,
	0x8e, 0xf7, 0xdd, 0x12, 0xe9, 0xd5, 0x65, 0xcc, 0x2a, 0x30, 0x46, 0xe3, 0xbe, 0xf7, 0xe8, 0x62,
	0xfc, 0xc9, 0xce, 0x7a, 0xdc, 0x7d, 0xd0, 0x80, 0x60, 0x2e, 0x6f, 0x78, 0x0e, 0xde, 0xdf, 0x97,
	0x48, 0xbf, 0x9b, 0xb0, 0x79, 0xb8, 0xff, 0x63, 0x6e, 0x3d, 0x9b, 0x8c, 0x49, 0xee, 0x01, 0x59,
	0xb7, 0xbf, 0x42, 0x4c, 0xa3, 0xa2, 0x16, 0x95, 0x79, 0x85, 0x83, 0x60, 0xcd, 0x99, 0x8f, 0xb5,
	0xd5, 0xfb, 0x92, 0xac, 0xe5, 0x45, 0xcc, 0x13, 0xee, 0x78, 0x9f, 0x1b, 0xde, 0xa0, 0xb1, 0x22,
	0xed, 0x01, 0x59, 0xbf, 0xe0, 0xd5, 0x34, 0x96, 0xec, 0x42, 0x58, 0xde, 0x0f, 0xd0, 0x9f, 0x33,
	0x23, 0xf1, 0x90, 0x0c, 0x54, 0xc5, 0x64, 0x45, 0x67, 0x20, 0x15, 0x2f, 0x84, 0x7f, 0xc3, 0xd0,
	0xfa, 0xc6, 0xf8, 0x16, 0x6d, 0x3a, 0x68, 0xc5, 0x64, 0x0a, 0x2d, 0x6b, 0x05, 0x83, 0xa2, 0xd5,
	0xd2, 0x46, 0xff, 0x59, 0x27, 0xf7, 0xae, 0xa9, 0xf3, 0x34, 0xcc, 0xa8, 0x76, 0xa5, 0x22, 0x26,
	0x04, 0x48, 0x5a, 0x82, 0xe4, 0x45, 0x6c, 0x2b, 0x70, 0x60, 0xad, 0xa7, 0xc6, 0xe8, 0xfd, 0x98,
	0x6c, 0x8a, 0x29, 0xad, 0x6a, 0x21, 0x20, 0x73, 0x41, 0xb1, 0x1a, 0xd7, 0xc5, 0xf4, 0x8d, 0xb1,
	0x37, 0xd9, 0x3d, 0x20, 0xeb, 0xea, 0x52, 0x44, 0xa9, 0x2c, 0x1d, 0x73, 0xf9, 0x60, 0x59, 0x3f,
	0xab, 0x35, 0x37, 0x44, 0xfd, 0xac, 0x11, 0x13, 0xb4, 0x94, 0x90, 0xf0, 0x77, 0xa0, 0xec, 0xd1,
	0xf5, 0xb5, 0xf1, 0xd4, 0xda, 0xbc, 0x47, 0x64, 0xc7, 0x90, 0x14, 0xa4, 0x39, 0x88, 0xaa, 0x25,
	0xe3, 0xf9, 0x6d, 0x69, 0xf0, 0x0c, 0x31, 0xa7, 0x69, 0x1c, 0x5b, 0x8d, 0x72, 0x87, 0xd8, 0x72,
	0x95, 0xf7, 0x73, 0xe2, 0x73, 0x51, 0x81, 0xa4, 0x4c, 0xb9, 0x8b, 0x03, 0x82, 0x85, 0x19, 0xc4,
	0xe6, 0x38, 0x57, 0x83, 0x1d, 0x83, 0x1f, 0xa9, 0x09, 0xa2, 0x2f, 0x11, 0xf4, 0x7e, 0x4a, 0xb6,
	0xed, 0x89, 0xe6, 0x11, 0x53, 0x95, 0x13, 0xad, 0x1a, 0x91, 0x87, 0xd8, 0x89, 0x86, 0x1a, 0xc5,
	0x33, 0xb2, 0x67, 0x53, 0x81, 0x78, 0x41, 0x74, 0x13, 0x23, 0x39, 0x78, 0x4e, 0xf7, 0x15, 0xd9,
	0x4c, 0xc3, 0x8c, 0x25, 0xb2, 0x3c, 0xe7, 0x34, 0xe6, 0x4a, 0x5b, 0x7d, 0x62, 0x14, 0x1b, 0x0e,
	0x78, 0x81, 0x76, 0xef, 0x09, 0xd9, 0x6d, 0xc9, 0xb5, 0x02, 0x3a, 0x63, 0x19, 0x8f, 0x79, 0x75,
	0xe9, 0xf7, 0x8c, 0x62, 0xdb, 0xa1, 0x7f, 0x54, 0xf0, 0xd6, 0x62, 0x3a, 0xb5, 0x56, 0xc5, 0xb2,
	0xac, 0xb8, 0xa0, 0x5c, 0x18, 0xa5, 0xdf, 0xc7, 0xd4, 0x1c, 0x7c, 0xa4, 0xd1, 0x09, 0x82, 0xfa,
	0xb5, 0xb4, 0x3a, 0xc5, 0x53, 0xc1, 0x32, 0xca, 0xc3, 0xb4, 0xf4, 0x07, 0x46, 0xb5, 0xe5, 0xc0,
	0x33, 0x83, 0x4d, 0xc2, 0xb4, 0xf4, 0x7e, 0x49, 0x6e, 0xdb, 0x5e, 0x74, 0xc1, 0x78, 0xf5, 0xde,
	0xa1, 0xaf, 0x19, 0xa5, 0x8f, 0x94, 0x3f, 0x31, 0x5e, 0x2d, 0x9c, 0xfb, 0x43, 0xb2, 0xa1, 0x9b,
	0x1c, 0x8b, 0xce, 0xa9, 0x84, 0x6f, 0x6b, 0x50, 0x95, 0xf2, 0xd7, 0xf1, 0x12, 0x49, 0x1e, 0x1e,
	0x45, 0xe7, 0x81, 0xb5, 0xea, 0x6a, 0xb5, 0x4c, 0x45, 0x25, 0x44, 0xc0, 0x67, 0x10, 0xfb, 0x1b,
	0x58, 0xad, 0x48, 0x55, 0x81, 0x35, 0x7b, 0x23, 0x32, 0xd0, 0x5c, 0xa5, 0x9f, 0x5c, 0x0b, 0xfc,
	0x4d, 0xec, 0xb1, 0x92, 0x87, 0x67, 0x59, 0x71, 0xa1, 0xb9, 0xde, 0xbf, 0x96, 0x48, 0xaf, 0xd3,
	0x5f, 0x7d, 0xcf, 0x74, 0xaa, 0xbf, 0x2e, 0x7d, 0xe2, 0x56, 0x75, 0x65, 0x8b, 0x0f, 0x88, 0xe4,
	0xa1, 0x3d, 0x29, 0xef, 0x4b, 0xb2, 0xce, 0x95, 0xbe, 0xc8, 0x39, 0x15, 0x50, 0xd1, 0x28, 0x49,
	0xfd, 0x2d, 0x73, 0xaa, 0x7d, 0xae, 0x4e, 0x41, 0xe6, 0xaf, 0xa1, 0x3a, 0x4e, 0x52, 0xef, 0x2b,
	0xe2, 0x39, 0x4e, 0x0c, 0x99, 0x6d, 0x48, 0xdb, 0x78, 0x40, 0x25, 0xf2, 0x5e, 0x40, 0x86, 0x1d,
	0xe9, 0x19, 0xf1, 0x1d, 0x59, 0x47, 0x81, 0x8e, 0x64, 0xc7, 0x48, 0xb6, 0xad, 0xe4, 0x4c, 0xa3,
	0x4e, 0xf7, 0x35, 0x19, 0x2e, 0xe8, 0x72, 0x26, 0xcf, 0xad, 0x70, 0xd7, 0x08, 0x77, 0xba, 0xc2,
	0x13, 0x26, 0xcf, 0x51, 0xf9, 0x33, 0xb2, 0xe3, 0x94, 0x5c, 0x28, 0x90, 0x95, 0x55, 0xed, 0x19,
	0x95, 0x67, 0x55, 0x13, 0x03, 0xa1, 0xe4, 0x29, 0xd9, 0x73, 0x12, 0x78, 0xc7, 0x55, 0xc5, 0x45,
	0x6a, 0x45, 0xfe, 0x5c, 0x8e, 0x2f, 0x2d, 0xf8, 0xfe, 0xb3, 0xc9, 0x32, 0xa3, 0xdf, 0xd6, 0x20,
	0x2f, 0xad, 0x6e, 0x38, 0xa7, 0x0b, 0xca, 0xec, 0x0f, 0x1a, 0x44, 0xdd, 0x73, 0x72, 0x6b, 0x4e,
	0xd7, 0xbc, 0x2a, 0x54, 0xde, 0x32, 0xca, 0xdd, 0x56, 0x79, 0x8a, 0x30, 0x6a, 0xef, 0x93, 0x35,
	0xd4, 0x86, 0xd2, 0xf2, 0x6f, 0x63, 0x77, 0x32, 0xfc, 0x50, 0x22, 0xeb, 0x88, 0xec, 0xeb, 0xd7,
	0x6d, 0x98, 0x25, 0x64, 0x90, 0x53, 0x51, 0x54, 0x34, 0x29, 0x6a, 0xd1, 0xcc, 0x99, 0x3b, 0x46,
	0x35, 0x94, 0x3c, 0xd4, 0x6f, 0xf6, 0x54, 0x73, 0x5e, 0x17, 0xd5, 0x2b, 0xcd, 0x40, 0x17, 0xbf,
	0x22, 0x77, 0x5b, 0x17, 0xac, 0x9a, 0xbe, 0xe7, 0xe1, 0xae, 0xf1, 0xe0, 0x37, 0x1e, 0x58, 0x35,
	0x9d, 0x77, 0xf0, 0x9c, 0xdc, 0x5a, 0xc8, 0xa1, 0xab, 0xde, 0xc7, 0xa7, 0xec, 0xc6, 0xef, 0x68,
	0x9f, 0x11, 0xed, 0x97, 0x4a, 0x48, 0x31, 0x76, 0x57, 0x79, 0x0f, 0x4f, 0x56, 0xf2, 0x30, 0x80,
	0x54, 0x87, 0xed, 0xe8, 0xbe, 0x26, 0xc3, 0xf9, 0xa4, 0xbb, 0xc2, 0x03, 0xac, 0x9a, 0x4e, 0xc2,
	0x1d, 0x65, 0x53, 0x35, 0x36, 0x53, 0x09, 0x60, 0x55, 0x5f, 0xb4, 0x55, 0x83, 0x59, 0x4a, 0x80,
	0xf9, 0xaa, 0x31, 0x81, 0x24, 0x24, 0x12, 0xd4, 0xd4, 0x8a, 0x46, 0xed, 0xdb, 0xd7, 0x71, 0x02,
	0x04, 0xaf, 0x8a, 0x14, 0xd6, 0x79, 0x69, 0x45, 0x87, 0x0b, 0x91, 0x7e, 0x5d, 0xe7, 0xe5, 0xfc,
	0x65, 0x40, 0x89, 0xbe, 0xc0, 0x1d, 0xd9, 0xfd, 0xf6, 0x32, 0x18, 0xd9, 0x51, 0x96, 0x39, 0xe5,
	0xe8, 0xbf, 0xbd, 0x6b, 0x87, 0xb8, 0xde, 0x3d, 0xbd, 0x1f, 0x92, 0xf5, 0x4a, 0xf7, 0x48, 0xca,
	0x15, 0x65, 0x51, 0xc5, 0x67, 0xb8, 0xe8, 0xad, 0xea, 0x85, 0x20, 0xcc, 0x60, 0xa2, 0x8e, 0x8c,
	0x51, 0xef, 0xaa, 0x96, 0x17, 0xdb, 0xe1, 0xbd, 0x82, 0x84, 0x58, 0x8f, 0x4c, 0x84, 0xda, 0x91,
	0x6d, 0x8a, 0xd2, 0x18, 0x9b, 0x81, 0x7d, 0x97, 0x10, 0x19, 0x3b, 0x06, 0x4e, 0xeb, 0x9b, 0x32,
	0x6e, 0xe0, 0x7b, 0xd8, 0x25, 0x1b, 0x1c, 0x07, 0xb4, 0x6e, 0x4f, 0x0d, 0xe1, 0x21, 0xd9, 0x10,
	0x4a, 0x57, 0xbd, 0x98, 0x2d, 0xec, 0x37, 0x6b, 0x42, 0xc9, 0xe3, 0x42, 0xcc, 0x1a, 0xe6, 0x3e,
	0xe9, 0x69, 0x26, 0x57, 0x86, 0x6c, 0xe7, 0xf1, 0x4d, 0xa1, 0xe4, 0x44, 0x69, 0x9a, 0xf7, 0x9c,
	0x0c, 0xa3, 0x8c, 0xeb, 0x7d, 0x40, 0x42, 0x92, 0x41, 0x54, 0xf1, 0x42, 0x2c, 0x0c, 0xe2, 0x3d,
	0x24, 0x04, 0x0e, 0xef, 0x4c, 0xd5, 0x98, 0xe5, 0x25, 0x08, 0xdd, 0x23, 0xe6, 0xe7, 0xf0, 0x86,
	0x03, 0x1a, 0xf2, 0x21, 0x19, 0x80, 0x3e, 0xfe, 0x98, 0x63, 0xdf, 0x36, 0xe3, 0x77, 0x10, 0xf4,
	0xb5, 0xf1, 0x85, 0xb5, 0x99, 0x3f, 0x14, 0xe6, 0x48, 0x3d, 0x24, 0xf1, 0x2e, 0xe9, 0x27, 0x64,
	0x8b, 0xa5, 0xa9, 0x84, 0x94, 0x55, 0xa0, 0x5a, 0x6a, 0x1f, 0x6b, 0xa6, 0x85, 0x9c, 0x60, 0x4c,
	0xb6, 0xe2, 0x4b, 0xc1, 0x72, 0x1e, 0xd1, 0x1c, 0x62, 0x97, 0x29, 0x0e, 0xd8, 0x4d, 0x0b, 0x9d,
	0x40, 0xdc, 0xd9, 0x4b, 0xba, 0x7c, 0xb3, 0xbc, 0xcc, 0x58, 0x66, 0xe6, 0xea, 0x20, 0xf0, 0x5a,
	0xc1, 0xc4, 0x22, 0xde, 0x2f, 0xc8, 0xb0, 0xab, 0xd0, 0x33, 0x45, 0x52, 0x59, 0x0b, 0x7d, 0x00,
	0x66, 0xb4, 0xae, 0x06, 0xbb, 0xad, 0x4c, 0x2f, 0xc6, 0x32, 0x40, 0x54, 0x5f, 0x9d, 0xf7, 0xa5,
	0x33, 0x96, 0xd5, 0x60, 0x07, 0xed, 0xf6, 0x82, 0xf0, 0xad, 0xc6, 0xbc, 0x6f, 0xc8, 0xa8, 0x2b,
	0xc3, 0x95, 0x93, 0x47, 0x0b, 0xa1, 0x37, 0x4d, 0xe8, 0xfd, 0xd6, 0xc3, 0xa9, 0xe5, 0xcd, 0xa5,
	0xf0, 0x8a, 0x1c, 0x5c, 0xe3, 0x0b, 0x73, 0xf1, 0x4c, 0x2e, 0x77, 0x3e, 0xe0, 0x09, 0x73, 0xb2,
	0xdb, 0xc2, 0x94, 0x61, 0xb1, 0x81, 0x4c, 0x21, 0xb6, 0x63, 0x53, 0x6f, 0x0b, 0xbf, 0x65, 0xa6,
	0xe4, 0x8c, 0x59, 0xaf, 0x4b, 0x9a, 0xdb, 0xf0, 0xf4, 0x20, 0x6f, 0x0a, 0x79, 0xdb, 0x35, 0xa7,
	0xe3, 0x16, 0x6d, 0xea, 0xf9, 0x47, 0x64, 0x93, 0x2b, 0x33, 0xc0, 0xf1, 0x96, 0x25, 0x75, 0x96,
	0x99, 0xe9, 0xb9, 0x1a, 0xac, 0x71, 0x15, 0xf0, 0xf0, 0x8d, 0x36, 0xbf, 0xaa, 0xb3, 0xcc, 0x7b,
	0x4c, 0x76, 0xe7, 0x79, 0x2e, 0x02, 0x0e, 0xcd, 0x2d, 0xd9, 0x61, 0x37, 0xfe, 0xcf, 0xc9, 0x63,
	0x01, 0xef, 0xaa, 0x69, 0x51, 0x52, 0x09, 0xaa, 0xc8, 0x6a, 0x73, 0x21, 0x72, 0x2e, 0x78, 0x5e,
	0xe7, 0x76, 0x67, 0xa6, 0x19, 0x88, 0xb4, 0xd2, 0x0d, 0x4e, 0x24, 0x3c, 0xad, 0x25, 0xc4, 0x66,
	0xa0, 0xae, 0x06, 0x63, 0x2b, 0x0d, 0x9c, 0xf2, 0x04, 0x85, 0xb8, 0x50, 0xff, 0xde, 0xc8, 0x8e,
	0x9d, 0xca, 0x7b, 0x4b, 0x1e, 0x7e, 0x6c, 0x30, 0x3b, 0x7d, 0xef, 0x7f, 0x4c, 0x04, 0xef, 0x37,
	0xe4, 0x40, 0x81, 0xb9, 0xac, 0x33, 0xa0, 0xe6, 0xd6, 0xe5, 0x75, 0x56, 0x71, 0xd3, 0x9d, 0x9b,
	0xea, 0x1f, 0x9a, 0x8c, 0xef, 0x3a, 0xde, 0xcb, 0x30, 0x2d, 0x4f, 0x1a, 0x56, 0x73, 0x13, 0xe6,
	0x1c, 0xf1, 0xab, 0x1d, 0xdd, 0x5a, 0x70, 0x34, 0xb9, 0xca, 0xd1, 0x84, 0x7c, 0xd1, 0xc9, 0xe8,
	0x03, 0x9e, 0x6e, 0x63, 0xb5, 0xb6, 0x29, 0xf1, 0xab, 0x5c, 0x3d, 0xc5, 0xca, 0x61, 0xd1, 0xb9,
	0xbe, 0x2e, 0x73, 0xad, 0xf6, 0x8e, 0x9b, 0x87, 0x47, 0x1a, 0x7d, 0xd3, 0x69, 0xb9, 0xa3, 0x7f,
	0x2f, 0x93, 0xfd, 0xeb, 0xbf, 0x55, 0xcc, 0x7d, 0x81, 0x78, 0xf4, 0xc1, 0x2f, 0x10, 0x8f, 0xbb,
	0x5f, 0x20, 0xf4, 0x12, 0xc2, 0x15, 0xd5, 0x2d, 0xb6, 0x79, 0x8a, 0x27, 0xcd, 0x9e, 0xf8, 0x5a,
	0xc9, 0x26, 0xe7, 0x7f, 0x2e, 0x91, 0x1b, 0x18, 0xd8, 0x7f, 0x6a, 0x56, 0xde, 0xbf, 0x7d, 0xea,
	0x95, 0xf7, 0x9a, 0x3f, 0x5d, 0x03, 0x9b, 0x9a, 0xf7, 0x8f, 0x25, 0xb2, 0x3c, 0x93, 0x89, 0xff,
	0xec, 0x7b, 0x95, 0xa2, 0x7e, 0x25, 0x81, 0xce, 0x2b, 0xbc, 0x61, 0xbe, 0x6f, 0x3d, 0xfe, 0x5f,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x43, 0xb8, 0x0c, 0xf0, 0x07, 0x13, 0x00, 0x00,
}
