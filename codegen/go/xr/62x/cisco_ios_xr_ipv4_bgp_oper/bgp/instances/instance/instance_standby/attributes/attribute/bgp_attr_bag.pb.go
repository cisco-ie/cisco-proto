/*
Copyright 2019 Cisco Systems

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: bgp_attr_bag.proto

package cisco_ios_xr_ipv4_bgp_oper_bgp_instances_instance_instance_standby_attributes_attribute

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type BgpAttrBag_KEYS struct {
	InstanceName         string   `protobuf:"bytes,1,opt,name=instance_name,json=instanceName,proto3" json:"instance_name,omitempty"`
	AttributeIid         uint32   `protobuf:"varint,2,opt,name=attribute_iid,json=attributeIid,proto3" json:"attribute_iid,omitempty"`
	AttributeCacheBucket uint32   `protobuf:"varint,3,opt,name=attribute_cache_bucket,json=attributeCacheBucket,proto3" json:"attribute_cache_bucket,omitempty"`
	AttributeCacheId     uint32   `protobuf:"varint,4,opt,name=attribute_cache_id,json=attributeCacheId,proto3" json:"attribute_cache_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BgpAttrBag_KEYS) Reset()         { *m = BgpAttrBag_KEYS{} }
func (m *BgpAttrBag_KEYS) String() string { return proto.CompactTextString(m) }
func (*BgpAttrBag_KEYS) ProtoMessage()    {}
func (*BgpAttrBag_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_a044dbc210c8cfc7, []int{0}
}

func (m *BgpAttrBag_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BgpAttrBag_KEYS.Unmarshal(m, b)
}
func (m *BgpAttrBag_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BgpAttrBag_KEYS.Marshal(b, m, deterministic)
}
func (m *BgpAttrBag_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpAttrBag_KEYS.Merge(m, src)
}
func (m *BgpAttrBag_KEYS) XXX_Size() int {
	return xxx_messageInfo_BgpAttrBag_KEYS.Size(m)
}
func (m *BgpAttrBag_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpAttrBag_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_BgpAttrBag_KEYS proto.InternalMessageInfo

func (m *BgpAttrBag_KEYS) GetInstanceName() string {
	if m != nil {
		return m.InstanceName
	}
	return ""
}

func (m *BgpAttrBag_KEYS) GetAttributeIid() uint32 {
	if m != nil {
		return m.AttributeIid
	}
	return 0
}

func (m *BgpAttrBag_KEYS) GetAttributeCacheBucket() uint32 {
	if m != nil {
		return m.AttributeCacheBucket
	}
	return 0
}

func (m *BgpAttrBag_KEYS) GetAttributeCacheId() uint32 {
	if m != nil {
		return m.AttributeCacheId
	}
	return 0
}

type BgpPedistlblEntry_ struct {
	PeAddress            string   `protobuf:"bytes,1,opt,name=pe_address,json=peAddress,proto3" json:"pe_address,omitempty"`
	Label                uint32   `protobuf:"varint,2,opt,name=label,proto3" json:"label,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BgpPedistlblEntry_) Reset()         { *m = BgpPedistlblEntry_{} }
func (m *BgpPedistlblEntry_) String() string { return proto.CompactTextString(m) }
func (*BgpPedistlblEntry_) ProtoMessage()    {}
func (*BgpPedistlblEntry_) Descriptor() ([]byte, []int) {
	return fileDescriptor_a044dbc210c8cfc7, []int{1}
}

func (m *BgpPedistlblEntry_) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BgpPedistlblEntry_.Unmarshal(m, b)
}
func (m *BgpPedistlblEntry_) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BgpPedistlblEntry_.Marshal(b, m, deterministic)
}
func (m *BgpPedistlblEntry_) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpPedistlblEntry_.Merge(m, src)
}
func (m *BgpPedistlblEntry_) XXX_Size() int {
	return xxx_messageInfo_BgpPedistlblEntry_.Size(m)
}
func (m *BgpPedistlblEntry_) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpPedistlblEntry_.DiscardUnknown(m)
}

var xxx_messageInfo_BgpPedistlblEntry_ proto.InternalMessageInfo

func (m *BgpPedistlblEntry_) GetPeAddress() string {
	if m != nil {
		return m.PeAddress
	}
	return ""
}

func (m *BgpPedistlblEntry_) GetLabel() uint32 {
	if m != nil {
		return m.Label
	}
	return 0
}

type BgpBindingSidT struct {
	Type                 string   `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Label                uint32   `protobuf:"varint,2,opt,name=label,proto3" json:"label,omitempty"`
	Ipv6Address          string   `protobuf:"bytes,3,opt,name=ipv6_address,json=ipv6Address,proto3" json:"ipv6_address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BgpBindingSidT) Reset()         { *m = BgpBindingSidT{} }
func (m *BgpBindingSidT) String() string { return proto.CompactTextString(m) }
func (*BgpBindingSidT) ProtoMessage()    {}
func (*BgpBindingSidT) Descriptor() ([]byte, []int) {
	return fileDescriptor_a044dbc210c8cfc7, []int{2}
}

func (m *BgpBindingSidT) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BgpBindingSidT.Unmarshal(m, b)
}
func (m *BgpBindingSidT) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BgpBindingSidT.Marshal(b, m, deterministic)
}
func (m *BgpBindingSidT) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpBindingSidT.Merge(m, src)
}
func (m *BgpBindingSidT) XXX_Size() int {
	return xxx_messageInfo_BgpBindingSidT.Size(m)
}
func (m *BgpBindingSidT) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpBindingSidT.DiscardUnknown(m)
}

var xxx_messageInfo_BgpBindingSidT proto.InternalMessageInfo

func (m *BgpBindingSidT) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *BgpBindingSidT) GetLabel() uint32 {
	if m != nil {
		return m.Label
	}
	return 0
}

func (m *BgpBindingSidT) GetIpv6Address() string {
	if m != nil {
		return m.Ipv6Address
	}
	return ""
}

type SrSid_ struct {
	Type                 string   `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Label                uint32   `protobuf:"varint,2,opt,name=label,proto3" json:"label,omitempty"`
	Ipv4Address          string   `protobuf:"bytes,3,opt,name=ipv4_address,json=ipv4Address,proto3" json:"ipv4_address,omitempty"`
	Ipv6Address          string   `protobuf:"bytes,4,opt,name=ipv6_address,json=ipv6Address,proto3" json:"ipv6_address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SrSid_) Reset()         { *m = SrSid_{} }
func (m *SrSid_) String() string { return proto.CompactTextString(m) }
func (*SrSid_) ProtoMessage()    {}
func (*SrSid_) Descriptor() ([]byte, []int) {
	return fileDescriptor_a044dbc210c8cfc7, []int{3}
}

func (m *SrSid_) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SrSid_.Unmarshal(m, b)
}
func (m *SrSid_) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SrSid_.Marshal(b, m, deterministic)
}
func (m *SrSid_) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SrSid_.Merge(m, src)
}
func (m *SrSid_) XXX_Size() int {
	return xxx_messageInfo_SrSid_.Size(m)
}
func (m *SrSid_) XXX_DiscardUnknown() {
	xxx_messageInfo_SrSid_.DiscardUnknown(m)
}

var xxx_messageInfo_SrSid_ proto.InternalMessageInfo

func (m *SrSid_) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *SrSid_) GetLabel() uint32 {
	if m != nil {
		return m.Label
	}
	return 0
}

func (m *SrSid_) GetIpv4Address() string {
	if m != nil {
		return m.Ipv4Address
	}
	return ""
}

func (m *SrSid_) GetIpv6Address() string {
	if m != nil {
		return m.Ipv6Address
	}
	return ""
}

type SrExppath_ struct {
	Weight               uint32    `protobuf:"varint,1,opt,name=weight,proto3" json:"weight,omitempty"`
	Segment              []*SrSid_ `protobuf:"bytes,2,rep,name=segment,proto3" json:"segment,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *SrExppath_) Reset()         { *m = SrExppath_{} }
func (m *SrExppath_) String() string { return proto.CompactTextString(m) }
func (*SrExppath_) ProtoMessage()    {}
func (*SrExppath_) Descriptor() ([]byte, []int) {
	return fileDescriptor_a044dbc210c8cfc7, []int{4}
}

func (m *SrExppath_) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SrExppath_.Unmarshal(m, b)
}
func (m *SrExppath_) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SrExppath_.Marshal(b, m, deterministic)
}
func (m *SrExppath_) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SrExppath_.Merge(m, src)
}
func (m *SrExppath_) XXX_Size() int {
	return xxx_messageInfo_SrExppath_.Size(m)
}
func (m *SrExppath_) XXX_DiscardUnknown() {
	xxx_messageInfo_SrExppath_.DiscardUnknown(m)
}

var xxx_messageInfo_SrExppath_ proto.InternalMessageInfo

func (m *SrExppath_) GetWeight() uint32 {
	if m != nil {
		return m.Weight
	}
	return 0
}

func (m *SrExppath_) GetSegment() []*SrSid_ {
	if m != nil {
		return m.Segment
	}
	return nil
}

type BgpSrpolicyEntry_ struct {
	TunnelEncapType      uint32          `protobuf:"varint,1,opt,name=tunnel_encap_type,json=tunnelEncapType,proto3" json:"tunnel_encap_type,omitempty"`
	BindingSid           *BgpBindingSidT `protobuf:"bytes,2,opt,name=binding_sid,json=bindingSid,proto3" json:"binding_sid,omitempty"`
	AllocatedBindingSid  *BgpBindingSidT `protobuf:"bytes,3,opt,name=allocated_binding_sid,json=allocatedBindingSid,proto3" json:"allocated_binding_sid,omitempty"`
	Preference           uint32          `protobuf:"varint,4,opt,name=preference,proto3" json:"preference,omitempty"`
	State                bool            `protobuf:"varint,5,opt,name=state,proto3" json:"state,omitempty"`
	RequestState         string          `protobuf:"bytes,6,opt,name=request_state,json=requestState,proto3" json:"request_state,omitempty"`
	SegmentList          []*SrExppath_   `protobuf:"bytes,7,rep,name=segment_list,json=segmentList,proto3" json:"segment_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *BgpSrpolicyEntry_) Reset()         { *m = BgpSrpolicyEntry_{} }
func (m *BgpSrpolicyEntry_) String() string { return proto.CompactTextString(m) }
func (*BgpSrpolicyEntry_) ProtoMessage()    {}
func (*BgpSrpolicyEntry_) Descriptor() ([]byte, []int) {
	return fileDescriptor_a044dbc210c8cfc7, []int{5}
}

func (m *BgpSrpolicyEntry_) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BgpSrpolicyEntry_.Unmarshal(m, b)
}
func (m *BgpSrpolicyEntry_) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BgpSrpolicyEntry_.Marshal(b, m, deterministic)
}
func (m *BgpSrpolicyEntry_) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpSrpolicyEntry_.Merge(m, src)
}
func (m *BgpSrpolicyEntry_) XXX_Size() int {
	return xxx_messageInfo_BgpSrpolicyEntry_.Size(m)
}
func (m *BgpSrpolicyEntry_) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpSrpolicyEntry_.DiscardUnknown(m)
}

var xxx_messageInfo_BgpSrpolicyEntry_ proto.InternalMessageInfo

func (m *BgpSrpolicyEntry_) GetTunnelEncapType() uint32 {
	if m != nil {
		return m.TunnelEncapType
	}
	return 0
}

func (m *BgpSrpolicyEntry_) GetBindingSid() *BgpBindingSidT {
	if m != nil {
		return m.BindingSid
	}
	return nil
}

func (m *BgpSrpolicyEntry_) GetAllocatedBindingSid() *BgpBindingSidT {
	if m != nil {
		return m.AllocatedBindingSid
	}
	return nil
}

func (m *BgpSrpolicyEntry_) GetPreference() uint32 {
	if m != nil {
		return m.Preference
	}
	return 0
}

func (m *BgpSrpolicyEntry_) GetState() bool {
	if m != nil {
		return m.State
	}
	return false
}

func (m *BgpSrpolicyEntry_) GetRequestState() string {
	if m != nil {
		return m.RequestState
	}
	return ""
}

func (m *BgpSrpolicyEntry_) GetSegmentList() []*SrExppath_ {
	if m != nil {
		return m.SegmentList
	}
	return nil
}

type BgpTunencapEntry_ struct {
	SrPolicy             *BgpSrpolicyEntry_ `protobuf:"bytes,1,opt,name=sr_policy,json=srPolicy,proto3" json:"sr_policy,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *BgpTunencapEntry_) Reset()         { *m = BgpTunencapEntry_{} }
func (m *BgpTunencapEntry_) String() string { return proto.CompactTextString(m) }
func (*BgpTunencapEntry_) ProtoMessage()    {}
func (*BgpTunencapEntry_) Descriptor() ([]byte, []int) {
	return fileDescriptor_a044dbc210c8cfc7, []int{6}
}

func (m *BgpTunencapEntry_) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BgpTunencapEntry_.Unmarshal(m, b)
}
func (m *BgpTunencapEntry_) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BgpTunencapEntry_.Marshal(b, m, deterministic)
}
func (m *BgpTunencapEntry_) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpTunencapEntry_.Merge(m, src)
}
func (m *BgpTunencapEntry_) XXX_Size() int {
	return xxx_messageInfo_BgpTunencapEntry_.Size(m)
}
func (m *BgpTunencapEntry_) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpTunencapEntry_.DiscardUnknown(m)
}

var xxx_messageInfo_BgpTunencapEntry_ proto.InternalMessageInfo

func (m *BgpTunencapEntry_) GetSrPolicy() *BgpSrpolicyEntry_ {
	if m != nil {
		return m.SrPolicy
	}
	return nil
}

type BgpCommonAttrEntry_ struct {
	IsMetricPresent               bool                  `protobuf:"varint,1,opt,name=is_metric_present,json=isMetricPresent,proto3" json:"is_metric_present,omitempty"`
	IsLocalPrefPresent            bool                  `protobuf:"varint,2,opt,name=is_local_pref_present,json=isLocalPrefPresent,proto3" json:"is_local_pref_present,omitempty"`
	IsAtomicAggregatePresent      bool                  `protobuf:"varint,3,opt,name=is_atomic_aggregate_present,json=isAtomicAggregatePresent,proto3" json:"is_atomic_aggregate_present,omitempty"`
	IsAggregatorPresent           bool                  `protobuf:"varint,4,opt,name=is_aggregator_present,json=isAggregatorPresent,proto3" json:"is_aggregator_present,omitempty"`
	IsOriginPresent               bool                  `protobuf:"varint,5,opt,name=is_origin_present,json=isOriginPresent,proto3" json:"is_origin_present,omitempty"`
	IsAsPathPresent               bool                  `protobuf:"varint,6,opt,name=is_as_path_present,json=isAsPathPresent,proto3" json:"is_as_path_present,omitempty"`
	IsCommunityPresent            bool                  `protobuf:"varint,7,opt,name=is_community_present,json=isCommunityPresent,proto3" json:"is_community_present,omitempty"`
	IsExtendedCommunityPresent    bool                  `protobuf:"varint,8,opt,name=is_extended_community_present,json=isExtendedCommunityPresent,proto3" json:"is_extended_community_present,omitempty"`
	IsSsaPresent                  bool                  `protobuf:"varint,9,opt,name=is_ssa_present,json=isSsaPresent,proto3" json:"is_ssa_present,omitempty"`
	IsConnectorPresent            bool                  `protobuf:"varint,10,opt,name=is_connector_present,json=isConnectorPresent,proto3" json:"is_connector_present,omitempty"`
	IsPmsiPresent                 bool                  `protobuf:"varint,11,opt,name=is_pmsi_present,json=isPmsiPresent,proto3" json:"is_pmsi_present,omitempty"`
	IsPppmpPresent                bool                  `protobuf:"varint,12,opt,name=is_pppmp_present,json=isPppmpPresent,proto3" json:"is_pppmp_present,omitempty"`
	IsAigpPresent                 bool                  `protobuf:"varint,13,opt,name=is_aigp_present,json=isAigpPresent,proto3" json:"is_aigp_present,omitempty"`
	IsPeDistinguisherLabelPresent bool                  `protobuf:"varint,14,opt,name=is_pe_distinguisher_label_present,json=isPeDistinguisherLabelPresent,proto3" json:"is_pe_distinguisher_label_present,omitempty"`
	IsLsAttributePresent          bool                  `protobuf:"varint,15,opt,name=is_ls_attribute_present,json=isLsAttributePresent,proto3" json:"is_ls_attribute_present,omitempty"`
	IsLabelIndexPresent           bool                  `protobuf:"varint,16,opt,name=is_label_index_present,json=isLabelIndexPresent,proto3" json:"is_label_index_present,omitempty"`
	NeighborAs                    uint32                `protobuf:"varint,17,opt,name=neighbor_as,json=neighborAs,proto3" json:"neighbor_as,omitempty"`
	AggregatorAs                  uint32                `protobuf:"varint,18,opt,name=aggregator_as,json=aggregatorAs,proto3" json:"aggregator_as,omitempty"`
	AggregatorAddress             string                `protobuf:"bytes,19,opt,name=aggregator_address,json=aggregatorAddress,proto3" json:"aggregator_address,omitempty"`
	Metric                        uint32                `protobuf:"varint,20,opt,name=metric,proto3" json:"metric,omitempty"`
	LocalPreference               uint32                `protobuf:"varint,21,opt,name=local_preference,json=localPreference,proto3" json:"local_preference,omitempty"`
	Origin                        uint32                `protobuf:"varint,22,opt,name=origin,proto3" json:"origin,omitempty"`
	AsPath                        string                `protobuf:"bytes,23,opt,name=as_path,json=asPath,proto3" json:"as_path,omitempty"`
	Community                     []uint32              `protobuf:"varint,24,rep,packed,name=community,proto3" json:"community,omitempty"`
	ExtendedCommunityFlags        uint32                `protobuf:"varint,25,opt,name=extended_community_flags,json=extendedCommunityFlags,proto3" json:"extended_community_flags,omitempty"`
	ExtendedCommunity             []uint32              `protobuf:"varint,26,rep,packed,name=extended_community,json=extendedCommunity,proto3" json:"extended_community,omitempty"`
	UnknownAttribute              []uint32              `protobuf:"varint,27,rep,packed,name=unknown_attribute,json=unknownAttribute,proto3" json:"unknown_attribute,omitempty"`
	Cluster                       []uint32              `protobuf:"varint,28,rep,packed,name=cluster,proto3" json:"cluster,omitempty"`
	Originator                    string                `protobuf:"bytes,29,opt,name=originator,proto3" json:"originator,omitempty"`
	L2Tpv3SessionId               uint32                `protobuf:"varint,30,opt,name=l2tpv3_session_id,json=l2tpv3SessionId,proto3" json:"l2tpv3_session_id,omitempty"`
	L2Tpv3Cookie                  []uint32              `protobuf:"varint,31,rep,packed,name=l2tpv3_cookie,json=l2tpv3Cookie,proto3" json:"l2tpv3_cookie,omitempty"`
	ConnectorType                 uint32                `protobuf:"varint,32,opt,name=connector_type,json=connectorType,proto3" json:"connector_type,omitempty"`
	ConnectorValue                []uint32              `protobuf:"varint,33,rep,packed,name=connector_value,json=connectorValue,proto3" json:"connector_value,omitempty"`
	AigpMetricValue               uint64                `protobuf:"varint,34,opt,name=aigp_metric_value,json=aigpMetricValue,proto3" json:"aigp_metric_value,omitempty"`
	PmsiType                      uint32                `protobuf:"varint,35,opt,name=pmsi_type,json=pmsiType,proto3" json:"pmsi_type,omitempty"`
	PmsiFlags                     uint32                `protobuf:"varint,36,opt,name=pmsi_flags,json=pmsiFlags,proto3" json:"pmsi_flags,omitempty"`
	PmsiLabel                     uint32                `protobuf:"varint,37,opt,name=pmsi_label,json=pmsiLabel,proto3" json:"pmsi_label,omitempty"`
	PmsiValue                     []uint32              `protobuf:"varint,38,rep,packed,name=pmsi_value,json=pmsiValue,proto3" json:"pmsi_value,omitempty"`
	PpmPvalue                     uint32                `protobuf:"varint,39,opt,name=ppm_pvalue,json=ppmPvalue,proto3" json:"ppm_pvalue,omitempty"`
	PeDistinguisherLabel          []*BgpPedistlblEntry_ `protobuf:"bytes,40,rep,name=pe_distinguisher_label,json=peDistinguisherLabel,proto3" json:"pe_distinguisher_label,omitempty"`
	LsAttr                        []uint32              `protobuf:"varint,41,rep,packed,name=ls_attr,json=lsAttr,proto3" json:"ls_attr,omitempty"`
	LabelIndexAttr                []uint32              `protobuf:"varint,42,rep,packed,name=label_index_attr,json=labelIndexAttr,proto3" json:"label_index_attr,omitempty"`
	TunnelEncap                   *BgpTunencapEntry_    `protobuf:"bytes,43,opt,name=tunnel_encap,json=tunnelEncap,proto3" json:"tunnel_encap,omitempty"`
	XXX_NoUnkeyedLiteral          struct{}              `json:"-"`
	XXX_unrecognized              []byte                `json:"-"`
	XXX_sizecache                 int32                 `json:"-"`
}

func (m *BgpCommonAttrEntry_) Reset()         { *m = BgpCommonAttrEntry_{} }
func (m *BgpCommonAttrEntry_) String() string { return proto.CompactTextString(m) }
func (*BgpCommonAttrEntry_) ProtoMessage()    {}
func (*BgpCommonAttrEntry_) Descriptor() ([]byte, []int) {
	return fileDescriptor_a044dbc210c8cfc7, []int{7}
}

func (m *BgpCommonAttrEntry_) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BgpCommonAttrEntry_.Unmarshal(m, b)
}
func (m *BgpCommonAttrEntry_) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BgpCommonAttrEntry_.Marshal(b, m, deterministic)
}
func (m *BgpCommonAttrEntry_) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpCommonAttrEntry_.Merge(m, src)
}
func (m *BgpCommonAttrEntry_) XXX_Size() int {
	return xxx_messageInfo_BgpCommonAttrEntry_.Size(m)
}
func (m *BgpCommonAttrEntry_) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpCommonAttrEntry_.DiscardUnknown(m)
}

var xxx_messageInfo_BgpCommonAttrEntry_ proto.InternalMessageInfo

func (m *BgpCommonAttrEntry_) GetIsMetricPresent() bool {
	if m != nil {
		return m.IsMetricPresent
	}
	return false
}

func (m *BgpCommonAttrEntry_) GetIsLocalPrefPresent() bool {
	if m != nil {
		return m.IsLocalPrefPresent
	}
	return false
}

func (m *BgpCommonAttrEntry_) GetIsAtomicAggregatePresent() bool {
	if m != nil {
		return m.IsAtomicAggregatePresent
	}
	return false
}

func (m *BgpCommonAttrEntry_) GetIsAggregatorPresent() bool {
	if m != nil {
		return m.IsAggregatorPresent
	}
	return false
}

func (m *BgpCommonAttrEntry_) GetIsOriginPresent() bool {
	if m != nil {
		return m.IsOriginPresent
	}
	return false
}

func (m *BgpCommonAttrEntry_) GetIsAsPathPresent() bool {
	if m != nil {
		return m.IsAsPathPresent
	}
	return false
}

func (m *BgpCommonAttrEntry_) GetIsCommunityPresent() bool {
	if m != nil {
		return m.IsCommunityPresent
	}
	return false
}

func (m *BgpCommonAttrEntry_) GetIsExtendedCommunityPresent() bool {
	if m != nil {
		return m.IsExtendedCommunityPresent
	}
	return false
}

func (m *BgpCommonAttrEntry_) GetIsSsaPresent() bool {
	if m != nil {
		return m.IsSsaPresent
	}
	return false
}

func (m *BgpCommonAttrEntry_) GetIsConnectorPresent() bool {
	if m != nil {
		return m.IsConnectorPresent
	}
	return false
}

func (m *BgpCommonAttrEntry_) GetIsPmsiPresent() bool {
	if m != nil {
		return m.IsPmsiPresent
	}
	return false
}

func (m *BgpCommonAttrEntry_) GetIsPppmpPresent() bool {
	if m != nil {
		return m.IsPppmpPresent
	}
	return false
}

func (m *BgpCommonAttrEntry_) GetIsAigpPresent() bool {
	if m != nil {
		return m.IsAigpPresent
	}
	return false
}

func (m *BgpCommonAttrEntry_) GetIsPeDistinguisherLabelPresent() bool {
	if m != nil {
		return m.IsPeDistinguisherLabelPresent
	}
	return false
}

func (m *BgpCommonAttrEntry_) GetIsLsAttributePresent() bool {
	if m != nil {
		return m.IsLsAttributePresent
	}
	return false
}

func (m *BgpCommonAttrEntry_) GetIsLabelIndexPresent() bool {
	if m != nil {
		return m.IsLabelIndexPresent
	}
	return false
}

func (m *BgpCommonAttrEntry_) GetNeighborAs() uint32 {
	if m != nil {
		return m.NeighborAs
	}
	return 0
}

func (m *BgpCommonAttrEntry_) GetAggregatorAs() uint32 {
	if m != nil {
		return m.AggregatorAs
	}
	return 0
}

func (m *BgpCommonAttrEntry_) GetAggregatorAddress() string {
	if m != nil {
		return m.AggregatorAddress
	}
	return ""
}

func (m *BgpCommonAttrEntry_) GetMetric() uint32 {
	if m != nil {
		return m.Metric
	}
	return 0
}

func (m *BgpCommonAttrEntry_) GetLocalPreference() uint32 {
	if m != nil {
		return m.LocalPreference
	}
	return 0
}

func (m *BgpCommonAttrEntry_) GetOrigin() uint32 {
	if m != nil {
		return m.Origin
	}
	return 0
}

func (m *BgpCommonAttrEntry_) GetAsPath() string {
	if m != nil {
		return m.AsPath
	}
	return ""
}

func (m *BgpCommonAttrEntry_) GetCommunity() []uint32 {
	if m != nil {
		return m.Community
	}
	return nil
}

func (m *BgpCommonAttrEntry_) GetExtendedCommunityFlags() uint32 {
	if m != nil {
		return m.ExtendedCommunityFlags
	}
	return 0
}

func (m *BgpCommonAttrEntry_) GetExtendedCommunity() []uint32 {
	if m != nil {
		return m.ExtendedCommunity
	}
	return nil
}

func (m *BgpCommonAttrEntry_) GetUnknownAttribute() []uint32 {
	if m != nil {
		return m.UnknownAttribute
	}
	return nil
}

func (m *BgpCommonAttrEntry_) GetCluster() []uint32 {
	if m != nil {
		return m.Cluster
	}
	return nil
}

func (m *BgpCommonAttrEntry_) GetOriginator() string {
	if m != nil {
		return m.Originator
	}
	return ""
}

func (m *BgpCommonAttrEntry_) GetL2Tpv3SessionId() uint32 {
	if m != nil {
		return m.L2Tpv3SessionId
	}
	return 0
}

func (m *BgpCommonAttrEntry_) GetL2Tpv3Cookie() []uint32 {
	if m != nil {
		return m.L2Tpv3Cookie
	}
	return nil
}

func (m *BgpCommonAttrEntry_) GetConnectorType() uint32 {
	if m != nil {
		return m.ConnectorType
	}
	return 0
}

func (m *BgpCommonAttrEntry_) GetConnectorValue() []uint32 {
	if m != nil {
		return m.ConnectorValue
	}
	return nil
}

func (m *BgpCommonAttrEntry_) GetAigpMetricValue() uint64 {
	if m != nil {
		return m.AigpMetricValue
	}
	return 0
}

func (m *BgpCommonAttrEntry_) GetPmsiType() uint32 {
	if m != nil {
		return m.PmsiType
	}
	return 0
}

func (m *BgpCommonAttrEntry_) GetPmsiFlags() uint32 {
	if m != nil {
		return m.PmsiFlags
	}
	return 0
}

func (m *BgpCommonAttrEntry_) GetPmsiLabel() uint32 {
	if m != nil {
		return m.PmsiLabel
	}
	return 0
}

func (m *BgpCommonAttrEntry_) GetPmsiValue() []uint32 {
	if m != nil {
		return m.PmsiValue
	}
	return nil
}

func (m *BgpCommonAttrEntry_) GetPpmPvalue() uint32 {
	if m != nil {
		return m.PpmPvalue
	}
	return 0
}

func (m *BgpCommonAttrEntry_) GetPeDistinguisherLabel() []*BgpPedistlblEntry_ {
	if m != nil {
		return m.PeDistinguisherLabel
	}
	return nil
}

func (m *BgpCommonAttrEntry_) GetLsAttr() []uint32 {
	if m != nil {
		return m.LsAttr
	}
	return nil
}

func (m *BgpCommonAttrEntry_) GetLabelIndexAttr() []uint32 {
	if m != nil {
		return m.LabelIndexAttr
	}
	return nil
}

func (m *BgpCommonAttrEntry_) GetTunnelEncap() *BgpTunencapEntry_ {
	if m != nil {
		return m.TunnelEncap
	}
	return nil
}

type BgpAttrRnhAddrT struct {
	Len                  string   `protobuf:"bytes,1,opt,name=len,proto3" json:"len,omitempty"`
	Ipv4Address          string   `protobuf:"bytes,2,opt,name=ipv4_address,json=ipv4Address,proto3" json:"ipv4_address,omitempty"`
	Ipv6Address          string   `protobuf:"bytes,3,opt,name=ipv6_address,json=ipv6Address,proto3" json:"ipv6_address,omitempty"`
	MacAddress           string   `protobuf:"bytes,4,opt,name=mac_address,json=macAddress,proto3" json:"mac_address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BgpAttrRnhAddrT) Reset()         { *m = BgpAttrRnhAddrT{} }
func (m *BgpAttrRnhAddrT) String() string { return proto.CompactTextString(m) }
func (*BgpAttrRnhAddrT) ProtoMessage()    {}
func (*BgpAttrRnhAddrT) Descriptor() ([]byte, []int) {
	return fileDescriptor_a044dbc210c8cfc7, []int{8}
}

func (m *BgpAttrRnhAddrT) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BgpAttrRnhAddrT.Unmarshal(m, b)
}
func (m *BgpAttrRnhAddrT) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BgpAttrRnhAddrT.Marshal(b, m, deterministic)
}
func (m *BgpAttrRnhAddrT) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpAttrRnhAddrT.Merge(m, src)
}
func (m *BgpAttrRnhAddrT) XXX_Size() int {
	return xxx_messageInfo_BgpAttrRnhAddrT.Size(m)
}
func (m *BgpAttrRnhAddrT) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpAttrRnhAddrT.DiscardUnknown(m)
}

var xxx_messageInfo_BgpAttrRnhAddrT proto.InternalMessageInfo

func (m *BgpAttrRnhAddrT) GetLen() string {
	if m != nil {
		return m.Len
	}
	return ""
}

func (m *BgpAttrRnhAddrT) GetIpv4Address() string {
	if m != nil {
		return m.Ipv4Address
	}
	return ""
}

func (m *BgpAttrRnhAddrT) GetIpv6Address() string {
	if m != nil {
		return m.Ipv6Address
	}
	return ""
}

func (m *BgpAttrRnhAddrT) GetMacAddress() string {
	if m != nil {
		return m.MacAddress
	}
	return ""
}

type BgpL2VpnAddrT struct {
	L2VpnAddress         []uint32 `protobuf:"varint,1,rep,packed,name=l2vpn_address,json=l2vpnAddress,proto3" json:"l2vpn_address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BgpL2VpnAddrT) Reset()         { *m = BgpL2VpnAddrT{} }
func (m *BgpL2VpnAddrT) String() string { return proto.CompactTextString(m) }
func (*BgpL2VpnAddrT) ProtoMessage()    {}
func (*BgpL2VpnAddrT) Descriptor() ([]byte, []int) {
	return fileDescriptor_a044dbc210c8cfc7, []int{9}
}

func (m *BgpL2VpnAddrT) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BgpL2VpnAddrT.Unmarshal(m, b)
}
func (m *BgpL2VpnAddrT) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BgpL2VpnAddrT.Marshal(b, m, deterministic)
}
func (m *BgpL2VpnAddrT) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpL2VpnAddrT.Merge(m, src)
}
func (m *BgpL2VpnAddrT) XXX_Size() int {
	return xxx_messageInfo_BgpL2VpnAddrT.Size(m)
}
func (m *BgpL2VpnAddrT) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpL2VpnAddrT.DiscardUnknown(m)
}

var xxx_messageInfo_BgpL2VpnAddrT proto.InternalMessageInfo

func (m *BgpL2VpnAddrT) GetL2VpnAddress() []uint32 {
	if m != nil {
		return m.L2VpnAddress
	}
	return nil
}

type BgpL2VpnMspwAddrT struct {
	L2VpnAddress         []uint32 `protobuf:"varint,1,rep,packed,name=l2vpn_address,json=l2vpnAddress,proto3" json:"l2vpn_address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BgpL2VpnMspwAddrT) Reset()         { *m = BgpL2VpnMspwAddrT{} }
func (m *BgpL2VpnMspwAddrT) String() string { return proto.CompactTextString(m) }
func (*BgpL2VpnMspwAddrT) ProtoMessage()    {}
func (*BgpL2VpnMspwAddrT) Descriptor() ([]byte, []int) {
	return fileDescriptor_a044dbc210c8cfc7, []int{10}
}

func (m *BgpL2VpnMspwAddrT) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BgpL2VpnMspwAddrT.Unmarshal(m, b)
}
func (m *BgpL2VpnMspwAddrT) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BgpL2VpnMspwAddrT.Marshal(b, m, deterministic)
}
func (m *BgpL2VpnMspwAddrT) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpL2VpnMspwAddrT.Merge(m, src)
}
func (m *BgpL2VpnMspwAddrT) XXX_Size() int {
	return xxx_messageInfo_BgpL2VpnMspwAddrT.Size(m)
}
func (m *BgpL2VpnMspwAddrT) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpL2VpnMspwAddrT.DiscardUnknown(m)
}

var xxx_messageInfo_BgpL2VpnMspwAddrT proto.InternalMessageInfo

func (m *BgpL2VpnMspwAddrT) GetL2VpnAddress() []uint32 {
	if m != nil {
		return m.L2VpnAddress
	}
	return nil
}

type BgpIpv4SrpolicyAddrT struct {
	Ipv4SrpolicyAddress  []uint32 `protobuf:"varint,1,rep,packed,name=ipv4_srpolicy_address,json=ipv4SrpolicyAddress,proto3" json:"ipv4_srpolicy_address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BgpIpv4SrpolicyAddrT) Reset()         { *m = BgpIpv4SrpolicyAddrT{} }
func (m *BgpIpv4SrpolicyAddrT) String() string { return proto.CompactTextString(m) }
func (*BgpIpv4SrpolicyAddrT) ProtoMessage()    {}
func (*BgpIpv4SrpolicyAddrT) Descriptor() ([]byte, []int) {
	return fileDescriptor_a044dbc210c8cfc7, []int{11}
}

func (m *BgpIpv4SrpolicyAddrT) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BgpIpv4SrpolicyAddrT.Unmarshal(m, b)
}
func (m *BgpIpv4SrpolicyAddrT) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BgpIpv4SrpolicyAddrT.Marshal(b, m, deterministic)
}
func (m *BgpIpv4SrpolicyAddrT) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpIpv4SrpolicyAddrT.Merge(m, src)
}
func (m *BgpIpv4SrpolicyAddrT) XXX_Size() int {
	return xxx_messageInfo_BgpIpv4SrpolicyAddrT.Size(m)
}
func (m *BgpIpv4SrpolicyAddrT) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpIpv4SrpolicyAddrT.DiscardUnknown(m)
}

var xxx_messageInfo_BgpIpv4SrpolicyAddrT proto.InternalMessageInfo

func (m *BgpIpv4SrpolicyAddrT) GetIpv4SrpolicyAddress() []uint32 {
	if m != nil {
		return m.Ipv4SrpolicyAddress
	}
	return nil
}

type BgpIpv6SrpolicyAddrT struct {
	Ipv6SrpolicyAddress  []uint32 `protobuf:"varint,1,rep,packed,name=ipv6_srpolicy_address,json=ipv6SrpolicyAddress,proto3" json:"ipv6_srpolicy_address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BgpIpv6SrpolicyAddrT) Reset()         { *m = BgpIpv6SrpolicyAddrT{} }
func (m *BgpIpv6SrpolicyAddrT) String() string { return proto.CompactTextString(m) }
func (*BgpIpv6SrpolicyAddrT) ProtoMessage()    {}
func (*BgpIpv6SrpolicyAddrT) Descriptor() ([]byte, []int) {
	return fileDescriptor_a044dbc210c8cfc7, []int{12}
}

func (m *BgpIpv6SrpolicyAddrT) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BgpIpv6SrpolicyAddrT.Unmarshal(m, b)
}
func (m *BgpIpv6SrpolicyAddrT) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BgpIpv6SrpolicyAddrT.Marshal(b, m, deterministic)
}
func (m *BgpIpv6SrpolicyAddrT) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpIpv6SrpolicyAddrT.Merge(m, src)
}
func (m *BgpIpv6SrpolicyAddrT) XXX_Size() int {
	return xxx_messageInfo_BgpIpv6SrpolicyAddrT.Size(m)
}
func (m *BgpIpv6SrpolicyAddrT) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpIpv6SrpolicyAddrT.DiscardUnknown(m)
}

var xxx_messageInfo_BgpIpv6SrpolicyAddrT proto.InternalMessageInfo

func (m *BgpIpv6SrpolicyAddrT) GetIpv6SrpolicyAddress() []uint32 {
	if m != nil {
		return m.Ipv6SrpolicyAddress
	}
	return nil
}

type BgpAddrtype struct {
	Afi                    string                `protobuf:"bytes,1,opt,name=afi,proto3" json:"afi,omitempty"`
	Ipv4Address            string                `protobuf:"bytes,2,opt,name=ipv4_address,json=ipv4Address,proto3" json:"ipv4_address,omitempty"`
	Ipv4McastAddress       string                `protobuf:"bytes,3,opt,name=ipv4_mcast_address,json=ipv4McastAddress,proto3" json:"ipv4_mcast_address,omitempty"`
	Ipv4LabelAddress       string                `protobuf:"bytes,4,opt,name=ipv4_label_address,json=ipv4LabelAddress,proto3" json:"ipv4_label_address,omitempty"`
	Ipv4TunnelAddress      string                `protobuf:"bytes,5,opt,name=ipv4_tunnel_address,json=ipv4TunnelAddress,proto3" json:"ipv4_tunnel_address,omitempty"`
	Ipv4MdtAddress         string                `protobuf:"bytes,6,opt,name=ipv4mdt_address,json=ipv4mdtAddress,proto3" json:"ipv4mdt_address,omitempty"`
	Ipv4VpnAddress         string                `protobuf:"bytes,7,opt,name=ipv4vpn_address,json=ipv4vpnAddress,proto3" json:"ipv4vpn_address,omitempty"`
	Ipv4VpnaMcastddress    string                `protobuf:"bytes,8,opt,name=ipv4vpna_mcastddress,json=ipv4vpnaMcastddress,proto3" json:"ipv4vpna_mcastddress,omitempty"`
	Ipv6Address            string                `protobuf:"bytes,9,opt,name=ipv6_address,json=ipv6Address,proto3" json:"ipv6_address,omitempty"`
	Ipv6McastAddress       string                `protobuf:"bytes,10,opt,name=ipv6_mcast_address,json=ipv6McastAddress,proto3" json:"ipv6_mcast_address,omitempty"`
	Ipv6LabelAddress       string                `protobuf:"bytes,11,opt,name=ipv6_label_address,json=ipv6LabelAddress,proto3" json:"ipv6_label_address,omitempty"`
	Ipv6VpnAddress         string                `protobuf:"bytes,12,opt,name=ipv6vpn_address,json=ipv6vpnAddress,proto3" json:"ipv6vpn_address,omitempty"`
	Ipv6VpnMcastAddress    string                `protobuf:"bytes,13,opt,name=ipv6vpn_mcast_address,json=ipv6vpnMcastAddress,proto3" json:"ipv6vpn_mcast_address,omitempty"`
	L2VpnvplsAddress       *BgpL2VpnAddrT        `protobuf:"bytes,14,opt,name=l2vpnvpls_address,json=l2vpnvplsAddress,proto3" json:"l2vpnvpls_address,omitempty"`
	RtConstraintAddress    string                `protobuf:"bytes,15,opt,name=rt_constraint_address,json=rtConstraintAddress,proto3" json:"rt_constraint_address,omitempty"`
	Ipv6MvpnAddress        string                `protobuf:"bytes,16,opt,name=ipv6mvpn_address,json=ipv6mvpnAddress,proto3" json:"ipv6mvpn_address,omitempty"`
	Ipv4MvpnAddress        string                `protobuf:"bytes,17,opt,name=ipv4mvpn_address,json=ipv4mvpnAddress,proto3" json:"ipv4mvpn_address,omitempty"`
	L2VpnEvpnAddress       string                `protobuf:"bytes,18,opt,name=l2vpn_evpn_address,json=l2vpnEvpnAddress,proto3" json:"l2vpn_evpn_address,omitempty"`
	LsLsAddress            string                `protobuf:"bytes,19,opt,name=ls_ls_address,json=lsLsAddress,proto3" json:"ls_ls_address,omitempty"`
	L2VpnMspwAddress       *BgpL2VpnMspwAddrT    `protobuf:"bytes,20,opt,name=l2vpn_mspw_address,json=l2vpnMspwAddress,proto3" json:"l2vpn_mspw_address,omitempty"`
	Ipv4FlowspecAddress    string                `protobuf:"bytes,21,opt,name=ipv4_flowspec_address,json=ipv4FlowspecAddress,proto3" json:"ipv4_flowspec_address,omitempty"`
	Ipv6FlowspecAddress    string                `protobuf:"bytes,22,opt,name=ipv6_flowspec_address,json=ipv6FlowspecAddress,proto3" json:"ipv6_flowspec_address,omitempty"`
	Ipv4VpnFlowspecAddress string                `protobuf:"bytes,23,opt,name=ipv4vpn_flowspec_address,json=ipv4vpnFlowspecAddress,proto3" json:"ipv4vpn_flowspec_address,omitempty"`
	Ipv6VpnFlowspecAddress string                `protobuf:"bytes,24,opt,name=ipv6vpn_flowspec_address,json=ipv6vpnFlowspecAddress,proto3" json:"ipv6vpn_flowspec_address,omitempty"`
	Ipv4SrPolicyAddress    *BgpIpv4SrpolicyAddrT `protobuf:"bytes,25,opt,name=ipv4sr_policy_address,json=ipv4srPolicyAddress,proto3" json:"ipv4sr_policy_address,omitempty"`
	Ipv6SrPolicyAddress    *BgpIpv6SrpolicyAddrT `protobuf:"bytes,26,opt,name=ipv6sr_policy_address,json=ipv6srPolicyAddress,proto3" json:"ipv6sr_policy_address,omitempty"`
	XXX_NoUnkeyedLiteral   struct{}              `json:"-"`
	XXX_unrecognized       []byte                `json:"-"`
	XXX_sizecache          int32                 `json:"-"`
}

func (m *BgpAddrtype) Reset()         { *m = BgpAddrtype{} }
func (m *BgpAddrtype) String() string { return proto.CompactTextString(m) }
func (*BgpAddrtype) ProtoMessage()    {}
func (*BgpAddrtype) Descriptor() ([]byte, []int) {
	return fileDescriptor_a044dbc210c8cfc7, []int{13}
}

func (m *BgpAddrtype) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BgpAddrtype.Unmarshal(m, b)
}
func (m *BgpAddrtype) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BgpAddrtype.Marshal(b, m, deterministic)
}
func (m *BgpAddrtype) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpAddrtype.Merge(m, src)
}
func (m *BgpAddrtype) XXX_Size() int {
	return xxx_messageInfo_BgpAddrtype.Size(m)
}
func (m *BgpAddrtype) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpAddrtype.DiscardUnknown(m)
}

var xxx_messageInfo_BgpAddrtype proto.InternalMessageInfo

func (m *BgpAddrtype) GetAfi() string {
	if m != nil {
		return m.Afi
	}
	return ""
}

func (m *BgpAddrtype) GetIpv4Address() string {
	if m != nil {
		return m.Ipv4Address
	}
	return ""
}

func (m *BgpAddrtype) GetIpv4McastAddress() string {
	if m != nil {
		return m.Ipv4McastAddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv4LabelAddress() string {
	if m != nil {
		return m.Ipv4LabelAddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv4TunnelAddress() string {
	if m != nil {
		return m.Ipv4TunnelAddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv4MdtAddress() string {
	if m != nil {
		return m.Ipv4MdtAddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv4VpnAddress() string {
	if m != nil {
		return m.Ipv4VpnAddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv4VpnaMcastddress() string {
	if m != nil {
		return m.Ipv4VpnaMcastddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv6Address() string {
	if m != nil {
		return m.Ipv6Address
	}
	return ""
}

func (m *BgpAddrtype) GetIpv6McastAddress() string {
	if m != nil {
		return m.Ipv6McastAddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv6LabelAddress() string {
	if m != nil {
		return m.Ipv6LabelAddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv6VpnAddress() string {
	if m != nil {
		return m.Ipv6VpnAddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv6VpnMcastAddress() string {
	if m != nil {
		return m.Ipv6VpnMcastAddress
	}
	return ""
}

func (m *BgpAddrtype) GetL2VpnvplsAddress() *BgpL2VpnAddrT {
	if m != nil {
		return m.L2VpnvplsAddress
	}
	return nil
}

func (m *BgpAddrtype) GetRtConstraintAddress() string {
	if m != nil {
		return m.RtConstraintAddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv6MvpnAddress() string {
	if m != nil {
		return m.Ipv6MvpnAddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv4MvpnAddress() string {
	if m != nil {
		return m.Ipv4MvpnAddress
	}
	return ""
}

func (m *BgpAddrtype) GetL2VpnEvpnAddress() string {
	if m != nil {
		return m.L2VpnEvpnAddress
	}
	return ""
}

func (m *BgpAddrtype) GetLsLsAddress() string {
	if m != nil {
		return m.LsLsAddress
	}
	return ""
}

func (m *BgpAddrtype) GetL2VpnMspwAddress() *BgpL2VpnMspwAddrT {
	if m != nil {
		return m.L2VpnMspwAddress
	}
	return nil
}

func (m *BgpAddrtype) GetIpv4FlowspecAddress() string {
	if m != nil {
		return m.Ipv4FlowspecAddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv6FlowspecAddress() string {
	if m != nil {
		return m.Ipv6FlowspecAddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv4VpnFlowspecAddress() string {
	if m != nil {
		return m.Ipv4VpnFlowspecAddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv6VpnFlowspecAddress() string {
	if m != nil {
		return m.Ipv6VpnFlowspecAddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv4SrPolicyAddress() *BgpIpv4SrpolicyAddrT {
	if m != nil {
		return m.Ipv4SrPolicyAddress
	}
	return nil
}

func (m *BgpAddrtype) GetIpv6SrPolicyAddress() *BgpIpv6SrpolicyAddrT {
	if m != nil {
		return m.Ipv6SrPolicyAddress
	}
	return nil
}

type BgpAttr_ struct {
	IsAsPath2Byte               bool                 `protobuf:"varint,1,opt,name=is_as_path2_byte,json=isAsPath2Byte,proto3" json:"is_as_path2_byte,omitempty"`
	IsApplicationGatewayPresent bool                 `protobuf:"varint,2,opt,name=is_application_gateway_present,json=isApplicationGatewayPresent,proto3" json:"is_application_gateway_present,omitempty"`
	IsAttrSetPresent            bool                 `protobuf:"varint,3,opt,name=is_attr_set_present,json=isAttrSetPresent,proto3" json:"is_attr_set_present,omitempty"`
	SetAigpInboundIgp           bool                 `protobuf:"varint,4,opt,name=set_aigp_inbound_igp,json=setAigpInboundIgp,proto3" json:"set_aigp_inbound_igp,omitempty"`
	SetAigpInboundMetric        bool                 `protobuf:"varint,5,opt,name=set_aigp_inbound_metric,json=setAigpInboundMetric,proto3" json:"set_aigp_inbound_metric,omitempty"`
	IsRnhPresent                bool                 `protobuf:"varint,6,opt,name=is_rnh_present,json=isRnhPresent,proto3" json:"is_rnh_present,omitempty"`
	IsRibrnhPresent             bool                 `protobuf:"varint,7,opt,name=is_ribrnh_present,json=isRibrnhPresent,proto3" json:"is_ribrnh_present,omitempty"`
	AttributeKeyNumber          uint32               `protobuf:"varint,8,opt,name=attribute_key_number,json=attributeKeyNumber,proto3" json:"attribute_key_number,omitempty"`
	AttributeReuseIdConfig      bool                 `protobuf:"varint,9,opt,name=attribute_reuse_id_config,json=attributeReuseIdConfig,proto3" json:"attribute_reuse_id_config,omitempty"`
	AttributeReuseIdMaxId       uint32               `protobuf:"varint,10,opt,name=attribute_reuse_id_max_id,json=attributeReuseIdMaxId,proto3" json:"attribute_reuse_id_max_id,omitempty"`
	AttributeReuseIdNode        uint32               `protobuf:"varint,11,opt,name=attribute_reuse_id_node,json=attributeReuseIdNode,proto3" json:"attribute_reuse_id_node,omitempty"`
	AttributeReuseIdCurrent     uint32               `protobuf:"varint,12,opt,name=attribute_reuse_id_current,json=attributeReuseIdCurrent,proto3" json:"attribute_reuse_id_current,omitempty"`
	AttributeReuseIdKeys        uint32               `protobuf:"varint,13,opt,name=attribute_reuse_id_keys,json=attributeReuseIdKeys,proto3" json:"attribute_reuse_id_keys,omitempty"`
	AttributeReuseIdRecoverSec  uint32               `protobuf:"varint,14,opt,name=attribute_reuse_id_recover_sec,json=attributeReuseIdRecoverSec,proto3" json:"attribute_reuse_id_recover_sec,omitempty"`
	VpnDistinguisher            uint32               `protobuf:"varint,15,opt,name=vpn_distinguisher,json=vpnDistinguisher,proto3" json:"vpn_distinguisher,omitempty"`
	CommonAttributes            *BgpCommonAttrEntry_ `protobuf:"bytes,16,opt,name=common_attributes,json=commonAttributes,proto3" json:"common_attributes,omitempty"`
	AttrSet                     *BgpCommonAttrEntry_ `protobuf:"bytes,17,opt,name=attr_set,json=attrSet,proto3" json:"attr_set,omitempty"`
	RnhType                     uint32               `protobuf:"varint,18,opt,name=rnh_type,json=rnhType,proto3" json:"rnh_type,omitempty"`
	RnhLen                      uint32               `protobuf:"varint,19,opt,name=rnh_len,json=rnhLen,proto3" json:"rnh_len,omitempty"`
	RnhAddrLen                  uint32               `protobuf:"varint,20,opt,name=rnh_addr_len,json=rnhAddrLen,proto3" json:"rnh_addr_len,omitempty"`
	RnhAddr                     *BgpAttrRnhAddrT     `protobuf:"bytes,21,opt,name=rnh_addr,json=rnhAddr,proto3" json:"rnh_addr,omitempty"`
	RibrnhTable                 uint32               `protobuf:"varint,22,opt,name=ribrnh_table,json=ribrnhTable,proto3" json:"ribrnh_table,omitempty"`
	RibrnhMac                   string               `protobuf:"bytes,23,opt,name=ribrnh_mac,json=ribrnhMac,proto3" json:"ribrnh_mac,omitempty"`
	RibrnhIp                    *BgpAddrtype         `protobuf:"bytes,24,opt,name=ribrnh_ip,json=ribrnhIp,proto3" json:"ribrnh_ip,omitempty"`
	RibrnhipTable               uint32               `protobuf:"varint,25,opt,name=ribrnhip_table,json=ribrnhipTable,proto3" json:"ribrnhip_table,omitempty"`
	RibrnhVni                   uint32               `protobuf:"varint,26,opt,name=ribrnh_vni,json=ribrnhVni,proto3" json:"ribrnh_vni,omitempty"`
	RibrnhEncap                 uint32               `protobuf:"varint,27,opt,name=ribrnh_encap,json=ribrnhEncap,proto3" json:"ribrnh_encap,omitempty"`
	XXX_NoUnkeyedLiteral        struct{}             `json:"-"`
	XXX_unrecognized            []byte               `json:"-"`
	XXX_sizecache               int32                `json:"-"`
}

func (m *BgpAttr_) Reset()         { *m = BgpAttr_{} }
func (m *BgpAttr_) String() string { return proto.CompactTextString(m) }
func (*BgpAttr_) ProtoMessage()    {}
func (*BgpAttr_) Descriptor() ([]byte, []int) {
	return fileDescriptor_a044dbc210c8cfc7, []int{14}
}

func (m *BgpAttr_) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BgpAttr_.Unmarshal(m, b)
}
func (m *BgpAttr_) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BgpAttr_.Marshal(b, m, deterministic)
}
func (m *BgpAttr_) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpAttr_.Merge(m, src)
}
func (m *BgpAttr_) XXX_Size() int {
	return xxx_messageInfo_BgpAttr_.Size(m)
}
func (m *BgpAttr_) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpAttr_.DiscardUnknown(m)
}

var xxx_messageInfo_BgpAttr_ proto.InternalMessageInfo

func (m *BgpAttr_) GetIsAsPath2Byte() bool {
	if m != nil {
		return m.IsAsPath2Byte
	}
	return false
}

func (m *BgpAttr_) GetIsApplicationGatewayPresent() bool {
	if m != nil {
		return m.IsApplicationGatewayPresent
	}
	return false
}

func (m *BgpAttr_) GetIsAttrSetPresent() bool {
	if m != nil {
		return m.IsAttrSetPresent
	}
	return false
}

func (m *BgpAttr_) GetSetAigpInboundIgp() bool {
	if m != nil {
		return m.SetAigpInboundIgp
	}
	return false
}

func (m *BgpAttr_) GetSetAigpInboundMetric() bool {
	if m != nil {
		return m.SetAigpInboundMetric
	}
	return false
}

func (m *BgpAttr_) GetIsRnhPresent() bool {
	if m != nil {
		return m.IsRnhPresent
	}
	return false
}

func (m *BgpAttr_) GetIsRibrnhPresent() bool {
	if m != nil {
		return m.IsRibrnhPresent
	}
	return false
}

func (m *BgpAttr_) GetAttributeKeyNumber() uint32 {
	if m != nil {
		return m.AttributeKeyNumber
	}
	return 0
}

func (m *BgpAttr_) GetAttributeReuseIdConfig() bool {
	if m != nil {
		return m.AttributeReuseIdConfig
	}
	return false
}

func (m *BgpAttr_) GetAttributeReuseIdMaxId() uint32 {
	if m != nil {
		return m.AttributeReuseIdMaxId
	}
	return 0
}

func (m *BgpAttr_) GetAttributeReuseIdNode() uint32 {
	if m != nil {
		return m.AttributeReuseIdNode
	}
	return 0
}

func (m *BgpAttr_) GetAttributeReuseIdCurrent() uint32 {
	if m != nil {
		return m.AttributeReuseIdCurrent
	}
	return 0
}

func (m *BgpAttr_) GetAttributeReuseIdKeys() uint32 {
	if m != nil {
		return m.AttributeReuseIdKeys
	}
	return 0
}

func (m *BgpAttr_) GetAttributeReuseIdRecoverSec() uint32 {
	if m != nil {
		return m.AttributeReuseIdRecoverSec
	}
	return 0
}

func (m *BgpAttr_) GetVpnDistinguisher() uint32 {
	if m != nil {
		return m.VpnDistinguisher
	}
	return 0
}

func (m *BgpAttr_) GetCommonAttributes() *BgpCommonAttrEntry_ {
	if m != nil {
		return m.CommonAttributes
	}
	return nil
}

func (m *BgpAttr_) GetAttrSet() *BgpCommonAttrEntry_ {
	if m != nil {
		return m.AttrSet
	}
	return nil
}

func (m *BgpAttr_) GetRnhType() uint32 {
	if m != nil {
		return m.RnhType
	}
	return 0
}

func (m *BgpAttr_) GetRnhLen() uint32 {
	if m != nil {
		return m.RnhLen
	}
	return 0
}

func (m *BgpAttr_) GetRnhAddrLen() uint32 {
	if m != nil {
		return m.RnhAddrLen
	}
	return 0
}

func (m *BgpAttr_) GetRnhAddr() *BgpAttrRnhAddrT {
	if m != nil {
		return m.RnhAddr
	}
	return nil
}

func (m *BgpAttr_) GetRibrnhTable() uint32 {
	if m != nil {
		return m.RibrnhTable
	}
	return 0
}

func (m *BgpAttr_) GetRibrnhMac() string {
	if m != nil {
		return m.RibrnhMac
	}
	return ""
}

func (m *BgpAttr_) GetRibrnhIp() *BgpAddrtype {
	if m != nil {
		return m.RibrnhIp
	}
	return nil
}

func (m *BgpAttr_) GetRibrnhipTable() uint32 {
	if m != nil {
		return m.RibrnhipTable
	}
	return 0
}

func (m *BgpAttr_) GetRibrnhVni() uint32 {
	if m != nil {
		return m.RibrnhVni
	}
	return 0
}

func (m *BgpAttr_) GetRibrnhEncap() uint32 {
	if m != nil {
		return m.RibrnhEncap
	}
	return 0
}

type BgpAttrBag struct {
	ProcessInstanceId           uint32    `protobuf:"varint,50,opt,name=process_instance_id,json=processInstanceId,proto3" json:"process_instance_id,omitempty"`
	AttributeInstanceId         uint32    `protobuf:"varint,51,opt,name=attribute_instance_id,json=attributeInstanceId,proto3" json:"attribute_instance_id,omitempty"`
	AttributeStructureId        uint32    `protobuf:"varint,52,opt,name=attribute_structure_id,json=attributeStructureId,proto3" json:"attribute_structure_id,omitempty"`
	AttributeStructureHashValue uint32    `protobuf:"varint,53,opt,name=attribute_structure_hash_value,json=attributeStructureHashValue,proto3" json:"attribute_structure_hash_value,omitempty"`
	ReferenceCount              uint32    `protobuf:"varint,54,opt,name=reference_count,json=referenceCount,proto3" json:"reference_count,omitempty"`
	AttributeInfo               *BgpAttr_ `protobuf:"bytes,55,opt,name=attribute_info,json=attributeInfo,proto3" json:"attribute_info,omitempty"`
	XXX_NoUnkeyedLiteral        struct{}  `json:"-"`
	XXX_unrecognized            []byte    `json:"-"`
	XXX_sizecache               int32     `json:"-"`
}

func (m *BgpAttrBag) Reset()         { *m = BgpAttrBag{} }
func (m *BgpAttrBag) String() string { return proto.CompactTextString(m) }
func (*BgpAttrBag) ProtoMessage()    {}
func (*BgpAttrBag) Descriptor() ([]byte, []int) {
	return fileDescriptor_a044dbc210c8cfc7, []int{15}
}

func (m *BgpAttrBag) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BgpAttrBag.Unmarshal(m, b)
}
func (m *BgpAttrBag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BgpAttrBag.Marshal(b, m, deterministic)
}
func (m *BgpAttrBag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpAttrBag.Merge(m, src)
}
func (m *BgpAttrBag) XXX_Size() int {
	return xxx_messageInfo_BgpAttrBag.Size(m)
}
func (m *BgpAttrBag) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpAttrBag.DiscardUnknown(m)
}

var xxx_messageInfo_BgpAttrBag proto.InternalMessageInfo

func (m *BgpAttrBag) GetProcessInstanceId() uint32 {
	if m != nil {
		return m.ProcessInstanceId
	}
	return 0
}

func (m *BgpAttrBag) GetAttributeInstanceId() uint32 {
	if m != nil {
		return m.AttributeInstanceId
	}
	return 0
}

func (m *BgpAttrBag) GetAttributeStructureId() uint32 {
	if m != nil {
		return m.AttributeStructureId
	}
	return 0
}

func (m *BgpAttrBag) GetAttributeStructureHashValue() uint32 {
	if m != nil {
		return m.AttributeStructureHashValue
	}
	return 0
}

func (m *BgpAttrBag) GetReferenceCount() uint32 {
	if m != nil {
		return m.ReferenceCount
	}
	return 0
}

func (m *BgpAttrBag) GetAttributeInfo() *BgpAttr_ {
	if m != nil {
		return m.AttributeInfo
	}
	return nil
}

func init() {
	proto.RegisterType((*BgpAttrBag_KEYS)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.attributes.attribute.bgp_attr_bag_KEYS")
	proto.RegisterType((*BgpPedistlblEntry_)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.attributes.attribute.bgp_pedistlbl_entry_")
	proto.RegisterType((*BgpBindingSidT)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.attributes.attribute.bgp_binding_sid_t")
	proto.RegisterType((*SrSid_)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.attributes.attribute.sr_sid_")
	proto.RegisterType((*SrExppath_)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.attributes.attribute.sr_exppath_")
	proto.RegisterType((*BgpSrpolicyEntry_)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.attributes.attribute.bgp_srpolicy_entry_")
	proto.RegisterType((*BgpTunencapEntry_)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.attributes.attribute.bgp_tunencap_entry_")
	proto.RegisterType((*BgpCommonAttrEntry_)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.attributes.attribute.bgp_common_attr_entry_")
	proto.RegisterType((*BgpAttrRnhAddrT)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.attributes.attribute.bgp_attr_rnh_addr_t")
	proto.RegisterType((*BgpL2VpnAddrT)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.attributes.attribute.bgp_l2vpn_addr_t")
	proto.RegisterType((*BgpL2VpnMspwAddrT)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.attributes.attribute.bgp_l2vpn_mspw_addr_t")
	proto.RegisterType((*BgpIpv4SrpolicyAddrT)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.attributes.attribute.bgp_ipv4_srpolicy_addr_t")
	proto.RegisterType((*BgpIpv6SrpolicyAddrT)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.attributes.attribute.bgp_ipv6_srpolicy_addr_t")
	proto.RegisterType((*BgpAddrtype)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.attributes.attribute.bgp_addrtype")
	proto.RegisterType((*BgpAttr_)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.attributes.attribute.bgp_attr_")
	proto.RegisterType((*BgpAttrBag)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.attributes.attribute.bgp_attr_bag")
}

func init() { proto.RegisterFile("bgp_attr_bag.proto", fileDescriptor_a044dbc210c8cfc7) }

var fileDescriptor_a044dbc210c8cfc7 = []byte{
	// 2430 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x59, 0xcd, 0x72, 0x1b, 0xc7,
	0xf1, 0x2f, 0x88, 0x14, 0x3f, 0x06, 0x00, 0x09, 0x0e, 0x3f, 0xb4, 0x12, 0x2d, 0x99, 0xa6, 0x3f,
	0x44, 0x59, 0x32, 0xff, 0x7f, 0x53, 0x34, 0xac, 0x54, 0x92, 0x03, 0xc5, 0xc8, 0x31, 0x4a, 0xa2,
	0xc2, 0x5a, 0xaa, 0x9c, 0xca, 0x69, 0xbc, 0xd8, 0x1d, 0x02, 0x13, 0xed, 0xce, 0xae, 0x77, 0x16,
	0x24, 0x91, 0x63, 0x2e, 0x2e, 0x27, 0x55, 0xc9, 0x2d, 0xa7, 0x54, 0xaa, 0x92, 0x54, 0x1e, 0x24,
	0x0f, 0x91, 0x07, 0xc8, 0x1b, 0xe4, 0x98, 0x63, 0xaa, 0x7b, 0x3e, 0x76, 0xb1, 0x80, 0x93, 0xf8,
	0x40, 0xe5, 0x44, 0x6c, 0xf7, 0xef, 0x37, 0x33, 0xdd, 0xd3, 0x33, 0xdd, 0x3d, 0x24, 0xb4, 0x3f,
	0xc8, 0x58, 0x50, 0x14, 0x39, 0xeb, 0x07, 0x83, 0xfd, 0x2c, 0x4f, 0x8b, 0x94, 0xfe, 0x34, 0x14,
	0x2a, 0x4c, 0x99, 0x48, 0x15, 0xbb, 0xca, 0x99, 0xc8, 0x2e, 0x0e, 0x19, 0xa0, 0xd2, 0x8c, 0xe7,
	0xfb, 0xfd, 0x41, 0xb6, 0x2f, 0xa4, 0x2a, 0x02, 0x19, 0x72, 0xe5, 0x7e, 0xb9, 0x1f, 0x0c, 0xfe,
	0x44, 0xfd, 0xf1, 0x3e, 0x0c, 0x29, 0xfa, 0xa3, 0x82, 0xab, 0xf2, 0xe7, 0xee, 0x5f, 0x1b, 0x64,
	0xad, 0x3a, 0x1f, 0x7b, 0xfe, 0xec, 0x67, 0x67, 0xf4, 0x5d, 0xd2, 0x76, 0x74, 0x19, 0x24, 0xdc,
	0x6b, 0xec, 0x34, 0xf6, 0x96, 0xfd, 0x96, 0x15, 0xbe, 0x0c, 0x12, 0x0e, 0x20, 0x37, 0x0e, 0x13,
	0x22, 0xf2, 0x6e, 0xec, 0x34, 0xf6, 0xda, 0x7e, 0xcb, 0x09, 0x7b, 0x22, 0xa2, 0x87, 0x64, 0xab,
	0x04, 0x85, 0x41, 0x38, 0xe4, 0xac, 0x3f, 0x0a, 0x5f, 0xf3, 0xc2, 0x9b, 0x43, 0xf4, 0x86, 0xd3,
	0x1e, 0x83, 0xf2, 0x29, 0xea, 0xe8, 0x23, 0x42, 0xeb, 0x2c, 0x11, 0x79, 0xf3, 0xc8, 0xe8, 0x4c,
	0x32, 0x7a, 0xd1, 0xee, 0x73, 0xb2, 0x01, 0x26, 0x64, 0x3c, 0x12, 0xaa, 0x88, 0xfb, 0x31, 0xe3,
	0xb2, 0xc8, 0xc7, 0x8c, 0xde, 0x25, 0x24, 0xe3, 0x2c, 0x88, 0xa2, 0x9c, 0x2b, 0x65, 0x4c, 0x58,
	0xce, 0xf8, 0x91, 0x16, 0xd0, 0x0d, 0x72, 0x33, 0x0e, 0xfa, 0x3c, 0x36, 0xeb, 0xd6, 0x1f, 0xbb,
	0x5f, 0x6a, 0x7f, 0xf4, 0x85, 0x8c, 0x84, 0x1c, 0x30, 0x25, 0x22, 0x56, 0x50, 0x4a, 0xe6, 0x8b,
	0x71, 0x66, 0xdd, 0x80, 0xbf, 0x67, 0xd3, 0xe9, 0x3b, 0xa4, 0x25, 0xb2, 0x8b, 0xae, 0x9b, 0x75,
	0x0e, 0x19, 0x4d, 0x90, 0x99, 0x79, 0x77, 0xc7, 0x64, 0x51, 0xe5, 0x38, 0xf0, 0x77, 0x1e, 0xf7,
	0x70, 0xc6, 0xb8, 0x87, 0xd6, 0x9e, 0xfa, 0xd4, 0xf3, 0xd3, 0x53, 0xff, 0xb1, 0x41, 0x9a, 0x2a,
	0x67, 0xfc, 0x2a, 0xcb, 0x82, 0x62, 0xc8, 0xe8, 0x16, 0x59, 0xb8, 0xe4, 0x62, 0x30, 0x2c, 0x70,
	0x05, 0x6d, 0xdf, 0x7c, 0xd1, 0x5f, 0x90, 0x45, 0xc5, 0x07, 0x09, 0x97, 0x85, 0x77, 0x63, 0x67,
	0x6e, 0xaf, 0x79, 0xf0, 0xe5, 0xfe, 0x35, 0x05, 0xe0, 0xbe, 0x71, 0x85, 0x6f, 0x27, 0xdc, 0xfd,
	0xdb, 0x3c, 0x59, 0x87, 0xa1, 0x55, 0x9e, 0xa5, 0xb1, 0x08, 0xc7, 0x76, 0x37, 0x3f, 0x24, 0x6b,
	0xc5, 0x48, 0x4a, 0x0e, 0xdb, 0x1b, 0x06, 0x19, 0x73, 0x8e, 0x6b, 0xfb, 0xab, 0x5a, 0xf1, 0x0c,
	0xe4, 0xaf, 0xc0, 0x87, 0xbf, 0x6e, 0x90, 0x66, 0x65, 0x07, 0xd1, 0x95, 0xcd, 0x83, 0x9f, 0x5f,
	0x9b, 0x11, 0x53, 0x11, 0xe3, 0x13, 0xf3, 0x79, 0x26, 0x22, 0xfa, 0x87, 0x06, 0xd9, 0x0c, 0xe2,
	0x38, 0x0d, 0x83, 0x82, 0x47, 0x55, 0x1c, 0xee, 0xe2, 0x9b, 0x5d, 0xd7, 0xba, 0x5b, 0xc8, 0xd3,
	0x72, 0x81, 0xf7, 0x08, 0xc9, 0x72, 0x7e, 0xce, 0x73, 0x2e, 0x43, 0x6e, 0x8e, 0x59, 0x45, 0x02,
	0x21, 0xa9, 0x8a, 0xa0, 0xe0, 0xde, 0xcd, 0x9d, 0xc6, 0xde, 0x92, 0xaf, 0x3f, 0xe0, 0xfc, 0xe7,
	0xfc, 0xab, 0x11, 0x57, 0x05, 0xd3, 0xda, 0x05, 0x7d, 0x49, 0x18, 0xe1, 0x19, 0x82, 0xbe, 0x6e,
	0x90, 0x96, 0xd9, 0x59, 0x16, 0x0b, 0x55, 0x78, 0x8b, 0x18, 0x4f, 0xd1, 0x75, 0xc6, 0x93, 0x0d,
	0x6f, 0xbf, 0x69, 0x66, 0x7e, 0x21, 0x54, 0x01, 0xb1, 0x8f, 0x71, 0x55, 0x8c, 0xa4, 0x0e, 0x20,
	0x13, 0x57, 0xdf, 0x34, 0xc8, 0xb2, 0xca, 0x99, 0x0e, 0x36, 0x0c, 0xa8, 0xe6, 0x41, 0x7c, 0xad,
	0x3b, 0x52, 0x8b, 0x6c, 0x7f, 0x49, 0xe5, 0xa7, 0x28, 0xd8, 0xfd, 0xe7, 0x2a, 0xd9, 0x02, 0x44,
	0x98, 0x26, 0x49, 0x2a, 0xf5, 0xa5, 0x5c, 0x86, 0xbf, 0x50, 0x2c, 0xe1, 0x45, 0x2e, 0x42, 0x96,
	0xe5, 0x5c, 0xc1, 0xe1, 0x6c, 0xe0, 0x7e, 0xac, 0x0a, 0x75, 0x82, 0xf2, 0x53, 0x2d, 0xa6, 0x1f,
	0x93, 0x4d, 0xa1, 0x18, 0xec, 0x73, 0x0c, 0xd0, 0x73, 0x87, 0xbf, 0x81, 0x78, 0x2a, 0xd4, 0x0b,
	0xd0, 0x9d, 0xe6, 0xfc, 0xdc, 0x52, 0x7e, 0x48, 0xb6, 0x85, 0x62, 0x41, 0x91, 0x26, 0x22, 0x64,
	0xc1, 0x60, 0x90, 0xf3, 0x41, 0x50, 0x70, 0x47, 0x9c, 0x43, 0xa2, 0x27, 0xd4, 0x11, 0x22, 0x8e,
	0x2c, 0xc0, 0xd2, 0x0f, 0x70, 0x46, 0xcb, 0x4b, 0x73, 0x47, 0x9c, 0x47, 0xe2, 0xba, 0x50, 0x47,
	0x4e, 0x67, 0x39, 0xda, 0xa2, 0x34, 0x17, 0x03, 0x21, 0x1d, 0xfe, 0xa6, 0xb5, 0xe8, 0x27, 0x28,
	0xb7, 0xd8, 0x87, 0x84, 0xc2, 0xf8, 0x8a, 0xe1, 0xc6, 0x5a, 0xf0, 0x82, 0x05, 0x1f, 0xa9, 0xd3,
	0xa0, 0x18, 0x5a, 0xf0, 0xff, 0x93, 0x0d, 0xa1, 0xd0, 0x87, 0x23, 0x29, 0x8a, 0xb1, 0x83, 0x2f,
	0x5a, 0xeb, 0x8f, 0xad, 0xca, 0x32, 0x8e, 0xc8, 0x5d, 0xa1, 0x18, 0xbf, 0x2a, 0xb8, 0x8c, 0x78,
	0x34, 0x83, 0xba, 0x84, 0xd4, 0x3b, 0x42, 0x3d, 0x33, 0x98, 0xa9, 0x21, 0xde, 0x23, 0x2b, 0x42,
	0x31, 0xa5, 0x02, 0xc7, 0x59, 0x46, 0x4e, 0x4b, 0xa8, 0x33, 0x15, 0xd4, 0x97, 0x26, 0x25, 0x0f,
	0xab, 0x6e, 0x22, 0xe5, 0xd2, 0x8c, 0xca, 0x32, 0x3e, 0x20, 0xab, 0x42, 0xb1, 0x2c, 0x51, 0xc2,
	0x81, 0x9b, 0x08, 0x6e, 0x0b, 0x75, 0x9a, 0x28, 0x61, 0x71, 0x7b, 0xa4, 0x03, 0xb8, 0x2c, 0x4b,
	0x32, 0x07, 0x6c, 0x21, 0x70, 0x45, 0xa8, 0x53, 0x10, 0x4f, 0x8e, 0x18, 0x88, 0x41, 0x09, 0x6c,
	0xdb, 0x11, 0x8f, 0xc4, 0xc0, 0xe1, 0x3e, 0x27, 0xef, 0xc0, 0x88, 0x9c, 0x41, 0x5a, 0x15, 0x72,
	0x30, 0x12, 0x6a, 0xc8, 0x73, 0x86, 0xf9, 0xc8, 0x31, 0x57, 0x90, 0x79, 0x57, 0xa8, 0x53, 0xfe,
	0xa3, 0x2a, 0xec, 0x05, 0xa0, 0xec, 0x48, 0x9f, 0x90, 0x5b, 0x10, 0x8f, 0x8a, 0x95, 0x49, 0xdd,
	0xf2, 0x57, 0x91, 0xbf, 0x21, 0xd4, 0x0b, 0x75, 0x64, 0x95, 0x96, 0xf6, 0x98, 0x6c, 0x01, 0x0d,
	0xe7, 0x13, 0x32, 0xe2, 0x57, 0x8e, 0xd5, 0xb1, 0x51, 0x85, 0xd3, 0xf4, 0x40, 0x67, 0x49, 0x6f,
	0x93, 0xa6, 0x84, 0x24, 0xd6, 0x4f, 0x73, 0x16, 0x28, 0x6f, 0x4d, 0x5f, 0x66, 0x56, 0x74, 0xa4,
	0xb0, 0x6c, 0x29, 0xe3, 0x34, 0x50, 0x1e, 0x35, 0x65, 0x8b, 0x13, 0x1e, 0x29, 0xfa, 0x11, 0xa1,
	0x55, 0x90, 0xc9, 0xa8, 0xeb, 0x78, 0xc1, 0xad, 0x55, 0x90, 0x26, 0xf5, 0x6e, 0x91, 0x05, 0x7d,
	0x32, 0xbd, 0x0d, 0x9d, 0x47, 0xf5, 0x17, 0x7d, 0x40, 0x3a, 0xe5, 0x29, 0x34, 0xd7, 0xeb, 0xa6,
	0x4e, 0x59, 0xb1, 0x3d, 0x81, 0xe6, 0x8e, 0xdd, 0x22, 0x0b, 0xfa, 0x28, 0x78, 0x5b, 0x7a, 0x08,
	0xfd, 0x45, 0x6f, 0x91, 0x45, 0x13, 0xf6, 0xde, 0x2d, 0x9c, 0x7e, 0x21, 0xc0, 0x60, 0xa7, 0x6f,
	0x91, 0x65, 0x17, 0xa7, 0x9e, 0xb7, 0x33, 0xb7, 0xd7, 0xf6, 0x4b, 0x01, 0x7d, 0x42, 0xbc, 0x19,
	0xe1, 0x7c, 0x1e, 0x07, 0x03, 0xe5, 0xdd, 0xc6, 0x09, 0xb6, 0x78, 0x3d, 0x94, 0x3f, 0x03, 0x2d,
	0x98, 0x3e, 0xcd, 0xf4, 0xee, 0xe0, 0x04, 0x6b, 0x53, 0x1c, 0xfa, 0x90, 0xac, 0x8d, 0xe4, 0x6b,
	0x99, 0x5e, 0xca, 0x72, 0x77, 0xbd, 0x6d, 0x44, 0x77, 0x8c, 0xc2, 0x6d, 0x2c, 0xf5, 0xc8, 0x62,
	0x18, 0x8f, 0x54, 0xc1, 0x73, 0xef, 0x2d, 0x84, 0xd8, 0x4f, 0x48, 0x41, 0xda, 0x60, 0x70, 0xab,
	0x77, 0x17, 0x2d, 0xad, 0x48, 0xe0, 0xb2, 0x88, 0x0f, 0x8a, 0xec, 0xe2, 0x31, 0x53, 0x5c, 0x29,
	0x91, 0x4a, 0x28, 0x08, 0xef, 0x19, 0x57, 0xa2, 0xe2, 0x4c, 0xcb, 0x7b, 0x11, 0xec, 0xb0, 0xc1,
	0x86, 0x69, 0xfa, 0x5a, 0x70, 0xef, 0x6d, 0x9c, 0xab, 0xa5, 0x85, 0xc7, 0x28, 0xa3, 0xef, 0x93,
	0x95, 0xf2, 0x18, 0x62, 0x2d, 0xb1, 0x83, 0xa3, 0xb5, 0x9d, 0x14, 0x2b, 0x89, 0xfb, 0x64, 0xb5,
	0x84, 0x5d, 0x04, 0xf1, 0x88, 0x7b, 0xef, 0xe0, 0x68, 0x25, 0xfb, 0x0b, 0x90, 0xc2, 0x02, 0xf1,
	0x48, 0x99, 0x1b, 0x5a, 0x43, 0x77, 0x77, 0x1a, 0x7b, 0xf3, 0xfe, 0x2a, 0x28, 0xf4, 0x0d, 0xad,
	0xb1, 0xdb, 0x64, 0x19, 0x0f, 0x34, 0x4e, 0xfb, 0x2e, 0x4e, 0xbb, 0x04, 0x02, 0x9c, 0x11, 0xaa,
	0x56, 0x50, 0xea, 0xbd, 0x7a, 0x0f, 0xb5, 0x08, 0xd7, 0xdb, 0x63, 0xd5, 0xba, 0x46, 0x7c, 0xbf,
	0x54, 0xe3, 0x51, 0x70, 0x6a, 0x3d, 0xff, 0x07, 0x3a, 0x2c, 0x40, 0xa2, 0x67, 0x06, 0x75, 0x96,
	0xb0, 0x4c, 0xab, 0xef, 0x1b, 0x76, 0x96, 0x9c, 0xa2, 0x80, 0xfe, 0xb9, 0x41, 0xb6, 0x66, 0x1f,
	0x78, 0x6f, 0x0f, 0xf3, 0x76, 0x72, 0xad, 0x89, 0xb1, 0x5e, 0xc1, 0xfb, 0x1b, 0xd9, 0x8c, 0x5b,
	0x05, 0x8e, 0x84, 0xb9, 0x4b, 0xbc, 0x07, 0x68, 0xe0, 0x42, 0x8c, 0x97, 0x07, 0xdc, 0x81, 0xd5,
	0xdb, 0x02, 0x11, 0x1f, 0xea, 0xdd, 0x8a, 0xdd, 0x45, 0x81, 0xc8, 0xdf, 0x36, 0x48, 0xab, 0x5a,
	0x4d, 0x7a, 0x0f, 0xdf, 0x40, 0xde, 0xaf, 0x55, 0x1e, 0x7e, 0xb3, 0x52, 0xb6, 0xee, 0xfe, 0xc6,
	0x94, 0x27, 0x98, 0xf3, 0x73, 0x39, 0xc4, 0x4b, 0x87, 0x15, 0xb4, 0x43, 0xe6, 0x62, 0x2e, 0x4d,
	0x87, 0x00, 0x3f, 0xa7, 0x5a, 0x81, 0x1b, 0xff, 0xb9, 0x15, 0x98, 0xee, 0x42, 0xe0, 0x9e, 0x4c,
	0x82, 0xb0, 0xd6, 0x2c, 0x90, 0x24, 0x08, 0x6d, 0xaf, 0xf0, 0x29, 0xe9, 0xc0, 0x7a, 0xe2, 0x83,
	0x8b, 0x4c, 0xda, 0xc5, 0xe0, 0xc9, 0xb2, 0xdf, 0xba, 0xa9, 0x32, 0x27, 0xeb, 0x22, 0x93, 0x96,
	0xf8, 0x03, 0xb2, 0x59, 0x12, 0x13, 0x95, 0x5d, 0x7e, 0x27, 0xf6, 0x4b, 0xe2, 0x01, 0x1b, 0x2d,
	0x74, 0x85, 0x92, 0x19, 0x00, 0xaa, 0x8c, 0x29, 0x79, 0x39, 0xd0, 0x3a, 0x28, 0xcf, 0x8c, 0x6e,
	0x7a, 0xbc, 0xee, 0xb7, 0x8c, 0xd7, 0xfd, 0x77, 0xe3, 0x75, 0xeb, 0xe3, 0xfd, 0xa3, 0x45, 0x5a,
	0xb8, 0x4f, 0x51, 0x94, 0x63, 0xbf, 0xd6, 0x21, 0x73, 0xc1, 0xb9, 0xb0, 0x1b, 0x14, 0x9c, 0x8b,
	0xff, 0x66, 0x83, 0x1e, 0x11, 0x8a, 0x90, 0x24, 0x0c, 0x54, 0x51, 0xdb, 0xa6, 0x0e, 0x68, 0x4e,
	0x40, 0x51, 0x47, 0xeb, 0xe0, 0x9e, 0xdc, 0x32, 0x44, 0xe3, 0xb9, 0xb0, 0xe8, 0x7d, 0x82, 0x8e,
	0x60, 0x26, 0xbe, 0x2d, 0xfc, 0xa6, 0x4e, 0x5e, 0xa0, 0x7a, 0x85, 0x1a, 0x8b, 0xbf, 0x4f, 0x56,
	0x41, 0x98, 0x44, 0xe5, 0x42, 0x74, 0x25, 0xbf, 0x62, 0xc4, 0x35, 0x60, 0x75, 0x07, 0x17, 0x4b,
	0x60, 0xb9, 0x87, 0xf4, 0x63, 0xb2, 0x61, 0x24, 0x81, 0xb6, 0xd0, 0xa0, 0x97, 0x10, 0xbd, 0x6e,
	0x75, 0x27, 0xa5, 0x6a, 0x2a, 0x62, 0x97, 0xa7, 0x23, 0x56, 0x7b, 0xa1, 0x5b, 0xf3, 0x19, 0x71,
	0x5e, 0xe8, 0xce, 0xf0, 0x59, 0xb7, 0xe6, 0xb3, 0x66, 0x89, 0x9e, 0xf0, 0x99, 0x36, 0xad, 0x5b,
	0x35, 0xad, 0xe5, 0x4c, 0xeb, 0x56, 0x4c, 0x33, 0x21, 0x83, 0xa1, 0x3d, 0xb1, 0x8e, 0xb6, 0xb3,
	0x0d, 0x94, 0x13, 0x4b, 0xf9, 0x5d, 0x03, 0x92, 0xd7, 0x45, 0x26, 0x2f, 0x32, 0xb8, 0xb7, 0x0c,
	0x61, 0x05, 0x6f, 0x1c, 0x71, 0xad, 0x37, 0x4e, 0xf5, 0xf0, 0xfa, 0x1d, 0xb7, 0x86, 0x8a, 0x31,
	0x79, 0x01, 0xd5, 0xa8, 0x2a, 0xf2, 0x40, 0xc8, 0xd2, 0x98, 0x55, 0x6d, 0x4c, 0x5e, 0x1c, 0x3b,
	0x9d, 0xe5, 0x3c, 0x20, 0xe8, 0xbd, 0xa4, 0xea, 0xaa, 0x0e, 0xc2, 0x57, 0xad, 0x7c, 0x12, 0x7a,
	0x38, 0x01, 0x5d, 0x73, 0xd0, 0xc3, 0x2a, 0xf4, 0x11, 0xa1, 0x7a, 0xad, 0xbc, 0x0a, 0xa6, 0x7a,
	0xb7, 0x50, 0xf3, 0xac, 0x82, 0xde, 0x25, 0xed, 0x58, 0xd7, 0x93, 0x13, 0x85, 0x59, 0x33, 0x86,
	0x2a, 0xd2, 0x60, 0x7e, 0xdf, 0xb0, 0x43, 0xba, 0x2b, 0x08, 0x90, 0x1b, 0xe8, 0x75, 0xf9, 0x06,
	0xbc, 0x5e, 0xb9, 0xf9, 0x8c, 0x09, 0x27, 0x2a, 0xbb, 0x9c, 0x8c, 0xa3, 0x43, 0x76, 0x1e, 0xa7,
	0x97, 0x2a, 0xe3, 0xe5, 0x45, 0xbc, 0x59, 0x9e, 0x91, 0xcf, 0x8c, 0xae, 0x16, 0x7b, 0xd3, 0x9c,
	0xad, 0x32, 0xf6, 0xea, 0x9c, 0x27, 0xc4, 0xb3, 0x67, 0x76, 0x8a, 0xa6, 0xeb, 0xc9, 0x2d, 0xa3,
	0x9f, 0xcd, 0xec, 0xce, 0x64, 0x7a, 0x8e, 0xd9, 0x9d, 0xc1, 0xfc, 0x4b, 0x43, 0x1b, 0xe7, 0xba,
	0x6a, 0xc7, 0xbb, 0x8d, 0xde, 0xff, 0xea, 0x5a, 0xbd, 0x3f, 0x2b, 0x73, 0x68, 0x7f, 0xda, 0x36,
	0xbb, 0xb6, 0xce, 0xee, 0xf4, 0x3a, 0xef, 0xbc, 0x99, 0x75, 0x76, 0x67, 0xae, 0xb3, 0x5b, 0x5b,
	0xe7, 0xee, 0xdf, 0x5b, 0x64, 0xd9, 0x95, 0x06, 0xf4, 0x3e, 0x36, 0x7a, 0xa6, 0x27, 0x38, 0x60,
	0xfd, 0x71, 0xc1, 0xcd, 0x3b, 0x40, 0xdb, 0x36, 0xc2, 0x07, 0x4f, 0xc7, 0x05, 0xa7, 0xc7, 0xe4,
	0x1e, 0x00, 0xb3, 0x2c, 0x16, 0x61, 0x50, 0x40, 0xc9, 0x0c, 0x1d, 0xfb, 0x65, 0x30, 0xae, 0x3d,
	0x07, 0x6c, 0x0b, 0x75, 0x54, 0x82, 0x7e, 0xac, 0x31, 0xb6, 0x9d, 0xfa, 0x88, 0xac, 0x0b, 0x5d,
	0x6b, 0x31, 0xc5, 0x8b, 0xda, 0x7b, 0x40, 0x47, 0x60, 0xdd, 0x75, 0xc6, 0x0b, 0x0b, 0xff, 0x3f,
	0xb2, 0x01, 0x30, 0xac, 0x84, 0x85, 0xec, 0xa7, 0x23, 0x19, 0x31, 0x31, 0xc8, 0xcc, 0x33, 0xc0,
	0x9a, 0xe2, 0x05, 0x74, 0x98, 0x3d, 0xad, 0xe9, 0x0d, 0x32, 0x68, 0x0d, 0xa7, 0x08, 0xa6, 0x95,
	0xd2, 0x4f, 0x01, 0x1b, 0x93, 0x1c, 0x5d, 0x46, 0x9b, 0x6e, 0x1b, 0xca, 0xa4, 0xc9, 0xb7, 0x80,
	0x96, 0x50, 0xbe, 0x1c, 0x4e, 0xbe, 0x30, 0xe4, 0xa2, 0x5f, 0x05, 0x2e, 0xda, 0x47, 0x03, 0x1f,
	0xe5, 0x95, 0xce, 0xbc, 0xec, 0x4e, 0x5f, 0xf3, 0x31, 0x93, 0xa3, 0xa4, 0xcf, 0x73, 0xcc, 0x59,
	0x6d, 0xbf, 0x7c, 0x8e, 0x7e, 0xce, 0xc7, 0x2f, 0x51, 0x43, 0xbf, 0x47, 0x6e, 0x97, 0x8c, 0x9c,
	0x8f, 0x14, 0x67, 0x02, 0x5a, 0x26, 0x79, 0x2e, 0x06, 0xa6, 0xf9, 0x2f, 0xdf, 0xbe, 0x7d, 0xd0,
	0xf7, 0xa2, 0x63, 0xd4, 0xd2, 0x27, 0x33, 0xa9, 0x49, 0x70, 0x05, 0x5d, 0x0d, 0xc1, 0x19, 0x37,
	0xeb, 0xd4, 0x93, 0xe0, 0xaa, 0x17, 0x81, 0xbf, 0x66, 0x30, 0x65, 0x1a, 0x71, 0xcc, 0x6d, 0xd5,
	0x07, 0x75, 0xc3, 0x7b, 0x99, 0x46, 0x9c, 0x7e, 0x9f, 0xdc, 0x99, 0xb5, 0xd6, 0x51, 0x9e, 0xdb,
	0x77, 0x82, 0xb6, 0x7f, 0x6b, 0x6a, 0xb1, 0x5a, 0xfd, 0x2d, 0x73, 0xbe, 0xe6, 0x63, 0x9d, 0xf5,
	0x66, 0xcc, 0xf9, 0x9c, 0x8f, 0x15, 0x7d, 0x4a, 0xee, 0xcd, 0xa0, 0xe5, 0x3c, 0x4c, 0x2f, 0x38,
	0x44, 0x53, 0x88, 0x29, 0xb0, 0xed, 0xdf, 0xa9, 0xb3, 0x7d, 0x0d, 0x39, 0xe3, 0x21, 0x74, 0x97,
	0x70, 0x01, 0x4d, 0x34, 0x24, 0x98, 0x9d, 0xda, 0x7e, 0xe7, 0x22, 0x93, 0x13, 0xcd, 0x01, 0x5c,
	0xf9, 0x6b, 0x95, 0x97, 0x33, 0x7d, 0xea, 0x30, 0x39, 0x35, 0x0f, 0xd2, 0x6b, 0x3d, 0xcb, 0xd3,
	0xef, 0x75, 0x7e, 0x47, 0xcb, 0x5c, 0xef, 0xab, 0xe8, 0xaf, 0x1a, 0x64, 0xc9, 0x1e, 0x24, 0xcc,
	0x83, 0xff, 0x83, 0x55, 0x2d, 0x06, 0xfa, 0xbc, 0xd2, 0xdb, 0x64, 0x09, 0x0e, 0x05, 0x76, 0xa0,
	0xfa, 0x01, 0x64, 0x31, 0x97, 0x43, 0x6c, 0x40, 0x6f, 0x11, 0xf8, 0xc9, 0xa0, 0xeb, 0x58, 0xd7,
	0x4f, 0x11, 0xb9, 0x1c, 0xbe, 0xe0, 0x92, 0xee, 0x90, 0x96, 0x6b, 0x4c, 0x40, 0xab, 0xdf, 0x3a,
	0x48, 0x2e, 0x87, 0x70, 0x53, 0x01, 0xe2, 0xeb, 0x86, 0x1e, 0x16, 0x20, 0x98, 0xc9, 0xae, 0xbb,
	0xa5, 0xaa, 0x75, 0x4b, 0x68, 0x04, 0x2c, 0x06, 0xea, 0x49, 0x73, 0xee, 0x8b, 0xa0, 0x1f, 0x73,
	0xf3, 0xa8, 0xd2, 0xd4, 0xb2, 0x57, 0x20, 0x82, 0x5e, 0xd8, 0x40, 0x92, 0x20, 0x34, 0xc9, 0x70,
	0x59, 0x4b, 0x4e, 0x82, 0x90, 0xfe, 0xb2, 0x41, 0xcc, 0x17, 0x13, 0x19, 0x66, 0xbc, 0xe6, 0x01,
	0xbf, 0x5e, 0x63, 0x4c, 0x4b, 0xe1, 0x2f, 0xe9, 0x79, 0x7b, 0x19, 0x7d, 0x9f, 0xac, 0xe8, 0xdf,
	0x22, 0x33, 0x86, 0xe8, 0xc7, 0x9b, 0xb6, 0x95, 0xd6, 0x4d, 0xb9, 0x90, 0x02, 0xb3, 0x57, 0xdb,
	0x9a, 0xf2, 0x85, 0x14, 0x15, 0x67, 0xe8, 0x66, 0x77, 0xbb, 0xea, 0x0c, 0xdd, 0x7e, 0xfe, 0x69,
	0xce, 0xb4, 0x35, 0xe6, 0xff, 0x80, 0xd0, 0x45, 0x64, 0x79, 0x1a, 0x72, 0xa5, 0x98, 0xb3, 0x40,
	0x44, 0xde, 0x01, 0x52, 0xd7, 0x8c, 0xaa, 0x67, 0x34, 0xbd, 0x08, 0x8a, 0x93, 0xca, 0x7f, 0x03,
	0x2b, 0x8c, 0xc7, 0xc8, 0x58, 0x2f, 0xff, 0x2b, 0x58, 0x72, 0x26, 0xfe, 0x39, 0xa8, 0x8a, 0x7c,
	0x14, 0x16, 0xa3, 0x1c, 0x49, 0x87, 0xb5, 0x7b, 0xe5, 0xcc, 0x2a, 0x7b, 0x11, 0xe4, 0xb5, 0x59,
	0xac, 0x61, 0xa0, 0x86, 0xe6, 0xd9, 0xe3, 0x13, 0x64, 0x6f, 0x4f, 0xb3, 0x3f, 0x0f, 0xd4, 0x50,
	0x3f, 0x84, 0xdc, 0x27, 0xab, 0xee, 0xed, 0x8d, 0x85, 0xe9, 0x48, 0x16, 0x5e, 0x17, 0x59, 0x2b,
	0x4e, 0x7c, 0x0c, 0x52, 0xfa, 0x4d, 0x83, 0xac, 0x54, 0x0d, 0x3b, 0x4f, 0xbd, 0x4f, 0x31, 0x16,
	0xfa, 0xd7, 0x1f, 0xd8, 0x7e, 0xbb, 0xe2, 0xb5, 0xf3, 0xb4, 0xbf, 0x80, 0xff, 0x0c, 0x7e, 0xfc,
	0xaf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x88, 0x50, 0x20, 0xb9, 0x22, 0x1e, 0x00, 0x00,
}
