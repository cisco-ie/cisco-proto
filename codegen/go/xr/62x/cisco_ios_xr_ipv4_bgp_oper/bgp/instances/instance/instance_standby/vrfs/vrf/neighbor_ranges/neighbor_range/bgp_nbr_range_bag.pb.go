/*
Copyright 2019 Cisco Systems

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: bgp_nbr_range_bag.proto

package cisco_ios_xr_ipv4_bgp_oper_bgp_instances_instance_instance_standby_vrfs_vrf_neighbor_ranges_neighbor_range

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type BgpNbrRangeBag_KEYS struct {
	InstanceName         string   `protobuf:"bytes,1,opt,name=instance_name,json=instanceName,proto3" json:"instance_name,omitempty"`
	VrfName              string   `protobuf:"bytes,2,opt,name=vrf_name,json=vrfName,proto3" json:"vrf_name,omitempty"`
	NeighborRangeAddress string   `protobuf:"bytes,3,opt,name=neighbor_range_address,json=neighborRangeAddress,proto3" json:"neighbor_range_address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BgpNbrRangeBag_KEYS) Reset()         { *m = BgpNbrRangeBag_KEYS{} }
func (m *BgpNbrRangeBag_KEYS) String() string { return proto.CompactTextString(m) }
func (*BgpNbrRangeBag_KEYS) ProtoMessage()    {}
func (*BgpNbrRangeBag_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_458dea1d4196ae27, []int{0}
}

func (m *BgpNbrRangeBag_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BgpNbrRangeBag_KEYS.Unmarshal(m, b)
}
func (m *BgpNbrRangeBag_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BgpNbrRangeBag_KEYS.Marshal(b, m, deterministic)
}
func (m *BgpNbrRangeBag_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpNbrRangeBag_KEYS.Merge(m, src)
}
func (m *BgpNbrRangeBag_KEYS) XXX_Size() int {
	return xxx_messageInfo_BgpNbrRangeBag_KEYS.Size(m)
}
func (m *BgpNbrRangeBag_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpNbrRangeBag_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_BgpNbrRangeBag_KEYS proto.InternalMessageInfo

func (m *BgpNbrRangeBag_KEYS) GetInstanceName() string {
	if m != nil {
		return m.InstanceName
	}
	return ""
}

func (m *BgpNbrRangeBag_KEYS) GetVrfName() string {
	if m != nil {
		return m.VrfName
	}
	return ""
}

func (m *BgpNbrRangeBag_KEYS) GetNeighborRangeAddress() string {
	if m != nil {
		return m.NeighborRangeAddress
	}
	return ""
}

type BgpL2VpnAddrT struct {
	L2VpnAddress         []uint32 `protobuf:"varint,1,rep,packed,name=l2vpn_address,json=l2vpnAddress,proto3" json:"l2vpn_address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BgpL2VpnAddrT) Reset()         { *m = BgpL2VpnAddrT{} }
func (m *BgpL2VpnAddrT) String() string { return proto.CompactTextString(m) }
func (*BgpL2VpnAddrT) ProtoMessage()    {}
func (*BgpL2VpnAddrT) Descriptor() ([]byte, []int) {
	return fileDescriptor_458dea1d4196ae27, []int{1}
}

func (m *BgpL2VpnAddrT) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BgpL2VpnAddrT.Unmarshal(m, b)
}
func (m *BgpL2VpnAddrT) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BgpL2VpnAddrT.Marshal(b, m, deterministic)
}
func (m *BgpL2VpnAddrT) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpL2VpnAddrT.Merge(m, src)
}
func (m *BgpL2VpnAddrT) XXX_Size() int {
	return xxx_messageInfo_BgpL2VpnAddrT.Size(m)
}
func (m *BgpL2VpnAddrT) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpL2VpnAddrT.DiscardUnknown(m)
}

var xxx_messageInfo_BgpL2VpnAddrT proto.InternalMessageInfo

func (m *BgpL2VpnAddrT) GetL2VpnAddress() []uint32 {
	if m != nil {
		return m.L2VpnAddress
	}
	return nil
}

type BgpL2VpnMspwAddrT struct {
	L2VpnAddress         []uint32 `protobuf:"varint,1,rep,packed,name=l2vpn_address,json=l2vpnAddress,proto3" json:"l2vpn_address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BgpL2VpnMspwAddrT) Reset()         { *m = BgpL2VpnMspwAddrT{} }
func (m *BgpL2VpnMspwAddrT) String() string { return proto.CompactTextString(m) }
func (*BgpL2VpnMspwAddrT) ProtoMessage()    {}
func (*BgpL2VpnMspwAddrT) Descriptor() ([]byte, []int) {
	return fileDescriptor_458dea1d4196ae27, []int{2}
}

func (m *BgpL2VpnMspwAddrT) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BgpL2VpnMspwAddrT.Unmarshal(m, b)
}
func (m *BgpL2VpnMspwAddrT) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BgpL2VpnMspwAddrT.Marshal(b, m, deterministic)
}
func (m *BgpL2VpnMspwAddrT) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpL2VpnMspwAddrT.Merge(m, src)
}
func (m *BgpL2VpnMspwAddrT) XXX_Size() int {
	return xxx_messageInfo_BgpL2VpnMspwAddrT.Size(m)
}
func (m *BgpL2VpnMspwAddrT) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpL2VpnMspwAddrT.DiscardUnknown(m)
}

var xxx_messageInfo_BgpL2VpnMspwAddrT proto.InternalMessageInfo

func (m *BgpL2VpnMspwAddrT) GetL2VpnAddress() []uint32 {
	if m != nil {
		return m.L2VpnAddress
	}
	return nil
}

type BgpIpv4SrpolicyAddrT struct {
	Ipv4SrpolicyAddress  []uint32 `protobuf:"varint,1,rep,packed,name=ipv4_srpolicy_address,json=ipv4SrpolicyAddress,proto3" json:"ipv4_srpolicy_address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BgpIpv4SrpolicyAddrT) Reset()         { *m = BgpIpv4SrpolicyAddrT{} }
func (m *BgpIpv4SrpolicyAddrT) String() string { return proto.CompactTextString(m) }
func (*BgpIpv4SrpolicyAddrT) ProtoMessage()    {}
func (*BgpIpv4SrpolicyAddrT) Descriptor() ([]byte, []int) {
	return fileDescriptor_458dea1d4196ae27, []int{3}
}

func (m *BgpIpv4SrpolicyAddrT) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BgpIpv4SrpolicyAddrT.Unmarshal(m, b)
}
func (m *BgpIpv4SrpolicyAddrT) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BgpIpv4SrpolicyAddrT.Marshal(b, m, deterministic)
}
func (m *BgpIpv4SrpolicyAddrT) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpIpv4SrpolicyAddrT.Merge(m, src)
}
func (m *BgpIpv4SrpolicyAddrT) XXX_Size() int {
	return xxx_messageInfo_BgpIpv4SrpolicyAddrT.Size(m)
}
func (m *BgpIpv4SrpolicyAddrT) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpIpv4SrpolicyAddrT.DiscardUnknown(m)
}

var xxx_messageInfo_BgpIpv4SrpolicyAddrT proto.InternalMessageInfo

func (m *BgpIpv4SrpolicyAddrT) GetIpv4SrpolicyAddress() []uint32 {
	if m != nil {
		return m.Ipv4SrpolicyAddress
	}
	return nil
}

type BgpIpv6SrpolicyAddrT struct {
	Ipv6SrpolicyAddress  []uint32 `protobuf:"varint,1,rep,packed,name=ipv6_srpolicy_address,json=ipv6SrpolicyAddress,proto3" json:"ipv6_srpolicy_address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BgpIpv6SrpolicyAddrT) Reset()         { *m = BgpIpv6SrpolicyAddrT{} }
func (m *BgpIpv6SrpolicyAddrT) String() string { return proto.CompactTextString(m) }
func (*BgpIpv6SrpolicyAddrT) ProtoMessage()    {}
func (*BgpIpv6SrpolicyAddrT) Descriptor() ([]byte, []int) {
	return fileDescriptor_458dea1d4196ae27, []int{4}
}

func (m *BgpIpv6SrpolicyAddrT) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BgpIpv6SrpolicyAddrT.Unmarshal(m, b)
}
func (m *BgpIpv6SrpolicyAddrT) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BgpIpv6SrpolicyAddrT.Marshal(b, m, deterministic)
}
func (m *BgpIpv6SrpolicyAddrT) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpIpv6SrpolicyAddrT.Merge(m, src)
}
func (m *BgpIpv6SrpolicyAddrT) XXX_Size() int {
	return xxx_messageInfo_BgpIpv6SrpolicyAddrT.Size(m)
}
func (m *BgpIpv6SrpolicyAddrT) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpIpv6SrpolicyAddrT.DiscardUnknown(m)
}

var xxx_messageInfo_BgpIpv6SrpolicyAddrT proto.InternalMessageInfo

func (m *BgpIpv6SrpolicyAddrT) GetIpv6SrpolicyAddress() []uint32 {
	if m != nil {
		return m.Ipv6SrpolicyAddress
	}
	return nil
}

type BgpAddrtype struct {
	Afi                    string                `protobuf:"bytes,1,opt,name=afi,proto3" json:"afi,omitempty"`
	Ipv4Address            string                `protobuf:"bytes,2,opt,name=ipv4_address,json=ipv4Address,proto3" json:"ipv4_address,omitempty"`
	Ipv4McastAddress       string                `protobuf:"bytes,3,opt,name=ipv4_mcast_address,json=ipv4McastAddress,proto3" json:"ipv4_mcast_address,omitempty"`
	Ipv4LabelAddress       string                `protobuf:"bytes,4,opt,name=ipv4_label_address,json=ipv4LabelAddress,proto3" json:"ipv4_label_address,omitempty"`
	Ipv4TunnelAddress      string                `protobuf:"bytes,5,opt,name=ipv4_tunnel_address,json=ipv4TunnelAddress,proto3" json:"ipv4_tunnel_address,omitempty"`
	Ipv4MdtAddress         string                `protobuf:"bytes,6,opt,name=ipv4mdt_address,json=ipv4mdtAddress,proto3" json:"ipv4mdt_address,omitempty"`
	Ipv4VpnAddress         string                `protobuf:"bytes,7,opt,name=ipv4vpn_address,json=ipv4vpnAddress,proto3" json:"ipv4vpn_address,omitempty"`
	Ipv4VpnaMcastddress    string                `protobuf:"bytes,8,opt,name=ipv4vpna_mcastddress,json=ipv4vpnaMcastddress,proto3" json:"ipv4vpna_mcastddress,omitempty"`
	Ipv6Address            string                `protobuf:"bytes,9,opt,name=ipv6_address,json=ipv6Address,proto3" json:"ipv6_address,omitempty"`
	Ipv6McastAddress       string                `protobuf:"bytes,10,opt,name=ipv6_mcast_address,json=ipv6McastAddress,proto3" json:"ipv6_mcast_address,omitempty"`
	Ipv6LabelAddress       string                `protobuf:"bytes,11,opt,name=ipv6_label_address,json=ipv6LabelAddress,proto3" json:"ipv6_label_address,omitempty"`
	Ipv6VpnAddress         string                `protobuf:"bytes,12,opt,name=ipv6vpn_address,json=ipv6vpnAddress,proto3" json:"ipv6vpn_address,omitempty"`
	Ipv6VpnMcastAddress    string                `protobuf:"bytes,13,opt,name=ipv6vpn_mcast_address,json=ipv6vpnMcastAddress,proto3" json:"ipv6vpn_mcast_address,omitempty"`
	L2VpnvplsAddress       *BgpL2VpnAddrT        `protobuf:"bytes,14,opt,name=l2vpnvpls_address,json=l2vpnvplsAddress,proto3" json:"l2vpnvpls_address,omitempty"`
	RtConstraintAddress    string                `protobuf:"bytes,15,opt,name=rt_constraint_address,json=rtConstraintAddress,proto3" json:"rt_constraint_address,omitempty"`
	Ipv6MvpnAddress        string                `protobuf:"bytes,16,opt,name=ipv6mvpn_address,json=ipv6mvpnAddress,proto3" json:"ipv6mvpn_address,omitempty"`
	Ipv4MvpnAddress        string                `protobuf:"bytes,17,opt,name=ipv4mvpn_address,json=ipv4mvpnAddress,proto3" json:"ipv4mvpn_address,omitempty"`
	L2VpnEvpnAddress       string                `protobuf:"bytes,18,opt,name=l2vpn_evpn_address,json=l2vpnEvpnAddress,proto3" json:"l2vpn_evpn_address,omitempty"`
	LsLsAddress            string                `protobuf:"bytes,19,opt,name=ls_ls_address,json=lsLsAddress,proto3" json:"ls_ls_address,omitempty"`
	L2VpnMspwAddress       *BgpL2VpnMspwAddrT    `protobuf:"bytes,20,opt,name=l2vpn_mspw_address,json=l2vpnMspwAddress,proto3" json:"l2vpn_mspw_address,omitempty"`
	Ipv4FlowspecAddress    string                `protobuf:"bytes,21,opt,name=ipv4_flowspec_address,json=ipv4FlowspecAddress,proto3" json:"ipv4_flowspec_address,omitempty"`
	Ipv6FlowspecAddress    string                `protobuf:"bytes,22,opt,name=ipv6_flowspec_address,json=ipv6FlowspecAddress,proto3" json:"ipv6_flowspec_address,omitempty"`
	Ipv4VpnFlowspecAddress string                `protobuf:"bytes,23,opt,name=ipv4vpn_flowspec_address,json=ipv4vpnFlowspecAddress,proto3" json:"ipv4vpn_flowspec_address,omitempty"`
	Ipv6VpnFlowspecAddress string                `protobuf:"bytes,24,opt,name=ipv6vpn_flowspec_address,json=ipv6vpnFlowspecAddress,proto3" json:"ipv6vpn_flowspec_address,omitempty"`
	Ipv4SrPolicyAddress    *BgpIpv4SrpolicyAddrT `protobuf:"bytes,25,opt,name=ipv4sr_policy_address,json=ipv4srPolicyAddress,proto3" json:"ipv4sr_policy_address,omitempty"`
	Ipv6SrPolicyAddress    *BgpIpv6SrpolicyAddrT `protobuf:"bytes,26,opt,name=ipv6sr_policy_address,json=ipv6srPolicyAddress,proto3" json:"ipv6sr_policy_address,omitempty"`
	XXX_NoUnkeyedLiteral   struct{}              `json:"-"`
	XXX_unrecognized       []byte                `json:"-"`
	XXX_sizecache          int32                 `json:"-"`
}

func (m *BgpAddrtype) Reset()         { *m = BgpAddrtype{} }
func (m *BgpAddrtype) String() string { return proto.CompactTextString(m) }
func (*BgpAddrtype) ProtoMessage()    {}
func (*BgpAddrtype) Descriptor() ([]byte, []int) {
	return fileDescriptor_458dea1d4196ae27, []int{5}
}

func (m *BgpAddrtype) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BgpAddrtype.Unmarshal(m, b)
}
func (m *BgpAddrtype) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BgpAddrtype.Marshal(b, m, deterministic)
}
func (m *BgpAddrtype) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpAddrtype.Merge(m, src)
}
func (m *BgpAddrtype) XXX_Size() int {
	return xxx_messageInfo_BgpAddrtype.Size(m)
}
func (m *BgpAddrtype) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpAddrtype.DiscardUnknown(m)
}

var xxx_messageInfo_BgpAddrtype proto.InternalMessageInfo

func (m *BgpAddrtype) GetAfi() string {
	if m != nil {
		return m.Afi
	}
	return ""
}

func (m *BgpAddrtype) GetIpv4Address() string {
	if m != nil {
		return m.Ipv4Address
	}
	return ""
}

func (m *BgpAddrtype) GetIpv4McastAddress() string {
	if m != nil {
		return m.Ipv4McastAddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv4LabelAddress() string {
	if m != nil {
		return m.Ipv4LabelAddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv4TunnelAddress() string {
	if m != nil {
		return m.Ipv4TunnelAddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv4MdtAddress() string {
	if m != nil {
		return m.Ipv4MdtAddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv4VpnAddress() string {
	if m != nil {
		return m.Ipv4VpnAddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv4VpnaMcastddress() string {
	if m != nil {
		return m.Ipv4VpnaMcastddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv6Address() string {
	if m != nil {
		return m.Ipv6Address
	}
	return ""
}

func (m *BgpAddrtype) GetIpv6McastAddress() string {
	if m != nil {
		return m.Ipv6McastAddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv6LabelAddress() string {
	if m != nil {
		return m.Ipv6LabelAddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv6VpnAddress() string {
	if m != nil {
		return m.Ipv6VpnAddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv6VpnMcastAddress() string {
	if m != nil {
		return m.Ipv6VpnMcastAddress
	}
	return ""
}

func (m *BgpAddrtype) GetL2VpnvplsAddress() *BgpL2VpnAddrT {
	if m != nil {
		return m.L2VpnvplsAddress
	}
	return nil
}

func (m *BgpAddrtype) GetRtConstraintAddress() string {
	if m != nil {
		return m.RtConstraintAddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv6MvpnAddress() string {
	if m != nil {
		return m.Ipv6MvpnAddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv4MvpnAddress() string {
	if m != nil {
		return m.Ipv4MvpnAddress
	}
	return ""
}

func (m *BgpAddrtype) GetL2VpnEvpnAddress() string {
	if m != nil {
		return m.L2VpnEvpnAddress
	}
	return ""
}

func (m *BgpAddrtype) GetLsLsAddress() string {
	if m != nil {
		return m.LsLsAddress
	}
	return ""
}

func (m *BgpAddrtype) GetL2VpnMspwAddress() *BgpL2VpnMspwAddrT {
	if m != nil {
		return m.L2VpnMspwAddress
	}
	return nil
}

func (m *BgpAddrtype) GetIpv4FlowspecAddress() string {
	if m != nil {
		return m.Ipv4FlowspecAddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv6FlowspecAddress() string {
	if m != nil {
		return m.Ipv6FlowspecAddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv4VpnFlowspecAddress() string {
	if m != nil {
		return m.Ipv4VpnFlowspecAddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv6VpnFlowspecAddress() string {
	if m != nil {
		return m.Ipv6VpnFlowspecAddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv4SrPolicyAddress() *BgpIpv4SrpolicyAddrT {
	if m != nil {
		return m.Ipv4SrPolicyAddress
	}
	return nil
}

func (m *BgpAddrtype) GetIpv6SrPolicyAddress() *BgpIpv6SrpolicyAddrT {
	if m != nil {
		return m.Ipv6SrPolicyAddress
	}
	return nil
}

type BgpNbrRangeAf_ struct {
	AfName                                        string   `protobuf:"bytes,1,opt,name=af_name,json=afName,proto3" json:"af_name,omitempty"`
	IsNeighborRouteReflectorClient                bool     `protobuf:"varint,2,opt,name=is_neighbor_route_reflector_client,json=isNeighborRouteReflectorClient,proto3" json:"is_neighbor_route_reflector_client,omitempty"`
	IsLegacyPeRt                                  bool     `protobuf:"varint,3,opt,name=is_legacy_pe_rt,json=isLegacyPeRt,proto3" json:"is_legacy_pe_rt,omitempty"`
	IsNeighborAfCapable                           bool     `protobuf:"varint,4,opt,name=is_neighbor_af_capable,json=isNeighborAfCapable,proto3" json:"is_neighbor_af_capable,omitempty"`
	IsSoftReconfigurationInboundAllowed           bool     `protobuf:"varint,5,opt,name=is_soft_reconfiguration_inbound_allowed,json=isSoftReconfigurationInboundAllowed,proto3" json:"is_soft_reconfiguration_inbound_allowed,omitempty"`
	IsUseSoftReconfigurationAlwaysOn              bool     `protobuf:"varint,6,opt,name=is_use_soft_reconfiguration_always_on,json=isUseSoftReconfigurationAlwaysOn,proto3" json:"is_use_soft_reconfiguration_always_on,omitempty"`
	RemovePrivateAsFromUpdates                    bool     `protobuf:"varint,7,opt,name=remove_private_as_from_updates,json=removePrivateAsFromUpdates,proto3" json:"remove_private_as_from_updates,omitempty"`
	RemovePrivateAsEntireAspathFromUpdates        bool     `protobuf:"varint,8,opt,name=remove_private_as_entire_aspath_from_updates,json=removePrivateAsEntireAspathFromUpdates,proto3" json:"remove_private_as_entire_aspath_from_updates,omitempty"`
	RemovePrivateAsFromInboundUpdates             bool     `protobuf:"varint,9,opt,name=remove_private_as_from_inbound_updates,json=removePrivateAsFromInboundUpdates,proto3" json:"remove_private_as_from_inbound_updates,omitempty"`
	RemovePrivateAsEntireAspathFromInboundUpdates bool     `protobuf:"varint,10,opt,name=remove_private_as_entire_aspath_from_inbound_updates,json=removePrivateAsEntireAspathFromInboundUpdates,proto3" json:"remove_private_as_entire_aspath_from_inbound_updates,omitempty"`
	FlowspecValidationDIsable                     bool     `protobuf:"varint,11,opt,name=flowspec_validation_d_isable,json=flowspecValidationDIsable,proto3" json:"flowspec_validation_d_isable,omitempty"`
	FlowspecRedirectValidationDIsable             bool     `protobuf:"varint,12,opt,name=flowspec_redirect_validation_d_isable,json=flowspecRedirectValidationDIsable,proto3" json:"flowspec_redirect_validation_d_isable,omitempty"`
	OrrGroupName                                  string   `protobuf:"bytes,13,opt,name=orr_group_name,json=orrGroupName,proto3" json:"orr_group_name,omitempty"`
	OrrGroupIndex                                 uint32   `protobuf:"varint,14,opt,name=orr_group_index,json=orrGroupIndex,proto3" json:"orr_group_index,omitempty"`
	IsOrrRootAddressConfigured                    bool     `protobuf:"varint,15,opt,name=is_orr_root_address_configured,json=isOrrRootAddressConfigured,proto3" json:"is_orr_root_address_configured,omitempty"`
	AdvertiseAfi                                  bool     `protobuf:"varint,16,opt,name=advertise_afi,json=advertiseAfi,proto3" json:"advertise_afi,omitempty"`
	AdvertiseAfiReorg                             bool     `protobuf:"varint,17,opt,name=advertise_afi_reorg,json=advertiseAfiReorg,proto3" json:"advertise_afi_reorg,omitempty"`
	AdvertiseAfiLocal                             bool     `protobuf:"varint,18,opt,name=advertise_afi_local,json=advertiseAfiLocal,proto3" json:"advertise_afi_local,omitempty"`
	AdvertiseAfiDisable                           bool     `protobuf:"varint,19,opt,name=advertise_afi_disable,json=advertiseAfiDisable,proto3" json:"advertise_afi_disable,omitempty"`
	AlwaysUseNextHopLocal                         bool     `protobuf:"varint,20,opt,name=always_use_next_hop_local,json=alwaysUseNextHopLocal,proto3" json:"always_use_next_hop_local,omitempty"`
	NextHopUnchanged                              bool     `protobuf:"varint,21,opt,name=next_hop_unchanged,json=nextHopUnchanged,proto3" json:"next_hop_unchanged,omitempty"`
	SentCommunityToNeighbor                       bool     `protobuf:"varint,22,opt,name=sent_community_to_neighbor,json=sentCommunityToNeighbor,proto3" json:"sent_community_to_neighbor,omitempty"`
	SentGshutCommunityToNeighbor                  bool     `protobuf:"varint,23,opt,name=sent_gshut_community_to_neighbor,json=sentGshutCommunityToNeighbor,proto3" json:"sent_gshut_community_to_neighbor,omitempty"`
	SentExtendedCommunityToNeighbor               bool     `protobuf:"varint,24,opt,name=sent_extended_community_to_neighbor,json=sentExtendedCommunityToNeighbor,proto3" json:"sent_extended_community_to_neighbor,omitempty"`
	NeighborDefaultOriginate                      bool     `protobuf:"varint,25,opt,name=neighbor_default_originate,json=neighborDefaultOriginate,proto3" json:"neighbor_default_originate,omitempty"`
	IsOrfSent                                     bool     `protobuf:"varint,26,opt,name=is_orf_sent,json=isOrfSent,proto3" json:"is_orf_sent,omitempty"`
	IsUpdateDeferred                              bool     `protobuf:"varint,27,opt,name=is_update_deferred,json=isUpdateDeferred,proto3" json:"is_update_deferred,omitempty"`
	IsOrfSendScheduled                            bool     `protobuf:"varint,28,opt,name=is_orf_send_scheduled,json=isOrfSendScheduled,proto3" json:"is_orf_send_scheduled,omitempty"`
	VpnUpdateGenEnabled                           bool     `protobuf:"varint,29,opt,name=vpn_update_gen_enabled,json=vpnUpdateGenEnabled,proto3" json:"vpn_update_gen_enabled,omitempty"`
	VpnUpdateGenTriggerEnabled                    bool     `protobuf:"varint,30,opt,name=vpn_update_gen_trigger_enabled,json=vpnUpdateGenTriggerEnabled,proto3" json:"vpn_update_gen_trigger_enabled,omitempty"`
	IsAddpathSendOperational                      bool     `protobuf:"varint,31,opt,name=is_addpath_send_operational,json=isAddpathSendOperational,proto3" json:"is_addpath_send_operational,omitempty"`
	IsAddpathReceiveOperational                   bool     `protobuf:"varint,32,opt,name=is_addpath_receive_operational,json=isAddpathReceiveOperational,proto3" json:"is_addpath_receive_operational,omitempty"`
	Weight                                        uint32   `protobuf:"varint,33,opt,name=weight,proto3" json:"weight,omitempty"`
	MaxPrefixLimit                                uint32   `protobuf:"varint,34,opt,name=max_prefix_limit,json=maxPrefixLimit,proto3" json:"max_prefix_limit,omitempty"`
	UseMaxPrefixWarningOnly                       bool     `protobuf:"varint,35,opt,name=use_max_prefix_warning_only,json=useMaxPrefixWarningOnly,proto3" json:"use_max_prefix_warning_only,omitempty"`
	MaxPrefixDiscardExtraPaths                    bool     `protobuf:"varint,36,opt,name=max_prefix_discard_extra_paths,json=maxPrefixDiscardExtraPaths,proto3" json:"max_prefix_discard_extra_paths,omitempty"`
	MaxPrefixExceedDiscardPaths                   bool     `protobuf:"varint,37,opt,name=max_prefix_exceed_discard_paths,json=maxPrefixExceedDiscardPaths,proto3" json:"max_prefix_exceed_discard_paths,omitempty"`
	MaxPrefixThresholdPercent                     uint32   `protobuf:"varint,38,opt,name=max_prefix_threshold_percent,json=maxPrefixThresholdPercent,proto3" json:"max_prefix_threshold_percent,omitempty"`
	MaxPrefixRestartTime                          uint32   `protobuf:"varint,39,opt,name=max_prefix_restart_time,json=maxPrefixRestartTime,proto3" json:"max_prefix_restart_time,omitempty"`
	IsPeerOrfCapable                              bool     `protobuf:"varint,40,opt,name=is_peer_orf_capable,json=isPeerOrfCapable,proto3" json:"is_peer_orf_capable,omitempty"`
	IsAdvertisedOrfSend                           bool     `protobuf:"varint,41,opt,name=is_advertised_orf_send,json=isAdvertisedOrfSend,proto3" json:"is_advertised_orf_send,omitempty"`
	IsReceivedOrfSendCapable                      bool     `protobuf:"varint,42,opt,name=is_received_orf_send_capable,json=isReceivedOrfSendCapable,proto3" json:"is_received_orf_send_capable,omitempty"`
	IsAdvertisedOrfReceive                        bool     `protobuf:"varint,43,opt,name=is_advertised_orf_receive,json=isAdvertisedOrfReceive,proto3" json:"is_advertised_orf_receive,omitempty"`
	IsReceivedOrfReceiveCapable                   bool     `protobuf:"varint,44,opt,name=is_received_orf_receive_capable,json=isReceivedOrfReceiveCapable,proto3" json:"is_received_orf_receive_capable,omitempty"`
	IsAdvertisedGracefulRestart                   bool     `protobuf:"varint,45,opt,name=is_advertised_graceful_restart,json=isAdvertisedGracefulRestart,proto3" json:"is_advertised_graceful_restart,omitempty"`
	IsGracefulRestartStateFlag                    bool     `protobuf:"varint,46,opt,name=is_graceful_restart_state_flag,json=isGracefulRestartStateFlag,proto3" json:"is_graceful_restart_state_flag,omitempty"`
	IsReceivedGracefulRestartCapable              bool     `protobuf:"varint,47,opt,name=is_received_graceful_restart_capable,json=isReceivedGracefulRestartCapable,proto3" json:"is_received_graceful_restart_capable,omitempty"`
	IsAddPathSendCapabilityAdvertised             bool     `protobuf:"varint,48,opt,name=is_add_path_send_capability_advertised,json=isAddPathSendCapabilityAdvertised,proto3" json:"is_add_path_send_capability_advertised,omitempty"`
	IsAddPathSendCapabilityReceived               bool     `protobuf:"varint,49,opt,name=is_add_path_send_capability_received,json=isAddPathSendCapabilityReceived,proto3" json:"is_add_path_send_capability_received,omitempty"`
	IsAddPathReceiveCapabilityAdvertised          bool     `protobuf:"varint,50,opt,name=is_add_path_receive_capability_advertised,json=isAddPathReceiveCapabilityAdvertised,proto3" json:"is_add_path_receive_capability_advertised,omitempty"`
	IsAddPathReceiveCapabilityReceived            bool     `protobuf:"varint,51,opt,name=is_add_path_receive_capability_received,json=isAddPathReceiveCapabilityReceived,proto3" json:"is_add_path_receive_capability_received,omitempty"`
	RestartTime                                   uint32   `protobuf:"varint,52,opt,name=restart_time,json=restartTime,proto3" json:"restart_time,omitempty"`
	LocalRestartTime                              uint32   `protobuf:"varint,53,opt,name=local_restart_time,json=localRestartTime,proto3" json:"local_restart_time,omitempty"`
	StalePathTimeout                              uint32   `protobuf:"varint,54,opt,name=stale_path_timeout,json=stalePathTimeout,proto3" json:"stale_path_timeout,omitempty"`
	RibPurgeTimeoutValue                          uint32   `protobuf:"varint,55,opt,name=rib_purge_timeout_value,json=ribPurgeTimeoutValue,proto3" json:"rib_purge_timeout_value,omitempty"`
	NeighborPreservedForwardingState              bool     `protobuf:"varint,56,opt,name=neighbor_preserved_forwarding_state,json=neighborPreservedForwardingState,proto3" json:"neighbor_preserved_forwarding_state,omitempty"`
	LongLivedGracefulRestartStaleTimeConfigured   bool     `protobuf:"varint,57,opt,name=long_lived_graceful_restart_stale_time_configured,json=longLivedGracefulRestartStaleTimeConfigured,proto3" json:"long_lived_graceful_restart_stale_time_configured,omitempty"`
	LongLivedGracefulRestartStaleTimeSent         uint32   `protobuf:"varint,58,opt,name=long_lived_graceful_restart_stale_time_sent,json=longLivedGracefulRestartStaleTimeSent,proto3" json:"long_lived_graceful_restart_stale_time_sent,omitempty"`
	LongLivedGracefulRestartStaleTimeAccept       uint32   `protobuf:"varint,59,opt,name=long_lived_graceful_restart_stale_time_accept,json=longLivedGracefulRestartStaleTimeAccept,proto3" json:"long_lived_graceful_restart_stale_time_accept,omitempty"`
	LongLivedGracefulRestartCapabilityReceived    bool     `protobuf:"varint,60,opt,name=long_lived_graceful_restart_capability_received,json=longLivedGracefulRestartCapabilityReceived,proto3" json:"long_lived_graceful_restart_capability_received,omitempty"`
	LongLivedGracefulRestartStaleTimeReceived     uint32   `protobuf:"varint,61,opt,name=long_lived_graceful_restart_stale_time_received,json=longLivedGracefulRestartStaleTimeReceived,proto3" json:"long_lived_graceful_restart_stale_time_received,omitempty"`
	NeighborPreservedLongLivedForwardingState     bool     `protobuf:"varint,62,opt,name=neighbor_preserved_long_lived_forwarding_state,json=neighborPreservedLongLivedForwardingState,proto3" json:"neighbor_preserved_long_lived_forwarding_state,omitempty"`
	NeighborLongLivedGracefulRestartCapable       bool     `protobuf:"varint,63,opt,name=neighbor_long_lived_graceful_restart_capable,json=neighborLongLivedGracefulRestartCapable,proto3" json:"neighbor_long_lived_graceful_restart_capable,omitempty"`
	NeighborLongLivedGracefulRestartTimeRemaining uint32   `protobuf:"varint,64,opt,name=neighbor_long_lived_graceful_restart_time_remaining,json=neighborLongLivedGracefulRestartTimeRemaining,proto3" json:"neighbor_long_lived_graceful_restart_time_remaining,omitempty"`
	IsPrefixOrfPresent                            bool     `protobuf:"varint,65,opt,name=is_prefix_orf_present,json=isPrefixOrfPresent,proto3" json:"is_prefix_orf_present,omitempty"`
	OrfEntriesReceived                            uint32   `protobuf:"varint,66,opt,name=orf_entries_received,json=orfEntriesReceived,proto3" json:"orf_entries_received,omitempty"`
	RoutePolicyPrefixOrf                          string   `protobuf:"bytes,67,opt,name=route_policy_prefix_orf,json=routePolicyPrefixOrf,proto3" json:"route_policy_prefix_orf,omitempty"`
	RoutePolicyIn                                 string   `protobuf:"bytes,68,opt,name=route_policy_in,json=routePolicyIn,proto3" json:"route_policy_in,omitempty"`
	RoutePolicyOut                                string   `protobuf:"bytes,69,opt,name=route_policy_out,json=routePolicyOut,proto3" json:"route_policy_out,omitempty"`
	RoutePolicyDefaultOriginate                   string   `protobuf:"bytes,70,opt,name=route_policy_default_originate,json=routePolicyDefaultOriginate,proto3" json:"route_policy_default_originate,omitempty"`
	IsNeighborEbgpWithoutInboundPolicy            bool     `protobuf:"varint,71,opt,name=is_neighbor_ebgp_without_inbound_policy,json=isNeighborEbgpWithoutInboundPolicy,proto3" json:"is_neighbor_ebgp_without_inbound_policy,omitempty"`
	IsNeighborEbgpWithoutOutboundPolicy           bool     `protobuf:"varint,72,opt,name=is_neighbor_ebgp_without_outbound_policy,json=isNeighborEbgpWithoutOutboundPolicy,proto3" json:"is_neighbor_ebgp_without_outbound_policy,omitempty"`
	IsAsOverrideSet                               bool     `protobuf:"varint,73,opt,name=is_as_override_set,json=isAsOverrideSet,proto3" json:"is_as_override_set,omitempty"`
	IsAllowAsInSet                                bool     `protobuf:"varint,74,opt,name=is_allow_as_in_set,json=isAllowAsInSet,proto3" json:"is_allow_as_in_set,omitempty"`
	AllowAsInCount                                uint32   `protobuf:"varint,75,opt,name=allow_as_in_count,json=allowAsInCount,proto3" json:"allow_as_in_count,omitempty"`
	AddressFamilyLongLivedTime                    uint32   `protobuf:"varint,76,opt,name=address_family_long_lived_time,json=addressFamilyLongLivedTime,proto3" json:"address_family_long_lived_time,omitempty"`
	IsAigpSet                                     bool     `protobuf:"varint,77,opt,name=is_aigp_set,json=isAigpSet,proto3" json:"is_aigp_set,omitempty"`
	IsRtPresent                                   bool     `protobuf:"varint,78,opt,name=is_rt_present,json=isRtPresent,proto3" json:"is_rt_present,omitempty"`
	ExtendedCommunity                             []uint32 `protobuf:"varint,79,rep,packed,name=extended_community,json=extendedCommunity,proto3" json:"extended_community,omitempty"`
	IsRtPresentStandby                            bool     `protobuf:"varint,80,opt,name=is_rt_present_standby,json=isRtPresentStandby,proto3" json:"is_rt_present_standby,omitempty"`
	ExtendedCommunityStandby                      []uint32 `protobuf:"varint,81,rep,packed,name=extended_community_standby,json=extendedCommunityStandby,proto3" json:"extended_community_standby,omitempty"`
	AcceptOwnEnabled                              bool     `protobuf:"varint,82,opt,name=accept_own_enabled,json=acceptOwnEnabled,proto3" json:"accept_own_enabled,omitempty"`
	SelectiveMultipathEligible                    bool     `protobuf:"varint,83,opt,name=selective_multipath_eligible,json=selectiveMultipathEligible,proto3" json:"selective_multipath_eligible,omitempty"`
	AfrpkiDisable                                 bool     `protobuf:"varint,84,opt,name=afrpki_disable,json=afrpkiDisable,proto3" json:"afrpki_disable,omitempty"`
	AfrpkiUseValidity                             bool     `protobuf:"varint,85,opt,name=afrpki_use_validity,json=afrpkiUseValidity,proto3" json:"afrpki_use_validity,omitempty"`
	AfrpkiAllowInvalid                            bool     `protobuf:"varint,86,opt,name=afrpki_allow_invalid,json=afrpkiAllowInvalid,proto3" json:"afrpki_allow_invalid,omitempty"`
	AfrpkiSignalIbgp                              bool     `protobuf:"varint,87,opt,name=afrpki_signal_ibgp,json=afrpkiSignalIbgp,proto3" json:"afrpki_signal_ibgp,omitempty"`
	IsAdvertisePermanentNetwork                   bool     `protobuf:"varint,88,opt,name=is_advertise_permanent_network,json=isAdvertisePermanentNetwork,proto3" json:"is_advertise_permanent_network,omitempty"`
	IsSendMcastAttr                               bool     `protobuf:"varint,89,opt,name=is_send_mcast_attr,json=isSendMcastAttr,proto3" json:"is_send_mcast_attr,omitempty"`
	ImportStitching                               bool     `protobuf:"varint,90,opt,name=import_stitching,json=importStitching,proto3" json:"import_stitching,omitempty"`
	ImportReoriginate                             bool     `protobuf:"varint,91,opt,name=import_reoriginate,json=importReoriginate,proto3" json:"import_reoriginate,omitempty"`
	ImportReoriginateStitching                    bool     `protobuf:"varint,92,opt,name=import_reoriginate_stitching,json=importReoriginateStitching,proto3" json:"import_reoriginate_stitching,omitempty"`
	AdvertiseV4Flags                              uint32   `protobuf:"varint,93,opt,name=advertise_v4_flags,json=advertiseV4Flags,proto3" json:"advertise_v4_flags,omitempty"`
	AdvertiseV6Flags                              uint32   `protobuf:"varint,94,opt,name=advertise_v6_flags,json=advertiseV6Flags,proto3" json:"advertise_v6_flags,omitempty"`
	XXX_NoUnkeyedLiteral                          struct{} `json:"-"`
	XXX_unrecognized                              []byte   `json:"-"`
	XXX_sizecache                                 int32    `json:"-"`
}

func (m *BgpNbrRangeAf_) Reset()         { *m = BgpNbrRangeAf_{} }
func (m *BgpNbrRangeAf_) String() string { return proto.CompactTextString(m) }
func (*BgpNbrRangeAf_) ProtoMessage()    {}
func (*BgpNbrRangeAf_) Descriptor() ([]byte, []int) {
	return fileDescriptor_458dea1d4196ae27, []int{6}
}

func (m *BgpNbrRangeAf_) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BgpNbrRangeAf_.Unmarshal(m, b)
}
func (m *BgpNbrRangeAf_) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BgpNbrRangeAf_.Marshal(b, m, deterministic)
}
func (m *BgpNbrRangeAf_) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpNbrRangeAf_.Merge(m, src)
}
func (m *BgpNbrRangeAf_) XXX_Size() int {
	return xxx_messageInfo_BgpNbrRangeAf_.Size(m)
}
func (m *BgpNbrRangeAf_) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpNbrRangeAf_.DiscardUnknown(m)
}

var xxx_messageInfo_BgpNbrRangeAf_ proto.InternalMessageInfo

func (m *BgpNbrRangeAf_) GetAfName() string {
	if m != nil {
		return m.AfName
	}
	return ""
}

func (m *BgpNbrRangeAf_) GetIsNeighborRouteReflectorClient() bool {
	if m != nil {
		return m.IsNeighborRouteReflectorClient
	}
	return false
}

func (m *BgpNbrRangeAf_) GetIsLegacyPeRt() bool {
	if m != nil {
		return m.IsLegacyPeRt
	}
	return false
}

func (m *BgpNbrRangeAf_) GetIsNeighborAfCapable() bool {
	if m != nil {
		return m.IsNeighborAfCapable
	}
	return false
}

func (m *BgpNbrRangeAf_) GetIsSoftReconfigurationInboundAllowed() bool {
	if m != nil {
		return m.IsSoftReconfigurationInboundAllowed
	}
	return false
}

func (m *BgpNbrRangeAf_) GetIsUseSoftReconfigurationAlwaysOn() bool {
	if m != nil {
		return m.IsUseSoftReconfigurationAlwaysOn
	}
	return false
}

func (m *BgpNbrRangeAf_) GetRemovePrivateAsFromUpdates() bool {
	if m != nil {
		return m.RemovePrivateAsFromUpdates
	}
	return false
}

func (m *BgpNbrRangeAf_) GetRemovePrivateAsEntireAspathFromUpdates() bool {
	if m != nil {
		return m.RemovePrivateAsEntireAspathFromUpdates
	}
	return false
}

func (m *BgpNbrRangeAf_) GetRemovePrivateAsFromInboundUpdates() bool {
	if m != nil {
		return m.RemovePrivateAsFromInboundUpdates
	}
	return false
}

func (m *BgpNbrRangeAf_) GetRemovePrivateAsEntireAspathFromInboundUpdates() bool {
	if m != nil {
		return m.RemovePrivateAsEntireAspathFromInboundUpdates
	}
	return false
}

func (m *BgpNbrRangeAf_) GetFlowspecValidationDIsable() bool {
	if m != nil {
		return m.FlowspecValidationDIsable
	}
	return false
}

func (m *BgpNbrRangeAf_) GetFlowspecRedirectValidationDIsable() bool {
	if m != nil {
		return m.FlowspecRedirectValidationDIsable
	}
	return false
}

func (m *BgpNbrRangeAf_) GetOrrGroupName() string {
	if m != nil {
		return m.OrrGroupName
	}
	return ""
}

func (m *BgpNbrRangeAf_) GetOrrGroupIndex() uint32 {
	if m != nil {
		return m.OrrGroupIndex
	}
	return 0
}

func (m *BgpNbrRangeAf_) GetIsOrrRootAddressConfigured() bool {
	if m != nil {
		return m.IsOrrRootAddressConfigured
	}
	return false
}

func (m *BgpNbrRangeAf_) GetAdvertiseAfi() bool {
	if m != nil {
		return m.AdvertiseAfi
	}
	return false
}

func (m *BgpNbrRangeAf_) GetAdvertiseAfiReorg() bool {
	if m != nil {
		return m.AdvertiseAfiReorg
	}
	return false
}

func (m *BgpNbrRangeAf_) GetAdvertiseAfiLocal() bool {
	if m != nil {
		return m.AdvertiseAfiLocal
	}
	return false
}

func (m *BgpNbrRangeAf_) GetAdvertiseAfiDisable() bool {
	if m != nil {
		return m.AdvertiseAfiDisable
	}
	return false
}

func (m *BgpNbrRangeAf_) GetAlwaysUseNextHopLocal() bool {
	if m != nil {
		return m.AlwaysUseNextHopLocal
	}
	return false
}

func (m *BgpNbrRangeAf_) GetNextHopUnchanged() bool {
	if m != nil {
		return m.NextHopUnchanged
	}
	return false
}

func (m *BgpNbrRangeAf_) GetSentCommunityToNeighbor() bool {
	if m != nil {
		return m.SentCommunityToNeighbor
	}
	return false
}

func (m *BgpNbrRangeAf_) GetSentGshutCommunityToNeighbor() bool {
	if m != nil {
		return m.SentGshutCommunityToNeighbor
	}
	return false
}

func (m *BgpNbrRangeAf_) GetSentExtendedCommunityToNeighbor() bool {
	if m != nil {
		return m.SentExtendedCommunityToNeighbor
	}
	return false
}

func (m *BgpNbrRangeAf_) GetNeighborDefaultOriginate() bool {
	if m != nil {
		return m.NeighborDefaultOriginate
	}
	return false
}

func (m *BgpNbrRangeAf_) GetIsOrfSent() bool {
	if m != nil {
		return m.IsOrfSent
	}
	return false
}

func (m *BgpNbrRangeAf_) GetIsUpdateDeferred() bool {
	if m != nil {
		return m.IsUpdateDeferred
	}
	return false
}

func (m *BgpNbrRangeAf_) GetIsOrfSendScheduled() bool {
	if m != nil {
		return m.IsOrfSendScheduled
	}
	return false
}

func (m *BgpNbrRangeAf_) GetVpnUpdateGenEnabled() bool {
	if m != nil {
		return m.VpnUpdateGenEnabled
	}
	return false
}

func (m *BgpNbrRangeAf_) GetVpnUpdateGenTriggerEnabled() bool {
	if m != nil {
		return m.VpnUpdateGenTriggerEnabled
	}
	return false
}

func (m *BgpNbrRangeAf_) GetIsAddpathSendOperational() bool {
	if m != nil {
		return m.IsAddpathSendOperational
	}
	return false
}

func (m *BgpNbrRangeAf_) GetIsAddpathReceiveOperational() bool {
	if m != nil {
		return m.IsAddpathReceiveOperational
	}
	return false
}

func (m *BgpNbrRangeAf_) GetWeight() uint32 {
	if m != nil {
		return m.Weight
	}
	return 0
}

func (m *BgpNbrRangeAf_) GetMaxPrefixLimit() uint32 {
	if m != nil {
		return m.MaxPrefixLimit
	}
	return 0
}

func (m *BgpNbrRangeAf_) GetUseMaxPrefixWarningOnly() bool {
	if m != nil {
		return m.UseMaxPrefixWarningOnly
	}
	return false
}

func (m *BgpNbrRangeAf_) GetMaxPrefixDiscardExtraPaths() bool {
	if m != nil {
		return m.MaxPrefixDiscardExtraPaths
	}
	return false
}

func (m *BgpNbrRangeAf_) GetMaxPrefixExceedDiscardPaths() bool {
	if m != nil {
		return m.MaxPrefixExceedDiscardPaths
	}
	return false
}

func (m *BgpNbrRangeAf_) GetMaxPrefixThresholdPercent() uint32 {
	if m != nil {
		return m.MaxPrefixThresholdPercent
	}
	return 0
}

func (m *BgpNbrRangeAf_) GetMaxPrefixRestartTime() uint32 {
	if m != nil {
		return m.MaxPrefixRestartTime
	}
	return 0
}

func (m *BgpNbrRangeAf_) GetIsPeerOrfCapable() bool {
	if m != nil {
		return m.IsPeerOrfCapable
	}
	return false
}

func (m *BgpNbrRangeAf_) GetIsAdvertisedOrfSend() bool {
	if m != nil {
		return m.IsAdvertisedOrfSend
	}
	return false
}

func (m *BgpNbrRangeAf_) GetIsReceivedOrfSendCapable() bool {
	if m != nil {
		return m.IsReceivedOrfSendCapable
	}
	return false
}

func (m *BgpNbrRangeAf_) GetIsAdvertisedOrfReceive() bool {
	if m != nil {
		return m.IsAdvertisedOrfReceive
	}
	return false
}

func (m *BgpNbrRangeAf_) GetIsReceivedOrfReceiveCapable() bool {
	if m != nil {
		return m.IsReceivedOrfReceiveCapable
	}
	return false
}

func (m *BgpNbrRangeAf_) GetIsAdvertisedGracefulRestart() bool {
	if m != nil {
		return m.IsAdvertisedGracefulRestart
	}
	return false
}

func (m *BgpNbrRangeAf_) GetIsGracefulRestartStateFlag() bool {
	if m != nil {
		return m.IsGracefulRestartStateFlag
	}
	return false
}

func (m *BgpNbrRangeAf_) GetIsReceivedGracefulRestartCapable() bool {
	if m != nil {
		return m.IsReceivedGracefulRestartCapable
	}
	return false
}

func (m *BgpNbrRangeAf_) GetIsAddPathSendCapabilityAdvertised() bool {
	if m != nil {
		return m.IsAddPathSendCapabilityAdvertised
	}
	return false
}

func (m *BgpNbrRangeAf_) GetIsAddPathSendCapabilityReceived() bool {
	if m != nil {
		return m.IsAddPathSendCapabilityReceived
	}
	return false
}

func (m *BgpNbrRangeAf_) GetIsAddPathReceiveCapabilityAdvertised() bool {
	if m != nil {
		return m.IsAddPathReceiveCapabilityAdvertised
	}
	return false
}

func (m *BgpNbrRangeAf_) GetIsAddPathReceiveCapabilityReceived() bool {
	if m != nil {
		return m.IsAddPathReceiveCapabilityReceived
	}
	return false
}

func (m *BgpNbrRangeAf_) GetRestartTime() uint32 {
	if m != nil {
		return m.RestartTime
	}
	return 0
}

func (m *BgpNbrRangeAf_) GetLocalRestartTime() uint32 {
	if m != nil {
		return m.LocalRestartTime
	}
	return 0
}

func (m *BgpNbrRangeAf_) GetStalePathTimeout() uint32 {
	if m != nil {
		return m.StalePathTimeout
	}
	return 0
}

func (m *BgpNbrRangeAf_) GetRibPurgeTimeoutValue() uint32 {
	if m != nil {
		return m.RibPurgeTimeoutValue
	}
	return 0
}

func (m *BgpNbrRangeAf_) GetNeighborPreservedForwardingState() bool {
	if m != nil {
		return m.NeighborPreservedForwardingState
	}
	return false
}

func (m *BgpNbrRangeAf_) GetLongLivedGracefulRestartStaleTimeConfigured() bool {
	if m != nil {
		return m.LongLivedGracefulRestartStaleTimeConfigured
	}
	return false
}

func (m *BgpNbrRangeAf_) GetLongLivedGracefulRestartStaleTimeSent() uint32 {
	if m != nil {
		return m.LongLivedGracefulRestartStaleTimeSent
	}
	return 0
}

func (m *BgpNbrRangeAf_) GetLongLivedGracefulRestartStaleTimeAccept() uint32 {
	if m != nil {
		return m.LongLivedGracefulRestartStaleTimeAccept
	}
	return 0
}

func (m *BgpNbrRangeAf_) GetLongLivedGracefulRestartCapabilityReceived() bool {
	if m != nil {
		return m.LongLivedGracefulRestartCapabilityReceived
	}
	return false
}

func (m *BgpNbrRangeAf_) GetLongLivedGracefulRestartStaleTimeReceived() uint32 {
	if m != nil {
		return m.LongLivedGracefulRestartStaleTimeReceived
	}
	return 0
}

func (m *BgpNbrRangeAf_) GetNeighborPreservedLongLivedForwardingState() bool {
	if m != nil {
		return m.NeighborPreservedLongLivedForwardingState
	}
	return false
}

func (m *BgpNbrRangeAf_) GetNeighborLongLivedGracefulRestartCapable() bool {
	if m != nil {
		return m.NeighborLongLivedGracefulRestartCapable
	}
	return false
}

func (m *BgpNbrRangeAf_) GetNeighborLongLivedGracefulRestartTimeRemaining() uint32 {
	if m != nil {
		return m.NeighborLongLivedGracefulRestartTimeRemaining
	}
	return 0
}

func (m *BgpNbrRangeAf_) GetIsPrefixOrfPresent() bool {
	if m != nil {
		return m.IsPrefixOrfPresent
	}
	return false
}

func (m *BgpNbrRangeAf_) GetOrfEntriesReceived() uint32 {
	if m != nil {
		return m.OrfEntriesReceived
	}
	return 0
}

func (m *BgpNbrRangeAf_) GetRoutePolicyPrefixOrf() string {
	if m != nil {
		return m.RoutePolicyPrefixOrf
	}
	return ""
}

func (m *BgpNbrRangeAf_) GetRoutePolicyIn() string {
	if m != nil {
		return m.RoutePolicyIn
	}
	return ""
}

func (m *BgpNbrRangeAf_) GetRoutePolicyOut() string {
	if m != nil {
		return m.RoutePolicyOut
	}
	return ""
}

func (m *BgpNbrRangeAf_) GetRoutePolicyDefaultOriginate() string {
	if m != nil {
		return m.RoutePolicyDefaultOriginate
	}
	return ""
}

func (m *BgpNbrRangeAf_) GetIsNeighborEbgpWithoutInboundPolicy() bool {
	if m != nil {
		return m.IsNeighborEbgpWithoutInboundPolicy
	}
	return false
}

func (m *BgpNbrRangeAf_) GetIsNeighborEbgpWithoutOutboundPolicy() bool {
	if m != nil {
		return m.IsNeighborEbgpWithoutOutboundPolicy
	}
	return false
}

func (m *BgpNbrRangeAf_) GetIsAsOverrideSet() bool {
	if m != nil {
		return m.IsAsOverrideSet
	}
	return false
}

func (m *BgpNbrRangeAf_) GetIsAllowAsInSet() bool {
	if m != nil {
		return m.IsAllowAsInSet
	}
	return false
}

func (m *BgpNbrRangeAf_) GetAllowAsInCount() uint32 {
	if m != nil {
		return m.AllowAsInCount
	}
	return 0
}

func (m *BgpNbrRangeAf_) GetAddressFamilyLongLivedTime() uint32 {
	if m != nil {
		return m.AddressFamilyLongLivedTime
	}
	return 0
}

func (m *BgpNbrRangeAf_) GetIsAigpSet() bool {
	if m != nil {
		return m.IsAigpSet
	}
	return false
}

func (m *BgpNbrRangeAf_) GetIsRtPresent() bool {
	if m != nil {
		return m.IsRtPresent
	}
	return false
}

func (m *BgpNbrRangeAf_) GetExtendedCommunity() []uint32 {
	if m != nil {
		return m.ExtendedCommunity
	}
	return nil
}

func (m *BgpNbrRangeAf_) GetIsRtPresentStandby() bool {
	if m != nil {
		return m.IsRtPresentStandby
	}
	return false
}

func (m *BgpNbrRangeAf_) GetExtendedCommunityStandby() []uint32 {
	if m != nil {
		return m.ExtendedCommunityStandby
	}
	return nil
}

func (m *BgpNbrRangeAf_) GetAcceptOwnEnabled() bool {
	if m != nil {
		return m.AcceptOwnEnabled
	}
	return false
}

func (m *BgpNbrRangeAf_) GetSelectiveMultipathEligible() bool {
	if m != nil {
		return m.SelectiveMultipathEligible
	}
	return false
}

func (m *BgpNbrRangeAf_) GetAfrpkiDisable() bool {
	if m != nil {
		return m.AfrpkiDisable
	}
	return false
}

func (m *BgpNbrRangeAf_) GetAfrpkiUseValidity() bool {
	if m != nil {
		return m.AfrpkiUseValidity
	}
	return false
}

func (m *BgpNbrRangeAf_) GetAfrpkiAllowInvalid() bool {
	if m != nil {
		return m.AfrpkiAllowInvalid
	}
	return false
}

func (m *BgpNbrRangeAf_) GetAfrpkiSignalIbgp() bool {
	if m != nil {
		return m.AfrpkiSignalIbgp
	}
	return false
}

func (m *BgpNbrRangeAf_) GetIsAdvertisePermanentNetwork() bool {
	if m != nil {
		return m.IsAdvertisePermanentNetwork
	}
	return false
}

func (m *BgpNbrRangeAf_) GetIsSendMcastAttr() bool {
	if m != nil {
		return m.IsSendMcastAttr
	}
	return false
}

func (m *BgpNbrRangeAf_) GetImportStitching() bool {
	if m != nil {
		return m.ImportStitching
	}
	return false
}

func (m *BgpNbrRangeAf_) GetImportReoriginate() bool {
	if m != nil {
		return m.ImportReoriginate
	}
	return false
}

func (m *BgpNbrRangeAf_) GetImportReoriginateStitching() bool {
	if m != nil {
		return m.ImportReoriginateStitching
	}
	return false
}

func (m *BgpNbrRangeAf_) GetAdvertiseV4Flags() uint32 {
	if m != nil {
		return m.AdvertiseV4Flags
	}
	return 0
}

func (m *BgpNbrRangeAf_) GetAdvertiseV6Flags() uint32 {
	if m != nil {
		return m.AdvertiseV6Flags
	}
	return 0
}

type BgpNbrGshut_ struct {
	GshutExists          bool     `protobuf:"varint,1,opt,name=gshut_exists,json=gshutExists,proto3" json:"gshut_exists,omitempty"`
	GshutLocalActive     bool     `protobuf:"varint,2,opt,name=gshut_local_active,json=gshutLocalActive,proto3" json:"gshut_local_active,omitempty"`
	GshutActive          bool     `protobuf:"varint,3,opt,name=gshut_active,json=gshutActive,proto3" json:"gshut_active,omitempty"`
	GshutLocprefSet      bool     `protobuf:"varint,4,opt,name=gshut_locpref_set,json=gshutLocprefSet,proto3" json:"gshut_locpref_set,omitempty"`
	GshutLocpref         uint32   `protobuf:"varint,5,opt,name=gshut_locpref,json=gshutLocpref,proto3" json:"gshut_locpref,omitempty"`
	GshutPrepends        uint32   `protobuf:"varint,6,opt,name=gshut_prepends,json=gshutPrepends,proto3" json:"gshut_prepends,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BgpNbrGshut_) Reset()         { *m = BgpNbrGshut_{} }
func (m *BgpNbrGshut_) String() string { return proto.CompactTextString(m) }
func (*BgpNbrGshut_) ProtoMessage()    {}
func (*BgpNbrGshut_) Descriptor() ([]byte, []int) {
	return fileDescriptor_458dea1d4196ae27, []int{7}
}

func (m *BgpNbrGshut_) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BgpNbrGshut_.Unmarshal(m, b)
}
func (m *BgpNbrGshut_) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BgpNbrGshut_.Marshal(b, m, deterministic)
}
func (m *BgpNbrGshut_) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpNbrGshut_.Merge(m, src)
}
func (m *BgpNbrGshut_) XXX_Size() int {
	return xxx_messageInfo_BgpNbrGshut_.Size(m)
}
func (m *BgpNbrGshut_) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpNbrGshut_.DiscardUnknown(m)
}

var xxx_messageInfo_BgpNbrGshut_ proto.InternalMessageInfo

func (m *BgpNbrGshut_) GetGshutExists() bool {
	if m != nil {
		return m.GshutExists
	}
	return false
}

func (m *BgpNbrGshut_) GetGshutLocalActive() bool {
	if m != nil {
		return m.GshutLocalActive
	}
	return false
}

func (m *BgpNbrGshut_) GetGshutActive() bool {
	if m != nil {
		return m.GshutActive
	}
	return false
}

func (m *BgpNbrGshut_) GetGshutLocprefSet() bool {
	if m != nil {
		return m.GshutLocprefSet
	}
	return false
}

func (m *BgpNbrGshut_) GetGshutLocpref() uint32 {
	if m != nil {
		return m.GshutLocpref
	}
	return 0
}

func (m *BgpNbrGshut_) GetGshutPrepends() uint32 {
	if m != nil {
		return m.GshutPrepends
	}
	return 0
}

type BgpTimespec struct {
	Seconds              uint32   `protobuf:"varint,1,opt,name=seconds,proto3" json:"seconds,omitempty"`
	Nanoseconds          uint32   `protobuf:"varint,2,opt,name=nanoseconds,proto3" json:"nanoseconds,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BgpTimespec) Reset()         { *m = BgpTimespec{} }
func (m *BgpTimespec) String() string { return proto.CompactTextString(m) }
func (*BgpTimespec) ProtoMessage()    {}
func (*BgpTimespec) Descriptor() ([]byte, []int) {
	return fileDescriptor_458dea1d4196ae27, []int{8}
}

func (m *BgpTimespec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BgpTimespec.Unmarshal(m, b)
}
func (m *BgpTimespec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BgpTimespec.Marshal(b, m, deterministic)
}
func (m *BgpTimespec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpTimespec.Merge(m, src)
}
func (m *BgpTimespec) XXX_Size() int {
	return xxx_messageInfo_BgpTimespec.Size(m)
}
func (m *BgpTimespec) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpTimespec.DiscardUnknown(m)
}

var xxx_messageInfo_BgpTimespec proto.InternalMessageInfo

func (m *BgpTimespec) GetSeconds() uint32 {
	if m != nil {
		return m.Seconds
	}
	return 0
}

func (m *BgpTimespec) GetNanoseconds() uint32 {
	if m != nil {
		return m.Nanoseconds
	}
	return 0
}

type BgpNbrInstance_ struct {
	NeighborAddress              *BgpAddrtype `protobuf:"bytes,1,opt,name=neighbor_address,json=neighborAddress,proto3" json:"neighbor_address,omitempty"`
	NeighborAge                  *BgpTimespec `protobuf:"bytes,2,opt,name=neighbor_age,json=neighborAge,proto3" json:"neighbor_age,omitempty"`
	IsIdleWatchTimerRunning      bool         `protobuf:"varint,3,opt,name=is_idle_watch_timer_running,json=isIdleWatchTimerRunning,proto3" json:"is_idle_watch_timer_running,omitempty"`
	IdleWatchTimerRemainingValue *BgpTimespec `protobuf:"bytes,4,opt,name=idle_watch_timer_remaining_value,json=idleWatchTimerRemainingValue,proto3" json:"idle_watch_timer_remaining_value,omitempty"`
	ConnectionState              string       `protobuf:"bytes,5,opt,name=connection_state,json=connectionState,proto3" json:"connection_state,omitempty"`
	XXX_NoUnkeyedLiteral         struct{}     `json:"-"`
	XXX_unrecognized             []byte       `json:"-"`
	XXX_sizecache                int32        `json:"-"`
}

func (m *BgpNbrInstance_) Reset()         { *m = BgpNbrInstance_{} }
func (m *BgpNbrInstance_) String() string { return proto.CompactTextString(m) }
func (*BgpNbrInstance_) ProtoMessage()    {}
func (*BgpNbrInstance_) Descriptor() ([]byte, []int) {
	return fileDescriptor_458dea1d4196ae27, []int{9}
}

func (m *BgpNbrInstance_) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BgpNbrInstance_.Unmarshal(m, b)
}
func (m *BgpNbrInstance_) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BgpNbrInstance_.Marshal(b, m, deterministic)
}
func (m *BgpNbrInstance_) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpNbrInstance_.Merge(m, src)
}
func (m *BgpNbrInstance_) XXX_Size() int {
	return xxx_messageInfo_BgpNbrInstance_.Size(m)
}
func (m *BgpNbrInstance_) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpNbrInstance_.DiscardUnknown(m)
}

var xxx_messageInfo_BgpNbrInstance_ proto.InternalMessageInfo

func (m *BgpNbrInstance_) GetNeighborAddress() *BgpAddrtype {
	if m != nil {
		return m.NeighborAddress
	}
	return nil
}

func (m *BgpNbrInstance_) GetNeighborAge() *BgpTimespec {
	if m != nil {
		return m.NeighborAge
	}
	return nil
}

func (m *BgpNbrInstance_) GetIsIdleWatchTimerRunning() bool {
	if m != nil {
		return m.IsIdleWatchTimerRunning
	}
	return false
}

func (m *BgpNbrInstance_) GetIdleWatchTimerRemainingValue() *BgpTimespec {
	if m != nil {
		return m.IdleWatchTimerRemainingValue
	}
	return nil
}

func (m *BgpNbrInstance_) GetConnectionState() string {
	if m != nil {
		return m.ConnectionState
	}
	return ""
}

type BgpNbrRangeBag struct {
	SpeakerId                               uint32             `protobuf:"varint,50,opt,name=speaker_id,json=speakerId,proto3" json:"speaker_id,omitempty"`
	Description                             string             `protobuf:"bytes,51,opt,name=description,proto3" json:"description,omitempty"`
	LocalAs                                 uint32             `protobuf:"varint,52,opt,name=local_as,json=localAs,proto3" json:"local_as,omitempty"`
	RemoteAs                                uint32             `protobuf:"varint,53,opt,name=remote_as,json=remoteAs,proto3" json:"remote_as,omitempty"`
	HasInternalLink                         bool               `protobuf:"varint,54,opt,name=has_internal_link,json=hasInternalLink,proto3" json:"has_internal_link,omitempty"`
	ConnectionLocalAddress                  *BgpAddrtype       `protobuf:"bytes,55,opt,name=connection_local_address,json=connectionLocalAddress,proto3" json:"connection_local_address,omitempty"`
	IsLocalAddressConfigured                bool               `protobuf:"varint,56,opt,name=is_local_address_configured,json=isLocalAddressConfigured,proto3" json:"is_local_address_configured,omitempty"`
	ConnectionRemoteAddress                 *BgpAddrtype       `protobuf:"bytes,57,opt,name=connection_remote_address,json=connectionRemoteAddress,proto3" json:"connection_remote_address,omitempty"`
	NeighborRangePrefixLength               uint32             `protobuf:"varint,58,opt,name=neighbor_range_prefix_length,json=neighborRangePrefixLength,proto3" json:"neighbor_range_prefix_length,omitempty"`
	IsAdministrativelyShutDown              bool               `protobuf:"varint,59,opt,name=is_administratively_shut_down,json=isAdministrativelyShutDown,proto3" json:"is_administratively_shut_down,omitempty"`
	IsNeighborMaxPrefixShutdown             bool               `protobuf:"varint,60,opt,name=is_neighbor_max_prefix_shutdown,json=isNeighborMaxPrefixShutdown,proto3" json:"is_neighbor_max_prefix_shutdown,omitempty"`
	IsOutOfMemoryForcedUp                   bool               `protobuf:"varint,61,opt,name=is_out_of_memory_forced_up,json=isOutOfMemoryForcedUp,proto3" json:"is_out_of_memory_forced_up,omitempty"`
	TtlSecurityEnabled                      bool               `protobuf:"varint,62,opt,name=ttl_security_enabled,json=ttlSecurityEnabled,proto3" json:"ttl_security_enabled,omitempty"`
	Suppress4ByteAs                         bool               `protobuf:"varint,63,opt,name=suppress4_byte_as,json=suppress4ByteAs,proto3" json:"suppress4_byte_as,omitempty"`
	BfdSessionEnableMode                    string             `protobuf:"bytes,64,opt,name=bfd_session_enable_mode,json=bfdSessionEnableMode,proto3" json:"bfd_session_enable_mode,omitempty"`
	BfdMinintervalval                       uint32             `protobuf:"varint,65,opt,name=bfd_minintervalval,json=bfdMinintervalval,proto3" json:"bfd_minintervalval,omitempty"`
	BfdMultiplierval                        uint32             `protobuf:"varint,66,opt,name=bfd_multiplierval,json=bfdMultiplierval,proto3" json:"bfd_multiplierval,omitempty"`
	EbgpTimeToLive                          uint32             `protobuf:"varint,67,opt,name=ebgp_time_to_live,json=ebgpTimeToLive,proto3" json:"ebgp_time_to_live,omitempty"`
	IsEbgpMultihopBgpmplsForwardingDisabled bool               `protobuf:"varint,68,opt,name=is_ebgp_multihop_bgpmpls_forwarding_disabled,json=isEbgpMultihopBgpmplsForwardingDisabled,proto3" json:"is_ebgp_multihop_bgpmpls_forwarding_disabled,omitempty"`
	Tcpmss                                  uint32             `protobuf:"varint,69,opt,name=tcpmss,proto3" json:"tcpmss,omitempty"`
	MsgLogIn                                uint32             `protobuf:"varint,70,opt,name=msg_log_in,json=msgLogIn,proto3" json:"msg_log_in,omitempty"`
	MsgLogOut                               uint32             `protobuf:"varint,71,opt,name=msg_log_out,json=msgLogOut,proto3" json:"msg_log_out,omitempty"`
	NeighborLocalAs                         uint32             `protobuf:"varint,72,opt,name=neighbor_local_as,json=neighborLocalAs,proto3" json:"neighbor_local_as,omitempty"`
	LocalAsNoPrepend                        bool               `protobuf:"varint,73,opt,name=local_as_no_prepend,json=localAsNoPrepend,proto3" json:"local_as_no_prepend,omitempty"`
	IsCapabilityNegotiationPerformed        bool               `protobuf:"varint,74,opt,name=is_capability_negotiation_performed,json=isCapabilityNegotiationPerformed,proto3" json:"is_capability_negotiation_performed,omitempty"`
	ConfiguredHoldTime                      uint32             `protobuf:"varint,75,opt,name=configured_hold_time,json=configuredHoldTime,proto3" json:"configured_hold_time,omitempty"`
	ConfiguredKeepalive                     uint32             `protobuf:"varint,76,opt,name=configured_keepalive,json=configuredKeepalive,proto3" json:"configured_keepalive,omitempty"`
	ConfiguredMinAccHoldTime                uint32             `protobuf:"varint,77,opt,name=configured_min_acc_hold_time,json=configuredMinAccHoldTime,proto3" json:"configured_min_acc_hold_time,omitempty"`
	MinAdvertiseInterval                    uint32             `protobuf:"varint,78,opt,name=min_advertise_interval,json=minAdvertiseInterval,proto3" json:"min_advertise_interval,omitempty"`
	MinAdvertiseIntervalMsecs               uint32             `protobuf:"varint,79,opt,name=min_advertise_interval_msecs,json=minAdvertiseIntervalMsecs,proto3" json:"min_advertise_interval_msecs,omitempty"`
	MinOriginationInterval                  uint32             `protobuf:"varint,80,opt,name=min_origination_interval,json=minOriginationInterval,proto3" json:"min_origination_interval,omitempty"`
	RemoteAsNumber                          uint32             `protobuf:"varint,81,opt,name=remote_as_number,json=remoteAsNumber,proto3" json:"remote_as_number,omitempty"`
	DmzLinkBandwidth                        uint32             `protobuf:"varint,82,opt,name=dmz_link_bandwidth,json=dmzLinkBandwidth,proto3" json:"dmz_link_bandwidth,omitempty"`
	EbgpRecvDmz                             bool               `protobuf:"varint,83,opt,name=ebgp_recv_dmz,json=ebgpRecvDmz,proto3" json:"ebgp_recv_dmz,omitempty"`
	EbgpSendDmzMode                         string             `protobuf:"bytes,84,opt,name=ebgp_send_dmz_mode,json=ebgpSendDmzMode,proto3" json:"ebgp_send_dmz_mode,omitempty"`
	TosType                                 uint32             `protobuf:"varint,85,opt,name=tos_type,json=tosType,proto3" json:"tos_type,omitempty"`
	TosValue                                uint32             `protobuf:"varint,86,opt,name=tos_value,json=tosValue,proto3" json:"tos_value,omitempty"`
	AfData                                  []*BgpNbrRangeAf_  `protobuf:"bytes,87,rep,name=af_data,json=afData,proto3" json:"af_data,omitempty"`
	TcpSessionOpenMode                      string             `protobuf:"bytes,88,opt,name=tcp_session_open_mode,json=tcpSessionOpenMode,proto3" json:"tcp_session_open_mode,omitempty"`
	VrfName                                 string             `protobuf:"bytes,89,opt,name=vrf_name,json=vrfName,proto3" json:"vrf_name,omitempty"`
	StandbyRp                               bool               `protobuf:"varint,90,opt,name=standby_rp,json=standbyRp,proto3" json:"standby_rp,omitempty"`
	NsrEnabled                              bool               `protobuf:"varint,91,opt,name=nsr_enabled,json=nsrEnabled,proto3" json:"nsr_enabled,omitempty"`
	GracefulRestartEnabledNbr               bool               `protobuf:"varint,92,opt,name=graceful_restart_enabled_nbr,json=gracefulRestartEnabledNbr,proto3" json:"graceful_restart_enabled_nbr,omitempty"`
	GrRestartTime                           uint32             `protobuf:"varint,93,opt,name=gr_restart_time,json=grRestartTime,proto3" json:"gr_restart_time,omitempty"`
	GrStalePathTime                         uint32             `protobuf:"varint,94,opt,name=gr_stale_path_time,json=grStalePathTime,proto3" json:"gr_stale_path_time,omitempty"`
	IsPassiveClose                          bool               `protobuf:"varint,95,opt,name=is_passive_close,json=isPassiveClose,proto3" json:"is_passive_close,omitempty"`
	NbrEnforceFirstAs                       bool               `protobuf:"varint,96,opt,name=nbr_enforce_first_as,json=nbrEnforceFirstAs,proto3" json:"nbr_enforce_first_as,omitempty"`
	ActiveBmpServers                        uint32             `protobuf:"varint,97,opt,name=active_bmp_servers,json=activeBmpServers,proto3" json:"active_bmp_servers,omitempty"`
	NbrClusterId                            uint32             `protobuf:"varint,98,opt,name=nbr_cluster_id,json=nbrClusterId,proto3" json:"nbr_cluster_id,omitempty"`
	NbrInCluster                            uint32             `protobuf:"varint,99,opt,name=nbr_in_cluster,json=nbrInCluster,proto3" json:"nbr_in_cluster,omitempty"`
	IgnoreConnected                         bool               `protobuf:"varint,100,opt,name=ignore_connected,json=ignoreConnected,proto3" json:"ignore_connected,omitempty"`
	InternalVpnClient                       bool               `protobuf:"varint,101,opt,name=internal_vpn_client,json=internalVpnClient,proto3" json:"internal_vpn_client,omitempty"`
	LocalAsReplaceAs                        bool               `protobuf:"varint,102,opt,name=local_as_replace_as,json=localAsReplaceAs,proto3" json:"local_as_replace_as,omitempty"`
	LocalAsDualAs                           bool               `protobuf:"varint,103,opt,name=local_as_dual_as,json=localAsDualAs,proto3" json:"local_as_dual_as,omitempty"`
	LocalAsDualAsModeNative                 bool               `protobuf:"varint,104,opt,name=local_as_dual_as_mode_native,json=localAsDualAsModeNative,proto3" json:"local_as_dual_as_mode_native,omitempty"`
	EgressPeerEngineeringEnabled            bool               `protobuf:"varint,105,opt,name=egress_peer_engineering_enabled,json=egressPeerEngineeringEnabled,proto3" json:"egress_peer_engineering_enabled,omitempty"`
	DiscardAs4Path                          uint32             `protobuf:"varint,106,opt,name=discard_as4_path,json=discardAs4Path,proto3" json:"discard_as4_path,omitempty"`
	RpkiDisable                             bool               `protobuf:"varint,107,opt,name=rpki_disable,json=rpkiDisable,proto3" json:"rpki_disable,omitempty"`
	RpkiUseValidity                         bool               `protobuf:"varint,108,opt,name=rpki_use_validity,json=rpkiUseValidity,proto3" json:"rpki_use_validity,omitempty"`
	RpkiAllowInvalid                        bool               `protobuf:"varint,109,opt,name=rpki_allow_invalid,json=rpkiAllowInvalid,proto3" json:"rpki_allow_invalid,omitempty"`
	RpkiSignalIbgp                          bool               `protobuf:"varint,110,opt,name=rpki_signal_ibgp,json=rpkiSignalIbgp,proto3" json:"rpki_signal_ibgp,omitempty"`
	GracefulMaintenance                     *BgpNbrGshut_      `protobuf:"bytes,111,opt,name=graceful_maintenance,json=gracefulMaintenance,proto3" json:"graceful_maintenance,omitempty"`
	RemoteAsListName                        string             `protobuf:"bytes,112,opt,name=remote_as_list_name,json=remoteAsListName,proto3" json:"remote_as_list_name,omitempty"`
	NbrRcvSize                              uint32             `protobuf:"varint,113,opt,name=nbr_rcv_size,json=nbrRcvSize,proto3" json:"nbr_rcv_size,omitempty"`
	NbrSendSize                             uint32             `protobuf:"varint,114,opt,name=nbr_send_size,json=nbrSendSize,proto3" json:"nbr_send_size,omitempty"`
	IslocalAddressCfg                       bool               `protobuf:"varint,115,opt,name=islocal_address_cfg,json=islocalAddressCfg,proto3" json:"islocal_address_cfg,omitempty"`
	CfgLocalAddress                         *BgpAddrtype       `protobuf:"bytes,116,opt,name=cfg_local_address,json=cfgLocalAddress,proto3" json:"cfg_local_address,omitempty"`
	UpdateSource                            string             `protobuf:"bytes,117,opt,name=update_source,json=updateSource,proto3" json:"update_source,omitempty"`
	AddpathSendEnable                       bool               `protobuf:"varint,118,opt,name=addpath_send_enable,json=addpathSendEnable,proto3" json:"addpath_send_enable,omitempty"`
	AddpathReceiveEnable                    bool               `protobuf:"varint,119,opt,name=addpath_receive_enable,json=addpathReceiveEnable,proto3" json:"addpath_receive_enable,omitempty"`
	AddpathSendDisable                      bool               `protobuf:"varint,120,opt,name=addpath_send_disable,json=addpathSendDisable,proto3" json:"addpath_send_disable,omitempty"`
	AddpathReceiveDisable                   bool               `protobuf:"varint,121,opt,name=addpath_receive_disable,json=addpathReceiveDisable,proto3" json:"addpath_receive_disable,omitempty"`
	UpdErrhNoreset                          bool               `protobuf:"varint,122,opt,name=upd_errh_noreset,json=updErrhNoreset,proto3" json:"upd_errh_noreset,omitempty"`
	MsgBufCount                             uint32             `protobuf:"varint,123,opt,name=msg_buf_count,json=msgBufCount,proto3" json:"msg_buf_count,omitempty"`
	MsgBugCircular                          bool               `protobuf:"varint,124,opt,name=msg_bug_circular,json=msgBugCircular,proto3" json:"msg_bug_circular,omitempty"`
	SyslogEnable                            bool               `protobuf:"varint,125,opt,name=syslog_enable,json=syslogEnable,proto3" json:"syslog_enable,omitempty"`
	OperAttrfEnable                         bool               `protobuf:"varint,126,opt,name=oper_attrf_enable,json=operAttrfEnable,proto3" json:"oper_attrf_enable,omitempty"`
	AttrfGroupName                          string             `protobuf:"bytes,127,opt,name=attrf_group_name,json=attrfGroupName,proto3" json:"attrf_group_name,omitempty"`
	MaxPeers                                uint32             `protobuf:"varint,128,opt,name=max_peers,json=maxPeers,proto3" json:"max_peers,omitempty"`
	IdleWatchTime                           uint32             `protobuf:"varint,129,opt,name=idle_watch_time,json=idleWatchTime,proto3" json:"idle_watch_time,omitempty"`
	CurrentPeers                            uint32             `protobuf:"varint,130,opt,name=current_peers,json=currentPeers,proto3" json:"current_peers,omitempty"`
	RangeOpenMatch                          uint32             `protobuf:"varint,131,opt,name=range_open_match,json=rangeOpenMatch,proto3" json:"range_open_match,omitempty"`
	RangeOpenAccepted                       uint32             `protobuf:"varint,132,opt,name=range_open_accepted,json=rangeOpenAccepted,proto3" json:"range_open_accepted,omitempty"`
	RangeMaxDrop                            uint32             `protobuf:"varint,133,opt,name=range_max_drop,json=rangeMaxDrop,proto3" json:"range_max_drop,omitempty"`
	RangeInstError                          uint32             `protobuf:"varint,134,opt,name=range_inst_error,json=rangeInstError,proto3" json:"range_inst_error,omitempty"`
	Instance                                []*BgpNbrInstance_ `protobuf:"bytes,135,rep,name=instance,proto3" json:"instance,omitempty"`
	XXX_NoUnkeyedLiteral                    struct{}           `json:"-"`
	XXX_unrecognized                        []byte             `json:"-"`
	XXX_sizecache                           int32              `json:"-"`
}

func (m *BgpNbrRangeBag) Reset()         { *m = BgpNbrRangeBag{} }
func (m *BgpNbrRangeBag) String() string { return proto.CompactTextString(m) }
func (*BgpNbrRangeBag) ProtoMessage()    {}
func (*BgpNbrRangeBag) Descriptor() ([]byte, []int) {
	return fileDescriptor_458dea1d4196ae27, []int{10}
}

func (m *BgpNbrRangeBag) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BgpNbrRangeBag.Unmarshal(m, b)
}
func (m *BgpNbrRangeBag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BgpNbrRangeBag.Marshal(b, m, deterministic)
}
func (m *BgpNbrRangeBag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpNbrRangeBag.Merge(m, src)
}
func (m *BgpNbrRangeBag) XXX_Size() int {
	return xxx_messageInfo_BgpNbrRangeBag.Size(m)
}
func (m *BgpNbrRangeBag) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpNbrRangeBag.DiscardUnknown(m)
}

var xxx_messageInfo_BgpNbrRangeBag proto.InternalMessageInfo

func (m *BgpNbrRangeBag) GetSpeakerId() uint32 {
	if m != nil {
		return m.SpeakerId
	}
	return 0
}

func (m *BgpNbrRangeBag) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *BgpNbrRangeBag) GetLocalAs() uint32 {
	if m != nil {
		return m.LocalAs
	}
	return 0
}

func (m *BgpNbrRangeBag) GetRemoteAs() uint32 {
	if m != nil {
		return m.RemoteAs
	}
	return 0
}

func (m *BgpNbrRangeBag) GetHasInternalLink() bool {
	if m != nil {
		return m.HasInternalLink
	}
	return false
}

func (m *BgpNbrRangeBag) GetConnectionLocalAddress() *BgpAddrtype {
	if m != nil {
		return m.ConnectionLocalAddress
	}
	return nil
}

func (m *BgpNbrRangeBag) GetIsLocalAddressConfigured() bool {
	if m != nil {
		return m.IsLocalAddressConfigured
	}
	return false
}

func (m *BgpNbrRangeBag) GetConnectionRemoteAddress() *BgpAddrtype {
	if m != nil {
		return m.ConnectionRemoteAddress
	}
	return nil
}

func (m *BgpNbrRangeBag) GetNeighborRangePrefixLength() uint32 {
	if m != nil {
		return m.NeighborRangePrefixLength
	}
	return 0
}

func (m *BgpNbrRangeBag) GetIsAdministrativelyShutDown() bool {
	if m != nil {
		return m.IsAdministrativelyShutDown
	}
	return false
}

func (m *BgpNbrRangeBag) GetIsNeighborMaxPrefixShutdown() bool {
	if m != nil {
		return m.IsNeighborMaxPrefixShutdown
	}
	return false
}

func (m *BgpNbrRangeBag) GetIsOutOfMemoryForcedUp() bool {
	if m != nil {
		return m.IsOutOfMemoryForcedUp
	}
	return false
}

func (m *BgpNbrRangeBag) GetTtlSecurityEnabled() bool {
	if m != nil {
		return m.TtlSecurityEnabled
	}
	return false
}

func (m *BgpNbrRangeBag) GetSuppress4ByteAs() bool {
	if m != nil {
		return m.Suppress4ByteAs
	}
	return false
}

func (m *BgpNbrRangeBag) GetBfdSessionEnableMode() string {
	if m != nil {
		return m.BfdSessionEnableMode
	}
	return ""
}

func (m *BgpNbrRangeBag) GetBfdMinintervalval() uint32 {
	if m != nil {
		return m.BfdMinintervalval
	}
	return 0
}

func (m *BgpNbrRangeBag) GetBfdMultiplierval() uint32 {
	if m != nil {
		return m.BfdMultiplierval
	}
	return 0
}

func (m *BgpNbrRangeBag) GetEbgpTimeToLive() uint32 {
	if m != nil {
		return m.EbgpTimeToLive
	}
	return 0
}

func (m *BgpNbrRangeBag) GetIsEbgpMultihopBgpmplsForwardingDisabled() bool {
	if m != nil {
		return m.IsEbgpMultihopBgpmplsForwardingDisabled
	}
	return false
}

func (m *BgpNbrRangeBag) GetTcpmss() uint32 {
	if m != nil {
		return m.Tcpmss
	}
	return 0
}

func (m *BgpNbrRangeBag) GetMsgLogIn() uint32 {
	if m != nil {
		return m.MsgLogIn
	}
	return 0
}

func (m *BgpNbrRangeBag) GetMsgLogOut() uint32 {
	if m != nil {
		return m.MsgLogOut
	}
	return 0
}

func (m *BgpNbrRangeBag) GetNeighborLocalAs() uint32 {
	if m != nil {
		return m.NeighborLocalAs
	}
	return 0
}

func (m *BgpNbrRangeBag) GetLocalAsNoPrepend() bool {
	if m != nil {
		return m.LocalAsNoPrepend
	}
	return false
}

func (m *BgpNbrRangeBag) GetIsCapabilityNegotiationPerformed() bool {
	if m != nil {
		return m.IsCapabilityNegotiationPerformed
	}
	return false
}

func (m *BgpNbrRangeBag) GetConfiguredHoldTime() uint32 {
	if m != nil {
		return m.ConfiguredHoldTime
	}
	return 0
}

func (m *BgpNbrRangeBag) GetConfiguredKeepalive() uint32 {
	if m != nil {
		return m.ConfiguredKeepalive
	}
	return 0
}

func (m *BgpNbrRangeBag) GetConfiguredMinAccHoldTime() uint32 {
	if m != nil {
		return m.ConfiguredMinAccHoldTime
	}
	return 0
}

func (m *BgpNbrRangeBag) GetMinAdvertiseInterval() uint32 {
	if m != nil {
		return m.MinAdvertiseInterval
	}
	return 0
}

func (m *BgpNbrRangeBag) GetMinAdvertiseIntervalMsecs() uint32 {
	if m != nil {
		return m.MinAdvertiseIntervalMsecs
	}
	return 0
}

func (m *BgpNbrRangeBag) GetMinOriginationInterval() uint32 {
	if m != nil {
		return m.MinOriginationInterval
	}
	return 0
}

func (m *BgpNbrRangeBag) GetRemoteAsNumber() uint32 {
	if m != nil {
		return m.RemoteAsNumber
	}
	return 0
}

func (m *BgpNbrRangeBag) GetDmzLinkBandwidth() uint32 {
	if m != nil {
		return m.DmzLinkBandwidth
	}
	return 0
}

func (m *BgpNbrRangeBag) GetEbgpRecvDmz() bool {
	if m != nil {
		return m.EbgpRecvDmz
	}
	return false
}

func (m *BgpNbrRangeBag) GetEbgpSendDmzMode() string {
	if m != nil {
		return m.EbgpSendDmzMode
	}
	return ""
}

func (m *BgpNbrRangeBag) GetTosType() uint32 {
	if m != nil {
		return m.TosType
	}
	return 0
}

func (m *BgpNbrRangeBag) GetTosValue() uint32 {
	if m != nil {
		return m.TosValue
	}
	return 0
}

func (m *BgpNbrRangeBag) GetAfData() []*BgpNbrRangeAf_ {
	if m != nil {
		return m.AfData
	}
	return nil
}

func (m *BgpNbrRangeBag) GetTcpSessionOpenMode() string {
	if m != nil {
		return m.TcpSessionOpenMode
	}
	return ""
}

func (m *BgpNbrRangeBag) GetVrfName() string {
	if m != nil {
		return m.VrfName
	}
	return ""
}

func (m *BgpNbrRangeBag) GetStandbyRp() bool {
	if m != nil {
		return m.StandbyRp
	}
	return false
}

func (m *BgpNbrRangeBag) GetNsrEnabled() bool {
	if m != nil {
		return m.NsrEnabled
	}
	return false
}

func (m *BgpNbrRangeBag) GetGracefulRestartEnabledNbr() bool {
	if m != nil {
		return m.GracefulRestartEnabledNbr
	}
	return false
}

func (m *BgpNbrRangeBag) GetGrRestartTime() uint32 {
	if m != nil {
		return m.GrRestartTime
	}
	return 0
}

func (m *BgpNbrRangeBag) GetGrStalePathTime() uint32 {
	if m != nil {
		return m.GrStalePathTime
	}
	return 0
}

func (m *BgpNbrRangeBag) GetIsPassiveClose() bool {
	if m != nil {
		return m.IsPassiveClose
	}
	return false
}

func (m *BgpNbrRangeBag) GetNbrEnforceFirstAs() bool {
	if m != nil {
		return m.NbrEnforceFirstAs
	}
	return false
}

func (m *BgpNbrRangeBag) GetActiveBmpServers() uint32 {
	if m != nil {
		return m.ActiveBmpServers
	}
	return 0
}

func (m *BgpNbrRangeBag) GetNbrClusterId() uint32 {
	if m != nil {
		return m.NbrClusterId
	}
	return 0
}

func (m *BgpNbrRangeBag) GetNbrInCluster() uint32 {
	if m != nil {
		return m.NbrInCluster
	}
	return 0
}

func (m *BgpNbrRangeBag) GetIgnoreConnected() bool {
	if m != nil {
		return m.IgnoreConnected
	}
	return false
}

func (m *BgpNbrRangeBag) GetInternalVpnClient() bool {
	if m != nil {
		return m.InternalVpnClient
	}
	return false
}

func (m *BgpNbrRangeBag) GetLocalAsReplaceAs() bool {
	if m != nil {
		return m.LocalAsReplaceAs
	}
	return false
}

func (m *BgpNbrRangeBag) GetLocalAsDualAs() bool {
	if m != nil {
		return m.LocalAsDualAs
	}
	return false
}

func (m *BgpNbrRangeBag) GetLocalAsDualAsModeNative() bool {
	if m != nil {
		return m.LocalAsDualAsModeNative
	}
	return false
}

func (m *BgpNbrRangeBag) GetEgressPeerEngineeringEnabled() bool {
	if m != nil {
		return m.EgressPeerEngineeringEnabled
	}
	return false
}

func (m *BgpNbrRangeBag) GetDiscardAs4Path() uint32 {
	if m != nil {
		return m.DiscardAs4Path
	}
	return 0
}

func (m *BgpNbrRangeBag) GetRpkiDisable() bool {
	if m != nil {
		return m.RpkiDisable
	}
	return false
}

func (m *BgpNbrRangeBag) GetRpkiUseValidity() bool {
	if m != nil {
		return m.RpkiUseValidity
	}
	return false
}

func (m *BgpNbrRangeBag) GetRpkiAllowInvalid() bool {
	if m != nil {
		return m.RpkiAllowInvalid
	}
	return false
}

func (m *BgpNbrRangeBag) GetRpkiSignalIbgp() bool {
	if m != nil {
		return m.RpkiSignalIbgp
	}
	return false
}

func (m *BgpNbrRangeBag) GetGracefulMaintenance() *BgpNbrGshut_ {
	if m != nil {
		return m.GracefulMaintenance
	}
	return nil
}

func (m *BgpNbrRangeBag) GetRemoteAsListName() string {
	if m != nil {
		return m.RemoteAsListName
	}
	return ""
}

func (m *BgpNbrRangeBag) GetNbrRcvSize() uint32 {
	if m != nil {
		return m.NbrRcvSize
	}
	return 0
}

func (m *BgpNbrRangeBag) GetNbrSendSize() uint32 {
	if m != nil {
		return m.NbrSendSize
	}
	return 0
}

func (m *BgpNbrRangeBag) GetIslocalAddressCfg() bool {
	if m != nil {
		return m.IslocalAddressCfg
	}
	return false
}

func (m *BgpNbrRangeBag) GetCfgLocalAddress() *BgpAddrtype {
	if m != nil {
		return m.CfgLocalAddress
	}
	return nil
}

func (m *BgpNbrRangeBag) GetUpdateSource() string {
	if m != nil {
		return m.UpdateSource
	}
	return ""
}

func (m *BgpNbrRangeBag) GetAddpathSendEnable() bool {
	if m != nil {
		return m.AddpathSendEnable
	}
	return false
}

func (m *BgpNbrRangeBag) GetAddpathReceiveEnable() bool {
	if m != nil {
		return m.AddpathReceiveEnable
	}
	return false
}

func (m *BgpNbrRangeBag) GetAddpathSendDisable() bool {
	if m != nil {
		return m.AddpathSendDisable
	}
	return false
}

func (m *BgpNbrRangeBag) GetAddpathReceiveDisable() bool {
	if m != nil {
		return m.AddpathReceiveDisable
	}
	return false
}

func (m *BgpNbrRangeBag) GetUpdErrhNoreset() bool {
	if m != nil {
		return m.UpdErrhNoreset
	}
	return false
}

func (m *BgpNbrRangeBag) GetMsgBufCount() uint32 {
	if m != nil {
		return m.MsgBufCount
	}
	return 0
}

func (m *BgpNbrRangeBag) GetMsgBugCircular() bool {
	if m != nil {
		return m.MsgBugCircular
	}
	return false
}

func (m *BgpNbrRangeBag) GetSyslogEnable() bool {
	if m != nil {
		return m.SyslogEnable
	}
	return false
}

func (m *BgpNbrRangeBag) GetOperAttrfEnable() bool {
	if m != nil {
		return m.OperAttrfEnable
	}
	return false
}

func (m *BgpNbrRangeBag) GetAttrfGroupName() string {
	if m != nil {
		return m.AttrfGroupName
	}
	return ""
}

func (m *BgpNbrRangeBag) GetMaxPeers() uint32 {
	if m != nil {
		return m.MaxPeers
	}
	return 0
}

func (m *BgpNbrRangeBag) GetIdleWatchTime() uint32 {
	if m != nil {
		return m.IdleWatchTime
	}
	return 0
}

func (m *BgpNbrRangeBag) GetCurrentPeers() uint32 {
	if m != nil {
		return m.CurrentPeers
	}
	return 0
}

func (m *BgpNbrRangeBag) GetRangeOpenMatch() uint32 {
	if m != nil {
		return m.RangeOpenMatch
	}
	return 0
}

func (m *BgpNbrRangeBag) GetRangeOpenAccepted() uint32 {
	if m != nil {
		return m.RangeOpenAccepted
	}
	return 0
}

func (m *BgpNbrRangeBag) GetRangeMaxDrop() uint32 {
	if m != nil {
		return m.RangeMaxDrop
	}
	return 0
}

func (m *BgpNbrRangeBag) GetRangeInstError() uint32 {
	if m != nil {
		return m.RangeInstError
	}
	return 0
}

func (m *BgpNbrRangeBag) GetInstance() []*BgpNbrInstance_ {
	if m != nil {
		return m.Instance
	}
	return nil
}

func init() {
	proto.RegisterType((*BgpNbrRangeBag_KEYS)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.vrfs.vrf.neighbor_ranges.neighbor_range.bgp_nbr_range_bag_KEYS")
	proto.RegisterType((*BgpL2VpnAddrT)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.vrfs.vrf.neighbor_ranges.neighbor_range.bgp_l2vpn_addr_t")
	proto.RegisterType((*BgpL2VpnMspwAddrT)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.vrfs.vrf.neighbor_ranges.neighbor_range.bgp_l2vpn_mspw_addr_t")
	proto.RegisterType((*BgpIpv4SrpolicyAddrT)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.vrfs.vrf.neighbor_ranges.neighbor_range.bgp_ipv4_srpolicy_addr_t")
	proto.RegisterType((*BgpIpv6SrpolicyAddrT)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.vrfs.vrf.neighbor_ranges.neighbor_range.bgp_ipv6_srpolicy_addr_t")
	proto.RegisterType((*BgpAddrtype)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.vrfs.vrf.neighbor_ranges.neighbor_range.bgp_addrtype")
	proto.RegisterType((*BgpNbrRangeAf_)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.vrfs.vrf.neighbor_ranges.neighbor_range.bgp_nbr_range_af_")
	proto.RegisterType((*BgpNbrGshut_)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.vrfs.vrf.neighbor_ranges.neighbor_range.bgp_nbr_gshut_")
	proto.RegisterType((*BgpTimespec)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.vrfs.vrf.neighbor_ranges.neighbor_range.bgp_timespec")
	proto.RegisterType((*BgpNbrInstance_)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.vrfs.vrf.neighbor_ranges.neighbor_range.bgp_nbr_instance_")
	proto.RegisterType((*BgpNbrRangeBag)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.vrfs.vrf.neighbor_ranges.neighbor_range.bgp_nbr_range_bag")
}

func init() { proto.RegisterFile("bgp_nbr_range_bag.proto", fileDescriptor_458dea1d4196ae27) }

var fileDescriptor_458dea1d4196ae27 = []byte{
	// 4766 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x7b, 0x4b, 0x73, 0x1c, 0x47,
	0x72, 0x7f, 0xcc, 0x6a, 0x97, 0x1c, 0x16, 0x30, 0x04, 0xd0, 0x04, 0xc9, 0x26, 0x89, 0x95, 0x28,
	0xf0, 0x05, 0x3e, 0x25, 0x51, 0x10, 0x24, 0xfd, 0x97, 0x92, 0x76, 0x08, 0x80, 0x14, 0x24, 0xbc,
	0xd4, 0x00, 0xc9, 0xd5, 0xfe, 0x57, 0x5b, 0xee, 0xe9, 0xae, 0x69, 0x94, 0xd8, 0x2f, 0x57, 0xd5,
	0xe0, 0x41, 0xef, 0xda, 0x5e, 0xef, 0xda, 0xbe, 0xf9, 0xe8, 0x83, 0x7d, 0xb4, 0x2f, 0x3e, 0x38,
	0xc2, 0xe1, 0xf0, 0xc5, 0x17, 0xdb, 0x9f, 0xc1, 0x9f, 0xc7, 0x07, 0x47, 0x66, 0x56, 0x75, 0xf7,
	0xcc, 0x80, 0xa2, 0x7c, 0x11, 0x2f, 0x12, 0x26, 0xf3, 0x97, 0x59, 0x59, 0x55, 0x59, 0x59, 0x99,
	0xd9, 0x45, 0x76, 0xbe, 0x97, 0x94, 0x3c, 0xef, 0x29, 0xae, 0xc2, 0x3c, 0x11, 0xbc, 0x17, 0x26,
	0xf7, 0x4a, 0x55, 0x98, 0xc2, 0xfb, 0x36, 0x92, 0x3a, 0x2a, 0xb8, 0x2c, 0x34, 0x3f, 0x54, 0x5c,
	0x96, 0xfb, 0x8b, 0x1c, 0xa0, 0x45, 0x29, 0xd4, 0xbd, 0x5e, 0x52, 0xde, 0x93, 0xb9, 0x36, 0x61,
	0x1e, 0x09, 0x5d, 0xfd, 0x55, 0xfd, 0xc1, 0xe1, 0x7f, 0x71, 0xef, 0xe8, 0xde, 0xbe, 0xea, 0x6b,
	0xf8, 0xcf, 0xbd, 0x5c, 0xc8, 0x64, 0xaf, 0x57, 0xd8, 0x51, 0xf4, 0xc8, 0xef, 0xf9, 0xbf, 0x69,
	0xb1, 0x73, 0x63, 0x76, 0xf0, 0x2f, 0x57, 0xbf, 0xde, 0xf1, 0xae, 0xb0, 0x4e, 0xa5, 0x36, 0x0f,
	0x33, 0xe1, 0xb7, 0x2e, 0xb7, 0x16, 0x4e, 0x05, 0x93, 0x8e, 0xb8, 0x19, 0x66, 0xc2, 0xbb, 0xc0,
	0xda, 0xfb, 0xaa, 0x4f, 0xfc, 0x1f, 0x21, 0xff, 0xe4, 0xbe, 0xea, 0x23, 0x6b, 0x91, 0x9d, 0x1b,
	0x1e, 0x8c, 0x87, 0x71, 0xac, 0x84, 0xd6, 0xfe, 0x1b, 0x08, 0x9c, 0x75, 0xdc, 0x00, 0x98, 0x5d,
	0xe2, 0xcd, 0x7f, 0xc8, 0xa6, 0xc1, 0x9e, 0xf4, 0xfe, 0x7e, 0x99, 0xa3, 0x00, 0x37, 0x60, 0x49,
	0xfd, 0x1b, 0x14, 0xb4, 0x2e, 0xbf, 0xb1, 0xd0, 0x09, 0x26, 0x91, 0xe8, 0x04, 0x1f, 0xb0, 0xb3,
	0xb5, 0x60, 0xa6, 0xcb, 0x83, 0xff, 0x93, 0xf4, 0x26, 0xf3, 0x41, 0x1a, 0x17, 0x5b, 0xab, 0xb2,
	0x48, 0x65, 0x74, 0xe4, 0x14, 0xdc, 0x67, 0x67, 0xc7, 0xe9, 0xb5, 0xa2, 0x33, 0xc0, 0xdc, 0xb1,
	0xbc, 0x71, 0x7d, 0x4b, 0x2f, 0xd1, 0xb7, 0xf4, 0x5d, 0xfa, 0x96, 0x46, 0xf5, 0xfd, 0x67, 0x87,
	0x4d, 0x82, 0x42, 0x80, 0x9a, 0xa3, 0x52, 0x78, 0xd3, 0xec, 0x8d, 0xb0, 0x2f, 0xed, 0x9e, 0xc0,
	0x9f, 0xde, 0xdb, 0x6c, 0x12, 0xcd, 0x74, 0xda, 0x68, 0x3b, 0x26, 0x80, 0x66, 0xb5, 0x78, 0x77,
	0x98, 0x87, 0x90, 0x2c, 0x0a, 0xb5, 0x19, 0xd9, 0x8e, 0x69, 0xe0, 0x6c, 0x00, 0x63, 0x14, 0x9d,
	0x86, 0x3d, 0x91, 0x56, 0xe8, 0x1f, 0xd7, 0xe8, 0x75, 0x60, 0x38, 0xf4, 0x3d, 0x86, 0x0b, 0xc1,
	0xcd, 0x20, 0xcf, 0x1b, 0xf0, 0x9f, 0x20, 0x7c, 0x06, 0x58, 0xbb, 0xc8, 0x71, 0xf8, 0x1b, 0x6c,
	0x0a, 0x88, 0x59, 0x5c, 0x1b, 0x72, 0x02, 0xb1, 0xa7, 0x2d, 0x79, 0x04, 0xd8, 0xdc, 0xc1, 0x93,
	0x35, 0xb0, 0xde, 0x43, 0xef, 0x3d, 0x36, 0x6b, 0x29, 0x21, 0xcd, 0xd0, 0xa2, 0xdb, 0x88, 0x3e,
	0xe3, 0x78, 0x1b, 0x35, 0xcb, 0xae, 0xd9, 0x52, 0xa5, 0xf8, 0x54, 0xb5, 0x66, 0x4b, 0xc3, 0xab,
	0xb0, 0x34, 0xb2, 0x66, 0xac, 0x5a, 0x85, 0xa5, 0x63, 0xd6, 0x6c, 0x69, 0x64, 0xcd, 0x26, 0x6a,
	0xf4, 0xd0, 0x9a, 0xd1, 0xd4, 0x96, 0x9a, 0x53, 0x9b, 0xac, 0xa6, 0xb6, 0xd4, 0x98, 0x9a, 0x75,
	0x19, 0x74, 0xed, 0x21, 0x3b, 0x3a, 0xd5, 0xdc, 0x80, 0x39, 0x64, 0xca, 0x3f, 0xb5, 0xd8, 0x0c,
	0xfa, 0xf8, 0x7e, 0x99, 0xea, 0x4a, 0xe0, 0xf4, 0xe5, 0xd6, 0xc2, 0xc4, 0xfd, 0xdf, 0xdc, 0xfb,
	0xe1, 0x62, 0xcc, 0xbd, 0xd1, 0xf3, 0x1c, 0x4c, 0x57, 0x66, 0x35, 0xe6, 0xa7, 0x0c, 0x8f, 0x8a,
	0x5c, 0x1b, 0x15, 0xca, 0xbc, 0x9e, 0xdf, 0x14, 0xcd, 0x4f, 0x99, 0xe5, 0x8a, 0xe7, 0x64, 0x6e,
	0x32, 0x5c, 0xd0, 0xac, 0xb9, 0x7a, 0xd3, 0x08, 0x9f, 0x72, 0xf4, 0x61, 0xe8, 0xe2, 0x10, 0x74,
	0xa6, 0x82, 0x2e, 0x36, 0xa1, 0x77, 0x98, 0x47, 0xb6, 0x8a, 0x26, 0xd8, 0xa3, 0x0d, 0x44, 0xce,
	0x6a, 0x03, 0x3d, 0xcf, 0x3a, 0xa9, 0xe6, 0x8d, 0xe5, 0x3d, 0x43, 0x0e, 0x94, 0xea, 0xf5, 0x6a,
	0x6e, 0xff, 0xd2, 0x72, 0x2a, 0xab, 0xa8, 0x04, 0xc8, 0x59, 0xdc, 0x88, 0xdf, 0xb5, 0x5e, 0xcf,
	0x4e, 0x34, 0x02, 0xa4, 0x9d, 0xd6, 0x86, 0x2e, 0x0f, 0x86, 0xdd, 0x6d, 0x91, 0xf7, 0xd3, 0xe2,
	0x40, 0x97, 0x22, 0xaa, 0x8c, 0x3e, 0x5b, 0x1f, 0xa5, 0x47, 0x96, 0x37, 0xe2, 0xa2, 0xe3, 0x32,
	0xe7, 0x6a, 0x17, 0x1d, 0x95, 0xf9, 0x88, 0xf9, 0xee, 0x68, 0x8f, 0x89, 0x9d, 0x47, 0xb1, 0x73,
	0x96, 0x7f, 0xbc, 0xe4, 0xd2, 0xb1, 0x92, 0x7e, 0x25, 0xb9, 0x74, 0x8c, 0xe4, 0xbf, 0xb7, 0x68,
	0x72, 0x5a, 0xf1, 0x91, 0xf0, 0x7b, 0x01, 0x77, 0xe4, 0x0f, 0x3f, 0xf8, 0x8e, 0x1c, 0x77, 0xe9,
	0xd0, 0x1a, 0x6b, 0xb5, 0xdd, 0xbc, 0x05, 0x9c, 0xed, 0x4b, 0xe3, 0xb6, 0x5f, 0x7c, 0x7d, 0xb6,
	0x2f, 0x1d, 0x6b, 0xfb, 0xd2, 0x88, 0xed, 0xf3, 0xff, 0x71, 0x97, 0xcd, 0x0c, 0x67, 0x1a, 0x61,
	0x9f, 0x7b, 0xe7, 0xd9, 0xc9, 0xb0, 0xdf, 0x4c, 0x2f, 0x4e, 0x84, 0x94, 0x3d, 0x7c, 0xc1, 0xe6,
	0xa5, 0xe6, 0xf5, 0x88, 0xc5, 0xc0, 0x08, 0xae, 0x44, 0x3f, 0x15, 0x91, 0x29, 0x14, 0x8f, 0x52,
	0x29, 0x72, 0x83, 0x77, 0x5c, 0x3b, 0x78, 0x53, 0xea, 0x4d, 0x97, 0x4b, 0x00, 0x2e, 0x70, 0xb0,
	0x65, 0x44, 0x79, 0xd7, 0xd8, 0x94, 0xd4, 0x3c, 0x15, 0x49, 0x18, 0x1d, 0xf1, 0x52, 0x70, 0x65,
	0xf0, 0xce, 0x6b, 0x07, 0x93, 0x52, 0xaf, 0x23, 0x75, 0x5b, 0x04, 0xc6, 0x7b, 0x9f, 0x9d, 0x6b,
	0x0e, 0x19, 0xf6, 0x79, 0x14, 0x96, 0x61, 0x2f, 0x15, 0x78, 0xe7, 0xb5, 0x83, 0x33, 0xf5, 0x30,
	0xdd, 0xfe, 0x32, 0xb1, 0xbc, 0x5d, 0x76, 0x43, 0x6a, 0xae, 0x8b, 0xbe, 0xe1, 0x4a, 0x44, 0x45,
	0xde, 0x97, 0xc9, 0x40, 0x85, 0x46, 0x16, 0x39, 0x97, 0x79, 0xaf, 0x18, 0xe4, 0x31, 0x0f, 0xd3,
	0xb4, 0x38, 0x10, 0x31, 0x5e, 0x85, 0xed, 0xe0, 0x8a, 0xd4, 0x3b, 0x45, 0xdf, 0x04, 0xc3, 0xe0,
	0x35, 0xc2, 0x76, 0x09, 0xea, 0x6d, 0xb1, 0x6b, 0x52, 0xf3, 0x81, 0x16, 0xc7, 0x6b, 0x0e, 0xd3,
	0x83, 0xf0, 0x48, 0xf3, 0x22, 0xc7, 0x2b, 0xb3, 0x1d, 0x5c, 0x96, 0xfa, 0x89, 0x16, 0xc7, 0xa8,
	0xed, 0x22, 0x70, 0x2b, 0xf7, 0x1e, 0xb2, 0x37, 0x95, 0xc8, 0x8a, 0x7d, 0xc1, 0x4b, 0x25, 0xf7,
	0x43, 0x23, 0x78, 0xa8, 0x79, 0x5f, 0x15, 0x19, 0x1f, 0x94, 0x71, 0x68, 0x04, 0xdd, 0xa9, 0xed,
	0xe0, 0x22, 0xa1, 0xb6, 0x09, 0xd4, 0xd5, 0x8f, 0x54, 0x91, 0x3d, 0x21, 0x84, 0xf7, 0x2b, 0x76,
	0x67, 0x5c, 0x87, 0xc8, 0x8d, 0x54, 0xf0, 0x57, 0x19, 0x9a, 0xbd, 0x61, 0x8d, 0x6d, 0xd4, 0x78,
	0x7d, 0x44, 0xe3, 0x2a, 0x0a, 0x74, 0x11, 0xdf, 0xd4, 0xfe, 0x15, 0xbb, 0xfe, 0x12, 0x0b, 0xdd,
	0x3a, 0x3a, 0xbd, 0xa7, 0x50, 0xef, 0xdb, 0xc7, 0x58, 0x6a, 0x57, 0xd1, 0xa9, 0x7c, 0xce, 0x16,
	0xbf, 0x97, 0xc1, 0xa3, 0x03, 0x30, 0x1c, 0xe0, 0xee, 0x2b, 0x0c, 0x1f, 0x19, 0xec, 0x33, 0x36,
	0x57, 0x45, 0xa2, 0xfd, 0x30, 0x95, 0x31, 0x6d, 0x55, 0xcc, 0xa5, 0x46, 0x1f, 0x9a, 0x40, 0xa5,
	0x17, 0x1c, 0xe6, 0x69, 0x05, 0x59, 0x59, 0x43, 0x80, 0xb7, 0xcd, 0xae, 0x55, 0x0a, 0x94, 0x88,
	0xa5, 0x12, 0x91, 0x39, 0x56, 0xd3, 0x24, 0xcd, 0xdf, 0x81, 0x03, 0x8b, 0x1d, 0xd7, 0x78, 0x95,
	0x9d, 0x2e, 0x94, 0xe2, 0x89, 0x2a, 0x06, 0x25, 0x9d, 0x31, 0x4a, 0x17, 0x26, 0x0b, 0xa5, 0x1e,
	0x03, 0x11, 0x4f, 0xda, 0x75, 0x36, 0x55, 0xa3, 0x64, 0x1e, 0x8b, 0x43, 0x4c, 0x12, 0x3a, 0x41,
	0xc7, 0xc1, 0xd6, 0x80, 0x08, 0x2e, 0x24, 0x35, 0x07, 0xa8, 0x2a, 0x8a, 0xea, 0x86, 0xe6, 0xce,
	0xdf, 0x44, 0x8c, 0x97, 0x75, 0x3b, 0xb8, 0x28, 0xf5, 0x96, 0x52, 0x41, 0x51, 0xb8, 0x9b, 0x7a,
	0xb9, 0x42, 0x40, 0x2e, 0x1e, 0xc6, 0xfb, 0x42, 0x19, 0xa9, 0xe1, 0xfc, 0x4b, 0xbc, 0xb0, 0xdb,
	0xc1, 0x64, 0x45, 0xec, 0xf6, 0x25, 0x64, 0x92, 0x43, 0x20, 0xae, 0x44, 0xa1, 0x12, 0xbc, 0xb0,
	0xdb, 0xc1, 0x4c, 0x13, 0x1a, 0x00, 0x63, 0x1c, 0x9f, 0x16, 0x51, 0x98, 0xe2, 0x9d, 0x3d, 0x82,
	0x5f, 0x07, 0x06, 0xdc, 0x54, 0xc3, 0xf8, 0xd8, 0x2e, 0xec, 0x19, 0x3a, 0xe6, 0x4d, 0x89, 0x15,
	0x62, 0x79, 0x1f, 0xb1, 0x0b, 0xf6, 0xd0, 0xc1, 0xa1, 0xcc, 0xc5, 0xa1, 0xe1, 0x7b, 0x45, 0x69,
	0x47, 0x9a, 0x45, 0xb9, 0xb3, 0x04, 0x78, 0xa2, 0xc5, 0xa6, 0x38, 0x34, 0x9f, 0x17, 0x25, 0x8d,
	0x76, 0x87, 0x79, 0x15, 0x7c, 0x90, 0x47, 0x7b, 0x10, 0xfa, 0x62, 0xbc, 0x48, 0xdb, 0xc1, 0x74,
	0x4e, 0xc8, 0x27, 0x8e, 0xee, 0xfd, 0x8c, 0x5d, 0xd4, 0x22, 0x87, 0x54, 0x28, 0xcb, 0x06, 0xb9,
	0x34, 0x47, 0xdc, 0x14, 0x55, 0x48, 0xc2, 0xab, 0xb4, 0x1d, 0x9c, 0x07, 0xc4, 0xb2, 0x03, 0xec,
	0x16, 0x2e, 0x28, 0x79, 0x8f, 0xd8, 0x65, 0x14, 0x4e, 0xf4, 0xde, 0xe0, 0x65, 0x2a, 0xce, 0xa3,
	0x8a, 0x39, 0xc0, 0x3d, 0x06, 0xd8, 0x71, 0x7a, 0xd6, 0xd9, 0x15, 0xd4, 0x23, 0x0e, 0x8d, 0xc8,
	0x63, 0x11, 0xbf, 0x44, 0x95, 0x8f, 0xaa, 0xde, 0x02, 0xe8, 0xaa, 0x45, 0x1e, 0xa7, 0xed, 0x01,
	0xbb, 0x58, 0xc5, 0xd4, 0x58, 0xf4, 0xc3, 0x41, 0x6a, 0x78, 0xa1, 0x64, 0x22, 0xf3, 0xd0, 0x08,
	0xbc, 0x74, 0xdb, 0x81, 0xef, 0x10, 0x2b, 0x04, 0xd8, 0x72, 0x7c, 0xef, 0x4d, 0x36, 0x81, 0x5e,
	0xd7, 0xe7, 0x30, 0x0e, 0xde, 0x73, 0xed, 0xe0, 0x14, 0xb8, 0x58, 0x7f, 0x07, 0x62, 0x3b, 0x24,
	0xdc, 0xda, 0x9e, 0x5c, 0x50, 0x2f, 0x14, 0x78, 0xe2, 0x25, 0x5a, 0x5e, 0xa9, 0xe9, 0x74, 0xae,
	0x58, 0xba, 0xf7, 0x1e, 0x3b, 0x5b, 0x6b, 0x8b, 0xb9, 0x8e, 0xf6, 0x44, 0x3c, 0x48, 0x45, 0xec,
	0xcf, 0xa1, 0x80, 0xe7, 0xf4, 0xc6, 0x3b, 0x8e, 0x03, 0xb7, 0x02, 0x64, 0x19, 0x76, 0x84, 0x44,
	0xe4, 0x5c, 0xe4, 0xe0, 0x12, 0xb1, 0xff, 0x53, 0x72, 0x97, 0xfd, 0x32, 0xa7, 0x51, 0x1e, 0x8b,
	0x7c, 0x95, 0x58, 0x70, 0x56, 0x46, 0x84, 0x8c, 0x92, 0x49, 0x22, 0x54, 0x25, 0xfc, 0x26, 0x9d,
	0x95, 0xa6, 0xf0, 0x2e, 0x41, 0x9c, 0x8e, 0x4f, 0xd8, 0x25, 0x89, 0x89, 0x25, 0x06, 0x2a, 0xb4,
	0x17, 0xae, 0x71, 0x3c, 0xe1, 0x61, 0xea, 0xbf, 0x45, 0x0b, 0x27, 0x21, 0xcf, 0x04, 0x04, 0x58,
	0xbd, 0x55, 0xf3, 0xbd, 0x65, 0x3c, 0xae, 0x4e, 0x5c, 0x89, 0x48, 0xc8, 0x7d, 0x31, 0xa4, 0xe1,
	0x32, 0x6a, 0xb8, 0x54, 0x69, 0x08, 0x08, 0xd3, 0x54, 0x72, 0x8e, 0x9d, 0x38, 0x80, 0x9d, 0x31,
	0xfe, 0xdb, 0x18, 0x12, 0xec, 0x2f, 0x6f, 0x81, 0x4d, 0x67, 0xe1, 0x21, 0x2f, 0x95, 0xe8, 0xcb,
	0x43, 0x9e, 0xca, 0x4c, 0x1a, 0x7f, 0x1e, 0x11, 0xa7, 0xb3, 0xf0, 0x70, 0x1b, 0xc9, 0xeb, 0x40,
	0xf5, 0x1e, 0xb0, 0x4b, 0x70, 0x62, 0x1a, 0xe8, 0x83, 0x50, 0xe5, 0x32, 0x4f, 0x78, 0x91, 0xa7,
	0x47, 0xfe, 0x15, 0xf2, 0xe8, 0x81, 0x16, 0x1b, 0x4e, 0xee, 0x19, 0xf1, 0xb7, 0xf2, 0xf4, 0x08,
	0xd6, 0xb1, 0x21, 0x19, 0x4b, 0x1d, 0x85, 0x2a, 0x06, 0xbf, 0x54, 0x21, 0x07, 0x93, 0xb5, 0x7f,
	0x95, 0xd6, 0xb1, 0x1a, 0x75, 0x85, 0x30, 0xab, 0x00, 0xd9, 0x06, 0x84, 0xb7, 0xc2, 0xde, 0x6a,
	0xe8, 0x10, 0x87, 0x91, 0x10, 0x71, 0xa5, 0x8a, 0x94, 0x5c, 0xa3, 0x95, 0xa8, 0x94, 0xac, 0x22,
	0xc8, 0xaa, 0x22, 0x2d, 0x9f, 0xb1, 0xb9, 0x86, 0x16, 0xb3, 0xa7, 0x84, 0xde, 0x2b, 0xd2, 0x98,
	0x97, 0x42, 0x45, 0xe0, 0x98, 0xd7, 0x71, 0xf6, 0x17, 0x2a, 0x15, 0xbb, 0x0e, 0xb1, 0x4d, 0x00,
	0xef, 0x03, 0x76, 0xbe, 0xa1, 0x40, 0x09, 0x6d, 0x42, 0x65, 0xb8, 0x91, 0x99, 0xf0, 0x6f, 0xa0,
	0xec, 0x6c, 0x25, 0x1b, 0x10, 0x73, 0x57, 0x66, 0xc2, 0xbb, 0xcb, 0xce, 0x48, 0xcd, 0x4b, 0x21,
	0x14, 0xba, 0xad, 0xcb, 0x48, 0x16, 0x9c, 0x83, 0x6f, 0x0b, 0xa1, 0xb6, 0x54, 0x95, 0x8e, 0x50,
	0x0e, 0x53, 0x45, 0xb0, 0xb8, 0xf2, 0x75, 0xff, 0xa6, 0xcb, 0x61, 0xba, 0x15, 0xd3, 0xfa, 0xba,
	0xf7, 0x29, 0x9b, 0x93, 0xda, 0xb9, 0x48, 0x2d, 0x52, 0x0d, 0x76, 0xcb, 0xb9, 0x9a, 0xf5, 0x10,
	0x27, 0xe8, 0x06, 0xfd, 0x98, 0x5d, 0x18, 0x1f, 0xd4, 0xaa, 0xf3, 0x6f, 0xa3, 0xf0, 0xb9, 0x91,
	0x71, 0xad, 0x26, 0xd8, 0x9c, 0xd1, 0xa1, 0x9d, 0xab, 0xba, 0xd1, 0xef, 0x38, 0x37, 0x6d, 0x8c,
	0x6e, 0xff, 0x74, 0x06, 0x38, 0x5f, 0xaf, 0x0c, 0x48, 0x54, 0x18, 0x89, 0xfe, 0x20, 0x75, 0xeb,
	0xec, 0xdf, 0xad, 0x7d, 0xdd, 0x81, 0x1e, 0x5b, 0x8c, 0x5d, 0x6d, 0x7b, 0xbf, 0x8d, 0x4a, 0x42,
	0x56, 0x6c, 0x04, 0xef, 0xa7, 0x61, 0xe2, 0xdf, 0x73, 0xf7, 0xdb, 0x88, 0xe8, 0x0e, 0x40, 0x1e,
	0xa5, 0x61, 0xe2, 0x6d, 0xb2, 0xab, 0xcd, 0xe9, 0x8c, 0x29, 0x73, 0x73, 0x7a, 0xc7, 0xa5, 0x6d,
	0x6e, 0x4e, 0x23, 0x1a, 0xdd, 0xc4, 0xbe, 0x62, 0xd7, 0xe9, 0x10, 0xf3, 0x3a, 0x08, 0xa0, 0x0e,
	0x99, 0x42, 0x34, 0xae, 0x67, 0xec, 0xbf, 0x4b, 0x49, 0x01, 0x1e, 0xe6, 0x6d, 0x1b, 0x0e, 0x96,
	0x2b, 0x64, 0x3d, 0x6b, 0x6f, 0x03, 0x4d, 0x7c, 0xa9, 0x4a, 0x67, 0xbb, 0xff, 0x1e, 0x45, 0xf7,
	0x97, 0x28, 0x74, 0x76, 0x7b, 0xcf, 0xd8, 0xcd, 0xa6, 0xba, 0xa1, 0xcd, 0x1b, 0x33, 0xf2, 0x3e,
	0xea, 0xbc, 0x5a, 0xe9, 0x6c, 0x6e, 0xe3, 0xa8, 0x9d, 0x3b, 0x98, 0x58, 0x7f, 0x97, 0xe2, 0xca,
	0xd4, 0xf7, 0x51, 0xed, 0xfc, 0xcb, 0xd5, 0x56, 0xd6, 0xbe, 0xcd, 0x26, 0x87, 0x4e, 0xde, 0x22,
	0x9e, 0xbc, 0x09, 0xd5, 0x38, 0x70, 0x77, 0x98, 0x87, 0xb7, 0xfa, 0xf0, 0x11, 0xfd, 0x00, 0x81,
	0xd3, 0xc8, 0x09, 0x86, 0xd1, 0xda, 0x84, 0xa9, 0x20, 0x23, 0x01, 0x5a, 0x0c, 0x8c, 0xbf, 0x44,
	0x68, 0xe4, 0x80, 0x41, 0xbb, 0x44, 0x87, 0x18, 0xa0, 0x64, 0x8f, 0x97, 0x03, 0x95, 0x08, 0x07,
	0x86, 0x14, 0x6f, 0x20, 0xfc, 0x0f, 0x29, 0x06, 0x28, 0xd9, 0xdb, 0x06, 0xae, 0x95, 0x78, 0x0a,
	0x3c, 0x6f, 0x83, 0x5d, 0xa9, 0x6e, 0xd0, 0x52, 0x09, 0x2d, 0x14, 0x38, 0x57, 0xbf, 0x50, 0x07,
	0xa1, 0x8a, 0x21, 0x94, 0xa2, 0x8f, 0xfa, 0x1f, 0x91, 0x53, 0x39, 0xe8, 0xb6, 0x43, 0x3e, 0xaa,
	0x80, 0xe8, 0xa8, 0x5e, 0x9f, 0xbd, 0x97, 0x16, 0x79, 0xc2, 0xd3, 0xe3, 0x7d, 0x94, 0xe6, 0x03,
	0xd6, 0x35, 0x73, 0xbb, 0x8f, 0x51, 0xf9, 0x6d, 0x10, 0x5c, 0x3f, 0xc6, 0x61, 0x77, 0x40, 0x08,
	0x8c, 0x6e, 0x24, 0x7b, 0xbf, 0x64, 0xb7, 0xbf, 0xe7, 0x38, 0x78, 0xb5, 0xff, 0x3f, 0x5c, 0x81,
	0x6b, 0xaf, 0x1c, 0x01, 0xaf, 0xfd, 0x5f, 0xb3, 0xbb, 0xdf, 0x53, 0x77, 0x18, 0x45, 0xa2, 0x34,
	0xfe, 0xcf, 0x50, 0xfb, 0x8d, 0x57, 0x6a, 0xef, 0x22, 0xdc, 0x8b, 0xd8, 0x3b, 0xdf, 0xa5, 0xff,
	0x38, 0x2f, 0x7c, 0x80, 0x2b, 0x74, 0xeb, 0x65, 0x23, 0x1c, 0xe3, 0x8d, 0xbd, 0xef, 0x1e, 0xa4,
	0x31, 0x89, 0x6a, 0x90, 0x4f, 0x70, 0x1a, 0x37, 0x5f, 0x39, 0x8d, 0x6a, 0x8c, 0x90, 0xdd, 0x3b,
	0xc6, 0x77, 0x1a, 0xc3, 0x8e, 0xb9, 0xd1, 0xa7, 0x38, 0x8f, 0x9b, 0x63, 0x6e, 0xb4, 0xee, 0xc6,
	0x1c, 0xf5, 0xa7, 0x6f, 0xd8, 0x9d, 0x6a, 0x88, 0x57, 0x2e, 0x5a, 0x2a, 0xfc, 0xcf, 0x70, 0x80,
	0x1b, 0x4e, 0x66, 0xfd, 0xbb, 0x16, 0x2c, 0x15, 0xde, 0xb7, 0xec, 0xfd, 0xef, 0xa5, 0xde, 0x2e,
	0x54, 0x16, 0x4a, 0x48, 0x1f, 0xfc, 0x9f, 0xe3, 0x4a, 0xdd, 0x7d, 0xd5, 0x28, 0xb4, 0x58, 0x56,
	0xc8, 0xe6, 0x87, 0xf6, 0x8e, 0x86, 0xcb, 0x08, 0x97, 0x2c, 0x37, 0x7e, 0xd7, 0xe5, 0x87, 0x74,
	0x43, 0x6f, 0xa9, 0xfe, 0x36, 0x71, 0xbc, 0x77, 0xd9, 0x2c, 0x00, 0x45, 0x6e, 0x94, 0x14, 0x75,
	0xec, 0xf7, 0x1f, 0xe2, 0xf8, 0x5e, 0xa1, 0xfa, 0xab, 0xc4, 0xaa, 0xb6, 0x04, 0xa2, 0x00, 0xb6,
	0x33, 0x6c, 0xd7, 0xa4, 0x1e, 0xce, 0x5f, 0xa6, 0x2f, 0x23, 0xc8, 0xa6, 0xf6, 0x49, 0x35, 0x1e,
	0xd4, 0x69, 0x43, 0x62, 0x32, 0xf7, 0x57, 0x10, 0xde, 0x69, 0xc0, 0xd7, 0x72, 0xc8, 0xcd, 0x86,
	0x70, 0x10, 0x90, 0x56, 0xa9, 0xab, 0xdc, 0x00, 0x6e, 0x0d, 0x0c, 0x5c, 0x9b, 0x43, 0xc8, 0xf1,
	0xec, 0xfc, 0x11, 0xca, 0x5d, 0x6a, 0xc8, 0x8d, 0x25, 0xe8, 0x14, 0xa7, 0xab, 0x1d, 0x12, 0xbd,
	0xa4, 0xe4, 0x07, 0xd2, 0xec, 0x41, 0x68, 0x73, 0x85, 0x35, 0xe9, 0xf7, 0x1f, 0xbb, 0x38, 0xed,
	0x6a, 0x83, 0xd5, 0x5e, 0x52, 0x3e, 0x23, 0xac, 0xad, 0xa6, 0x69, 0x10, 0xef, 0x09, 0x5b, 0x78,
	0xa9, 0xd2, 0x62, 0x60, 0x86, 0xb4, 0x7e, 0xee, 0xda, 0x2a, 0xc7, 0x68, 0xdd, 0xb2, 0x58, 0xab,
	0xf6, 0x36, 0x16, 0x0b, 0xa1, 0xe6, 0xc5, 0xbe, 0x50, 0x4a, 0xc6, 0x10, 0x79, 0x8c, 0xbf, 0x86,
	0x0a, 0xa6, 0xa4, 0xee, 0xea, 0x2d, 0x4b, 0xdf, 0x11, 0xc6, 0xbb, 0x45, 0xe0, 0x34, 0x2d, 0x0e,
	0x40, 0x44, 0xe6, 0x08, 0xfe, 0x02, 0xc1, 0xa7, 0xa5, 0xc6, 0x56, 0x4d, 0x57, 0xaf, 0xe5, 0x80,
	0xbd, 0xc9, 0x66, 0x9a, 0xc0, 0xa8, 0x18, 0xe4, 0xc6, 0xff, 0x92, 0x12, 0xe2, 0xd0, 0x01, 0x97,
	0x81, 0x0a, 0x69, 0x86, 0x2b, 0x9d, 0xfb, 0x61, 0x26, 0xd3, 0xa3, 0xa6, 0x53, 0xe3, 0x5d, 0xb3,
	0x8e, 0x72, 0x17, 0x2d, 0xea, 0x11, 0x82, 0x2a, 0xf7, 0xc5, 0x5b, 0x87, 0x8a, 0xa2, 0x50, 0x26,
	0x25, 0xda, 0xb4, 0xe1, 0x8a, 0xa2, 0xae, 0x4c, 0x4a, 0x30, 0x67, 0x9e, 0x75, 0x20, 0x0d, 0x31,
	0x95, 0xfb, 0x6e, 0x22, 0x62, 0x42, 0xea, 0xc0, 0x38, 0xbf, 0xbd, 0xcb, 0xbc, 0xf1, 0xfa, 0xce,
	0xdf, 0xc2, 0x4f, 0x50, 0x33, 0x62, 0xb4, 0x9e, 0xb3, 0x27, 0xa3, 0x56, 0xe9, 0xba, 0x85, 0xfe,
	0xb6, 0x3b, 0x19, 0x95, 0xea, 0x1d, 0xe2, 0x40, 0xe1, 0x77, 0x4c, 0x05, 0xe9, 0xe4, 0xbe, 0xc2,
	0x91, 0xfc, 0xb1, 0x91, 0x9c, 0xf4, 0x1d, 0xe6, 0x51, 0xe8, 0xe6, 0xc5, 0x41, 0x5d, 0x73, 0x05,
	0x94, 0xf7, 0x12, 0x67, 0xeb, 0xa0, 0x2a, 0xb8, 0x7e, 0xce, 0xe6, 0xb4, 0x48, 0x45, 0x64, 0x20,
	0x47, 0xc8, 0x06, 0xa9, 0x91, 0x78, 0x21, 0x8b, 0x54, 0x26, 0x12, 0x62, 0xce, 0x0e, 0xa5, 0x6e,
	0x15, 0x66, 0xc3, 0x41, 0x56, 0x2d, 0xc2, 0xbb, 0xc6, 0x4e, 0x87, 0x7d, 0x55, 0x3e, 0xaf, 0xdb,
	0x01, 0xbb, 0x28, 0xd3, 0x21, 0xaa, 0x6b, 0x04, 0xdc, 0x63, 0x67, 0x2c, 0x0c, 0xca, 0x1a, 0x6c,
	0xcf, 0xc0, 0xba, 0x3d, 0xb1, 0xcd, 0x06, 0x64, 0x3d, 0xd1, 0xe2, 0xa9, 0x65, 0x40, 0x78, 0xb0,
	0x78, 0x72, 0x10, 0x99, 0xa3, 0x8c, 0xff, 0x94, 0x96, 0x8d, 0x78, 0xe8, 0x4b, 0x6b, 0xc4, 0xc1,
	0x89, 0x93, 0x84, 0x96, 0x49, 0x1e, 0xa6, 0x5c, 0xf6, 0x92, 0xd2, 0x7f, 0x66, 0x27, 0x8e, 0x9c,
	0x1d, 0x64, 0xac, 0xf5, 0x92, 0x72, 0x34, 0xf5, 0x85, 0x7a, 0x24, 0x0b, 0x73, 0xd8, 0xa0, 0x5c,
	0x98, 0x83, 0x42, 0x3d, 0xf7, 0x7f, 0x31, 0x96, 0xfa, 0x6e, 0x3b, 0xcc, 0x26, 0x41, 0xec, 0xb9,
	0xc0, 0x54, 0xd0, 0x7e, 0x5e, 0x32, 0x46, 0xf9, 0x5f, 0xbb, 0x73, 0x01, 0xa9, 0x1f, 0x7d, 0x5a,
	0x32, 0x46, 0xe1, 0xc7, 0x94, 0xac, 0x2c, 0xf0, 0x82, 0x92, 0x26, 0xda, 0x83, 0x60, 0xfb, 0x4b,
	0x0b, 0x45, 0xfa, 0x8e, 0x23, 0x83, 0x8f, 0x59, 0xa8, 0x12, 0x75, 0x50, 0xf9, 0xff, 0xb4, 0x56,
	0xc4, 0x09, 0x6a, 0x06, 0x6c, 0xe2, 0x38, 0xbc, 0x31, 0xca, 0xaf, 0x6c, 0xfe, 0x3d, 0x2a, 0x58,
	0x0f, 0x08, 0x6b, 0x57, 0x2d, 0x05, 0x7e, 0xc0, 0x08, 0x13, 0xed, 0x7f, 0x43, 0xe9, 0x58, 0xc5,
	0x79, 0xba, 0x08, 0xc9, 0xba, 0x1e, 0x41, 0x2f, 0x59, 0xf4, 0xaf, 0x47, 0xd1, 0x4b, 0x88, 0x9e,
	0xff, 0x9f, 0x16, 0x3b, 0xed, 0x1a, 0xd8, 0xd4, 0x61, 0x81, 0x74, 0x92, 0xfe, 0x12, 0x87, 0x52,
	0x1b, 0x8d, 0x2d, 0xec, 0x76, 0x30, 0x81, 0xb4, 0x55, 0x24, 0xc1, 0x18, 0x04, 0xa1, 0xa4, 0x32,
	0x44, 0xef, 0xb3, 0x7d, 0xeb, 0x69, 0xe4, 0x60, 0x9b, 0xa8, 0x8b, 0xf4, 0x5a, 0xa1, 0xc5, 0xbd,
	0xd1, 0x50, 0x68, 0x21, 0xb7, 0xd8, 0x4c, 0xa5, 0x10, 0x6e, 0x0e, 0x8c, 0x00, 0xd4, 0xa0, 0x9e,
	0x72, 0xfa, 0x80, 0x0e, 0x71, 0xe0, 0x0a, 0xeb, 0x0c, 0x61, 0xb1, 0x05, 0xdd, 0x09, 0x26, 0x9b,
	0x38, 0x70, 0x7c, 0x02, 0x95, 0x4a, 0x94, 0x22, 0x8f, 0xe9, 0x3b, 0x6c, 0x27, 0x20, 0xd1, 0x6d,
	0x4b, 0x9c, 0xff, 0x82, 0x3e, 0x40, 0x43, 0x84, 0xd2, 0xa5, 0x88, 0x3c, 0x9f, 0x9d, 0xd4, 0x22,
	0x2a, 0x00, 0xdf, 0x42, 0xbc, 0xfb, 0xe9, 0x5d, 0x66, 0x13, 0x79, 0x98, 0x17, 0x8e, 0xfb, 0x23,
	0xca, 0xb1, 0x1b, 0xa4, 0xf9, 0xdf, 0xff, 0xa4, 0xfe, 0x16, 0x50, 0x7d, 0x7e, 0xf0, 0xfe, 0xa1,
	0xc5, 0xa6, 0xeb, 0xee, 0x7b, 0xf5, 0x4d, 0xbc, 0xb5, 0x30, 0x71, 0xff, 0xf0, 0x87, 0xfe, 0xae,
	0xe1, 0xbe, 0xb3, 0x07, 0x53, 0x8e, 0xe9, 0xbe, 0xc1, 0xfc, 0x7d, 0x8b, 0x4d, 0xd6, 0x56, 0x26,
	0xb4, 0x97, 0xaf, 0xc1, 0x42, 0xb7, 0x11, 0xc1, 0x44, 0x65, 0x61, 0x22, 0xbc, 0x07, 0xd8, 0x34,
	0x92, 0x71, 0x2a, 0xf8, 0x41, 0x68, 0x22, 0x2a, 0x49, 0x14, 0x57, 0x83, 0x1c, 0x93, 0x22, 0xf2,
	0xa7, 0xf3, 0x52, 0xaf, 0xc5, 0xa9, 0x78, 0x06, 0x00, 0xb8, 0x4f, 0x54, 0x40, 0x6c, 0xef, 0xbf,
	0x5a, 0xec, 0xf2, 0xb8, 0xac, 0xcb, 0x8e, 0x6c, 0xa5, 0xf2, 0xe3, 0xd7, 0x3c, 0xdf, 0x39, 0x39,
	0x6c, 0xbb, 0x33, 0x8f, 0x6a, 0xa5, 0x9b, 0x6c, 0x3a, 0x2a, 0xf2, 0x1c, 0xa2, 0x7c, 0x91, 0xdb,
	0x8c, 0x96, 0xde, 0x20, 0x4c, 0xd5, 0x74, 0xcc, 0x5b, 0xe7, 0xff, 0xfb, 0xea, 0xe8, 0x17, 0xa9,
	0x5e, 0x98, 0x78, 0x3f, 0x65, 0x4c, 0x97, 0x22, 0x7c, 0x2e, 0x14, 0x97, 0x54, 0xb1, 0x76, 0x82,
	0x53, 0x96, 0xb2, 0x16, 0x83, 0x73, 0xc7, 0x42, 0x47, 0x4a, 0x96, 0xa0, 0x08, 0x4b, 0xcf, 0x53,
	0x41, 0x93, 0xe4, 0x5d, 0x60, 0x6d, 0x7b, 0xd6, 0xb5, 0xad, 0x2f, 0x4f, 0xe2, 0xef, 0xae, 0xf6,
	0x2e, 0xb1, 0x53, 0x4a, 0x64, 0x05, 0x7e, 0x88, 0xb0, 0x25, 0x65, 0x9b, 0x08, 0x5d, 0x0d, 0x07,
	0x7b, 0x0f, 0xd3, 0x07, 0x23, 0x14, 0x84, 0xfd, 0x54, 0xe6, 0xcf, 0xb1, 0x92, 0x6c, 0x07, 0x53,
	0x7b, 0xa1, 0x5e, 0xb3, 0xf4, 0x75, 0x99, 0x3f, 0xf7, 0xfe, 0xb5, 0xc5, 0xfc, 0xc6, 0x34, 0xed,
	0x78, 0xf6, 0xc8, 0x7c, 0xf8, 0x9a, 0x8f, 0xcc, 0xb9, 0xda, 0x32, 0x8a, 0x6d, 0xf6, 0xe4, 0x50,
	0x43, 0x73, 0xc8, 0xd6, 0x66, 0x85, 0xf9, 0x91, 0xeb, 0x32, 0x35, 0x85, 0x1a, 0xe5, 0xe4, 0xbf,
	0xb5, 0xd8, 0x85, 0xc6, 0x9c, 0xdd, 0x42, 0xda, 0x49, 0x7f, 0xfc, 0x9a, 0x27, 0x7d, 0xbe, 0x36,
	0x2d, 0xa0, 0x1d, 0xb5, 0xb3, 0xfe, 0x8c, 0xcd, 0x8d, 0x3c, 0x83, 0x72, 0x5d, 0x53, 0x91, 0x27,
	0x66, 0xcf, 0x96, 0xbd, 0x17, 0x86, 0x1e, 0x43, 0xd9, 0x06, 0x2a, 0x02, 0xbc, 0x2e, 0xfb, 0x29,
	0xde, 0xf0, 0x99, 0xcc, 0xa5, 0x36, 0x2a, 0x84, 0x5b, 0x20, 0x3d, 0xe2, 0x18, 0xb2, 0xe3, 0xe2,
	0x20, 0xc7, 0xd2, 0x16, 0xdb, 0x52, 0xdd, 0x11, 0xcc, 0xce, 0xde, 0xc0, 0xac, 0x14, 0x07, 0xb9,
	0xed, 0xb2, 0x55, 0x66, 0x34, 0xfa, 0x90, 0xa0, 0x05, 0x95, 0x3c, 0x70, 0x59, 0x82, 0xcb, 0xa2,
	0xab, 0x7e, 0xec, 0x8e, 0x85, 0x78, 0x1f, 0xb3, 0x8b, 0x52, 0x73, 0x4c, 0xc1, 0xfb, 0x3c, 0x13,
	0x59, 0xa1, 0x8e, 0xa0, 0x7a, 0x8c, 0x44, 0xcc, 0x07, 0x25, 0x56, 0xa6, 0xed, 0xe0, 0xac, 0xd4,
	0x5b, 0x03, 0xb3, 0xd5, 0xdf, 0x40, 0xf6, 0x23, 0xe4, 0x3e, 0x29, 0x21, 0x0b, 0x32, 0x26, 0xe5,
	0x5a, 0x44, 0x03, 0x05, 0x49, 0xa0, 0x4b, 0xe7, 0xa8, 0xd6, 0xf4, 0x8c, 0x49, 0x77, 0x2c, 0xcb,
	0x25, 0x74, 0xb7, 0xd8, 0x8c, 0x1e, 0x94, 0x90, 0x6c, 0xea, 0x45, 0xde, 0x3b, 0xa2, 0x23, 0x43,
	0x95, 0xe3, 0x54, 0xc5, 0x78, 0x78, 0x84, 0x27, 0xe7, 0x03, 0x76, 0xbe, 0xd7, 0x8f, 0xb9, 0x16,
	0x5a, 0x83, 0x67, 0x90, 0x72, 0x9e, 0x15, 0xb1, 0xc0, 0x2a, 0xf0, 0x54, 0x30, 0xdb, 0xeb, 0xc7,
	0x3b, 0xc4, 0x25, 0xfd, 0x1b, 0x45, 0x2c, 0x20, 0x3b, 0x01, 0x31, 0x58, 0x33, 0x38, 0x5b, 0xfb,
	0x61, 0xba, 0x1f, 0xa6, 0x58, 0xe9, 0x75, 0x82, 0x99, 0x5e, 0x3f, 0xde, 0x18, 0x62, 0x78, 0xb7,
	0xd9, 0x0c, 0xc2, 0x31, 0x73, 0x4c, 0x25, 0xd2, 0x6d, 0x95, 0x37, 0x0d, 0xe8, 0x26, 0x1d, 0x0a,
	0x02, 0xe1, 0xa2, 0x16, 0x37, 0x05, 0xa6, 0xf7, 0x58, 0xdd, 0x75, 0x82, 0xd3, 0xc0, 0x80, 0xd0,
	0xb5, 0x5b, 0x40, 0x46, 0x0f, 0xe5, 0xb3, 0xd4, 0x54, 0xe2, 0xa0, 0xee, 0xbd, 0xa2, 0x04, 0x9f,
	0xcd, 0xca, 0x54, 0x37, 0x8b, 0x73, 0x9b, 0x95, 0xc6, 0x58, 0xf4, 0xb5, 0x83, 0x1b, 0x52, 0x43,
	0x9d, 0xb3, 0x61, 0x25, 0x1e, 0x92, 0x40, 0x5d, 0x9a, 0xdb, 0x7c, 0x35, 0xf6, 0xce, 0xb1, 0x13,
	0x26, 0x2a, 0x33, 0xad, 0xb1, 0x08, 0xec, 0x04, 0xf6, 0x97, 0x37, 0xc7, 0x58, 0xa6, 0x13, 0x9e,
	0x16, 0x09, 0x54, 0x92, 0x8f, 0x28, 0x18, 0x65, 0x3a, 0x59, 0x2f, 0x92, 0xb5, 0x1c, 0x2a, 0x0c,
	0xc7, 0x85, 0xfa, 0xf1, 0x31, 0x85, 0x41, 0x62, 0x43, 0xe9, 0x78, 0x8b, 0xcd, 0x34, 0x8a, 0x72,
	0x1b, 0xed, 0x3e, 0x47, 0xd4, 0x54, 0x5d, 0x72, 0x53, 0xd4, 0xbb, 0xcb, 0xce, 0x38, 0x08, 0xcf,
	0x0b, 0x97, 0x66, 0xd8, 0xb2, 0x6b, 0xda, 0xc6, 0xc6, 0xcd, 0xc2, 0x66, 0x1a, 0xde, 0x06, 0xbb,
	0x22, 0x75, 0xb3, 0xc3, 0x92, 0x8b, 0xa4, 0x30, 0x92, 0x3e, 0x82, 0x96, 0x42, 0xf5, 0x0b, 0x95,
	0x89, 0xd8, 0x16, 0x62, 0x97, 0xa5, 0xae, 0x1b, 0x2b, 0x9b, 0x35, 0x70, 0xdb, 0xe1, 0xc0, 0xf5,
	0xea, 0x20, 0xc3, 0xb1, 0x67, 0x8f, 0x55, 0x16, 0x55, 0x67, 0x5e, 0xcd, 0xfb, 0xbc, 0x48, 0xa9,
	0xba, 0x7a, 0x6f, 0x48, 0xe2, 0xb9, 0x10, 0x65, 0x88, 0xdb, 0x47, 0x75, 0xd9, 0x99, 0x9a, 0xf7,
	0xa5, 0x63, 0x79, 0x9f, 0xb2, 0xb9, 0x86, 0x48, 0x26, 0x73, 0x1e, 0x46, 0x51, 0x63, 0xb0, 0x0d,
	0x14, 0xf5, 0x6b, 0xcc, 0x86, 0xcc, 0xbb, 0x51, 0x54, 0x0d, 0xb9, 0xc8, 0xce, 0xa1, 0x50, 0x95,
	0x8d, 0x3a, 0xc7, 0xc3, 0xca, 0xad, 0x13, 0xcc, 0x66, 0x32, 0xaf, 0xd2, 0xf7, 0x35, 0xcb, 0xc3,
	0x6f, 0x12, 0xc7, 0x4a, 0xf1, 0x4c, 0x8b, 0x48, 0xfb, 0x5b, 0xf6, 0x9b, 0xc4, 0x31, 0xb2, 0x1b,
	0x00, 0xf0, 0x3e, 0x62, 0x3e, 0x28, 0x70, 0x89, 0x34, 0x3d, 0x5a, 0xb0, 0x03, 0x6f, 0xa3, 0x30,
	0x98, 0xb5, 0x55, 0xb3, 0xab, 0xa1, 0x17, 0xd8, 0x74, 0x75, 0x93, 0xf1, 0x7c, 0x90, 0xf5, 0x84,
	0xf2, 0xbf, 0x22, 0xf7, 0x76, 0x17, 0xda, 0x26, 0x52, 0x21, 0x01, 0x8e, 0xb3, 0x17, 0x78, 0x9b,
	0xf1, 0x5e, 0x98, 0xc7, 0x07, 0x32, 0x36, 0x7b, 0x58, 0xc7, 0x75, 0x82, 0xe9, 0x38, 0x7b, 0x01,
	0xf7, 0xd9, 0x43, 0x47, 0x87, 0xca, 0x15, 0x4f, 0x82, 0x12, 0xd1, 0x3e, 0x8f, 0xb3, 0x17, 0xb6,
	0x70, 0x9b, 0x00, 0x62, 0x20, 0xa2, 0xfd, 0x95, 0xec, 0x05, 0x54, 0x2b, 0x88, 0xc1, 0x7a, 0x05,
	0x74, 0xe3, 0x49, 0xdf, 0xa5, 0x4b, 0x1e, 0x38, 0x50, 0xaf, 0xac, 0x64, 0x2f, 0xf0, 0x90, 0x5f,
	0x60, 0x6d, 0x53, 0x68, 0x0e, 0x31, 0x1a, 0x8b, 0xb4, 0x4e, 0x70, 0xd2, 0x14, 0x7a, 0xf7, 0xa8,
	0x14, 0x70, 0x1b, 0x03, 0x8b, 0xb2, 0x9a, 0xa7, 0x74, 0x00, 0x4c, 0xa1, 0x29, 0x8f, 0xf8, 0xdb,
	0x16, 0xbe, 0x4c, 0x89, 0x43, 0x13, 0xfa, 0xcf, 0x2e, 0xbf, 0xb1, 0x30, 0x71, 0xff, 0xb7, 0x3f,
	0xf4, 0xdd, 0x32, 0xf4, 0x52, 0x26, 0x38, 0x11, 0xf6, 0x57, 0x42, 0x13, 0x42, 0x21, 0x6e, 0xa2,
	0xb2, 0x0a, 0x76, 0x45, 0x29, 0x72, 0x5a, 0x80, 0x5f, 0xe0, 0x02, 0x78, 0x26, 0x2a, 0x6d, 0xa8,
	0xdb, 0x2a, 0x45, 0xee, 0xd6, 0xa0, 0x7a, 0xa4, 0xfb, 0xf5, 0xf0, 0x23, 0x5d, 0xc8, 0x76, 0xc8,
	0x34, 0xae, 0x4a, 0x5b, 0xc6, 0x9d, 0xb2, 0x94, 0xa0, 0xf4, 0xde, 0x62, 0x13, 0xb9, 0xae, 0x3f,
	0x5a, 0x52, 0xe5, 0xc6, 0x72, 0x5d, 0x7d, 0xa4, 0xfc, 0x8c, 0xcd, 0x8d, 0x35, 0xe2, 0x2c, 0x1a,
	0xec, 0xb7, 0x25, 0xdb, 0x85, 0x64, 0xb8, 0xe9, 0x66, 0xa5, 0x37, 0x7b, 0xca, 0xbb, 0xce, 0xa6,
	0x12, 0x35, 0xdc, 0x6b, 0xff, 0xc6, 0x96, 0x1f, 0xaa, 0xd9, 0x68, 0xbf, 0xcd, 0xbc, 0x44, 0xf1,
	0x91, 0x5e, 0xbb, 0xad, 0xd5, 0xa6, 0x12, 0xb5, 0xd3, 0x6c, 0xb5, 0x83, 0x77, 0x4a, 0xcd, 0xcb,
	0x50, 0x6b, 0xfc, 0x64, 0x90, 0x16, 0x5a, 0xf8, 0xdc, 0x35, 0x6e, 0xb6, 0x89, 0xbc, 0x0c, 0x54,
	0xef, 0x1d, 0x36, 0x0b, 0xcb, 0x2c, 0x72, 0xbc, 0xc8, 0x78, 0x5f, 0x2a, 0xa8, 0x7e, 0xb5, 0xff,
	0x47, 0x54, 0xa3, 0xe6, 0x3d, 0xb5, 0x4a, 0xac, 0x47, 0xc0, 0xe9, 0x52, 0xcd, 0x48, 0x5d, 0x86,
	0x5e, 0x06, 0xbb, 0xa0, 0xf6, 0x85, 0xd2, 0x7e, 0x68, 0x6b, 0x46, 0xe4, 0x3c, 0xcc, 0xca, 0x1d,
	0xa2, 0x7b, 0x57, 0xd9, 0x69, 0x50, 0x1f, 0xa5, 0x03, 0x6d, 0x28, 0xa1, 0xec, 0x51, 0x05, 0x96,
	0xf7, 0xd4, 0x32, 0x11, 0xd7, 0x62, 0x87, 0x92, 0xb9, 0x03, 0xfa, 0x51, 0x85, 0x5a, 0xcb, 0x2d,
	0x0e, 0xeb, 0xee, 0x24, 0x2f, 0x14, 0xb6, 0xe5, 0x21, 0xd5, 0x10, 0xb1, 0x1f, 0xdb, 0xba, 0x1b,
	0xe9, 0xcb, 0x8e, 0x8c, 0x6f, 0x71, 0x5d, 0x1a, 0xb9, 0x5f, 0xe6, 0xee, 0xb5, 0x94, 0xb0, 0x85,
	0xb7, 0x65, 0x3d, 0x2d, 0x73, 0xfb, 0x40, 0xaa, 0x19, 0xa1, 0x95, 0x28, 0xd3, 0x30, 0xc2, 0xeb,
	0xb6, 0x3f, 0x14, 0xa1, 0x03, 0x62, 0x74, 0xb5, 0x77, 0x83, 0x4d, 0x57, 0xf0, 0x78, 0x40, 0xb1,
	0x3f, 0xa1, 0x66, 0x89, 0xc5, 0xae, 0x0c, 0x30, 0xf2, 0x7f, 0xc2, 0xe6, 0x46, 0x81, 0xe8, 0xab,
	0x3c, 0xc7, 0x0c, 0xc5, 0xdf, 0xa3, 0x72, 0x64, 0x48, 0x08, 0x3c, 0x76, 0x13, 0xd9, 0xde, 0x2a,
	0x7b, 0x4b, 0x24, 0x98, 0x26, 0xe2, 0xf7, 0x4f, 0x91, 0x27, 0x32, 0x17, 0x42, 0xc1, 0x6d, 0xe8,
	0x3c, 0x52, 0xd2, 0x73, 0x06, 0x82, 0x6d, 0x0b, 0xa1, 0x56, 0x6b, 0x90, 0xf3, 0xd1, 0x05, 0x36,
	0xed, 0x3e, 0xf7, 0x86, 0x7a, 0x11, 0xbd, 0xc7, 0xff, 0x96, 0x62, 0x95, 0xa5, 0x77, 0xf5, 0x22,
	0xf8, 0x0e, 0x7e, 0x1e, 0x6a, 0x76, 0x80, 0x9e, 0x53, 0xf0, 0x69, 0xf6, 0x7f, 0x6e, 0xb1, 0x99,
	0xf1, 0xee, 0x4f, 0x4a, 0xdb, 0x30, 0xda, 0xfb, 0xb9, 0xc3, 0xbc, 0x63, 0x3a, 0x3f, 0x19, 0xad,
	0xea, 0x58, 0xdf, 0x07, 0x42, 0xea, 0x68, 0xd7, 0x27, 0x27, 0xa7, 0x1d, 0xe9, 0xf9, 0xfc, 0x73,
	0x8b, 0xcd, 0x56, 0xa7, 0x0e, 0xaa, 0x1f, 0x23, 0x72, 0x88, 0x32, 0x7e, 0x81, 0x49, 0xf0, 0x8b,
	0xd7, 0x11, 0xa8, 0xa8, 0x85, 0x10, 0x9c, 0x71, 0x76, 0x6d, 0xd4, 0x66, 0x81, 0x7b, 0xd5, 0x97,
	0x45, 0x2a, 0xb5, 0xa1, 0x50, 0x54, 0xd2, 0xa3, 0x5a, 0x77, 0x5f, 0xac, 0x4b, 0x6d, 0x30, 0x26,
	0x5d, 0x66, 0x93, 0x18, 0xfa, 0xa2, 0x7d, 0xae, 0xe5, 0x0b, 0xe1, 0xff, 0x31, 0xee, 0x15, 0xcb,
	0x7b, 0x2a, 0x88, 0xf6, 0x77, 0xe4, 0x0b, 0x01, 0xb7, 0x04, 0x20, 0xe8, 0x0d, 0x07, 0x40, 0x94,
	0xed, 0x31, 0xf4, 0x14, 0x3e, 0xde, 0x00, 0x0c, 0x9c, 0x01, 0x3d, 0x52, 0x6c, 0xf4, 0x13, 0x5f,
	0xdb, 0x33, 0x40, 0x2c, 0x57, 0x65, 0xf4, 0x13, 0xef, 0x1f, 0x5b, 0x6c, 0x26, 0xea, 0x27, 0x23,
	0xb5, 0x94, 0x79, 0xdd, 0xed, 0x87, 0xa8, 0x9f, 0x0c, 0x15, 0x51, 0x57, 0x58, 0xc7, 0xbe, 0x2a,
	0xd1, 0xc5, 0x40, 0x45, 0xc2, 0x1f, 0xd0, 0x93, 0x2e, 0x22, 0xee, 0x20, 0x8d, 0x5e, 0x44, 0x35,
	0xde, 0x8d, 0xd0, 0x69, 0xf1, 0xf7, 0xdd, 0x8b, 0xa8, 0xea, 0xc1, 0x08, 0x1d, 0x11, 0x48, 0x3f,
	0x46, 0x1f, 0x8a, 0x58, 0x91, 0x03, 0x14, 0x99, 0x0d, 0x87, 0x5e, 0x88, 0x58, 0xa9, 0x77, 0xd9,
	0xec, 0xd0, 0x28, 0xee, 0xd4, 0x1c, 0xda, 0xd6, 0x66, 0x3d, 0x8c, 0x3b, 0x3c, 0x4b, 0xec, 0xfc,
	0xe8, 0x38, 0x4e, 0xe8, 0xc8, 0xbe, 0xa1, 0x1a, 0x1a, 0xc8, 0xc9, 0x2d, 0xb0, 0xe9, 0x41, 0x19,
	0x73, 0xa1, 0xd4, 0x1e, 0x87, 0x48, 0xa7, 0x85, 0xf1, 0x5f, 0xd0, 0xd1, 0x18, 0x94, 0xf1, 0xaa,
	0x52, 0x7b, 0x9b, 0x44, 0x05, 0xcf, 0x80, 0xbc, 0xb5, 0x37, 0xe8, 0xdb, 0x26, 0xfc, 0x9f, 0x90,
	0x67, 0x64, 0x3a, 0x79, 0x38, 0xe8, 0x53, 0x07, 0x7e, 0x81, 0x4d, 0x13, 0x26, 0xe1, 0x91, 0x54,
	0xd1, 0x20, 0x0d, 0x95, 0xff, 0x1b, 0xd2, 0x86, 0xb0, 0x64, 0xd9, 0x52, 0x61, 0xb1, 0xf5, 0x91,
	0x86, 0x24, 0xd8, 0x2e, 0xc7, 0x6f, 0xe9, 0xb9, 0x1a, 0x11, 0xed, 0x32, 0xdc, 0x62, 0x33, 0xe0,
	0x07, 0xd8, 0x33, 0xed, 0x3b, 0xe0, 0x9f, 0x52, 0x44, 0x00, 0x46, 0x17, 0xe8, 0x16, 0xbb, 0xc0,
	0xa6, 0x09, 0xd6, 0x78, 0x93, 0xf7, 0x67, 0xf4, 0x6d, 0x06, 0xe9, 0xf5, 0xab, 0xbc, 0x39, 0x76,
	0x0a, 0xcb, 0x34, 0x01, 0xd7, 0xcb, 0x9f, 0xb7, 0x6c, 0x7a, 0x1e, 0x1e, 0x42, 0x8c, 0xa3, 0x7f,
	0x38, 0x30, 0xdc, 0xa7, 0xf1, 0x7f, 0x47, 0x98, 0xce, 0x50, 0x77, 0xc4, 0xbb, 0xca, 0x3a, 0xd1,
	0x40, 0x29, 0x91, 0x1b, 0xab, 0xea, 0x2f, 0x08, 0x36, 0x69, 0xa9, 0xa4, 0xee, 0x26, 0x9b, 0xa6,
	0x44, 0x83, 0xb2, 0x09, 0x90, 0xf6, 0x7f, 0xdf, 0xb2, 0xe9, 0x1c, 0x30, 0x30, 0x95, 0x00, 0xb2,
	0xf7, 0x0e, 0x3b, 0xd3, 0x80, 0x52, 0x1f, 0x5e, 0xc4, 0xfe, 0x1f, 0x08, 0x3d, 0x53, 0xa1, 0xbb,
	0x96, 0xe3, 0x5d, 0x63, 0xa4, 0x02, 0xab, 0xce, 0x58, 0x15, 0xa5, 0xff, 0x97, 0xd6, 0x04, 0x24,
	0x6f, 0x84, 0x87, 0x2b, 0xaa, 0x28, 0x6b, 0x13, 0xe0, 0xdc, 0xc0, 0x4e, 0x17, 0xca, 0xff, 0xab,
	0xa6, 0x09, 0x6b, 0xb9, 0x36, 0xab, 0x40, 0xf6, 0xfe, 0xae, 0xc5, 0xda, 0xee, 0x74, 0xf9, 0x7f,
	0xdd, 0x7a, 0x7d, 0xc9, 0x59, 0xa5, 0x20, 0xa8, 0xec, 0xe9, 0x9d, 0xc0, 0x7f, 0xc3, 0xf5, 0xfe,
	0xff, 0x06, 0x00, 0x00, 0xff, 0xff, 0x7f, 0xc9, 0xea, 0xaa, 0xde, 0x35, 0x00, 0x00,
}
