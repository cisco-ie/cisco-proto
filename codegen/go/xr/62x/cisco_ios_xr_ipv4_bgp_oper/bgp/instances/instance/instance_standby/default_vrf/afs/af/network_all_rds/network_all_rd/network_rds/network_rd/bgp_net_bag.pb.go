/*
Copyright 2019 Cisco Systems

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: bgp_net_bag.proto

package cisco_ios_xr_ipv4_bgp_oper_bgp_instances_instance_instance_standby_default_vrf_afs_af_network_all_rds_network_all_rd_network_rds_network_rd

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type BgpNetBag_KEYS struct {
	InstanceName         string   `protobuf:"bytes,1,opt,name=instance_name,json=instanceName,proto3" json:"instance_name,omitempty"`
	AfName               string   `protobuf:"bytes,2,opt,name=af_name,json=afName,proto3" json:"af_name,omitempty"`
	NetworkAddr          string   `protobuf:"bytes,3,opt,name=network_addr,json=networkAddr,proto3" json:"network_addr,omitempty"`
	NetworkPrefix        string   `protobuf:"bytes,4,opt,name=network_prefix,json=networkPrefix,proto3" json:"network_prefix,omitempty"`
	Rd                   string   `protobuf:"bytes,5,opt,name=rd,proto3" json:"rd,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BgpNetBag_KEYS) Reset()         { *m = BgpNetBag_KEYS{} }
func (m *BgpNetBag_KEYS) String() string { return proto.CompactTextString(m) }
func (*BgpNetBag_KEYS) ProtoMessage()    {}
func (*BgpNetBag_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_b328b6ce06ea8a38, []int{0}
}

func (m *BgpNetBag_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BgpNetBag_KEYS.Unmarshal(m, b)
}
func (m *BgpNetBag_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BgpNetBag_KEYS.Marshal(b, m, deterministic)
}
func (m *BgpNetBag_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpNetBag_KEYS.Merge(m, src)
}
func (m *BgpNetBag_KEYS) XXX_Size() int {
	return xxx_messageInfo_BgpNetBag_KEYS.Size(m)
}
func (m *BgpNetBag_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpNetBag_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_BgpNetBag_KEYS proto.InternalMessageInfo

func (m *BgpNetBag_KEYS) GetInstanceName() string {
	if m != nil {
		return m.InstanceName
	}
	return ""
}

func (m *BgpNetBag_KEYS) GetAfName() string {
	if m != nil {
		return m.AfName
	}
	return ""
}

func (m *BgpNetBag_KEYS) GetNetworkAddr() string {
	if m != nil {
		return m.NetworkAddr
	}
	return ""
}

func (m *BgpNetBag_KEYS) GetNetworkPrefix() string {
	if m != nil {
		return m.NetworkPrefix
	}
	return ""
}

func (m *BgpNetBag_KEYS) GetRd() string {
	if m != nil {
		return m.Rd
	}
	return ""
}

type BgpL2VpnAddrT struct {
	L2VpnAddress         []uint32 `protobuf:"varint,1,rep,packed,name=l2vpn_address,json=l2vpnAddress,proto3" json:"l2vpn_address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BgpL2VpnAddrT) Reset()         { *m = BgpL2VpnAddrT{} }
func (m *BgpL2VpnAddrT) String() string { return proto.CompactTextString(m) }
func (*BgpL2VpnAddrT) ProtoMessage()    {}
func (*BgpL2VpnAddrT) Descriptor() ([]byte, []int) {
	return fileDescriptor_b328b6ce06ea8a38, []int{1}
}

func (m *BgpL2VpnAddrT) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BgpL2VpnAddrT.Unmarshal(m, b)
}
func (m *BgpL2VpnAddrT) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BgpL2VpnAddrT.Marshal(b, m, deterministic)
}
func (m *BgpL2VpnAddrT) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpL2VpnAddrT.Merge(m, src)
}
func (m *BgpL2VpnAddrT) XXX_Size() int {
	return xxx_messageInfo_BgpL2VpnAddrT.Size(m)
}
func (m *BgpL2VpnAddrT) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpL2VpnAddrT.DiscardUnknown(m)
}

var xxx_messageInfo_BgpL2VpnAddrT proto.InternalMessageInfo

func (m *BgpL2VpnAddrT) GetL2VpnAddress() []uint32 {
	if m != nil {
		return m.L2VpnAddress
	}
	return nil
}

type BgpL2VpnMspwAddrT struct {
	L2VpnAddress         []uint32 `protobuf:"varint,1,rep,packed,name=l2vpn_address,json=l2vpnAddress,proto3" json:"l2vpn_address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BgpL2VpnMspwAddrT) Reset()         { *m = BgpL2VpnMspwAddrT{} }
func (m *BgpL2VpnMspwAddrT) String() string { return proto.CompactTextString(m) }
func (*BgpL2VpnMspwAddrT) ProtoMessage()    {}
func (*BgpL2VpnMspwAddrT) Descriptor() ([]byte, []int) {
	return fileDescriptor_b328b6ce06ea8a38, []int{2}
}

func (m *BgpL2VpnMspwAddrT) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BgpL2VpnMspwAddrT.Unmarshal(m, b)
}
func (m *BgpL2VpnMspwAddrT) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BgpL2VpnMspwAddrT.Marshal(b, m, deterministic)
}
func (m *BgpL2VpnMspwAddrT) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpL2VpnMspwAddrT.Merge(m, src)
}
func (m *BgpL2VpnMspwAddrT) XXX_Size() int {
	return xxx_messageInfo_BgpL2VpnMspwAddrT.Size(m)
}
func (m *BgpL2VpnMspwAddrT) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpL2VpnMspwAddrT.DiscardUnknown(m)
}

var xxx_messageInfo_BgpL2VpnMspwAddrT proto.InternalMessageInfo

func (m *BgpL2VpnMspwAddrT) GetL2VpnAddress() []uint32 {
	if m != nil {
		return m.L2VpnAddress
	}
	return nil
}

type BgpIpv4SrpolicyAddrT struct {
	Ipv4SrpolicyAddress  []uint32 `protobuf:"varint,1,rep,packed,name=ipv4_srpolicy_address,json=ipv4SrpolicyAddress,proto3" json:"ipv4_srpolicy_address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BgpIpv4SrpolicyAddrT) Reset()         { *m = BgpIpv4SrpolicyAddrT{} }
func (m *BgpIpv4SrpolicyAddrT) String() string { return proto.CompactTextString(m) }
func (*BgpIpv4SrpolicyAddrT) ProtoMessage()    {}
func (*BgpIpv4SrpolicyAddrT) Descriptor() ([]byte, []int) {
	return fileDescriptor_b328b6ce06ea8a38, []int{3}
}

func (m *BgpIpv4SrpolicyAddrT) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BgpIpv4SrpolicyAddrT.Unmarshal(m, b)
}
func (m *BgpIpv4SrpolicyAddrT) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BgpIpv4SrpolicyAddrT.Marshal(b, m, deterministic)
}
func (m *BgpIpv4SrpolicyAddrT) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpIpv4SrpolicyAddrT.Merge(m, src)
}
func (m *BgpIpv4SrpolicyAddrT) XXX_Size() int {
	return xxx_messageInfo_BgpIpv4SrpolicyAddrT.Size(m)
}
func (m *BgpIpv4SrpolicyAddrT) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpIpv4SrpolicyAddrT.DiscardUnknown(m)
}

var xxx_messageInfo_BgpIpv4SrpolicyAddrT proto.InternalMessageInfo

func (m *BgpIpv4SrpolicyAddrT) GetIpv4SrpolicyAddress() []uint32 {
	if m != nil {
		return m.Ipv4SrpolicyAddress
	}
	return nil
}

type BgpIpv6SrpolicyAddrT struct {
	Ipv6SrpolicyAddress  []uint32 `protobuf:"varint,1,rep,packed,name=ipv6_srpolicy_address,json=ipv6SrpolicyAddress,proto3" json:"ipv6_srpolicy_address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BgpIpv6SrpolicyAddrT) Reset()         { *m = BgpIpv6SrpolicyAddrT{} }
func (m *BgpIpv6SrpolicyAddrT) String() string { return proto.CompactTextString(m) }
func (*BgpIpv6SrpolicyAddrT) ProtoMessage()    {}
func (*BgpIpv6SrpolicyAddrT) Descriptor() ([]byte, []int) {
	return fileDescriptor_b328b6ce06ea8a38, []int{4}
}

func (m *BgpIpv6SrpolicyAddrT) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BgpIpv6SrpolicyAddrT.Unmarshal(m, b)
}
func (m *BgpIpv6SrpolicyAddrT) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BgpIpv6SrpolicyAddrT.Marshal(b, m, deterministic)
}
func (m *BgpIpv6SrpolicyAddrT) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpIpv6SrpolicyAddrT.Merge(m, src)
}
func (m *BgpIpv6SrpolicyAddrT) XXX_Size() int {
	return xxx_messageInfo_BgpIpv6SrpolicyAddrT.Size(m)
}
func (m *BgpIpv6SrpolicyAddrT) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpIpv6SrpolicyAddrT.DiscardUnknown(m)
}

var xxx_messageInfo_BgpIpv6SrpolicyAddrT proto.InternalMessageInfo

func (m *BgpIpv6SrpolicyAddrT) GetIpv6SrpolicyAddress() []uint32 {
	if m != nil {
		return m.Ipv6SrpolicyAddress
	}
	return nil
}

type BgpAddrtype struct {
	Afi                    string                `protobuf:"bytes,1,opt,name=afi,proto3" json:"afi,omitempty"`
	Ipv4Address            string                `protobuf:"bytes,2,opt,name=ipv4_address,json=ipv4Address,proto3" json:"ipv4_address,omitempty"`
	Ipv4McastAddress       string                `protobuf:"bytes,3,opt,name=ipv4_mcast_address,json=ipv4McastAddress,proto3" json:"ipv4_mcast_address,omitempty"`
	Ipv4LabelAddress       string                `protobuf:"bytes,4,opt,name=ipv4_label_address,json=ipv4LabelAddress,proto3" json:"ipv4_label_address,omitempty"`
	Ipv4TunnelAddress      string                `protobuf:"bytes,5,opt,name=ipv4_tunnel_address,json=ipv4TunnelAddress,proto3" json:"ipv4_tunnel_address,omitempty"`
	Ipv4MdtAddress         string                `protobuf:"bytes,6,opt,name=ipv4mdt_address,json=ipv4mdtAddress,proto3" json:"ipv4mdt_address,omitempty"`
	Ipv4VpnAddress         string                `protobuf:"bytes,7,opt,name=ipv4vpn_address,json=ipv4vpnAddress,proto3" json:"ipv4vpn_address,omitempty"`
	Ipv4VpnaMcastddress    string                `protobuf:"bytes,8,opt,name=ipv4vpna_mcastddress,json=ipv4vpnaMcastddress,proto3" json:"ipv4vpna_mcastddress,omitempty"`
	Ipv6Address            string                `protobuf:"bytes,9,opt,name=ipv6_address,json=ipv6Address,proto3" json:"ipv6_address,omitempty"`
	Ipv6McastAddress       string                `protobuf:"bytes,10,opt,name=ipv6_mcast_address,json=ipv6McastAddress,proto3" json:"ipv6_mcast_address,omitempty"`
	Ipv6LabelAddress       string                `protobuf:"bytes,11,opt,name=ipv6_label_address,json=ipv6LabelAddress,proto3" json:"ipv6_label_address,omitempty"`
	Ipv6VpnAddress         string                `protobuf:"bytes,12,opt,name=ipv6vpn_address,json=ipv6vpnAddress,proto3" json:"ipv6vpn_address,omitempty"`
	Ipv6VpnMcastAddress    string                `protobuf:"bytes,13,opt,name=ipv6vpn_mcast_address,json=ipv6vpnMcastAddress,proto3" json:"ipv6vpn_mcast_address,omitempty"`
	L2VpnvplsAddress       *BgpL2VpnAddrT        `protobuf:"bytes,14,opt,name=l2vpnvpls_address,json=l2vpnvplsAddress,proto3" json:"l2vpnvpls_address,omitempty"`
	RtConstraintAddress    string                `protobuf:"bytes,15,opt,name=rt_constraint_address,json=rtConstraintAddress,proto3" json:"rt_constraint_address,omitempty"`
	Ipv6MvpnAddress        string                `protobuf:"bytes,16,opt,name=ipv6mvpn_address,json=ipv6mvpnAddress,proto3" json:"ipv6mvpn_address,omitempty"`
	Ipv4MvpnAddress        string                `protobuf:"bytes,17,opt,name=ipv4mvpn_address,json=ipv4mvpnAddress,proto3" json:"ipv4mvpn_address,omitempty"`
	L2VpnEvpnAddress       string                `protobuf:"bytes,18,opt,name=l2vpn_evpn_address,json=l2vpnEvpnAddress,proto3" json:"l2vpn_evpn_address,omitempty"`
	LsLsAddress            string                `protobuf:"bytes,19,opt,name=ls_ls_address,json=lsLsAddress,proto3" json:"ls_ls_address,omitempty"`
	L2VpnMspwAddress       *BgpL2VpnMspwAddrT    `protobuf:"bytes,20,opt,name=l2vpn_mspw_address,json=l2vpnMspwAddress,proto3" json:"l2vpn_mspw_address,omitempty"`
	Ipv4FlowspecAddress    string                `protobuf:"bytes,21,opt,name=ipv4_flowspec_address,json=ipv4FlowspecAddress,proto3" json:"ipv4_flowspec_address,omitempty"`
	Ipv6FlowspecAddress    string                `protobuf:"bytes,22,opt,name=ipv6_flowspec_address,json=ipv6FlowspecAddress,proto3" json:"ipv6_flowspec_address,omitempty"`
	Ipv4VpnFlowspecAddress string                `protobuf:"bytes,23,opt,name=ipv4vpn_flowspec_address,json=ipv4vpnFlowspecAddress,proto3" json:"ipv4vpn_flowspec_address,omitempty"`
	Ipv6VpnFlowspecAddress string                `protobuf:"bytes,24,opt,name=ipv6vpn_flowspec_address,json=ipv6vpnFlowspecAddress,proto3" json:"ipv6vpn_flowspec_address,omitempty"`
	Ipv4SrPolicyAddress    *BgpIpv4SrpolicyAddrT `protobuf:"bytes,25,opt,name=ipv4sr_policy_address,json=ipv4srPolicyAddress,proto3" json:"ipv4sr_policy_address,omitempty"`
	Ipv6SrPolicyAddress    *BgpIpv6SrpolicyAddrT `protobuf:"bytes,26,opt,name=ipv6sr_policy_address,json=ipv6srPolicyAddress,proto3" json:"ipv6sr_policy_address,omitempty"`
	XXX_NoUnkeyedLiteral   struct{}              `json:"-"`
	XXX_unrecognized       []byte                `json:"-"`
	XXX_sizecache          int32                 `json:"-"`
}

func (m *BgpAddrtype) Reset()         { *m = BgpAddrtype{} }
func (m *BgpAddrtype) String() string { return proto.CompactTextString(m) }
func (*BgpAddrtype) ProtoMessage()    {}
func (*BgpAddrtype) Descriptor() ([]byte, []int) {
	return fileDescriptor_b328b6ce06ea8a38, []int{5}
}

func (m *BgpAddrtype) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BgpAddrtype.Unmarshal(m, b)
}
func (m *BgpAddrtype) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BgpAddrtype.Marshal(b, m, deterministic)
}
func (m *BgpAddrtype) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpAddrtype.Merge(m, src)
}
func (m *BgpAddrtype) XXX_Size() int {
	return xxx_messageInfo_BgpAddrtype.Size(m)
}
func (m *BgpAddrtype) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpAddrtype.DiscardUnknown(m)
}

var xxx_messageInfo_BgpAddrtype proto.InternalMessageInfo

func (m *BgpAddrtype) GetAfi() string {
	if m != nil {
		return m.Afi
	}
	return ""
}

func (m *BgpAddrtype) GetIpv4Address() string {
	if m != nil {
		return m.Ipv4Address
	}
	return ""
}

func (m *BgpAddrtype) GetIpv4McastAddress() string {
	if m != nil {
		return m.Ipv4McastAddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv4LabelAddress() string {
	if m != nil {
		return m.Ipv4LabelAddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv4TunnelAddress() string {
	if m != nil {
		return m.Ipv4TunnelAddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv4MdtAddress() string {
	if m != nil {
		return m.Ipv4MdtAddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv4VpnAddress() string {
	if m != nil {
		return m.Ipv4VpnAddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv4VpnaMcastddress() string {
	if m != nil {
		return m.Ipv4VpnaMcastddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv6Address() string {
	if m != nil {
		return m.Ipv6Address
	}
	return ""
}

func (m *BgpAddrtype) GetIpv6McastAddress() string {
	if m != nil {
		return m.Ipv6McastAddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv6LabelAddress() string {
	if m != nil {
		return m.Ipv6LabelAddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv6VpnAddress() string {
	if m != nil {
		return m.Ipv6VpnAddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv6VpnMcastAddress() string {
	if m != nil {
		return m.Ipv6VpnMcastAddress
	}
	return ""
}

func (m *BgpAddrtype) GetL2VpnvplsAddress() *BgpL2VpnAddrT {
	if m != nil {
		return m.L2VpnvplsAddress
	}
	return nil
}

func (m *BgpAddrtype) GetRtConstraintAddress() string {
	if m != nil {
		return m.RtConstraintAddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv6MvpnAddress() string {
	if m != nil {
		return m.Ipv6MvpnAddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv4MvpnAddress() string {
	if m != nil {
		return m.Ipv4MvpnAddress
	}
	return ""
}

func (m *BgpAddrtype) GetL2VpnEvpnAddress() string {
	if m != nil {
		return m.L2VpnEvpnAddress
	}
	return ""
}

func (m *BgpAddrtype) GetLsLsAddress() string {
	if m != nil {
		return m.LsLsAddress
	}
	return ""
}

func (m *BgpAddrtype) GetL2VpnMspwAddress() *BgpL2VpnMspwAddrT {
	if m != nil {
		return m.L2VpnMspwAddress
	}
	return nil
}

func (m *BgpAddrtype) GetIpv4FlowspecAddress() string {
	if m != nil {
		return m.Ipv4FlowspecAddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv6FlowspecAddress() string {
	if m != nil {
		return m.Ipv6FlowspecAddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv4VpnFlowspecAddress() string {
	if m != nil {
		return m.Ipv4VpnFlowspecAddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv6VpnFlowspecAddress() string {
	if m != nil {
		return m.Ipv6VpnFlowspecAddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv4SrPolicyAddress() *BgpIpv4SrpolicyAddrT {
	if m != nil {
		return m.Ipv4SrPolicyAddress
	}
	return nil
}

func (m *BgpAddrtype) GetIpv6SrPolicyAddress() *BgpIpv6SrpolicyAddrT {
	if m != nil {
		return m.Ipv6SrPolicyAddress
	}
	return nil
}

type BgpPrefixtype struct {
	Prefix               *BgpAddrtype `protobuf:"bytes,1,opt,name=prefix,proto3" json:"prefix,omitempty"`
	PrefixLength         uint32       `protobuf:"varint,2,opt,name=prefix_length,json=prefixLength,proto3" json:"prefix_length,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *BgpPrefixtype) Reset()         { *m = BgpPrefixtype{} }
func (m *BgpPrefixtype) String() string { return proto.CompactTextString(m) }
func (*BgpPrefixtype) ProtoMessage()    {}
func (*BgpPrefixtype) Descriptor() ([]byte, []int) {
	return fileDescriptor_b328b6ce06ea8a38, []int{6}
}

func (m *BgpPrefixtype) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BgpPrefixtype.Unmarshal(m, b)
}
func (m *BgpPrefixtype) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BgpPrefixtype.Marshal(b, m, deterministic)
}
func (m *BgpPrefixtype) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpPrefixtype.Merge(m, src)
}
func (m *BgpPrefixtype) XXX_Size() int {
	return xxx_messageInfo_BgpPrefixtype.Size(m)
}
func (m *BgpPrefixtype) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpPrefixtype.DiscardUnknown(m)
}

var xxx_messageInfo_BgpPrefixtype proto.InternalMessageInfo

func (m *BgpPrefixtype) GetPrefix() *BgpAddrtype {
	if m != nil {
		return m.Prefix
	}
	return nil
}

func (m *BgpPrefixtype) GetPrefixLength() uint32 {
	if m != nil {
		return m.PrefixLength
	}
	return 0
}

type BgpAdvinfoType_ struct {
	IsNeighbor           bool         `protobuf:"varint,1,opt,name=is_neighbor,json=isNeighbor,proto3" json:"is_neighbor,omitempty"`
	NeighborAddress      *BgpAddrtype `protobuf:"bytes,2,opt,name=neighbor_address,json=neighborAddress,proto3" json:"neighbor_address,omitempty"`
	UpdateGroupNumber    uint32       `protobuf:"varint,3,opt,name=update_group_number,json=updateGroupNumber,proto3" json:"update_group_number,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *BgpAdvinfoType_) Reset()         { *m = BgpAdvinfoType_{} }
func (m *BgpAdvinfoType_) String() string { return proto.CompactTextString(m) }
func (*BgpAdvinfoType_) ProtoMessage()    {}
func (*BgpAdvinfoType_) Descriptor() ([]byte, []int) {
	return fileDescriptor_b328b6ce06ea8a38, []int{7}
}

func (m *BgpAdvinfoType_) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BgpAdvinfoType_.Unmarshal(m, b)
}
func (m *BgpAdvinfoType_) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BgpAdvinfoType_.Marshal(b, m, deterministic)
}
func (m *BgpAdvinfoType_) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpAdvinfoType_.Merge(m, src)
}
func (m *BgpAdvinfoType_) XXX_Size() int {
	return xxx_messageInfo_BgpAdvinfoType_.Size(m)
}
func (m *BgpAdvinfoType_) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpAdvinfoType_.DiscardUnknown(m)
}

var xxx_messageInfo_BgpAdvinfoType_ proto.InternalMessageInfo

func (m *BgpAdvinfoType_) GetIsNeighbor() bool {
	if m != nil {
		return m.IsNeighbor
	}
	return false
}

func (m *BgpAdvinfoType_) GetNeighborAddress() *BgpAddrtype {
	if m != nil {
		return m.NeighborAddress
	}
	return nil
}

func (m *BgpAdvinfoType_) GetUpdateGroupNumber() uint32 {
	if m != nil {
		return m.UpdateGroupNumber
	}
	return 0
}

type BgpTeTunnel struct {
	TunnelType           string   `protobuf:"bytes,1,opt,name=tunnel_type,json=tunnelType,proto3" json:"tunnel_type,omitempty"`
	TunnelName           []uint32 `protobuf:"varint,2,rep,packed,name=tunnel_name,json=tunnelName,proto3" json:"tunnel_name,omitempty"`
	HasTunnel            bool     `protobuf:"varint,3,opt,name=has_tunnel,json=hasTunnel,proto3" json:"has_tunnel,omitempty"`
	IsTunnelUp           bool     `protobuf:"varint,4,opt,name=is_tunnel_up,json=isTunnelUp,proto3" json:"is_tunnel_up,omitempty"`
	IsTunnelInfoStale    bool     `protobuf:"varint,5,opt,name=is_tunnel_info_stale,json=isTunnelInfoStale,proto3" json:"is_tunnel_info_stale,omitempty"`
	IsTunnelRegistered   bool     `protobuf:"varint,6,opt,name=is_tunnel_registered,json=isTunnelRegistered,proto3" json:"is_tunnel_registered,omitempty"`
	TunnelV6Required     bool     `protobuf:"varint,7,opt,name=tunnel_v6_required,json=tunnelV6Required,proto3" json:"tunnel_v6_required,omitempty"`
	TunnelV6Enabled      bool     `protobuf:"varint,8,opt,name=tunnel_v6_enabled,json=tunnelV6Enabled,proto3" json:"tunnel_v6_enabled,omitempty"`
	BindingLabel         uint32   `protobuf:"varint,9,opt,name=binding_label,json=bindingLabel,proto3" json:"binding_label,omitempty"`
	TunnelIfHandle       uint32   `protobuf:"varint,10,opt,name=tunnel_if_handle,json=tunnelIfHandle,proto3" json:"tunnel_if_handle,omitempty"`
	LastTunnelUpdate     uint32   `protobuf:"varint,11,opt,name=last_tunnel_update,json=lastTunnelUpdate,proto3" json:"last_tunnel_update,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BgpTeTunnel) Reset()         { *m = BgpTeTunnel{} }
func (m *BgpTeTunnel) String() string { return proto.CompactTextString(m) }
func (*BgpTeTunnel) ProtoMessage()    {}
func (*BgpTeTunnel) Descriptor() ([]byte, []int) {
	return fileDescriptor_b328b6ce06ea8a38, []int{8}
}

func (m *BgpTeTunnel) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BgpTeTunnel.Unmarshal(m, b)
}
func (m *BgpTeTunnel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BgpTeTunnel.Marshal(b, m, deterministic)
}
func (m *BgpTeTunnel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpTeTunnel.Merge(m, src)
}
func (m *BgpTeTunnel) XXX_Size() int {
	return xxx_messageInfo_BgpTeTunnel.Size(m)
}
func (m *BgpTeTunnel) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpTeTunnel.DiscardUnknown(m)
}

var xxx_messageInfo_BgpTeTunnel proto.InternalMessageInfo

func (m *BgpTeTunnel) GetTunnelType() string {
	if m != nil {
		return m.TunnelType
	}
	return ""
}

func (m *BgpTeTunnel) GetTunnelName() []uint32 {
	if m != nil {
		return m.TunnelName
	}
	return nil
}

func (m *BgpTeTunnel) GetHasTunnel() bool {
	if m != nil {
		return m.HasTunnel
	}
	return false
}

func (m *BgpTeTunnel) GetIsTunnelUp() bool {
	if m != nil {
		return m.IsTunnelUp
	}
	return false
}

func (m *BgpTeTunnel) GetIsTunnelInfoStale() bool {
	if m != nil {
		return m.IsTunnelInfoStale
	}
	return false
}

func (m *BgpTeTunnel) GetIsTunnelRegistered() bool {
	if m != nil {
		return m.IsTunnelRegistered
	}
	return false
}

func (m *BgpTeTunnel) GetTunnelV6Required() bool {
	if m != nil {
		return m.TunnelV6Required
	}
	return false
}

func (m *BgpTeTunnel) GetTunnelV6Enabled() bool {
	if m != nil {
		return m.TunnelV6Enabled
	}
	return false
}

func (m *BgpTeTunnel) GetBindingLabel() uint32 {
	if m != nil {
		return m.BindingLabel
	}
	return 0
}

func (m *BgpTeTunnel) GetTunnelIfHandle() uint32 {
	if m != nil {
		return m.TunnelIfHandle
	}
	return 0
}

func (m *BgpTeTunnel) GetLastTunnelUpdate() uint32 {
	if m != nil {
		return m.LastTunnelUpdate
	}
	return 0
}

type BgpL2VpnEvpnEsiT struct {
	Esi                  []uint32 `protobuf:"varint,1,rep,packed,name=esi,proto3" json:"esi,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BgpL2VpnEvpnEsiT) Reset()         { *m = BgpL2VpnEvpnEsiT{} }
func (m *BgpL2VpnEvpnEsiT) String() string { return proto.CompactTextString(m) }
func (*BgpL2VpnEvpnEsiT) ProtoMessage()    {}
func (*BgpL2VpnEvpnEsiT) Descriptor() ([]byte, []int) {
	return fileDescriptor_b328b6ce06ea8a38, []int{9}
}

func (m *BgpL2VpnEvpnEsiT) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BgpL2VpnEvpnEsiT.Unmarshal(m, b)
}
func (m *BgpL2VpnEvpnEsiT) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BgpL2VpnEvpnEsiT.Marshal(b, m, deterministic)
}
func (m *BgpL2VpnEvpnEsiT) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpL2VpnEvpnEsiT.Merge(m, src)
}
func (m *BgpL2VpnEvpnEsiT) XXX_Size() int {
	return xxx_messageInfo_BgpL2VpnEvpnEsiT.Size(m)
}
func (m *BgpL2VpnEvpnEsiT) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpL2VpnEvpnEsiT.DiscardUnknown(m)
}

var xxx_messageInfo_BgpL2VpnEvpnEsiT proto.InternalMessageInfo

func (m *BgpL2VpnEvpnEsiT) GetEsi() []uint32 {
	if m != nil {
		return m.Esi
	}
	return nil
}

type BgpV4V6T struct {
	Len                  string   `protobuf:"bytes,1,opt,name=len,proto3" json:"len,omitempty"`
	Ipv4Address          string   `protobuf:"bytes,2,opt,name=ipv4_address,json=ipv4Address,proto3" json:"ipv4_address,omitempty"`
	Ipv6Address          string   `protobuf:"bytes,3,opt,name=ipv6_address,json=ipv6Address,proto3" json:"ipv6_address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BgpV4V6T) Reset()         { *m = BgpV4V6T{} }
func (m *BgpV4V6T) String() string { return proto.CompactTextString(m) }
func (*BgpV4V6T) ProtoMessage()    {}
func (*BgpV4V6T) Descriptor() ([]byte, []int) {
	return fileDescriptor_b328b6ce06ea8a38, []int{10}
}

func (m *BgpV4V6T) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BgpV4V6T.Unmarshal(m, b)
}
func (m *BgpV4V6T) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BgpV4V6T.Marshal(b, m, deterministic)
}
func (m *BgpV4V6T) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpV4V6T.Merge(m, src)
}
func (m *BgpV4V6T) XXX_Size() int {
	return xxx_messageInfo_BgpV4V6T.Size(m)
}
func (m *BgpV4V6T) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpV4V6T.DiscardUnknown(m)
}

var xxx_messageInfo_BgpV4V6T proto.InternalMessageInfo

func (m *BgpV4V6T) GetLen() string {
	if m != nil {
		return m.Len
	}
	return ""
}

func (m *BgpV4V6T) GetIpv4Address() string {
	if m != nil {
		return m.Ipv4Address
	}
	return ""
}

func (m *BgpV4V6T) GetIpv6Address() string {
	if m != nil {
		return m.Ipv6Address
	}
	return ""
}

type BgpPath_ struct {
	BgpPrefix                      *BgpPrefixtype     `protobuf:"bytes,1,opt,name=bgp_prefix,json=bgpPrefix,proto3" json:"bgp_prefix,omitempty"`
	NeighborAddress                *BgpAddrtype       `protobuf:"bytes,2,opt,name=neighbor_address,json=neighborAddress,proto3" json:"neighbor_address,omitempty"`
	RouteType                      string             `protobuf:"bytes,3,opt,name=route_type,json=routeType,proto3" json:"route_type,omitempty"`
	IsPathValid                    bool               `protobuf:"varint,4,opt,name=is_path_valid,json=isPathValid,proto3" json:"is_path_valid,omitempty"`
	IsPathDamped                   bool               `protobuf:"varint,5,opt,name=is_path_damped,json=isPathDamped,proto3" json:"is_path_damped,omitempty"`
	IsPathHistoryHeld              bool               `protobuf:"varint,6,opt,name=is_path_history_held,json=isPathHistoryHeld,proto3" json:"is_path_history_held,omitempty"`
	IsInternalPath                 bool               `protobuf:"varint,7,opt,name=is_internal_path,json=isInternalPath,proto3" json:"is_internal_path,omitempty"`
	IsBestPath                     bool               `protobuf:"varint,8,opt,name=is_best_path,json=isBestPath,proto3" json:"is_best_path,omitempty"`
	IsAsBest                       bool               `protobuf:"varint,9,opt,name=is_as_best,json=isAsBest,proto3" json:"is_as_best,omitempty"`
	IsSpkrAsBest                   bool               `protobuf:"varint,10,opt,name=is_spkr_as_best,json=isSpkrAsBest,proto3" json:"is_spkr_as_best,omitempty"`
	IsPartialBest                  bool               `protobuf:"varint,11,opt,name=is_partial_best,json=isPartialBest,proto3" json:"is_partial_best,omitempty"`
	IsAggregationSuppressed        bool               `protobuf:"varint,12,opt,name=is_aggregation_suppressed,json=isAggregationSuppressed,proto3" json:"is_aggregation_suppressed,omitempty"`
	IsImportDampened               bool               `protobuf:"varint,13,opt,name=is_import_dampened,json=isImportDampened,proto3" json:"is_import_dampened,omitempty"`
	IsImportSuspect                bool               `protobuf:"varint,14,opt,name=is_import_suspect,json=isImportSuspect,proto3" json:"is_import_suspect,omitempty"`
	IsPathNotAdvertised            bool               `protobuf:"varint,15,opt,name=is_path_not_advertised,json=isPathNotAdvertised,proto3" json:"is_path_not_advertised,omitempty"`
	IsPathNotAdvertisedToEbgPs     bool               `protobuf:"varint,16,opt,name=is_path_not_advertised_to_ebg_ps,json=isPathNotAdvertisedToEbgPs,proto3" json:"is_path_not_advertised_to_ebg_ps,omitempty"`
	IsPathAdvertisedLocalAsOnly    bool               `protobuf:"varint,17,opt,name=is_path_advertised_local_as_only,json=isPathAdvertisedLocalAsOnly,proto3" json:"is_path_advertised_local_as_only,omitempty"`
	IsPathFromRouteReflector       bool               `protobuf:"varint,18,opt,name=is_path_from_route_reflector,json=isPathFromRouteReflector,proto3" json:"is_path_from_route_reflector,omitempty"`
	IsPathReceivedOnly             bool               `protobuf:"varint,19,opt,name=is_path_received_only,json=isPathReceivedOnly,proto3" json:"is_path_received_only,omitempty"`
	IsReceivedPathNotModified      bool               `protobuf:"varint,20,opt,name=is_received_path_not_modified,json=isReceivedPathNotModified,proto3" json:"is_received_path_not_modified,omitempty"`
	IsPathLocallySourced           bool               `protobuf:"varint,21,opt,name=is_path_locally_sourced,json=isPathLocallySourced,proto3" json:"is_path_locally_sourced,omitempty"`
	IsPathLocalAggregate           bool               `protobuf:"varint,22,opt,name=is_path_local_aggregate,json=isPathLocalAggregate,proto3" json:"is_path_local_aggregate,omitempty"`
	IsPathFromNetworkCommand       bool               `protobuf:"varint,23,opt,name=is_path_from_network_command,json=isPathFromNetworkCommand,proto3" json:"is_path_from_network_command,omitempty"`
	IsPathFromRedistributeCommand  bool               `protobuf:"varint,24,opt,name=is_path_from_redistribute_command,json=isPathFromRedistributeCommand,proto3" json:"is_path_from_redistribute_command,omitempty"`
	IsPathImported                 bool               `protobuf:"varint,25,opt,name=is_path_imported,json=isPathImported,proto3" json:"is_path_imported,omitempty"`
	IsPathReoriginated             bool               `protobuf:"varint,26,opt,name=is_path_reoriginated,json=isPathReoriginated,proto3" json:"is_path_reoriginated,omitempty"`
	IsPathReoriginatedStitching    bool               `protobuf:"varint,27,opt,name=is_path_reoriginated_stitching,json=isPathReoriginatedStitching,proto3" json:"is_path_reoriginated_stitching,omitempty"`
	IsPathVpnOnly                  bool               `protobuf:"varint,28,opt,name=is_path_vpn_only,json=isPathVpnOnly,proto3" json:"is_path_vpn_only,omitempty"`
	IsPathFromConfederationPeer    bool               `protobuf:"varint,29,opt,name=is_path_from_confederation_peer,json=isPathFromConfederationPeer,proto3" json:"is_path_from_confederation_peer,omitempty"`
	IsPathSyncedWithIgp            bool               `protobuf:"varint,30,opt,name=is_path_synced_with_igp,json=isPathSyncedWithIgp,proto3" json:"is_path_synced_with_igp,omitempty"`
	IsPathMultipath                bool               `protobuf:"varint,31,opt,name=is_path_multipath,json=isPathMultipath,proto3" json:"is_path_multipath,omitempty"`
	IsPathImpCandidate             bool               `protobuf:"varint,32,opt,name=is_path_imp_candidate,json=isPathImpCandidate,proto3" json:"is_path_imp_candidate,omitempty"`
	IsPathStale                    bool               `protobuf:"varint,33,opt,name=is_path_stale,json=isPathStale,proto3" json:"is_path_stale,omitempty"`
	IsPathLongLivedStale           bool               `protobuf:"varint,34,opt,name=is_path_long_lived_stale,json=isPathLongLivedStale,proto3" json:"is_path_long_lived_stale,omitempty"`
	IsPathBackup                   bool               `protobuf:"varint,35,opt,name=is_path_backup,json=isPathBackup,proto3" json:"is_path_backup,omitempty"`
	IsPathBackupProtectMultipath   bool               `protobuf:"varint,36,opt,name=is_path_backup_protect_multipath,json=isPathBackupProtectMultipath,proto3" json:"is_path_backup_protect_multipath,omitempty"`
	IsPathBestExternal             bool               `protobuf:"varint,37,opt,name=is_path_best_external,json=isPathBestExternal,proto3" json:"is_path_best_external,omitempty"`
	IsPathAdditionalPath           bool               `protobuf:"varint,38,opt,name=is_path_additional_path,json=isPathAdditionalPath,proto3" json:"is_path_additional_path,omitempty"`
	IsPathNexthopDiscarded         bool               `protobuf:"varint,39,opt,name=is_path_nexthop_discarded,json=isPathNexthopDiscarded,proto3" json:"is_path_nexthop_discarded,omitempty"`
	NextHop                        *BgpAddrtype       `protobuf:"bytes,40,opt,name=next_hop,json=nextHop,proto3" json:"next_hop,omitempty"`
	NhTunnel                       *BgpTeTunnel       `protobuf:"bytes,41,opt,name=nh_tunnel,json=nhTunnel,proto3" json:"nh_tunnel,omitempty"`
	HasRcvdLabel                   bool               `protobuf:"varint,42,opt,name=has_rcvd_label,json=hasRcvdLabel,proto3" json:"has_rcvd_label,omitempty"`
	RcvdLabel                      uint32             `protobuf:"varint,43,opt,name=rcvd_label,json=rcvdLabel,proto3" json:"rcvd_label,omitempty"`
	HasLocalNetLabel               bool               `protobuf:"varint,44,opt,name=has_local_net_label,json=hasLocalNetLabel,proto3" json:"has_local_net_label,omitempty"`
	LocalLabel                     uint32             `protobuf:"varint,45,opt,name=local_label,json=localLabel,proto3" json:"local_label,omitempty"`
	IgpMetric                      uint32             `protobuf:"varint,46,opt,name=igp_metric,json=igpMetric,proto3" json:"igp_metric,omitempty"`
	PathWeight                     uint32             `protobuf:"varint,47,opt,name=path_weight,json=pathWeight,proto3" json:"path_weight,omitempty"`
	NeighborRouterId               string             `protobuf:"bytes,48,opt,name=neighbor_router_id,json=neighborRouterId,proto3" json:"neighbor_router_id,omitempty"`
	HasMdtGroupAddr                bool               `protobuf:"varint,49,opt,name=has_mdt_group_addr,json=hasMdtGroupAddr,proto3" json:"has_mdt_group_addr,omitempty"`
	MdtGroupAddr                   *BgpAddrtype       `protobuf:"bytes,50,opt,name=mdt_group_addr,json=mdtGroupAddr,proto3" json:"mdt_group_addr,omitempty"`
	L2VpnSize                      uint32             `protobuf:"varint,51,opt,name=l2vpn_size,json=l2vpnSize,proto3" json:"l2vpn_size,omitempty"`
	HasEsi                         bool               `protobuf:"varint,52,opt,name=has_esi,json=hasEsi,proto3" json:"has_esi,omitempty"`
	L2VpnEvpnEsi                   *BgpL2VpnEvpnEsiT  `protobuf:"bytes,53,opt,name=l2vpn_evpn_esi,json=l2vpnEvpnEsi,proto3" json:"l2vpn_evpn_esi,omitempty"`
	HasGwAddr                      bool               `protobuf:"varint,54,opt,name=has_gw_addr,json=hasGwAddr,proto3" json:"has_gw_addr,omitempty"`
	GwAddr                         *BgpV4V6T          `protobuf:"bytes,55,opt,name=gw_addr,json=gwAddr,proto3" json:"gw_addr,omitempty"`
	HasNhAddr                      bool               `protobuf:"varint,56,opt,name=has_nh_addr,json=hasNhAddr,proto3" json:"has_nh_addr,omitempty"`
	NhAddr                         *BgpV4V6T          `protobuf:"bytes,57,opt,name=nh_addr,json=nhAddr,proto3" json:"nh_addr,omitempty"`
	HasSecondLabel                 bool               `protobuf:"varint,58,opt,name=has_second_label,json=hasSecondLabel,proto3" json:"has_second_label,omitempty"`
	SecondLabel                    uint32             `protobuf:"varint,59,opt,name=second_label,json=secondLabel,proto3" json:"second_label,omitempty"`
	L2VpnCircuitStatusValue        []uint32           `protobuf:"varint,60,rep,packed,name=l2vpn_circuit_status_value,json=l2vpnCircuitStatusValue,proto3" json:"l2vpn_circuit_status_value,omitempty"`
	PathFlapCount                  uint32             `protobuf:"varint,61,opt,name=path_flap_count,json=pathFlapCount,proto3" json:"path_flap_count,omitempty"`
	SecondsSinceFirstFlap          uint32             `protobuf:"varint,62,opt,name=seconds_since_first_flap,json=secondsSinceFirstFlap,proto3" json:"seconds_since_first_flap,omitempty"`
	TimeToUnsuppress               uint32             `protobuf:"varint,63,opt,name=time_to_unsuppress,json=timeToUnsuppress,proto3" json:"time_to_unsuppress,omitempty"`
	DampenPenalty                  uint32             `protobuf:"varint,64,opt,name=dampen_penalty,json=dampenPenalty,proto3" json:"dampen_penalty,omitempty"`
	HalflifeTime                   uint32             `protobuf:"varint,65,opt,name=halflife_time,json=halflifeTime,proto3" json:"halflife_time,omitempty"`
	SuppressPenalty                uint32             `protobuf:"varint,66,opt,name=suppress_penalty,json=suppressPenalty,proto3" json:"suppress_penalty,omitempty"`
	ReuseValue                     uint32             `protobuf:"varint,67,opt,name=reuse_value,json=reuseValue,proto3" json:"reuse_value,omitempty"`
	MaximumSuppressTime            uint32             `protobuf:"varint,68,opt,name=maximum_suppress_time,json=maximumSuppressTime,proto3" json:"maximum_suppress_time,omitempty"`
	BestPathCompStage              string             `protobuf:"bytes,69,opt,name=best_path_comp_stage,json=bestPathCompStage,proto3" json:"best_path_comp_stage,omitempty"`
	BestPathCompWinner             *BgpAddrtype       `protobuf:"bytes,70,opt,name=best_path_comp_winner,json=bestPathCompWinner,proto3" json:"best_path_comp_winner,omitempty"`
	BestPathIdCompWinner           uint32             `protobuf:"varint,71,opt,name=best_path_id_comp_winner,json=bestPathIdCompWinner,proto3" json:"best_path_id_comp_winner,omitempty"`
	PathFlags                      uint64             `protobuf:"varint,72,opt,name=path_flags,json=pathFlags,proto3" json:"path_flags,omitempty"`
	PathImportFlags                uint32             `protobuf:"varint,73,opt,name=path_import_flags,json=pathImportFlags,proto3" json:"path_import_flags,omitempty"`
	BestPathId                     uint32             `protobuf:"varint,74,opt,name=best_path_id,json=bestPathId,proto3" json:"best_path_id,omitempty"`
	LocalPathId                    uint32             `protobuf:"varint,75,opt,name=local_path_id,json=localPathId,proto3" json:"local_path_id,omitempty"`
	RcvdPathId                     uint32             `protobuf:"varint,76,opt,name=rcvd_path_id,json=rcvdPathId,proto3" json:"rcvd_path_id,omitempty"`
	PathTableVersion               uint32             `protobuf:"varint,77,opt,name=path_table_version,json=pathTableVersion,proto3" json:"path_table_version,omitempty"`
	LocalPeersAdvertisedTo         []*BgpAdvinfoType_ `protobuf:"bytes,78,rep,name=local_peers_advertised_to,json=localPeersAdvertisedTo,proto3" json:"local_peers_advertised_to,omitempty"`
	PePeersAdvertisedTo            []*BgpAdvinfoType_ `protobuf:"bytes,79,rep,name=pe_peers_advertised_to,json=pePeersAdvertisedTo,proto3" json:"pe_peers_advertised_to,omitempty"`
	BestPathOrrBitfield            []*BgpAdvinfoType_ `protobuf:"bytes,80,rep,name=best_path_orr_bitfield,json=bestPathOrrBitfield,proto3" json:"best_path_orr_bitfield,omitempty"`
	AddPathOrrBitfield             []*BgpAdvinfoType_ `protobuf:"bytes,81,rep,name=add_path_orr_bitfield,json=addPathOrrBitfield,proto3" json:"add_path_orr_bitfield,omitempty"`
	AdvertisedtoPe                 bool               `protobuf:"varint,82,opt,name=advertisedto_pe,json=advertisedtoPe,proto3" json:"advertisedto_pe,omitempty"`
	RibFailed                      bool               `protobuf:"varint,83,opt,name=rib_failed,json=ribFailed,proto3" json:"rib_failed,omitempty"`
	SnRpkiOriginAsValidity         uint32             `protobuf:"varint,84,opt,name=sn_rpki_origin_as_validity,json=snRpkiOriginAsValidity,proto3" json:"sn_rpki_origin_as_validity,omitempty"`
	ShowRpkiOriginAsValidity       bool               `protobuf:"varint,85,opt,name=show_rpki_origin_as_validity,json=showRpkiOriginAsValidity,proto3" json:"show_rpki_origin_as_validity,omitempty"`
	IbgpSignaledValidity           bool               `protobuf:"varint,86,opt,name=ibgp_signaled_validity,json=ibgpSignaledValidity,proto3" json:"ibgp_signaled_validity,omitempty"`
	RpkiOriginAsValidationDisabled bool               `protobuf:"varint,87,opt,name=rpki_origin_as_validation_disabled,json=rpkiOriginAsValidationDisabled,proto3" json:"rpki_origin_as_validation_disabled,omitempty"`
	AcceptOwnPath                  bool               `protobuf:"varint,88,opt,name=accept_own_path,json=acceptOwnPath,proto3" json:"accept_own_path,omitempty"`
	AcceptOwnSelfOriginatedPAth    bool               `protobuf:"varint,89,opt,name=accept_own_self_originated_p_ath,json=acceptOwnSelfOriginatedPAth,proto3" json:"accept_own_self_originated_p_ath,omitempty"`
	AigpMetric                     uint64             `protobuf:"varint,90,opt,name=aigp_metric,json=aigpMetric,proto3" json:"aigp_metric,omitempty"`
	MvpnSfsPath                    bool               `protobuf:"varint,91,opt,name=mvpn_sfs_path,json=mvpnSfsPath,proto3" json:"mvpn_sfs_path,omitempty"`
	FspecInvalidPath               bool               `protobuf:"varint,92,opt,name=fspec_invalid_path,json=fspecInvalidPath,proto3" json:"fspec_invalid_path,omitempty"`
	HasMvpnNbrAddr                 bool               `protobuf:"varint,93,opt,name=has_mvpn_nbr_addr,json=hasMvpnNbrAddr,proto3" json:"has_mvpn_nbr_addr,omitempty"`
	MvpnNbrAddr                    *BgpAddrtype       `protobuf:"bytes,94,opt,name=mvpn_nbr_addr,json=mvpnNbrAddr,proto3" json:"mvpn_nbr_addr,omitempty"`
	HasMvpnNexthopAddr             bool               `protobuf:"varint,95,opt,name=has_mvpn_nexthop_addr,json=hasMvpnNexthopAddr,proto3" json:"has_mvpn_nexthop_addr,omitempty"`
	MvpnNexthopAddr                *BgpAddrtype       `protobuf:"bytes,96,opt,name=mvpn_nexthop_addr,json=mvpnNexthopAddr,proto3" json:"mvpn_nexthop_addr,omitempty"`
	HasMvpnPmsi                    bool               `protobuf:"varint,97,opt,name=has_mvpn_pmsi,json=hasMvpnPmsi,proto3" json:"has_mvpn_pmsi,omitempty"`
	MvpnPmsiType                   uint32             `protobuf:"varint,98,opt,name=mvpn_pmsi_type,json=mvpnPmsiType,proto3" json:"mvpn_pmsi_type,omitempty"`
	MvpnPmsiFlags                  uint32             `protobuf:"varint,99,opt,name=mvpn_pmsi_flags,json=mvpnPmsiFlags,proto3" json:"mvpn_pmsi_flags,omitempty"`
	MvpnPmsiLabel                  uint32             `protobuf:"varint,100,opt,name=mvpn_pmsi_label,json=mvpnPmsiLabel,proto3" json:"mvpn_pmsi_label,omitempty"`
	MvpnPmsiValue                  []uint32           `protobuf:"varint,101,rep,packed,name=mvpn_pmsi_value,json=mvpnPmsiValue,proto3" json:"mvpn_pmsi_value,omitempty"`
	HasMvpnExtcomm                 bool               `protobuf:"varint,102,opt,name=has_mvpn_extcomm,json=hasMvpnExtcomm,proto3" json:"has_mvpn_extcomm,omitempty"`
	ExtendedCommunity              []uint32           `protobuf:"varint,103,rep,packed,name=extended_community,json=extendedCommunity,proto3" json:"extended_community,omitempty"`
	MvpnPathFlags                  uint32             `protobuf:"varint,104,opt,name=mvpn_path_flags,json=mvpnPathFlags,proto3" json:"mvpn_path_flags,omitempty"`
	LocalNh                        bool               `protobuf:"varint,105,opt,name=local_nh,json=localNh,proto3" json:"local_nh,omitempty"`
	RtSetLimitEnabled              bool               `protobuf:"varint,106,opt,name=rt_set_limit_enabled,json=rtSetLimitEnabled,proto3" json:"rt_set_limit_enabled,omitempty"`
	PathRtSetId                    uint32             `protobuf:"varint,107,opt,name=path_rt_set_id,json=pathRtSetId,proto3" json:"path_rt_set_id,omitempty"`
	PathRtSetRouteCount            uint32             `protobuf:"varint,108,opt,name=path_rt_set_route_count,json=pathRtSetRouteCount,proto3" json:"path_rt_set_route_count,omitempty"`
	IsPathAfInstallEligible        bool               `protobuf:"varint,109,opt,name=is_path_af_install_eligible,json=isPathAfInstallEligible,proto3" json:"is_path_af_install_eligible,omitempty"`
	IsPermanentPath                bool               `protobuf:"varint,110,opt,name=is_permanent_path,json=isPermanentPath,proto3" json:"is_permanent_path,omitempty"`
	GracefulShutdown               bool               `protobuf:"varint,111,opt,name=graceful_shutdown,json=gracefulShutdown,proto3" json:"graceful_shutdown,omitempty"`
	LabeledUnicastSafiPath         bool               `protobuf:"varint,112,opt,name=labeled_unicast_safi_path,json=labeledUnicastSafiPath,proto3" json:"labeled_unicast_safi_path,omitempty"`
	VpnPathFlags                   uint32             `protobuf:"varint,113,opt,name=vpn_path_flags,json=vpnPathFlags,proto3" json:"vpn_path_flags,omitempty"`
	HasVpnNexthopAddr              bool               `protobuf:"varint,114,opt,name=has_vpn_nexthop_addr,json=hasVpnNexthopAddr,proto3" json:"has_vpn_nexthop_addr,omitempty"`
	VpnNexthopAddr                 *BgpAddrtype       `protobuf:"bytes,115,opt,name=vpn_nexthop_addr,json=vpnNexthopAddr,proto3" json:"vpn_nexthop_addr,omitempty"`
	IsOrigSrcRdPresent             bool               `protobuf:"varint,116,opt,name=is_orig_src_rd_present,json=isOrigSrcRdPresent,proto3" json:"is_orig_src_rd_present,omitempty"`
	AfName                         string             `protobuf:"bytes,117,opt,name=af_name,json=afName,proto3" json:"af_name,omitempty"`
	RouteDistinguisher             string             `protobuf:"bytes,118,opt,name=route_distinguisher,json=routeDistinguisher,proto3" json:"route_distinguisher,omitempty"`
	XXX_NoUnkeyedLiteral           struct{}           `json:"-"`
	XXX_unrecognized               []byte             `json:"-"`
	XXX_sizecache                  int32              `json:"-"`
}

func (m *BgpPath_) Reset()         { *m = BgpPath_{} }
func (m *BgpPath_) String() string { return proto.CompactTextString(m) }
func (*BgpPath_) ProtoMessage()    {}
func (*BgpPath_) Descriptor() ([]byte, []int) {
	return fileDescriptor_b328b6ce06ea8a38, []int{11}
}

func (m *BgpPath_) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BgpPath_.Unmarshal(m, b)
}
func (m *BgpPath_) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BgpPath_.Marshal(b, m, deterministic)
}
func (m *BgpPath_) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpPath_.Merge(m, src)
}
func (m *BgpPath_) XXX_Size() int {
	return xxx_messageInfo_BgpPath_.Size(m)
}
func (m *BgpPath_) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpPath_.DiscardUnknown(m)
}

var xxx_messageInfo_BgpPath_ proto.InternalMessageInfo

func (m *BgpPath_) GetBgpPrefix() *BgpPrefixtype {
	if m != nil {
		return m.BgpPrefix
	}
	return nil
}

func (m *BgpPath_) GetNeighborAddress() *BgpAddrtype {
	if m != nil {
		return m.NeighborAddress
	}
	return nil
}

func (m *BgpPath_) GetRouteType() string {
	if m != nil {
		return m.RouteType
	}
	return ""
}

func (m *BgpPath_) GetIsPathValid() bool {
	if m != nil {
		return m.IsPathValid
	}
	return false
}

func (m *BgpPath_) GetIsPathDamped() bool {
	if m != nil {
		return m.IsPathDamped
	}
	return false
}

func (m *BgpPath_) GetIsPathHistoryHeld() bool {
	if m != nil {
		return m.IsPathHistoryHeld
	}
	return false
}

func (m *BgpPath_) GetIsInternalPath() bool {
	if m != nil {
		return m.IsInternalPath
	}
	return false
}

func (m *BgpPath_) GetIsBestPath() bool {
	if m != nil {
		return m.IsBestPath
	}
	return false
}

func (m *BgpPath_) GetIsAsBest() bool {
	if m != nil {
		return m.IsAsBest
	}
	return false
}

func (m *BgpPath_) GetIsSpkrAsBest() bool {
	if m != nil {
		return m.IsSpkrAsBest
	}
	return false
}

func (m *BgpPath_) GetIsPartialBest() bool {
	if m != nil {
		return m.IsPartialBest
	}
	return false
}

func (m *BgpPath_) GetIsAggregationSuppressed() bool {
	if m != nil {
		return m.IsAggregationSuppressed
	}
	return false
}

func (m *BgpPath_) GetIsImportDampened() bool {
	if m != nil {
		return m.IsImportDampened
	}
	return false
}

func (m *BgpPath_) GetIsImportSuspect() bool {
	if m != nil {
		return m.IsImportSuspect
	}
	return false
}

func (m *BgpPath_) GetIsPathNotAdvertised() bool {
	if m != nil {
		return m.IsPathNotAdvertised
	}
	return false
}

func (m *BgpPath_) GetIsPathNotAdvertisedToEbgPs() bool {
	if m != nil {
		return m.IsPathNotAdvertisedToEbgPs
	}
	return false
}

func (m *BgpPath_) GetIsPathAdvertisedLocalAsOnly() bool {
	if m != nil {
		return m.IsPathAdvertisedLocalAsOnly
	}
	return false
}

func (m *BgpPath_) GetIsPathFromRouteReflector() bool {
	if m != nil {
		return m.IsPathFromRouteReflector
	}
	return false
}

func (m *BgpPath_) GetIsPathReceivedOnly() bool {
	if m != nil {
		return m.IsPathReceivedOnly
	}
	return false
}

func (m *BgpPath_) GetIsReceivedPathNotModified() bool {
	if m != nil {
		return m.IsReceivedPathNotModified
	}
	return false
}

func (m *BgpPath_) GetIsPathLocallySourced() bool {
	if m != nil {
		return m.IsPathLocallySourced
	}
	return false
}

func (m *BgpPath_) GetIsPathLocalAggregate() bool {
	if m != nil {
		return m.IsPathLocalAggregate
	}
	return false
}

func (m *BgpPath_) GetIsPathFromNetworkCommand() bool {
	if m != nil {
		return m.IsPathFromNetworkCommand
	}
	return false
}

func (m *BgpPath_) GetIsPathFromRedistributeCommand() bool {
	if m != nil {
		return m.IsPathFromRedistributeCommand
	}
	return false
}

func (m *BgpPath_) GetIsPathImported() bool {
	if m != nil {
		return m.IsPathImported
	}
	return false
}

func (m *BgpPath_) GetIsPathReoriginated() bool {
	if m != nil {
		return m.IsPathReoriginated
	}
	return false
}

func (m *BgpPath_) GetIsPathReoriginatedStitching() bool {
	if m != nil {
		return m.IsPathReoriginatedStitching
	}
	return false
}

func (m *BgpPath_) GetIsPathVpnOnly() bool {
	if m != nil {
		return m.IsPathVpnOnly
	}
	return false
}

func (m *BgpPath_) GetIsPathFromConfederationPeer() bool {
	if m != nil {
		return m.IsPathFromConfederationPeer
	}
	return false
}

func (m *BgpPath_) GetIsPathSyncedWithIgp() bool {
	if m != nil {
		return m.IsPathSyncedWithIgp
	}
	return false
}

func (m *BgpPath_) GetIsPathMultipath() bool {
	if m != nil {
		return m.IsPathMultipath
	}
	return false
}

func (m *BgpPath_) GetIsPathImpCandidate() bool {
	if m != nil {
		return m.IsPathImpCandidate
	}
	return false
}

func (m *BgpPath_) GetIsPathStale() bool {
	if m != nil {
		return m.IsPathStale
	}
	return false
}

func (m *BgpPath_) GetIsPathLongLivedStale() bool {
	if m != nil {
		return m.IsPathLongLivedStale
	}
	return false
}

func (m *BgpPath_) GetIsPathBackup() bool {
	if m != nil {
		return m.IsPathBackup
	}
	return false
}

func (m *BgpPath_) GetIsPathBackupProtectMultipath() bool {
	if m != nil {
		return m.IsPathBackupProtectMultipath
	}
	return false
}

func (m *BgpPath_) GetIsPathBestExternal() bool {
	if m != nil {
		return m.IsPathBestExternal
	}
	return false
}

func (m *BgpPath_) GetIsPathAdditionalPath() bool {
	if m != nil {
		return m.IsPathAdditionalPath
	}
	return false
}

func (m *BgpPath_) GetIsPathNexthopDiscarded() bool {
	if m != nil {
		return m.IsPathNexthopDiscarded
	}
	return false
}

func (m *BgpPath_) GetNextHop() *BgpAddrtype {
	if m != nil {
		return m.NextHop
	}
	return nil
}

func (m *BgpPath_) GetNhTunnel() *BgpTeTunnel {
	if m != nil {
		return m.NhTunnel
	}
	return nil
}

func (m *BgpPath_) GetHasRcvdLabel() bool {
	if m != nil {
		return m.HasRcvdLabel
	}
	return false
}

func (m *BgpPath_) GetRcvdLabel() uint32 {
	if m != nil {
		return m.RcvdLabel
	}
	return 0
}

func (m *BgpPath_) GetHasLocalNetLabel() bool {
	if m != nil {
		return m.HasLocalNetLabel
	}
	return false
}

func (m *BgpPath_) GetLocalLabel() uint32 {
	if m != nil {
		return m.LocalLabel
	}
	return 0
}

func (m *BgpPath_) GetIgpMetric() uint32 {
	if m != nil {
		return m.IgpMetric
	}
	return 0
}

func (m *BgpPath_) GetPathWeight() uint32 {
	if m != nil {
		return m.PathWeight
	}
	return 0
}

func (m *BgpPath_) GetNeighborRouterId() string {
	if m != nil {
		return m.NeighborRouterId
	}
	return ""
}

func (m *BgpPath_) GetHasMdtGroupAddr() bool {
	if m != nil {
		return m.HasMdtGroupAddr
	}
	return false
}

func (m *BgpPath_) GetMdtGroupAddr() *BgpAddrtype {
	if m != nil {
		return m.MdtGroupAddr
	}
	return nil
}

func (m *BgpPath_) GetL2VpnSize() uint32 {
	if m != nil {
		return m.L2VpnSize
	}
	return 0
}

func (m *BgpPath_) GetHasEsi() bool {
	if m != nil {
		return m.HasEsi
	}
	return false
}

func (m *BgpPath_) GetL2VpnEvpnEsi() *BgpL2VpnEvpnEsiT {
	if m != nil {
		return m.L2VpnEvpnEsi
	}
	return nil
}

func (m *BgpPath_) GetHasGwAddr() bool {
	if m != nil {
		return m.HasGwAddr
	}
	return false
}

func (m *BgpPath_) GetGwAddr() *BgpV4V6T {
	if m != nil {
		return m.GwAddr
	}
	return nil
}

func (m *BgpPath_) GetHasNhAddr() bool {
	if m != nil {
		return m.HasNhAddr
	}
	return false
}

func (m *BgpPath_) GetNhAddr() *BgpV4V6T {
	if m != nil {
		return m.NhAddr
	}
	return nil
}

func (m *BgpPath_) GetHasSecondLabel() bool {
	if m != nil {
		return m.HasSecondLabel
	}
	return false
}

func (m *BgpPath_) GetSecondLabel() uint32 {
	if m != nil {
		return m.SecondLabel
	}
	return 0
}

func (m *BgpPath_) GetL2VpnCircuitStatusValue() []uint32 {
	if m != nil {
		return m.L2VpnCircuitStatusValue
	}
	return nil
}

func (m *BgpPath_) GetPathFlapCount() uint32 {
	if m != nil {
		return m.PathFlapCount
	}
	return 0
}

func (m *BgpPath_) GetSecondsSinceFirstFlap() uint32 {
	if m != nil {
		return m.SecondsSinceFirstFlap
	}
	return 0
}

func (m *BgpPath_) GetTimeToUnsuppress() uint32 {
	if m != nil {
		return m.TimeToUnsuppress
	}
	return 0
}

func (m *BgpPath_) GetDampenPenalty() uint32 {
	if m != nil {
		return m.DampenPenalty
	}
	return 0
}

func (m *BgpPath_) GetHalflifeTime() uint32 {
	if m != nil {
		return m.HalflifeTime
	}
	return 0
}

func (m *BgpPath_) GetSuppressPenalty() uint32 {
	if m != nil {
		return m.SuppressPenalty
	}
	return 0
}

func (m *BgpPath_) GetReuseValue() uint32 {
	if m != nil {
		return m.ReuseValue
	}
	return 0
}

func (m *BgpPath_) GetMaximumSuppressTime() uint32 {
	if m != nil {
		return m.MaximumSuppressTime
	}
	return 0
}

func (m *BgpPath_) GetBestPathCompStage() string {
	if m != nil {
		return m.BestPathCompStage
	}
	return ""
}

func (m *BgpPath_) GetBestPathCompWinner() *BgpAddrtype {
	if m != nil {
		return m.BestPathCompWinner
	}
	return nil
}

func (m *BgpPath_) GetBestPathIdCompWinner() uint32 {
	if m != nil {
		return m.BestPathIdCompWinner
	}
	return 0
}

func (m *BgpPath_) GetPathFlags() uint64 {
	if m != nil {
		return m.PathFlags
	}
	return 0
}

func (m *BgpPath_) GetPathImportFlags() uint32 {
	if m != nil {
		return m.PathImportFlags
	}
	return 0
}

func (m *BgpPath_) GetBestPathId() uint32 {
	if m != nil {
		return m.BestPathId
	}
	return 0
}

func (m *BgpPath_) GetLocalPathId() uint32 {
	if m != nil {
		return m.LocalPathId
	}
	return 0
}

func (m *BgpPath_) GetRcvdPathId() uint32 {
	if m != nil {
		return m.RcvdPathId
	}
	return 0
}

func (m *BgpPath_) GetPathTableVersion() uint32 {
	if m != nil {
		return m.PathTableVersion
	}
	return 0
}

func (m *BgpPath_) GetLocalPeersAdvertisedTo() []*BgpAdvinfoType_ {
	if m != nil {
		return m.LocalPeersAdvertisedTo
	}
	return nil
}

func (m *BgpPath_) GetPePeersAdvertisedTo() []*BgpAdvinfoType_ {
	if m != nil {
		return m.PePeersAdvertisedTo
	}
	return nil
}

func (m *BgpPath_) GetBestPathOrrBitfield() []*BgpAdvinfoType_ {
	if m != nil {
		return m.BestPathOrrBitfield
	}
	return nil
}

func (m *BgpPath_) GetAddPathOrrBitfield() []*BgpAdvinfoType_ {
	if m != nil {
		return m.AddPathOrrBitfield
	}
	return nil
}

func (m *BgpPath_) GetAdvertisedtoPe() bool {
	if m != nil {
		return m.AdvertisedtoPe
	}
	return false
}

func (m *BgpPath_) GetRibFailed() bool {
	if m != nil {
		return m.RibFailed
	}
	return false
}

func (m *BgpPath_) GetSnRpkiOriginAsValidity() uint32 {
	if m != nil {
		return m.SnRpkiOriginAsValidity
	}
	return 0
}

func (m *BgpPath_) GetShowRpkiOriginAsValidity() bool {
	if m != nil {
		return m.ShowRpkiOriginAsValidity
	}
	return false
}

func (m *BgpPath_) GetIbgpSignaledValidity() bool {
	if m != nil {
		return m.IbgpSignaledValidity
	}
	return false
}

func (m *BgpPath_) GetRpkiOriginAsValidationDisabled() bool {
	if m != nil {
		return m.RpkiOriginAsValidationDisabled
	}
	return false
}

func (m *BgpPath_) GetAcceptOwnPath() bool {
	if m != nil {
		return m.AcceptOwnPath
	}
	return false
}

func (m *BgpPath_) GetAcceptOwnSelfOriginatedPAth() bool {
	if m != nil {
		return m.AcceptOwnSelfOriginatedPAth
	}
	return false
}

func (m *BgpPath_) GetAigpMetric() uint64 {
	if m != nil {
		return m.AigpMetric
	}
	return 0
}

func (m *BgpPath_) GetMvpnSfsPath() bool {
	if m != nil {
		return m.MvpnSfsPath
	}
	return false
}

func (m *BgpPath_) GetFspecInvalidPath() bool {
	if m != nil {
		return m.FspecInvalidPath
	}
	return false
}

func (m *BgpPath_) GetHasMvpnNbrAddr() bool {
	if m != nil {
		return m.HasMvpnNbrAddr
	}
	return false
}

func (m *BgpPath_) GetMvpnNbrAddr() *BgpAddrtype {
	if m != nil {
		return m.MvpnNbrAddr
	}
	return nil
}

func (m *BgpPath_) GetHasMvpnNexthopAddr() bool {
	if m != nil {
		return m.HasMvpnNexthopAddr
	}
	return false
}

func (m *BgpPath_) GetMvpnNexthopAddr() *BgpAddrtype {
	if m != nil {
		return m.MvpnNexthopAddr
	}
	return nil
}

func (m *BgpPath_) GetHasMvpnPmsi() bool {
	if m != nil {
		return m.HasMvpnPmsi
	}
	return false
}

func (m *BgpPath_) GetMvpnPmsiType() uint32 {
	if m != nil {
		return m.MvpnPmsiType
	}
	return 0
}

func (m *BgpPath_) GetMvpnPmsiFlags() uint32 {
	if m != nil {
		return m.MvpnPmsiFlags
	}
	return 0
}

func (m *BgpPath_) GetMvpnPmsiLabel() uint32 {
	if m != nil {
		return m.MvpnPmsiLabel
	}
	return 0
}

func (m *BgpPath_) GetMvpnPmsiValue() []uint32 {
	if m != nil {
		return m.MvpnPmsiValue
	}
	return nil
}

func (m *BgpPath_) GetHasMvpnExtcomm() bool {
	if m != nil {
		return m.HasMvpnExtcomm
	}
	return false
}

func (m *BgpPath_) GetExtendedCommunity() []uint32 {
	if m != nil {
		return m.ExtendedCommunity
	}
	return nil
}

func (m *BgpPath_) GetMvpnPathFlags() uint32 {
	if m != nil {
		return m.MvpnPathFlags
	}
	return 0
}

func (m *BgpPath_) GetLocalNh() bool {
	if m != nil {
		return m.LocalNh
	}
	return false
}

func (m *BgpPath_) GetRtSetLimitEnabled() bool {
	if m != nil {
		return m.RtSetLimitEnabled
	}
	return false
}

func (m *BgpPath_) GetPathRtSetId() uint32 {
	if m != nil {
		return m.PathRtSetId
	}
	return 0
}

func (m *BgpPath_) GetPathRtSetRouteCount() uint32 {
	if m != nil {
		return m.PathRtSetRouteCount
	}
	return 0
}

func (m *BgpPath_) GetIsPathAfInstallEligible() bool {
	if m != nil {
		return m.IsPathAfInstallEligible
	}
	return false
}

func (m *BgpPath_) GetIsPermanentPath() bool {
	if m != nil {
		return m.IsPermanentPath
	}
	return false
}

func (m *BgpPath_) GetGracefulShutdown() bool {
	if m != nil {
		return m.GracefulShutdown
	}
	return false
}

func (m *BgpPath_) GetLabeledUnicastSafiPath() bool {
	if m != nil {
		return m.LabeledUnicastSafiPath
	}
	return false
}

func (m *BgpPath_) GetVpnPathFlags() uint32 {
	if m != nil {
		return m.VpnPathFlags
	}
	return 0
}

func (m *BgpPath_) GetHasVpnNexthopAddr() bool {
	if m != nil {
		return m.HasVpnNexthopAddr
	}
	return false
}

func (m *BgpPath_) GetVpnNexthopAddr() *BgpAddrtype {
	if m != nil {
		return m.VpnNexthopAddr
	}
	return nil
}

func (m *BgpPath_) GetIsOrigSrcRdPresent() bool {
	if m != nil {
		return m.IsOrigSrcRdPresent
	}
	return false
}

func (m *BgpPath_) GetAfName() string {
	if m != nil {
		return m.AfName
	}
	return ""
}

func (m *BgpPath_) GetRouteDistinguisher() string {
	if m != nil {
		return m.RouteDistinguisher
	}
	return ""
}

type BgpPedistlblEntry_ struct {
	PeAddress            string   `protobuf:"bytes,1,opt,name=pe_address,json=peAddress,proto3" json:"pe_address,omitempty"`
	Label                uint32   `protobuf:"varint,2,opt,name=label,proto3" json:"label,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BgpPedistlblEntry_) Reset()         { *m = BgpPedistlblEntry_{} }
func (m *BgpPedistlblEntry_) String() string { return proto.CompactTextString(m) }
func (*BgpPedistlblEntry_) ProtoMessage()    {}
func (*BgpPedistlblEntry_) Descriptor() ([]byte, []int) {
	return fileDescriptor_b328b6ce06ea8a38, []int{12}
}

func (m *BgpPedistlblEntry_) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BgpPedistlblEntry_.Unmarshal(m, b)
}
func (m *BgpPedistlblEntry_) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BgpPedistlblEntry_.Marshal(b, m, deterministic)
}
func (m *BgpPedistlblEntry_) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpPedistlblEntry_.Merge(m, src)
}
func (m *BgpPedistlblEntry_) XXX_Size() int {
	return xxx_messageInfo_BgpPedistlblEntry_.Size(m)
}
func (m *BgpPedistlblEntry_) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpPedistlblEntry_.DiscardUnknown(m)
}

var xxx_messageInfo_BgpPedistlblEntry_ proto.InternalMessageInfo

func (m *BgpPedistlblEntry_) GetPeAddress() string {
	if m != nil {
		return m.PeAddress
	}
	return ""
}

func (m *BgpPedistlblEntry_) GetLabel() uint32 {
	if m != nil {
		return m.Label
	}
	return 0
}

type BgpBindingSidT struct {
	Type                 string   `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Label                uint32   `protobuf:"varint,2,opt,name=label,proto3" json:"label,omitempty"`
	Ipv6Address          string   `protobuf:"bytes,3,opt,name=ipv6_address,json=ipv6Address,proto3" json:"ipv6_address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BgpBindingSidT) Reset()         { *m = BgpBindingSidT{} }
func (m *BgpBindingSidT) String() string { return proto.CompactTextString(m) }
func (*BgpBindingSidT) ProtoMessage()    {}
func (*BgpBindingSidT) Descriptor() ([]byte, []int) {
	return fileDescriptor_b328b6ce06ea8a38, []int{13}
}

func (m *BgpBindingSidT) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BgpBindingSidT.Unmarshal(m, b)
}
func (m *BgpBindingSidT) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BgpBindingSidT.Marshal(b, m, deterministic)
}
func (m *BgpBindingSidT) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpBindingSidT.Merge(m, src)
}
func (m *BgpBindingSidT) XXX_Size() int {
	return xxx_messageInfo_BgpBindingSidT.Size(m)
}
func (m *BgpBindingSidT) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpBindingSidT.DiscardUnknown(m)
}

var xxx_messageInfo_BgpBindingSidT proto.InternalMessageInfo

func (m *BgpBindingSidT) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *BgpBindingSidT) GetLabel() uint32 {
	if m != nil {
		return m.Label
	}
	return 0
}

func (m *BgpBindingSidT) GetIpv6Address() string {
	if m != nil {
		return m.Ipv6Address
	}
	return ""
}

type SrSid_ struct {
	Type                 string   `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Label                uint32   `protobuf:"varint,2,opt,name=label,proto3" json:"label,omitempty"`
	Ipv4Address          string   `protobuf:"bytes,3,opt,name=ipv4_address,json=ipv4Address,proto3" json:"ipv4_address,omitempty"`
	Ipv6Address          string   `protobuf:"bytes,4,opt,name=ipv6_address,json=ipv6Address,proto3" json:"ipv6_address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SrSid_) Reset()         { *m = SrSid_{} }
func (m *SrSid_) String() string { return proto.CompactTextString(m) }
func (*SrSid_) ProtoMessage()    {}
func (*SrSid_) Descriptor() ([]byte, []int) {
	return fileDescriptor_b328b6ce06ea8a38, []int{14}
}

func (m *SrSid_) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SrSid_.Unmarshal(m, b)
}
func (m *SrSid_) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SrSid_.Marshal(b, m, deterministic)
}
func (m *SrSid_) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SrSid_.Merge(m, src)
}
func (m *SrSid_) XXX_Size() int {
	return xxx_messageInfo_SrSid_.Size(m)
}
func (m *SrSid_) XXX_DiscardUnknown() {
	xxx_messageInfo_SrSid_.DiscardUnknown(m)
}

var xxx_messageInfo_SrSid_ proto.InternalMessageInfo

func (m *SrSid_) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *SrSid_) GetLabel() uint32 {
	if m != nil {
		return m.Label
	}
	return 0
}

func (m *SrSid_) GetIpv4Address() string {
	if m != nil {
		return m.Ipv4Address
	}
	return ""
}

func (m *SrSid_) GetIpv6Address() string {
	if m != nil {
		return m.Ipv6Address
	}
	return ""
}

type SrExppath_ struct {
	Weight               uint32    `protobuf:"varint,1,opt,name=weight,proto3" json:"weight,omitempty"`
	Segment              []*SrSid_ `protobuf:"bytes,2,rep,name=segment,proto3" json:"segment,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *SrExppath_) Reset()         { *m = SrExppath_{} }
func (m *SrExppath_) String() string { return proto.CompactTextString(m) }
func (*SrExppath_) ProtoMessage()    {}
func (*SrExppath_) Descriptor() ([]byte, []int) {
	return fileDescriptor_b328b6ce06ea8a38, []int{15}
}

func (m *SrExppath_) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SrExppath_.Unmarshal(m, b)
}
func (m *SrExppath_) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SrExppath_.Marshal(b, m, deterministic)
}
func (m *SrExppath_) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SrExppath_.Merge(m, src)
}
func (m *SrExppath_) XXX_Size() int {
	return xxx_messageInfo_SrExppath_.Size(m)
}
func (m *SrExppath_) XXX_DiscardUnknown() {
	xxx_messageInfo_SrExppath_.DiscardUnknown(m)
}

var xxx_messageInfo_SrExppath_ proto.InternalMessageInfo

func (m *SrExppath_) GetWeight() uint32 {
	if m != nil {
		return m.Weight
	}
	return 0
}

func (m *SrExppath_) GetSegment() []*SrSid_ {
	if m != nil {
		return m.Segment
	}
	return nil
}

type BgpSrpolicyEntry_ struct {
	TunnelEncapType      uint32          `protobuf:"varint,1,opt,name=tunnel_encap_type,json=tunnelEncapType,proto3" json:"tunnel_encap_type,omitempty"`
	BindingSid           *BgpBindingSidT `protobuf:"bytes,2,opt,name=binding_sid,json=bindingSid,proto3" json:"binding_sid,omitempty"`
	AllocatedBindingSid  *BgpBindingSidT `protobuf:"bytes,3,opt,name=allocated_binding_sid,json=allocatedBindingSid,proto3" json:"allocated_binding_sid,omitempty"`
	Preference           uint32          `protobuf:"varint,4,opt,name=preference,proto3" json:"preference,omitempty"`
	State                bool            `protobuf:"varint,5,opt,name=state,proto3" json:"state,omitempty"`
	RequestState         string          `protobuf:"bytes,6,opt,name=request_state,json=requestState,proto3" json:"request_state,omitempty"`
	SegmentList          []*SrExppath_   `protobuf:"bytes,7,rep,name=segment_list,json=segmentList,proto3" json:"segment_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *BgpSrpolicyEntry_) Reset()         { *m = BgpSrpolicyEntry_{} }
func (m *BgpSrpolicyEntry_) String() string { return proto.CompactTextString(m) }
func (*BgpSrpolicyEntry_) ProtoMessage()    {}
func (*BgpSrpolicyEntry_) Descriptor() ([]byte, []int) {
	return fileDescriptor_b328b6ce06ea8a38, []int{16}
}

func (m *BgpSrpolicyEntry_) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BgpSrpolicyEntry_.Unmarshal(m, b)
}
func (m *BgpSrpolicyEntry_) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BgpSrpolicyEntry_.Marshal(b, m, deterministic)
}
func (m *BgpSrpolicyEntry_) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpSrpolicyEntry_.Merge(m, src)
}
func (m *BgpSrpolicyEntry_) XXX_Size() int {
	return xxx_messageInfo_BgpSrpolicyEntry_.Size(m)
}
func (m *BgpSrpolicyEntry_) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpSrpolicyEntry_.DiscardUnknown(m)
}

var xxx_messageInfo_BgpSrpolicyEntry_ proto.InternalMessageInfo

func (m *BgpSrpolicyEntry_) GetTunnelEncapType() uint32 {
	if m != nil {
		return m.TunnelEncapType
	}
	return 0
}

func (m *BgpSrpolicyEntry_) GetBindingSid() *BgpBindingSidT {
	if m != nil {
		return m.BindingSid
	}
	return nil
}

func (m *BgpSrpolicyEntry_) GetAllocatedBindingSid() *BgpBindingSidT {
	if m != nil {
		return m.AllocatedBindingSid
	}
	return nil
}

func (m *BgpSrpolicyEntry_) GetPreference() uint32 {
	if m != nil {
		return m.Preference
	}
	return 0
}

func (m *BgpSrpolicyEntry_) GetState() bool {
	if m != nil {
		return m.State
	}
	return false
}

func (m *BgpSrpolicyEntry_) GetRequestState() string {
	if m != nil {
		return m.RequestState
	}
	return ""
}

func (m *BgpSrpolicyEntry_) GetSegmentList() []*SrExppath_ {
	if m != nil {
		return m.SegmentList
	}
	return nil
}

type BgpTunencapEntry_ struct {
	SrPolicy             *BgpSrpolicyEntry_ `protobuf:"bytes,1,opt,name=sr_policy,json=srPolicy,proto3" json:"sr_policy,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *BgpTunencapEntry_) Reset()         { *m = BgpTunencapEntry_{} }
func (m *BgpTunencapEntry_) String() string { return proto.CompactTextString(m) }
func (*BgpTunencapEntry_) ProtoMessage()    {}
func (*BgpTunencapEntry_) Descriptor() ([]byte, []int) {
	return fileDescriptor_b328b6ce06ea8a38, []int{17}
}

func (m *BgpTunencapEntry_) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BgpTunencapEntry_.Unmarshal(m, b)
}
func (m *BgpTunencapEntry_) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BgpTunencapEntry_.Marshal(b, m, deterministic)
}
func (m *BgpTunencapEntry_) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpTunencapEntry_.Merge(m, src)
}
func (m *BgpTunencapEntry_) XXX_Size() int {
	return xxx_messageInfo_BgpTunencapEntry_.Size(m)
}
func (m *BgpTunencapEntry_) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpTunencapEntry_.DiscardUnknown(m)
}

var xxx_messageInfo_BgpTunencapEntry_ proto.InternalMessageInfo

func (m *BgpTunencapEntry_) GetSrPolicy() *BgpSrpolicyEntry_ {
	if m != nil {
		return m.SrPolicy
	}
	return nil
}

type BgpCommonAttrEntry_ struct {
	IsMetricPresent               bool                  `protobuf:"varint,1,opt,name=is_metric_present,json=isMetricPresent,proto3" json:"is_metric_present,omitempty"`
	IsLocalPrefPresent            bool                  `protobuf:"varint,2,opt,name=is_local_pref_present,json=isLocalPrefPresent,proto3" json:"is_local_pref_present,omitempty"`
	IsAtomicAggregatePresent      bool                  `protobuf:"varint,3,opt,name=is_atomic_aggregate_present,json=isAtomicAggregatePresent,proto3" json:"is_atomic_aggregate_present,omitempty"`
	IsAggregatorPresent           bool                  `protobuf:"varint,4,opt,name=is_aggregator_present,json=isAggregatorPresent,proto3" json:"is_aggregator_present,omitempty"`
	IsOriginPresent               bool                  `protobuf:"varint,5,opt,name=is_origin_present,json=isOriginPresent,proto3" json:"is_origin_present,omitempty"`
	IsAsPathPresent               bool                  `protobuf:"varint,6,opt,name=is_as_path_present,json=isAsPathPresent,proto3" json:"is_as_path_present,omitempty"`
	IsCommunityPresent            bool                  `protobuf:"varint,7,opt,name=is_community_present,json=isCommunityPresent,proto3" json:"is_community_present,omitempty"`
	IsExtendedCommunityPresent    bool                  `protobuf:"varint,8,opt,name=is_extended_community_present,json=isExtendedCommunityPresent,proto3" json:"is_extended_community_present,omitempty"`
	IsSsaPresent                  bool                  `protobuf:"varint,9,opt,name=is_ssa_present,json=isSsaPresent,proto3" json:"is_ssa_present,omitempty"`
	IsConnectorPresent            bool                  `protobuf:"varint,10,opt,name=is_connector_present,json=isConnectorPresent,proto3" json:"is_connector_present,omitempty"`
	IsPmsiPresent                 bool                  `protobuf:"varint,11,opt,name=is_pmsi_present,json=isPmsiPresent,proto3" json:"is_pmsi_present,omitempty"`
	IsPppmpPresent                bool                  `protobuf:"varint,12,opt,name=is_pppmp_present,json=isPppmpPresent,proto3" json:"is_pppmp_present,omitempty"`
	IsAigpPresent                 bool                  `protobuf:"varint,13,opt,name=is_aigp_present,json=isAigpPresent,proto3" json:"is_aigp_present,omitempty"`
	IsPeDistinguisherLabelPresent bool                  `protobuf:"varint,14,opt,name=is_pe_distinguisher_label_present,json=isPeDistinguisherLabelPresent,proto3" json:"is_pe_distinguisher_label_present,omitempty"`
	IsLsAttributePresent          bool                  `protobuf:"varint,15,opt,name=is_ls_attribute_present,json=isLsAttributePresent,proto3" json:"is_ls_attribute_present,omitempty"`
	IsLabelIndexPresent           bool                  `protobuf:"varint,16,opt,name=is_label_index_present,json=isLabelIndexPresent,proto3" json:"is_label_index_present,omitempty"`
	NeighborAs                    uint32                `protobuf:"varint,17,opt,name=neighbor_as,json=neighborAs,proto3" json:"neighbor_as,omitempty"`
	AggregatorAs                  uint32                `protobuf:"varint,18,opt,name=aggregator_as,json=aggregatorAs,proto3" json:"aggregator_as,omitempty"`
	AggregatorAddress             string                `protobuf:"bytes,19,opt,name=aggregator_address,json=aggregatorAddress,proto3" json:"aggregator_address,omitempty"`
	Metric                        uint32                `protobuf:"varint,20,opt,name=metric,proto3" json:"metric,omitempty"`
	LocalPreference               uint32                `protobuf:"varint,21,opt,name=local_preference,json=localPreference,proto3" json:"local_preference,omitempty"`
	Origin                        uint32                `protobuf:"varint,22,opt,name=origin,proto3" json:"origin,omitempty"`
	AsPath                        string                `protobuf:"bytes,23,opt,name=as_path,json=asPath,proto3" json:"as_path,omitempty"`
	Community                     []uint32              `protobuf:"varint,24,rep,packed,name=community,proto3" json:"community,omitempty"`
	ExtendedCommunityFlags        uint32                `protobuf:"varint,25,opt,name=extended_community_flags,json=extendedCommunityFlags,proto3" json:"extended_community_flags,omitempty"`
	ExtendedCommunity             []uint32              `protobuf:"varint,26,rep,packed,name=extended_community,json=extendedCommunity,proto3" json:"extended_community,omitempty"`
	UnknownAttribute              []uint32              `protobuf:"varint,27,rep,packed,name=unknown_attribute,json=unknownAttribute,proto3" json:"unknown_attribute,omitempty"`
	Cluster                       []uint32              `protobuf:"varint,28,rep,packed,name=cluster,proto3" json:"cluster,omitempty"`
	Originator                    string                `protobuf:"bytes,29,opt,name=originator,proto3" json:"originator,omitempty"`
	L2Tpv3SessionId               uint32                `protobuf:"varint,30,opt,name=l2tpv3_session_id,json=l2tpv3SessionId,proto3" json:"l2tpv3_session_id,omitempty"`
	L2Tpv3Cookie                  []uint32              `protobuf:"varint,31,rep,packed,name=l2tpv3_cookie,json=l2tpv3Cookie,proto3" json:"l2tpv3_cookie,omitempty"`
	ConnectorType                 uint32                `protobuf:"varint,32,opt,name=connector_type,json=connectorType,proto3" json:"connector_type,omitempty"`
	ConnectorValue                []uint32              `protobuf:"varint,33,rep,packed,name=connector_value,json=connectorValue,proto3" json:"connector_value,omitempty"`
	AigpMetricValue               uint64                `protobuf:"varint,34,opt,name=aigp_metric_value,json=aigpMetricValue,proto3" json:"aigp_metric_value,omitempty"`
	PmsiType                      uint32                `protobuf:"varint,35,opt,name=pmsi_type,json=pmsiType,proto3" json:"pmsi_type,omitempty"`
	PmsiFlags                     uint32                `protobuf:"varint,36,opt,name=pmsi_flags,json=pmsiFlags,proto3" json:"pmsi_flags,omitempty"`
	PmsiLabel                     uint32                `protobuf:"varint,37,opt,name=pmsi_label,json=pmsiLabel,proto3" json:"pmsi_label,omitempty"`
	PmsiValue                     []uint32              `protobuf:"varint,38,rep,packed,name=pmsi_value,json=pmsiValue,proto3" json:"pmsi_value,omitempty"`
	PpmPvalue                     uint32                `protobuf:"varint,39,opt,name=ppm_pvalue,json=ppmPvalue,proto3" json:"ppm_pvalue,omitempty"`
	PeDistinguisherLabel          []*BgpPedistlblEntry_ `protobuf:"bytes,40,rep,name=pe_distinguisher_label,json=peDistinguisherLabel,proto3" json:"pe_distinguisher_label,omitempty"`
	LsAttr                        []uint32              `protobuf:"varint,41,rep,packed,name=ls_attr,json=lsAttr,proto3" json:"ls_attr,omitempty"`
	LabelIndexAttr                []uint32              `protobuf:"varint,42,rep,packed,name=label_index_attr,json=labelIndexAttr,proto3" json:"label_index_attr,omitempty"`
	TunnelEncap                   *BgpTunencapEntry_    `protobuf:"bytes,43,opt,name=tunnel_encap,json=tunnelEncap,proto3" json:"tunnel_encap,omitempty"`
	XXX_NoUnkeyedLiteral          struct{}              `json:"-"`
	XXX_unrecognized              []byte                `json:"-"`
	XXX_sizecache                 int32                 `json:"-"`
}

func (m *BgpCommonAttrEntry_) Reset()         { *m = BgpCommonAttrEntry_{} }
func (m *BgpCommonAttrEntry_) String() string { return proto.CompactTextString(m) }
func (*BgpCommonAttrEntry_) ProtoMessage()    {}
func (*BgpCommonAttrEntry_) Descriptor() ([]byte, []int) {
	return fileDescriptor_b328b6ce06ea8a38, []int{18}
}

func (m *BgpCommonAttrEntry_) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BgpCommonAttrEntry_.Unmarshal(m, b)
}
func (m *BgpCommonAttrEntry_) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BgpCommonAttrEntry_.Marshal(b, m, deterministic)
}
func (m *BgpCommonAttrEntry_) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpCommonAttrEntry_.Merge(m, src)
}
func (m *BgpCommonAttrEntry_) XXX_Size() int {
	return xxx_messageInfo_BgpCommonAttrEntry_.Size(m)
}
func (m *BgpCommonAttrEntry_) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpCommonAttrEntry_.DiscardUnknown(m)
}

var xxx_messageInfo_BgpCommonAttrEntry_ proto.InternalMessageInfo

func (m *BgpCommonAttrEntry_) GetIsMetricPresent() bool {
	if m != nil {
		return m.IsMetricPresent
	}
	return false
}

func (m *BgpCommonAttrEntry_) GetIsLocalPrefPresent() bool {
	if m != nil {
		return m.IsLocalPrefPresent
	}
	return false
}

func (m *BgpCommonAttrEntry_) GetIsAtomicAggregatePresent() bool {
	if m != nil {
		return m.IsAtomicAggregatePresent
	}
	return false
}

func (m *BgpCommonAttrEntry_) GetIsAggregatorPresent() bool {
	if m != nil {
		return m.IsAggregatorPresent
	}
	return false
}

func (m *BgpCommonAttrEntry_) GetIsOriginPresent() bool {
	if m != nil {
		return m.IsOriginPresent
	}
	return false
}

func (m *BgpCommonAttrEntry_) GetIsAsPathPresent() bool {
	if m != nil {
		return m.IsAsPathPresent
	}
	return false
}

func (m *BgpCommonAttrEntry_) GetIsCommunityPresent() bool {
	if m != nil {
		return m.IsCommunityPresent
	}
	return false
}

func (m *BgpCommonAttrEntry_) GetIsExtendedCommunityPresent() bool {
	if m != nil {
		return m.IsExtendedCommunityPresent
	}
	return false
}

func (m *BgpCommonAttrEntry_) GetIsSsaPresent() bool {
	if m != nil {
		return m.IsSsaPresent
	}
	return false
}

func (m *BgpCommonAttrEntry_) GetIsConnectorPresent() bool {
	if m != nil {
		return m.IsConnectorPresent
	}
	return false
}

func (m *BgpCommonAttrEntry_) GetIsPmsiPresent() bool {
	if m != nil {
		return m.IsPmsiPresent
	}
	return false
}

func (m *BgpCommonAttrEntry_) GetIsPppmpPresent() bool {
	if m != nil {
		return m.IsPppmpPresent
	}
	return false
}

func (m *BgpCommonAttrEntry_) GetIsAigpPresent() bool {
	if m != nil {
		return m.IsAigpPresent
	}
	return false
}

func (m *BgpCommonAttrEntry_) GetIsPeDistinguisherLabelPresent() bool {
	if m != nil {
		return m.IsPeDistinguisherLabelPresent
	}
	return false
}

func (m *BgpCommonAttrEntry_) GetIsLsAttributePresent() bool {
	if m != nil {
		return m.IsLsAttributePresent
	}
	return false
}

func (m *BgpCommonAttrEntry_) GetIsLabelIndexPresent() bool {
	if m != nil {
		return m.IsLabelIndexPresent
	}
	return false
}

func (m *BgpCommonAttrEntry_) GetNeighborAs() uint32 {
	if m != nil {
		return m.NeighborAs
	}
	return 0
}

func (m *BgpCommonAttrEntry_) GetAggregatorAs() uint32 {
	if m != nil {
		return m.AggregatorAs
	}
	return 0
}

func (m *BgpCommonAttrEntry_) GetAggregatorAddress() string {
	if m != nil {
		return m.AggregatorAddress
	}
	return ""
}

func (m *BgpCommonAttrEntry_) GetMetric() uint32 {
	if m != nil {
		return m.Metric
	}
	return 0
}

func (m *BgpCommonAttrEntry_) GetLocalPreference() uint32 {
	if m != nil {
		return m.LocalPreference
	}
	return 0
}

func (m *BgpCommonAttrEntry_) GetOrigin() uint32 {
	if m != nil {
		return m.Origin
	}
	return 0
}

func (m *BgpCommonAttrEntry_) GetAsPath() string {
	if m != nil {
		return m.AsPath
	}
	return ""
}

func (m *BgpCommonAttrEntry_) GetCommunity() []uint32 {
	if m != nil {
		return m.Community
	}
	return nil
}

func (m *BgpCommonAttrEntry_) GetExtendedCommunityFlags() uint32 {
	if m != nil {
		return m.ExtendedCommunityFlags
	}
	return 0
}

func (m *BgpCommonAttrEntry_) GetExtendedCommunity() []uint32 {
	if m != nil {
		return m.ExtendedCommunity
	}
	return nil
}

func (m *BgpCommonAttrEntry_) GetUnknownAttribute() []uint32 {
	if m != nil {
		return m.UnknownAttribute
	}
	return nil
}

func (m *BgpCommonAttrEntry_) GetCluster() []uint32 {
	if m != nil {
		return m.Cluster
	}
	return nil
}

func (m *BgpCommonAttrEntry_) GetOriginator() string {
	if m != nil {
		return m.Originator
	}
	return ""
}

func (m *BgpCommonAttrEntry_) GetL2Tpv3SessionId() uint32 {
	if m != nil {
		return m.L2Tpv3SessionId
	}
	return 0
}

func (m *BgpCommonAttrEntry_) GetL2Tpv3Cookie() []uint32 {
	if m != nil {
		return m.L2Tpv3Cookie
	}
	return nil
}

func (m *BgpCommonAttrEntry_) GetConnectorType() uint32 {
	if m != nil {
		return m.ConnectorType
	}
	return 0
}

func (m *BgpCommonAttrEntry_) GetConnectorValue() []uint32 {
	if m != nil {
		return m.ConnectorValue
	}
	return nil
}

func (m *BgpCommonAttrEntry_) GetAigpMetricValue() uint64 {
	if m != nil {
		return m.AigpMetricValue
	}
	return 0
}

func (m *BgpCommonAttrEntry_) GetPmsiType() uint32 {
	if m != nil {
		return m.PmsiType
	}
	return 0
}

func (m *BgpCommonAttrEntry_) GetPmsiFlags() uint32 {
	if m != nil {
		return m.PmsiFlags
	}
	return 0
}

func (m *BgpCommonAttrEntry_) GetPmsiLabel() uint32 {
	if m != nil {
		return m.PmsiLabel
	}
	return 0
}

func (m *BgpCommonAttrEntry_) GetPmsiValue() []uint32 {
	if m != nil {
		return m.PmsiValue
	}
	return nil
}

func (m *BgpCommonAttrEntry_) GetPpmPvalue() uint32 {
	if m != nil {
		return m.PpmPvalue
	}
	return 0
}

func (m *BgpCommonAttrEntry_) GetPeDistinguisherLabel() []*BgpPedistlblEntry_ {
	if m != nil {
		return m.PeDistinguisherLabel
	}
	return nil
}

func (m *BgpCommonAttrEntry_) GetLsAttr() []uint32 {
	if m != nil {
		return m.LsAttr
	}
	return nil
}

func (m *BgpCommonAttrEntry_) GetLabelIndexAttr() []uint32 {
	if m != nil {
		return m.LabelIndexAttr
	}
	return nil
}

func (m *BgpCommonAttrEntry_) GetTunnelEncap() *BgpTunencapEntry_ {
	if m != nil {
		return m.TunnelEncap
	}
	return nil
}

type BgpAttrRnhAddrT struct {
	Len                  string   `protobuf:"bytes,1,opt,name=len,proto3" json:"len,omitempty"`
	Ipv4Address          string   `protobuf:"bytes,2,opt,name=ipv4_address,json=ipv4Address,proto3" json:"ipv4_address,omitempty"`
	Ipv6Address          string   `protobuf:"bytes,3,opt,name=ipv6_address,json=ipv6Address,proto3" json:"ipv6_address,omitempty"`
	MacAddress           string   `protobuf:"bytes,4,opt,name=mac_address,json=macAddress,proto3" json:"mac_address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BgpAttrRnhAddrT) Reset()         { *m = BgpAttrRnhAddrT{} }
func (m *BgpAttrRnhAddrT) String() string { return proto.CompactTextString(m) }
func (*BgpAttrRnhAddrT) ProtoMessage()    {}
func (*BgpAttrRnhAddrT) Descriptor() ([]byte, []int) {
	return fileDescriptor_b328b6ce06ea8a38, []int{19}
}

func (m *BgpAttrRnhAddrT) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BgpAttrRnhAddrT.Unmarshal(m, b)
}
func (m *BgpAttrRnhAddrT) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BgpAttrRnhAddrT.Marshal(b, m, deterministic)
}
func (m *BgpAttrRnhAddrT) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpAttrRnhAddrT.Merge(m, src)
}
func (m *BgpAttrRnhAddrT) XXX_Size() int {
	return xxx_messageInfo_BgpAttrRnhAddrT.Size(m)
}
func (m *BgpAttrRnhAddrT) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpAttrRnhAddrT.DiscardUnknown(m)
}

var xxx_messageInfo_BgpAttrRnhAddrT proto.InternalMessageInfo

func (m *BgpAttrRnhAddrT) GetLen() string {
	if m != nil {
		return m.Len
	}
	return ""
}

func (m *BgpAttrRnhAddrT) GetIpv4Address() string {
	if m != nil {
		return m.Ipv4Address
	}
	return ""
}

func (m *BgpAttrRnhAddrT) GetIpv6Address() string {
	if m != nil {
		return m.Ipv6Address
	}
	return ""
}

func (m *BgpAttrRnhAddrT) GetMacAddress() string {
	if m != nil {
		return m.MacAddress
	}
	return ""
}

type BgpAttr_ struct {
	IsAsPath2Byte               bool                 `protobuf:"varint,1,opt,name=is_as_path2_byte,json=isAsPath2Byte,proto3" json:"is_as_path2_byte,omitempty"`
	IsApplicationGatewayPresent bool                 `protobuf:"varint,2,opt,name=is_application_gateway_present,json=isApplicationGatewayPresent,proto3" json:"is_application_gateway_present,omitempty"`
	IsAttrSetPresent            bool                 `protobuf:"varint,3,opt,name=is_attr_set_present,json=isAttrSetPresent,proto3" json:"is_attr_set_present,omitempty"`
	SetAigpInboundIgp           bool                 `protobuf:"varint,4,opt,name=set_aigp_inbound_igp,json=setAigpInboundIgp,proto3" json:"set_aigp_inbound_igp,omitempty"`
	SetAigpInboundMetric        bool                 `protobuf:"varint,5,opt,name=set_aigp_inbound_metric,json=setAigpInboundMetric,proto3" json:"set_aigp_inbound_metric,omitempty"`
	IsRnhPresent                bool                 `protobuf:"varint,6,opt,name=is_rnh_present,json=isRnhPresent,proto3" json:"is_rnh_present,omitempty"`
	IsRibrnhPresent             bool                 `protobuf:"varint,7,opt,name=is_ribrnh_present,json=isRibrnhPresent,proto3" json:"is_ribrnh_present,omitempty"`
	AttributeKeyNumber          uint32               `protobuf:"varint,8,opt,name=attribute_key_number,json=attributeKeyNumber,proto3" json:"attribute_key_number,omitempty"`
	AttributeReuseIdConfig      bool                 `protobuf:"varint,9,opt,name=attribute_reuse_id_config,json=attributeReuseIdConfig,proto3" json:"attribute_reuse_id_config,omitempty"`
	AttributeReuseIdMaxId       uint32               `protobuf:"varint,10,opt,name=attribute_reuse_id_max_id,json=attributeReuseIdMaxId,proto3" json:"attribute_reuse_id_max_id,omitempty"`
	AttributeReuseIdNode        uint32               `protobuf:"varint,11,opt,name=attribute_reuse_id_node,json=attributeReuseIdNode,proto3" json:"attribute_reuse_id_node,omitempty"`
	AttributeReuseIdCurrent     uint32               `protobuf:"varint,12,opt,name=attribute_reuse_id_current,json=attributeReuseIdCurrent,proto3" json:"attribute_reuse_id_current,omitempty"`
	AttributeReuseIdKeys        uint32               `protobuf:"varint,13,opt,name=attribute_reuse_id_keys,json=attributeReuseIdKeys,proto3" json:"attribute_reuse_id_keys,omitempty"`
	AttributeReuseIdRecoverSec  uint32               `protobuf:"varint,14,opt,name=attribute_reuse_id_recover_sec,json=attributeReuseIdRecoverSec,proto3" json:"attribute_reuse_id_recover_sec,omitempty"`
	VpnDistinguisher            uint32               `protobuf:"varint,15,opt,name=vpn_distinguisher,json=vpnDistinguisher,proto3" json:"vpn_distinguisher,omitempty"`
	CommonAttributes            *BgpCommonAttrEntry_ `protobuf:"bytes,16,opt,name=common_attributes,json=commonAttributes,proto3" json:"common_attributes,omitempty"`
	AttrSet                     *BgpCommonAttrEntry_ `protobuf:"bytes,17,opt,name=attr_set,json=attrSet,proto3" json:"attr_set,omitempty"`
	RnhType                     uint32               `protobuf:"varint,18,opt,name=rnh_type,json=rnhType,proto3" json:"rnh_type,omitempty"`
	RnhLen                      uint32               `protobuf:"varint,19,opt,name=rnh_len,json=rnhLen,proto3" json:"rnh_len,omitempty"`
	RnhAddrLen                  uint32               `protobuf:"varint,20,opt,name=rnh_addr_len,json=rnhAddrLen,proto3" json:"rnh_addr_len,omitempty"`
	RnhAddr                     *BgpAttrRnhAddrT     `protobuf:"bytes,21,opt,name=rnh_addr,json=rnhAddr,proto3" json:"rnh_addr,omitempty"`
	RibrnhTable                 uint32               `protobuf:"varint,22,opt,name=ribrnh_table,json=ribrnhTable,proto3" json:"ribrnh_table,omitempty"`
	RibrnhMac                   string               `protobuf:"bytes,23,opt,name=ribrnh_mac,json=ribrnhMac,proto3" json:"ribrnh_mac,omitempty"`
	RibrnhIp                    *BgpAddrtype         `protobuf:"bytes,24,opt,name=ribrnh_ip,json=ribrnhIp,proto3" json:"ribrnh_ip,omitempty"`
	RibrnhipTable               uint32               `protobuf:"varint,25,opt,name=ribrnhip_table,json=ribrnhipTable,proto3" json:"ribrnhip_table,omitempty"`
	RibrnhVni                   uint32               `protobuf:"varint,26,opt,name=ribrnh_vni,json=ribrnhVni,proto3" json:"ribrnh_vni,omitempty"`
	RibrnhEncap                 uint32               `protobuf:"varint,27,opt,name=ribrnh_encap,json=ribrnhEncap,proto3" json:"ribrnh_encap,omitempty"`
	XXX_NoUnkeyedLiteral        struct{}             `json:"-"`
	XXX_unrecognized            []byte               `json:"-"`
	XXX_sizecache               int32                `json:"-"`
}

func (m *BgpAttr_) Reset()         { *m = BgpAttr_{} }
func (m *BgpAttr_) String() string { return proto.CompactTextString(m) }
func (*BgpAttr_) ProtoMessage()    {}
func (*BgpAttr_) Descriptor() ([]byte, []int) {
	return fileDescriptor_b328b6ce06ea8a38, []int{20}
}

func (m *BgpAttr_) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BgpAttr_.Unmarshal(m, b)
}
func (m *BgpAttr_) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BgpAttr_.Marshal(b, m, deterministic)
}
func (m *BgpAttr_) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpAttr_.Merge(m, src)
}
func (m *BgpAttr_) XXX_Size() int {
	return xxx_messageInfo_BgpAttr_.Size(m)
}
func (m *BgpAttr_) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpAttr_.DiscardUnknown(m)
}

var xxx_messageInfo_BgpAttr_ proto.InternalMessageInfo

func (m *BgpAttr_) GetIsAsPath2Byte() bool {
	if m != nil {
		return m.IsAsPath2Byte
	}
	return false
}

func (m *BgpAttr_) GetIsApplicationGatewayPresent() bool {
	if m != nil {
		return m.IsApplicationGatewayPresent
	}
	return false
}

func (m *BgpAttr_) GetIsAttrSetPresent() bool {
	if m != nil {
		return m.IsAttrSetPresent
	}
	return false
}

func (m *BgpAttr_) GetSetAigpInboundIgp() bool {
	if m != nil {
		return m.SetAigpInboundIgp
	}
	return false
}

func (m *BgpAttr_) GetSetAigpInboundMetric() bool {
	if m != nil {
		return m.SetAigpInboundMetric
	}
	return false
}

func (m *BgpAttr_) GetIsRnhPresent() bool {
	if m != nil {
		return m.IsRnhPresent
	}
	return false
}

func (m *BgpAttr_) GetIsRibrnhPresent() bool {
	if m != nil {
		return m.IsRibrnhPresent
	}
	return false
}

func (m *BgpAttr_) GetAttributeKeyNumber() uint32 {
	if m != nil {
		return m.AttributeKeyNumber
	}
	return 0
}

func (m *BgpAttr_) GetAttributeReuseIdConfig() bool {
	if m != nil {
		return m.AttributeReuseIdConfig
	}
	return false
}

func (m *BgpAttr_) GetAttributeReuseIdMaxId() uint32 {
	if m != nil {
		return m.AttributeReuseIdMaxId
	}
	return 0
}

func (m *BgpAttr_) GetAttributeReuseIdNode() uint32 {
	if m != nil {
		return m.AttributeReuseIdNode
	}
	return 0
}

func (m *BgpAttr_) GetAttributeReuseIdCurrent() uint32 {
	if m != nil {
		return m.AttributeReuseIdCurrent
	}
	return 0
}

func (m *BgpAttr_) GetAttributeReuseIdKeys() uint32 {
	if m != nil {
		return m.AttributeReuseIdKeys
	}
	return 0
}

func (m *BgpAttr_) GetAttributeReuseIdRecoverSec() uint32 {
	if m != nil {
		return m.AttributeReuseIdRecoverSec
	}
	return 0
}

func (m *BgpAttr_) GetVpnDistinguisher() uint32 {
	if m != nil {
		return m.VpnDistinguisher
	}
	return 0
}

func (m *BgpAttr_) GetCommonAttributes() *BgpCommonAttrEntry_ {
	if m != nil {
		return m.CommonAttributes
	}
	return nil
}

func (m *BgpAttr_) GetAttrSet() *BgpCommonAttrEntry_ {
	if m != nil {
		return m.AttrSet
	}
	return nil
}

func (m *BgpAttr_) GetRnhType() uint32 {
	if m != nil {
		return m.RnhType
	}
	return 0
}

func (m *BgpAttr_) GetRnhLen() uint32 {
	if m != nil {
		return m.RnhLen
	}
	return 0
}

func (m *BgpAttr_) GetRnhAddrLen() uint32 {
	if m != nil {
		return m.RnhAddrLen
	}
	return 0
}

func (m *BgpAttr_) GetRnhAddr() *BgpAttrRnhAddrT {
	if m != nil {
		return m.RnhAddr
	}
	return nil
}

func (m *BgpAttr_) GetRibrnhTable() uint32 {
	if m != nil {
		return m.RibrnhTable
	}
	return 0
}

func (m *BgpAttr_) GetRibrnhMac() string {
	if m != nil {
		return m.RibrnhMac
	}
	return ""
}

func (m *BgpAttr_) GetRibrnhIp() *BgpAddrtype {
	if m != nil {
		return m.RibrnhIp
	}
	return nil
}

func (m *BgpAttr_) GetRibrnhipTable() uint32 {
	if m != nil {
		return m.RibrnhipTable
	}
	return 0
}

func (m *BgpAttr_) GetRibrnhVni() uint32 {
	if m != nil {
		return m.RibrnhVni
	}
	return 0
}

func (m *BgpAttr_) GetRibrnhEncap() uint32 {
	if m != nil {
		return m.RibrnhEncap
	}
	return 0
}

type BgpPathBag struct {
	NoPath                   bool         `protobuf:"varint,1,opt,name=no_path,json=noPath,proto3" json:"no_path,omitempty"`
	AfName                   string       `protobuf:"bytes,2,opt,name=af_name,json=afName,proto3" json:"af_name,omitempty"`
	NeighborAddress          *BgpAddrtype `protobuf:"bytes,3,opt,name=neighbor_address,json=neighborAddress,proto3" json:"neighbor_address,omitempty"`
	ProcessInstanceId        uint32       `protobuf:"varint,4,opt,name=process_instance_id,json=processInstanceId,proto3" json:"process_instance_id,omitempty"`
	LabelOor                 bool         `protobuf:"varint,5,opt,name=label_oor,json=labelOor,proto3" json:"label_oor,omitempty"`
	LabelOOrVersion          uint32       `protobuf:"varint,6,opt,name=label_o_or_version,json=labelOOrVersion,proto3" json:"label_o_or_version,omitempty"`
	LabelFail                bool         `protobuf:"varint,7,opt,name=label_fail,json=labelFail,proto3" json:"label_fail,omitempty"`
	PathInformation          *BgpPath_    `protobuf:"bytes,8,opt,name=path_information,json=pathInformation,proto3" json:"path_information,omitempty"`
	AttributesAfterPolicyIn  *BgpAttr_    `protobuf:"bytes,9,opt,name=attributes_after_policy_in,json=attributesAfterPolicyIn,proto3" json:"attributes_after_policy_in,omitempty"`
	RouteDistinguisher       string       `protobuf:"bytes,10,opt,name=route_distinguisher,json=routeDistinguisher,proto3" json:"route_distinguisher,omitempty"`
	SourceRouteDistinguisher string       `protobuf:"bytes,11,opt,name=source_route_distinguisher,json=sourceRouteDistinguisher,proto3" json:"source_route_distinguisher,omitempty"`
	PrefixVersion            uint32       `protobuf:"varint,12,opt,name=prefix_version,json=prefixVersion,proto3" json:"prefix_version,omitempty"`
	VrfName                  string       `protobuf:"bytes,13,opt,name=vrf_name,json=vrfName,proto3" json:"vrf_name,omitempty"`
	SourceVrfName            string       `protobuf:"bytes,14,opt,name=source_vrf_name,json=sourceVrfName,proto3" json:"source_vrf_name,omitempty"`
	SrcafName                string       `protobuf:"bytes,15,opt,name=srcaf_name,json=srcafName,proto3" json:"srcaf_name,omitempty"`
	XXX_NoUnkeyedLiteral     struct{}     `json:"-"`
	XXX_unrecognized         []byte       `json:"-"`
	XXX_sizecache            int32        `json:"-"`
}

func (m *BgpPathBag) Reset()         { *m = BgpPathBag{} }
func (m *BgpPathBag) String() string { return proto.CompactTextString(m) }
func (*BgpPathBag) ProtoMessage()    {}
func (*BgpPathBag) Descriptor() ([]byte, []int) {
	return fileDescriptor_b328b6ce06ea8a38, []int{21}
}

func (m *BgpPathBag) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BgpPathBag.Unmarshal(m, b)
}
func (m *BgpPathBag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BgpPathBag.Marshal(b, m, deterministic)
}
func (m *BgpPathBag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpPathBag.Merge(m, src)
}
func (m *BgpPathBag) XXX_Size() int {
	return xxx_messageInfo_BgpPathBag.Size(m)
}
func (m *BgpPathBag) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpPathBag.DiscardUnknown(m)
}

var xxx_messageInfo_BgpPathBag proto.InternalMessageInfo

func (m *BgpPathBag) GetNoPath() bool {
	if m != nil {
		return m.NoPath
	}
	return false
}

func (m *BgpPathBag) GetAfName() string {
	if m != nil {
		return m.AfName
	}
	return ""
}

func (m *BgpPathBag) GetNeighborAddress() *BgpAddrtype {
	if m != nil {
		return m.NeighborAddress
	}
	return nil
}

func (m *BgpPathBag) GetProcessInstanceId() uint32 {
	if m != nil {
		return m.ProcessInstanceId
	}
	return 0
}

func (m *BgpPathBag) GetLabelOor() bool {
	if m != nil {
		return m.LabelOor
	}
	return false
}

func (m *BgpPathBag) GetLabelOOrVersion() uint32 {
	if m != nil {
		return m.LabelOOrVersion
	}
	return 0
}

func (m *BgpPathBag) GetLabelFail() bool {
	if m != nil {
		return m.LabelFail
	}
	return false
}

func (m *BgpPathBag) GetPathInformation() *BgpPath_ {
	if m != nil {
		return m.PathInformation
	}
	return nil
}

func (m *BgpPathBag) GetAttributesAfterPolicyIn() *BgpAttr_ {
	if m != nil {
		return m.AttributesAfterPolicyIn
	}
	return nil
}

func (m *BgpPathBag) GetRouteDistinguisher() string {
	if m != nil {
		return m.RouteDistinguisher
	}
	return ""
}

func (m *BgpPathBag) GetSourceRouteDistinguisher() string {
	if m != nil {
		return m.SourceRouteDistinguisher
	}
	return ""
}

func (m *BgpPathBag) GetPrefixVersion() uint32 {
	if m != nil {
		return m.PrefixVersion
	}
	return 0
}

func (m *BgpPathBag) GetVrfName() string {
	if m != nil {
		return m.VrfName
	}
	return ""
}

func (m *BgpPathBag) GetSourceVrfName() string {
	if m != nil {
		return m.SourceVrfName
	}
	return ""
}

func (m *BgpPathBag) GetSrcafName() string {
	if m != nil {
		return m.SrcafName
	}
	return ""
}

type BgpTimespec struct {
	Seconds              uint32   `protobuf:"varint,1,opt,name=seconds,proto3" json:"seconds,omitempty"`
	Nanoseconds          uint32   `protobuf:"varint,2,opt,name=nanoseconds,proto3" json:"nanoseconds,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BgpTimespec) Reset()         { *m = BgpTimespec{} }
func (m *BgpTimespec) String() string { return proto.CompactTextString(m) }
func (*BgpTimespec) ProtoMessage()    {}
func (*BgpTimespec) Descriptor() ([]byte, []int) {
	return fileDescriptor_b328b6ce06ea8a38, []int{22}
}

func (m *BgpTimespec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BgpTimespec.Unmarshal(m, b)
}
func (m *BgpTimespec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BgpTimespec.Marshal(b, m, deterministic)
}
func (m *BgpTimespec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpTimespec.Merge(m, src)
}
func (m *BgpTimespec) XXX_Size() int {
	return xxx_messageInfo_BgpTimespec.Size(m)
}
func (m *BgpTimespec) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpTimespec.DiscardUnknown(m)
}

var xxx_messageInfo_BgpTimespec proto.InternalMessageInfo

func (m *BgpTimespec) GetSeconds() uint32 {
	if m != nil {
		return m.Seconds
	}
	return 0
}

func (m *BgpTimespec) GetNanoseconds() uint32 {
	if m != nil {
		return m.Nanoseconds
	}
	return 0
}

type BgpPathElemBag struct {
	PelemPathId                     uint32       `protobuf:"varint,1,opt,name=pelem_path_id,json=pelemPathId,proto3" json:"pelem_path_id,omitempty"`
	PelemVersion                    uint32       `protobuf:"varint,2,opt,name=pelem_version,json=pelemVersion,proto3" json:"pelem_version,omitempty"`
	PelemFlags                      uint32       `protobuf:"varint,3,opt,name=pelem_flags,json=pelemFlags,proto3" json:"pelem_flags,omitempty"`
	PelemGwMetric                   uint32       `protobuf:"varint,4,opt,name=pelem_gw_metric,json=pelemGwMetric,proto3" json:"pelem_gw_metric,omitempty"`
	PelemPathFlags                  uint64       `protobuf:"varint,5,opt,name=pelem_path_flags,json=pelemPathFlags,proto3" json:"pelem_path_flags,omitempty"`
	PelemPathNexthop                *BgpAddrtype `protobuf:"bytes,6,opt,name=pelem_path_nexthop,json=pelemPathNexthop,proto3" json:"pelem_path_nexthop,omitempty"`
	NhTunnel                        *BgpTeTunnel `protobuf:"bytes,7,opt,name=nh_tunnel,json=nhTunnel,proto3" json:"nh_tunnel,omitempty"`
	PelemPathNeighborAddr           *BgpAddrtype `protobuf:"bytes,8,opt,name=pelem_path_neighbor_addr,json=pelemPathNeighborAddr,proto3" json:"pelem_path_neighbor_addr,omitempty"`
	PelemPathPeerPathId             uint32       `protobuf:"varint,9,opt,name=pelem_path_peer_path_id,json=pelemPathPeerPathId,proto3" json:"pelem_path_peer_path_id,omitempty"`
	PelemTableAttrVersion           uint32       `protobuf:"varint,10,opt,name=pelem_table_attr_version,json=pelemTableAttrVersion,proto3" json:"pelem_table_attr_version,omitempty"`
	PelemPathTableAttrVersion       uint32       `protobuf:"varint,11,opt,name=pelem_path_table_attr_version,json=pelemPathTableAttrVersion,proto3" json:"pelem_path_table_attr_version,omitempty"`
	PelemNoBestpathTableAttrVersion uint32       `protobuf:"varint,12,opt,name=pelem_no_bestpath_table_attr_version,json=pelemNoBestpathTableAttrVersion,proto3" json:"pelem_no_bestpath_table_attr_version,omitempty"`
	PelemNoAddpathTableAttrVersion  uint32       `protobuf:"varint,13,opt,name=pelem_no_addpath_table_attr_version,json=pelemNoAddpathTableAttrVersion,proto3" json:"pelem_no_addpath_table_attr_version,omitempty"`
	IsPermPathPelem                 bool         `protobuf:"varint,14,opt,name=is_perm_path_pelem,json=isPermPathPelem,proto3" json:"is_perm_path_pelem,omitempty"`
	XXX_NoUnkeyedLiteral            struct{}     `json:"-"`
	XXX_unrecognized                []byte       `json:"-"`
	XXX_sizecache                   int32        `json:"-"`
}

func (m *BgpPathElemBag) Reset()         { *m = BgpPathElemBag{} }
func (m *BgpPathElemBag) String() string { return proto.CompactTextString(m) }
func (*BgpPathElemBag) ProtoMessage()    {}
func (*BgpPathElemBag) Descriptor() ([]byte, []int) {
	return fileDescriptor_b328b6ce06ea8a38, []int{23}
}

func (m *BgpPathElemBag) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BgpPathElemBag.Unmarshal(m, b)
}
func (m *BgpPathElemBag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BgpPathElemBag.Marshal(b, m, deterministic)
}
func (m *BgpPathElemBag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpPathElemBag.Merge(m, src)
}
func (m *BgpPathElemBag) XXX_Size() int {
	return xxx_messageInfo_BgpPathElemBag.Size(m)
}
func (m *BgpPathElemBag) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpPathElemBag.DiscardUnknown(m)
}

var xxx_messageInfo_BgpPathElemBag proto.InternalMessageInfo

func (m *BgpPathElemBag) GetPelemPathId() uint32 {
	if m != nil {
		return m.PelemPathId
	}
	return 0
}

func (m *BgpPathElemBag) GetPelemVersion() uint32 {
	if m != nil {
		return m.PelemVersion
	}
	return 0
}

func (m *BgpPathElemBag) GetPelemFlags() uint32 {
	if m != nil {
		return m.PelemFlags
	}
	return 0
}

func (m *BgpPathElemBag) GetPelemGwMetric() uint32 {
	if m != nil {
		return m.PelemGwMetric
	}
	return 0
}

func (m *BgpPathElemBag) GetPelemPathFlags() uint64 {
	if m != nil {
		return m.PelemPathFlags
	}
	return 0
}

func (m *BgpPathElemBag) GetPelemPathNexthop() *BgpAddrtype {
	if m != nil {
		return m.PelemPathNexthop
	}
	return nil
}

func (m *BgpPathElemBag) GetNhTunnel() *BgpTeTunnel {
	if m != nil {
		return m.NhTunnel
	}
	return nil
}

func (m *BgpPathElemBag) GetPelemPathNeighborAddr() *BgpAddrtype {
	if m != nil {
		return m.PelemPathNeighborAddr
	}
	return nil
}

func (m *BgpPathElemBag) GetPelemPathPeerPathId() uint32 {
	if m != nil {
		return m.PelemPathPeerPathId
	}
	return 0
}

func (m *BgpPathElemBag) GetPelemTableAttrVersion() uint32 {
	if m != nil {
		return m.PelemTableAttrVersion
	}
	return 0
}

func (m *BgpPathElemBag) GetPelemPathTableAttrVersion() uint32 {
	if m != nil {
		return m.PelemPathTableAttrVersion
	}
	return 0
}

func (m *BgpPathElemBag) GetPelemNoBestpathTableAttrVersion() uint32 {
	if m != nil {
		return m.PelemNoBestpathTableAttrVersion
	}
	return 0
}

func (m *BgpPathElemBag) GetPelemNoAddpathTableAttrVersion() uint32 {
	if m != nil {
		return m.PelemNoAddpathTableAttrVersion
	}
	return 0
}

func (m *BgpPathElemBag) GetIsPermPathPelem() bool {
	if m != nil {
		return m.IsPermPathPelem
	}
	return false
}

type BgpNetBag struct {
	AfName                         string             `protobuf:"bytes,50,opt,name=af_name,json=afName,proto3" json:"af_name,omitempty"`
	ProcessInstanceId              uint32             `protobuf:"varint,51,opt,name=process_instance_id,json=processInstanceId,proto3" json:"process_instance_id,omitempty"`
	BgpPrefix                      *BgpPrefixtype     `protobuf:"bytes,52,opt,name=bgp_prefix,json=bgpPrefix,proto3" json:"bgp_prefix,omitempty"`
	HasInconsistentPaths           bool               `protobuf:"varint,53,opt,name=has_inconsistent_paths,json=hasInconsistentPaths,proto3" json:"has_inconsistent_paths,omitempty"`
	IsNetAggregationSuppressed     bool               `protobuf:"varint,54,opt,name=is_net_aggregation_suppressed,json=isNetAggregationSuppressed,proto3" json:"is_net_aggregation_suppressed,omitempty"`
	IsNetLdpSignaled               bool               `protobuf:"varint,55,opt,name=is_net_ldp_signaled,json=isNetLdpSignaled,proto3" json:"is_net_ldp_signaled,omitempty"`
	TableVersion                   uint32             `protobuf:"varint,56,opt,name=table_version,json=tableVersion,proto3" json:"table_version,omitempty"`
	TableBribVersion               uint32             `protobuf:"varint,57,opt,name=table_brib_version,json=tableBribVersion,proto3" json:"table_brib_version,omitempty"`
	LocalPeersAdvertisedTo         []*BgpAdvinfoType_ `protobuf:"bytes,58,rep,name=local_peers_advertised_to,json=localPeersAdvertisedTo,proto3" json:"local_peers_advertised_to,omitempty"`
	PePeersAdvertisedTo            []*BgpAdvinfoType_ `protobuf:"bytes,59,rep,name=pe_peers_advertised_to,json=pePeersAdvertisedTo,proto3" json:"pe_peers_advertised_to,omitempty"`
	BestPathOrrBitfield            []*BgpAdvinfoType_ `protobuf:"bytes,60,rep,name=best_path_orr_bitfield,json=bestPathOrrBitfield,proto3" json:"best_path_orr_bitfield,omitempty"`
	AddPathOrrBitfield             []*BgpAdvinfoType_ `protobuf:"bytes,61,rep,name=add_path_orr_bitfield,json=addPathOrrBitfield,proto3" json:"add_path_orr_bitfield,omitempty"`
	AdvertisedtoPe                 bool               `protobuf:"varint,62,opt,name=advertisedto_pe,json=advertisedtoPe,proto3" json:"advertisedto_pe,omitempty"`
	LocalProcessInstancePath       []*BgpPathBag      `protobuf:"bytes,63,rep,name=local_process_instance_path,json=localProcessInstancePath,proto3" json:"local_process_instance_path,omitempty"`
	ActiveProcessInstancePath      []*BgpPathBag      `protobuf:"bytes,64,rep,name=active_process_instance_path,json=activeProcessInstancePath,proto3" json:"active_process_instance_path,omitempty"`
	HasLocalLabel                  bool               `protobuf:"varint,65,opt,name=has_local_label,json=hasLocalLabel,proto3" json:"has_local_label,omitempty"`
	NetLocalLabel                  uint32             `protobuf:"varint,66,opt,name=net_local_label,json=netLocalLabel,proto3" json:"net_local_label,omitempty"`
	NetLocalLabelRewrite           bool               `protobuf:"varint,67,opt,name=net_local_label_rewrite,json=netLocalLabelRewrite,proto3" json:"net_local_label_rewrite,omitempty"`
	NetLocalLabelSrgb              bool               `protobuf:"varint,68,opt,name=net_local_label_srgb,json=netLocalLabelSrgb,proto3" json:"net_local_label_srgb,omitempty"`
	HasLblRetained                 bool               `protobuf:"varint,69,opt,name=has_lbl_retained,json=hasLblRetained,proto3" json:"has_lbl_retained,omitempty"`
	RouteDistinguisher             string             `protobuf:"bytes,70,opt,name=route_distinguisher,json=routeDistinguisher,proto3" json:"route_distinguisher,omitempty"`
	VrfName                        string             `protobuf:"bytes,71,opt,name=vrf_name,json=vrfName,proto3" json:"vrf_name,omitempty"`
	NetFlags                       uint32             `protobuf:"varint,72,opt,name=net_flags,json=netFlags,proto3" json:"net_flags,omitempty"`
	NetExtendedFlags               uint32             `protobuf:"varint,73,opt,name=net_extended_flags,json=netExtendedFlags,proto3" json:"net_extended_flags,omitempty"`
	NetMultipath                   bool               `protobuf:"varint,74,opt,name=net_multipath,json=netMultipath,proto3" json:"net_multipath,omitempty"`
	NetEibgpMultipath              bool               `protobuf:"varint,75,opt,name=net_eibgp_multipath,json=netEibgpMultipath,proto3" json:"net_eibgp_multipath,omitempty"`
	NetBackupAvailable             bool               `protobuf:"varint,76,opt,name=net_backup_available,json=netBackupAvailable,proto3" json:"net_backup_available,omitempty"`
	NetBackupLabelRewriteAvailable bool               `protobuf:"varint,77,opt,name=net_backup_label_rewrite_available,json=netBackupLabelRewriteAvailable,proto3" json:"net_backup_label_rewrite_available,omitempty"`
	RibFailed                      bool               `protobuf:"varint,78,opt,name=rib_failed,json=ribFailed,proto3" json:"rib_failed,omitempty"`
	VersionTimestamp               *BgpTimespec       `protobuf:"bytes,79,opt,name=version_timestamp,json=versionTimestamp,proto3" json:"version_timestamp,omitempty"`
	VersionAge                     *BgpTimespec       `protobuf:"bytes,80,opt,name=version_age,json=versionAge,proto3" json:"version_age,omitempty"`
	LocalPathElement               []*BgpPathElemBag  `protobuf:"bytes,81,rep,name=local_path_element,json=localPathElement,proto3" json:"local_path_element,omitempty"`
	ActivePathElement              []*BgpPathElemBag  `protobuf:"bytes,82,rep,name=active_path_element,json=activePathElement,proto3" json:"active_path_element,omitempty"`
	GatewayArray                   uint32             `protobuf:"varint,83,opt,name=gateway_array,json=gatewayArray,proto3" json:"gateway_array,omitempty"`
	ResilientNexthopSet            uint32             `protobuf:"varint,84,opt,name=resilient_nexthop_set,json=resilientNexthopSet,proto3" json:"resilient_nexthop_set,omitempty"`
	IsPermanentNetwork             bool               `protobuf:"varint,85,opt,name=is_permanent_network,json=isPermanentNetwork,proto3" json:"is_permanent_network,omitempty"`
	NumOfPath                      uint32             `protobuf:"varint,86,opt,name=num_of_path,json=numOfPath,proto3" json:"num_of_path,omitempty"`
	Version                        uint32             `protobuf:"varint,87,opt,name=version,proto3" json:"version,omitempty"`
	Bit                            uint32             `protobuf:"varint,88,opt,name=bit,proto3" json:"bit,omitempty"`
	Flags                          uint32             `protobuf:"varint,89,opt,name=flags,proto3" json:"flags,omitempty"`
	XXX_NoUnkeyedLiteral           struct{}           `json:"-"`
	XXX_unrecognized               []byte             `json:"-"`
	XXX_sizecache                  int32              `json:"-"`
}

func (m *BgpNetBag) Reset()         { *m = BgpNetBag{} }
func (m *BgpNetBag) String() string { return proto.CompactTextString(m) }
func (*BgpNetBag) ProtoMessage()    {}
func (*BgpNetBag) Descriptor() ([]byte, []int) {
	return fileDescriptor_b328b6ce06ea8a38, []int{24}
}

func (m *BgpNetBag) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BgpNetBag.Unmarshal(m, b)
}
func (m *BgpNetBag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BgpNetBag.Marshal(b, m, deterministic)
}
func (m *BgpNetBag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpNetBag.Merge(m, src)
}
func (m *BgpNetBag) XXX_Size() int {
	return xxx_messageInfo_BgpNetBag.Size(m)
}
func (m *BgpNetBag) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpNetBag.DiscardUnknown(m)
}

var xxx_messageInfo_BgpNetBag proto.InternalMessageInfo

func (m *BgpNetBag) GetAfName() string {
	if m != nil {
		return m.AfName
	}
	return ""
}

func (m *BgpNetBag) GetProcessInstanceId() uint32 {
	if m != nil {
		return m.ProcessInstanceId
	}
	return 0
}

func (m *BgpNetBag) GetBgpPrefix() *BgpPrefixtype {
	if m != nil {
		return m.BgpPrefix
	}
	return nil
}

func (m *BgpNetBag) GetHasInconsistentPaths() bool {
	if m != nil {
		return m.HasInconsistentPaths
	}
	return false
}

func (m *BgpNetBag) GetIsNetAggregationSuppressed() bool {
	if m != nil {
		return m.IsNetAggregationSuppressed
	}
	return false
}

func (m *BgpNetBag) GetIsNetLdpSignaled() bool {
	if m != nil {
		return m.IsNetLdpSignaled
	}
	return false
}

func (m *BgpNetBag) GetTableVersion() uint32 {
	if m != nil {
		return m.TableVersion
	}
	return 0
}

func (m *BgpNetBag) GetTableBribVersion() uint32 {
	if m != nil {
		return m.TableBribVersion
	}
	return 0
}

func (m *BgpNetBag) GetLocalPeersAdvertisedTo() []*BgpAdvinfoType_ {
	if m != nil {
		return m.LocalPeersAdvertisedTo
	}
	return nil
}

func (m *BgpNetBag) GetPePeersAdvertisedTo() []*BgpAdvinfoType_ {
	if m != nil {
		return m.PePeersAdvertisedTo
	}
	return nil
}

func (m *BgpNetBag) GetBestPathOrrBitfield() []*BgpAdvinfoType_ {
	if m != nil {
		return m.BestPathOrrBitfield
	}
	return nil
}

func (m *BgpNetBag) GetAddPathOrrBitfield() []*BgpAdvinfoType_ {
	if m != nil {
		return m.AddPathOrrBitfield
	}
	return nil
}

func (m *BgpNetBag) GetAdvertisedtoPe() bool {
	if m != nil {
		return m.AdvertisedtoPe
	}
	return false
}

func (m *BgpNetBag) GetLocalProcessInstancePath() []*BgpPathBag {
	if m != nil {
		return m.LocalProcessInstancePath
	}
	return nil
}

func (m *BgpNetBag) GetActiveProcessInstancePath() []*BgpPathBag {
	if m != nil {
		return m.ActiveProcessInstancePath
	}
	return nil
}

func (m *BgpNetBag) GetHasLocalLabel() bool {
	if m != nil {
		return m.HasLocalLabel
	}
	return false
}

func (m *BgpNetBag) GetNetLocalLabel() uint32 {
	if m != nil {
		return m.NetLocalLabel
	}
	return 0
}

func (m *BgpNetBag) GetNetLocalLabelRewrite() bool {
	if m != nil {
		return m.NetLocalLabelRewrite
	}
	return false
}

func (m *BgpNetBag) GetNetLocalLabelSrgb() bool {
	if m != nil {
		return m.NetLocalLabelSrgb
	}
	return false
}

func (m *BgpNetBag) GetHasLblRetained() bool {
	if m != nil {
		return m.HasLblRetained
	}
	return false
}

func (m *BgpNetBag) GetRouteDistinguisher() string {
	if m != nil {
		return m.RouteDistinguisher
	}
	return ""
}

func (m *BgpNetBag) GetVrfName() string {
	if m != nil {
		return m.VrfName
	}
	return ""
}

func (m *BgpNetBag) GetNetFlags() uint32 {
	if m != nil {
		return m.NetFlags
	}
	return 0
}

func (m *BgpNetBag) GetNetExtendedFlags() uint32 {
	if m != nil {
		return m.NetExtendedFlags
	}
	return 0
}

func (m *BgpNetBag) GetNetMultipath() bool {
	if m != nil {
		return m.NetMultipath
	}
	return false
}

func (m *BgpNetBag) GetNetEibgpMultipath() bool {
	if m != nil {
		return m.NetEibgpMultipath
	}
	return false
}

func (m *BgpNetBag) GetNetBackupAvailable() bool {
	if m != nil {
		return m.NetBackupAvailable
	}
	return false
}

func (m *BgpNetBag) GetNetBackupLabelRewriteAvailable() bool {
	if m != nil {
		return m.NetBackupLabelRewriteAvailable
	}
	return false
}

func (m *BgpNetBag) GetRibFailed() bool {
	if m != nil {
		return m.RibFailed
	}
	return false
}

func (m *BgpNetBag) GetVersionTimestamp() *BgpTimespec {
	if m != nil {
		return m.VersionTimestamp
	}
	return nil
}

func (m *BgpNetBag) GetVersionAge() *BgpTimespec {
	if m != nil {
		return m.VersionAge
	}
	return nil
}

func (m *BgpNetBag) GetLocalPathElement() []*BgpPathElemBag {
	if m != nil {
		return m.LocalPathElement
	}
	return nil
}

func (m *BgpNetBag) GetActivePathElement() []*BgpPathElemBag {
	if m != nil {
		return m.ActivePathElement
	}
	return nil
}

func (m *BgpNetBag) GetGatewayArray() uint32 {
	if m != nil {
		return m.GatewayArray
	}
	return 0
}

func (m *BgpNetBag) GetResilientNexthopSet() uint32 {
	if m != nil {
		return m.ResilientNexthopSet
	}
	return 0
}

func (m *BgpNetBag) GetIsPermanentNetwork() bool {
	if m != nil {
		return m.IsPermanentNetwork
	}
	return false
}

func (m *BgpNetBag) GetNumOfPath() uint32 {
	if m != nil {
		return m.NumOfPath
	}
	return 0
}

func (m *BgpNetBag) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *BgpNetBag) GetBit() uint32 {
	if m != nil {
		return m.Bit
	}
	return 0
}

func (m *BgpNetBag) GetFlags() uint32 {
	if m != nil {
		return m.Flags
	}
	return 0
}

func init() {
	proto.RegisterType((*BgpNetBag_KEYS)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.default_vrf.afs.af.network_all_rds.network_all_rd.network_rds.network_rd.bgp_net_bag_KEYS")
	proto.RegisterType((*BgpL2VpnAddrT)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.default_vrf.afs.af.network_all_rds.network_all_rd.network_rds.network_rd.bgp_l2vpn_addr_t")
	proto.RegisterType((*BgpL2VpnMspwAddrT)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.default_vrf.afs.af.network_all_rds.network_all_rd.network_rds.network_rd.bgp_l2vpn_mspw_addr_t")
	proto.RegisterType((*BgpIpv4SrpolicyAddrT)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.default_vrf.afs.af.network_all_rds.network_all_rd.network_rds.network_rd.bgp_ipv4_srpolicy_addr_t")
	proto.RegisterType((*BgpIpv6SrpolicyAddrT)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.default_vrf.afs.af.network_all_rds.network_all_rd.network_rds.network_rd.bgp_ipv6_srpolicy_addr_t")
	proto.RegisterType((*BgpAddrtype)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.default_vrf.afs.af.network_all_rds.network_all_rd.network_rds.network_rd.bgp_addrtype")
	proto.RegisterType((*BgpPrefixtype)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.default_vrf.afs.af.network_all_rds.network_all_rd.network_rds.network_rd.bgp_prefixtype")
	proto.RegisterType((*BgpAdvinfoType_)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.default_vrf.afs.af.network_all_rds.network_all_rd.network_rds.network_rd.bgp_advinfo_type_")
	proto.RegisterType((*BgpTeTunnel)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.default_vrf.afs.af.network_all_rds.network_all_rd.network_rds.network_rd.bgp_te_tunnel")
	proto.RegisterType((*BgpL2VpnEvpnEsiT)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.default_vrf.afs.af.network_all_rds.network_all_rd.network_rds.network_rd.bgp_l2vpn_evpn_esi_t")
	proto.RegisterType((*BgpV4V6T)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.default_vrf.afs.af.network_all_rds.network_all_rd.network_rds.network_rd.bgp_v4_v6_t")
	proto.RegisterType((*BgpPath_)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.default_vrf.afs.af.network_all_rds.network_all_rd.network_rds.network_rd.bgp_path_")
	proto.RegisterType((*BgpPedistlblEntry_)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.default_vrf.afs.af.network_all_rds.network_all_rd.network_rds.network_rd.bgp_pedistlbl_entry_")
	proto.RegisterType((*BgpBindingSidT)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.default_vrf.afs.af.network_all_rds.network_all_rd.network_rds.network_rd.bgp_binding_sid_t")
	proto.RegisterType((*SrSid_)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.default_vrf.afs.af.network_all_rds.network_all_rd.network_rds.network_rd.sr_sid_")
	proto.RegisterType((*SrExppath_)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.default_vrf.afs.af.network_all_rds.network_all_rd.network_rds.network_rd.sr_exppath_")
	proto.RegisterType((*BgpSrpolicyEntry_)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.default_vrf.afs.af.network_all_rds.network_all_rd.network_rds.network_rd.bgp_srpolicy_entry_")
	proto.RegisterType((*BgpTunencapEntry_)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.default_vrf.afs.af.network_all_rds.network_all_rd.network_rds.network_rd.bgp_tunencap_entry_")
	proto.RegisterType((*BgpCommonAttrEntry_)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.default_vrf.afs.af.network_all_rds.network_all_rd.network_rds.network_rd.bgp_common_attr_entry_")
	proto.RegisterType((*BgpAttrRnhAddrT)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.default_vrf.afs.af.network_all_rds.network_all_rd.network_rds.network_rd.bgp_attr_rnh_addr_t")
	proto.RegisterType((*BgpAttr_)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.default_vrf.afs.af.network_all_rds.network_all_rd.network_rds.network_rd.bgp_attr_")
	proto.RegisterType((*BgpPathBag)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.default_vrf.afs.af.network_all_rds.network_all_rd.network_rds.network_rd.bgp_path_bag")
	proto.RegisterType((*BgpTimespec)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.default_vrf.afs.af.network_all_rds.network_all_rd.network_rds.network_rd.bgp_timespec")
	proto.RegisterType((*BgpPathElemBag)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.default_vrf.afs.af.network_all_rds.network_all_rd.network_rds.network_rd.bgp_path_elem_bag")
	proto.RegisterType((*BgpNetBag)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.default_vrf.afs.af.network_all_rds.network_all_rd.network_rds.network_rd.bgp_net_bag")
}

func init() { proto.RegisterFile("bgp_net_bag.proto", fileDescriptor_b328b6ce06ea8a38) }

var fileDescriptor_b328b6ce06ea8a38 = []byte{
	// 6018 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x7c, 0x5b, 0x6f, 0x1c, 0xc9,
	0x75, 0x3f, 0x7a, 0xa5, 0x25, 0x87, 0x45, 0x0e, 0x39, 0x6c, 0x5e, 0xd4, 0xba, 0x73, 0x47, 0xd2,
	0xae, 0xf6, 0x26, 0x79, 0xb9, 0x32, 0xf7, 0xbe, 0x5e, 0x8a, 0xa2, 0x76, 0x67, 0x45, 0x52, 0xfc,
	0xf7, 0x68, 0xb5, 0x7f, 0xe7, 0xd6, 0xee, 0xe9, 0xae, 0x99, 0xa9, 0xa8, 0xbb, 0xba, 0x5d, 0x55,
	0x33, 0x14, 0xfd, 0x15, 0x02, 0xe4, 0x29, 0x08, 0xec, 0x04, 0x09, 0x72, 0x81, 0x5f, 0x82, 0x00,
	0x01, 0x0c, 0x18, 0x09, 0x10, 0xc3, 0x31, 0x02, 0x27, 0x31, 0x90, 0x04, 0x81, 0x63, 0x23, 0x17,
	0xe7, 0x2d, 0x8f, 0x79, 0xce, 0x07, 0x08, 0xea, 0x9c, 0xaa, 0xee, 0x9e, 0xe1, 0x30, 0xb0, 0x1f,
	0x02, 0x8c, 0xf6, 0x61, 0xb1, 0x9a, 0x73, 0x7e, 0xa7, 0xba, 0x4e, 0x5d, 0x7f, 0xa7, 0xea, 0x14,
	0xc9, 0x72, 0xa7, 0x97, 0x07, 0x9c, 0xaa, 0xa0, 0x13, 0xf6, 0x6e, 0xe5, 0x22, 0x53, 0x99, 0xfb,
	0x1b, 0x4e, 0xc4, 0x64, 0x94, 0x05, 0x2c, 0x93, 0xc1, 0x53, 0x11, 0xb0, 0x7c, 0x78, 0x27, 0xd0,
	0xa8, 0x2c, 0xa7, 0xe2, 0x56, 0xa7, 0x97, 0xdf, 0x62, 0x5c, 0xaa, 0x90, 0x47, 0x54, 0x16, 0xff,
	0x2a, 0xfe, 0x11, 0xe8, 0xff, 0xc5, 0x9d, 0xe3, 0x5b, 0x31, 0xed, 0x86, 0x83, 0x44, 0x05, 0x43,
	0xd1, 0xbd, 0x15, 0x76, 0xe5, 0xad, 0xb0, 0x7b, 0x8b, 0x53, 0x75, 0x94, 0x89, 0x27, 0x41, 0x98,
	0x24, 0x81, 0x88, 0xe5, 0xd8, 0xef, 0xe2, 0x67, 0x55, 0x25, 0xe2, 0xe6, 0x9f, 0x38, 0xa4, 0x51,
	0xa9, 0x63, 0xf0, 0x60, 0xf7, 0xab, 0x6d, 0xf7, 0x1a, 0xa9, 0x17, 0x5f, 0xe4, 0x61, 0x4a, 0x3d,
	0x67, 0xc3, 0xb9, 0x39, 0xe7, 0x2f, 0x58, 0xe1, 0x41, 0x98, 0x52, 0xf7, 0x1c, 0x99, 0x0d, 0xbb,
	0xa8, 0x7e, 0x0e, 0xd4, 0x33, 0x61, 0x17, 0x14, 0x2f, 0x90, 0x85, 0xe2, 0xdb, 0x71, 0x2c, 0xbc,
	0x33, 0xa0, 0x9d, 0x37, 0xb2, 0xed, 0x38, 0x16, 0xee, 0x0d, 0xb2, 0x68, 0x21, 0xb9, 0xa0, 0x5d,
	0xf6, 0xd4, 0x3b, 0x0b, 0xa0, 0xba, 0x91, 0x1e, 0x82, 0xd0, 0x5d, 0x24, 0xcf, 0x89, 0xd8, 0x7b,
	0x1e, 0x54, 0xcf, 0x89, 0xb8, 0xf9, 0x16, 0xd6, 0x35, 0xd9, 0x1c, 0xe6, 0x1c, 0xca, 0x0e, 0x94,
	0xae, 0x6b, 0xf9, 0x9b, 0x4a, 0xe9, 0x39, 0x1b, 0x67, 0x6e, 0xd6, 0xfd, 0x05, 0x10, 0x6e, 0xa3,
	0xac, 0xf9, 0x3e, 0x59, 0x2b, 0x0d, 0x53, 0x99, 0x1f, 0xfd, 0x42, 0xd6, 0x07, 0xc4, 0xd3, 0xd6,
	0xd0, 0x53, 0x52, 0xe4, 0x59, 0xc2, 0xa2, 0x63, 0x5b, 0xc0, 0x26, 0x59, 0x3b, 0x29, 0x2f, 0x0b,
	0x5a, 0xd1, 0xca, 0xb6, 0xd1, 0x9d, 0x2c, 0x6f, 0xeb, 0x94, 0xf2, 0xb6, 0xfe, 0xb7, 0xf2, 0xb6,
	0xc6, 0xcb, 0xfb, 0xe1, 0x22, 0x59, 0xd0, 0x05, 0x6a, 0xa8, 0x3a, 0xce, 0xa9, 0xdb, 0x20, 0x67,
	0xc2, 0x2e, 0x33, 0xbd, 0xa6, 0xff, 0xa9, 0xfb, 0x04, 0xaa, 0x69, 0x4b, 0xc3, 0x1e, 0x9b, 0xd7,
	0x32, 0x53, 0x8a, 0xfb, 0x1a, 0x71, 0x01, 0x92, 0x46, 0xa1, 0x54, 0x05, 0x10, 0x3b, 0xaf, 0xa1,
	0x35, 0xfb, 0x5a, 0x31, 0x8e, 0x4e, 0xc2, 0x0e, 0x4d, 0x0a, 0xf4, 0xd9, 0x12, 0xbd, 0xa7, 0x15,
	0x16, 0x7d, 0x8b, 0x40, 0x43, 0x04, 0x6a, 0xc0, 0x79, 0x05, 0x8e, 0x3d, 0xbb, 0xac, 0x55, 0x8f,
	0x40, 0x63, 0xf1, 0x2f, 0x91, 0x25, 0x2d, 0x4c, 0xe3, 0xb2, 0x22, 0x33, 0x80, 0x5d, 0x34, 0xe2,
	0x31, 0x60, 0xb5, 0x07, 0x67, 0x4b, 0x60, 0xd9, 0x87, 0xee, 0x1b, 0x64, 0xd5, 0x48, 0x42, 0xf4,
	0xd0, 0xa0, 0x6b, 0x80, 0x5e, 0xb1, 0xba, 0xfd, 0x52, 0x65, 0xda, 0x6c, 0xab, 0x28, 0x78, 0xae,
	0x68, 0xb3, 0xad, 0xd1, 0x56, 0xd8, 0x1a, 0x6b, 0x33, 0x52, 0xb4, 0xc2, 0xd6, 0x84, 0x36, 0xdb,
	0x1a, 0x6b, 0xb3, 0xf9, 0x12, 0x3d, 0xd2, 0x66, 0xe8, 0xda, 0x56, 0xd5, 0xb5, 0x85, 0xc2, 0xb5,
	0xad, 0x8a, 0x6b, 0x66, 0xc8, 0xc0, 0xd0, 0x1e, 0xa9, 0x47, 0xbd, 0xf0, 0x4d, 0x2b, 0x47, 0xaa,
	0xf2, 0xf7, 0x0e, 0x59, 0x86, 0x31, 0x3e, 0xcc, 0x13, 0x59, 0x18, 0x2c, 0x6e, 0x38, 0x37, 0xe7,
	0x37, 0x7f, 0xcf, 0xb9, 0x35, 0x45, 0x2b, 0xd4, 0xad, 0xf1, 0x19, 0xef, 0x37, 0x8a, 0x8a, 0x57,
	0x5a, 0x40, 0xa8, 0x20, 0xca, 0xb8, 0x54, 0x22, 0x64, 0xbc, 0x6c, 0x81, 0x25, 0x6c, 0x01, 0xa1,
	0x76, 0x0a, 0x9d, 0xb5, 0x79, 0x99, 0x40, 0x93, 0xa7, 0xd5, 0xf6, 0x6d, 0x00, 0x7c, 0xc9, 0xca,
	0x47, 0xa1, 0x77, 0x46, 0xa0, 0xcb, 0x05, 0xf4, 0x4e, 0x15, 0xfa, 0x1a, 0x71, 0xb1, 0xae, 0xb4,
	0x0a, 0x76, 0xb1, 0x8b, 0x41, 0xb3, 0x5b, 0x41, 0x37, 0x49, 0x3d, 0x91, 0x41, 0xa5, 0x03, 0x56,
	0x70, 0x88, 0x25, 0x72, 0xaf, 0xf0, 0xed, 0xc7, 0x8e, 0x2d, 0xb2, 0x58, 0xb7, 0x34, 0x72, 0x15,
	0xba, 0xea, 0x8f, 0xa6, 0xb5, 0xab, 0x2a, 0x6b, 0xac, 0xf1, 0x7b, 0x5f, 0xe6, 0x47, 0xa3, 0x23,
	0xf6, 0x4e, 0xd0, 0x4d, 0xb2, 0x23, 0x99, 0xd3, 0xa8, 0xf0, 0x6a, 0xad, 0x9c, 0x8d, 0xf7, 0x8d,
	0x6e, 0x6c, 0x94, 0x9f, 0xb4, 0x59, 0x2f, 0x47, 0xf9, 0xb8, 0xcd, 0xdb, 0xc4, 0xb3, 0xab, 0xc3,
	0x09, 0xb3, 0x73, 0x60, 0xb6, 0x6e, 0xf4, 0x93, 0x2d, 0xb7, 0x26, 0x5a, 0x7a, 0x85, 0xe5, 0xd6,
	0x04, 0xcb, 0x9f, 0x39, 0xe8, 0x9c, 0x14, 0xc1, 0xd8, 0x0a, 0x7e, 0x1e, 0xba, 0xec, 0xdb, 0xd3,
	0xd7, 0x65, 0x93, 0x36, 0x36, 0xec, 0x04, 0x29, 0x0e, 0xab, 0x3b, 0x8d, 0x75, 0x6e, 0xeb, 0xa4,
	0x73, 0x17, 0xa6, 0xd8, 0xb9, 0xad, 0x89, 0xce, 0x6d, 0x8d, 0x39, 0xd7, 0xfc, 0x2f, 0x87, 0x2c,
	0x6a, 0x0b, 0x64, 0x24, 0xb0, 0x91, 0x7e, 0xc7, 0x21, 0x33, 0x86, 0xa0, 0x38, 0xe0, 0xe0, 0xb7,
	0xa6, 0xcf, 0x41, 0xbb, 0xeb, 0xfb, 0xa6, 0xa6, 0x9a, 0xd3, 0xe0, 0xbf, 0x82, 0x84, 0xf2, 0x9e,
	0xea, 0xc3, 0x66, 0x5f, 0xf7, 0x17, 0x50, 0xb8, 0x07, 0xb2, 0xe6, 0x9f, 0x3e, 0x87, 0xdc, 0x34,
	0x8c, 0x87, 0x8c, 0x77, 0xb3, 0x40, 0x97, 0x10, 0xb8, 0x57, 0xc9, 0x3c, 0x93, 0x01, 0xa7, 0xac,
	0xd7, 0xef, 0x64, 0x02, 0x7c, 0xae, 0xf9, 0x84, 0xc9, 0x03, 0x23, 0x71, 0xff, 0xc6, 0x21, 0x0d,
	0xab, 0x1e, 0x21, 0x13, 0xd3, 0xdd, 0x34, 0x4b, 0xb6, 0xce, 0x15, 0x42, 0x32, 0xc8, 0xe3, 0x50,
	0xd1, 0xa0, 0x27, 0xb2, 0x41, 0x1e, 0xf0, 0x41, 0xda, 0xa1, 0x48, 0x55, 0xeb, 0xfe, 0x32, 0xaa,
	0x3e, 0xd6, 0x9a, 0x03, 0x50, 0x34, 0xff, 0xe1, 0x0c, 0xa9, 0xeb, 0x12, 0x15, 0x35, 0x1c, 0x46,
	0x37, 0x95, 0x61, 0x33, 0xfa, 0x0b, 0x86, 0x6b, 0x11, 0x14, 0x3d, 0xd2, 0x63, 0xa7, 0x04, 0x18,
	0x8e, 0xac, 0xf9, 0x9b, 0x01, 0x00, 0x4f, 0xbe, 0x4c, 0x48, 0x3f, 0x94, 0xa6, 0x3c, 0xf8, 0x74,
	0xcd, 0x9f, 0xeb, 0x87, 0x12, 0xa9, 0x90, 0xbb, 0x41, 0x16, 0x98, 0xd5, 0x06, 0x83, 0x1c, 0xb8,
	0x15, 0x74, 0x06, 0xea, 0x3f, 0xcb, 0xdd, 0xdb, 0x64, 0xb5, 0x44, 0x40, 0x2f, 0x4a, 0x15, 0x26,
	0x14, 0x68, 0x55, 0xcd, 0x5f, 0xb6, 0xc8, 0x16, 0xef, 0x66, 0x6d, 0xad, 0x70, 0xbf, 0x54, 0x35,
	0x10, 0xb4, 0xc7, 0xa4, 0xa2, 0x82, 0xc6, 0xc0, 0xad, 0x6a, 0xbe, 0x6b, 0x0d, 0xfc, 0x42, 0xa3,
	0xf7, 0x33, 0x03, 0x1f, 0x6e, 0x05, 0x82, 0x7e, 0x7d, 0xc0, 0x34, 0x7e, 0x16, 0xf0, 0x0d, 0xd4,
	0x3c, 0xde, 0xf2, 0x8d, 0xdc, 0x7d, 0x85, 0x2c, 0x97, 0x68, 0xca, 0xc3, 0x4e, 0x42, 0x63, 0x60,
	0x58, 0x35, 0x7f, 0xc9, 0x82, 0x77, 0x51, 0xac, 0x47, 0x69, 0x87, 0xf1, 0x98, 0xf1, 0x1e, 0xf2,
	0x21, 0xa0, 0x57, 0x75, 0x7f, 0xc1, 0x08, 0x81, 0x0a, 0xb9, 0x37, 0x49, 0xc3, 0xba, 0xd7, 0x0d,
	0xfa, 0x21, 0x8f, 0x13, 0x0a, 0xec, 0xaa, 0xee, 0x2f, 0xa2, 0xbc, 0xd5, 0xfd, 0x04, 0xa4, 0xb0,
	0xf1, 0x6a, 0xee, 0x53, 0xb4, 0x97, 0xee, 0x41, 0xe0, 0x56, 0x75, 0xbf, 0xa1, 0x35, 0xb6, 0xd5,
	0xb4, 0xbc, 0x79, 0x93, 0xac, 0x96, 0x7b, 0x15, 0x6c, 0xd5, 0x54, 0xb2, 0x40, 0x69, 0xe2, 0x4c,
	0x25, 0x33, 0x5c, 0x5b, 0xff, 0xb3, 0x49, 0xc9, 0xbc, 0x46, 0x0e, 0xef, 0x68, 0x97, 0x00, 0x90,
	0x50, 0x6e, 0x99, 0x75, 0x42, 0xf9, 0xcf, 0xc3, 0xac, 0xc7, 0x89, 0xe4, 0x99, 0x13, 0x44, 0xb2,
	0xf9, 0xaf, 0x1f, 0x90, 0x39, 0x58, 0x7b, 0x42, 0xd5, 0x0f, 0xdc, 0xbf, 0x74, 0x08, 0x29, 0x57,
	0x22, 0xb3, 0xf4, 0xfc, 0xee, 0xf4, 0xcd, 0xaf, 0x72, 0xa5, 0xf4, 0x75, 0xed, 0x4d, 0xd4, 0xf6,
	0x45, 0x59, 0x23, 0x2e, 0x13, 0x22, 0xb2, 0x81, 0x9e, 0xf1, 0x7a, 0x82, 0x63, 0xa7, 0xcd, 0x81,
	0x04, 0xe6, 0x77, 0x93, 0xd4, 0x99, 0xc4, 0x0e, 0x1b, 0x86, 0x09, 0x8b, 0xcd, 0x04, 0x9d, 0x67,
	0xf2, 0x30, 0x54, 0xfd, 0xc7, 0x5a, 0xe4, 0x5e, 0x27, 0x8b, 0x16, 0x13, 0x87, 0x69, 0x4e, 0x63,
	0x33, 0x37, 0x17, 0x10, 0x74, 0x0f, 0x64, 0x66, 0x1e, 0x03, 0xaa, 0xcf, 0xa4, 0xca, 0xc4, 0x71,
	0xd0, 0xa7, 0x89, 0x9d, 0x96, 0xcb, 0x88, 0xfd, 0x04, 0x35, 0x9f, 0xd0, 0x24, 0xd6, 0xd3, 0x82,
	0xc9, 0x80, 0x71, 0x45, 0x05, 0x0f, 0x13, 0xb0, 0x34, 0x73, 0x72, 0x91, 0xc9, 0x96, 0x11, 0x6b,
	0x23, 0xb3, 0x88, 0x74, 0xa8, 0x54, 0x88, 0xaa, 0xd9, 0x45, 0xe4, 0x2e, 0x95, 0x0a, 0x10, 0x97,
	0x08, 0x61, 0x32, 0x08, 0x11, 0x04, 0x93, 0xb0, 0xe6, 0xd7, 0x98, 0xdc, 0x06, 0x84, 0x7b, 0x83,
	0x2c, 0x31, 0x19, 0xc8, 0xfc, 0x89, 0x28, 0x20, 0xc4, 0x7a, 0xd0, 0xce, 0x9f, 0x08, 0x03, 0x7b,
	0x11, 0x60, 0x79, 0x28, 0x14, 0x0b, 0x13, 0x84, 0xcd, 0x03, 0xac, 0xae, 0x2b, 0x0f, 0x52, 0xc0,
	0xbd, 0x4b, 0xce, 0xeb, 0x8f, 0xf5, 0x7a, 0x82, 0xf6, 0x42, 0xc5, 0x32, 0x1e, 0xc8, 0x41, 0x9e,
	0xeb, 0xd6, 0xa6, 0x31, 0x44, 0x37, 0x35, 0xff, 0x1c, 0x93, 0xdb, 0xa5, 0xbe, 0x5d, 0xa8, 0x21,
	0x7a, 0x92, 0x01, 0x4b, 0xf3, 0x4c, 0x28, 0x6c, 0x4d, 0x4e, 0x63, 0x88, 0x71, 0x6a, 0x7e, 0x83,
	0xc9, 0x16, 0x28, 0xee, 0x19, 0xb9, 0x5e, 0x8a, 0x4a, 0xb4, 0x1c, 0x68, 0x86, 0xa6, 0x20, 0xbe,
	0xa9, 0xf9, 0x4b, 0x16, 0xdc, 0x46, 0xb1, 0xfb, 0x26, 0x59, 0xb7, 0xed, 0xcf, 0x33, 0x1d, 0x3c,
	0x0c, 0xa9, 0x50, 0x4c, 0x57, 0x69, 0x09, 0x0c, 0x56, 0xb0, 0x07, 0x0e, 0x32, 0xb5, 0x5d, 0xa8,
	0xdc, 0x7b, 0x64, 0x63, 0xb2, 0x51, 0xa0, 0xb2, 0x80, 0x76, 0x7a, 0x41, 0x8e, 0xf1, 0x44, 0xcd,
	0xbf, 0x30, 0xc1, 0xfc, 0x51, 0xb6, 0xdb, 0xe9, 0x1d, 0x4a, 0x77, 0xb7, 0x2c, 0xa5, 0x52, 0x42,
	0x92, 0x45, 0x61, 0xa2, 0x1b, 0x3c, 0xe3, 0xc9, 0x31, 0x84, 0x1a, 0x35, 0xff, 0x22, 0x96, 0x52,
	0x16, 0xb1, 0xa7, 0x41, 0xdb, 0xf2, 0x21, 0x4f, 0x8e, 0xdd, 0x0f, 0xc9, 0x25, 0x5b, 0x4c, 0x57,
	0x64, 0x69, 0x80, 0xe3, 0x56, 0xd0, 0x6e, 0x42, 0x23, 0x95, 0x09, 0x08, 0x40, 0x6a, 0xbe, 0x87,
	0x45, 0xdc, 0x17, 0x59, 0xea, 0x6b, 0x80, 0x6f, 0xf5, 0xee, 0x1b, 0x64, 0xcd, 0xda, 0x0b, 0x1a,
	0x51, 0x36, 0xa4, 0x31, 0x7e, 0x7b, 0xc5, 0xee, 0x0c, 0xda, 0xd0, 0x37, 0x2a, 0xf8, 0xe4, 0x47,
	0xe4, 0x32, 0x93, 0x25, 0xba, 0x68, 0x88, 0x34, 0x8b, 0x59, 0x97, 0xd1, 0x18, 0x22, 0x94, 0x9a,
	0x7f, 0x9e, 0x49, 0x6b, 0x66, 0x1a, 0x61, 0xdf, 0x00, 0xdc, 0x2f, 0x93, 0x73, 0xf6, 0xa3, 0xe0,
	0x70, 0x72, 0x1c, 0xc8, 0x6c, 0x20, 0x22, 0x1a, 0x43, 0x1c, 0x50, 0xf3, 0x57, 0xf1, 0xb3, 0x7b,
	0xa8, 0x6c, 0xa3, 0xee, 0x84, 0x59, 0x31, 0x9c, 0x28, 0x84, 0x02, 0xa3, 0x66, 0x76, 0x28, 0xd1,
	0x13, 0x4d, 0x64, 0x97, 0x81, 0x28, 0x4b, 0xd3, 0x90, 0xc7, 0x10, 0x0f, 0x8c, 0x34, 0xd1, 0x01,
	0x02, 0x76, 0x50, 0xef, 0x7e, 0x42, 0x5e, 0x18, 0x6d, 0x62, 0x1a, 0x33, 0xa9, 0x04, 0xeb, 0xe8,
	0x96, 0xb6, 0x85, 0x78, 0x50, 0xc8, 0xe5, 0x4a, 0x3b, 0x57, 0x50, 0xb6, 0x24, 0x9c, 0xbd, 0x50,
	0x12, 0x8e, 0x4f, 0x1a, 0x43, 0x6c, 0x00, 0xb3, 0x57, 0x1b, 0xb6, 0x8c, 0xd4, 0xec, 0xd7, 0xa6,
	0x5b, 0x32, 0xc1, 0x7a, 0x8c, 0x87, 0x1a, 0x7d, 0x61, 0xb4, 0x57, 0x4a, 0x8d, 0xbb, 0x43, 0xae,
	0x4c, 0xb2, 0x08, 0xa4, 0x62, 0x2a, 0xea, 0x33, 0xde, 0xf3, 0x2e, 0x56, 0x47, 0x53, 0xd5, 0xb6,
	0x6d, 0x21, 0xee, 0x4b, 0x65, 0x05, 0xf5, 0xd6, 0x08, 0x03, 0xe1, 0x52, 0x39, 0x9d, 0x55, 0xff,
	0x71, 0xce, 0x61, 0x0c, 0xdc, 0x23, 0x57, 0x47, 0xda, 0x24, 0xca, 0x78, 0x97, 0xc6, 0x54, 0xe0,
	0xd4, 0xce, 0x29, 0x15, 0xde, 0xe5, 0xea, 0xe7, 0x74, 0x8b, 0xec, 0x54, 0x31, 0x87, 0x94, 0x0a,
	0xf7, 0x4e, 0xd9, 0xa1, 0xf2, 0x98, 0x47, 0x34, 0x0e, 0x8e, 0x98, 0x6e, 0x9b, 0x5e, 0xee, 0x5d,
	0xa9, 0xce, 0xbf, 0x36, 0x28, 0x3f, 0x67, 0xaa, 0xdf, 0xea, 0xe5, 0x66, 0x82, 0x83, 0x55, 0x3a,
	0x48, 0x14, 0x83, 0xe5, 0xed, 0xaa, 0x9d, 0xe0, 0x1a, 0xbf, 0x6f, 0xc5, 0xd5, 0xe1, 0xcd, 0xd2,
	0x3c, 0x88, 0x42, 0x1e, 0x33, 0xe0, 0x07, 0x1b, 0xd5, 0x86, 0x6c, 0xa5, 0xf9, 0x8e, 0xd5, 0x54,
	0x57, 0x77, 0x24, 0x55, 0x2f, 0x54, 0x57, 0x77, 0xa4, 0x53, 0x5b, 0xc4, 0x2b, 0x47, 0xa2, 0xe6,
	0x31, 0x30, 0x13, 0x10, 0xde, 0x1c, 0x1d, 0x8a, 0xbc, 0xb7, 0xa7, 0x95, 0x68, 0x57, 0xd9, 0x15,
	0x3a, 0x61, 0xf4, 0x64, 0x90, 0x7b, 0xd7, 0xaa, 0xbb, 0xc2, 0x5d, 0x90, 0xb9, 0xf7, 0xcb, 0xa5,
	0x01, 0x51, 0x41, 0x2e, 0x32, 0x45, 0x23, 0x55, 0xf1, 0xf7, 0x3a, 0xd8, 0x5d, 0xaa, 0xda, 0x1d,
	0x22, 0x68, 0xa2, 0xf3, 0xb0, 0x0f, 0xd0, 0xa7, 0xb8, 0x3f, 0x78, 0x37, 0xaa, 0xce, 0xeb, 0xe5,
	0x79, 0xd7, 0x68, 0xaa, 0x53, 0x2c, 0x8c, 0x63, 0xa6, 0x7b, 0xca, 0x6e, 0x33, 0x2f, 0x56, 0xfd,
	0xda, 0x2e, 0x94, 0xb0, 0x95, 0xbc, 0x03, 0xab, 0x3b, 0xae, 0x04, 0xf4, 0xa9, 0xea, 0x67, 0x79,
	0x10, 0x33, 0x19, 0x85, 0x22, 0xa6, 0xb1, 0xf7, 0x12, 0x18, 0xae, 0x9b, 0xb5, 0x10, 0xd5, 0xf7,
	0xac, 0xd6, 0xfd, 0xae, 0x43, 0x6a, 0xda, 0x26, 0xe8, 0x67, 0xb9, 0x77, 0x73, 0xea, 0xb9, 0xc2,
	0xac, 0xae, 0xeb, 0x27, 0x59, 0xee, 0xfe, 0x85, 0x43, 0xe6, 0x78, 0xdf, 0x72, 0xf8, 0x97, 0xa1,
	0xe2, 0xbf, 0x33, 0x7d, 0x15, 0x2f, 0xc2, 0x16, 0xbf, 0xc6, 0xfb, 0x26, 0xbe, 0xb8, 0x4e, 0x16,
	0x75, 0xf8, 0x21, 0xa2, 0x61, 0x6c, 0x18, 0xf8, 0x2b, 0x38, 0x0a, 0xfb, 0xa1, 0xf4, 0xa3, 0x61,
	0x8c, 0x0c, 0x5c, 0x93, 0xa0, 0x12, 0xf1, 0x2a, 0xf0, 0xe9, 0x39, 0x51, 0xa8, 0x5f, 0x27, 0x2b,
	0xba, 0x10, 0x5c, 0x88, 0x39, 0x55, 0x06, 0xf7, 0x1a, 0xee, 0xca, 0xfd, 0x50, 0xc2, 0x2a, 0x7c,
	0x40, 0x15, 0xc2, 0xaf, 0x92, 0x79, 0x84, 0x22, 0xec, 0x75, 0x28, 0x8e, 0x80, 0xa8, 0xf8, 0x1c,
	0xeb, 0xe5, 0x41, 0x4a, 0x95, 0x60, 0x91, 0x77, 0x0b, 0x3f, 0xc7, 0x7a, 0xf9, 0x3e, 0x08, 0xb4,
	0x3d, 0x0c, 0xaf, 0x23, 0x4d, 0xd5, 0x94, 0x77, 0x1b, 0xed, 0xb5, 0xe8, 0x73, 0x90, 0x68, 0x92,
	0x50, 0x50, 0x4f, 0xd8, 0x04, 0x45, 0xc0, 0x62, 0xef, 0x4b, 0x78, 0xfe, 0x66, 0x35, 0xb0, 0xf9,
	0x89, 0x56, 0xec, 0xbe, 0x4a, 0x5c, 0x5d, 0xfb, 0x34, 0x56, 0x26, 0x0c, 0x84, 0xfb, 0x8a, 0x37,
	0x70, 0x11, 0xe9, 0x87, 0x72, 0x3f, 0x56, 0x10, 0x04, 0xc2, 0x9d, 0xc5, 0x0f, 0x1c, 0xb2, 0x38,
	0x86, 0xdc, 0x9c, 0xfa, 0x81, 0xba, 0x90, 0x56, 0x5d, 0xb8, 0x4c, 0x08, 0x86, 0x3c, 0x92, 0x7d,
	0x83, 0x7a, 0x6f, 0x62, 0xeb, 0x82, 0xa4, 0xcd, 0xbe, 0x01, 0x37, 0x3a, 0xba, 0x39, 0x74, 0x04,
	0x74, 0x07, 0xda, 0x60, 0xa6, 0x1f, 0xca, 0x5d, 0xc9, 0xdc, 0x1f, 0x39, 0x64, 0x71, 0x34, 0x56,
	0xf2, 0xbe, 0x0c, 0xae, 0xff, 0xe1, 0xb4, 0x9e, 0x3f, 0x96, 0x31, 0x9d, 0xb9, 0xcb, 0xd9, 0xd5,
	0xff, 0x49, 0xe6, 0x5e, 0x21, 0xf3, 0xda, 0xc7, 0x1e, 0x9e, 0x4e, 0x7a, 0x5b, 0x45, 0xd4, 0xfd,
	0x31, 0x9c, 0x4e, 0xba, 0xdf, 0x71, 0xc8, 0xac, 0x55, 0xbe, 0x05, 0x3e, 0x7e, 0x73, 0xfa, 0x7c,
	0x34, 0xd1, 0xa8, 0x3f, 0xd3, 0xc3, 0x4a, 0x1b, 0xa7, 0x78, 0x1f, 0xeb, 0xfd, 0x76, 0xe1, 0xd4,
	0x41, 0xbf, 0x70, 0xca, 0x2a, 0xdf, 0x99, 0x7a, 0xa7, 0x38, 0x56, 0xfa, 0x26, 0xd1, 0xeb, 0x47,
	0x20, 0x69, 0x94, 0x71, 0xbb, 0xfe, 0xbc, 0x8b, 0x34, 0xa9, 0x1f, 0xca, 0x36, 0x88, 0x71, 0xd1,
	0x78, 0x81, 0x2c, 0x8c, 0xa0, 0xde, 0x83, 0x81, 0x3d, 0x2f, 0x2b, 0x90, 0xf7, 0xc8, 0x05, 0x1c,
	0x18, 0x11, 0x13, 0xd1, 0x80, 0x29, 0xed, 0x82, 0x1a, 0x48, 0x1d, 0xb9, 0x0d, 0xa8, 0xf7, 0x3e,
	0xc4, 0xfb, 0xe7, 0x00, 0xb1, 0x83, 0x80, 0x36, 0xe8, 0x1f, 0x6b, 0xb5, 0x8e, 0x6e, 0x90, 0xe3,
	0x24, 0x61, 0x1e, 0x44, 0xd9, 0x80, 0x2b, 0xef, 0x03, 0xf8, 0x44, 0x5d, 0x8b, 0xef, 0x27, 0x61,
	0xbe, 0xa3, 0x85, 0xee, 0x5b, 0xc4, 0xc3, 0x6f, 0xca, 0x40, 0x32, 0xdd, 0x4e, 0x5d, 0x26, 0xa4,
	0x02, 0x33, 0xef, 0x43, 0x30, 0x58, 0x33, 0xfa, 0xb6, 0x56, 0xdf, 0xd7, 0x5a, 0x6d, 0x0d, 0xa7,
	0x2c, 0x2c, 0xa5, 0x3a, 0x72, 0x18, 0x70, 0x1b, 0x11, 0x79, 0x5f, 0xc1, 0xc3, 0x0b, 0xad, 0x79,
	0x94, 0x7d, 0x56, 0xc8, 0xdd, 0x1b, 0x64, 0x11, 0xc3, 0x9f, 0x20, 0xa7, 0x3c, 0x4c, 0xd4, 0xb1,
	0xf7, 0x11, 0xd6, 0x06, 0xa5, 0x87, 0x28, 0x74, 0xaf, 0x91, 0x7a, 0x3f, 0x4c, 0xba, 0x09, 0xeb,
	0xd2, 0x40, 0x97, 0xe1, 0x6d, 0xe3, 0x01, 0x8b, 0x15, 0x3e, 0x62, 0x29, 0x75, 0x5f, 0x26, 0x0d,
	0x5b, 0x6e, 0x51, 0xda, 0x5d, 0xc0, 0x2d, 0x59, 0xb9, 0x2d, 0xef, 0x2a, 0x99, 0x17, 0x74, 0x20,
	0xa9, 0x69, 0xb3, 0x1d, 0x5c, 0x7b, 0x41, 0x84, 0xcd, 0xb4, 0x49, 0xd6, 0xd2, 0xf0, 0x29, 0x4b,
	0x07, 0x69, 0x11, 0xd5, 0xe1, 0x87, 0xef, 0x01, 0x74, 0xc5, 0x28, 0x6d, 0x48, 0x07, 0xdf, 0xbf,
	0x4d, 0x56, 0x8b, 0xe0, 0x54, 0xb3, 0xe8, 0x5c, 0x77, 0x4c, 0x8f, 0x7a, 0xbb, 0x78, 0x33, 0xd8,
	0x31, 0x51, 0xea, 0x4e, 0x96, 0xe6, 0x6d, 0xad, 0x70, 0xff, 0xd1, 0x21, 0x6b, 0x63, 0x16, 0x47,
	0x8c, 0x73, 0x2a, 0xbc, 0xfb, 0x53, 0xbf, 0x18, 0xbb, 0x55, 0x77, 0x3e, 0x87, 0x5a, 0x6b, 0x0e,
	0x59, 0xba, 0xc3, 0xe2, 0x11, 0x8f, 0x3e, 0x86, 0x76, 0x5b, 0xb5, 0x56, 0xad, 0xb8, 0x62, 0x77,
	0x99, 0x10, 0x3b, 0x26, 0x7b, 0xd2, 0xfb, 0x64, 0xc3, 0xb9, 0x79, 0xd6, 0x9f, 0x33, 0xc3, 0xb1,
	0x27, 0x35, 0x3b, 0xae, 0x04, 0x18, 0x06, 0xd5, 0xc2, 0x8e, 0xcd, 0x8b, 0x10, 0x03, 0xb1, 0x1b,
	0x64, 0xa1, 0x5a, 0x05, 0xef, 0x53, 0xec, 0xd9, 0xf2, 0xb3, 0x70, 0x4f, 0x05, 0xdb, 0xb6, 0x85,
	0x3c, 0xc0, 0x19, 0x06, 0x42, 0x83, 0xd9, 0x20, 0x0b, 0x40, 0x14, 0x2c, 0x64, 0xcf, 0x8c, 0x8f,
	0x68, 0x18, 0x1b, 0xc4, 0x6b, 0xc4, 0x05, 0xa5, 0x0a, 0x3b, 0x09, 0x0d, 0x86, 0x54, 0x48, 0x96,
	0x71, 0x6f, 0x1f, 0x47, 0xb9, 0xd6, 0x3c, 0xd2, 0x8a, 0xc7, 0x28, 0x77, 0x7f, 0xe6, 0x90, 0xf3,
	0xe6, 0xa3, 0x94, 0x0a, 0x39, 0x1a, 0x60, 0x7b, 0x07, 0x1b, 0x67, 0x6e, 0xce, 0x6f, 0xfe, 0xfe,
	0x34, 0x76, 0x76, 0xe5, 0x3c, 0xdd, 0x5f, 0xc7, 0x16, 0xd2, 0x0e, 0x54, 0x63, 0x7f, 0xf7, 0xa7,
	0x0e, 0x59, 0xcf, 0xe9, 0x44, 0xcf, 0x1e, 0x3e, 0x1b, 0x9e, 0xad, 0xe4, 0x74, 0xb2, 0x5b, 0xe5,
	0x50, 0xca, 0x84, 0x08, 0x3a, 0x4c, 0x75, 0x19, 0x4d, 0x62, 0xef, 0xf0, 0x19, 0x71, 0xcb, 0x8e,
	0xfa, 0x87, 0x42, 0xdc, 0x35, 0x75, 0x77, 0xff, 0xd9, 0x21, 0x6b, 0x61, 0x1c, 0x4f, 0xf0, 0xea,
	0xff, 0x3d, 0x1b, 0x5e, 0xb9, 0x61, 0x1c, 0x8f, 0x3b, 0xf5, 0x12, 0x59, 0x2a, 0x07, 0x9e, 0xca,
	0x82, 0x9c, 0x7a, 0x3e, 0xee, 0xae, 0x55, 0xf1, 0x21, 0x5c, 0x53, 0x08, 0xd6, 0x09, 0xba, 0x21,
	0x4b, 0x68, 0xec, 0xb5, 0x91, 0x5b, 0x08, 0xd6, 0xb9, 0x0f, 0x02, 0xf7, 0x5d, 0x72, 0x41, 0xf2,
	0x40, 0xe4, 0x4f, 0x58, 0x80, 0x67, 0x09, 0x41, 0x28, 0xf1, 0x40, 0x94, 0xa9, 0x63, 0xef, 0x11,
	0xcc, 0xee, 0x75, 0xc9, 0xfd, 0xfc, 0x09, 0x7b, 0x08, 0xfa, 0x6d, 0xf9, 0xd8, 0x68, 0xdd, 0x0f,
	0xc9, 0x25, 0xd9, 0xcf, 0x8e, 0x4e, 0xb5, 0xfe, 0x0c, 0xcf, 0x64, 0x34, 0x66, 0xa2, 0xfd, 0x1d,
	0xb2, 0xce, 0xb4, 0xb7, 0x92, 0xf5, 0x78, 0x98, 0xd0, 0xb8, 0xb4, 0x7c, 0x6c, 0xc2, 0xd4, 0x4e,
	0x2f, 0x6f, 0x1b, 0x65, 0x61, 0xf5, 0x29, 0x69, 0x4e, 0xfa, 0x20, 0x1e, 0x5a, 0xc4, 0x4c, 0xe2,
	0xb5, 0xc5, 0xe7, 0x50, 0xc2, 0x15, 0x31, 0xfe, 0x5d, 0x80, 0xdd, 0x33, 0x28, 0x4d, 0x0d, 0xc2,
	0x28, 0xa2, 0xb9, 0x0a, 0xb2, 0x23, 0x8e, 0x11, 0xf2, 0xff, 0xc7, 0x93, 0x12, 0x14, 0x3f, 0x3c,
	0xe2, 0x10, 0x1a, 0xef, 0x92, 0x8d, 0x0a, 0x4e, 0xd2, 0xa4, 0x1b, 0x54, 0x4e, 0x67, 0xf2, 0x40,
	0x1b, 0x7e, 0x15, 0x8f, 0x4a, 0x0a, 0xc3, 0x36, 0x4d, 0xba, 0x0f, 0x0b, 0xd0, 0xe1, 0xb6, 0xea,
	0xeb, 0x3d, 0x38, 0xac, 0xc4, 0x47, 0xbf, 0x04, 0xcb, 0x3e, 0x09, 0xcb, 0x00, 0xa9, 0x49, 0xea,
	0x90, 0xa6, 0x20, 0xbb, 0x18, 0x88, 0x7b, 0xbf, 0x8c, 0xc7, 0x16, 0x5a, 0xd8, 0xee, 0x42, 0xec,
	0xad, 0xd7, 0xe1, 0x2e, 0x5c, 0x68, 0x33, 0x0e, 0x8e, 0x23, 0xf0, 0x57, 0x30, 0x64, 0x03, 0x4d,
	0x0b, 0x15, 0x80, 0x7e, 0x99, 0x2c, 0x43, 0x8c, 0xa4, 0x4b, 0xe5, 0x1d, 0x3c, 0xd0, 0xf7, 0x7e,
	0xb5, 0xe0, 0x61, 0xfb, 0xc3, 0x9c, 0x1f, 0x74, 0xe0, 0xcc, 0xdc, 0xfd, 0xbe, 0x63, 0xbe, 0x5e,
	0xe0, 0x7e, 0x6d, 0xea, 0xf7, 0x64, 0x68, 0x19, 0xeb, 0xc0, 0x1b, 0x64, 0xad, 0xf4, 0xd5, 0x9c,
	0x60, 0x80, 0x1f, 0x01, 0x1e, 0x95, 0x58, 0x7f, 0x51, 0x05, 0x26, 0x7f, 0xeb, 0x90, 0xe5, 0x93,
	0xf8, 0xaf, 0x4d, 0xff, 0x6d, 0x47, 0x3a, 0xe6, 0x48, 0x53, 0xd3, 0x45, 0xe3, 0x7b, 0x9e, 0x4a,
	0xe6, 0x85, 0x38, 0x72, 0x8c, 0xcf, 0x87, 0xa9, 0x64, 0xee, 0x75, 0xb2, 0x58, 0xe8, 0xf1, 0x56,
	0xa4, 0x83, 0x9c, 0x32, 0x35, 0x08, 0xb8, 0x18, 0x79, 0x91, 0x2c, 0x95, 0x28, 0x64, 0x1e, 0x11,
	0x12, 0x54, 0x0b, 0x43, 0xde, 0x31, 0x82, 0x43, 0xe6, 0x1e, 0x8f, 0xe2, 0x90, 0xbb, 0x8f, 0xe0,
	0x90, 0x7c, 0x52, 0x20, 0xec, 0x05, 0x0e, 0xf9, 0xa7, 0x09, 0x18, 0x00, 0x4b, 0x9f, 0xaa, 0x28,
	0x4b, 0x53, 0xaf, 0x3b, 0x32, 0x50, 0x77, 0x51, 0xea, 0xbe, 0x4e, 0x5c, 0xfa, 0x54, 0x51, 0x1e,
	0x53, 0x20, 0x5c, 0xe9, 0x80, 0xeb, 0x35, 0xa3, 0x07, 0x85, 0x2e, 0x5b, 0xcd, 0x8e, 0x55, 0x94,
	0x15, 0x28, 0x09, 0x57, 0xbf, 0x52, 0xd1, 0x82, 0x74, 0x9d, 0x27, 0x35, 0x73, 0x10, 0xd2, 0xf7,
	0x18, 0x7c, 0x78, 0x16, 0x7e, 0x1f, 0xf4, 0x35, 0xcf, 0x15, 0x2a, 0x90, 0x54, 0x05, 0x09, 0x4b,
	0x99, 0x2a, 0x2e, 0x47, 0x7f, 0x1d, 0xaf, 0x78, 0x84, 0x6a, 0x53, 0xb5, 0xa7, 0x35, 0xe5, 0xf5,
	0xe8, 0x22, 0x9e, 0xe2, 0xa2, 0x15, 0x8b, 0xbd, 0x27, 0xc8, 0xb9, 0xb4, 0xd4, 0xd7, 0xf0, 0x56,
	0xec, 0xde, 0x21, 0xe7, 0xaa, 0x20, 0x3c, 0xf5, 0xc7, 0x00, 0x25, 0x41, 0xce, 0x5d, 0xa0, 0xe1,
	0xcc, 0x03, 0xc3, 0x94, 0xf7, 0xc9, 0xc5, 0xe2, 0x74, 0xaf, 0x1b, 0xc0, 0x78, 0x4b, 0x92, 0x80,
	0x26, 0xac, 0xc7, 0x3a, 0x09, 0xf5, 0x52, 0x7b, 0x0d, 0x03, 0x27, 0x7c, 0xdd, 0x16, 0xea, 0x77,
	0x8d, 0xda, 0x9e, 0xbb, 0x52, 0x91, 0x86, 0x9c, 0x72, 0x73, 0xad, 0xc4, 0x8b, 0x73, 0x57, 0x2b,
	0x87, 0xb5, 0xe3, 0x55, 0xb2, 0xdc, 0x13, 0x61, 0x44, 0xbb, 0x83, 0x24, 0x90, 0xfd, 0x81, 0x8a,
	0xb3, 0x23, 0xee, 0x65, 0xb8, 0xd0, 0x58, 0x45, 0xdb, 0xc8, 0xdd, 0x77, 0xc8, 0x79, 0x18, 0x04,
	0x34, 0x0e, 0x06, 0x9c, 0x41, 0x22, 0x9b, 0x0c, 0xbb, 0x0c, 0x3f, 0x90, 0xe3, 0xe9, 0xa1, 0x01,
	0x7c, 0x86, 0xfa, 0x76, 0xd8, 0x65, 0xf0, 0x9d, 0xeb, 0x64, 0x71, 0xac, 0x7f, 0xbe, 0x8e, 0xe3,
	0x72, 0xa4, 0x7b, 0x6e, 0x93, 0x55, 0x3d, 0x3e, 0x4e, 0x4c, 0x56, 0x81, 0x7d, 0xd0, 0x0f, 0xe5,
	0xe3, 0xd1, 0x29, 0xf1, 0x43, 0x87, 0x34, 0x4e, 0xa0, 0xe5, 0xd4, 0x4f, 0xed, 0xc5, 0xb1, 0x99,
	0xbd, 0x09, 0xd7, 0x5b, 0x7a, 0xbb, 0x09, 0xa4, 0x88, 0x02, 0x11, 0x07, 0x3a, 0xfe, 0xa2, 0x5c,
	0x79, 0xca, 0x9e, 0x00, 0xeb, 0x6d, 0xa6, 0x2d, 0x22, 0x3f, 0x3e, 0x44, 0x4d, 0x35, 0xb9, 0x77,
	0x30, 0x92, 0xdc, 0x7b, 0x9b, 0xac, 0xe0, 0x30, 0x8b, 0x99, 0x54, 0x8c, 0xf7, 0x06, 0x4c, 0xf6,
	0xa9, 0xf0, 0x86, 0x00, 0x72, 0x41, 0x75, 0xaf, 0xaa, 0x69, 0x3e, 0xc0, 0xab, 0xf6, 0x1c, 0x2e,
	0x42, 0x92, 0x4e, 0x12, 0x50, 0xae, 0xc4, 0x71, 0x00, 0x01, 0x0c, 0xad, 0x64, 0xb7, 0xc2, 0xed,
	0x6a, 0x4e, 0xed, 0xe5, 0xeb, 0x2a, 0x79, 0x1e, 0x97, 0x04, 0x4c, 0x5e, 0xc1, 0x1f, 0xcd, 0xaf,
	0x61, 0xd2, 0x8a, 0x4d, 0x1c, 0x90, 0x2c, 0x0e, 0x94, 0xeb, 0x92, 0xb3, 0x95, 0x14, 0x0c, 0xf8,
	0xf7, 0x64, 0xf3, 0x9f, 0xe7, 0x22, 0xfe, 0x98, 0xcc, 0x4a, 0x01, 0x05, 0xff, 0xc2, 0xe5, 0xde,
	0x99, 0x50, 0xee, 0xa9, 0x39, 0x00, 0x67, 0x27, 0xe4, 0x00, 0x38, 0x64, 0x5e, 0x8a, 0x80, 0x3e,
	0xcd, 0x31, 0x0b, 0x60, 0x9d, 0xcc, 0x98, 0x73, 0x4e, 0x07, 0x3e, 0x66, 0x7e, 0xb9, 0x7f, 0xe6,
	0x90, 0x59, 0x49, 0x7b, 0xa9, 0xee, 0xc1, 0xe7, 0x80, 0x80, 0xfe, 0xd6, 0x74, 0x8d, 0x46, 0xd3,
	0x80, 0xbe, 0xad, 0x65, 0xf3, 0xbf, 0x9f, 0x27, 0x2b, 0xc0, 0xd3, 0x6c, 0x1a, 0x96, 0x19, 0x03,
	0x65, 0xbe, 0x08, 0xe5, 0x51, 0x98, 0x97, 0x99, 0x34, 0x75, 0x9b, 0x2f, 0xb2, 0xab, 0xe5, 0xb0,
	0xab, 0xfc, 0xc0, 0x21, 0xf3, 0x95, 0x7e, 0x37, 0x09, 0x05, 0x53, 0x48, 0xbd, 0x47, 0x06, 0xa7,
	0x4f, 0xcc, 0xcf, 0x36, 0x8b, 0xdd, 0x9f, 0xe8, 0x38, 0x22, 0xd1, 0x5b, 0x82, 0x26, 0x7d, 0x55,
	0x67, 0xce, 0x3c, 0x1b, 0xce, 0xac, 0x14, 0xb5, 0xbf, 0x5b, 0x7a, 0x75, 0x85, 0x90, 0x5c, 0xd0,
	0x2e, 0x15, 0x94, 0x47, 0x14, 0xc6, 0x75, 0xdd, 0xaf, 0x48, 0xf4, 0x94, 0x91, 0x2a, 0x54, 0x36,
	0x2d, 0x09, 0x7f, 0xb8, 0xd7, 0x48, 0x5d, 0xd0, 0xaf, 0x0f, 0x74, 0xb0, 0x88, 0x5a, 0xcc, 0xef,
	0x5e, 0x30, 0xc2, 0x36, 0x80, 0xbe, 0xe7, 0x90, 0x05, 0x33, 0x86, 0x82, 0x84, 0x49, 0xe5, 0xcd,
	0xc2, 0x70, 0xff, 0xe6, 0xd4, 0x0d, 0x77, 0x3b, 0x67, 0xfd, 0x79, 0x53, 0xdd, 0x3d, 0x26, 0x55,
	0xf3, 0x5f, 0x1c, 0x1c, 0xf6, 0x6a, 0xc0, 0x71, 0x7c, 0x9b, 0x61, 0xff, 0x7d, 0x87, 0xcc, 0x15,
	0x19, 0x94, 0x26, 0xbb, 0xe7, 0x0f, 0xa6, 0xaf, 0xef, 0xc7, 0x66, 0xab, 0x5f, 0xb3, 0x09, 0x93,
	0xcd, 0xff, 0x6c, 0x90, 0x75, 0x8d, 0xd0, 0xdc, 0x29, 0xe3, 0x41, 0xa8, 0x94, 0xa8, 0x4c, 0x69,
	0x26, 0x4d, 0x7c, 0x52, 0xec, 0x33, 0x8e, 0xa5, 0x07, 0x18, 0xa5, 0xd8, 0x4d, 0x06, 0x6f, 0x26,
	0xcd, 0x21, 0x8f, 0xa0, 0xdd, 0x02, 0xff, 0x9c, 0xdd, 0x97, 0xe0, 0xf6, 0xe8, 0x50, 0xd0, 0xae,
	0x35, 0xf9, 0x00, 0xb8, 0x4b, 0xa8, 0xb2, 0x94, 0x45, 0xe5, 0xc5, 0x7f, 0x61, 0x78, 0xc6, 0x5e,
	0xe2, 0x6f, 0x03, 0xa2, 0xb8, 0xfd, 0xb7, 0xe6, 0x9b, 0xf0, 0x45, 0x6b, 0x97, 0x89, 0xc2, 0xf0,
	0xac, 0xbd, 0x68, 0xde, 0x2e, 0x74, 0xd6, 0x06, 0x3d, 0x32, 0xc1, 0xa2, 0xc5, 0x3f, 0x6f, 0x3d,
	0xc2, 0x00, 0xcd, 0x62, 0x5f, 0x85, 0x1c, 0x95, 0xd0, 0xb0, 0x2b, 0x0b, 0x9e, 0xb1, 0xe0, 0x6d,
	0xe0, 0x54, 0x16, 0x8c, 0xb7, 0xfb, 0x05, 0xff, 0x2c, 0xe0, 0xb3, 0xd6, 0xfb, 0x82, 0x81, 0x5a,
	0x8b, 0x6d, 0xc8, 0xb9, 0x38, 0x49, 0x5d, 0x0b, 0xd3, 0x9a, 0x4d, 0x38, 0xd9, 0x1d, 0x27, 0xb1,
	0xb6, 0x08, 0xbc, 0x7b, 0x96, 0x32, 0x2c, 0x6c, 0xe6, 0x8a, 0x7c, 0x1e, 0x19, 0x8e, 0x57, 0x8d,
	0x73, 0xc8, 0x0f, 0x29, 0xb0, 0xa4, 0xac, 0x9a, 0x51, 0x59, 0x0b, 0x93, 0x01, 0xa4, 0x29, 0xba,
	0x05, 0x97, 0x19, 0x40, 0xa9, 0x64, 0x16, 0x67, 0x92, 0x1f, 0xf2, 0x3c, 0xcd, 0x0b, 0xe0, 0x42,
	0x91, 0xfc, 0xa0, 0xc5, 0xa3, 0x25, 0x42, 0xb8, 0x6b, 0x81, 0x75, 0x5b, 0xe2, 0x36, 0xeb, 0x15,
	0x38, 0x93, 0x98, 0x31, 0xc6, 0x48, 0xcc, 0x23, 0x0b, 0x6b, 0xb9, 0x58, 0x24, 0x66, 0x8c, 0xd2,
	0x13, 0x88, 0x30, 0x6c, 0x49, 0x78, 0xed, 0x9d, 0x48, 0x18, 0xd0, 0x98, 0xd8, 0x61, 0xed, 0x97,
	0xec, 0xb5, 0xf7, 0x9e, 0xdc, 0xb6, 0x4a, 0x6b, 0x86, 0xe9, 0x43, 0xf8, 0x3d, 0xc6, 0x63, 0xfa,
	0xb4, 0xb0, 0x6a, 0xd8, 0x51, 0x05, 0x9f, 0x69, 0x69, 0x9d, 0x35, 0xba, 0x4a, 0xe6, 0xcb, 0x1c,
	0x39, 0x7c, 0x4e, 0x50, 0xf7, 0x49, 0x91, 0x82, 0x26, 0xf5, 0x02, 0x59, 0x19, 0xa7, 0x21, 0x3e,
	0x22, 0xa8, 0xfb, 0x0b, 0xa5, 0x70, 0x5b, 0xea, 0x40, 0xa6, 0x0a, 0x1a, 0x79, 0x45, 0xb0, 0x5c,
	0x41, 0x1a, 0x12, 0xb2, 0x4e, 0x66, 0xcc, 0xc9, 0xc1, 0x2a, 0x32, 0x0a, 0xfc, 0xe5, 0xbe, 0x4c,
	0x1a, 0xe5, 0x2c, 0x34, 0x0b, 0xf9, 0x1a, 0x6e, 0xc3, 0x89, 0x9d, 0x81, 0x66, 0x35, 0x5f, 0x27,
	0x33, 0x38, 0x15, 0x20, 0xd9, 0xa6, 0xee, 0x9b, 0x5f, 0x40, 0x18, 0xcd, 0x91, 0xc3, 0x39, 0x43,
	0x18, 0xa5, 0xc9, 0x2f, 0x9b, 0x2b, 0x43, 0x2c, 0x0f, 0x42, 0xac, 0x52, 0xe0, 0xbe, 0x4d, 0xbc,
	0x09, 0xc3, 0x19, 0x39, 0xfc, 0x79, 0x3c, 0x3b, 0x3a, 0x11, 0x8f, 0x21, 0x9b, 0x9f, 0x1c, 0xc3,
	0x5d, 0x38, 0x2d, 0x86, 0x7b, 0x95, 0x2c, 0x0f, 0xf8, 0x13, 0x9e, 0x1d, 0xf1, 0xb2, 0x77, 0xbd,
	0x8b, 0x80, 0x6e, 0x18, 0x45, 0xd1, 0xb1, 0xae, 0x47, 0x66, 0xa3, 0x64, 0x20, 0x15, 0x15, 0xde,
	0x25, 0x80, 0xd8, 0x9f, 0x7a, 0xb3, 0xb3, 0xe7, 0x36, 0x19, 0x26, 0xb7, 0xcc, 0xf9, 0x15, 0x89,
	0x5e, 0x2c, 0x92, 0x4d, 0x95, 0x0f, 0xdf, 0x0c, 0x24, 0x95, 0x92, 0x65, 0x5c, 0x47, 0x6e, 0x57,
	0x4c, 0x53, 0x82, 0xa2, 0x8d, 0xf2, 0x56, 0x8c, 0x6f, 0xcf, 0x00, 0x1b, 0x65, 0xd9, 0x13, 0x46,
	0xbd, 0xab, 0xf6, 0xed, 0x99, 0x16, 0xee, 0x80, 0xcc, 0xbd, 0x41, 0x16, 0xcb, 0x69, 0x08, 0xfc,
	0x68, 0x03, 0x43, 0xcf, 0x42, 0x0a, 0xec, 0xe8, 0x25, 0xb2, 0x54, 0xc2, 0x30, 0x46, 0x7e, 0x01,
	0x4a, 0x2b, 0xad, 0x31, 0x48, 0x7e, 0x85, 0x2c, 0x57, 0x4e, 0x90, 0x0c, 0xb4, 0x09, 0xe7, 0x48,
	0x4b, 0xe5, 0x39, 0x12, 0x62, 0x2f, 0x92, 0xb9, 0x32, 0xd2, 0xbf, 0x06, 0x9f, 0xad, 0xe5, 0x36,
	0xca, 0xd7, 0xfc, 0xbd, 0x0c, 0xf0, 0xaf, 0xe3, 0x5d, 0x72, 0x5e, 0x04, 0xf7, 0x56, 0x8d, 0x6c,
	0xf9, 0x46, 0xa9, 0x2e, 0xee, 0xf9, 0x2b, 0xe1, 0xfc, 0x8b, 0x38, 0x2c, 0xf2, 0x22, 0x94, 0xd7,
	0xea, 0x3c, 0x0d, 0x72, 0x54, 0xbf, 0x64, 0xac, 0xf3, 0xf4, 0x10, 0x04, 0xee, 0xbf, 0xe1, 0xf1,
	0xf9, 0x84, 0x09, 0xef, 0xdd, 0x04, 0x86, 0x30, 0x85, 0xf7, 0xd2, 0xe3, 0x01, 0x90, 0xbf, 0x9a,
	0x4f, 0x58, 0x8a, 0xf4, 0x3c, 0x32, 0x0b, 0x90, 0xf7, 0x32, 0xb4, 0xca, 0x4c, 0x02, 0x2b, 0x8e,
	0x5e, 0x38, 0xab, 0x4b, 0x0c, 0x20, 0x5e, 0xc1, 0x2e, 0x4e, 0x8a, 0xd5, 0x05, 0x90, 0x3f, 0x74,
	0xc8, 0x42, 0x95, 0x56, 0x43, 0xd6, 0xc6, 0x54, 0x32, 0x8c, 0x31, 0x62, 0xe4, 0xcf, 0x57, 0x48,
	0x7f, 0xf3, 0x37, 0x0d, 0x7b, 0x02, 0x76, 0x21, 0xcc, 0xf5, 0xf5, 0xff, 0x5d, 0x0a, 0xb6, 0x5e,
	0x91, 0xd3, 0x30, 0x1a, 0x0b, 0xd0, 0x48, 0x1a, 0xda, 0x97, 0x3d, 0xcd, 0xef, 0x2e, 0x62, 0x8e,
	0x36, 0x54, 0xc8, 0x24, 0xc9, 0x99, 0x35, 0x6f, 0x33, 0xe8, 0x1c, 0x2b, 0x6a, 0x78, 0x4e, 0xdd,
	0x6e, 0xf4, 0x9b, 0x77, 0x8f, 0x15, 0x35, 0x29, 0x79, 0x61, 0x9e, 0x27, 0x2c, 0xc2, 0x33, 0x66,
	0xcd, 0x48, 0x8e, 0xc2, 0xe3, 0x31, 0xba, 0x73, 0x91, 0xc9, 0xed, 0x12, 0xf4, 0x31, 0x62, 0xec,
	0x76, 0xf1, 0x3a, 0x59, 0x61, 0x38, 0x2c, 0xe0, 0xa4, 0x67, 0x94, 0xef, 0x34, 0x18, 0x0c, 0x91,
	0x36, 0x55, 0x16, 0x7e, 0x9b, 0xac, 0x6a, 0x18, 0xcc, 0x74, 0xc6, 0x3b, 0xd9, 0x80, 0xc7, 0x90,
	0x4f, 0x87, 0x34, 0x67, 0x59, 0x52, 0xa5, 0x77, 0xd0, 0x16, 0x6a, 0x5a, 0xbd, 0x5c, 0x6f, 0x7d,
	0x27, 0x0c, 0xcc, 0x56, 0x81, 0x54, 0x67, 0x75, 0xd4, 0xc6, 0x1c, 0x37, 0x23, 0x9b, 0xd0, 0x9d,
	0x33, 0xca, 0x75, 0x16, 0x98, 0xf4, 0x79, 0x7f, 0x94, 0x41, 0x09, 0xd6, 0xa9, 0x02, 0x67, 0x2d,
	0x29, 0xf2, 0x41, 0x5e, 0x61, 0x1e, 0xe5, 0xee, 0xfb, 0x84, 0x1e, 0xdb, 0x97, 0x19, 0x35, 0x58,
	0x03, 0xdc, 0x42, 0xf7, 0x80, 0x1e, 0xe3, 0xd3, 0x0c, 0xf7, 0x1d, 0x72, 0xbe, 0xb4, 0xc0, 0x1b,
	0x6a, 0xb8, 0x47, 0xe5, 0x5d, 0xd6, 0x33, 0xe4, 0x66, 0xbd, 0x00, 0xf8, 0x5a, 0xdf, 0x8a, 0x77,
	0x40, 0xeb, 0xbe, 0x3d, 0xd1, 0x34, 0x0d, 0x9f, 0xea, 0x55, 0x1b, 0xdf, 0x19, 0xac, 0x8d, 0x9b,
	0xee, 0x87, 0x4f, 0x5b, 0x90, 0x84, 0x3a, 0xc1, 0x92, 0x67, 0xb1, 0x7d, 0x73, 0xb0, 0x3a, 0x6e,
	0x77, 0x90, 0xc5, 0xd4, 0x7d, 0x8f, 0x5c, 0x98, 0x54, 0xd7, 0x81, 0x10, 0x96, 0x07, 0xd5, 0xfd,
	0x73, 0x27, 0x2a, 0x8b, 0xea, 0x53, 0xbe, 0xf9, 0x84, 0x1e, 0xe3, 0x4b, 0xcf, 0x09, 0xdf, 0x7c,
	0x40, 0x8f, 0xa5, 0x7b, 0x97, 0x5c, 0x99, 0x60, 0x26, 0x68, 0x94, 0x0d, 0xa9, 0x1e, 0x4d, 0x11,
	0x90, 0xa3, 0xba, 0x7f, 0x61, 0xdc, 0xda, 0x47, 0x48, 0x9b, 0x46, 0x7a, 0xf7, 0x1c, 0xe6, 0x7c,
	0xec, 0xcc, 0x67, 0x09, 0x6f, 0x6e, 0x87, 0x39, 0x1f, 0x59, 0xc7, 0xdc, 0x1f, 0x3b, 0x64, 0xb9,
	0x12, 0x19, 0x40, 0x91, 0x98, 0x0b, 0x3d, 0xbf, 0xf9, 0xc7, 0xd3, 0xb7, 0x08, 0x9d, 0x0c, 0x62,
	0xfc, 0x06, 0xca, 0x0a, 0x42, 0x20, 0xdd, 0xbf, 0x72, 0x48, 0xcd, 0xce, 0x3e, 0x20, 0x6b, 0xcf,
	0x8a, 0x2b, 0xb3, 0x21, 0xae, 0x0c, 0xee, 0x79, 0x52, 0xd3, 0xd3, 0x0f, 0xf6, 0x72, 0xa4, 0x92,
	0xb3, 0x82, 0xf7, 0x61, 0x2b, 0x3f, 0x47, 0xf4, 0x3f, 0x03, 0xbd, 0xaa, 0xae, 0x20, 0xa9, 0x13,
	0xbc, 0xbf, 0x47, 0x39, 0xdc, 0xe9, 0xdb, 0x85, 0x57, 0x6b, 0x57, 0xcd, 0x9d, 0x3e, 0x66, 0xe8,
	0x68, 0xc4, 0xf7, 0x1c, 0x2c, 0x16, 0x8e, 0x46, 0xd7, 0xa6, 0x75, 0x9f, 0x19, 0xdb, 0x42, 0xc0,
	0x73, 0x38, 0x1a, 0x7d, 0x81, 0x2c, 0x98, 0x65, 0x09, 0x92, 0x12, 0x0c, 0xa7, 0x9d, 0x47, 0x19,
	0xa4, 0x23, 0x98, 0xeb, 0x4f, 0x0d, 0x49, 0xc3, 0xc8, 0x70, 0xdb, 0x39, 0x94, 0xec, 0x87, 0x91,
	0xfb, 0xe7, 0x0e, 0x31, 0xbf, 0x02, 0x96, 0x43, 0xfe, 0xf7, 0x74, 0x1f, 0x0e, 0xd7, 0xb0, 0xb2,
	0xad, 0x5c, 0x33, 0x4b, 0xfc, 0x37, 0xcb, 0x8d, 0xf7, 0x48, 0xb8, 0xeb, 0x56, 0x3a, 0xee, 0xff,
	0x90, 0x33, 0xc8, 0x3c, 0xaf, 0x5b, 0xff, 0x1f, 0x73, 0x56, 0x69, 0x41, 0xe4, 0x1a, 0x17, 0xab,
	0x2d, 0x88, 0x1b, 0xf9, 0x77, 0x6b, 0xf8, 0xe7, 0x09, 0x4c, 0x2a, 0x73, 0x4f, 0x8f, 0x37, 0x9e,
	0x61, 0xac, 0x80, 0x3b, 0xe6, 0x0c, 0xcf, 0x20, 0x56, 0x38, 0xf5, 0x4f, 0x4a, 0x4c, 0x7c, 0x52,
	0x74, 0xe6, 0x99, 0x7c, 0x76, 0x98, 0x8b, 0x2c, 0xa2, 0x52, 0x06, 0x45, 0x15, 0xcc, 0xcb, 0xa1,
	0xba, 0xbf, 0x6c, 0x54, 0x2d, 0xa3, 0x69, 0xc5, 0x9a, 0x81, 0x23, 0xe9, 0xcb, 0x32, 0x61, 0x36,
	0xe2, 0x1a, 0x08, 0x1e, 0x66, 0xc2, 0x7d, 0x95, 0xb8, 0x46, 0x19, 0x68, 0xd2, 0x6f, 0xf2, 0x69,
	0x66, 0x4c, 0xb0, 0x01, 0xa8, 0x87, 0xc2, 0xa6, 0xd3, 0x5c, 0x26, 0x04, 0xc1, 0xdd, 0x90, 0x25,
	0x66, 0xf3, 0xc5, 0xb2, 0xef, 0x87, 0x2c, 0x71, 0xff, 0xda, 0x21, 0x0d, 0xcc, 0xdc, 0xe1, 0xdd,
	0x4c, 0xa4, 0x40, 0x41, 0x60, 0xcf, 0x9d, 0xdf, 0xfc, 0xed, 0x29, 0xe4, 0xd2, 0x70, 0xd6, 0x86,
	0x89, 0x4c, 0x65, 0x7d, 0xdd, 0x9f, 0x3a, 0x95, 0xed, 0x55, 0x06, 0x61, 0x57, 0xd1, 0xe2, 0x9d,
	0x32, 0xe3, 0xc0, 0x05, 0xa6, 0xd2, 0x1d, 0x58, 0x9e, 0x2a, 0xfb, 0xbe, 0xdc, 0xd6, 0x35, 0xc7,
	0xb3, 0xb6, 0x16, 0x3f, 0xed, 0xca, 0x85, 0x9c, 0x76, 0xe5, 0xe2, 0xbe, 0x4f, 0x2e, 0xe0, 0x43,
	0x9a, 0x60, 0x92, 0x1d, 0xfe, 0xbd, 0x09, 0x0f, 0x11, 0xfe, 0x49, 0xeb, 0x1b, 0x64, 0xd1, 0x3c,
	0x1f, 0xb6, 0x43, 0x6a, 0xc1, 0x24, 0x3b, 0x82, 0xd4, 0x0e, 0xa8, 0xf3, 0xa4, 0x36, 0x14, 0x66,
	0xb2, 0xe2, 0x1f, 0x9a, 0x98, 0x1d, 0x0a, 0x9c, 0xad, 0x2f, 0x92, 0x25, 0xf3, 0xfd, 0x02, 0xb1,
	0x88, 0x7f, 0xde, 0x05, 0xc5, 0x8f, 0x0d, 0xee, 0x32, 0x21, 0x52, 0x44, 0x76, 0xc6, 0xe3, 0xdf,
	0x6a, 0x98, 0x03, 0x89, 0x56, 0x37, 0x3f, 0xc5, 0x65, 0x43, 0xb1, 0x94, 0xca, 0x9c, 0x46, 0x3a,
	0x2a, 0x37, 0xe9, 0x93, 0xe6, 0x8e, 0xc0, 0xfe, 0x74, 0x37, 0xc8, 0x3c, 0x0f, 0x79, 0x66, 0xb5,
	0x78, 0x37, 0x53, 0x15, 0x35, 0xbf, 0x3d, 0x87, 0x37, 0x47, 0x30, 0x72, 0x68, 0x42, 0x53, 0x58,
	0x88, 0x9a, 0xa4, 0x9e, 0xc3, 0x0f, 0x9b, 0xb4, 0xe6, 0x98, 0x3b, 0x56, 0x2d, 0x34, 0x59, 0x6b,
	0xd7, 0x2c, 0xc6, 0xb6, 0x86, 0x7d, 0x4d, 0xad, 0x85, 0xb6, 0x31, 0xae, 0x12, 0xb4, 0x31, 0xd1,
	0xf0, 0x19, 0x73, 0x08, 0xae, 0x45, 0xc5, 0x5d, 0x37, 0x02, 0x7a, 0x47, 0x96, 0x57, 0x9f, 0x35,
	0xad, 0xaa, 0xc5, 0x1f, 0x1f, 0x19, 0x42, 0x7d, 0x93, 0x34, 0x2a, 0x35, 0xc2, 0xd2, 0x9e, 0x87,
	0xe8, 0x7c, 0xb1, 0xa8, 0x14, 0x96, 0xf8, 0x23, 0x87, 0xb8, 0x15, 0xa8, 0xb9, 0xa3, 0x84, 0xe9,
	0x3f, 0xdd, 0x8b, 0x62, 0xa3, 0x70, 0xc4, 0x5c, 0x52, 0x8e, 0x3d, 0xa2, 0x98, 0x7d, 0x96, 0x1e,
	0x51, 0xfc, 0xc4, 0x21, 0xde, 0x48, 0x2f, 0x54, 0xf6, 0x28, 0xb3, 0x7e, 0x4e, 0x73, 0x5f, 0xac,
	0x55, 0xfa, 0xa2, 0xdc, 0xa9, 0x20, 0xaf, 0xa0, 0x74, 0x2a, 0xa7, 0x7a, 0x19, 0x35, 0x33, 0x64,
	0xce, 0xe4, 0x15, 0x58, 0xbb, 0x43, 0x4a, 0x85, 0x99, 0x29, 0x6f, 0xd9, 0xa6, 0xc0, 0x04, 0x4f,
	0x58, 0xd5, 0xec, 0xa4, 0x31, 0xc1, 0x14, 0xe8, 0x81, 0x57, 0x68, 0x6e, 0x6d, 0x67, 0xcf, 0x47,
	0xe4, 0x72, 0xe5, 0x73, 0x13, 0xac, 0x31, 0xa4, 0x3a, 0x5f, 0x7c, 0xf4, 0x44, 0x09, 0xfb, 0xe4,
	0x3a, 0x96, 0xc0, 0x33, 0x78, 0xe4, 0x74, 0x5a, 0x41, 0xb8, 0x92, 0x5d, 0x05, 0xec, 0x41, 0x76,
	0xd7, 0x20, 0x4f, 0x14, 0xf7, 0x80, 0x5c, 0x2b, 0x8a, 0x0b, 0xe3, 0xf8, 0xb4, 0xd2, 0x30, 0xea,
	0xba, 0x62, 0x4a, 0xdb, 0x46, 0xe0, 0x89, 0xc2, 0xf0, 0x4e, 0x20, 0xa7, 0xa2, 0x68, 0xce, 0x84,
	0xa6, 0xe5, 0x53, 0xd4, 0x43, 0x2a, 0x4c, 0x43, 0x26, 0x34, 0x6d, 0xfe, 0xf4, 0x22, 0xbe, 0x37,
	0x37, 0x7f, 0x8e, 0xab, 0xca, 0x88, 0x36, 0x47, 0x18, 0xd1, 0x29, 0x4c, 0xe2, 0xcd, 0xd3, 0x98,
	0xc4, 0xd8, 0x93, 0xf2, 0x3b, 0xcf, 0xd6, 0x93, 0xf2, 0x3b, 0x64, 0xbd, 0x1f, 0x6a, 0x4f, 0xa3,
	0x8c, 0x4b, 0x26, 0x95, 0x4d, 0x3c, 0x91, 0xf0, 0x0e, 0xa5, 0xe6, 0xaf, 0xf6, 0x43, 0xd9, 0xaa,
	0x28, 0x75, 0x83, 0x4a, 0x73, 0x5d, 0xa2, 0x9b, 0xf2, 0x94, 0x17, 0xc7, 0x5b, 0xf6, 0xba, 0xe4,
	0x80, 0xaa, 0xc9, 0x8f, 0x8e, 0xf1, 0xdc, 0x05, 0x1e, 0x36, 0xc5, 0x65, 0x9e, 0x21, 0xbc, 0x0c,
	0x81, 0x73, 0x97, 0x03, 0xaa, 0xf6, 0xe2, 0x22, 0xc5, 0x50, 0x6f, 0x16, 0xa3, 0xd9, 0xcd, 0x6f,
	0xe3, 0x66, 0xa1, 0xaa, 0x99, 0xcd, 0xaf, 0x11, 0x17, 0x41, 0x1d, 0xc1, 0x3a, 0x05, 0xf2, 0x1d,
	0x93, 0xed, 0xaf, 0x35, 0x77, 0x05, 0xeb, 0xfc, 0x7c, 0x79, 0xd0, 0xef, 0x7e, 0x61, 0xf3, 0xa0,
	0xdf, 0xfb, 0x62, 0xe6, 0x41, 0xbf, 0xff, 0x85, 0xcc, 0x83, 0xfe, 0xe0, 0x0b, 0x95, 0x07, 0xfd,
	0xe1, 0xc4, 0x3c, 0xe8, 0x7f, 0x77, 0xc8, 0x45, 0x7b, 0x4b, 0x36, 0xb6, 0xf0, 0x42, 0x28, 0xfb,
	0x15, 0x68, 0x83, 0x6f, 0x4d, 0x69, 0xb4, 0xd4, 0x09, 0x7b, 0xbe, 0x67, 0x2e, 0xf3, 0x46, 0xf6,
	0x06, 0x08, 0xbc, 0xff, 0xc3, 0x21, 0x97, 0xc2, 0x48, 0xb1, 0x21, 0x3d, 0xc5, 0xb9, 0x8f, 0xa6,
	0xde, 0xb9, 0xf3, 0x58, 0xff, 0x49, 0xde, 0xbd, 0x48, 0x96, 0xca, 0x47, 0xaa, 0x78, 0x4d, 0xb4,
	0x8d, 0x27, 0xf5, 0xf6, 0x81, 0x6a, 0x91, 0x68, 0x0a, 0x2b, 0x7d, 0x05, 0x87, 0x6f, 0xa1, 0xea,
	0x9c, 0xaa, 0x0a, 0xee, 0xcb, 0xe4, 0xdc, 0x18, 0x2e, 0x10, 0xf4, 0x48, 0x30, 0x85, 0xaf, 0xa2,
	0x6a, 0xfe, 0xea, 0x08, 0xde, 0x47, 0x9d, 0x7b, 0x9b, 0xac, 0x8e, 0x9b, 0x49, 0xd1, 0xeb, 0xc0,
	0xf3, 0xa8, 0x9a, 0xbf, 0x3c, 0x62, 0xd3, 0x16, 0xbd, 0x8e, 0x4d, 0x68, 0x4d, 0x3a, 0xba, 0x7c,
	0x15, 0x32, 0x4e, 0x63, 0x78, 0x18, 0x85, 0x09, 0xad, 0x7b, 0x9d, 0xc4, 0x37, 0xd2, 0xd3, 0x42,
	0xc4, 0xfb, 0xa7, 0x86, 0x88, 0xd5, 0xe8, 0xed, 0xe3, 0xd1, 0xe8, 0xed, 0x22, 0x99, 0xd3, 0xd5,
	0x2c, 0x1f, 0x16, 0xd5, 0xfd, 0x1a, 0xa7, 0xe6, 0xad, 0x10, 0xbc, 0xaf, 0x55, 0x65, 0x0a, 0x42,
	0xf5, 0x61, 0x51, 0x83, 0x53, 0x65, 0xf3, 0x0e, 0x10, 0x7d, 0x8d, 0xe8, 0x96, 0xab, 0xbc, 0x57,
	0xff, 0x14, 0x6f, 0x07, 0x38, 0xad, 0xbc, 0x4f, 0xbf, 0x45, 0x56, 0xa0, 0x48, 0xc8, 0xe4, 0x2f,
	0xa1, 0x0f, 0x8a, 0x56, 0xd9, 0xd5, 0x9a, 0x12, 0xff, 0x25, 0x6c, 0x46, 0xf3, 0x26, 0x3e, 0x1c,
	0x86, 0x2c, 0x81, 0xd3, 0xab, 0x3d, 0xcc, 0x4d, 0xe0, 0x54, 0xe1, 0x43, 0xf8, 0x6d, 0xab, 0x71,
	0x3f, 0x25, 0xcd, 0x8a, 0xc5, 0x48, 0x87, 0x55, 0xec, 0xf7, 0x31, 0xe1, 0xbf, 0xb0, 0xaf, 0xf6,
	0x5d, 0x59, 0xd6, 0xe8, 0x6b, 0x88, 0x83, 0xf1, 0xd7, 0x10, 0x7f, 0xe7, 0x90, 0x65, 0xb3, 0xa3,
	0x63, 0xe0, 0xaa, 0xc2, 0x34, 0xf7, 0x1e, 0x4e, 0x6b, 0x20, 0x60, 0x63, 0x6b, 0xbf, 0x61, 0x2a,
	0xfd, 0xc8, 0xd6, 0x59, 0x13, 0xc6, 0x79, 0xeb, 0x49, 0xd8, 0xa3, 0xde, 0xe1, 0xd4, 0xfb, 0x40,
	0x4c, 0x75, 0xb7, 0xf1, 0x99, 0xa0, 0x5b, 0x79, 0xb2, 0xa6, 0xb9, 0x35, 0xe5, 0x6a, 0x7a, 0xdf,
	0xeb, 0x8c, 0x9c, 0x4b, 0xf8, 0x8d, 0xe2, 0x61, 0xdd, 0x2e, 0x56, 0xdc, 0xfd, 0x27, 0x87, 0xac,
	0xd8, 0x05, 0xba, 0xea, 0x90, 0xff, 0x6c, 0x38, 0xb4, 0x6c, 0x16, 0xe7, 0x8a, 0x47, 0xd7, 0x48,
	0xdd, 0xde, 0x83, 0x86, 0x42, 0x84, 0xc7, 0xf0, 0xb2, 0xa8, 0xee, 0x2f, 0x18, 0xe1, 0xb6, 0x96,
	0xc1, 0x1f, 0xf6, 0xa4, 0x92, 0x25, 0x4c, 0x13, 0x7e, 0x9b, 0x86, 0x2d, 0xa9, 0x32, 0xef, 0x8a,
	0x56, 0x0a, 0xa5, 0x39, 0x4a, 0x68, 0x53, 0x9b, 0xbb, 0x54, 0x26, 0xa8, 0x9b, 0x8a, 0x99, 0xc7,
	0x44, 0x6e, 0x25, 0x47, 0xdd, 0xfc, 0x85, 0x17, 0xf7, 0x0a, 0x99, 0xe7, 0x83, 0x34, 0xc8, 0xba,
	0xb8, 0xd7, 0x3d, 0xc6, 0x33, 0x6e, 0x3e, 0x48, 0x1f, 0x76, 0x61, 0xff, 0xf0, 0xc8, 0xac, 0x65,
	0xe9, 0x9f, 0xe3, 0xc1, 0x93, 0xf9, 0xe9, 0x36, 0xc8, 0x99, 0x0e, 0x53, 0xf0, 0xe4, 0xa7, 0xee,
	0xeb, 0x7f, 0xba, 0xab, 0xe4, 0x79, 0x5c, 0x13, 0xbf, 0x8a, 0x09, 0xc2, 0xf0, 0xa3, 0x33, 0x03,
	0x7f, 0xfa, 0xf9, 0xcd, 0xff, 0x09, 0x00, 0x00, 0xff, 0xff, 0xa4, 0x7f, 0xeb, 0x2e, 0x0f, 0x5a,
	0x00, 0x00,
}
