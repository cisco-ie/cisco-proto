/*
Copyright 2019 Cisco Systems

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: bgp_nexthop_vrf_af_bag.proto

package cisco_ios_xr_ipv4_bgp_oper_bgp_instances_instance_instance_standby_default_vrf_afs_af_next_hop_address_families_next_hop_address_family_next_hop_af_vrf_af

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type BgpNexthopVrfAfBag_KEYS struct {
	InstanceName         string   `protobuf:"bytes,1,opt,name=instance_name,json=instanceName,proto3" json:"instance_name,omitempty"`
	AfName               string   `protobuf:"bytes,2,opt,name=af_name,json=afName,proto3" json:"af_name,omitempty"`
	NextHopAfName        string   `protobuf:"bytes,3,opt,name=next_hop_af_name,json=nextHopAfName,proto3" json:"next_hop_af_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BgpNexthopVrfAfBag_KEYS) Reset()         { *m = BgpNexthopVrfAfBag_KEYS{} }
func (m *BgpNexthopVrfAfBag_KEYS) String() string { return proto.CompactTextString(m) }
func (*BgpNexthopVrfAfBag_KEYS) ProtoMessage()    {}
func (*BgpNexthopVrfAfBag_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_85b73b3380d3d6da, []int{0}
}

func (m *BgpNexthopVrfAfBag_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BgpNexthopVrfAfBag_KEYS.Unmarshal(m, b)
}
func (m *BgpNexthopVrfAfBag_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BgpNexthopVrfAfBag_KEYS.Marshal(b, m, deterministic)
}
func (m *BgpNexthopVrfAfBag_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpNexthopVrfAfBag_KEYS.Merge(m, src)
}
func (m *BgpNexthopVrfAfBag_KEYS) XXX_Size() int {
	return xxx_messageInfo_BgpNexthopVrfAfBag_KEYS.Size(m)
}
func (m *BgpNexthopVrfAfBag_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpNexthopVrfAfBag_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_BgpNexthopVrfAfBag_KEYS proto.InternalMessageInfo

func (m *BgpNexthopVrfAfBag_KEYS) GetInstanceName() string {
	if m != nil {
		return m.InstanceName
	}
	return ""
}

func (m *BgpNexthopVrfAfBag_KEYS) GetAfName() string {
	if m != nil {
		return m.AfName
	}
	return ""
}

func (m *BgpNexthopVrfAfBag_KEYS) GetNextHopAfName() string {
	if m != nil {
		return m.NextHopAfName
	}
	return ""
}

type BgpNexthopPerfVrfAfBag struct {
	CriticalNotfCount          uint32   `protobuf:"varint,1,opt,name=critical_notf_count,json=criticalNotfCount,proto3" json:"critical_notf_count,omitempty"`
	NoncriticalNotfCount       uint32   `protobuf:"varint,2,opt,name=noncritical_notf_count,json=noncriticalNotfCount,proto3" json:"noncritical_notf_count,omitempty"`
	LastNotfBestpathDeletes    uint32   `protobuf:"varint,3,opt,name=last_notf_bestpath_deletes,json=lastNotfBestpathDeletes,proto3" json:"last_notf_bestpath_deletes,omitempty"`
	LastNotfBestpathChanges    uint32   `protobuf:"varint,4,opt,name=last_notf_bestpath_changes,json=lastNotfBestpathChanges,proto3" json:"last_notf_bestpath_changes,omitempty"`
	NhSyncRegCalls             uint32   `protobuf:"varint,5,opt,name=nh_sync_reg_calls,json=nhSyncRegCalls,proto3" json:"nh_sync_reg_calls,omitempty"`
	NhaSyncRegCalls            uint32   `protobuf:"varint,6,opt,name=nha_sync_reg_calls,json=nhaSyncRegCalls,proto3" json:"nha_sync_reg_calls,omitempty"`
	NhaSyncUnRegCalls          uint32   `protobuf:"varint,7,opt,name=nha_sync_un_reg_calls,json=nhaSyncUnRegCalls,proto3" json:"nha_sync_un_reg_calls,omitempty"`
	NhPendingRegistrations     uint32   `protobuf:"varint,8,opt,name=nh_pending_registrations,json=nhPendingRegistrations,proto3" json:"nh_pending_registrations,omitempty"`
	NhPeakRegistrations        uint32   `protobuf:"varint,9,opt,name=nh_peak_registrations,json=nhPeakRegistrations,proto3" json:"nh_peak_registrations,omitempty"`
	NhBatchFinishCalls         uint32   `protobuf:"varint,10,opt,name=nh_batch_finish_calls,json=nhBatchFinishCalls,proto3" json:"nh_batch_finish_calls,omitempty"`
	NhFlushTimerCalls          uint32   `protobuf:"varint,11,opt,name=nh_flush_timer_calls,json=nhFlushTimerCalls,proto3" json:"nh_flush_timer_calls,omitempty"`
	NhLastSyncRegTs            uint32   `protobuf:"varint,12,opt,name=nh_last_sync_reg_ts,json=nhLastSyncRegTs,proto3" json:"nh_last_sync_reg_ts,omitempty"`
	NhLastASyncRegTs           uint32   `protobuf:"varint,13,opt,name=nh_last_a_sync_reg_ts,json=nhLastASyncRegTs,proto3" json:"nh_last_a_sync_reg_ts,omitempty"`
	NhLastASyncUnRegTs         uint32   `protobuf:"varint,14,opt,name=nh_last_a_sync_un_reg_ts,json=nhLastASyncUnRegTs,proto3" json:"nh_last_a_sync_un_reg_ts,omitempty"`
	NhLastBatchFinishTs        uint32   `protobuf:"varint,15,opt,name=nh_last_batch_finish_ts,json=nhLastBatchFinishTs,proto3" json:"nh_last_batch_finish_ts,omitempty"`
	NhLastFlushTimerTs         uint32   `protobuf:"varint,16,opt,name=nh_last_flush_timer_ts,json=nhLastFlushTimerTs,proto3" json:"nh_last_flush_timer_ts,omitempty"`
	NhribUpdateCalls           uint32   `protobuf:"varint,17,opt,name=nhrib_update_calls,json=nhribUpdateCalls,proto3" json:"nhrib_update_calls,omitempty"`
	NhribUpdateTime            uint32   `protobuf:"varint,18,opt,name=nhrib_update_time,json=nhribUpdateTime,proto3" json:"nhrib_update_time,omitempty"`
	NexthopsSentToRib          uint32   `protobuf:"varint,19,opt,name=nexthops_sent_to_rib,json=nexthopsSentToRib,proto3" json:"nexthops_sent_to_rib,omitempty"`
	NexthopsResentToRib        uint32   `protobuf:"varint,20,opt,name=nexthops_resent_to_rib,json=nexthopsResentToRib,proto3" json:"nexthops_resent_to_rib,omitempty"`
	NexthopsRemovedFromRib     uint32   `protobuf:"varint,21,opt,name=nexthops_removed_from_rib,json=nexthopsRemovedFromRib,proto3" json:"nexthops_removed_from_rib,omitempty"`
	RibSyncRegistersFailed     uint32   `protobuf:"varint,22,opt,name=rib_sync_registers_failed,json=ribSyncRegistersFailed,proto3" json:"rib_sync_registers_failed,omitempty"`
	RibaSyncRegistersFailed    uint32   `protobuf:"varint,23,opt,name=riba_sync_registers_failed,json=ribaSyncRegistersFailed,proto3" json:"riba_sync_registers_failed,omitempty"`
	RibnhRegFailedForNoTblId   uint32   `protobuf:"varint,24,opt,name=ribnh_reg_failed_for_no_tbl_id,json=ribnhRegFailedForNoTblId,proto3" json:"ribnh_reg_failed_for_no_tbl_id,omitempty"`
	RibnhRegFailedForNoRibConn uint32   `protobuf:"varint,25,opt,name=ribnh_reg_failed_for_no_rib_conn,json=ribnhRegFailedForNoRibConn,proto3" json:"ribnh_reg_failed_for_no_rib_conn,omitempty"`
	TunnelWalkNhNotFound       uint32   `protobuf:"varint,26,opt,name=tunnel_walk_nh_not_found,json=tunnelWalkNhNotFound,proto3" json:"tunnel_walk_nh_not_found,omitempty"`
	TunnelWalkGwNotFound       uint32   `protobuf:"varint,27,opt,name=tunnel_walk_gw_not_found,json=tunnelWalkGwNotFound,proto3" json:"tunnel_walk_gw_not_found,omitempty"`
	TunnelWalkBackupCreates    uint32   `protobuf:"varint,28,opt,name=tunnel_walk_backup_creates,json=tunnelWalkBackupCreates,proto3" json:"tunnel_walk_backup_creates,omitempty"`
	XXX_NoUnkeyedLiteral       struct{} `json:"-"`
	XXX_unrecognized           []byte   `json:"-"`
	XXX_sizecache              int32    `json:"-"`
}

func (m *BgpNexthopPerfVrfAfBag) Reset()         { *m = BgpNexthopPerfVrfAfBag{} }
func (m *BgpNexthopPerfVrfAfBag) String() string { return proto.CompactTextString(m) }
func (*BgpNexthopPerfVrfAfBag) ProtoMessage()    {}
func (*BgpNexthopPerfVrfAfBag) Descriptor() ([]byte, []int) {
	return fileDescriptor_85b73b3380d3d6da, []int{1}
}

func (m *BgpNexthopPerfVrfAfBag) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BgpNexthopPerfVrfAfBag.Unmarshal(m, b)
}
func (m *BgpNexthopPerfVrfAfBag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BgpNexthopPerfVrfAfBag.Marshal(b, m, deterministic)
}
func (m *BgpNexthopPerfVrfAfBag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpNexthopPerfVrfAfBag.Merge(m, src)
}
func (m *BgpNexthopPerfVrfAfBag) XXX_Size() int {
	return xxx_messageInfo_BgpNexthopPerfVrfAfBag.Size(m)
}
func (m *BgpNexthopPerfVrfAfBag) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpNexthopPerfVrfAfBag.DiscardUnknown(m)
}

var xxx_messageInfo_BgpNexthopPerfVrfAfBag proto.InternalMessageInfo

func (m *BgpNexthopPerfVrfAfBag) GetCriticalNotfCount() uint32 {
	if m != nil {
		return m.CriticalNotfCount
	}
	return 0
}

func (m *BgpNexthopPerfVrfAfBag) GetNoncriticalNotfCount() uint32 {
	if m != nil {
		return m.NoncriticalNotfCount
	}
	return 0
}

func (m *BgpNexthopPerfVrfAfBag) GetLastNotfBestpathDeletes() uint32 {
	if m != nil {
		return m.LastNotfBestpathDeletes
	}
	return 0
}

func (m *BgpNexthopPerfVrfAfBag) GetLastNotfBestpathChanges() uint32 {
	if m != nil {
		return m.LastNotfBestpathChanges
	}
	return 0
}

func (m *BgpNexthopPerfVrfAfBag) GetNhSyncRegCalls() uint32 {
	if m != nil {
		return m.NhSyncRegCalls
	}
	return 0
}

func (m *BgpNexthopPerfVrfAfBag) GetNhaSyncRegCalls() uint32 {
	if m != nil {
		return m.NhaSyncRegCalls
	}
	return 0
}

func (m *BgpNexthopPerfVrfAfBag) GetNhaSyncUnRegCalls() uint32 {
	if m != nil {
		return m.NhaSyncUnRegCalls
	}
	return 0
}

func (m *BgpNexthopPerfVrfAfBag) GetNhPendingRegistrations() uint32 {
	if m != nil {
		return m.NhPendingRegistrations
	}
	return 0
}

func (m *BgpNexthopPerfVrfAfBag) GetNhPeakRegistrations() uint32 {
	if m != nil {
		return m.NhPeakRegistrations
	}
	return 0
}

func (m *BgpNexthopPerfVrfAfBag) GetNhBatchFinishCalls() uint32 {
	if m != nil {
		return m.NhBatchFinishCalls
	}
	return 0
}

func (m *BgpNexthopPerfVrfAfBag) GetNhFlushTimerCalls() uint32 {
	if m != nil {
		return m.NhFlushTimerCalls
	}
	return 0
}

func (m *BgpNexthopPerfVrfAfBag) GetNhLastSyncRegTs() uint32 {
	if m != nil {
		return m.NhLastSyncRegTs
	}
	return 0
}

func (m *BgpNexthopPerfVrfAfBag) GetNhLastASyncRegTs() uint32 {
	if m != nil {
		return m.NhLastASyncRegTs
	}
	return 0
}

func (m *BgpNexthopPerfVrfAfBag) GetNhLastASyncUnRegTs() uint32 {
	if m != nil {
		return m.NhLastASyncUnRegTs
	}
	return 0
}

func (m *BgpNexthopPerfVrfAfBag) GetNhLastBatchFinishTs() uint32 {
	if m != nil {
		return m.NhLastBatchFinishTs
	}
	return 0
}

func (m *BgpNexthopPerfVrfAfBag) GetNhLastFlushTimerTs() uint32 {
	if m != nil {
		return m.NhLastFlushTimerTs
	}
	return 0
}

func (m *BgpNexthopPerfVrfAfBag) GetNhribUpdateCalls() uint32 {
	if m != nil {
		return m.NhribUpdateCalls
	}
	return 0
}

func (m *BgpNexthopPerfVrfAfBag) GetNhribUpdateTime() uint32 {
	if m != nil {
		return m.NhribUpdateTime
	}
	return 0
}

func (m *BgpNexthopPerfVrfAfBag) GetNexthopsSentToRib() uint32 {
	if m != nil {
		return m.NexthopsSentToRib
	}
	return 0
}

func (m *BgpNexthopPerfVrfAfBag) GetNexthopsResentToRib() uint32 {
	if m != nil {
		return m.NexthopsResentToRib
	}
	return 0
}

func (m *BgpNexthopPerfVrfAfBag) GetNexthopsRemovedFromRib() uint32 {
	if m != nil {
		return m.NexthopsRemovedFromRib
	}
	return 0
}

func (m *BgpNexthopPerfVrfAfBag) GetRibSyncRegistersFailed() uint32 {
	if m != nil {
		return m.RibSyncRegistersFailed
	}
	return 0
}

func (m *BgpNexthopPerfVrfAfBag) GetRibaSyncRegistersFailed() uint32 {
	if m != nil {
		return m.RibaSyncRegistersFailed
	}
	return 0
}

func (m *BgpNexthopPerfVrfAfBag) GetRibnhRegFailedForNoTblId() uint32 {
	if m != nil {
		return m.RibnhRegFailedForNoTblId
	}
	return 0
}

func (m *BgpNexthopPerfVrfAfBag) GetRibnhRegFailedForNoRibConn() uint32 {
	if m != nil {
		return m.RibnhRegFailedForNoRibConn
	}
	return 0
}

func (m *BgpNexthopPerfVrfAfBag) GetTunnelWalkNhNotFound() uint32 {
	if m != nil {
		return m.TunnelWalkNhNotFound
	}
	return 0
}

func (m *BgpNexthopPerfVrfAfBag) GetTunnelWalkGwNotFound() uint32 {
	if m != nil {
		return m.TunnelWalkGwNotFound
	}
	return 0
}

func (m *BgpNexthopPerfVrfAfBag) GetTunnelWalkBackupCreates() uint32 {
	if m != nil {
		return m.TunnelWalkBackupCreates
	}
	return 0
}

type BgpNexthopVrfAfBag struct {
	AfName                  string                  `protobuf:"bytes,50,opt,name=af_name,json=afName,proto3" json:"af_name,omitempty"`
	GwafName                string                  `protobuf:"bytes,51,opt,name=gwaf_name,json=gwafName,proto3" json:"gwaf_name,omitempty"`
	TotalNexthops           uint32                  `protobuf:"varint,52,opt,name=total_nexthops,json=totalNexthops,proto3" json:"total_nexthops,omitempty"`
	CriticalTriggerDelay    uint32                  `protobuf:"varint,53,opt,name=critical_trigger_delay,json=criticalTriggerDelay,proto3" json:"critical_trigger_delay,omitempty"`
	NonCriticalTriggerDelay uint32                  `protobuf:"varint,54,opt,name=non_critical_trigger_delay,json=nonCriticalTriggerDelay,proto3" json:"non_critical_trigger_delay,omitempty"`
	TableActive             bool                    `protobuf:"varint,55,opt,name=table_active,json=tableActive,proto3" json:"table_active,omitempty"`
	NhRibUp                 bool                    `protobuf:"varint,56,opt,name=nh_rib_up,json=nhRibUp,proto3" json:"nh_rib_up,omitempty"`
	NhRibVersion            uint32                  `protobuf:"varint,57,opt,name=nh_rib_version,json=nhRibVersion,proto3" json:"nh_rib_version,omitempty"`
	NhNexthopVersion        uint32                  `protobuf:"varint,58,opt,name=nh_nexthop_version,json=nhNexthopVersion,proto3" json:"nh_nexthop_version,omitempty"`
	NhTableId               uint32                  `protobuf:"varint,59,opt,name=nh_table_id,json=nhTableId,proto3" json:"nh_table_id,omitempty"`
	EpeTableVersion         uint32                  `protobuf:"varint,60,opt,name=epe_table_version,json=epeTableVersion,proto3" json:"epe_table_version,omitempty"`
	EpeLabelVersion         uint32                  `protobuf:"varint,61,opt,name=epe_label_version,json=epeLabelVersion,proto3" json:"epe_label_version,omitempty"`
	EpeDownloadedVersion    uint32                  `protobuf:"varint,62,opt,name=epe_downloaded_version,json=epeDownloadedVersion,proto3" json:"epe_downloaded_version,omitempty"`
	EpeStandbyVersion       uint32                  `protobuf:"varint,63,opt,name=epe_standby_version,json=epeStandbyVersion,proto3" json:"epe_standby_version,omitempty"`
	PerformanceStatistics   *BgpNexthopPerfVrfAfBag `protobuf:"bytes,64,opt,name=performance_statistics,json=performanceStatistics,proto3" json:"performance_statistics,omitempty"`
	XXX_NoUnkeyedLiteral    struct{}                `json:"-"`
	XXX_unrecognized        []byte                  `json:"-"`
	XXX_sizecache           int32                   `json:"-"`
}

func (m *BgpNexthopVrfAfBag) Reset()         { *m = BgpNexthopVrfAfBag{} }
func (m *BgpNexthopVrfAfBag) String() string { return proto.CompactTextString(m) }
func (*BgpNexthopVrfAfBag) ProtoMessage()    {}
func (*BgpNexthopVrfAfBag) Descriptor() ([]byte, []int) {
	return fileDescriptor_85b73b3380d3d6da, []int{2}
}

func (m *BgpNexthopVrfAfBag) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BgpNexthopVrfAfBag.Unmarshal(m, b)
}
func (m *BgpNexthopVrfAfBag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BgpNexthopVrfAfBag.Marshal(b, m, deterministic)
}
func (m *BgpNexthopVrfAfBag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpNexthopVrfAfBag.Merge(m, src)
}
func (m *BgpNexthopVrfAfBag) XXX_Size() int {
	return xxx_messageInfo_BgpNexthopVrfAfBag.Size(m)
}
func (m *BgpNexthopVrfAfBag) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpNexthopVrfAfBag.DiscardUnknown(m)
}

var xxx_messageInfo_BgpNexthopVrfAfBag proto.InternalMessageInfo

func (m *BgpNexthopVrfAfBag) GetAfName() string {
	if m != nil {
		return m.AfName
	}
	return ""
}

func (m *BgpNexthopVrfAfBag) GetGwafName() string {
	if m != nil {
		return m.GwafName
	}
	return ""
}

func (m *BgpNexthopVrfAfBag) GetTotalNexthops() uint32 {
	if m != nil {
		return m.TotalNexthops
	}
	return 0
}

func (m *BgpNexthopVrfAfBag) GetCriticalTriggerDelay() uint32 {
	if m != nil {
		return m.CriticalTriggerDelay
	}
	return 0
}

func (m *BgpNexthopVrfAfBag) GetNonCriticalTriggerDelay() uint32 {
	if m != nil {
		return m.NonCriticalTriggerDelay
	}
	return 0
}

func (m *BgpNexthopVrfAfBag) GetTableActive() bool {
	if m != nil {
		return m.TableActive
	}
	return false
}

func (m *BgpNexthopVrfAfBag) GetNhRibUp() bool {
	if m != nil {
		return m.NhRibUp
	}
	return false
}

func (m *BgpNexthopVrfAfBag) GetNhRibVersion() uint32 {
	if m != nil {
		return m.NhRibVersion
	}
	return 0
}

func (m *BgpNexthopVrfAfBag) GetNhNexthopVersion() uint32 {
	if m != nil {
		return m.NhNexthopVersion
	}
	return 0
}

func (m *BgpNexthopVrfAfBag) GetNhTableId() uint32 {
	if m != nil {
		return m.NhTableId
	}
	return 0
}

func (m *BgpNexthopVrfAfBag) GetEpeTableVersion() uint32 {
	if m != nil {
		return m.EpeTableVersion
	}
	return 0
}

func (m *BgpNexthopVrfAfBag) GetEpeLabelVersion() uint32 {
	if m != nil {
		return m.EpeLabelVersion
	}
	return 0
}

func (m *BgpNexthopVrfAfBag) GetEpeDownloadedVersion() uint32 {
	if m != nil {
		return m.EpeDownloadedVersion
	}
	return 0
}

func (m *BgpNexthopVrfAfBag) GetEpeStandbyVersion() uint32 {
	if m != nil {
		return m.EpeStandbyVersion
	}
	return 0
}

func (m *BgpNexthopVrfAfBag) GetPerformanceStatistics() *BgpNexthopPerfVrfAfBag {
	if m != nil {
		return m.PerformanceStatistics
	}
	return nil
}

func init() {
	proto.RegisterType((*BgpNexthopVrfAfBag_KEYS)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.default_vrf.afs.af.next_hop_address_families.next_hop_address_family.next_hop_af_vrf_af.bgp_nexthop_vrf_af_bag_KEYS")
	proto.RegisterType((*BgpNexthopPerfVrfAfBag)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.default_vrf.afs.af.next_hop_address_families.next_hop_address_family.next_hop_af_vrf_af.bgp_nexthop_perf_vrf_af_bag")
	proto.RegisterType((*BgpNexthopVrfAfBag)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.default_vrf.afs.af.next_hop_address_families.next_hop_address_family.next_hop_af_vrf_af.bgp_nexthop_vrf_af_bag")
}

func init() { proto.RegisterFile("bgp_nexthop_vrf_af_bag.proto", fileDescriptor_85b73b3380d3d6da) }

var fileDescriptor_85b73b3380d3d6da = []byte{
	// 1131 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x96, 0xdf, 0x52, 0x24, 0xb5,
	0x17, 0xc7, 0x6b, 0xf6, 0xf7, 0x93, 0x5d, 0x02, 0xc3, 0x42, 0x03, 0x43, 0x16, 0xb6, 0xb6, 0x10,
	0xb5, 0xc4, 0x3f, 0x35, 0x2a, 0xe0, 0xba, 0x2b, 0xfe, 0x59, 0x18, 0x1c, 0xdd, 0x72, 0x6b, 0xca,
	0x6a, 0x66, 0xb5, 0xbc, 0x4a, 0xa5, 0xbb, 0xd3, 0xdd, 0x29, 0x7a, 0x4e, 0xba, 0x92, 0x0c, 0x2c,
	0x77, 0x5e, 0xf8, 0x14, 0xbe, 0x88, 0x0f, 0xe1, 0xc3, 0xf8, 0x0a, 0xd6, 0x49, 0xba, 0x9b, 0x1e,
	0x6a, 0xf0, 0xda, 0xab, 0x99, 0x3a, 0xdf, 0xef, 0x27, 0x39, 0xe7, 0xa4, 0xf3, 0x87, 0x3c, 0x8e,
	0xb2, 0x92, 0x81, 0x78, 0x63, 0x73, 0x55, 0xb2, 0x4b, 0x9d, 0x32, 0x9e, 0xb2, 0x88, 0x67, 0xfd,
	0x52, 0x2b, 0xab, 0x82, 0x3f, 0x3a, 0xb1, 0x34, 0xb1, 0x62, 0x52, 0x19, 0xf6, 0x46, 0x33, 0x59,
	0x5e, 0x1e, 0x31, 0x04, 0x54, 0x29, 0x74, 0x3f, 0xca, 0xca, 0xbe, 0x04, 0x63, 0x39, 0xc4, 0xc2,
	0x34, 0xff, 0x9a, 0x3f, 0x0c, 0x7f, 0x92, 0xe8, 0xba, 0x9f, 0x88, 0x94, 0x4f, 0x0b, 0x8b, 0xa3,
	0xf7, 0x79, 0x6a, 0xfa, 0x3c, 0xed, 0xe3, 0x84, 0x0c, 0x67, 0xe4, 0x49, 0xa2, 0x85, 0x31, 0x2c,
	0xe5, 0x13, 0x59, 0x48, 0x61, 0xee, 0x50, 0xae, 0x5b, 0xf1, 0xb4, 0x4a, 0x73, 0xef, 0xf7, 0x0e,
	0xd9, 0x99, 0x9f, 0x3d, 0xfb, 0xf1, 0xbb, 0x5f, 0xcf, 0x83, 0x77, 0x48, 0xb7, 0xc9, 0x05, 0xf8,
	0x44, 0xd0, 0xce, 0x6e, 0x67, 0x7f, 0x31, 0x5c, 0xae, 0x83, 0x23, 0x3e, 0x11, 0xc1, 0x16, 0xb9,
	0xcf, 0x53, 0x2f, 0xdf, 0x73, 0xf2, 0x02, 0x4f, 0x9d, 0xf0, 0x3e, 0x59, 0x6d, 0xcf, 0xe9, 0x1c,
	0xff, 0x73, 0x8e, 0x2e, 0xc6, 0x7f, 0x50, 0xe5, 0x89, 0x33, 0xee, 0xfd, 0xb6, 0x3c, 0x9b, 0x46,
	0x29, 0x74, 0xda, 0xca, 0x25, 0xe8, 0x93, 0xf5, 0x58, 0x4b, 0x2b, 0x63, 0x5e, 0x30, 0x50, 0x36,
	0x65, 0xb1, 0x9a, 0x82, 0x75, 0xc9, 0x74, 0xc3, 0xb5, 0x5a, 0x1a, 0x29, 0x9b, 0x0e, 0x50, 0x08,
	0x8e, 0x48, 0x0f, 0x14, 0xcc, 0x43, 0xee, 0x39, 0x64, 0xa3, 0xa5, 0xde, 0x50, 0xc7, 0x64, 0xbb,
	0xe0, 0xc6, 0x7a, 0x7b, 0x24, 0x8c, 0x2d, 0xb9, 0xcd, 0x59, 0x22, 0x0a, 0x61, 0x85, 0x71, 0x89,
	0x77, 0xc3, 0x2d, 0x74, 0x20, 0x72, 0x5a, 0xe9, 0x67, 0x5e, 0xbe, 0x03, 0x8e, 0x73, 0x0e, 0x99,
	0x30, 0xf4, 0xff, 0xf3, 0xe1, 0x81, 0x97, 0x83, 0x0f, 0xc8, 0x1a, 0xe4, 0xcc, 0x5c, 0x43, 0xcc,
	0xb4, 0xc8, 0x58, 0xcc, 0x8b, 0xc2, 0xd0, 0xb7, 0x1c, 0xb3, 0x02, 0xf9, 0xf9, 0x35, 0xc4, 0xa1,
	0xc8, 0x06, 0x18, 0x0d, 0x3e, 0x22, 0x01, 0xe4, 0xfc, 0xb6, 0x77, 0xc1, 0x79, 0x1f, 0x42, 0xce,
	0x67, 0xcc, 0x9f, 0x92, 0xcd, 0xc6, 0x3c, 0x85, 0x96, 0xff, 0xbe, 0xef, 0x5c, 0xe5, 0x7f, 0x0d,
	0x0d, 0xf1, 0x8c, 0x50, 0xc8, 0x59, 0x29, 0x20, 0x91, 0x90, 0x21, 0x20, 0x8d, 0xd5, 0xdc, 0x4a,
	0x05, 0x86, 0x3e, 0x70, 0x50, 0x0f, 0xf2, 0x9f, 0xbc, 0x1c, 0xb6, 0xd5, 0xe0, 0x00, 0xe7, 0x62,
	0xa5, 0xe0, 0x17, 0xb7, 0xb0, 0x45, 0x87, 0xad, 0x23, 0xc6, 0x2f, 0x66, 0x99, 0xcf, 0x1c, 0x13,
	0x71, 0x1b, 0xe7, 0x2c, 0x95, 0x20, 0x4d, 0x5e, 0xe5, 0x47, 0x1c, 0x13, 0x40, 0x7e, 0x8a, 0xda,
	0xd0, 0x49, 0x3e, 0xc1, 0x4f, 0xc8, 0x06, 0xe4, 0x2c, 0x2d, 0xa6, 0x26, 0x67, 0x56, 0x4e, 0x84,
	0xae, 0x88, 0xa5, 0xba, 0xa2, 0x21, 0x4a, 0x63, 0x54, 0x3c, 0xf0, 0x31, 0x59, 0x87, 0x9c, 0xb9,
	0xb5, 0x69, 0x9a, 0x66, 0x0d, 0x5d, 0xae, 0x3b, 0xf6, 0x8a, 0x1b, 0x5b, 0x35, 0x6d, 0x8c, 0xc3,
	0x6f, 0xd6, 0x6e, 0x3e, 0xe3, 0xef, 0x3a, 0xff, 0xaa, 0xf7, 0x9f, 0xdc, 0x00, 0x47, 0xae, 0x61,
	0x6d, 0xa0, 0x6a, 0xb4, 0x35, 0x74, 0xa5, 0xae, 0xa2, 0x61, 0x5c, 0xa7, 0x1d, 0xb5, 0x55, 0x53,
	0x33, 0xd5, 0x5b, 0x43, 0x1f, 0xd6, 0xed, 0x42, 0xa8, 0x55, 0xfe, 0x18, 0x5b, 0xdc, 0xab, 0xa9,
	0x76, 0x03, 0xac, 0xa1, 0xab, 0xed, 0x99, 0x6e, 0x3a, 0x30, 0xc6, 0xf2, 0x03, 0xc8, 0xb5, 0x8c,
	0xd8, 0xb4, 0x4c, 0xb8, 0x15, 0x55, 0xb7, 0xd6, 0xea, 0x6a, 0xb4, 0x8c, 0x5e, 0x3b, 0xc1, 0x37,
	0xeb, 0x43, 0xfc, 0x10, 0x5b, 0x6e, 0x9c, 0x80, 0x06, 0x75, 0xab, 0x1a, 0x33, 0x0e, 0xee, 0x56,
	0xc2, 0xef, 0x57, 0xc3, 0x8c, 0x00, 0xcb, 0xac, 0x62, 0x5a, 0x46, 0x74, 0xbd, 0x5a, 0x89, 0x4a,
	0x3b, 0x17, 0x60, 0xc7, 0x2a, 0x94, 0x51, 0x70, 0x48, 0x7a, 0x0d, 0xa0, 0x45, 0x1b, 0xd9, 0xa8,
	0x6a, 0xae, 0xd4, 0xd0, 0x89, 0x1e, 0x7a, 0x4e, 0x1e, 0xb5, 0xa0, 0x89, 0xba, 0x14, 0x09, 0x4b,
	0xb5, 0x9a, 0x38, 0x6e, 0xb3, 0xfa, 0x22, 0x1b, 0xce, 0xe9, 0x43, 0xad, 0x26, 0x15, 0x8a, 0xa5,
	0xd4, 0xab, 0x28, 0x8d, 0x15, 0x1a, 0x0f, 0x43, 0x59, 0x88, 0x84, 0xf6, 0x3c, 0xaa, 0x65, 0x54,
	0xad, 0xa5, 0x97, 0x87, 0x4e, 0xc5, 0xdd, 0xac, 0x65, 0xc4, 0xef, 0x60, 0xb7, 0xfc, 0x6e, 0x46,
	0xc7, 0x3c, 0xf8, 0x05, 0x79, 0xa2, 0x65, 0x04, 0xb9, 0xfb, 0x0c, 0x3c, 0xc2, 0x52, 0xa5, 0x19,
	0x28, 0x66, 0xa3, 0x82, 0xc9, 0x84, 0x52, 0x37, 0x00, 0x75, 0xae, 0x50, 0x64, 0x9e, 0x1b, 0x2a,
	0x3d, 0x52, 0xe3, 0xa8, 0x78, 0x99, 0x04, 0x67, 0x64, 0xf7, 0xae, 0x11, 0xb0, 0xa2, 0x58, 0x01,
	0xd0, 0x47, 0x6e, 0x8c, 0xed, 0x39, 0x63, 0x84, 0x32, 0x1a, 0x28, 0x80, 0xe0, 0x29, 0xa1, 0x76,
	0x0a, 0x20, 0x0a, 0x76, 0xc5, 0x8b, 0x0b, 0x06, 0x39, 0x1e, 0x4e, 0x2c, 0x55, 0x53, 0x48, 0xe8,
	0xb6, 0x3f, 0x07, 0xbd, 0xfe, 0x0b, 0x2f, 0x2e, 0x46, 0xf9, 0x48, 0xd9, 0x21, 0x6a, 0xb7, 0xb9,
	0xec, 0xaa, 0xc5, 0xed, 0xdc, 0xe6, 0xbe, 0xbf, 0x6a, 0xb8, 0x63, 0xb2, 0xdd, 0xe6, 0x22, 0x1e,
	0x5f, 0x4c, 0x4b, 0x16, 0x6b, 0xc1, 0xf1, 0xfc, 0x7c, 0xec, 0x9b, 0x76, 0x43, 0x9e, 0x3a, 0x7d,
	0xe0, 0xe5, 0xbd, 0xbf, 0x16, 0x48, 0x6f, 0xfe, 0x4d, 0xd4, 0xbe, 0x5f, 0x0e, 0x66, 0xee, 0x97,
	0x1d, 0xb2, 0x98, 0x5d, 0xd5, 0xd2, 0xa1, 0x93, 0x1e, 0x60, 0xc0, 0x89, 0xef, 0x91, 0x15, 0xab,
	0x2c, 0x9e, 0xfe, 0xd5, 0xd7, 0x41, 0x8f, 0x5c, 0x06, 0x5d, 0x17, 0x1d, 0x55, 0x41, 0xbc, 0x2a,
	0x9a, 0x7b, 0xc2, 0x6a, 0x99, 0x65, 0x42, 0xe3, 0x91, 0xcf, 0xaf, 0xe9, 0xe7, 0xbe, 0xd4, 0x5a,
	0x1d, 0x7b, 0xf1, 0x0c, 0x35, 0x2c, 0x15, 0x14, 0xb0, 0x3b, 0xc8, 0xa7, 0xbe, 0x54, 0x50, 0x30,
	0x98, 0x07, 0xbf, 0x4d, 0x96, 0x2d, 0x8f, 0x0a, 0xc1, 0x78, 0x6c, 0xe5, 0xa5, 0xa0, 0x5f, 0xec,
	0x76, 0xf6, 0x1f, 0x84, 0x4b, 0x2e, 0x76, 0xe2, 0x42, 0xc1, 0x36, 0x59, 0xc4, 0xd5, 0x77, 0x1b,
	0x91, 0x3e, 0x73, 0xfa, 0x7d, 0xc8, 0x43, 0xdc, 0x7f, 0xc1, 0xbb, 0x64, 0xa5, 0xd2, 0x2e, 0x85,
	0x36, 0x52, 0x01, 0x7d, 0xee, 0xe6, 0x5b, 0x76, 0x86, 0x9f, 0x7d, 0xcc, 0xef, 0xfb, 0x9b, 0x6e,
	0x56, 0xce, 0x2f, 0xeb, 0x7d, 0x5f, 0xd5, 0x5f, 0xbb, 0x9f, 0x90, 0x25, 0xc8, 0x99, 0xcf, 0x4a,
	0x26, 0xf4, 0xd8, 0xd9, 0x16, 0x21, 0x1f, 0x63, 0xe4, 0x65, 0x82, 0xe7, 0x82, 0x28, 0x45, 0x65,
	0xa8, 0x07, 0xfb, 0xca, 0x9f, 0x0b, 0xa2, 0x14, 0xce, 0x56, 0x8f, 0x55, 0x79, 0x0b, 0x1e, 0x89,
	0xa2, 0xf1, 0x7e, 0xdd, 0x78, 0x5f, 0x61, 0xbc, 0xf6, 0x1e, 0x91, 0x1e, 0x7a, 0x13, 0x75, 0x05,
	0x85, 0xe2, 0x89, 0x48, 0x1a, 0xe0, 0x1b, 0xdf, 0x7d, 0x51, 0x8a, 0xb3, 0x46, 0xac, 0xa9, 0x3e,
	0x59, 0x47, 0xaa, 0x7a, 0x1c, 0x35, 0xc8, 0xb7, 0xfe, 0xe0, 0x11, 0xa5, 0x38, 0xf7, 0x4a, 0xed,
	0xff, 0xbb, 0x43, 0x7a, 0xf8, 0xa4, 0x50, 0x7a, 0x52, 0xbf, 0xaa, 0xac, 0x34, 0x56, 0xc6, 0x86,
	0xbe, 0xd8, 0xed, 0xec, 0x2f, 0x1d, 0xfc, 0xd9, 0xe9, 0xff, 0x77, 0x1f, 0x69, 0xfd, 0x7f, 0x79,
	0x19, 0x85, 0x9b, 0xad, 0xba, 0xce, 0x9b, 0xb2, 0xa2, 0x05, 0xf7, 0xf6, 0x3c, 0xfc, 0x27, 0x00,
	0x00, 0xff, 0xff, 0x3d, 0x5d, 0xb3, 0x6c, 0x9b, 0x0a, 0x00, 0x00,
}
