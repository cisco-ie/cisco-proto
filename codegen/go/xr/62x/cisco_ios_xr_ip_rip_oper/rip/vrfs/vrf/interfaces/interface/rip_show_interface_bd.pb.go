/*
Copyright 2019 Cisco Systems

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rip_show_interface_bd.proto

package cisco_ios_xr_ip_rip_oper_rip_vrfs_vrf_interfaces_interface

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type RipShowInterfaceBd_KEYS struct {
	VrfName              string   `protobuf:"bytes,1,opt,name=vrf_name,json=vrfName,proto3" json:"vrf_name,omitempty"`
	InterfaceName        string   `protobuf:"bytes,2,opt,name=interface_name,json=interfaceName,proto3" json:"interface_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RipShowInterfaceBd_KEYS) Reset()         { *m = RipShowInterfaceBd_KEYS{} }
func (m *RipShowInterfaceBd_KEYS) String() string { return proto.CompactTextString(m) }
func (*RipShowInterfaceBd_KEYS) ProtoMessage()    {}
func (*RipShowInterfaceBd_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_39cdfe289b08ca95, []int{0}
}

func (m *RipShowInterfaceBd_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RipShowInterfaceBd_KEYS.Unmarshal(m, b)
}
func (m *RipShowInterfaceBd_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RipShowInterfaceBd_KEYS.Marshal(b, m, deterministic)
}
func (m *RipShowInterfaceBd_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RipShowInterfaceBd_KEYS.Merge(m, src)
}
func (m *RipShowInterfaceBd_KEYS) XXX_Size() int {
	return xxx_messageInfo_RipShowInterfaceBd_KEYS.Size(m)
}
func (m *RipShowInterfaceBd_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_RipShowInterfaceBd_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_RipShowInterfaceBd_KEYS proto.InternalMessageInfo

func (m *RipShowInterfaceBd_KEYS) GetVrfName() string {
	if m != nil {
		return m.VrfName
	}
	return ""
}

func (m *RipShowInterfaceBd_KEYS) GetInterfaceName() string {
	if m != nil {
		return m.InterfaceName
	}
	return ""
}

type RipSummaryBd struct {
	Prefix               string   `protobuf:"bytes,1,opt,name=prefix,proto3" json:"prefix,omitempty"`
	PrefixLength         uint32   `protobuf:"varint,2,opt,name=prefix_length,json=prefixLength,proto3" json:"prefix_length,omitempty"`
	NextHopAddress       string   `protobuf:"bytes,3,opt,name=next_hop_address,json=nextHopAddress,proto3" json:"next_hop_address,omitempty"`
	Metric               int32    `protobuf:"zigzag32,4,opt,name=metric,proto3" json:"metric,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RipSummaryBd) Reset()         { *m = RipSummaryBd{} }
func (m *RipSummaryBd) String() string { return proto.CompactTextString(m) }
func (*RipSummaryBd) ProtoMessage()    {}
func (*RipSummaryBd) Descriptor() ([]byte, []int) {
	return fileDescriptor_39cdfe289b08ca95, []int{1}
}

func (m *RipSummaryBd) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RipSummaryBd.Unmarshal(m, b)
}
func (m *RipSummaryBd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RipSummaryBd.Marshal(b, m, deterministic)
}
func (m *RipSummaryBd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RipSummaryBd.Merge(m, src)
}
func (m *RipSummaryBd) XXX_Size() int {
	return xxx_messageInfo_RipSummaryBd.Size(m)
}
func (m *RipSummaryBd) XXX_DiscardUnknown() {
	xxx_messageInfo_RipSummaryBd.DiscardUnknown(m)
}

var xxx_messageInfo_RipSummaryBd proto.InternalMessageInfo

func (m *RipSummaryBd) GetPrefix() string {
	if m != nil {
		return m.Prefix
	}
	return ""
}

func (m *RipSummaryBd) GetPrefixLength() uint32 {
	if m != nil {
		return m.PrefixLength
	}
	return 0
}

func (m *RipSummaryBd) GetNextHopAddress() string {
	if m != nil {
		return m.NextHopAddress
	}
	return ""
}

func (m *RipSummaryBd) GetMetric() int32 {
	if m != nil {
		return m.Metric
	}
	return 0
}

type RipPeerBd struct {
	PeerUptime           uint32   `protobuf:"varint,1,opt,name=peer_uptime,json=peerUptime,proto3" json:"peer_uptime,omitempty"`
	PeerAddress          string   `protobuf:"bytes,2,opt,name=peer_address,json=peerAddress,proto3" json:"peer_address,omitempty"`
	PeerVersion          uint32   `protobuf:"varint,3,opt,name=peer_version,json=peerVersion,proto3" json:"peer_version,omitempty"`
	DiscardedPeerPackets uint32   `protobuf:"varint,4,opt,name=discarded_peer_packets,json=discardedPeerPackets,proto3" json:"discarded_peer_packets,omitempty"`
	DiscardedPeerRoutes  uint32   `protobuf:"varint,5,opt,name=discarded_peer_routes,json=discardedPeerRoutes,proto3" json:"discarded_peer_routes,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RipPeerBd) Reset()         { *m = RipPeerBd{} }
func (m *RipPeerBd) String() string { return proto.CompactTextString(m) }
func (*RipPeerBd) ProtoMessage()    {}
func (*RipPeerBd) Descriptor() ([]byte, []int) {
	return fileDescriptor_39cdfe289b08ca95, []int{2}
}

func (m *RipPeerBd) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RipPeerBd.Unmarshal(m, b)
}
func (m *RipPeerBd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RipPeerBd.Marshal(b, m, deterministic)
}
func (m *RipPeerBd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RipPeerBd.Merge(m, src)
}
func (m *RipPeerBd) XXX_Size() int {
	return xxx_messageInfo_RipPeerBd.Size(m)
}
func (m *RipPeerBd) XXX_DiscardUnknown() {
	xxx_messageInfo_RipPeerBd.DiscardUnknown(m)
}

var xxx_messageInfo_RipPeerBd proto.InternalMessageInfo

func (m *RipPeerBd) GetPeerUptime() uint32 {
	if m != nil {
		return m.PeerUptime
	}
	return 0
}

func (m *RipPeerBd) GetPeerAddress() string {
	if m != nil {
		return m.PeerAddress
	}
	return ""
}

func (m *RipPeerBd) GetPeerVersion() uint32 {
	if m != nil {
		return m.PeerVersion
	}
	return 0
}

func (m *RipPeerBd) GetDiscardedPeerPackets() uint32 {
	if m != nil {
		return m.DiscardedPeerPackets
	}
	return 0
}

func (m *RipPeerBd) GetDiscardedPeerRoutes() uint32 {
	if m != nil {
		return m.DiscardedPeerRoutes
	}
	return 0
}

type RipShowInterfaceBd struct {
	Interface            string          `protobuf:"bytes,50,opt,name=interface,proto3" json:"interface,omitempty"`
	IfHandle             string          `protobuf:"bytes,51,opt,name=if_handle,json=ifHandle,proto3" json:"if_handle,omitempty"`
	RipEnabled           bool            `protobuf:"varint,52,opt,name=rip_enabled,json=ripEnabled,proto3" json:"rip_enabled,omitempty"`
	IsPassiveInterface   bool            `protobuf:"varint,53,opt,name=is_passive_interface,json=isPassiveInterface,proto3" json:"is_passive_interface,omitempty"`
	MulticastAddress     bool            `protobuf:"varint,54,opt,name=multicast_address,json=multicastAddress,proto3" json:"multicast_address,omitempty"`
	AcceptMetric         bool            `protobuf:"varint,55,opt,name=accept_metric,json=acceptMetric,proto3" json:"accept_metric,omitempty"`
	SendVersion          uint32          `protobuf:"varint,56,opt,name=send_version,json=sendVersion,proto3" json:"send_version,omitempty"`
	ReceiveVersion       uint32          `protobuf:"varint,57,opt,name=receive_version,json=receiveVersion,proto3" json:"receive_version,omitempty"`
	State                string          `protobuf:"bytes,58,opt,name=state,proto3" json:"state,omitempty"`
	DestinationAddress   string          `protobuf:"bytes,59,opt,name=destination_address,json=destinationAddress,proto3" json:"destination_address,omitempty"`
	PrefixLength         uint32          `protobuf:"varint,60,opt,name=prefix_length,json=prefixLength,proto3" json:"prefix_length,omitempty"`
	RipSummary           []*RipSummaryBd `protobuf:"bytes,61,rep,name=rip_summary,json=ripSummary,proto3" json:"rip_summary,omitempty"`
	RipPeer              []*RipPeerBd    `protobuf:"bytes,62,rep,name=rip_peer,json=ripPeer,proto3" json:"rip_peer,omitempty"`
	MetricCost           uint32          `protobuf:"varint,63,opt,name=metric_cost,json=metricCost,proto3" json:"metric_cost,omitempty"`
	SplitHorizon         bool            `protobuf:"varint,64,opt,name=split_horizon,json=splitHorizon,proto3" json:"split_horizon,omitempty"`
	PoisonHorizon        bool            `protobuf:"varint,65,opt,name=poison_horizon,json=poisonHorizon,proto3" json:"poison_horizon,omitempty"`
	TriggeredRip         bool            `protobuf:"varint,66,opt,name=triggered_rip,json=triggeredRip,proto3" json:"triggered_rip,omitempty"`
	NeighborAddress      string          `protobuf:"bytes,67,opt,name=neighbor_address,json=neighborAddress,proto3" json:"neighbor_address,omitempty"`
	OomFlags             uint32          `protobuf:"varint,68,opt,name=oom_flags,json=oomFlags,proto3" json:"oom_flags,omitempty"`
	JoinStatus           bool            `protobuf:"varint,69,opt,name=join_status,json=joinStatus,proto3" json:"join_status,omitempty"`
	LptsState            bool            `protobuf:"varint,70,opt,name=lpts_state,json=lptsState,proto3" json:"lpts_state,omitempty"`
	AuthMode             uint32          `protobuf:"varint,71,opt,name=auth_mode,json=authMode,proto3" json:"auth_mode,omitempty"`
	AuthKeychain         string          `protobuf:"bytes,72,opt,name=auth_keychain,json=authKeychain,proto3" json:"auth_keychain,omitempty"`
	SendAuthKeyExists    bool            `protobuf:"varint,73,opt,name=send_auth_key_exists,json=sendAuthKeyExists,proto3" json:"send_auth_key_exists,omitempty"`
	AuthKeyMd5           bool            `protobuf:"varint,74,opt,name=auth_key_md5,json=authKeyMd5,proto3" json:"auth_key_md5,omitempty"`
	AuthKeySendId        uint64          `protobuf:"varint,75,opt,name=auth_key_send_id,json=authKeySendId,proto3" json:"auth_key_send_id,omitempty"`
	TotalPktRecvd        uint32          `protobuf:"varint,76,opt,name=total_pkt_recvd,json=totalPktRecvd,proto3" json:"total_pkt_recvd,omitempty"`
	PktDropWrongKc       uint32          `protobuf:"varint,77,opt,name=pkt_drop_wrong_kc,json=pktDropWrongKc,proto3" json:"pkt_drop_wrong_kc,omitempty"`
	PktDropNoAuth        uint32          `protobuf:"varint,78,opt,name=pkt_drop_no_auth,json=pktDropNoAuth,proto3" json:"pkt_drop_no_auth,omitempty"`
	PktDropInvalidAuth   uint32          `protobuf:"varint,79,opt,name=pkt_drop_invalid_auth,json=pktDropInvalidAuth,proto3" json:"pkt_drop_invalid_auth,omitempty"`
	PktAcceptedValidAuth uint32          `protobuf:"varint,80,opt,name=pkt_accepted_valid_auth,json=pktAcceptedValidAuth,proto3" json:"pkt_accepted_valid_auth,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *RipShowInterfaceBd) Reset()         { *m = RipShowInterfaceBd{} }
func (m *RipShowInterfaceBd) String() string { return proto.CompactTextString(m) }
func (*RipShowInterfaceBd) ProtoMessage()    {}
func (*RipShowInterfaceBd) Descriptor() ([]byte, []int) {
	return fileDescriptor_39cdfe289b08ca95, []int{3}
}

func (m *RipShowInterfaceBd) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RipShowInterfaceBd.Unmarshal(m, b)
}
func (m *RipShowInterfaceBd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RipShowInterfaceBd.Marshal(b, m, deterministic)
}
func (m *RipShowInterfaceBd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RipShowInterfaceBd.Merge(m, src)
}
func (m *RipShowInterfaceBd) XXX_Size() int {
	return xxx_messageInfo_RipShowInterfaceBd.Size(m)
}
func (m *RipShowInterfaceBd) XXX_DiscardUnknown() {
	xxx_messageInfo_RipShowInterfaceBd.DiscardUnknown(m)
}

var xxx_messageInfo_RipShowInterfaceBd proto.InternalMessageInfo

func (m *RipShowInterfaceBd) GetInterface() string {
	if m != nil {
		return m.Interface
	}
	return ""
}

func (m *RipShowInterfaceBd) GetIfHandle() string {
	if m != nil {
		return m.IfHandle
	}
	return ""
}

func (m *RipShowInterfaceBd) GetRipEnabled() bool {
	if m != nil {
		return m.RipEnabled
	}
	return false
}

func (m *RipShowInterfaceBd) GetIsPassiveInterface() bool {
	if m != nil {
		return m.IsPassiveInterface
	}
	return false
}

func (m *RipShowInterfaceBd) GetMulticastAddress() bool {
	if m != nil {
		return m.MulticastAddress
	}
	return false
}

func (m *RipShowInterfaceBd) GetAcceptMetric() bool {
	if m != nil {
		return m.AcceptMetric
	}
	return false
}

func (m *RipShowInterfaceBd) GetSendVersion() uint32 {
	if m != nil {
		return m.SendVersion
	}
	return 0
}

func (m *RipShowInterfaceBd) GetReceiveVersion() uint32 {
	if m != nil {
		return m.ReceiveVersion
	}
	return 0
}

func (m *RipShowInterfaceBd) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *RipShowInterfaceBd) GetDestinationAddress() string {
	if m != nil {
		return m.DestinationAddress
	}
	return ""
}

func (m *RipShowInterfaceBd) GetPrefixLength() uint32 {
	if m != nil {
		return m.PrefixLength
	}
	return 0
}

func (m *RipShowInterfaceBd) GetRipSummary() []*RipSummaryBd {
	if m != nil {
		return m.RipSummary
	}
	return nil
}

func (m *RipShowInterfaceBd) GetRipPeer() []*RipPeerBd {
	if m != nil {
		return m.RipPeer
	}
	return nil
}

func (m *RipShowInterfaceBd) GetMetricCost() uint32 {
	if m != nil {
		return m.MetricCost
	}
	return 0
}

func (m *RipShowInterfaceBd) GetSplitHorizon() bool {
	if m != nil {
		return m.SplitHorizon
	}
	return false
}

func (m *RipShowInterfaceBd) GetPoisonHorizon() bool {
	if m != nil {
		return m.PoisonHorizon
	}
	return false
}

func (m *RipShowInterfaceBd) GetTriggeredRip() bool {
	if m != nil {
		return m.TriggeredRip
	}
	return false
}

func (m *RipShowInterfaceBd) GetNeighborAddress() string {
	if m != nil {
		return m.NeighborAddress
	}
	return ""
}

func (m *RipShowInterfaceBd) GetOomFlags() uint32 {
	if m != nil {
		return m.OomFlags
	}
	return 0
}

func (m *RipShowInterfaceBd) GetJoinStatus() bool {
	if m != nil {
		return m.JoinStatus
	}
	return false
}

func (m *RipShowInterfaceBd) GetLptsState() bool {
	if m != nil {
		return m.LptsState
	}
	return false
}

func (m *RipShowInterfaceBd) GetAuthMode() uint32 {
	if m != nil {
		return m.AuthMode
	}
	return 0
}

func (m *RipShowInterfaceBd) GetAuthKeychain() string {
	if m != nil {
		return m.AuthKeychain
	}
	return ""
}

func (m *RipShowInterfaceBd) GetSendAuthKeyExists() bool {
	if m != nil {
		return m.SendAuthKeyExists
	}
	return false
}

func (m *RipShowInterfaceBd) GetAuthKeyMd5() bool {
	if m != nil {
		return m.AuthKeyMd5
	}
	return false
}

func (m *RipShowInterfaceBd) GetAuthKeySendId() uint64 {
	if m != nil {
		return m.AuthKeySendId
	}
	return 0
}

func (m *RipShowInterfaceBd) GetTotalPktRecvd() uint32 {
	if m != nil {
		return m.TotalPktRecvd
	}
	return 0
}

func (m *RipShowInterfaceBd) GetPktDropWrongKc() uint32 {
	if m != nil {
		return m.PktDropWrongKc
	}
	return 0
}

func (m *RipShowInterfaceBd) GetPktDropNoAuth() uint32 {
	if m != nil {
		return m.PktDropNoAuth
	}
	return 0
}

func (m *RipShowInterfaceBd) GetPktDropInvalidAuth() uint32 {
	if m != nil {
		return m.PktDropInvalidAuth
	}
	return 0
}

func (m *RipShowInterfaceBd) GetPktAcceptedValidAuth() uint32 {
	if m != nil {
		return m.PktAcceptedValidAuth
	}
	return 0
}

func init() {
	proto.RegisterType((*RipShowInterfaceBd_KEYS)(nil), "cisco_ios_xr_ip_rip_oper.rip.vrfs.vrf.interfaces.interface.rip_show_interface_bd_KEYS")
	proto.RegisterType((*RipSummaryBd)(nil), "cisco_ios_xr_ip_rip_oper.rip.vrfs.vrf.interfaces.interface.rip_summary_bd")
	proto.RegisterType((*RipPeerBd)(nil), "cisco_ios_xr_ip_rip_oper.rip.vrfs.vrf.interfaces.interface.rip_peer_bd")
	proto.RegisterType((*RipShowInterfaceBd)(nil), "cisco_ios_xr_ip_rip_oper.rip.vrfs.vrf.interfaces.interface.rip_show_interface_bd")
}

func init() { proto.RegisterFile("rip_show_interface_bd.proto", fileDescriptor_39cdfe289b08ca95) }

var fileDescriptor_39cdfe289b08ca95 = []byte{
	// 929 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x55, 0xeb, 0x72, 0x1b, 0x35,
	0x14, 0x1e, 0xd3, 0x9b, 0x7d, 0xe2, 0xcd, 0x45, 0x4d, 0x8a, 0x20, 0x30, 0x98, 0x64, 0xa0, 0xee,
	0x30, 0xe3, 0x42, 0xda, 0x70, 0x29, 0xd7, 0xd0, 0xa6, 0x4d, 0x9a, 0x26, 0x78, 0xd6, 0x43, 0x19,
	0xfe, 0xa0, 0x91, 0x57, 0xb2, 0x2d, 0xec, 0x5d, 0x69, 0x24, 0xd9, 0x4d, 0x78, 0x09, 0xde, 0x88,
	0x47, 0xe1, 0x59, 0x18, 0x1d, 0xed, 0xae, 0x13, 0x26, 0xbf, 0xe0, 0x8f, 0x67, 0xcf, 0x77, 0xbe,
	0x73, 0x3f, 0x47, 0x86, 0x6d, 0xab, 0x0c, 0x73, 0x13, 0xfd, 0x86, 0xa9, 0xc2, 0x4b, 0x3b, 0xe2,
	0x99, 0x64, 0x43, 0xd1, 0x33, 0x56, 0x7b, 0x4d, 0x9e, 0x64, 0xca, 0x65, 0x9a, 0x29, 0xed, 0xd8,
	0xb9, 0x65, 0xca, 0xb0, 0x40, 0xd6, 0x46, 0xda, 0x9e, 0x55, 0xa6, 0xb7, 0xb0, 0x23, 0x17, 0x7e,
	0x7a, 0xb5, 0xa5, 0x5b, 0x7e, 0xee, 0xfc, 0x06, 0xef, 0x5e, 0xeb, 0x9a, 0x9d, 0x1c, 0xfe, 0x3a,
	0x20, 0xef, 0x40, 0x73, 0x61, 0x47, 0xac, 0xe0, 0xb9, 0xa4, 0x8d, 0x4e, 0xa3, 0xdb, 0x4a, 0xef,
	0x2c, 0xec, 0xe8, 0x8c, 0xe7, 0x92, 0x7c, 0x04, 0xab, 0x4b, 0x3e, 0x12, 0xde, 0x42, 0x42, 0x52,
	0xa3, 0x81, 0xb6, 0xf3, 0x67, 0x03, 0x56, 0x31, 0xc0, 0x3c, 0xcf, 0xb9, 0xbd, 0x60, 0x43, 0x41,
	0xee, 0xc1, 0x6d, 0x63, 0xe5, 0x48, 0x9d, 0x97, 0x2e, 0x4b, 0x89, 0xec, 0x42, 0x12, 0xbf, 0xd8,
	0x4c, 0x16, 0x63, 0x3f, 0x41, 0x87, 0x49, 0xda, 0x8e, 0xe0, 0x2b, 0xc4, 0x48, 0x17, 0xd6, 0x0b,
	0x79, 0xee, 0xd9, 0x44, 0x1b, 0xc6, 0x85, 0xb0, 0xd2, 0x39, 0x7a, 0x03, 0xdd, 0xac, 0x06, 0xfc,
	0x48, 0x9b, 0x83, 0x88, 0x86, 0x30, 0xb9, 0xf4, 0x56, 0x65, 0xf4, 0x66, 0xa7, 0xd1, 0xdd, 0x48,
	0x4b, 0x69, 0xe7, 0xef, 0x06, 0xac, 0x84, 0x8c, 0x8c, 0x94, 0x36, 0xa4, 0xf3, 0x01, 0xac, 0xe0,
	0xe7, 0xdc, 0x78, 0x55, 0x96, 0x99, 0xa4, 0x10, 0xa0, 0x9f, 0x11, 0x21, 0x1f, 0x42, 0x1b, 0x09,
	0x55, 0xb8, 0x58, 0x27, 0x1a, 0x55, 0xb1, 0x2a, 0xca, 0x42, 0x5a, 0xa7, 0x74, 0x81, 0x19, 0x25,
	0x91, 0xf2, 0x3a, 0x42, 0xe4, 0x31, 0xdc, 0x13, 0xca, 0x65, 0xdc, 0x0a, 0x29, 0x62, 0x6c, 0xc3,
	0xb3, 0xa9, 0xf4, 0x0e, 0xd3, 0x4b, 0xd2, 0xcd, 0x5a, 0xdb, 0x97, 0xd2, 0xf6, 0xa3, 0x8e, 0xec,
	0xc1, 0xd6, 0xbf, 0xac, 0xac, 0x9e, 0x7b, 0xe9, 0xe8, 0x2d, 0x34, 0xba, 0x7b, 0xc5, 0x28, 0x45,
	0xd5, 0xce, 0x5f, 0x00, 0x5b, 0xd7, 0xce, 0x94, 0xbc, 0x07, 0xad, 0x5a, 0xa6, 0x7b, 0x58, 0xc6,
	0x12, 0x20, 0xdb, 0xd0, 0x52, 0x23, 0x36, 0xe1, 0x85, 0x98, 0x49, 0xfa, 0x08, 0xb5, 0x4d, 0x35,
	0x3a, 0x42, 0x39, 0x74, 0x29, 0xf8, 0x94, 0x05, 0x1f, 0xce, 0xa4, 0xa0, 0x8f, 0x3b, 0x8d, 0x6e,
	0x33, 0x05, 0xab, 0xcc, 0x61, 0x44, 0xc8, 0xa7, 0xb0, 0xa9, 0x1c, 0x33, 0xdc, 0x39, 0xb5, 0x90,
	0xcb, 0xb0, 0x74, 0x1f, 0x99, 0x44, 0xb9, 0x7e, 0x54, 0x1d, 0xd7, 0xf1, 0x3e, 0x81, 0x8d, 0x7c,
	0x3e, 0xf3, 0x2a, 0xe3, 0xce, 0xd7, 0xcd, 0xfd, 0x1c, 0xe9, 0xeb, 0xb5, 0xa2, 0xea, 0xf0, 0x2e,
	0x24, 0x3c, 0xcb, 0xa4, 0xf1, 0xac, 0x1c, 0xea, 0x17, 0x48, 0x6c, 0x47, 0xf0, 0x14, 0xb1, 0x30,
	0x06, 0x27, 0x0b, 0x51, 0x8f, 0xe1, 0xcb, 0x38, 0x86, 0x80, 0x55, 0x63, 0xb8, 0x0f, 0x6b, 0x56,
	0x66, 0x32, 0xe4, 0x58, 0xb1, 0xbe, 0x42, 0xd6, 0x6a, 0x09, 0x57, 0xc4, 0x4d, 0xb8, 0xe5, 0x3c,
	0xf7, 0x92, 0x3e, 0xc1, 0x4e, 0x44, 0x81, 0x3c, 0x84, 0xbb, 0x42, 0x3a, 0xaf, 0x0a, 0xee, 0x95,
	0x2e, 0xea, 0xac, 0xbf, 0x46, 0x0e, 0xb9, 0xa4, 0xba, 0x94, 0xf7, 0xd5, 0xa5, 0xfe, 0xe6, 0x9a,
	0xa5, 0x9e, 0xc6, 0xe6, 0x96, 0x37, 0x42, 0xbf, 0xed, 0xdc, 0xe8, 0xae, 0xec, 0xbd, 0xec, 0xfd,
	0xf7, 0xb3, 0xee, 0x5d, 0x3d, 0x39, 0x1c, 0xd4, 0x20, 0x8a, 0x64, 0x08, 0xcd, 0x6a, 0xfd, 0xe9,
	0x77, 0x18, 0xe9, 0xc5, 0xff, 0x8d, 0x54, 0x9e, 0x52, 0x7a, 0xc7, 0x2a, 0x13, 0x16, 0x31, 0x6c,
	0x4b, 0x1c, 0x13, 0xcb, 0xb4, 0xf3, 0xf4, 0xfb, 0x78, 0x53, 0x11, 0x7a, 0xaa, 0x9d, 0x0f, 0x6d,
	0x71, 0x66, 0xa6, 0xc2, 0x1d, 0x5b, 0xf5, 0x87, 0x2e, 0xe8, 0x0f, 0x71, 0x9c, 0x08, 0x1e, 0x45,
	0x2c, 0x3c, 0x31, 0x46, 0x2b, 0xa7, 0x8b, 0x9a, 0x75, 0x80, 0xac, 0x24, 0xa2, 0x15, 0x6d, 0x17,
	0x12, 0x6f, 0xd5, 0x78, 0x2c, 0xad, 0x14, 0x21, 0x73, 0xfa, 0x63, 0xf4, 0x55, 0x83, 0xa9, 0x32,
	0xe4, 0x41, 0x78, 0x37, 0xd4, 0x78, 0x32, 0xd4, 0xcb, 0x43, 0x7e, 0x8a, 0x53, 0x5b, 0xab, 0xf0,
	0x6a, 0x64, 0xdb, 0xd0, 0xd2, 0x3a, 0x67, 0xa3, 0x19, 0x1f, 0x3b, 0xfa, 0x0c, 0x53, 0x6f, 0x6a,
	0x9d, 0x3f, 0x0f, 0x72, 0xa8, 0xec, 0x77, 0xad, 0x0a, 0x16, 0xd6, 0x61, 0xee, 0xe8, 0x61, 0xbc,
	0x83, 0x00, 0x0d, 0x10, 0x21, 0xef, 0x03, 0xcc, 0x8c, 0x77, 0x2c, 0x2e, 0xcf, 0x73, 0xd4, 0xb7,
	0x02, 0x32, 0xc0, 0x05, 0xda, 0x86, 0x16, 0x9f, 0xfb, 0x09, 0xcb, 0xb5, 0x90, 0xf4, 0x45, 0x74,
	0x1e, 0x80, 0x53, 0x2d, 0x24, 0x2e, 0x79, 0x50, 0x4e, 0xe5, 0x45, 0x36, 0xe1, 0xaa, 0xa0, 0x47,
	0x98, 0x61, 0x3b, 0x80, 0x27, 0x25, 0x46, 0x1e, 0xc2, 0x26, 0x2e, 0x79, 0xc5, 0x64, 0xf2, 0x5c,
	0x39, 0xef, 0xe8, 0x31, 0x86, 0xda, 0x08, 0xba, 0x83, 0xc8, 0x3f, 0x44, 0x05, 0xe9, 0x40, 0xbb,
	0xe6, 0xe6, 0x62, 0x9f, 0xbe, 0x8c, 0x39, 0x97, 0x4e, 0x4f, 0xc5, 0x3e, 0xb9, 0x0f, 0xeb, 0x35,
	0x03, 0x7d, 0x2b, 0x41, 0x4f, 0x3a, 0x8d, 0xee, 0xcd, 0x34, 0x29, 0x59, 0x03, 0x59, 0x88, 0x63,
	0x41, 0x3e, 0x86, 0x35, 0xaf, 0x3d, 0x9f, 0x31, 0x33, 0xf5, 0xcc, 0xca, 0x6c, 0x21, 0xe8, 0x2b,
	0xac, 0x21, 0x41, 0xb8, 0x3f, 0xf5, 0x69, 0x00, 0xc9, 0x03, 0xd8, 0x08, 0x0c, 0x61, 0xb5, 0x61,
	0x6f, 0xac, 0x2e, 0xc6, 0x6c, 0x9a, 0xd1, 0xd3, 0x78, 0x67, 0x66, 0xea, 0x9f, 0x59, 0x6d, 0x7e,
	0x09, 0xf0, 0x49, 0x16, 0x62, 0xd7, 0xd4, 0x42, 0x63, 0x55, 0xf4, 0x2c, 0xfa, 0x2c, 0x99, 0x67,
	0x3a, 0xd4, 0x43, 0x3e, 0x83, 0xad, 0x9a, 0xa8, 0x8a, 0x05, 0x9f, 0xa9, 0xd8, 0x03, 0xfa, 0x13,
	0xb2, 0x49, 0xc9, 0x3e, 0x8e, 0x2a, 0x34, 0xd9, 0x87, 0xb7, 0x83, 0x49, 0x7c, 0x23, 0xa4, 0x60,
	0x97, 0x8c, 0xfa, 0xf1, 0xd1, 0x35, 0x53, 0x7f, 0x50, 0x6a, 0x5f, 0x57, 0x66, 0xc3, 0xdb, 0xf8,
	0xb7, 0xfa, 0xe8, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xf5, 0xd6, 0xdd, 0x1a, 0x75, 0x07, 0x00,
	0x00,
}
