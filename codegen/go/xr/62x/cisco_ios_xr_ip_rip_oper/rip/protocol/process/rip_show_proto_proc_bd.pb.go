/*
Copyright 2019 Cisco Systems

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rip_show_proto_proc_bd.proto

package cisco_ios_xr_ip_rip_oper_rip_protocol_process

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type RipShowProtoProcBd_KEYS struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RipShowProtoProcBd_KEYS) Reset()         { *m = RipShowProtoProcBd_KEYS{} }
func (m *RipShowProtoProcBd_KEYS) String() string { return proto.CompactTextString(m) }
func (*RipShowProtoProcBd_KEYS) ProtoMessage()    {}
func (*RipShowProtoProcBd_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_2873d5393f202f7f, []int{0}
}

func (m *RipShowProtoProcBd_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RipShowProtoProcBd_KEYS.Unmarshal(m, b)
}
func (m *RipShowProtoProcBd_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RipShowProtoProcBd_KEYS.Marshal(b, m, deterministic)
}
func (m *RipShowProtoProcBd_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RipShowProtoProcBd_KEYS.Merge(m, src)
}
func (m *RipShowProtoProcBd_KEYS) XXX_Size() int {
	return xxx_messageInfo_RipShowProtoProcBd_KEYS.Size(m)
}
func (m *RipShowProtoProcBd_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_RipShowProtoProcBd_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_RipShowProtoProcBd_KEYS proto.InternalMessageInfo

type RipShowVrfSummBd struct {
	VrfName                  string   `protobuf:"bytes,1,opt,name=vrf_name,json=vrfName,proto3" json:"vrf_name,omitempty"`
	Active                   bool     `protobuf:"varint,2,opt,name=active,proto3" json:"active,omitempty"`
	OomFlags                 uint32   `protobuf:"varint,3,opt,name=oom_flags,json=oomFlags,proto3" json:"oom_flags,omitempty"`
	RouteCount               uint32   `protobuf:"varint,4,opt,name=route_count,json=routeCount,proto3" json:"route_count,omitempty"`
	PathCount                uint32   `protobuf:"varint,5,opt,name=path_count,json=pathCount,proto3" json:"path_count,omitempty"`
	UpdateTimer              uint32   `protobuf:"varint,6,opt,name=update_timer,json=updateTimer,proto3" json:"update_timer,omitempty"`
	NextUpdateTime           uint32   `protobuf:"varint,7,opt,name=next_update_time,json=nextUpdateTime,proto3" json:"next_update_time,omitempty"`
	InvalidTimer             uint32   `protobuf:"varint,8,opt,name=invalid_timer,json=invalidTimer,proto3" json:"invalid_timer,omitempty"`
	HoldDownTimer            uint32   `protobuf:"varint,9,opt,name=hold_down_timer,json=holdDownTimer,proto3" json:"hold_down_timer,omitempty"`
	FlushTimer               uint32   `protobuf:"varint,10,opt,name=flush_timer,json=flushTimer,proto3" json:"flush_timer,omitempty"`
	InterfaceConfiguredCount uint32   `protobuf:"varint,11,opt,name=interface_configured_count,json=interfaceConfiguredCount,proto3" json:"interface_configured_count,omitempty"`
	ActiveInterfaceCount     uint32   `protobuf:"varint,12,opt,name=active_interface_count,json=activeInterfaceCount,proto3" json:"active_interface_count,omitempty"`
	XXX_NoUnkeyedLiteral     struct{} `json:"-"`
	XXX_unrecognized         []byte   `json:"-"`
	XXX_sizecache            int32    `json:"-"`
}

func (m *RipShowVrfSummBd) Reset()         { *m = RipShowVrfSummBd{} }
func (m *RipShowVrfSummBd) String() string { return proto.CompactTextString(m) }
func (*RipShowVrfSummBd) ProtoMessage()    {}
func (*RipShowVrfSummBd) Descriptor() ([]byte, []int) {
	return fileDescriptor_2873d5393f202f7f, []int{1}
}

func (m *RipShowVrfSummBd) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RipShowVrfSummBd.Unmarshal(m, b)
}
func (m *RipShowVrfSummBd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RipShowVrfSummBd.Marshal(b, m, deterministic)
}
func (m *RipShowVrfSummBd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RipShowVrfSummBd.Merge(m, src)
}
func (m *RipShowVrfSummBd) XXX_Size() int {
	return xxx_messageInfo_RipShowVrfSummBd.Size(m)
}
func (m *RipShowVrfSummBd) XXX_DiscardUnknown() {
	xxx_messageInfo_RipShowVrfSummBd.DiscardUnknown(m)
}

var xxx_messageInfo_RipShowVrfSummBd proto.InternalMessageInfo

func (m *RipShowVrfSummBd) GetVrfName() string {
	if m != nil {
		return m.VrfName
	}
	return ""
}

func (m *RipShowVrfSummBd) GetActive() bool {
	if m != nil {
		return m.Active
	}
	return false
}

func (m *RipShowVrfSummBd) GetOomFlags() uint32 {
	if m != nil {
		return m.OomFlags
	}
	return 0
}

func (m *RipShowVrfSummBd) GetRouteCount() uint32 {
	if m != nil {
		return m.RouteCount
	}
	return 0
}

func (m *RipShowVrfSummBd) GetPathCount() uint32 {
	if m != nil {
		return m.PathCount
	}
	return 0
}

func (m *RipShowVrfSummBd) GetUpdateTimer() uint32 {
	if m != nil {
		return m.UpdateTimer
	}
	return 0
}

func (m *RipShowVrfSummBd) GetNextUpdateTime() uint32 {
	if m != nil {
		return m.NextUpdateTime
	}
	return 0
}

func (m *RipShowVrfSummBd) GetInvalidTimer() uint32 {
	if m != nil {
		return m.InvalidTimer
	}
	return 0
}

func (m *RipShowVrfSummBd) GetHoldDownTimer() uint32 {
	if m != nil {
		return m.HoldDownTimer
	}
	return 0
}

func (m *RipShowVrfSummBd) GetFlushTimer() uint32 {
	if m != nil {
		return m.FlushTimer
	}
	return 0
}

func (m *RipShowVrfSummBd) GetInterfaceConfiguredCount() uint32 {
	if m != nil {
		return m.InterfaceConfiguredCount
	}
	return 0
}

func (m *RipShowVrfSummBd) GetActiveInterfaceCount() uint32 {
	if m != nil {
		return m.ActiveInterfaceCount
	}
	return 0
}

type RipShowProtoProcBd struct {
	VrfConfigCount       uint32              `protobuf:"varint,50,opt,name=vrf_config_count,json=vrfConfigCount,proto3" json:"vrf_config_count,omitempty"`
	VrfActiveCount       uint32              `protobuf:"varint,51,opt,name=vrf_active_count,json=vrfActiveCount,proto3" json:"vrf_active_count,omitempty"`
	SocketDescriptor     int32               `protobuf:"zigzag32,52,opt,name=socket_descriptor,json=socketDescriptor,proto3" json:"socket_descriptor,omitempty"`
	CurrentOomState      int32               `protobuf:"zigzag32,53,opt,name=current_oom_state,json=currentOomState,proto3" json:"current_oom_state,omitempty"`
	RouteCount           uint32              `protobuf:"varint,54,opt,name=route_count,json=routeCount,proto3" json:"route_count,omitempty"`
	PathCount            uint32              `protobuf:"varint,55,opt,name=path_count,json=pathCount,proto3" json:"path_count,omitempty"`
	VrfSummary           []*RipShowVrfSummBd `protobuf:"bytes,56,rep,name=vrf_summary,json=vrfSummary,proto3" json:"vrf_summary,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *RipShowProtoProcBd) Reset()         { *m = RipShowProtoProcBd{} }
func (m *RipShowProtoProcBd) String() string { return proto.CompactTextString(m) }
func (*RipShowProtoProcBd) ProtoMessage()    {}
func (*RipShowProtoProcBd) Descriptor() ([]byte, []int) {
	return fileDescriptor_2873d5393f202f7f, []int{2}
}

func (m *RipShowProtoProcBd) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RipShowProtoProcBd.Unmarshal(m, b)
}
func (m *RipShowProtoProcBd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RipShowProtoProcBd.Marshal(b, m, deterministic)
}
func (m *RipShowProtoProcBd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RipShowProtoProcBd.Merge(m, src)
}
func (m *RipShowProtoProcBd) XXX_Size() int {
	return xxx_messageInfo_RipShowProtoProcBd.Size(m)
}
func (m *RipShowProtoProcBd) XXX_DiscardUnknown() {
	xxx_messageInfo_RipShowProtoProcBd.DiscardUnknown(m)
}

var xxx_messageInfo_RipShowProtoProcBd proto.InternalMessageInfo

func (m *RipShowProtoProcBd) GetVrfConfigCount() uint32 {
	if m != nil {
		return m.VrfConfigCount
	}
	return 0
}

func (m *RipShowProtoProcBd) GetVrfActiveCount() uint32 {
	if m != nil {
		return m.VrfActiveCount
	}
	return 0
}

func (m *RipShowProtoProcBd) GetSocketDescriptor() int32 {
	if m != nil {
		return m.SocketDescriptor
	}
	return 0
}

func (m *RipShowProtoProcBd) GetCurrentOomState() int32 {
	if m != nil {
		return m.CurrentOomState
	}
	return 0
}

func (m *RipShowProtoProcBd) GetRouteCount() uint32 {
	if m != nil {
		return m.RouteCount
	}
	return 0
}

func (m *RipShowProtoProcBd) GetPathCount() uint32 {
	if m != nil {
		return m.PathCount
	}
	return 0
}

func (m *RipShowProtoProcBd) GetVrfSummary() []*RipShowVrfSummBd {
	if m != nil {
		return m.VrfSummary
	}
	return nil
}

func init() {
	proto.RegisterType((*RipShowProtoProcBd_KEYS)(nil), "cisco_ios_xr_ip_rip_oper.rip.protocol.process.rip_show_proto_proc_bd_KEYS")
	proto.RegisterType((*RipShowVrfSummBd)(nil), "cisco_ios_xr_ip_rip_oper.rip.protocol.process.rip_show_vrf_summ_bd")
	proto.RegisterType((*RipShowProtoProcBd)(nil), "cisco_ios_xr_ip_rip_oper.rip.protocol.process.rip_show_proto_proc_bd")
}

func init() { proto.RegisterFile("rip_show_proto_proc_bd.proto", fileDescriptor_2873d5393f202f7f) }

var fileDescriptor_2873d5393f202f7f = []byte{
	// 500 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x93, 0xdd, 0x6e, 0xd3, 0x30,
	0x14, 0xc7, 0xd5, 0x15, 0xba, 0xf6, 0xa4, 0x65, 0x6b, 0x34, 0x55, 0x86, 0x31, 0x2d, 0x14, 0x09,
	0x45, 0x20, 0x7a, 0xb1, 0x8d, 0x8f, 0x0b, 0x6e, 0x50, 0x07, 0x12, 0x42, 0x02, 0x29, 0x85, 0x0b,
	0xae, 0x2c, 0xd7, 0x71, 0x56, 0x8b, 0xc4, 0x8e, 0x6c, 0x27, 0x1d, 0x0f, 0xca, 0x53, 0xf0, 0x12,
	0xc8, 0x1f, 0x84, 0x69, 0xaa, 0x84, 0xb8, 0xa9, 0x7a, 0xfe, 0xff, 0xdf, 0x39, 0xce, 0x39, 0x3e,
	0x86, 0x87, 0x8a, 0xd7, 0x58, 0x6f, 0xe4, 0x16, 0xd7, 0x4a, 0x1a, 0x69, 0x7f, 0x29, 0x5e, 0xe7,
	0x0b, 0x17, 0xc5, 0xcf, 0x29, 0xd7, 0x54, 0x62, 0x2e, 0x35, 0xbe, 0x56, 0x98, 0xd7, 0xd8, 0xd2,
	0xb2, 0x66, 0x6a, 0xa1, 0x78, 0xed, 0x19, 0x2a, 0x4b, 0xfb, 0x87, 0x32, 0xad, 0xe7, 0x27, 0x70,
	0xbc, 0xbb, 0x1c, 0xfe, 0xf8, 0xee, 0xdb, 0x6a, 0xfe, 0xb3, 0x0f, 0x47, 0x9d, 0xdf, 0xaa, 0x02,
	0xeb, 0xa6, 0xaa, 0xf0, 0x3a, 0x8f, 0xef, 0xc3, 0xd0, 0x86, 0x82, 0x54, 0x0c, 0xf5, 0x92, 0x5e,
	0x3a, 0xca, 0xf6, 0x5b, 0x55, 0x7c, 0x22, 0x15, 0x8b, 0x67, 0x30, 0x20, 0xd4, 0xf0, 0x96, 0xa1,
	0xbd, 0xa4, 0x97, 0x0e, 0xb3, 0x10, 0xc5, 0xc7, 0x30, 0x92, 0xb2, 0xc2, 0x45, 0x49, 0xae, 0x34,
	0xea, 0x27, 0xbd, 0x74, 0x92, 0x0d, 0xa5, 0xac, 0xde, 0xdb, 0x38, 0x3e, 0x85, 0x48, 0xc9, 0xc6,
	0x30, 0x4c, 0x65, 0x23, 0x0c, 0xba, 0xe3, 0x6c, 0x70, 0xd2, 0xd2, 0x2a, 0xf1, 0x09, 0x40, 0x4d,
	0xcc, 0x26, 0xf8, 0x77, 0x9d, 0x3f, 0xb2, 0x8a, 0xb7, 0x1f, 0xc1, 0xb8, 0xa9, 0x73, 0x62, 0x18,
	0x36, 0xbc, 0x62, 0x0a, 0x0d, 0x1c, 0x10, 0x79, 0xed, 0x8b, 0x95, 0xe2, 0x14, 0x0e, 0x05, 0xbb,
	0x36, 0xf8, 0x06, 0x87, 0xf6, 0x1d, 0x76, 0xcf, 0xea, 0x5f, 0x3b, 0x34, 0x7e, 0x0c, 0x13, 0x2e,
	0x5a, 0x52, 0xf2, 0x3c, 0x54, 0x1b, 0x3a, 0x6c, 0x1c, 0x44, 0x5f, 0xee, 0x09, 0x1c, 0x6c, 0x64,
	0x99, 0xe3, 0x5c, 0x6e, 0x45, 0xc0, 0x46, 0x0e, 0x9b, 0x58, 0xf9, 0x52, 0x6e, 0x85, 0xe7, 0x4e,
	0x21, 0x2a, 0xca, 0x46, 0x6f, 0x02, 0x03, 0xbe, 0x33, 0x27, 0x79, 0xe0, 0x0d, 0x3c, 0xe0, 0xc2,
	0x30, 0x55, 0x10, 0x6a, 0xdb, 0x17, 0x05, 0xbf, 0x6a, 0x14, 0xcb, 0x43, 0xa7, 0x91, 0xe3, 0x51,
	0x47, 0x2c, 0x3b, 0xc0, 0x37, 0x7e, 0x01, 0x33, 0x3f, 0x5f, 0x7c, 0xb3, 0x88, 0xcd, 0x1c, 0xbb,
	0xcc, 0x23, 0xef, 0x7e, 0xf8, 0x9b, 0xdf, 0x08, 0x33, 0xff, 0xb5, 0x07, 0xb3, 0xdd, 0xf7, 0x6e,
	0xc7, 0x64, 0x6f, 0xd6, 0x7f, 0x48, 0x28, 0x75, 0xe6, 0xc7, 0xd4, 0xaa, 0xc2, 0x1f, 0xef, 0x8f,
	0x0e, 0x64, 0x38, 0xde, 0x93, 0xe7, 0x1d, 0xf9, 0xd6, 0xc9, 0x9e, 0x7c, 0x06, 0x53, 0x2d, 0xe9,
	0x77, 0x66, 0x70, 0xce, 0x34, 0x55, 0xbc, 0x36, 0x52, 0xa1, 0x8b, 0xa4, 0x97, 0x4e, 0xb3, 0x43,
	0x6f, 0x5c, 0x76, 0x7a, 0xfc, 0x14, 0xa6, 0xb4, 0x51, 0x8a, 0x09, 0x83, 0xed, 0xbe, 0x68, 0x43,
	0x0c, 0x43, 0x2f, 0x1c, 0x7c, 0x10, 0x8c, 0xcf, 0xb2, 0x5a, 0x59, 0xf9, 0xf6, 0xda, 0xbc, 0xfc,
	0xc7, 0xda, 0xbc, 0xba, 0xbd, 0x36, 0x39, 0x44, 0x7f, 0xb6, 0x9a, 0xa8, 0x1f, 0xe8, 0x75, 0xd2,
	0x4f, 0xa3, 0xb3, 0xe5, 0xe2, 0xbf, 0xde, 0xd0, 0x62, 0xd7, 0x03, 0xc9, 0xa0, 0x55, 0xc5, 0xca,
	0x97, 0x5d, 0x0f, 0x5c, 0xca, 0xf9, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0xdb, 0x40, 0x9d, 0x03,
	0xba, 0x03, 0x00, 0x00,
}
