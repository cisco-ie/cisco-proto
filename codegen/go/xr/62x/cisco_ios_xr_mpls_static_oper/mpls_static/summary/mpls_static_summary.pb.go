/*
Copyright 2019 Cisco Systems

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: mpls_static_summary.proto

package cisco_ios_xr_mpls_static_oper_mpls_static_summary

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type MplsStaticSummary_KEYS struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MplsStaticSummary_KEYS) Reset()         { *m = MplsStaticSummary_KEYS{} }
func (m *MplsStaticSummary_KEYS) String() string { return proto.CompactTextString(m) }
func (*MplsStaticSummary_KEYS) ProtoMessage()    {}
func (*MplsStaticSummary_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_6fd625d4d792c3d9, []int{0}
}

func (m *MplsStaticSummary_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MplsStaticSummary_KEYS.Unmarshal(m, b)
}
func (m *MplsStaticSummary_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MplsStaticSummary_KEYS.Marshal(b, m, deterministic)
}
func (m *MplsStaticSummary_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MplsStaticSummary_KEYS.Merge(m, src)
}
func (m *MplsStaticSummary_KEYS) XXX_Size() int {
	return xxx_messageInfo_MplsStaticSummary_KEYS.Size(m)
}
func (m *MplsStaticSummary_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_MplsStaticSummary_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_MplsStaticSummary_KEYS proto.InternalMessageInfo

type MplsStaticSummary struct {
	LabelCount                    uint32   `protobuf:"varint,50,opt,name=label_count,json=labelCount,proto3" json:"label_count,omitempty"`
	LabelErrorCount               uint32   `protobuf:"varint,51,opt,name=label_error_count,json=labelErrorCount,proto3" json:"label_error_count,omitempty"`
	LabelDiscrepancyCount         uint32   `protobuf:"varint,52,opt,name=label_discrepancy_count,json=labelDiscrepancyCount,proto3" json:"label_discrepancy_count,omitempty"`
	VrfCount                      uint32   `protobuf:"varint,53,opt,name=vrf_count,json=vrfCount,proto3" json:"vrf_count,omitempty"`
	ActiveVrfCount                uint32   `protobuf:"varint,54,opt,name=active_vrf_count,json=activeVrfCount,proto3" json:"active_vrf_count,omitempty"`
	InterfaceCount                uint32   `protobuf:"varint,55,opt,name=interface_count,json=interfaceCount,proto3" json:"interface_count,omitempty"`
	InterfaceFowardReferenceCount uint32   `protobuf:"varint,56,opt,name=interface_foward_reference_count,json=interfaceFowardReferenceCount,proto3" json:"interface_foward_reference_count,omitempty"`
	MplsEnabledInterfaceCount     uint32   `protobuf:"varint,57,opt,name=mpls_enabled_interface_count,json=mplsEnabledInterfaceCount,proto3" json:"mpls_enabled_interface_count,omitempty"`
	Ipv4RouteCount                uint32   `protobuf:"varint,58,opt,name=ipv4_route_count,json=ipv4RouteCount,proto3" json:"ipv4_route_count,omitempty"`
	Ipv6RouteCount                uint32   `protobuf:"varint,59,opt,name=ipv6_route_count,json=ipv6RouteCount,proto3" json:"ipv6_route_count,omitempty"`
	LsdConnected                  bool     `protobuf:"varint,60,opt,name=lsd_connected,json=lsdConnected,proto3" json:"lsd_connected,omitempty"`
	ImConnected                   bool     `protobuf:"varint,61,opt,name=im_connected,json=imConnected,proto3" json:"im_connected,omitempty"`
	RsiConnected                  bool     `protobuf:"varint,62,opt,name=rsi_connected,json=rsiConnected,proto3" json:"rsi_connected,omitempty"`
	Ribv4Connected                bool     `protobuf:"varint,63,opt,name=ribv4_connected,json=ribv4Connected,proto3" json:"ribv4_connected,omitempty"`
	Ribv6Connected                bool     `protobuf:"varint,64,opt,name=ribv6_connected,json=ribv6Connected,proto3" json:"ribv6_connected,omitempty"`
	XXX_NoUnkeyedLiteral          struct{} `json:"-"`
	XXX_unrecognized              []byte   `json:"-"`
	XXX_sizecache                 int32    `json:"-"`
}

func (m *MplsStaticSummary) Reset()         { *m = MplsStaticSummary{} }
func (m *MplsStaticSummary) String() string { return proto.CompactTextString(m) }
func (*MplsStaticSummary) ProtoMessage()    {}
func (*MplsStaticSummary) Descriptor() ([]byte, []int) {
	return fileDescriptor_6fd625d4d792c3d9, []int{1}
}

func (m *MplsStaticSummary) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MplsStaticSummary.Unmarshal(m, b)
}
func (m *MplsStaticSummary) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MplsStaticSummary.Marshal(b, m, deterministic)
}
func (m *MplsStaticSummary) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MplsStaticSummary.Merge(m, src)
}
func (m *MplsStaticSummary) XXX_Size() int {
	return xxx_messageInfo_MplsStaticSummary.Size(m)
}
func (m *MplsStaticSummary) XXX_DiscardUnknown() {
	xxx_messageInfo_MplsStaticSummary.DiscardUnknown(m)
}

var xxx_messageInfo_MplsStaticSummary proto.InternalMessageInfo

func (m *MplsStaticSummary) GetLabelCount() uint32 {
	if m != nil {
		return m.LabelCount
	}
	return 0
}

func (m *MplsStaticSummary) GetLabelErrorCount() uint32 {
	if m != nil {
		return m.LabelErrorCount
	}
	return 0
}

func (m *MplsStaticSummary) GetLabelDiscrepancyCount() uint32 {
	if m != nil {
		return m.LabelDiscrepancyCount
	}
	return 0
}

func (m *MplsStaticSummary) GetVrfCount() uint32 {
	if m != nil {
		return m.VrfCount
	}
	return 0
}

func (m *MplsStaticSummary) GetActiveVrfCount() uint32 {
	if m != nil {
		return m.ActiveVrfCount
	}
	return 0
}

func (m *MplsStaticSummary) GetInterfaceCount() uint32 {
	if m != nil {
		return m.InterfaceCount
	}
	return 0
}

func (m *MplsStaticSummary) GetInterfaceFowardReferenceCount() uint32 {
	if m != nil {
		return m.InterfaceFowardReferenceCount
	}
	return 0
}

func (m *MplsStaticSummary) GetMplsEnabledInterfaceCount() uint32 {
	if m != nil {
		return m.MplsEnabledInterfaceCount
	}
	return 0
}

func (m *MplsStaticSummary) GetIpv4RouteCount() uint32 {
	if m != nil {
		return m.Ipv4RouteCount
	}
	return 0
}

func (m *MplsStaticSummary) GetIpv6RouteCount() uint32 {
	if m != nil {
		return m.Ipv6RouteCount
	}
	return 0
}

func (m *MplsStaticSummary) GetLsdConnected() bool {
	if m != nil {
		return m.LsdConnected
	}
	return false
}

func (m *MplsStaticSummary) GetImConnected() bool {
	if m != nil {
		return m.ImConnected
	}
	return false
}

func (m *MplsStaticSummary) GetRsiConnected() bool {
	if m != nil {
		return m.RsiConnected
	}
	return false
}

func (m *MplsStaticSummary) GetRibv4Connected() bool {
	if m != nil {
		return m.Ribv4Connected
	}
	return false
}

func (m *MplsStaticSummary) GetRibv6Connected() bool {
	if m != nil {
		return m.Ribv6Connected
	}
	return false
}

func init() {
	proto.RegisterType((*MplsStaticSummary_KEYS)(nil), "cisco_ios_xr_mpls_static_oper.mpls_static.summary.mpls_static_summary_KEYS")
	proto.RegisterType((*MplsStaticSummary)(nil), "cisco_ios_xr_mpls_static_oper.mpls_static.summary.mpls_static_summary")
}

func init() { proto.RegisterFile("mpls_static_summary.proto", fileDescriptor_6fd625d4d792c3d9) }

var fileDescriptor_6fd625d4d792c3d9 = []byte{
	// 390 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0xd2, 0x5b, 0x8b, 0xd3, 0x40,
	0x14, 0x07, 0x70, 0xf6, 0x41, 0x59, 0xcf, 0x6e, 0xb7, 0x6b, 0x44, 0xac, 0x37, 0xac, 0xdb, 0x87,
	0x06, 0x1f, 0x0a, 0xda, 0x18, 0xef, 0x56, 0xa8, 0x55, 0xc4, 0xb7, 0x08, 0x82, 0x4f, 0xc3, 0x64,
	0x32, 0x81, 0x81, 0x24, 0x13, 0xce, 0x4c, 0xa3, 0xfd, 0x44, 0x7e, 0x4d, 0xe9, 0x99, 0x5c, 0xa6,
	0x6e, 0x5f, 0xff, 0xe7, 0xf7, 0x3f, 0x39, 0x24, 0x81, 0xfb, 0x65, 0x5d, 0x18, 0x66, 0x2c, 0xb7,
	0x4a, 0x30, 0xb3, 0x2d, 0x4b, 0x8e, 0xbb, 0x45, 0x8d, 0xda, 0xea, 0xe0, 0xb9, 0x50, 0x46, 0x68,
	0xa6, 0xb4, 0x61, 0x7f, 0x90, 0xf9, 0x4e, 0xd7, 0x12, 0x17, 0x5e, 0xb0, 0x68, 0x8b, 0x57, 0x0f,
	0x60, 0x72, 0x64, 0x1f, 0xfb, 0xbe, 0xf9, 0xf5, 0xe3, 0xea, 0xef, 0x0d, 0xb8, 0x73, 0x64, 0x18,
	0x3c, 0x81, 0xb3, 0x82, 0xa7, 0xb2, 0x60, 0x42, 0x6f, 0x2b, 0x3b, 0x79, 0x31, 0x3d, 0x09, 0x47,
	0x09, 0x50, 0xb4, 0xde, 0x27, 0xc1, 0x33, 0xb8, 0xed, 0x80, 0x44, 0xd4, 0xd8, 0xb2, 0x25, 0xb1,
	0x31, 0x0d, 0x36, 0xfb, 0xdc, 0xd9, 0x18, 0xee, 0x39, 0x9b, 0x29, 0x23, 0x50, 0xd6, 0xbc, 0x12,
	0xbb, 0xb6, 0x11, 0x51, 0xe3, 0x2e, 0x8d, 0x3f, 0x0f, 0x53, 0xd7, 0x7b, 0x08, 0xb7, 0x1a, 0xcc,
	0x5b, 0xf9, 0x92, 0xe4, 0x69, 0x83, 0xb9, 0x1b, 0x86, 0x70, 0xc9, 0x85, 0x55, 0x8d, 0x64, 0x83,
	0x89, 0xc9, 0x5c, 0xb8, 0xfc, 0x67, 0x27, 0xe7, 0x30, 0x56, 0x95, 0x95, 0x98, 0x73, 0x21, 0x5b,
	0xf8, 0xca, 0xc1, 0x3e, 0x76, 0xf0, 0x2b, 0x4c, 0x07, 0x98, 0xeb, 0xdf, 0x1c, 0x33, 0x86, 0x32,
	0x97, 0x28, 0xab, 0xbe, 0xf9, 0x9a, 0x9a, 0x8f, 0x7b, 0xf7, 0x85, 0x58, 0xd2, 0x29, 0xb7, 0x68,
	0x05, 0x8f, 0xe8, 0xa5, 0xca, 0x8a, 0xa7, 0x85, 0xcc, 0xd8, 0xff, 0x8f, 0x7f, 0x43, 0x4b, 0xe8,
	0x2b, 0x6f, 0x1c, 0xf9, 0x76, 0x78, 0x49, 0x08, 0x97, 0xaa, 0x6e, 0x22, 0x86, 0x7a, 0x6b, 0xbb,
	0xd2, 0xdb, 0xf6, 0xe6, 0xba, 0x89, 0x92, 0x7d, 0xec, 0xcb, 0xf8, 0x40, 0xbe, 0xeb, 0x65, 0xec,
	0xc9, 0x19, 0x8c, 0x0a, 0x93, 0x31, 0xa1, 0xab, 0x4a, 0x0a, 0x2b, 0xb3, 0xc9, 0xfb, 0xe9, 0x49,
	0x78, 0x9a, 0x9c, 0x17, 0x26, 0x5b, 0x77, 0x59, 0xf0, 0x14, 0xce, 0x55, 0xe9, 0x99, 0x0f, 0x64,
	0xce, 0x54, 0x39, 0x90, 0x19, 0x8c, 0xd0, 0x28, 0xcf, 0x7c, 0x74, 0x7b, 0xd0, 0xa8, 0x01, 0xcd,
	0x61, 0x8c, 0x2a, 0x6d, 0x22, 0x8f, 0xad, 0x88, 0x5d, 0x50, 0x7c, 0x0d, 0xc6, 0x1e, 0xfc, 0x34,
	0xc0, 0xb8, 0x87, 0xe9, 0x4d, 0xfa, 0xff, 0x97, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0xb3, 0x09,
	0x04, 0x4c, 0x1c, 0x03, 0x00, 0x00,
}
