/*
Copyright 2019 Cisco Systems

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ospfv3_edm_area.proto

package cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_default_vrf_area_informations_area_information

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Ospfv3EdmArea_KEYS struct {
	ProcessName          string   `protobuf:"bytes,1,opt,name=process_name,json=processName,proto3" json:"process_name,omitempty"`
	AreaId               uint32   `protobuf:"varint,2,opt,name=area_id,json=areaId,proto3" json:"area_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Ospfv3EdmArea_KEYS) Reset()         { *m = Ospfv3EdmArea_KEYS{} }
func (m *Ospfv3EdmArea_KEYS) String() string { return proto.CompactTextString(m) }
func (*Ospfv3EdmArea_KEYS) ProtoMessage()    {}
func (*Ospfv3EdmArea_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_6aff4bc27772e912, []int{0}
}

func (m *Ospfv3EdmArea_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Ospfv3EdmArea_KEYS.Unmarshal(m, b)
}
func (m *Ospfv3EdmArea_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Ospfv3EdmArea_KEYS.Marshal(b, m, deterministic)
}
func (m *Ospfv3EdmArea_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ospfv3EdmArea_KEYS.Merge(m, src)
}
func (m *Ospfv3EdmArea_KEYS) XXX_Size() int {
	return xxx_messageInfo_Ospfv3EdmArea_KEYS.Size(m)
}
func (m *Ospfv3EdmArea_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_Ospfv3EdmArea_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_Ospfv3EdmArea_KEYS proto.InternalMessageInfo

func (m *Ospfv3EdmArea_KEYS) GetProcessName() string {
	if m != nil {
		return m.ProcessName
	}
	return ""
}

func (m *Ospfv3EdmArea_KEYS) GetAreaId() uint32 {
	if m != nil {
		return m.AreaId
	}
	return 0
}

type Ospfv3EdmAreaRange struct {
	RangePrefix          string   `protobuf:"bytes,1,opt,name=range_prefix,json=rangePrefix,proto3" json:"range_prefix,omitempty"`
	RangePrefixLength    uint32   `protobuf:"varint,2,opt,name=range_prefix_length,json=rangePrefixLength,proto3" json:"range_prefix_length,omitempty"`
	NetCost              uint32   `protobuf:"varint,3,opt,name=net_cost,json=netCost,proto3" json:"net_cost,omitempty"`
	Status               string   `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	IsCostConfigured     bool     `protobuf:"varint,5,opt,name=is_cost_configured,json=isCostConfigured,proto3" json:"is_cost_configured,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Ospfv3EdmAreaRange) Reset()         { *m = Ospfv3EdmAreaRange{} }
func (m *Ospfv3EdmAreaRange) String() string { return proto.CompactTextString(m) }
func (*Ospfv3EdmAreaRange) ProtoMessage()    {}
func (*Ospfv3EdmAreaRange) Descriptor() ([]byte, []int) {
	return fileDescriptor_6aff4bc27772e912, []int{1}
}

func (m *Ospfv3EdmAreaRange) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Ospfv3EdmAreaRange.Unmarshal(m, b)
}
func (m *Ospfv3EdmAreaRange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Ospfv3EdmAreaRange.Marshal(b, m, deterministic)
}
func (m *Ospfv3EdmAreaRange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ospfv3EdmAreaRange.Merge(m, src)
}
func (m *Ospfv3EdmAreaRange) XXX_Size() int {
	return xxx_messageInfo_Ospfv3EdmAreaRange.Size(m)
}
func (m *Ospfv3EdmAreaRange) XXX_DiscardUnknown() {
	xxx_messageInfo_Ospfv3EdmAreaRange.DiscardUnknown(m)
}

var xxx_messageInfo_Ospfv3EdmAreaRange proto.InternalMessageInfo

func (m *Ospfv3EdmAreaRange) GetRangePrefix() string {
	if m != nil {
		return m.RangePrefix
	}
	return ""
}

func (m *Ospfv3EdmAreaRange) GetRangePrefixLength() uint32 {
	if m != nil {
		return m.RangePrefixLength
	}
	return 0
}

func (m *Ospfv3EdmAreaRange) GetNetCost() uint32 {
	if m != nil {
		return m.NetCost
	}
	return 0
}

func (m *Ospfv3EdmAreaRange) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *Ospfv3EdmAreaRange) GetIsCostConfigured() bool {
	if m != nil {
		return m.IsCostConfigured
	}
	return false
}

type Ospfv3EdmArea struct {
	IsBackboneAreaActive           bool                  `protobuf:"varint,50,opt,name=is_backbone_area_active,json=isBackboneAreaActive,proto3" json:"is_backbone_area_active,omitempty"`
	AreaInterfaces                 uint32                `protobuf:"varint,51,opt,name=area_interfaces,json=areaInterfaces,proto3" json:"area_interfaces,omitempty"`
	IsAreaStubbed                  bool                  `protobuf:"varint,52,opt,name=is_area_stubbed,json=isAreaStubbed,proto3" json:"is_area_stubbed,omitempty"`
	IsAreaTotalStubbed             bool                  `protobuf:"varint,53,opt,name=is_area_total_stubbed,json=isAreaTotalStubbed,proto3" json:"is_area_total_stubbed,omitempty"`
	StubDefaultCost                uint32                `protobuf:"varint,54,opt,name=stub_default_cost,json=stubDefaultCost,proto3" json:"stub_default_cost,omitempty"`
	IsAreaNssa                     bool                  `protobuf:"varint,55,opt,name=is_area_nssa,json=isAreaNssa,proto3" json:"is_area_nssa,omitempty"`
	NssaNoRedistribution           bool                  `protobuf:"varint,56,opt,name=nssa_no_redistribution,json=nssaNoRedistribution,proto3" json:"nssa_no_redistribution,omitempty"`
	IsNssaTranslated               bool                  `protobuf:"varint,57,opt,name=is_nssa_translated,json=isNssaTranslated,proto3" json:"is_nssa_translated,omitempty"`
	IsNssaDefault                  bool                  `protobuf:"varint,58,opt,name=is_nssa_default,json=isNssaDefault,proto3" json:"is_nssa_default,omitempty"`
	IsRrrEnabled                   bool                  `protobuf:"varint,59,opt,name=is_rrr_enabled,json=isRrrEnabled,proto3" json:"is_rrr_enabled,omitempty"`
	SpFs                           uint32                `protobuf:"varint,60,opt,name=sp_fs,json=spFs,proto3" json:"sp_fs,omitempty"`
	AreaRange                      []*Ospfv3EdmAreaRange `protobuf:"bytes,61,rep,name=area_range,json=areaRange,proto3" json:"area_range,omitempty"`
	AreaOpaqueLsas                 uint32                `protobuf:"varint,62,opt,name=area_opaque_lsas,json=areaOpaqueLsas,proto3" json:"area_opaque_lsas,omitempty"`
	AreaOpaqueLsaChecksum          uint32                `protobuf:"varint,63,opt,name=area_opaque_lsa_checksum,json=areaOpaqueLsaChecksum,proto3" json:"area_opaque_lsa_checksum,omitempty"`
	AreaDcBitlessLsAs              uint32                `protobuf:"varint,64,opt,name=area_dc_bitless_ls_as,json=areaDcBitlessLsAs,proto3" json:"area_dc_bitless_ls_as,omitempty"`
	IndicationLsAs                 uint32                `protobuf:"varint,65,opt,name=indication_ls_as,json=indicationLsAs,proto3" json:"indication_ls_as,omitempty"`
	DoNotAgeLsAs                   uint32                `protobuf:"varint,66,opt,name=do_not_age_ls_as,json=doNotAgeLsAs,proto3" json:"do_not_age_ls_as,omitempty"`
	FloodListLength                uint32                `protobuf:"varint,67,opt,name=flood_list_length,json=floodListLength,proto3" json:"flood_list_length,omitempty"`
	AreaLfaInterfaceCount          uint32                `protobuf:"varint,68,opt,name=area_lfa_interface_count,json=areaLfaInterfaceCount,proto3" json:"area_lfa_interface_count,omitempty"`
	AreaPerPrefixLfaInterfaceCount uint32                `protobuf:"varint,69,opt,name=area_per_prefix_lfa_interface_count,json=areaPerPrefixLfaInterfaceCount,proto3" json:"area_per_prefix_lfa_interface_count,omitempty"`
	AreaLfaRevision                uint32                `protobuf:"varint,70,opt,name=area_lfa_revision,json=areaLfaRevision,proto3" json:"area_lfa_revision,omitempty"`
	XXX_NoUnkeyedLiteral           struct{}              `json:"-"`
	XXX_unrecognized               []byte                `json:"-"`
	XXX_sizecache                  int32                 `json:"-"`
}

func (m *Ospfv3EdmArea) Reset()         { *m = Ospfv3EdmArea{} }
func (m *Ospfv3EdmArea) String() string { return proto.CompactTextString(m) }
func (*Ospfv3EdmArea) ProtoMessage()    {}
func (*Ospfv3EdmArea) Descriptor() ([]byte, []int) {
	return fileDescriptor_6aff4bc27772e912, []int{2}
}

func (m *Ospfv3EdmArea) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Ospfv3EdmArea.Unmarshal(m, b)
}
func (m *Ospfv3EdmArea) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Ospfv3EdmArea.Marshal(b, m, deterministic)
}
func (m *Ospfv3EdmArea) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ospfv3EdmArea.Merge(m, src)
}
func (m *Ospfv3EdmArea) XXX_Size() int {
	return xxx_messageInfo_Ospfv3EdmArea.Size(m)
}
func (m *Ospfv3EdmArea) XXX_DiscardUnknown() {
	xxx_messageInfo_Ospfv3EdmArea.DiscardUnknown(m)
}

var xxx_messageInfo_Ospfv3EdmArea proto.InternalMessageInfo

func (m *Ospfv3EdmArea) GetIsBackboneAreaActive() bool {
	if m != nil {
		return m.IsBackboneAreaActive
	}
	return false
}

func (m *Ospfv3EdmArea) GetAreaInterfaces() uint32 {
	if m != nil {
		return m.AreaInterfaces
	}
	return 0
}

func (m *Ospfv3EdmArea) GetIsAreaStubbed() bool {
	if m != nil {
		return m.IsAreaStubbed
	}
	return false
}

func (m *Ospfv3EdmArea) GetIsAreaTotalStubbed() bool {
	if m != nil {
		return m.IsAreaTotalStubbed
	}
	return false
}

func (m *Ospfv3EdmArea) GetStubDefaultCost() uint32 {
	if m != nil {
		return m.StubDefaultCost
	}
	return 0
}

func (m *Ospfv3EdmArea) GetIsAreaNssa() bool {
	if m != nil {
		return m.IsAreaNssa
	}
	return false
}

func (m *Ospfv3EdmArea) GetNssaNoRedistribution() bool {
	if m != nil {
		return m.NssaNoRedistribution
	}
	return false
}

func (m *Ospfv3EdmArea) GetIsNssaTranslated() bool {
	if m != nil {
		return m.IsNssaTranslated
	}
	return false
}

func (m *Ospfv3EdmArea) GetIsNssaDefault() bool {
	if m != nil {
		return m.IsNssaDefault
	}
	return false
}

func (m *Ospfv3EdmArea) GetIsRrrEnabled() bool {
	if m != nil {
		return m.IsRrrEnabled
	}
	return false
}

func (m *Ospfv3EdmArea) GetSpFs() uint32 {
	if m != nil {
		return m.SpFs
	}
	return 0
}

func (m *Ospfv3EdmArea) GetAreaRange() []*Ospfv3EdmAreaRange {
	if m != nil {
		return m.AreaRange
	}
	return nil
}

func (m *Ospfv3EdmArea) GetAreaOpaqueLsas() uint32 {
	if m != nil {
		return m.AreaOpaqueLsas
	}
	return 0
}

func (m *Ospfv3EdmArea) GetAreaOpaqueLsaChecksum() uint32 {
	if m != nil {
		return m.AreaOpaqueLsaChecksum
	}
	return 0
}

func (m *Ospfv3EdmArea) GetAreaDcBitlessLsAs() uint32 {
	if m != nil {
		return m.AreaDcBitlessLsAs
	}
	return 0
}

func (m *Ospfv3EdmArea) GetIndicationLsAs() uint32 {
	if m != nil {
		return m.IndicationLsAs
	}
	return 0
}

func (m *Ospfv3EdmArea) GetDoNotAgeLsAs() uint32 {
	if m != nil {
		return m.DoNotAgeLsAs
	}
	return 0
}

func (m *Ospfv3EdmArea) GetFloodListLength() uint32 {
	if m != nil {
		return m.FloodListLength
	}
	return 0
}

func (m *Ospfv3EdmArea) GetAreaLfaInterfaceCount() uint32 {
	if m != nil {
		return m.AreaLfaInterfaceCount
	}
	return 0
}

func (m *Ospfv3EdmArea) GetAreaPerPrefixLfaInterfaceCount() uint32 {
	if m != nil {
		return m.AreaPerPrefixLfaInterfaceCount
	}
	return 0
}

func (m *Ospfv3EdmArea) GetAreaLfaRevision() uint32 {
	if m != nil {
		return m.AreaLfaRevision
	}
	return 0
}

func init() {
	proto.RegisterType((*Ospfv3EdmArea_KEYS)(nil), "cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.default_vrf.area_informations.area_information.ospfv3_edm_area_KEYS")
	proto.RegisterType((*Ospfv3EdmAreaRange)(nil), "cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.default_vrf.area_informations.area_information.ospfv3_edm_area_range")
	proto.RegisterType((*Ospfv3EdmArea)(nil), "cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.default_vrf.area_informations.area_information.ospfv3_edm_area")
}

func init() { proto.RegisterFile("ospfv3_edm_area.proto", fileDescriptor_6aff4bc27772e912) }

var fileDescriptor_6aff4bc27772e912 = []byte{
	// 741 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x54, 0x4d, 0x6f, 0x1b, 0x37,
	0x10, 0x85, 0x9a, 0xc4, 0x71, 0x18, 0x25, 0xb2, 0x98, 0x38, 0x61, 0x2f, 0x85, 0xea, 0x16, 0xa9,
	0x60, 0x14, 0x42, 0x1b, 0x27, 0x71, 0xbf, 0x5b, 0x59, 0xb6, 0x81, 0xc2, 0x82, 0x6a, 0xac, 0x7d,
	0xe9, 0x89, 0xe0, 0xee, 0xce, 0xca, 0x84, 0x57, 0xe4, 0x96, 0xc3, 0x15, 0x7c, 0xe8, 0x3f, 0xe9,
	0xdf, 0xe9, 0xad, 0x7f, 0xaa, 0xe0, 0x2c, 0x57, 0xf2, 0xd7, 0x39, 0x37, 0xee, 0x7b, 0x6f, 0x1e,
	0x67, 0x66, 0x67, 0xc8, 0xb6, 0x2d, 0x56, 0xc5, 0x72, 0x4f, 0x42, 0xbe, 0x90, 0xca, 0x81, 0x1a,
	0x55, 0xce, 0x7a, 0xcb, 0x21, 0xd3, 0x98, 0x59, 0xa9, 0x2d, 0xca, 0x2b, 0x27, 0x75, 0xb5, 0xfc,
	0x20, 0xa3, 0xd0, 0x56, 0xe0, 0x46, 0xcd, 0x39, 0x68, 0x33, 0x40, 0x04, 0x6c, 0x4f, 0xa3, 0x1c,
	0x0a, 0x55, 0x97, 0x5e, 0x2e, 0x5d, 0x31, 0x0a, 0x76, 0x52, 0x9b, 0xc2, 0xba, 0x85, 0xf2, 0xda,
	0x1a, 0xbc, 0x83, 0xec, 0x24, 0xec, 0xe5, 0xad, 0xfb, 0xe5, 0xc9, 0xd1, 0x9f, 0x67, 0xfc, 0x73,
	0xd6, 0x8d, 0x8e, 0xd2, 0xa8, 0x05, 0x88, 0xce, 0xa0, 0x33, 0x7c, 0x92, 0x3c, 0x8d, 0xd8, 0x4c,
	0x2d, 0x80, 0xbf, 0x66, 0x8f, 0x1b, 0xbb, 0x5c, 0x7c, 0x32, 0xe8, 0x0c, 0x9f, 0x25, 0x1b, 0xe1,
	0xf3, 0xf7, 0x7c, 0xe7, 0xbf, 0xce, 0x9d, 0xa2, 0xa4, 0x53, 0x66, 0x0e, 0xc1, 0x95, 0x0e, 0xb2,
	0x72, 0x50, 0xe8, 0xab, 0xd6, 0x95, 0xb0, 0x53, 0x82, 0xf8, 0x88, 0xbd, 0xb8, 0x2e, 0x91, 0x25,
	0x98, 0xb9, 0xbf, 0x88, 0x37, 0xf4, 0xaf, 0x29, 0xa7, 0x44, 0xf0, 0x4f, 0xd9, 0xa6, 0x01, 0x2f,
	0x33, 0x8b, 0x5e, 0x3c, 0x20, 0xd1, 0x63, 0x03, 0x7e, 0x62, 0xd1, 0xf3, 0x57, 0x6c, 0x03, 0xbd,
	0xf2, 0x35, 0x8a, 0x87, 0x74, 0x4f, 0xfc, 0xe2, 0x5f, 0x33, 0xae, 0x91, 0x22, 0x64, 0x66, 0x4d,
	0xa1, 0xe7, 0xb5, 0x83, 0x5c, 0x3c, 0x1a, 0x74, 0x86, 0x9b, 0xc9, 0x96, 0xc6, 0x10, 0x3b, 0x59,
	0xe1, 0x3b, 0xff, 0x6e, 0xb2, 0xde, 0xad, 0x6a, 0xf8, 0x7b, 0xf6, 0x5a, 0xa3, 0x4c, 0x55, 0x76,
	0x99, 0x5a, 0x03, 0x4d, 0x85, 0x2a, 0xf3, 0x7a, 0x09, 0xe2, 0x2d, 0xd9, 0xbc, 0xd4, 0x78, 0x10,
	0xd9, 0xb1, 0x03, 0x35, 0x26, 0x8e, 0x7f, 0xc5, 0x7a, 0xf1, 0x07, 0x78, 0x70, 0x85, 0xca, 0x00,
	0xc5, 0x1e, 0xa5, 0xfc, 0x9c, 0x3a, 0xb7, 0x42, 0xf9, 0x1b, 0xd6, 0xd3, 0xd8, 0xd8, 0xa2, 0xaf,
	0xd3, 0x14, 0x72, 0xf1, 0x8e, 0x7c, 0x9f, 0x69, 0x0c, 0x7e, 0x67, 0x0d, 0xc8, 0xbf, 0x65, 0xdb,
	0xad, 0xce, 0x5b, 0xaf, 0xca, 0x95, 0xfa, 0x3d, 0xa9, 0x79, 0xa3, 0x3e, 0x0f, 0x54, 0x1b, 0xb2,
	0xcb, 0xfa, 0x41, 0x24, 0xdb, 0x39, 0xa1, 0xc6, 0x7d, 0xa0, 0x2c, 0x7a, 0x81, 0x38, 0x6c, 0x70,
	0x6a, 0xe0, 0x80, 0x75, 0x5b, 0x7b, 0x83, 0xa8, 0xc4, 0x3e, 0xb9, 0xb2, 0xc6, 0x75, 0x86, 0xa8,
	0xf8, 0x3b, 0xf6, 0x2a, 0x30, 0xd2, 0x58, 0xe9, 0x20, 0xd7, 0xe8, 0x9d, 0x4e, 0xeb, 0x30, 0x58,
	0xe2, 0xbb, 0xa6, 0x0f, 0x81, 0x9d, 0xd9, 0xe4, 0x06, 0x17, 0x7f, 0x00, 0x05, 0x7a, 0xa7, 0x0c,
	0x96, 0xca, 0x43, 0x2e, 0xbe, 0x6f, 0x7f, 0x40, 0x70, 0x3e, 0x5f, 0xe1, 0xb1, 0x19, 0xa4, 0x8e,
	0x49, 0x8b, 0x1f, 0xda, 0x66, 0x04, 0x69, 0xcc, 0x98, 0x7f, 0xc9, 0x9e, 0x6b, 0x94, 0xce, 0x39,
	0x09, 0x46, 0xa5, 0x25, 0xe4, 0xe2, 0x47, 0x92, 0x75, 0x35, 0x26, 0xce, 0x1d, 0x35, 0x18, 0x7f,
	0xc1, 0x1e, 0x61, 0x25, 0x0b, 0x14, 0x3f, 0x51, 0xcd, 0x0f, 0xb1, 0x3a, 0x46, 0xfe, 0x4f, 0x87,
	0xb1, 0xf5, 0x98, 0x8a, 0x9f, 0x07, 0x0f, 0x86, 0x4f, 0xdf, 0xfe, 0x3d, 0xfa, 0x28, 0x2b, 0x38,
	0xba, 0x77, 0x55, 0x92, 0x27, 0xe1, 0x9c, 0xd0, 0xd6, 0x0c, 0xd9, 0x16, 0x11, 0xb6, 0x52, 0x7f,
	0xd5, 0x20, 0x4b, 0x54, 0x28, 0x7e, 0x59, 0xcf, 0xcd, 0x1f, 0x04, 0x4f, 0x51, 0x21, 0xdf, 0x67,
	0xe2, 0x96, 0x52, 0x66, 0x17, 0x90, 0x5d, 0x62, 0xbd, 0x10, 0xbf, 0x52, 0xc4, 0xf6, 0x8d, 0x88,
	0x49, 0x24, 0xf9, 0x37, 0x8c, 0x08, 0x99, 0x67, 0x32, 0xd5, 0xbe, 0x0c, 0x6b, 0x5f, 0xa2, 0x54,
	0x28, 0x7e, 0x6b, 0xf6, 0x2e, 0x90, 0x87, 0xd9, 0x41, 0x43, 0x4d, 0x71, 0x8c, 0x21, 0x29, 0x6d,
	0x72, 0x9d, 0x51, 0x0d, 0x51, 0x3c, 0x6e, 0x92, 0x5a, 0xe3, 0xa4, 0x7c, 0xc3, 0xb6, 0x72, 0x2b,
	0x8d, 0xf5, 0x52, 0xcd, 0x21, 0x2a, 0x0f, 0x48, 0xd9, 0xcd, 0xed, 0xcc, 0xfa, 0xf1, 0x1c, 0x48,
	0xb7, 0xcb, 0xfa, 0x45, 0x69, 0x6d, 0x2e, 0x4b, 0x8d, 0xbe, 0xdd, 0xfb, 0x49, 0x33, 0x99, 0x44,
	0x4c, 0x35, 0xfa, 0xb8, 0xf5, 0x6d, 0xa1, 0x65, 0x71, 0x6d, 0x9b, 0x64, 0x66, 0x6b, 0xe3, 0xc5,
	0xe1, 0xba, 0xd0, 0x69, 0xb1, 0xde, 0xaa, 0x49, 0x20, 0xf9, 0x09, 0xfb, 0x82, 0x02, 0x2b, 0x70,
	0xab, 0x17, 0xe6, 0x1e, 0x8f, 0x23, 0xf2, 0xf8, 0x2c, 0x48, 0x4f, 0xc1, 0xc5, 0x07, 0xe7, 0x8e,
	0xd9, 0x2e, 0xeb, 0xaf, 0xb2, 0x70, 0xb0, 0xd4, 0x18, 0x06, 0xff, 0xb8, 0xc9, 0x38, 0x5e, 0x9f,
	0x44, 0x38, 0xdd, 0xa0, 0x67, 0x7d, 0xef, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0xe0, 0x83, 0x59,
	0xad, 0xef, 0x05, 0x00, 0x00,
}
