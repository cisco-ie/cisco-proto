/*
Copyright 2019 Cisco Systems

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: standby_trackedif_info.proto

package cisco_ios_xr_ipv4_hsrp_oper_hsrp_ipv6_tracked_interfaces_tracked_interface

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type StandbyTrackedifInfo_KEYS struct {
	InterfaceName        string   `protobuf:"bytes,1,opt,name=interface_name,json=interfaceName,proto3" json:"interface_name,omitempty"`
	GroupNumber          uint32   `protobuf:"varint,2,opt,name=group_number,json=groupNumber,proto3" json:"group_number,omitempty"`
	TrackedInterfaceName string   `protobuf:"bytes,3,opt,name=tracked_interface_name,json=trackedInterfaceName,proto3" json:"tracked_interface_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StandbyTrackedifInfo_KEYS) Reset()         { *m = StandbyTrackedifInfo_KEYS{} }
func (m *StandbyTrackedifInfo_KEYS) String() string { return proto.CompactTextString(m) }
func (*StandbyTrackedifInfo_KEYS) ProtoMessage()    {}
func (*StandbyTrackedifInfo_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_12a62f0cb45b3a7e, []int{0}
}

func (m *StandbyTrackedifInfo_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StandbyTrackedifInfo_KEYS.Unmarshal(m, b)
}
func (m *StandbyTrackedifInfo_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StandbyTrackedifInfo_KEYS.Marshal(b, m, deterministic)
}
func (m *StandbyTrackedifInfo_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StandbyTrackedifInfo_KEYS.Merge(m, src)
}
func (m *StandbyTrackedifInfo_KEYS) XXX_Size() int {
	return xxx_messageInfo_StandbyTrackedifInfo_KEYS.Size(m)
}
func (m *StandbyTrackedifInfo_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_StandbyTrackedifInfo_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_StandbyTrackedifInfo_KEYS proto.InternalMessageInfo

func (m *StandbyTrackedifInfo_KEYS) GetInterfaceName() string {
	if m != nil {
		return m.InterfaceName
	}
	return ""
}

func (m *StandbyTrackedifInfo_KEYS) GetGroupNumber() uint32 {
	if m != nil {
		return m.GroupNumber
	}
	return 0
}

func (m *StandbyTrackedifInfo_KEYS) GetTrackedInterfaceName() string {
	if m != nil {
		return m.TrackedInterfaceName
	}
	return ""
}

type StandbyTrackedifInfo struct {
	Interface              string   `protobuf:"bytes,50,opt,name=interface,proto3" json:"interface,omitempty"`
	HsrpGroupNumber        uint32   `protobuf:"varint,51,opt,name=hsrp_group_number,json=hsrpGroupNumber,proto3" json:"hsrp_group_number,omitempty"`
	PriorityDecrement      uint32   `protobuf:"varint,52,opt,name=priority_decrement,json=priorityDecrement,proto3" json:"priority_decrement,omitempty"`
	InterfaceUpFlag        bool     `protobuf:"varint,53,opt,name=interface_up_flag,json=interfaceUpFlag,proto3" json:"interface_up_flag,omitempty"`
	TrackedInterfaceNameXr string   `protobuf:"bytes,54,opt,name=tracked_interface_name_xr,json=trackedInterfaceNameXr,proto3" json:"tracked_interface_name_xr,omitempty"`
	IsObject               bool     `protobuf:"varint,55,opt,name=is_object,json=isObject,proto3" json:"is_object,omitempty"`
	XXX_NoUnkeyedLiteral   struct{} `json:"-"`
	XXX_unrecognized       []byte   `json:"-"`
	XXX_sizecache          int32    `json:"-"`
}

func (m *StandbyTrackedifInfo) Reset()         { *m = StandbyTrackedifInfo{} }
func (m *StandbyTrackedifInfo) String() string { return proto.CompactTextString(m) }
func (*StandbyTrackedifInfo) ProtoMessage()    {}
func (*StandbyTrackedifInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_12a62f0cb45b3a7e, []int{1}
}

func (m *StandbyTrackedifInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StandbyTrackedifInfo.Unmarshal(m, b)
}
func (m *StandbyTrackedifInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StandbyTrackedifInfo.Marshal(b, m, deterministic)
}
func (m *StandbyTrackedifInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StandbyTrackedifInfo.Merge(m, src)
}
func (m *StandbyTrackedifInfo) XXX_Size() int {
	return xxx_messageInfo_StandbyTrackedifInfo.Size(m)
}
func (m *StandbyTrackedifInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_StandbyTrackedifInfo.DiscardUnknown(m)
}

var xxx_messageInfo_StandbyTrackedifInfo proto.InternalMessageInfo

func (m *StandbyTrackedifInfo) GetInterface() string {
	if m != nil {
		return m.Interface
	}
	return ""
}

func (m *StandbyTrackedifInfo) GetHsrpGroupNumber() uint32 {
	if m != nil {
		return m.HsrpGroupNumber
	}
	return 0
}

func (m *StandbyTrackedifInfo) GetPriorityDecrement() uint32 {
	if m != nil {
		return m.PriorityDecrement
	}
	return 0
}

func (m *StandbyTrackedifInfo) GetInterfaceUpFlag() bool {
	if m != nil {
		return m.InterfaceUpFlag
	}
	return false
}

func (m *StandbyTrackedifInfo) GetTrackedInterfaceNameXr() string {
	if m != nil {
		return m.TrackedInterfaceNameXr
	}
	return ""
}

func (m *StandbyTrackedifInfo) GetIsObject() bool {
	if m != nil {
		return m.IsObject
	}
	return false
}

func init() {
	proto.RegisterType((*StandbyTrackedifInfo_KEYS)(nil), "cisco_ios_xr_ipv4_hsrp_oper.hsrp.ipv6.tracked_interfaces.tracked_interface.standby_trackedif_info_KEYS")
	proto.RegisterType((*StandbyTrackedifInfo)(nil), "cisco_ios_xr_ipv4_hsrp_oper.hsrp.ipv6.tracked_interfaces.tracked_interface.standby_trackedif_info")
}

func init() { proto.RegisterFile("standby_trackedif_info.proto", fileDescriptor_12a62f0cb45b3a7e) }

var fileDescriptor_12a62f0cb45b3a7e = []byte{
	// 321 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x92, 0xdf, 0x4b, 0x3a, 0x41,
	0x14, 0xc5, 0x59, 0xbf, 0xf0, 0x45, 0xa7, 0x4c, 0x1c, 0x42, 0x26, 0xf4, 0xc1, 0x84, 0x40, 0x82,
	0xf6, 0x21, 0xcd, 0xe8, 0xbd, 0x1f, 0x54, 0x60, 0x60, 0x04, 0xf5, 0x74, 0x99, 0x5d, 0x67, 0x6d,
	0xca, 0x9d, 0x19, 0xee, 0x8c, 0xa2, 0x7f, 0x48, 0x8f, 0xfd, 0xaf, 0xb1, 0x93, 0xae, 0x86, 0xfb,
	0xb6, 0x7b, 0xce, 0x9d, 0xcf, 0x3d, 0x67, 0x18, 0xd2, 0xb2, 0x8e, 0xab, 0x71, 0xb4, 0x04, 0x87,
	0x3c, 0xfe, 0x14, 0x63, 0x99, 0x80, 0x54, 0x89, 0x0e, 0x0d, 0x6a, 0xa7, 0xe9, 0x43, 0x2c, 0x6d,
	0xac, 0x41, 0x6a, 0x0b, 0x0b, 0x04, 0x69, 0xe6, 0x7d, 0x78, 0xb7, 0x68, 0x40, 0x1b, 0x81, 0x61,
	0xf6, 0x15, 0x4a, 0x33, 0x1f, 0x84, 0xab, 0xb3, 0x20, 0x95, 0x13, 0x98, 0xf0, 0x58, 0xd8, 0x5d,
	0xa9, 0xf3, 0x1d, 0x90, 0x66, 0xf1, 0x32, 0x78, 0xbc, 0x79, 0x7b, 0xa6, 0x27, 0xe4, 0x20, 0x1f,
	0x06, 0xc5, 0x53, 0xc1, 0x82, 0x76, 0xd0, 0xad, 0x8c, 0xaa, 0xb9, 0x3a, 0xe4, 0xa9, 0xa0, 0xc7,
	0x64, 0x7f, 0x82, 0x7a, 0x66, 0x40, 0xcd, 0xd2, 0x48, 0x20, 0x2b, 0xb5, 0x83, 0x6e, 0x75, 0xb4,
	0xe7, 0xb5, 0xa1, 0x97, 0x68, 0x9f, 0x34, 0x76, 0xd6, 0xff, 0x12, 0xff, 0x79, 0xe2, 0xe1, 0xca,
	0xbd, 0xdf, 0x06, 0x77, 0xbe, 0x4a, 0xa4, 0x51, 0x9c, 0x8f, 0xb6, 0x48, 0x25, 0x07, 0xb1, 0x73,
	0xcf, 0xd8, 0x08, 0xf4, 0x94, 0xd4, 0xfd, 0xa5, 0xfc, 0x89, 0xd5, 0xf3, 0xb1, 0x6a, 0x99, 0x71,
	0xb7, 0x15, 0xed, 0x8c, 0x50, 0x83, 0x52, 0xa3, 0x74, 0x4b, 0x18, 0x8b, 0x18, 0x45, 0x2a, 0x94,
	0x63, 0x7d, 0x3f, 0x5c, 0x5f, 0x3b, 0xd7, 0x6b, 0x23, 0x43, 0x6f, 0x1a, 0xcc, 0x0c, 0x24, 0x53,
	0x3e, 0x61, 0x17, 0xed, 0xa0, 0x5b, 0x1e, 0xd5, 0x72, 0xe3, 0xc5, 0xdc, 0x4e, 0xf9, 0x84, 0x5e,
	0x91, 0xa3, 0xe2, 0xd6, 0xb0, 0x40, 0x36, 0xf0, 0xa1, 0x1b, 0x45, 0xc5, 0x5f, 0x91, 0x36, 0x49,
	0x45, 0x5a, 0xd0, 0xd1, 0x87, 0x88, 0x1d, 0xbb, 0xf4, 0xf8, 0xb2, 0xb4, 0x4f, 0xfe, 0x3f, 0xfa,
	0xef, 0x9f, 0x42, 0xef, 0x27, 0x00, 0x00, 0xff, 0xff, 0x2b, 0xbe, 0x9d, 0xd4, 0x2a, 0x02, 0x00,
	0x00,
}
