/*
Copyright 2019 Cisco Systems

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pce_lsp_bag.proto

package cisco_ios_xr_mpls_te_oper_mpls_pce_stdby_lsps_lsp

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type PceLspBag_KEYS struct {
	SymbolicName         string   `protobuf:"bytes,1,opt,name=symbolic_name,json=symbolicName,proto3" json:"symbolic_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PceLspBag_KEYS) Reset()         { *m = PceLspBag_KEYS{} }
func (m *PceLspBag_KEYS) String() string { return proto.CompactTextString(m) }
func (*PceLspBag_KEYS) ProtoMessage()    {}
func (*PceLspBag_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_4fee011f6fc7b995, []int{0}
}

func (m *PceLspBag_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PceLspBag_KEYS.Unmarshal(m, b)
}
func (m *PceLspBag_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PceLspBag_KEYS.Marshal(b, m, deterministic)
}
func (m *PceLspBag_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PceLspBag_KEYS.Merge(m, src)
}
func (m *PceLspBag_KEYS) XXX_Size() int {
	return xxx_messageInfo_PceLspBag_KEYS.Size(m)
}
func (m *PceLspBag_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_PceLspBag_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_PceLspBag_KEYS proto.InternalMessageInfo

func (m *PceLspBag_KEYS) GetSymbolicName() string {
	if m != nil {
		return m.SymbolicName
	}
	return ""
}

type PceLspPeerBag struct {
	NodeIdentifier       string   `protobuf:"bytes,1,opt,name=node_identifier,json=nodeIdentifier,proto3" json:"node_identifier,omitempty"`
	Address              string   `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PceLspPeerBag) Reset()         { *m = PceLspPeerBag{} }
func (m *PceLspPeerBag) String() string { return proto.CompactTextString(m) }
func (*PceLspPeerBag) ProtoMessage()    {}
func (*PceLspPeerBag) Descriptor() ([]byte, []int) {
	return fileDescriptor_4fee011f6fc7b995, []int{1}
}

func (m *PceLspPeerBag) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PceLspPeerBag.Unmarshal(m, b)
}
func (m *PceLspPeerBag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PceLspPeerBag.Marshal(b, m, deterministic)
}
func (m *PceLspPeerBag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PceLspPeerBag.Merge(m, src)
}
func (m *PceLspPeerBag) XXX_Size() int {
	return xxx_messageInfo_PceLspPeerBag.Size(m)
}
func (m *PceLspPeerBag) XXX_DiscardUnknown() {
	xxx_messageInfo_PceLspPeerBag.DiscardUnknown(m)
}

var xxx_messageInfo_PceLspPeerBag proto.InternalMessageInfo

func (m *PceLspPeerBag) GetNodeIdentifier() string {
	if m != nil {
		return m.NodeIdentifier
	}
	return ""
}

func (m *PceLspPeerBag) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type PceLspIdentifiersBag struct {
	IsUsed               bool     `protobuf:"varint,1,opt,name=is_used,json=isUsed,proto3" json:"is_used,omitempty"`
	Sender               string   `protobuf:"bytes,2,opt,name=sender,proto3" json:"sender,omitempty"`
	TeLspId              uint32   `protobuf:"varint,3,opt,name=te_lsp_id,json=teLspId,proto3" json:"te_lsp_id,omitempty"`
	TunnelId             uint32   `protobuf:"varint,4,opt,name=tunnel_id,json=tunnelId,proto3" json:"tunnel_id,omitempty"`
	ExtTunnelId          uint32   `protobuf:"varint,5,opt,name=ext_tunnel_id,json=extTunnelId,proto3" json:"ext_tunnel_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PceLspIdentifiersBag) Reset()         { *m = PceLspIdentifiersBag{} }
func (m *PceLspIdentifiersBag) String() string { return proto.CompactTextString(m) }
func (*PceLspIdentifiersBag) ProtoMessage()    {}
func (*PceLspIdentifiersBag) Descriptor() ([]byte, []int) {
	return fileDescriptor_4fee011f6fc7b995, []int{2}
}

func (m *PceLspIdentifiersBag) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PceLspIdentifiersBag.Unmarshal(m, b)
}
func (m *PceLspIdentifiersBag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PceLspIdentifiersBag.Marshal(b, m, deterministic)
}
func (m *PceLspIdentifiersBag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PceLspIdentifiersBag.Merge(m, src)
}
func (m *PceLspIdentifiersBag) XXX_Size() int {
	return xxx_messageInfo_PceLspIdentifiersBag.Size(m)
}
func (m *PceLspIdentifiersBag) XXX_DiscardUnknown() {
	xxx_messageInfo_PceLspIdentifiersBag.DiscardUnknown(m)
}

var xxx_messageInfo_PceLspIdentifiersBag proto.InternalMessageInfo

func (m *PceLspIdentifiersBag) GetIsUsed() bool {
	if m != nil {
		return m.IsUsed
	}
	return false
}

func (m *PceLspIdentifiersBag) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *PceLspIdentifiersBag) GetTeLspId() uint32 {
	if m != nil {
		return m.TeLspId
	}
	return 0
}

func (m *PceLspIdentifiersBag) GetTunnelId() uint32 {
	if m != nil {
		return m.TunnelId
	}
	return 0
}

func (m *PceLspIdentifiersBag) GetExtTunnelId() uint32 {
	if m != nil {
		return m.ExtTunnelId
	}
	return 0
}

type PceLspRouteHopBag struct {
	SubobjType             uint32   `protobuf:"varint,1,opt,name=subobj_type,json=subobjType,proto3" json:"subobj_type,omitempty"`
	Ipv4Address            string   `protobuf:"bytes,2,opt,name=ipv4_address,json=ipv4Address,proto3" json:"ipv4_address,omitempty"`
	Ipv4PrefixLen          uint32   `protobuf:"varint,3,opt,name=ipv4_prefix_len,json=ipv4PrefixLen,proto3" json:"ipv4_prefix_len,omitempty"`
	Strict                 bool     `protobuf:"varint,4,opt,name=strict,proto3" json:"strict,omitempty"`
	Global                 bool     `protobuf:"varint,5,opt,name=global,proto3" json:"global,omitempty"`
	MplsLabel              uint32   `protobuf:"varint,6,opt,name=mpls_label,json=mplsLabel,proto3" json:"mpls_label,omitempty"`
	SegmentIdType          string   `protobuf:"bytes,7,opt,name=segment_id_type,json=segmentIdType,proto3" json:"segment_id_type,omitempty"`
	OnlyValidMplsLabel     bool     `protobuf:"varint,8,opt,name=only_valid_mpls_label,json=onlyValidMplsLabel,proto3" json:"only_valid_mpls_label,omitempty"`
	CompleteMplsLabelEntry bool     `protobuf:"varint,9,opt,name=complete_mpls_label_entry,json=completeMplsLabelEntry,proto3" json:"complete_mpls_label_entry,omitempty"`
	MissingSegmentId       bool     `protobuf:"varint,10,opt,name=missing_segment_id,json=missingSegmentId,proto3" json:"missing_segment_id,omitempty"`
	MissingNodeAdjcencyId  bool     `protobuf:"varint,11,opt,name=missing_node_adjcency_id,json=missingNodeAdjcencyId,proto3" json:"missing_node_adjcency_id,omitempty"`
	SegmentIdExists        bool     `protobuf:"varint,12,opt,name=segment_id_exists,json=segmentIdExists,proto3" json:"segment_id_exists,omitempty"`
	SegmentIdValue         uint32   `protobuf:"varint,13,opt,name=segment_id_value,json=segmentIdValue,proto3" json:"segment_id_value,omitempty"`
	NodeAdjacencyIdExists  bool     `protobuf:"varint,14,opt,name=node_adjacency_id_exists,json=nodeAdjacencyIdExists,proto3" json:"node_adjacency_id_exists,omitempty"`
	NodeId                 string   `protobuf:"bytes,15,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	LocalAddress           string   `protobuf:"bytes,16,opt,name=local_address,json=localAddress,proto3" json:"local_address,omitempty"`
	RemoteAddress          string   `protobuf:"bytes,17,opt,name=remote_address,json=remoteAddress,proto3" json:"remote_address,omitempty"`
	XXX_NoUnkeyedLiteral   struct{} `json:"-"`
	XXX_unrecognized       []byte   `json:"-"`
	XXX_sizecache          int32    `json:"-"`
}

func (m *PceLspRouteHopBag) Reset()         { *m = PceLspRouteHopBag{} }
func (m *PceLspRouteHopBag) String() string { return proto.CompactTextString(m) }
func (*PceLspRouteHopBag) ProtoMessage()    {}
func (*PceLspRouteHopBag) Descriptor() ([]byte, []int) {
	return fileDescriptor_4fee011f6fc7b995, []int{3}
}

func (m *PceLspRouteHopBag) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PceLspRouteHopBag.Unmarshal(m, b)
}
func (m *PceLspRouteHopBag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PceLspRouteHopBag.Marshal(b, m, deterministic)
}
func (m *PceLspRouteHopBag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PceLspRouteHopBag.Merge(m, src)
}
func (m *PceLspRouteHopBag) XXX_Size() int {
	return xxx_messageInfo_PceLspRouteHopBag.Size(m)
}
func (m *PceLspRouteHopBag) XXX_DiscardUnknown() {
	xxx_messageInfo_PceLspRouteHopBag.DiscardUnknown(m)
}

var xxx_messageInfo_PceLspRouteHopBag proto.InternalMessageInfo

func (m *PceLspRouteHopBag) GetSubobjType() uint32 {
	if m != nil {
		return m.SubobjType
	}
	return 0
}

func (m *PceLspRouteHopBag) GetIpv4Address() string {
	if m != nil {
		return m.Ipv4Address
	}
	return ""
}

func (m *PceLspRouteHopBag) GetIpv4PrefixLen() uint32 {
	if m != nil {
		return m.Ipv4PrefixLen
	}
	return 0
}

func (m *PceLspRouteHopBag) GetStrict() bool {
	if m != nil {
		return m.Strict
	}
	return false
}

func (m *PceLspRouteHopBag) GetGlobal() bool {
	if m != nil {
		return m.Global
	}
	return false
}

func (m *PceLspRouteHopBag) GetMplsLabel() uint32 {
	if m != nil {
		return m.MplsLabel
	}
	return 0
}

func (m *PceLspRouteHopBag) GetSegmentIdType() string {
	if m != nil {
		return m.SegmentIdType
	}
	return ""
}

func (m *PceLspRouteHopBag) GetOnlyValidMplsLabel() bool {
	if m != nil {
		return m.OnlyValidMplsLabel
	}
	return false
}

func (m *PceLspRouteHopBag) GetCompleteMplsLabelEntry() bool {
	if m != nil {
		return m.CompleteMplsLabelEntry
	}
	return false
}

func (m *PceLspRouteHopBag) GetMissingSegmentId() bool {
	if m != nil {
		return m.MissingSegmentId
	}
	return false
}

func (m *PceLspRouteHopBag) GetMissingNodeAdjcencyId() bool {
	if m != nil {
		return m.MissingNodeAdjcencyId
	}
	return false
}

func (m *PceLspRouteHopBag) GetSegmentIdExists() bool {
	if m != nil {
		return m.SegmentIdExists
	}
	return false
}

func (m *PceLspRouteHopBag) GetSegmentIdValue() uint32 {
	if m != nil {
		return m.SegmentIdValue
	}
	return 0
}

func (m *PceLspRouteHopBag) GetNodeAdjacencyIdExists() bool {
	if m != nil {
		return m.NodeAdjacencyIdExists
	}
	return false
}

func (m *PceLspRouteHopBag) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

func (m *PceLspRouteHopBag) GetLocalAddress() string {
	if m != nil {
		return m.LocalAddress
	}
	return ""
}

func (m *PceLspRouteHopBag) GetRemoteAddress() string {
	if m != nil {
		return m.RemoteAddress
	}
	return ""
}

type PceLspRouteBag struct {
	IsUsed               bool                 `protobuf:"varint,1,opt,name=is_used,json=isUsed,proto3" json:"is_used,omitempty"`
	Cost                 uint32               `protobuf:"varint,2,opt,name=cost,proto3" json:"cost,omitempty"`
	Address              []string             `protobuf:"bytes,3,rep,name=address,proto3" json:"address,omitempty"`
	Subobject            []*PceLspRouteHopBag `protobuf:"bytes,4,rep,name=subobject,proto3" json:"subobject,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *PceLspRouteBag) Reset()         { *m = PceLspRouteBag{} }
func (m *PceLspRouteBag) String() string { return proto.CompactTextString(m) }
func (*PceLspRouteBag) ProtoMessage()    {}
func (*PceLspRouteBag) Descriptor() ([]byte, []int) {
	return fileDescriptor_4fee011f6fc7b995, []int{4}
}

func (m *PceLspRouteBag) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PceLspRouteBag.Unmarshal(m, b)
}
func (m *PceLspRouteBag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PceLspRouteBag.Marshal(b, m, deterministic)
}
func (m *PceLspRouteBag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PceLspRouteBag.Merge(m, src)
}
func (m *PceLspRouteBag) XXX_Size() int {
	return xxx_messageInfo_PceLspRouteBag.Size(m)
}
func (m *PceLspRouteBag) XXX_DiscardUnknown() {
	xxx_messageInfo_PceLspRouteBag.DiscardUnknown(m)
}

var xxx_messageInfo_PceLspRouteBag proto.InternalMessageInfo

func (m *PceLspRouteBag) GetIsUsed() bool {
	if m != nil {
		return m.IsUsed
	}
	return false
}

func (m *PceLspRouteBag) GetCost() uint32 {
	if m != nil {
		return m.Cost
	}
	return 0
}

func (m *PceLspRouteBag) GetAddress() []string {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *PceLspRouteBag) GetSubobject() []*PceLspRouteHopBag {
	if m != nil {
		return m.Subobject
	}
	return nil
}

type PceLspLspaBag struct {
	IsUsed               bool     `protobuf:"varint,1,opt,name=is_used,json=isUsed,proto3" json:"is_used,omitempty"`
	ExludeAny            uint32   `protobuf:"varint,2,opt,name=exlude_any,json=exludeAny,proto3" json:"exlude_any,omitempty"`
	IncludeAny           uint32   `protobuf:"varint,3,opt,name=include_any,json=includeAny,proto3" json:"include_any,omitempty"`
	IncludeAll           uint32   `protobuf:"varint,4,opt,name=include_all,json=includeAll,proto3" json:"include_all,omitempty"`
	Setup                uint32   `protobuf:"varint,5,opt,name=setup,proto3" json:"setup,omitempty"`
	Hold                 uint32   `protobuf:"varint,6,opt,name=hold,proto3" json:"hold,omitempty"`
	Lbit                 bool     `protobuf:"varint,7,opt,name=lbit,proto3" json:"lbit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PceLspLspaBag) Reset()         { *m = PceLspLspaBag{} }
func (m *PceLspLspaBag) String() string { return proto.CompactTextString(m) }
func (*PceLspLspaBag) ProtoMessage()    {}
func (*PceLspLspaBag) Descriptor() ([]byte, []int) {
	return fileDescriptor_4fee011f6fc7b995, []int{5}
}

func (m *PceLspLspaBag) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PceLspLspaBag.Unmarshal(m, b)
}
func (m *PceLspLspaBag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PceLspLspaBag.Marshal(b, m, deterministic)
}
func (m *PceLspLspaBag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PceLspLspaBag.Merge(m, src)
}
func (m *PceLspLspaBag) XXX_Size() int {
	return xxx_messageInfo_PceLspLspaBag.Size(m)
}
func (m *PceLspLspaBag) XXX_DiscardUnknown() {
	xxx_messageInfo_PceLspLspaBag.DiscardUnknown(m)
}

var xxx_messageInfo_PceLspLspaBag proto.InternalMessageInfo

func (m *PceLspLspaBag) GetIsUsed() bool {
	if m != nil {
		return m.IsUsed
	}
	return false
}

func (m *PceLspLspaBag) GetExludeAny() uint32 {
	if m != nil {
		return m.ExludeAny
	}
	return 0
}

func (m *PceLspLspaBag) GetIncludeAny() uint32 {
	if m != nil {
		return m.IncludeAny
	}
	return 0
}

func (m *PceLspLspaBag) GetIncludeAll() uint32 {
	if m != nil {
		return m.IncludeAll
	}
	return 0
}

func (m *PceLspLspaBag) GetSetup() uint32 {
	if m != nil {
		return m.Setup
	}
	return 0
}

func (m *PceLspLspaBag) GetHold() uint32 {
	if m != nil {
		return m.Hold
	}
	return 0
}

func (m *PceLspLspaBag) GetLbit() bool {
	if m != nil {
		return m.Lbit
	}
	return false
}

type PceLspMetricBag struct {
	Type                 uint32   `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	Cost                 uint32   `protobuf:"varint,2,opt,name=cost,proto3" json:"cost,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PceLspMetricBag) Reset()         { *m = PceLspMetricBag{} }
func (m *PceLspMetricBag) String() string { return proto.CompactTextString(m) }
func (*PceLspMetricBag) ProtoMessage()    {}
func (*PceLspMetricBag) Descriptor() ([]byte, []int) {
	return fileDescriptor_4fee011f6fc7b995, []int{6}
}

func (m *PceLspMetricBag) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PceLspMetricBag.Unmarshal(m, b)
}
func (m *PceLspMetricBag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PceLspMetricBag.Marshal(b, m, deterministic)
}
func (m *PceLspMetricBag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PceLspMetricBag.Merge(m, src)
}
func (m *PceLspMetricBag) XXX_Size() int {
	return xxx_messageInfo_PceLspMetricBag.Size(m)
}
func (m *PceLspMetricBag) XXX_DiscardUnknown() {
	xxx_messageInfo_PceLspMetricBag.DiscardUnknown(m)
}

var xxx_messageInfo_PceLspMetricBag proto.InternalMessageInfo

func (m *PceLspMetricBag) GetType() uint32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *PceLspMetricBag) GetCost() uint32 {
	if m != nil {
		return m.Cost
	}
	return 0
}

type PceLspPathBag struct {
	Ero                  *PceLspRouteBag    `protobuf:"bytes,1,opt,name=ero,proto3" json:"ero,omitempty"`
	Lspa                 *PceLspLspaBag     `protobuf:"bytes,2,opt,name=lspa,proto3" json:"lspa,omitempty"`
	Rro                  *PceLspRouteBag    `protobuf:"bytes,3,opt,name=rro,proto3" json:"rro,omitempty"`
	Bw                   uint32             `protobuf:"varint,4,opt,name=bw,proto3" json:"bw,omitempty"`
	IsBwUsed             bool               `protobuf:"varint,5,opt,name=is_bw_used,json=isBwUsed,proto3" json:"is_bw_used,omitempty"`
	ReoptBw              uint32             `protobuf:"varint,6,opt,name=reopt_bw,json=reoptBw,proto3" json:"reopt_bw,omitempty"`
	IsReoptBwUsed        bool               `protobuf:"varint,7,opt,name=is_reopt_bw_used,json=isReoptBwUsed,proto3" json:"is_reopt_bw_used,omitempty"`
	AppliedBw            uint32             `protobuf:"varint,8,opt,name=applied_bw,json=appliedBw,proto3" json:"applied_bw,omitempty"`
	IsAppliedBwUsed      bool               `protobuf:"varint,9,opt,name=is_applied_bw_used,json=isAppliedBwUsed,proto3" json:"is_applied_bw_used,omitempty"`
	Metric               []*PceLspMetricBag `protobuf:"bytes,10,rep,name=metric,proto3" json:"metric,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *PceLspPathBag) Reset()         { *m = PceLspPathBag{} }
func (m *PceLspPathBag) String() string { return proto.CompactTextString(m) }
func (*PceLspPathBag) ProtoMessage()    {}
func (*PceLspPathBag) Descriptor() ([]byte, []int) {
	return fileDescriptor_4fee011f6fc7b995, []int{7}
}

func (m *PceLspPathBag) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PceLspPathBag.Unmarshal(m, b)
}
func (m *PceLspPathBag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PceLspPathBag.Marshal(b, m, deterministic)
}
func (m *PceLspPathBag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PceLspPathBag.Merge(m, src)
}
func (m *PceLspPathBag) XXX_Size() int {
	return xxx_messageInfo_PceLspPathBag.Size(m)
}
func (m *PceLspPathBag) XXX_DiscardUnknown() {
	xxx_messageInfo_PceLspPathBag.DiscardUnknown(m)
}

var xxx_messageInfo_PceLspPathBag proto.InternalMessageInfo

func (m *PceLspPathBag) GetEro() *PceLspRouteBag {
	if m != nil {
		return m.Ero
	}
	return nil
}

func (m *PceLspPathBag) GetLspa() *PceLspLspaBag {
	if m != nil {
		return m.Lspa
	}
	return nil
}

func (m *PceLspPathBag) GetRro() *PceLspRouteBag {
	if m != nil {
		return m.Rro
	}
	return nil
}

func (m *PceLspPathBag) GetBw() uint32 {
	if m != nil {
		return m.Bw
	}
	return 0
}

func (m *PceLspPathBag) GetIsBwUsed() bool {
	if m != nil {
		return m.IsBwUsed
	}
	return false
}

func (m *PceLspPathBag) GetReoptBw() uint32 {
	if m != nil {
		return m.ReoptBw
	}
	return 0
}

func (m *PceLspPathBag) GetIsReoptBwUsed() bool {
	if m != nil {
		return m.IsReoptBwUsed
	}
	return false
}

func (m *PceLspPathBag) GetAppliedBw() uint32 {
	if m != nil {
		return m.AppliedBw
	}
	return 0
}

func (m *PceLspPathBag) GetIsAppliedBwUsed() bool {
	if m != nil {
		return m.IsAppliedBwUsed
	}
	return false
}

func (m *PceLspPathBag) GetMetric() []*PceLspMetricBag {
	if m != nil {
		return m.Metric
	}
	return nil
}

type PceLspAutorouteBag struct {
	IsUsed               bool     `protobuf:"varint,1,opt,name=is_used,json=isUsed,proto3" json:"is_used,omitempty"`
	Announced            bool     `protobuf:"varint,2,opt,name=announced,proto3" json:"announced,omitempty"`
	MetricType           string   `protobuf:"bytes,3,opt,name=metric_type,json=metricType,proto3" json:"metric_type,omitempty"`
	Metric               uint32   `protobuf:"varint,4,opt,name=metric,proto3" json:"metric,omitempty"`
	Destination          []string `protobuf:"bytes,5,rep,name=destination,proto3" json:"destination,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PceLspAutorouteBag) Reset()         { *m = PceLspAutorouteBag{} }
func (m *PceLspAutorouteBag) String() string { return proto.CompactTextString(m) }
func (*PceLspAutorouteBag) ProtoMessage()    {}
func (*PceLspAutorouteBag) Descriptor() ([]byte, []int) {
	return fileDescriptor_4fee011f6fc7b995, []int{8}
}

func (m *PceLspAutorouteBag) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PceLspAutorouteBag.Unmarshal(m, b)
}
func (m *PceLspAutorouteBag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PceLspAutorouteBag.Marshal(b, m, deterministic)
}
func (m *PceLspAutorouteBag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PceLspAutorouteBag.Merge(m, src)
}
func (m *PceLspAutorouteBag) XXX_Size() int {
	return xxx_messageInfo_PceLspAutorouteBag.Size(m)
}
func (m *PceLspAutorouteBag) XXX_DiscardUnknown() {
	xxx_messageInfo_PceLspAutorouteBag.DiscardUnknown(m)
}

var xxx_messageInfo_PceLspAutorouteBag proto.InternalMessageInfo

func (m *PceLspAutorouteBag) GetIsUsed() bool {
	if m != nil {
		return m.IsUsed
	}
	return false
}

func (m *PceLspAutorouteBag) GetAnnounced() bool {
	if m != nil {
		return m.Announced
	}
	return false
}

func (m *PceLspAutorouteBag) GetMetricType() string {
	if m != nil {
		return m.MetricType
	}
	return ""
}

func (m *PceLspAutorouteBag) GetMetric() uint32 {
	if m != nil {
		return m.Metric
	}
	return 0
}

func (m *PceLspAutorouteBag) GetDestination() []string {
	if m != nil {
		return m.Destination
	}
	return nil
}

type PceLspBag struct {
	SourceAddress              string                `protobuf:"bytes,50,opt,name=source_address,json=sourceAddress,proto3" json:"source_address,omitempty"`
	DestinationAddress         string                `protobuf:"bytes,51,opt,name=destination_address,json=destinationAddress,proto3" json:"destination_address,omitempty"`
	SymbolicNameXr             string                `protobuf:"bytes,52,opt,name=symbolic_name_xr,json=symbolicNameXr,proto3" json:"symbolic_name_xr,omitempty"`
	SessionInternalLspId       uint32                `protobuf:"varint,53,opt,name=session_internal_lsp_id,json=sessionInternalLspId,proto3" json:"session_internal_lsp_id,omitempty"`
	StatefulRequestParameterId uint32                `protobuf:"varint,54,opt,name=stateful_request_parameter_id,json=statefulRequestParameterId,proto3" json:"stateful_request_parameter_id,omitempty"`
	RequestQueueSize           uint32                `protobuf:"varint,55,opt,name=request_queue_size,json=requestQueueSize,proto3" json:"request_queue_size,omitempty"`
	Creator                    *PceLspPeerBag        `protobuf:"bytes,56,opt,name=creator,proto3" json:"creator,omitempty"`
	Delegated                  *PceLspPeerBag        `protobuf:"bytes,57,opt,name=delegated,proto3" json:"delegated,omitempty"`
	Delegatable                bool                  `protobuf:"varint,58,opt,name=delegatable,proto3" json:"delegatable,omitempty"`
	Operational                string                `protobuf:"bytes,59,opt,name=operational,proto3" json:"operational,omitempty"`
	Administrative             bool                  `protobuf:"varint,60,opt,name=administrative,proto3" json:"administrative,omitempty"`
	CleanupTimerExp            int32                 `protobuf:"zigzag32,61,opt,name=cleanup_timer_exp,json=cleanupTimerExp,proto3" json:"cleanup_timer_exp,omitempty"`
	DelegationTimerExp         int32                 `protobuf:"zigzag32,62,opt,name=delegation_timer_exp,json=delegationTimerExp,proto3" json:"delegation_timer_exp,omitempty"`
	Create                     bool                  `protobuf:"varint,63,opt,name=create,proto3" json:"create,omitempty"`
	StateTimerExp              int32                 `protobuf:"zigzag32,64,opt,name=state_timer_exp,json=stateTimerExp,proto3" json:"state_timer_exp,omitempty"`
	LspoIsUsed                 bool                  `protobuf:"varint,65,opt,name=lspo_is_used,json=lspoIsUsed,proto3" json:"lspo_is_used,omitempty"`
	Identifiers                *PceLspIdentifiersBag `protobuf:"bytes,66,opt,name=identifiers,proto3" json:"identifiers,omitempty"`
	Paths                      []*PceLspPathBag      `protobuf:"bytes,67,rep,name=paths,proto3" json:"paths,omitempty"`
	ForwardClassId             uint32                `protobuf:"varint,68,opt,name=forward_class_id,json=forwardClassId,proto3" json:"forward_class_id,omitempty"`
	LoadShare                  uint32                `protobuf:"varint,69,opt,name=load_share,json=loadShare,proto3" json:"load_share,omitempty"`
	Autoroute                  *PceLspAutorouteBag   `protobuf:"bytes,70,opt,name=autoroute,proto3" json:"autoroute,omitempty"`
	BackupPath                 []string              `protobuf:"bytes,71,rep,name=backup_path,json=backupPath,proto3" json:"backup_path,omitempty"`
	PathSetupType              uint32                `protobuf:"varint,72,opt,name=path_setup_type,json=pathSetupType,proto3" json:"path_setup_type,omitempty"`
	BindingSid                 uint32                `protobuf:"varint,73,opt,name=binding_sid,json=bindingSid,proto3" json:"binding_sid,omitempty"`
	XXX_NoUnkeyedLiteral       struct{}              `json:"-"`
	XXX_unrecognized           []byte                `json:"-"`
	XXX_sizecache              int32                 `json:"-"`
}

func (m *PceLspBag) Reset()         { *m = PceLspBag{} }
func (m *PceLspBag) String() string { return proto.CompactTextString(m) }
func (*PceLspBag) ProtoMessage()    {}
func (*PceLspBag) Descriptor() ([]byte, []int) {
	return fileDescriptor_4fee011f6fc7b995, []int{9}
}

func (m *PceLspBag) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PceLspBag.Unmarshal(m, b)
}
func (m *PceLspBag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PceLspBag.Marshal(b, m, deterministic)
}
func (m *PceLspBag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PceLspBag.Merge(m, src)
}
func (m *PceLspBag) XXX_Size() int {
	return xxx_messageInfo_PceLspBag.Size(m)
}
func (m *PceLspBag) XXX_DiscardUnknown() {
	xxx_messageInfo_PceLspBag.DiscardUnknown(m)
}

var xxx_messageInfo_PceLspBag proto.InternalMessageInfo

func (m *PceLspBag) GetSourceAddress() string {
	if m != nil {
		return m.SourceAddress
	}
	return ""
}

func (m *PceLspBag) GetDestinationAddress() string {
	if m != nil {
		return m.DestinationAddress
	}
	return ""
}

func (m *PceLspBag) GetSymbolicNameXr() string {
	if m != nil {
		return m.SymbolicNameXr
	}
	return ""
}

func (m *PceLspBag) GetSessionInternalLspId() uint32 {
	if m != nil {
		return m.SessionInternalLspId
	}
	return 0
}

func (m *PceLspBag) GetStatefulRequestParameterId() uint32 {
	if m != nil {
		return m.StatefulRequestParameterId
	}
	return 0
}

func (m *PceLspBag) GetRequestQueueSize() uint32 {
	if m != nil {
		return m.RequestQueueSize
	}
	return 0
}

func (m *PceLspBag) GetCreator() *PceLspPeerBag {
	if m != nil {
		return m.Creator
	}
	return nil
}

func (m *PceLspBag) GetDelegated() *PceLspPeerBag {
	if m != nil {
		return m.Delegated
	}
	return nil
}

func (m *PceLspBag) GetDelegatable() bool {
	if m != nil {
		return m.Delegatable
	}
	return false
}

func (m *PceLspBag) GetOperational() string {
	if m != nil {
		return m.Operational
	}
	return ""
}

func (m *PceLspBag) GetAdministrative() bool {
	if m != nil {
		return m.Administrative
	}
	return false
}

func (m *PceLspBag) GetCleanupTimerExp() int32 {
	if m != nil {
		return m.CleanupTimerExp
	}
	return 0
}

func (m *PceLspBag) GetDelegationTimerExp() int32 {
	if m != nil {
		return m.DelegationTimerExp
	}
	return 0
}

func (m *PceLspBag) GetCreate() bool {
	if m != nil {
		return m.Create
	}
	return false
}

func (m *PceLspBag) GetStateTimerExp() int32 {
	if m != nil {
		return m.StateTimerExp
	}
	return 0
}

func (m *PceLspBag) GetLspoIsUsed() bool {
	if m != nil {
		return m.LspoIsUsed
	}
	return false
}

func (m *PceLspBag) GetIdentifiers() *PceLspIdentifiersBag {
	if m != nil {
		return m.Identifiers
	}
	return nil
}

func (m *PceLspBag) GetPaths() []*PceLspPathBag {
	if m != nil {
		return m.Paths
	}
	return nil
}

func (m *PceLspBag) GetForwardClassId() uint32 {
	if m != nil {
		return m.ForwardClassId
	}
	return 0
}

func (m *PceLspBag) GetLoadShare() uint32 {
	if m != nil {
		return m.LoadShare
	}
	return 0
}

func (m *PceLspBag) GetAutoroute() *PceLspAutorouteBag {
	if m != nil {
		return m.Autoroute
	}
	return nil
}

func (m *PceLspBag) GetBackupPath() []string {
	if m != nil {
		return m.BackupPath
	}
	return nil
}

func (m *PceLspBag) GetPathSetupType() uint32 {
	if m != nil {
		return m.PathSetupType
	}
	return 0
}

func (m *PceLspBag) GetBindingSid() uint32 {
	if m != nil {
		return m.BindingSid
	}
	return 0
}

func init() {
	proto.RegisterType((*PceLspBag_KEYS)(nil), "cisco_ios_xr_mpls_te_oper.mpls_pce_stdby.lsps.lsp.pce_lsp_bag_KEYS")
	proto.RegisterType((*PceLspPeerBag)(nil), "cisco_ios_xr_mpls_te_oper.mpls_pce_stdby.lsps.lsp.pce_lsp_peer_bag")
	proto.RegisterType((*PceLspIdentifiersBag)(nil), "cisco_ios_xr_mpls_te_oper.mpls_pce_stdby.lsps.lsp.pce_lsp_identifiers_bag")
	proto.RegisterType((*PceLspRouteHopBag)(nil), "cisco_ios_xr_mpls_te_oper.mpls_pce_stdby.lsps.lsp.pce_lsp_route_hop_bag")
	proto.RegisterType((*PceLspRouteBag)(nil), "cisco_ios_xr_mpls_te_oper.mpls_pce_stdby.lsps.lsp.pce_lsp_route_bag")
	proto.RegisterType((*PceLspLspaBag)(nil), "cisco_ios_xr_mpls_te_oper.mpls_pce_stdby.lsps.lsp.pce_lsp_lspa_bag")
	proto.RegisterType((*PceLspMetricBag)(nil), "cisco_ios_xr_mpls_te_oper.mpls_pce_stdby.lsps.lsp.pce_lsp_metric_bag")
	proto.RegisterType((*PceLspPathBag)(nil), "cisco_ios_xr_mpls_te_oper.mpls_pce_stdby.lsps.lsp.pce_lsp_path_bag")
	proto.RegisterType((*PceLspAutorouteBag)(nil), "cisco_ios_xr_mpls_te_oper.mpls_pce_stdby.lsps.lsp.pce_lsp_autoroute_bag")
	proto.RegisterType((*PceLspBag)(nil), "cisco_ios_xr_mpls_te_oper.mpls_pce_stdby.lsps.lsp.pce_lsp_bag")
}

func init() { proto.RegisterFile("pce_lsp_bag.proto", fileDescriptor_4fee011f6fc7b995) }

var fileDescriptor_4fee011f6fc7b995 = []byte{
	// 1428 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x57, 0x6d, 0x73, 0x14, 0xc7,
	0x11, 0xae, 0x43, 0x6f, 0x77, 0x7d, 0x3a, 0xbd, 0x4c, 0x40, 0x5a, 0x08, 0x54, 0x94, 0x4b, 0x05,
	0x54, 0x49, 0x4a, 0x09, 0x02, 0x42, 0x48, 0x88, 0x6d, 0x09, 0x64, 0x73, 0x36, 0xa6, 0xf0, 0x0a,
	0xb0, 0xf9, 0x40, 0x4d, 0xcd, 0xed, 0xb6, 0xa4, 0xc1, 0x73, 0xbb, 0xcb, 0xcc, 0xac, 0xee, 0x8e,
	0x7f, 0xe0, 0x5f, 0xe2, 0xf2, 0x3f, 0xf0, 0x67, 0xfb, 0x9b, 0x7f, 0x95, 0x6b, 0x7a, 0x66, 0x6f,
	0x17, 0x8a, 0xa2, 0xec, 0x12, 0x5f, 0x54, 0x37, 0x4f, 0x77, 0x3f, 0xdb, 0x3d, 0xfd, 0x32, 0x2d,
	0x58, 0x2f, 0x12, 0xe4, 0xca, 0x14, 0x7c, 0x28, 0x8e, 0x77, 0x0a, 0x9d, 0xdb, 0x9c, 0x5d, 0x4f,
	0xa4, 0x49, 0x72, 0x2e, 0x73, 0xc3, 0x27, 0x9a, 0x8f, 0x0a, 0x65, 0xb8, 0x45, 0x9e, 0x17, 0xa8,
	0x77, 0xe8, 0xe0, 0x2c, 0x8c, 0x4d, 0x87, 0xd3, 0x1d, 0x65, 0x0a, 0xe3, 0xfe, 0xf4, 0x6f, 0xc3,
	0x5a, 0x83, 0x87, 0x7f, 0x71, 0xf0, 0xfc, 0x90, 0xfd, 0x05, 0x7a, 0x66, 0x3a, 0x1a, 0xe6, 0x4a,
	0x26, 0x3c, 0x13, 0x23, 0x8c, 0x5a, 0x5b, 0xad, 0xed, 0x4e, 0xbc, 0x5c, 0x81, 0x8f, 0xc4, 0x08,
	0xfb, 0x4f, 0x6b, 0xc3, 0x02, 0x51, 0x3b, 0x6b, 0x76, 0x0d, 0x56, 0xb3, 0x3c, 0x45, 0x2e, 0x53,
	0xcc, 0xac, 0x3c, 0x92, 0xa8, 0x83, 0xe9, 0x8a, 0x83, 0x07, 0x33, 0x94, 0x45, 0xb0, 0x24, 0xd2,
	0x54, 0xa3, 0x31, 0xd1, 0x39, 0x52, 0xa8, 0x8e, 0xfd, 0xef, 0x5b, 0xb0, 0x59, 0xf1, 0xd6, 0x34,
	0x86, 0xe8, 0x37, 0x61, 0x49, 0x1a, 0x5e, 0x1a, 0x4c, 0x89, 0xb6, 0x1d, 0x2f, 0x4a, 0xf3, 0xd4,
	0x60, 0xca, 0x36, 0x60, 0xd1, 0x60, 0x96, 0xa2, 0x0e, 0x6c, 0xe1, 0xc4, 0x2e, 0x41, 0xc7, 0x56,
	0x54, 0xd1, 0xdc, 0x56, 0x6b, 0xbb, 0x17, 0x2f, 0x59, 0x7c, 0x68, 0x8a, 0x41, 0xca, 0xfe, 0x08,
	0x1d, 0x5b, 0x66, 0x19, 0x2a, 0x27, 0x9b, 0x27, 0x59, 0xdb, 0x03, 0x83, 0x94, 0xf5, 0xa1, 0x87,
	0x13, 0xcb, 0x6b, 0x85, 0x05, 0x52, 0xe8, 0xe2, 0xc4, 0x3e, 0x09, 0x3a, 0xfd, 0x9f, 0x17, 0xe0,
	0x42, 0xe5, 0xa9, 0xce, 0x4b, 0x8b, 0xfc, 0x24, 0xa7, 0x4b, 0x64, 0x7f, 0x82, 0xae, 0x29, 0x87,
	0xf9, 0xf0, 0x25, 0xb7, 0xd3, 0xc2, 0xdf, 0x5e, 0x2f, 0x06, 0x0f, 0x3d, 0x99, 0x16, 0xc8, 0xfe,
	0x0c, 0xcb, 0xb2, 0x38, 0xbd, 0xc9, 0xdf, 0xbc, 0x83, 0xae, 0xc3, 0xf6, 0x3c, 0xc4, 0xae, 0xc2,
	0x2a, 0xa9, 0x14, 0x1a, 0x8f, 0xe4, 0x84, 0x2b, 0xcc, 0x42, 0x00, 0x3d, 0x07, 0x3f, 0x26, 0xf4,
	0x21, 0x66, 0x14, 0xba, 0xd5, 0x32, 0xb1, 0x14, 0x43, 0x3b, 0x0e, 0x27, 0x87, 0x1f, 0xab, 0x7c,
	0x28, 0x14, 0xb9, 0xde, 0x8e, 0xc3, 0x89, 0x5d, 0x01, 0xa0, 0x52, 0x50, 0x62, 0x88, 0x2a, 0x5a,
	0x24, 0xca, 0x8e, 0x43, 0x1e, 0x3a, 0xc0, 0x7d, 0xd6, 0xe0, 0xf1, 0x08, 0x33, 0xcb, 0x65, 0xea,
	0xdd, 0x5f, 0x22, 0xe7, 0x7a, 0x01, 0x1e, 0xa4, 0x14, 0xc1, 0x75, 0xb8, 0x90, 0x67, 0x6a, 0xca,
	0x4f, 0x85, 0x92, 0x29, 0x6f, 0x30, 0xb6, 0xe9, 0x6b, 0xcc, 0x09, 0x9f, 0x39, 0xd9, 0x97, 0x33,
	0xea, 0x3b, 0x70, 0x31, 0xc9, 0x47, 0x85, 0x42, 0x8b, 0x0d, 0x03, 0x8e, 0x99, 0xd5, 0xd3, 0xa8,
	0x43, 0x66, 0x1b, 0x95, 0xc2, 0xcc, 0xea, 0xc0, 0x49, 0xd9, 0x3f, 0x80, 0x8d, 0xa4, 0x31, 0x32,
	0x3b, 0xe6, 0xb5, 0x77, 0x11, 0x90, 0xcd, 0x5a, 0x90, 0x1c, 0x56, 0xfe, 0xb1, 0xdb, 0x10, 0x55,
	0xda, 0x54, 0x8d, 0x22, 0x7d, 0x99, 0x60, 0x96, 0x4c, 0x9d, 0x4d, 0x97, 0x6c, 0x2e, 0x04, 0xf9,
	0xa3, 0x3c, 0xc5, 0xbd, 0x20, 0x1d, 0xa4, 0xec, 0x6f, 0xb0, 0xde, 0x08, 0x1e, 0x27, 0xd2, 0x58,
	0x13, 0x2d, 0x93, 0xc5, 0xea, 0x2c, 0xfc, 0x03, 0x82, 0xd9, 0x36, 0xac, 0x35, 0x74, 0x4f, 0x85,
	0x2a, 0x31, 0xea, 0xd1, 0x6d, 0xae, 0xcc, 0x54, 0x9f, 0x39, 0xd4, 0xb9, 0x53, 0xb9, 0x21, 0x2a,
	0x3f, 0x2a, 0xf2, 0x15, 0xef, 0x4e, 0xe6, 0xfd, 0x10, 0xc1, 0x91, 0xf0, 0x89, 0x4d, 0x58, 0x0a,
	0xdd, 0x14, 0xad, 0xfa, 0xb2, 0xf6, 0x5d, 0xe4, 0xfa, 0x53, 0xe5, 0x89, 0x50, 0xb3, 0xfa, 0x59,
	0xf3, 0xfd, 0x49, 0x60, 0x55, 0x40, 0x7f, 0x85, 0x15, 0x8d, 0xa3, 0xdc, 0xe2, 0x4c, 0x6b, 0xdd,
	0x27, 0xd2, 0xa3, 0x41, 0xad, 0xff, 0x53, 0xab, 0x1e, 0x24, 0xbe, 0x8a, 0xdf, 0xdb, 0x69, 0x0c,
	0xe6, 0x93, 0xdc, 0x58, 0xaa, 0xd8, 0x5e, 0x4c, 0xbf, 0x9b, 0xcd, 0x3c, 0xb7, 0x35, 0xd7, 0x68,
	0x66, 0x76, 0x04, 0x1d, 0x5f, 0xf5, 0x48, 0xf5, 0x39, 0xb7, 0xdd, 0xdd, 0x7d, 0xb0, 0xf3, 0xbb,
	0x67, 0xd4, 0xce, 0x3b, 0xbb, 0x2c, 0xae, 0xa9, 0xfb, 0xbf, 0xb4, 0xea, 0x61, 0xa4, 0x4c, 0x21,
	0xde, 0x1f, 0xc3, 0x15, 0x00, 0x9c, 0xa8, 0xd2, 0xa5, 0x24, 0x9b, 0x86, 0x48, 0x3a, 0x1e, 0xd9,
	0xcb, 0xa6, 0xae, 0x7b, 0x65, 0x96, 0xcc, 0xe4, 0xbe, 0xeb, 0x20, 0x40, 0x6f, 0x2b, 0x28, 0x15,
	0x66, 0xc7, 0x4c, 0x41, 0x29, 0x76, 0x1e, 0x16, 0x0c, 0xda, 0xb2, 0x08, 0x53, 0xc3, 0x1f, 0xdc,
	0xd5, 0x9d, 0xe4, 0x2a, 0x0d, 0x3d, 0x47, 0xbf, 0x1d, 0xa6, 0x86, 0xd2, 0x52, 0x8f, 0xb5, 0x63,
	0xfa, 0xdd, 0xbf, 0x0b, 0xac, 0x8a, 0x65, 0x84, 0xae, 0x99, 0x29, 0x1a, 0x06, 0xf3, 0x8d, 0x61,
	0x42, 0xbf, 0xdf, 0x95, 0x8c, 0xfe, 0x8f, 0xf3, 0x8d, 0xb9, 0x2c, 0xec, 0x09, 0x19, 0x3f, 0x83,
	0x39, 0xd4, 0x39, 0xd9, 0x76, 0x77, 0xef, 0x9f, 0x39, 0x03, 0xee, 0xf6, 0x1d, 0x21, 0xfb, 0x1a,
	0xe6, 0xdd, 0x75, 0x93, 0x03, 0xdd, 0xdd, 0x7b, 0x67, 0x20, 0xae, 0xb2, 0x16, 0x13, 0xa1, 0x73,
	0x58, 0xeb, 0x9c, 0xee, 0xfe, 0x83, 0x39, 0xac, 0x75, 0xce, 0x56, 0xe0, 0xdc, 0x70, 0x1c, 0x32,
	0x76, 0x6e, 0x38, 0x66, 0x97, 0x01, 0xa4, 0xe1, 0xc3, 0xb1, 0x2f, 0x13, 0x3f, 0x29, 0xdb, 0xd2,
	0xec, 0x8f, 0xa9, 0x50, 0x2e, 0x42, 0x5b, 0x63, 0x5e, 0x58, 0x3e, 0x1c, 0x87, 0xac, 0x2d, 0xd1,
	0x79, 0x7f, 0xcc, 0xae, 0xc1, 0x9a, 0x34, 0xbc, 0x92, 0x7a, 0x73, 0x9f, 0xc4, 0x9e, 0x34, 0xb1,
	0x57, 0xaa, 0x8a, 0x4d, 0x14, 0x85, 0x92, 0x98, 0x3a, 0x96, 0xb6, 0x2f, 0xb6, 0x80, 0xec, 0x8f,
	0xd9, 0xdf, 0x81, 0x49, 0xc3, 0x6b, 0x0d, 0xcf, 0xe4, 0xa7, 0xe1, 0xaa, 0x34, 0x7b, 0x95, 0x22,
	0x71, 0xbd, 0x80, 0x45, 0x5f, 0x11, 0x11, 0x50, 0x2f, 0x1d, 0x9c, 0xe1, 0x62, 0xea, 0xd2, 0x8a,
	0x03, 0x69, 0xff, 0x87, 0x56, 0xfd, 0xa0, 0x89, 0xd2, 0xe6, 0xbf, 0x61, 0x1c, 0x5c, 0x86, 0x8e,
	0xc8, 0xb2, 0xbc, 0xcc, 0x12, 0x4c, 0xa9, 0x0a, 0xda, 0x71, 0x0d, 0xb8, 0x46, 0x09, 0x9f, 0xa1,
	0xd2, 0x9d, 0xa3, 0xf9, 0x03, 0x1e, 0xa2, 0x57, 0x64, 0x63, 0x16, 0x90, 0x4f, 0x49, 0x38, 0xb1,
	0x2d, 0xe8, 0xa6, 0x68, 0xac, 0xcc, 0x84, 0x95, 0x79, 0x16, 0x2d, 0xd0, 0x54, 0x69, 0x42, 0xfd,
	0xef, 0x00, 0xba, 0x8d, 0xbd, 0xc5, 0x4d, 0x3b, 0x93, 0x97, 0x3a, 0xa9, 0xa7, 0xdd, 0x6e, 0x78,
	0xb6, 0x08, 0xad, 0x86, 0xe2, 0x3f, 0xe1, 0x0f, 0x0d, 0x96, 0x99, 0xee, 0x0d, 0xd2, 0x65, 0x0d,
	0x51, 0x65, 0xe0, 0xc6, 0x7c, 0x73, 0x15, 0xe2, 0x13, 0x1d, 0xdd, 0xf4, 0x2b, 0x4d, 0x73, 0x1b,
	0xfa, 0x46, 0xb3, 0x5b, 0xb0, 0x69, 0xd0, 0x18, 0x47, 0x2b, 0x33, 0x8b, 0x3a, 0x13, 0xaa, 0xda,
	0x3c, 0x6e, 0x51, 0x70, 0xe7, 0x83, 0x78, 0x10, 0xa4, 0x7e, 0x0d, 0xd9, 0x83, 0x2b, 0xc6, 0x0a,
	0x8b, 0x47, 0xa5, 0xe2, 0x1a, 0x5f, 0x95, 0x68, 0x2c, 0x2f, 0x84, 0x16, 0x23, 0xb4, 0xa8, 0x9d,
	0xf1, 0xbf, 0xc9, 0xf8, 0x52, 0xa5, 0x14, 0x7b, 0x9d, 0xc7, 0x95, 0xca, 0x20, 0x75, 0xaf, 0x63,
	0x65, 0xf9, 0xaa, 0xc4, 0x12, 0xb9, 0x91, 0xaf, 0x31, 0xba, 0x4d, 0x76, 0x6b, 0x41, 0xf2, 0x95,
	0x13, 0x1c, 0xca, 0xd7, 0xc8, 0x5e, 0xc0, 0x52, 0xa2, 0x51, 0xd8, 0x5c, 0x47, 0xff, 0x39, 0x73,
	0xdb, 0x56, 0x9b, 0x5f, 0x5c, 0x71, 0x32, 0x01, 0x9d, 0x14, 0x15, 0x1e, 0x0b, 0x8b, 0x69, 0x74,
	0xe7, 0xc3, 0x7d, 0xa0, 0x66, 0xf5, 0xd5, 0x41, 0x07, 0x31, 0x54, 0x18, 0xfd, 0x97, 0xca, 0xae,
	0x09, 0x39, 0x0d, 0xc7, 0x4e, 0x99, 0x14, 0x2a, 0xfa, 0x9f, 0x5f, 0xaf, 0x1a, 0x10, 0xbb, 0x0a,
	0x2b, 0x22, 0x1d, 0xc9, 0x4c, 0x1a, 0xeb, 0xb0, 0x53, 0x8c, 0xee, 0x12, 0xcd, 0x5b, 0xa8, 0x5b,
	0x09, 0x12, 0x85, 0x22, 0x2b, 0x0b, 0x6e, 0xe5, 0x08, 0x35, 0xc7, 0x49, 0x11, 0xfd, 0x7f, 0xab,
	0xb5, 0xbd, 0x1e, 0xaf, 0x06, 0xc1, 0x13, 0x87, 0x1f, 0x4c, 0x0a, 0xf6, 0x2f, 0x38, 0x1f, 0x9c,
	0x70, 0x45, 0x50, 0xab, 0x7f, 0x44, 0xea, 0xac, 0x96, 0xcd, 0x2c, 0x36, 0x60, 0x91, 0xee, 0x0d,
	0xa3, 0x8f, 0x7d, 0x5b, 0xf9, 0x13, 0x6d, 0x61, 0x2e, 0xdf, 0x0d, 0x92, 0x4f, 0x88, 0xa4, 0x47,
	0xf0, 0xcc, 0x7e, 0x0b, 0x96, 0x95, 0x29, 0x72, 0x5e, 0x35, 0xe7, 0x1e, 0xb1, 0x80, 0xc3, 0x06,
	0xbe, 0x41, 0x15, 0x74, 0x1b, 0x5b, 0x74, 0xb4, 0x4f, 0x09, 0xf9, 0xfc, 0x0c, 0x09, 0x79, 0x6b,
	0x27, 0x8f, 0x9b, 0xf4, 0xec, 0x39, 0x2c, 0xb8, 0x37, 0xc7, 0x44, 0xf7, 0x68, 0x3e, 0x9d, 0x29,
	0xf1, 0xe1, 0xed, 0x8a, 0x3d, 0xa3, 0x6b, 0xc4, 0xa3, 0x5c, 0x8f, 0x85, 0x4e, 0x79, 0xa2, 0x84,
	0x31, 0xae, 0x35, 0xee, 0xfb, 0x7d, 0x2b, 0xe0, 0xf7, 0x1c, 0x3c, 0xa0, 0x89, 0xab, 0x72, 0x91,
	0x72, 0x73, 0x22, 0x34, 0x46, 0x07, 0x7e, 0xe2, 0x3a, 0xe4, 0xd0, 0x01, 0x6e, 0x27, 0x99, 0x0d,
	0xb7, 0xe8, 0x53, 0xba, 0x8f, 0xb3, 0xec, 0x24, 0x6f, 0x0c, 0xca, 0xb8, 0xa6, 0x76, 0xc3, 0x6f,
	0x28, 0x92, 0x6f, 0x4b, 0x1f, 0x4a, 0xf4, 0x19, 0xcd, 0x30, 0xf0, 0xd0, 0x63, 0x61, 0x4f, 0x5c,
	0x92, 0x29, 0x48, 0xda, 0x0e, 0xfc, 0x84, 0x7c, 0xe0, 0x37, 0x7c, 0x07, 0x1f, 0x3a, 0x94, 0x86,
	0xa4, 0x23, 0x92, 0x59, 0x4a, 0xcb, 0xaf, 0x4c, 0xa3, 0x81, 0x5f, 0x37, 0x02, 0x74, 0x28, 0xd3,
	0xe1, 0x22, 0xfd, 0xf3, 0x77, 0xe3, 0xd7, 0x00, 0x00, 0x00, 0xff, 0xff, 0x9a, 0xbd, 0x2f, 0x16,
	0x11, 0x0e, 0x00, 0x00,
}
