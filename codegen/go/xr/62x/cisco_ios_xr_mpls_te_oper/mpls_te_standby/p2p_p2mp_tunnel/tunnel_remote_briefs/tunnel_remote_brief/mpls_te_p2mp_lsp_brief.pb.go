/*
Copyright 2019 Cisco Systems

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: mpls_te_p2mp_lsp_brief.proto

package cisco_ios_xr_mpls_te_oper_mpls_te_standby_p2p_p2mp_tunnel_tunnel_remote_briefs_tunnel_remote_brief

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type MplsTeP2MpLspBrief_KEYS struct {
	LspId                uint32   `protobuf:"varint,1,opt,name=lsp_id,json=lspId,proto3" json:"lsp_id,omitempty"`
	TunnelId             uint32   `protobuf:"varint,2,opt,name=tunnel_id,json=tunnelId,proto3" json:"tunnel_id,omitempty"`
	ExtendedTunnelId     string   `protobuf:"bytes,3,opt,name=extended_tunnel_id,json=extendedTunnelId,proto3" json:"extended_tunnel_id,omitempty"`
	SourceAddress        string   `protobuf:"bytes,4,opt,name=source_address,json=sourceAddress,proto3" json:"source_address,omitempty"`
	Ctype                string   `protobuf:"bytes,5,opt,name=ctype,proto3" json:"ctype,omitempty"`
	DestinationAddress   string   `protobuf:"bytes,6,opt,name=destination_address,json=destinationAddress,proto3" json:"destination_address,omitempty"`
	P2MpId               uint32   `protobuf:"varint,7,opt,name=p2mp_id,json=p2mpId,proto3" json:"p2mp_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MplsTeP2MpLspBrief_KEYS) Reset()         { *m = MplsTeP2MpLspBrief_KEYS{} }
func (m *MplsTeP2MpLspBrief_KEYS) String() string { return proto.CompactTextString(m) }
func (*MplsTeP2MpLspBrief_KEYS) ProtoMessage()    {}
func (*MplsTeP2MpLspBrief_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_50404da36924278b, []int{0}
}

func (m *MplsTeP2MpLspBrief_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MplsTeP2MpLspBrief_KEYS.Unmarshal(m, b)
}
func (m *MplsTeP2MpLspBrief_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MplsTeP2MpLspBrief_KEYS.Marshal(b, m, deterministic)
}
func (m *MplsTeP2MpLspBrief_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MplsTeP2MpLspBrief_KEYS.Merge(m, src)
}
func (m *MplsTeP2MpLspBrief_KEYS) XXX_Size() int {
	return xxx_messageInfo_MplsTeP2MpLspBrief_KEYS.Size(m)
}
func (m *MplsTeP2MpLspBrief_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_MplsTeP2MpLspBrief_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_MplsTeP2MpLspBrief_KEYS proto.InternalMessageInfo

func (m *MplsTeP2MpLspBrief_KEYS) GetLspId() uint32 {
	if m != nil {
		return m.LspId
	}
	return 0
}

func (m *MplsTeP2MpLspBrief_KEYS) GetTunnelId() uint32 {
	if m != nil {
		return m.TunnelId
	}
	return 0
}

func (m *MplsTeP2MpLspBrief_KEYS) GetExtendedTunnelId() string {
	if m != nil {
		return m.ExtendedTunnelId
	}
	return ""
}

func (m *MplsTeP2MpLspBrief_KEYS) GetSourceAddress() string {
	if m != nil {
		return m.SourceAddress
	}
	return ""
}

func (m *MplsTeP2MpLspBrief_KEYS) GetCtype() string {
	if m != nil {
		return m.Ctype
	}
	return ""
}

func (m *MplsTeP2MpLspBrief_KEYS) GetDestinationAddress() string {
	if m != nil {
		return m.DestinationAddress
	}
	return ""
}

func (m *MplsTeP2MpLspBrief_KEYS) GetP2MpId() uint32 {
	if m != nil {
		return m.P2MpId
	}
	return 0
}

type TeLspFecCtypeDataT struct {
	FecCtype             string   `protobuf:"bytes,1,opt,name=fec_ctype,json=fecCtype,proto3" json:"fec_ctype,omitempty"`
	P2PLspDestination    string   `protobuf:"bytes,2,opt,name=p2p_lsp_destination,json=p2pLspDestination,proto3" json:"p2p_lsp_destination,omitempty"`
	FecDestinationP2MpId uint32   `protobuf:"varint,3,opt,name=fec_destination_p2mp_id,json=fecDestinationP2mpId,proto3" json:"fec_destination_p2mp_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TeLspFecCtypeDataT) Reset()         { *m = TeLspFecCtypeDataT{} }
func (m *TeLspFecCtypeDataT) String() string { return proto.CompactTextString(m) }
func (*TeLspFecCtypeDataT) ProtoMessage()    {}
func (*TeLspFecCtypeDataT) Descriptor() ([]byte, []int) {
	return fileDescriptor_50404da36924278b, []int{1}
}

func (m *TeLspFecCtypeDataT) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TeLspFecCtypeDataT.Unmarshal(m, b)
}
func (m *TeLspFecCtypeDataT) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TeLspFecCtypeDataT.Marshal(b, m, deterministic)
}
func (m *TeLspFecCtypeDataT) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeLspFecCtypeDataT.Merge(m, src)
}
func (m *TeLspFecCtypeDataT) XXX_Size() int {
	return xxx_messageInfo_TeLspFecCtypeDataT.Size(m)
}
func (m *TeLspFecCtypeDataT) XXX_DiscardUnknown() {
	xxx_messageInfo_TeLspFecCtypeDataT.DiscardUnknown(m)
}

var xxx_messageInfo_TeLspFecCtypeDataT proto.InternalMessageInfo

func (m *TeLspFecCtypeDataT) GetFecCtype() string {
	if m != nil {
		return m.FecCtype
	}
	return ""
}

func (m *TeLspFecCtypeDataT) GetP2PLspDestination() string {
	if m != nil {
		return m.P2PLspDestination
	}
	return ""
}

func (m *TeLspFecCtypeDataT) GetFecDestinationP2MpId() uint32 {
	if m != nil {
		return m.FecDestinationP2MpId
	}
	return 0
}

type TeLspFecT struct {
	FecLspId             uint32              `protobuf:"varint,1,opt,name=fec_lsp_id,json=fecLspId,proto3" json:"fec_lsp_id,omitempty"`
	FecTunnelId          uint32              `protobuf:"varint,2,opt,name=fec_tunnel_id,json=fecTunnelId,proto3" json:"fec_tunnel_id,omitempty"`
	FecExtendedTunnelId  string              `protobuf:"bytes,3,opt,name=fec_extended_tunnel_id,json=fecExtendedTunnelId,proto3" json:"fec_extended_tunnel_id,omitempty"`
	FecSource            string              `protobuf:"bytes,4,opt,name=fec_source,json=fecSource,proto3" json:"fec_source,omitempty"`
	FecDestinationInfo   *TeLspFecCtypeDataT `protobuf:"bytes,5,opt,name=fec_destination_info,json=fecDestinationInfo,proto3" json:"fec_destination_info,omitempty"`
	FecVrf               string              `protobuf:"bytes,6,opt,name=fec_vrf,json=fecVrf,proto3" json:"fec_vrf,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *TeLspFecT) Reset()         { *m = TeLspFecT{} }
func (m *TeLspFecT) String() string { return proto.CompactTextString(m) }
func (*TeLspFecT) ProtoMessage()    {}
func (*TeLspFecT) Descriptor() ([]byte, []int) {
	return fileDescriptor_50404da36924278b, []int{2}
}

func (m *TeLspFecT) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TeLspFecT.Unmarshal(m, b)
}
func (m *TeLspFecT) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TeLspFecT.Marshal(b, m, deterministic)
}
func (m *TeLspFecT) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeLspFecT.Merge(m, src)
}
func (m *TeLspFecT) XXX_Size() int {
	return xxx_messageInfo_TeLspFecT.Size(m)
}
func (m *TeLspFecT) XXX_DiscardUnknown() {
	xxx_messageInfo_TeLspFecT.DiscardUnknown(m)
}

var xxx_messageInfo_TeLspFecT proto.InternalMessageInfo

func (m *TeLspFecT) GetFecLspId() uint32 {
	if m != nil {
		return m.FecLspId
	}
	return 0
}

func (m *TeLspFecT) GetFecTunnelId() uint32 {
	if m != nil {
		return m.FecTunnelId
	}
	return 0
}

func (m *TeLspFecT) GetFecExtendedTunnelId() string {
	if m != nil {
		return m.FecExtendedTunnelId
	}
	return ""
}

func (m *TeLspFecT) GetFecSource() string {
	if m != nil {
		return m.FecSource
	}
	return ""
}

func (m *TeLspFecT) GetFecDestinationInfo() *TeLspFecCtypeDataT {
	if m != nil {
		return m.FecDestinationInfo
	}
	return nil
}

func (m *TeLspFecT) GetFecVrf() string {
	if m != nil {
		return m.FecVrf
	}
	return ""
}

type TeS2LFecT struct {
	S2LFecSubgroupId         uint32   `protobuf:"varint,1,opt,name=s2l_fec_subgroup_id,json=s2lFecSubgroupId,proto3" json:"s2l_fec_subgroup_id,omitempty"`
	S2LFecLspId              uint32   `protobuf:"varint,2,opt,name=s2l_fec_lsp_id,json=s2lFecLspId,proto3" json:"s2l_fec_lsp_id,omitempty"`
	S2LFecTunnelId           uint32   `protobuf:"varint,3,opt,name=s2l_fec_tunnel_id,json=s2lFecTunnelId,proto3" json:"s2l_fec_tunnel_id,omitempty"`
	S2LFecExtendedTunnelId   string   `protobuf:"bytes,4,opt,name=s2l_fec_extended_tunnel_id,json=s2lFecExtendedTunnelId,proto3" json:"s2l_fec_extended_tunnel_id,omitempty"`
	S2LFecSource             string   `protobuf:"bytes,5,opt,name=s2l_fec_source,json=s2lFecSource,proto3" json:"s2l_fec_source,omitempty"`
	S2LFecDest               string   `protobuf:"bytes,6,opt,name=s2l_fec_dest,json=s2lFecDest,proto3" json:"s2l_fec_dest,omitempty"`
	S2LFecP2MpId             uint32   `protobuf:"varint,7,opt,name=s2l_fec_p2mp_id,json=s2lFecP2mpId,proto3" json:"s2l_fec_p2mp_id,omitempty"`
	S2LFecSubgroupOriginator string   `protobuf:"bytes,8,opt,name=s2l_fec_subgroup_originator,json=s2lFecSubgroupOriginator,proto3" json:"s2l_fec_subgroup_originator,omitempty"`
	S2LFecCtype              string   `protobuf:"bytes,9,opt,name=s2l_fec_ctype,json=s2lFecCtype,proto3" json:"s2l_fec_ctype,omitempty"`
	S2LFecVrf                string   `protobuf:"bytes,10,opt,name=s2l_fec_vrf,json=s2lFecVrf,proto3" json:"s2l_fec_vrf,omitempty"`
	XXX_NoUnkeyedLiteral     struct{} `json:"-"`
	XXX_unrecognized         []byte   `json:"-"`
	XXX_sizecache            int32    `json:"-"`
}

func (m *TeS2LFecT) Reset()         { *m = TeS2LFecT{} }
func (m *TeS2LFecT) String() string { return proto.CompactTextString(m) }
func (*TeS2LFecT) ProtoMessage()    {}
func (*TeS2LFecT) Descriptor() ([]byte, []int) {
	return fileDescriptor_50404da36924278b, []int{3}
}

func (m *TeS2LFecT) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TeS2LFecT.Unmarshal(m, b)
}
func (m *TeS2LFecT) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TeS2LFecT.Marshal(b, m, deterministic)
}
func (m *TeS2LFecT) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeS2LFecT.Merge(m, src)
}
func (m *TeS2LFecT) XXX_Size() int {
	return xxx_messageInfo_TeS2LFecT.Size(m)
}
func (m *TeS2LFecT) XXX_DiscardUnknown() {
	xxx_messageInfo_TeS2LFecT.DiscardUnknown(m)
}

var xxx_messageInfo_TeS2LFecT proto.InternalMessageInfo

func (m *TeS2LFecT) GetS2LFecSubgroupId() uint32 {
	if m != nil {
		return m.S2LFecSubgroupId
	}
	return 0
}

func (m *TeS2LFecT) GetS2LFecLspId() uint32 {
	if m != nil {
		return m.S2LFecLspId
	}
	return 0
}

func (m *TeS2LFecT) GetS2LFecTunnelId() uint32 {
	if m != nil {
		return m.S2LFecTunnelId
	}
	return 0
}

func (m *TeS2LFecT) GetS2LFecExtendedTunnelId() string {
	if m != nil {
		return m.S2LFecExtendedTunnelId
	}
	return ""
}

func (m *TeS2LFecT) GetS2LFecSource() string {
	if m != nil {
		return m.S2LFecSource
	}
	return ""
}

func (m *TeS2LFecT) GetS2LFecDest() string {
	if m != nil {
		return m.S2LFecDest
	}
	return ""
}

func (m *TeS2LFecT) GetS2LFecP2MpId() uint32 {
	if m != nil {
		return m.S2LFecP2MpId
	}
	return 0
}

func (m *TeS2LFecT) GetS2LFecSubgroupOriginator() string {
	if m != nil {
		return m.S2LFecSubgroupOriginator
	}
	return ""
}

func (m *TeS2LFecT) GetS2LFecCtype() string {
	if m != nil {
		return m.S2LFecCtype
	}
	return ""
}

func (m *TeS2LFecT) GetS2LFecVrf() string {
	if m != nil {
		return m.S2LFecVrf
	}
	return ""
}

type MplsTeP2MpS2LBrief struct {
	S2LFec               *TeS2LFecT `protobuf:"bytes,1,opt,name=s2l_fec,json=s2lFec,proto3" json:"s2l_fec,omitempty"`
	Uptime               uint32     `protobuf:"varint,2,opt,name=uptime,proto3" json:"uptime,omitempty"`
	EgressInterface      string     `protobuf:"bytes,3,opt,name=egress_interface,json=egressInterface,proto3" json:"egress_interface,omitempty"`
	IngressInterface     string     `protobuf:"bytes,4,opt,name=ingress_interface,json=ingressInterface,proto3" json:"ingress_interface,omitempty"`
	Role                 string     `protobuf:"bytes,5,opt,name=role,proto3" json:"role,omitempty"`
	OperState            bool       `protobuf:"varint,6,opt,name=oper_state,json=operState,proto3" json:"oper_state,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *MplsTeP2MpS2LBrief) Reset()         { *m = MplsTeP2MpS2LBrief{} }
func (m *MplsTeP2MpS2LBrief) String() string { return proto.CompactTextString(m) }
func (*MplsTeP2MpS2LBrief) ProtoMessage()    {}
func (*MplsTeP2MpS2LBrief) Descriptor() ([]byte, []int) {
	return fileDescriptor_50404da36924278b, []int{4}
}

func (m *MplsTeP2MpS2LBrief) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MplsTeP2MpS2LBrief.Unmarshal(m, b)
}
func (m *MplsTeP2MpS2LBrief) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MplsTeP2MpS2LBrief.Marshal(b, m, deterministic)
}
func (m *MplsTeP2MpS2LBrief) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MplsTeP2MpS2LBrief.Merge(m, src)
}
func (m *MplsTeP2MpS2LBrief) XXX_Size() int {
	return xxx_messageInfo_MplsTeP2MpS2LBrief.Size(m)
}
func (m *MplsTeP2MpS2LBrief) XXX_DiscardUnknown() {
	xxx_messageInfo_MplsTeP2MpS2LBrief.DiscardUnknown(m)
}

var xxx_messageInfo_MplsTeP2MpS2LBrief proto.InternalMessageInfo

func (m *MplsTeP2MpS2LBrief) GetS2LFec() *TeS2LFecT {
	if m != nil {
		return m.S2LFec
	}
	return nil
}

func (m *MplsTeP2MpS2LBrief) GetUptime() uint32 {
	if m != nil {
		return m.Uptime
	}
	return 0
}

func (m *MplsTeP2MpS2LBrief) GetEgressInterface() string {
	if m != nil {
		return m.EgressInterface
	}
	return ""
}

func (m *MplsTeP2MpS2LBrief) GetIngressInterface() string {
	if m != nil {
		return m.IngressInterface
	}
	return ""
}

func (m *MplsTeP2MpS2LBrief) GetRole() string {
	if m != nil {
		return m.Role
	}
	return ""
}

func (m *MplsTeP2MpS2LBrief) GetOperState() bool {
	if m != nil {
		return m.OperState
	}
	return false
}

type MplsTeP2MpLspBrief struct {
	SignaledName         string                `protobuf:"bytes,50,opt,name=signaled_name,json=signaledName,proto3" json:"signaled_name,omitempty"`
	LspFec               *TeLspFecT            `protobuf:"bytes,51,opt,name=lsp_fec,json=lspFec,proto3" json:"lsp_fec,omitempty"`
	S2L                  []*MplsTeP2MpS2LBrief `protobuf:"bytes,52,rep,name=s2l,proto3" json:"s2l,omitempty"`
	Uptime               uint32                `protobuf:"varint,53,opt,name=uptime,proto3" json:"uptime,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *MplsTeP2MpLspBrief) Reset()         { *m = MplsTeP2MpLspBrief{} }
func (m *MplsTeP2MpLspBrief) String() string { return proto.CompactTextString(m) }
func (*MplsTeP2MpLspBrief) ProtoMessage()    {}
func (*MplsTeP2MpLspBrief) Descriptor() ([]byte, []int) {
	return fileDescriptor_50404da36924278b, []int{5}
}

func (m *MplsTeP2MpLspBrief) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MplsTeP2MpLspBrief.Unmarshal(m, b)
}
func (m *MplsTeP2MpLspBrief) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MplsTeP2MpLspBrief.Marshal(b, m, deterministic)
}
func (m *MplsTeP2MpLspBrief) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MplsTeP2MpLspBrief.Merge(m, src)
}
func (m *MplsTeP2MpLspBrief) XXX_Size() int {
	return xxx_messageInfo_MplsTeP2MpLspBrief.Size(m)
}
func (m *MplsTeP2MpLspBrief) XXX_DiscardUnknown() {
	xxx_messageInfo_MplsTeP2MpLspBrief.DiscardUnknown(m)
}

var xxx_messageInfo_MplsTeP2MpLspBrief proto.InternalMessageInfo

func (m *MplsTeP2MpLspBrief) GetSignaledName() string {
	if m != nil {
		return m.SignaledName
	}
	return ""
}

func (m *MplsTeP2MpLspBrief) GetLspFec() *TeLspFecT {
	if m != nil {
		return m.LspFec
	}
	return nil
}

func (m *MplsTeP2MpLspBrief) GetS2L() []*MplsTeP2MpS2LBrief {
	if m != nil {
		return m.S2L
	}
	return nil
}

func (m *MplsTeP2MpLspBrief) GetUptime() uint32 {
	if m != nil {
		return m.Uptime
	}
	return 0
}

func init() {
	proto.RegisterType((*MplsTeP2MpLspBrief_KEYS)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te_standby.p2p_p2mp_tunnel.tunnel_remote_briefs.tunnel_remote_brief.mpls_te_p2mp_lsp_brief_KEYS")
	proto.RegisterType((*TeLspFecCtypeDataT)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te_standby.p2p_p2mp_tunnel.tunnel_remote_briefs.tunnel_remote_brief.te_lsp_fec_ctype_data_t")
	proto.RegisterType((*TeLspFecT)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te_standby.p2p_p2mp_tunnel.tunnel_remote_briefs.tunnel_remote_brief.te_lsp_fec_t")
	proto.RegisterType((*TeS2LFecT)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te_standby.p2p_p2mp_tunnel.tunnel_remote_briefs.tunnel_remote_brief.te_s2l_fec_t")
	proto.RegisterType((*MplsTeP2MpS2LBrief)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te_standby.p2p_p2mp_tunnel.tunnel_remote_briefs.tunnel_remote_brief.mpls_te_p2mp_s2l_brief")
	proto.RegisterType((*MplsTeP2MpLspBrief)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te_standby.p2p_p2mp_tunnel.tunnel_remote_briefs.tunnel_remote_brief.mpls_te_p2mp_lsp_brief")
}

func init() { proto.RegisterFile("mpls_te_p2mp_lsp_brief.proto", fileDescriptor_50404da36924278b) }

var fileDescriptor_50404da36924278b = []byte{
	// 778 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x55, 0xdf, 0x6a, 0x13, 0x4f,
	0x14, 0x26, 0x49, 0x9b, 0x26, 0x27, 0x4d, 0x9b, 0x4e, 0xfa, 0x4b, 0x97, 0x5f, 0xab, 0x84, 0xd4,
	0x42, 0x8b, 0xba, 0xc2, 0xd6, 0xde, 0x08, 0x5e, 0x88, 0x56, 0x08, 0x16, 0x95, 0x8d, 0x08, 0x5e,
	0x0d, 0x9b, 0x9d, 0xd9, 0xb0, 0xb0, 0xd9, 0x1d, 0x76, 0x26, 0xd2, 0xea, 0xbd, 0x20, 0xf8, 0x0a,
	0x3e, 0x82, 0x4f, 0xe0, 0x03, 0xf8, 0x34, 0x82, 0x8f, 0x20, 0xf3, 0x6f, 0xb3, 0x49, 0xd3, 0x4b,
	0x7b, 0x95, 0xcc, 0x39, 0xdf, 0x9c, 0xfd, 0xce, 0xf7, 0x9d, 0xb3, 0x0b, 0x07, 0x53, 0x96, 0x70,
	0x2c, 0x28, 0x66, 0xde, 0x94, 0xe1, 0x84, 0x33, 0x3c, 0xce, 0x63, 0x1a, 0xb9, 0x2c, 0xcf, 0x44,
	0x86, 0xc6, 0x61, 0xcc, 0xc3, 0x0c, 0xc7, 0x19, 0xc7, 0x97, 0x39, 0xb6, 0xd0, 0x8c, 0xd1, 0xdc,
	0xb5, 0x07, 0x2e, 0x82, 0x94, 0x8c, 0xaf, 0x5c, 0xe6, 0x31, 0x5d, 0x43, 0xcc, 0xd2, 0x94, 0x26,
	0xae, 0xfe, 0xc1, 0x39, 0x9d, 0x66, 0x82, 0xea, 0xa2, 0x7c, 0x55, 0x70, 0xf0, 0xa5, 0x0a, 0xfb,
	0xab, 0x49, 0xe0, 0x57, 0xe7, 0x1f, 0x46, 0xe8, 0x3f, 0xa8, 0xcb, 0x48, 0x4c, 0x9c, 0x4a, 0xbf,
	0x72, 0xdc, 0xf6, 0xd7, 0x13, 0xce, 0x86, 0x04, 0xed, 0x43, 0xd3, 0x54, 0x8b, 0x89, 0x53, 0x55,
	0x99, 0x86, 0x0e, 0x0c, 0x09, 0x7a, 0x00, 0x88, 0x5e, 0x0a, 0x9a, 0x12, 0x4a, 0xf0, 0x1c, 0x55,
	0xeb, 0x57, 0x8e, 0x9b, 0x7e, 0xc7, 0x66, 0xde, 0x59, 0xf4, 0x11, 0x6c, 0xf1, 0x6c, 0x96, 0x87,
	0x14, 0x07, 0x84, 0xe4, 0x94, 0x73, 0x67, 0x4d, 0x21, 0xdb, 0x3a, 0xfa, 0x4c, 0x07, 0xd1, 0x2e,
	0xac, 0x87, 0xe2, 0x8a, 0x51, 0x67, 0x5d, 0x65, 0xf5, 0x01, 0x3d, 0x82, 0x2e, 0xa1, 0x5c, 0xc4,
	0x69, 0x20, 0xe2, 0x2c, 0x2d, 0x2a, 0xd4, 0x15, 0x06, 0x95, 0x52, 0xb6, 0xcc, 0x1e, 0x6c, 0xa8,
	0x36, 0x63, 0xe2, 0x6c, 0x28, 0xda, 0x75, 0x79, 0x1c, 0x92, 0xc1, 0xf7, 0x0a, 0xec, 0x09, 0xaa,
	0xda, 0x8f, 0x68, 0x88, 0x55, 0x79, 0x4c, 0x02, 0x11, 0x60, 0x21, 0xbb, 0x2d, 0x62, 0x4a, 0x87,
	0xa6, 0xdf, 0x88, 0x68, 0xf8, 0x5c, 0x51, 0x70, 0xa1, 0x2b, 0xd5, 0x97, 0x17, 0x4b, 0xcf, 0x53,
	0xa2, 0x34, 0xfd, 0x1d, 0xe6, 0xb1, 0x0b, 0xce, 0x5e, 0xcc, 0x13, 0xe8, 0x0c, 0xf6, 0x64, 0xb1,
	0x32, 0x6d, 0xcb, 0xa8, 0xa6, 0x18, 0xed, 0x46, 0x34, 0x2c, 0x5d, 0x78, 0xab, 0xf9, 0xfd, 0xae,
	0xc2, 0x66, 0x89, 0x9f, 0x40, 0x07, 0x00, 0xf2, 0xcf, 0x82, 0x3b, 0x92, 0xd5, 0x85, 0x32, 0x68,
	0x00, 0x6d, 0x05, 0x5b, 0x32, 0xa9, 0x15, 0xd1, 0xb0, 0x50, 0xfe, 0x14, 0x7a, 0x12, 0x73, 0xa3,
	0x57, 0xdd, 0x88, 0x86, 0xe7, 0xcb, 0x76, 0xdd, 0xd1, 0x8f, 0xd5, 0xe6, 0x18, 0xab, 0xa4, 0x3a,
	0x23, 0x15, 0x40, 0x3f, 0x2a, 0xb0, 0xbb, 0xdc, 0x5e, 0x9c, 0x46, 0x99, 0xb2, 0xad, 0xe5, 0x7d,
	0x76, 0xff, 0xfd, 0x4c, 0xbb, 0x37, 0xd8, 0xe8, 0xa3, 0x45, 0x61, 0x87, 0x69, 0x94, 0xc9, 0x79,
	0x90, 0xb8, 0x8f, 0x79, 0x64, 0x86, 0xa6, 0x1e, 0xd1, 0xf0, 0x7d, 0x1e, 0x0d, 0x7e, 0xd6, 0x94,
	0xde, 0xdc, 0x4b, 0x8c, 0xde, 0x0f, 0xa1, 0x6b, 0x0f, 0x7c, 0x36, 0x9e, 0xe4, 0xd9, 0xac, 0x24,
	0x7c, 0x87, 0x7b, 0xc9, 0x4b, 0x1a, 0x8e, 0x4c, 0x62, 0x48, 0xd0, 0x21, 0x6c, 0x59, 0xb8, 0xb1,
	0xc8, 0x38, 0xa0, 0x91, 0xda, 0xa5, 0x13, 0xd8, 0x29, 0x1e, 0xb0, 0x20, 0x7e, 0xdb, 0xdf, 0xd2,
	0xb8, 0x42, 0xf7, 0x27, 0xf0, 0xbf, 0x85, 0xae, 0x30, 0x4c, 0xfb, 0xd0, 0xd3, 0x77, 0xae, 0x79,
	0x76, 0x6f, 0xce, 0xc5, 0xf8, 0xa6, 0x97, 0x68, 0xd3, 0xb0, 0xd6, 0xd6, 0xf5, 0x61, 0xd3, 0xa2,
	0xa4, 0x7b, 0x46, 0x0f, 0xd0, 0x18, 0xa9, 0x1b, 0x3a, 0x82, 0x6d, 0x8b, 0x58, 0x5c, 0x22, 0x53,
	0x48, 0x8f, 0x2a, 0x7a, 0x0a, 0xfb, 0xd7, 0x94, 0xca, 0xf2, 0x78, 0x22, 0x75, 0xcf, 0x72, 0xa7,
	0xa1, 0xea, 0x3a, 0x8b, 0x8a, 0xbd, 0x29, 0xf2, 0x72, 0x74, 0xed, 0x75, 0xbd, 0x71, 0x4d, 0x75,
	0xc1, 0x08, 0xa7, 0x97, 0xee, 0x2e, 0xb4, 0x2c, 0x46, 0x5a, 0x07, 0x7a, 0x0c, 0x35, 0x42, 0xba,
	0xf7, 0xab, 0x0a, 0xbd, 0x85, 0xd7, 0x9a, 0x44, 0xab, 0xe9, 0x40, 0x5f, 0x2b, 0xb0, 0x61, 0xee,
	0x2a, 0xf3, 0x5a, 0x1e, 0xbb, 0xa5, 0xa1, 0x2c, 0xac, 0xf6, 0xeb, 0x9a, 0x29, 0xea, 0x41, 0x7d,
	0xc6, 0x44, 0x3c, 0xa5, 0x66, 0x38, 0xcc, 0x09, 0x9d, 0x40, 0x87, 0x4e, 0xe4, 0xfb, 0x0a, 0xc7,
	0xa9, 0xa0, 0x79, 0x14, 0x84, 0xd4, 0xec, 0xe4, 0xb6, 0x8e, 0x0f, 0x6d, 0x18, 0xdd, 0x87, 0x9d,
	0x38, 0x5d, 0xc6, 0xea, 0x71, 0xe8, 0x98, 0xc4, 0x1c, 0x8c, 0x60, 0x2d, 0xcf, 0x12, 0x6b, 0xbf,
	0xfa, 0x2f, 0x17, 0x5a, 0x76, 0x2a, 0x3b, 0x14, 0x54, 0x99, 0xde, 0xf0, 0x9b, 0x32, 0x32, 0x92,
	0x81, 0xc1, 0x9f, 0x65, 0x25, 0x8b, 0x0f, 0x04, 0x3a, 0x84, 0x36, 0x8f, 0x27, 0x69, 0x90, 0x50,
	0x82, 0xd3, 0x60, 0x4a, 0x1d, 0xcf, 0x4c, 0x95, 0x09, 0xbe, 0x0e, 0xa6, 0x54, 0xc9, 0x6d, 0xb6,
	0xd1, 0x39, 0xbd, 0x55, 0xb9, 0x8b, 0x57, 0xa5, 0x2f, 0x3f, 0x61, 0x52, 0xee, 0x6f, 0x15, 0xa8,
	0x71, 0x2f, 0x71, 0x1e, 0xf7, 0x6b, 0xc7, 0x2d, 0xef, 0xd3, 0x6d, 0xf0, 0x58, 0x3d, 0x84, 0xbe,
	0xa4, 0x51, 0x72, 0xff, 0xac, 0xec, 0xfe, 0xb8, 0xae, 0x3e, 0xff, 0xa7, 0x7f, 0x03, 0x00, 0x00,
	0xff, 0xff, 0xa2, 0x43, 0x2c, 0x66, 0x1e, 0x08, 0x00, 0x00,
}
