/*
Copyright 2019 Cisco Systems

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: te_sr_node.proto

package cisco_ios_xr_mpls_te_oper_mpls_te_segment_routing_sr_node_infos_sr_node_info

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type TeSrNode_KEYS struct {
	Protocol             string   `protobuf:"bytes,1,opt,name=protocol,proto3" json:"protocol,omitempty"`
	IgpInstance          string   `protobuf:"bytes,2,opt,name=igp_instance,json=igpInstance,proto3" json:"igp_instance,omitempty"`
	Area                 uint32   `protobuf:"varint,3,opt,name=area,proto3" json:"area,omitempty"`
	IgpNodeId            string   `protobuf:"bytes,4,opt,name=igp_node_id,json=igpNodeId,proto3" json:"igp_node_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TeSrNode_KEYS) Reset()         { *m = TeSrNode_KEYS{} }
func (m *TeSrNode_KEYS) String() string { return proto.CompactTextString(m) }
func (*TeSrNode_KEYS) ProtoMessage()    {}
func (*TeSrNode_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_22baf2a5cd7f64e1, []int{0}
}

func (m *TeSrNode_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TeSrNode_KEYS.Unmarshal(m, b)
}
func (m *TeSrNode_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TeSrNode_KEYS.Marshal(b, m, deterministic)
}
func (m *TeSrNode_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeSrNode_KEYS.Merge(m, src)
}
func (m *TeSrNode_KEYS) XXX_Size() int {
	return xxx_messageInfo_TeSrNode_KEYS.Size(m)
}
func (m *TeSrNode_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_TeSrNode_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_TeSrNode_KEYS proto.InternalMessageInfo

func (m *TeSrNode_KEYS) GetProtocol() string {
	if m != nil {
		return m.Protocol
	}
	return ""
}

func (m *TeSrNode_KEYS) GetIgpInstance() string {
	if m != nil {
		return m.IgpInstance
	}
	return ""
}

func (m *TeSrNode_KEYS) GetArea() uint32 {
	if m != nil {
		return m.Area
	}
	return 0
}

func (m *TeSrNode_KEYS) GetIgpNodeId() string {
	if m != nil {
		return m.IgpNodeId
	}
	return ""
}

type TeSrIgpArea struct {
	SegmentRoutingEnabled bool     `protobuf:"varint,1,opt,name=segment_routing_enabled,json=segmentRoutingEnabled,proto3" json:"segment_routing_enabled,omitempty"`
	StrictSpfEnabled      bool     `protobuf:"varint,2,opt,name=strict_spf_enabled,json=strictSpfEnabled,proto3" json:"strict_spf_enabled,omitempty"`
	IgpType               string   `protobuf:"bytes,3,opt,name=igp_type,json=igpType,proto3" json:"igp_type,omitempty"`
	IgpInstanceXr         string   `protobuf:"bytes,4,opt,name=igp_instance_xr,json=igpInstanceXr,proto3" json:"igp_instance_xr,omitempty"`
	IgpArea               uint32   `protobuf:"varint,5,opt,name=igp_area,json=igpArea,proto3" json:"igp_area,omitempty"`
	IgpAreaFormat         string   `protobuf:"bytes,6,opt,name=igp_area_format,json=igpAreaFormat,proto3" json:"igp_area_format,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *TeSrIgpArea) Reset()         { *m = TeSrIgpArea{} }
func (m *TeSrIgpArea) String() string { return proto.CompactTextString(m) }
func (*TeSrIgpArea) ProtoMessage()    {}
func (*TeSrIgpArea) Descriptor() ([]byte, []int) {
	return fileDescriptor_22baf2a5cd7f64e1, []int{1}
}

func (m *TeSrIgpArea) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TeSrIgpArea.Unmarshal(m, b)
}
func (m *TeSrIgpArea) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TeSrIgpArea.Marshal(b, m, deterministic)
}
func (m *TeSrIgpArea) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeSrIgpArea.Merge(m, src)
}
func (m *TeSrIgpArea) XXX_Size() int {
	return xxx_messageInfo_TeSrIgpArea.Size(m)
}
func (m *TeSrIgpArea) XXX_DiscardUnknown() {
	xxx_messageInfo_TeSrIgpArea.DiscardUnknown(m)
}

var xxx_messageInfo_TeSrIgpArea proto.InternalMessageInfo

func (m *TeSrIgpArea) GetSegmentRoutingEnabled() bool {
	if m != nil {
		return m.SegmentRoutingEnabled
	}
	return false
}

func (m *TeSrIgpArea) GetStrictSpfEnabled() bool {
	if m != nil {
		return m.StrictSpfEnabled
	}
	return false
}

func (m *TeSrIgpArea) GetIgpType() string {
	if m != nil {
		return m.IgpType
	}
	return ""
}

func (m *TeSrIgpArea) GetIgpInstanceXr() string {
	if m != nil {
		return m.IgpInstanceXr
	}
	return ""
}

func (m *TeSrIgpArea) GetIgpArea() uint32 {
	if m != nil {
		return m.IgpArea
	}
	return 0
}

func (m *TeSrIgpArea) GetIgpAreaFormat() string {
	if m != nil {
		return m.IgpAreaFormat
	}
	return ""
}

type TeSrNodeInfo struct {
	SegmentId                   uint32   `protobuf:"varint,1,opt,name=segment_id,json=segmentId,proto3" json:"segment_id,omitempty"`
	SegmentIdLocalAbsoluteValue uint32   `protobuf:"varint,2,opt,name=segment_id_local_absolute_value,json=segmentIdLocalAbsoluteValue,proto3" json:"segment_id_local_absolute_value,omitempty"`
	SrgbStart                   uint32   `protobuf:"varint,3,opt,name=srgb_start,json=srgbStart,proto3" json:"srgb_start,omitempty"`
	SrgbSize                    uint32   `protobuf:"varint,4,opt,name=srgb_size,json=srgbSize,proto3" json:"srgb_size,omitempty"`
	XXX_NoUnkeyedLiteral        struct{} `json:"-"`
	XXX_unrecognized            []byte   `json:"-"`
	XXX_sizecache               int32    `json:"-"`
}

func (m *TeSrNodeInfo) Reset()         { *m = TeSrNodeInfo{} }
func (m *TeSrNodeInfo) String() string { return proto.CompactTextString(m) }
func (*TeSrNodeInfo) ProtoMessage()    {}
func (*TeSrNodeInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_22baf2a5cd7f64e1, []int{2}
}

func (m *TeSrNodeInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TeSrNodeInfo.Unmarshal(m, b)
}
func (m *TeSrNodeInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TeSrNodeInfo.Marshal(b, m, deterministic)
}
func (m *TeSrNodeInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeSrNodeInfo.Merge(m, src)
}
func (m *TeSrNodeInfo) XXX_Size() int {
	return xxx_messageInfo_TeSrNodeInfo.Size(m)
}
func (m *TeSrNodeInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TeSrNodeInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TeSrNodeInfo proto.InternalMessageInfo

func (m *TeSrNodeInfo) GetSegmentId() uint32 {
	if m != nil {
		return m.SegmentId
	}
	return 0
}

func (m *TeSrNodeInfo) GetSegmentIdLocalAbsoluteValue() uint32 {
	if m != nil {
		return m.SegmentIdLocalAbsoluteValue
	}
	return 0
}

func (m *TeSrNodeInfo) GetSrgbStart() uint32 {
	if m != nil {
		return m.SrgbStart
	}
	return 0
}

func (m *TeSrNodeInfo) GetSrgbSize() uint32 {
	if m != nil {
		return m.SrgbSize
	}
	return 0
}

type MplsSrlgInfo struct {
	SharedRiskGroup      uint32   `protobuf:"varint,1,opt,name=shared_risk_group,json=sharedRiskGroup,proto3" json:"shared_risk_group,omitempty"`
	SrlgName             string   `protobuf:"bytes,2,opt,name=srlg_name,json=srlgName,proto3" json:"srlg_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MplsSrlgInfo) Reset()         { *m = MplsSrlgInfo{} }
func (m *MplsSrlgInfo) String() string { return proto.CompactTextString(m) }
func (*MplsSrlgInfo) ProtoMessage()    {}
func (*MplsSrlgInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_22baf2a5cd7f64e1, []int{3}
}

func (m *MplsSrlgInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MplsSrlgInfo.Unmarshal(m, b)
}
func (m *MplsSrlgInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MplsSrlgInfo.Marshal(b, m, deterministic)
}
func (m *MplsSrlgInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MplsSrlgInfo.Merge(m, src)
}
func (m *MplsSrlgInfo) XXX_Size() int {
	return xxx_messageInfo_MplsSrlgInfo.Size(m)
}
func (m *MplsSrlgInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_MplsSrlgInfo.DiscardUnknown(m)
}

var xxx_messageInfo_MplsSrlgInfo proto.InternalMessageInfo

func (m *MplsSrlgInfo) GetSharedRiskGroup() uint32 {
	if m != nil {
		return m.SharedRiskGroup
	}
	return 0
}

func (m *MplsSrlgInfo) GetSrlgName() string {
	if m != nil {
		return m.SrlgName
	}
	return ""
}

type TeSrAdjSid struct {
	AdjacencySid         uint32   `protobuf:"varint,1,opt,name=adjacency_sid,json=adjacencySid,proto3" json:"adjacency_sid,omitempty"`
	LinkType             string   `protobuf:"bytes,2,opt,name=link_type,json=linkType,proto3" json:"link_type,omitempty"`
	LocalAddr            string   `protobuf:"bytes,3,opt,name=local_addr,json=localAddr,proto3" json:"local_addr,omitempty"`
	RemoteAddr           string   `protobuf:"bytes,4,opt,name=remote_addr,json=remoteAddr,proto3" json:"remote_addr,omitempty"`
	NbrNodeIgpid         string   `protobuf:"bytes,5,opt,name=nbr_node_igpid,json=nbrNodeIgpid,proto3" json:"nbr_node_igpid,omitempty"`
	NbrNodeTeRouterId    string   `protobuf:"bytes,6,opt,name=nbr_node_te_router_id,json=nbrNodeTeRouterId,proto3" json:"nbr_node_te_router_id,omitempty"`
	FlagF                bool     `protobuf:"varint,7,opt,name=flag_f,json=flagF,proto3" json:"flag_f,omitempty"`
	FlagB                bool     `protobuf:"varint,8,opt,name=flag_b,json=flagB,proto3" json:"flag_b,omitempty"`
	FlagV                bool     `protobuf:"varint,9,opt,name=flag_v,json=flagV,proto3" json:"flag_v,omitempty"`
	FlagL                bool     `protobuf:"varint,10,opt,name=flag_l,json=flagL,proto3" json:"flag_l,omitempty"`
	FlagS                bool     `protobuf:"varint,11,opt,name=flag_s,json=flagS,proto3" json:"flag_s,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TeSrAdjSid) Reset()         { *m = TeSrAdjSid{} }
func (m *TeSrAdjSid) String() string { return proto.CompactTextString(m) }
func (*TeSrAdjSid) ProtoMessage()    {}
func (*TeSrAdjSid) Descriptor() ([]byte, []int) {
	return fileDescriptor_22baf2a5cd7f64e1, []int{4}
}

func (m *TeSrAdjSid) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TeSrAdjSid.Unmarshal(m, b)
}
func (m *TeSrAdjSid) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TeSrAdjSid.Marshal(b, m, deterministic)
}
func (m *TeSrAdjSid) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeSrAdjSid.Merge(m, src)
}
func (m *TeSrAdjSid) XXX_Size() int {
	return xxx_messageInfo_TeSrAdjSid.Size(m)
}
func (m *TeSrAdjSid) XXX_DiscardUnknown() {
	xxx_messageInfo_TeSrAdjSid.DiscardUnknown(m)
}

var xxx_messageInfo_TeSrAdjSid proto.InternalMessageInfo

func (m *TeSrAdjSid) GetAdjacencySid() uint32 {
	if m != nil {
		return m.AdjacencySid
	}
	return 0
}

func (m *TeSrAdjSid) GetLinkType() string {
	if m != nil {
		return m.LinkType
	}
	return ""
}

func (m *TeSrAdjSid) GetLocalAddr() string {
	if m != nil {
		return m.LocalAddr
	}
	return ""
}

func (m *TeSrAdjSid) GetRemoteAddr() string {
	if m != nil {
		return m.RemoteAddr
	}
	return ""
}

func (m *TeSrAdjSid) GetNbrNodeIgpid() string {
	if m != nil {
		return m.NbrNodeIgpid
	}
	return ""
}

func (m *TeSrAdjSid) GetNbrNodeTeRouterId() string {
	if m != nil {
		return m.NbrNodeTeRouterId
	}
	return ""
}

func (m *TeSrAdjSid) GetFlagF() bool {
	if m != nil {
		return m.FlagF
	}
	return false
}

func (m *TeSrAdjSid) GetFlagB() bool {
	if m != nil {
		return m.FlagB
	}
	return false
}

func (m *TeSrAdjSid) GetFlagV() bool {
	if m != nil {
		return m.FlagV
	}
	return false
}

func (m *TeSrAdjSid) GetFlagL() bool {
	if m != nil {
		return m.FlagL
	}
	return false
}

func (m *TeSrAdjSid) GetFlagS() bool {
	if m != nil {
		return m.FlagS
	}
	return false
}

type TeSrLinkInfo struct {
	TopologyLinkType                string          `protobuf:"bytes,1,opt,name=topology_link_type,json=topologyLinkType,proto3" json:"topology_link_type,omitempty"`
	TopologyLinkInterfaceAddress    string          `protobuf:"bytes,2,opt,name=topology_link_interface_address,json=topologyLinkInterfaceAddress,proto3" json:"topology_link_interface_address,omitempty"`
	TopologyLinkInterfaceId         uint32          `protobuf:"varint,3,opt,name=topology_link_interface_id,json=topologyLinkInterfaceId,proto3" json:"topology_link_interface_id,omitempty"`
	TopologyLinkNeighborAddress     string          `protobuf:"bytes,4,opt,name=topology_link_neighbor_address,json=topologyLinkNeighborAddress,proto3" json:"topology_link_neighbor_address,omitempty"`
	TopologyLinkNeighborId          uint32          `protobuf:"varint,5,opt,name=topology_link_neighbor_id,json=topologyLinkNeighborId,proto3" json:"topology_link_neighbor_id,omitempty"`
	TopologyLinkNeighborSystemId    string          `protobuf:"bytes,6,opt,name=topology_link_neighbor_system_id,json=topologyLinkNeighborSystemId,proto3" json:"topology_link_neighbor_system_id,omitempty"`
	TopologyLinkNeighborNodeId      uint32          `protobuf:"varint,7,opt,name=topology_link_neighbor_node_id,json=topologyLinkNeighborNodeId,proto3" json:"topology_link_neighbor_node_id,omitempty"`
	TopologyLinkNeighborGeneration  uint32          `protobuf:"varint,8,opt,name=topology_link_neighbor_generation,json=topologyLinkNeighborGeneration,proto3" json:"topology_link_neighbor_generation,omitempty"`
	TopologyLinkFragmentId          uint32          `protobuf:"varint,9,opt,name=topology_link_fragment_id,json=topologyLinkFragmentId,proto3" json:"topology_link_fragment_id,omitempty"`
	TopologyLinkTeMetric            uint32          `protobuf:"varint,10,opt,name=topology_link_te_metric,json=topologyLinkTeMetric,proto3" json:"topology_link_te_metric,omitempty"`
	TopologyLinkIgpMetric           uint32          `protobuf:"varint,11,opt,name=topology_link_igp_metric,json=topologyLinkIgpMetric,proto3" json:"topology_link_igp_metric,omitempty"`
	TopologyLinkExtendedAffinityBit []uint32        `protobuf:"varint,12,rep,packed,name=topology_link_extended_affinity_bit,json=topologyLinkExtendedAffinityBit,proto3" json:"topology_link_extended_affinity_bit,omitempty"`
	SharedRiskLinkGroup             []*MplsSrlgInfo `protobuf:"bytes,13,rep,name=shared_risk_link_group,json=sharedRiskLinkGroup,proto3" json:"shared_risk_link_group,omitempty"`
	AdjacencySids                   []*TeSrAdjSid   `protobuf:"bytes,14,rep,name=adjacency_sids,json=adjacencySids,proto3" json:"adjacency_sids,omitempty"`
	XXX_NoUnkeyedLiteral            struct{}        `json:"-"`
	XXX_unrecognized                []byte          `json:"-"`
	XXX_sizecache                   int32           `json:"-"`
}

func (m *TeSrLinkInfo) Reset()         { *m = TeSrLinkInfo{} }
func (m *TeSrLinkInfo) String() string { return proto.CompactTextString(m) }
func (*TeSrLinkInfo) ProtoMessage()    {}
func (*TeSrLinkInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_22baf2a5cd7f64e1, []int{5}
}

func (m *TeSrLinkInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TeSrLinkInfo.Unmarshal(m, b)
}
func (m *TeSrLinkInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TeSrLinkInfo.Marshal(b, m, deterministic)
}
func (m *TeSrLinkInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeSrLinkInfo.Merge(m, src)
}
func (m *TeSrLinkInfo) XXX_Size() int {
	return xxx_messageInfo_TeSrLinkInfo.Size(m)
}
func (m *TeSrLinkInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TeSrLinkInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TeSrLinkInfo proto.InternalMessageInfo

func (m *TeSrLinkInfo) GetTopologyLinkType() string {
	if m != nil {
		return m.TopologyLinkType
	}
	return ""
}

func (m *TeSrLinkInfo) GetTopologyLinkInterfaceAddress() string {
	if m != nil {
		return m.TopologyLinkInterfaceAddress
	}
	return ""
}

func (m *TeSrLinkInfo) GetTopologyLinkInterfaceId() uint32 {
	if m != nil {
		return m.TopologyLinkInterfaceId
	}
	return 0
}

func (m *TeSrLinkInfo) GetTopologyLinkNeighborAddress() string {
	if m != nil {
		return m.TopologyLinkNeighborAddress
	}
	return ""
}

func (m *TeSrLinkInfo) GetTopologyLinkNeighborId() uint32 {
	if m != nil {
		return m.TopologyLinkNeighborId
	}
	return 0
}

func (m *TeSrLinkInfo) GetTopologyLinkNeighborSystemId() string {
	if m != nil {
		return m.TopologyLinkNeighborSystemId
	}
	return ""
}

func (m *TeSrLinkInfo) GetTopologyLinkNeighborNodeId() uint32 {
	if m != nil {
		return m.TopologyLinkNeighborNodeId
	}
	return 0
}

func (m *TeSrLinkInfo) GetTopologyLinkNeighborGeneration() uint32 {
	if m != nil {
		return m.TopologyLinkNeighborGeneration
	}
	return 0
}

func (m *TeSrLinkInfo) GetTopologyLinkFragmentId() uint32 {
	if m != nil {
		return m.TopologyLinkFragmentId
	}
	return 0
}

func (m *TeSrLinkInfo) GetTopologyLinkTeMetric() uint32 {
	if m != nil {
		return m.TopologyLinkTeMetric
	}
	return 0
}

func (m *TeSrLinkInfo) GetTopologyLinkIgpMetric() uint32 {
	if m != nil {
		return m.TopologyLinkIgpMetric
	}
	return 0
}

func (m *TeSrLinkInfo) GetTopologyLinkExtendedAffinityBit() []uint32 {
	if m != nil {
		return m.TopologyLinkExtendedAffinityBit
	}
	return nil
}

func (m *TeSrLinkInfo) GetSharedRiskLinkGroup() []*MplsSrlgInfo {
	if m != nil {
		return m.SharedRiskLinkGroup
	}
	return nil
}

func (m *TeSrLinkInfo) GetAdjacencySids() []*TeSrAdjSid {
	if m != nil {
		return m.AdjacencySids
	}
	return nil
}

type TeSrNode struct {
	LocalNodeIgpId         string          `protobuf:"bytes,50,opt,name=local_node_igp_id,json=localNodeIgpId,proto3" json:"local_node_igp_id,omitempty"`
	IgpArea                *TeSrIgpArea    `protobuf:"bytes,51,opt,name=igp_area,json=igpArea,proto3" json:"igp_area,omitempty"`
	TopologyNodeIsRouter   bool            `protobuf:"varint,52,opt,name=topology_node_is_router,json=topologyNodeIsRouter,proto3" json:"topology_node_is_router,omitempty"`
	LocalNodeTeRouterId    string          `protobuf:"bytes,53,opt,name=local_node_te_router_id,json=localNodeTeRouterId,proto3" json:"local_node_te_router_id,omitempty"`
	TopologyNodeOverloaded bool            `protobuf:"varint,54,opt,name=topology_node_overloaded,json=topologyNodeOverloaded,proto3" json:"topology_node_overloaded,omitempty"`
	SrNodeInfo             *TeSrNodeInfo   `protobuf:"bytes,55,opt,name=sr_node_info,json=srNodeInfo,proto3" json:"sr_node_info,omitempty"`
	NodeLink               []*TeSrLinkInfo `protobuf:"bytes,56,rep,name=node_link,json=nodeLink,proto3" json:"node_link,omitempty"`
	XXX_NoUnkeyedLiteral   struct{}        `json:"-"`
	XXX_unrecognized       []byte          `json:"-"`
	XXX_sizecache          int32           `json:"-"`
}

func (m *TeSrNode) Reset()         { *m = TeSrNode{} }
func (m *TeSrNode) String() string { return proto.CompactTextString(m) }
func (*TeSrNode) ProtoMessage()    {}
func (*TeSrNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_22baf2a5cd7f64e1, []int{6}
}

func (m *TeSrNode) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TeSrNode.Unmarshal(m, b)
}
func (m *TeSrNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TeSrNode.Marshal(b, m, deterministic)
}
func (m *TeSrNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeSrNode.Merge(m, src)
}
func (m *TeSrNode) XXX_Size() int {
	return xxx_messageInfo_TeSrNode.Size(m)
}
func (m *TeSrNode) XXX_DiscardUnknown() {
	xxx_messageInfo_TeSrNode.DiscardUnknown(m)
}

var xxx_messageInfo_TeSrNode proto.InternalMessageInfo

func (m *TeSrNode) GetLocalNodeIgpId() string {
	if m != nil {
		return m.LocalNodeIgpId
	}
	return ""
}

func (m *TeSrNode) GetIgpArea() *TeSrIgpArea {
	if m != nil {
		return m.IgpArea
	}
	return nil
}

func (m *TeSrNode) GetTopologyNodeIsRouter() bool {
	if m != nil {
		return m.TopologyNodeIsRouter
	}
	return false
}

func (m *TeSrNode) GetLocalNodeTeRouterId() string {
	if m != nil {
		return m.LocalNodeTeRouterId
	}
	return ""
}

func (m *TeSrNode) GetTopologyNodeOverloaded() bool {
	if m != nil {
		return m.TopologyNodeOverloaded
	}
	return false
}

func (m *TeSrNode) GetSrNodeInfo() *TeSrNodeInfo {
	if m != nil {
		return m.SrNodeInfo
	}
	return nil
}

func (m *TeSrNode) GetNodeLink() []*TeSrLinkInfo {
	if m != nil {
		return m.NodeLink
	}
	return nil
}

func init() {
	proto.RegisterType((*TeSrNode_KEYS)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.segment_routing.sr_node_infos.sr_node_info.te_sr_node_KEYS")
	proto.RegisterType((*TeSrIgpArea)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.segment_routing.sr_node_infos.sr_node_info.te_sr_igp_area")
	proto.RegisterType((*TeSrNodeInfo)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.segment_routing.sr_node_infos.sr_node_info.te_sr_node_info")
	proto.RegisterType((*MplsSrlgInfo)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.segment_routing.sr_node_infos.sr_node_info.mpls_srlg_info")
	proto.RegisterType((*TeSrAdjSid)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.segment_routing.sr_node_infos.sr_node_info.te_sr_adj_sid")
	proto.RegisterType((*TeSrLinkInfo)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.segment_routing.sr_node_infos.sr_node_info.te_sr_link_info")
	proto.RegisterType((*TeSrNode)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.segment_routing.sr_node_infos.sr_node_info.te_sr_node")
}

func init() { proto.RegisterFile("te_sr_node.proto", fileDescriptor_22baf2a5cd7f64e1) }

var fileDescriptor_22baf2a5cd7f64e1 = []byte{
	// 1070 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x56, 0xdb, 0x4e, 0x1b, 0x47,
	0x18, 0x96, 0x73, 0x00, 0xfb, 0x87, 0x35, 0x30, 0x29, 0xb0, 0x81, 0x04, 0x1c, 0xa7, 0xaa, 0x68,
	0x15, 0x59, 0x55, 0xce, 0x55, 0xaf, 0xa0, 0x85, 0xc8, 0x2a, 0xa5, 0xd2, 0x3a, 0x8a, 0x1a, 0xb5,
	0xd5, 0x68, 0xed, 0x19, 0x6f, 0x26, 0xac, 0x77, 0x56, 0x33, 0x03, 0xc5, 0xdc, 0x54, 0xaa, 0xfa,
	0x02, 0x7d, 0x8f, 0x5e, 0xf5, 0x59, 0x7a, 0xd9, 0x47, 0xe9, 0x45, 0x35, 0xff, 0xcc, 0xae, 0x77,
	0x09, 0xdc, 0x91, 0x3b, 0xcf, 0xf7, 0x1f, 0xe6, 0x3f, 0x7c, 0xfe, 0x66, 0x61, 0xd9, 0x70, 0xaa,
	0x15, 0xcd, 0x24, 0xe3, 0xbd, 0x5c, 0x49, 0x23, 0xc9, 0xe1, 0x48, 0xe8, 0x91, 0xa4, 0x42, 0x6a,
	0x7a, 0xa6, 0xe8, 0x24, 0x4f, 0x35, 0x35, 0x9c, 0xca, 0x9c, 0xab, 0x9e, 0x3f, 0xf4, 0x34, 0x4f,
	0x26, 0x3c, 0x33, 0x54, 0xc9, 0x13, 0x23, 0xb2, 0xa4, 0xe7, 0x13, 0x50, 0x91, 0x8d, 0xa5, 0xae,
	0x9d, 0xba, 0x7f, 0x34, 0x60, 0x69, 0x76, 0x05, 0xfd, 0x6e, 0xff, 0xed, 0x80, 0x6c, 0x40, 0x13,
	0xaf, 0x1a, 0xc9, 0x34, 0x6c, 0x74, 0x1a, 0x3b, 0xad, 0xa8, 0x3c, 0x93, 0x07, 0xb0, 0x28, 0x92,
	0x9c, 0x8a, 0x4c, 0x9b, 0x38, 0x1b, 0xf1, 0xf0, 0x06, 0xda, 0x17, 0x44, 0x92, 0xf7, 0x3d, 0x44,
	0x08, 0xdc, 0x8a, 0x15, 0x8f, 0xc3, 0x9b, 0x9d, 0xc6, 0x4e, 0x10, 0xe1, 0x6f, 0xb2, 0x05, 0xd6,
	0xc5, 0xdf, 0xcb, 0xc2, 0x5b, 0x18, 0xd5, 0x12, 0x49, 0x7e, 0x24, 0x19, 0xef, 0xb3, 0xee, 0x7f,
	0x0d, 0x68, 0xbb, 0x32, 0xac, 0x1b, 0x86, 0x3c, 0x87, 0xf5, 0x0b, 0x7d, 0x50, 0x9e, 0xc5, 0xc3,
	0x94, 0x33, 0x2c, 0xaa, 0x19, 0xad, 0x7a, 0x73, 0xe4, 0xac, 0xfb, 0xce, 0x48, 0x1e, 0x01, 0xd1,
	0x46, 0x89, 0x91, 0xa1, 0x3a, 0x1f, 0x97, 0x21, 0x37, 0x30, 0x64, 0xd9, 0x59, 0x06, 0xf9, 0xb8,
	0xf0, 0xbe, 0x0b, 0x4d, 0x7b, 0xa3, 0x99, 0xe6, 0x1c, 0x0b, 0x6e, 0x45, 0xf3, 0x22, 0xc9, 0x5f,
	0x4f, 0x73, 0x4e, 0x3e, 0x83, 0xa5, 0x6a, 0xab, 0xf4, 0x4c, 0xf9, 0xba, 0x83, 0x4a, 0xb7, 0x3f,
	0xaa, 0x22, 0x05, 0xf6, 0x7c, 0x1b, 0x7b, 0xb6, 0x29, 0x76, 0x6d, 0x0f, 0x3e, 0x85, 0x35, 0xd1,
	0xb1, 0x54, 0x93, 0xd8, 0x84, 0x73, 0x65, 0x0a, 0xeb, 0x71, 0x80, 0x60, 0xf7, 0xef, 0xfa, 0x16,
	0xec, 0x66, 0xc8, 0x7d, 0x80, 0xa2, 0x7f, 0xe1, 0x5a, 0x0e, 0xa2, 0x96, 0x47, 0xfa, 0x8c, 0x7c,
	0x0b, 0xdb, 0x33, 0x33, 0x4d, 0xe5, 0x28, 0x4e, 0x69, 0x3c, 0xd4, 0x32, 0x3d, 0x31, 0x9c, 0x9e,
	0xc6, 0xe9, 0x89, 0xdb, 0x4d, 0x10, 0x6d, 0x96, 0x31, 0x87, 0xd6, 0x69, 0xd7, 0xfb, 0xbc, 0xb1,
	0x2e, 0x78, 0x89, 0x4a, 0x86, 0x54, 0x9b, 0x58, 0x19, 0xbf, 0xb1, 0x96, 0x45, 0x06, 0x16, 0x20,
	0x9b, 0xd0, 0x72, 0x66, 0x71, 0xce, 0xb1, 0xf9, 0x20, 0x6a, 0xa2, 0x55, 0x9c, 0xf3, 0xee, 0x5b,
	0x68, 0x23, 0xe1, 0xb4, 0x4a, 0x13, 0x57, 0xf2, 0x17, 0xb0, 0xa2, 0xdf, 0xc5, 0x8a, 0x33, 0xaa,
	0x84, 0x3e, 0xa6, 0x89, 0x92, 0x27, 0xb9, 0xaf, 0x7c, 0xc9, 0x19, 0x22, 0xa1, 0x8f, 0x5f, 0x59,
	0xd8, 0xa5, 0x4e, 0x13, 0x9a, 0xc5, 0x93, 0x82, 0x45, 0x4d, 0x0b, 0x1c, 0xc5, 0x13, 0xde, 0xfd,
	0xf7, 0x06, 0x04, 0x6e, 0x1e, 0x31, 0x7b, 0x4f, 0xb5, 0x60, 0xe4, 0x21, 0x04, 0x31, 0x7b, 0x1f,
	0x8f, 0x78, 0x36, 0x9a, 0x5a, 0xc0, 0xa7, 0x5d, 0x2c, 0xc1, 0x81, 0x60, 0x36, 0x67, 0x2a, 0xb2,
	0x63, 0xb7, 0x4d, 0x9f, 0xd3, 0x02, 0xb8, 0xce, 0xfb, 0x00, 0x7e, 0x4a, 0x8c, 0x29, 0xbf, 0xeb,
	0x16, 0x22, 0xbb, 0x8c, 0x29, 0xb2, 0x0d, 0x0b, 0x8a, 0x4f, 0xa4, 0xe1, 0xce, 0xee, 0x36, 0x0d,
	0x0e, 0x42, 0x87, 0x4f, 0xa1, 0x9d, 0x0d, 0x8b, 0x05, 0x25, 0xb9, 0x60, 0xb8, 0xec, 0x56, 0xb4,
	0x98, 0x0d, 0x15, 0xb2, 0xd8, 0x62, 0xe4, 0x4b, 0x58, 0x2d, 0xbd, 0x0c, 0x47, 0xe6, 0x72, 0x65,
	0x17, 0xe8, 0xf6, 0xbe, 0xe2, 0x9d, 0x5f, 0xf3, 0x08, 0x2d, 0x7d, 0x46, 0x56, 0x61, 0x6e, 0x9c,
	0xc6, 0x09, 0x1d, 0x87, 0xf3, 0xc8, 0xd1, 0xdb, 0xf6, 0x74, 0x50, 0xc2, 0xc3, 0xb0, 0x39, 0x83,
	0xf7, 0x4a, 0xf8, 0x34, 0x6c, 0xcd, 0xe0, 0x37, 0x25, 0x9c, 0x86, 0x30, 0x83, 0x0f, 0x4b, 0x58,
	0x87, 0x0b, 0x33, 0x78, 0xd0, 0xfd, 0xab, 0x59, 0xd0, 0x0d, 0xc7, 0x85, 0xbb, 0x7b, 0x04, 0xc4,
	0xc8, 0x5c, 0xa6, 0x32, 0x99, 0xd2, 0xd9, 0x10, 0xdd, 0xdf, 0x7f, 0xb9, 0xb0, 0x1c, 0x16, 0xc3,
	0xdc, 0x87, 0xed, 0xba, 0xb7, 0xc8, 0x0c, 0x57, 0xe3, 0x78, 0xe4, 0xc6, 0xc7, 0xb5, 0xf6, 0xf3,
	0xbf, 0x57, 0x0d, 0xed, 0x17, 0x4e, 0xbb, 0xce, 0x87, 0x7c, 0x0d, 0x1b, 0x57, 0xa5, 0x11, 0xcc,
	0xd3, 0x71, 0xfd, 0xd2, 0x0c, 0x7d, 0x46, 0xbe, 0x81, 0xad, 0x7a, 0x70, 0xc6, 0x45, 0xf2, 0x6e,
	0x28, 0x55, 0x59, 0x82, 0x5b, 0xe2, 0x66, 0x35, 0xc1, 0x91, 0xf7, 0x29, 0x2a, 0xf8, 0x0a, 0xee,
	0x5e, 0x91, 0xc4, 0x2f, 0x38, 0x88, 0xd6, 0x2e, 0x8b, 0xef, 0x33, 0x72, 0x00, 0x9d, 0x2b, 0x42,
	0xf5, 0x54, 0x1b, 0x3e, 0x99, 0x6d, 0xfd, 0xde, 0x65, 0x19, 0x06, 0xe8, 0xd4, 0x67, 0x64, 0xef,
	0xca, 0x3e, 0x0a, 0xb9, 0x9c, 0xc7, 0x3a, 0x36, 0x2e, 0xcb, 0xe2, 0xf4, 0x93, 0xf4, 0xe1, 0xc1,
	0x15, 0x39, 0x12, 0x9e, 0x71, 0x15, 0x1b, 0x21, 0x33, 0x24, 0x52, 0x10, 0x6d, 0x5d, 0x96, 0xe6,
	0x55, 0xe9, 0xf5, 0xe1, 0x44, 0xc6, 0x2a, 0x2e, 0x65, 0xa8, 0xf5, 0xe1, 0x44, 0x0e, 0xbc, 0xb9,
	0xcf, 0xc8, 0x33, 0x58, 0xbf, 0xc0, 0x21, 0x4e, 0x27, 0xdc, 0x4a, 0x2e, 0xd2, 0x32, 0x88, 0x3e,
	0xa9, 0x11, 0x89, 0x7f, 0x8f, 0x36, 0xf2, 0x02, 0xc2, 0x0b, 0x2c, 0x48, 0xf2, 0x22, 0x6e, 0x01,
	0xe3, 0x56, 0x6b, 0x1c, 0x48, 0x72, 0x1f, 0x78, 0x08, 0x0f, 0xeb, 0x81, 0xfc, 0xcc, 0xf0, 0x8c,
	0x71, 0x46, 0xe3, 0xf1, 0x58, 0x64, 0xc2, 0x4c, 0xe9, 0x50, 0x98, 0x70, 0xb1, 0x73, 0x73, 0x27,
	0x88, 0xb6, 0xab, 0x39, 0xf6, 0xbd, 0xe3, 0xae, 0xf7, 0xdb, 0x13, 0x86, 0xfc, 0xd9, 0x80, 0xb5,
	0xaa, 0x7c, 0x61, 0x46, 0xa7, 0x61, 0x41, 0xe7, 0xe6, 0xce, 0xc2, 0xe3, 0x9f, 0x7b, 0xd7, 0xf9,
	0xf4, 0xf6, 0xea, 0xe2, 0x19, 0xdd, 0x99, 0x29, 0xa4, 0xad, 0xd0, 0xa9, 0xe4, 0xef, 0x0d, 0x68,
	0xd7, 0x74, 0x4f, 0x87, 0x6d, 0xac, 0xe5, 0xa7, 0xeb, 0xad, 0xa5, 0x26, 0xb6, 0x51, 0x50, 0x55,
	0x55, 0xdd, 0xfd, 0xe7, 0x16, 0xc0, 0xec, 0x75, 0x22, 0x9f, 0xc3, 0x8a, 0x13, 0xd2, 0x42, 0x0a,
	0x2d, 0x31, 0x1e, 0x23, 0xd1, 0xdb, 0x68, 0xf0, 0x6a, 0xd8, 0x67, 0xe4, 0xd7, 0xca, 0xd3, 0xf8,
	0xa4, 0xd3, 0xb8, 0xfe, 0x19, 0xd6, 0xbf, 0x19, 0x66, 0x0f, 0x6f, 0x95, 0x89, 0xce, 0x5b, 0x7b,
	0x2d, 0x0e, 0x9f, 0xa2, 0x12, 0x96, 0x4c, 0xc4, 0x62, 0xb5, 0x53, 0x63, 0xf2, 0x14, 0xd6, 0x2b,
	0xad, 0xd5, 0xf4, 0xfb, 0x19, 0x36, 0x78, 0xa7, 0x6c, 0xb0, 0xa2, 0xe0, 0x2f, 0x2b, 0xfc, 0xc5,
	0x40, 0x79, 0xca, 0x55, 0x2a, 0x63, 0xc6, 0x59, 0xf8, 0x1c, 0x6f, 0x5b, 0xab, 0xde, 0xf6, 0x43,
	0x69, 0x25, 0xbf, 0xc1, 0x62, 0xb5, 0x9d, 0xf0, 0x05, 0xce, 0xe8, 0x97, 0x8f, 0x31, 0xa3, 0xf2,
	0x1c, 0x81, 0x76, 0xaa, 0x61, 0x55, 0xff, 0x1c, 0x5a, 0x68, 0xb0, 0x5c, 0x0f, 0x5f, 0x22, 0xb3,
	0x3e, 0xca, 0xed, 0xe5, 0x3b, 0x13, 0x35, 0xad, 0xc9, 0x12, 0x7c, 0x38, 0x87, 0x1f, 0x95, 0x4f,
	0xfe, 0x0f, 0x00, 0x00, 0xff, 0xff, 0xdb, 0x04, 0xbc, 0x7b, 0xe3, 0x0a, 0x00, 0x00,
}
