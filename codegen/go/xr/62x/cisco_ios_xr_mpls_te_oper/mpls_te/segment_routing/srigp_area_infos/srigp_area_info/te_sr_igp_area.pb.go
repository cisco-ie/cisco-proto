/*
Copyright 2019 Cisco Systems

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: te_sr_igp_area.proto

package cisco_ios_xr_mpls_te_oper_mpls_te_segment_routing_srigp_area_infos_srigp_area_info

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type TeSrIgpArea_KEYS struct {
	Protocol             string   `protobuf:"bytes,1,opt,name=protocol,proto3" json:"protocol,omitempty"`
	IgpInstance          string   `protobuf:"bytes,2,opt,name=igp_instance,json=igpInstance,proto3" json:"igp_instance,omitempty"`
	Area                 uint32   `protobuf:"varint,3,opt,name=area,proto3" json:"area,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TeSrIgpArea_KEYS) Reset()         { *m = TeSrIgpArea_KEYS{} }
func (m *TeSrIgpArea_KEYS) String() string { return proto.CompactTextString(m) }
func (*TeSrIgpArea_KEYS) ProtoMessage()    {}
func (*TeSrIgpArea_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_e838964f544d822c, []int{0}
}

func (m *TeSrIgpArea_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TeSrIgpArea_KEYS.Unmarshal(m, b)
}
func (m *TeSrIgpArea_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TeSrIgpArea_KEYS.Marshal(b, m, deterministic)
}
func (m *TeSrIgpArea_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeSrIgpArea_KEYS.Merge(m, src)
}
func (m *TeSrIgpArea_KEYS) XXX_Size() int {
	return xxx_messageInfo_TeSrIgpArea_KEYS.Size(m)
}
func (m *TeSrIgpArea_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_TeSrIgpArea_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_TeSrIgpArea_KEYS proto.InternalMessageInfo

func (m *TeSrIgpArea_KEYS) GetProtocol() string {
	if m != nil {
		return m.Protocol
	}
	return ""
}

func (m *TeSrIgpArea_KEYS) GetIgpInstance() string {
	if m != nil {
		return m.IgpInstance
	}
	return ""
}

func (m *TeSrIgpArea_KEYS) GetArea() uint32 {
	if m != nil {
		return m.Area
	}
	return 0
}

type TeSrIgpArea struct {
	SegmentRoutingEnabled bool     `protobuf:"varint,50,opt,name=segment_routing_enabled,json=segmentRoutingEnabled,proto3" json:"segment_routing_enabled,omitempty"`
	StrictSpfEnabled      bool     `protobuf:"varint,51,opt,name=strict_spf_enabled,json=strictSpfEnabled,proto3" json:"strict_spf_enabled,omitempty"`
	IgpType               string   `protobuf:"bytes,52,opt,name=igp_type,json=igpType,proto3" json:"igp_type,omitempty"`
	IgpInstanceXr         string   `protobuf:"bytes,53,opt,name=igp_instance_xr,json=igpInstanceXr,proto3" json:"igp_instance_xr,omitempty"`
	IgpArea               uint32   `protobuf:"varint,54,opt,name=igp_area,json=igpArea,proto3" json:"igp_area,omitempty"`
	IgpAreaFormat         string   `protobuf:"bytes,55,opt,name=igp_area_format,json=igpAreaFormat,proto3" json:"igp_area_format,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *TeSrIgpArea) Reset()         { *m = TeSrIgpArea{} }
func (m *TeSrIgpArea) String() string { return proto.CompactTextString(m) }
func (*TeSrIgpArea) ProtoMessage()    {}
func (*TeSrIgpArea) Descriptor() ([]byte, []int) {
	return fileDescriptor_e838964f544d822c, []int{1}
}

func (m *TeSrIgpArea) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TeSrIgpArea.Unmarshal(m, b)
}
func (m *TeSrIgpArea) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TeSrIgpArea.Marshal(b, m, deterministic)
}
func (m *TeSrIgpArea) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeSrIgpArea.Merge(m, src)
}
func (m *TeSrIgpArea) XXX_Size() int {
	return xxx_messageInfo_TeSrIgpArea.Size(m)
}
func (m *TeSrIgpArea) XXX_DiscardUnknown() {
	xxx_messageInfo_TeSrIgpArea.DiscardUnknown(m)
}

var xxx_messageInfo_TeSrIgpArea proto.InternalMessageInfo

func (m *TeSrIgpArea) GetSegmentRoutingEnabled() bool {
	if m != nil {
		return m.SegmentRoutingEnabled
	}
	return false
}

func (m *TeSrIgpArea) GetStrictSpfEnabled() bool {
	if m != nil {
		return m.StrictSpfEnabled
	}
	return false
}

func (m *TeSrIgpArea) GetIgpType() string {
	if m != nil {
		return m.IgpType
	}
	return ""
}

func (m *TeSrIgpArea) GetIgpInstanceXr() string {
	if m != nil {
		return m.IgpInstanceXr
	}
	return ""
}

func (m *TeSrIgpArea) GetIgpArea() uint32 {
	if m != nil {
		return m.IgpArea
	}
	return 0
}

func (m *TeSrIgpArea) GetIgpAreaFormat() string {
	if m != nil {
		return m.IgpAreaFormat
	}
	return ""
}

func init() {
	proto.RegisterType((*TeSrIgpArea_KEYS)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.segment_routing.srigp_area_infos.srigp_area_info.te_sr_igp_area_KEYS")
	proto.RegisterType((*TeSrIgpArea)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.segment_routing.srigp_area_infos.srigp_area_info.te_sr_igp_area")
}

func init() { proto.RegisterFile("te_sr_igp_area.proto", fileDescriptor_e838964f544d822c) }

var fileDescriptor_e838964f544d822c = []byte{
	// 295 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x50, 0x3d, 0x4f, 0xc3, 0x30,
	0x10, 0x55, 0x00, 0x41, 0x31, 0x14, 0x90, 0x01, 0x61, 0x98, 0x4a, 0x07, 0x94, 0x01, 0x65, 0xa0,
	0x50, 0x66, 0x86, 0x22, 0x21, 0xb6, 0x94, 0x01, 0xa6, 0x53, 0x1a, 0x9c, 0x60, 0x29, 0xb1, 0xad,
	0xb3, 0x91, 0xda, 0xff, 0xce, 0x80, 0x7c, 0xf9, 0x50, 0xdb, 0xcd, 0x7e, 0xef, 0xdd, 0x7b, 0xf7,
	0x8e, 0x5d, 0x78, 0x09, 0x0e, 0x41, 0x95, 0x16, 0x32, 0x94, 0x59, 0x62, 0xd1, 0x78, 0xc3, 0xd3,
	0x5c, 0xb9, 0xdc, 0x80, 0x32, 0x0e, 0x96, 0x08, 0xb5, 0xad, 0x1c, 0x78, 0x09, 0xc6, 0x4a, 0x4c,
	0xda, 0x4f, 0xe2, 0x64, 0x59, 0x4b, 0xed, 0x01, 0xcd, 0xaf, 0x57, 0xba, 0x4c, 0x1c, 0x76, 0x1e,
	0xa0, 0x74, 0x61, 0xdc, 0x36, 0x30, 0xfe, 0x61, 0xe7, 0x9b, 0x59, 0xf0, 0x3e, 0xfb, 0x9a, 0xf3,
	0x1b, 0x36, 0xa0, 0xcc, 0xdc, 0x54, 0x22, 0x1a, 0x45, 0xf1, 0x61, 0xda, 0xff, 0xf9, 0x2d, 0x3b,
	0x0e, 0x62, 0xa5, 0x9d, 0xcf, 0x74, 0x2e, 0xc5, 0x0e, 0xf1, 0x47, 0xaa, 0xb4, 0x6f, 0x2d, 0xc4,
	0x39, 0xdb, 0x0b, 0x5e, 0x62, 0x77, 0x14, 0xc5, 0xc3, 0x94, 0xde, 0xe3, 0xbf, 0x88, 0x9d, 0x6c,
	0x46, 0xf1, 0x29, 0xbb, 0xda, 0x5a, 0x18, 0xa4, 0xce, 0x16, 0x95, 0xfc, 0x16, 0x0f, 0xa3, 0x28,
	0x1e, 0xa4, 0x97, 0x2d, 0x9d, 0x36, 0xec, 0xac, 0x21, 0xf9, 0x3d, 0xe3, 0xce, 0xa3, 0xca, 0x3d,
	0x38, 0x5b, 0xf4, 0x23, 0x13, 0x1a, 0x39, 0x6b, 0x98, 0xb9, 0x2d, 0x3a, 0xf5, 0x35, 0x1b, 0x84,
	0x44, 0xbf, 0xb2, 0x52, 0x3c, 0xd2, 0xae, 0x07, 0xaa, 0xb4, 0x1f, 0x2b, 0x2b, 0xf9, 0x1d, 0x3b,
	0x5d, 0xaf, 0x02, 0x4b, 0x14, 0x4f, 0xa4, 0x18, 0xae, 0xb5, 0xf9, 0xc4, 0xce, 0x82, 0x3a, 0x4d,
	0xa9, 0x53, 0xb0, 0x78, 0x09, 0x1d, 0x5a, 0x0b, 0x3a, 0x5d, 0x61, 0xb0, 0xce, 0xbc, 0x78, 0xee,
	0x2d, 0x82, 0xe2, 0x95, 0xc0, 0xc5, 0x3e, 0xdd, 0x6f, 0xf2, 0x1f, 0x00, 0x00, 0xff, 0xff, 0x6c,
	0xd8, 0xf8, 0x89, 0xdb, 0x01, 0x00, 0x00,
}
