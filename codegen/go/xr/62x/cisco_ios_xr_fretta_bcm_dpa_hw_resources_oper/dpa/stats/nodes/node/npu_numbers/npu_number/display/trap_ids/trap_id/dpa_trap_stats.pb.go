/*
Copyright 2019 Cisco Systems

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: dpa_trap_stats.proto

package cisco_ios_xr_fretta_bcm_dpa_hw_resources_oper_dpa_stats_nodes_node_npu_numbers_npu_number_display_trap_ids_trap_id

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type DpaTrapStats_KEYS struct {
	NodeName             string   `protobuf:"bytes,1,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	NpuId                uint32   `protobuf:"varint,2,opt,name=npu_id,json=npuId,proto3" json:"npu_id,omitempty"`
	TrapId               uint32   `protobuf:"varint,3,opt,name=trap_id,json=trapId,proto3" json:"trap_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DpaTrapStats_KEYS) Reset()         { *m = DpaTrapStats_KEYS{} }
func (m *DpaTrapStats_KEYS) String() string { return proto.CompactTextString(m) }
func (*DpaTrapStats_KEYS) ProtoMessage()    {}
func (*DpaTrapStats_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_678d766e092bd7a0, []int{0}
}

func (m *DpaTrapStats_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DpaTrapStats_KEYS.Unmarshal(m, b)
}
func (m *DpaTrapStats_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DpaTrapStats_KEYS.Marshal(b, m, deterministic)
}
func (m *DpaTrapStats_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DpaTrapStats_KEYS.Merge(m, src)
}
func (m *DpaTrapStats_KEYS) XXX_Size() int {
	return xxx_messageInfo_DpaTrapStats_KEYS.Size(m)
}
func (m *DpaTrapStats_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_DpaTrapStats_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_DpaTrapStats_KEYS proto.InternalMessageInfo

func (m *DpaTrapStats_KEYS) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

func (m *DpaTrapStats_KEYS) GetNpuId() uint32 {
	if m != nil {
		return m.NpuId
	}
	return 0
}

func (m *DpaTrapStats_KEYS) GetTrapId() uint32 {
	if m != nil {
		return m.TrapId
	}
	return 0
}

type DpaTrapStats struct {
	TrapStrength         uint32   `protobuf:"varint,50,opt,name=trap_strength,json=trapStrength,proto3" json:"trap_strength,omitempty"`
	Priority             uint32   `protobuf:"varint,51,opt,name=priority,proto3" json:"priority,omitempty"`
	TrapIdXr             uint32   `protobuf:"varint,52,opt,name=trap_id_xr,json=trapIdXr,proto3" json:"trap_id_xr,omitempty"`
	Gport                uint32   `protobuf:"varint,53,opt,name=gport,proto3" json:"gport,omitempty"`
	FecId                uint32   `protobuf:"varint,54,opt,name=fec_id,json=fecId,proto3" json:"fec_id,omitempty"`
	PolicerId            uint32   `protobuf:"varint,55,opt,name=policer_id,json=policerId,proto3" json:"policer_id,omitempty"`
	StatsId              uint32   `protobuf:"varint,56,opt,name=stats_id,json=statsId,proto3" json:"stats_id,omitempty"`
	EncapId              uint32   `protobuf:"varint,57,opt,name=encap_id,json=encapId,proto3" json:"encap_id,omitempty"`
	McGroup              uint32   `protobuf:"varint,58,opt,name=mc_group,json=mcGroup,proto3" json:"mc_group,omitempty"`
	TrapString           string   `protobuf:"bytes,59,opt,name=trap_string,json=trapString,proto3" json:"trap_string,omitempty"`
	Id                   uint32   `protobuf:"varint,60,opt,name=id,proto3" json:"id,omitempty"`
	Offset               uint64   `protobuf:"varint,61,opt,name=offset,proto3" json:"offset,omitempty"`
	NpuId                uint64   `protobuf:"varint,62,opt,name=npu_id,json=npuId,proto3" json:"npu_id,omitempty"`
	PacketDropped        uint64   `protobuf:"varint,63,opt,name=packet_dropped,json=packetDropped,proto3" json:"packet_dropped,omitempty"`
	PacketAccepted       uint64   `protobuf:"varint,64,opt,name=packet_accepted,json=packetAccepted,proto3" json:"packet_accepted,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DpaTrapStats) Reset()         { *m = DpaTrapStats{} }
func (m *DpaTrapStats) String() string { return proto.CompactTextString(m) }
func (*DpaTrapStats) ProtoMessage()    {}
func (*DpaTrapStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_678d766e092bd7a0, []int{1}
}

func (m *DpaTrapStats) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DpaTrapStats.Unmarshal(m, b)
}
func (m *DpaTrapStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DpaTrapStats.Marshal(b, m, deterministic)
}
func (m *DpaTrapStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DpaTrapStats.Merge(m, src)
}
func (m *DpaTrapStats) XXX_Size() int {
	return xxx_messageInfo_DpaTrapStats.Size(m)
}
func (m *DpaTrapStats) XXX_DiscardUnknown() {
	xxx_messageInfo_DpaTrapStats.DiscardUnknown(m)
}

var xxx_messageInfo_DpaTrapStats proto.InternalMessageInfo

func (m *DpaTrapStats) GetTrapStrength() uint32 {
	if m != nil {
		return m.TrapStrength
	}
	return 0
}

func (m *DpaTrapStats) GetPriority() uint32 {
	if m != nil {
		return m.Priority
	}
	return 0
}

func (m *DpaTrapStats) GetTrapIdXr() uint32 {
	if m != nil {
		return m.TrapIdXr
	}
	return 0
}

func (m *DpaTrapStats) GetGport() uint32 {
	if m != nil {
		return m.Gport
	}
	return 0
}

func (m *DpaTrapStats) GetFecId() uint32 {
	if m != nil {
		return m.FecId
	}
	return 0
}

func (m *DpaTrapStats) GetPolicerId() uint32 {
	if m != nil {
		return m.PolicerId
	}
	return 0
}

func (m *DpaTrapStats) GetStatsId() uint32 {
	if m != nil {
		return m.StatsId
	}
	return 0
}

func (m *DpaTrapStats) GetEncapId() uint32 {
	if m != nil {
		return m.EncapId
	}
	return 0
}

func (m *DpaTrapStats) GetMcGroup() uint32 {
	if m != nil {
		return m.McGroup
	}
	return 0
}

func (m *DpaTrapStats) GetTrapString() string {
	if m != nil {
		return m.TrapString
	}
	return ""
}

func (m *DpaTrapStats) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *DpaTrapStats) GetOffset() uint64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *DpaTrapStats) GetNpuId() uint64 {
	if m != nil {
		return m.NpuId
	}
	return 0
}

func (m *DpaTrapStats) GetPacketDropped() uint64 {
	if m != nil {
		return m.PacketDropped
	}
	return 0
}

func (m *DpaTrapStats) GetPacketAccepted() uint64 {
	if m != nil {
		return m.PacketAccepted
	}
	return 0
}

func init() {
	proto.RegisterType((*DpaTrapStats_KEYS)(nil), "cisco_ios_xr_fretta_bcm_dpa_hw_resources_oper.dpa.stats.nodes.node.npu_numbers.npu_number.display.trap_ids.trap_id.dpa_trap_stats_KEYS")
	proto.RegisterType((*DpaTrapStats)(nil), "cisco_ios_xr_fretta_bcm_dpa_hw_resources_oper.dpa.stats.nodes.node.npu_numbers.npu_number.display.trap_ids.trap_id.dpa_trap_stats")
}

func init() { proto.RegisterFile("dpa_trap_stats.proto", fileDescriptor_678d766e092bd7a0) }

var fileDescriptor_678d766e092bd7a0 = []byte{
	// 425 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x92, 0x49, 0x6f, 0x13, 0x31,
	0x14, 0xc7, 0x95, 0x94, 0xa6, 0xc9, 0x83, 0x04, 0xc9, 0x14, 0x30, 0x9b, 0x88, 0x8a, 0x10, 0x39,
	0xcd, 0x81, 0xb2, 0xef, 0x48, 0x20, 0x14, 0x21, 0x71, 0x48, 0x2f, 0x70, 0xb2, 0x1c, 0xfb, 0xcd,
	0xd4, 0xa2, 0x63, 0x5b, 0xcf, 0x1e, 0xd1, 0x7e, 0x37, 0x3e, 0x1c, 0xf2, 0x52, 0xd4, 0x5e, 0x46,
	0xfe, 0xff, 0x7f, 0x6f, 0xb5, 0x07, 0xf6, 0xb5, 0x97, 0x22, 0x92, 0xf4, 0x22, 0x44, 0x19, 0x43,
	0xe3, 0xc9, 0x45, 0xc7, 0x48, 0x99, 0xa0, 0x9c, 0x30, 0x2e, 0x88, 0x53, 0x12, 0x2d, 0x61, 0x8c,
	0x52, 0x6c, 0x55, 0x2f, 0x52, 0xf4, 0xf1, 0x1f, 0x41, 0x18, 0xdc, 0x40, 0x0a, 0x83, 0x70, 0x1e,
	0xa9, 0xd1, 0x5e, 0x36, 0x25, 0xdd, 0x3a, 0x8d, 0xe5, 0xdb, 0x58, 0x3f, 0x08, 0x3b, 0xf4, 0x5b,
	0xa4, 0x70, 0xe1, 0xdc, 0x68, 0x13, 0xfc, 0x89, 0x3c, 0x6b, 0x72, 0x4f, 0xa3, 0xc3, 0xf9, 0xe1,
	0x60, 0x0b, 0x37, 0x2e, 0xcf, 0x22, 0xbe, 0x7f, 0xfd, 0x75, 0xc4, 0xee, 0xc1, 0x2c, 0x95, 0x13,
	0x56, 0xf6, 0xc8, 0x47, 0xcb, 0xd1, 0x6a, 0xb6, 0x99, 0x26, 0xe3, 0x87, 0xec, 0x91, 0xdd, 0x84,
	0x49, 0x2a, 0x6d, 0x34, 0x1f, 0x2f, 0x47, 0xab, 0xf9, 0x66, 0xd7, 0xfa, 0x61, 0xad, 0xd9, 0x6d,
	0xd8, 0xab, 0x55, 0xf9, 0x4e, 0xf6, 0x27, 0x49, 0xae, 0xf5, 0xc1, 0xdf, 0x1d, 0x58, 0x5c, 0x6e,
	0xc2, 0x1e, 0xc1, 0xbc, 0x2a, 0x42, 0xdb, 0xc5, 0x63, 0xfe, 0x34, 0x67, 0x5c, 0x4b, 0xe6, 0x51,
	0xf5, 0xd8, 0x5d, 0x98, 0x7a, 0x32, 0x8e, 0x4c, 0x3c, 0xe3, 0x87, 0x99, 0xff, 0xd7, 0xec, 0x3e,
	0x40, 0x6d, 0x26, 0x4e, 0x89, 0x3f, 0x2b, 0xb4, 0xf4, 0xfb, 0x49, 0x6c, 0x1f, 0x76, 0x3b, 0xef,
	0x28, 0xf2, 0xe7, 0x65, 0xc0, 0x2c, 0xd2, 0xdc, 0x2d, 0xaa, 0x34, 0xdf, 0x8b, 0x62, 0xb7, 0xa8,
	0xd6, 0x9a, 0x3d, 0x00, 0xf0, 0xee, 0xc4, 0x28, 0xa4, 0x84, 0x5e, 0x66, 0x34, 0xab, 0xce, 0x5a,
	0xb3, 0x3b, 0x30, 0x2d, 0x17, 0x63, 0x34, 0x7f, 0x95, 0xe1, 0x5e, 0xd6, 0x05, 0xa1, 0x55, 0x65,
	0xe5, 0xd7, 0x05, 0x65, 0x5d, 0x50, 0xaf, 0x44, 0x47, 0x6e, 0xf0, 0xfc, 0x4d, 0x41, 0xbd, 0xfa,
	0x96, 0x24, 0x7b, 0x08, 0x57, 0xcf, 0x77, 0x37, 0xb6, 0xe3, 0x6f, 0xf3, 0xed, 0x42, 0xdd, 0xdc,
	0xd8, 0x8e, 0x2d, 0x60, 0x6c, 0x34, 0x7f, 0x97, 0xb3, 0xc6, 0x46, 0xb3, 0x5b, 0x30, 0x71, 0x6d,
	0x1b, 0x30, 0xf2, 0xf7, 0xcb, 0xd1, 0xea, 0xca, 0xa6, 0xaa, 0x0b, 0xef, 0xf0, 0x21, 0xfb, 0xf5,
	0x1d, 0x1e, 0xc3, 0xc2, 0x4b, 0xf5, 0x1b, 0xa3, 0xd0, 0xe4, 0xbc, 0x47, 0xcd, 0x3f, 0x66, 0x3c,
	0x2f, 0xee, 0x97, 0x62, 0xb2, 0x27, 0x70, 0xbd, 0x86, 0x49, 0xa5, 0xd0, 0x47, 0xd4, 0xfc, 0x53,
	0x8e, 0xab, 0xd9, 0x9f, 0xab, 0xbb, 0x9d, 0xe4, 0xbf, 0xf3, 0xf0, 0x5f, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x48, 0x86, 0x38, 0x4e, 0xb5, 0x02, 0x00, 0x00,
}
