/*
Copyright 2019 Cisco Systems

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ppp_protocol_info.proto

package cisco_ios_xr_ppp_ma_oper_ppp_nodes_node_node_interfaces_node_interface

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type PppProtocolInfo_KEYS struct {
	NodeName             string   `protobuf:"bytes,1,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	Interface            string   `protobuf:"bytes,2,opt,name=interface,proto3" json:"interface,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PppProtocolInfo_KEYS) Reset()         { *m = PppProtocolInfo_KEYS{} }
func (m *PppProtocolInfo_KEYS) String() string { return proto.CompactTextString(m) }
func (*PppProtocolInfo_KEYS) ProtoMessage()    {}
func (*PppProtocolInfo_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_ead0a4c1ec690653, []int{0}
}

func (m *PppProtocolInfo_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PppProtocolInfo_KEYS.Unmarshal(m, b)
}
func (m *PppProtocolInfo_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PppProtocolInfo_KEYS.Marshal(b, m, deterministic)
}
func (m *PppProtocolInfo_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PppProtocolInfo_KEYS.Merge(m, src)
}
func (m *PppProtocolInfo_KEYS) XXX_Size() int {
	return xxx_messageInfo_PppProtocolInfo_KEYS.Size(m)
}
func (m *PppProtocolInfo_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_PppProtocolInfo_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_PppProtocolInfo_KEYS proto.InternalMessageInfo

func (m *PppProtocolInfo_KEYS) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

func (m *PppProtocolInfo_KEYS) GetInterface() string {
	if m != nil {
		return m.Interface
	}
	return ""
}

type PppMpMbrInfo struct {
	Interface            string   `protobuf:"bytes,1,opt,name=interface,proto3" json:"interface,omitempty"`
	State                string   `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PppMpMbrInfo) Reset()         { *m = PppMpMbrInfo{} }
func (m *PppMpMbrInfo) String() string { return proto.CompactTextString(m) }
func (*PppMpMbrInfo) ProtoMessage()    {}
func (*PppMpMbrInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_ead0a4c1ec690653, []int{1}
}

func (m *PppMpMbrInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PppMpMbrInfo.Unmarshal(m, b)
}
func (m *PppMpMbrInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PppMpMbrInfo.Marshal(b, m, deterministic)
}
func (m *PppMpMbrInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PppMpMbrInfo.Merge(m, src)
}
func (m *PppMpMbrInfo) XXX_Size() int {
	return xxx_messageInfo_PppMpMbrInfo.Size(m)
}
func (m *PppMpMbrInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PppMpMbrInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PppMpMbrInfo proto.InternalMessageInfo

func (m *PppMpMbrInfo) GetInterface() string {
	if m != nil {
		return m.Interface
	}
	return ""
}

func (m *PppMpMbrInfo) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

type PppMpInfo struct {
	IsMpBundle           bool            `protobuf:"varint,1,opt,name=is_mp_bundle,json=isMpBundle,proto3" json:"is_mp_bundle,omitempty"`
	MpBundleInterface    string          `protobuf:"bytes,2,opt,name=mp_bundle_interface,json=mpBundleInterface,proto3" json:"mp_bundle_interface,omitempty"`
	IsMpBundleMember     bool            `protobuf:"varint,3,opt,name=is_mp_bundle_member,json=isMpBundleMember,proto3" json:"is_mp_bundle_member,omitempty"`
	MpGroup              uint32          `protobuf:"varint,4,opt,name=mp_group,json=mpGroup,proto3" json:"mp_group,omitempty"`
	ActiveLinks          uint32          `protobuf:"varint,5,opt,name=active_links,json=activeLinks,proto3" json:"active_links,omitempty"`
	InactiveLinks        uint32          `protobuf:"varint,6,opt,name=inactive_links,json=inactiveLinks,proto3" json:"inactive_links,omitempty"`
	MinimumActiveLinks   uint32          `protobuf:"varint,7,opt,name=minimum_active_links,json=minimumActiveLinks,proto3" json:"minimum_active_links,omitempty"`
	MpState              string          `protobuf:"bytes,8,opt,name=mp_state,json=mpState,proto3" json:"mp_state,omitempty"`
	MpMemberInfoArray    []*PppMpMbrInfo `protobuf:"bytes,9,rep,name=mp_member_info_array,json=mpMemberInfoArray,proto3" json:"mp_member_info_array,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *PppMpInfo) Reset()         { *m = PppMpInfo{} }
func (m *PppMpInfo) String() string { return proto.CompactTextString(m) }
func (*PppMpInfo) ProtoMessage()    {}
func (*PppMpInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_ead0a4c1ec690653, []int{2}
}

func (m *PppMpInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PppMpInfo.Unmarshal(m, b)
}
func (m *PppMpInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PppMpInfo.Marshal(b, m, deterministic)
}
func (m *PppMpInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PppMpInfo.Merge(m, src)
}
func (m *PppMpInfo) XXX_Size() int {
	return xxx_messageInfo_PppMpInfo.Size(m)
}
func (m *PppMpInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PppMpInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PppMpInfo proto.InternalMessageInfo

func (m *PppMpInfo) GetIsMpBundle() bool {
	if m != nil {
		return m.IsMpBundle
	}
	return false
}

func (m *PppMpInfo) GetMpBundleInterface() string {
	if m != nil {
		return m.MpBundleInterface
	}
	return ""
}

func (m *PppMpInfo) GetIsMpBundleMember() bool {
	if m != nil {
		return m.IsMpBundleMember
	}
	return false
}

func (m *PppMpInfo) GetMpGroup() uint32 {
	if m != nil {
		return m.MpGroup
	}
	return 0
}

func (m *PppMpInfo) GetActiveLinks() uint32 {
	if m != nil {
		return m.ActiveLinks
	}
	return 0
}

func (m *PppMpInfo) GetInactiveLinks() uint32 {
	if m != nil {
		return m.InactiveLinks
	}
	return 0
}

func (m *PppMpInfo) GetMinimumActiveLinks() uint32 {
	if m != nil {
		return m.MinimumActiveLinks
	}
	return 0
}

func (m *PppMpInfo) GetMpState() string {
	if m != nil {
		return m.MpState
	}
	return ""
}

func (m *PppMpInfo) GetMpMemberInfoArray() []*PppMpMbrInfo {
	if m != nil {
		return m.MpMemberInfoArray
	}
	return nil
}

type PppTimeoutInfo struct {
	Minutes              uint32   `protobuf:"varint,1,opt,name=minutes,proto3" json:"minutes,omitempty"`
	Seconds              uint32   `protobuf:"varint,2,opt,name=seconds,proto3" json:"seconds,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PppTimeoutInfo) Reset()         { *m = PppTimeoutInfo{} }
func (m *PppTimeoutInfo) String() string { return proto.CompactTextString(m) }
func (*PppTimeoutInfo) ProtoMessage()    {}
func (*PppTimeoutInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_ead0a4c1ec690653, []int{3}
}

func (m *PppTimeoutInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PppTimeoutInfo.Unmarshal(m, b)
}
func (m *PppTimeoutInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PppTimeoutInfo.Marshal(b, m, deterministic)
}
func (m *PppTimeoutInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PppTimeoutInfo.Merge(m, src)
}
func (m *PppTimeoutInfo) XXX_Size() int {
	return xxx_messageInfo_PppTimeoutInfo.Size(m)
}
func (m *PppTimeoutInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PppTimeoutInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PppTimeoutInfo proto.InternalMessageInfo

func (m *PppTimeoutInfo) GetMinutes() uint32 {
	if m != nil {
		return m.Minutes
	}
	return 0
}

func (m *PppTimeoutInfo) GetSeconds() uint32 {
	if m != nil {
		return m.Seconds
	}
	return 0
}

type PppAuthInfo struct {
	IsAuthenticated      bool     `protobuf:"varint,1,opt,name=is_authenticated,json=isAuthenticated,proto3" json:"is_authenticated,omitempty"`
	IsSsoAuthenticated   bool     `protobuf:"varint,2,opt,name=is_sso_authenticated,json=isSsoAuthenticated,proto3" json:"is_sso_authenticated,omitempty"`
	OfUsAuth             uint32   `protobuf:"varint,3,opt,name=of_us_auth,json=ofUsAuth,proto3" json:"of_us_auth,omitempty"`
	OfPeerAuth           uint32   `protobuf:"varint,4,opt,name=of_peer_auth,json=ofPeerAuth,proto3" json:"of_peer_auth,omitempty"`
	OfUsName             string   `protobuf:"bytes,5,opt,name=of_us_name,json=ofUsName,proto3" json:"of_us_name,omitempty"`
	OfPeerName           string   `protobuf:"bytes,6,opt,name=of_peer_name,json=ofPeerName,proto3" json:"of_peer_name,omitempty"`
	OfUsSsoState         string   `protobuf:"bytes,7,opt,name=of_us_sso_state,json=ofUsSsoState,proto3" json:"of_us_sso_state,omitempty"`
	OfPeerSsoState       string   `protobuf:"bytes,8,opt,name=of_peer_sso_state,json=ofPeerSsoState,proto3" json:"of_peer_sso_state,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PppAuthInfo) Reset()         { *m = PppAuthInfo{} }
func (m *PppAuthInfo) String() string { return proto.CompactTextString(m) }
func (*PppAuthInfo) ProtoMessage()    {}
func (*PppAuthInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_ead0a4c1ec690653, []int{4}
}

func (m *PppAuthInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PppAuthInfo.Unmarshal(m, b)
}
func (m *PppAuthInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PppAuthInfo.Marshal(b, m, deterministic)
}
func (m *PppAuthInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PppAuthInfo.Merge(m, src)
}
func (m *PppAuthInfo) XXX_Size() int {
	return xxx_messageInfo_PppAuthInfo.Size(m)
}
func (m *PppAuthInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PppAuthInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PppAuthInfo proto.InternalMessageInfo

func (m *PppAuthInfo) GetIsAuthenticated() bool {
	if m != nil {
		return m.IsAuthenticated
	}
	return false
}

func (m *PppAuthInfo) GetIsSsoAuthenticated() bool {
	if m != nil {
		return m.IsSsoAuthenticated
	}
	return false
}

func (m *PppAuthInfo) GetOfUsAuth() uint32 {
	if m != nil {
		return m.OfUsAuth
	}
	return 0
}

func (m *PppAuthInfo) GetOfPeerAuth() uint32 {
	if m != nil {
		return m.OfPeerAuth
	}
	return 0
}

func (m *PppAuthInfo) GetOfUsName() string {
	if m != nil {
		return m.OfUsName
	}
	return ""
}

func (m *PppAuthInfo) GetOfPeerName() string {
	if m != nil {
		return m.OfPeerName
	}
	return ""
}

func (m *PppAuthInfo) GetOfUsSsoState() string {
	if m != nil {
		return m.OfUsSsoState
	}
	return ""
}

func (m *PppAuthInfo) GetOfPeerSsoState() string {
	if m != nil {
		return m.OfPeerSsoState
	}
	return ""
}

type PppIpcpIphcInfo struct {
	CompressionType      string   `protobuf:"bytes,1,opt,name=compression_type,json=compressionType,proto3" json:"compression_type,omitempty"`
	TcpSpace             uint32   `protobuf:"varint,2,opt,name=tcp_space,json=tcpSpace,proto3" json:"tcp_space,omitempty"`
	NonTcpSpace          uint32   `protobuf:"varint,3,opt,name=non_tcp_space,json=nonTcpSpace,proto3" json:"non_tcp_space,omitempty"`
	MaxPeriod            uint32   `protobuf:"varint,4,opt,name=max_period,json=maxPeriod,proto3" json:"max_period,omitempty"`
	MaxTime              uint32   `protobuf:"varint,5,opt,name=max_time,json=maxTime,proto3" json:"max_time,omitempty"`
	MaxHeader            uint32   `protobuf:"varint,6,opt,name=max_header,json=maxHeader,proto3" json:"max_header,omitempty"`
	RtpCompression       bool     `protobuf:"varint,7,opt,name=rtp_compression,json=rtpCompression,proto3" json:"rtp_compression,omitempty"`
	EcRtpCompression     bool     `protobuf:"varint,8,opt,name=ec_rtp_compression,json=ecRtpCompression,proto3" json:"ec_rtp_compression,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PppIpcpIphcInfo) Reset()         { *m = PppIpcpIphcInfo{} }
func (m *PppIpcpIphcInfo) String() string { return proto.CompactTextString(m) }
func (*PppIpcpIphcInfo) ProtoMessage()    {}
func (*PppIpcpIphcInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_ead0a4c1ec690653, []int{5}
}

func (m *PppIpcpIphcInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PppIpcpIphcInfo.Unmarshal(m, b)
}
func (m *PppIpcpIphcInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PppIpcpIphcInfo.Marshal(b, m, deterministic)
}
func (m *PppIpcpIphcInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PppIpcpIphcInfo.Merge(m, src)
}
func (m *PppIpcpIphcInfo) XXX_Size() int {
	return xxx_messageInfo_PppIpcpIphcInfo.Size(m)
}
func (m *PppIpcpIphcInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PppIpcpIphcInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PppIpcpIphcInfo proto.InternalMessageInfo

func (m *PppIpcpIphcInfo) GetCompressionType() string {
	if m != nil {
		return m.CompressionType
	}
	return ""
}

func (m *PppIpcpIphcInfo) GetTcpSpace() uint32 {
	if m != nil {
		return m.TcpSpace
	}
	return 0
}

func (m *PppIpcpIphcInfo) GetNonTcpSpace() uint32 {
	if m != nil {
		return m.NonTcpSpace
	}
	return 0
}

func (m *PppIpcpIphcInfo) GetMaxPeriod() uint32 {
	if m != nil {
		return m.MaxPeriod
	}
	return 0
}

func (m *PppIpcpIphcInfo) GetMaxTime() uint32 {
	if m != nil {
		return m.MaxTime
	}
	return 0
}

func (m *PppIpcpIphcInfo) GetMaxHeader() uint32 {
	if m != nil {
		return m.MaxHeader
	}
	return 0
}

func (m *PppIpcpIphcInfo) GetRtpCompression() bool {
	if m != nil {
		return m.RtpCompression
	}
	return false
}

func (m *PppIpcpIphcInfo) GetEcRtpCompression() bool {
	if m != nil {
		return m.EcRtpCompression
	}
	return false
}

type PppIpcpInfo struct {
	LocalAddress         string           `protobuf:"bytes,1,opt,name=local_address,json=localAddress,proto3" json:"local_address,omitempty"`
	PeerAddress          string           `protobuf:"bytes,2,opt,name=peer_address,json=peerAddress,proto3" json:"peer_address,omitempty"`
	PeerNetmask          string           `protobuf:"bytes,3,opt,name=peer_netmask,json=peerNetmask,proto3" json:"peer_netmask,omitempty"`
	DnsPrimary           string           `protobuf:"bytes,4,opt,name=dns_primary,json=dnsPrimary,proto3" json:"dns_primary,omitempty"`
	DnsSecondary         string           `protobuf:"bytes,5,opt,name=dns_secondary,json=dnsSecondary,proto3" json:"dns_secondary,omitempty"`
	WinsPrimary          string           `protobuf:"bytes,6,opt,name=wins_primary,json=winsPrimary,proto3" json:"wins_primary,omitempty"`
	WinsSecondary        string           `protobuf:"bytes,7,opt,name=wins_secondary,json=winsSecondary,proto3" json:"wins_secondary,omitempty"`
	IsIphcConfigured     bool             `protobuf:"varint,8,opt,name=is_iphc_configured,json=isIphcConfigured,proto3" json:"is_iphc_configured,omitempty"`
	LocalIphcOptions     *PppIpcpIphcInfo `protobuf:"bytes,9,opt,name=local_iphc_options,json=localIphcOptions,proto3" json:"local_iphc_options,omitempty"`
	PeerIphcOptions      *PppIpcpIphcInfo `protobuf:"bytes,10,opt,name=peer_iphc_options,json=peerIphcOptions,proto3" json:"peer_iphc_options,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *PppIpcpInfo) Reset()         { *m = PppIpcpInfo{} }
func (m *PppIpcpInfo) String() string { return proto.CompactTextString(m) }
func (*PppIpcpInfo) ProtoMessage()    {}
func (*PppIpcpInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_ead0a4c1ec690653, []int{6}
}

func (m *PppIpcpInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PppIpcpInfo.Unmarshal(m, b)
}
func (m *PppIpcpInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PppIpcpInfo.Marshal(b, m, deterministic)
}
func (m *PppIpcpInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PppIpcpInfo.Merge(m, src)
}
func (m *PppIpcpInfo) XXX_Size() int {
	return xxx_messageInfo_PppIpcpInfo.Size(m)
}
func (m *PppIpcpInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PppIpcpInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PppIpcpInfo proto.InternalMessageInfo

func (m *PppIpcpInfo) GetLocalAddress() string {
	if m != nil {
		return m.LocalAddress
	}
	return ""
}

func (m *PppIpcpInfo) GetPeerAddress() string {
	if m != nil {
		return m.PeerAddress
	}
	return ""
}

func (m *PppIpcpInfo) GetPeerNetmask() string {
	if m != nil {
		return m.PeerNetmask
	}
	return ""
}

func (m *PppIpcpInfo) GetDnsPrimary() string {
	if m != nil {
		return m.DnsPrimary
	}
	return ""
}

func (m *PppIpcpInfo) GetDnsSecondary() string {
	if m != nil {
		return m.DnsSecondary
	}
	return ""
}

func (m *PppIpcpInfo) GetWinsPrimary() string {
	if m != nil {
		return m.WinsPrimary
	}
	return ""
}

func (m *PppIpcpInfo) GetWinsSecondary() string {
	if m != nil {
		return m.WinsSecondary
	}
	return ""
}

func (m *PppIpcpInfo) GetIsIphcConfigured() bool {
	if m != nil {
		return m.IsIphcConfigured
	}
	return false
}

func (m *PppIpcpInfo) GetLocalIphcOptions() *PppIpcpIphcInfo {
	if m != nil {
		return m.LocalIphcOptions
	}
	return nil
}

func (m *PppIpcpInfo) GetPeerIphcOptions() *PppIpcpIphcInfo {
	if m != nil {
		return m.PeerIphcOptions
	}
	return nil
}

type PppIpcpiwInfo struct {
	LocalAddress         string   `protobuf:"bytes,1,opt,name=local_address,json=localAddress,proto3" json:"local_address,omitempty"`
	PeerAddress          string   `protobuf:"bytes,2,opt,name=peer_address,json=peerAddress,proto3" json:"peer_address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PppIpcpiwInfo) Reset()         { *m = PppIpcpiwInfo{} }
func (m *PppIpcpiwInfo) String() string { return proto.CompactTextString(m) }
func (*PppIpcpiwInfo) ProtoMessage()    {}
func (*PppIpcpiwInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_ead0a4c1ec690653, []int{7}
}

func (m *PppIpcpiwInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PppIpcpiwInfo.Unmarshal(m, b)
}
func (m *PppIpcpiwInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PppIpcpiwInfo.Marshal(b, m, deterministic)
}
func (m *PppIpcpiwInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PppIpcpiwInfo.Merge(m, src)
}
func (m *PppIpcpiwInfo) XXX_Size() int {
	return xxx_messageInfo_PppIpcpiwInfo.Size(m)
}
func (m *PppIpcpiwInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PppIpcpiwInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PppIpcpiwInfo proto.InternalMessageInfo

func (m *PppIpcpiwInfo) GetLocalAddress() string {
	if m != nil {
		return m.LocalAddress
	}
	return ""
}

func (m *PppIpcpiwInfo) GetPeerAddress() string {
	if m != nil {
		return m.PeerAddress
	}
	return ""
}

type PppIpv6CpInfo struct {
	LocalAddress         string   `protobuf:"bytes,1,opt,name=local_address,json=localAddress,proto3" json:"local_address,omitempty"`
	PeerAddress          string   `protobuf:"bytes,2,opt,name=peer_address,json=peerAddress,proto3" json:"peer_address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PppIpv6CpInfo) Reset()         { *m = PppIpv6CpInfo{} }
func (m *PppIpv6CpInfo) String() string { return proto.CompactTextString(m) }
func (*PppIpv6CpInfo) ProtoMessage()    {}
func (*PppIpv6CpInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_ead0a4c1ec690653, []int{8}
}

func (m *PppIpv6CpInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PppIpv6CpInfo.Unmarshal(m, b)
}
func (m *PppIpv6CpInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PppIpv6CpInfo.Marshal(b, m, deterministic)
}
func (m *PppIpv6CpInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PppIpv6CpInfo.Merge(m, src)
}
func (m *PppIpv6CpInfo) XXX_Size() int {
	return xxx_messageInfo_PppIpv6CpInfo.Size(m)
}
func (m *PppIpv6CpInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PppIpv6CpInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PppIpv6CpInfo proto.InternalMessageInfo

func (m *PppIpv6CpInfo) GetLocalAddress() string {
	if m != nil {
		return m.LocalAddress
	}
	return ""
}

func (m *PppIpv6CpInfo) GetPeerAddress() string {
	if m != nil {
		return m.PeerAddress
	}
	return ""
}

type PppNcp struct {
	Type                 string         `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	IpcpInfo             *PppIpcpInfo   `protobuf:"bytes,2,opt,name=ipcp_info,json=ipcpInfo,proto3" json:"ipcp_info,omitempty"`
	IpcpiwInfo           *PppIpcpiwInfo `protobuf:"bytes,3,opt,name=ipcpiw_info,json=ipcpiwInfo,proto3" json:"ipcpiw_info,omitempty"`
	Ipv6CpInfo           *PppIpv6CpInfo `protobuf:"bytes,4,opt,name=ipv6cp_info,json=ipv6cpInfo,proto3" json:"ipv6cp_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *PppNcp) Reset()         { *m = PppNcp{} }
func (m *PppNcp) String() string { return proto.CompactTextString(m) }
func (*PppNcp) ProtoMessage()    {}
func (*PppNcp) Descriptor() ([]byte, []int) {
	return fileDescriptor_ead0a4c1ec690653, []int{9}
}

func (m *PppNcp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PppNcp.Unmarshal(m, b)
}
func (m *PppNcp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PppNcp.Marshal(b, m, deterministic)
}
func (m *PppNcp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PppNcp.Merge(m, src)
}
func (m *PppNcp) XXX_Size() int {
	return xxx_messageInfo_PppNcp.Size(m)
}
func (m *PppNcp) XXX_DiscardUnknown() {
	xxx_messageInfo_PppNcp.DiscardUnknown(m)
}

var xxx_messageInfo_PppNcp proto.InternalMessageInfo

func (m *PppNcp) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *PppNcp) GetIpcpInfo() *PppIpcpInfo {
	if m != nil {
		return m.IpcpInfo
	}
	return nil
}

func (m *PppNcp) GetIpcpiwInfo() *PppIpcpiwInfo {
	if m != nil {
		return m.IpcpiwInfo
	}
	return nil
}

func (m *PppNcp) GetIpv6CpInfo() *PppIpv6CpInfo {
	if m != nil {
		return m.Ipv6CpInfo
	}
	return nil
}

type PppNcpInfo struct {
	NcpState             string   `protobuf:"bytes,1,opt,name=ncp_state,json=ncpState,proto3" json:"ncp_state,omitempty"`
	NcpssoState          string   `protobuf:"bytes,2,opt,name=ncpsso_state,json=ncpssoState,proto3" json:"ncpsso_state,omitempty"`
	IsPassive            bool     `protobuf:"varint,3,opt,name=is_passive,json=isPassive,proto3" json:"is_passive,omitempty"`
	NcpIdentifier        string   `protobuf:"bytes,4,opt,name=ncp_identifier,json=ncpIdentifier,proto3" json:"ncp_identifier,omitempty"`
	NcpInfo              *PppNcp  `protobuf:"bytes,5,opt,name=ncp_info,json=ncpInfo,proto3" json:"ncp_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PppNcpInfo) Reset()         { *m = PppNcpInfo{} }
func (m *PppNcpInfo) String() string { return proto.CompactTextString(m) }
func (*PppNcpInfo) ProtoMessage()    {}
func (*PppNcpInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_ead0a4c1ec690653, []int{10}
}

func (m *PppNcpInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PppNcpInfo.Unmarshal(m, b)
}
func (m *PppNcpInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PppNcpInfo.Marshal(b, m, deterministic)
}
func (m *PppNcpInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PppNcpInfo.Merge(m, src)
}
func (m *PppNcpInfo) XXX_Size() int {
	return xxx_messageInfo_PppNcpInfo.Size(m)
}
func (m *PppNcpInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PppNcpInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PppNcpInfo proto.InternalMessageInfo

func (m *PppNcpInfo) GetNcpState() string {
	if m != nil {
		return m.NcpState
	}
	return ""
}

func (m *PppNcpInfo) GetNcpssoState() string {
	if m != nil {
		return m.NcpssoState
	}
	return ""
}

func (m *PppNcpInfo) GetIsPassive() bool {
	if m != nil {
		return m.IsPassive
	}
	return false
}

func (m *PppNcpInfo) GetNcpIdentifier() string {
	if m != nil {
		return m.NcpIdentifier
	}
	return ""
}

func (m *PppNcpInfo) GetNcpInfo() *PppNcp {
	if m != nil {
		return m.NcpInfo
	}
	return nil
}

type PppProtocolInfo struct {
	ParentState           uint32          `protobuf:"varint,50,opt,name=parent_state,json=parentState,proto3" json:"parent_state,omitempty"`
	LineState             uint32          `protobuf:"varint,51,opt,name=line_state,json=lineState,proto3" json:"line_state,omitempty"`
	IsLoopbackDetected    bool            `protobuf:"varint,52,opt,name=is_loopback_detected,json=isLoopbackDetected,proto3" json:"is_loopback_detected,omitempty"`
	CapsIdbSrgRole        uint32          `protobuf:"varint,53,opt,name=caps_idb_srg_role,json=capsIdbSrgRole,proto3" json:"caps_idb_srg_role,omitempty"`
	SessionSrgRole        uint32          `protobuf:"varint,54,opt,name=session_srg_role,json=sessionSrgRole,proto3" json:"session_srg_role,omitempty"`
	KeepalivePeriod       uint32          `protobuf:"varint,55,opt,name=keepalive_period,json=keepalivePeriod,proto3" json:"keepalive_period,omitempty"`
	KeepaliveRetryCount   uint32          `protobuf:"varint,56,opt,name=keepalive_retry_count,json=keepaliveRetryCount,proto3" json:"keepalive_retry_count,omitempty"`
	IsSsrpConfigured      bool            `protobuf:"varint,57,opt,name=is_ssrp_configured,json=isSsrpConfigured,proto3" json:"is_ssrp_configured,omitempty"`
	IsL2Ac                bool            `protobuf:"varint,58,opt,name=is_l2ac,json=isL2ac,proto3" json:"is_l2ac,omitempty"`
	Provisioned           bool            `protobuf:"varint,59,opt,name=provisioned,proto3" json:"provisioned,omitempty"`
	IpInterworkingEnabled bool            `protobuf:"varint,60,opt,name=ip_interworking_enabled,json=ipInterworkingEnabled,proto3" json:"ip_interworking_enabled,omitempty"`
	XconnectId            uint32          `protobuf:"varint,61,opt,name=xconnect_id,json=xconnectId,proto3" json:"xconnect_id,omitempty"`
	IsTunneledSession     bool            `protobuf:"varint,62,opt,name=is_tunneled_session,json=isTunneledSession,proto3" json:"is_tunneled_session,omitempty"`
	SsrpPeerId            string          `protobuf:"bytes,63,opt,name=ssrp_peer_id,json=ssrpPeerId,proto3" json:"ssrp_peer_id,omitempty"`
	LcpState              string          `protobuf:"bytes,64,opt,name=lcp_state,json=lcpState,proto3" json:"lcp_state,omitempty"`
	LcpssoState           string          `protobuf:"bytes,65,opt,name=lcpsso_state,json=lcpssoState,proto3" json:"lcpsso_state,omitempty"`
	IsLcpDelayed          bool            `protobuf:"varint,66,opt,name=is_lcp_delayed,json=isLcpDelayed,proto3" json:"is_lcp_delayed,omitempty"`
	LocalMru              uint32          `protobuf:"varint,67,opt,name=local_mru,json=localMru,proto3" json:"local_mru,omitempty"`
	PeerMru               uint32          `protobuf:"varint,68,opt,name=peer_mru,json=peerMru,proto3" json:"peer_mru,omitempty"`
	LocalMrru             uint32          `protobuf:"varint,69,opt,name=local_mrru,json=localMrru,proto3" json:"local_mrru,omitempty"`
	PeerMrru              uint32          `protobuf:"varint,70,opt,name=peer_mrru,json=peerMrru,proto3" json:"peer_mrru,omitempty"`
	LocalEd               string          `protobuf:"bytes,71,opt,name=local_ed,json=localEd,proto3" json:"local_ed,omitempty"`
	PeerEd                string          `protobuf:"bytes,72,opt,name=peer_ed,json=peerEd,proto3" json:"peer_ed,omitempty"`
	IsMcmpEnabled         bool            `protobuf:"varint,73,opt,name=is_mcmp_enabled,json=isMcmpEnabled,proto3" json:"is_mcmp_enabled,omitempty"`
	LocalMcmpClasses      uint32          `protobuf:"varint,74,opt,name=local_mcmp_classes,json=localMcmpClasses,proto3" json:"local_mcmp_classes,omitempty"`
	PeerMcmpClasses       uint32          `protobuf:"varint,75,opt,name=peer_mcmp_classes,json=peerMcmpClasses,proto3" json:"peer_mcmp_classes,omitempty"`
	MpInfo                *PppMpInfo      `protobuf:"bytes,76,opt,name=mp_info,json=mpInfo,proto3" json:"mp_info,omitempty"`
	SessionExpires        uint32          `protobuf:"varint,77,opt,name=session_expires,json=sessionExpires,proto3" json:"session_expires,omitempty"`
	ConfiguredTimeout     *PppTimeoutInfo `protobuf:"bytes,78,opt,name=configured_timeout,json=configuredTimeout,proto3" json:"configured_timeout,omitempty"`
	AuthInfo              *PppAuthInfo    `protobuf:"bytes,79,opt,name=auth_info,json=authInfo,proto3" json:"auth_info,omitempty"`
	NcpInfoArray          []*PppNcpInfo   `protobuf:"bytes,80,rep,name=ncp_info_array,json=ncpInfoArray,proto3" json:"ncp_info_array,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}        `json:"-"`
	XXX_unrecognized      []byte          `json:"-"`
	XXX_sizecache         int32           `json:"-"`
}

func (m *PppProtocolInfo) Reset()         { *m = PppProtocolInfo{} }
func (m *PppProtocolInfo) String() string { return proto.CompactTextString(m) }
func (*PppProtocolInfo) ProtoMessage()    {}
func (*PppProtocolInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_ead0a4c1ec690653, []int{11}
}

func (m *PppProtocolInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PppProtocolInfo.Unmarshal(m, b)
}
func (m *PppProtocolInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PppProtocolInfo.Marshal(b, m, deterministic)
}
func (m *PppProtocolInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PppProtocolInfo.Merge(m, src)
}
func (m *PppProtocolInfo) XXX_Size() int {
	return xxx_messageInfo_PppProtocolInfo.Size(m)
}
func (m *PppProtocolInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PppProtocolInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PppProtocolInfo proto.InternalMessageInfo

func (m *PppProtocolInfo) GetParentState() uint32 {
	if m != nil {
		return m.ParentState
	}
	return 0
}

func (m *PppProtocolInfo) GetLineState() uint32 {
	if m != nil {
		return m.LineState
	}
	return 0
}

func (m *PppProtocolInfo) GetIsLoopbackDetected() bool {
	if m != nil {
		return m.IsLoopbackDetected
	}
	return false
}

func (m *PppProtocolInfo) GetCapsIdbSrgRole() uint32 {
	if m != nil {
		return m.CapsIdbSrgRole
	}
	return 0
}

func (m *PppProtocolInfo) GetSessionSrgRole() uint32 {
	if m != nil {
		return m.SessionSrgRole
	}
	return 0
}

func (m *PppProtocolInfo) GetKeepalivePeriod() uint32 {
	if m != nil {
		return m.KeepalivePeriod
	}
	return 0
}

func (m *PppProtocolInfo) GetKeepaliveRetryCount() uint32 {
	if m != nil {
		return m.KeepaliveRetryCount
	}
	return 0
}

func (m *PppProtocolInfo) GetIsSsrpConfigured() bool {
	if m != nil {
		return m.IsSsrpConfigured
	}
	return false
}

func (m *PppProtocolInfo) GetIsL2Ac() bool {
	if m != nil {
		return m.IsL2Ac
	}
	return false
}

func (m *PppProtocolInfo) GetProvisioned() bool {
	if m != nil {
		return m.Provisioned
	}
	return false
}

func (m *PppProtocolInfo) GetIpInterworkingEnabled() bool {
	if m != nil {
		return m.IpInterworkingEnabled
	}
	return false
}

func (m *PppProtocolInfo) GetXconnectId() uint32 {
	if m != nil {
		return m.XconnectId
	}
	return 0
}

func (m *PppProtocolInfo) GetIsTunneledSession() bool {
	if m != nil {
		return m.IsTunneledSession
	}
	return false
}

func (m *PppProtocolInfo) GetSsrpPeerId() string {
	if m != nil {
		return m.SsrpPeerId
	}
	return ""
}

func (m *PppProtocolInfo) GetLcpState() string {
	if m != nil {
		return m.LcpState
	}
	return ""
}

func (m *PppProtocolInfo) GetLcpssoState() string {
	if m != nil {
		return m.LcpssoState
	}
	return ""
}

func (m *PppProtocolInfo) GetIsLcpDelayed() bool {
	if m != nil {
		return m.IsLcpDelayed
	}
	return false
}

func (m *PppProtocolInfo) GetLocalMru() uint32 {
	if m != nil {
		return m.LocalMru
	}
	return 0
}

func (m *PppProtocolInfo) GetPeerMru() uint32 {
	if m != nil {
		return m.PeerMru
	}
	return 0
}

func (m *PppProtocolInfo) GetLocalMrru() uint32 {
	if m != nil {
		return m.LocalMrru
	}
	return 0
}

func (m *PppProtocolInfo) GetPeerMrru() uint32 {
	if m != nil {
		return m.PeerMrru
	}
	return 0
}

func (m *PppProtocolInfo) GetLocalEd() string {
	if m != nil {
		return m.LocalEd
	}
	return ""
}

func (m *PppProtocolInfo) GetPeerEd() string {
	if m != nil {
		return m.PeerEd
	}
	return ""
}

func (m *PppProtocolInfo) GetIsMcmpEnabled() bool {
	if m != nil {
		return m.IsMcmpEnabled
	}
	return false
}

func (m *PppProtocolInfo) GetLocalMcmpClasses() uint32 {
	if m != nil {
		return m.LocalMcmpClasses
	}
	return 0
}

func (m *PppProtocolInfo) GetPeerMcmpClasses() uint32 {
	if m != nil {
		return m.PeerMcmpClasses
	}
	return 0
}

func (m *PppProtocolInfo) GetMpInfo() *PppMpInfo {
	if m != nil {
		return m.MpInfo
	}
	return nil
}

func (m *PppProtocolInfo) GetSessionExpires() uint32 {
	if m != nil {
		return m.SessionExpires
	}
	return 0
}

func (m *PppProtocolInfo) GetConfiguredTimeout() *PppTimeoutInfo {
	if m != nil {
		return m.ConfiguredTimeout
	}
	return nil
}

func (m *PppProtocolInfo) GetAuthInfo() *PppAuthInfo {
	if m != nil {
		return m.AuthInfo
	}
	return nil
}

func (m *PppProtocolInfo) GetNcpInfoArray() []*PppNcpInfo {
	if m != nil {
		return m.NcpInfoArray
	}
	return nil
}

func init() {
	proto.RegisterType((*PppProtocolInfo_KEYS)(nil), "cisco_ios_xr_ppp_ma_oper.ppp.nodes.node.node_interfaces.node_interface.ppp_protocol_info_KEYS")
	proto.RegisterType((*PppMpMbrInfo)(nil), "cisco_ios_xr_ppp_ma_oper.ppp.nodes.node.node_interfaces.node_interface.ppp_mp_mbr_info")
	proto.RegisterType((*PppMpInfo)(nil), "cisco_ios_xr_ppp_ma_oper.ppp.nodes.node.node_interfaces.node_interface.ppp_mp_info")
	proto.RegisterType((*PppTimeoutInfo)(nil), "cisco_ios_xr_ppp_ma_oper.ppp.nodes.node.node_interfaces.node_interface.ppp_timeout_info")
	proto.RegisterType((*PppAuthInfo)(nil), "cisco_ios_xr_ppp_ma_oper.ppp.nodes.node.node_interfaces.node_interface.ppp_auth_info")
	proto.RegisterType((*PppIpcpIphcInfo)(nil), "cisco_ios_xr_ppp_ma_oper.ppp.nodes.node.node_interfaces.node_interface.ppp_ipcp_iphc_info")
	proto.RegisterType((*PppIpcpInfo)(nil), "cisco_ios_xr_ppp_ma_oper.ppp.nodes.node.node_interfaces.node_interface.ppp_ipcp_info")
	proto.RegisterType((*PppIpcpiwInfo)(nil), "cisco_ios_xr_ppp_ma_oper.ppp.nodes.node.node_interfaces.node_interface.ppp_ipcpiw_info")
	proto.RegisterType((*PppIpv6CpInfo)(nil), "cisco_ios_xr_ppp_ma_oper.ppp.nodes.node.node_interfaces.node_interface.ppp_ipv6cp_info")
	proto.RegisterType((*PppNcp)(nil), "cisco_ios_xr_ppp_ma_oper.ppp.nodes.node.node_interfaces.node_interface.ppp_ncp")
	proto.RegisterType((*PppNcpInfo)(nil), "cisco_ios_xr_ppp_ma_oper.ppp.nodes.node.node_interfaces.node_interface.ppp_ncp_info")
	proto.RegisterType((*PppProtocolInfo)(nil), "cisco_ios_xr_ppp_ma_oper.ppp.nodes.node.node_interfaces.node_interface.ppp_protocol_info")
}

func init() { proto.RegisterFile("ppp_protocol_info.proto", fileDescriptor_ead0a4c1ec690653) }

var fileDescriptor_ead0a4c1ec690653 = []byte{
	// 1590 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x57, 0xdb, 0x72, 0x1b, 0xb9,
	0x11, 0x2d, 0xc9, 0xb6, 0x48, 0x82, 0xa4, 0x28, 0xc1, 0xde, 0x78, 0x52, 0xd9, 0xad, 0x68, 0x99,
	0x38, 0x2b, 0xa7, 0x1c, 0x55, 0x4a, 0x9b, 0x38, 0xf7, 0x8b, 0x56, 0x96, 0x77, 0x99, 0x95, 0x6c,
	0xd5, 0x50, 0x5b, 0xc9, 0xe6, 0x05, 0x35, 0xc4, 0x80, 0x32, 0xa2, 0x19, 0x00, 0x05, 0x0c, 0x6d,
	0x2a, 0x4f, 0x79, 0xc9, 0xe5, 0x73, 0xf2, 0x05, 0xf9, 0x81, 0xe4, 0x63, 0xf2, 0x09, 0xa9, 0xee,
	0xc6, 0x0c, 0x87, 0xf2, 0x2b, 0xf3, 0xc2, 0x22, 0x4e, 0x9f, 0x6e, 0xf4, 0x34, 0xfa, 0x02, 0xb0,
	0xc7, 0xce, 0x39, 0xe1, 0xbc, 0xad, 0xac, 0xb4, 0x85, 0xd0, 0x66, 0x6e, 0x8f, 0x70, 0xc5, 0x5f,
	0x4a, 0x1d, 0xa4, 0x15, 0xda, 0x06, 0xb1, 0xf4, 0x02, 0x58, 0x65, 0x26, 0xac, 0x53, 0xfe, 0xc8,
	0x39, 0x77, 0x64, 0x6c, 0xae, 0x02, 0xfe, 0xe2, 0x8f, 0xd0, 0xa6, 0x52, 0x7e, 0x9e, 0xc9, 0x08,
	0xae, 0xd6, 0xe3, 0x29, 0xfb, 0xc6, 0x7b, 0x5b, 0x88, 0x2f, 0xcf, 0xbe, 0x9e, 0xf2, 0x6f, 0xb1,
	0x1e, 0x72, 0x4d, 0x56, 0xaa, 0x64, 0xeb, 0x60, 0xeb, 0xb0, 0x97, 0x76, 0x01, 0x78, 0x95, 0x95,
	0x8a, 0x7f, 0xc8, 0x7a, 0x8d, 0x8d, 0x64, 0x1b, 0x85, 0x2b, 0x60, 0x7c, 0xc6, 0x46, 0xe8, 0x91,
	0x13, 0xe5, 0xcc, 0xa3, 0xc9, 0x75, 0x85, 0xad, 0x3b, 0x0a, 0xfc, 0x11, 0x7b, 0x10, 0xaa, 0xac,
	0xaa, 0x4d, 0xd1, 0x62, 0xfc, 0xef, 0x7b, 0xac, 0x1f, 0xed, 0xa0, 0x8d, 0x03, 0x36, 0xd0, 0x01,
	0x56, 0xb3, 0x85, 0xc9, 0x0b, 0x32, 0xd3, 0x4d, 0x99, 0x0e, 0x17, 0xee, 0x33, 0x44, 0xf8, 0x11,
	0x7b, 0xd8, 0x88, 0xc5, 0x5d, 0x07, 0xf7, 0xcb, 0x48, 0x9b, 0x34, 0xfb, 0xfe, 0x80, 0x3d, 0x6c,
	0x5b, 0x14, 0xa5, 0x2a, 0x67, 0xca, 0x27, 0xf7, 0xd0, 0xf0, 0xde, 0xca, 0xf0, 0x05, 0xe2, 0xfc,
	0x9b, 0xac, 0x5b, 0x3a, 0x71, 0xed, 0xed, 0xc2, 0x25, 0xf7, 0x0f, 0xb6, 0x0e, 0x87, 0x69, 0xa7,
	0x74, 0x9f, 0xc3, 0x92, 0x7f, 0xcc, 0x06, 0x99, 0xac, 0xf4, 0x5b, 0x25, 0x0a, 0x6d, 0x6e, 0x42,
	0xf2, 0x00, 0xc5, 0x7d, 0xc2, 0xce, 0x01, 0xe2, 0x4f, 0xd8, 0xae, 0x36, 0x6b, 0xa4, 0x1d, 0x24,
	0x0d, 0x6b, 0x94, 0x68, 0x3f, 0x64, 0x8f, 0x4a, 0x6d, 0x74, 0xb9, 0x28, 0xc5, 0x1a, 0xb9, 0x83,
	0x64, 0x1e, 0x65, 0x27, 0x2d, 0x0d, 0x72, 0x8b, 0x02, 0xd8, 0xc5, 0x4f, 0xed, 0x94, 0x6e, 0x0a,
	0x4b, 0xfe, 0x8f, 0x2d, 0xf6, 0x08, 0x8e, 0x01, 0xfd, 0xa7, 0xc3, 0xcd, 0xbc, 0xcf, 0x6e, 0x93,
	0xde, 0xc1, 0xbd, 0xc3, 0xfe, 0xf1, 0xef, 0x8f, 0x36, 0x93, 0x46, 0x47, 0x77, 0x8e, 0x1b, 0x62,
	0x4d, 0x31, 0x9b, 0x98, 0xb9, 0x3d, 0x81, 0x1d, 0xc7, 0x2f, 0xd9, 0x1e, 0xb0, 0x2a, 0x5d, 0x2a,
	0xbb, 0xa8, 0xe8, 0x44, 0x13, 0xd6, 0x29, 0xb5, 0x59, 0x54, 0x2a, 0xe0, 0x61, 0x42, 0x3c, 0x69,
	0x09, 0x92, 0xa0, 0xa4, 0x35, 0x79, 0xc0, 0xd3, 0x1b, 0xa6, 0xf5, 0x72, 0xfc, 0xaf, 0x6d, 0x36,
	0x04, 0x43, 0xd9, 0xa2, 0x7a, 0x43, 0x56, 0x9e, 0xb2, 0x3d, 0x1d, 0x70, 0xad, 0x4c, 0xa5, 0x65,
	0x56, 0xa9, 0x3c, 0xe6, 0xc6, 0x48, 0x87, 0x93, 0x36, 0x0c, 0xc1, 0xd5, 0x41, 0x84, 0x60, 0xef,
	0xd0, 0xb7, 0x91, 0xce, 0x75, 0x98, 0x06, 0xbb, 0xae, 0xf1, 0x21, 0x63, 0x76, 0x2e, 0x16, 0x64,
	0x1f, 0x33, 0x63, 0x98, 0x76, 0xed, 0xfc, 0x2b, 0x34, 0x0c, 0x29, 0x69, 0xe7, 0xc2, 0x29, 0xe5,
	0x49, 0x4e, 0x59, 0xc1, 0xec, 0xfc, 0x52, 0x29, 0x8f, 0x8c, 0x46, 0x1f, 0xeb, 0xe8, 0x01, 0xd5,
	0x11, 0xe8, 0x63, 0x1d, 0xb5, 0xf4, 0x51, 0xbe, 0x83, 0xf2, 0xa8, 0x8f, 0x8c, 0x27, 0x6c, 0x44,
	0xfa, 0xe0, 0x34, 0x9d, 0x71, 0x07, 0x49, 0x03, 0x30, 0x32, 0x0d, 0x96, 0x0e, 0xfa, 0x29, 0xdb,
	0xaf, 0x0d, 0xad, 0x88, 0x94, 0x0c, 0xbb, 0x64, 0xad, 0xa6, 0x8e, 0xff, 0xb9, 0xcd, 0x38, 0x04,
	0x50, 0x3b, 0x09, 0x3f, 0x6f, 0x64, 0x13, 0x45, 0x69, 0x4b, 0xe7, 0x55, 0x08, 0xda, 0x1a, 0x51,
	0xdd, 0xba, 0xba, 0x50, 0x47, 0x2d, 0xfc, 0xea, 0xd6, 0x29, 0x68, 0x0d, 0x95, 0x74, 0x22, 0xb8,
	0xba, 0xb8, 0x86, 0x69, 0xb7, 0x92, 0x6e, 0x0a, 0x6b, 0x3e, 0x66, 0x43, 0x03, 0xfa, 0x0d, 0x81,
	0x62, 0xd6, 0x37, 0xd6, 0x5c, 0xd5, 0x9c, 0x8f, 0x18, 0x2b, 0xb3, 0xa5, 0x70, 0xca, 0x6b, 0x9b,
	0xc7, 0xa0, 0xf5, 0xca, 0x6c, 0x79, 0x89, 0x00, 0x26, 0x74, 0xb6, 0xc4, 0x54, 0x89, 0x85, 0xd4,
	0x29, 0xb3, 0xe5, 0x95, 0x2e, 0x1b, 0xcd, 0x37, 0x2a, 0xcb, 0x95, 0x8f, 0x05, 0x04, 0x9a, 0x5f,
	0x20, 0xc0, 0x3f, 0x61, 0x23, 0x5f, 0x39, 0xd1, 0x72, 0x18, 0xa3, 0xd5, 0x4d, 0x77, 0x7d, 0xe5,
	0x4e, 0x57, 0x28, 0x7f, 0xc6, 0xb8, 0x92, 0xe2, 0x2e, 0xb7, 0x4b, 0x85, 0xaf, 0x64, 0xba, 0xc6,
	0x1e, 0xff, 0xe7, 0x3e, 0xe5, 0x1c, 0x85, 0x0c, 0xa2, 0xf5, 0x1d, 0x36, 0x2c, 0xac, 0xcc, 0x0a,
	0x91, 0xe5, 0x39, 0xb0, 0x62, 0xa8, 0x06, 0x08, 0x9e, 0x10, 0x06, 0x4d, 0x81, 0x52, 0x23, 0x72,
	0xa8, 0x0f, 0xf5, 0x01, 0xbb, 0x4b, 0x31, 0xaa, 0x2a, 0xb3, 0x70, 0x83, 0xc1, 0x8a, 0x94, 0x57,
	0x04, 0xf1, 0x6f, 0xb3, 0x7e, 0x6e, 0x82, 0x70, 0x5e, 0x97, 0x99, 0xbf, 0xc5, 0x68, 0xf5, 0x52,
	0x96, 0x9b, 0x70, 0x49, 0x08, 0xf8, 0x02, 0x04, 0x2a, 0x10, 0xa0, 0x50, 0x96, 0x0d, 0x72, 0x13,
	0xa6, 0x35, 0x06, 0x1b, 0xbd, 0xd3, 0x2d, 0x33, 0x94, 0x69, 0x7d, 0xc0, 0x6a, 0x3b, 0x4f, 0xd8,
	0x2e, 0x52, 0x56, 0x86, 0x28, 0xd3, 0x86, 0x80, 0xae, 0x2c, 0x3d, 0x63, 0x5c, 0x07, 0x4a, 0x1c,
	0x69, 0xcd, 0x5c, 0x5f, 0x2f, 0xbc, 0xca, 0xeb, 0xd0, 0xe9, 0x30, 0x71, 0x6f, 0xe4, 0x69, 0x83,
	0x43, 0x07, 0xe2, 0x14, 0x29, 0xd4, 0xb0, 0xae, 0xd2, 0xd6, 0x84, 0xa4, 0x77, 0xb0, 0x75, 0xd8,
	0x3f, 0xfe, 0xe3, 0x26, 0xfb, 0xcf, 0x7a, 0x3e, 0xa7, 0x7b, 0xb8, 0x2b, 0x78, 0xf3, 0x9a, 0xf6,
	0xe4, 0x7f, 0xdb, 0x62, 0xfb, 0x18, 0xec, 0x35, 0x4f, 0xd8, 0xff, 0xdd, 0x93, 0x11, 0x6c, 0xda,
	0x72, 0x64, 0xfc, 0x35, 0xcd, 0x47, 0xa0, 0xe9, 0x77, 0x1b, 0xcd, 0xa7, 0x95, 0xe9, 0xb7, 0xcf,
	0x37, 0x9c, 0xaa, 0xe3, 0xbf, 0xde, 0x63, 0x1d, 0xb0, 0x6d, 0xa4, 0xe3, 0x9c, 0xdd, 0x6f, 0x35,
	0x08, 0xfc, 0xcf, 0x3d, 0xeb, 0x35, 0xf5, 0x81, 0xfa, 0xfd, 0xe3, 0xaf, 0x36, 0x1f, 0x55, 0x08,
	0x68, 0x17, 0xfe, 0xc2, 0x64, 0xe1, 0x4b, 0xd6, 0x6f, 0x45, 0x11, 0xab, 0x67, 0xc3, 0x53, 0xad,
	0x65, 0x3e, 0x65, 0xb4, 0x58, 0xed, 0xdc, 0x04, 0x19, 0xab, 0x72, 0xe3, 0x3b, 0x37, 0xe6, 0x61,
	0x67, 0x58, 0xc0, 0xce, 0xe3, 0xbf, 0x6c, 0xb3, 0x41, 0x3c, 0x07, 0x3a, 0x60, 0xb8, 0xa9, 0xc9,
	0xfa, 0x02, 0x50, 0xdf, 0xd4, 0x64, 0xbc, 0x01, 0x7c, 0xcc, 0x06, 0x46, 0xba, 0xd5, 0x4c, 0x88,
	0x07, 0x4b, 0x18, 0x51, 0x3e, 0x62, 0x4c, 0x07, 0xe1, 0xb2, 0x10, 0xf4, 0x5b, 0x15, 0x2f, 0x3f,
	0x3d, 0x1d, 0x2e, 0x09, 0x80, 0xb6, 0x80, 0x5b, 0xe5, 0x30, 0x14, 0xe7, 0x5a, 0xf9, 0xd8, 0x82,
	0x86, 0x46, 0xba, 0x49, 0x03, 0xf2, 0x3f, 0xb1, 0x6e, 0xed, 0x11, 0x36, 0xa0, 0xfe, 0xf1, 0xeb,
	0x4d, 0x46, 0xc3, 0x48, 0x97, 0x76, 0x4c, 0x0c, 0xc1, 0x7f, 0xfb, 0x6c, 0xff, 0xbd, 0x6b, 0x2b,
	0xe6, 0x70, 0xe6, 0x95, 0xa9, 0xe2, 0xa7, 0x1e, 0xd3, 0xe0, 0x21, 0xac, 0xf9, 0xd4, 0x42, 0x1b,
	0x15, 0x09, 0x9f, 0xd2, 0xf8, 0x00, 0x84, 0xc4, 0x74, 0x3d, 0x28, 0xac, 0x75, 0xb3, 0x4c, 0xde,
	0x88, 0x5c, 0x55, 0x4a, 0xc2, 0xf5, 0xe0, 0x47, 0xf5, 0xf5, 0xe0, 0x3c, 0x8a, 0x5e, 0x44, 0x09,
	0xcc, 0x5d, 0x99, 0xb9, 0x20, 0x74, 0x3e, 0x13, 0xc1, 0x5f, 0x0b, 0x6f, 0x0b, 0x95, 0xfc, 0x18,
	0xed, 0xee, 0x82, 0x60, 0x92, 0xcf, 0xa6, 0xfe, 0x3a, 0xb5, 0x85, 0xe2, 0x87, 0x6c, 0x2f, 0xc4,
	0xe1, 0xda, 0x30, 0x9f, 0x13, 0x33, 0xe2, 0x35, 0xf3, 0x29, 0xdb, 0xbb, 0x51, 0xca, 0x65, 0x05,
	0xdc, 0xfe, 0xe2, 0x90, 0xfc, 0x09, 0x32, 0x47, 0x0d, 0x1e, 0x47, 0xe5, 0x31, 0xfb, 0x60, 0x45,
	0xf5, 0xaa, 0xf2, 0xb7, 0x42, 0xda, 0x85, 0xa9, 0x92, 0x9f, 0x22, 0xff, 0x61, 0x23, 0x4c, 0x41,
	0x76, 0x0a, 0xa2, 0xd8, 0xc0, 0x43, 0xf0, 0xae, 0xdd, 0xc0, 0x7f, 0x56, 0x37, 0xf0, 0x69, 0xf0,
	0xae, 0xd5, 0xc0, 0x1f, 0xb3, 0x0e, 0xc4, 0xe4, 0x38, 0x93, 0xc9, 0xcf, 0x91, 0xb2, 0xa3, 0xc3,
	0xf9, 0x71, 0x26, 0xf9, 0x01, 0xeb, 0x3b, 0x6f, 0xdf, 0x6a, 0xf0, 0x5c, 0xe5, 0xc9, 0x2f, 0x50,
	0xd8, 0x86, 0xf8, 0x73, 0xf6, 0x58, 0x3b, 0x3a, 0xc7, 0x77, 0xd6, 0xdf, 0x68, 0x73, 0x2d, 0x94,
	0xc9, 0x66, 0x85, 0xca, 0x93, 0x5f, 0x22, 0xfb, 0x03, 0xed, 0x26, 0x2d, 0xe9, 0x19, 0x09, 0x61,
	0xe2, 0x2d, 0xa5, 0x35, 0x46, 0xc9, 0x4a, 0xe8, 0x3c, 0xf9, 0x15, 0x5d, 0xaa, 0x6a, 0x68, 0x92,
	0xc3, 0x3d, 0x5f, 0x07, 0x51, 0x2d, 0x8c, 0x51, 0x85, 0xca, 0x45, 0x0c, 0x5f, 0xf2, 0x6b, 0x34,
	0xba, 0xaf, 0xc3, 0x55, 0x94, 0x4c, 0xe3, 0xb4, 0x3f, 0x60, 0x03, 0xfc, 0x5c, 0xea, 0xfe, 0x79,
	0xf2, 0x1b, 0x9a, 0xa1, 0x80, 0xc1, 0xd5, 0x68, 0x92, 0x43, 0x0d, 0x15, 0x4d, 0x0d, 0xfd, 0x96,
	0x6a, 0xa8, 0x68, 0xd5, 0x50, 0xd1, 0xae, 0xa1, 0x13, 0xaa, 0xa1, 0xa2, 0x55, 0x43, 0xdf, 0x65,
	0xbb, 0x10, 0x25, 0xe9, 0x44, 0xae, 0x8a, 0xec, 0x56, 0xe5, 0xc9, 0x67, 0xe8, 0xcc, 0x40, 0x87,
	0x73, 0xe9, 0x5e, 0x10, 0x86, 0xbb, 0x60, 0x2b, 0x2e, 0xfd, 0x22, 0x39, 0xa5, 0x8b, 0x13, 0x02,
	0x17, 0x7e, 0x01, 0xb7, 0x1e, 0xf4, 0x0f, 0x64, 0x2f, 0xe8, 0xd6, 0x03, 0x6b, 0x10, 0x41, 0xda,
	0x46, 0x3d, 0xbf, 0x48, 0xce, 0x62, 0xda, 0x92, 0xa2, 0x5f, 0x80, 0xd9, 0xa8, 0xe9, 0x17, 0xc9,
	0x4b, 0x32, 0x4b, 0xaa, 0x64, 0x96, 0x74, 0x55, 0x9e, 0x7c, 0x4e, 0xaf, 0x03, 0x5c, 0x9f, 0xe1,
	0xd1, 0xa2, 0x9e, 0xca, 0x93, 0x2f, 0x50, 0xb2, 0x03, 0xcb, 0xb3, 0x9c, 0x7f, 0x8f, 0x8d, 0xe0,
	0x5d, 0x24, 0x4b, 0xd7, 0x1c, 0xd8, 0x04, 0x3f, 0x67, 0xa8, 0xc3, 0x85, 0x2c, 0x5d, 0x7d, 0x50,
	0xcf, 0xea, 0xd9, 0x8e, 0x54, 0x59, 0x64, 0x21, 0xa8, 0x90, 0xfc, 0x0e, 0x3d, 0xa0, 0xf9, 0x0b,
	0xec, 0x53, 0xc2, 0xf9, 0xf7, 0xe3, 0xf8, 0x5d, 0x23, 0x7f, 0x49, 0x79, 0x8d, 0xee, 0xb6, 0xb8,
	0x05, 0xeb, 0xc4, 0x67, 0x5f, 0x72, 0x8e, 0xcd, 0x64, 0xba, 0xe1, 0xa7, 0x0a, 0xb6, 0xd5, 0x9d,
	0x92, 0xc6, 0xc8, 0x27, 0x6c, 0x54, 0x97, 0xa6, 0x5a, 0x3a, 0xed, 0x55, 0x48, 0x2e, 0xd6, 0x2a,
	0xf3, 0x8c, 0x50, 0xfe, 0xf7, 0x2d, 0xc6, 0x57, 0x35, 0x53, 0x3f, 0x66, 0x92, 0x57, 0xe8, 0xe2,
	0x1f, 0x36, 0xe9, 0x62, 0xfb, 0x9d, 0x94, 0xee, 0xaf, 0xf6, 0xbc, 0x22, 0x1c, 0xa6, 0x6d, 0xf3,
	0x02, 0x4a, 0x5e, 0x6f, 0x7e, 0xda, 0x36, 0xc6, 0xd3, 0x2e, 0xfc, 0xc5, 0x30, 0xfd, 0x39, 0x4e,
	0x82, 0xd5, 0x33, 0xf2, 0x12, 0x9f, 0x91, 0x57, 0x1b, 0x6e, 0xf4, 0xb4, 0xef, 0x20, 0x76, 0x7b,
	0x7c, 0x3e, 0xce, 0x76, 0xb0, 0xd7, 0x7f, 0xfa, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x95,
	0x48, 0x63, 0x12, 0x11, 0x00, 0x00,
}
