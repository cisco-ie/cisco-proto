/*
Copyright 2019 Cisco Systems

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: span_ma_attachment_bag.proto

package cisco_ios_xr_ethernet_span_oper_span_monitor_session_nodes_node_attachments_attachment

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type SpanMaAttachmentBag_KEYS struct {
	Node                 string   `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
	Session              string   `protobuf:"bytes,2,opt,name=session,proto3" json:"session,omitempty"`
	Interface            string   `protobuf:"bytes,3,opt,name=interface,proto3" json:"interface,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SpanMaAttachmentBag_KEYS) Reset()         { *m = SpanMaAttachmentBag_KEYS{} }
func (m *SpanMaAttachmentBag_KEYS) String() string { return proto.CompactTextString(m) }
func (*SpanMaAttachmentBag_KEYS) ProtoMessage()    {}
func (*SpanMaAttachmentBag_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_03164b2bedcbaf35, []int{0}
}

func (m *SpanMaAttachmentBag_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SpanMaAttachmentBag_KEYS.Unmarshal(m, b)
}
func (m *SpanMaAttachmentBag_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SpanMaAttachmentBag_KEYS.Marshal(b, m, deterministic)
}
func (m *SpanMaAttachmentBag_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpanMaAttachmentBag_KEYS.Merge(m, src)
}
func (m *SpanMaAttachmentBag_KEYS) XXX_Size() int {
	return xxx_messageInfo_SpanMaAttachmentBag_KEYS.Size(m)
}
func (m *SpanMaAttachmentBag_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_SpanMaAttachmentBag_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_SpanMaAttachmentBag_KEYS proto.InternalMessageInfo

func (m *SpanMaAttachmentBag_KEYS) GetNode() string {
	if m != nil {
		return m.Node
	}
	return ""
}

func (m *SpanMaAttachmentBag_KEYS) GetSession() string {
	if m != nil {
		return m.Session
	}
	return ""
}

func (m *SpanMaAttachmentBag_KEYS) GetInterface() string {
	if m != nil {
		return m.Interface
	}
	return ""
}

type SpanBagSrcInfo_ struct {
	TrafficDirection     string   `protobuf:"bytes,1,opt,name=traffic_direction,json=trafficDirection,proto3" json:"traffic_direction,omitempty"`
	PortLevel            bool     `protobuf:"varint,2,opt,name=port_level,json=portLevel,proto3" json:"port_level,omitempty"`
	IsAclEnabled         bool     `protobuf:"varint,3,opt,name=is_acl_enabled,json=isAclEnabled,proto3" json:"is_acl_enabled,omitempty"`
	MirrorBytes          uint32   `protobuf:"varint,4,opt,name=mirror_bytes,json=mirrorBytes,proto3" json:"mirror_bytes,omitempty"`
	MirrorInterval       string   `protobuf:"bytes,5,opt,name=mirror_interval,json=mirrorInterval,proto3" json:"mirror_interval,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SpanBagSrcInfo_) Reset()         { *m = SpanBagSrcInfo_{} }
func (m *SpanBagSrcInfo_) String() string { return proto.CompactTextString(m) }
func (*SpanBagSrcInfo_) ProtoMessage()    {}
func (*SpanBagSrcInfo_) Descriptor() ([]byte, []int) {
	return fileDescriptor_03164b2bedcbaf35, []int{1}
}

func (m *SpanBagSrcInfo_) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SpanBagSrcInfo_.Unmarshal(m, b)
}
func (m *SpanBagSrcInfo_) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SpanBagSrcInfo_.Marshal(b, m, deterministic)
}
func (m *SpanBagSrcInfo_) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpanBagSrcInfo_.Merge(m, src)
}
func (m *SpanBagSrcInfo_) XXX_Size() int {
	return xxx_messageInfo_SpanBagSrcInfo_.Size(m)
}
func (m *SpanBagSrcInfo_) XXX_DiscardUnknown() {
	xxx_messageInfo_SpanBagSrcInfo_.DiscardUnknown(m)
}

var xxx_messageInfo_SpanBagSrcInfo_ proto.InternalMessageInfo

func (m *SpanBagSrcInfo_) GetTrafficDirection() string {
	if m != nil {
		return m.TrafficDirection
	}
	return ""
}

func (m *SpanBagSrcInfo_) GetPortLevel() bool {
	if m != nil {
		return m.PortLevel
	}
	return false
}

func (m *SpanBagSrcInfo_) GetIsAclEnabled() bool {
	if m != nil {
		return m.IsAclEnabled
	}
	return false
}

func (m *SpanBagSrcInfo_) GetMirrorBytes() uint32 {
	if m != nil {
		return m.MirrorBytes
	}
	return 0
}

func (m *SpanBagSrcInfo_) GetMirrorInterval() string {
	if m != nil {
		return m.MirrorInterval
	}
	return ""
}

type SpanBagDstIdNexthopV4_ struct {
	Ipv4Address          string   `protobuf:"bytes,1,opt,name=ipv4_address,json=ipv4Address,proto3" json:"ipv4_address,omitempty"`
	VrfName              string   `protobuf:"bytes,2,opt,name=vrf_name,json=vrfName,proto3" json:"vrf_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SpanBagDstIdNexthopV4_) Reset()         { *m = SpanBagDstIdNexthopV4_{} }
func (m *SpanBagDstIdNexthopV4_) String() string { return proto.CompactTextString(m) }
func (*SpanBagDstIdNexthopV4_) ProtoMessage()    {}
func (*SpanBagDstIdNexthopV4_) Descriptor() ([]byte, []int) {
	return fileDescriptor_03164b2bedcbaf35, []int{2}
}

func (m *SpanBagDstIdNexthopV4_) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SpanBagDstIdNexthopV4_.Unmarshal(m, b)
}
func (m *SpanBagDstIdNexthopV4_) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SpanBagDstIdNexthopV4_.Marshal(b, m, deterministic)
}
func (m *SpanBagDstIdNexthopV4_) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpanBagDstIdNexthopV4_.Merge(m, src)
}
func (m *SpanBagDstIdNexthopV4_) XXX_Size() int {
	return xxx_messageInfo_SpanBagDstIdNexthopV4_.Size(m)
}
func (m *SpanBagDstIdNexthopV4_) XXX_DiscardUnknown() {
	xxx_messageInfo_SpanBagDstIdNexthopV4_.DiscardUnknown(m)
}

var xxx_messageInfo_SpanBagDstIdNexthopV4_ proto.InternalMessageInfo

func (m *SpanBagDstIdNexthopV4_) GetIpv4Address() string {
	if m != nil {
		return m.Ipv4Address
	}
	return ""
}

func (m *SpanBagDstIdNexthopV4_) GetVrfName() string {
	if m != nil {
		return m.VrfName
	}
	return ""
}

type SpanBagDstIdNexthopV6_ struct {
	Ipv6Address          string   `protobuf:"bytes,1,opt,name=ipv6_address,json=ipv6Address,proto3" json:"ipv6_address,omitempty"`
	VrfName              string   `protobuf:"bytes,2,opt,name=vrf_name,json=vrfName,proto3" json:"vrf_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SpanBagDstIdNexthopV6_) Reset()         { *m = SpanBagDstIdNexthopV6_{} }
func (m *SpanBagDstIdNexthopV6_) String() string { return proto.CompactTextString(m) }
func (*SpanBagDstIdNexthopV6_) ProtoMessage()    {}
func (*SpanBagDstIdNexthopV6_) Descriptor() ([]byte, []int) {
	return fileDescriptor_03164b2bedcbaf35, []int{3}
}

func (m *SpanBagDstIdNexthopV6_) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SpanBagDstIdNexthopV6_.Unmarshal(m, b)
}
func (m *SpanBagDstIdNexthopV6_) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SpanBagDstIdNexthopV6_.Marshal(b, m, deterministic)
}
func (m *SpanBagDstIdNexthopV6_) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpanBagDstIdNexthopV6_.Merge(m, src)
}
func (m *SpanBagDstIdNexthopV6_) XXX_Size() int {
	return xxx_messageInfo_SpanBagDstIdNexthopV6_.Size(m)
}
func (m *SpanBagDstIdNexthopV6_) XXX_DiscardUnknown() {
	xxx_messageInfo_SpanBagDstIdNexthopV6_.DiscardUnknown(m)
}

var xxx_messageInfo_SpanBagDstIdNexthopV6_ proto.InternalMessageInfo

func (m *SpanBagDstIdNexthopV6_) GetIpv6Address() string {
	if m != nil {
		return m.Ipv6Address
	}
	return ""
}

func (m *SpanBagDstIdNexthopV6_) GetVrfName() string {
	if m != nil {
		return m.VrfName
	}
	return ""
}

type SpanBagDstId struct {
	DestinationClass     string                  `protobuf:"bytes,1,opt,name=destination_class,json=destinationClass,proto3" json:"destination_class,omitempty"`
	Interface            string                  `protobuf:"bytes,2,opt,name=interface,proto3" json:"interface,omitempty"`
	PseudowireId         uint32                  `protobuf:"varint,3,opt,name=pseudowire_id,json=pseudowireId,proto3" json:"pseudowire_id,omitempty"`
	Ipv4AddressAndVrf    *SpanBagDstIdNexthopV4_ `protobuf:"bytes,4,opt,name=ipv4_address_and_vrf,json=ipv4AddressAndVrf,proto3" json:"ipv4_address_and_vrf,omitempty"`
	Ipv6AddressAndVrf    *SpanBagDstIdNexthopV6_ `protobuf:"bytes,5,opt,name=ipv6_address_and_vrf,json=ipv6AddressAndVrf,proto3" json:"ipv6_address_and_vrf,omitempty"`
	InvalidValue         uint32                  `protobuf:"varint,6,opt,name=invalid_value,json=invalidValue,proto3" json:"invalid_value,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *SpanBagDstId) Reset()         { *m = SpanBagDstId{} }
func (m *SpanBagDstId) String() string { return proto.CompactTextString(m) }
func (*SpanBagDstId) ProtoMessage()    {}
func (*SpanBagDstId) Descriptor() ([]byte, []int) {
	return fileDescriptor_03164b2bedcbaf35, []int{4}
}

func (m *SpanBagDstId) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SpanBagDstId.Unmarshal(m, b)
}
func (m *SpanBagDstId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SpanBagDstId.Marshal(b, m, deterministic)
}
func (m *SpanBagDstId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpanBagDstId.Merge(m, src)
}
func (m *SpanBagDstId) XXX_Size() int {
	return xxx_messageInfo_SpanBagDstId.Size(m)
}
func (m *SpanBagDstId) XXX_DiscardUnknown() {
	xxx_messageInfo_SpanBagDstId.DiscardUnknown(m)
}

var xxx_messageInfo_SpanBagDstId proto.InternalMessageInfo

func (m *SpanBagDstId) GetDestinationClass() string {
	if m != nil {
		return m.DestinationClass
	}
	return ""
}

func (m *SpanBagDstId) GetInterface() string {
	if m != nil {
		return m.Interface
	}
	return ""
}

func (m *SpanBagDstId) GetPseudowireId() uint32 {
	if m != nil {
		return m.PseudowireId
	}
	return 0
}

func (m *SpanBagDstId) GetIpv4AddressAndVrf() *SpanBagDstIdNexthopV4_ {
	if m != nil {
		return m.Ipv4AddressAndVrf
	}
	return nil
}

func (m *SpanBagDstId) GetIpv6AddressAndVrf() *SpanBagDstIdNexthopV6_ {
	if m != nil {
		return m.Ipv6AddressAndVrf
	}
	return nil
}

func (m *SpanBagDstId) GetInvalidValue() uint32 {
	if m != nil {
		return m.InvalidValue
	}
	return 0
}

type SpanMaAttachmentBag struct {
	Name                          string           `protobuf:"bytes,50,opt,name=name,proto3" json:"name,omitempty"`
	LocalClass                    string           `protobuf:"bytes,51,opt,name=local_class,json=localClass,proto3" json:"local_class,omitempty"`
	TrafficParameters             *SpanBagSrcInfo_ `protobuf:"bytes,52,opt,name=traffic_parameters,json=trafficParameters,proto3" json:"traffic_parameters,omitempty"`
	Id                            uint32           `protobuf:"varint,53,opt,name=id,proto3" json:"id,omitempty"`
	DestinationId                 *SpanBagDstId    `protobuf:"bytes,54,opt,name=destination_id,json=destinationId,proto3" json:"destination_id,omitempty"`
	GlobalClass                   string           `protobuf:"bytes,55,opt,name=global_class,json=globalClass,proto3" json:"global_class,omitempty"`
	SessionIsConfigured           bool             `protobuf:"varint,56,opt,name=session_is_configured,json=sessionIsConfigured,proto3" json:"session_is_configured,omitempty"`
	SourceInterface               string           `protobuf:"bytes,57,opt,name=source_interface,json=sourceInterface,proto3" json:"source_interface,omitempty"`
	SourceInterfaceState          string           `protobuf:"bytes,58,opt,name=source_interface_state,json=sourceInterfaceState,proto3" json:"source_interface_state,omitempty"`
	PfiError                      uint32           `protobuf:"varint,59,opt,name=pfi_error,json=pfiError,proto3" json:"pfi_error,omitempty"`
	DestPwTypeNotSupported        bool             `protobuf:"varint,60,opt,name=dest_pw_type_not_supported,json=destPwTypeNotSupported,proto3" json:"dest_pw_type_not_supported,omitempty"`
	SourceInterfaceIsADestination bool             `protobuf:"varint,61,opt,name=source_interface_is_a_destination,json=sourceInterfaceIsADestination,proto3" json:"source_interface_is_a_destination,omitempty"`
	DestinationInterface          string           `protobuf:"bytes,62,opt,name=destination_interface,json=destinationInterface,proto3" json:"destination_interface,omitempty"`
	TrafficDirection              string           `protobuf:"bytes,63,opt,name=traffic_direction,json=trafficDirection,proto3" json:"traffic_direction,omitempty"`
	XXX_NoUnkeyedLiteral          struct{}         `json:"-"`
	XXX_unrecognized              []byte           `json:"-"`
	XXX_sizecache                 int32            `json:"-"`
}

func (m *SpanMaAttachmentBag) Reset()         { *m = SpanMaAttachmentBag{} }
func (m *SpanMaAttachmentBag) String() string { return proto.CompactTextString(m) }
func (*SpanMaAttachmentBag) ProtoMessage()    {}
func (*SpanMaAttachmentBag) Descriptor() ([]byte, []int) {
	return fileDescriptor_03164b2bedcbaf35, []int{5}
}

func (m *SpanMaAttachmentBag) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SpanMaAttachmentBag.Unmarshal(m, b)
}
func (m *SpanMaAttachmentBag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SpanMaAttachmentBag.Marshal(b, m, deterministic)
}
func (m *SpanMaAttachmentBag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpanMaAttachmentBag.Merge(m, src)
}
func (m *SpanMaAttachmentBag) XXX_Size() int {
	return xxx_messageInfo_SpanMaAttachmentBag.Size(m)
}
func (m *SpanMaAttachmentBag) XXX_DiscardUnknown() {
	xxx_messageInfo_SpanMaAttachmentBag.DiscardUnknown(m)
}

var xxx_messageInfo_SpanMaAttachmentBag proto.InternalMessageInfo

func (m *SpanMaAttachmentBag) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SpanMaAttachmentBag) GetLocalClass() string {
	if m != nil {
		return m.LocalClass
	}
	return ""
}

func (m *SpanMaAttachmentBag) GetTrafficParameters() *SpanBagSrcInfo_ {
	if m != nil {
		return m.TrafficParameters
	}
	return nil
}

func (m *SpanMaAttachmentBag) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *SpanMaAttachmentBag) GetDestinationId() *SpanBagDstId {
	if m != nil {
		return m.DestinationId
	}
	return nil
}

func (m *SpanMaAttachmentBag) GetGlobalClass() string {
	if m != nil {
		return m.GlobalClass
	}
	return ""
}

func (m *SpanMaAttachmentBag) GetSessionIsConfigured() bool {
	if m != nil {
		return m.SessionIsConfigured
	}
	return false
}

func (m *SpanMaAttachmentBag) GetSourceInterface() string {
	if m != nil {
		return m.SourceInterface
	}
	return ""
}

func (m *SpanMaAttachmentBag) GetSourceInterfaceState() string {
	if m != nil {
		return m.SourceInterfaceState
	}
	return ""
}

func (m *SpanMaAttachmentBag) GetPfiError() uint32 {
	if m != nil {
		return m.PfiError
	}
	return 0
}

func (m *SpanMaAttachmentBag) GetDestPwTypeNotSupported() bool {
	if m != nil {
		return m.DestPwTypeNotSupported
	}
	return false
}

func (m *SpanMaAttachmentBag) GetSourceInterfaceIsADestination() bool {
	if m != nil {
		return m.SourceInterfaceIsADestination
	}
	return false
}

func (m *SpanMaAttachmentBag) GetDestinationInterface() string {
	if m != nil {
		return m.DestinationInterface
	}
	return ""
}

func (m *SpanMaAttachmentBag) GetTrafficDirection() string {
	if m != nil {
		return m.TrafficDirection
	}
	return ""
}

func init() {
	proto.RegisterType((*SpanMaAttachmentBag_KEYS)(nil), "cisco_ios_xr_ethernet_span_oper.span_monitor_session.nodes.node.attachments.attachment.span_ma_attachment_bag_KEYS")
	proto.RegisterType((*SpanBagSrcInfo_)(nil), "cisco_ios_xr_ethernet_span_oper.span_monitor_session.nodes.node.attachments.attachment.span_bag_src_info_")
	proto.RegisterType((*SpanBagDstIdNexthopV4_)(nil), "cisco_ios_xr_ethernet_span_oper.span_monitor_session.nodes.node.attachments.attachment.span_bag_dst_id_nexthop_v4_")
	proto.RegisterType((*SpanBagDstIdNexthopV6_)(nil), "cisco_ios_xr_ethernet_span_oper.span_monitor_session.nodes.node.attachments.attachment.span_bag_dst_id_nexthop_v6_")
	proto.RegisterType((*SpanBagDstId)(nil), "cisco_ios_xr_ethernet_span_oper.span_monitor_session.nodes.node.attachments.attachment.span_bag_dst_id")
	proto.RegisterType((*SpanMaAttachmentBag)(nil), "cisco_ios_xr_ethernet_span_oper.span_monitor_session.nodes.node.attachments.attachment.span_ma_attachment_bag")
}

func init() { proto.RegisterFile("span_ma_attachment_bag.proto", fileDescriptor_03164b2bedcbaf35) }

var fileDescriptor_03164b2bedcbaf35 = []byte{
	// 778 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x55, 0xdd, 0x6e, 0x23, 0x35,
	0x14, 0x56, 0xb2, 0xbb, 0x25, 0x71, 0x9a, 0xb4, 0x6b, 0x76, 0xab, 0x81, 0xdd, 0x15, 0xdb, 0x14,
	0x89, 0x22, 0xa4, 0x5c, 0xb4, 0x21, 0x40, 0xf9, 0x53, 0x68, 0x2b, 0x11, 0x81, 0xaa, 0x6a, 0x8a,
	0x2a, 0x21, 0x2e, 0x8e, 0x9c, 0xf1, 0x99, 0xd4, 0x68, 0x62, 0x8f, 0x6c, 0x67, 0xda, 0xbe, 0x04,
	0xf7, 0xdc, 0xf3, 0x2e, 0xdc, 0xf3, 0x2c, 0x3c, 0x00, 0xb2, 0xe7, 0x27, 0xd3, 0x34, 0xaa, 0xb8,
	0x29, 0xdc, 0x44, 0x99, 0xef, 0xd8, 0xdf, 0xf9, 0xfc, 0x1d, 0x9f, 0x63, 0xf2, 0xda, 0xa4, 0x4c,
	0xc2, 0x9c, 0x01, 0xb3, 0x96, 0x45, 0x57, 0x73, 0x94, 0x16, 0xa6, 0x6c, 0x36, 0x48, 0xb5, 0xb2,
	0x8a, 0x5e, 0x46, 0xc2, 0x44, 0x0a, 0x84, 0x32, 0x70, 0xa3, 0x01, 0xed, 0x15, 0x6a, 0x89, 0x16,
	0xfc, 0x1e, 0x95, 0xa2, 0x1e, 0xe4, 0xbb, 0x95, 0x14, 0x56, 0x69, 0x30, 0x68, 0x8c, 0x50, 0x72,
	0x20, 0x15, 0x47, 0xe3, 0x7f, 0x07, 0x4b, 0x56, 0x53, 0xfb, 0xdf, 0x17, 0xe4, 0xd5, 0xfa, 0xbc,
	0xf0, 0xc3, 0xe9, 0xcf, 0x17, 0x94, 0x92, 0xa7, 0x6e, 0x77, 0xd0, 0x78, 0xdb, 0xd8, 0x6f, 0x87,
	0xfe, 0x3f, 0x0d, 0xc8, 0x3b, 0x05, 0x7f, 0xd0, 0xf4, 0x70, 0xf9, 0x49, 0x5f, 0x93, 0xb6, 0x90,
	0x16, 0x75, 0xcc, 0x22, 0x0c, 0x9e, 0xf8, 0xd8, 0x12, 0xe8, 0xff, 0xd5, 0x20, 0xd4, 0xe7, 0x72,
	0xec, 0x46, 0x47, 0x20, 0x64, 0xac, 0x80, 0x7e, 0x42, 0x9e, 0x5b, 0xcd, 0xe2, 0x58, 0x44, 0xc0,
	0x85, 0xc6, 0xc8, 0x3a, 0xe2, 0x3c, 0xdf, 0x76, 0x11, 0x38, 0x29, 0x71, 0xfa, 0x86, 0x90, 0x54,
	0x69, 0x0b, 0x09, 0x66, 0x98, 0xf8, 0xf4, 0xad, 0xb0, 0xed, 0x90, 0x1f, 0x1d, 0x40, 0x3f, 0x24,
	0x3d, 0x61, 0x80, 0x45, 0x09, 0xa0, 0x64, 0xd3, 0x04, 0xb9, 0x57, 0xd1, 0x0a, 0x37, 0x85, 0x19,
	0x47, 0xc9, 0x69, 0x8e, 0xd1, 0x5d, 0xb2, 0x39, 0x17, 0x5a, 0x2b, 0x0d, 0xd3, 0x5b, 0x8b, 0x26,
	0x78, 0xfa, 0xb6, 0xb1, 0xdf, 0x0d, 0x3b, 0x39, 0xf6, 0x9d, 0x83, 0xe8, 0x47, 0x64, 0xab, 0x58,
	0xe2, 0xf5, 0x67, 0x2c, 0x09, 0x9e, 0x79, 0x49, 0xbd, 0x1c, 0x9e, 0x14, 0x68, 0xff, 0x97, 0xc2,
	0x3f, 0x77, 0x26, 0x6e, 0x2c, 0x08, 0x0e, 0x12, 0x6f, 0xec, 0x95, 0x4a, 0x21, 0x1b, 0x82, 0x4b,
	0x25, 0xd2, 0x6c, 0x08, 0x8c, 0x73, 0x8d, 0xc6, 0x14, 0xe7, 0xea, 0x38, 0x6c, 0x9c, 0x43, 0xf4,
	0x3d, 0xd2, 0xca, 0x74, 0x0c, 0x92, 0xcd, 0xb1, 0xf4, 0x33, 0xd3, 0xf1, 0x19, 0x9b, 0xe3, 0x83,
	0xe4, 0xa3, 0x92, 0x7c, 0xb4, 0x86, 0x7c, 0xf4, 0x2f, 0xc8, 0xff, 0x7e, 0x42, 0xb6, 0x56, 0xd8,
	0x5d, 0x2d, 0x38, 0x1a, 0x2b, 0x24, 0x73, 0x6e, 0x43, 0x94, 0xb0, 0x8a, 0x76, 0xbb, 0x16, 0x38,
	0x76, 0xf8, 0xdd, 0x6a, 0x37, 0x57, 0xaa, 0x4d, 0xf7, 0x48, 0x37, 0x35, 0xb8, 0xe0, 0xea, 0x5a,
	0x68, 0x04, 0x91, 0x57, 0xa2, 0x1b, 0x6e, 0x2e, 0xc1, 0x09, 0xa7, 0x7f, 0x34, 0xc8, 0x8b, 0xba,
	0x3f, 0xc0, 0x24, 0x87, 0x4c, 0xc7, 0xbe, 0x24, 0x9d, 0x03, 0x33, 0x78, 0x9c, 0x5b, 0x3f, 0x78,
	0xa0, 0x64, 0xe1, 0xf3, 0x5a, 0x71, 0xc6, 0x92, 0x5f, 0xea, 0xb8, 0x94, 0x39, 0xba, 0x27, 0xf3,
	0xd9, 0xff, 0x24, 0x73, 0x94, 0xcb, 0x1c, 0xdd, 0x95, 0xb9, 0x47, 0xba, 0x42, 0x66, 0x2c, 0x11,
	0x1c, 0x32, 0x96, 0x2c, 0x30, 0xd8, 0xc8, 0x2d, 0x2f, 0xc0, 0x4b, 0x87, 0xf5, 0xff, 0xdc, 0x20,
	0x3b, 0xeb, 0x3b, 0xde, 0x37, 0xbb, 0xbb, 0x28, 0x07, 0x45, 0xb3, 0xb3, 0x39, 0xd2, 0x0f, 0x48,
	0x27, 0x51, 0x11, 0x4b, 0x8a, 0xbb, 0x70, 0xe8, 0x43, 0xc4, 0x43, 0xf9, 0x2d, 0xf8, 0xbd, 0x41,
	0x68, 0xd9, 0xbf, 0x29, 0xd3, 0x6c, 0x8e, 0x16, 0xb5, 0x09, 0x86, 0xde, 0x99, 0x5f, 0x1f, 0xdd,
	0x99, 0x6a, 0x8e, 0x84, 0xe5, 0x14, 0x39, 0xaf, 0x44, 0xd0, 0x1e, 0x69, 0x0a, 0x1e, 0x7c, 0xea,
	0x5d, 0x68, 0x0a, 0x4e, 0x7f, 0x6b, 0x90, 0x5e, 0xfd, 0x7e, 0x0b, 0x1e, 0x8c, 0xbc, 0xce, 0xd9,
	0x7f, 0x54, 0xc1, 0xb0, 0x5b, 0x4b, 0x3f, 0xf1, 0x93, 0x68, 0x96, 0xa8, 0x69, 0x65, 0xef, 0x67,
	0x79, 0x07, 0xe7, 0x58, 0xee, 0xef, 0x01, 0x79, 0x59, 0xa4, 0x03, 0x61, 0x20, 0x52, 0x32, 0x16,
	0xb3, 0x85, 0x46, 0x1e, 0x7c, 0xee, 0x27, 0xdb, 0xbb, 0x45, 0x70, 0x62, 0x8e, 0xab, 0x10, 0xfd,
	0x98, 0x6c, 0x1b, 0xb5, 0xd0, 0x11, 0xc2, 0xb2, 0x41, 0xbf, 0xf0, 0xd4, 0x5b, 0x39, 0x3e, 0xa9,
	0xda, 0x74, 0x48, 0x76, 0x56, 0x97, 0x82, 0xb1, 0xcc, 0x62, 0x70, 0xe4, 0x37, 0xbc, 0x58, 0xd9,
	0x70, 0xe1, 0x62, 0xf4, 0x15, 0x69, 0xa7, 0xb1, 0x00, 0x74, 0xa3, 0x30, 0xf8, 0xd2, 0xfb, 0xdb,
	0x4a, 0x63, 0x71, 0xea, 0xbe, 0xe9, 0x11, 0x79, 0xdf, 0x9d, 0x12, 0xd2, 0x6b, 0xb0, 0xb7, 0x29,
	0x82, 0x54, 0x16, 0xcc, 0x22, 0x75, 0x53, 0x1a, 0x79, 0xf0, 0x95, 0x97, 0xbd, 0xe3, 0x56, 0x9c,
	0x5f, 0xff, 0x74, 0x9b, 0xe2, 0x99, 0xb2, 0x17, 0x65, 0x94, 0x7e, 0x4f, 0x76, 0xef, 0xc9, 0x71,
	0x13, 0x1d, 0x6a, 0xbe, 0x05, 0x5f, 0x7b, 0x8a, 0x37, 0x2b, 0xca, 0x26, 0x66, 0x7c, 0xb2, 0x5c,
	0x44, 0x0f, 0xc9, 0xcb, 0x3b, 0xa5, 0xae, 0x8c, 0xf8, 0x26, 0x3f, 0x57, 0xbd, 0x10, 0x95, 0x1b,
	0x6b, 0xdf, 0xa2, 0x6f, 0xd7, 0xbf, 0x45, 0xd3, 0x0d, 0xff, 0x32, 0x1f, 0xfe, 0x13, 0x00, 0x00,
	0xff, 0xff, 0x42, 0x48, 0x06, 0x7d, 0xb9, 0x07, 0x00, 0x00,
}
