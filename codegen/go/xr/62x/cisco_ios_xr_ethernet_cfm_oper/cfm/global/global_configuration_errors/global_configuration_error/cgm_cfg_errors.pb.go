/*
Copyright 2019 Cisco Systems

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: cgm_cfg_errors.proto

package cisco_ios_xr_ethernet_cfm_oper_cfm_global_global_configuration_errors_global_configuration_error

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type CgmCfgErrors_KEYS struct {
	Domain               string   `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	Service              string   `protobuf:"bytes,2,opt,name=service,proto3" json:"service,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CgmCfgErrors_KEYS) Reset()         { *m = CgmCfgErrors_KEYS{} }
func (m *CgmCfgErrors_KEYS) String() string { return proto.CompactTextString(m) }
func (*CgmCfgErrors_KEYS) ProtoMessage()    {}
func (*CgmCfgErrors_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_03ea84494074d5d5, []int{0}
}

func (m *CgmCfgErrors_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CgmCfgErrors_KEYS.Unmarshal(m, b)
}
func (m *CgmCfgErrors_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CgmCfgErrors_KEYS.Marshal(b, m, deterministic)
}
func (m *CgmCfgErrors_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CgmCfgErrors_KEYS.Merge(m, src)
}
func (m *CgmCfgErrors_KEYS) XXX_Size() int {
	return xxx_messageInfo_CgmCfgErrors_KEYS.Size(m)
}
func (m *CgmCfgErrors_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_CgmCfgErrors_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_CgmCfgErrors_KEYS proto.InternalMessageInfo

func (m *CgmCfgErrors_KEYS) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *CgmCfgErrors_KEYS) GetService() string {
	if m != nil {
		return m.Service
	}
	return ""
}

type CfmBagBdid struct {
	BridgeDomainIdFormat string   `protobuf:"bytes,1,opt,name=bridge_domain_id_format,json=bridgeDomainIdFormat,proto3" json:"bridge_domain_id_format,omitempty"`
	Group                string   `protobuf:"bytes,2,opt,name=group,proto3" json:"group,omitempty"`
	Name                 string   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	CeId                 uint32   `protobuf:"varint,4,opt,name=ce_id,json=ceId,proto3" json:"ce_id,omitempty"`
	RemoteCeId           uint32   `protobuf:"varint,5,opt,name=remote_ce_id,json=remoteCeId,proto3" json:"remote_ce_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CfmBagBdid) Reset()         { *m = CfmBagBdid{} }
func (m *CfmBagBdid) String() string { return proto.CompactTextString(m) }
func (*CfmBagBdid) ProtoMessage()    {}
func (*CfmBagBdid) Descriptor() ([]byte, []int) {
	return fileDescriptor_03ea84494074d5d5, []int{1}
}

func (m *CfmBagBdid) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CfmBagBdid.Unmarshal(m, b)
}
func (m *CfmBagBdid) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CfmBagBdid.Marshal(b, m, deterministic)
}
func (m *CfmBagBdid) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CfmBagBdid.Merge(m, src)
}
func (m *CfmBagBdid) XXX_Size() int {
	return xxx_messageInfo_CfmBagBdid.Size(m)
}
func (m *CfmBagBdid) XXX_DiscardUnknown() {
	xxx_messageInfo_CfmBagBdid.DiscardUnknown(m)
}

var xxx_messageInfo_CfmBagBdid proto.InternalMessageInfo

func (m *CfmBagBdid) GetBridgeDomainIdFormat() string {
	if m != nil {
		return m.BridgeDomainIdFormat
	}
	return ""
}

func (m *CfmBagBdid) GetGroup() string {
	if m != nil {
		return m.Group
	}
	return ""
}

func (m *CfmBagBdid) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CfmBagBdid) GetCeId() uint32 {
	if m != nil {
		return m.CeId
	}
	return 0
}

func (m *CfmBagBdid) GetRemoteCeId() uint32 {
	if m != nil {
		return m.RemoteCeId
	}
	return 0
}

type CgmCfgErrors struct {
	DomainName               string      `protobuf:"bytes,50,opt,name=domain_name,json=domainName,proto3" json:"domain_name,omitempty"`
	Level                    string      `protobuf:"bytes,51,opt,name=level,proto3" json:"level,omitempty"`
	ServiceName              string      `protobuf:"bytes,52,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	BridgeDomainId           *CfmBagBdid `protobuf:"bytes,53,opt,name=bridge_domain_id,json=bridgeDomainId,proto3" json:"bridge_domain_id,omitempty"`
	BridgeDomainIsConfigured bool        `protobuf:"varint,54,opt,name=bridge_domain_is_configured,json=bridgeDomainIsConfigured,proto3" json:"bridge_domain_is_configured,omitempty"`
	L2FibDownloadError       bool        `protobuf:"varint,55,opt,name=l2_fib_download_error,json=l2FibDownloadError,proto3" json:"l2_fib_download_error,omitempty"`
	XXX_NoUnkeyedLiteral     struct{}    `json:"-"`
	XXX_unrecognized         []byte      `json:"-"`
	XXX_sizecache            int32       `json:"-"`
}

func (m *CgmCfgErrors) Reset()         { *m = CgmCfgErrors{} }
func (m *CgmCfgErrors) String() string { return proto.CompactTextString(m) }
func (*CgmCfgErrors) ProtoMessage()    {}
func (*CgmCfgErrors) Descriptor() ([]byte, []int) {
	return fileDescriptor_03ea84494074d5d5, []int{2}
}

func (m *CgmCfgErrors) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CgmCfgErrors.Unmarshal(m, b)
}
func (m *CgmCfgErrors) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CgmCfgErrors.Marshal(b, m, deterministic)
}
func (m *CgmCfgErrors) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CgmCfgErrors.Merge(m, src)
}
func (m *CgmCfgErrors) XXX_Size() int {
	return xxx_messageInfo_CgmCfgErrors.Size(m)
}
func (m *CgmCfgErrors) XXX_DiscardUnknown() {
	xxx_messageInfo_CgmCfgErrors.DiscardUnknown(m)
}

var xxx_messageInfo_CgmCfgErrors proto.InternalMessageInfo

func (m *CgmCfgErrors) GetDomainName() string {
	if m != nil {
		return m.DomainName
	}
	return ""
}

func (m *CgmCfgErrors) GetLevel() string {
	if m != nil {
		return m.Level
	}
	return ""
}

func (m *CgmCfgErrors) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

func (m *CgmCfgErrors) GetBridgeDomainId() *CfmBagBdid {
	if m != nil {
		return m.BridgeDomainId
	}
	return nil
}

func (m *CgmCfgErrors) GetBridgeDomainIsConfigured() bool {
	if m != nil {
		return m.BridgeDomainIsConfigured
	}
	return false
}

func (m *CgmCfgErrors) GetL2FibDownloadError() bool {
	if m != nil {
		return m.L2FibDownloadError
	}
	return false
}

func init() {
	proto.RegisterType((*CgmCfgErrors_KEYS)(nil), "cisco_ios_xr_ethernet_cfm_oper.cfm.global.global_configuration_errors.global_configuration_error.cgm_cfg_errors_KEYS")
	proto.RegisterType((*CfmBagBdid)(nil), "cisco_ios_xr_ethernet_cfm_oper.cfm.global.global_configuration_errors.global_configuration_error.cfm_bag_bdid")
	proto.RegisterType((*CgmCfgErrors)(nil), "cisco_ios_xr_ethernet_cfm_oper.cfm.global.global_configuration_errors.global_configuration_error.cgm_cfg_errors")
}

func init() { proto.RegisterFile("cgm_cfg_errors.proto", fileDescriptor_03ea84494074d5d5) }

var fileDescriptor_03ea84494074d5d5 = []byte{
	// 392 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x92, 0xcf, 0x8e, 0xd3, 0x30,
	0x10, 0xc6, 0x95, 0xa5, 0x59, 0x60, 0x5a, 0x56, 0xc8, 0x1b, 0xc0, 0x12, 0x07, 0x42, 0x4f, 0x39,
	0x45, 0x22, 0x4b, 0xe1, 0xc4, 0xa9, 0x7f, 0x50, 0x85, 0xc4, 0x21, 0x9c, 0x38, 0x0d, 0x89, 0x3d,
	0x09, 0x96, 0x92, 0xb8, 0x72, 0xd2, 0xc2, 0xa3, 0xf0, 0x04, 0xbc, 0x22, 0x57, 0x54, 0xdb, 0xad,
	0x48, 0x25, 0x8e, 0x7b, 0x4a, 0x66, 0x7e, 0xfa, 0xe6, 0xfb, 0xec, 0x31, 0x44, 0xa2, 0x6e, 0x51,
	0x54, 0x35, 0x92, 0x31, 0xda, 0xf4, 0xe9, 0xce, 0xe8, 0x41, 0xb3, 0x6f, 0x42, 0xf5, 0x42, 0xa3,
	0xd2, 0x3d, 0xfe, 0x34, 0x48, 0xc3, 0x77, 0x32, 0x1d, 0x0d, 0x28, 0xaa, 0x16, 0xf5, 0x8e, 0x4c,
	0x2a, 0xaa, 0x36, 0xad, 0x1b, 0x5d, 0x16, 0x8d, 0xff, 0xa0, 0xd0, 0x5d, 0xa5, 0xea, 0xbd, 0x29,
	0x06, 0xa5, 0xbb, 0xd3, 0xb0, 0xff, 0xb3, 0xf9, 0x47, 0xb8, 0x1d, 0x3b, 0xe3, 0xa7, 0xf5, 0xd7,
	0x2f, 0xec, 0x39, 0x5c, 0x4b, 0xdd, 0x16, 0xaa, 0xe3, 0x41, 0x1c, 0x24, 0x8f, 0x73, 0x5f, 0x31,
	0x0e, 0x0f, 0x7b, 0x32, 0x07, 0x25, 0x88, 0x5f, 0x59, 0x70, 0x2a, 0xe7, 0xbf, 0x03, 0x98, 0x1d,
	0x73, 0x95, 0x45, 0x8d, 0xa5, 0x54, 0x92, 0x2d, 0xe0, 0x45, 0x69, 0x94, 0xac, 0x09, 0x9d, 0x16,
	0x95, 0xc4, 0x4a, 0x9b, 0xb6, 0x18, 0xfc, 0xcc, 0xc8, 0xe1, 0x95, 0xa5, 0x5b, 0xb9, 0xb1, 0x8c,
	0x45, 0x10, 0xd6, 0x46, 0xef, 0x77, 0x7e, 0xbe, 0x2b, 0x18, 0x83, 0x49, 0x57, 0xb4, 0xc4, 0x1f,
	0xd8, 0xa6, 0xfd, 0x67, 0xb7, 0x10, 0x0a, 0x42, 0x25, 0xf9, 0x24, 0x0e, 0x92, 0x27, 0xf9, 0x44,
	0xd0, 0x56, 0xb2, 0x18, 0x66, 0x86, 0x5a, 0x3d, 0x10, 0x3a, 0x16, 0x5a, 0x06, 0xae, 0xb7, 0xa4,
	0xad, 0x9c, 0xff, 0xb9, 0x82, 0x9b, 0xf1, 0x91, 0xd9, 0x2b, 0x98, 0xfa, 0x8c, 0xd6, 0x24, 0xb3,
	0x26, 0xe0, 0x5a, 0x9f, 0x8f, 0x56, 0x11, 0x84, 0x0d, 0x1d, 0xa8, 0xe1, 0x77, 0x2e, 0x94, 0x2d,
	0xd8, 0x6b, 0x98, 0xf9, 0xd3, 0x3b, 0xdd, 0x5b, 0x0b, 0xa7, 0xbe, 0x67, 0x85, 0xbf, 0x02, 0x78,
	0x7a, 0x79, 0x0b, 0x7c, 0x11, 0x07, 0xc9, 0x34, 0xeb, 0xd2, 0xfb, 0x5e, 0x6e, 0xfa, 0xef, 0x3e,
	0xf2, 0x9b, 0xf1, 0x75, 0xb3, 0x0f, 0xf0, 0xf2, 0x22, 0x59, 0x7f, 0x1e, 0x42, 0x92, 0xbf, 0x8b,
	0x83, 0xe4, 0x51, 0xce, 0x47, 0xa2, 0x7e, 0x79, 0xe6, 0xec, 0x0d, 0x3c, 0x6b, 0x32, 0xac, 0x54,
	0x89, 0x52, 0xff, 0xe8, 0x1a, 0x5d, 0x48, 0x67, 0xca, 0xdf, 0x5b, 0x21, 0x6b, 0xb2, 0x8d, 0x2a,
	0x57, 0x1e, 0xad, 0x8f, 0xa4, 0xbc, 0xb6, 0x8f, 0xfa, 0xee, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x3e, 0xde, 0x8a, 0xdf, 0xec, 0x02, 0x00, 0x00,
}
