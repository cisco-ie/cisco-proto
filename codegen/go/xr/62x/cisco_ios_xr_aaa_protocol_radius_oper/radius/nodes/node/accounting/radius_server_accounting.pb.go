/*
Copyright 2019 Cisco Systems

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: radius_server_accounting.proto

package cisco_ios_xr_aaa_protocol_radius_oper_radius_nodes_node_accounting

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type RadiusServerAccounting_KEYS struct {
	NodeName             string   `protobuf:"bytes,1,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RadiusServerAccounting_KEYS) Reset()         { *m = RadiusServerAccounting_KEYS{} }
func (m *RadiusServerAccounting_KEYS) String() string { return proto.CompactTextString(m) }
func (*RadiusServerAccounting_KEYS) ProtoMessage()    {}
func (*RadiusServerAccounting_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_b853eef0a51301fd, []int{0}
}

func (m *RadiusServerAccounting_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RadiusServerAccounting_KEYS.Unmarshal(m, b)
}
func (m *RadiusServerAccounting_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RadiusServerAccounting_KEYS.Marshal(b, m, deterministic)
}
func (m *RadiusServerAccounting_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RadiusServerAccounting_KEYS.Merge(m, src)
}
func (m *RadiusServerAccounting_KEYS) XXX_Size() int {
	return xxx_messageInfo_RadiusServerAccounting_KEYS.Size(m)
}
func (m *RadiusServerAccounting_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_RadiusServerAccounting_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_RadiusServerAccounting_KEYS proto.InternalMessageInfo

func (m *RadiusServerAccounting_KEYS) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

type RadiusAccountingData struct {
	Requests                  uint32   `protobuf:"varint,1,opt,name=requests,proto3" json:"requests,omitempty"`
	PendingRequests           uint32   `protobuf:"varint,2,opt,name=pending_requests,json=pendingRequests,proto3" json:"pending_requests,omitempty"`
	Retransmits               uint32   `protobuf:"varint,3,opt,name=retransmits,proto3" json:"retransmits,omitempty"`
	Responses                 uint32   `protobuf:"varint,4,opt,name=responses,proto3" json:"responses,omitempty"`
	Timeouts                  uint32   `protobuf:"varint,5,opt,name=timeouts,proto3" json:"timeouts,omitempty"`
	BadResponses              uint32   `protobuf:"varint,6,opt,name=bad_responses,json=badResponses,proto3" json:"bad_responses,omitempty"`
	BadAuthenticators         uint32   `protobuf:"varint,7,opt,name=bad_authenticators,json=badAuthenticators,proto3" json:"bad_authenticators,omitempty"`
	UnknownPacketTypes        uint32   `protobuf:"varint,8,opt,name=unknown_packet_types,json=unknownPacketTypes,proto3" json:"unknown_packet_types,omitempty"`
	DroppedResponses          uint32   `protobuf:"varint,9,opt,name=dropped_responses,json=droppedResponses,proto3" json:"dropped_responses,omitempty"`
	Rtt                       uint32   `protobuf:"varint,10,opt,name=rtt,proto3" json:"rtt,omitempty"`
	AcctUnexpectedResponses   uint32   `protobuf:"varint,11,opt,name=acct_unexpected_responses,json=acctUnexpectedResponses,proto3" json:"acct_unexpected_responses,omitempty"`
	AcctServerErrorResponses  uint32   `protobuf:"varint,12,opt,name=acct_server_error_responses,json=acctServerErrorResponses,proto3" json:"acct_server_error_responses,omitempty"`
	AcctIncorrectResponses    uint32   `protobuf:"varint,13,opt,name=acct_incorrect_responses,json=acctIncorrectResponses,proto3" json:"acct_incorrect_responses,omitempty"`
	AcctResponseTime          uint32   `protobuf:"varint,14,opt,name=acct_response_time,json=acctResponseTime,proto3" json:"acct_response_time,omitempty"`
	AcctTransactionSuccessess uint32   `protobuf:"varint,15,opt,name=acct_transaction_successess,json=acctTransactionSuccessess,proto3" json:"acct_transaction_successess,omitempty"`
	AcctTransactionFailure    uint32   `protobuf:"varint,16,opt,name=acct_transaction_failure,json=acctTransactionFailure,proto3" json:"acct_transaction_failure,omitempty"`
	XXX_NoUnkeyedLiteral      struct{} `json:"-"`
	XXX_unrecognized          []byte   `json:"-"`
	XXX_sizecache             int32    `json:"-"`
}

func (m *RadiusAccountingData) Reset()         { *m = RadiusAccountingData{} }
func (m *RadiusAccountingData) String() string { return proto.CompactTextString(m) }
func (*RadiusAccountingData) ProtoMessage()    {}
func (*RadiusAccountingData) Descriptor() ([]byte, []int) {
	return fileDescriptor_b853eef0a51301fd, []int{1}
}

func (m *RadiusAccountingData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RadiusAccountingData.Unmarshal(m, b)
}
func (m *RadiusAccountingData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RadiusAccountingData.Marshal(b, m, deterministic)
}
func (m *RadiusAccountingData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RadiusAccountingData.Merge(m, src)
}
func (m *RadiusAccountingData) XXX_Size() int {
	return xxx_messageInfo_RadiusAccountingData.Size(m)
}
func (m *RadiusAccountingData) XXX_DiscardUnknown() {
	xxx_messageInfo_RadiusAccountingData.DiscardUnknown(m)
}

var xxx_messageInfo_RadiusAccountingData proto.InternalMessageInfo

func (m *RadiusAccountingData) GetRequests() uint32 {
	if m != nil {
		return m.Requests
	}
	return 0
}

func (m *RadiusAccountingData) GetPendingRequests() uint32 {
	if m != nil {
		return m.PendingRequests
	}
	return 0
}

func (m *RadiusAccountingData) GetRetransmits() uint32 {
	if m != nil {
		return m.Retransmits
	}
	return 0
}

func (m *RadiusAccountingData) GetResponses() uint32 {
	if m != nil {
		return m.Responses
	}
	return 0
}

func (m *RadiusAccountingData) GetTimeouts() uint32 {
	if m != nil {
		return m.Timeouts
	}
	return 0
}

func (m *RadiusAccountingData) GetBadResponses() uint32 {
	if m != nil {
		return m.BadResponses
	}
	return 0
}

func (m *RadiusAccountingData) GetBadAuthenticators() uint32 {
	if m != nil {
		return m.BadAuthenticators
	}
	return 0
}

func (m *RadiusAccountingData) GetUnknownPacketTypes() uint32 {
	if m != nil {
		return m.UnknownPacketTypes
	}
	return 0
}

func (m *RadiusAccountingData) GetDroppedResponses() uint32 {
	if m != nil {
		return m.DroppedResponses
	}
	return 0
}

func (m *RadiusAccountingData) GetRtt() uint32 {
	if m != nil {
		return m.Rtt
	}
	return 0
}

func (m *RadiusAccountingData) GetAcctUnexpectedResponses() uint32 {
	if m != nil {
		return m.AcctUnexpectedResponses
	}
	return 0
}

func (m *RadiusAccountingData) GetAcctServerErrorResponses() uint32 {
	if m != nil {
		return m.AcctServerErrorResponses
	}
	return 0
}

func (m *RadiusAccountingData) GetAcctIncorrectResponses() uint32 {
	if m != nil {
		return m.AcctIncorrectResponses
	}
	return 0
}

func (m *RadiusAccountingData) GetAcctResponseTime() uint32 {
	if m != nil {
		return m.AcctResponseTime
	}
	return 0
}

func (m *RadiusAccountingData) GetAcctTransactionSuccessess() uint32 {
	if m != nil {
		return m.AcctTransactionSuccessess
	}
	return 0
}

func (m *RadiusAccountingData) GetAcctTransactionFailure() uint32 {
	if m != nil {
		return m.AcctTransactionFailure
	}
	return 0
}

type RadiusAccounting struct {
	ServerAddress        string                `protobuf:"bytes,1,opt,name=server_address,json=serverAddress,proto3" json:"server_address,omitempty"`
	Port                 uint32                `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	Accounting           *RadiusAccountingData `protobuf:"bytes,3,opt,name=accounting,proto3" json:"accounting,omitempty"`
	IpAddress            string                `protobuf:"bytes,4,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
	Family               string                `protobuf:"bytes,5,opt,name=family,proto3" json:"family,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *RadiusAccounting) Reset()         { *m = RadiusAccounting{} }
func (m *RadiusAccounting) String() string { return proto.CompactTextString(m) }
func (*RadiusAccounting) ProtoMessage()    {}
func (*RadiusAccounting) Descriptor() ([]byte, []int) {
	return fileDescriptor_b853eef0a51301fd, []int{2}
}

func (m *RadiusAccounting) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RadiusAccounting.Unmarshal(m, b)
}
func (m *RadiusAccounting) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RadiusAccounting.Marshal(b, m, deterministic)
}
func (m *RadiusAccounting) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RadiusAccounting.Merge(m, src)
}
func (m *RadiusAccounting) XXX_Size() int {
	return xxx_messageInfo_RadiusAccounting.Size(m)
}
func (m *RadiusAccounting) XXX_DiscardUnknown() {
	xxx_messageInfo_RadiusAccounting.DiscardUnknown(m)
}

var xxx_messageInfo_RadiusAccounting proto.InternalMessageInfo

func (m *RadiusAccounting) GetServerAddress() string {
	if m != nil {
		return m.ServerAddress
	}
	return ""
}

func (m *RadiusAccounting) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *RadiusAccounting) GetAccounting() *RadiusAccountingData {
	if m != nil {
		return m.Accounting
	}
	return nil
}

func (m *RadiusAccounting) GetIpAddress() string {
	if m != nil {
		return m.IpAddress
	}
	return ""
}

func (m *RadiusAccounting) GetFamily() string {
	if m != nil {
		return m.Family
	}
	return ""
}

type RadiusServerAccounting struct {
	AccountingGroup      []*RadiusAccounting `protobuf:"bytes,50,rep,name=accounting_group,json=accountingGroup,proto3" json:"accounting_group,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *RadiusServerAccounting) Reset()         { *m = RadiusServerAccounting{} }
func (m *RadiusServerAccounting) String() string { return proto.CompactTextString(m) }
func (*RadiusServerAccounting) ProtoMessage()    {}
func (*RadiusServerAccounting) Descriptor() ([]byte, []int) {
	return fileDescriptor_b853eef0a51301fd, []int{3}
}

func (m *RadiusServerAccounting) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RadiusServerAccounting.Unmarshal(m, b)
}
func (m *RadiusServerAccounting) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RadiusServerAccounting.Marshal(b, m, deterministic)
}
func (m *RadiusServerAccounting) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RadiusServerAccounting.Merge(m, src)
}
func (m *RadiusServerAccounting) XXX_Size() int {
	return xxx_messageInfo_RadiusServerAccounting.Size(m)
}
func (m *RadiusServerAccounting) XXX_DiscardUnknown() {
	xxx_messageInfo_RadiusServerAccounting.DiscardUnknown(m)
}

var xxx_messageInfo_RadiusServerAccounting proto.InternalMessageInfo

func (m *RadiusServerAccounting) GetAccountingGroup() []*RadiusAccounting {
	if m != nil {
		return m.AccountingGroup
	}
	return nil
}

func init() {
	proto.RegisterType((*RadiusServerAccounting_KEYS)(nil), "cisco_ios_xr_aaa_protocol_radius_oper.radius.nodes.node.accounting.radius_server_accounting_KEYS")
	proto.RegisterType((*RadiusAccountingData)(nil), "cisco_ios_xr_aaa_protocol_radius_oper.radius.nodes.node.accounting.radius_accounting_data")
	proto.RegisterType((*RadiusAccounting)(nil), "cisco_ios_xr_aaa_protocol_radius_oper.radius.nodes.node.accounting.radius_accounting")
	proto.RegisterType((*RadiusServerAccounting)(nil), "cisco_ios_xr_aaa_protocol_radius_oper.radius.nodes.node.accounting.radius_server_accounting")
}

func init() { proto.RegisterFile("radius_server_accounting.proto", fileDescriptor_b853eef0a51301fd) }

var fileDescriptor_b853eef0a51301fd = []byte{
	// 588 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x94, 0x4d, 0x6b, 0x54, 0x3f,
	0x14, 0xc6, 0x99, 0xbe, 0xfd, 0x3b, 0x67, 0x3a, 0xed, 0x34, 0xfc, 0xa9, 0xd1, 0x5a, 0x29, 0x23,
	0x42, 0x45, 0x1d, 0xa4, 0x6e, 0x44, 0x54, 0xa8, 0x50, 0x45, 0x04, 0x91, 0xdb, 0x76, 0xa1, 0x9b,
	0x90, 0xc9, 0x3d, 0xad, 0xa1, 0x9d, 0x24, 0x26, 0xb9, 0xda, 0xba, 0xd2, 0x0f, 0xe2, 0x47, 0xf3,
	0xbb, 0x48, 0xce, 0x7d, 0x2d, 0xda, 0x95, 0xb8, 0x29, 0xc9, 0x79, 0x9e, 0xdf, 0xc9, 0x73, 0x9b,
	0x9c, 0x81, 0x5b, 0x5e, 0xe6, 0xba, 0x08, 0x22, 0xa0, 0xff, 0x8c, 0x5e, 0x48, 0xa5, 0x6c, 0x61,
	0xa2, 0x36, 0x27, 0x13, 0xe7, 0x6d, 0xb4, 0xec, 0x85, 0xd2, 0x41, 0x59, 0xa1, 0x6d, 0x10, 0xe7,
	0x5e, 0x48, 0x29, 0x05, 0xd5, 0x95, 0x3d, 0x13, 0x15, 0x69, 0x1d, 0xfa, 0x49, 0xb9, 0x9e, 0x18,
	0x9b, 0x63, 0xf9, 0x77, 0xd2, 0x76, 0x1a, 0x3f, 0x85, 0xad, 0xab, 0x4e, 0x11, 0x6f, 0xf6, 0xdf,
	0x1f, 0xb0, 0x4d, 0xe8, 0x27, 0x46, 0x18, 0x39, 0x43, 0xde, 0xdb, 0xee, 0xed, 0xf4, 0xb3, 0xe5,
	0x54, 0x78, 0x2b, 0x67, 0x38, 0xfe, 0xb9, 0x08, 0x1b, 0x15, 0xde, 0xe1, 0x72, 0x19, 0x25, 0xbb,
	0x01, 0xcb, 0x1e, 0x3f, 0x15, 0x18, 0x62, 0x20, 0x6c, 0x98, 0x35, 0x7b, 0x76, 0x17, 0x46, 0x0e,
	0x4d, 0x9e, 0xbc, 0x8d, 0x67, 0x8e, 0x3c, 0x6b, 0x55, 0x3d, 0xab, 0xad, 0xdb, 0x30, 0xf0, 0x18,
	0xbd, 0x34, 0x61, 0xa6, 0x63, 0xe0, 0xf3, 0xe4, 0xea, 0x96, 0xd8, 0x4d, 0xe8, 0x7b, 0x0c, 0xce,
	0x9a, 0x80, 0x81, 0x2f, 0x90, 0xde, 0x16, 0x52, 0x8c, 0xa8, 0x67, 0x68, 0x8b, 0x18, 0xf8, 0x62,
	0x19, 0xa3, 0xde, 0xb3, 0xdb, 0x30, 0x9c, 0xca, 0x5c, 0xb4, 0xf4, 0x12, 0x19, 0x56, 0xa6, 0x32,
	0xcf, 0x9a, 0x06, 0x0f, 0x80, 0x25, 0x93, 0x2c, 0xe2, 0x47, 0x34, 0x51, 0x2b, 0x19, 0xad, 0x0f,
	0xfc, 0x3f, 0x72, 0xae, 0x4f, 0x65, 0xbe, 0x77, 0x49, 0x60, 0x0f, 0xe1, 0xff, 0xc2, 0x9c, 0x1a,
	0xfb, 0xc5, 0x08, 0x27, 0xd5, 0x29, 0x46, 0x11, 0x2f, 0x1c, 0x06, 0xbe, 0x4c, 0x00, 0xab, 0xb4,
	0x77, 0x24, 0x1d, 0x26, 0x85, 0xdd, 0x83, 0xf5, 0xdc, 0x5b, 0xe7, 0xb0, 0x9b, 0xa4, 0x4f, 0xf6,
	0x51, 0x25, 0xb4, 0x69, 0x46, 0x30, 0xef, 0x63, 0xe4, 0x40, 0x72, 0x5a, 0xb2, 0x27, 0x70, 0x5d,
	0x2a, 0x15, 0x45, 0x61, 0xf0, 0xdc, 0xa1, 0x8a, 0x97, 0xda, 0x0c, 0xc8, 0x77, 0x2d, 0x19, 0x8e,
	0x1a, 0xbd, 0xed, 0xf6, 0x0c, 0x36, 0x89, 0xad, 0xae, 0x1e, 0xbd, 0xb7, 0xbe, 0x43, 0xaf, 0x10,
	0xcd, 0x93, 0xe5, 0x80, 0x1c, 0xfb, 0xc9, 0xd0, 0xe2, 0x8f, 0x81, 0x34, 0xa1, 0x8d, 0xb2, 0xde,
	0xa3, 0x8a, 0x1d, 0x76, 0x48, 0xec, 0x46, 0xd2, 0x5f, 0xd7, 0x72, 0x4b, 0xde, 0x07, 0x46, 0x64,
	0xed, 0x17, 0xe9, 0x4e, 0xf8, 0x6a, 0xf9, 0xd1, 0x49, 0xa9, 0xad, 0x87, 0x7a, 0x86, 0xec, 0x79,
	0x15, 0x93, 0xee, 0x5c, 0xaa, 0xa8, 0xad, 0x11, 0xa1, 0x50, 0x0a, 0x43, 0xc0, 0x10, 0xf8, 0x1a,
	0x61, 0xf4, 0x5f, 0x38, 0x6c, 0x1d, 0x07, 0x8d, 0xa1, 0xc9, 0xd9, 0xe5, 0x8f, 0xa5, 0x3e, 0x2b,
	0x3c, 0xf2, 0x51, 0x9b, 0xb3, 0x03, 0xbf, 0x2c, 0xd5, 0xf1, 0xf7, 0x39, 0x58, 0xff, 0xed, 0x7d,
	0xb3, 0x3b, 0xb0, 0x5a, 0x0f, 0x4b, 0x9e, 0xfb, 0x14, 0xa1, 0x9c, 0x8b, 0x61, 0x59, 0xdd, 0x2b,
	0x8b, 0x8c, 0xc1, 0x82, 0xb3, 0x3e, 0x56, 0x2f, 0x9b, 0xd6, 0xec, 0x2b, 0x40, 0xdb, 0x88, 0x5e,
	0xf3, 0x60, 0xf7, 0xc3, 0xe4, 0xef, 0xe7, 0x78, 0xf2, 0xe7, 0x29, 0xcc, 0x3a, 0xa7, 0xb1, 0x2d,
	0x00, 0xed, 0x9a, 0xc8, 0x0b, 0x14, 0xb9, 0xaf, 0x5d, 0x1d, 0x77, 0x03, 0x96, 0x8e, 0xe5, 0x4c,
	0x9f, 0x5d, 0xd0, 0x9c, 0xf4, 0xb3, 0x6a, 0x37, 0xfe, 0xd1, 0x03, 0x7e, 0xd5, 0x4f, 0x04, 0xfb,
	0xd6, 0x83, 0x51, 0xe7, 0xcc, 0x13, 0x6f, 0x0b, 0xc7, 0x77, 0xb7, 0xe7, 0x77, 0x06, 0xbb, 0x47,
	0xff, 0xe4, 0xb3, 0xb2, 0xb5, 0x76, 0xfd, 0x2a, 0x9d, 0x36, 0x5d, 0xa2, 0xae, 0x8f, 0x7e, 0x05,
	0x00, 0x00, 0xff, 0xff, 0xb6, 0xfb, 0x5c, 0xa3, 0x2e, 0x05, 0x00, 0x00,
}
