/*
Copyright 2019 Cisco Systems

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: tcp_sh_stats_bag.proto

package cisco_ios_xr_ip_tcp_oper_tcp_connection_nodes_node_statistics_summary

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type TcpShStatsBag_KEYS struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TcpShStatsBag_KEYS) Reset()         { *m = TcpShStatsBag_KEYS{} }
func (m *TcpShStatsBag_KEYS) String() string { return proto.CompactTextString(m) }
func (*TcpShStatsBag_KEYS) ProtoMessage()    {}
func (*TcpShStatsBag_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e485ceb3c3dca41, []int{0}
}

func (m *TcpShStatsBag_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TcpShStatsBag_KEYS.Unmarshal(m, b)
}
func (m *TcpShStatsBag_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TcpShStatsBag_KEYS.Marshal(b, m, deterministic)
}
func (m *TcpShStatsBag_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TcpShStatsBag_KEYS.Merge(m, src)
}
func (m *TcpShStatsBag_KEYS) XXX_Size() int {
	return xxx_messageInfo_TcpShStatsBag_KEYS.Size(m)
}
func (m *TcpShStatsBag_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_TcpShStatsBag_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_TcpShStatsBag_KEYS proto.InternalMessageInfo

func (m *TcpShStatsBag_KEYS) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type TcpShStatsBag struct {
	SynCacheCount                   uint32   `protobuf:"varint,50,opt,name=syn_cache_count,json=synCacheCount,proto3" json:"syn_cache_count,omitempty"`
	NumOpenSockets                  uint32   `protobuf:"varint,51,opt,name=num_open_sockets,json=numOpenSockets,proto3" json:"num_open_sockets,omitempty"`
	TotalPaketsSent                 uint32   `protobuf:"varint,52,opt,name=total_pakets_sent,json=totalPaketsSent,proto3" json:"total_pakets_sent,omitempty"`
	SendPacketsDropped              uint32   `protobuf:"varint,53,opt,name=send_packets_dropped,json=sendPacketsDropped,proto3" json:"send_packets_dropped,omitempty"`
	SendAuthPacketsDropped          uint32   `protobuf:"varint,54,opt,name=send_auth_packets_dropped,json=sendAuthPacketsDropped,proto3" json:"send_auth_packets_dropped,omitempty"`
	DataPaketsSent                  uint32   `protobuf:"varint,55,opt,name=data_pakets_sent,json=dataPaketsSent,proto3" json:"data_pakets_sent,omitempty"`
	DataBytesSent                   uint32   `protobuf:"varint,56,opt,name=data_bytes_sent,json=dataBytesSent,proto3" json:"data_bytes_sent,omitempty"`
	PacketsRetransmitted            uint32   `protobuf:"varint,57,opt,name=packets_retransmitted,json=packetsRetransmitted,proto3" json:"packets_retransmitted,omitempty"`
	BytesRetransmitted              uint32   `protobuf:"varint,58,opt,name=bytes_retransmitted,json=bytesRetransmitted,proto3" json:"bytes_retransmitted,omitempty"`
	AckOnlyPacketsSent              uint32   `protobuf:"varint,59,opt,name=ack_only_packets_sent,json=ackOnlyPacketsSent,proto3" json:"ack_only_packets_sent,omitempty"`
	DelayAckPacketsSent             uint32   `protobuf:"varint,60,opt,name=delay_ack_packets_sent,json=delayAckPacketsSent,proto3" json:"delay_ack_packets_sent,omitempty"`
	UrgentOnlyPacketsSent           uint32   `protobuf:"varint,61,opt,name=urgent_only_packets_sent,json=urgentOnlyPacketsSent,proto3" json:"urgent_only_packets_sent,omitempty"`
	WindowProbePacketsSent          uint32   `protobuf:"varint,62,opt,name=window_probe_packets_sent,json=windowProbePacketsSent,proto3" json:"window_probe_packets_sent,omitempty"`
	WindowUpdatePacketsSent         uint32   `protobuf:"varint,63,opt,name=window_update_packets_sent,json=windowUpdatePacketsSent,proto3" json:"window_update_packets_sent,omitempty"`
	ControlPacketsSent              uint32   `protobuf:"varint,64,opt,name=control_packets_sent,json=controlPacketsSent,proto3" json:"control_packets_sent,omitempty"`
	RstPacketsSent                  uint32   `protobuf:"varint,65,opt,name=rst_packets_sent,json=rstPacketsSent,proto3" json:"rst_packets_sent,omitempty"`
	TotalPacketsReceived            uint32   `protobuf:"varint,66,opt,name=total_packets_received,json=totalPacketsReceived,proto3" json:"total_packets_received,omitempty"`
	ReceivedPacketsDropped          uint32   `protobuf:"varint,67,opt,name=received_packets_dropped,json=receivedPacketsDropped,proto3" json:"received_packets_dropped,omitempty"`
	SynaclMatchPktsDropped          uint32   `protobuf:"varint,68,opt,name=synacl_match_pkts_dropped,json=synaclMatchPktsDropped,proto3" json:"synacl_match_pkts_dropped,omitempty"`
	ReceivedPacketsDroppedStaleCHdr uint32   `protobuf:"varint,69,opt,name=received_packets_dropped_stale_c_hdr,json=receivedPacketsDroppedStaleCHdr,proto3" json:"received_packets_dropped_stale_c_hdr,omitempty"`
	ReceivedAuthPacketsDropped      uint32   `protobuf:"varint,70,opt,name=received_auth_packets_dropped,json=receivedAuthPacketsDropped,proto3" json:"received_auth_packets_dropped,omitempty"`
	AckPacketsReceived              uint32   `protobuf:"varint,71,opt,name=ack_packets_received,json=ackPacketsReceived,proto3" json:"ack_packets_received,omitempty"`
	AckbytesReceived                uint32   `protobuf:"varint,72,opt,name=ackbytes_received,json=ackbytesReceived,proto3" json:"ackbytes_received,omitempty"`
	DuplicatedAckPacketsReceived    uint32   `protobuf:"varint,73,opt,name=duplicated_ack_packets_received,json=duplicatedAckPacketsReceived,proto3" json:"duplicated_ack_packets_received,omitempty"`
	AckPacketsForUnsentReceived     uint32   `protobuf:"varint,74,opt,name=ack_packets_for_unsent_received,json=ackPacketsForUnsentReceived,proto3" json:"ack_packets_for_unsent_received,omitempty"`
	DataPacketsReceivedInSequence   uint32   `protobuf:"varint,75,opt,name=data_packets_received_in_sequence,json=dataPacketsReceivedInSequence,proto3" json:"data_packets_received_in_sequence,omitempty"`
	DataBytesReceivedInSequence     uint32   `protobuf:"varint,76,opt,name=data_bytes_received_in_sequence,json=dataBytesReceivedInSequence,proto3" json:"data_bytes_received_in_sequence,omitempty"`
	DuplicatePacketsReceived        uint32   `protobuf:"varint,77,opt,name=duplicate_packets_received,json=duplicatePacketsReceived,proto3" json:"duplicate_packets_received,omitempty"`
	DuplicateBytesReceived          uint32   `protobuf:"varint,78,opt,name=duplicate_bytes_received,json=duplicateBytesReceived,proto3" json:"duplicate_bytes_received,omitempty"`
	PartialDuplicateAckReceived     uint32   `protobuf:"varint,79,opt,name=partial_duplicate_ack_received,json=partialDuplicateAckReceived,proto3" json:"partial_duplicate_ack_received,omitempty"`
	PartialDuplicateBytesReceived   uint32   `protobuf:"varint,80,opt,name=partial_duplicate_bytes_received,json=partialDuplicateBytesReceived,proto3" json:"partial_duplicate_bytes_received,omitempty"`
	OutOfOrderPacketsReceived       uint32   `protobuf:"varint,81,opt,name=out_of_order_packets_received,json=outOfOrderPacketsReceived,proto3" json:"out_of_order_packets_received,omitempty"`
	OutOfOrderBytesReceived         uint32   `protobuf:"varint,82,opt,name=out_of_order_bytes_received,json=outOfOrderBytesReceived,proto3" json:"out_of_order_bytes_received,omitempty"`
	AfterWindowPacketsReceived      uint32   `protobuf:"varint,83,opt,name=after_window_packets_received,json=afterWindowPacketsReceived,proto3" json:"after_window_packets_received,omitempty"`
	AfterWindowBytesReceived        uint32   `protobuf:"varint,84,opt,name=after_window_bytes_received,json=afterWindowBytesReceived,proto3" json:"after_window_bytes_received,omitempty"`
	WindowProbePacketsReceived      uint32   `protobuf:"varint,85,opt,name=window_probe_packets_received,json=windowProbePacketsReceived,proto3" json:"window_probe_packets_received,omitempty"`
	WindowUpdatePacketsReceived     uint32   `protobuf:"varint,86,opt,name=window_update_packets_received,json=windowUpdatePacketsReceived,proto3" json:"window_update_packets_received,omitempty"`
	PacketsReceivedAfterClosePacket uint32   `protobuf:"varint,87,opt,name=packets_received_after_close_packet,json=packetsReceivedAfterClosePacket,proto3" json:"packets_received_after_close_packet,omitempty"`
	BadChecksumPacketsReceived      uint32   `protobuf:"varint,88,opt,name=bad_checksum_packets_received,json=badChecksumPacketsReceived,proto3" json:"bad_checksum_packets_received,omitempty"`
	TooShortPacketsReceived         uint32   `protobuf:"varint,89,opt,name=too_short_packets_received,json=tooShortPacketsReceived,proto3" json:"too_short_packets_received,omitempty"`
	MalformedPacketsReceived        uint32   `protobuf:"varint,90,opt,name=malformed_packets_received,json=malformedPacketsReceived,proto3" json:"malformed_packets_received,omitempty"`
	NoPortPacketsReceived           uint32   `protobuf:"varint,91,opt,name=no_port_packets_received,json=noPortPacketsReceived,proto3" json:"no_port_packets_received,omitempty"`
	ConnectionsRequested            uint32   `protobuf:"varint,92,opt,name=connections_requested,json=connectionsRequested,proto3" json:"connections_requested,omitempty"`
	ConnectionsAccepted             uint32   `protobuf:"varint,93,opt,name=connections_accepted,json=connectionsAccepted,proto3" json:"connections_accepted,omitempty"`
	ConnectionsEstablished          uint32   `protobuf:"varint,94,opt,name=connections_established,json=connectionsEstablished,proto3" json:"connections_established,omitempty"`
	ConnectionsForciblyClosed       uint32   `protobuf:"varint,95,opt,name=connections_forcibly_closed,json=connectionsForciblyClosed,proto3" json:"connections_forcibly_closed,omitempty"`
	ConnectionsClosed               uint32   `protobuf:"varint,96,opt,name=connections_closed,json=connectionsClosed,proto3" json:"connections_closed,omitempty"`
	ConnectionsDropped              uint32   `protobuf:"varint,97,opt,name=connections_dropped,json=connectionsDropped,proto3" json:"connections_dropped,omitempty"`
	EmbryonicConnectionDropped      uint32   `protobuf:"varint,98,opt,name=embryonic_connection_dropped,json=embryonicConnectionDropped,proto3" json:"embryonic_connection_dropped,omitempty"`
	ConnectionsFailed               uint32   `protobuf:"varint,99,opt,name=connections_failed,json=connectionsFailed,proto3" json:"connections_failed,omitempty"`
	EstablishedConnectionsReset     uint32   `protobuf:"varint,100,opt,name=established_connections_reset,json=establishedConnectionsReset,proto3" json:"established_connections_reset,omitempty"`
	RetransmitTimeouts              uint32   `protobuf:"varint,101,opt,name=retransmit_timeouts,json=retransmitTimeouts,proto3" json:"retransmit_timeouts,omitempty"`
	RetransmitDropped               uint32   `protobuf:"varint,102,opt,name=retransmit_dropped,json=retransmitDropped,proto3" json:"retransmit_dropped,omitempty"`
	KeepAliveTimeouts               uint32   `protobuf:"varint,103,opt,name=keep_alive_timeouts,json=keepAliveTimeouts,proto3" json:"keep_alive_timeouts,omitempty"`
	KeepAliveDropped                uint32   `protobuf:"varint,104,opt,name=keep_alive_dropped,json=keepAliveDropped,proto3" json:"keep_alive_dropped,omitempty"`
	KeepAliveProbes                 uint32   `protobuf:"varint,105,opt,name=keep_alive_probes,json=keepAliveProbes,proto3" json:"keep_alive_probes,omitempty"`
	PawsDropped                     uint32   `protobuf:"varint,106,opt,name=paws_dropped,json=pawsDropped,proto3" json:"paws_dropped,omitempty"`
	PersistDropped                  uint32   `protobuf:"varint,107,opt,name=persist_dropped,json=persistDropped,proto3" json:"persist_dropped,omitempty"`
	TryLockDropped                  uint32   `protobuf:"varint,108,opt,name=try_lock_dropped,json=tryLockDropped,proto3" json:"try_lock_dropped,omitempty"`
	ConnectionRateLimited           uint32   `protobuf:"varint,109,opt,name=connection_rate_limited,json=connectionRateLimited,proto3" json:"connection_rate_limited,omitempty"`
	SynCacheAdded                   uint32   `protobuf:"varint,110,opt,name=syn_cache_added,json=synCacheAdded,proto3" json:"syn_cache_added,omitempty"`
	SynCacheCompleted               uint32   `protobuf:"varint,111,opt,name=syn_cache_completed,json=synCacheCompleted,proto3" json:"syn_cache_completed,omitempty"`
	SynCacheTimedOut                uint32   `protobuf:"varint,112,opt,name=syn_cache_timed_out,json=synCacheTimedOut,proto3" json:"syn_cache_timed_out,omitempty"`
	SynCacheOverflow                uint32   `protobuf:"varint,113,opt,name=syn_cache_overflow,json=synCacheOverflow,proto3" json:"syn_cache_overflow,omitempty"`
	SynCacheReset                   uint32   `protobuf:"varint,114,opt,name=syn_cache_reset,json=synCacheReset,proto3" json:"syn_cache_reset,omitempty"`
	SynCacheUnreach                 uint32   `protobuf:"varint,115,opt,name=syn_cache_unreach,json=synCacheUnreach,proto3" json:"syn_cache_unreach,omitempty"`
	SynCacheBucketOflow             uint32   `protobuf:"varint,116,opt,name=syn_cache_bucket_oflow,json=synCacheBucketOflow,proto3" json:"syn_cache_bucket_oflow,omitempty"`
	SynCacheAborted                 uint32   `protobuf:"varint,117,opt,name=syn_cache_aborted,json=synCacheAborted,proto3" json:"syn_cache_aborted,omitempty"`
	SynCacheDuplicateSyNs           uint32   `protobuf:"varint,118,opt,name=syn_cache_duplicate_sy_ns,json=synCacheDuplicateSyNs,proto3" json:"syn_cache_duplicate_sy_ns,omitempty"`
	SynCacheDropped                 uint32   `protobuf:"varint,119,opt,name=syn_cache_dropped,json=synCacheDropped,proto3" json:"syn_cache_dropped,omitempty"`
	PulseErrors                     uint32   `protobuf:"varint,120,opt,name=pulse_errors,json=pulseErrors,proto3" json:"pulse_errors,omitempty"`
	SocketLayerPackets              uint32   `protobuf:"varint,121,opt,name=socket_layer_packets,json=socketLayerPackets,proto3" json:"socket_layer_packets,omitempty"`
	ReassemblyPackets               uint32   `protobuf:"varint,122,opt,name=reassembly_packets,json=reassemblyPackets,proto3" json:"reassembly_packets,omitempty"`
	RecoveredPackets                uint32   `protobuf:"varint,123,opt,name=recovered_packets,json=recoveredPackets,proto3" json:"recovered_packets,omitempty"`
	PacketFailures                  uint32   `protobuf:"varint,124,opt,name=packet_failures,json=packetFailures,proto3" json:"packet_failures,omitempty"`
	MssUp                           uint32   `protobuf:"varint,125,opt,name=mss_up,json=mssUp,proto3" json:"mss_up,omitempty"`
	MssDown                         uint32   `protobuf:"varint,126,opt,name=mss_down,json=mssDown,proto3" json:"mss_down,omitempty"`
	TruncatedWriteIov               uint32   `protobuf:"varint,127,opt,name=truncated_write_iov,json=truncatedWriteIov,proto3" json:"truncated_write_iov,omitempty"`
	NoThrottle                      uint32   `protobuf:"varint,128,opt,name=no_throttle,json=noThrottle,proto3" json:"no_throttle,omitempty"`
	LowWaterMarkThrottle            uint32   `protobuf:"varint,129,opt,name=low_water_mark_throttle,json=lowWaterMarkThrottle,proto3" json:"low_water_mark_throttle,omitempty"`
	HighWaterMarkThrottle           uint32   `protobuf:"varint,130,opt,name=high_water_mark_throttle,json=highWaterMarkThrottle,proto3" json:"high_water_mark_throttle,omitempty"`
	StalledTimerTickleCount         uint32   `protobuf:"varint,131,opt,name=stalled_timer_tickle_count,json=stalledTimerTickleCount,proto3" json:"stalled_timer_tickle_count,omitempty"`
	StalledTimerTickleTime          uint32   `protobuf:"varint,132,opt,name=stalled_timer_tickle_time,json=stalledTimerTickleTime,proto3" json:"stalled_timer_tickle_time,omitempty"`
	IqSockWrites                    uint32   `protobuf:"varint,133,opt,name=iq_sock_writes,json=iqSockWrites,proto3" json:"iq_sock_writes,omitempty"`
	IqSockRetries                   uint32   `protobuf:"varint,134,opt,name=iq_sock_retries,json=iqSockRetries,proto3" json:"iq_sock_retries,omitempty"`
	IqSockAborts                    uint32   `protobuf:"varint,135,opt,name=iq_sock_aborts,json=iqSockAborts,proto3" json:"iq_sock_aborts,omitempty"`
	XXX_NoUnkeyedLiteral            struct{} `json:"-"`
	XXX_unrecognized                []byte   `json:"-"`
	XXX_sizecache                   int32    `json:"-"`
}

func (m *TcpShStatsBag) Reset()         { *m = TcpShStatsBag{} }
func (m *TcpShStatsBag) String() string { return proto.CompactTextString(m) }
func (*TcpShStatsBag) ProtoMessage()    {}
func (*TcpShStatsBag) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e485ceb3c3dca41, []int{1}
}

func (m *TcpShStatsBag) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TcpShStatsBag.Unmarshal(m, b)
}
func (m *TcpShStatsBag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TcpShStatsBag.Marshal(b, m, deterministic)
}
func (m *TcpShStatsBag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TcpShStatsBag.Merge(m, src)
}
func (m *TcpShStatsBag) XXX_Size() int {
	return xxx_messageInfo_TcpShStatsBag.Size(m)
}
func (m *TcpShStatsBag) XXX_DiscardUnknown() {
	xxx_messageInfo_TcpShStatsBag.DiscardUnknown(m)
}

var xxx_messageInfo_TcpShStatsBag proto.InternalMessageInfo

func (m *TcpShStatsBag) GetSynCacheCount() uint32 {
	if m != nil {
		return m.SynCacheCount
	}
	return 0
}

func (m *TcpShStatsBag) GetNumOpenSockets() uint32 {
	if m != nil {
		return m.NumOpenSockets
	}
	return 0
}

func (m *TcpShStatsBag) GetTotalPaketsSent() uint32 {
	if m != nil {
		return m.TotalPaketsSent
	}
	return 0
}

func (m *TcpShStatsBag) GetSendPacketsDropped() uint32 {
	if m != nil {
		return m.SendPacketsDropped
	}
	return 0
}

func (m *TcpShStatsBag) GetSendAuthPacketsDropped() uint32 {
	if m != nil {
		return m.SendAuthPacketsDropped
	}
	return 0
}

func (m *TcpShStatsBag) GetDataPaketsSent() uint32 {
	if m != nil {
		return m.DataPaketsSent
	}
	return 0
}

func (m *TcpShStatsBag) GetDataBytesSent() uint32 {
	if m != nil {
		return m.DataBytesSent
	}
	return 0
}

func (m *TcpShStatsBag) GetPacketsRetransmitted() uint32 {
	if m != nil {
		return m.PacketsRetransmitted
	}
	return 0
}

func (m *TcpShStatsBag) GetBytesRetransmitted() uint32 {
	if m != nil {
		return m.BytesRetransmitted
	}
	return 0
}

func (m *TcpShStatsBag) GetAckOnlyPacketsSent() uint32 {
	if m != nil {
		return m.AckOnlyPacketsSent
	}
	return 0
}

func (m *TcpShStatsBag) GetDelayAckPacketsSent() uint32 {
	if m != nil {
		return m.DelayAckPacketsSent
	}
	return 0
}

func (m *TcpShStatsBag) GetUrgentOnlyPacketsSent() uint32 {
	if m != nil {
		return m.UrgentOnlyPacketsSent
	}
	return 0
}

func (m *TcpShStatsBag) GetWindowProbePacketsSent() uint32 {
	if m != nil {
		return m.WindowProbePacketsSent
	}
	return 0
}

func (m *TcpShStatsBag) GetWindowUpdatePacketsSent() uint32 {
	if m != nil {
		return m.WindowUpdatePacketsSent
	}
	return 0
}

func (m *TcpShStatsBag) GetControlPacketsSent() uint32 {
	if m != nil {
		return m.ControlPacketsSent
	}
	return 0
}

func (m *TcpShStatsBag) GetRstPacketsSent() uint32 {
	if m != nil {
		return m.RstPacketsSent
	}
	return 0
}

func (m *TcpShStatsBag) GetTotalPacketsReceived() uint32 {
	if m != nil {
		return m.TotalPacketsReceived
	}
	return 0
}

func (m *TcpShStatsBag) GetReceivedPacketsDropped() uint32 {
	if m != nil {
		return m.ReceivedPacketsDropped
	}
	return 0
}

func (m *TcpShStatsBag) GetSynaclMatchPktsDropped() uint32 {
	if m != nil {
		return m.SynaclMatchPktsDropped
	}
	return 0
}

func (m *TcpShStatsBag) GetReceivedPacketsDroppedStaleCHdr() uint32 {
	if m != nil {
		return m.ReceivedPacketsDroppedStaleCHdr
	}
	return 0
}

func (m *TcpShStatsBag) GetReceivedAuthPacketsDropped() uint32 {
	if m != nil {
		return m.ReceivedAuthPacketsDropped
	}
	return 0
}

func (m *TcpShStatsBag) GetAckPacketsReceived() uint32 {
	if m != nil {
		return m.AckPacketsReceived
	}
	return 0
}

func (m *TcpShStatsBag) GetAckbytesReceived() uint32 {
	if m != nil {
		return m.AckbytesReceived
	}
	return 0
}

func (m *TcpShStatsBag) GetDuplicatedAckPacketsReceived() uint32 {
	if m != nil {
		return m.DuplicatedAckPacketsReceived
	}
	return 0
}

func (m *TcpShStatsBag) GetAckPacketsForUnsentReceived() uint32 {
	if m != nil {
		return m.AckPacketsForUnsentReceived
	}
	return 0
}

func (m *TcpShStatsBag) GetDataPacketsReceivedInSequence() uint32 {
	if m != nil {
		return m.DataPacketsReceivedInSequence
	}
	return 0
}

func (m *TcpShStatsBag) GetDataBytesReceivedInSequence() uint32 {
	if m != nil {
		return m.DataBytesReceivedInSequence
	}
	return 0
}

func (m *TcpShStatsBag) GetDuplicatePacketsReceived() uint32 {
	if m != nil {
		return m.DuplicatePacketsReceived
	}
	return 0
}

func (m *TcpShStatsBag) GetDuplicateBytesReceived() uint32 {
	if m != nil {
		return m.DuplicateBytesReceived
	}
	return 0
}

func (m *TcpShStatsBag) GetPartialDuplicateAckReceived() uint32 {
	if m != nil {
		return m.PartialDuplicateAckReceived
	}
	return 0
}

func (m *TcpShStatsBag) GetPartialDuplicateBytesReceived() uint32 {
	if m != nil {
		return m.PartialDuplicateBytesReceived
	}
	return 0
}

func (m *TcpShStatsBag) GetOutOfOrderPacketsReceived() uint32 {
	if m != nil {
		return m.OutOfOrderPacketsReceived
	}
	return 0
}

func (m *TcpShStatsBag) GetOutOfOrderBytesReceived() uint32 {
	if m != nil {
		return m.OutOfOrderBytesReceived
	}
	return 0
}

func (m *TcpShStatsBag) GetAfterWindowPacketsReceived() uint32 {
	if m != nil {
		return m.AfterWindowPacketsReceived
	}
	return 0
}

func (m *TcpShStatsBag) GetAfterWindowBytesReceived() uint32 {
	if m != nil {
		return m.AfterWindowBytesReceived
	}
	return 0
}

func (m *TcpShStatsBag) GetWindowProbePacketsReceived() uint32 {
	if m != nil {
		return m.WindowProbePacketsReceived
	}
	return 0
}

func (m *TcpShStatsBag) GetWindowUpdatePacketsReceived() uint32 {
	if m != nil {
		return m.WindowUpdatePacketsReceived
	}
	return 0
}

func (m *TcpShStatsBag) GetPacketsReceivedAfterClosePacket() uint32 {
	if m != nil {
		return m.PacketsReceivedAfterClosePacket
	}
	return 0
}

func (m *TcpShStatsBag) GetBadChecksumPacketsReceived() uint32 {
	if m != nil {
		return m.BadChecksumPacketsReceived
	}
	return 0
}

func (m *TcpShStatsBag) GetTooShortPacketsReceived() uint32 {
	if m != nil {
		return m.TooShortPacketsReceived
	}
	return 0
}

func (m *TcpShStatsBag) GetMalformedPacketsReceived() uint32 {
	if m != nil {
		return m.MalformedPacketsReceived
	}
	return 0
}

func (m *TcpShStatsBag) GetNoPortPacketsReceived() uint32 {
	if m != nil {
		return m.NoPortPacketsReceived
	}
	return 0
}

func (m *TcpShStatsBag) GetConnectionsRequested() uint32 {
	if m != nil {
		return m.ConnectionsRequested
	}
	return 0
}

func (m *TcpShStatsBag) GetConnectionsAccepted() uint32 {
	if m != nil {
		return m.ConnectionsAccepted
	}
	return 0
}

func (m *TcpShStatsBag) GetConnectionsEstablished() uint32 {
	if m != nil {
		return m.ConnectionsEstablished
	}
	return 0
}

func (m *TcpShStatsBag) GetConnectionsForciblyClosed() uint32 {
	if m != nil {
		return m.ConnectionsForciblyClosed
	}
	return 0
}

func (m *TcpShStatsBag) GetConnectionsClosed() uint32 {
	if m != nil {
		return m.ConnectionsClosed
	}
	return 0
}

func (m *TcpShStatsBag) GetConnectionsDropped() uint32 {
	if m != nil {
		return m.ConnectionsDropped
	}
	return 0
}

func (m *TcpShStatsBag) GetEmbryonicConnectionDropped() uint32 {
	if m != nil {
		return m.EmbryonicConnectionDropped
	}
	return 0
}

func (m *TcpShStatsBag) GetConnectionsFailed() uint32 {
	if m != nil {
		return m.ConnectionsFailed
	}
	return 0
}

func (m *TcpShStatsBag) GetEstablishedConnectionsReset() uint32 {
	if m != nil {
		return m.EstablishedConnectionsReset
	}
	return 0
}

func (m *TcpShStatsBag) GetRetransmitTimeouts() uint32 {
	if m != nil {
		return m.RetransmitTimeouts
	}
	return 0
}

func (m *TcpShStatsBag) GetRetransmitDropped() uint32 {
	if m != nil {
		return m.RetransmitDropped
	}
	return 0
}

func (m *TcpShStatsBag) GetKeepAliveTimeouts() uint32 {
	if m != nil {
		return m.KeepAliveTimeouts
	}
	return 0
}

func (m *TcpShStatsBag) GetKeepAliveDropped() uint32 {
	if m != nil {
		return m.KeepAliveDropped
	}
	return 0
}

func (m *TcpShStatsBag) GetKeepAliveProbes() uint32 {
	if m != nil {
		return m.KeepAliveProbes
	}
	return 0
}

func (m *TcpShStatsBag) GetPawsDropped() uint32 {
	if m != nil {
		return m.PawsDropped
	}
	return 0
}

func (m *TcpShStatsBag) GetPersistDropped() uint32 {
	if m != nil {
		return m.PersistDropped
	}
	return 0
}

func (m *TcpShStatsBag) GetTryLockDropped() uint32 {
	if m != nil {
		return m.TryLockDropped
	}
	return 0
}

func (m *TcpShStatsBag) GetConnectionRateLimited() uint32 {
	if m != nil {
		return m.ConnectionRateLimited
	}
	return 0
}

func (m *TcpShStatsBag) GetSynCacheAdded() uint32 {
	if m != nil {
		return m.SynCacheAdded
	}
	return 0
}

func (m *TcpShStatsBag) GetSynCacheCompleted() uint32 {
	if m != nil {
		return m.SynCacheCompleted
	}
	return 0
}

func (m *TcpShStatsBag) GetSynCacheTimedOut() uint32 {
	if m != nil {
		return m.SynCacheTimedOut
	}
	return 0
}

func (m *TcpShStatsBag) GetSynCacheOverflow() uint32 {
	if m != nil {
		return m.SynCacheOverflow
	}
	return 0
}

func (m *TcpShStatsBag) GetSynCacheReset() uint32 {
	if m != nil {
		return m.SynCacheReset
	}
	return 0
}

func (m *TcpShStatsBag) GetSynCacheUnreach() uint32 {
	if m != nil {
		return m.SynCacheUnreach
	}
	return 0
}

func (m *TcpShStatsBag) GetSynCacheBucketOflow() uint32 {
	if m != nil {
		return m.SynCacheBucketOflow
	}
	return 0
}

func (m *TcpShStatsBag) GetSynCacheAborted() uint32 {
	if m != nil {
		return m.SynCacheAborted
	}
	return 0
}

func (m *TcpShStatsBag) GetSynCacheDuplicateSyNs() uint32 {
	if m != nil {
		return m.SynCacheDuplicateSyNs
	}
	return 0
}

func (m *TcpShStatsBag) GetSynCacheDropped() uint32 {
	if m != nil {
		return m.SynCacheDropped
	}
	return 0
}

func (m *TcpShStatsBag) GetPulseErrors() uint32 {
	if m != nil {
		return m.PulseErrors
	}
	return 0
}

func (m *TcpShStatsBag) GetSocketLayerPackets() uint32 {
	if m != nil {
		return m.SocketLayerPackets
	}
	return 0
}

func (m *TcpShStatsBag) GetReassemblyPackets() uint32 {
	if m != nil {
		return m.ReassemblyPackets
	}
	return 0
}

func (m *TcpShStatsBag) GetRecoveredPackets() uint32 {
	if m != nil {
		return m.RecoveredPackets
	}
	return 0
}

func (m *TcpShStatsBag) GetPacketFailures() uint32 {
	if m != nil {
		return m.PacketFailures
	}
	return 0
}

func (m *TcpShStatsBag) GetMssUp() uint32 {
	if m != nil {
		return m.MssUp
	}
	return 0
}

func (m *TcpShStatsBag) GetMssDown() uint32 {
	if m != nil {
		return m.MssDown
	}
	return 0
}

func (m *TcpShStatsBag) GetTruncatedWriteIov() uint32 {
	if m != nil {
		return m.TruncatedWriteIov
	}
	return 0
}

func (m *TcpShStatsBag) GetNoThrottle() uint32 {
	if m != nil {
		return m.NoThrottle
	}
	return 0
}

func (m *TcpShStatsBag) GetLowWaterMarkThrottle() uint32 {
	if m != nil {
		return m.LowWaterMarkThrottle
	}
	return 0
}

func (m *TcpShStatsBag) GetHighWaterMarkThrottle() uint32 {
	if m != nil {
		return m.HighWaterMarkThrottle
	}
	return 0
}

func (m *TcpShStatsBag) GetStalledTimerTickleCount() uint32 {
	if m != nil {
		return m.StalledTimerTickleCount
	}
	return 0
}

func (m *TcpShStatsBag) GetStalledTimerTickleTime() uint32 {
	if m != nil {
		return m.StalledTimerTickleTime
	}
	return 0
}

func (m *TcpShStatsBag) GetIqSockWrites() uint32 {
	if m != nil {
		return m.IqSockWrites
	}
	return 0
}

func (m *TcpShStatsBag) GetIqSockRetries() uint32 {
	if m != nil {
		return m.IqSockRetries
	}
	return 0
}

func (m *TcpShStatsBag) GetIqSockAborts() uint32 {
	if m != nil {
		return m.IqSockAborts
	}
	return 0
}

func init() {
	proto.RegisterType((*TcpShStatsBag_KEYS)(nil), "cisco_ios_xr_ip_tcp_oper.tcp_connection.nodes.node.statistics.summary.tcp_sh_stats_bag_KEYS")
	proto.RegisterType((*TcpShStatsBag)(nil), "cisco_ios_xr_ip_tcp_oper.tcp_connection.nodes.node.statistics.summary.tcp_sh_stats_bag")
}

func init() { proto.RegisterFile("tcp_sh_stats_bag.proto", fileDescriptor_1e485ceb3c3dca41) }

var fileDescriptor_1e485ceb3c3dca41 = []byte{
	// 1768 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x58, 0x6b, 0x73, 0xdc, 0xb6,
	0x15, 0x1d, 0x65, 0xa6, 0x69, 0x8b, 0xc4, 0xb6, 0x44, 0x4b, 0x36, 0x24, 0x47, 0xb5, 0x93, 0xb4,
	0x89, 0xc6, 0x69, 0x14, 0xa7, 0x4e, 0x63, 0x3b, 0x76, 0x52, 0xaf, 0x57, 0x52, 0xec, 0x46, 0x8e,
	0x54, 0xad, 0x55, 0x37, 0x7d, 0xa1, 0x58, 0x10, 0xab, 0x65, 0x49, 0x02, 0x14, 0x00, 0x6a, 0xc3,
	0xbe, 0xdf, 0xfd, 0x89, 0xfd, 0x3b, 0x1d, 0xe0, 0x12, 0x24, 0xc8, 0x65, 0xbe, 0x78, 0xe4, 0x7b,
	0xce, 0xb9, 0xb8, 0xc0, 0x7d, 0x10, 0x58, 0x74, 0xcd, 0xb0, 0x82, 0xe8, 0x39, 0xd1, 0x86, 0x1a,
	0x4d, 0xa6, 0xf4, 0x6c, 0xb7, 0x50, 0xd2, 0xc8, 0x68, 0x9f, 0x25, 0x9a, 0x49, 0x92, 0x48, 0x4d,
	0xbe, 0x56, 0x24, 0x29, 0x88, 0xe5, 0xc9, 0x82, 0xab, 0x5d, 0xfb, 0x07, 0x93, 0x42, 0x70, 0x66,
	0x12, 0x29, 0x76, 0x85, 0x8c, 0xb9, 0x76, 0xff, 0xee, 0x5a, 0x1f, 0x89, 0x36, 0x09, 0xd3, 0xbb,
	0xba, 0xcc, 0x73, 0xaa, 0xaa, 0xb7, 0xde, 0x45, 0x1b, 0xfd, 0x05, 0xc8, 0x17, 0xfb, 0x5f, 0x4d,
	0xa2, 0xcb, 0xe8, 0x95, 0x24, 0xc6, 0x2b, 0xb7, 0x56, 0x76, 0xbe, 0x7b, 0xf2, 0x4a, 0x12, 0xbf,
	0xf5, 0xbf, 0xb7, 0xd1, 0x6a, 0x9f, 0x19, 0xbd, 0x83, 0xae, 0xe8, 0x4a, 0x10, 0x46, 0xd9, 0x9c,
	0x13, 0x26, 0x4b, 0x61, 0xf0, 0x8f, 0x6e, 0xad, 0xec, 0x5c, 0x3a, 0xb9, 0xa4, 0x2b, 0x31, 0xb6,
	0xd6, 0xb1, 0x35, 0x46, 0x3b, 0x68, 0x55, 0x94, 0xb9, 0x0d, 0x4f, 0x10, 0x2d, 0x59, 0xca, 0x8d,
	0xc6, 0x77, 0x1d, 0xf1, 0xb2, 0x28, 0xf3, 0xa3, 0x82, 0x8b, 0x09, 0x58, 0xa3, 0xdb, 0x68, 0xcd,
	0x48, 0x43, 0x33, 0x52, 0x50, 0xfb, 0x7f, 0xa2, 0xb9, 0x30, 0xf8, 0x23, 0x47, 0xbd, 0xe2, 0x80,
	0x63, 0x67, 0x9f, 0x70, 0x61, 0xa2, 0x3b, 0x68, 0x5d, 0x73, 0x11, 0x93, 0x82, 0x3a, 0x2d, 0x89,
	0x95, 0x2c, 0x0a, 0x1e, 0xe3, 0x1f, 0x3b, 0x7a, 0x64, 0xb1, 0x63, 0x80, 0xf6, 0x00, 0x89, 0x1e,
	0xa0, 0x4d, 0xa7, 0xa0, 0xa5, 0x99, 0x2f, 0xc9, 0x3e, 0x76, 0xb2, 0x6b, 0x96, 0x30, 0x2a, 0xcd,
	0xbc, 0x27, 0xdd, 0x41, 0xab, 0x31, 0x35, 0xb4, 0x13, 0xd7, 0x3d, 0xd8, 0x82, 0xb5, 0x07, 0x61,
	0xbd, 0x83, 0xae, 0x38, 0xe6, 0xb4, 0x32, 0xbc, 0x26, 0xde, 0x87, 0x43, 0xb1, 0xe6, 0x27, 0xd6,
	0xea, 0x78, 0x77, 0xd1, 0x86, 0x0f, 0x41, 0x71, 0xa3, 0xa8, 0xd0, 0x79, 0x62, 0x0c, 0x8f, 0xf1,
	0x03, 0xc7, 0x5e, 0xaf, 0xc1, 0x93, 0x10, 0x8b, 0x3e, 0x40, 0x57, 0xc1, 0x6f, 0x57, 0xf2, 0x09,
	0x6c, 0xd9, 0x41, 0x5d, 0xc1, 0x87, 0x68, 0x83, 0xb2, 0x94, 0x48, 0x91, 0x55, 0xcd, 0x8e, 0x5d,
	0x4c, 0x0f, 0x41, 0x42, 0x59, 0x7a, 0x24, 0xb2, 0xaa, 0xde, 0x6d, 0x1d, 0xd8, 0xb5, 0x98, 0x67,
	0xb4, 0x22, 0x56, 0xd8, 0xd1, 0x3c, 0x72, 0x9a, 0xab, 0x0e, 0x1d, 0xb1, 0x34, 0x14, 0xdd, 0x43,
	0xb8, 0x54, 0x67, 0x5c, 0x98, 0x81, 0xa5, 0x3e, 0x75, 0xb2, 0x0d, 0xc0, 0xfb, 0xab, 0x3d, 0x40,
	0x9b, 0x8b, 0x44, 0xc4, 0x72, 0x41, 0x0a, 0x25, 0xa7, 0xbc, 0xab, 0xfc, 0x0c, 0x72, 0x02, 0x84,
	0x63, 0x8b, 0x87, 0xd2, 0x87, 0x68, 0xab, 0x96, 0x96, 0x45, 0x4c, 0x4d, 0x4f, 0xfb, 0x13, 0xa7,
	0xbd, 0x0e, 0x8c, 0x53, 0x47, 0x08, 0xc5, 0x77, 0xd0, 0x3a, 0x93, 0xc2, 0x28, 0x99, 0x75, 0x65,
	0x8f, 0xe1, 0x5c, 0x6a, 0x2c, 0x54, 0xec, 0xa0, 0x55, 0xa5, 0x4d, 0x97, 0x3d, 0x82, 0x12, 0x50,
	0xda, 0x84, 0xcc, 0x8f, 0xd0, 0x35, 0x5f, 0xc5, 0x3e, 0xc1, 0x8c, 0x27, 0x17, 0x3c, 0xc6, 0x4f,
	0x20, 0xb7, 0x75, 0x29, 0xd7, 0x09, 0x06, 0x2c, 0xba, 0x8f, 0xb0, 0xe7, 0x2d, 0x15, 0xe7, 0x18,
	0x0e, 0xc2, 0xe3, 0x03, 0x75, 0x5d, 0x09, 0xca, 0x32, 0x92, 0x53, 0xc3, 0xe6, 0xa4, 0x48, 0x03,
	0xe9, 0x5e, 0x5d, 0xd7, 0x8e, 0xf0, 0xdc, 0xe2, 0xc7, 0x69, 0x2b, 0x7d, 0x8e, 0xbe, 0xff, 0x4d,
	0x8b, 0xda, 0x46, 0xcf, 0x38, 0x61, 0x64, 0x1e, 0x2b, 0xbc, 0xef, 0xbc, 0xdc, 0x1c, 0x0e, 0x60,
	0x62, 0x89, 0xe3, 0xa7, 0xb1, 0x8a, 0x46, 0x68, 0xbb, 0x71, 0x37, 0xd8, 0x65, 0x07, 0xce, 0xcf,
	0x96, 0x27, 0x0d, 0x74, 0xda, 0x1d, 0xb4, 0x1e, 0x16, 0x5e, 0x73, 0x74, 0x9f, 0x37, 0x05, 0xdb,
	0x3f, 0xb8, 0xf7, 0xd0, 0x1a, 0x65, 0xa9, 0xef, 0x8b, 0x9a, 0xfe, 0xd4, 0xd1, 0x57, 0x3d, 0xd0,
	0x90, 0xf7, 0xd1, 0xcd, 0xb8, 0x2c, 0xb2, 0x84, 0x51, 0x63, 0x63, 0x1c, 0x5a, 0xe9, 0x99, 0x93,
	0xbe, 0xd1, 0xd2, 0x46, 0xcb, 0x6b, 0xee, 0xa1, 0x9b, 0xa1, 0x76, 0x26, 0x15, 0x29, 0x85, 0x2d,
	0x89, 0xd6, 0xcd, 0x4f, 0x9d, 0x9b, 0x1b, 0x6d, 0xc0, 0x07, 0x52, 0x9d, 0x3a, 0x4e, 0xe3, 0xe5,
	0x29, 0x7a, 0xb3, 0x9e, 0x2a, 0xdd, 0x10, 0x48, 0x22, 0x88, 0xe6, 0xe7, 0x25, 0x17, 0x8c, 0xe3,
	0x2f, 0x9c, 0x9f, 0x6d, 0x18, 0x33, 0x9d, 0x28, 0x9e, 0x89, 0x49, 0x4d, 0xb2, 0xf1, 0x04, 0x53,
	0x67, 0xd0, 0xcf, 0x21, 0xc4, 0xd3, 0x4c, 0xa1, 0x01, 0x2f, 0x8f, 0xd0, 0x56, 0xb3, 0xeb, 0xe5,
	0x73, 0x79, 0xee, 0x1c, 0xe0, 0x86, 0x31, 0x50, 0xc0, 0xad, 0xba, 0x97, 0x8e, 0x2f, 0xa1, 0x0a,
	0x1b, 0xbc, 0x13, 0x41, 0x34, 0x46, 0xdf, 0x2b, 0xa8, 0x32, 0x09, 0xcd, 0x48, 0xeb, 0xc1, 0x9e,
	0x6f, 0xa3, 0x3f, 0x82, 0xe0, 0x6b, 0xd6, 0x9e, 0x27, 0x8d, 0x58, 0xda, 0x38, 0xf9, 0x1c, 0xdd,
	0x5a, 0x76, 0xd2, 0x0b, 0xe3, 0x18, 0xce, 0xb2, 0xef, 0xa6, 0x1b, 0xcd, 0x63, 0xb4, 0x2d, 0x4b,
	0x43, 0xe4, 0x8c, 0x48, 0x15, 0x73, 0xb5, 0x7c, 0x10, 0x3f, 0x73, 0x5e, 0x36, 0x65, 0x69, 0x8e,
	0x66, 0x47, 0x96, 0xd2, 0x3f, 0x89, 0x47, 0xe8, 0x46, 0xc7, 0x43, 0x2f, 0x8a, 0x13, 0x18, 0x4d,
	0xad, 0xbe, 0xbb, 0xfe, 0x08, 0x6d, 0xd3, 0x99, 0xe1, 0x8a, 0xf8, 0xc1, 0xd8, 0x5f, 0x7f, 0x02,
	0x4d, 0xe4, 0x48, 0x2f, 0x61, 0x36, 0xf6, 0x02, 0xf8, 0x14, 0xdd, 0xe8, 0xb8, 0xe8, 0x05, 0xf0,
	0x02, 0x32, 0x19, 0x38, 0x58, 0x8a, 0x60, 0x70, 0x28, 0x37, 0x0e, 0x4e, 0x21, 0x82, 0xe5, 0xc1,
	0x1c, 0xa6, 0x74, 0x78, 0x38, 0x37, 0x3e, 0x7e, 0x0e, 0x29, 0x1d, 0x18, 0xd0, 0x8d, 0x93, 0x43,
	0xf4, 0xf6, 0x52, 0x6b, 0xc0, 0xbe, 0x58, 0x26, 0xb5, 0xf7, 0x89, 0x5f, 0xc2, 0x70, 0x2a, 0xba,
	0xea, 0x91, 0x25, 0x8e, 0x2d, 0x0f, 0xdc, 0xda, 0x5d, 0x4d, 0x69, 0x4c, 0xd8, 0x9c, 0xb3, 0x54,
	0x97, 0xf9, 0x72, 0x44, 0xbf, 0x80, 0x5d, 0x4d, 0x69, 0x3c, 0xae, 0x39, 0xfd, 0x80, 0x1e, 0xa2,
	0x2d, 0x23, 0x25, 0xd1, 0x73, 0xa9, 0xcc, 0xb2, 0xfe, 0x2b, 0xc8, 0xab, 0x91, 0x72, 0x62, 0x09,
	0xcb, 0x55, 0xb1, 0x95, 0xd3, 0x6c, 0x26, 0x55, 0x1e, 0x0c, 0xdb, 0x46, 0xfc, 0x4b, 0xc8, 0x49,
	0xc3, 0xe8, 0xab, 0xef, 0x21, 0x2c, 0x24, 0x29, 0x06, 0x17, 0xfe, 0x15, 0x7c, 0x61, 0x85, 0x3c,
	0x1e, 0x58, 0xf6, 0x2e, 0xda, 0x68, 0xef, 0x83, 0x56, 0x74, 0x5e, 0x72, 0x6d, 0x6f, 0x0d, 0xbf,
	0x86, 0x8f, 0x51, 0x00, 0x9e, 0x78, 0x2c, 0xfa, 0x10, 0x85, 0x76, 0x42, 0x19, 0xe3, 0x85, 0xd5,
	0xfc, 0x06, 0xae, 0x00, 0x01, 0x36, 0xaa, 0xa1, 0xe8, 0x1e, 0xba, 0x1e, 0x4a, 0xb8, 0x36, 0x74,
	0x9a, 0x25, 0x7a, 0xce, 0x63, 0xfc, 0x5b, 0xe8, 0xfe, 0x00, 0xde, 0x6f, 0xd1, 0xe8, 0x33, 0x74,
	0x23, 0x14, 0xce, 0xa4, 0x62, 0xc9, 0x34, 0xab, 0x20, 0xc7, 0x31, 0x26, 0xd0, 0x6d, 0x01, 0xe5,
	0xa0, 0x66, 0xb8, 0xe4, 0xc6, 0xd1, 0xfb, 0x28, 0x0a, 0xf5, 0xb5, 0xec, 0x77, 0x4e, 0xb6, 0x16,
	0x20, 0x35, 0xfd, 0x03, 0x14, 0x86, 0xdf, 0x7c, 0x99, 0x68, 0xf3, 0xe1, 0xf7, 0x90, 0xff, 0x22,
	0x3d, 0x46, 0x6f, 0xf0, 0x7c, 0xaa, 0x2a, 0x29, 0x12, 0x16, 0x5c, 0xad, 0x1b, 0xe5, 0x14, 0xca,
	0xa6, 0xe1, 0x8c, 0x1b, 0x8a, 0xf7, 0xd0, 0x8b, 0x70, 0x46, 0x93, 0x8c, 0xc7, 0x98, 0x2d, 0x45,
	0x78, 0xe0, 0x80, 0xe8, 0x09, 0xda, 0x0e, 0x4e, 0x8f, 0x74, 0xb3, 0xa7, 0xb9, 0xc1, 0x31, 0xb4,
	0x4e, 0x40, 0x1a, 0x87, 0x49, 0xd4, 0xdc, 0xd8, 0x5d, 0xb6, 0x77, 0x44, 0x62, 0x92, 0x9c, 0xcb,
	0xd2, 0x68, 0xcc, 0x61, 0x97, 0x2d, 0xf4, 0xa2, 0x46, 0x6c, 0x8c, 0x81, 0xc0, 0xef, 0x6d, 0x06,
	0x31, 0xb6, 0x88, 0xdf, 0xd2, 0x2e, 0xba, 0x9a, 0x72, 0x5e, 0x10, 0x9a, 0x25, 0x17, 0xbc, 0xf5,
	0x7f, 0x06, 0x7c, 0x0b, 0x8d, 0x2c, 0xd2, 0xb8, 0xff, 0x21, 0x8a, 0x02, 0xbe, 0x77, 0x3f, 0x87,
	0xaf, 0x74, 0x43, 0xf7, 0xde, 0x6f, 0xa3, 0xb5, 0x80, 0xed, 0x86, 0x90, 0xc6, 0x09, 0xbc, 0x03,
	0x1a, 0xb2, 0x9b, 0x3b, 0x3a, 0x7a, 0x13, 0xbd, 0x5e, 0xd0, 0x45, 0x9b, 0xc8, 0xdf, 0x3b, 0xda,
	0x6b, 0xd6, 0xe6, 0xdd, 0xbd, 0x8b, 0xae, 0x14, 0x5c, 0xe9, 0x44, 0xb7, 0x1b, 0x4b, 0xe1, 0xe6,
	0x56, 0x9b, 0x83, 0x6b, 0xbe, 0x51, 0x15, 0xc9, 0x24, 0x4b, 0x1b, 0x66, 0x06, 0x4c, 0xa3, 0xaa,
	0x43, 0xc9, 0x52, 0xcf, 0xfc, 0x38, 0xac, 0x76, 0xa2, 0xec, 0x84, 0xcb, 0x92, 0x3c, 0xb1, 0x3d,
	0x92, 0x43, 0x37, 0xb6, 0xf0, 0x09, 0x35, 0xfc, 0x10, 0xc0, 0xee, 0x9b, 0x89, 0xc6, 0x31, 0x8f,
	0xb1, 0xe8, 0xbe, 0x99, 0x46, 0xd6, 0x68, 0xcf, 0x37, 0x7c, 0x5b, 0xe5, 0x45, 0xc6, 0xad, 0x6f,
	0x09, 0xe7, 0xdb, 0xbe, 0xaf, 0x6a, 0x20, 0x7a, 0x3f, 0xe4, 0xdb, 0x74, 0xc4, 0x44, 0x96, 0x06,
	0x17, 0x70, 0xc0, 0x9e, 0x6f, 0xd3, 0x11, 0x1f, 0x95, 0xc6, 0xa6, 0xa3, 0xa5, 0xcb, 0x0b, 0xae,
	0x66, 0x99, 0x5c, 0xe0, 0xf3, 0x2e, 0xfb, 0xa8, 0xb6, 0x77, 0x83, 0x86, 0x12, 0x54, 0xdd, 0xa0,
	0xa1, 0xe8, 0x6e, 0xa3, 0xb5, 0x96, 0x57, 0x0a, 0xc5, 0x29, 0x9b, 0x63, 0x0d, 0x69, 0xf3, 0xcc,
	0x53, 0x30, 0xdb, 0x67, 0x46, 0xcb, 0x9d, 0x96, 0x76, 0x66, 0x11, 0xe9, 0xa2, 0x30, 0x30, 0x63,
	0xbc, 0xe0, 0x89, 0xc3, 0x8e, 0x5c, 0x20, 0x9d, 0x05, 0xe8, 0x54, 0x2a, 0x7b, 0x26, 0x65, 0x77,
	0x81, 0x11, 0x98, 0xa3, 0xfb, 0xee, 0x56, 0x5c, 0x73, 0xdb, 0x1b, 0x81, 0xae, 0x88, 0xd0, 0xf8,
	0x02, 0x72, 0xe4, 0x35, 0xcd, 0x4d, 0x60, 0x52, 0x7d, 0xa9, 0xbb, 0xab, 0xf8, 0x32, 0x58, 0x74,
	0x57, 0xf1, 0x75, 0x60, 0xab, 0xaf, 0xcc, 0x34, 0x27, 0x5c, 0x29, 0xa9, 0x34, 0xfe, 0xba, 0xae,
	0x3e, 0x6b, 0xdb, 0x77, 0x26, 0xf7, 0x50, 0x75, 0xef, 0x5b, 0x92, 0xd1, 0xaa, 0xbd, 0x4f, 0xe0,
	0xaa, 0x7e, 0xa8, 0x3a, 0xec, 0xd0, 0x42, 0xf5, 0xe8, 0x86, 0x5e, 0xa4, 0x5a, 0xf3, 0x7c, 0xda,
	0x3e, 0xa6, 0xf0, 0x1f, 0x7c, 0x2f, 0x7a, 0xc4, 0xd3, 0xdf, 0x43, 0x6b, 0x8a, 0x33, 0x9b, 0xc5,
	0xf6, 0xc3, 0x82, 0xff, 0x08, 0xb9, 0x6c, 0x00, 0x4f, 0xb6, 0xbd, 0xe0, 0xfe, 0x74, 0x63, 0xa8,
	0x54, 0x5c, 0xe3, 0x3f, 0xd5, 0xbd, 0xe0, 0xcc, 0x07, 0xb5, 0x35, 0xda, 0x40, 0xaf, 0xe6, 0x5a,
	0x93, 0xb2, 0xc0, 0x7f, 0x76, 0xf8, 0xb7, 0x72, 0xad, 0x4f, 0x8b, 0x68, 0x13, 0x7d, 0xc7, 0x9a,
	0x63, 0xb9, 0x10, 0xf8, 0x2f, 0x0e, 0xf8, 0x76, 0xae, 0xf5, 0x9e, 0x5c, 0x08, 0x5b, 0xb3, 0x46,
	0x95, 0x02, 0xae, 0xd6, 0x0b, 0x95, 0x18, 0x4e, 0x12, 0x79, 0x81, 0xff, 0x0a, 0x71, 0x37, 0xd0,
	0x4b, 0x8b, 0x3c, 0x93, 0x17, 0xd1, 0x2d, 0xf4, 0x9a, 0x90, 0xc4, 0xcc, 0x95, 0x34, 0x26, 0xe3,
	0xf8, 0x6f, 0x2b, 0x8e, 0x88, 0x84, 0x7c, 0x51, 0x9b, 0x6c, 0x97, 0x65, 0x72, 0x41, 0x16, 0xd4,
	0x7e, 0xf3, 0x73, 0xaa, 0xd2, 0x96, 0xfd, 0x77, 0x60, 0xaf, 0x67, 0x72, 0xf1, 0xd2, 0xc2, 0xcf,
	0xa9, 0x4a, 0x1b, 0xdd, 0x7d, 0x84, 0xe7, 0xc9, 0xd9, 0x7c, 0x50, 0xf8, 0x0f, 0x10, 0x6e, 0x58,
	0xc2, 0xb2, 0xf2, 0x11, 0xda, 0xb2, 0xef, 0x9e, 0x8c, 0xc7, 0xae, 0x8b, 0x14, 0x31, 0x09, 0x4b,
	0x33, 0xff, 0xf3, 0xc6, 0x3f, 0x41, 0x7b, 0xbd, 0xa6, 0xd8, 0x76, 0x52, 0x2f, 0x1c, 0x01, 0x7e,
	0xe9, 0xf8, 0x04, 0x6d, 0x0e, 0xaa, 0xed, 0x7f, 0xf0, 0xbf, 0x56, 0xea, 0xa7, 0xd8, 0x92, 0xd8,
	0xfe, 0x19, 0xfd, 0x00, 0x5d, 0x4e, 0xce, 0xdd, 0xef, 0x23, 0x70, 0x76, 0x1a, 0xff, 0x1b, 0x04,
	0xaf, 0x27, 0xe7, 0x13, 0xc9, 0x52, 0x77, 0x6c, 0x2e, 0x7f, 0x9e, 0x66, 0xa7, 0x72, 0xc2, 0x35,
	0xfe, 0x0f, 0xf0, 0x2e, 0x01, 0xef, 0x04, 0xac, 0xa1, 0x3f, 0xd7, 0x29, 0x1a, 0xff, 0xb7, 0xe3,
	0xcf, 0xf5, 0x89, 0x9e, 0xbe, 0xea, 0x7e, 0x50, 0xba, 0xfb, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff,
	0xf8, 0xaf, 0x86, 0x1b, 0x6a, 0x12, 0x00, 0x00,
}
