/*
Copyright 2019 Cisco Systems

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: install_issu_stage.proto

package cisco_ios_xr_installmgr_admin_oper_install_issu_stage

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type InstallIssuStage_KEYS struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InstallIssuStage_KEYS) Reset()         { *m = InstallIssuStage_KEYS{} }
func (m *InstallIssuStage_KEYS) String() string { return proto.CompactTextString(m) }
func (*InstallIssuStage_KEYS) ProtoMessage()    {}
func (*InstallIssuStage_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_263313eae68cad06, []int{0}
}

func (m *InstallIssuStage_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InstallIssuStage_KEYS.Unmarshal(m, b)
}
func (m *InstallIssuStage_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InstallIssuStage_KEYS.Marshal(b, m, deterministic)
}
func (m *InstallIssuStage_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InstallIssuStage_KEYS.Merge(m, src)
}
func (m *InstallIssuStage_KEYS) XXX_Size() int {
	return xxx_messageInfo_InstallIssuStage_KEYS.Size(m)
}
func (m *InstallIssuStage_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_InstallIssuStage_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_InstallIssuStage_KEYS proto.InternalMessageInfo

type InstallIssuStage struct {
	IssuState            string   `protobuf:"bytes,50,opt,name=issu_state,json=issuState,proto3" json:"issu_state,omitempty"`
	IssuOpId             uint32   `protobuf:"varint,51,opt,name=issu_op_id,json=issuOpId,proto3" json:"issu_op_id,omitempty"`
	Percentage           uint32   `protobuf:"varint,52,opt,name=percentage,proto3" json:"percentage,omitempty"`
	IsIssuAborted        bool     `protobuf:"varint,53,opt,name=is_issu_aborted,json=isIssuAborted,proto3" json:"is_issu_aborted,omitempty"`
	IsIssuAbortedByIsm   bool     `protobuf:"varint,54,opt,name=is_issu_aborted_by_ism,json=isIssuAbortedByIsm,proto3" json:"is_issu_aborted_by_ism,omitempty"`
	IssuManagerFsmState  string   `protobuf:"bytes,55,opt,name=issu_manager_fsm_state,json=issuManagerFsmState,proto3" json:"issu_manager_fsm_state,omitempty"`
	ParticipatingNodeAll uint32   `protobuf:"varint,56,opt,name=participating_node_all,json=participatingNodeAll,proto3" json:"participating_node_all,omitempty"`
	NumNodesInProgress   uint32   `protobuf:"varint,57,opt,name=num_nodes_in_progress,json=numNodesInProgress,proto3" json:"num_nodes_in_progress,omitempty"`
	NodeInProgress       []string `protobuf:"bytes,58,rep,name=node_in_progress,json=nodeInProgress,proto3" json:"node_in_progress,omitempty"`
	NumOfNodesInLoad     uint32   `protobuf:"varint,59,opt,name=num_of_nodes_in_load,json=numOfNodesInLoad,proto3" json:"num_of_nodes_in_load,omitempty"`
	NodesInLoad          []string `protobuf:"bytes,60,rep,name=nodes_in_load,json=nodesInLoad,proto3" json:"nodes_in_load,omitempty"`
	NumOfNodesInRun      uint32   `protobuf:"varint,61,opt,name=num_of_nodes_in_run,json=numOfNodesInRun,proto3" json:"num_of_nodes_in_run,omitempty"`
	NodesInRun           []string `protobuf:"bytes,62,rep,name=nodes_in_run,json=nodesInRun,proto3" json:"nodes_in_run,omitempty"`
	NumofNcNodes         uint32   `protobuf:"varint,63,opt,name=numof_nc_nodes,json=numofNcNodes,proto3" json:"numof_nc_nodes,omitempty"`
	NcNodes              []string `protobuf:"bytes,64,rep,name=nc_nodes,json=ncNodes,proto3" json:"nc_nodes,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InstallIssuStage) Reset()         { *m = InstallIssuStage{} }
func (m *InstallIssuStage) String() string { return proto.CompactTextString(m) }
func (*InstallIssuStage) ProtoMessage()    {}
func (*InstallIssuStage) Descriptor() ([]byte, []int) {
	return fileDescriptor_263313eae68cad06, []int{1}
}

func (m *InstallIssuStage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InstallIssuStage.Unmarshal(m, b)
}
func (m *InstallIssuStage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InstallIssuStage.Marshal(b, m, deterministic)
}
func (m *InstallIssuStage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InstallIssuStage.Merge(m, src)
}
func (m *InstallIssuStage) XXX_Size() int {
	return xxx_messageInfo_InstallIssuStage.Size(m)
}
func (m *InstallIssuStage) XXX_DiscardUnknown() {
	xxx_messageInfo_InstallIssuStage.DiscardUnknown(m)
}

var xxx_messageInfo_InstallIssuStage proto.InternalMessageInfo

func (m *InstallIssuStage) GetIssuState() string {
	if m != nil {
		return m.IssuState
	}
	return ""
}

func (m *InstallIssuStage) GetIssuOpId() uint32 {
	if m != nil {
		return m.IssuOpId
	}
	return 0
}

func (m *InstallIssuStage) GetPercentage() uint32 {
	if m != nil {
		return m.Percentage
	}
	return 0
}

func (m *InstallIssuStage) GetIsIssuAborted() bool {
	if m != nil {
		return m.IsIssuAborted
	}
	return false
}

func (m *InstallIssuStage) GetIsIssuAbortedByIsm() bool {
	if m != nil {
		return m.IsIssuAbortedByIsm
	}
	return false
}

func (m *InstallIssuStage) GetIssuManagerFsmState() string {
	if m != nil {
		return m.IssuManagerFsmState
	}
	return ""
}

func (m *InstallIssuStage) GetParticipatingNodeAll() uint32 {
	if m != nil {
		return m.ParticipatingNodeAll
	}
	return 0
}

func (m *InstallIssuStage) GetNumNodesInProgress() uint32 {
	if m != nil {
		return m.NumNodesInProgress
	}
	return 0
}

func (m *InstallIssuStage) GetNodeInProgress() []string {
	if m != nil {
		return m.NodeInProgress
	}
	return nil
}

func (m *InstallIssuStage) GetNumOfNodesInLoad() uint32 {
	if m != nil {
		return m.NumOfNodesInLoad
	}
	return 0
}

func (m *InstallIssuStage) GetNodesInLoad() []string {
	if m != nil {
		return m.NodesInLoad
	}
	return nil
}

func (m *InstallIssuStage) GetNumOfNodesInRun() uint32 {
	if m != nil {
		return m.NumOfNodesInRun
	}
	return 0
}

func (m *InstallIssuStage) GetNodesInRun() []string {
	if m != nil {
		return m.NodesInRun
	}
	return nil
}

func (m *InstallIssuStage) GetNumofNcNodes() uint32 {
	if m != nil {
		return m.NumofNcNodes
	}
	return 0
}

func (m *InstallIssuStage) GetNcNodes() []string {
	if m != nil {
		return m.NcNodes
	}
	return nil
}

func init() {
	proto.RegisterType((*InstallIssuStage_KEYS)(nil), "cisco_ios_xr_installmgr_admin_oper.install.issu.stage.install_issu_stage_KEYS")
	proto.RegisterType((*InstallIssuStage)(nil), "cisco_ios_xr_installmgr_admin_oper.install.issu.stage.install_issu_stage")
}

func init() { proto.RegisterFile("install_issu_stage.proto", fileDescriptor_263313eae68cad06) }

var fileDescriptor_263313eae68cad06 = []byte{
	// 423 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x92, 0xdd, 0x6b, 0xd4, 0x40,
	0x14, 0xc5, 0x59, 0x14, 0xdd, 0xbd, 0x76, 0xdb, 0x32, 0xad, 0x75, 0x0a, 0x2a, 0x61, 0x11, 0xc9,
	0x83, 0x04, 0xec, 0xb6, 0x7e, 0x7f, 0x55, 0x50, 0x58, 0xd4, 0x56, 0xd2, 0x27, 0x9f, 0x86, 0xd9,
	0x64, 0x36, 0x0c, 0x64, 0x66, 0xc2, 0xdc, 0x0c, 0xd8, 0x7f, 0xdd, 0x27, 0x99, 0x9b, 0x68, 0x93,
	0xf6, 0x31, 0xe7, 0xfc, 0xce, 0x2f, 0xb9, 0x10, 0xe0, 0xda, 0x62, 0x2b, 0xeb, 0x5a, 0x68, 0xc4,
	0x20, 0xb0, 0x95, 0x95, 0xca, 0x1a, 0xef, 0x5a, 0xc7, 0x4e, 0x0a, 0x8d, 0x85, 0x13, 0xda, 0xa1,
	0xf8, 0xed, 0x45, 0x8f, 0x99, 0xca, 0x0b, 0x59, 0x1a, 0x6d, 0x85, 0x6b, 0x94, 0xcf, 0xfa, 0x34,
	0x8b, 0xe3, 0x8c, 0xc6, 0x8b, 0x43, 0x78, 0x70, 0x53, 0x29, 0xbe, 0x7d, 0xf9, 0x75, 0xb1, 0xf8,
	0x73, 0x1b, 0xd8, 0xcd, 0x8e, 0x3d, 0x02, 0xf8, 0xf7, 0xd4, 0x2a, 0x7e, 0x94, 0x4c, 0xd2, 0x59,
	0x3e, 0x8b, 0xc9, 0x45, 0x0c, 0xd8, 0xc3, 0xbe, 0x76, 0x8d, 0xd0, 0x25, 0x5f, 0x26, 0x93, 0x74,
	0x9e, 0x4f, 0x63, 0x72, 0xde, 0xac, 0x4a, 0xf6, 0x18, 0xa0, 0x51, 0xbe, 0x50, 0x36, 0xaa, 0xf8,
	0x31, 0xb5, 0x83, 0x84, 0x3d, 0x85, 0x1d, 0x8d, 0xdd, 0xdb, 0xe4, 0xda, 0xf9, 0x56, 0x95, 0xfc,
	0x24, 0x99, 0xa4, 0xd3, 0x7c, 0xae, 0x71, 0x85, 0x18, 0x4e, 0xbb, 0x90, 0x1d, 0xc1, 0xc1, 0x35,
	0x4e, 0xac, 0x2f, 0x85, 0x46, 0xc3, 0x5f, 0x10, 0xce, 0x46, 0xf8, 0xe7, 0xcb, 0x15, 0x1a, 0xb6,
	0x8c, 0x1b, 0x0c, 0xc2, 0x48, 0x2b, 0x2b, 0xe5, 0xc5, 0x06, 0x4d, 0x7f, 0xc4, 0x4b, 0x3a, 0x62,
	0x2f, 0xb6, 0x3f, 0xba, 0xf2, 0x2b, 0x9a, 0xee, 0x9c, 0x63, 0x38, 0x68, 0xa4, 0x6f, 0x75, 0xa1,
	0x1b, 0xd9, 0x6a, 0x5b, 0x09, 0xeb, 0x4a, 0x25, 0x64, 0x5d, 0xf3, 0x57, 0xf4, 0xf1, 0xfb, 0xa3,
	0xf6, 0xcc, 0x95, 0xea, 0xb4, 0xae, 0xd9, 0x73, 0xb8, 0x6f, 0x83, 0x21, 0x16, 0x85, 0xb6, 0xa2,
	0xf1, 0xae, 0xf2, 0x0a, 0x91, 0xbf, 0xa6, 0x11, 0xb3, 0xc1, 0x44, 0x14, 0x57, 0xf6, 0x67, 0xdf,
	0xb0, 0x14, 0x76, 0x49, 0x3d, 0xa4, 0xdf, 0x24, 0xb7, 0xd2, 0x59, 0xbe, 0x1d, 0xf3, 0x01, 0x99,
	0xc1, 0x7e, 0x94, 0xbb, 0xcd, 0x95, 0xbf, 0x76, 0xb2, 0xe4, 0x6f, 0xc9, 0xbd, 0x6b, 0x83, 0x39,
	0xdf, 0xf4, 0xf6, 0xef, 0x4e, 0x96, 0x6c, 0x01, 0xf3, 0x31, 0xf8, 0x8e, 0xb4, 0xf7, 0xec, 0x80,
	0x79, 0x06, 0x7b, 0xd7, 0x9d, 0x3e, 0x58, 0xfe, 0x9e, 0x94, 0x3b, 0x43, 0x65, 0x1e, 0x2c, 0x4b,
	0x60, 0x6b, 0x84, 0x7d, 0x20, 0x21, 0xd8, 0x2b, 0xe2, 0x09, 0x6c, 0xdb, 0x60, 0xa2, 0xae, 0xe8,
	0x8c, 0xfc, 0x23, 0xa9, 0xb6, 0x28, 0x3d, 0x2b, 0x48, 0xc6, 0x0e, 0x61, 0xfa, 0xbf, 0xff, 0x44,
	0x8e, 0xbb, 0xb6, 0xab, 0xd6, 0x77, 0xe8, 0xaf, 0x5e, 0xfe, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x9f,
	0x99, 0x7c, 0x74, 0xf1, 0x02, 0x00, 0x00,
}
