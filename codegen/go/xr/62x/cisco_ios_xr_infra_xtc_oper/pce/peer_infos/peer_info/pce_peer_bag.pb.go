/*
Copyright 2019 Cisco Systems

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pce_peer_bag.proto

package cisco_ios_xr_infra_xtc_oper_pce_peer_infos_peer_info

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type PcePeerBag_KEYS struct {
	PeerAddress          string   `protobuf:"bytes,1,opt,name=peer_address,json=peerAddress,proto3" json:"peer_address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PcePeerBag_KEYS) Reset()         { *m = PcePeerBag_KEYS{} }
func (m *PcePeerBag_KEYS) String() string { return proto.CompactTextString(m) }
func (*PcePeerBag_KEYS) ProtoMessage()    {}
func (*PcePeerBag_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_228b013d21ccfa84, []int{0}
}

func (m *PcePeerBag_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PcePeerBag_KEYS.Unmarshal(m, b)
}
func (m *PcePeerBag_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PcePeerBag_KEYS.Marshal(b, m, deterministic)
}
func (m *PcePeerBag_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PcePeerBag_KEYS.Merge(m, src)
}
func (m *PcePeerBag_KEYS) XXX_Size() int {
	return xxx_messageInfo_PcePeerBag_KEYS.Size(m)
}
func (m *PcePeerBag_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_PcePeerBag_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_PcePeerBag_KEYS proto.InternalMessageInfo

func (m *PcePeerBag_KEYS) GetPeerAddress() string {
	if m != nil {
		return m.PeerAddress
	}
	return ""
}

type PcePcepBag struct {
	PcepState                string   `protobuf:"bytes,1,opt,name=pcep_state,json=pcepState,proto3" json:"pcep_state,omitempty"`
	Stateful                 bool     `protobuf:"varint,2,opt,name=stateful,proto3" json:"stateful,omitempty"`
	CapabilityUpdate         bool     `protobuf:"varint,3,opt,name=capability_update,json=capabilityUpdate,proto3" json:"capability_update,omitempty"`
	CapabilityInstantiate    bool     `protobuf:"varint,4,opt,name=capability_instantiate,json=capabilityInstantiate,proto3" json:"capability_instantiate,omitempty"`
	CapabilitySegmentRouting bool     `protobuf:"varint,5,opt,name=capability_segment_routing,json=capabilitySegmentRouting,proto3" json:"capability_segment_routing,omitempty"`
	CapabilityTriggeredSync  bool     `protobuf:"varint,6,opt,name=capability_triggered_sync,json=capabilityTriggeredSync,proto3" json:"capability_triggered_sync,omitempty"`
	CapabilityDbVersion      bool     `protobuf:"varint,7,opt,name=capability_db_version,json=capabilityDbVersion,proto3" json:"capability_db_version,omitempty"`
	CapabilityDeltaSync      bool     `protobuf:"varint,8,opt,name=capability_delta_sync,json=capabilityDeltaSync,proto3" json:"capability_delta_sync,omitempty"`
	XXX_NoUnkeyedLiteral     struct{} `json:"-"`
	XXX_unrecognized         []byte   `json:"-"`
	XXX_sizecache            int32    `json:"-"`
}

func (m *PcePcepBag) Reset()         { *m = PcePcepBag{} }
func (m *PcePcepBag) String() string { return proto.CompactTextString(m) }
func (*PcePcepBag) ProtoMessage()    {}
func (*PcePcepBag) Descriptor() ([]byte, []int) {
	return fileDescriptor_228b013d21ccfa84, []int{1}
}

func (m *PcePcepBag) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PcePcepBag.Unmarshal(m, b)
}
func (m *PcePcepBag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PcePcepBag.Marshal(b, m, deterministic)
}
func (m *PcePcepBag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PcePcepBag.Merge(m, src)
}
func (m *PcePcepBag) XXX_Size() int {
	return xxx_messageInfo_PcePcepBag.Size(m)
}
func (m *PcePcepBag) XXX_DiscardUnknown() {
	xxx_messageInfo_PcePcepBag.DiscardUnknown(m)
}

var xxx_messageInfo_PcePcepBag proto.InternalMessageInfo

func (m *PcePcepBag) GetPcepState() string {
	if m != nil {
		return m.PcepState
	}
	return ""
}

func (m *PcePcepBag) GetStateful() bool {
	if m != nil {
		return m.Stateful
	}
	return false
}

func (m *PcePcepBag) GetCapabilityUpdate() bool {
	if m != nil {
		return m.CapabilityUpdate
	}
	return false
}

func (m *PcePcepBag) GetCapabilityInstantiate() bool {
	if m != nil {
		return m.CapabilityInstantiate
	}
	return false
}

func (m *PcePcepBag) GetCapabilitySegmentRouting() bool {
	if m != nil {
		return m.CapabilitySegmentRouting
	}
	return false
}

func (m *PcePcepBag) GetCapabilityTriggeredSync() bool {
	if m != nil {
		return m.CapabilityTriggeredSync
	}
	return false
}

func (m *PcePcepBag) GetCapabilityDbVersion() bool {
	if m != nil {
		return m.CapabilityDbVersion
	}
	return false
}

func (m *PcePcepBag) GetCapabilityDeltaSync() bool {
	if m != nil {
		return m.CapabilityDeltaSync
	}
	return false
}

type PcePeerBag struct {
	PeerAddressXr        string      `protobuf:"bytes,50,opt,name=peer_address_xr,json=peerAddressXr,proto3" json:"peer_address_xr,omitempty"`
	PeerProtocol         string      `protobuf:"bytes,51,opt,name=peer_protocol,json=peerProtocol,proto3" json:"peer_protocol,omitempty"`
	BriefPcepInformation *PcePcepBag `protobuf:"bytes,52,opt,name=brief_pcep_information,json=briefPcepInformation,proto3" json:"brief_pcep_information,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *PcePeerBag) Reset()         { *m = PcePeerBag{} }
func (m *PcePeerBag) String() string { return proto.CompactTextString(m) }
func (*PcePeerBag) ProtoMessage()    {}
func (*PcePeerBag) Descriptor() ([]byte, []int) {
	return fileDescriptor_228b013d21ccfa84, []int{2}
}

func (m *PcePeerBag) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PcePeerBag.Unmarshal(m, b)
}
func (m *PcePeerBag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PcePeerBag.Marshal(b, m, deterministic)
}
func (m *PcePeerBag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PcePeerBag.Merge(m, src)
}
func (m *PcePeerBag) XXX_Size() int {
	return xxx_messageInfo_PcePeerBag.Size(m)
}
func (m *PcePeerBag) XXX_DiscardUnknown() {
	xxx_messageInfo_PcePeerBag.DiscardUnknown(m)
}

var xxx_messageInfo_PcePeerBag proto.InternalMessageInfo

func (m *PcePeerBag) GetPeerAddressXr() string {
	if m != nil {
		return m.PeerAddressXr
	}
	return ""
}

func (m *PcePeerBag) GetPeerProtocol() string {
	if m != nil {
		return m.PeerProtocol
	}
	return ""
}

func (m *PcePeerBag) GetBriefPcepInformation() *PcePcepBag {
	if m != nil {
		return m.BriefPcepInformation
	}
	return nil
}

func init() {
	proto.RegisterType((*PcePeerBag_KEYS)(nil), "cisco_ios_xr_infra_xtc_oper.pce.peer_infos.peer_info.pce_peer_bag_KEYS")
	proto.RegisterType((*PcePcepBag)(nil), "cisco_ios_xr_infra_xtc_oper.pce.peer_infos.peer_info.pce_pcep_bag")
	proto.RegisterType((*PcePeerBag)(nil), "cisco_ios_xr_infra_xtc_oper.pce.peer_infos.peer_info.pce_peer_bag")
}

func init() { proto.RegisterFile("pce_peer_bag.proto", fileDescriptor_228b013d21ccfa84) }

var fileDescriptor_228b013d21ccfa84 = []byte{
	// 403 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x92, 0xc1, 0x8b, 0xd4, 0x30,
	0x14, 0xc6, 0xa9, 0xab, 0xeb, 0x6c, 0x76, 0x45, 0x37, 0xea, 0x1a, 0x17, 0x84, 0x71, 0x04, 0x19,
	0x10, 0x7a, 0x98, 0x5d, 0x3d, 0x88, 0x17, 0x45, 0x0f, 0x8b, 0x97, 0xa5, 0x55, 0xd1, 0x53, 0x48,
	0xd3, 0xd7, 0x12, 0xe8, 0x24, 0x21, 0xc9, 0x48, 0xe7, 0xaf, 0xf0, 0xaf, 0xf3, 0xff, 0x91, 0xbc,
	0x56, 0x13, 0xf4, 0xe6, 0x2d, 0xfd, 0xbe, 0xef, 0x97, 0x97, 0xf2, 0x3d, 0x42, 0xad, 0x04, 0x6e,
	0x01, 0x1c, 0x6f, 0x44, 0x5f, 0x5a, 0x67, 0x82, 0xa1, 0x97, 0x52, 0x79, 0x69, 0xb8, 0x32, 0x9e,
	0x8f, 0x8e, 0x2b, 0xdd, 0x39, 0xc1, 0xc7, 0x20, 0xb9, 0xb1, 0xe0, 0x4a, 0x2b, 0xa1, 0xc4, 0xbc,
	0xd2, 0x9d, 0xf1, 0xe9, 0xb8, 0x7a, 0x45, 0x4e, 0xf3, 0xbb, 0xf8, 0xc7, 0x0f, 0xdf, 0x6a, 0xfa,
	0x94, 0x9c, 0xa0, 0x20, 0xda, 0xd6, 0x81, 0xf7, 0xac, 0x58, 0x16, 0xeb, 0xa3, 0xea, 0x38, 0x6a,
	0x6f, 0x27, 0x69, 0xf5, 0xe3, 0x80, 0x9c, 0x20, 0x28, 0xc1, 0x46, 0x90, 0x3e, 0x21, 0x04, 0xcf,
	0x3e, 0x88, 0x00, 0x33, 0x71, 0x14, 0x95, 0x3a, 0x0a, 0xf4, 0x9c, 0x2c, 0xd0, 0xe9, 0x76, 0x03,
	0xbb, 0xb1, 0x2c, 0xd6, 0x8b, 0xea, 0xcf, 0x37, 0x7d, 0x41, 0x4e, 0xa5, 0xb0, 0xa2, 0x51, 0x83,
	0x0a, 0x7b, 0xbe, 0xb3, 0x6d, 0xbc, 0xe1, 0x00, 0x43, 0xf7, 0x92, 0xf1, 0x19, 0x75, 0xfa, 0x92,
	0x9c, 0x65, 0x61, 0xa5, 0x7d, 0x10, 0x3a, 0xa8, 0x48, 0xdc, 0x44, 0xe2, 0x61, 0x72, 0xaf, 0x92,
	0x49, 0xdf, 0x90, 0xf3, 0x0c, 0xf3, 0xd0, 0x6f, 0x41, 0x07, 0xee, 0xcc, 0x2e, 0x28, 0xdd, 0xb3,
	0x5b, 0x88, 0xb2, 0x94, 0xa8, 0xa7, 0x40, 0x35, 0xf9, 0xf4, 0x35, 0x79, 0x9c, 0xd1, 0xc1, 0xa9,
	0xbe, 0x07, 0x07, 0x2d, 0xf7, 0x7b, 0x2d, 0xd9, 0x21, 0xc2, 0x8f, 0x52, 0xe0, 0xd3, 0x6f, 0xbf,
	0xde, 0x6b, 0x49, 0x37, 0x24, 0x7b, 0x12, 0x6f, 0x1b, 0xfe, 0x1d, 0x9c, 0x57, 0x46, 0xb3, 0xdb,
	0xc8, 0xdd, 0x4f, 0xe6, 0xfb, 0xe6, 0xcb, 0x64, 0xfd, 0xcd, 0xc0, 0x10, 0xc4, 0x34, 0x6b, 0xf1,
	0x0f, 0x13, 0xbd, 0x38, 0x67, 0xf5, 0xb3, 0x98, 0x1b, 0x99, 0xab, 0xa4, 0xcf, 0xc9, 0xdd, 0xbc,
	0x45, 0x3e, 0x3a, 0xb6, 0xc1, 0x5a, 0xee, 0x64, 0x45, 0x7e, 0x75, 0xf4, 0x19, 0x41, 0x81, 0xe3,
	0x1a, 0x49, 0x33, 0xb0, 0x0b, 0x4c, 0xe1, 0x0a, 0x5c, 0xcf, 0x1a, 0x1d, 0xc9, 0x59, 0xe3, 0x14,
	0x74, 0x53, 0xe1, 0x71, 0x75, 0xdc, 0x56, 0x84, 0xf8, 0x1b, 0x97, 0xcb, 0x62, 0x7d, 0xbc, 0x79,
	0x57, 0xfe, 0xcf, 0xfa, 0x95, 0xf9, 0x0a, 0x55, 0x0f, 0x70, 0xc2, 0xb5, 0x04, 0x7b, 0x95, 0xee,
	0x6f, 0x0e, 0xf1, 0x5d, 0x17, 0xbf, 0x02, 0x00, 0x00, 0xff, 0xff, 0x2a, 0xe8, 0x56, 0xcd, 0xf4,
	0x02, 0x00, 0x00,
}
