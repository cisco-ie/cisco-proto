/*
Copyright 2019 Cisco Systems

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pm_node_process_bag.proto

package cisco_ios_xr_manageability_perfmgmt_oper_perf_mgmt_monitor_nodes_node_processes_process_samples_sample

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type PmNodeProcessBag_KEYS struct {
	NodeId               string   `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	ProcessId            int32    `protobuf:"varint,2,opt,name=process_id,json=processId,proto3" json:"process_id,omitempty"`
	SampleId             int32    `protobuf:"varint,3,opt,name=sample_id,json=sampleId,proto3" json:"sample_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PmNodeProcessBag_KEYS) Reset()         { *m = PmNodeProcessBag_KEYS{} }
func (m *PmNodeProcessBag_KEYS) String() string { return proto.CompactTextString(m) }
func (*PmNodeProcessBag_KEYS) ProtoMessage()    {}
func (*PmNodeProcessBag_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_a79cfd41f3a229b3, []int{0}
}

func (m *PmNodeProcessBag_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PmNodeProcessBag_KEYS.Unmarshal(m, b)
}
func (m *PmNodeProcessBag_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PmNodeProcessBag_KEYS.Marshal(b, m, deterministic)
}
func (m *PmNodeProcessBag_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PmNodeProcessBag_KEYS.Merge(m, src)
}
func (m *PmNodeProcessBag_KEYS) XXX_Size() int {
	return xxx_messageInfo_PmNodeProcessBag_KEYS.Size(m)
}
func (m *PmNodeProcessBag_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_PmNodeProcessBag_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_PmNodeProcessBag_KEYS proto.InternalMessageInfo

func (m *PmNodeProcessBag_KEYS) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

func (m *PmNodeProcessBag_KEYS) GetProcessId() int32 {
	if m != nil {
		return m.ProcessId
	}
	return 0
}

func (m *PmNodeProcessBag_KEYS) GetSampleId() int32 {
	if m != nil {
		return m.SampleId
	}
	return 0
}

type PmNodeProcessBag struct {
	TimeStamp            uint64   `protobuf:"varint,50,opt,name=time_stamp,json=timeStamp,proto3" json:"time_stamp,omitempty"`
	PeakMemory           uint32   `protobuf:"varint,51,opt,name=peak_memory,json=peakMemory,proto3" json:"peak_memory,omitempty"`
	AverageCpuUsed       uint32   `protobuf:"varint,52,opt,name=average_cpu_used,json=averageCpuUsed,proto3" json:"average_cpu_used,omitempty"`
	NoThreads            uint32   `protobuf:"varint,53,opt,name=no_threads,json=noThreads,proto3" json:"no_threads,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PmNodeProcessBag) Reset()         { *m = PmNodeProcessBag{} }
func (m *PmNodeProcessBag) String() string { return proto.CompactTextString(m) }
func (*PmNodeProcessBag) ProtoMessage()    {}
func (*PmNodeProcessBag) Descriptor() ([]byte, []int) {
	return fileDescriptor_a79cfd41f3a229b3, []int{1}
}

func (m *PmNodeProcessBag) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PmNodeProcessBag.Unmarshal(m, b)
}
func (m *PmNodeProcessBag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PmNodeProcessBag.Marshal(b, m, deterministic)
}
func (m *PmNodeProcessBag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PmNodeProcessBag.Merge(m, src)
}
func (m *PmNodeProcessBag) XXX_Size() int {
	return xxx_messageInfo_PmNodeProcessBag.Size(m)
}
func (m *PmNodeProcessBag) XXX_DiscardUnknown() {
	xxx_messageInfo_PmNodeProcessBag.DiscardUnknown(m)
}

var xxx_messageInfo_PmNodeProcessBag proto.InternalMessageInfo

func (m *PmNodeProcessBag) GetTimeStamp() uint64 {
	if m != nil {
		return m.TimeStamp
	}
	return 0
}

func (m *PmNodeProcessBag) GetPeakMemory() uint32 {
	if m != nil {
		return m.PeakMemory
	}
	return 0
}

func (m *PmNodeProcessBag) GetAverageCpuUsed() uint32 {
	if m != nil {
		return m.AverageCpuUsed
	}
	return 0
}

func (m *PmNodeProcessBag) GetNoThreads() uint32 {
	if m != nil {
		return m.NoThreads
	}
	return 0
}

func init() {
	proto.RegisterType((*PmNodeProcessBag_KEYS)(nil), "cisco_ios_xr_manageability_perfmgmt_oper.perf_mgmt.monitor.nodes.node.processes.process.samples.sample.pm_node_process_bag_KEYS")
	proto.RegisterType((*PmNodeProcessBag)(nil), "cisco_ios_xr_manageability_perfmgmt_oper.perf_mgmt.monitor.nodes.node.processes.process.samples.sample.pm_node_process_bag")
}

func init() { proto.RegisterFile("pm_node_process_bag.proto", fileDescriptor_a79cfd41f3a229b3) }

var fileDescriptor_a79cfd41f3a229b3 = []byte{
	// 288 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x91, 0x4f, 0x4f, 0x03, 0x21,
	0x10, 0xc5, 0x83, 0x7f, 0xaa, 0x8b, 0xd1, 0x18, 0x3c, 0x88, 0x31, 0xc6, 0x4d, 0x4f, 0x7b, 0xe2,
	0x60, 0xf5, 0x13, 0x18, 0x0f, 0x8d, 0xf1, 0xb2, 0xd5, 0x83, 0xa7, 0x09, 0x5d, 0xa6, 0x2b, 0xb1,
	0xec, 0x10, 0xa0, 0xc6, 0x7e, 0x19, 0x3f, 0xab, 0x81, 0xb6, 0xb7, 0x5e, 0x80, 0xf7, 0x7b, 0x2f,
	0x8f, 0x49, 0x86, 0xdf, 0x78, 0x07, 0x03, 0x19, 0x04, 0x1f, 0xa8, 0xc3, 0x18, 0x61, 0xae, 0x7b,
	0xe5, 0x03, 0x25, 0x12, 0x8b, 0xce, 0xc6, 0x8e, 0xc0, 0x52, 0x84, 0xdf, 0x00, 0x4e, 0x0f, 0xba,
	0x47, 0x3d, 0xb7, 0x4b, 0x9b, 0xd6, 0xe0, 0x31, 0x2c, 0x5c, 0xef, 0x12, 0x90, 0xc7, 0xa0, 0xb2,
	0x82, 0x2c, 0x95, 0xa3, 0xc1, 0x26, 0x0a, 0x2a, 0x57, 0xc6, 0x72, 0xaa, 0x6d, 0x31, 0xc6, 0xdd,
	0x4b, 0x45, 0xed, 0xfc, 0x12, 0x77, 0xf7, 0x98, 0xb8, 0xdc, 0x33, 0x04, 0xbc, 0xbe, 0x7c, 0xce,
	0xc4, 0x35, 0x3f, 0x29, 0x86, 0x35, 0x92, 0xd5, 0xac, 0xa9, 0xda, 0x51, 0x96, 0x53, 0x23, 0xee,
	0x38, 0xdf, 0x85, 0xad, 0x91, 0x07, 0x35, 0x6b, 0x8e, 0xdb, 0x6a, 0x4b, 0xa6, 0x46, 0xdc, 0xf2,
	0x6a, 0xd3, 0x9e, 0xdd, 0xc3, 0xe2, 0x9e, 0x6e, 0xc0, 0xd4, 0x8c, 0xff, 0x18, 0xbf, 0xda, 0xf3,
	0x63, 0xee, 0x4c, 0xd6, 0x21, 0xc4, 0xa4, 0x9d, 0x97, 0x0f, 0x35, 0x6b, 0x8e, 0xda, 0x2a, 0x93,
	0x59, 0x06, 0xe2, 0x9e, 0x9f, 0x79, 0xd4, 0xdf, 0xe0, 0xd0, 0x51, 0x58, 0xcb, 0x49, 0xcd, 0x9a,
	0xf3, 0x96, 0x67, 0xf4, 0x56, 0x88, 0x68, 0xf8, 0xa5, 0xfe, 0xc1, 0xa0, 0x7b, 0x84, 0xce, 0xaf,
	0x60, 0x15, 0xd1, 0xc8, 0xc7, 0x92, 0xba, 0xd8, 0xf2, 0x67, 0xbf, 0xfa, 0x88, 0x58, 0xa6, 0x1f,
	0x08, 0xd2, 0x57, 0x40, 0x6d, 0xa2, 0x7c, 0x2a, 0x99, 0x6a, 0xa0, 0xf7, 0x0d, 0x98, 0x8f, 0xca,
	0x02, 0x26, 0xff, 0x01, 0x00, 0x00, 0xff, 0xff, 0x30, 0x9d, 0x8f, 0xaa, 0x9d, 0x01, 0x00, 0x00,
}
