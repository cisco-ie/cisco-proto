/*
Copyright 2019 Cisco Systems

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pim_tt_route_bag.proto

package cisco_ios_xr_ipv4_pim_oper_ipv6_pim_active_vrfs_vrf_topologies_topology

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type PimTtRouteBag_KEYS struct {
	VrfName              string   `protobuf:"bytes,1,opt,name=vrf_name,json=vrfName,proto3" json:"vrf_name,omitempty"`
	SourceAddress        string   `protobuf:"bytes,2,opt,name=source_address,json=sourceAddress,proto3" json:"source_address,omitempty"`
	GroupAddress         string   `protobuf:"bytes,3,opt,name=group_address,json=groupAddress,proto3" json:"group_address,omitempty"`
	Rpt                  uint32   `protobuf:"varint,4,opt,name=rpt,proto3" json:"rpt,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PimTtRouteBag_KEYS) Reset()         { *m = PimTtRouteBag_KEYS{} }
func (m *PimTtRouteBag_KEYS) String() string { return proto.CompactTextString(m) }
func (*PimTtRouteBag_KEYS) ProtoMessage()    {}
func (*PimTtRouteBag_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3d91aa7d312ccab, []int{0}
}

func (m *PimTtRouteBag_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PimTtRouteBag_KEYS.Unmarshal(m, b)
}
func (m *PimTtRouteBag_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PimTtRouteBag_KEYS.Marshal(b, m, deterministic)
}
func (m *PimTtRouteBag_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PimTtRouteBag_KEYS.Merge(m, src)
}
func (m *PimTtRouteBag_KEYS) XXX_Size() int {
	return xxx_messageInfo_PimTtRouteBag_KEYS.Size(m)
}
func (m *PimTtRouteBag_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_PimTtRouteBag_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_PimTtRouteBag_KEYS proto.InternalMessageInfo

func (m *PimTtRouteBag_KEYS) GetVrfName() string {
	if m != nil {
		return m.VrfName
	}
	return ""
}

func (m *PimTtRouteBag_KEYS) GetSourceAddress() string {
	if m != nil {
		return m.SourceAddress
	}
	return ""
}

func (m *PimTtRouteBag_KEYS) GetGroupAddress() string {
	if m != nil {
		return m.GroupAddress
	}
	return ""
}

func (m *PimTtRouteBag_KEYS) GetRpt() uint32 {
	if m != nil {
		return m.Rpt
	}
	return 0
}

type PimAddrtype struct {
	AfName               string   `protobuf:"bytes,1,opt,name=af_name,json=afName,proto3" json:"af_name,omitempty"`
	Ipv4Address          string   `protobuf:"bytes,2,opt,name=ipv4_address,json=ipv4Address,proto3" json:"ipv4_address,omitempty"`
	Ipv6Address          string   `protobuf:"bytes,3,opt,name=ipv6_address,json=ipv6Address,proto3" json:"ipv6_address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PimAddrtype) Reset()         { *m = PimAddrtype{} }
func (m *PimAddrtype) String() string { return proto.CompactTextString(m) }
func (*PimAddrtype) ProtoMessage()    {}
func (*PimAddrtype) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3d91aa7d312ccab, []int{1}
}

func (m *PimAddrtype) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PimAddrtype.Unmarshal(m, b)
}
func (m *PimAddrtype) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PimAddrtype.Marshal(b, m, deterministic)
}
func (m *PimAddrtype) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PimAddrtype.Merge(m, src)
}
func (m *PimAddrtype) XXX_Size() int {
	return xxx_messageInfo_PimAddrtype.Size(m)
}
func (m *PimAddrtype) XXX_DiscardUnknown() {
	xxx_messageInfo_PimAddrtype.DiscardUnknown(m)
}

var xxx_messageInfo_PimAddrtype proto.InternalMessageInfo

func (m *PimAddrtype) GetAfName() string {
	if m != nil {
		return m.AfName
	}
	return ""
}

func (m *PimAddrtype) GetIpv4Address() string {
	if m != nil {
		return m.Ipv4Address
	}
	return ""
}

func (m *PimAddrtype) GetIpv6Address() string {
	if m != nil {
		return m.Ipv6Address
	}
	return ""
}

type PimTtOleBag struct {
	InterfaceName               string       `protobuf:"bytes,1,opt,name=interface_name,json=interfaceName,proto3" json:"interface_name,omitempty"`
	Uptime                      uint64       `protobuf:"varint,2,opt,name=uptime,proto3" json:"uptime,omitempty"`
	Expiry                      uint64       `protobuf:"varint,3,opt,name=expiry,proto3" json:"expiry,omitempty"`
	BgpCMcastPruneDelayTimer    uint64       `protobuf:"varint,4,opt,name=bgp_c_mcast_prune_delay_timer,json=bgpCMcastPruneDelayTimer,proto3" json:"bgp_c_mcast_prune_delay_timer,omitempty"`
	JpTimer                     int32        `protobuf:"zigzag32,5,opt,name=jp_timer,json=jpTimer,proto3" json:"jp_timer,omitempty"`
	JpState                     int32        `protobuf:"zigzag32,6,opt,name=jp_state,json=jpState,proto3" json:"jp_state,omitempty"`
	AssertTimer                 int32        `protobuf:"zigzag32,7,opt,name=assert_timer,json=assertTimer,proto3" json:"assert_timer,omitempty"`
	AssertWinner                *PimAddrtype `protobuf:"bytes,8,opt,name=assert_winner,json=assertWinner,proto3" json:"assert_winner,omitempty"`
	LocalMembers                int32        `protobuf:"zigzag32,9,opt,name=local_members,json=localMembers,proto3" json:"local_members,omitempty"`
	InternalInterestInfo        int32        `protobuf:"zigzag32,10,opt,name=internal_interest_info,json=internalInterestInfo,proto3" json:"internal_interest_info,omitempty"`
	ForwardingState             int32        `protobuf:"zigzag32,11,opt,name=forwarding_state,json=forwardingState,proto3" json:"forwarding_state,omitempty"`
	ImmediateState              int32        `protobuf:"zigzag32,12,opt,name=immediate_state,json=immediateState,proto3" json:"immediate_state,omitempty"`
	LastHop                     bool         `protobuf:"varint,13,opt,name=last_hop,json=lastHop,proto3" json:"last_hop,omitempty"`
	MldpInbandMdt               bool         `protobuf:"varint,14,opt,name=mldp_inband_mdt,json=mldpInbandMdt,proto3" json:"mldp_inband_mdt,omitempty"`
	MldpStale                   bool         `protobuf:"varint,15,opt,name=mldp_stale,json=mldpStale,proto3" json:"mldp_stale,omitempty"`
	SaPrune                     bool         `protobuf:"varint,16,opt,name=sa_prune,json=saPrune,proto3" json:"sa_prune,omitempty"`
	AdminBoundary               bool         `protobuf:"varint,17,opt,name=admin_boundary,json=adminBoundary,proto3" json:"admin_boundary,omitempty"`
	IgmpMembership              bool         `protobuf:"varint,18,opt,name=igmp_membership,json=igmpMembership,proto3" json:"igmp_membership,omitempty"`
	MdtSafiJoin                 bool         `protobuf:"varint,19,opt,name=mdt_safi_join,json=mdtSafiJoin,proto3" json:"mdt_safi_join,omitempty"`
	MvpnSafiJoin                bool         `protobuf:"varint,20,opt,name=mvpn_safi_join,json=mvpnSafiJoin,proto3" json:"mvpn_safi_join,omitempty"`
	LocalMdtJoin                bool         `protobuf:"varint,21,opt,name=local_mdt_join,json=localMdtJoin,proto3" json:"local_mdt_join,omitempty"`
	DataMdtJoin                 bool         `protobuf:"varint,22,opt,name=data_mdt_join,json=dataMdtJoin,proto3" json:"data_mdt_join,omitempty"`
	MvpNv6SafiJoin              bool         `protobuf:"varint,23,opt,name=mvp_nv6_safi_join,json=mvpNv6SafiJoin,proto3" json:"mvp_nv6_safi_join,omitempty"`
	BgpCMcastJoin               bool         `protobuf:"varint,24,opt,name=bgp_c_mcast_join,json=bgpCMcastJoin,proto3" json:"bgp_c_mcast_join,omitempty"`
	VrfName                     string       `protobuf:"bytes,25,opt,name=vrf_name,json=vrfName,proto3" json:"vrf_name,omitempty"`
	ExtranetInterface           bool         `protobuf:"varint,26,opt,name=extranet_interface,json=extranetInterface,proto3" json:"extranet_interface,omitempty"`
	InternalInterestInformation string       `protobuf:"bytes,27,opt,name=internal_interest_information,json=internalInterestInformation,proto3" json:"internal_interest_information,omitempty"`
	LocalMembersInformation     string       `protobuf:"bytes,28,opt,name=local_members_information,json=localMembersInformation,proto3" json:"local_members_information,omitempty"`
	AssertState                 bool         `protobuf:"varint,29,opt,name=assert_state,json=assertState,proto3" json:"assert_state,omitempty"`
	XXX_NoUnkeyedLiteral        struct{}     `json:"-"`
	XXX_unrecognized            []byte       `json:"-"`
	XXX_sizecache               int32        `json:"-"`
}

func (m *PimTtOleBag) Reset()         { *m = PimTtOleBag{} }
func (m *PimTtOleBag) String() string { return proto.CompactTextString(m) }
func (*PimTtOleBag) ProtoMessage()    {}
func (*PimTtOleBag) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3d91aa7d312ccab, []int{2}
}

func (m *PimTtOleBag) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PimTtOleBag.Unmarshal(m, b)
}
func (m *PimTtOleBag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PimTtOleBag.Marshal(b, m, deterministic)
}
func (m *PimTtOleBag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PimTtOleBag.Merge(m, src)
}
func (m *PimTtOleBag) XXX_Size() int {
	return xxx_messageInfo_PimTtOleBag.Size(m)
}
func (m *PimTtOleBag) XXX_DiscardUnknown() {
	xxx_messageInfo_PimTtOleBag.DiscardUnknown(m)
}

var xxx_messageInfo_PimTtOleBag proto.InternalMessageInfo

func (m *PimTtOleBag) GetInterfaceName() string {
	if m != nil {
		return m.InterfaceName
	}
	return ""
}

func (m *PimTtOleBag) GetUptime() uint64 {
	if m != nil {
		return m.Uptime
	}
	return 0
}

func (m *PimTtOleBag) GetExpiry() uint64 {
	if m != nil {
		return m.Expiry
	}
	return 0
}

func (m *PimTtOleBag) GetBgpCMcastPruneDelayTimer() uint64 {
	if m != nil {
		return m.BgpCMcastPruneDelayTimer
	}
	return 0
}

func (m *PimTtOleBag) GetJpTimer() int32 {
	if m != nil {
		return m.JpTimer
	}
	return 0
}

func (m *PimTtOleBag) GetJpState() int32 {
	if m != nil {
		return m.JpState
	}
	return 0
}

func (m *PimTtOleBag) GetAssertTimer() int32 {
	if m != nil {
		return m.AssertTimer
	}
	return 0
}

func (m *PimTtOleBag) GetAssertWinner() *PimAddrtype {
	if m != nil {
		return m.AssertWinner
	}
	return nil
}

func (m *PimTtOleBag) GetLocalMembers() int32 {
	if m != nil {
		return m.LocalMembers
	}
	return 0
}

func (m *PimTtOleBag) GetInternalInterestInfo() int32 {
	if m != nil {
		return m.InternalInterestInfo
	}
	return 0
}

func (m *PimTtOleBag) GetForwardingState() int32 {
	if m != nil {
		return m.ForwardingState
	}
	return 0
}

func (m *PimTtOleBag) GetImmediateState() int32 {
	if m != nil {
		return m.ImmediateState
	}
	return 0
}

func (m *PimTtOleBag) GetLastHop() bool {
	if m != nil {
		return m.LastHop
	}
	return false
}

func (m *PimTtOleBag) GetMldpInbandMdt() bool {
	if m != nil {
		return m.MldpInbandMdt
	}
	return false
}

func (m *PimTtOleBag) GetMldpStale() bool {
	if m != nil {
		return m.MldpStale
	}
	return false
}

func (m *PimTtOleBag) GetSaPrune() bool {
	if m != nil {
		return m.SaPrune
	}
	return false
}

func (m *PimTtOleBag) GetAdminBoundary() bool {
	if m != nil {
		return m.AdminBoundary
	}
	return false
}

func (m *PimTtOleBag) GetIgmpMembership() bool {
	if m != nil {
		return m.IgmpMembership
	}
	return false
}

func (m *PimTtOleBag) GetMdtSafiJoin() bool {
	if m != nil {
		return m.MdtSafiJoin
	}
	return false
}

func (m *PimTtOleBag) GetMvpnSafiJoin() bool {
	if m != nil {
		return m.MvpnSafiJoin
	}
	return false
}

func (m *PimTtOleBag) GetLocalMdtJoin() bool {
	if m != nil {
		return m.LocalMdtJoin
	}
	return false
}

func (m *PimTtOleBag) GetDataMdtJoin() bool {
	if m != nil {
		return m.DataMdtJoin
	}
	return false
}

func (m *PimTtOleBag) GetMvpNv6SafiJoin() bool {
	if m != nil {
		return m.MvpNv6SafiJoin
	}
	return false
}

func (m *PimTtOleBag) GetBgpCMcastJoin() bool {
	if m != nil {
		return m.BgpCMcastJoin
	}
	return false
}

func (m *PimTtOleBag) GetVrfName() string {
	if m != nil {
		return m.VrfName
	}
	return ""
}

func (m *PimTtOleBag) GetExtranetInterface() bool {
	if m != nil {
		return m.ExtranetInterface
	}
	return false
}

func (m *PimTtOleBag) GetInternalInterestInformation() string {
	if m != nil {
		return m.InternalInterestInformation
	}
	return ""
}

func (m *PimTtOleBag) GetLocalMembersInformation() string {
	if m != nil {
		return m.LocalMembersInformation
	}
	return ""
}

func (m *PimTtOleBag) GetAssertState() bool {
	if m != nil {
		return m.AssertState
	}
	return false
}

type PimTtRouteBag struct {
	LimitReached              bool           `protobuf:"varint,50,opt,name=limit_reached,json=limitReached,proto3" json:"limit_reached,omitempty"`
	LowMemory                 bool           `protobuf:"varint,51,opt,name=low_memory,json=lowMemory,proto3" json:"low_memory,omitempty"`
	Protocol                  string         `protobuf:"bytes,52,opt,name=protocol,proto3" json:"protocol,omitempty"`
	GroupAddressXr            *PimAddrtype   `protobuf:"bytes,53,opt,name=group_address_xr,json=groupAddressXr,proto3" json:"group_address_xr,omitempty"`
	SourceAddressXr           *PimAddrtype   `protobuf:"bytes,54,opt,name=source_address_xr,json=sourceAddressXr,proto3" json:"source_address_xr,omitempty"`
	Wildcard                  bool           `protobuf:"varint,55,opt,name=wildcard,proto3" json:"wildcard,omitempty"`
	RptXr                     bool           `protobuf:"varint,56,opt,name=rpt_xr,json=rptXr,proto3" json:"rpt_xr,omitempty"`
	Spt                       bool           `protobuf:"varint,57,opt,name=spt,proto3" json:"spt,omitempty"`
	Uptime                    uint64         `protobuf:"varint,58,opt,name=uptime,proto3" json:"uptime,omitempty"`
	Expiry                    uint64         `protobuf:"varint,59,opt,name=expiry,proto3" json:"expiry,omitempty"`
	Alive                     int32          `protobuf:"zigzag32,60,opt,name=alive,proto3" json:"alive,omitempty"`
	RegisterReceivedTimer     int32          `protobuf:"zigzag32,61,opt,name=register_received_timer,json=registerReceivedTimer,proto3" json:"register_received_timer,omitempty"`
	RemoteSource              bool           `protobuf:"varint,62,opt,name=remote_source,json=remoteSource,proto3" json:"remote_source,omitempty"`
	CrossedThreshold          bool           `protobuf:"varint,63,opt,name=crossed_threshold,json=crossedThreshold,proto3" json:"crossed_threshold,omitempty"`
	DataMdtAddrAssigned       bool           `protobuf:"varint,64,opt,name=data_mdt_addr_assigned,json=dataMdtAddrAssigned,proto3" json:"data_mdt_addr_assigned,omitempty"`
	RpAddress                 *PimAddrtype   `protobuf:"bytes,65,opt,name=rp_address,json=rpAddress,proto3" json:"rp_address,omitempty"`
	RpfInterfaceName          string         `protobuf:"bytes,66,opt,name=rpf_interface_name,json=rpfInterfaceName,proto3" json:"rpf_interface_name,omitempty"`
	RpfVrfName                string         `protobuf:"bytes,67,opt,name=rpf_vrf_name,json=rpfVrfName,proto3" json:"rpf_vrf_name,omitempty"`
	RpfSafi                   uint32         `protobuf:"varint,68,opt,name=rpf_safi,json=rpfSafi,proto3" json:"rpf_safi,omitempty"`
	RpfTableName              string         `protobuf:"bytes,69,opt,name=rpf_table_name,json=rpfTableName,proto3" json:"rpf_table_name,omitempty"`
	RpfDrop                   bool           `protobuf:"varint,70,opt,name=rpf_drop,json=rpfDrop,proto3" json:"rpf_drop,omitempty"`
	RpfExtranet               bool           `protobuf:"varint,71,opt,name=rpf_extranet,json=rpfExtranet,proto3" json:"rpf_extranet,omitempty"`
	RpfNeighbor               *PimAddrtype   `protobuf:"bytes,72,opt,name=rpf_neighbor,json=rpfNeighbor,proto3" json:"rpf_neighbor,omitempty"`
	IsViaLsm                  bool           `protobuf:"varint,73,opt,name=is_via_lsm,json=isViaLsm,proto3" json:"is_via_lsm,omitempty"`
	SecondaryRpfInterfaceName string         `protobuf:"bytes,74,opt,name=secondary_rpf_interface_name,json=secondaryRpfInterfaceName,proto3" json:"secondary_rpf_interface_name,omitempty"`
	SecondaryRpfNeighbor      *PimAddrtype   `protobuf:"bytes,75,opt,name=secondary_rpf_neighbor,json=secondaryRpfNeighbor,proto3" json:"secondary_rpf_neighbor,omitempty"`
	RpfRoot                   *PimAddrtype   `protobuf:"bytes,76,opt,name=rpf_root,json=rpfRoot,proto3" json:"rpf_root,omitempty"`
	Connected                 bool           `protobuf:"varint,77,opt,name=connected,proto3" json:"connected,omitempty"`
	Proxy                     bool           `protobuf:"varint,78,opt,name=proxy,proto3" json:"proxy,omitempty"`
	ProxyAddress              *PimAddrtype   `protobuf:"bytes,79,opt,name=proxy_address,json=proxyAddress,proto3" json:"proxy_address,omitempty"`
	RpfProxyEnabled           bool           `protobuf:"varint,80,opt,name=rpf_proxy_enabled,json=rpfProxyEnabled,proto3" json:"rpf_proxy_enabled,omitempty"`
	MofrrEnabled              bool           `protobuf:"varint,81,opt,name=mofrr_enabled,json=mofrrEnabled,proto3" json:"mofrr_enabled,omitempty"`
	RibMoFrrEnabled           bool           `protobuf:"varint,82,opt,name=rib_mo_frr_enabled,json=ribMoFrrEnabled,proto3" json:"rib_mo_frr_enabled,omitempty"`
	JpTimer                   int32          `protobuf:"zigzag32,83,opt,name=jp_timer,json=jpTimer,proto3" json:"jp_timer,omitempty"`
	JpStatus                  int32          `protobuf:"zigzag32,84,opt,name=jp_status,json=jpStatus,proto3" json:"jp_status,omitempty"`
	SuppressRegisters         int32          `protobuf:"zigzag32,85,opt,name=suppress_registers,json=suppressRegisters,proto3" json:"suppress_registers,omitempty"`
	AssumeAlive               bool           `protobuf:"varint,86,opt,name=assume_alive,json=assumeAlive,proto3" json:"assume_alive,omitempty"`
	ProbeAlive                bool           `protobuf:"varint,87,opt,name=probe_alive,json=probeAlive,proto3" json:"probe_alive,omitempty"`
	ReallyAlive               bool           `protobuf:"varint,88,opt,name=really_alive,json=reallyAlive,proto3" json:"really_alive,omitempty"`
	InheritAlive              bool           `protobuf:"varint,89,opt,name=inherit_alive,json=inheritAlive,proto3" json:"inherit_alive,omitempty"`
	InheritSpt                bool           `protobuf:"varint,90,opt,name=inherit_spt,json=inheritSpt,proto3" json:"inherit_spt,omitempty"`
	SignalSources             bool           `protobuf:"varint,91,opt,name=signal_sources,json=signalSources,proto3" json:"signal_sources,omitempty"`
	DontCheckConnected        bool           `protobuf:"varint,92,opt,name=dont_check_connected,json=dontCheckConnected,proto3" json:"dont_check_connected,omitempty"`
	RegisterReceived          bool           `protobuf:"varint,93,opt,name=register_received,json=registerReceived,proto3" json:"register_received,omitempty"`
	LastHop                   bool           `protobuf:"varint,94,opt,name=last_hop,json=lastHop,proto3" json:"last_hop,omitempty"`
	SendingRegisters          bool           `protobuf:"varint,95,opt,name=sending_registers,json=sendingRegisters,proto3" json:"sending_registers,omitempty"`
	SendingNullRegisters      bool           `protobuf:"varint,96,opt,name=sending_null_registers,json=sendingNullRegisters,proto3" json:"sending_null_registers,omitempty"`
	SaSent                    bool           `protobuf:"varint,97,opt,name=sa_sent,json=saSent,proto3" json:"sa_sent,omitempty"`
	SaReceived                bool           `protobuf:"varint,98,opt,name=sa_received,json=saReceived,proto3" json:"sa_received,omitempty"`
	SaJoined                  bool           `protobuf:"varint,99,opt,name=sa_joined,json=saJoined,proto3" json:"sa_joined,omitempty"`
	AnycastRpMatch            bool           `protobuf:"varint,100,opt,name=anycast_rp_match,json=anycastRpMatch,proto3" json:"anycast_rp_match,omitempty"`
	AnycastRpRouteTarget      string         `protobuf:"bytes,101,opt,name=anycast_rp_route_target,json=anycastRpRouteTarget,proto3" json:"anycast_rp_route_target,omitempty"`
	BgpJoin                   bool           `protobuf:"varint,102,opt,name=bgp_join,json=bgpJoin,proto3" json:"bgp_join,omitempty"`
	BgpjpTime                 uint64         `protobuf:"varint,103,opt,name=bgpjp_time,json=bgpjpTime,proto3" json:"bgpjp_time,omitempty"`
	CustomerRoutingType       int32          `protobuf:"zigzag32,104,opt,name=customer_routing_type,json=customerRoutingType,proto3" json:"customer_routing_type,omitempty"`
	ExtranetRoute             bool           `protobuf:"varint,105,opt,name=extranet_route,json=extranetRoute,proto3" json:"extranet_route,omitempty"`
	OutgoingInterface         []*PimTtOleBag `protobuf:"bytes,106,rep,name=outgoing_interface,json=outgoingInterface,proto3" json:"outgoing_interface,omitempty"`
	MofrrActive               bool           `protobuf:"varint,107,opt,name=mofrr_active,json=mofrrActive,proto3" json:"mofrr_active,omitempty"`
	MofrrPrimary              bool           `protobuf:"varint,108,opt,name=mofrr_primary,json=mofrrPrimary,proto3" json:"mofrr_primary,omitempty"`
	MofrrBackup               bool           `protobuf:"varint,109,opt,name=mofrr_backup,json=mofrrBackup,proto3" json:"mofrr_backup,omitempty"`
	Vxlan                     bool           `protobuf:"varint,110,opt,name=vxlan,proto3" json:"vxlan,omitempty"`
	OrigSrcAddress            *PimAddrtype   `protobuf:"bytes,111,opt,name=orig_src_address,json=origSrcAddress,proto3" json:"orig_src_address,omitempty"`
	KatState                  bool           `protobuf:"varint,112,opt,name=kat_state,json=katState,proto3" json:"kat_state,omitempty"`
	XXX_NoUnkeyedLiteral      struct{}       `json:"-"`
	XXX_unrecognized          []byte         `json:"-"`
	XXX_sizecache             int32          `json:"-"`
}

func (m *PimTtRouteBag) Reset()         { *m = PimTtRouteBag{} }
func (m *PimTtRouteBag) String() string { return proto.CompactTextString(m) }
func (*PimTtRouteBag) ProtoMessage()    {}
func (*PimTtRouteBag) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3d91aa7d312ccab, []int{3}
}

func (m *PimTtRouteBag) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PimTtRouteBag.Unmarshal(m, b)
}
func (m *PimTtRouteBag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PimTtRouteBag.Marshal(b, m, deterministic)
}
func (m *PimTtRouteBag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PimTtRouteBag.Merge(m, src)
}
func (m *PimTtRouteBag) XXX_Size() int {
	return xxx_messageInfo_PimTtRouteBag.Size(m)
}
func (m *PimTtRouteBag) XXX_DiscardUnknown() {
	xxx_messageInfo_PimTtRouteBag.DiscardUnknown(m)
}

var xxx_messageInfo_PimTtRouteBag proto.InternalMessageInfo

func (m *PimTtRouteBag) GetLimitReached() bool {
	if m != nil {
		return m.LimitReached
	}
	return false
}

func (m *PimTtRouteBag) GetLowMemory() bool {
	if m != nil {
		return m.LowMemory
	}
	return false
}

func (m *PimTtRouteBag) GetProtocol() string {
	if m != nil {
		return m.Protocol
	}
	return ""
}

func (m *PimTtRouteBag) GetGroupAddressXr() *PimAddrtype {
	if m != nil {
		return m.GroupAddressXr
	}
	return nil
}

func (m *PimTtRouteBag) GetSourceAddressXr() *PimAddrtype {
	if m != nil {
		return m.SourceAddressXr
	}
	return nil
}

func (m *PimTtRouteBag) GetWildcard() bool {
	if m != nil {
		return m.Wildcard
	}
	return false
}

func (m *PimTtRouteBag) GetRptXr() bool {
	if m != nil {
		return m.RptXr
	}
	return false
}

func (m *PimTtRouteBag) GetSpt() bool {
	if m != nil {
		return m.Spt
	}
	return false
}

func (m *PimTtRouteBag) GetUptime() uint64 {
	if m != nil {
		return m.Uptime
	}
	return 0
}

func (m *PimTtRouteBag) GetExpiry() uint64 {
	if m != nil {
		return m.Expiry
	}
	return 0
}

func (m *PimTtRouteBag) GetAlive() int32 {
	if m != nil {
		return m.Alive
	}
	return 0
}

func (m *PimTtRouteBag) GetRegisterReceivedTimer() int32 {
	if m != nil {
		return m.RegisterReceivedTimer
	}
	return 0
}

func (m *PimTtRouteBag) GetRemoteSource() bool {
	if m != nil {
		return m.RemoteSource
	}
	return false
}

func (m *PimTtRouteBag) GetCrossedThreshold() bool {
	if m != nil {
		return m.CrossedThreshold
	}
	return false
}

func (m *PimTtRouteBag) GetDataMdtAddrAssigned() bool {
	if m != nil {
		return m.DataMdtAddrAssigned
	}
	return false
}

func (m *PimTtRouteBag) GetRpAddress() *PimAddrtype {
	if m != nil {
		return m.RpAddress
	}
	return nil
}

func (m *PimTtRouteBag) GetRpfInterfaceName() string {
	if m != nil {
		return m.RpfInterfaceName
	}
	return ""
}

func (m *PimTtRouteBag) GetRpfVrfName() string {
	if m != nil {
		return m.RpfVrfName
	}
	return ""
}

func (m *PimTtRouteBag) GetRpfSafi() uint32 {
	if m != nil {
		return m.RpfSafi
	}
	return 0
}

func (m *PimTtRouteBag) GetRpfTableName() string {
	if m != nil {
		return m.RpfTableName
	}
	return ""
}

func (m *PimTtRouteBag) GetRpfDrop() bool {
	if m != nil {
		return m.RpfDrop
	}
	return false
}

func (m *PimTtRouteBag) GetRpfExtranet() bool {
	if m != nil {
		return m.RpfExtranet
	}
	return false
}

func (m *PimTtRouteBag) GetRpfNeighbor() *PimAddrtype {
	if m != nil {
		return m.RpfNeighbor
	}
	return nil
}

func (m *PimTtRouteBag) GetIsViaLsm() bool {
	if m != nil {
		return m.IsViaLsm
	}
	return false
}

func (m *PimTtRouteBag) GetSecondaryRpfInterfaceName() string {
	if m != nil {
		return m.SecondaryRpfInterfaceName
	}
	return ""
}

func (m *PimTtRouteBag) GetSecondaryRpfNeighbor() *PimAddrtype {
	if m != nil {
		return m.SecondaryRpfNeighbor
	}
	return nil
}

func (m *PimTtRouteBag) GetRpfRoot() *PimAddrtype {
	if m != nil {
		return m.RpfRoot
	}
	return nil
}

func (m *PimTtRouteBag) GetConnected() bool {
	if m != nil {
		return m.Connected
	}
	return false
}

func (m *PimTtRouteBag) GetProxy() bool {
	if m != nil {
		return m.Proxy
	}
	return false
}

func (m *PimTtRouteBag) GetProxyAddress() *PimAddrtype {
	if m != nil {
		return m.ProxyAddress
	}
	return nil
}

func (m *PimTtRouteBag) GetRpfProxyEnabled() bool {
	if m != nil {
		return m.RpfProxyEnabled
	}
	return false
}

func (m *PimTtRouteBag) GetMofrrEnabled() bool {
	if m != nil {
		return m.MofrrEnabled
	}
	return false
}

func (m *PimTtRouteBag) GetRibMoFrrEnabled() bool {
	if m != nil {
		return m.RibMoFrrEnabled
	}
	return false
}

func (m *PimTtRouteBag) GetJpTimer() int32 {
	if m != nil {
		return m.JpTimer
	}
	return 0
}

func (m *PimTtRouteBag) GetJpStatus() int32 {
	if m != nil {
		return m.JpStatus
	}
	return 0
}

func (m *PimTtRouteBag) GetSuppressRegisters() int32 {
	if m != nil {
		return m.SuppressRegisters
	}
	return 0
}

func (m *PimTtRouteBag) GetAssumeAlive() bool {
	if m != nil {
		return m.AssumeAlive
	}
	return false
}

func (m *PimTtRouteBag) GetProbeAlive() bool {
	if m != nil {
		return m.ProbeAlive
	}
	return false
}

func (m *PimTtRouteBag) GetReallyAlive() bool {
	if m != nil {
		return m.ReallyAlive
	}
	return false
}

func (m *PimTtRouteBag) GetInheritAlive() bool {
	if m != nil {
		return m.InheritAlive
	}
	return false
}

func (m *PimTtRouteBag) GetInheritSpt() bool {
	if m != nil {
		return m.InheritSpt
	}
	return false
}

func (m *PimTtRouteBag) GetSignalSources() bool {
	if m != nil {
		return m.SignalSources
	}
	return false
}

func (m *PimTtRouteBag) GetDontCheckConnected() bool {
	if m != nil {
		return m.DontCheckConnected
	}
	return false
}

func (m *PimTtRouteBag) GetRegisterReceived() bool {
	if m != nil {
		return m.RegisterReceived
	}
	return false
}

func (m *PimTtRouteBag) GetLastHop() bool {
	if m != nil {
		return m.LastHop
	}
	return false
}

func (m *PimTtRouteBag) GetSendingRegisters() bool {
	if m != nil {
		return m.SendingRegisters
	}
	return false
}

func (m *PimTtRouteBag) GetSendingNullRegisters() bool {
	if m != nil {
		return m.SendingNullRegisters
	}
	return false
}

func (m *PimTtRouteBag) GetSaSent() bool {
	if m != nil {
		return m.SaSent
	}
	return false
}

func (m *PimTtRouteBag) GetSaReceived() bool {
	if m != nil {
		return m.SaReceived
	}
	return false
}

func (m *PimTtRouteBag) GetSaJoined() bool {
	if m != nil {
		return m.SaJoined
	}
	return false
}

func (m *PimTtRouteBag) GetAnycastRpMatch() bool {
	if m != nil {
		return m.AnycastRpMatch
	}
	return false
}

func (m *PimTtRouteBag) GetAnycastRpRouteTarget() string {
	if m != nil {
		return m.AnycastRpRouteTarget
	}
	return ""
}

func (m *PimTtRouteBag) GetBgpJoin() bool {
	if m != nil {
		return m.BgpJoin
	}
	return false
}

func (m *PimTtRouteBag) GetBgpjpTime() uint64 {
	if m != nil {
		return m.BgpjpTime
	}
	return 0
}

func (m *PimTtRouteBag) GetCustomerRoutingType() int32 {
	if m != nil {
		return m.CustomerRoutingType
	}
	return 0
}

func (m *PimTtRouteBag) GetExtranetRoute() bool {
	if m != nil {
		return m.ExtranetRoute
	}
	return false
}

func (m *PimTtRouteBag) GetOutgoingInterface() []*PimTtOleBag {
	if m != nil {
		return m.OutgoingInterface
	}
	return nil
}

func (m *PimTtRouteBag) GetMofrrActive() bool {
	if m != nil {
		return m.MofrrActive
	}
	return false
}

func (m *PimTtRouteBag) GetMofrrPrimary() bool {
	if m != nil {
		return m.MofrrPrimary
	}
	return false
}

func (m *PimTtRouteBag) GetMofrrBackup() bool {
	if m != nil {
		return m.MofrrBackup
	}
	return false
}

func (m *PimTtRouteBag) GetVxlan() bool {
	if m != nil {
		return m.Vxlan
	}
	return false
}

func (m *PimTtRouteBag) GetOrigSrcAddress() *PimAddrtype {
	if m != nil {
		return m.OrigSrcAddress
	}
	return nil
}

func (m *PimTtRouteBag) GetKatState() bool {
	if m != nil {
		return m.KatState
	}
	return false
}

func init() {
	proto.RegisterType((*PimTtRouteBag_KEYS)(nil), "cisco_ios_xr_ipv4_pim_oper.ipv6_pim.active.vrfs.vrf.topologies.topology.pim_tt_route_bag_KEYS")
	proto.RegisterType((*PimAddrtype)(nil), "cisco_ios_xr_ipv4_pim_oper.ipv6_pim.active.vrfs.vrf.topologies.topology.pim_addrtype")
	proto.RegisterType((*PimTtOleBag)(nil), "cisco_ios_xr_ipv4_pim_oper.ipv6_pim.active.vrfs.vrf.topologies.topology.pim_tt_ole_bag")
	proto.RegisterType((*PimTtRouteBag)(nil), "cisco_ios_xr_ipv4_pim_oper.ipv6_pim.active.vrfs.vrf.topologies.topology.pim_tt_route_bag")
}

func init() { proto.RegisterFile("pim_tt_route_bag.proto", fileDescriptor_b3d91aa7d312ccab) }

var fileDescriptor_b3d91aa7d312ccab = []byte{
	// 1819 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x57, 0xdb, 0x77, 0x1b, 0xb7,
	0xf1, 0x3e, 0xfc, 0xd9, 0x96, 0x44, 0x48, 0x94, 0x44, 0x58, 0x17, 0x28, 0xb2, 0xce, 0x4f, 0x91,
	0x9b, 0x46, 0xa9, 0x5b, 0x9d, 0x1e, 0xdb, 0x51, 0xdb, 0xf4, 0xe2, 0xca, 0x97, 0x24, 0x72, 0x22,
	0xd5, 0xa5, 0x14, 0xdb, 0xe9, 0x0d, 0x05, 0x77, 0xb1, 0x24, 0xac, 0xdd, 0x05, 0x0e, 0x00, 0x52,
	0x62, 0x5f, 0x7a, 0xfa, 0xd2, 0x97, 0xbe, 0xf4, 0xb9, 0x7f, 0x54, 0xff, 0xa6, 0x9e, 0x19, 0x60,
	0x97, 0x4b, 0xd5, 0x7d, 0x8b, 0x5e, 0x78, 0x88, 0x6f, 0x3e, 0x60, 0x66, 0x67, 0x07, 0xdf, 0xcc,
	0x92, 0x0d, 0xa3, 0x0a, 0xee, 0x3d, 0xb7, 0x7a, 0xe4, 0x25, 0xef, 0x8b, 0xc1, 0x81, 0xb1, 0xda,
	0x6b, 0xfa, 0x45, 0xa2, 0x5c, 0xa2, 0xb9, 0xd2, 0x8e, 0x5f, 0x59, 0xae, 0xcc, 0xf8, 0x31, 0x07,
	0xa6, 0x36, 0xd2, 0x1e, 0x28, 0x33, 0x3e, 0x84, 0xd5, 0x81, 0x48, 0xbc, 0x1a, 0xcb, 0x83, 0xb1,
	0xcd, 0x1c, 0xfc, 0x1c, 0x78, 0x6d, 0x74, 0xae, 0x07, 0x4a, 0xba, 0xea, 0xef, 0x64, 0xef, 0x9f,
	0x2d, 0xb2, 0x7e, 0xdd, 0x07, 0xff, 0xea, 0xc5, 0xb7, 0x67, 0x74, 0x8b, 0x2c, 0x8c, 0x6d, 0xc6,
	0x4b, 0x51, 0x48, 0xd6, 0xda, 0x6d, 0xed, 0xb7, 0x7b, 0xf3, 0x63, 0x9b, 0x9d, 0x8a, 0x42, 0xd2,
	0x8f, 0xc8, 0xb2, 0xd3, 0x23, 0x9b, 0x48, 0x2e, 0xd2, 0xd4, 0x4a, 0xe7, 0xd8, 0xff, 0x21, 0xa1,
	0x13, 0xd0, 0xa3, 0x00, 0xd2, 0xfb, 0xa4, 0x33, 0xb0, 0x7a, 0x64, 0x6a, 0xd6, 0x2d, 0x64, 0x2d,
	0x21, 0x58, 0x91, 0x56, 0xc9, 0x2d, 0x6b, 0x3c, 0xbb, 0xbd, 0xdb, 0xda, 0xef, 0xf4, 0xe0, 0xef,
	0x5e, 0x41, 0x96, 0x20, 0x22, 0xd8, 0xe4, 0x27, 0x46, 0xd2, 0x4d, 0x32, 0x2f, 0x66, 0xe2, 0x98,
	0x13, 0x21, 0x8c, 0x0f, 0xc9, 0x12, 0x3e, 0xf9, 0x6c, 0x10, 0x8b, 0x80, 0x55, 0xa7, 0x07, 0xca,
	0xe1, 0xb5, 0x08, 0x80, 0x72, 0x18, 0x29, 0x7b, 0xff, 0x6e, 0x93, 0xe5, 0x98, 0x01, 0x9d, 0xe3,
	0xf3, 0xc3, 0xf3, 0xa9, 0xd2, 0x4b, 0x9b, 0x89, 0x44, 0x36, 0x1d, 0x77, 0x6a, 0x14, 0xfd, 0x6f,
	0x90, 0xb9, 0x91, 0xf1, 0xaa, 0x90, 0xe8, 0xf9, 0x76, 0x2f, 0xae, 0x00, 0x97, 0x57, 0x46, 0xd9,
	0x09, 0xba, 0xbb, 0xdd, 0x8b, 0x2b, 0xfa, 0x84, 0xec, 0xf4, 0x07, 0x86, 0x27, 0xbc, 0x48, 0x84,
	0xf3, 0xdc, 0xd8, 0x51, 0x29, 0x79, 0x2a, 0x73, 0x31, 0xe1, 0xb0, 0xcf, 0x62, 0x12, 0x6e, 0xf7,
	0x58, 0x7f, 0x60, 0x9e, 0x9d, 0x00, 0xe5, 0x15, 0x30, 0x9e, 0x03, 0xe1, 0x1c, 0xec, 0xf0, 0x4a,
	0xde, 0x99, 0xc8, 0xbd, 0xb3, 0xdb, 0xda, 0xef, 0xf6, 0xe6, 0xdf, 0x99, 0xa6, 0xc9, 0x79, 0xe1,
	0x25, 0x9b, 0xab, 0x4c, 0x67, 0xb0, 0x84, 0x1c, 0x08, 0xe7, 0xa4, 0xf5, 0x71, 0xe7, 0x3c, 0x9a,
	0x17, 0x03, 0x16, 0x76, 0xff, 0x85, 0x74, 0x22, 0xe5, 0x52, 0x95, 0xa5, 0xb4, 0x6c, 0x61, 0xb7,
	0xb5, 0xbf, 0xf8, 0xf0, 0x9b, 0x83, 0xef, 0xa8, 0xcc, 0x0e, 0x9a, 0x2f, 0xb4, 0x17, 0xc3, 0x79,
	0x83, 0xae, 0xa0, 0x4a, 0x72, 0x9d, 0x88, 0x9c, 0x17, 0xb2, 0xe8, 0x4b, 0xeb, 0x58, 0x1b, 0xe3,
	0x5b, 0x42, 0xf0, 0x24, 0x60, 0xf4, 0x31, 0xd9, 0xc0, 0xdc, 0x97, 0x22, 0xe7, 0xf8, 0x47, 0x3a,
	0xcf, 0x55, 0x99, 0x69, 0x46, 0x90, 0xbd, 0x56, 0x59, 0x8f, 0xa3, 0xf1, 0xb8, 0xcc, 0x34, 0xfd,
	0x84, 0xac, 0x66, 0xda, 0x5e, 0x0a, 0x9b, 0xaa, 0x72, 0x10, 0x93, 0xb3, 0x88, 0xfc, 0x95, 0x29,
	0x1e, 0x92, 0xf4, 0x31, 0x59, 0x51, 0x45, 0x21, 0x53, 0x25, 0xbc, 0x8c, 0xcc, 0x25, 0x64, 0x2e,
	0xd7, 0x70, 0x20, 0x6e, 0x91, 0x85, 0x1c, 0xde, 0xde, 0x50, 0x1b, 0xd6, 0xd9, 0x6d, 0xed, 0x2f,
	0xf4, 0xe6, 0x61, 0xfd, 0xa5, 0x36, 0xf4, 0xfb, 0x64, 0xa5, 0xc8, 0x53, 0xc3, 0x55, 0xd9, 0x17,
	0x65, 0xca, 0x8b, 0xd4, 0xb3, 0x65, 0x64, 0x74, 0x00, 0x3e, 0x46, 0xf4, 0x24, 0xf5, 0x74, 0x87,
	0x10, 0xe4, 0x39, 0x2f, 0x72, 0xc9, 0x56, 0x90, 0xd2, 0x06, 0xe4, 0x0c, 0x00, 0xf0, 0xe0, 0x44,
	0xa8, 0x0e, 0xb6, 0x1a, 0x3c, 0x38, 0x81, 0xa5, 0x00, 0x85, 0x29, 0xd2, 0x42, 0x95, 0xbc, 0xaf,
	0x47, 0x65, 0x2a, 0xec, 0x84, 0x75, 0x83, 0x03, 0x44, 0x9f, 0x46, 0x10, 0x1f, 0x66, 0x50, 0x98,
	0x2a, 0xa3, 0x43, 0x65, 0x18, 0x45, 0xde, 0x32, 0xc0, 0x27, 0x35, 0x4a, 0xf7, 0x48, 0xa7, 0x48,
	0x3d, 0x77, 0x22, 0x53, 0xfc, 0x9d, 0x56, 0x25, 0xbb, 0x8b, 0xb4, 0xc5, 0x22, 0xf5, 0x67, 0x22,
	0x53, 0x2f, 0xb5, 0x2a, 0xe9, 0xf7, 0xc8, 0x72, 0x31, 0x36, 0x65, 0x83, 0xb4, 0x86, 0xa4, 0x25,
	0x40, 0x9b, 0xac, 0xf8, 0x16, 0x53, 0x1f, 0x58, 0xeb, 0x81, 0x15, 0x5e, 0x63, 0xea, 0x91, 0xb5,
	0x47, 0x3a, 0xa9, 0xf0, 0x62, 0x4a, 0xda, 0x08, 0xfe, 0x00, 0xac, 0x38, 0x9f, 0x90, 0x6e, 0x31,
	0x36, 0xbc, 0x1c, 0x1f, 0x36, 0x5c, 0x6e, 0x86, 0xf0, 0x8b, 0xb1, 0x39, 0x1d, 0x1f, 0xd6, 0x4e,
	0x3f, 0x26, 0xab, 0xcd, 0x0b, 0x85, 0x4c, 0x16, 0x12, 0x52, 0xdf, 0x21, 0x24, 0x36, 0xb5, 0x6c,
	0x6b, 0x56, 0xcb, 0x7e, 0x44, 0xa8, 0xbc, 0xf2, 0x56, 0x94, 0xd2, 0xf3, 0xfa, 0x7a, 0xb3, 0x0f,
	0xf0, 0x94, 0x6e, 0x65, 0x39, 0xae, 0x0c, 0xf4, 0x29, 0xd9, 0x79, 0x7f, 0x21, 0xda, 0x42, 0x78,
	0xa5, 0x4b, 0xb6, 0x8d, 0xc7, 0x6f, 0xbf, 0xaf, 0x1e, 0x23, 0x85, 0x7e, 0x46, 0xb6, 0x66, 0x2a,
	0x7e, 0x66, 0xff, 0x3d, 0xdc, 0xbf, 0xd9, 0xac, 0xfe, 0xe6, 0xde, 0xe9, 0x65, 0x0e, 0x45, 0xba,
	0x13, 0x12, 0x18, 0x30, 0xac, 0xd0, 0xbd, 0x7f, 0x31, 0xb2, 0x7a, 0x5d, 0xd2, 0xf1, 0x96, 0xa9,
	0x42, 0x79, 0x6e, 0xa5, 0x48, 0x86, 0x32, 0x65, 0x0f, 0xe3, 0xeb, 0x01, 0xb0, 0x17, 0x30, 0x28,
	0xcc, 0x5c, 0x5f, 0x42, 0x58, 0xda, 0x4e, 0xd8, 0xa3, 0x50, 0x98, 0xb9, 0xbe, 0x3c, 0x41, 0x80,
	0x7e, 0x40, 0x16, 0xb0, 0xfb, 0x24, 0x3a, 0x67, 0x8f, 0x31, 0xcc, 0x7a, 0x4d, 0xff, 0x4a, 0x56,
	0x67, 0xb4, 0x9e, 0x5f, 0x59, 0xf6, 0xe9, 0x4d, 0x8a, 0xc8, 0x72, 0xb3, 0x8b, 0xbc, 0xb5, 0xf4,
	0x6f, 0x2d, 0xd2, 0x9d, 0x6d, 0x4a, 0x10, 0xc2, 0xe1, 0x4d, 0x86, 0xb0, 0x32, 0xd3, 0xee, 0xde,
	0x5a, 0x48, 0xd0, 0xa5, 0xca, 0xd3, 0x44, 0xd8, 0x94, 0xfd, 0x04, 0xb3, 0x57, 0xaf, 0xe9, 0x3a,
	0x99, 0xb3, 0xc6, 0x43, 0x4c, 0x3f, 0x45, 0xcb, 0x1d, 0x6b, 0xfc, 0x5b, 0x0b, 0xed, 0xcf, 0x19,
	0xcf, 0x7e, 0x86, 0x18, 0xfc, 0x6d, 0x74, 0x95, 0xcf, 0xfe, 0x47, 0x57, 0xf9, 0xf9, 0x4c, 0x57,
	0x59, 0x23, 0x77, 0x44, 0xae, 0xc6, 0x92, 0xfd, 0x02, 0xf5, 0x2a, 0x2c, 0xe8, 0x21, 0xd9, 0xb4,
	0x72, 0xa0, 0x9c, 0x97, 0x96, 0x5b, 0x99, 0x48, 0x35, 0x96, 0x69, 0xd4, 0xff, 0x5f, 0x22, 0x6f,
	0xbd, 0x32, 0xf7, 0xa2, 0x35, 0x74, 0x82, 0xfb, 0xa4, 0x63, 0x65, 0xa1, 0x41, 0x04, 0xf1, 0xe1,
	0xd8, 0xaf, 0x42, 0x9d, 0x04, 0xf0, 0x0c, 0x31, 0xfa, 0x80, 0x74, 0x13, 0xab, 0x9d, 0x83, 0x23,
	0x87, 0x56, 0xba, 0xa1, 0xce, 0x53, 0xf6, 0x04, 0x89, 0xab, 0xd1, 0x70, 0x5e, 0xe1, 0xf4, 0x11,
	0xd9, 0xa8, 0xef, 0x3c, 0xa4, 0x8e, 0x0b, 0xe7, 0xd4, 0xa0, 0x94, 0x29, 0xfb, 0x35, 0xee, 0xb8,
	0x1b, 0x2f, 0x3f, 0xa4, 0xf1, 0x28, 0x9a, 0xa8, 0x27, 0xc4, 0x4e, 0xe7, 0x86, 0xa3, 0x9b, 0x7c,
	0x8b, 0x6d, 0x5b, 0xcf, 0x22, 0x3f, 0x24, 0xd4, 0x9a, 0x8c, 0x5f, 0xeb, 0xfd, 0x4f, 0xb1, 0xd4,
	0x57, 0xad, 0xc9, 0x8e, 0x67, 0xda, 0xff, 0x2e, 0x59, 0x02, 0x76, 0x2d, 0x2c, 0xcf, 0x90, 0x47,
	0xac, 0xc9, 0x5e, 0x47, 0x6d, 0xd9, 0x22, 0x0b, 0xc0, 0x00, 0x19, 0x63, 0xcf, 0x71, 0xc0, 0x99,
	0xb7, 0x26, 0x03, 0xf9, 0x02, 0xbd, 0x04, 0x93, 0x17, 0xfd, 0x3c, 0xba, 0x79, 0x11, 0x86, 0x23,
	0x6b, 0xb2, 0x73, 0x00, 0x9b, 0x07, 0xa4, 0x56, 0x1b, 0xf6, 0x79, 0x68, 0x05, 0xd6, 0x64, 0xcf,
	0xad, 0x36, 0x20, 0x04, 0x60, 0xaa, 0x14, 0x8a, 0x7d, 0x11, 0x84, 0xc0, 0x9a, 0xec, 0x45, 0x84,
	0xe8, 0x55, 0xa0, 0x94, 0x52, 0x0d, 0x86, 0x7d, 0x6d, 0xd9, 0x97, 0x37, 0x99, 0x46, 0xf0, 0x7c,
	0x1a, 0x3d, 0xd1, 0x7b, 0x84, 0x28, 0xc7, 0xc7, 0x4a, 0xf0, 0xdc, 0x15, 0xec, 0x38, 0x5c, 0x05,
	0xe5, 0x5e, 0x2b, 0xf1, 0xb5, 0x2b, 0xe8, 0x13, 0x72, 0xcf, 0xc9, 0x44, 0x63, 0xaf, 0xe2, 0xef,
	0x49, 0xf8, 0x4b, 0xcc, 0xc4, 0x56, 0xcd, 0xe9, 0x5d, 0xcf, 0xfc, 0x3f, 0x5a, 0x64, 0x63, 0xf6,
	0x84, 0xfa, 0x19, 0xbf, 0xba, 0xc9, 0x67, 0x5c, 0x6b, 0x86, 0x54, 0x3f, 0xac, 0x09, 0x2f, 0xc9,
	0x6a, 0xed, 0xd9, 0xd7, 0x37, 0xe9, 0x1e, 0xde, 0x7d, 0x4f, 0x6b, 0x4f, 0xef, 0x91, 0x76, 0xa2,
	0xcb, 0x52, 0x26, 0x5e, 0xa6, 0xec, 0x24, 0xc8, 0x74, 0x0d, 0x80, 0x20, 0x18, 0xab, 0xaf, 0x26,
	0xec, 0x34, 0x08, 0x0d, 0x2e, 0x60, 0xc4, 0xc3, 0x3f, 0xf5, 0xa5, 0xfa, 0xcd, 0x8d, 0x8e, 0x78,
	0xe8, 0xab, 0xba, 0x57, 0x3f, 0x20, 0x5d, 0xc8, 0x50, 0xf0, 0x2f, 0x4b, 0x28, 0xef, 0x94, 0xbd,
	0xc2, 0xe8, 0x56, 0xac, 0xc9, 0x5e, 0x01, 0xfe, 0x22, 0xc0, 0x20, 0x40, 0x85, 0xce, 0xac, 0xad,
	0x79, 0xbf, 0x8d, 0xd3, 0x06, 0x80, 0x15, 0xe9, 0x01, 0xa1, 0x56, 0xf5, 0x79, 0xa1, 0x79, 0x93,
	0xd9, 0x8b, 0x27, 0xaa, 0xfe, 0x89, 0xfe, 0x7c, 0x4a, 0x6e, 0x4e, 0xcd, 0x67, 0xb3, 0x53, 0xf3,
	0x36, 0x69, 0xc7, 0xa9, 0x79, 0xe4, 0xd8, 0x39, 0xda, 0x16, 0xc2, 0xd8, 0x3c, 0x72, 0x30, 0x19,
	0xb8, 0x91, 0x31, 0xd8, 0x4a, 0x2a, 0xb1, 0x74, 0xec, 0x1b, 0x64, 0x75, 0x2b, 0x4b, 0xaf, 0x32,
	0xc4, 0xce, 0x3c, 0x2a, 0x24, 0x0f, 0x72, 0xfc, 0xba, 0xee, 0xcc, 0xa3, 0x42, 0x1e, 0xa1, 0x28,
	0xff, 0x3f, 0x59, 0x34, 0x56, 0xf7, 0x2b, 0xc6, 0x1b, 0x64, 0x10, 0x84, 0x02, 0x01, 0x2e, 0xb5,
	0x14, 0x79, 0x3e, 0x89, 0x8c, 0xb7, 0xf1, 0x52, 0x23, 0x16, 0x28, 0xf7, 0x49, 0x47, 0x95, 0x43,
	0x69, 0x95, 0x8f, 0x9c, 0x6f, 0x43, 0x7e, 0x22, 0x58, 0x3b, 0xaa, 0x48, 0xd0, 0x5d, 0x7e, 0x17,
	0x1c, 0x45, 0xe8, 0xcc, 0x78, 0xfc, 0x82, 0x53, 0x03, 0x18, 0x62, 0x82, 0xcc, 0x3b, 0xf6, 0xfb,
	0x30, 0x37, 0x05, 0x34, 0xe8, 0xbc, 0xa3, 0x3f, 0x26, 0x6b, 0xa9, 0x2e, 0x3d, 0x4f, 0x86, 0x32,
	0xb9, 0xe0, 0xd3, 0x9a, 0xfb, 0x03, 0x92, 0x29, 0xd8, 0x9e, 0x81, 0xe9, 0x59, 0x5d, 0x7c, 0x0f,
	0x48, 0xf7, 0xbf, 0xfa, 0x0e, 0xfb, 0x63, 0x68, 0x0d, 0xd7, 0x3b, 0xce, 0xcc, 0x2c, 0xfd, 0xa7,
	0xd9, 0x59, 0xfa, 0x01, 0xe9, 0x3a, 0x59, 0xe2, 0xdc, 0x3e, 0xcd, 0x3d, 0x0f, 0xe7, 0x44, 0xc3,
	0x34, 0xf5, 0x8f, 0x41, 0x0e, 0x02, 0xb9, 0x1c, 0xe5, 0x79, 0x63, 0xc7, 0x9f, 0x71, 0xc7, 0x5a,
	0xb4, 0x9e, 0x8e, 0xf2, 0x7c, 0xba, 0x6b, 0x93, 0xcc, 0x3b, 0xc1, 0x9d, 0x2c, 0x3d, 0x13, 0x48,
	0x9b, 0x73, 0xe2, 0x4c, 0x96, 0x1e, 0xb2, 0xe7, 0xc4, 0x34, 0xfa, 0x7e, 0xc8, 0x9e, 0x13, 0x75,
	0xdc, 0xdb, 0xa4, 0xed, 0x04, 0x8e, 0x9b, 0x32, 0x65, 0x49, 0x50, 0x37, 0x27, 0x5e, 0xe2, 0x9a,
	0xee, 0x93, 0x55, 0x51, 0x4e, 0x70, 0x20, 0xb5, 0x86, 0x17, 0xc2, 0x27, 0x43, 0x96, 0x86, 0xf1,
	0x35, 0xe2, 0x3d, 0x73, 0x02, 0x28, 0xfd, 0x94, 0x6c, 0x36, 0x98, 0x61, 0x56, 0xf3, 0xc2, 0x0e,
	0xa4, 0x67, 0x12, 0x25, 0x70, 0xad, 0xde, 0xd0, 0x03, 0xe3, 0x39, 0xda, 0x20, 0x6b, 0x30, 0xf5,
	0xe2, 0xb4, 0x9b, 0x85, 0xac, 0xf5, 0x07, 0x06, 0xe7, 0xdc, 0x1d, 0x42, 0xfa, 0x03, 0x13, 0xab,
	0x9d, 0x0d, 0x70, 0x4e, 0x68, 0x23, 0x02, 0xf5, 0x4e, 0x1f, 0x92, 0xf5, 0x64, 0xe4, 0xbc, 0x2e,
	0xe0, 0xe5, 0xe8, 0x91, 0x87, 0x84, 0xc1, 0x75, 0x65, 0x43, 0x2c, 0xea, 0xbb, 0x95, 0xb1, 0x17,
	0x6c, 0xe7, 0xf0, 0xf5, 0xfd, 0x11, 0x59, 0xae, 0xe7, 0x63, 0x0c, 0x91, 0xa9, 0x50, 0x29, 0x15,
	0x8a, 0xa1, 0xd1, 0xbf, 0xb7, 0x08, 0xd5, 0x23, 0x3f, 0xd0, 0x70, 0xe6, 0x74, 0x8e, 0x7e, 0xb7,
	0x7b, 0x6b, 0x7f, 0xf1, 0xe1, 0x9b, 0xef, 0x54, 0x64, 0xa6, 0x1f, 0xea, 0xbd, 0x6e, 0xe5, 0x72,
	0x3a, 0xa0, 0x7f, 0x48, 0x82, 0x54, 0xf0, 0x70, 0x1c, 0xbb, 0x88, 0x5f, 0x34, 0x80, 0x1d, 0x21,
	0x34, 0x95, 0x18, 0x63, 0x55, 0x01, 0x1f, 0x51, 0x79, 0x43, 0x62, 0x5e, 0x05, 0x6c, 0x7a, 0x4e,
	0x5f, 0x24, 0x17, 0x23, 0xc3, 0x8a, 0xc6, 0x39, 0x4f, 0x11, 0x02, 0xa1, 0x1d, 0x5f, 0xe5, 0xa2,
	0x64, 0x65, 0x10, 0x5a, 0x5c, 0xc0, 0x24, 0xac, 0xad, 0x1a, 0x70, 0x67, 0x93, 0x5a, 0x6b, 0xf5,
	0x8d, 0x4e, 0xc2, 0xe0, 0xee, 0xcc, 0x26, 0x95, 0xda, 0x6e, 0x93, 0xf6, 0x85, 0xa8, 0xbe, 0x0f,
	0x4c, 0xa8, 0xce, 0x0b, 0x11, 0x3e, 0x0e, 0xfa, 0x73, 0x38, 0xb1, 0x3f, 0xfa, 0x4f, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x8f, 0x4d, 0x87, 0x77, 0x59, 0x12, 0x00, 0x00,
}
