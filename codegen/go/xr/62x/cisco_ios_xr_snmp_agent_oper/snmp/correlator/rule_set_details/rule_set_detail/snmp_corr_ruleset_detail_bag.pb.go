/*
Copyright 2019 Cisco Systems

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: snmp_corr_ruleset_detail_bag.proto

package cisco_ios_xr_snmp_agent_oper_snmp_correlator_rule_set_details_rule_set_detail

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type SnmpCorrRulesetDetailBag_KEYS struct {
	RuleSetName          string   `protobuf:"bytes,1,opt,name=rule_set_name,json=ruleSetName,proto3" json:"rule_set_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SnmpCorrRulesetDetailBag_KEYS) Reset()         { *m = SnmpCorrRulesetDetailBag_KEYS{} }
func (m *SnmpCorrRulesetDetailBag_KEYS) String() string { return proto.CompactTextString(m) }
func (*SnmpCorrRulesetDetailBag_KEYS) ProtoMessage()    {}
func (*SnmpCorrRulesetDetailBag_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_ada6968f771e3c3b, []int{0}
}

func (m *SnmpCorrRulesetDetailBag_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SnmpCorrRulesetDetailBag_KEYS.Unmarshal(m, b)
}
func (m *SnmpCorrRulesetDetailBag_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SnmpCorrRulesetDetailBag_KEYS.Marshal(b, m, deterministic)
}
func (m *SnmpCorrRulesetDetailBag_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SnmpCorrRulesetDetailBag_KEYS.Merge(m, src)
}
func (m *SnmpCorrRulesetDetailBag_KEYS) XXX_Size() int {
	return xxx_messageInfo_SnmpCorrRulesetDetailBag_KEYS.Size(m)
}
func (m *SnmpCorrRulesetDetailBag_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_SnmpCorrRulesetDetailBag_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_SnmpCorrRulesetDetailBag_KEYS proto.InternalMessageInfo

func (m *SnmpCorrRulesetDetailBag_KEYS) GetRuleSetName() string {
	if m != nil {
		return m.RuleSetName
	}
	return ""
}

type SnmpCorrRuleSummaryBag struct {
	RuleName             string   `protobuf:"bytes,1,opt,name=rule_name,json=ruleName,proto3" json:"rule_name,omitempty"`
	RuleState            string   `protobuf:"bytes,2,opt,name=rule_state,json=ruleState,proto3" json:"rule_state,omitempty"`
	BufferedTrapsCount   uint32   `protobuf:"varint,3,opt,name=buffered_traps_count,json=bufferedTrapsCount,proto3" json:"buffered_traps_count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SnmpCorrRuleSummaryBag) Reset()         { *m = SnmpCorrRuleSummaryBag{} }
func (m *SnmpCorrRuleSummaryBag) String() string { return proto.CompactTextString(m) }
func (*SnmpCorrRuleSummaryBag) ProtoMessage()    {}
func (*SnmpCorrRuleSummaryBag) Descriptor() ([]byte, []int) {
	return fileDescriptor_ada6968f771e3c3b, []int{1}
}

func (m *SnmpCorrRuleSummaryBag) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SnmpCorrRuleSummaryBag.Unmarshal(m, b)
}
func (m *SnmpCorrRuleSummaryBag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SnmpCorrRuleSummaryBag.Marshal(b, m, deterministic)
}
func (m *SnmpCorrRuleSummaryBag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SnmpCorrRuleSummaryBag.Merge(m, src)
}
func (m *SnmpCorrRuleSummaryBag) XXX_Size() int {
	return xxx_messageInfo_SnmpCorrRuleSummaryBag.Size(m)
}
func (m *SnmpCorrRuleSummaryBag) XXX_DiscardUnknown() {
	xxx_messageInfo_SnmpCorrRuleSummaryBag.DiscardUnknown(m)
}

var xxx_messageInfo_SnmpCorrRuleSummaryBag proto.InternalMessageInfo

func (m *SnmpCorrRuleSummaryBag) GetRuleName() string {
	if m != nil {
		return m.RuleName
	}
	return ""
}

func (m *SnmpCorrRuleSummaryBag) GetRuleState() string {
	if m != nil {
		return m.RuleState
	}
	return ""
}

func (m *SnmpCorrRuleSummaryBag) GetBufferedTrapsCount() uint32 {
	if m != nil {
		return m.BufferedTrapsCount
	}
	return 0
}

type SnmpCorrRulesetDetailBag struct {
	RuleSetNameXr        string                    `protobuf:"bytes,50,opt,name=rule_set_name_xr,json=ruleSetNameXr,proto3" json:"rule_set_name_xr,omitempty"`
	Rules                []*SnmpCorrRuleSummaryBag `protobuf:"bytes,51,rep,name=rules,proto3" json:"rules,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *SnmpCorrRulesetDetailBag) Reset()         { *m = SnmpCorrRulesetDetailBag{} }
func (m *SnmpCorrRulesetDetailBag) String() string { return proto.CompactTextString(m) }
func (*SnmpCorrRulesetDetailBag) ProtoMessage()    {}
func (*SnmpCorrRulesetDetailBag) Descriptor() ([]byte, []int) {
	return fileDescriptor_ada6968f771e3c3b, []int{2}
}

func (m *SnmpCorrRulesetDetailBag) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SnmpCorrRulesetDetailBag.Unmarshal(m, b)
}
func (m *SnmpCorrRulesetDetailBag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SnmpCorrRulesetDetailBag.Marshal(b, m, deterministic)
}
func (m *SnmpCorrRulesetDetailBag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SnmpCorrRulesetDetailBag.Merge(m, src)
}
func (m *SnmpCorrRulesetDetailBag) XXX_Size() int {
	return xxx_messageInfo_SnmpCorrRulesetDetailBag.Size(m)
}
func (m *SnmpCorrRulesetDetailBag) XXX_DiscardUnknown() {
	xxx_messageInfo_SnmpCorrRulesetDetailBag.DiscardUnknown(m)
}

var xxx_messageInfo_SnmpCorrRulesetDetailBag proto.InternalMessageInfo

func (m *SnmpCorrRulesetDetailBag) GetRuleSetNameXr() string {
	if m != nil {
		return m.RuleSetNameXr
	}
	return ""
}

func (m *SnmpCorrRulesetDetailBag) GetRules() []*SnmpCorrRuleSummaryBag {
	if m != nil {
		return m.Rules
	}
	return nil
}

func init() {
	proto.RegisterType((*SnmpCorrRulesetDetailBag_KEYS)(nil), "cisco_ios_xr_snmp_agent_oper.snmp.correlator.rule_set_details.rule_set_detail.snmp_corr_ruleset_detail_bag_KEYS")
	proto.RegisterType((*SnmpCorrRuleSummaryBag)(nil), "cisco_ios_xr_snmp_agent_oper.snmp.correlator.rule_set_details.rule_set_detail.snmp_corr_rule_summary_bag")
	proto.RegisterType((*SnmpCorrRulesetDetailBag)(nil), "cisco_ios_xr_snmp_agent_oper.snmp.correlator.rule_set_details.rule_set_detail.snmp_corr_ruleset_detail_bag")
}

func init() { proto.RegisterFile("snmp_corr_ruleset_detail_bag.proto", fileDescriptor_ada6968f771e3c3b) }

var fileDescriptor_ada6968f771e3c3b = []byte{
	// 281 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x91, 0x4f, 0x4b, 0xc3, 0x40,
	0x10, 0xc5, 0x89, 0x45, 0xb1, 0x53, 0x02, 0xb2, 0x78, 0x08, 0xfe, 0x81, 0x98, 0x8b, 0x39, 0x2d,
	0xd2, 0x7e, 0x04, 0x11, 0x0f, 0xa2, 0x87, 0xc4, 0x83, 0x9e, 0x86, 0x4d, 0x3a, 0x2d, 0x81, 0x6c,
	0x36, 0xcc, 0x6e, 0xa0, 0x9e, 0xbc, 0xfb, 0xc9, 0xfc, 0x58, 0xb2, 0x5b, 0xd4, 0x56, 0xb0, 0xa7,
	0x1e, 0xf3, 0x5e, 0x7e, 0xef, 0xf1, 0x66, 0x21, 0xb3, 0x9d, 0xee, 0xb1, 0x36, 0xcc, 0xc8, 0x43,
	0x4b, 0x96, 0x1c, 0xce, 0xc9, 0xa9, 0xa6, 0xc5, 0x4a, 0x2d, 0x65, 0xcf, 0xc6, 0x19, 0xf1, 0x58,
	0x37, 0xb6, 0x36, 0xd8, 0x18, 0x8b, 0x2b, 0xc6, 0x00, 0xa8, 0x25, 0x75, 0x0e, 0x4d, 0x4f, 0x2c,
	0xfd, 0xb7, 0xf4, 0x01, 0xd4, 0x2a, 0x67, 0x58, 0xfa, 0x18, 0xfc, 0xcd, 0xb1, 0x7f, 0x85, 0xec,
	0x1e, 0xae, 0x76, 0x95, 0xe2, 0xc3, 0xdd, 0x6b, 0x29, 0x32, 0x88, 0x7f, 0xb8, 0x4e, 0x69, 0x4a,
	0xa2, 0x34, 0xca, 0xc7, 0xc5, 0xc4, 0x8b, 0x25, 0xb9, 0x27, 0xa5, 0x29, 0xfb, 0x88, 0xe0, 0x6c,
	0x3b, 0x09, 0xed, 0xa0, 0xb5, 0xe2, 0x37, 0x9f, 0x23, 0xce, 0x61, 0x1c, 0xb4, 0x0d, 0xfc, 0xd8,
	0x0b, 0x9e, 0x15, 0x97, 0x00, 0x6b, 0xc0, 0x29, 0x47, 0xc9, 0x41, 0x70, 0xc3, 0xef, 0xa5, 0x17,
	0xc4, 0x0d, 0x9c, 0x56, 0xc3, 0x62, 0x41, 0x4c, 0x73, 0x74, 0xac, 0x7a, 0x8b, 0xb5, 0x19, 0x3a,
	0x97, 0x8c, 0xd2, 0x28, 0x8f, 0x0b, 0xf1, 0xed, 0x3d, 0x7b, 0xeb, 0xd6, 0x3b, 0xd9, 0x67, 0x04,
	0x17, 0xbb, 0x66, 0x89, 0x6b, 0x38, 0xd9, 0x5a, 0x84, 0x2b, 0x4e, 0xa6, 0xa1, 0x37, 0xde, 0x18,
	0xf5, 0xc2, 0xe2, 0x1d, 0x0e, 0x03, 0x9e, 0xcc, 0xd2, 0x51, 0x3e, 0x99, 0x36, 0x72, 0xaf, 0xe7,
	0x97, 0xff, 0x5f, 0xac, 0x58, 0xf7, 0x56, 0x47, 0xe1, 0xd9, 0x67, 0x5f, 0x01, 0x00, 0x00, 0xff,
	0xff, 0x94, 0x28, 0xae, 0xaf, 0x1c, 0x02, 0x00, 0x00,
}
