/*
Copyright 2019 Cisco Systems

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: snmp_traps_info.proto

package cisco_ios_xr_snmp_agent_oper_snmp_information_trap_infos_trap_info

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type SnmpTrapsInfo_KEYS struct {
	TrapHost             string   `protobuf:"bytes,1,opt,name=trap_host,json=trapHost,proto3" json:"trap_host,omitempty"`
	Port                 uint32   `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SnmpTrapsInfo_KEYS) Reset()         { *m = SnmpTrapsInfo_KEYS{} }
func (m *SnmpTrapsInfo_KEYS) String() string { return proto.CompactTextString(m) }
func (*SnmpTrapsInfo_KEYS) ProtoMessage()    {}
func (*SnmpTrapsInfo_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8232c8f3baaf2bf, []int{0}
}

func (m *SnmpTrapsInfo_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SnmpTrapsInfo_KEYS.Unmarshal(m, b)
}
func (m *SnmpTrapsInfo_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SnmpTrapsInfo_KEYS.Marshal(b, m, deterministic)
}
func (m *SnmpTrapsInfo_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SnmpTrapsInfo_KEYS.Merge(m, src)
}
func (m *SnmpTrapsInfo_KEYS) XXX_Size() int {
	return xxx_messageInfo_SnmpTrapsInfo_KEYS.Size(m)
}
func (m *SnmpTrapsInfo_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_SnmpTrapsInfo_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_SnmpTrapsInfo_KEYS proto.InternalMessageInfo

func (m *SnmpTrapsInfo_KEYS) GetTrapHost() string {
	if m != nil {
		return m.TrapHost
	}
	return ""
}

func (m *SnmpTrapsInfo_KEYS) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

type SnmpTrapOidInfo struct {
	TrapOid              string   `protobuf:"bytes,1,opt,name=trap_oid,json=trapOid,proto3" json:"trap_oid,omitempty"`
	Count                uint32   `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	DropCount            uint32   `protobuf:"varint,3,opt,name=drop_count,json=dropCount,proto3" json:"drop_count,omitempty"`
	RetryCount           uint32   `protobuf:"varint,4,opt,name=retry_count,json=retryCount,proto3" json:"retry_count,omitempty"`
	LastsentTime         string   `protobuf:"bytes,5,opt,name=lastsent_time,json=lastsentTime,proto3" json:"lastsent_time,omitempty"`
	LasrdropTime         string   `protobuf:"bytes,6,opt,name=lasrdrop_time,json=lasrdropTime,proto3" json:"lasrdrop_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SnmpTrapOidInfo) Reset()         { *m = SnmpTrapOidInfo{} }
func (m *SnmpTrapOidInfo) String() string { return proto.CompactTextString(m) }
func (*SnmpTrapOidInfo) ProtoMessage()    {}
func (*SnmpTrapOidInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8232c8f3baaf2bf, []int{1}
}

func (m *SnmpTrapOidInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SnmpTrapOidInfo.Unmarshal(m, b)
}
func (m *SnmpTrapOidInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SnmpTrapOidInfo.Marshal(b, m, deterministic)
}
func (m *SnmpTrapOidInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SnmpTrapOidInfo.Merge(m, src)
}
func (m *SnmpTrapOidInfo) XXX_Size() int {
	return xxx_messageInfo_SnmpTrapOidInfo.Size(m)
}
func (m *SnmpTrapOidInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_SnmpTrapOidInfo.DiscardUnknown(m)
}

var xxx_messageInfo_SnmpTrapOidInfo proto.InternalMessageInfo

func (m *SnmpTrapOidInfo) GetTrapOid() string {
	if m != nil {
		return m.TrapOid
	}
	return ""
}

func (m *SnmpTrapOidInfo) GetCount() uint32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *SnmpTrapOidInfo) GetDropCount() uint32 {
	if m != nil {
		return m.DropCount
	}
	return 0
}

func (m *SnmpTrapOidInfo) GetRetryCount() uint32 {
	if m != nil {
		return m.RetryCount
	}
	return 0
}

func (m *SnmpTrapOidInfo) GetLastsentTime() string {
	if m != nil {
		return m.LastsentTime
	}
	return ""
}

func (m *SnmpTrapOidInfo) GetLasrdropTime() string {
	if m != nil {
		return m.LasrdropTime
	}
	return ""
}

type SnmpTrapsInfo struct {
	Host                 string             `protobuf:"bytes,50,opt,name=host,proto3" json:"host,omitempty"`
	PortXr               uint32             `protobuf:"varint,51,opt,name=port_xr,json=portXr,proto3" json:"port_xr,omitempty"`
	TrapOidCount         uint32             `protobuf:"varint,52,opt,name=trap_oid_count,json=trapOidCount,proto3" json:"trap_oid_count,omitempty"`
	TrapOiDinfo          []*SnmpTrapOidInfo `protobuf:"bytes,53,rep,name=trap_oi_dinfo,json=trapOiDinfo,proto3" json:"trap_oi_dinfo,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *SnmpTrapsInfo) Reset()         { *m = SnmpTrapsInfo{} }
func (m *SnmpTrapsInfo) String() string { return proto.CompactTextString(m) }
func (*SnmpTrapsInfo) ProtoMessage()    {}
func (*SnmpTrapsInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8232c8f3baaf2bf, []int{2}
}

func (m *SnmpTrapsInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SnmpTrapsInfo.Unmarshal(m, b)
}
func (m *SnmpTrapsInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SnmpTrapsInfo.Marshal(b, m, deterministic)
}
func (m *SnmpTrapsInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SnmpTrapsInfo.Merge(m, src)
}
func (m *SnmpTrapsInfo) XXX_Size() int {
	return xxx_messageInfo_SnmpTrapsInfo.Size(m)
}
func (m *SnmpTrapsInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_SnmpTrapsInfo.DiscardUnknown(m)
}

var xxx_messageInfo_SnmpTrapsInfo proto.InternalMessageInfo

func (m *SnmpTrapsInfo) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *SnmpTrapsInfo) GetPortXr() uint32 {
	if m != nil {
		return m.PortXr
	}
	return 0
}

func (m *SnmpTrapsInfo) GetTrapOidCount() uint32 {
	if m != nil {
		return m.TrapOidCount
	}
	return 0
}

func (m *SnmpTrapsInfo) GetTrapOiDinfo() []*SnmpTrapOidInfo {
	if m != nil {
		return m.TrapOiDinfo
	}
	return nil
}

func init() {
	proto.RegisterType((*SnmpTrapsInfo_KEYS)(nil), "cisco_ios_xr_snmp_agent_oper.snmp.information.trap_infos.trap_info.snmp_traps_info_KEYS")
	proto.RegisterType((*SnmpTrapOidInfo)(nil), "cisco_ios_xr_snmp_agent_oper.snmp.information.trap_infos.trap_info.snmp_trap_oid_info")
	proto.RegisterType((*SnmpTrapsInfo)(nil), "cisco_ios_xr_snmp_agent_oper.snmp.information.trap_infos.trap_info.snmp_traps_info")
}

func init() { proto.RegisterFile("snmp_traps_info.proto", fileDescriptor_e8232c8f3baaf2bf) }

var fileDescriptor_e8232c8f3baaf2bf = []byte{
	// 331 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x92, 0xcf, 0x4a, 0xc3, 0x40,
	0x10, 0xc6, 0x89, 0xfd, 0x3f, 0x6d, 0x15, 0x96, 0x8a, 0x11, 0x11, 0x4b, 0xf5, 0xd0, 0x53, 0x0e,
	0xad, 0xbe, 0x80, 0x7f, 0x50, 0xf0, 0x20, 0x54, 0x11, 0x3d, 0x2d, 0xb1, 0x89, 0xba, 0x60, 0x32,
	0xcb, 0xec, 0x0a, 0xd5, 0x97, 0xf4, 0x15, 0x7c, 0x14, 0x99, 0xd9, 0xb4, 0x42, 0x3d, 0x7a, 0xdb,
	0xf9, 0xbe, 0xdf, 0xce, 0x4c, 0xbe, 0x0d, 0x6c, 0xbb, 0xb2, 0xb0, 0xda, 0x53, 0x6a, 0x9d, 0x36,
	0xe5, 0x33, 0x26, 0x96, 0xd0, 0xa3, 0x3a, 0x9d, 0x1b, 0x37, 0x47, 0x6d, 0xd0, 0xe9, 0x05, 0x69,
	0x61, 0xd2, 0x97, 0xbc, 0xf4, 0x1a, 0x6d, 0x4e, 0x09, 0xd7, 0x09, 0xd3, 0x54, 0xa4, 0xde, 0x60,
	0x99, 0xf0, 0x7d, 0xb9, 0xee, 0x7e, 0x8f, 0xa3, 0x4b, 0x18, 0xac, 0x35, 0xd7, 0xd7, 0x17, 0x8f,
	0xb7, 0x6a, 0x0f, 0x3a, 0x02, 0xbd, 0xa2, 0xf3, 0x71, 0x34, 0x8c, 0xc6, 0x9d, 0x59, 0x9b, 0x85,
	0x2b, 0x74, 0x5e, 0x29, 0xa8, 0x5b, 0x24, 0x1f, 0x6f, 0x0c, 0xa3, 0x71, 0x7f, 0x26, 0xe7, 0xd1,
	0x57, 0x04, 0x6a, 0xd5, 0x49, 0xa3, 0xc9, 0xa4, 0x99, 0xda, 0x85, 0xf6, 0x52, 0xa8, 0xda, 0xb4,
	0xb8, 0xbe, 0x31, 0x99, 0x1a, 0x40, 0x63, 0x8e, 0xef, 0xe5, 0xb2, 0x4d, 0x28, 0xd4, 0x3e, 0x40,
	0x46, 0x68, 0x75, 0xb0, 0x6a, 0x62, 0x75, 0x58, 0x39, 0x13, 0xfb, 0x00, 0xba, 0x94, 0x7b, 0xfa,
	0xa8, 0xfc, 0xba, 0xf8, 0x20, 0x52, 0x00, 0x0e, 0xa1, 0xff, 0x96, 0x3a, 0xef, 0x38, 0x07, 0x6f,
	0x8a, 0x3c, 0x6e, 0xc8, 0xd4, 0xde, 0x52, 0xbc, 0x33, 0x45, 0x5e, 0x41, 0x24, 0x83, 0x04, 0x6a,
	0xae, 0x20, 0x11, 0x19, 0x1a, 0x7d, 0x47, 0xb0, 0xb5, 0x96, 0x0d, 0x7f, 0xb9, 0x24, 0x32, 0x11,
	0x5e, 0xce, 0x6a, 0x07, 0x5a, 0x9c, 0x80, 0x5e, 0x50, 0x3c, 0x95, 0x75, 0x9a, 0x5c, 0x3e, 0x90,
	0x3a, 0x82, 0xcd, 0x55, 0x18, 0x61, 0xdd, 0x63, 0xf1, 0x7b, 0x55, 0x02, 0x61, 0xe1, 0x4f, 0xe8,
	0x57, 0x94, 0xce, 0x78, 0x46, 0x7c, 0x32, 0xac, 0x8d, 0xbb, 0x93, 0xfb, 0xe4, 0xff, 0xaf, 0x9b,
	0xfc, 0x7d, 0x90, 0x59, 0x37, 0x0c, 0x3f, 0xe7, 0xe2, 0xa9, 0x29, 0x3f, 0xd2, 0xf4, 0x27, 0x00,
	0x00, 0xff, 0xff, 0x78, 0x35, 0x0c, 0x94, 0x61, 0x02, 0x00, 0x00,
}
