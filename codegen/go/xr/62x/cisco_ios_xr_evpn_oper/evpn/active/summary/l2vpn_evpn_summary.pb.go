/*
Copyright 2019 Cisco Systems

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: l2vpn_evpn_summary.proto

package cisco_ios_xr_evpn_oper_evpn_active_summary

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type L2VpnEvpnSummary_KEYS struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *L2VpnEvpnSummary_KEYS) Reset()         { *m = L2VpnEvpnSummary_KEYS{} }
func (m *L2VpnEvpnSummary_KEYS) String() string { return proto.CompactTextString(m) }
func (*L2VpnEvpnSummary_KEYS) ProtoMessage()    {}
func (*L2VpnEvpnSummary_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_72de969c177b02cc, []int{0}
}

func (m *L2VpnEvpnSummary_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2VpnEvpnSummary_KEYS.Unmarshal(m, b)
}
func (m *L2VpnEvpnSummary_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2VpnEvpnSummary_KEYS.Marshal(b, m, deterministic)
}
func (m *L2VpnEvpnSummary_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2VpnEvpnSummary_KEYS.Merge(m, src)
}
func (m *L2VpnEvpnSummary_KEYS) XXX_Size() int {
	return xxx_messageInfo_L2VpnEvpnSummary_KEYS.Size(m)
}
func (m *L2VpnEvpnSummary_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_L2VpnEvpnSummary_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_L2VpnEvpnSummary_KEYS proto.InternalMessageInfo

type L2VpnEvpnSummary struct {
	RouterId                 string   `protobuf:"bytes,50,opt,name=router_id,json=routerId,proto3" json:"router_id,omitempty"`
	As                       uint32   `protobuf:"varint,51,opt,name=as,proto3" json:"as,omitempty"`
	EvIs                     uint32   `protobuf:"varint,52,opt,name=ev_is,json=evIs,proto3" json:"ev_is,omitempty"`
	LocalMacRoutes           uint32   `protobuf:"varint,53,opt,name=local_mac_routes,json=localMacRoutes,proto3" json:"local_mac_routes,omitempty"`
	LocalIpv4MacRoutes       uint32   `protobuf:"varint,54,opt,name=local_ipv4_mac_routes,json=localIpv4MacRoutes,proto3" json:"local_ipv4_mac_routes,omitempty"`
	LocalIpv6MacRoutes       uint32   `protobuf:"varint,55,opt,name=local_ipv6_mac_routes,json=localIpv6MacRoutes,proto3" json:"local_ipv6_mac_routes,omitempty"`
	EsGlobalMacRoutes        uint32   `protobuf:"varint,56,opt,name=es_global_mac_routes,json=esGlobalMacRoutes,proto3" json:"es_global_mac_routes,omitempty"`
	RemoteMacRoutes          uint32   `protobuf:"varint,57,opt,name=remote_mac_routes,json=remoteMacRoutes,proto3" json:"remote_mac_routes,omitempty"`
	RemoteSooMacRoutes       uint32   `protobuf:"varint,58,opt,name=remote_soo_mac_routes,json=remoteSooMacRoutes,proto3" json:"remote_soo_mac_routes,omitempty"`
	RemoteIpv4MacRoutes      uint32   `protobuf:"varint,59,opt,name=remote_ipv4_mac_routes,json=remoteIpv4MacRoutes,proto3" json:"remote_ipv4_mac_routes,omitempty"`
	RemoteIpv6MacRoutes      uint32   `protobuf:"varint,60,opt,name=remote_ipv6_mac_routes,json=remoteIpv6MacRoutes,proto3" json:"remote_ipv6_mac_routes,omitempty"`
	LocalImcastRoutes        uint32   `protobuf:"varint,61,opt,name=local_imcast_routes,json=localImcastRoutes,proto3" json:"local_imcast_routes,omitempty"`
	RemoteImcastRoutes       uint32   `protobuf:"varint,62,opt,name=remote_imcast_routes,json=remoteImcastRoutes,proto3" json:"remote_imcast_routes,omitempty"`
	Labels                   uint32   `protobuf:"varint,63,opt,name=labels,proto3" json:"labels,omitempty"`
	EsEntries                uint32   `protobuf:"varint,64,opt,name=es_entries,json=esEntries,proto3" json:"es_entries,omitempty"`
	NeighborEntries          uint32   `protobuf:"varint,65,opt,name=neighbor_entries,json=neighborEntries,proto3" json:"neighbor_entries,omitempty"`
	LocalEadRoutes           uint32   `protobuf:"varint,66,opt,name=local_ead_routes,json=localEadRoutes,proto3" json:"local_ead_routes,omitempty"`
	RemoteEadRoutes          uint32   `protobuf:"varint,67,opt,name=remote_ead_routes,json=remoteEadRoutes,proto3" json:"remote_ead_routes,omitempty"`
	GlobalSourceMac          string   `protobuf:"bytes,68,opt,name=global_source_mac,json=globalSourceMac,proto3" json:"global_source_mac,omitempty"`
	PeeringTime              uint32   `protobuf:"varint,69,opt,name=peering_time,json=peeringTime,proto3" json:"peering_time,omitempty"`
	RecoveryTime             uint32   `protobuf:"varint,70,opt,name=recovery_time,json=recoveryTime,proto3" json:"recovery_time,omitempty"`
	L2RibThrottle            bool     `protobuf:"varint,71,opt,name=l2rib_throttle,json=l2ribThrottle,proto3" json:"l2rib_throttle,omitempty"`
	LoggingDfElectionEnabled bool     `protobuf:"varint,72,opt,name=logging_df_election_enabled,json=loggingDfElectionEnabled,proto3" json:"logging_df_election_enabled,omitempty"`
	XXX_NoUnkeyedLiteral     struct{} `json:"-"`
	XXX_unrecognized         []byte   `json:"-"`
	XXX_sizecache            int32    `json:"-"`
}

func (m *L2VpnEvpnSummary) Reset()         { *m = L2VpnEvpnSummary{} }
func (m *L2VpnEvpnSummary) String() string { return proto.CompactTextString(m) }
func (*L2VpnEvpnSummary) ProtoMessage()    {}
func (*L2VpnEvpnSummary) Descriptor() ([]byte, []int) {
	return fileDescriptor_72de969c177b02cc, []int{1}
}

func (m *L2VpnEvpnSummary) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2VpnEvpnSummary.Unmarshal(m, b)
}
func (m *L2VpnEvpnSummary) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2VpnEvpnSummary.Marshal(b, m, deterministic)
}
func (m *L2VpnEvpnSummary) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2VpnEvpnSummary.Merge(m, src)
}
func (m *L2VpnEvpnSummary) XXX_Size() int {
	return xxx_messageInfo_L2VpnEvpnSummary.Size(m)
}
func (m *L2VpnEvpnSummary) XXX_DiscardUnknown() {
	xxx_messageInfo_L2VpnEvpnSummary.DiscardUnknown(m)
}

var xxx_messageInfo_L2VpnEvpnSummary proto.InternalMessageInfo

func (m *L2VpnEvpnSummary) GetRouterId() string {
	if m != nil {
		return m.RouterId
	}
	return ""
}

func (m *L2VpnEvpnSummary) GetAs() uint32 {
	if m != nil {
		return m.As
	}
	return 0
}

func (m *L2VpnEvpnSummary) GetEvIs() uint32 {
	if m != nil {
		return m.EvIs
	}
	return 0
}

func (m *L2VpnEvpnSummary) GetLocalMacRoutes() uint32 {
	if m != nil {
		return m.LocalMacRoutes
	}
	return 0
}

func (m *L2VpnEvpnSummary) GetLocalIpv4MacRoutes() uint32 {
	if m != nil {
		return m.LocalIpv4MacRoutes
	}
	return 0
}

func (m *L2VpnEvpnSummary) GetLocalIpv6MacRoutes() uint32 {
	if m != nil {
		return m.LocalIpv6MacRoutes
	}
	return 0
}

func (m *L2VpnEvpnSummary) GetEsGlobalMacRoutes() uint32 {
	if m != nil {
		return m.EsGlobalMacRoutes
	}
	return 0
}

func (m *L2VpnEvpnSummary) GetRemoteMacRoutes() uint32 {
	if m != nil {
		return m.RemoteMacRoutes
	}
	return 0
}

func (m *L2VpnEvpnSummary) GetRemoteSooMacRoutes() uint32 {
	if m != nil {
		return m.RemoteSooMacRoutes
	}
	return 0
}

func (m *L2VpnEvpnSummary) GetRemoteIpv4MacRoutes() uint32 {
	if m != nil {
		return m.RemoteIpv4MacRoutes
	}
	return 0
}

func (m *L2VpnEvpnSummary) GetRemoteIpv6MacRoutes() uint32 {
	if m != nil {
		return m.RemoteIpv6MacRoutes
	}
	return 0
}

func (m *L2VpnEvpnSummary) GetLocalImcastRoutes() uint32 {
	if m != nil {
		return m.LocalImcastRoutes
	}
	return 0
}

func (m *L2VpnEvpnSummary) GetRemoteImcastRoutes() uint32 {
	if m != nil {
		return m.RemoteImcastRoutes
	}
	return 0
}

func (m *L2VpnEvpnSummary) GetLabels() uint32 {
	if m != nil {
		return m.Labels
	}
	return 0
}

func (m *L2VpnEvpnSummary) GetEsEntries() uint32 {
	if m != nil {
		return m.EsEntries
	}
	return 0
}

func (m *L2VpnEvpnSummary) GetNeighborEntries() uint32 {
	if m != nil {
		return m.NeighborEntries
	}
	return 0
}

func (m *L2VpnEvpnSummary) GetLocalEadRoutes() uint32 {
	if m != nil {
		return m.LocalEadRoutes
	}
	return 0
}

func (m *L2VpnEvpnSummary) GetRemoteEadRoutes() uint32 {
	if m != nil {
		return m.RemoteEadRoutes
	}
	return 0
}

func (m *L2VpnEvpnSummary) GetGlobalSourceMac() string {
	if m != nil {
		return m.GlobalSourceMac
	}
	return ""
}

func (m *L2VpnEvpnSummary) GetPeeringTime() uint32 {
	if m != nil {
		return m.PeeringTime
	}
	return 0
}

func (m *L2VpnEvpnSummary) GetRecoveryTime() uint32 {
	if m != nil {
		return m.RecoveryTime
	}
	return 0
}

func (m *L2VpnEvpnSummary) GetL2RibThrottle() bool {
	if m != nil {
		return m.L2RibThrottle
	}
	return false
}

func (m *L2VpnEvpnSummary) GetLoggingDfElectionEnabled() bool {
	if m != nil {
		return m.LoggingDfElectionEnabled
	}
	return false
}

func init() {
	proto.RegisterType((*L2VpnEvpnSummary_KEYS)(nil), "cisco_ios_xr_evpn_oper.evpn.active.summary.l2vpn_evpn_summary_KEYS")
	proto.RegisterType((*L2VpnEvpnSummary)(nil), "cisco_ios_xr_evpn_oper.evpn.active.summary.l2vpn_evpn_summary")
}

func init() { proto.RegisterFile("l2vpn_evpn_summary.proto", fileDescriptor_72de969c177b02cc) }

var fileDescriptor_72de969c177b02cc = []byte{
	// 517 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x94, 0x5d, 0x6f, 0xd3, 0x30,
	0x14, 0x86, 0xd5, 0x09, 0xc6, 0x6a, 0xd6, 0x6e, 0x73, 0xc7, 0x30, 0x9a, 0x90, 0xca, 0x10, 0x52,
	0xd9, 0x45, 0x81, 0xb6, 0x94, 0xcf, 0xf1, 0xb9, 0x30, 0x2a, 0xb4, 0x9b, 0x76, 0x37, 0x5c, 0x59,
	0x4e, 0x72, 0xd6, 0x59, 0x4a, 0xe2, 0xc8, 0x76, 0x23, 0xf6, 0x3f, 0xf9, 0x41, 0xa8, 0xc7, 0xce,
	0x9a, 0xac, 0xdc, 0x54, 0xed, 0xfb, 0x3e, 0x4f, 0xe2, 0x63, 0x5b, 0x25, 0x2c, 0x19, 0x14, 0x79,
	0xc6, 0x61, 0xf9, 0x61, 0x16, 0x69, 0x2a, 0xf4, 0x75, 0x3f, 0xd7, 0xca, 0x2a, 0x7a, 0x1c, 0x49,
	0x13, 0x29, 0x2e, 0x95, 0xe1, 0x7f, 0xb4, 0x03, 0x54, 0x0e, 0xba, 0xbf, 0xfc, 0xd6, 0x17, 0x91,
	0x95, 0x05, 0xf4, 0xbd, 0x71, 0xf4, 0x88, 0x3c, 0x5c, 0x7f, 0x0e, 0xff, 0x15, 0xfc, 0x9e, 0x1d,
	0xfd, 0xbd, 0x47, 0xe8, 0x7a, 0x47, 0x0f, 0x49, 0x53, 0xab, 0x85, 0x05, 0xcd, 0x65, 0xcc, 0x06,
	0xdd, 0x46, 0xaf, 0x39, 0xdd, 0x72, 0xc1, 0x24, 0xa6, 0x6d, 0xb2, 0x21, 0x0c, 0x1b, 0x76, 0x1b,
	0xbd, 0xd6, 0x74, 0x43, 0x18, 0xda, 0x21, 0x77, 0xa1, 0xe0, 0xd2, 0xb0, 0x11, 0x46, 0x77, 0xa0,
	0x98, 0x18, 0xda, 0x23, 0xbb, 0x89, 0x8a, 0x44, 0xc2, 0x53, 0x11, 0x71, 0x54, 0x0d, 0x7b, 0x8d,
	0x7d, 0x1b, 0xf3, 0x73, 0x11, 0x4d, 0x31, 0xa5, 0xaf, 0xc8, 0x03, 0x47, 0xca, 0xbc, 0x18, 0x55,
	0xf1, 0x31, 0xe2, 0x14, 0xcb, 0x49, 0x5e, 0x8c, 0xfe, 0xaf, 0x8c, 0xab, 0xca, 0x9b, 0xba, 0x32,
	0x5e, 0x29, 0x2f, 0xc8, 0x3e, 0x18, 0x3e, 0x4f, 0x54, 0x58, 0x5f, 0xd3, 0x5b, 0x34, 0xf6, 0xc0,
	0x9c, 0x61, 0xb5, 0x12, 0x8e, 0xc9, 0x9e, 0x86, 0x54, 0x59, 0xa8, 0xd2, 0xef, 0x90, 0xde, 0x71,
	0x45, 0x6d, 0x3d, 0x9e, 0x35, 0x4a, 0x55, 0xf9, 0xf7, 0x6e, 0x3d, 0xae, 0x9c, 0x29, 0xb5, 0x52,
	0x86, 0xe4, 0xc0, 0x2b, 0xb7, 0xc7, 0xfe, 0x80, 0x4e, 0xc7, 0xb5, 0xf5, 0xb9, 0x6b, 0x52, 0x6d,
	0xf0, 0x8f, 0xb7, 0xa4, 0xca, 0xe4, 0x7d, 0xd2, 0xf1, 0x9b, 0x95, 0x46, 0xc2, 0xd8, 0xd2, 0x38,
	0x71, 0x83, 0xbb, 0xad, 0xc2, 0xc6, 0xf3, 0x2f, 0xc9, 0x7e, 0xf9, 0x92, 0x9a, 0xf0, 0xa9, 0x3a,
	0x4b, 0xcd, 0x38, 0x20, 0x9b, 0x89, 0x08, 0x21, 0x31, 0xec, 0x33, 0x32, 0xfe, 0x17, 0x7d, 0x4c,
	0x08, 0x18, 0x0e, 0x99, 0xd5, 0x12, 0x0c, 0xfb, 0x82, 0x5d, 0x13, 0x4c, 0xe0, 0x02, 0xfa, 0x9c,
	0xec, 0x66, 0x20, 0xe7, 0x57, 0xa1, 0xd2, 0x37, 0xd0, 0x57, 0xb7, 0xc1, 0x65, 0x5e, 0xa2, 0x37,
	0xb7, 0x09, 0x44, 0x5c, 0xae, 0xe7, 0x5b, 0xe5, 0x36, 0x05, 0x22, 0x5e, 0x3b, 0xb6, 0x0a, 0xfa,
	0xbd, 0x7a, 0x6c, 0x35, 0xd6, 0x5f, 0x08, 0xa3, 0x16, 0x3a, 0xc2, 0x93, 0x66, 0xa7, 0x78, 0xdb,
	0x77, 0x5c, 0x31, 0xc3, 0xfc, 0x5c, 0x44, 0xf4, 0x09, 0xd9, 0xce, 0x01, 0xb4, 0xcc, 0xe6, 0xdc,
	0xca, 0x14, 0x58, 0x80, 0x8f, 0xbc, 0xef, 0xb3, 0x0b, 0x99, 0x02, 0x7d, 0x4a, 0x5a, 0x1a, 0x22,
	0x55, 0x80, 0xbe, 0x76, 0xcc, 0x0f, 0x64, 0xb6, 0xcb, 0x10, 0xa1, 0x67, 0xa4, 0x9d, 0x0c, 0xb4,
	0x0c, 0xb9, 0xbd, 0xd2, 0xca, 0xda, 0x04, 0xd8, 0x59, 0xb7, 0xd1, 0xdb, 0x9a, 0xb6, 0x30, 0xbd,
	0xf0, 0x21, 0x3d, 0x21, 0x87, 0x89, 0x9a, 0xcf, 0x97, 0xaf, 0x8b, 0x2f, 0x39, 0x24, 0x10, 0x59,
	0xa9, 0x32, 0x0e, 0x99, 0x08, 0x13, 0x88, 0xd9, 0x4f, 0x74, 0x98, 0x47, 0x4e, 0x2f, 0x03, 0x0f,
	0x04, 0xae, 0x0f, 0x37, 0xf1, 0x4f, 0x62, 0xf8, 0x2f, 0x00, 0x00, 0xff, 0xff, 0x33, 0xd5, 0xf7,
	0x5d, 0x40, 0x04, 0x00, 0x00,
}
