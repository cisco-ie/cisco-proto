/*
Copyright 2019 Cisco Systems

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: optics_edm_info.proto

package cisco_ios_xr_controller_optics_oper_optics_oper_optics_ports_optics_port_optics_info

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type OpticsEdmInfo_KEYS struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OpticsEdmInfo_KEYS) Reset()         { *m = OpticsEdmInfo_KEYS{} }
func (m *OpticsEdmInfo_KEYS) String() string { return proto.CompactTextString(m) }
func (*OpticsEdmInfo_KEYS) ProtoMessage()    {}
func (*OpticsEdmInfo_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c9721f0da9c660c, []int{0}
}

func (m *OpticsEdmInfo_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OpticsEdmInfo_KEYS.Unmarshal(m, b)
}
func (m *OpticsEdmInfo_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OpticsEdmInfo_KEYS.Marshal(b, m, deterministic)
}
func (m *OpticsEdmInfo_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OpticsEdmInfo_KEYS.Merge(m, src)
}
func (m *OpticsEdmInfo_KEYS) XXX_Size() int {
	return xxx_messageInfo_OpticsEdmInfo_KEYS.Size(m)
}
func (m *OpticsEdmInfo_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_OpticsEdmInfo_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_OpticsEdmInfo_KEYS proto.InternalMessageInfo

func (m *OpticsEdmInfo_KEYS) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type OpticsEdmNetworkSrlgStructure struct {
	SetNumber            uint32   `protobuf:"varint,1,opt,name=set_number,json=setNumber,proto3" json:"set_number,omitempty"`
	NetworkSrlg          []uint32 `protobuf:"varint,2,rep,packed,name=network_srlg,json=networkSrlg,proto3" json:"network_srlg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OpticsEdmNetworkSrlgStructure) Reset()         { *m = OpticsEdmNetworkSrlgStructure{} }
func (m *OpticsEdmNetworkSrlgStructure) String() string { return proto.CompactTextString(m) }
func (*OpticsEdmNetworkSrlgStructure) ProtoMessage()    {}
func (*OpticsEdmNetworkSrlgStructure) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c9721f0da9c660c, []int{1}
}

func (m *OpticsEdmNetworkSrlgStructure) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OpticsEdmNetworkSrlgStructure.Unmarshal(m, b)
}
func (m *OpticsEdmNetworkSrlgStructure) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OpticsEdmNetworkSrlgStructure.Marshal(b, m, deterministic)
}
func (m *OpticsEdmNetworkSrlgStructure) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OpticsEdmNetworkSrlgStructure.Merge(m, src)
}
func (m *OpticsEdmNetworkSrlgStructure) XXX_Size() int {
	return xxx_messageInfo_OpticsEdmNetworkSrlgStructure.Size(m)
}
func (m *OpticsEdmNetworkSrlgStructure) XXX_DiscardUnknown() {
	xxx_messageInfo_OpticsEdmNetworkSrlgStructure.DiscardUnknown(m)
}

var xxx_messageInfo_OpticsEdmNetworkSrlgStructure proto.InternalMessageInfo

func (m *OpticsEdmNetworkSrlgStructure) GetSetNumber() uint32 {
	if m != nil {
		return m.SetNumber
	}
	return 0
}

func (m *OpticsEdmNetworkSrlgStructure) GetNetworkSrlg() []uint32 {
	if m != nil {
		return m.NetworkSrlg
	}
	return nil
}

type OpticsEdmNetworkSrlgInfo struct {
	NetworkSrlgArray     []*OpticsEdmNetworkSrlgStructure `protobuf:"bytes,1,rep,name=network_srlg_array,json=networkSrlgArray,proto3" json:"network_srlg_array,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                         `json:"-"`
	XXX_unrecognized     []byte                           `json:"-"`
	XXX_sizecache        int32                            `json:"-"`
}

func (m *OpticsEdmNetworkSrlgInfo) Reset()         { *m = OpticsEdmNetworkSrlgInfo{} }
func (m *OpticsEdmNetworkSrlgInfo) String() string { return proto.CompactTextString(m) }
func (*OpticsEdmNetworkSrlgInfo) ProtoMessage()    {}
func (*OpticsEdmNetworkSrlgInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c9721f0da9c660c, []int{2}
}

func (m *OpticsEdmNetworkSrlgInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OpticsEdmNetworkSrlgInfo.Unmarshal(m, b)
}
func (m *OpticsEdmNetworkSrlgInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OpticsEdmNetworkSrlgInfo.Marshal(b, m, deterministic)
}
func (m *OpticsEdmNetworkSrlgInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OpticsEdmNetworkSrlgInfo.Merge(m, src)
}
func (m *OpticsEdmNetworkSrlgInfo) XXX_Size() int {
	return xxx_messageInfo_OpticsEdmNetworkSrlgInfo.Size(m)
}
func (m *OpticsEdmNetworkSrlgInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_OpticsEdmNetworkSrlgInfo.DiscardUnknown(m)
}

var xxx_messageInfo_OpticsEdmNetworkSrlgInfo proto.InternalMessageInfo

func (m *OpticsEdmNetworkSrlgInfo) GetNetworkSrlgArray() []*OpticsEdmNetworkSrlgStructure {
	if m != nil {
		return m.NetworkSrlgArray
	}
	return nil
}

type LaneAlarmDetail struct {
	IsDetected           bool     `protobuf:"varint,1,opt,name=is_detected,json=isDetected,proto3" json:"is_detected,omitempty"`
	Counter              uint32   `protobuf:"varint,2,opt,name=counter,proto3" json:"counter,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LaneAlarmDetail) Reset()         { *m = LaneAlarmDetail{} }
func (m *LaneAlarmDetail) String() string { return proto.CompactTextString(m) }
func (*LaneAlarmDetail) ProtoMessage()    {}
func (*LaneAlarmDetail) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c9721f0da9c660c, []int{3}
}

func (m *LaneAlarmDetail) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LaneAlarmDetail.Unmarshal(m, b)
}
func (m *LaneAlarmDetail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LaneAlarmDetail.Marshal(b, m, deterministic)
}
func (m *LaneAlarmDetail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LaneAlarmDetail.Merge(m, src)
}
func (m *LaneAlarmDetail) XXX_Size() int {
	return xxx_messageInfo_LaneAlarmDetail.Size(m)
}
func (m *LaneAlarmDetail) XXX_DiscardUnknown() {
	xxx_messageInfo_LaneAlarmDetail.DiscardUnknown(m)
}

var xxx_messageInfo_LaneAlarmDetail proto.InternalMessageInfo

func (m *LaneAlarmDetail) GetIsDetected() bool {
	if m != nil {
		return m.IsDetected
	}
	return false
}

func (m *LaneAlarmDetail) GetCounter() uint32 {
	if m != nil {
		return m.Counter
	}
	return 0
}

type LaneEdmAlarmInfo struct {
	HighRxPower          *LaneAlarmDetail `protobuf:"bytes,1,opt,name=high_rx_power,json=highRxPower,proto3" json:"high_rx_power,omitempty"`
	LowRxPower           *LaneAlarmDetail `protobuf:"bytes,2,opt,name=low_rx_power,json=lowRxPower,proto3" json:"low_rx_power,omitempty"`
	HighTxPower          *LaneAlarmDetail `protobuf:"bytes,3,opt,name=high_tx_power,json=highTxPower,proto3" json:"high_tx_power,omitempty"`
	LowTxPower           *LaneAlarmDetail `protobuf:"bytes,4,opt,name=low_tx_power,json=lowTxPower,proto3" json:"low_tx_power,omitempty"`
	HighLbc              *LaneAlarmDetail `protobuf:"bytes,5,opt,name=high_lbc,json=highLbc,proto3" json:"high_lbc,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *LaneEdmAlarmInfo) Reset()         { *m = LaneEdmAlarmInfo{} }
func (m *LaneEdmAlarmInfo) String() string { return proto.CompactTextString(m) }
func (*LaneEdmAlarmInfo) ProtoMessage()    {}
func (*LaneEdmAlarmInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c9721f0da9c660c, []int{4}
}

func (m *LaneEdmAlarmInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LaneEdmAlarmInfo.Unmarshal(m, b)
}
func (m *LaneEdmAlarmInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LaneEdmAlarmInfo.Marshal(b, m, deterministic)
}
func (m *LaneEdmAlarmInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LaneEdmAlarmInfo.Merge(m, src)
}
func (m *LaneEdmAlarmInfo) XXX_Size() int {
	return xxx_messageInfo_LaneEdmAlarmInfo.Size(m)
}
func (m *LaneEdmAlarmInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_LaneEdmAlarmInfo.DiscardUnknown(m)
}

var xxx_messageInfo_LaneEdmAlarmInfo proto.InternalMessageInfo

func (m *LaneEdmAlarmInfo) GetHighRxPower() *LaneAlarmDetail {
	if m != nil {
		return m.HighRxPower
	}
	return nil
}

func (m *LaneEdmAlarmInfo) GetLowRxPower() *LaneAlarmDetail {
	if m != nil {
		return m.LowRxPower
	}
	return nil
}

func (m *LaneEdmAlarmInfo) GetHighTxPower() *LaneAlarmDetail {
	if m != nil {
		return m.HighTxPower
	}
	return nil
}

func (m *LaneEdmAlarmInfo) GetLowTxPower() *LaneAlarmDetail {
	if m != nil {
		return m.LowTxPower
	}
	return nil
}

func (m *LaneEdmAlarmInfo) GetHighLbc() *LaneAlarmDetail {
	if m != nil {
		return m.HighLbc
	}
	return nil
}

type OpticsEdmLaneData struct {
	LaneIndex                 uint32            `protobuf:"varint,1,opt,name=lane_index,json=laneIndex,proto3" json:"lane_index,omitempty"`
	LaserBiasCurrentPercent   uint32            `protobuf:"varint,2,opt,name=laser_bias_current_percent,json=laserBiasCurrentPercent,proto3" json:"laser_bias_current_percent,omitempty"`
	LaserBiasCurrentMilliAmps uint32            `protobuf:"varint,3,opt,name=laser_bias_current_milli_amps,json=laserBiasCurrentMilliAmps,proto3" json:"laser_bias_current_milli_amps,omitempty"`
	TransmitPower             int32             `protobuf:"zigzag32,4,opt,name=transmit_power,json=transmitPower,proto3" json:"transmit_power,omitempty"`
	ReceivePower              int32             `protobuf:"zigzag32,5,opt,name=receive_power,json=receivePower,proto3" json:"receive_power,omitempty"`
	ReceiveSignalPower        int32             `protobuf:"zigzag32,6,opt,name=receive_signal_power,json=receiveSignalPower,proto3" json:"receive_signal_power,omitempty"`
	TransmitSignalPower       int32             `protobuf:"zigzag32,7,opt,name=transmit_signal_power,json=transmitSignalPower,proto3" json:"transmit_signal_power,omitempty"`
	OutputFrequency           int32             `protobuf:"zigzag32,8,opt,name=output_frequency,json=outputFrequency,proto3" json:"output_frequency,omitempty"`
	LaneAlarmInfo             *LaneEdmAlarmInfo `protobuf:"bytes,9,opt,name=lane_alarm_info,json=laneAlarmInfo,proto3" json:"lane_alarm_info,omitempty"`
	XXX_NoUnkeyedLiteral      struct{}          `json:"-"`
	XXX_unrecognized          []byte            `json:"-"`
	XXX_sizecache             int32             `json:"-"`
}

func (m *OpticsEdmLaneData) Reset()         { *m = OpticsEdmLaneData{} }
func (m *OpticsEdmLaneData) String() string { return proto.CompactTextString(m) }
func (*OpticsEdmLaneData) ProtoMessage()    {}
func (*OpticsEdmLaneData) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c9721f0da9c660c, []int{5}
}

func (m *OpticsEdmLaneData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OpticsEdmLaneData.Unmarshal(m, b)
}
func (m *OpticsEdmLaneData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OpticsEdmLaneData.Marshal(b, m, deterministic)
}
func (m *OpticsEdmLaneData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OpticsEdmLaneData.Merge(m, src)
}
func (m *OpticsEdmLaneData) XXX_Size() int {
	return xxx_messageInfo_OpticsEdmLaneData.Size(m)
}
func (m *OpticsEdmLaneData) XXX_DiscardUnknown() {
	xxx_messageInfo_OpticsEdmLaneData.DiscardUnknown(m)
}

var xxx_messageInfo_OpticsEdmLaneData proto.InternalMessageInfo

func (m *OpticsEdmLaneData) GetLaneIndex() uint32 {
	if m != nil {
		return m.LaneIndex
	}
	return 0
}

func (m *OpticsEdmLaneData) GetLaserBiasCurrentPercent() uint32 {
	if m != nil {
		return m.LaserBiasCurrentPercent
	}
	return 0
}

func (m *OpticsEdmLaneData) GetLaserBiasCurrentMilliAmps() uint32 {
	if m != nil {
		return m.LaserBiasCurrentMilliAmps
	}
	return 0
}

func (m *OpticsEdmLaneData) GetTransmitPower() int32 {
	if m != nil {
		return m.TransmitPower
	}
	return 0
}

func (m *OpticsEdmLaneData) GetReceivePower() int32 {
	if m != nil {
		return m.ReceivePower
	}
	return 0
}

func (m *OpticsEdmLaneData) GetReceiveSignalPower() int32 {
	if m != nil {
		return m.ReceiveSignalPower
	}
	return 0
}

func (m *OpticsEdmLaneData) GetTransmitSignalPower() int32 {
	if m != nil {
		return m.TransmitSignalPower
	}
	return 0
}

func (m *OpticsEdmLaneData) GetOutputFrequency() int32 {
	if m != nil {
		return m.OutputFrequency
	}
	return 0
}

func (m *OpticsEdmLaneData) GetLaneAlarmInfo() *LaneEdmAlarmInfo {
	if m != nil {
		return m.LaneAlarmInfo
	}
	return nil
}

type OpticsAlarmDetail struct {
	IsDetected           bool     `protobuf:"varint,1,opt,name=is_detected,json=isDetected,proto3" json:"is_detected,omitempty"`
	Counter              uint32   `protobuf:"varint,2,opt,name=counter,proto3" json:"counter,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OpticsAlarmDetail) Reset()         { *m = OpticsAlarmDetail{} }
func (m *OpticsAlarmDetail) String() string { return proto.CompactTextString(m) }
func (*OpticsAlarmDetail) ProtoMessage()    {}
func (*OpticsAlarmDetail) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c9721f0da9c660c, []int{6}
}

func (m *OpticsAlarmDetail) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OpticsAlarmDetail.Unmarshal(m, b)
}
func (m *OpticsAlarmDetail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OpticsAlarmDetail.Marshal(b, m, deterministic)
}
func (m *OpticsAlarmDetail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OpticsAlarmDetail.Merge(m, src)
}
func (m *OpticsAlarmDetail) XXX_Size() int {
	return xxx_messageInfo_OpticsAlarmDetail.Size(m)
}
func (m *OpticsAlarmDetail) XXX_DiscardUnknown() {
	xxx_messageInfo_OpticsAlarmDetail.DiscardUnknown(m)
}

var xxx_messageInfo_OpticsAlarmDetail proto.InternalMessageInfo

func (m *OpticsAlarmDetail) GetIsDetected() bool {
	if m != nil {
		return m.IsDetected
	}
	return false
}

func (m *OpticsAlarmDetail) GetCounter() uint32 {
	if m != nil {
		return m.Counter
	}
	return 0
}

type OpticsEdmAlarmInfo struct {
	HighRxPower          *OpticsAlarmDetail `protobuf:"bytes,1,opt,name=high_rx_power,json=highRxPower,proto3" json:"high_rx_power,omitempty"`
	LowRxPower           *OpticsAlarmDetail `protobuf:"bytes,2,opt,name=low_rx_power,json=lowRxPower,proto3" json:"low_rx_power,omitempty"`
	HighTxPower          *OpticsAlarmDetail `protobuf:"bytes,3,opt,name=high_tx_power,json=highTxPower,proto3" json:"high_tx_power,omitempty"`
	LowTxPower           *OpticsAlarmDetail `protobuf:"bytes,4,opt,name=low_tx_power,json=lowTxPower,proto3" json:"low_tx_power,omitempty"`
	HighLbc              *OpticsAlarmDetail `protobuf:"bytes,5,opt,name=high_lbc,json=highLbc,proto3" json:"high_lbc,omitempty"`
	HighRx1Power         *OpticsAlarmDetail `protobuf:"bytes,6,opt,name=high_rx1_power,json=highRx1Power,proto3" json:"high_rx1_power,omitempty"`
	HighRx2Power         *OpticsAlarmDetail `protobuf:"bytes,7,opt,name=high_rx2_power,json=highRx2Power,proto3" json:"high_rx2_power,omitempty"`
	HighRx3Power         *OpticsAlarmDetail `protobuf:"bytes,8,opt,name=high_rx3_power,json=highRx3Power,proto3" json:"high_rx3_power,omitempty"`
	HighRx4Power         *OpticsAlarmDetail `protobuf:"bytes,9,opt,name=high_rx4_power,json=highRx4Power,proto3" json:"high_rx4_power,omitempty"`
	LowRx1Power          *OpticsAlarmDetail `protobuf:"bytes,10,opt,name=low_rx1_power,json=lowRx1Power,proto3" json:"low_rx1_power,omitempty"`
	LowRx2Power          *OpticsAlarmDetail `protobuf:"bytes,11,opt,name=low_rx2_power,json=lowRx2Power,proto3" json:"low_rx2_power,omitempty"`
	LowRx3Power          *OpticsAlarmDetail `protobuf:"bytes,12,opt,name=low_rx3_power,json=lowRx3Power,proto3" json:"low_rx3_power,omitempty"`
	LowRx4Power          *OpticsAlarmDetail `protobuf:"bytes,13,opt,name=low_rx4_power,json=lowRx4Power,proto3" json:"low_rx4_power,omitempty"`
	HighTx1Power         *OpticsAlarmDetail `protobuf:"bytes,14,opt,name=high_tx1_power,json=highTx1Power,proto3" json:"high_tx1_power,omitempty"`
	HighTx2Power         *OpticsAlarmDetail `protobuf:"bytes,15,opt,name=high_tx2_power,json=highTx2Power,proto3" json:"high_tx2_power,omitempty"`
	HighTx3Power         *OpticsAlarmDetail `protobuf:"bytes,16,opt,name=high_tx3_power,json=highTx3Power,proto3" json:"high_tx3_power,omitempty"`
	HighTx4Power         *OpticsAlarmDetail `protobuf:"bytes,17,opt,name=high_tx4_power,json=highTx4Power,proto3" json:"high_tx4_power,omitempty"`
	LowTx1Power          *OpticsAlarmDetail `protobuf:"bytes,18,opt,name=low_tx1_power,json=lowTx1Power,proto3" json:"low_tx1_power,omitempty"`
	LowTx2Power          *OpticsAlarmDetail `protobuf:"bytes,19,opt,name=low_tx2_power,json=lowTx2Power,proto3" json:"low_tx2_power,omitempty"`
	LowTx3Power          *OpticsAlarmDetail `protobuf:"bytes,20,opt,name=low_tx3_power,json=lowTx3Power,proto3" json:"low_tx3_power,omitempty"`
	LowTx4Power          *OpticsAlarmDetail `protobuf:"bytes,21,opt,name=low_tx4_power,json=lowTx4Power,proto3" json:"low_tx4_power,omitempty"`
	HighTx1Lbc           *OpticsAlarmDetail `protobuf:"bytes,22,opt,name=high_tx1lbc,json=highTx1lbc,proto3" json:"high_tx1lbc,omitempty"`
	HighTx2Lbc           *OpticsAlarmDetail `protobuf:"bytes,23,opt,name=high_tx2lbc,json=highTx2lbc,proto3" json:"high_tx2lbc,omitempty"`
	HighTx3Lbc           *OpticsAlarmDetail `protobuf:"bytes,24,opt,name=high_tx3lbc,json=highTx3lbc,proto3" json:"high_tx3lbc,omitempty"`
	HighTx4Lbc           *OpticsAlarmDetail `protobuf:"bytes,25,opt,name=high_tx4lbc,json=highTx4lbc,proto3" json:"high_tx4lbc,omitempty"`
	LowTx1Lbc            *OpticsAlarmDetail `protobuf:"bytes,26,opt,name=low_tx1lbc,json=lowTx1lbc,proto3" json:"low_tx1lbc,omitempty"`
	LowTx2Lbc            *OpticsAlarmDetail `protobuf:"bytes,27,opt,name=low_tx2lbc,json=lowTx2lbc,proto3" json:"low_tx2lbc,omitempty"`
	LowTx3Lbc            *OpticsAlarmDetail `protobuf:"bytes,28,opt,name=low_tx3lbc,json=lowTx3lbc,proto3" json:"low_tx3lbc,omitempty"`
	LowTx4Lbc            *OpticsAlarmDetail `protobuf:"bytes,29,opt,name=low_tx4lbc,json=lowTx4lbc,proto3" json:"low_tx4lbc,omitempty"`
	RxLos                *OpticsAlarmDetail `protobuf:"bytes,30,opt,name=rx_los,json=rxLos,proto3" json:"rx_los,omitempty"`
	TxLos                *OpticsAlarmDetail `protobuf:"bytes,31,opt,name=tx_los,json=txLos,proto3" json:"tx_los,omitempty"`
	RxLol                *OpticsAlarmDetail `protobuf:"bytes,32,opt,name=rx_lol,json=rxLol,proto3" json:"rx_lol,omitempty"`
	TxLol                *OpticsAlarmDetail `protobuf:"bytes,33,opt,name=tx_lol,json=txLol,proto3" json:"tx_lol,omitempty"`
	TxFault              *OpticsAlarmDetail `protobuf:"bytes,34,opt,name=tx_fault,json=txFault,proto3" json:"tx_fault,omitempty"`
	Hidgd                *OpticsAlarmDetail `protobuf:"bytes,35,opt,name=hidgd,proto3" json:"hidgd,omitempty"`
	Oorcd                *OpticsAlarmDetail `protobuf:"bytes,36,opt,name=oorcd,proto3" json:"oorcd,omitempty"`
	Osnr                 *OpticsAlarmDetail `protobuf:"bytes,37,opt,name=osnr,proto3" json:"osnr,omitempty"`
	Wvlool               *OpticsAlarmDetail `protobuf:"bytes,38,opt,name=wvlool,proto3" json:"wvlool,omitempty"`
	Mea                  *OpticsAlarmDetail `protobuf:"bytes,39,opt,name=mea,proto3" json:"mea,omitempty"`
	ImpRemoval           *OpticsAlarmDetail `protobuf:"bytes,40,opt,name=imp_removal,json=impRemoval,proto3" json:"imp_removal,omitempty"`
	RxLoc                *OpticsAlarmDetail `protobuf:"bytes,41,opt,name=rx_loc,json=rxLoc,proto3" json:"rx_loc,omitempty"`
	AmpGainDegLow        *OpticsAlarmDetail `protobuf:"bytes,42,opt,name=amp_gain_deg_low,json=ampGainDegLow,proto3" json:"amp_gain_deg_low,omitempty"`
	AmpGainDegHigh       *OpticsAlarmDetail `protobuf:"bytes,43,opt,name=amp_gain_deg_high,json=ampGainDegHigh,proto3" json:"amp_gain_deg_high,omitempty"`
	TxpwrMismatch        *OpticsAlarmDetail `protobuf:"bytes,44,opt,name=txpwr_mismatch,json=txpwrMismatch,proto3" json:"txpwr_mismatch,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *OpticsEdmAlarmInfo) Reset()         { *m = OpticsEdmAlarmInfo{} }
func (m *OpticsEdmAlarmInfo) String() string { return proto.CompactTextString(m) }
func (*OpticsEdmAlarmInfo) ProtoMessage()    {}
func (*OpticsEdmAlarmInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c9721f0da9c660c, []int{7}
}

func (m *OpticsEdmAlarmInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OpticsEdmAlarmInfo.Unmarshal(m, b)
}
func (m *OpticsEdmAlarmInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OpticsEdmAlarmInfo.Marshal(b, m, deterministic)
}
func (m *OpticsEdmAlarmInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OpticsEdmAlarmInfo.Merge(m, src)
}
func (m *OpticsEdmAlarmInfo) XXX_Size() int {
	return xxx_messageInfo_OpticsEdmAlarmInfo.Size(m)
}
func (m *OpticsEdmAlarmInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_OpticsEdmAlarmInfo.DiscardUnknown(m)
}

var xxx_messageInfo_OpticsEdmAlarmInfo proto.InternalMessageInfo

func (m *OpticsEdmAlarmInfo) GetHighRxPower() *OpticsAlarmDetail {
	if m != nil {
		return m.HighRxPower
	}
	return nil
}

func (m *OpticsEdmAlarmInfo) GetLowRxPower() *OpticsAlarmDetail {
	if m != nil {
		return m.LowRxPower
	}
	return nil
}

func (m *OpticsEdmAlarmInfo) GetHighTxPower() *OpticsAlarmDetail {
	if m != nil {
		return m.HighTxPower
	}
	return nil
}

func (m *OpticsEdmAlarmInfo) GetLowTxPower() *OpticsAlarmDetail {
	if m != nil {
		return m.LowTxPower
	}
	return nil
}

func (m *OpticsEdmAlarmInfo) GetHighLbc() *OpticsAlarmDetail {
	if m != nil {
		return m.HighLbc
	}
	return nil
}

func (m *OpticsEdmAlarmInfo) GetHighRx1Power() *OpticsAlarmDetail {
	if m != nil {
		return m.HighRx1Power
	}
	return nil
}

func (m *OpticsEdmAlarmInfo) GetHighRx2Power() *OpticsAlarmDetail {
	if m != nil {
		return m.HighRx2Power
	}
	return nil
}

func (m *OpticsEdmAlarmInfo) GetHighRx3Power() *OpticsAlarmDetail {
	if m != nil {
		return m.HighRx3Power
	}
	return nil
}

func (m *OpticsEdmAlarmInfo) GetHighRx4Power() *OpticsAlarmDetail {
	if m != nil {
		return m.HighRx4Power
	}
	return nil
}

func (m *OpticsEdmAlarmInfo) GetLowRx1Power() *OpticsAlarmDetail {
	if m != nil {
		return m.LowRx1Power
	}
	return nil
}

func (m *OpticsEdmAlarmInfo) GetLowRx2Power() *OpticsAlarmDetail {
	if m != nil {
		return m.LowRx2Power
	}
	return nil
}

func (m *OpticsEdmAlarmInfo) GetLowRx3Power() *OpticsAlarmDetail {
	if m != nil {
		return m.LowRx3Power
	}
	return nil
}

func (m *OpticsEdmAlarmInfo) GetLowRx4Power() *OpticsAlarmDetail {
	if m != nil {
		return m.LowRx4Power
	}
	return nil
}

func (m *OpticsEdmAlarmInfo) GetHighTx1Power() *OpticsAlarmDetail {
	if m != nil {
		return m.HighTx1Power
	}
	return nil
}

func (m *OpticsEdmAlarmInfo) GetHighTx2Power() *OpticsAlarmDetail {
	if m != nil {
		return m.HighTx2Power
	}
	return nil
}

func (m *OpticsEdmAlarmInfo) GetHighTx3Power() *OpticsAlarmDetail {
	if m != nil {
		return m.HighTx3Power
	}
	return nil
}

func (m *OpticsEdmAlarmInfo) GetHighTx4Power() *OpticsAlarmDetail {
	if m != nil {
		return m.HighTx4Power
	}
	return nil
}

func (m *OpticsEdmAlarmInfo) GetLowTx1Power() *OpticsAlarmDetail {
	if m != nil {
		return m.LowTx1Power
	}
	return nil
}

func (m *OpticsEdmAlarmInfo) GetLowTx2Power() *OpticsAlarmDetail {
	if m != nil {
		return m.LowTx2Power
	}
	return nil
}

func (m *OpticsEdmAlarmInfo) GetLowTx3Power() *OpticsAlarmDetail {
	if m != nil {
		return m.LowTx3Power
	}
	return nil
}

func (m *OpticsEdmAlarmInfo) GetLowTx4Power() *OpticsAlarmDetail {
	if m != nil {
		return m.LowTx4Power
	}
	return nil
}

func (m *OpticsEdmAlarmInfo) GetHighTx1Lbc() *OpticsAlarmDetail {
	if m != nil {
		return m.HighTx1Lbc
	}
	return nil
}

func (m *OpticsEdmAlarmInfo) GetHighTx2Lbc() *OpticsAlarmDetail {
	if m != nil {
		return m.HighTx2Lbc
	}
	return nil
}

func (m *OpticsEdmAlarmInfo) GetHighTx3Lbc() *OpticsAlarmDetail {
	if m != nil {
		return m.HighTx3Lbc
	}
	return nil
}

func (m *OpticsEdmAlarmInfo) GetHighTx4Lbc() *OpticsAlarmDetail {
	if m != nil {
		return m.HighTx4Lbc
	}
	return nil
}

func (m *OpticsEdmAlarmInfo) GetLowTx1Lbc() *OpticsAlarmDetail {
	if m != nil {
		return m.LowTx1Lbc
	}
	return nil
}

func (m *OpticsEdmAlarmInfo) GetLowTx2Lbc() *OpticsAlarmDetail {
	if m != nil {
		return m.LowTx2Lbc
	}
	return nil
}

func (m *OpticsEdmAlarmInfo) GetLowTx3Lbc() *OpticsAlarmDetail {
	if m != nil {
		return m.LowTx3Lbc
	}
	return nil
}

func (m *OpticsEdmAlarmInfo) GetLowTx4Lbc() *OpticsAlarmDetail {
	if m != nil {
		return m.LowTx4Lbc
	}
	return nil
}

func (m *OpticsEdmAlarmInfo) GetRxLos() *OpticsAlarmDetail {
	if m != nil {
		return m.RxLos
	}
	return nil
}

func (m *OpticsEdmAlarmInfo) GetTxLos() *OpticsAlarmDetail {
	if m != nil {
		return m.TxLos
	}
	return nil
}

func (m *OpticsEdmAlarmInfo) GetRxLol() *OpticsAlarmDetail {
	if m != nil {
		return m.RxLol
	}
	return nil
}

func (m *OpticsEdmAlarmInfo) GetTxLol() *OpticsAlarmDetail {
	if m != nil {
		return m.TxLol
	}
	return nil
}

func (m *OpticsEdmAlarmInfo) GetTxFault() *OpticsAlarmDetail {
	if m != nil {
		return m.TxFault
	}
	return nil
}

func (m *OpticsEdmAlarmInfo) GetHidgd() *OpticsAlarmDetail {
	if m != nil {
		return m.Hidgd
	}
	return nil
}

func (m *OpticsEdmAlarmInfo) GetOorcd() *OpticsAlarmDetail {
	if m != nil {
		return m.Oorcd
	}
	return nil
}

func (m *OpticsEdmAlarmInfo) GetOsnr() *OpticsAlarmDetail {
	if m != nil {
		return m.Osnr
	}
	return nil
}

func (m *OpticsEdmAlarmInfo) GetWvlool() *OpticsAlarmDetail {
	if m != nil {
		return m.Wvlool
	}
	return nil
}

func (m *OpticsEdmAlarmInfo) GetMea() *OpticsAlarmDetail {
	if m != nil {
		return m.Mea
	}
	return nil
}

func (m *OpticsEdmAlarmInfo) GetImpRemoval() *OpticsAlarmDetail {
	if m != nil {
		return m.ImpRemoval
	}
	return nil
}

func (m *OpticsEdmAlarmInfo) GetRxLoc() *OpticsAlarmDetail {
	if m != nil {
		return m.RxLoc
	}
	return nil
}

func (m *OpticsEdmAlarmInfo) GetAmpGainDegLow() *OpticsAlarmDetail {
	if m != nil {
		return m.AmpGainDegLow
	}
	return nil
}

func (m *OpticsEdmAlarmInfo) GetAmpGainDegHigh() *OpticsAlarmDetail {
	if m != nil {
		return m.AmpGainDegHigh
	}
	return nil
}

func (m *OpticsEdmAlarmInfo) GetTxpwrMismatch() *OpticsAlarmDetail {
	if m != nil {
		return m.TxpwrMismatch
	}
	return nil
}

type OtsEdmAlarmInfo struct {
	LowTxPower                  *OpticsAlarmDetail `protobuf:"bytes,1,opt,name=low_tx_power,json=lowTxPower,proto3" json:"low_tx_power,omitempty"`
	LowRxPower                  *OpticsAlarmDetail `protobuf:"bytes,2,opt,name=low_rx_power,json=lowRxPower,proto3" json:"low_rx_power,omitempty"`
	RxLosP                      *OpticsAlarmDetail `protobuf:"bytes,3,opt,name=rx_los_p,json=rxLosP,proto3" json:"rx_los_p,omitempty"`
	RxLoc                       *OpticsAlarmDetail `protobuf:"bytes,4,opt,name=rx_loc,json=rxLoc,proto3" json:"rx_loc,omitempty"`
	AmpGainDegLow               *OpticsAlarmDetail `protobuf:"bytes,5,opt,name=amp_gain_deg_low,json=ampGainDegLow,proto3" json:"amp_gain_deg_low,omitempty"`
	AmpGainDegHigh              *OpticsAlarmDetail `protobuf:"bytes,6,opt,name=amp_gain_deg_high,json=ampGainDegHigh,proto3" json:"amp_gain_deg_high,omitempty"`
	AutoLaserShut               *OpticsAlarmDetail `protobuf:"bytes,7,opt,name=auto_laser_shut,json=autoLaserShut,proto3" json:"auto_laser_shut,omitempty"`
	AutoPowerRed                *OpticsAlarmDetail `protobuf:"bytes,8,opt,name=auto_power_red,json=autoPowerRed,proto3" json:"auto_power_red,omitempty"`
	AutoAmpliCtrlDisabled       *OpticsAlarmDetail `protobuf:"bytes,9,opt,name=auto_ampli_ctrl_disabled,json=autoAmpliCtrlDisabled,proto3" json:"auto_ampli_ctrl_disabled,omitempty"`
	AutoAmpliCtrlConfigMismatch *OpticsAlarmDetail `protobuf:"bytes,10,opt,name=auto_ampli_ctrl_config_mismatch,json=autoAmpliCtrlConfigMismatch,proto3" json:"auto_ampli_ctrl_config_mismatch,omitempty"`
	SwitchToProtect             *OpticsAlarmDetail `protobuf:"bytes,11,opt,name=switch_to_protect,json=switchToProtect,proto3" json:"switch_to_protect,omitempty"`
	XXX_NoUnkeyedLiteral        struct{}           `json:"-"`
	XXX_unrecognized            []byte             `json:"-"`
	XXX_sizecache               int32              `json:"-"`
}

func (m *OtsEdmAlarmInfo) Reset()         { *m = OtsEdmAlarmInfo{} }
func (m *OtsEdmAlarmInfo) String() string { return proto.CompactTextString(m) }
func (*OtsEdmAlarmInfo) ProtoMessage()    {}
func (*OtsEdmAlarmInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c9721f0da9c660c, []int{8}
}

func (m *OtsEdmAlarmInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OtsEdmAlarmInfo.Unmarshal(m, b)
}
func (m *OtsEdmAlarmInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OtsEdmAlarmInfo.Marshal(b, m, deterministic)
}
func (m *OtsEdmAlarmInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OtsEdmAlarmInfo.Merge(m, src)
}
func (m *OtsEdmAlarmInfo) XXX_Size() int {
	return xxx_messageInfo_OtsEdmAlarmInfo.Size(m)
}
func (m *OtsEdmAlarmInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_OtsEdmAlarmInfo.DiscardUnknown(m)
}

var xxx_messageInfo_OtsEdmAlarmInfo proto.InternalMessageInfo

func (m *OtsEdmAlarmInfo) GetLowTxPower() *OpticsAlarmDetail {
	if m != nil {
		return m.LowTxPower
	}
	return nil
}

func (m *OtsEdmAlarmInfo) GetLowRxPower() *OpticsAlarmDetail {
	if m != nil {
		return m.LowRxPower
	}
	return nil
}

func (m *OtsEdmAlarmInfo) GetRxLosP() *OpticsAlarmDetail {
	if m != nil {
		return m.RxLosP
	}
	return nil
}

func (m *OtsEdmAlarmInfo) GetRxLoc() *OpticsAlarmDetail {
	if m != nil {
		return m.RxLoc
	}
	return nil
}

func (m *OtsEdmAlarmInfo) GetAmpGainDegLow() *OpticsAlarmDetail {
	if m != nil {
		return m.AmpGainDegLow
	}
	return nil
}

func (m *OtsEdmAlarmInfo) GetAmpGainDegHigh() *OpticsAlarmDetail {
	if m != nil {
		return m.AmpGainDegHigh
	}
	return nil
}

func (m *OtsEdmAlarmInfo) GetAutoLaserShut() *OpticsAlarmDetail {
	if m != nil {
		return m.AutoLaserShut
	}
	return nil
}

func (m *OtsEdmAlarmInfo) GetAutoPowerRed() *OpticsAlarmDetail {
	if m != nil {
		return m.AutoPowerRed
	}
	return nil
}

func (m *OtsEdmAlarmInfo) GetAutoAmpliCtrlDisabled() *OpticsAlarmDetail {
	if m != nil {
		return m.AutoAmpliCtrlDisabled
	}
	return nil
}

func (m *OtsEdmAlarmInfo) GetAutoAmpliCtrlConfigMismatch() *OpticsAlarmDetail {
	if m != nil {
		return m.AutoAmpliCtrlConfigMismatch
	}
	return nil
}

func (m *OtsEdmAlarmInfo) GetSwitchToProtect() *OpticsAlarmDetail {
	if m != nil {
		return m.SwitchToProtect
	}
	return nil
}

type OpticsTransceiverData struct {
	VendorInfo             string   `protobuf:"bytes,1,opt,name=vendor_info,json=vendorInfo,proto3" json:"vendor_info,omitempty"`
	AdapterVendorInfo      string   `protobuf:"bytes,2,opt,name=adapter_vendor_info,json=adapterVendorInfo,proto3" json:"adapter_vendor_info,omitempty"`
	Date                   string   `protobuf:"bytes,3,opt,name=date,proto3" json:"date,omitempty"`
	OpticsVendorRev        string   `protobuf:"bytes,4,opt,name=optics_vendor_rev,json=opticsVendorRev,proto3" json:"optics_vendor_rev,omitempty"`
	OpticsSerialNo         string   `protobuf:"bytes,5,opt,name=optics_serial_no,json=opticsSerialNo,proto3" json:"optics_serial_no,omitempty"`
	OpticsVendorPart       string   `protobuf:"bytes,6,opt,name=optics_vendor_part,json=opticsVendorPart,proto3" json:"optics_vendor_part,omitempty"`
	ConnectorType          string   `protobuf:"bytes,7,opt,name=connector_type,json=connectorType,proto3" json:"connector_type,omitempty"`
	OtnApplicationCode     string   `protobuf:"bytes,8,opt,name=otn_application_code,json=otnApplicationCode,proto3" json:"otn_application_code,omitempty"`
	SonetApplicationCode   string   `protobuf:"bytes,9,opt,name=sonet_application_code,json=sonetApplicationCode,proto3" json:"sonet_application_code,omitempty"`
	EthernetComplianceCode string   `protobuf:"bytes,10,opt,name=ethernet_compliance_code,json=ethernetComplianceCode,proto3" json:"ethernet_compliance_code,omitempty"`
	InternalTemperature    int32    `protobuf:"zigzag32,11,opt,name=internal_temperature,json=internalTemperature,proto3" json:"internal_temperature,omitempty"`
	XXX_NoUnkeyedLiteral   struct{} `json:"-"`
	XXX_unrecognized       []byte   `json:"-"`
	XXX_sizecache          int32    `json:"-"`
}

func (m *OpticsTransceiverData) Reset()         { *m = OpticsTransceiverData{} }
func (m *OpticsTransceiverData) String() string { return proto.CompactTextString(m) }
func (*OpticsTransceiverData) ProtoMessage()    {}
func (*OpticsTransceiverData) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c9721f0da9c660c, []int{9}
}

func (m *OpticsTransceiverData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OpticsTransceiverData.Unmarshal(m, b)
}
func (m *OpticsTransceiverData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OpticsTransceiverData.Marshal(b, m, deterministic)
}
func (m *OpticsTransceiverData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OpticsTransceiverData.Merge(m, src)
}
func (m *OpticsTransceiverData) XXX_Size() int {
	return xxx_messageInfo_OpticsTransceiverData.Size(m)
}
func (m *OpticsTransceiverData) XXX_DiscardUnknown() {
	xxx_messageInfo_OpticsTransceiverData.DiscardUnknown(m)
}

var xxx_messageInfo_OpticsTransceiverData proto.InternalMessageInfo

func (m *OpticsTransceiverData) GetVendorInfo() string {
	if m != nil {
		return m.VendorInfo
	}
	return ""
}

func (m *OpticsTransceiverData) GetAdapterVendorInfo() string {
	if m != nil {
		return m.AdapterVendorInfo
	}
	return ""
}

func (m *OpticsTransceiverData) GetDate() string {
	if m != nil {
		return m.Date
	}
	return ""
}

func (m *OpticsTransceiverData) GetOpticsVendorRev() string {
	if m != nil {
		return m.OpticsVendorRev
	}
	return ""
}

func (m *OpticsTransceiverData) GetOpticsSerialNo() string {
	if m != nil {
		return m.OpticsSerialNo
	}
	return ""
}

func (m *OpticsTransceiverData) GetOpticsVendorPart() string {
	if m != nil {
		return m.OpticsVendorPart
	}
	return ""
}

func (m *OpticsTransceiverData) GetConnectorType() string {
	if m != nil {
		return m.ConnectorType
	}
	return ""
}

func (m *OpticsTransceiverData) GetOtnApplicationCode() string {
	if m != nil {
		return m.OtnApplicationCode
	}
	return ""
}

func (m *OpticsTransceiverData) GetSonetApplicationCode() string {
	if m != nil {
		return m.SonetApplicationCode
	}
	return ""
}

func (m *OpticsTransceiverData) GetEthernetComplianceCode() string {
	if m != nil {
		return m.EthernetComplianceCode
	}
	return ""
}

func (m *OpticsTransceiverData) GetInternalTemperature() int32 {
	if m != nil {
		return m.InternalTemperature
	}
	return 0
}

type OpticsExtParam struct {
	SnrLane1                    int32    `protobuf:"zigzag32,1,opt,name=snr_lane1,json=snrLane1,proto3" json:"snr_lane1,omitempty"`
	SnrLane2                    int32    `protobuf:"zigzag32,2,opt,name=snr_lane2,json=snrLane2,proto3" json:"snr_lane2,omitempty"`
	IsiCorrectionLane1          int32    `protobuf:"zigzag32,3,opt,name=isi_correction_lane1,json=isiCorrectionLane1,proto3" json:"isi_correction_lane1,omitempty"`
	IsiCorrectionLane2          int32    `protobuf:"zigzag32,4,opt,name=isi_correction_lane2,json=isiCorrectionLane2,proto3" json:"isi_correction_lane2,omitempty"`
	PamRateLane1                int32    `protobuf:"zigzag32,5,opt,name=pam_rate_lane1,json=pamRateLane1,proto3" json:"pam_rate_lane1,omitempty"`
	PamRateLane2                int32    `protobuf:"zigzag32,6,opt,name=pam_rate_lane2,json=pamRateLane2,proto3" json:"pam_rate_lane2,omitempty"`
	PreFecBer                   string   `protobuf:"bytes,7,opt,name=pre_fec_ber,json=preFecBer,proto3" json:"pre_fec_ber,omitempty"`
	UncorrectedBer              string   `protobuf:"bytes,8,opt,name=uncorrected_ber,json=uncorrectedBer,proto3" json:"uncorrected_ber,omitempty"`
	TecCurrentLane1             int32    `protobuf:"zigzag32,9,opt,name=tec_current_lane1,json=tecCurrentLane1,proto3" json:"tec_current_lane1,omitempty"`
	TecCurrentLane2             int32    `protobuf:"zigzag32,10,opt,name=tec_current_lane2,json=tecCurrentLane2,proto3" json:"tec_current_lane2,omitempty"`
	LaserDiffFrequencyLane1     int32    `protobuf:"zigzag32,11,opt,name=laser_diff_frequency_lane1,json=laserDiffFrequencyLane1,proto3" json:"laser_diff_frequency_lane1,omitempty"`
	LaserDiffFrequencyLane2     int32    `protobuf:"zigzag32,12,opt,name=laser_diff_frequency_lane2,json=laserDiffFrequencyLane2,proto3" json:"laser_diff_frequency_lane2,omitempty"`
	LaserDiffTemperatureLane1   int32    `protobuf:"zigzag32,13,opt,name=laser_diff_temperature_lane1,json=laserDiffTemperatureLane1,proto3" json:"laser_diff_temperature_lane1,omitempty"`
	LaserDiffTemperatureLane2   int32    `protobuf:"zigzag32,14,opt,name=laser_diff_temperature_lane2,json=laserDiffTemperatureLane2,proto3" json:"laser_diff_temperature_lane2,omitempty"`
	PreFecBerLatchedMin         string   `protobuf:"bytes,15,opt,name=pre_fec_ber_latched_min,json=preFecBerLatchedMin,proto3" json:"pre_fec_ber_latched_min,omitempty"`
	PreFecBerLatchedMax         string   `protobuf:"bytes,16,opt,name=pre_fec_ber_latched_max,json=preFecBerLatchedMax,proto3" json:"pre_fec_ber_latched_max,omitempty"`
	PreFecBerAccumulated        string   `protobuf:"bytes,17,opt,name=pre_fec_ber_accumulated,json=preFecBerAccumulated,proto3" json:"pre_fec_ber_accumulated,omitempty"`
	PreFecBerInstantaneous      string   `protobuf:"bytes,18,opt,name=pre_fec_ber_instantaneous,json=preFecBerInstantaneous,proto3" json:"pre_fec_ber_instantaneous,omitempty"`
	UncorrectedBerLatchedMin    string   `protobuf:"bytes,19,opt,name=uncorrected_ber_latched_min,json=uncorrectedBerLatchedMin,proto3" json:"uncorrected_ber_latched_min,omitempty"`
	UncorrectedBerLatchedMax    string   `protobuf:"bytes,20,opt,name=uncorrected_ber_latched_max,json=uncorrectedBerLatchedMax,proto3" json:"uncorrected_ber_latched_max,omitempty"`
	UncorrectedBerAccumulated   string   `protobuf:"bytes,21,opt,name=uncorrected_ber_accumulated,json=uncorrectedBerAccumulated,proto3" json:"uncorrected_ber_accumulated,omitempty"`
	UncorrectedBerInstantaneous string   `protobuf:"bytes,22,opt,name=uncorrected_ber_instantaneous,json=uncorrectedBerInstantaneous,proto3" json:"uncorrected_ber_instantaneous,omitempty"`
	XXX_NoUnkeyedLiteral        struct{} `json:"-"`
	XXX_unrecognized            []byte   `json:"-"`
	XXX_sizecache               int32    `json:"-"`
}

func (m *OpticsExtParam) Reset()         { *m = OpticsExtParam{} }
func (m *OpticsExtParam) String() string { return proto.CompactTextString(m) }
func (*OpticsExtParam) ProtoMessage()    {}
func (*OpticsExtParam) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c9721f0da9c660c, []int{10}
}

func (m *OpticsExtParam) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OpticsExtParam.Unmarshal(m, b)
}
func (m *OpticsExtParam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OpticsExtParam.Marshal(b, m, deterministic)
}
func (m *OpticsExtParam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OpticsExtParam.Merge(m, src)
}
func (m *OpticsExtParam) XXX_Size() int {
	return xxx_messageInfo_OpticsExtParam.Size(m)
}
func (m *OpticsExtParam) XXX_DiscardUnknown() {
	xxx_messageInfo_OpticsExtParam.DiscardUnknown(m)
}

var xxx_messageInfo_OpticsExtParam proto.InternalMessageInfo

func (m *OpticsExtParam) GetSnrLane1() int32 {
	if m != nil {
		return m.SnrLane1
	}
	return 0
}

func (m *OpticsExtParam) GetSnrLane2() int32 {
	if m != nil {
		return m.SnrLane2
	}
	return 0
}

func (m *OpticsExtParam) GetIsiCorrectionLane1() int32 {
	if m != nil {
		return m.IsiCorrectionLane1
	}
	return 0
}

func (m *OpticsExtParam) GetIsiCorrectionLane2() int32 {
	if m != nil {
		return m.IsiCorrectionLane2
	}
	return 0
}

func (m *OpticsExtParam) GetPamRateLane1() int32 {
	if m != nil {
		return m.PamRateLane1
	}
	return 0
}

func (m *OpticsExtParam) GetPamRateLane2() int32 {
	if m != nil {
		return m.PamRateLane2
	}
	return 0
}

func (m *OpticsExtParam) GetPreFecBer() string {
	if m != nil {
		return m.PreFecBer
	}
	return ""
}

func (m *OpticsExtParam) GetUncorrectedBer() string {
	if m != nil {
		return m.UncorrectedBer
	}
	return ""
}

func (m *OpticsExtParam) GetTecCurrentLane1() int32 {
	if m != nil {
		return m.TecCurrentLane1
	}
	return 0
}

func (m *OpticsExtParam) GetTecCurrentLane2() int32 {
	if m != nil {
		return m.TecCurrentLane2
	}
	return 0
}

func (m *OpticsExtParam) GetLaserDiffFrequencyLane1() int32 {
	if m != nil {
		return m.LaserDiffFrequencyLane1
	}
	return 0
}

func (m *OpticsExtParam) GetLaserDiffFrequencyLane2() int32 {
	if m != nil {
		return m.LaserDiffFrequencyLane2
	}
	return 0
}

func (m *OpticsExtParam) GetLaserDiffTemperatureLane1() int32 {
	if m != nil {
		return m.LaserDiffTemperatureLane1
	}
	return 0
}

func (m *OpticsExtParam) GetLaserDiffTemperatureLane2() int32 {
	if m != nil {
		return m.LaserDiffTemperatureLane2
	}
	return 0
}

func (m *OpticsExtParam) GetPreFecBerLatchedMin() string {
	if m != nil {
		return m.PreFecBerLatchedMin
	}
	return ""
}

func (m *OpticsExtParam) GetPreFecBerLatchedMax() string {
	if m != nil {
		return m.PreFecBerLatchedMax
	}
	return ""
}

func (m *OpticsExtParam) GetPreFecBerAccumulated() string {
	if m != nil {
		return m.PreFecBerAccumulated
	}
	return ""
}

func (m *OpticsExtParam) GetPreFecBerInstantaneous() string {
	if m != nil {
		return m.PreFecBerInstantaneous
	}
	return ""
}

func (m *OpticsExtParam) GetUncorrectedBerLatchedMin() string {
	if m != nil {
		return m.UncorrectedBerLatchedMin
	}
	return ""
}

func (m *OpticsExtParam) GetUncorrectedBerLatchedMax() string {
	if m != nil {
		return m.UncorrectedBerLatchedMax
	}
	return ""
}

func (m *OpticsExtParam) GetUncorrectedBerAccumulated() string {
	if m != nil {
		return m.UncorrectedBerAccumulated
	}
	return ""
}

func (m *OpticsExtParam) GetUncorrectedBerInstantaneous() string {
	if m != nil {
		return m.UncorrectedBerInstantaneous
	}
	return ""
}

type OpticsExtThresholdParam struct {
	SnrAlarmHighThreshold                         int32    `protobuf:"zigzag32,1,opt,name=snr_alarm_high_threshold,json=snrAlarmHighThreshold,proto3" json:"snr_alarm_high_threshold,omitempty"`
	SnrAlarmLowThreshold                          int32    `protobuf:"zigzag32,2,opt,name=snr_alarm_low_threshold,json=snrAlarmLowThreshold,proto3" json:"snr_alarm_low_threshold,omitempty"`
	SnrWarnHighThreshold                          int32    `protobuf:"zigzag32,3,opt,name=snr_warn_high_threshold,json=snrWarnHighThreshold,proto3" json:"snr_warn_high_threshold,omitempty"`
	SnrWarnLowThreshold                           int32    `protobuf:"zigzag32,4,opt,name=snr_warn_low_threshold,json=snrWarnLowThreshold,proto3" json:"snr_warn_low_threshold,omitempty"`
	IsiCorrectionAlarmHighThreshold               int32    `protobuf:"zigzag32,5,opt,name=isi_correction_alarm_high_threshold,json=isiCorrectionAlarmHighThreshold,proto3" json:"isi_correction_alarm_high_threshold,omitempty"`
	IsiCorrectionAlarmLowThreshold                int32    `protobuf:"zigzag32,6,opt,name=isi_correction_alarm_low_threshold,json=isiCorrectionAlarmLowThreshold,proto3" json:"isi_correction_alarm_low_threshold,omitempty"`
	IsiCorrectionWarnHighThreshold                int32    `protobuf:"zigzag32,7,opt,name=isi_correction_warn_high_threshold,json=isiCorrectionWarnHighThreshold,proto3" json:"isi_correction_warn_high_threshold,omitempty"`
	IsiCorrectionWarnLowThreshold                 int32    `protobuf:"zigzag32,8,opt,name=isi_correction_warn_low_threshold,json=isiCorrectionWarnLowThreshold,proto3" json:"isi_correction_warn_low_threshold,omitempty"`
	PamRateAlarmHighThreshold                     int32    `protobuf:"zigzag32,9,opt,name=pam_rate_alarm_high_threshold,json=pamRateAlarmHighThreshold,proto3" json:"pam_rate_alarm_high_threshold,omitempty"`
	PamRateAlarmLowThreshold                      int32    `protobuf:"zigzag32,10,opt,name=pam_rate_alarm_low_threshold,json=pamRateAlarmLowThreshold,proto3" json:"pam_rate_alarm_low_threshold,omitempty"`
	PamRateWarnHighThreshold                      int32    `protobuf:"zigzag32,11,opt,name=pam_rate_warn_high_threshold,json=pamRateWarnHighThreshold,proto3" json:"pam_rate_warn_high_threshold,omitempty"`
	PamRateWarnLowThreshold                       int32    `protobuf:"zigzag32,12,opt,name=pam_rate_warn_low_threshold,json=pamRateWarnLowThreshold,proto3" json:"pam_rate_warn_low_threshold,omitempty"`
	PreFecBerAlarmHighThreshold                   string   `protobuf:"bytes,13,opt,name=pre_fec_ber_alarm_high_threshold,json=preFecBerAlarmHighThreshold,proto3" json:"pre_fec_ber_alarm_high_threshold,omitempty"`
	PreFecBerAlarmLowThreshold                    string   `protobuf:"bytes,14,opt,name=pre_fec_ber_alarm_low_threshold,json=preFecBerAlarmLowThreshold,proto3" json:"pre_fec_ber_alarm_low_threshold,omitempty"`
	PreFecBerWarnHighThreshold                    string   `protobuf:"bytes,15,opt,name=pre_fec_ber_warn_high_threshold,json=preFecBerWarnHighThreshold,proto3" json:"pre_fec_ber_warn_high_threshold,omitempty"`
	PreFecBerWarnLowThreshold                     string   `protobuf:"bytes,16,opt,name=pre_fec_ber_warn_low_threshold,json=preFecBerWarnLowThreshold,proto3" json:"pre_fec_ber_warn_low_threshold,omitempty"`
	UncorrectedBerAlarmHighThreshold              string   `protobuf:"bytes,17,opt,name=uncorrected_ber_alarm_high_threshold,json=uncorrectedBerAlarmHighThreshold,proto3" json:"uncorrected_ber_alarm_high_threshold,omitempty"`
	UncorrectedBerAlarmLowThreshold               string   `protobuf:"bytes,18,opt,name=uncorrected_ber_alarm_low_threshold,json=uncorrectedBerAlarmLowThreshold,proto3" json:"uncorrected_ber_alarm_low_threshold,omitempty"`
	UncorrectedBerWarnHighThreshold               string   `protobuf:"bytes,19,opt,name=uncorrected_ber_warn_high_threshold,json=uncorrectedBerWarnHighThreshold,proto3" json:"uncorrected_ber_warn_high_threshold,omitempty"`
	UncorrectedBerWarnLowThreshold                string   `protobuf:"bytes,20,opt,name=uncorrected_ber_warn_low_threshold,json=uncorrectedBerWarnLowThreshold,proto3" json:"uncorrected_ber_warn_low_threshold,omitempty"`
	TecCurrentAlarmHighThreshold                  int32    `protobuf:"zigzag32,21,opt,name=tec_current_alarm_high_threshold,json=tecCurrentAlarmHighThreshold,proto3" json:"tec_current_alarm_high_threshold,omitempty"`
	TecCurrentAlarmLowThreshold                   int32    `protobuf:"zigzag32,22,opt,name=tec_current_alarm_low_threshold,json=tecCurrentAlarmLowThreshold,proto3" json:"tec_current_alarm_low_threshold,omitempty"`
	TecCurrentWarnHighThreshold                   int32    `protobuf:"zigzag32,23,opt,name=tec_current_warn_high_threshold,json=tecCurrentWarnHighThreshold,proto3" json:"tec_current_warn_high_threshold,omitempty"`
	TecCurrentWarnLowThreshold                    int32    `protobuf:"zigzag32,24,opt,name=tec_current_warn_low_threshold,json=tecCurrentWarnLowThreshold,proto3" json:"tec_current_warn_low_threshold,omitempty"`
	LaserDiffFrequencyAlarmHighThreshold          int32    `protobuf:"zigzag32,25,opt,name=laser_diff_frequency_alarm_high_threshold,json=laserDiffFrequencyAlarmHighThreshold,proto3" json:"laser_diff_frequency_alarm_high_threshold,omitempty"`
	LaserDiffFrequencyAlarmLowThreshold           int32    `protobuf:"zigzag32,26,opt,name=laser_diff_frequency_alarm_low_threshold,json=laserDiffFrequencyAlarmLowThreshold,proto3" json:"laser_diff_frequency_alarm_low_threshold,omitempty"`
	LaserDiffFrequencyWarnHighThreshold           int32    `protobuf:"zigzag32,27,opt,name=laser_diff_frequency_warn_high_threshold,json=laserDiffFrequencyWarnHighThreshold,proto3" json:"laser_diff_frequency_warn_high_threshold,omitempty"`
	LaserDiffFrequencyWarnLowThreshold            int32    `protobuf:"zigzag32,28,opt,name=laser_diff_frequency_warn_low_threshold,json=laserDiffFrequencyWarnLowThreshold,proto3" json:"laser_diff_frequency_warn_low_threshold,omitempty"`
	LaserDiffTemperatureAlarmHighThreshold        int32    `protobuf:"zigzag32,29,opt,name=laser_diff_temperature_alarm_high_threshold,json=laserDiffTemperatureAlarmHighThreshold,proto3" json:"laser_diff_temperature_alarm_high_threshold,omitempty"`
	LaserDiffTemperatureAlarmLowThreshold         int32    `protobuf:"zigzag32,30,opt,name=laser_diff_temperature_alarm_low_threshold,json=laserDiffTemperatureAlarmLowThreshold,proto3" json:"laser_diff_temperature_alarm_low_threshold,omitempty"`
	LaserDiffTemperatureWarnHighThreshold         int32    `protobuf:"zigzag32,31,opt,name=laser_diff_temperature_warn_high_threshold,json=laserDiffTemperatureWarnHighThreshold,proto3" json:"laser_diff_temperature_warn_high_threshold,omitempty"`
	LaserDiffTemperatureWarnLowThreshold          int32    `protobuf:"zigzag32,32,opt,name=laser_diff_temperature_warn_low_threshold,json=laserDiffTemperatureWarnLowThreshold,proto3" json:"laser_diff_temperature_warn_low_threshold,omitempty"`
	PreFecBerLatchedMinAlarmHighThreshold         string   `protobuf:"bytes,33,opt,name=pre_fec_ber_latched_min_alarm_high_threshold,json=preFecBerLatchedMinAlarmHighThreshold,proto3" json:"pre_fec_ber_latched_min_alarm_high_threshold,omitempty"`
	PreFecBerLatchedMinAlarmLowThreshold          string   `protobuf:"bytes,34,opt,name=pre_fec_ber_latched_min_alarm_low_threshold,json=preFecBerLatchedMinAlarmLowThreshold,proto3" json:"pre_fec_ber_latched_min_alarm_low_threshold,omitempty"`
	PreFecBerLatchedMinWarnHighThreshold          string   `protobuf:"bytes,35,opt,name=pre_fec_ber_latched_min_warn_high_threshold,json=preFecBerLatchedMinWarnHighThreshold,proto3" json:"pre_fec_ber_latched_min_warn_high_threshold,omitempty"`
	PreFecBerLatchedMinWarnLowThreshold           string   `protobuf:"bytes,36,opt,name=pre_fec_ber_latched_min_warn_low_threshold,json=preFecBerLatchedMinWarnLowThreshold,proto3" json:"pre_fec_ber_latched_min_warn_low_threshold,omitempty"`
	PreFecBerLatchedMaxAlarmHighThreshold         string   `protobuf:"bytes,37,opt,name=pre_fec_ber_latched_max_alarm_high_threshold,json=preFecBerLatchedMaxAlarmHighThreshold,proto3" json:"pre_fec_ber_latched_max_alarm_high_threshold,omitempty"`
	PreFecBerLatchedMaxAlarmLowThreshold          string   `protobuf:"bytes,38,opt,name=pre_fec_ber_latched_max_alarm_low_threshold,json=preFecBerLatchedMaxAlarmLowThreshold,proto3" json:"pre_fec_ber_latched_max_alarm_low_threshold,omitempty"`
	PreFecBerLatchedMaxWarnHighThreshold          string   `protobuf:"bytes,39,opt,name=pre_fec_ber_latched_max_warn_high_threshold,json=preFecBerLatchedMaxWarnHighThreshold,proto3" json:"pre_fec_ber_latched_max_warn_high_threshold,omitempty"`
	PreFecBerLatchedMaxWarnLowThreshold           string   `protobuf:"bytes,40,opt,name=pre_fec_ber_latched_max_warn_low_threshold,json=preFecBerLatchedMaxWarnLowThreshold,proto3" json:"pre_fec_ber_latched_max_warn_low_threshold,omitempty"`
	PreFecBerAccumulatedAlarmHighThreshold        string   `protobuf:"bytes,41,opt,name=pre_fec_ber_accumulated_alarm_high_threshold,json=preFecBerAccumulatedAlarmHighThreshold,proto3" json:"pre_fec_ber_accumulated_alarm_high_threshold,omitempty"`
	PreFecBerAccumulatedAlarmLowThreshold         string   `protobuf:"bytes,42,opt,name=pre_fec_ber_accumulated_alarm_low_threshold,json=preFecBerAccumulatedAlarmLowThreshold,proto3" json:"pre_fec_ber_accumulated_alarm_low_threshold,omitempty"`
	PreFecBerAccumulatedWarnHighThreshold         string   `protobuf:"bytes,43,opt,name=pre_fec_ber_accumulated_warn_high_threshold,json=preFecBerAccumulatedWarnHighThreshold,proto3" json:"pre_fec_ber_accumulated_warn_high_threshold,omitempty"`
	PreFecBerAccumulatedWarnLowThreshold          string   `protobuf:"bytes,44,opt,name=pre_fec_ber_accumulated_warn_low_threshold,json=preFecBerAccumulatedWarnLowThreshold,proto3" json:"pre_fec_ber_accumulated_warn_low_threshold,omitempty"`
	PreFecBerInstantaneousAlarmHighThreshold      string   `protobuf:"bytes,45,opt,name=pre_fec_ber_instantaneous_alarm_high_threshold,json=preFecBerInstantaneousAlarmHighThreshold,proto3" json:"pre_fec_ber_instantaneous_alarm_high_threshold,omitempty"`
	PreFecBerInstantaneousAlarmLowThreshold       string   `protobuf:"bytes,46,opt,name=pre_fec_ber_instantaneous_alarm_low_threshold,json=preFecBerInstantaneousAlarmLowThreshold,proto3" json:"pre_fec_ber_instantaneous_alarm_low_threshold,omitempty"`
	PreFecBerInstantaneousWarnHighThreshold       string   `protobuf:"bytes,47,opt,name=pre_fec_ber_instantaneous_warn_high_threshold,json=preFecBerInstantaneousWarnHighThreshold,proto3" json:"pre_fec_ber_instantaneous_warn_high_threshold,omitempty"`
	PreFecBerInstantaneousWarnLowThreshold        string   `protobuf:"bytes,48,opt,name=pre_fec_ber_instantaneous_warn_low_threshold,json=preFecBerInstantaneousWarnLowThreshold,proto3" json:"pre_fec_ber_instantaneous_warn_low_threshold,omitempty"`
	UncorrectedBerLatchedMinAlarmHighThreshold    string   `protobuf:"bytes,49,opt,name=uncorrected_ber_latched_min_alarm_high_threshold,json=uncorrectedBerLatchedMinAlarmHighThreshold,proto3" json:"uncorrected_ber_latched_min_alarm_high_threshold,omitempty"`
	UncorrectedBerLatchedMinAlarmLowThreshold     string   `protobuf:"bytes,50,opt,name=uncorrected_ber_latched_min_alarm_low_threshold,json=uncorrectedBerLatchedMinAlarmLowThreshold,proto3" json:"uncorrected_ber_latched_min_alarm_low_threshold,omitempty"`
	UncorrectedBerLatchedMinWarnHighThreshold     string   `protobuf:"bytes,51,opt,name=uncorrected_ber_latched_min_warn_high_threshold,json=uncorrectedBerLatchedMinWarnHighThreshold,proto3" json:"uncorrected_ber_latched_min_warn_high_threshold,omitempty"`
	UncorrectedBerLatchedMinWarnLowThreshold      string   `protobuf:"bytes,52,opt,name=uncorrected_ber_latched_min_warn_low_threshold,json=uncorrectedBerLatchedMinWarnLowThreshold,proto3" json:"uncorrected_ber_latched_min_warn_low_threshold,omitempty"`
	UncorrectedBerLatchedMaxAlarmHighThreshold    string   `protobuf:"bytes,53,opt,name=uncorrected_ber_latched_max_alarm_high_threshold,json=uncorrectedBerLatchedMaxAlarmHighThreshold,proto3" json:"uncorrected_ber_latched_max_alarm_high_threshold,omitempty"`
	UncorrectedBerLatchedMaxAlarmLowThreshold     string   `protobuf:"bytes,54,opt,name=uncorrected_ber_latched_max_alarm_low_threshold,json=uncorrectedBerLatchedMaxAlarmLowThreshold,proto3" json:"uncorrected_ber_latched_max_alarm_low_threshold,omitempty"`
	UncorrectedBerLatchedMaxWarnHighThreshold     string   `protobuf:"bytes,55,opt,name=uncorrected_ber_latched_max_warn_high_threshold,json=uncorrectedBerLatchedMaxWarnHighThreshold,proto3" json:"uncorrected_ber_latched_max_warn_high_threshold,omitempty"`
	UncorrectedBerLatchedMaxWarnLowThreshold      string   `protobuf:"bytes,56,opt,name=uncorrected_ber_latched_max_warn_low_threshold,json=uncorrectedBerLatchedMaxWarnLowThreshold,proto3" json:"uncorrected_ber_latched_max_warn_low_threshold,omitempty"`
	UncorrectedBerAccumulatedAlarmHighThreshold   string   `protobuf:"bytes,57,opt,name=uncorrected_ber_accumulated_alarm_high_threshold,json=uncorrectedBerAccumulatedAlarmHighThreshold,proto3" json:"uncorrected_ber_accumulated_alarm_high_threshold,omitempty"`
	UncorrectedBerAccumulatedAlarmLowThreshold    string   `protobuf:"bytes,58,opt,name=uncorrected_ber_accumulated_alarm_low_threshold,json=uncorrectedBerAccumulatedAlarmLowThreshold,proto3" json:"uncorrected_ber_accumulated_alarm_low_threshold,omitempty"`
	UncorrectedBerAccumulatedWarnHighThreshold    string   `protobuf:"bytes,59,opt,name=uncorrected_ber_accumulated_warn_high_threshold,json=uncorrectedBerAccumulatedWarnHighThreshold,proto3" json:"uncorrected_ber_accumulated_warn_high_threshold,omitempty"`
	UncorrectedBerAccumulatedWarnLowThreshold     string   `protobuf:"bytes,60,opt,name=uncorrected_ber_accumulated_warn_low_threshold,json=uncorrectedBerAccumulatedWarnLowThreshold,proto3" json:"uncorrected_ber_accumulated_warn_low_threshold,omitempty"`
	UncorrectedBerInstantaneousAlarmHighThreshold string   `protobuf:"bytes,61,opt,name=uncorrected_ber_instantaneous_alarm_high_threshold,json=uncorrectedBerInstantaneousAlarmHighThreshold,proto3" json:"uncorrected_ber_instantaneous_alarm_high_threshold,omitempty"`
	UncorrectedBerInstantaneousAlarmLowThreshold  string   `protobuf:"bytes,62,opt,name=uncorrected_ber_instantaneous_alarm_low_threshold,json=uncorrectedBerInstantaneousAlarmLowThreshold,proto3" json:"uncorrected_ber_instantaneous_alarm_low_threshold,omitempty"`
	UncorrectedBerInstantaneousWarnHighThreshold  string   `protobuf:"bytes,63,opt,name=uncorrected_ber_instantaneous_warn_high_threshold,json=uncorrectedBerInstantaneousWarnHighThreshold,proto3" json:"uncorrected_ber_instantaneous_warn_high_threshold,omitempty"`
	UncorrectedBerInstantaneousWarnLowThreshold   string   `protobuf:"bytes,64,opt,name=uncorrected_ber_instantaneous_warn_low_threshold,json=uncorrectedBerInstantaneousWarnLowThreshold,proto3" json:"uncorrected_ber_instantaneous_warn_low_threshold,omitempty"`
	XXX_NoUnkeyedLiteral                          struct{} `json:"-"`
	XXX_unrecognized                              []byte   `json:"-"`
	XXX_sizecache                                 int32    `json:"-"`
}

func (m *OpticsExtThresholdParam) Reset()         { *m = OpticsExtThresholdParam{} }
func (m *OpticsExtThresholdParam) String() string { return proto.CompactTextString(m) }
func (*OpticsExtThresholdParam) ProtoMessage()    {}
func (*OpticsExtThresholdParam) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c9721f0da9c660c, []int{11}
}

func (m *OpticsExtThresholdParam) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OpticsExtThresholdParam.Unmarshal(m, b)
}
func (m *OpticsExtThresholdParam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OpticsExtThresholdParam.Marshal(b, m, deterministic)
}
func (m *OpticsExtThresholdParam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OpticsExtThresholdParam.Merge(m, src)
}
func (m *OpticsExtThresholdParam) XXX_Size() int {
	return xxx_messageInfo_OpticsExtThresholdParam.Size(m)
}
func (m *OpticsExtThresholdParam) XXX_DiscardUnknown() {
	xxx_messageInfo_OpticsExtThresholdParam.DiscardUnknown(m)
}

var xxx_messageInfo_OpticsExtThresholdParam proto.InternalMessageInfo

func (m *OpticsExtThresholdParam) GetSnrAlarmHighThreshold() int32 {
	if m != nil {
		return m.SnrAlarmHighThreshold
	}
	return 0
}

func (m *OpticsExtThresholdParam) GetSnrAlarmLowThreshold() int32 {
	if m != nil {
		return m.SnrAlarmLowThreshold
	}
	return 0
}

func (m *OpticsExtThresholdParam) GetSnrWarnHighThreshold() int32 {
	if m != nil {
		return m.SnrWarnHighThreshold
	}
	return 0
}

func (m *OpticsExtThresholdParam) GetSnrWarnLowThreshold() int32 {
	if m != nil {
		return m.SnrWarnLowThreshold
	}
	return 0
}

func (m *OpticsExtThresholdParam) GetIsiCorrectionAlarmHighThreshold() int32 {
	if m != nil {
		return m.IsiCorrectionAlarmHighThreshold
	}
	return 0
}

func (m *OpticsExtThresholdParam) GetIsiCorrectionAlarmLowThreshold() int32 {
	if m != nil {
		return m.IsiCorrectionAlarmLowThreshold
	}
	return 0
}

func (m *OpticsExtThresholdParam) GetIsiCorrectionWarnHighThreshold() int32 {
	if m != nil {
		return m.IsiCorrectionWarnHighThreshold
	}
	return 0
}

func (m *OpticsExtThresholdParam) GetIsiCorrectionWarnLowThreshold() int32 {
	if m != nil {
		return m.IsiCorrectionWarnLowThreshold
	}
	return 0
}

func (m *OpticsExtThresholdParam) GetPamRateAlarmHighThreshold() int32 {
	if m != nil {
		return m.PamRateAlarmHighThreshold
	}
	return 0
}

func (m *OpticsExtThresholdParam) GetPamRateAlarmLowThreshold() int32 {
	if m != nil {
		return m.PamRateAlarmLowThreshold
	}
	return 0
}

func (m *OpticsExtThresholdParam) GetPamRateWarnHighThreshold() int32 {
	if m != nil {
		return m.PamRateWarnHighThreshold
	}
	return 0
}

func (m *OpticsExtThresholdParam) GetPamRateWarnLowThreshold() int32 {
	if m != nil {
		return m.PamRateWarnLowThreshold
	}
	return 0
}

func (m *OpticsExtThresholdParam) GetPreFecBerAlarmHighThreshold() string {
	if m != nil {
		return m.PreFecBerAlarmHighThreshold
	}
	return ""
}

func (m *OpticsExtThresholdParam) GetPreFecBerAlarmLowThreshold() string {
	if m != nil {
		return m.PreFecBerAlarmLowThreshold
	}
	return ""
}

func (m *OpticsExtThresholdParam) GetPreFecBerWarnHighThreshold() string {
	if m != nil {
		return m.PreFecBerWarnHighThreshold
	}
	return ""
}

func (m *OpticsExtThresholdParam) GetPreFecBerWarnLowThreshold() string {
	if m != nil {
		return m.PreFecBerWarnLowThreshold
	}
	return ""
}

func (m *OpticsExtThresholdParam) GetUncorrectedBerAlarmHighThreshold() string {
	if m != nil {
		return m.UncorrectedBerAlarmHighThreshold
	}
	return ""
}

func (m *OpticsExtThresholdParam) GetUncorrectedBerAlarmLowThreshold() string {
	if m != nil {
		return m.UncorrectedBerAlarmLowThreshold
	}
	return ""
}

func (m *OpticsExtThresholdParam) GetUncorrectedBerWarnHighThreshold() string {
	if m != nil {
		return m.UncorrectedBerWarnHighThreshold
	}
	return ""
}

func (m *OpticsExtThresholdParam) GetUncorrectedBerWarnLowThreshold() string {
	if m != nil {
		return m.UncorrectedBerWarnLowThreshold
	}
	return ""
}

func (m *OpticsExtThresholdParam) GetTecCurrentAlarmHighThreshold() int32 {
	if m != nil {
		return m.TecCurrentAlarmHighThreshold
	}
	return 0
}

func (m *OpticsExtThresholdParam) GetTecCurrentAlarmLowThreshold() int32 {
	if m != nil {
		return m.TecCurrentAlarmLowThreshold
	}
	return 0
}

func (m *OpticsExtThresholdParam) GetTecCurrentWarnHighThreshold() int32 {
	if m != nil {
		return m.TecCurrentWarnHighThreshold
	}
	return 0
}

func (m *OpticsExtThresholdParam) GetTecCurrentWarnLowThreshold() int32 {
	if m != nil {
		return m.TecCurrentWarnLowThreshold
	}
	return 0
}

func (m *OpticsExtThresholdParam) GetLaserDiffFrequencyAlarmHighThreshold() int32 {
	if m != nil {
		return m.LaserDiffFrequencyAlarmHighThreshold
	}
	return 0
}

func (m *OpticsExtThresholdParam) GetLaserDiffFrequencyAlarmLowThreshold() int32 {
	if m != nil {
		return m.LaserDiffFrequencyAlarmLowThreshold
	}
	return 0
}

func (m *OpticsExtThresholdParam) GetLaserDiffFrequencyWarnHighThreshold() int32 {
	if m != nil {
		return m.LaserDiffFrequencyWarnHighThreshold
	}
	return 0
}

func (m *OpticsExtThresholdParam) GetLaserDiffFrequencyWarnLowThreshold() int32 {
	if m != nil {
		return m.LaserDiffFrequencyWarnLowThreshold
	}
	return 0
}

func (m *OpticsExtThresholdParam) GetLaserDiffTemperatureAlarmHighThreshold() int32 {
	if m != nil {
		return m.LaserDiffTemperatureAlarmHighThreshold
	}
	return 0
}

func (m *OpticsExtThresholdParam) GetLaserDiffTemperatureAlarmLowThreshold() int32 {
	if m != nil {
		return m.LaserDiffTemperatureAlarmLowThreshold
	}
	return 0
}

func (m *OpticsExtThresholdParam) GetLaserDiffTemperatureWarnHighThreshold() int32 {
	if m != nil {
		return m.LaserDiffTemperatureWarnHighThreshold
	}
	return 0
}

func (m *OpticsExtThresholdParam) GetLaserDiffTemperatureWarnLowThreshold() int32 {
	if m != nil {
		return m.LaserDiffTemperatureWarnLowThreshold
	}
	return 0
}

func (m *OpticsExtThresholdParam) GetPreFecBerLatchedMinAlarmHighThreshold() string {
	if m != nil {
		return m.PreFecBerLatchedMinAlarmHighThreshold
	}
	return ""
}

func (m *OpticsExtThresholdParam) GetPreFecBerLatchedMinAlarmLowThreshold() string {
	if m != nil {
		return m.PreFecBerLatchedMinAlarmLowThreshold
	}
	return ""
}

func (m *OpticsExtThresholdParam) GetPreFecBerLatchedMinWarnHighThreshold() string {
	if m != nil {
		return m.PreFecBerLatchedMinWarnHighThreshold
	}
	return ""
}

func (m *OpticsExtThresholdParam) GetPreFecBerLatchedMinWarnLowThreshold() string {
	if m != nil {
		return m.PreFecBerLatchedMinWarnLowThreshold
	}
	return ""
}

func (m *OpticsExtThresholdParam) GetPreFecBerLatchedMaxAlarmHighThreshold() string {
	if m != nil {
		return m.PreFecBerLatchedMaxAlarmHighThreshold
	}
	return ""
}

func (m *OpticsExtThresholdParam) GetPreFecBerLatchedMaxAlarmLowThreshold() string {
	if m != nil {
		return m.PreFecBerLatchedMaxAlarmLowThreshold
	}
	return ""
}

func (m *OpticsExtThresholdParam) GetPreFecBerLatchedMaxWarnHighThreshold() string {
	if m != nil {
		return m.PreFecBerLatchedMaxWarnHighThreshold
	}
	return ""
}

func (m *OpticsExtThresholdParam) GetPreFecBerLatchedMaxWarnLowThreshold() string {
	if m != nil {
		return m.PreFecBerLatchedMaxWarnLowThreshold
	}
	return ""
}

func (m *OpticsExtThresholdParam) GetPreFecBerAccumulatedAlarmHighThreshold() string {
	if m != nil {
		return m.PreFecBerAccumulatedAlarmHighThreshold
	}
	return ""
}

func (m *OpticsExtThresholdParam) GetPreFecBerAccumulatedAlarmLowThreshold() string {
	if m != nil {
		return m.PreFecBerAccumulatedAlarmLowThreshold
	}
	return ""
}

func (m *OpticsExtThresholdParam) GetPreFecBerAccumulatedWarnHighThreshold() string {
	if m != nil {
		return m.PreFecBerAccumulatedWarnHighThreshold
	}
	return ""
}

func (m *OpticsExtThresholdParam) GetPreFecBerAccumulatedWarnLowThreshold() string {
	if m != nil {
		return m.PreFecBerAccumulatedWarnLowThreshold
	}
	return ""
}

func (m *OpticsExtThresholdParam) GetPreFecBerInstantaneousAlarmHighThreshold() string {
	if m != nil {
		return m.PreFecBerInstantaneousAlarmHighThreshold
	}
	return ""
}

func (m *OpticsExtThresholdParam) GetPreFecBerInstantaneousAlarmLowThreshold() string {
	if m != nil {
		return m.PreFecBerInstantaneousAlarmLowThreshold
	}
	return ""
}

func (m *OpticsExtThresholdParam) GetPreFecBerInstantaneousWarnHighThreshold() string {
	if m != nil {
		return m.PreFecBerInstantaneousWarnHighThreshold
	}
	return ""
}

func (m *OpticsExtThresholdParam) GetPreFecBerInstantaneousWarnLowThreshold() string {
	if m != nil {
		return m.PreFecBerInstantaneousWarnLowThreshold
	}
	return ""
}

func (m *OpticsExtThresholdParam) GetUncorrectedBerLatchedMinAlarmHighThreshold() string {
	if m != nil {
		return m.UncorrectedBerLatchedMinAlarmHighThreshold
	}
	return ""
}

func (m *OpticsExtThresholdParam) GetUncorrectedBerLatchedMinAlarmLowThreshold() string {
	if m != nil {
		return m.UncorrectedBerLatchedMinAlarmLowThreshold
	}
	return ""
}

func (m *OpticsExtThresholdParam) GetUncorrectedBerLatchedMinWarnHighThreshold() string {
	if m != nil {
		return m.UncorrectedBerLatchedMinWarnHighThreshold
	}
	return ""
}

func (m *OpticsExtThresholdParam) GetUncorrectedBerLatchedMinWarnLowThreshold() string {
	if m != nil {
		return m.UncorrectedBerLatchedMinWarnLowThreshold
	}
	return ""
}

func (m *OpticsExtThresholdParam) GetUncorrectedBerLatchedMaxAlarmHighThreshold() string {
	if m != nil {
		return m.UncorrectedBerLatchedMaxAlarmHighThreshold
	}
	return ""
}

func (m *OpticsExtThresholdParam) GetUncorrectedBerLatchedMaxAlarmLowThreshold() string {
	if m != nil {
		return m.UncorrectedBerLatchedMaxAlarmLowThreshold
	}
	return ""
}

func (m *OpticsExtThresholdParam) GetUncorrectedBerLatchedMaxWarnHighThreshold() string {
	if m != nil {
		return m.UncorrectedBerLatchedMaxWarnHighThreshold
	}
	return ""
}

func (m *OpticsExtThresholdParam) GetUncorrectedBerLatchedMaxWarnLowThreshold() string {
	if m != nil {
		return m.UncorrectedBerLatchedMaxWarnLowThreshold
	}
	return ""
}

func (m *OpticsExtThresholdParam) GetUncorrectedBerAccumulatedAlarmHighThreshold() string {
	if m != nil {
		return m.UncorrectedBerAccumulatedAlarmHighThreshold
	}
	return ""
}

func (m *OpticsExtThresholdParam) GetUncorrectedBerAccumulatedAlarmLowThreshold() string {
	if m != nil {
		return m.UncorrectedBerAccumulatedAlarmLowThreshold
	}
	return ""
}

func (m *OpticsExtThresholdParam) GetUncorrectedBerAccumulatedWarnHighThreshold() string {
	if m != nil {
		return m.UncorrectedBerAccumulatedWarnHighThreshold
	}
	return ""
}

func (m *OpticsExtThresholdParam) GetUncorrectedBerAccumulatedWarnLowThreshold() string {
	if m != nil {
		return m.UncorrectedBerAccumulatedWarnLowThreshold
	}
	return ""
}

func (m *OpticsExtThresholdParam) GetUncorrectedBerInstantaneousAlarmHighThreshold() string {
	if m != nil {
		return m.UncorrectedBerInstantaneousAlarmHighThreshold
	}
	return ""
}

func (m *OpticsExtThresholdParam) GetUncorrectedBerInstantaneousAlarmLowThreshold() string {
	if m != nil {
		return m.UncorrectedBerInstantaneousAlarmLowThreshold
	}
	return ""
}

func (m *OpticsExtThresholdParam) GetUncorrectedBerInstantaneousWarnHighThreshold() string {
	if m != nil {
		return m.UncorrectedBerInstantaneousWarnHighThreshold
	}
	return ""
}

func (m *OpticsExtThresholdParam) GetUncorrectedBerInstantaneousWarnLowThreshold() string {
	if m != nil {
		return m.UncorrectedBerInstantaneousWarnLowThreshold
	}
	return ""
}

type OpticsEdmInfo struct {
	TransportAdminState                   string                    `protobuf:"bytes,50,opt,name=transport_admin_state,json=transportAdminState,proto3" json:"transport_admin_state,omitempty"`
	OpticsPresent                         bool                      `protobuf:"varint,51,opt,name=optics_present,json=opticsPresent,proto3" json:"optics_present,omitempty"`
	OpticsType                            string                    `protobuf:"bytes,52,opt,name=optics_type,json=opticsType,proto3" json:"optics_type,omitempty"`
	OpticsModule                          string                    `protobuf:"bytes,53,opt,name=optics_module,json=opticsModule,proto3" json:"optics_module,omitempty"`
	DwdmCarrierBand                       string                    `protobuf:"bytes,54,opt,name=dwdm_carrier_band,json=dwdmCarrierBand,proto3" json:"dwdm_carrier_band,omitempty"`
	DwdmCarrierChannel                    string                    `protobuf:"bytes,55,opt,name=dwdm_carrier_channel,json=dwdmCarrierChannel,proto3" json:"dwdm_carrier_channel,omitempty"`
	DwdmCarrierFrequency                  string                    `protobuf:"bytes,56,opt,name=dwdm_carrier_frequency,json=dwdmCarrierFrequency,proto3" json:"dwdm_carrier_frequency,omitempty"`
	DwdmCarrierWavelength                 string                    `protobuf:"bytes,57,opt,name=dwdm_carrier_wavelength,json=dwdmCarrierWavelength,proto3" json:"dwdm_carrier_wavelength,omitempty"`
	GreyWavelength                        uint32                    `protobuf:"varint,58,opt,name=grey_wavelength,json=greyWavelength,proto3" json:"grey_wavelength,omitempty"`
	RxLowThreshold                        int32                     `protobuf:"zigzag32,59,opt,name=rx_low_threshold,json=rxLowThreshold,proto3" json:"rx_low_threshold,omitempty"`
	RxHighThreshold                       int32                     `protobuf:"zigzag32,60,opt,name=rx_high_threshold,json=rxHighThreshold,proto3" json:"rx_high_threshold,omitempty"`
	LbcHighThreshold                      int32                     `protobuf:"zigzag32,61,opt,name=lbc_high_threshold,json=lbcHighThreshold,proto3" json:"lbc_high_threshold,omitempty"`
	TxLowThreshold                        int32                     `protobuf:"zigzag32,62,opt,name=tx_low_threshold,json=txLowThreshold,proto3" json:"tx_low_threshold,omitempty"`
	TxHighThreshold                       int32                     `protobuf:"zigzag32,63,opt,name=tx_high_threshold,json=txHighThreshold,proto3" json:"tx_high_threshold,omitempty"`
	LbcThHighDefault                      int32                     `protobuf:"zigzag32,64,opt,name=lbc_th_high_default,json=lbcThHighDefault,proto3" json:"lbc_th_high_default,omitempty"`
	LbcThLowDefault                       int32                     `protobuf:"zigzag32,65,opt,name=lbc_th_low_default,json=lbcThLowDefault,proto3" json:"lbc_th_low_default,omitempty"`
	TempLowThreshold                      int32                     `protobuf:"zigzag32,66,opt,name=temp_low_threshold,json=tempLowThreshold,proto3" json:"temp_low_threshold,omitempty"`
	TempHighThreshold                     int32                     `protobuf:"zigzag32,67,opt,name=temp_high_threshold,json=tempHighThreshold,proto3" json:"temp_high_threshold,omitempty"`
	VoltLowThreshold                      int32                     `protobuf:"zigzag32,68,opt,name=volt_low_threshold,json=voltLowThreshold,proto3" json:"volt_low_threshold,omitempty"`
	VoltHighThreshold                     int32                     `protobuf:"zigzag32,69,opt,name=volt_high_threshold,json=voltHighThreshold,proto3" json:"volt_high_threshold,omitempty"`
	Cd                                    int32                     `protobuf:"zigzag32,70,opt,name=cd,proto3" json:"cd,omitempty"`
	CdMin                                 int32                     `protobuf:"zigzag32,71,opt,name=cd_min,json=cdMin,proto3" json:"cd_min,omitempty"`
	CdMax                                 int32                     `protobuf:"zigzag32,72,opt,name=cd_max,json=cdMax,proto3" json:"cd_max,omitempty"`
	CdLowThreshold                        int32                     `protobuf:"zigzag32,73,opt,name=cd_low_threshold,json=cdLowThreshold,proto3" json:"cd_low_threshold,omitempty"`
	CdHighThreshold                       int32                     `protobuf:"zigzag32,74,opt,name=cd_high_threshold,json=cdHighThreshold,proto3" json:"cd_high_threshold,omitempty"`
	OsnrLowThreshold                      string                    `protobuf:"bytes,75,opt,name=osnr_low_threshold,json=osnrLowThreshold,proto3" json:"osnr_low_threshold,omitempty"`
	DgdHighThreshold                      string                    `protobuf:"bytes,76,opt,name=dgd_high_threshold,json=dgdHighThreshold,proto3" json:"dgd_high_threshold,omitempty"`
	PolarizationModeDispersion            string                    `protobuf:"bytes,77,opt,name=polarization_mode_dispersion,json=polarizationModeDispersion,proto3" json:"polarization_mode_dispersion,omitempty"`
	SecondOrderPolarizationModeDispersion string                    `protobuf:"bytes,78,opt,name=second_order_polarization_mode_dispersion,json=secondOrderPolarizationModeDispersion,proto3" json:"second_order_polarization_mode_dispersion,omitempty"`
	OpticalSignalToNoiseRatio             string                    `protobuf:"bytes,79,opt,name=optical_signal_to_noise_ratio,json=opticalSignalToNoiseRatio,proto3" json:"optical_signal_to_noise_ratio,omitempty"`
	PolarizationDependentLoss             string                    `protobuf:"bytes,80,opt,name=polarization_dependent_loss,json=polarizationDependentLoss,proto3" json:"polarization_dependent_loss,omitempty"`
	PolarizationChangeRate                string                    `protobuf:"bytes,81,opt,name=polarization_change_rate,json=polarizationChangeRate,proto3" json:"polarization_change_rate,omitempty"`
	DifferentialGroupDelay                string                    `protobuf:"bytes,82,opt,name=differential_group_delay,json=differentialGroupDelay,proto3" json:"differential_group_delay,omitempty"`
	PhaseNoise                            string                    `protobuf:"bytes,83,opt,name=phase_noise,json=phaseNoise,proto3" json:"phase_noise,omitempty"`
	PmEnable                              uint32                    `protobuf:"varint,84,opt,name=pm_enable,json=pmEnable,proto3" json:"pm_enable,omitempty"`
	LaserState                            string                    `protobuf:"bytes,85,opt,name=laser_state,json=laserState,proto3" json:"laser_state,omitempty"`
	LedState                              string                    `protobuf:"bytes,86,opt,name=led_state,json=ledState,proto3" json:"led_state,omitempty"`
	NetworkSrlgInfo                       *OpticsEdmNetworkSrlgInfo `protobuf:"bytes,87,opt,name=network_srlg_info,json=networkSrlgInfo,proto3" json:"network_srlg_info,omitempty"`
	LaneData                              []*OpticsEdmLaneData      `protobuf:"bytes,88,rep,name=lane_data,json=laneData,proto3" json:"lane_data,omitempty"`
	ControllerState                       string                    `protobuf:"bytes,89,opt,name=controller_state,json=controllerState,proto3" json:"controller_state,omitempty"`
	FormFactor                            string                    `protobuf:"bytes,90,opt,name=form_factor,json=formFactor,proto3" json:"form_factor,omitempty"`
	PhyType                               string                    `protobuf:"bytes,91,opt,name=phy_type,json=phyType,proto3" json:"phy_type,omitempty"`
	OpticsAlarmInfo                       *OpticsEdmAlarmInfo       `protobuf:"bytes,92,opt,name=optics_alarm_info,json=opticsAlarmInfo,proto3" json:"optics_alarm_info,omitempty"`
	OtsAlarmInfo                          *OtsEdmAlarmInfo          `protobuf:"bytes,93,opt,name=ots_alarm_info,json=otsAlarmInfo,proto3" json:"ots_alarm_info,omitempty"`
	CfgTxPower                            int32                     `protobuf:"zigzag32,94,opt,name=cfg_tx_power,json=cfgTxPower,proto3" json:"cfg_tx_power,omitempty"`
	CfgTxPowerConfigurable                bool                      `protobuf:"varint,95,opt,name=cfg_tx_power_configurable,json=cfgTxPowerConfigurable,proto3" json:"cfg_tx_power_configurable,omitempty"`
	Temperature                           int32                     `protobuf:"zigzag32,96,opt,name=temperature,proto3" json:"temperature,omitempty"`
	Voltage                               int32                     `protobuf:"zigzag32,97,opt,name=voltage,proto3" json:"voltage,omitempty"`
	DisplayVoltTemp                       bool                      `protobuf:"varint,98,opt,name=display_volt_temp,json=displayVoltTemp,proto3" json:"display_volt_temp,omitempty"`
	CdConfigurable                        bool                      `protobuf:"varint,99,opt,name=cd_configurable,json=cdConfigurable,proto3" json:"cd_configurable,omitempty"`
	OpticsFec                             string                    `protobuf:"bytes,100,opt,name=optics_fec,json=opticsFec,proto3" json:"optics_fec,omitempty"`
	PortType                              string                    `protobuf:"bytes,101,opt,name=port_type,json=portType,proto3" json:"port_type,omitempty"`
	PortStatus                            string                    `protobuf:"bytes,102,opt,name=port_status,json=portStatus,proto3" json:"port_status,omitempty"`
	RxVoaAttenuation                      int32                     `protobuf:"zigzag32,103,opt,name=rx_voa_attenuation,json=rxVoaAttenuation,proto3" json:"rx_voa_attenuation,omitempty"`
	TxVoaAttenuation                      int32                     `protobuf:"zigzag32,104,opt,name=tx_voa_attenuation,json=txVoaAttenuation,proto3" json:"tx_voa_attenuation,omitempty"`
	AmpliGain                             int32                     `protobuf:"zigzag32,105,opt,name=ampli_gain,json=ampliGain,proto3" json:"ampli_gain,omitempty"`
	AmpliTilt                             int32                     `protobuf:"zigzag32,106,opt,name=ampli_tilt,json=ampliTilt,proto3" json:"ampli_tilt,omitempty"`
	RxPowerThConfigurable                 bool                      `protobuf:"varint,107,opt,name=rx_power_th_configurable,json=rxPowerThConfigurable,proto3" json:"rx_power_th_configurable,omitempty"`
	TxPowerThConfigurable                 bool                      `protobuf:"varint,108,opt,name=tx_power_th_configurable,json=txPowerThConfigurable,proto3" json:"tx_power_th_configurable,omitempty"`
	RxVoaAttenuationConfigVal             int32                     `protobuf:"zigzag32,109,opt,name=rx_voa_attenuation_config_val,json=rxVoaAttenuationConfigVal,proto3" json:"rx_voa_attenuation_config_val,omitempty"`
	TxVoaAttenuationConfigVal             int32                     `protobuf:"zigzag32,110,opt,name=tx_voa_attenuation_config_val,json=txVoaAttenuationConfigVal,proto3" json:"tx_voa_attenuation_config_val,omitempty"`
	AmpliControlModeConfigVal             string                    `protobuf:"bytes,111,opt,name=ampli_control_mode_config_val,json=ampliControlModeConfigVal,proto3" json:"ampli_control_mode_config_val,omitempty"`
	AmpliGainRangeConfigVal               string                    `protobuf:"bytes,112,opt,name=ampli_gain_range_config_val,json=ampliGainRangeConfigVal,proto3" json:"ampli_gain_range_config_val,omitempty"`
	AmpliGainConfigVal                    int32                     `protobuf:"zigzag32,113,opt,name=ampli_gain_config_val,json=ampliGainConfigVal,proto3" json:"ampli_gain_config_val,omitempty"`
	AmpliTiltConfigVal                    int32                     `protobuf:"zigzag32,114,opt,name=ampli_tilt_config_val,json=ampliTiltConfigVal,proto3" json:"ampli_tilt_config_val,omitempty"`
	AmpliChannelPowerConfigVal            int32                     `protobuf:"zigzag32,115,opt,name=ampli_channel_power_config_val,json=ampliChannelPowerConfigVal,proto3" json:"ampli_channel_power_config_val,omitempty"`
	ChannelPowerMaxDeltaConfigVal         int32                     `protobuf:"zigzag32,116,opt,name=channel_power_max_delta_config_val,json=channelPowerMaxDeltaConfigVal,proto3" json:"channel_power_max_delta_config_val,omitempty"`
	AmpliGainThrDegLowConfigVal           int32                     `protobuf:"zigzag32,117,opt,name=ampli_gain_thr_deg_low_config_val,json=ampliGainThrDegLowConfigVal,proto3" json:"ampli_gain_thr_deg_low_config_val,omitempty"`
	AmpliGainThrDegHighConfigVal          int32                     `protobuf:"zigzag32,118,opt,name=ampli_gain_thr_deg_high_config_val,json=ampliGainThrDegHighConfigVal,proto3" json:"ampli_gain_thr_deg_high_config_val,omitempty"`
	OsriConfigVal                         bool                      `protobuf:"varint,119,opt,name=osri_config_val,json=osriConfigVal,proto3" json:"osri_config_val,omitempty"`
	SafetyControlModeConfigVal            string                    `protobuf:"bytes,120,opt,name=safety_control_mode_config_val,json=safetyControlModeConfigVal,proto3" json:"safety_control_mode_config_val,omitempty"`
	TotalRxPower                          int32                     `protobuf:"zigzag32,121,opt,name=total_rx_power,json=totalRxPower,proto3" json:"total_rx_power,omitempty"`
	TotalTxPower                          int32                     `protobuf:"zigzag32,122,opt,name=total_tx_power,json=totalTxPower,proto3" json:"total_tx_power,omitempty"`
	TransceiverInfo                       *OpticsTransceiverData    `protobuf:"bytes,123,opt,name=transceiver_info,json=transceiverInfo,proto3" json:"transceiver_info,omitempty"`
	IsBoConfigured                        bool                      `protobuf:"varint,124,opt,name=is_bo_configured,json=isBoConfigured,proto3" json:"is_bo_configured,omitempty"`
	IsExtParamValid                       bool                      `protobuf:"varint,125,opt,name=is_ext_param_valid,json=isExtParamValid,proto3" json:"is_ext_param_valid,omitempty"`
	ExtParamVal                           *OpticsExtParam           `protobuf:"bytes,126,opt,name=ext_param_val,json=extParamVal,proto3" json:"ext_param_val,omitempty"`
	ExtParamThresholdVal                  *OpticsExtThresholdParam  `protobuf:"bytes,127,opt,name=ext_param_threshold_val,json=extParamThresholdVal,proto3" json:"ext_param_threshold_val,omitempty"`
	AlarmDetected                         bool                      `protobuf:"varint,128,opt,name=alarm_detected,json=alarmDetected,proto3" json:"alarm_detected,omitempty"`
	RxLowWarningThreshold                 int32                     `protobuf:"zigzag32,129,opt,name=rx_low_warning_threshold,json=rxLowWarningThreshold,proto3" json:"rx_low_warning_threshold,omitempty"`
	RxHighWarningThreshold                int32                     `protobuf:"zigzag32,130,opt,name=rx_high_warning_threshold,json=rxHighWarningThreshold,proto3" json:"rx_high_warning_threshold,omitempty"`
	TxLowWarningThreshold                 int32                     `protobuf:"zigzag32,131,opt,name=tx_low_warning_threshold,json=txLowWarningThreshold,proto3" json:"tx_low_warning_threshold,omitempty"`
	TxHighWarningThreshold                int32                     `protobuf:"zigzag32,132,opt,name=tx_high_warning_threshold,json=txHighWarningThreshold,proto3" json:"tx_high_warning_threshold,omitempty"`
	LbcThHighWarningDefault               int32                     `protobuf:"zigzag32,133,opt,name=lbc_th_high_warning_default,json=lbcThHighWarningDefault,proto3" json:"lbc_th_high_warning_default,omitempty"`
	LbcThLowWarningDefault                int32                     `protobuf:"zigzag32,134,opt,name=lbc_th_low_warning_default,json=lbcThLowWarningDefault,proto3" json:"lbc_th_low_warning_default,omitempty"`
	TempLowWarningThreshold               int32                     `protobuf:"zigzag32,135,opt,name=temp_low_warning_threshold,json=tempLowWarningThreshold,proto3" json:"temp_low_warning_threshold,omitempty"`
	TempHighWarningThreshold              int32                     `protobuf:"zigzag32,136,opt,name=temp_high_warning_threshold,json=tempHighWarningThreshold,proto3" json:"temp_high_warning_threshold,omitempty"`
	VoltLowWarningThreshold               int32                     `protobuf:"zigzag32,137,opt,name=volt_low_warning_threshold,json=voltLowWarningThreshold,proto3" json:"volt_low_warning_threshold,omitempty"`
	VoltHighWarningThreshold              int32                     `protobuf:"zigzag32,138,opt,name=volt_high_warning_threshold,json=voltHighWarningThreshold,proto3" json:"volt_high_warning_threshold,omitempty"`
	XXX_NoUnkeyedLiteral                  struct{}                  `json:"-"`
	XXX_unrecognized                      []byte                    `json:"-"`
	XXX_sizecache                         int32                     `json:"-"`
}

func (m *OpticsEdmInfo) Reset()         { *m = OpticsEdmInfo{} }
func (m *OpticsEdmInfo) String() string { return proto.CompactTextString(m) }
func (*OpticsEdmInfo) ProtoMessage()    {}
func (*OpticsEdmInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c9721f0da9c660c, []int{12}
}

func (m *OpticsEdmInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OpticsEdmInfo.Unmarshal(m, b)
}
func (m *OpticsEdmInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OpticsEdmInfo.Marshal(b, m, deterministic)
}
func (m *OpticsEdmInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OpticsEdmInfo.Merge(m, src)
}
func (m *OpticsEdmInfo) XXX_Size() int {
	return xxx_messageInfo_OpticsEdmInfo.Size(m)
}
func (m *OpticsEdmInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_OpticsEdmInfo.DiscardUnknown(m)
}

var xxx_messageInfo_OpticsEdmInfo proto.InternalMessageInfo

func (m *OpticsEdmInfo) GetTransportAdminState() string {
	if m != nil {
		return m.TransportAdminState
	}
	return ""
}

func (m *OpticsEdmInfo) GetOpticsPresent() bool {
	if m != nil {
		return m.OpticsPresent
	}
	return false
}

func (m *OpticsEdmInfo) GetOpticsType() string {
	if m != nil {
		return m.OpticsType
	}
	return ""
}

func (m *OpticsEdmInfo) GetOpticsModule() string {
	if m != nil {
		return m.OpticsModule
	}
	return ""
}

func (m *OpticsEdmInfo) GetDwdmCarrierBand() string {
	if m != nil {
		return m.DwdmCarrierBand
	}
	return ""
}

func (m *OpticsEdmInfo) GetDwdmCarrierChannel() string {
	if m != nil {
		return m.DwdmCarrierChannel
	}
	return ""
}

func (m *OpticsEdmInfo) GetDwdmCarrierFrequency() string {
	if m != nil {
		return m.DwdmCarrierFrequency
	}
	return ""
}

func (m *OpticsEdmInfo) GetDwdmCarrierWavelength() string {
	if m != nil {
		return m.DwdmCarrierWavelength
	}
	return ""
}

func (m *OpticsEdmInfo) GetGreyWavelength() uint32 {
	if m != nil {
		return m.GreyWavelength
	}
	return 0
}

func (m *OpticsEdmInfo) GetRxLowThreshold() int32 {
	if m != nil {
		return m.RxLowThreshold
	}
	return 0
}

func (m *OpticsEdmInfo) GetRxHighThreshold() int32 {
	if m != nil {
		return m.RxHighThreshold
	}
	return 0
}

func (m *OpticsEdmInfo) GetLbcHighThreshold() int32 {
	if m != nil {
		return m.LbcHighThreshold
	}
	return 0
}

func (m *OpticsEdmInfo) GetTxLowThreshold() int32 {
	if m != nil {
		return m.TxLowThreshold
	}
	return 0
}

func (m *OpticsEdmInfo) GetTxHighThreshold() int32 {
	if m != nil {
		return m.TxHighThreshold
	}
	return 0
}

func (m *OpticsEdmInfo) GetLbcThHighDefault() int32 {
	if m != nil {
		return m.LbcThHighDefault
	}
	return 0
}

func (m *OpticsEdmInfo) GetLbcThLowDefault() int32 {
	if m != nil {
		return m.LbcThLowDefault
	}
	return 0
}

func (m *OpticsEdmInfo) GetTempLowThreshold() int32 {
	if m != nil {
		return m.TempLowThreshold
	}
	return 0
}

func (m *OpticsEdmInfo) GetTempHighThreshold() int32 {
	if m != nil {
		return m.TempHighThreshold
	}
	return 0
}

func (m *OpticsEdmInfo) GetVoltLowThreshold() int32 {
	if m != nil {
		return m.VoltLowThreshold
	}
	return 0
}

func (m *OpticsEdmInfo) GetVoltHighThreshold() int32 {
	if m != nil {
		return m.VoltHighThreshold
	}
	return 0
}

func (m *OpticsEdmInfo) GetCd() int32 {
	if m != nil {
		return m.Cd
	}
	return 0
}

func (m *OpticsEdmInfo) GetCdMin() int32 {
	if m != nil {
		return m.CdMin
	}
	return 0
}

func (m *OpticsEdmInfo) GetCdMax() int32 {
	if m != nil {
		return m.CdMax
	}
	return 0
}

func (m *OpticsEdmInfo) GetCdLowThreshold() int32 {
	if m != nil {
		return m.CdLowThreshold
	}
	return 0
}

func (m *OpticsEdmInfo) GetCdHighThreshold() int32 {
	if m != nil {
		return m.CdHighThreshold
	}
	return 0
}

func (m *OpticsEdmInfo) GetOsnrLowThreshold() string {
	if m != nil {
		return m.OsnrLowThreshold
	}
	return ""
}

func (m *OpticsEdmInfo) GetDgdHighThreshold() string {
	if m != nil {
		return m.DgdHighThreshold
	}
	return ""
}

func (m *OpticsEdmInfo) GetPolarizationModeDispersion() string {
	if m != nil {
		return m.PolarizationModeDispersion
	}
	return ""
}

func (m *OpticsEdmInfo) GetSecondOrderPolarizationModeDispersion() string {
	if m != nil {
		return m.SecondOrderPolarizationModeDispersion
	}
	return ""
}

func (m *OpticsEdmInfo) GetOpticalSignalToNoiseRatio() string {
	if m != nil {
		return m.OpticalSignalToNoiseRatio
	}
	return ""
}

func (m *OpticsEdmInfo) GetPolarizationDependentLoss() string {
	if m != nil {
		return m.PolarizationDependentLoss
	}
	return ""
}

func (m *OpticsEdmInfo) GetPolarizationChangeRate() string {
	if m != nil {
		return m.PolarizationChangeRate
	}
	return ""
}

func (m *OpticsEdmInfo) GetDifferentialGroupDelay() string {
	if m != nil {
		return m.DifferentialGroupDelay
	}
	return ""
}

func (m *OpticsEdmInfo) GetPhaseNoise() string {
	if m != nil {
		return m.PhaseNoise
	}
	return ""
}

func (m *OpticsEdmInfo) GetPmEnable() uint32 {
	if m != nil {
		return m.PmEnable
	}
	return 0
}

func (m *OpticsEdmInfo) GetLaserState() string {
	if m != nil {
		return m.LaserState
	}
	return ""
}

func (m *OpticsEdmInfo) GetLedState() string {
	if m != nil {
		return m.LedState
	}
	return ""
}

func (m *OpticsEdmInfo) GetNetworkSrlgInfo() *OpticsEdmNetworkSrlgInfo {
	if m != nil {
		return m.NetworkSrlgInfo
	}
	return nil
}

func (m *OpticsEdmInfo) GetLaneData() []*OpticsEdmLaneData {
	if m != nil {
		return m.LaneData
	}
	return nil
}

func (m *OpticsEdmInfo) GetControllerState() string {
	if m != nil {
		return m.ControllerState
	}
	return ""
}

func (m *OpticsEdmInfo) GetFormFactor() string {
	if m != nil {
		return m.FormFactor
	}
	return ""
}

func (m *OpticsEdmInfo) GetPhyType() string {
	if m != nil {
		return m.PhyType
	}
	return ""
}

func (m *OpticsEdmInfo) GetOpticsAlarmInfo() *OpticsEdmAlarmInfo {
	if m != nil {
		return m.OpticsAlarmInfo
	}
	return nil
}

func (m *OpticsEdmInfo) GetOtsAlarmInfo() *OtsEdmAlarmInfo {
	if m != nil {
		return m.OtsAlarmInfo
	}
	return nil
}

func (m *OpticsEdmInfo) GetCfgTxPower() int32 {
	if m != nil {
		return m.CfgTxPower
	}
	return 0
}

func (m *OpticsEdmInfo) GetCfgTxPowerConfigurable() bool {
	if m != nil {
		return m.CfgTxPowerConfigurable
	}
	return false
}

func (m *OpticsEdmInfo) GetTemperature() int32 {
	if m != nil {
		return m.Temperature
	}
	return 0
}

func (m *OpticsEdmInfo) GetVoltage() int32 {
	if m != nil {
		return m.Voltage
	}
	return 0
}

func (m *OpticsEdmInfo) GetDisplayVoltTemp() bool {
	if m != nil {
		return m.DisplayVoltTemp
	}
	return false
}

func (m *OpticsEdmInfo) GetCdConfigurable() bool {
	if m != nil {
		return m.CdConfigurable
	}
	return false
}

func (m *OpticsEdmInfo) GetOpticsFec() string {
	if m != nil {
		return m.OpticsFec
	}
	return ""
}

func (m *OpticsEdmInfo) GetPortType() string {
	if m != nil {
		return m.PortType
	}
	return ""
}

func (m *OpticsEdmInfo) GetPortStatus() string {
	if m != nil {
		return m.PortStatus
	}
	return ""
}

func (m *OpticsEdmInfo) GetRxVoaAttenuation() int32 {
	if m != nil {
		return m.RxVoaAttenuation
	}
	return 0
}

func (m *OpticsEdmInfo) GetTxVoaAttenuation() int32 {
	if m != nil {
		return m.TxVoaAttenuation
	}
	return 0
}

func (m *OpticsEdmInfo) GetAmpliGain() int32 {
	if m != nil {
		return m.AmpliGain
	}
	return 0
}

func (m *OpticsEdmInfo) GetAmpliTilt() int32 {
	if m != nil {
		return m.AmpliTilt
	}
	return 0
}

func (m *OpticsEdmInfo) GetRxPowerThConfigurable() bool {
	if m != nil {
		return m.RxPowerThConfigurable
	}
	return false
}

func (m *OpticsEdmInfo) GetTxPowerThConfigurable() bool {
	if m != nil {
		return m.TxPowerThConfigurable
	}
	return false
}

func (m *OpticsEdmInfo) GetRxVoaAttenuationConfigVal() int32 {
	if m != nil {
		return m.RxVoaAttenuationConfigVal
	}
	return 0
}

func (m *OpticsEdmInfo) GetTxVoaAttenuationConfigVal() int32 {
	if m != nil {
		return m.TxVoaAttenuationConfigVal
	}
	return 0
}

func (m *OpticsEdmInfo) GetAmpliControlModeConfigVal() string {
	if m != nil {
		return m.AmpliControlModeConfigVal
	}
	return ""
}

func (m *OpticsEdmInfo) GetAmpliGainRangeConfigVal() string {
	if m != nil {
		return m.AmpliGainRangeConfigVal
	}
	return ""
}

func (m *OpticsEdmInfo) GetAmpliGainConfigVal() int32 {
	if m != nil {
		return m.AmpliGainConfigVal
	}
	return 0
}

func (m *OpticsEdmInfo) GetAmpliTiltConfigVal() int32 {
	if m != nil {
		return m.AmpliTiltConfigVal
	}
	return 0
}

func (m *OpticsEdmInfo) GetAmpliChannelPowerConfigVal() int32 {
	if m != nil {
		return m.AmpliChannelPowerConfigVal
	}
	return 0
}

func (m *OpticsEdmInfo) GetChannelPowerMaxDeltaConfigVal() int32 {
	if m != nil {
		return m.ChannelPowerMaxDeltaConfigVal
	}
	return 0
}

func (m *OpticsEdmInfo) GetAmpliGainThrDegLowConfigVal() int32 {
	if m != nil {
		return m.AmpliGainThrDegLowConfigVal
	}
	return 0
}

func (m *OpticsEdmInfo) GetAmpliGainThrDegHighConfigVal() int32 {
	if m != nil {
		return m.AmpliGainThrDegHighConfigVal
	}
	return 0
}

func (m *OpticsEdmInfo) GetOsriConfigVal() bool {
	if m != nil {
		return m.OsriConfigVal
	}
	return false
}

func (m *OpticsEdmInfo) GetSafetyControlModeConfigVal() string {
	if m != nil {
		return m.SafetyControlModeConfigVal
	}
	return ""
}

func (m *OpticsEdmInfo) GetTotalRxPower() int32 {
	if m != nil {
		return m.TotalRxPower
	}
	return 0
}

func (m *OpticsEdmInfo) GetTotalTxPower() int32 {
	if m != nil {
		return m.TotalTxPower
	}
	return 0
}

func (m *OpticsEdmInfo) GetTransceiverInfo() *OpticsTransceiverData {
	if m != nil {
		return m.TransceiverInfo
	}
	return nil
}

func (m *OpticsEdmInfo) GetIsBoConfigured() bool {
	if m != nil {
		return m.IsBoConfigured
	}
	return false
}

func (m *OpticsEdmInfo) GetIsExtParamValid() bool {
	if m != nil {
		return m.IsExtParamValid
	}
	return false
}

func (m *OpticsEdmInfo) GetExtParamVal() *OpticsExtParam {
	if m != nil {
		return m.ExtParamVal
	}
	return nil
}

func (m *OpticsEdmInfo) GetExtParamThresholdVal() *OpticsExtThresholdParam {
	if m != nil {
		return m.ExtParamThresholdVal
	}
	return nil
}

func (m *OpticsEdmInfo) GetAlarmDetected() bool {
	if m != nil {
		return m.AlarmDetected
	}
	return false
}

func (m *OpticsEdmInfo) GetRxLowWarningThreshold() int32 {
	if m != nil {
		return m.RxLowWarningThreshold
	}
	return 0
}

func (m *OpticsEdmInfo) GetRxHighWarningThreshold() int32 {
	if m != nil {
		return m.RxHighWarningThreshold
	}
	return 0
}

func (m *OpticsEdmInfo) GetTxLowWarningThreshold() int32 {
	if m != nil {
		return m.TxLowWarningThreshold
	}
	return 0
}

func (m *OpticsEdmInfo) GetTxHighWarningThreshold() int32 {
	if m != nil {
		return m.TxHighWarningThreshold
	}
	return 0
}

func (m *OpticsEdmInfo) GetLbcThHighWarningDefault() int32 {
	if m != nil {
		return m.LbcThHighWarningDefault
	}
	return 0
}

func (m *OpticsEdmInfo) GetLbcThLowWarningDefault() int32 {
	if m != nil {
		return m.LbcThLowWarningDefault
	}
	return 0
}

func (m *OpticsEdmInfo) GetTempLowWarningThreshold() int32 {
	if m != nil {
		return m.TempLowWarningThreshold
	}
	return 0
}

func (m *OpticsEdmInfo) GetTempHighWarningThreshold() int32 {
	if m != nil {
		return m.TempHighWarningThreshold
	}
	return 0
}

func (m *OpticsEdmInfo) GetVoltLowWarningThreshold() int32 {
	if m != nil {
		return m.VoltLowWarningThreshold
	}
	return 0
}

func (m *OpticsEdmInfo) GetVoltHighWarningThreshold() int32 {
	if m != nil {
		return m.VoltHighWarningThreshold
	}
	return 0
}

func init() {
	proto.RegisterType((*OpticsEdmInfo_KEYS)(nil), "cisco_ios_xr_controller_optics_oper.optics_oper.optics_ports.optics_port.optics_info.optics_edm_info_KEYS")
	proto.RegisterType((*OpticsEdmNetworkSrlgStructure)(nil), "cisco_ios_xr_controller_optics_oper.optics_oper.optics_ports.optics_port.optics_info.optics_edm_network_srlg_structure")
	proto.RegisterType((*OpticsEdmNetworkSrlgInfo)(nil), "cisco_ios_xr_controller_optics_oper.optics_oper.optics_ports.optics_port.optics_info.optics_edm_network_srlg_info")
	proto.RegisterType((*LaneAlarmDetail)(nil), "cisco_ios_xr_controller_optics_oper.optics_oper.optics_ports.optics_port.optics_info.lane_alarm_detail")
	proto.RegisterType((*LaneEdmAlarmInfo)(nil), "cisco_ios_xr_controller_optics_oper.optics_oper.optics_ports.optics_port.optics_info.lane_edm_alarm_info")
	proto.RegisterType((*OpticsEdmLaneData)(nil), "cisco_ios_xr_controller_optics_oper.optics_oper.optics_ports.optics_port.optics_info.optics_edm_lane_data")
	proto.RegisterType((*OpticsAlarmDetail)(nil), "cisco_ios_xr_controller_optics_oper.optics_oper.optics_ports.optics_port.optics_info.optics_alarm_detail")
	proto.RegisterType((*OpticsEdmAlarmInfo)(nil), "cisco_ios_xr_controller_optics_oper.optics_oper.optics_ports.optics_port.optics_info.optics_edm_alarm_info")
	proto.RegisterType((*OtsEdmAlarmInfo)(nil), "cisco_ios_xr_controller_optics_oper.optics_oper.optics_ports.optics_port.optics_info.ots_edm_alarm_info")
	proto.RegisterType((*OpticsTransceiverData)(nil), "cisco_ios_xr_controller_optics_oper.optics_oper.optics_ports.optics_port.optics_info.optics_transceiver_data")
	proto.RegisterType((*OpticsExtParam)(nil), "cisco_ios_xr_controller_optics_oper.optics_oper.optics_ports.optics_port.optics_info.optics_ext_param")
	proto.RegisterType((*OpticsExtThresholdParam)(nil), "cisco_ios_xr_controller_optics_oper.optics_oper.optics_ports.optics_port.optics_info.optics_ext_threshold_param")
	proto.RegisterType((*OpticsEdmInfo)(nil), "cisco_ios_xr_controller_optics_oper.optics_oper.optics_ports.optics_port.optics_info.optics_edm_info")
}

func init() { proto.RegisterFile("optics_edm_info.proto", fileDescriptor_4c9721f0da9c660c) }

var fileDescriptor_4c9721f0da9c660c = []byte{
	// 4433 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x5c, 0xdd, 0x73, 0xdc, 0xc8,
	0x71, 0xaf, 0xd5, 0x27, 0xb7, 0x29, 0x7e, 0x81, 0x1f, 0x02, 0x45, 0x51, 0xa4, 0x28, 0xe9, 0x44,
	0x51, 0x3a, 0x59, 0x5a, 0xca, 0x3e, 0xdd, 0x9d, 0x4e, 0x16, 0x45, 0x4a, 0x77, 0x3a, 0x53, 0x32,
	0x03, 0xd1, 0xd2, 0x9d, 0xed, 0x18, 0x37, 0x04, 0x66, 0x77, 0xe1, 0xc3, 0x02, 0xf0, 0x60, 0x96,
	0x5c, 0xda, 0x71, 0xfc, 0x99, 0xd8, 0x3e, 0x97, 0x93, 0x38, 0x95, 0x54, 0xf2, 0x94, 0x87, 0xa4,
	0x5c, 0x79, 0x4b, 0xfe, 0x8b, 0x3c, 0xe6, 0xaf, 0xc9, 0x4b, 0xf2, 0x90, 0x4a, 0x4d, 0x0f, 0x80,
	0xc5, 0x00, 0xb3, 0x4b, 0xb9, 0x2a, 0xdc, 0xbd, 0x37, 0xee, 0x74, 0xf7, 0xaf, 0x7f, 0xd3, 0xd3,
	0xe8, 0x99, 0xc1, 0x0c, 0x01, 0xb3, 0x61, 0xc4, 0x3d, 0x27, 0xb6, 0xa9, 0xdb, 0xb2, 0xbd, 0xa0,
	0x1e, 0xde, 0x8e, 0x58, 0xc8, 0x43, 0x63, 0xd7, 0xf1, 0x62, 0x27, 0xb4, 0xbd, 0x30, 0xb6, 0x3b,
	0xcc, 0x76, 0xc2, 0x80, 0xb3, 0xd0, 0xf7, 0x29, 0xb3, 0x13, 0xf5, 0x30, 0xa2, 0xec, 0xb6, 0xe6,
	0xef, 0x28, 0x64, 0x3c, 0xce, 0xff, 0x48, 0xff, 0x16, 0xd8, 0x2b, 0x6b, 0x30, 0x53, 0x70, 0x67,
	0x7f, 0xe3, 0xc9, 0xa7, 0x2f, 0x0d, 0x03, 0x4e, 0x05, 0xa4, 0x45, 0xcd, 0xca, 0x72, 0x65, 0xb5,
	0x6a, 0xe1, 0xdf, 0x2b, 0x14, 0x2e, 0xe7, 0x74, 0x03, 0xca, 0x0f, 0x42, 0xf6, 0xb9, 0x1d, 0x33,
	0xbf, 0x61, 0xc7, 0x9c, 0xb5, 0x1d, 0xde, 0x66, 0xd4, 0x58, 0x04, 0x88, 0x29, 0xb7, 0x83, 0x76,
	0x6b, 0x8f, 0x32, 0x34, 0x1f, 0xb3, 0xaa, 0x31, 0xe5, 0x2f, 0xb0, 0xc1, 0xb8, 0x0c, 0xe7, 0xf2,
	0x86, 0xe6, 0x89, 0xe5, 0x93, 0xab, 0x63, 0xd6, 0x68, 0xd2, 0xf6, 0x92, 0xf9, 0x8d, 0x95, 0xff,
	0xa8, 0xc0, 0xc5, 0x5e, 0x7e, 0x04, 0x41, 0xe3, 0x0f, 0x15, 0x30, 0x94, 0x56, 0xc2, 0x18, 0x39,
	0x34, 0x2b, 0xcb, 0x27, 0x57, 0x47, 0x6b, 0x07, 0xb7, 0x8f, 0x23, 0x4e, 0xb7, 0x8f, 0xec, 0xb8,
	0x35, 0x99, 0xeb, 0xc3, 0x86, 0x20, 0xb4, 0xf2, 0x02, 0xa6, 0x7c, 0x12, 0x50, 0x9b, 0xf8, 0x84,
	0xb5, 0x6c, 0x97, 0x72, 0xe2, 0xf9, 0xc6, 0x12, 0x8c, 0x7a, 0xb1, 0xf8, 0x41, 0x1d, 0x4e, 0x5d,
	0x0c, 0xd0, 0x88, 0x05, 0x5e, 0xbc, 0x95, 0xb4, 0x18, 0x26, 0x9c, 0x75, 0xc2, 0x76, 0xc0, 0x29,
	0x33, 0x4f, 0x60, 0xf4, 0xd2, 0x9f, 0x2b, 0xff, 0x79, 0x1a, 0xa6, 0x11, 0x50, 0xb0, 0x90, 0xa0,
	0x18, 0x8f, 0xdf, 0x56, 0x60, 0xac, 0xe9, 0x35, 0x9a, 0x36, 0xeb, 0xd8, 0x51, 0x78, 0x90, 0x84,
	0x7d, 0xb4, 0xd6, 0x38, 0x9e, 0x50, 0x94, 0xfa, 0x64, 0x8d, 0x0a, 0xef, 0x56, 0x67, 0x47, 0xf8,
	0x36, 0x7e, 0x53, 0x81, 0x73, 0x7e, 0x78, 0xd0, 0x25, 0x73, 0x62, 0xb0, 0x64, 0xc0, 0x0f, 0x0f,
	0x52, 0x2e, 0x59, 0x64, 0x78, 0x4a, 0xe6, 0xe4, 0x10, 0x22, 0xb3, 0x5b, 0x88, 0x4c, 0x46, 0xe6,
	0xd4, 0xe0, 0x23, 0x93, 0x72, 0xf9, 0x79, 0x05, 0x46, 0x30, 0x32, 0xfe, 0x9e, 0x63, 0x9e, 0x1e,
	0x2c, 0x8f, 0xb3, 0xc2, 0xf1, 0xf6, 0x9e, 0xb3, 0xf2, 0x87, 0x53, 0x4a, 0xf5, 0x41, 0x4d, 0x97,
	0x70, 0x22, 0x8a, 0x08, 0xfe, 0xf0, 0x02, 0x97, 0x76, 0xd2, 0x22, 0x22, 0x5a, 0x9e, 0x89, 0x06,
	0xe3, 0x7d, 0xb8, 0xe0, 0x93, 0x98, 0x32, 0x7b, 0xcf, 0x23, 0xb1, 0xed, 0xb4, 0x19, 0xa3, 0x01,
	0xb7, 0x23, 0xca, 0x1c, 0x1a, 0xf0, 0xe4, 0xa9, 0x39, 0x8f, 0x1a, 0x8f, 0x3d, 0x12, 0x6f, 0x4a,
	0xf9, 0x8e, 0x14, 0x1b, 0x8f, 0x60, 0x51, 0x63, 0xdc, 0xf2, 0x7c, 0xdf, 0xb3, 0x49, 0x2b, 0x8a,
	0x31, 0x45, 0xc6, 0xac, 0xf9, 0xa2, 0xfd, 0x73, 0xa1, 0xb1, 0xd1, 0x8a, 0x62, 0xe3, 0x1a, 0x8c,
	0x73, 0x46, 0x82, 0xb8, 0xe5, 0xf1, 0xdc, 0x40, 0x4e, 0x59, 0x63, 0x69, 0xab, 0x0c, 0xf1, 0x15,
	0x18, 0x63, 0xd4, 0xa1, 0xde, 0x3e, 0x4d, 0xb4, 0x4e, 0xa3, 0xd6, 0xb9, 0xa4, 0x51, 0x2a, 0xdd,
	0x81, 0x99, 0x54, 0x29, 0xf6, 0x1a, 0x01, 0xf1, 0x13, 0xdd, 0x33, 0xa8, 0x6b, 0x24, 0xb2, 0x97,
	0x28, 0x92, 0x16, 0x35, 0x98, 0xcd, 0xbc, 0x2b, 0x26, 0x67, 0xd1, 0x64, 0x3a, 0x15, 0xe6, 0x6d,
	0x6e, 0xc0, 0x64, 0xd8, 0xe6, 0x51, 0x9b, 0xdb, 0x75, 0x46, 0x7f, 0xd0, 0xa6, 0x81, 0x73, 0x68,
	0x8e, 0xa0, 0xfa, 0x84, 0x6c, 0x7f, 0x9a, 0x36, 0x1b, 0xbf, 0xaf, 0xc0, 0x44, 0x6e, 0xc8, 0xc4,
	0x10, 0x9a, 0x55, 0xcc, 0x0f, 0xef, 0x18, 0xf3, 0x43, 0xad, 0x68, 0xd6, 0x98, 0x68, 0xdc, 0x10,
	0xbf, 0x9f, 0x89, 0x49, 0x6a, 0x07, 0xa6, 0x13, 0x8b, 0xff, 0xaf, 0x52, 0xfa, 0x6f, 0x77, 0x94,
	0x69, 0x36, 0x57, 0x4c, 0x7f, 0xd7, 0xa3, 0x98, 0x7a, 0xc7, 0x3a, 0xaf, 0xf4, 0x2e, 0xa7, 0xbf,
	0xd5, 0x97, 0xd3, 0x01, 0xd2, 0xc9, 0x17, 0xd4, 0xdf, 0xf5, 0x28, 0xa8, 0x83, 0x8e, 0xce, 0x6e,
	0x21, 0x3a, 0x85, 0x92, 0x3a, 0xe0, 0xe8, 0xa4, 0x6c, 0x7e, 0x59, 0x2e, 0xaa, 0x03, 0x64, 0x92,
	0x96, 0x55, 0xe3, 0xaf, 0x2b, 0x30, 0x9e, 0xa4, 0xf0, 0xdd, 0x5c, 0x39, 0x19, 0x28, 0x99, 0x73,
	0x32, 0x87, 0xef, 0xca, 0xc0, 0xe4, 0x18, 0xd5, 0x72, 0xd5, 0x6a, 0x18, 0x8c, 0x6a, 0x25, 0x46,
	0xeb, 0x09, 0xa3, 0x91, 0x21, 0x31, 0x5a, 0x2f, 0x31, 0xba, 0x97, 0x30, 0xaa, 0x0e, 0x89, 0xd1,
	0xbd, 0xee, 0xc3, 0x2e, 0x4b, 0x4f, 0x9a, 0x46, 0x30, 0xf0, 0x87, 0x1d, 0x6b, 0xcf, 0xdd, 0x22,
	0x9f, 0x34, 0x89, 0x46, 0x87, 0xc3, 0xa7, 0x56, 0xe4, 0x93, 0xa6, 0xd0, 0xb9, 0xe1, 0xf0, 0x59,
	0x2f, 0xf2, 0x49, 0x13, 0x68, 0x6c, 0x38, 0x7c, 0xee, 0x15, 0x32, 0x9a, 0x67, 0x09, 0x34, 0x3e,
	0x94, 0x8c, 0xde, 0x2d, 0xd5, 0x21, 0x9e, 0xa5, 0xd0, 0xc4, 0x90, 0x18, 0xd5, 0x4a, 0x8c, 0xd2,
	0x24, 0x9a, 0x1c, 0x12, 0xa3, 0xf5, 0x12, 0xa3, 0x34, 0x8d, 0xa6, 0x86, 0xc4, 0xa8, 0x50, 0x87,
	0xba, 0x69, 0x64, 0x0c, 0x23, 0xaf, 0x77, 0x8b, 0x75, 0xa8, 0x9b, 0x44, 0xd3, 0xc3, 0xe1, 0x53,
	0x2b, 0xf2, 0x49, 0x53, 0x68, 0x66, 0x38, 0x7c, 0xd6, 0x8b, 0x7c, 0xd2, 0x04, 0x9a, 0x1d, 0x0e,
	0x9f, 0x24, 0x7f, 0xbe, 0xa8, 0xc0, 0x68, 0x5a, 0x87, 0xc4, 0xca, 0x6c, 0x6e, 0xe0, 0x6b, 0xc4,
	0xa4, 0x08, 0xf9, 0x7b, 0x4e, 0x9e, 0x4c, 0x4d, 0x90, 0x39, 0x3f, 0x24, 0x32, 0xb5, 0x02, 0x99,
	0x75, 0x41, 0xc6, 0x1c, 0x12, 0x99, 0xf5, 0x02, 0x99, 0x7b, 0x82, 0xcc, 0xfc, 0x90, 0xc8, 0x08,
	0xe7, 0xc6, 0xaf, 0x2b, 0x00, 0x49, 0xcd, 0x11, 0x5c, 0x2e, 0x0c, 0x9a, 0x4b, 0x55, 0x16, 0x1c,
	0x95, 0x0a, 0x26, 0xcc, 0xc2, 0x70, 0xa8, 0xd4, 0x54, 0x2a, 0x98, 0x2e, 0x17, 0x87, 0x43, 0x65,
	0x5d, 0xa5, 0x82, 0xc9, 0xb2, 0x38, 0x1c, 0x2a, 0x98, 0x2b, 0x3f, 0xad, 0xc0, 0x19, 0xd6, 0xb1,
	0xfd, 0x30, 0x36, 0x2f, 0x0d, 0x9a, 0xc6, 0x69, 0xd6, 0xd9, 0x0e, 0x63, 0xa4, 0xc0, 0x25, 0x85,
	0xa5, 0x81, 0x53, 0xe0, 0x19, 0x05, 0x8c, 0x82, 0x6f, 0x2e, 0x0f, 0x25, 0x0a, 0x7e, 0x37, 0x0a,
	0xbe, 0x79, 0x79, 0x28, 0x51, 0xf0, 0xf1, 0x15, 0x00, 0xef, 0xd8, 0x75, 0xd2, 0xf6, 0xb9, 0xb9,
	0x32, 0xf0, 0x57, 0x00, 0xbc, 0xf3, 0x54, 0x78, 0x36, 0x7e, 0x02, 0xa7, 0x9b, 0x9e, 0xdb, 0x70,
	0xcd, 0x2b, 0x03, 0x8f, 0x03, 0xfa, 0x15, 0x04, 0xc2, 0x90, 0x39, 0xae, 0x79, 0x75, 0xe0, 0x04,
	0xd0, 0xaf, 0xf1, 0x63, 0x38, 0x15, 0xc6, 0x01, 0x33, 0xaf, 0x0d, 0xda, 0x3f, 0xba, 0x35, 0x7e,
	0x56, 0x81, 0x33, 0x07, 0xfb, 0x7e, 0x18, 0xfa, 0xe6, 0x5b, 0x83, 0x66, 0x90, 0x38, 0x36, 0x7e,
	0x04, 0x27, 0x5b, 0x94, 0x98, 0xd7, 0x07, 0xed, 0x5f, 0x78, 0xc5, 0xd9, 0xdc, 0x6b, 0x45, 0x36,
	0xa3, 0xad, 0x70, 0x9f, 0xf8, 0xe6, 0xea, 0xc0, 0x67, 0x73, 0xaf, 0x15, 0x59, 0xd2, 0x79, 0xb7,
	0x36, 0x39, 0xe6, 0x8d, 0xa1, 0xd4, 0x26, 0xc7, 0xf8, 0xdb, 0x0a, 0x4c, 0x92, 0x56, 0x64, 0x37,
	0x88, 0x17, 0xd8, 0x2e, 0x6d, 0xd8, 0x7e, 0x78, 0x60, 0xae, 0x0d, 0x9a, 0xcc, 0x18, 0x69, 0x45,
	0x1f, 0x12, 0x2f, 0xd8, 0xa2, 0x8d, 0xed, 0xf0, 0xc0, 0xf8, 0xbb, 0x0a, 0x4c, 0x29, 0xa4, 0xc4,
	0x0a, 0xc8, 0xbc, 0x39, 0x68, 0x56, 0xe3, 0x5d, 0x56, 0x1f, 0x79, 0x8d, 0xa6, 0xf1, 0x37, 0x15,
	0x18, 0xe7, 0x9d, 0xe8, 0x80, 0xd9, 0x2d, 0x2f, 0x6e, 0x11, 0xee, 0x34, 0xcd, 0x5b, 0x03, 0x8f,
	0x14, 0x12, 0x78, 0x9e, 0xf8, 0x5f, 0xf9, 0x9f, 0x73, 0x60, 0x84, 0x3c, 0xd6, 0x1c, 0xbd, 0xaa,
	0xef, 0x9f, 0x2b, 0xc3, 0x7c, 0xff, 0xfc, 0xe5, 0x3a, 0x2b, 0xf8, 0x45, 0x05, 0x46, 0xe4, 0xb2,
	0xc8, 0x8e, 0x06, 0x7f, 0x4c, 0x70, 0x06, 0x17, 0x46, 0x3b, 0xf9, 0x47, 0xff, 0xd4, 0x97, 0xe9,
	0xd1, 0x3f, 0xfd, 0xa5, 0x7c, 0xf4, 0xcf, 0x0c, 0xfb, 0xd1, 0xff, 0x7d, 0x05, 0x26, 0x48, 0x9b,
	0x87, 0xb6, 0x3c, 0xa3, 0x8d, 0x9b, 0x6d, 0x3e, 0xf8, 0xa3, 0x82, 0x31, 0xc1, 0x60, 0x5b, 0x10,
	0x78, 0xd9, 0x6c, 0x73, 0x7c, 0x23, 0x86, 0x9c, 0xf0, 0xa1, 0xb2, 0x19, 0x75, 0x87, 0x70, 0x56,
	0x20, 0x08, 0xe0, 0x73, 0x65, 0x51, 0xd7, 0xf8, 0xe7, 0x0a, 0x98, 0xc8, 0x88, 0xb4, 0x22, 0xdf,
	0xb3, 0x1d, 0xce, 0x7c, 0xdb, 0xf5, 0x62, 0xb2, 0xe7, 0x53, 0x77, 0xf0, 0xa7, 0x06, 0xb3, 0x82,
	0xca, 0x86, 0x60, 0xb2, 0xc9, 0x99, 0xbf, 0x95, 0xf0, 0x30, 0xfe, 0xbd, 0x02, 0x4b, 0x45, 0x92,
	0x4e, 0x18, 0xd4, 0xbd, 0x46, 0xb7, 0xac, 0x0f, 0xfc, 0x40, 0x61, 0x41, 0xe1, 0xba, 0x89, 0x74,
	0xd2, 0x22, 0x6f, 0xfc, 0x7d, 0x05, 0xa6, 0xe2, 0x03, 0x8f, 0x3b, 0x4d, 0x5b, 0x8c, 0x36, 0x0b,
	0x39, 0x75, 0xf8, 0xe0, 0x0f, 0x19, 0x26, 0x24, 0x87, 0xdd, 0x70, 0x47, 0x32, 0x58, 0xf9, 0xdf,
	0x93, 0x70, 0x3e, 0x51, 0xc4, 0xd3, 0x7d, 0xbc, 0x13, 0xc0, 0xe4, 0x55, 0x89, 0x25, 0x18, 0xdd,
	0xa7, 0x81, 0x1b, 0x32, 0x79, 0x54, 0x2f, 0xef, 0x6b, 0x81, 0x6c, 0x7a, 0x26, 0xa6, 0xa8, 0xdb,
	0x30, 0x4d, 0x5c, 0x12, 0x71, 0xca, 0xec, 0xbc, 0xe2, 0x09, 0x54, 0x9c, 0x4a, 0x44, 0xaf, 0xba,
	0xfa, 0x06, 0x9c, 0x72, 0x09, 0xa7, 0x58, 0xb1, 0xab, 0x16, 0xfe, 0x6d, 0xac, 0xc1, 0x54, 0xe2,
	0x3f, 0x81, 0x60, 0x74, 0x1f, 0xcb, 0x69, 0xd5, 0x9a, 0x90, 0x02, 0x09, 0x60, 0xd1, 0x7d, 0x63,
	0x15, 0x26, 0x13, 0xdd, 0x98, 0x32, 0x8f, 0xf8, 0x76, 0x10, 0x62, 0xb1, 0xab, 0x5a, 0xe3, 0xb2,
	0xfd, 0x25, 0x36, 0xbf, 0x08, 0x8d, 0x5b, 0x60, 0xa8, 0xa8, 0x11, 0x61, 0x1c, 0x4b, 0x50, 0xd5,
	0x9a, 0xcc, 0xc3, 0xee, 0x10, 0xc6, 0x8d, 0x6b, 0x30, 0xee, 0x84, 0x41, 0x40, 0x1d, 0x1e, 0x32,
	0x9b, 0x1f, 0x46, 0x14, 0xeb, 0x42, 0xd5, 0x1a, 0xcb, 0x5a, 0x77, 0x0f, 0x23, 0x6a, 0xdc, 0x81,
	0x99, 0x90, 0x07, 0x36, 0x89, 0x22, 0xdf, 0x73, 0x08, 0xf7, 0xc2, 0xc0, 0x76, 0x42, 0x97, 0xe2,
	0x13, 0x5b, 0xb5, 0x8c, 0x90, 0x07, 0x1b, 0x5d, 0xd1, 0x66, 0xe8, 0x52, 0xe3, 0x1e, 0xcc, 0xc5,
	0x61, 0x40, 0x79, 0xd9, 0xa6, 0x8a, 0x36, 0x33, 0x28, 0x2d, 0x5a, 0xdd, 0x07, 0x93, 0xf2, 0x26,
	0x65, 0xc2, 0xd0, 0x09, 0x45, 0x42, 0x91, 0xc0, 0xa1, 0xd2, 0x0e, 0xd0, 0x6e, 0x2e, 0x95, 0x6f,
	0x66, 0x62, 0xb4, 0xbc, 0x0b, 0x33, 0x5e, 0xc0, 0x29, 0x0b, 0x88, 0x6f, 0x73, 0xda, 0x8a, 0x28,
	0x23, 0xbc, 0xcd, 0x28, 0xe6, 0xd9, 0x94, 0x35, 0x9d, 0xca, 0x76, 0xbb, 0xa2, 0x95, 0xff, 0x1e,
	0xc9, 0x82, 0x4a, 0x3b, 0x5c, 0xc4, 0x89, 0xb4, 0x8c, 0x05, 0xa8, 0xc6, 0x01, 0xc3, 0x5b, 0x33,
	0x77, 0x71, 0xdc, 0xa7, 0xac, 0x91, 0x38, 0x60, 0xdb, 0xe2, 0x77, 0x5e, 0x58, 0xc3, 0xb1, 0xee,
	0x0a, 0x6b, 0x22, 0x46, 0x5e, 0xec, 0xd9, 0x4e, 0xc8, 0x18, 0x75, 0xb0, 0xbb, 0x12, 0xe4, 0xa4,
	0xbc, 0x74, 0xe2, 0xc5, 0xde, 0x66, 0x26, 0x92, 0x70, 0x7a, 0x8b, 0x5a, 0x72, 0xf1, 0xa5, 0x6c,
	0x51, 0x33, 0xae, 0xc2, 0x78, 0x44, 0x5a, 0x36, 0x23, 0x9c, 0x26, 0xe8, 0xc9, 0xf5, 0x97, 0x88,
	0xb4, 0x2c, 0xc2, 0xa9, 0xc4, 0x2d, 0x6a, 0xd5, 0x92, 0x8b, 0x2f, 0x79, 0xad, 0x9a, 0x71, 0x09,
	0x46, 0x23, 0x46, 0xed, 0x3a, 0x75, 0xec, 0xbd, 0xe4, 0xe8, 0xb8, 0x6a, 0x55, 0x23, 0x46, 0x9f,
	0x52, 0xe7, 0x31, 0x65, 0xc6, 0x75, 0x98, 0x68, 0x07, 0x09, 0x37, 0xea, 0xa2, 0x8e, 0x1c, 0xee,
	0xf1, 0x5c, 0xb3, 0x50, 0x5c, 0x83, 0x29, 0x4e, 0x9d, 0xec, 0xd2, 0x8f, 0xe4, 0x55, 0x95, 0x17,
	0x61, 0x38, 0x75, 0x92, 0x9b, 0x3e, 0x92, 0x9a, 0x46, 0xb7, 0x86, 0x23, 0x5b, 0xd2, 0xad, 0x75,
	0x2f, 0x24, 0xb9, 0x5e, 0xbd, 0xde, 0xbd, 0x63, 0x93, 0x38, 0x90, 0x03, 0x2b, 0x2f, 0x24, 0x6d,
	0x79, 0xf5, 0x7a, 0x76, 0xd9, 0x46, 0x3a, 0xea, 0x67, 0x5c, 0xc3, 0x23, 0xc5, 0x9e, 0xc6, 0x35,
	0xe3, 0xeb, 0x70, 0x31, 0x67, 0x9c, 0x4b, 0xa7, 0xc4, 0xf7, 0x18, 0x9a, 0xcf, 0x67, 0xe6, 0xb9,
	0xac, 0x92, 0xde, 0xfb, 0x03, 0xd4, 0xf0, 0xc4, 0xae, 0x0f, 0x40, 0xcd, 0xb8, 0x07, 0xe7, 0x73,
	0x83, 0x63, 0xfb, 0xa2, 0x92, 0x52, 0xd7, 0x6e, 0x79, 0x01, 0x9e, 0xad, 0x55, 0xad, 0xe9, 0x6c,
	0xa0, 0xb6, 0xa5, 0xec, 0xb9, 0x17, 0xf4, 0xb4, 0x22, 0x1d, 0x3c, 0xff, 0xd2, 0x59, 0x91, 0x8e,
	0xf1, 0x55, 0xd5, 0x8a, 0x38, 0x4e, 0xbb, 0xd5, 0xf6, 0x09, 0xa7, 0x2e, 0x9e, 0x51, 0x55, 0xad,
	0x99, 0xcc, 0x6a, 0xa3, 0x2b, 0x33, 0xde, 0x85, 0xf9, 0xbc, 0x99, 0x17, 0xc4, 0x9c, 0x04, 0x9c,
	0x04, 0x34, 0x6c, 0xc7, 0x78, 0x96, 0x54, 0xb5, 0xe6, 0x32, 0xc3, 0x67, 0x79, 0xa9, 0xf1, 0x01,
	0x2c, 0x14, 0x52, 0x4b, 0xe9, 0xe1, 0x34, 0x1a, 0x9b, 0x6a, 0x9a, 0xe5, 0xba, 0xd9, 0xcf, 0x9c,
	0x74, 0xf0, 0x9c, 0xa6, 0xa7, 0x39, 0xe9, 0x18, 0x0f, 0xcb, 0xe6, 0xf9, 0x3e, 0xcf, 0xa2, 0xf9,
	0xbc, 0x6a, 0x9e, 0xef, 0xf8, 0x63, 0x58, 0x2c, 0xda, 0xab, 0x9d, 0x9f, 0x43, 0x84, 0x05, 0x15,
	0x41, 0x89, 0xc0, 0xca, 0x7f, 0xad, 0xc1, 0x85, 0x5c, 0xed, 0xe1, 0x4d, 0x46, 0xe3, 0x66, 0xe8,
	0xbb, 0x49, 0x15, 0x7a, 0x07, 0x4c, 0x51, 0x68, 0xe4, 0x04, 0x26, 0x5f, 0xdf, 0xa7, 0x1a, 0x49,
	0x51, 0x9a, 0x8d, 0x03, 0x86, 0x77, 0xb9, 0xc4, 0x02, 0x6f, 0x37, 0x15, 0x8a, 0xb1, 0xec, 0x1a,
	0xe2, 0x1e, 0x2a, 0xb3, 0x93, 0xf5, 0x6a, 0x26, 0xb5, 0xdb, 0x0e, 0x0f, 0x4a, 0x66, 0x07, 0x84,
	0x05, 0x45, 0x77, 0x27, 0x33, 0xb3, 0xd7, 0x84, 0x05, 0xaa, 0xb7, 0x75, 0x98, 0xcb, 0xcc, 0x54,
	0x67, 0xb2, 0x84, 0x4d, 0x27, 0x56, 0x8a, 0xaf, 0x6d, 0xb8, 0x52, 0xa8, 0x7a, 0xda, 0x6e, 0xca,
	0xc2, 0xb6, 0xa4, 0x14, 0x41, 0x4d, 0x87, 0x3f, 0x86, 0x15, 0x2d, 0x9a, 0x4a, 0x47, 0xd6, 0xbf,
	0x4b, 0x65, 0x30, 0x85, 0x59, 0x19, 0x4b, 0x17, 0x90, 0xb3, 0x1a, 0xac, 0x72, 0x68, 0x3e, 0x82,
	0xcb, 0x3a, 0x2c, 0x95, 0x96, 0xbc, 0x2d, 0xb8, 0x58, 0x82, 0x52, 0x58, 0x3d, 0x82, 0xc5, 0xac,
	0x9a, 0x6b, 0x23, 0x25, 0x4b, 0xed, 0x7c, 0x52, 0xdc, 0x35, 0x31, 0x7a, 0x08, 0x17, 0x0b, 0x08,
	0x2a, 0x0d, 0x59, 0x7f, 0xcd, 0x3c, 0x80, 0xc2, 0x20, 0x6f, 0xaf, 0x8b, 0xc8, 0xa8, 0x62, 0x5f,
	0x8e, 0xc5, 0x03, 0x58, 0x50, 0xed, 0x55, 0xf7, 0x49, 0x31, 0xce, 0x99, 0x2b, 0xde, 0x9f, 0xc0,
	0xb2, 0x52, 0x9e, 0x74, 0x21, 0x18, 0x93, 0x4f, 0x5c, 0xb7, 0x4e, 0x95, 0x83, 0xb0, 0x09, 0x4b,
	0x65, 0x18, 0x95, 0xc8, 0x38, 0xa2, 0x5c, 0x50, 0x51, 0x14, 0x2e, 0x05, 0x10, 0x5d, 0x30, 0x26,
	0x0a, 0x20, 0xe5, 0x70, 0x6c, 0xc0, 0xa5, 0x12, 0x88, 0x4a, 0x44, 0x16, 0xeb, 0x79, 0x05, 0x43,
	0xe1, 0xf1, 0x02, 0xae, 0x96, 0x4a, 0x98, 0x2e, 0x2e, 0xb2, 0x7e, 0x2f, 0x17, 0x6a, 0x59, 0x39,
	0x38, 0xdb, 0x70, 0x45, 0x8f, 0xa7, 0xf2, 0x92, 0x55, 0x7d, 0x49, 0x03, 0x57, 0x7c, 0xc2, 0x8b,
	0x68, 0xba, 0x48, 0x4d, 0xeb, 0xd0, 0xca, 0xe1, 0xfa, 0x18, 0x56, 0xb4, 0x68, 0x2a, 0x35, 0x59,
	0xf4, 0x2f, 0x95, 0xc1, 0x14, 0x66, 0x4f, 0x61, 0x39, 0xbf, 0xfc, 0xd0, 0xc6, 0x6c, 0x16, 0xd3,
	0xf1, 0x62, 0x77, 0x35, 0xa2, 0x89, 0xd7, 0x16, 0x2c, 0x95, 0x71, 0x54, 0x42, 0x73, 0x08, 0xb3,
	0x50, 0x80, 0x51, 0xd8, 0x14, 0x50, 0x74, 0x31, 0x3a, 0x5f, 0x44, 0x29, 0xc7, 0xe7, 0x31, 0x5c,
	0x2a, 0xa1, 0xa8, 0x54, 0x4c, 0x04, 0xb9, 0xa0, 0x82, 0x28, 0x4c, 0x5e, 0xc3, 0x0d, 0xed, 0x6a,
	0x49, 0x1b, 0xa0, 0x79, 0x84, 0xbb, 0x5a, 0x5e, 0x3c, 0x69, 0x02, 0xf5, 0x2d, 0x58, 0xed, 0x03,
	0xac, 0xd2, 0xbc, 0x80, 0xb8, 0x57, 0x7a, 0xe0, 0x2a, 0x7c, 0x7b, 0xc1, 0xea, 0x42, 0xb8, 0xd0,
	0x0b, 0xb6, 0x1c, 0xca, 0x97, 0x70, 0xbd, 0x37, 0xac, 0x4a, 0xf6, 0x22, 0xa2, 0xae, 0xe8, 0x51,
	0x15, 0xae, 0xdf, 0x81, 0x9b, 0x3d, 0xd6, 0x82, 0xda, 0xe8, 0x2e, 0x22, 0xf0, 0x5b, 0xba, 0xa5,
	0xa1, 0x26, 0xbe, 0x9f, 0xc2, 0x5a, 0x5f, 0x70, 0x95, 0xf4, 0x25, 0xc4, 0xbe, 0xd6, 0x13, 0x5b,
	0xe1, 0xdd, 0x1b, 0x5a, 0x17, 0xe5, 0xa5, 0xde, 0xd0, 0xe5, 0x38, 0xab, 0xe9, 0x56, 0x82, 0x56,
	0x49, 0x2f, 0x17, 0xd2, 0xad, 0x80, 0x5c, 0x88, 0xf5, 0xad, 0x1e, 0xcb, 0x66, 0x7d, 0xb0, 0x2f,
	0x63, 0xd5, 0xb8, 0xa6, 0x59, 0x4b, 0x6b, 0x63, 0x7d, 0xb3, 0x3f, 0xb8, 0xca, 0x7b, 0x05, 0xb1,
	0xaf, 0xf6, 0xc2, 0x2e, 0xc4, 0xba, 0x27, 0xb4, 0x2e, 0xd8, 0x57, 0x7a, 0x42, 0xeb, 0x62, 0xbd,
	0xd6, 0x17, 0x5a, 0x25, 0x7d, 0x15, 0x91, 0xaf, 0xf4, 0x40, 0x7e, 0xa3, 0x58, 0x93, 0x8e, 0x3e,
	0xd6, 0xd7, 0x7a, 0xc4, 0x9a, 0x74, 0xfe, 0x88, 0x58, 0x67, 0xe0, 0x2a, 0xed, 0xb7, 0x7a, 0x04,
	0x24, 0xc1, 0x7e, 0xa3, 0x58, 0x93, 0x8e, 0x36, 0xd6, 0xd7, 0x7b, 0x42, 0xbf, 0x79, 0xac, 0x53,
	0x68, 0x95, 0xf4, 0x6a, 0x8f, 0x58, 0x4b, 0x64, 0x85, 0xf3, 0x77, 0xd5, 0x58, 0xe7, 0xb6, 0x2b,
	0xfa, 0x58, 0xdf, 0x40, 0xe8, 0xb7, 0x74, 0xfb, 0x36, 0x4d, 0xb0, 0xbf, 0xad, 0x46, 0xa4, 0x8c,
	0xae, 0xf2, 0x5e, 0x2b, 0x0c, 0x64, 0x11, 0x5c, 0x61, 0xde, 0x07, 0x5b, 0x17, 0xed, 0x9b, 0xbd,
	0xb1, 0xcb, 0xe1, 0xfe, 0x44, 0x0d, 0x77, 0x09, 0x5b, 0xa5, 0x7d, 0xab, 0x30, 0x90, 0x05, 0x68,
	0x85, 0xf5, 0x67, 0x70, 0xbb, 0xe7, 0xde, 0x56, 0x1f, 0xf1, 0xb7, 0x11, 0x7d, 0x55, 0xbf, 0xe1,
	0xd5, 0xc4, 0xfc, 0x7b, 0xf0, 0xf6, 0x51, 0x1e, 0x54, 0xfa, 0xb7, 0xd1, 0xc1, 0xf5, 0x3e, 0x0e,
	0x94, 0x1e, 0xf4, 0xc5, 0xd7, 0x45, 0xfe, 0x2b, 0xfd, 0xf0, 0xcb, 0xb1, 0x2f, 0x64, 0xa4, 0x06,
	0x5f, 0xa5, 0x7f, 0xa7, 0x90, 0x91, 0x25, 0x78, 0x85, 0xbd, 0x0b, 0x77, 0xfa, 0xbc, 0x20, 0xd0,
	0x8f, 0xc0, 0x5d, 0xf4, 0xb0, 0xd6, 0xeb, 0xad, 0x81, 0x66, 0x0c, 0xf6, 0xe0, 0x2b, 0x47, 0x7b,
	0x51, 0xbb, 0x51, 0x43, 0x27, 0x37, 0xfa, 0x3a, 0x51, 0x7a, 0x72, 0x84, 0x0f, 0xdd, 0x48, 0xac,
	0xf7, 0xf7, 0x51, 0x1e, 0x8b, 0xcf, 0xe0, 0xf6, 0x91, 0x3e, 0xd4, 0x6e, 0xdc, 0x93, 0xd9, 0xda,
	0xcf, 0xc5, 0x1b, 0x8f, 0x47, 0xaf, 0x7a, 0xff, 0xd5, 0x7e, 0xe3, 0xa1, 0x2d, 0xfa, 0xfd, 0x62,
	0xd5, 0xa3, 0xf0, 0x7f, 0xad, 0x5f, 0xac, 0x74, 0xd5, 0xff, 0x08, 0x1f, 0xba, 0xf1, 0x78, 0xa7,
	0xbf, 0x8f, 0x3f, 0x6e, 0x3c, 0xf4, 0x53, 0xc1, 0xfd, 0x7e, 0xe3, 0xa1, 0x99, 0x0f, 0x68, 0x79,
	0x3c, 0x8e, 0x9c, 0x13, 0xde, 0x45, 0x1f, 0x37, 0x7b, 0xbe, 0xd7, 0xd2, 0x0c, 0x88, 0x53, 0x0e,
	0xd6, 0x51, 0x93, 0xc3, 0x7b, 0xba, 0x51, 0xef, 0x3b, 0x43, 0x1c, 0xe1, 0x44, 0x37, 0x22, 0xef,
	0x1f, 0xe1, 0xa4, 0x3c, 0x24, 0xa4, 0x3c, 0x24, 0x47, 0x4c, 0x17, 0x0f, 0x74, 0xa3, 0xde, 0x6f,
	0xce, 0xf0, 0xa0, 0xd6, 0xf7, 0xb5, 0xa0, 0x7e, 0x54, 0x3e, 0x40, 0x37, 0x6f, 0xf7, 0x79, 0x57,
	0xa8, 0x19, 0x97, 0x06, 0xdc, 0x7d, 0x13, 0x57, 0x6a, 0x87, 0x1e, 0xa2, 0xa7, 0x5b, 0x47, 0x79,
	0x52, 0xfa, 0x74, 0xa4, 0x23, 0xdd, 0xe8, 0x7c, 0xfd, 0x48, 0x47, 0xe5, 0xf1, 0xd1, 0x24, 0xf4,
	0x91, 0x53, 0xca, 0x23, 0x5d, 0x42, 0xf7, 0x9d, 0x57, 0x56, 0xfe, 0xe5, 0x3a, 0x4c, 0x14, 0xbe,
	0xcc, 0x90, 0xfd, 0xeb, 0x6f, 0x14, 0x32, 0x6e, 0x13, 0x57, 0x54, 0xcc, 0x98, 0x13, 0x4e, 0x93,
	0x5a, 0x3f, 0x9d, 0x09, 0x37, 0x84, 0xec, 0xa5, 0x10, 0x19, 0xd7, 0x60, 0x3c, 0x3d, 0x7b, 0x64,
	0x34, 0xa6, 0x01, 0xc7, 0xa2, 0x3d, 0x62, 0x8d, 0xc9, 0xd6, 0x1d, 0xd9, 0x68, 0x2c, 0xc1, 0x68,
	0x7a, 0xc2, 0x78, 0x18, 0xd1, 0xa4, 0xea, 0x82, 0x6c, 0xc2, 0x73, 0xb5, 0x2b, 0x90, 0x58, 0xd8,
	0xad, 0xd0, 0x6d, 0xfb, 0x34, 0x29, 0x9a, 0xe7, 0x64, 0xe3, 0x73, 0x6c, 0x33, 0xd6, 0x60, 0xca,
	0x3d, 0x70, 0x5b, 0xb6, 0x43, 0x18, 0xf3, 0x28, 0xb3, 0xf7, 0x48, 0x90, 0x16, 0xbe, 0x09, 0x21,
	0xd8, 0x94, 0xed, 0x8f, 0x49, 0xe0, 0x1a, 0x77, 0x60, 0x46, 0xd1, 0x75, 0x9a, 0x24, 0x08, 0xa8,
	0x9f, 0xd4, 0x30, 0x23, 0xa7, 0xbe, 0x29, 0x25, 0xc6, 0x3d, 0x98, 0x53, 0x2c, 0xba, 0xff, 0xcb,
	0x2c, 0x8b, 0xd2, 0x4c, 0xce, 0xa6, 0xfb, 0x0f, 0xcd, 0x5f, 0x83, 0xf3, 0x8a, 0xd5, 0x01, 0xd9,
	0xa7, 0x3e, 0x0d, 0x1a, 0xbc, 0x99, 0xd4, 0x99, 0xd9, 0x9c, 0xd9, 0xeb, 0x4c, 0x68, 0x5c, 0x87,
	0x89, 0x06, 0xa3, 0x87, 0x79, 0xfd, 0xf7, 0xf0, 0x9f, 0x88, 0xc7, 0x45, 0x73, 0x4e, 0x71, 0x15,
	0x26, 0xf1, 0x82, 0xc9, 0x41, 0xe1, 0xb1, 0x9f, 0xb2, 0xc6, 0x59, 0x47, 0xc9, 0xd1, 0x35, 0x98,
	0x62, 0x9d, 0x62, 0x0e, 0x3e, 0x90, 0x47, 0x4a, 0xac, 0xa3, 0xa6, 0xd9, 0x2d, 0x30, 0xfc, 0x3d,
	0x47, 0xf7, 0x0c, 0x4e, 0x59, 0x93, 0xfe, 0x9e, 0xa3, 0x6a, 0xaf, 0xc2, 0x24, 0xef, 0x68, 0x9e,
	0xa2, 0x29, 0x6b, 0x9c, 0x97, 0x38, 0xf0, 0x8e, 0xee, 0x39, 0x98, 0xb2, 0x26, 0x78, 0x81, 0xc3,
	0xdb, 0x30, 0x2d, 0x38, 0xf0, 0xa6, 0xd4, 0x77, 0xa9, 0xbc, 0xd6, 0xfa, 0x28, 0x23, 0xb1, 0xdb,
	0x14, 0x06, 0x5b, 0xb2, 0xdd, 0xb8, 0x29, 0x29, 0xf3, 0x26, 0x12, 0x49, 0xb5, 0x37, 0x24, 0x36,
	0x6a, 0x6f, 0x87, 0x07, 0xa9, 0xf2, 0x2d, 0x30, 0xc4, 0x6e, 0xba, 0xc0, 0xf9, 0xb1, 0x84, 0x16,
	0x12, 0x85, 0xf5, 0x6d, 0x98, 0x46, 0xed, 0x02, 0xef, 0x4d, 0x54, 0x9f, 0x12, 0xa2, 0x52, 0xf4,
	0xf6, 0x43, 0x9f, 0x17, 0xd0, 0xb7, 0x24, 0xba, 0x90, 0x14, 0xd1, 0x51, 0xbb, 0x80, 0xfe, 0x44,
	0xa2, 0x0b, 0x91, 0x8a, 0x3e, 0x0e, 0x27, 0x1c, 0xd7, 0x7c, 0x8a, 0xe2, 0x13, 0x8e, 0x6b, 0xcc,
	0xc2, 0x19, 0x47, 0x9e, 0x07, 0x7d, 0x88, 0x6d, 0xa7, 0x1d, 0x3c, 0xfc, 0x49, 0x9a, 0x49, 0xc7,
	0xfc, 0x28, 0x6b, 0x26, 0x1d, 0x31, 0x56, 0x8e, 0x5b, 0x60, 0xf6, 0x4c, 0x8e, 0x95, 0xe3, 0x16,
	0xc7, 0xca, 0x71, 0x8b, 0xac, 0x3e, 0x96, 0xf1, 0x74, 0xdc, 0x52, 0x8f, 0x43, 0x3c, 0xf1, 0x55,
	0x70, 0xbf, 0x91, 0x1c, 0xa6, 0xc7, 0x01, 0x53, 0x90, 0x6f, 0x81, 0xe1, 0x36, 0x4a, 0xd0, 0xdb,
	0x52, 0xdb, 0x6d, 0x14, 0xb0, 0x1f, 0xc1, 0xc5, 0x28, 0xf4, 0x09, 0xf3, 0x7e, 0x28, 0x0f, 0xc7,
	0x5b, 0xa1, 0x4b, 0x6d, 0xd7, 0x8b, 0x23, 0xca, 0x62, 0x2f, 0x0c, 0xcc, 0xe7, 0xc9, 0x8b, 0xe4,
	0x9c, 0xce, 0xf3, 0xd0, 0xa5, 0x5b, 0x99, 0x86, 0xf1, 0x09, 0xdc, 0x88, 0xa9, 0x13, 0x06, 0xae,
	0x1d, 0x32, 0x97, 0x32, 0xbb, 0x2f, 0xdc, 0x0b, 0xb9, 0xb3, 0x92, 0x06, 0xdf, 0x14, 0xfa, 0x3b,
	0xbd, 0x91, 0x1f, 0xc1, 0x22, 0x96, 0x20, 0xe2, 0xa7, 0x5f, 0x43, 0xe0, 0xa1, 0x1d, 0x84, 0x5e,
	0x4c, 0x6d, 0x26, 0xf4, 0xcd, 0x6f, 0xca, 0x37, 0xd4, 0x89, 0x92, 0xfc, 0x2a, 0xc2, 0x6e, 0xf8,
	0x42, 0x68, 0x58, 0x42, 0xc1, 0x78, 0x08, 0x0b, 0x0a, 0x1d, 0x97, 0x46, 0x34, 0x70, 0xf1, 0xcc,
	0x37, 0x8c, 0x63, 0x73, 0x27, 0x79, 0xc3, 0x9d, 0x53, 0xd9, 0x4a, 0x35, 0xb6, 0xc3, 0x38, 0x36,
	0xee, 0x83, 0xa9, 0xd8, 0x8b, 0x42, 0xd6, 0x40, 0xef, 0xd4, 0xfc, 0x93, 0xe4, 0x70, 0x31, 0x27,
	0xdf, 0x44, 0xb1, 0x25, 0x6a, 0xf3, 0x7d, 0x30, 0x5d, 0xaf, 0x5e, 0xa7, 0x8c, 0x06, 0xdc, 0x23,
	0xbe, 0xdd, 0x60, 0x61, 0x3b, 0xb2, 0x5d, 0xea, 0x93, 0x43, 0xd3, 0x92, 0x96, 0x79, 0xf9, 0x87,
	0x42, 0xbc, 0x25, 0xa4, 0xa2, 0x5c, 0x47, 0x4d, 0x12, 0x53, 0xd9, 0x53, 0xf3, 0xa5, 0x2c, 0xd7,
	0xd8, 0x84, 0x3d, 0x33, 0x16, 0xa0, 0x1a, 0xb5, 0x6c, 0x1a, 0x90, 0x3d, 0x9f, 0x9a, 0xbb, 0x58,
	0xb7, 0x46, 0xa2, 0xd6, 0x13, 0xfc, 0x2d, 0xac, 0x93, 0xeb, 0x55, 0x38, 0x7b, 0x7c, 0x4b, 0x5a,
	0x63, 0x93, 0x9c, 0x34, 0x16, 0xa0, 0xea, 0x53, 0x37, 0x11, 0xbf, 0x42, 0xf1, 0x88, 0x4f, 0x5d,
	0x29, 0xfc, 0xa7, 0x0a, 0x4c, 0x95, 0x3e, 0xca, 0x63, 0xbe, 0xc6, 0x5b, 0x32, 0x6c, 0xb0, 0x5f,
	0xdf, 0xc1, 0x8f, 0x45, 0x4c, 0xe4, 0x3e, 0xbc, 0x83, 0x37, 0x58, 0x7e, 0x55, 0x81, 0x6a, 0xf6,
	0x2d, 0x11, 0xf3, 0x13, 0xfc, 0x2c, 0xd0, 0xf7, 0x8f, 0x9d, 0x58, 0xe6, 0xd1, 0x1a, 0x11, 0x7f,
	0x6e, 0x11, 0x4e, 0x8c, 0x1b, 0x30, 0x99, 0xf3, 0x24, 0xc3, 0xf9, 0xa9, 0x9c, 0x0e, 0xbb, 0xed,
	0x32, 0xaa, 0x4b, 0x30, 0x5a, 0x0f, 0x59, 0xcb, 0xae, 0x13, 0x87, 0x87, 0xcc, 0xfc, 0xb6, 0x1c,
	0x13, 0xd1, 0xf4, 0x14, 0x5b, 0x8c, 0x79, 0x18, 0x89, 0x9a, 0x87, 0x72, 0x7a, 0xfe, 0x0e, 0x4a,
	0xcf, 0x46, 0xcd, 0x43, 0x9c, 0x9b, 0xff, 0xa1, 0x92, 0xdd, 0xcf, 0xc9, 0x7d, 0xb5, 0xe3, 0xbb,
	0x38, 0x22, 0x9f, 0x1f, 0x7b, 0xc7, 0x73, 0xdf, 0xed, 0x48, 0x56, 0x2c, 0xd9, 0x97, 0x3b, 0x8c,
	0xbf, 0xaa, 0xc0, 0x78, 0xc8, 0x15, 0x5a, 0x7f, 0x8a, 0xb4, 0x9a, 0xc7, 0x44, 0xab, 0x74, 0x45,
	0xd7, 0x3a, 0x17, 0xf2, 0x1c, 0xa1, 0x65, 0x38, 0xe7, 0xd4, 0x1b, 0xdd, 0xfb, 0xba, 0xdf, 0xc3,
	0x6a, 0x0a, 0x4e, 0xbd, 0x91, 0x5e, 0xa2, 0x7d, 0x17, 0xe6, 0xf3, 0x1a, 0xc9, 0x95, 0xb5, 0x36,
	0xc3, 0x27, 0xc9, 0xc6, 0xb5, 0xd3, 0x5c, 0x57, 0x7d, 0x33, 0x27, 0x35, 0x96, 0x61, 0x34, 0x7f,
	0xa1, 0xe7, 0x33, 0xc4, 0xce, 0x37, 0x19, 0x26, 0x9c, 0x15, 0xd3, 0x09, 0x69, 0x50, 0x93, 0xa0,
	0x34, 0xfd, 0x89, 0x4b, 0x27, 0x2f, 0x8e, 0x7c, 0x72, 0x68, 0xe3, 0x5c, 0x24, 0xac, 0xcc, 0x3d,
	0x74, 0x37, 0x91, 0x08, 0x5e, 0x85, 0x3e, 0xdf, 0xa5, 0xad, 0x48, 0x2c, 0x4d, 0x1c, 0x57, 0x25,
	0xe6, 0xa0, 0xe6, 0xb8, 0xe3, 0x2a, 0x84, 0x16, 0x21, 0x59, 0xc2, 0xd9, 0x75, 0xea, 0x98, 0xae,
	0xbc, 0x37, 0x23, 0x5b, 0x9e, 0x52, 0x07, 0x8b, 0x84, 0x58, 0x4a, 0x62, 0x4e, 0x51, 0xf9, 0x98,
	0x8b, 0x06, 0x4c, 0x2a, 0x51, 0x62, 0x84, 0x50, 0x64, 0x6d, 0x3b, 0x36, 0xeb, 0x49, 0x89, 0x09,
	0x19, 0x7f, 0x89, 0x2d, 0x62, 0x0e, 0x61, 0x1d, 0x7b, 0x3f, 0x24, 0x36, 0xe1, 0x9c, 0x06, 0x6d,
	0xac, 0x6e, 0x66, 0x43, 0xce, 0xb1, 0xac, 0xf3, 0x2a, 0x24, 0x1b, 0xdd, 0x76, 0x9c, 0xef, 0xcb,
	0xda, 0xcd, 0x64, 0xbe, 0x2f, 0x6a, 0x2f, 0x02, 0xc8, 0x5b, 0x83, 0x0d, 0xe2, 0x05, 0xa6, 0x87,
	0x5a, 0x55, 0x6c, 0xf9, 0x90, 0x78, 0x39, 0x31, 0xf7, 0x7c, 0x6e, 0x7e, 0x3f, 0x27, 0xde, 0xf5,
	0x7c, 0x6e, 0xbc, 0x03, 0x66, 0x7a, 0x05, 0x5a, 0xac, 0x46, 0x94, 0x40, 0x7d, 0x8e, 0x81, 0x9a,
	0x65, 0x72, 0xf8, 0x76, 0x9b, 0x4a, 0xbc, 0xde, 0x01, 0x93, 0xf7, 0x32, 0xf4, 0xa5, 0x21, 0xd7,
	0x1a, 0x3e, 0x82, 0xc5, 0x72, 0x2c, 0xd2, 0xdb, 0x8e, 0xfb, 0xc4, 0x37, 0x5b, 0xf2, 0xe4, 0xbb,
	0x18, 0x16, 0x09, 0xf2, 0x8a, 0xf8, 0x02, 0x81, 0xf7, 0x45, 0x08, 0x24, 0x02, 0xef, 0x87, 0x90,
	0xdc, 0xb4, 0x94, 0x0f, 0x93, 0x9c, 0x57, 0x73, 0x08, 0xa1, 0x9c, 0xc9, 0x50, 0x69, 0x53, 0xea,
	0x88, 0xc9, 0xb4, 0x8b, 0xf0, 0x00, 0x16, 0xba, 0x51, 0xb7, 0x19, 0x4e, 0x63, 0x39, 0xfb, 0x08,
	0xed, 0xcf, 0x67, 0xc3, 0x60, 0x09, 0x85, 0xae, 0xf5, 0x5d, 0x98, 0xcd, 0x59, 0xe7, 0xec, 0x7e,
	0x20, 0x2f, 0x89, 0x65, 0x76, 0x1a, 0x13, 0x31, 0x8e, 0x79, 0x13, 0x96, 0x33, 0x11, 0x43, 0xda,
	0x35, 0x79, 0x0c, 0x97, 0x92, 0x5e, 0xca, 0x5d, 0x81, 0xf2, 0x94, 0xa2, 0x6d, 0x2c, 0xcf, 0x10,
	0x65, 0x37, 0xa5, 0x52, 0xee, 0x51, 0x15, 0x18, 0xcf, 0x60, 0x45, 0xb5, 0x6e, 0x91, 0x8e, 0x98,
	0x76, 0x39, 0xc9, 0xe3, 0x70, 0x79, 0xe5, 0xc1, 0xc9, 0x41, 0x3c, 0x27, 0x9d, 0x2d, 0xa1, 0xd6,
	0x85, 0x7a, 0x0a, 0x97, 0x73, 0x9d, 0xe6, 0x4d, 0x96, 0x5e, 0xf0, 0xce, 0x23, 0xb5, 0xe5, 0xd1,
	0x68, 0x16, 0x80, 0xdd, 0x26, 0x93, 0xb7, 0xb0, 0xbb, 0x38, 0x1f, 0xc1, 0x8a, 0x06, 0x07, 0xd7,
	0x67, 0x39, 0xa0, 0x7d, 0x79, 0xe0, 0x5b, 0x00, 0x12, 0x8b, 0xb5, 0x2e, 0xd2, 0x5b, 0x30, 0x11,
	0xc6, 0xcc, 0xcb, 0x9b, 0x1d, 0x24, 0x3b, 0xbe, 0x98, 0x79, 0x4a, 0x20, 0x63, 0x52, 0xa7, 0xfc,
	0xb0, 0x67, 0xbe, 0x74, 0xe4, 0xb2, 0x4e, 0x6a, 0x69, 0x13, 0xe6, 0x2a, 0x8c, 0xf3, 0x90, 0x13,
	0xbf, 0xfb, 0x1f, 0x07, 0x87, 0xf2, 0xfa, 0x1e, 0xb6, 0xa6, 0xff, 0x08, 0x90, 0x69, 0x65, 0x55,
	0xf7, 0x87, 0x39, 0xad, 0xb4, 0xee, 0xfe, 0x63, 0x05, 0x26, 0xf3, 0xb7, 0x5b, 0x71, 0xb2, 0xf8,
	0x11, 0x4e, 0x16, 0xad, 0x63, 0x9d, 0xc3, 0x8a, 0x57, 0x6a, 0xad, 0x89, 0x5c, 0x0b, 0x4e, 0x1a,
	0xab, 0x30, 0xe9, 0xc5, 0xf6, 0x5e, 0x98, 0x15, 0x04, 0xea, 0x9a, 0x7f, 0x26, 0x0b, 0xae, 0x17,
	0x3f, 0x0e, 0x37, 0xb3, 0x56, 0xb1, 0x05, 0xf2, 0x72, 0x77, 0x34, 0x45, 0x18, 0x3d, 0xd7, 0xfc,
	0xb1, 0x2c, 0xe3, 0x5e, 0xfc, 0xa4, 0xc3, 0x77, 0x44, 0xfb, 0x2b, 0xd1, 0x6c, 0x7c, 0x51, 0x81,
	0x31, 0x45, 0xd5, 0xfc, 0x73, 0xec, 0x6e, 0xfd, 0x78, 0xa7, 0xec, 0xd4, 0xa3, 0x35, 0x4a, 0xbb,
	0x74, 0x8c, 0x7f, 0xad, 0xc0, 0xf9, 0x2e, 0x99, 0xee, 0x2d, 0x2f, 0x41, 0xeb, 0x27, 0x48, 0x2b,
	0x3a, 0x76, 0x5a, 0x85, 0xbb, 0x65, 0xd6, 0x4c, 0x4a, 0x30, 0xdb, 0x8a, 0xc8, 0x04, 0x1f, 0xcf,
	0xae, 0x4b, 0xcb, 0x2f, 0x7f, 0xfd, 0x54, 0x7e, 0xfa, 0x6b, 0x0c, 0x9b, 0xb3, 0xaf, 0x7f, 0xdd,
	0xc7, 0x59, 0x40, 0x3c, 0x8a, 0x07, 0x84, 0x05, 0x5e, 0xd0, 0xc8, 0xed, 0x74, 0x7e, 0x96, 0x5c,
	0x4d, 0xc3, 0x0d, 0xfa, 0x6b, 0x29, 0xee, 0xee, 0x77, 0xde, 0x83, 0xf9, 0x74, 0x9f, 0x5e, 0x36,
	0xfd, 0xb9, 0x34, 0x9d, 0x93, 0x1b, 0xf6, 0x92, 0xed, 0x7d, 0x9c, 0x42, 0xf4, 0x5e, 0x7f, 0x91,
	0x78, 0xe5, 0xbd, 0xbc, 0xf2, 0x9e, 0x5e, 0x7f, 0x99, 0x78, 0xe5, 0x7a, 0xaf, 0x1f, 0xc0, 0x42,
	0x7e, 0xa7, 0x9e, 0xda, 0xa7, 0x7b, 0xf0, 0xbf, 0xa8, 0x24, 0xb7, 0x48, 0xd3, 0x2d, 0x7b, 0x02,
	0x90, 0x6e, 0xc6, 0xdf, 0x87, 0x0b, 0xb9, 0x9d, 0x7b, 0xd1, 0xfa, 0x2f, 0x13, 0xdf, 0xe9, 0x16,
	0xbe, 0x60, 0xfc, 0x00, 0x2e, 0x64, 0x3b, 0xf9, 0x32, 0xf1, 0x5f, 0x25, 0xae, 0x93, 0x2d, 0x7d,
	0x89, 0xf9, 0x43, 0x58, 0xe8, 0xee, 0xec, 0xcb, 0xe6, 0xbf, 0x96, 0xe6, 0x66, 0xba, 0xc5, 0x2f,
	0xd9, 0x3f, 0x80, 0x0b, 0xd9, 0x4e, 0xbf, 0x6c, 0xfe, 0x9b, 0xc4, 0x7b, 0xb2, 0xe5, 0xd7, 0x79,
	0xef, 0xee, 0xfc, 0xcb, 0xe6, 0x5f, 0x24, 0xde, 0xd3, 0x57, 0x00, 0x45, 0xfb, 0xbd, 0x33, 0xf8,
	0x6d, 0xd6, 0xf5, 0xff, 0x0b, 0x00, 0x00, 0xff, 0xff, 0xd5, 0xcb, 0x4e, 0x56, 0xb4, 0x55, 0x00,
	0x00,
}
