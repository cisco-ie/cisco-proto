/*
Copyright 2019 Cisco Systems

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: udp_sh_brief_bag.proto

package cisco_ios_xr_ip_udp_oper_udp_connection_nodes_node_pcb_briefs_pcb_brief

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type UdpShBriefBag_KEYS struct {
	NodeName             string   `protobuf:"bytes,1,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	PcbAddress           uint32   `protobuf:"varint,2,opt,name=pcb_address,json=pcbAddress,proto3" json:"pcb_address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UdpShBriefBag_KEYS) Reset()         { *m = UdpShBriefBag_KEYS{} }
func (m *UdpShBriefBag_KEYS) String() string { return proto.CompactTextString(m) }
func (*UdpShBriefBag_KEYS) ProtoMessage()    {}
func (*UdpShBriefBag_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_4f4b431cfae5125a, []int{0}
}

func (m *UdpShBriefBag_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UdpShBriefBag_KEYS.Unmarshal(m, b)
}
func (m *UdpShBriefBag_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UdpShBriefBag_KEYS.Marshal(b, m, deterministic)
}
func (m *UdpShBriefBag_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UdpShBriefBag_KEYS.Merge(m, src)
}
func (m *UdpShBriefBag_KEYS) XXX_Size() int {
	return xxx_messageInfo_UdpShBriefBag_KEYS.Size(m)
}
func (m *UdpShBriefBag_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_UdpShBriefBag_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_UdpShBriefBag_KEYS proto.InternalMessageInfo

func (m *UdpShBriefBag_KEYS) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

func (m *UdpShBriefBag_KEYS) GetPcbAddress() uint32 {
	if m != nil {
		return m.PcbAddress
	}
	return 0
}

type UdpAddressType struct {
	AfName               string   `protobuf:"bytes,1,opt,name=af_name,json=afName,proto3" json:"af_name,omitempty"`
	Ipv4Address          string   `protobuf:"bytes,2,opt,name=ipv4_address,json=ipv4Address,proto3" json:"ipv4_address,omitempty"`
	Ipv6Address          string   `protobuf:"bytes,3,opt,name=ipv6_address,json=ipv6Address,proto3" json:"ipv6_address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UdpAddressType) Reset()         { *m = UdpAddressType{} }
func (m *UdpAddressType) String() string { return proto.CompactTextString(m) }
func (*UdpAddressType) ProtoMessage()    {}
func (*UdpAddressType) Descriptor() ([]byte, []int) {
	return fileDescriptor_4f4b431cfae5125a, []int{1}
}

func (m *UdpAddressType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UdpAddressType.Unmarshal(m, b)
}
func (m *UdpAddressType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UdpAddressType.Marshal(b, m, deterministic)
}
func (m *UdpAddressType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UdpAddressType.Merge(m, src)
}
func (m *UdpAddressType) XXX_Size() int {
	return xxx_messageInfo_UdpAddressType.Size(m)
}
func (m *UdpAddressType) XXX_DiscardUnknown() {
	xxx_messageInfo_UdpAddressType.DiscardUnknown(m)
}

var xxx_messageInfo_UdpAddressType proto.InternalMessageInfo

func (m *UdpAddressType) GetAfName() string {
	if m != nil {
		return m.AfName
	}
	return ""
}

func (m *UdpAddressType) GetIpv4Address() string {
	if m != nil {
		return m.Ipv4Address
	}
	return ""
}

func (m *UdpAddressType) GetIpv6Address() string {
	if m != nil {
		return m.Ipv6Address
	}
	return ""
}

type UdpShBriefBag struct {
	AfName               string          `protobuf:"bytes,50,opt,name=af_name,json=afName,proto3" json:"af_name,omitempty"`
	LocalAddress         *UdpAddressType `protobuf:"bytes,51,opt,name=local_address,json=localAddress,proto3" json:"local_address,omitempty"`
	ForeignAddress       *UdpAddressType `protobuf:"bytes,52,opt,name=foreign_address,json=foreignAddress,proto3" json:"foreign_address,omitempty"`
	LocalPort            uint32          `protobuf:"varint,53,opt,name=local_port,json=localPort,proto3" json:"local_port,omitempty"`
	ForeignPort          uint32          `protobuf:"varint,54,opt,name=foreign_port,json=foreignPort,proto3" json:"foreign_port,omitempty"`
	ReceiveQueue         uint32          `protobuf:"varint,55,opt,name=receive_queue,json=receiveQueue,proto3" json:"receive_queue,omitempty"`
	SendQueue            uint32          `protobuf:"varint,56,opt,name=send_queue,json=sendQueue,proto3" json:"send_queue,omitempty"`
	VrfId                uint32          `protobuf:"varint,57,opt,name=vrf_id,json=vrfId,proto3" json:"vrf_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *UdpShBriefBag) Reset()         { *m = UdpShBriefBag{} }
func (m *UdpShBriefBag) String() string { return proto.CompactTextString(m) }
func (*UdpShBriefBag) ProtoMessage()    {}
func (*UdpShBriefBag) Descriptor() ([]byte, []int) {
	return fileDescriptor_4f4b431cfae5125a, []int{2}
}

func (m *UdpShBriefBag) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UdpShBriefBag.Unmarshal(m, b)
}
func (m *UdpShBriefBag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UdpShBriefBag.Marshal(b, m, deterministic)
}
func (m *UdpShBriefBag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UdpShBriefBag.Merge(m, src)
}
func (m *UdpShBriefBag) XXX_Size() int {
	return xxx_messageInfo_UdpShBriefBag.Size(m)
}
func (m *UdpShBriefBag) XXX_DiscardUnknown() {
	xxx_messageInfo_UdpShBriefBag.DiscardUnknown(m)
}

var xxx_messageInfo_UdpShBriefBag proto.InternalMessageInfo

func (m *UdpShBriefBag) GetAfName() string {
	if m != nil {
		return m.AfName
	}
	return ""
}

func (m *UdpShBriefBag) GetLocalAddress() *UdpAddressType {
	if m != nil {
		return m.LocalAddress
	}
	return nil
}

func (m *UdpShBriefBag) GetForeignAddress() *UdpAddressType {
	if m != nil {
		return m.ForeignAddress
	}
	return nil
}

func (m *UdpShBriefBag) GetLocalPort() uint32 {
	if m != nil {
		return m.LocalPort
	}
	return 0
}

func (m *UdpShBriefBag) GetForeignPort() uint32 {
	if m != nil {
		return m.ForeignPort
	}
	return 0
}

func (m *UdpShBriefBag) GetReceiveQueue() uint32 {
	if m != nil {
		return m.ReceiveQueue
	}
	return 0
}

func (m *UdpShBriefBag) GetSendQueue() uint32 {
	if m != nil {
		return m.SendQueue
	}
	return 0
}

func (m *UdpShBriefBag) GetVrfId() uint32 {
	if m != nil {
		return m.VrfId
	}
	return 0
}

func init() {
	proto.RegisterType((*UdpShBriefBag_KEYS)(nil), "cisco_ios_xr_ip_udp_oper.udp_connection.nodes.node.pcb_briefs.pcb_brief.udp_sh_brief_bag_KEYS")
	proto.RegisterType((*UdpAddressType)(nil), "cisco_ios_xr_ip_udp_oper.udp_connection.nodes.node.pcb_briefs.pcb_brief.udp_address_type")
	proto.RegisterType((*UdpShBriefBag)(nil), "cisco_ios_xr_ip_udp_oper.udp_connection.nodes.node.pcb_briefs.pcb_brief.udp_sh_brief_bag")
}

func init() { proto.RegisterFile("udp_sh_brief_bag.proto", fileDescriptor_4f4b431cfae5125a) }

var fileDescriptor_4f4b431cfae5125a = []byte{
	// 364 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x92, 0x4f, 0x4b, 0xc3, 0x40,
	0x10, 0xc5, 0x89, 0xc5, 0x6a, 0x26, 0xad, 0x4a, 0xa0, 0x1a, 0x10, 0xb1, 0xd6, 0x4b, 0x4f, 0x39,
	0xb4, 0xb5, 0xea, 0xd1, 0x83, 0x88, 0x08, 0xa2, 0x11, 0x0f, 0x3d, 0x2d, 0xc9, 0x66, 0x52, 0x17,
	0xda, 0xec, 0x76, 0x37, 0x0d, 0x7a, 0xf1, 0xe0, 0xf7, 0xf3, 0x3b, 0xc9, 0x6e, 0xfe, 0xd8, 0xf6,
	0xac, 0x97, 0xb0, 0xbc, 0xfd, 0xe5, 0xbd, 0x37, 0x93, 0xc0, 0xe1, 0x32, 0x16, 0x44, 0xbd, 0x91,
	0x48, 0x32, 0x4c, 0x48, 0x14, 0x4e, 0x7d, 0x21, 0x79, 0xc6, 0xdd, 0x3b, 0xca, 0x14, 0xe5, 0x84,
	0x71, 0x45, 0xde, 0x25, 0x61, 0x82, 0x68, 0x8e, 0x0b, 0x94, 0xbe, 0x3e, 0x50, 0x9e, 0xa6, 0x48,
	0x33, 0xc6, 0x53, 0x3f, 0xe5, 0x31, 0x2a, 0xf3, 0xf4, 0x05, 0x8d, 0x0a, 0x1f, 0xf5, 0x7b, 0xec,
	0xbd, 0x42, 0x67, 0x33, 0x82, 0x3c, 0xdc, 0x4e, 0x5e, 0xdc, 0x63, 0xb0, 0xf5, 0x5b, 0x24, 0x0d,
	0xe7, 0xe8, 0x59, 0x5d, 0xab, 0x6f, 0x07, 0xbb, 0x5a, 0x78, 0x0c, 0xe7, 0xe8, 0x9e, 0x82, 0xa3,
	0x2d, 0xc2, 0x38, 0x96, 0xa8, 0x94, 0xb7, 0xd5, 0xb5, 0xfa, 0xed, 0x00, 0x04, 0x8d, 0x6e, 0x0a,
	0xa5, 0xb7, 0x80, 0x03, 0x6d, 0x5b, 0x02, 0x24, 0xfb, 0x10, 0xe8, 0x1e, 0xc1, 0x4e, 0x98, 0xac,
	0xfa, 0x35, 0xc3, 0xc4, 0xb8, 0x9d, 0x41, 0x8b, 0x89, 0x7c, 0xb4, 0x66, 0x67, 0x07, 0x8e, 0xd6,
	0x4a, 0xbf, 0x12, 0x19, 0xd7, 0x48, 0xa3, 0x46, 0xc6, 0x55, 0xe4, 0x77, 0xa3, 0xc8, 0x5c, 0x1d,
	0x65, 0x35, 0x73, 0xb0, 0x96, 0xf9, 0x09, 0xed, 0x19, 0xa7, 0xe1, 0xac, 0x76, 0x1c, 0x76, 0xad,
	0xbe, 0x33, 0x98, 0xf8, 0x7f, 0xb4, 0x58, 0x7f, 0x73, 0xfc, 0xa0, 0x65, 0xf2, 0xaa, 0x81, 0xbe,
	0x2c, 0xd8, 0x4f, 0xb8, 0x44, 0x36, 0x4d, 0xeb, 0x0a, 0xa3, 0xff, 0xae, 0xb0, 0x57, 0x26, 0x56,
	0x25, 0x4e, 0x00, 0x8a, 0x25, 0x08, 0x2e, 0x33, 0xef, 0xc2, 0x7c, 0x45, 0xdb, 0x28, 0x4f, 0x5c,
	0x66, 0x7a, 0xe9, 0x55, 0x45, 0x03, 0x8c, 0x0d, 0xe0, 0x94, 0x9a, 0x41, 0xce, 0xa1, 0x2d, 0x91,
	0x22, 0xcb, 0x91, 0x2c, 0x96, 0xb8, 0x44, 0xef, 0xd2, 0x30, 0xad, 0x52, 0x7c, 0xd6, 0x9a, 0x8e,
	0x51, 0x98, 0xc6, 0x25, 0x71, 0x55, 0xc4, 0x68, 0xa5, 0xb8, 0xee, 0x40, 0x33, 0x97, 0x09, 0x61,
	0xb1, 0x77, 0x6d, 0xae, 0xb6, 0x73, 0x99, 0xdc, 0xc7, 0x51, 0xd3, 0xfc, 0xe9, 0xc3, 0x9f, 0x00,
	0x00, 0x00, 0xff, 0xff, 0xef, 0x26, 0xa6, 0xa8, 0x03, 0x03, 0x00, 0x00,
}
