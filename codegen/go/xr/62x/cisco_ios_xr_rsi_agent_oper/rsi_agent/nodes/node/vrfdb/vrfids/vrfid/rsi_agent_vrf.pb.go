/*
Copyright 2019 Cisco Systems

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rsi_agent_vrf.proto

package cisco_ios_xr_rsi_agent_oper_rsi_agent_nodes_node_vrfdb_vrfids_vrfid

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type RsiAgentVrf_KEYS struct {
	NodeName             string   `protobuf:"bytes,1,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	Id                   string   `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RsiAgentVrf_KEYS) Reset()         { *m = RsiAgentVrf_KEYS{} }
func (m *RsiAgentVrf_KEYS) String() string { return proto.CompactTextString(m) }
func (*RsiAgentVrf_KEYS) ProtoMessage()    {}
func (*RsiAgentVrf_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_757938b1d0683881, []int{0}
}

func (m *RsiAgentVrf_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RsiAgentVrf_KEYS.Unmarshal(m, b)
}
func (m *RsiAgentVrf_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RsiAgentVrf_KEYS.Marshal(b, m, deterministic)
}
func (m *RsiAgentVrf_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RsiAgentVrf_KEYS.Merge(m, src)
}
func (m *RsiAgentVrf_KEYS) XXX_Size() int {
	return xxx_messageInfo_RsiAgentVrf_KEYS.Size(m)
}
func (m *RsiAgentVrf_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_RsiAgentVrf_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_RsiAgentVrf_KEYS proto.InternalMessageInfo

func (m *RsiAgentVrf_KEYS) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

func (m *RsiAgentVrf_KEYS) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type RsiVpnidT struct {
	Oui                  uint32   `protobuf:"varint,1,opt,name=oui,proto3" json:"oui,omitempty"`
	Index                uint32   `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RsiVpnidT) Reset()         { *m = RsiVpnidT{} }
func (m *RsiVpnidT) String() string { return proto.CompactTextString(m) }
func (*RsiVpnidT) ProtoMessage()    {}
func (*RsiVpnidT) Descriptor() ([]byte, []int) {
	return fileDescriptor_757938b1d0683881, []int{1}
}

func (m *RsiVpnidT) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RsiVpnidT.Unmarshal(m, b)
}
func (m *RsiVpnidT) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RsiVpnidT.Marshal(b, m, deterministic)
}
func (m *RsiVpnidT) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RsiVpnidT.Merge(m, src)
}
func (m *RsiVpnidT) XXX_Size() int {
	return xxx_messageInfo_RsiVpnidT.Size(m)
}
func (m *RsiVpnidT) XXX_DiscardUnknown() {
	xxx_messageInfo_RsiVpnidT.DiscardUnknown(m)
}

var xxx_messageInfo_RsiVpnidT proto.InternalMessageInfo

func (m *RsiVpnidT) GetOui() uint32 {
	if m != nil {
		return m.Oui
	}
	return 0
}

func (m *RsiVpnidT) GetIndex() uint32 {
	if m != nil {
		return m.Index
	}
	return 0
}

type RsiAgentTblRef struct {
	VrfTblIdx            uint32   `protobuf:"varint,1,opt,name=vrf_tbl_idx,json=vrfTblIdx,proto3" json:"vrf_tbl_idx,omitempty"`
	Afi                  string   `protobuf:"bytes,2,opt,name=afi,proto3" json:"afi,omitempty"`
	Safi                 string   `protobuf:"bytes,3,opt,name=safi,proto3" json:"safi,omitempty"`
	TblName              string   `protobuf:"bytes,4,opt,name=tbl_name,json=tblName,proto3" json:"tbl_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RsiAgentTblRef) Reset()         { *m = RsiAgentTblRef{} }
func (m *RsiAgentTblRef) String() string { return proto.CompactTextString(m) }
func (*RsiAgentTblRef) ProtoMessage()    {}
func (*RsiAgentTblRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_757938b1d0683881, []int{2}
}

func (m *RsiAgentTblRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RsiAgentTblRef.Unmarshal(m, b)
}
func (m *RsiAgentTblRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RsiAgentTblRef.Marshal(b, m, deterministic)
}
func (m *RsiAgentTblRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RsiAgentTblRef.Merge(m, src)
}
func (m *RsiAgentTblRef) XXX_Size() int {
	return xxx_messageInfo_RsiAgentTblRef.Size(m)
}
func (m *RsiAgentTblRef) XXX_DiscardUnknown() {
	xxx_messageInfo_RsiAgentTblRef.DiscardUnknown(m)
}

var xxx_messageInfo_RsiAgentTblRef proto.InternalMessageInfo

func (m *RsiAgentTblRef) GetVrfTblIdx() uint32 {
	if m != nil {
		return m.VrfTblIdx
	}
	return 0
}

func (m *RsiAgentTblRef) GetAfi() string {
	if m != nil {
		return m.Afi
	}
	return ""
}

func (m *RsiAgentTblRef) GetSafi() string {
	if m != nil {
		return m.Safi
	}
	return ""
}

func (m *RsiAgentTblRef) GetTblName() string {
	if m != nil {
		return m.TblName
	}
	return ""
}

type RsiAgentVrf struct {
	VrfName              string            `protobuf:"bytes,50,opt,name=vrf_name,json=vrfName,proto3" json:"vrf_name,omitempty"`
	VrfId                uint32            `protobuf:"varint,51,opt,name=vrf_id,json=vrfId,proto3" json:"vrf_id,omitempty"`
	VrId                 uint32            `protobuf:"varint,52,opt,name=vr_id,json=vrId,proto3" json:"vr_id,omitempty"`
	VpnId                *RsiVpnidT        `protobuf:"bytes,53,opt,name=vpn_id,json=vpnId,proto3" json:"vpn_id,omitempty"`
	SubmodeFlag          uint32            `protobuf:"varint,54,opt,name=submode_flag,json=submodeFlag,proto3" json:"submode_flag,omitempty"`
	FallbackVrfName      string            `protobuf:"bytes,55,opt,name=fallback_vrf_name,json=fallbackVrfName,proto3" json:"fallback_vrf_name,omitempty"`
	VrName               string            `protobuf:"bytes,56,opt,name=vr_name,json=vrName,proto3" json:"vr_name,omitempty"`
	Refcount             int32             `protobuf:"zigzag32,57,opt,name=refcount,proto3" json:"refcount,omitempty"`
	IntfCountLocal       int32             `protobuf:"zigzag32,58,opt,name=intf_count_local,json=intfCountLocal,proto3" json:"intf_count_local,omitempty"`
	IntfCountGlobal      int32             `protobuf:"zigzag32,59,opt,name=intf_count_global,json=intfCountGlobal,proto3" json:"intf_count_global,omitempty"`
	NumRealTbls          int32             `protobuf:"zigzag32,60,opt,name=num_real_tbls,json=numRealTbls,proto3" json:"num_real_tbls,omitempty"`
	NumFwdRefTbls        int32             `protobuf:"zigzag32,61,opt,name=num_fwd_ref_tbls,json=numFwdRefTbls,proto3" json:"num_fwd_ref_tbls,omitempty"`
	VrfByVrfIdRegs       int32             `protobuf:"zigzag32,62,opt,name=vrf_by_vrf_id_regs,json=vrfByVrfIdRegs,proto3" json:"vrf_by_vrf_id_regs,omitempty"`
	VrfByVrfNameRegs     int32             `protobuf:"zigzag32,63,opt,name=vrf_by_vrf_name_regs,json=vrfByVrfNameRegs,proto3" json:"vrf_by_vrf_name_regs,omitempty"`
	TblByVrfRegs         int32             `protobuf:"zigzag32,64,opt,name=tbl_by_vrf_regs,json=tblByVrfRegs,proto3" json:"tbl_by_vrf_regs,omitempty"`
	TblByVrfNameRegs     int32             `protobuf:"zigzag32,65,opt,name=tbl_by_vrf_name_regs,json=tblByVrfNameRegs,proto3" json:"tbl_by_vrf_name_regs,omitempty"`
	TableArray           []*RsiAgentTblRef `protobuf:"bytes,66,rep,name=table_array,json=tableArray,proto3" json:"table_array,omitempty"`
	VrfFlags             uint32            `protobuf:"varint,67,opt,name=vrf_flags,json=vrfFlags,proto3" json:"vrf_flags,omitempty"`
	IntfCntLocal         uint32            `protobuf:"varint,68,opt,name=intf_cnt_local,json=intfCntLocal,proto3" json:"intf_cnt_local,omitempty"`
	VrfGroups            uint32            `protobuf:"varint,69,opt,name=vrf_groups,json=vrfGroups,proto3" json:"vrf_groups,omitempty"`
	ParentvrfCnt         uint32            `protobuf:"varint,70,opt,name=parentvrf_cnt,json=parentvrfCnt,proto3" json:"parentvrf_cnt,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *RsiAgentVrf) Reset()         { *m = RsiAgentVrf{} }
func (m *RsiAgentVrf) String() string { return proto.CompactTextString(m) }
func (*RsiAgentVrf) ProtoMessage()    {}
func (*RsiAgentVrf) Descriptor() ([]byte, []int) {
	return fileDescriptor_757938b1d0683881, []int{3}
}

func (m *RsiAgentVrf) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RsiAgentVrf.Unmarshal(m, b)
}
func (m *RsiAgentVrf) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RsiAgentVrf.Marshal(b, m, deterministic)
}
func (m *RsiAgentVrf) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RsiAgentVrf.Merge(m, src)
}
func (m *RsiAgentVrf) XXX_Size() int {
	return xxx_messageInfo_RsiAgentVrf.Size(m)
}
func (m *RsiAgentVrf) XXX_DiscardUnknown() {
	xxx_messageInfo_RsiAgentVrf.DiscardUnknown(m)
}

var xxx_messageInfo_RsiAgentVrf proto.InternalMessageInfo

func (m *RsiAgentVrf) GetVrfName() string {
	if m != nil {
		return m.VrfName
	}
	return ""
}

func (m *RsiAgentVrf) GetVrfId() uint32 {
	if m != nil {
		return m.VrfId
	}
	return 0
}

func (m *RsiAgentVrf) GetVrId() uint32 {
	if m != nil {
		return m.VrId
	}
	return 0
}

func (m *RsiAgentVrf) GetVpnId() *RsiVpnidT {
	if m != nil {
		return m.VpnId
	}
	return nil
}

func (m *RsiAgentVrf) GetSubmodeFlag() uint32 {
	if m != nil {
		return m.SubmodeFlag
	}
	return 0
}

func (m *RsiAgentVrf) GetFallbackVrfName() string {
	if m != nil {
		return m.FallbackVrfName
	}
	return ""
}

func (m *RsiAgentVrf) GetVrName() string {
	if m != nil {
		return m.VrName
	}
	return ""
}

func (m *RsiAgentVrf) GetRefcount() int32 {
	if m != nil {
		return m.Refcount
	}
	return 0
}

func (m *RsiAgentVrf) GetIntfCountLocal() int32 {
	if m != nil {
		return m.IntfCountLocal
	}
	return 0
}

func (m *RsiAgentVrf) GetIntfCountGlobal() int32 {
	if m != nil {
		return m.IntfCountGlobal
	}
	return 0
}

func (m *RsiAgentVrf) GetNumRealTbls() int32 {
	if m != nil {
		return m.NumRealTbls
	}
	return 0
}

func (m *RsiAgentVrf) GetNumFwdRefTbls() int32 {
	if m != nil {
		return m.NumFwdRefTbls
	}
	return 0
}

func (m *RsiAgentVrf) GetVrfByVrfIdRegs() int32 {
	if m != nil {
		return m.VrfByVrfIdRegs
	}
	return 0
}

func (m *RsiAgentVrf) GetVrfByVrfNameRegs() int32 {
	if m != nil {
		return m.VrfByVrfNameRegs
	}
	return 0
}

func (m *RsiAgentVrf) GetTblByVrfRegs() int32 {
	if m != nil {
		return m.TblByVrfRegs
	}
	return 0
}

func (m *RsiAgentVrf) GetTblByVrfNameRegs() int32 {
	if m != nil {
		return m.TblByVrfNameRegs
	}
	return 0
}

func (m *RsiAgentVrf) GetTableArray() []*RsiAgentTblRef {
	if m != nil {
		return m.TableArray
	}
	return nil
}

func (m *RsiAgentVrf) GetVrfFlags() uint32 {
	if m != nil {
		return m.VrfFlags
	}
	return 0
}

func (m *RsiAgentVrf) GetIntfCntLocal() uint32 {
	if m != nil {
		return m.IntfCntLocal
	}
	return 0
}

func (m *RsiAgentVrf) GetVrfGroups() uint32 {
	if m != nil {
		return m.VrfGroups
	}
	return 0
}

func (m *RsiAgentVrf) GetParentvrfCnt() uint32 {
	if m != nil {
		return m.ParentvrfCnt
	}
	return 0
}

func init() {
	proto.RegisterType((*RsiAgentVrf_KEYS)(nil), "cisco_ios_xr_rsi_agent_oper.rsi_agent.nodes.node.vrfdb.vrfids.vrfid.rsi_agent_vrf_KEYS")
	proto.RegisterType((*RsiVpnidT)(nil), "cisco_ios_xr_rsi_agent_oper.rsi_agent.nodes.node.vrfdb.vrfids.vrfid.rsi_vpnid_t")
	proto.RegisterType((*RsiAgentTblRef)(nil), "cisco_ios_xr_rsi_agent_oper.rsi_agent.nodes.node.vrfdb.vrfids.vrfid.rsi_agent_tbl_ref")
	proto.RegisterType((*RsiAgentVrf)(nil), "cisco_ios_xr_rsi_agent_oper.rsi_agent.nodes.node.vrfdb.vrfids.vrfid.rsi_agent_vrf")
}

func init() { proto.RegisterFile("rsi_agent_vrf.proto", fileDescriptor_757938b1d0683881) }

var fileDescriptor_757938b1d0683881 = []byte{
	// 644 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x94, 0x5b, 0x4f, 0xdb, 0x30,
	0x14, 0xc7, 0x55, 0x2e, 0x05, 0x4e, 0x29, 0x14, 0xc3, 0xb4, 0x6c, 0xd3, 0xa6, 0xae, 0xdb, 0xb4,
	0x8a, 0x87, 0x3c, 0xc0, 0xd8, 0xfd, 0x06, 0x1d, 0xa0, 0x6a, 0xd3, 0x34, 0x65, 0x08, 0x69, 0x4f,
	0x96, 0x53, 0xdb, 0x51, 0x34, 0xd7, 0x89, 0xec, 0x34, 0x94, 0x8f, 0xb2, 0x6f, 0x3b, 0x9d, 0x93,
	0x36, 0x94, 0x77, 0x5e, 0x52, 0xfb, 0xef, 0x9f, 0xff, 0x3e, 0xc7, 0xe7, 0xb8, 0xb0, 0xeb, 0x7c,
	0xca, 0x45, 0xa2, 0x6c, 0xc1, 0x4b, 0xa7, 0xc3, 0xdc, 0x65, 0x45, 0xc6, 0x06, 0xa3, 0xd4, 0x8f,
	0x32, 0x9e, 0x66, 0x9e, 0x4f, 0x1d, 0xbf, 0x21, 0xb2, 0x5c, 0xb9, 0xb0, 0x9e, 0x86, 0x36, 0x93,
	0xca, 0xd3, 0x37, 0x2c, 0x9d, 0x96, 0x31, 0x7e, 0x53, 0xe9, 0xab, 0x9f, 0xde, 0x31, 0xb0, 0x5b,
	0xde, 0xfc, 0xfb, 0xe9, 0x9f, 0xdf, 0xec, 0x11, 0x6c, 0xe0, 0x06, 0x6e, 0xc5, 0x58, 0x05, 0x8d,
	0x6e, 0xa3, 0xbf, 0x11, 0xad, 0xa3, 0xf0, 0x53, 0x8c, 0x15, 0xdb, 0x82, 0xa5, 0x54, 0x06, 0x4b,
	0xa4, 0x2e, 0xa5, 0xb2, 0x77, 0x04, 0x2d, 0xb4, 0x28, 0x73, 0x9b, 0x4a, 0x5e, 0xb0, 0x0e, 0x2c,
	0x67, 0x93, 0x94, 0x76, 0xb5, 0x23, 0x1c, 0xb2, 0x3d, 0x58, 0x4d, 0xad, 0x54, 0x53, 0xda, 0xd3,
	0x8e, 0xaa, 0x49, 0xaf, 0x80, 0x9d, 0x9b, 0x93, 0x8b, 0xd8, 0x70, 0xa7, 0x34, 0x7b, 0x02, 0x2d,
	0x0c, 0x02, 0xa7, 0xa9, 0x9c, 0xce, 0x4c, 0x36, 0x4a, 0xa7, 0x2f, 0x62, 0x33, 0x94, 0x53, 0x34,
	0x17, 0x3a, 0x9d, 0x1d, 0x8e, 0x43, 0xc6, 0x60, 0xc5, 0xa3, 0xb4, 0x4c, 0x12, 0x8d, 0xd9, 0x03,
	0x58, 0x47, 0x07, 0x8a, 0x7e, 0x85, 0xf4, 0xb5, 0x22, 0x36, 0x18, 0x7c, 0xef, 0xdf, 0x1a, 0xb4,
	0x6f, 0x25, 0x8c, 0x30, 0x1e, 0x49, 0xf0, 0x41, 0x05, 0x97, 0x4e, 0x53, 0xa6, 0xf7, 0xa0, 0x89,
	0x4b, 0xa9, 0x0c, 0x0e, 0xab, 0xc8, 0x4b, 0xa7, 0x87, 0x92, 0xed, 0xc2, 0x6a, 0xe9, 0x50, 0x7d,
	0x45, 0xea, 0x4a, 0xe9, 0x86, 0x92, 0x25, 0xd0, 0x2c, 0x73, 0x8b, 0xea, 0x51, 0xb7, 0xd1, 0x6f,
	0x1d, 0xfc, 0x0a, 0xef, 0xa0, 0x3c, 0xe1, 0xc2, 0xc5, 0x46, 0xab, 0x65, 0x6e, 0x87, 0x92, 0x3d,
	0x85, 0x4d, 0x3f, 0x89, 0xc7, 0x58, 0x1e, 0x6d, 0x44, 0x12, 0xbc, 0xa6, 0x20, 0x5a, 0x33, 0xed,
	0xcc, 0x88, 0x84, 0xed, 0xc3, 0x8e, 0x16, 0xc6, 0xc4, 0x62, 0xf4, 0x97, 0xd7, 0xb9, 0xbd, 0xa1,
	0xdc, 0xb6, 0xe7, 0x0b, 0x97, 0xb3, 0x1c, 0xef, 0xc3, 0x5a, 0xe9, 0x2a, 0xe2, 0x2d, 0x11, 0xcd,
	0xd2, 0xd1, 0xc2, 0x43, 0x58, 0x77, 0x4a, 0x8f, 0xb2, 0x89, 0x2d, 0x82, 0x77, 0xdd, 0x46, 0x7f,
	0x27, 0xaa, 0xe7, 0xac, 0x0f, 0x9d, 0xd4, 0x16, 0x9a, 0xd3, 0x8c, 0x9b, 0x6c, 0x24, 0x4c, 0xf0,
	0x9e, 0x98, 0x2d, 0xd4, 0x07, 0x28, 0xff, 0x40, 0x15, 0x43, 0x59, 0x20, 0x13, 0x93, 0xc5, 0xc2,
	0x04, 0x1f, 0x08, 0xdd, 0xae, 0xd1, 0x73, 0x92, 0x59, 0x0f, 0xda, 0x76, 0x32, 0xe6, 0x4e, 0x09,
	0x83, 0x1d, 0xe0, 0x83, 0x8f, 0xc4, 0xb5, 0xec, 0x64, 0x1c, 0x29, 0x61, 0x2e, 0x62, 0xe3, 0xd9,
	0x4b, 0xe8, 0x20, 0xa3, 0xaf, 0x24, 0xf6, 0x4b, 0x85, 0x7d, 0x22, 0x0c, 0xf7, 0x9e, 0x5d, 0xc9,
	0x48, 0x69, 0x02, 0xf7, 0x81, 0x61, 0xea, 0xf1, 0x35, 0xaf, 0x4a, 0xc8, 0x9d, 0x4a, 0x7c, 0xf0,
	0xb9, 0x0a, 0xb2, 0x74, 0xfa, 0xe4, 0xfa, 0x12, 0x8b, 0x19, 0xa9, 0xc4, 0xb3, 0x10, 0xf6, 0x16,
	0x58, 0xbc, 0x8b, 0x8a, 0xfe, 0x42, 0x74, 0x67, 0x4e, 0xe3, 0xb5, 0x10, 0xff, 0x02, 0xb6, 0xb1,
	0xbf, 0x66, 0x3c, 0xa1, 0x5f, 0x09, 0xdd, 0x2c, 0x62, 0x43, 0xe8, 0xdc, 0x76, 0x01, 0xbb, 0xb1,
	0x3d, 0xae, 0x6c, 0xe7, 0x6c, 0x6d, 0x7b, 0x05, 0xad, 0x42, 0xc4, 0x46, 0x71, 0xe1, 0x9c, 0xb8,
	0x0e, 0x4e, 0xba, 0xcb, 0xfd, 0xd6, 0xc1, 0xe5, 0x9d, 0xf5, 0xd1, 0xad, 0x97, 0x16, 0x01, 0x1d,
	0x75, 0x8c, 0x27, 0xe1, 0x73, 0xc7, 0x08, 0xb1, 0x9d, 0x7c, 0x30, 0xa0, 0x7e, 0xc2, 0x37, 0x81,
	0xbd, 0xe4, 0xd9, 0x73, 0xd8, 0xaa, 0x2a, 0x58, 0x57, 0xfa, 0x1b, 0x11, 0x9b, 0x54, 0xbe, 0x79,
	0x9d, 0x1f, 0x03, 0xa0, 0x45, 0xe2, 0xb2, 0x49, 0xee, 0x83, 0xd3, 0xfa, 0xdd, 0x9e, 0x93, 0xc0,
	0x9e, 0x41, 0x3b, 0x17, 0x4e, 0xd9, 0x02, 0xa1, 0x91, 0x2d, 0x82, 0xb3, 0xca, 0xa3, 0x16, 0x07,
	0xb6, 0x88, 0x9b, 0xf4, 0xbf, 0x76, 0xf8, 0x3f, 0x00, 0x00, 0xff, 0xff, 0x87, 0x90, 0x37, 0x92,
	0xee, 0x04, 0x00, 0x00,
}
