/*
Copyright 2019 Cisco Systems

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: coh_health_data.proto

package cisco_ios_xr_ncs5500_coherent_node_oper_coherent_nodes_node_coherenthealth

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type CohHealthData_KEYS struct {
	NodeName             string   `protobuf:"bytes,1,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CohHealthData_KEYS) Reset()         { *m = CohHealthData_KEYS{} }
func (m *CohHealthData_KEYS) String() string { return proto.CompactTextString(m) }
func (*CohHealthData_KEYS) ProtoMessage()    {}
func (*CohHealthData_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_5b15874170ae1289, []int{0}
}

func (m *CohHealthData_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CohHealthData_KEYS.Unmarshal(m, b)
}
func (m *CohHealthData_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CohHealthData_KEYS.Marshal(b, m, deterministic)
}
func (m *CohHealthData_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CohHealthData_KEYS.Merge(m, src)
}
func (m *CohHealthData_KEYS) XXX_Size() int {
	return xxx_messageInfo_CohHealthData_KEYS.Size(m)
}
func (m *CohHealthData_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_CohHealthData_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_CohHealthData_KEYS proto.InternalMessageInfo

func (m *CohHealthData_KEYS) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

type CohPluggableInfo struct {
	Deviation                            []string `protobuf:"bytes,1,rep,name=deviation,proto3" json:"deviation,omitempty"`
	PartNumber                           []string `protobuf:"bytes,2,rep,name=part_number,json=partNumber,proto3" json:"part_number,omitempty"`
	SerialNumber                         []string `protobuf:"bytes,3,rep,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"`
	DateCodeNumber                       []string `protobuf:"bytes,4,rep,name=date_code_number,json=dateCodeNumber,proto3" json:"date_code_number,omitempty"`
	CleiCodeNumber                       []string `protobuf:"bytes,5,rep,name=clei_code_number,json=cleiCodeNumber,proto3" json:"clei_code_number,omitempty"`
	ModuleHardwareVersionNumber          uint32   `protobuf:"varint,6,opt,name=module_hardware_version_number,json=moduleHardwareVersionNumber,proto3" json:"module_hardware_version_number,omitempty"`
	ModuleFirmwareRunningVersionNumber   uint32   `protobuf:"varint,7,opt,name=module_firmware_running_version_number,json=moduleFirmwareRunningVersionNumber,proto3" json:"module_firmware_running_version_number,omitempty"`
	ModuleFirmwareCommittedVersionNumber uint32   `protobuf:"varint,8,opt,name=module_firmware_committed_version_number,json=moduleFirmwareCommittedVersionNumber,proto3" json:"module_firmware_committed_version_number,omitempty"`
	Vendorname                           []string `protobuf:"bytes,9,rep,name=vendorname,proto3" json:"vendorname,omitempty"`
	Description                          []string `protobuf:"bytes,10,rep,name=description,proto3" json:"description,omitempty"`
	Pid                                  []string `protobuf:"bytes,11,rep,name=pid,proto3" json:"pid,omitempty"`
	Vid                                  []string `protobuf:"bytes,12,rep,name=vid,proto3" json:"vid,omitempty"`
	CtpType                              uint32   `protobuf:"varint,13,opt,name=ctp_type,json=ctpType,proto3" json:"ctp_type,omitempty"`
	XXX_NoUnkeyedLiteral                 struct{} `json:"-"`
	XXX_unrecognized                     []byte   `json:"-"`
	XXX_sizecache                        int32    `json:"-"`
}

func (m *CohPluggableInfo) Reset()         { *m = CohPluggableInfo{} }
func (m *CohPluggableInfo) String() string { return proto.CompactTextString(m) }
func (*CohPluggableInfo) ProtoMessage()    {}
func (*CohPluggableInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_5b15874170ae1289, []int{1}
}

func (m *CohPluggableInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CohPluggableInfo.Unmarshal(m, b)
}
func (m *CohPluggableInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CohPluggableInfo.Marshal(b, m, deterministic)
}
func (m *CohPluggableInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CohPluggableInfo.Merge(m, src)
}
func (m *CohPluggableInfo) XXX_Size() int {
	return xxx_messageInfo_CohPluggableInfo.Size(m)
}
func (m *CohPluggableInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_CohPluggableInfo.DiscardUnknown(m)
}

var xxx_messageInfo_CohPluggableInfo proto.InternalMessageInfo

func (m *CohPluggableInfo) GetDeviation() []string {
	if m != nil {
		return m.Deviation
	}
	return nil
}

func (m *CohPluggableInfo) GetPartNumber() []string {
	if m != nil {
		return m.PartNumber
	}
	return nil
}

func (m *CohPluggableInfo) GetSerialNumber() []string {
	if m != nil {
		return m.SerialNumber
	}
	return nil
}

func (m *CohPluggableInfo) GetDateCodeNumber() []string {
	if m != nil {
		return m.DateCodeNumber
	}
	return nil
}

func (m *CohPluggableInfo) GetCleiCodeNumber() []string {
	if m != nil {
		return m.CleiCodeNumber
	}
	return nil
}

func (m *CohPluggableInfo) GetModuleHardwareVersionNumber() uint32 {
	if m != nil {
		return m.ModuleHardwareVersionNumber
	}
	return 0
}

func (m *CohPluggableInfo) GetModuleFirmwareRunningVersionNumber() uint32 {
	if m != nil {
		return m.ModuleFirmwareRunningVersionNumber
	}
	return 0
}

func (m *CohPluggableInfo) GetModuleFirmwareCommittedVersionNumber() uint32 {
	if m != nil {
		return m.ModuleFirmwareCommittedVersionNumber
	}
	return 0
}

func (m *CohPluggableInfo) GetVendorname() []string {
	if m != nil {
		return m.Vendorname
	}
	return nil
}

func (m *CohPluggableInfo) GetDescription() []string {
	if m != nil {
		return m.Description
	}
	return nil
}

func (m *CohPluggableInfo) GetPid() []string {
	if m != nil {
		return m.Pid
	}
	return nil
}

func (m *CohPluggableInfo) GetVid() []string {
	if m != nil {
		return m.Vid
	}
	return nil
}

func (m *CohPluggableInfo) GetCtpType() uint32 {
	if m != nil {
		return m.CtpType
	}
	return 0
}

type CohEthInterfaceData struct {
	Ifname               []string `protobuf:"bytes,1,rep,name=ifname,proto3" json:"ifname,omitempty"`
	IntfHandle           uint32   `protobuf:"varint,2,opt,name=intf_handle,json=intfHandle,proto3" json:"intf_handle,omitempty"`
	AdminState           uint32   `protobuf:"varint,3,opt,name=admin_state,json=adminState,proto3" json:"admin_state,omitempty"`
	AdminUp              bool     `protobuf:"varint,4,opt,name=admin_up,json=adminUp,proto3" json:"admin_up,omitempty"`
	IsCreated            bool     `protobuf:"varint,5,opt,name=is_created,json=isCreated,proto3" json:"is_created,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CohEthInterfaceData) Reset()         { *m = CohEthInterfaceData{} }
func (m *CohEthInterfaceData) String() string { return proto.CompactTextString(m) }
func (*CohEthInterfaceData) ProtoMessage()    {}
func (*CohEthInterfaceData) Descriptor() ([]byte, []int) {
	return fileDescriptor_5b15874170ae1289, []int{2}
}

func (m *CohEthInterfaceData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CohEthInterfaceData.Unmarshal(m, b)
}
func (m *CohEthInterfaceData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CohEthInterfaceData.Marshal(b, m, deterministic)
}
func (m *CohEthInterfaceData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CohEthInterfaceData.Merge(m, src)
}
func (m *CohEthInterfaceData) XXX_Size() int {
	return xxx_messageInfo_CohEthInterfaceData.Size(m)
}
func (m *CohEthInterfaceData) XXX_DiscardUnknown() {
	xxx_messageInfo_CohEthInterfaceData.DiscardUnknown(m)
}

var xxx_messageInfo_CohEthInterfaceData proto.InternalMessageInfo

func (m *CohEthInterfaceData) GetIfname() []string {
	if m != nil {
		return m.Ifname
	}
	return nil
}

func (m *CohEthInterfaceData) GetIntfHandle() uint32 {
	if m != nil {
		return m.IntfHandle
	}
	return 0
}

func (m *CohEthInterfaceData) GetAdminState() uint32 {
	if m != nil {
		return m.AdminState
	}
	return 0
}

func (m *CohEthInterfaceData) GetAdminUp() bool {
	if m != nil {
		return m.AdminUp
	}
	return false
}

func (m *CohEthInterfaceData) GetIsCreated() bool {
	if m != nil {
		return m.IsCreated
	}
	return false
}

type CohEthInterfaceInfo struct {
	EthData              []*CohEthInterfaceData `protobuf:"bytes,1,rep,name=eth_data,json=ethData,proto3" json:"eth_data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *CohEthInterfaceInfo) Reset()         { *m = CohEthInterfaceInfo{} }
func (m *CohEthInterfaceInfo) String() string { return proto.CompactTextString(m) }
func (*CohEthInterfaceInfo) ProtoMessage()    {}
func (*CohEthInterfaceInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_5b15874170ae1289, []int{3}
}

func (m *CohEthInterfaceInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CohEthInterfaceInfo.Unmarshal(m, b)
}
func (m *CohEthInterfaceInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CohEthInterfaceInfo.Marshal(b, m, deterministic)
}
func (m *CohEthInterfaceInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CohEthInterfaceInfo.Merge(m, src)
}
func (m *CohEthInterfaceInfo) XXX_Size() int {
	return xxx_messageInfo_CohEthInterfaceInfo.Size(m)
}
func (m *CohEthInterfaceInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_CohEthInterfaceInfo.DiscardUnknown(m)
}

var xxx_messageInfo_CohEthInterfaceInfo proto.InternalMessageInfo

func (m *CohEthInterfaceInfo) GetEthData() []*CohEthInterfaceData {
	if m != nil {
		return m.EthData
	}
	return nil
}

type CohPortData struct {
	OpticsCtrlCreated       bool                 `protobuf:"varint,1,opt,name=optics_ctrl_created,json=opticsCtrlCreated,proto3" json:"optics_ctrl_created,omitempty"`
	DspCtrlCreated          bool                 `protobuf:"varint,2,opt,name=dsp_ctrl_created,json=dspCtrlCreated,proto3" json:"dsp_ctrl_created,omitempty"`
	HasPluggable            bool                 `protobuf:"varint,3,opt,name=has_pluggable,json=hasPluggable,proto3" json:"has_pluggable,omitempty"`
	OpticsAdminUp           bool                 `protobuf:"varint,4,opt,name=optics_admin_up,json=opticsAdminUp,proto3" json:"optics_admin_up,omitempty"`
	DspAdminUp              bool                 `protobuf:"varint,5,opt,name=dsp_admin_up,json=dspAdminUp,proto3" json:"dsp_admin_up,omitempty"`
	LaserState              bool                 `protobuf:"varint,6,opt,name=laser_state,json=laserState,proto3" json:"laser_state,omitempty"`
	LaserOnPending          bool                 `protobuf:"varint,7,opt,name=laser_on_pending,json=laserOnPending,proto3" json:"laser_on_pending,omitempty"`
	ProvisioningNeeded      bool                 `protobuf:"varint,8,opt,name=provisioning_needed,json=provisioningNeeded,proto3" json:"provisioning_needed,omitempty"`
	ForceReprovision        bool                 `protobuf:"varint,9,opt,name=force_reprovision,json=forceReprovision,proto3" json:"force_reprovision,omitempty"`
	FpPortIdx               uint32               `protobuf:"varint,10,opt,name=fp_port_idx,json=fpPortIdx,proto3" json:"fp_port_idx,omitempty"`
	ConfiguredFrequency     uint32               `protobuf:"varint,11,opt,name=configured_frequency,json=configuredFrequency,proto3" json:"configured_frequency,omitempty"`
	ProvisionedFrequency    uint32               `protobuf:"varint,12,opt,name=provisioned_frequency,json=provisionedFrequency,proto3" json:"provisioned_frequency,omitempty"`
	ConfiguredTxPower       int32                `protobuf:"zigzag32,13,opt,name=configured_tx_power,json=configuredTxPower,proto3" json:"configured_tx_power,omitempty"`
	ProvisionedTxPower      int32                `protobuf:"zigzag32,14,opt,name=provisioned_tx_power,json=provisionedTxPower,proto3" json:"provisioned_tx_power,omitempty"`
	ConfiguredCdMin         uint32               `protobuf:"varint,15,opt,name=configured_cd_min,json=configuredCdMin,proto3" json:"configured_cd_min,omitempty"`
	ProvisionedCdMin        uint32               `protobuf:"varint,16,opt,name=provisioned_cd_min,json=provisionedCdMin,proto3" json:"provisioned_cd_min,omitempty"`
	ConfiguredCdMax         uint32               `protobuf:"varint,17,opt,name=configured_cd_max,json=configuredCdMax,proto3" json:"configured_cd_max,omitempty"`
	ProvisionedCdMax        uint32               `protobuf:"varint,18,opt,name=provisioned_cd_max,json=provisionedCdMax,proto3" json:"provisioned_cd_max,omitempty"`
	ConfiguredTrafficType   uint32               `protobuf:"varint,19,opt,name=configured_traffic_type,json=configuredTrafficType,proto3" json:"configured_traffic_type,omitempty"`
	ProvisionedTrafficType  uint32               `protobuf:"varint,20,opt,name=provisioned_traffic_type,json=provisionedTrafficType,proto3" json:"provisioned_traffic_type,omitempty"`
	ConfiguredLoopbackMode  uint32               `protobuf:"varint,21,opt,name=configured_loopback_mode,json=configuredLoopbackMode,proto3" json:"configured_loopback_mode,omitempty"`
	ProvisionedLoopbackMode uint32               `protobuf:"varint,22,opt,name=provisioned_loopback_mode,json=provisionedLoopbackMode,proto3" json:"provisioned_loopback_mode,omitempty"`
	ExpectedCtp2LedState    int32                `protobuf:"zigzag32,23,opt,name=expected_ctp2_led_state,json=expectedCtp2LedState,proto3" json:"expected_ctp2_led_state,omitempty"`
	ProvisionedCtp2LedState int32                `protobuf:"zigzag32,24,opt,name=provisioned_ctp2_led_state,json=provisionedCtp2LedState,proto3" json:"provisioned_ctp2_led_state,omitempty"`
	LedOpRc                 int32                `protobuf:"zigzag32,25,opt,name=led_op_rc,json=ledOpRc,proto3" json:"led_op_rc,omitempty"`
	LaserOpRc               int32                `protobuf:"zigzag32,26,opt,name=laser_op_rc,json=laserOpRc,proto3" json:"laser_op_rc,omitempty"`
	WlenOpRc                int32                `protobuf:"zigzag32,27,opt,name=wlen_op_rc,json=wlenOpRc,proto3" json:"wlen_op_rc,omitempty"`
	TrafficOpRc             int32                `protobuf:"zigzag32,28,opt,name=traffic_op_rc,json=trafficOpRc,proto3" json:"traffic_op_rc,omitempty"`
	LoopbackOpRc            int32                `protobuf:"zigzag32,29,opt,name=loopback_op_rc,json=loopbackOpRc,proto3" json:"loopback_op_rc,omitempty"`
	TxPowerOpRc             int32                `protobuf:"zigzag32,30,opt,name=tx_power_op_rc,json=txPowerOpRc,proto3" json:"tx_power_op_rc,omitempty"`
	CdMinOpRc               int32                `protobuf:"zigzag32,31,opt,name=cd_min_op_rc,json=cdMinOpRc,proto3" json:"cd_min_op_rc,omitempty"`
	CdMaxOpRc               int32                `protobuf:"zigzag32,32,opt,name=cd_max_op_rc,json=cdMaxOpRc,proto3" json:"cd_max_op_rc,omitempty"`
	ProvisioningFailed      bool                 `protobuf:"varint,33,opt,name=provisioning_failed,json=provisioningFailed,proto3" json:"provisioning_failed,omitempty"`
	CtpInfo                 *CohPluggableInfo    `protobuf:"bytes,34,opt,name=ctp_info,json=ctpInfo,proto3" json:"ctp_info,omitempty"`
	InterfaceInfo           *CohEthInterfaceInfo `protobuf:"bytes,35,opt,name=interface_info,json=interfaceInfo,proto3" json:"interface_info,omitempty"`
	Ctp2HwAlarms            []string             `protobuf:"bytes,36,rep,name=ctp2_hw_alarms,json=ctp2HwAlarms,proto3" json:"ctp2_hw_alarms,omitempty"`
	DenaliHwAlarms          []string             `protobuf:"bytes,37,rep,name=denali_hw_alarms,json=denaliHwAlarms,proto3" json:"denali_hw_alarms,omitempty"`
	IsPmPortCreatedOpt      bool                 `protobuf:"varint,38,opt,name=is_pm_port_created_opt,json=isPmPortCreatedOpt,proto3" json:"is_pm_port_created_opt,omitempty"`
	RcPmPortOpt             int32                `protobuf:"zigzag32,39,opt,name=rc_pm_port_opt,json=rcPmPortOpt,proto3" json:"rc_pm_port_opt,omitempty"`
	PmPortStateOpt          int32                `protobuf:"zigzag32,40,opt,name=pm_port_state_opt,json=pmPortStateOpt,proto3" json:"pm_port_state_opt,omitempty"`
	RcPmProvisionOpt        int32                `protobuf:"zigzag32,41,opt,name=rc_pm_provision_opt,json=rcPmProvisionOpt,proto3" json:"rc_pm_provision_opt,omitempty"`
	IsAlarmPortCreatedOpt   bool                 `protobuf:"varint,42,opt,name=is_alarm_port_created_opt,json=isAlarmPortCreatedOpt,proto3" json:"is_alarm_port_created_opt,omitempty"`
	RcAlarmPortOpt          int32                `protobuf:"zigzag32,43,opt,name=rc_alarm_port_opt,json=rcAlarmPortOpt,proto3" json:"rc_alarm_port_opt,omitempty"`
	IsPmPortCreatedDsp      bool                 `protobuf:"varint,44,opt,name=is_pm_port_created_dsp,json=isPmPortCreatedDsp,proto3" json:"is_pm_port_created_dsp,omitempty"`
	RcPmPortDsp             int32                `protobuf:"zigzag32,45,opt,name=rc_pm_port_dsp,json=rcPmPortDsp,proto3" json:"rc_pm_port_dsp,omitempty"`
	PmPortStateDsp          int32                `protobuf:"zigzag32,46,opt,name=pm_port_state_dsp,json=pmPortStateDsp,proto3" json:"pm_port_state_dsp,omitempty"`
	RcPmProvisionDsp        int32                `protobuf:"zigzag32,47,opt,name=rc_pm_provision_dsp,json=rcPmProvisionDsp,proto3" json:"rc_pm_provision_dsp,omitempty"`
	IsAlarmPortCreatedDsp   bool                 `protobuf:"varint,48,opt,name=is_alarm_port_created_dsp,json=isAlarmPortCreatedDsp,proto3" json:"is_alarm_port_created_dsp,omitempty"`
	RcAlarmPortDsp          int32                `protobuf:"zigzag32,49,opt,name=rc_alarm_port_dsp,json=rcAlarmPortDsp,proto3" json:"rc_alarm_port_dsp,omitempty"`
	XXX_NoUnkeyedLiteral    struct{}             `json:"-"`
	XXX_unrecognized        []byte               `json:"-"`
	XXX_sizecache           int32                `json:"-"`
}

func (m *CohPortData) Reset()         { *m = CohPortData{} }
func (m *CohPortData) String() string { return proto.CompactTextString(m) }
func (*CohPortData) ProtoMessage()    {}
func (*CohPortData) Descriptor() ([]byte, []int) {
	return fileDescriptor_5b15874170ae1289, []int{4}
}

func (m *CohPortData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CohPortData.Unmarshal(m, b)
}
func (m *CohPortData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CohPortData.Marshal(b, m, deterministic)
}
func (m *CohPortData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CohPortData.Merge(m, src)
}
func (m *CohPortData) XXX_Size() int {
	return xxx_messageInfo_CohPortData.Size(m)
}
func (m *CohPortData) XXX_DiscardUnknown() {
	xxx_messageInfo_CohPortData.DiscardUnknown(m)
}

var xxx_messageInfo_CohPortData proto.InternalMessageInfo

func (m *CohPortData) GetOpticsCtrlCreated() bool {
	if m != nil {
		return m.OpticsCtrlCreated
	}
	return false
}

func (m *CohPortData) GetDspCtrlCreated() bool {
	if m != nil {
		return m.DspCtrlCreated
	}
	return false
}

func (m *CohPortData) GetHasPluggable() bool {
	if m != nil {
		return m.HasPluggable
	}
	return false
}

func (m *CohPortData) GetOpticsAdminUp() bool {
	if m != nil {
		return m.OpticsAdminUp
	}
	return false
}

func (m *CohPortData) GetDspAdminUp() bool {
	if m != nil {
		return m.DspAdminUp
	}
	return false
}

func (m *CohPortData) GetLaserState() bool {
	if m != nil {
		return m.LaserState
	}
	return false
}

func (m *CohPortData) GetLaserOnPending() bool {
	if m != nil {
		return m.LaserOnPending
	}
	return false
}

func (m *CohPortData) GetProvisioningNeeded() bool {
	if m != nil {
		return m.ProvisioningNeeded
	}
	return false
}

func (m *CohPortData) GetForceReprovision() bool {
	if m != nil {
		return m.ForceReprovision
	}
	return false
}

func (m *CohPortData) GetFpPortIdx() uint32 {
	if m != nil {
		return m.FpPortIdx
	}
	return 0
}

func (m *CohPortData) GetConfiguredFrequency() uint32 {
	if m != nil {
		return m.ConfiguredFrequency
	}
	return 0
}

func (m *CohPortData) GetProvisionedFrequency() uint32 {
	if m != nil {
		return m.ProvisionedFrequency
	}
	return 0
}

func (m *CohPortData) GetConfiguredTxPower() int32 {
	if m != nil {
		return m.ConfiguredTxPower
	}
	return 0
}

func (m *CohPortData) GetProvisionedTxPower() int32 {
	if m != nil {
		return m.ProvisionedTxPower
	}
	return 0
}

func (m *CohPortData) GetConfiguredCdMin() uint32 {
	if m != nil {
		return m.ConfiguredCdMin
	}
	return 0
}

func (m *CohPortData) GetProvisionedCdMin() uint32 {
	if m != nil {
		return m.ProvisionedCdMin
	}
	return 0
}

func (m *CohPortData) GetConfiguredCdMax() uint32 {
	if m != nil {
		return m.ConfiguredCdMax
	}
	return 0
}

func (m *CohPortData) GetProvisionedCdMax() uint32 {
	if m != nil {
		return m.ProvisionedCdMax
	}
	return 0
}

func (m *CohPortData) GetConfiguredTrafficType() uint32 {
	if m != nil {
		return m.ConfiguredTrafficType
	}
	return 0
}

func (m *CohPortData) GetProvisionedTrafficType() uint32 {
	if m != nil {
		return m.ProvisionedTrafficType
	}
	return 0
}

func (m *CohPortData) GetConfiguredLoopbackMode() uint32 {
	if m != nil {
		return m.ConfiguredLoopbackMode
	}
	return 0
}

func (m *CohPortData) GetProvisionedLoopbackMode() uint32 {
	if m != nil {
		return m.ProvisionedLoopbackMode
	}
	return 0
}

func (m *CohPortData) GetExpectedCtp2LedState() int32 {
	if m != nil {
		return m.ExpectedCtp2LedState
	}
	return 0
}

func (m *CohPortData) GetProvisionedCtp2LedState() int32 {
	if m != nil {
		return m.ProvisionedCtp2LedState
	}
	return 0
}

func (m *CohPortData) GetLedOpRc() int32 {
	if m != nil {
		return m.LedOpRc
	}
	return 0
}

func (m *CohPortData) GetLaserOpRc() int32 {
	if m != nil {
		return m.LaserOpRc
	}
	return 0
}

func (m *CohPortData) GetWlenOpRc() int32 {
	if m != nil {
		return m.WlenOpRc
	}
	return 0
}

func (m *CohPortData) GetTrafficOpRc() int32 {
	if m != nil {
		return m.TrafficOpRc
	}
	return 0
}

func (m *CohPortData) GetLoopbackOpRc() int32 {
	if m != nil {
		return m.LoopbackOpRc
	}
	return 0
}

func (m *CohPortData) GetTxPowerOpRc() int32 {
	if m != nil {
		return m.TxPowerOpRc
	}
	return 0
}

func (m *CohPortData) GetCdMinOpRc() int32 {
	if m != nil {
		return m.CdMinOpRc
	}
	return 0
}

func (m *CohPortData) GetCdMaxOpRc() int32 {
	if m != nil {
		return m.CdMaxOpRc
	}
	return 0
}

func (m *CohPortData) GetProvisioningFailed() bool {
	if m != nil {
		return m.ProvisioningFailed
	}
	return false
}

func (m *CohPortData) GetCtpInfo() *CohPluggableInfo {
	if m != nil {
		return m.CtpInfo
	}
	return nil
}

func (m *CohPortData) GetInterfaceInfo() *CohEthInterfaceInfo {
	if m != nil {
		return m.InterfaceInfo
	}
	return nil
}

func (m *CohPortData) GetCtp2HwAlarms() []string {
	if m != nil {
		return m.Ctp2HwAlarms
	}
	return nil
}

func (m *CohPortData) GetDenaliHwAlarms() []string {
	if m != nil {
		return m.DenaliHwAlarms
	}
	return nil
}

func (m *CohPortData) GetIsPmPortCreatedOpt() bool {
	if m != nil {
		return m.IsPmPortCreatedOpt
	}
	return false
}

func (m *CohPortData) GetRcPmPortOpt() int32 {
	if m != nil {
		return m.RcPmPortOpt
	}
	return 0
}

func (m *CohPortData) GetPmPortStateOpt() int32 {
	if m != nil {
		return m.PmPortStateOpt
	}
	return 0
}

func (m *CohPortData) GetRcPmProvisionOpt() int32 {
	if m != nil {
		return m.RcPmProvisionOpt
	}
	return 0
}

func (m *CohPortData) GetIsAlarmPortCreatedOpt() bool {
	if m != nil {
		return m.IsAlarmPortCreatedOpt
	}
	return false
}

func (m *CohPortData) GetRcAlarmPortOpt() int32 {
	if m != nil {
		return m.RcAlarmPortOpt
	}
	return 0
}

func (m *CohPortData) GetIsPmPortCreatedDsp() bool {
	if m != nil {
		return m.IsPmPortCreatedDsp
	}
	return false
}

func (m *CohPortData) GetRcPmPortDsp() int32 {
	if m != nil {
		return m.RcPmPortDsp
	}
	return 0
}

func (m *CohPortData) GetPmPortStateDsp() int32 {
	if m != nil {
		return m.PmPortStateDsp
	}
	return 0
}

func (m *CohPortData) GetRcPmProvisionDsp() int32 {
	if m != nil {
		return m.RcPmProvisionDsp
	}
	return 0
}

func (m *CohPortData) GetIsAlarmPortCreatedDsp() bool {
	if m != nil {
		return m.IsAlarmPortCreatedDsp
	}
	return false
}

func (m *CohPortData) GetRcAlarmPortDsp() int32 {
	if m != nil {
		return m.RcAlarmPortDsp
	}
	return 0
}

type CohHealthData struct {
	ImState                  bool           `protobuf:"varint,50,opt,name=im_state,json=imState,proto3" json:"im_state,omitempty"`
	AipcSrvrState            bool           `protobuf:"varint,51,opt,name=aipc_srvr_state,json=aipcSrvrState,proto3" json:"aipc_srvr_state,omitempty"`
	SysdbState               bool           `protobuf:"varint,52,opt,name=sysdb_state,json=sysdbState,proto3" json:"sysdb_state,omitempty"`
	PmState                  bool           `protobuf:"varint,53,opt,name=pm_state,json=pmState,proto3" json:"pm_state,omitempty"`
	OpticsEaConn             bool           `protobuf:"varint,54,opt,name=optics_ea_conn,json=opticsEaConn,proto3" json:"optics_ea_conn,omitempty"`
	DspEaConn                bool           `protobuf:"varint,55,opt,name=dsp_ea_conn,json=dspEaConn,proto3" json:"dsp_ea_conn,omitempty"`
	VetherState              bool           `protobuf:"varint,56,opt,name=vether_state,json=vetherState,proto3" json:"vether_state,omitempty"`
	MorgothAlive             bool           `protobuf:"varint,57,opt,name=morgoth_alive,json=morgothAlive,proto3" json:"morgoth_alive,omitempty"`
	ProvInfraState           bool           `protobuf:"varint,58,opt,name=prov_infra_state,json=provInfraState,proto3" json:"prov_infra_state,omitempty"`
	SdkFpgaCompatible        bool           `protobuf:"varint,59,opt,name=sdk_fpga_compatible,json=sdkFpgaCompatible,proto3" json:"sdk_fpga_compatible,omitempty"`
	PendingProvision         bool           `protobuf:"varint,60,opt,name=pending_provision,json=pendingProvision,proto3" json:"pending_provision,omitempty"`
	PulseSent                bool           `protobuf:"varint,61,opt,name=pulse_sent,json=pulseSent,proto3" json:"pulse_sent,omitempty"`
	InsideProvLoop           bool           `protobuf:"varint,62,opt,name=inside_prov_loop,json=insideProvLoop,proto3" json:"inside_prov_loop,omitempty"`
	FpdInProgress            bool           `protobuf:"varint,63,opt,name=fpd_in_progress,json=fpdInProgress,proto3" json:"fpd_in_progress,omitempty"`
	ProvRunCount             uint32         `protobuf:"varint,64,opt,name=prov_run_count,json=provRunCount,proto3" json:"prov_run_count,omitempty"`
	SdkVersion               []string       `protobuf:"bytes,65,rep,name=sdk_version,json=sdkVersion,proto3" json:"sdk_version,omitempty"`
	MorgothRunningVersion    []string       `protobuf:"bytes,66,rep,name=morgoth_running_version,json=morgothRunningVersion,proto3" json:"morgoth_running_version,omitempty"`
	MorgothDownloadedVersion []string       `protobuf:"bytes,67,rep,name=morgoth_downloaded_version,json=morgothDownloadedVersion,proto3" json:"morgoth_downloaded_version,omitempty"`
	MorgothGoldenVersion     []string       `protobuf:"bytes,68,rep,name=morgoth_golden_version,json=morgothGoldenVersion,proto3" json:"morgoth_golden_version,omitempty"`
	Denali0Version           []string       `protobuf:"bytes,69,rep,name=denali0_version,json=denali0Version,proto3" json:"denali0_version,omitempty"`
	Denali1Version           []string       `protobuf:"bytes,70,rep,name=denali1_version,json=denali1Version,proto3" json:"denali1_version,omitempty"`
	Denali2Version           []string       `protobuf:"bytes,71,rep,name=denali2_version,json=denali2Version,proto3" json:"denali2_version,omitempty"`
	BoardType                []string       `protobuf:"bytes,72,rep,name=board_type,json=boardType,proto3" json:"board_type,omitempty"`
	PortData                 []*CohPortData `protobuf:"bytes,73,rep,name=port_data,json=portData,proto3" json:"port_data,omitempty"`
	JlinkOp                  []string       `protobuf:"bytes,74,rep,name=jlink_op,json=jlinkOp,proto3" json:"jlink_op,omitempty"`
	XXX_NoUnkeyedLiteral     struct{}       `json:"-"`
	XXX_unrecognized         []byte         `json:"-"`
	XXX_sizecache            int32          `json:"-"`
}

func (m *CohHealthData) Reset()         { *m = CohHealthData{} }
func (m *CohHealthData) String() string { return proto.CompactTextString(m) }
func (*CohHealthData) ProtoMessage()    {}
func (*CohHealthData) Descriptor() ([]byte, []int) {
	return fileDescriptor_5b15874170ae1289, []int{5}
}

func (m *CohHealthData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CohHealthData.Unmarshal(m, b)
}
func (m *CohHealthData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CohHealthData.Marshal(b, m, deterministic)
}
func (m *CohHealthData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CohHealthData.Merge(m, src)
}
func (m *CohHealthData) XXX_Size() int {
	return xxx_messageInfo_CohHealthData.Size(m)
}
func (m *CohHealthData) XXX_DiscardUnknown() {
	xxx_messageInfo_CohHealthData.DiscardUnknown(m)
}

var xxx_messageInfo_CohHealthData proto.InternalMessageInfo

func (m *CohHealthData) GetImState() bool {
	if m != nil {
		return m.ImState
	}
	return false
}

func (m *CohHealthData) GetAipcSrvrState() bool {
	if m != nil {
		return m.AipcSrvrState
	}
	return false
}

func (m *CohHealthData) GetSysdbState() bool {
	if m != nil {
		return m.SysdbState
	}
	return false
}

func (m *CohHealthData) GetPmState() bool {
	if m != nil {
		return m.PmState
	}
	return false
}

func (m *CohHealthData) GetOpticsEaConn() bool {
	if m != nil {
		return m.OpticsEaConn
	}
	return false
}

func (m *CohHealthData) GetDspEaConn() bool {
	if m != nil {
		return m.DspEaConn
	}
	return false
}

func (m *CohHealthData) GetVetherState() bool {
	if m != nil {
		return m.VetherState
	}
	return false
}

func (m *CohHealthData) GetMorgothAlive() bool {
	if m != nil {
		return m.MorgothAlive
	}
	return false
}

func (m *CohHealthData) GetProvInfraState() bool {
	if m != nil {
		return m.ProvInfraState
	}
	return false
}

func (m *CohHealthData) GetSdkFpgaCompatible() bool {
	if m != nil {
		return m.SdkFpgaCompatible
	}
	return false
}

func (m *CohHealthData) GetPendingProvision() bool {
	if m != nil {
		return m.PendingProvision
	}
	return false
}

func (m *CohHealthData) GetPulseSent() bool {
	if m != nil {
		return m.PulseSent
	}
	return false
}

func (m *CohHealthData) GetInsideProvLoop() bool {
	if m != nil {
		return m.InsideProvLoop
	}
	return false
}

func (m *CohHealthData) GetFpdInProgress() bool {
	if m != nil {
		return m.FpdInProgress
	}
	return false
}

func (m *CohHealthData) GetProvRunCount() uint32 {
	if m != nil {
		return m.ProvRunCount
	}
	return 0
}

func (m *CohHealthData) GetSdkVersion() []string {
	if m != nil {
		return m.SdkVersion
	}
	return nil
}

func (m *CohHealthData) GetMorgothRunningVersion() []string {
	if m != nil {
		return m.MorgothRunningVersion
	}
	return nil
}

func (m *CohHealthData) GetMorgothDownloadedVersion() []string {
	if m != nil {
		return m.MorgothDownloadedVersion
	}
	return nil
}

func (m *CohHealthData) GetMorgothGoldenVersion() []string {
	if m != nil {
		return m.MorgothGoldenVersion
	}
	return nil
}

func (m *CohHealthData) GetDenali0Version() []string {
	if m != nil {
		return m.Denali0Version
	}
	return nil
}

func (m *CohHealthData) GetDenali1Version() []string {
	if m != nil {
		return m.Denali1Version
	}
	return nil
}

func (m *CohHealthData) GetDenali2Version() []string {
	if m != nil {
		return m.Denali2Version
	}
	return nil
}

func (m *CohHealthData) GetBoardType() []string {
	if m != nil {
		return m.BoardType
	}
	return nil
}

func (m *CohHealthData) GetPortData() []*CohPortData {
	if m != nil {
		return m.PortData
	}
	return nil
}

func (m *CohHealthData) GetJlinkOp() []string {
	if m != nil {
		return m.JlinkOp
	}
	return nil
}

func init() {
	proto.RegisterType((*CohHealthData_KEYS)(nil), "cisco_ios_xr_ncs5500_coherent_node_oper.coherent.nodes.node.coherenthealth.coh_health_data_KEYS")
	proto.RegisterType((*CohPluggableInfo)(nil), "cisco_ios_xr_ncs5500_coherent_node_oper.coherent.nodes.node.coherenthealth.coh_pluggable_info")
	proto.RegisterType((*CohEthInterfaceData)(nil), "cisco_ios_xr_ncs5500_coherent_node_oper.coherent.nodes.node.coherenthealth.coh_eth_interface_data")
	proto.RegisterType((*CohEthInterfaceInfo)(nil), "cisco_ios_xr_ncs5500_coherent_node_oper.coherent.nodes.node.coherenthealth.coh_eth_interface_info")
	proto.RegisterType((*CohPortData)(nil), "cisco_ios_xr_ncs5500_coherent_node_oper.coherent.nodes.node.coherenthealth.coh_port_data")
	proto.RegisterType((*CohHealthData)(nil), "cisco_ios_xr_ncs5500_coherent_node_oper.coherent.nodes.node.coherenthealth.coh_health_data")
}

func init() { proto.RegisterFile("coh_health_data.proto", fileDescriptor_5b15874170ae1289) }

var fileDescriptor_5b15874170ae1289 = []byte{
	// 1785 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x98, 0x5b, 0x77, 0x1b, 0xb7,
	0x11, 0xc7, 0x8f, 0x6c, 0xc7, 0x22, 0x87, 0x12, 0x25, 0xad, 0x2e, 0x86, 0xaf, 0x52, 0x24, 0xd5,
	0x91, 0x73, 0x51, 0x64, 0x39, 0x4e, 0xdd, 0x24, 0xbd, 0xb8, 0x94, 0x15, 0x2b, 0x4d, 0x6c, 0x1d,
	0x3a, 0xcd, 0x39, 0x79, 0x29, 0x0e, 0xb4, 0x00, 0x49, 0x54, 0x4b, 0x2c, 0x0a, 0x80, 0x14, 0xf5,
	0xd0, 0x0f, 0xd0, 0x4f, 0xd0, 0x2f, 0xd1, 0xe7, 0x3e, 0xe6, 0xb3, 0xf5, 0x60, 0x80, 0x5d, 0xee,
	0x52, 0xca, 0x9b, 0xfb, 0xe2, 0x63, 0xfe, 0xe7, 0x37, 0x83, 0xd9, 0xc1, 0x6d, 0x20, 0x58, 0x4f,
	0xf3, 0x01, 0x1d, 0x08, 0x96, 0xb9, 0x01, 0xe5, 0xcc, 0xb1, 0x7d, 0x6d, 0x72, 0x97, 0x27, 0xdf,
	0xa5, 0xd2, 0xa6, 0x39, 0x95, 0xb9, 0xa5, 0x13, 0x43, 0x55, 0x6a, 0x9f, 0x3f, 0x3f, 0x38, 0xa0,
	0x69, 0x3e, 0x10, 0x46, 0x28, 0x47, 0x55, 0xce, 0x05, 0xcd, 0xb5, 0x30, 0xfb, 0x85, 0xb4, 0xef,
	0x25, 0x8b, 0xff, 0x96, 0x5a, 0x08, 0xbb, 0xfd, 0x0c, 0xd6, 0x66, 0x06, 0xa1, 0x7f, 0x79, 0xf5,
	0xf3, 0xbb, 0xe4, 0x3e, 0x34, 0x31, 0x8e, 0x62, 0x43, 0x41, 0xe6, 0xb6, 0xe6, 0xf6, 0x9a, 0xdd,
	0x86, 0x17, 0xde, 0xb0, 0xa1, 0xd8, 0xfe, 0xe5, 0x16, 0x24, 0xde, 0x4b, 0x67, 0xa3, 0x7e, 0x9f,
	0x9d, 0x65, 0x82, 0x4a, 0xd5, 0xcb, 0x93, 0x07, 0xd0, 0xe4, 0x62, 0x2c, 0x99, 0x93, 0xb9, 0x22,
	0x73, 0x5b, 0x37, 0xf7, 0x9a, 0xdd, 0xa9, 0x90, 0x6c, 0x42, 0x4b, 0x33, 0xe3, 0xa8, 0x1a, 0x0d,
	0xcf, 0x84, 0x21, 0x37, 0xd0, 0x0e, 0x5e, 0x7a, 0x83, 0x4a, 0xb2, 0x03, 0x8b, 0x56, 0x18, 0xc9,
	0xb2, 0x02, 0xb9, 0x89, 0xc8, 0x42, 0x10, 0x23, 0xb4, 0x07, 0xcb, 0x9c, 0x39, 0x41, 0x53, 0x4c,
	0x2e, 0x70, 0xb7, 0x90, 0x6b, 0x7b, 0xbd, 0xe3, 0x53, 0x2c, 0xc9, 0x34, 0x13, 0xb2, 0x46, 0x7e,
	0x10, 0x48, 0xaf, 0x57, 0xc8, 0x0e, 0x3c, 0x1a, 0xe6, 0x7c, 0x94, 0x09, 0x3a, 0x60, 0x86, 0x5f,
	0x30, 0x23, 0xe8, 0x58, 0x18, 0x2b, 0x73, 0x55, 0xf8, 0xdd, 0xde, 0x9a, 0xdb, 0x5b, 0xec, 0xde,
	0x0f, 0xd4, 0xeb, 0x08, 0xfd, 0x14, 0x98, 0x18, 0xa4, 0x0b, 0x8f, 0x63, 0x90, 0x9e, 0x34, 0x43,
	0x0c, 0x62, 0x46, 0x4a, 0x49, 0xd5, 0x9f, 0x0d, 0x36, 0x8f, 0xc1, 0xb6, 0x03, 0x7d, 0x1c, 0xe1,
	0x6e, 0x60, 0xeb, 0x31, 0x7f, 0x82, 0xbd, 0xd9, 0x98, 0x69, 0x3e, 0x1c, 0x4a, 0xe7, 0x04, 0x9f,
	0x8d, 0xda, 0xc0, 0xa8, 0xbb, 0xf5, 0xa8, 0x9d, 0x82, 0xae, 0xc7, 0x7d, 0x04, 0x30, 0x16, 0x8a,
	0xe7, 0x06, 0x67, 0xb7, 0x19, 0x66, 0x62, 0xaa, 0x24, 0x5b, 0xd0, 0xe2, 0xc2, 0xa6, 0x46, 0x6a,
	0x9c, 0x4a, 0x40, 0xa0, 0x2a, 0x25, 0xcb, 0x70, 0x53, 0x4b, 0x4e, 0x5a, 0x68, 0xf1, 0xff, 0xf5,
	0xca, 0x58, 0x72, 0xb2, 0x10, 0x94, 0xb1, 0xe4, 0xc9, 0x5d, 0x68, 0xa4, 0x4e, 0x53, 0x77, 0xa9,
	0x05, 0x59, 0xc4, 0xec, 0xe6, 0x53, 0xa7, 0x7f, 0xbc, 0xd4, 0x62, 0xfb, 0x3f, 0x73, 0xb0, 0xe1,
	0x17, 0x90, 0x70, 0x03, 0x2a, 0x95, 0x13, 0xa6, 0xc7, 0x52, 0x81, 0xab, 0x2f, 0xd9, 0x80, 0xdb,
	0xb2, 0x17, 0x57, 0x9d, 0x0f, 0x15, 0x7f, 0xf9, 0xe5, 0x23, 0x95, 0xeb, 0xd1, 0x01, 0x53, 0x3c,
	0x13, 0xe4, 0x06, 0x06, 0x04, 0x2f, 0xbd, 0x46, 0xc5, 0x03, 0x8c, 0x0f, 0xa5, 0xa2, 0xd6, 0x31,
	0x27, 0xc8, 0xcd, 0x00, 0xa0, 0xf4, 0xce, 0x2b, 0x3e, 0x9f, 0x00, 0x8c, 0x34, 0xb9, 0xb5, 0x35,
	0xb7, 0xd7, 0xe8, 0xce, 0xe3, 0xef, 0xbf, 0xea, 0xe4, 0x21, 0x80, 0xb4, 0x34, 0x35, 0x82, 0x39,
	0xc1, 0xc9, 0x07, 0x68, 0x6c, 0x4a, 0xdb, 0x09, 0xc2, 0xf6, 0xbf, 0xaf, 0x4d, 0x17, 0xd7, 0xfc,
	0x3f, 0xa1, 0x21, 0xe2, 0xc6, 0xc1, 0x84, 0x5b, 0x87, 0x67, 0xfb, 0xef, 0x6f, 0x7b, 0xee, 0x5f,
	0x5f, 0xa4, 0xee, 0xbc, 0x70, 0x83, 0x23, 0xe6, 0xd8, 0xf6, 0x2f, 0x09, 0x2c, 0xe2, 0x4e, 0xcc,
	0x8d, 0x0b, 0xf5, 0xdb, 0x87, 0xd5, 0x5c, 0x3b, 0x99, 0x5a, 0x9a, 0x3a, 0x93, 0x95, 0xdf, 0x34,
	0x87, 0xdf, 0xb4, 0x12, 0x4c, 0x1d, 0x67, 0xb2, 0xf8, 0x6d, 0xb8, 0xa1, 0xac, 0xae, 0xc3, 0x37,
	0x10, 0x6e, 0x73, 0xab, 0xab, 0xe4, 0x0e, 0x2c, 0x0e, 0x98, 0x9d, 0x6e, 0x7a, 0x2c, 0x71, 0xa3,
	0xbb, 0x30, 0x60, 0xf6, 0xb4, 0xd0, 0x92, 0xc7, 0xb0, 0x14, 0x87, 0x9f, 0xa9, 0xf5, 0x62, 0x90,
	0x5f, 0xc6, 0x8a, 0x6f, 0xc1, 0x82, 0x1f, 0xb6, 0x84, 0x42, 0xcd, 0x81, 0x5b, 0x5d, 0x10, 0x9b,
	0xd0, 0xca, 0x98, 0x15, 0x26, 0xce, 0xe7, 0xed, 0x00, 0xa0, 0x14, 0xe6, 0x73, 0x0f, 0x96, 0x03,
	0x90, 0x2b, 0xaa, 0x85, 0xe2, 0x52, 0xf5, 0x71, 0x6f, 0x35, 0xba, 0x6d, 0xd4, 0xdf, 0xaa, 0xd3,
	0xa0, 0x26, 0x9f, 0xc3, 0xaa, 0x36, 0xf9, 0x58, 0xfa, 0x2d, 0xe0, 0x37, 0xa4, 0x12, 0x82, 0x0b,
	0x8e, 0x5b, 0xa6, 0xd1, 0x4d, 0xaa, 0xa6, 0x37, 0x68, 0x49, 0x3e, 0x81, 0x95, 0x5e, 0x6e, 0x52,
	0x41, 0x8d, 0x28, 0xad, 0xa4, 0x89, 0xf8, 0x32, 0x1a, 0xba, 0x53, 0x3d, 0x79, 0x04, 0xad, 0x9e,
	0x0e, 0x33, 0x20, 0xf9, 0x84, 0x00, 0x2e, 0xbc, 0x66, 0x4f, 0x9f, 0xe6, 0xc6, 0x9d, 0xf0, 0x49,
	0xf2, 0xd4, 0x1f, 0xb1, 0xaa, 0x27, 0xfb, 0x23, 0x23, 0x38, 0xed, 0x19, 0xf1, 0x8f, 0x91, 0x50,
	0xe9, 0x25, 0x69, 0x21, 0xb8, 0x3a, 0xb5, 0x1d, 0x17, 0xa6, 0xe4, 0x19, 0xac, 0x97, 0xf1, 0x6b,
	0x3e, 0x0b, 0xe8, 0xb3, 0x56, 0x31, 0x4e, 0x9d, 0xf6, 0xa1, 0x12, 0x8b, 0xba, 0x09, 0xd5, 0xf9,
	0x85, 0x30, 0xb8, 0xf5, 0x56, 0xba, 0x2b, 0x53, 0xd3, 0x8f, 0x93, 0x53, 0x6f, 0x48, 0x0e, 0xa0,
	0x1a, 0x67, 0xea, 0xd0, 0x46, 0x87, 0xa4, 0x62, 0x2b, 0x3c, 0x3e, 0x86, 0x4a, 0x18, 0x9a, 0x72,
	0x3a, 0x94, 0x8a, 0x2c, 0x61, 0x4a, 0x4b, 0x53, 0x43, 0x87, 0xff, 0x20, 0x55, 0xf2, 0x29, 0x54,
	0x23, 0x14, 0xf0, 0x32, 0xc2, 0xcb, 0x15, 0x4b, 0xa0, 0xaf, 0x46, 0x66, 0x13, 0xb2, 0x72, 0x4d,
	0x64, 0x36, 0xb9, 0x2e, 0x32, 0x9b, 0x90, 0xe4, 0xba, 0xc8, 0x6c, 0x92, 0x7c, 0x09, 0x77, 0xaa,
	0x55, 0x31, 0xac, 0xd7, 0x93, 0x69, 0x38, 0x94, 0x56, 0xd1, 0x65, 0xbd, 0x52, 0x99, 0x60, 0xf5,
	0x47, 0x54, 0xf2, 0x02, 0x48, 0xad, 0x3a, 0x55, 0xc7, 0x35, 0x74, 0xdc, 0xa8, 0x56, 0xa8, 0xee,
	0x59, 0x19, 0x31, 0xcb, 0x73, 0x7d, 0xc6, 0xd2, 0x73, 0x3a, 0xcc, 0xb9, 0x20, 0xeb, 0xc1, 0x73,
	0x6a, 0xff, 0x3e, 0x9a, 0x7f, 0xc8, 0xb9, 0x48, 0xbe, 0x82, 0xbb, 0xd5, 0x31, 0xeb, 0xae, 0x1b,
	0xe8, 0x7a, 0xa7, 0x02, 0xd4, 0x7c, 0x9f, 0xc3, 0x1d, 0x31, 0xd1, 0x22, 0xf5, 0x57, 0x43, 0xea,
	0xf4, 0x21, 0xcd, 0x04, 0x8f, 0x5b, 0xe7, 0x0e, 0x4e, 0xe8, 0x5a, 0x61, 0xee, 0x38, 0x7d, 0xf8,
	0xbd, 0xe0, 0x61, 0x13, 0x7d, 0x0d, 0xf7, 0x6a, 0xc5, 0xac, 0x7b, 0x12, 0xf4, 0xac, 0x8e, 0x59,
	0x73, 0xbe, 0x07, 0x4d, 0xcf, 0xe6, 0x9a, 0x9a, 0x94, 0xdc, 0x45, 0x76, 0x3e, 0x13, 0xfc, 0xad,
	0xee, 0xa6, 0x7e, 0x57, 0xc4, 0xdd, 0x89, 0xd6, 0x7b, 0x68, 0x6d, 0x86, 0x8d, 0xe9, 0xed, 0x0f,
	0x00, 0x2e, 0x32, 0xa1, 0xa2, 0xf9, 0x3e, 0x9a, 0x1b, 0x5e, 0x41, 0xeb, 0x36, 0x2c, 0x16, 0x15,
	0x0f, 0xc0, 0x03, 0x04, 0x5a, 0x51, 0x44, 0x66, 0x17, 0xda, 0x65, 0x85, 0x02, 0xf4, 0x10, 0xa1,
	0x85, 0x42, 0x45, 0x6a, 0x07, 0xda, 0xc5, 0xca, 0x8e, 0xd4, 0xa3, 0x18, 0x2a, 0x2c, 0x6a, 0x84,
	0x36, 0x61, 0x21, 0x2c, 0xd0, 0x88, 0x6c, 0x86, 0x6c, 0x53, 0xbf, 0x36, 0xab, 0x00, 0x9b, 0x44,
	0x60, 0xab, 0x04, 0xd8, 0x04, 0x81, 0xd9, 0x23, 0xa6, 0xc7, 0x64, 0x26, 0x38, 0xf9, 0xf0, 0xea,
	0x11, 0x73, 0x8c, 0x96, 0xe4, 0x32, 0xdc, 0x8e, 0xfe, 0x12, 0x21, 0xdb, 0x5b, 0x73, 0x7b, 0xad,
	0xc3, 0xbf, 0xbd, 0xef, 0x8b, 0xa3, 0xde, 0x9e, 0xe1, 0xed, 0x7b, 0xe2, 0xef, 0xac, 0x7f, 0xcd,
	0x41, 0xbb, 0x7e, 0x8d, 0x91, 0x1d, 0xcc, 0xe0, 0xff, 0x7c, 0x75, 0x61, 0x16, 0x8b, 0xe5, 0x6f,
	0xcc, 0x65, 0x17, 0xda, 0xb8, 0xe6, 0x06, 0x17, 0x94, 0x65, 0xcc, 0x0c, 0x2d, 0xd9, 0x0d, 0x5d,
	0x9f, 0x57, 0x5f, 0x5f, 0xbc, 0x44, 0x0d, 0x2f, 0x29, 0xa1, 0x58, 0x26, 0x2b, 0xdc, 0x6f, 0x62,
	0xd7, 0x87, 0x7a, 0x49, 0x1e, 0xc2, 0x86, 0xb4, 0x54, 0x0f, 0xc3, 0x79, 0x1c, 0x2f, 0x34, 0x9a,
	0x6b, 0x47, 0x1e, 0x87, 0xa9, 0x90, 0xf6, 0x74, 0xe8, 0x4f, 0xe6, 0x78, 0xab, 0xbd, 0xd5, 0xce,
	0x2f, 0x11, 0x93, 0x96, 0x3e, 0x9e, 0xfd, 0x28, 0x2c, 0x11, 0x93, 0x06, 0xd6, 0x43, 0x4f, 0x60,
	0xa5, 0x20, 0x70, 0x6f, 0x20, 0xb7, 0x87, 0x5c, 0x5b, 0x23, 0x85, 0x7b, 0xc2, 0xa3, 0x9f, 0xc1,
	0x6a, 0x8c, 0x57, 0x4c, 0x3b, 0xc2, 0x4f, 0x10, 0x5e, 0xc6, 0xa0, 0x85, 0xc1, 0xe3, 0x2f, 0xe0,
	0xae, 0xb4, 0xe1, 0xab, 0xae, 0x66, 0xfd, 0x31, 0x66, 0xbd, 0x2e, 0x2d, 0x7e, 0xdf, 0x4c, 0xe2,
	0x4f, 0x60, 0xc5, 0xa4, 0x55, 0x4f, 0xef, 0xf1, 0x49, 0xc8, 0xc9, 0xa4, 0xa5, 0x87, 0x47, 0xaf,
	0xaf, 0x0b, 0xb7, 0x9a, 0x7c, 0x7a, 0x6d, 0x5d, 0x8e, 0xac, 0x9e, 0xa9, 0x8b, 0x67, 0x3f, 0xab,
	0xd7, 0xc5, 0x43, 0x57, 0xea, 0xe2, 0xb9, 0xfd, 0x2b, 0x75, 0xf1, 0xe8, 0x35, 0x75, 0xf1, 0xf0,
	0xe7, 0xd7, 0xd4, 0xc5, 0xe3, 0xbf, 0x5a, 0x17, 0xef, 0x74, 0xf0, 0x6b, 0x75, 0x89, 0x39, 0xd5,
	0xeb, 0xe2, 0x3d, 0x9e, 0x5e, 0xa9, 0xcb, 0x91, 0xd5, 0xdb, 0xff, 0x6d, 0xc0, 0xd2, 0xcc, 0x03,
	0xc8, 0x37, 0x8a, 0x72, 0x18, 0x4f, 0xc0, 0xc3, 0xd0, 0x28, 0xca, 0x61, 0x38, 0xf1, 0x1e, 0xc3,
	0x12, 0x93, 0x3a, 0xa5, 0xd6, 0x8c, 0x8b, 0xc6, 0xe4, 0x59, 0x68, 0x6f, 0xbc, 0xfc, 0xce, 0x8c,
	0x63, 0x6f, 0xb2, 0x09, 0x2d, 0x7b, 0x69, 0xf9, 0x59, 0x64, 0xbe, 0x08, 0xcd, 0x0b, 0x4a, 0x65,
	0x33, 0xaa, 0x8b, 0x31, 0x9e, 0x87, 0x31, 0x74, 0x1c, 0x63, 0x17, 0xda, 0xb1, 0x85, 0x12, 0x8c,
	0xa6, 0xb9, 0x52, 0xe4, 0xcb, 0xd0, 0x68, 0x05, 0xf5, 0x15, 0xeb, 0xe4, 0x0a, 0xbb, 0x0e, 0xdf,
	0x40, 0x15, 0xc8, 0x6f, 0x43, 0xcf, 0xca, 0xad, 0x8e, 0xf6, 0x0f, 0x61, 0x61, 0x2c, 0xdc, 0xa0,
	0xec, 0x9f, 0x5e, 0x20, 0xd0, 0x0a, 0x5a, 0x18, 0x68, 0x07, 0x16, 0x87, 0xb9, 0xe9, 0xe7, 0x6e,
	0x40, 0x59, 0x26, 0xc7, 0x82, 0xfc, 0x2e, 0x8c, 0x13, 0xc5, 0x97, 0x5e, 0xf3, 0x5b, 0xcf, 0x4f,
	0x97, 0xdf, 0xbc, 0x86, 0xc5, 0x58, 0x5f, 0x85, 0x2e, 0xcb, 0xeb, 0x27, 0x5e, 0x0e, 0xe1, 0xf6,
	0x61, 0xd5, 0xf2, 0x73, 0xda, 0xd3, 0x7d, 0x9f, 0xd3, 0x50, 0x33, 0x27, 0x7d, 0x97, 0xf8, 0x75,
	0xe8, 0x3c, 0x2d, 0x3f, 0x3f, 0xd6, 0x7d, 0xd6, 0x29, 0x0d, 0xbe, 0xc9, 0x8a, 0x6d, 0xdb, 0x74,
	0x41, 0x90, 0x6f, 0x42, 0x93, 0x15, 0x0d, 0xe5, 0x7a, 0xf0, 0x1d, 0xba, 0x1e, 0x65, 0x56, 0x50,
	0x2b, 0x94, 0x23, 0xbf, 0x0f, 0x5f, 0x8b, 0xca, 0x3b, 0xa1, 0x9c, 0xcf, 0x52, 0x2a, 0x2b, 0xb9,
	0xc0, 0x50, 0x78, 0x73, 0x92, 0x3f, 0x84, 0x2c, 0x83, 0xee, 0x23, 0xf9, 0xfb, 0xd2, 0xcf, 0x60,
	0x4f, 0x73, 0x2a, 0x95, 0x27, 0xfb, 0x46, 0x58, 0x4b, 0xfe, 0x18, 0x66, 0xb0, 0xa7, 0xf9, 0x89,
	0x3a, 0x8d, 0xa2, 0x9f, 0x05, 0x0c, 0x65, 0x46, 0x8a, 0xa6, 0xf9, 0x48, 0x39, 0xf2, 0x27, 0xbc,
	0x80, 0x17, 0xbc, 0xda, 0x1d, 0xa9, 0x8e, 0xd7, 0x70, 0x9e, 0xf9, 0x79, 0xf1, 0x16, 0x23, 0x2f,
	0xc3, 0x53, 0xca, 0xf2, 0xf3, 0xf8, 0xe0, 0xf2, 0xed, 0x47, 0x51, 0xe3, 0x99, 0xe7, 0x20, 0xf9,
	0x33, 0xc2, 0xeb, 0xd1, 0x5c, 0x7f, 0x00, 0x26, 0xdf, 0xc0, 0xbd, 0xc2, 0x8f, 0xe7, 0x17, 0x2a,
	0xcb, 0x19, 0x9f, 0xbe, 0xf9, 0x48, 0x07, 0x5d, 0x49, 0x24, 0x8e, 0x4a, 0xa0, 0xf0, 0xfe, 0x02,
	0x36, 0x0a, 0xef, 0x7e, 0x9e, 0x71, 0xa1, 0x4a, 0xcf, 0x23, 0xf4, 0x5c, 0x8b, 0xd6, 0x6f, 0xd1,
	0x58, 0x78, 0x7d, 0x04, 0x4b, 0xe1, 0x34, 0x3d, 0x28, 0xf1, 0x57, 0xd5, 0x43, 0xf6, 0xe0, 0x0a,
	0xf8, 0xb4, 0x04, 0x8f, 0xab, 0xe0, 0xd3, 0x2b, 0xe0, 0x61, 0x09, 0x7e, 0x5b, 0x05, 0x0f, 0x0b,
	0xf0, 0x21, 0xc0, 0x59, 0xce, 0x0c, 0x0f, 0xfd, 0xd5, 0xeb, 0xf0, 0xb7, 0x03, 0x54, 0xb0, 0xa5,
	0x1a, 0x43, 0xb3, 0x7c, 0xe1, 0x90, 0x13, 0x7c, 0x66, 0xfd, 0xfc, 0xde, 0x6f, 0xcb, 0x62, 0x80,
	0x6e, 0xc3, 0xff, 0xf7, 0x28, 0x9e, 0x04, 0x7f, 0xcf, 0xa4, 0xf2, 0xfd, 0x05, 0xf9, 0x0e, 0x93,
	0x9a, 0xc7, 0xdf, 0x6f, 0xf5, 0xd9, 0x6d, 0xfc, 0x5b, 0xcc, 0xb3, 0xff, 0x05, 0x00, 0x00, 0xff,
	0xff, 0xd6, 0x66, 0x39, 0x35, 0xa4, 0x11, 0x00, 0x00,
}
