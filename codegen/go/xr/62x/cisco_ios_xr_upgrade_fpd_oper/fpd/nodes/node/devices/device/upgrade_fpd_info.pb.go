/*
Copyright 2019 Cisco Systems

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: upgrade_fpd_info.proto

package cisco_ios_xr_upgrade_fpd_oper_fpd_nodes_node_devices_device

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type UpgradeFpdInfo_KEYS struct {
	NodeName             string   `protobuf:"bytes,1,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	FpdType              string   `protobuf:"bytes,2,opt,name=fpd_type,json=fpdType,proto3" json:"fpd_type,omitempty"`
	Instance             uint32   `protobuf:"varint,3,opt,name=instance,proto3" json:"instance,omitempty"`
	SubType              string   `protobuf:"bytes,4,opt,name=sub_type,json=subType,proto3" json:"sub_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpgradeFpdInfo_KEYS) Reset()         { *m = UpgradeFpdInfo_KEYS{} }
func (m *UpgradeFpdInfo_KEYS) String() string { return proto.CompactTextString(m) }
func (*UpgradeFpdInfo_KEYS) ProtoMessage()    {}
func (*UpgradeFpdInfo_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_4a5ae034ec50ee13, []int{0}
}

func (m *UpgradeFpdInfo_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpgradeFpdInfo_KEYS.Unmarshal(m, b)
}
func (m *UpgradeFpdInfo_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpgradeFpdInfo_KEYS.Marshal(b, m, deterministic)
}
func (m *UpgradeFpdInfo_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpgradeFpdInfo_KEYS.Merge(m, src)
}
func (m *UpgradeFpdInfo_KEYS) XXX_Size() int {
	return xxx_messageInfo_UpgradeFpdInfo_KEYS.Size(m)
}
func (m *UpgradeFpdInfo_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_UpgradeFpdInfo_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_UpgradeFpdInfo_KEYS proto.InternalMessageInfo

func (m *UpgradeFpdInfo_KEYS) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

func (m *UpgradeFpdInfo_KEYS) GetFpdType() string {
	if m != nil {
		return m.FpdType
	}
	return ""
}

func (m *UpgradeFpdInfo_KEYS) GetInstance() uint32 {
	if m != nil {
		return m.Instance
	}
	return 0
}

func (m *UpgradeFpdInfo_KEYS) GetSubType() string {
	if m != nil {
		return m.SubType
	}
	return ""
}

type UpgradeFpdInfo struct {
	CardType             string   `protobuf:"bytes,50,opt,name=card_type,json=cardType,proto3" json:"card_type,omitempty"`
	HardwareVersion      string   `protobuf:"bytes,51,opt,name=hardware_version,json=hardwareVersion,proto3" json:"hardware_version,omitempty"`
	SoftwareVersion      string   `protobuf:"bytes,52,opt,name=software_version,json=softwareVersion,proto3" json:"software_version,omitempty"`
	IsUpgradeDowngrade   bool     `protobuf:"varint,53,opt,name=is_upgrade_downgrade,json=isUpgradeDowngrade,proto3" json:"is_upgrade_downgrade,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpgradeFpdInfo) Reset()         { *m = UpgradeFpdInfo{} }
func (m *UpgradeFpdInfo) String() string { return proto.CompactTextString(m) }
func (*UpgradeFpdInfo) ProtoMessage()    {}
func (*UpgradeFpdInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_4a5ae034ec50ee13, []int{1}
}

func (m *UpgradeFpdInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpgradeFpdInfo.Unmarshal(m, b)
}
func (m *UpgradeFpdInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpgradeFpdInfo.Marshal(b, m, deterministic)
}
func (m *UpgradeFpdInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpgradeFpdInfo.Merge(m, src)
}
func (m *UpgradeFpdInfo) XXX_Size() int {
	return xxx_messageInfo_UpgradeFpdInfo.Size(m)
}
func (m *UpgradeFpdInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_UpgradeFpdInfo.DiscardUnknown(m)
}

var xxx_messageInfo_UpgradeFpdInfo proto.InternalMessageInfo

func (m *UpgradeFpdInfo) GetCardType() string {
	if m != nil {
		return m.CardType
	}
	return ""
}

func (m *UpgradeFpdInfo) GetHardwareVersion() string {
	if m != nil {
		return m.HardwareVersion
	}
	return ""
}

func (m *UpgradeFpdInfo) GetSoftwareVersion() string {
	if m != nil {
		return m.SoftwareVersion
	}
	return ""
}

func (m *UpgradeFpdInfo) GetIsUpgradeDowngrade() bool {
	if m != nil {
		return m.IsUpgradeDowngrade
	}
	return false
}

func init() {
	proto.RegisterType((*UpgradeFpdInfo_KEYS)(nil), "cisco_ios_xr_upgrade_fpd_oper.fpd.nodes.node.devices.device.upgrade_fpd_info_KEYS")
	proto.RegisterType((*UpgradeFpdInfo)(nil), "cisco_ios_xr_upgrade_fpd_oper.fpd.nodes.node.devices.device.upgrade_fpd_info")
}

func init() { proto.RegisterFile("upgrade_fpd_info.proto", fileDescriptor_4a5ae034ec50ee13) }

var fileDescriptor_4a5ae034ec50ee13 = []byte{
	// 276 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x91, 0xbd, 0x4e, 0xc3, 0x30,
	0x14, 0x85, 0x65, 0x40, 0x90, 0x5a, 0x42, 0x54, 0x11, 0xa0, 0x00, 0x4b, 0xd5, 0x29, 0x2c, 0x11,
	0xa2, 0x30, 0xb1, 0xc2, 0x84, 0xc4, 0x10, 0x7e, 0x24, 0x26, 0xcb, 0x89, 0xaf, 0xc1, 0x43, 0x7d,
	0x2d, 0xdf, 0xa4, 0xa5, 0x2f, 0xc0, 0x2b, 0xf1, 0x7a, 0xc8, 0x76, 0x53, 0x41, 0x97, 0xc4, 0x3e,
	0xe7, 0x3b, 0xbe, 0x47, 0x36, 0x3f, 0xed, 0xdd, 0x87, 0x97, 0x0a, 0x84, 0x76, 0x4a, 0x18, 0xab,
	0xb1, 0x72, 0x1e, 0x3b, 0xcc, 0xef, 0x5a, 0x43, 0x2d, 0x0a, 0x83, 0x24, 0xbe, 0xbc, 0xf8, 0x0b,
	0xa1, 0x03, 0x5f, 0x69, 0xa7, 0x2a, 0x8b, 0x0a, 0x28, 0x7e, 0x2b, 0x05, 0x0b, 0xd3, 0x02, 0xad,
	0xff, 0xd3, 0x6f, 0xc6, 0x4f, 0xb6, 0xcf, 0x15, 0x8f, 0x0f, 0xef, 0xcf, 0xf9, 0x05, 0x1f, 0x85,
	0x80, 0xb0, 0x72, 0x0e, 0x05, 0x9b, 0xb0, 0x72, 0x54, 0x67, 0x41, 0x78, 0x92, 0x73, 0xc8, 0xcf,
	0x78, 0x16, 0xe8, 0x6e, 0xe5, 0xa0, 0xd8, 0x89, 0xde, 0x81, 0x76, 0xea, 0x65, 0xe5, 0x20, 0x3f,
	0xe7, 0x99, 0xb1, 0xd4, 0x49, 0xdb, 0x42, 0xb1, 0x3b, 0x61, 0xe5, 0x61, 0xbd, 0xd9, 0x87, 0x18,
	0xf5, 0x4d, 0x8a, 0xed, 0xa5, 0x18, 0xf5, 0x4d, 0x88, 0x4d, 0x7f, 0x18, 0x1f, 0x6f, 0x17, 0x09,
	0x1d, 0x5a, 0xe9, 0xd7, 0x73, 0xae, 0x53, 0x87, 0x20, 0xc4, 0x41, 0x97, 0x7c, 0xfc, 0x29, 0xbd,
	0x5a, 0x4a, 0x0f, 0x62, 0x01, 0x9e, 0x0c, 0xda, 0x62, 0x16, 0x99, 0xa3, 0x41, 0x7f, 0x4b, 0x72,
	0x40, 0x09, 0x75, 0xf7, 0x0f, 0xbd, 0x49, 0xe8, 0xa0, 0x0f, 0xe8, 0x15, 0x3f, 0x36, 0xb4, 0xb9,
	0x45, 0x85, 0x4b, 0x1b, 0x57, 0xc5, 0xed, 0x84, 0x95, 0x59, 0x9d, 0x1b, 0x7a, 0x4d, 0xd6, 0xfd,
	0xe0, 0x34, 0xfb, 0xf1, 0x19, 0x66, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x92, 0x66, 0x50, 0x23,
	0xa0, 0x01, 0x00, 0x00,
}
