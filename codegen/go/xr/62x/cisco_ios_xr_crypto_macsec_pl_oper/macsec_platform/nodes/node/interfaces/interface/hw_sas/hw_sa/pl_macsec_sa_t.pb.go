/*
Copyright 2019 Cisco Systems

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pl_macsec_sa_t.proto

package cisco_ios_xr_crypto_macsec_pl_oper_macsec_platform_nodes_node_interfaces_interface_hw_sas_hw_sa

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type PlMacsecSaT_KEYS struct {
	NodeName             string   `protobuf:"bytes,1,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	SaId                 uint32   `protobuf:"varint,3,opt,name=sa_id,json=saId,proto3" json:"sa_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PlMacsecSaT_KEYS) Reset()         { *m = PlMacsecSaT_KEYS{} }
func (m *PlMacsecSaT_KEYS) String() string { return proto.CompactTextString(m) }
func (*PlMacsecSaT_KEYS) ProtoMessage()    {}
func (*PlMacsecSaT_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb091d20d81fe12e, []int{0}
}

func (m *PlMacsecSaT_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PlMacsecSaT_KEYS.Unmarshal(m, b)
}
func (m *PlMacsecSaT_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PlMacsecSaT_KEYS.Marshal(b, m, deterministic)
}
func (m *PlMacsecSaT_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlMacsecSaT_KEYS.Merge(m, src)
}
func (m *PlMacsecSaT_KEYS) XXX_Size() int {
	return xxx_messageInfo_PlMacsecSaT_KEYS.Size(m)
}
func (m *PlMacsecSaT_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_PlMacsecSaT_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_PlMacsecSaT_KEYS proto.InternalMessageInfo

func (m *PlMacsecSaT_KEYS) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

func (m *PlMacsecSaT_KEYS) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PlMacsecSaT_KEYS) GetSaId() uint32 {
	if m != nil {
		return m.SaId
	}
	return 0
}

type PlMsfpgaSaInfoT struct {
	SaId                 uint32   `protobuf:"varint,1,opt,name=sa_id,json=saId,proto3" json:"sa_id,omitempty"`
	Valid                bool     `protobuf:"varint,2,opt,name=valid,proto3" json:"valid,omitempty"`
	IsEgress             bool     `protobuf:"varint,3,opt,name=is_egress,json=isEgress,proto3" json:"is_egress,omitempty"`
	CryptoAlgo           uint32   `protobuf:"varint,4,opt,name=crypto_algo,json=cryptoAlgo,proto3" json:"crypto_algo,omitempty"`
	KeyLen               uint32   `protobuf:"varint,5,opt,name=key_len,json=keyLen,proto3" json:"key_len,omitempty"`
	An                   uint32   `protobuf:"varint,6,opt,name=an,proto3" json:"an,omitempty"`
	Xpn                  uint32   `protobuf:"varint,7,opt,name=xpn,proto3" json:"xpn,omitempty"`
	Sci                  uint64   `protobuf:"varint,8,opt,name=sci,proto3" json:"sci,omitempty"`
	InUse                bool     `protobuf:"varint,9,opt,name=in_use,json=inUse,proto3" json:"in_use,omitempty"`
	NextPn               uint64   `protobuf:"varint,10,opt,name=next_pn,json=nextPn,proto3" json:"next_pn,omitempty"`
	COffset              uint32   `protobuf:"varint,11,opt,name=c_offset,json=cOffset,proto3" json:"c_offset,omitempty"`
	Action               uint32   `protobuf:"varint,12,opt,name=action,proto3" json:"action,omitempty"`
	QBit                 bool     `protobuf:"varint,13,opt,name=q_bit,json=qBit,proto3" json:"q_bit,omitempty"`
	QqBit                bool     `protobuf:"varint,14,opt,name=qq_bit,json=qqBit,proto3" json:"qq_bit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PlMsfpgaSaInfoT) Reset()         { *m = PlMsfpgaSaInfoT{} }
func (m *PlMsfpgaSaInfoT) String() string { return proto.CompactTextString(m) }
func (*PlMsfpgaSaInfoT) ProtoMessage()    {}
func (*PlMsfpgaSaInfoT) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb091d20d81fe12e, []int{1}
}

func (m *PlMsfpgaSaInfoT) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PlMsfpgaSaInfoT.Unmarshal(m, b)
}
func (m *PlMsfpgaSaInfoT) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PlMsfpgaSaInfoT.Marshal(b, m, deterministic)
}
func (m *PlMsfpgaSaInfoT) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlMsfpgaSaInfoT.Merge(m, src)
}
func (m *PlMsfpgaSaInfoT) XXX_Size() int {
	return xxx_messageInfo_PlMsfpgaSaInfoT.Size(m)
}
func (m *PlMsfpgaSaInfoT) XXX_DiscardUnknown() {
	xxx_messageInfo_PlMsfpgaSaInfoT.DiscardUnknown(m)
}

var xxx_messageInfo_PlMsfpgaSaInfoT proto.InternalMessageInfo

func (m *PlMsfpgaSaInfoT) GetSaId() uint32 {
	if m != nil {
		return m.SaId
	}
	return 0
}

func (m *PlMsfpgaSaInfoT) GetValid() bool {
	if m != nil {
		return m.Valid
	}
	return false
}

func (m *PlMsfpgaSaInfoT) GetIsEgress() bool {
	if m != nil {
		return m.IsEgress
	}
	return false
}

func (m *PlMsfpgaSaInfoT) GetCryptoAlgo() uint32 {
	if m != nil {
		return m.CryptoAlgo
	}
	return 0
}

func (m *PlMsfpgaSaInfoT) GetKeyLen() uint32 {
	if m != nil {
		return m.KeyLen
	}
	return 0
}

func (m *PlMsfpgaSaInfoT) GetAn() uint32 {
	if m != nil {
		return m.An
	}
	return 0
}

func (m *PlMsfpgaSaInfoT) GetXpn() uint32 {
	if m != nil {
		return m.Xpn
	}
	return 0
}

func (m *PlMsfpgaSaInfoT) GetSci() uint64 {
	if m != nil {
		return m.Sci
	}
	return 0
}

func (m *PlMsfpgaSaInfoT) GetInUse() bool {
	if m != nil {
		return m.InUse
	}
	return false
}

func (m *PlMsfpgaSaInfoT) GetNextPn() uint64 {
	if m != nil {
		return m.NextPn
	}
	return 0
}

func (m *PlMsfpgaSaInfoT) GetCOffset() uint32 {
	if m != nil {
		return m.COffset
	}
	return 0
}

func (m *PlMsfpgaSaInfoT) GetAction() uint32 {
	if m != nil {
		return m.Action
	}
	return 0
}

func (m *PlMsfpgaSaInfoT) GetQBit() bool {
	if m != nil {
		return m.QBit
	}
	return false
}

func (m *PlMsfpgaSaInfoT) GetQqBit() bool {
	if m != nil {
		return m.QqBit
	}
	return false
}

type PlMsfpgaSaT struct {
	TxSa                 *PlMsfpgaSaInfoT `protobuf:"bytes,1,opt,name=tx_sa,json=txSa,proto3" json:"tx_sa,omitempty"`
	RxSa                 *PlMsfpgaSaInfoT `protobuf:"bytes,2,opt,name=rx_sa,json=rxSa,proto3" json:"rx_sa,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *PlMsfpgaSaT) Reset()         { *m = PlMsfpgaSaT{} }
func (m *PlMsfpgaSaT) String() string { return proto.CompactTextString(m) }
func (*PlMsfpgaSaT) ProtoMessage()    {}
func (*PlMsfpgaSaT) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb091d20d81fe12e, []int{2}
}

func (m *PlMsfpgaSaT) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PlMsfpgaSaT.Unmarshal(m, b)
}
func (m *PlMsfpgaSaT) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PlMsfpgaSaT.Marshal(b, m, deterministic)
}
func (m *PlMsfpgaSaT) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlMsfpgaSaT.Merge(m, src)
}
func (m *PlMsfpgaSaT) XXX_Size() int {
	return xxx_messageInfo_PlMsfpgaSaT.Size(m)
}
func (m *PlMsfpgaSaT) XXX_DiscardUnknown() {
	xxx_messageInfo_PlMsfpgaSaT.DiscardUnknown(m)
}

var xxx_messageInfo_PlMsfpgaSaT proto.InternalMessageInfo

func (m *PlMsfpgaSaT) GetTxSa() *PlMsfpgaSaInfoT {
	if m != nil {
		return m.TxSa
	}
	return nil
}

func (m *PlMsfpgaSaT) GetRxSa() *PlMsfpgaSaInfoT {
	if m != nil {
		return m.RxSa
	}
	return nil
}

type PlXlfpgaTxSaInfoT struct {
	ProtectionEnable      bool     `protobuf:"varint,1,opt,name=protection_enable,json=protectionEnable,proto3" json:"protection_enable,omitempty"`
	SecureMode            uint32   `protobuf:"varint,2,opt,name=secure_mode,json=secureMode,proto3" json:"secure_mode,omitempty"`
	SecureChannelId       uint64   `protobuf:"varint,3,opt,name=secure_channel_id,json=secureChannelId,proto3" json:"secure_channel_id,omitempty"`
	SectagLength          uint32   `protobuf:"varint,4,opt,name=sectag_length,json=sectagLength,proto3" json:"sectag_length,omitempty"`
	CipherSuite           uint32   `protobuf:"varint,5,opt,name=cipher_suite,json=cipherSuite,proto3" json:"cipher_suite,omitempty"`
	ConfidentialityOffset uint32   `protobuf:"varint,6,opt,name=confidentiality_offset,json=confidentialityOffset,proto3" json:"confidentiality_offset,omitempty"`
	FcsErrCfg             uint32   `protobuf:"varint,7,opt,name=fcs_err_cfg,json=fcsErrCfg,proto3" json:"fcs_err_cfg,omitempty"`
	MaxPacketNum          uint64   `protobuf:"varint,8,opt,name=max_packet_num,json=maxPacketNum,proto3" json:"max_packet_num,omitempty"`
	An                    uint32   `protobuf:"varint,9,opt,name=an,proto3" json:"an,omitempty"`
	InitialPacketNumber   uint64   `protobuf:"varint,10,opt,name=initial_packet_number,json=initialPacketNumber,proto3" json:"initial_packet_number,omitempty"`
	Ssci                  uint32   `protobuf:"varint,11,opt,name=ssci,proto3" json:"ssci,omitempty"`
	CurrentPacketNum      uint64   `protobuf:"varint,12,opt,name=current_packet_num,json=currentPacketNum,proto3" json:"current_packet_num,omitempty"`
	CrcValue              uint32   `protobuf:"varint,13,opt,name=crc_value,json=crcValue,proto3" json:"crc_value,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *PlXlfpgaTxSaInfoT) Reset()         { *m = PlXlfpgaTxSaInfoT{} }
func (m *PlXlfpgaTxSaInfoT) String() string { return proto.CompactTextString(m) }
func (*PlXlfpgaTxSaInfoT) ProtoMessage()    {}
func (*PlXlfpgaTxSaInfoT) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb091d20d81fe12e, []int{3}
}

func (m *PlXlfpgaTxSaInfoT) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PlXlfpgaTxSaInfoT.Unmarshal(m, b)
}
func (m *PlXlfpgaTxSaInfoT) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PlXlfpgaTxSaInfoT.Marshal(b, m, deterministic)
}
func (m *PlXlfpgaTxSaInfoT) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlXlfpgaTxSaInfoT.Merge(m, src)
}
func (m *PlXlfpgaTxSaInfoT) XXX_Size() int {
	return xxx_messageInfo_PlXlfpgaTxSaInfoT.Size(m)
}
func (m *PlXlfpgaTxSaInfoT) XXX_DiscardUnknown() {
	xxx_messageInfo_PlXlfpgaTxSaInfoT.DiscardUnknown(m)
}

var xxx_messageInfo_PlXlfpgaTxSaInfoT proto.InternalMessageInfo

func (m *PlXlfpgaTxSaInfoT) GetProtectionEnable() bool {
	if m != nil {
		return m.ProtectionEnable
	}
	return false
}

func (m *PlXlfpgaTxSaInfoT) GetSecureMode() uint32 {
	if m != nil {
		return m.SecureMode
	}
	return 0
}

func (m *PlXlfpgaTxSaInfoT) GetSecureChannelId() uint64 {
	if m != nil {
		return m.SecureChannelId
	}
	return 0
}

func (m *PlXlfpgaTxSaInfoT) GetSectagLength() uint32 {
	if m != nil {
		return m.SectagLength
	}
	return 0
}

func (m *PlXlfpgaTxSaInfoT) GetCipherSuite() uint32 {
	if m != nil {
		return m.CipherSuite
	}
	return 0
}

func (m *PlXlfpgaTxSaInfoT) GetConfidentialityOffset() uint32 {
	if m != nil {
		return m.ConfidentialityOffset
	}
	return 0
}

func (m *PlXlfpgaTxSaInfoT) GetFcsErrCfg() uint32 {
	if m != nil {
		return m.FcsErrCfg
	}
	return 0
}

func (m *PlXlfpgaTxSaInfoT) GetMaxPacketNum() uint64 {
	if m != nil {
		return m.MaxPacketNum
	}
	return 0
}

func (m *PlXlfpgaTxSaInfoT) GetAn() uint32 {
	if m != nil {
		return m.An
	}
	return 0
}

func (m *PlXlfpgaTxSaInfoT) GetInitialPacketNumber() uint64 {
	if m != nil {
		return m.InitialPacketNumber
	}
	return 0
}

func (m *PlXlfpgaTxSaInfoT) GetSsci() uint32 {
	if m != nil {
		return m.Ssci
	}
	return 0
}

func (m *PlXlfpgaTxSaInfoT) GetCurrentPacketNum() uint64 {
	if m != nil {
		return m.CurrentPacketNum
	}
	return 0
}

func (m *PlXlfpgaTxSaInfoT) GetCrcValue() uint32 {
	if m != nil {
		return m.CrcValue
	}
	return 0
}

type PlXlfpgaRxSaInfoT struct {
	ProtectionEnable          bool     `protobuf:"varint,1,opt,name=protection_enable,json=protectionEnable,proto3" json:"protection_enable,omitempty"`
	SecureMode                uint32   `protobuf:"varint,2,opt,name=secure_mode,json=secureMode,proto3" json:"secure_mode,omitempty"`
	ReplayProtectMode         bool     `protobuf:"varint,3,opt,name=replay_protect_mode,json=replayProtectMode,proto3" json:"replay_protect_mode,omitempty"`
	ValidationMode            uint32   `protobuf:"varint,4,opt,name=validation_mode,json=validationMode,proto3" json:"validation_mode,omitempty"`
	ReplayWindow              uint32   `protobuf:"varint,5,opt,name=replay_window,json=replayWindow,proto3" json:"replay_window,omitempty"`
	SecureChannelId           uint64   `protobuf:"varint,6,opt,name=secure_channel_id,json=secureChannelId,proto3" json:"secure_channel_id,omitempty"`
	CipherSuite               uint32   `protobuf:"varint,7,opt,name=cipher_suite,json=cipherSuite,proto3" json:"cipher_suite,omitempty"`
	ConfidentialityOffset     uint32   `protobuf:"varint,8,opt,name=confidentiality_offset,json=confidentialityOffset,proto3" json:"confidentiality_offset,omitempty"`
	FcsErrCfg                 uint32   `protobuf:"varint,9,opt,name=fcs_err_cfg,json=fcsErrCfg,proto3" json:"fcs_err_cfg,omitempty"`
	AuthErrCfg                uint32   `protobuf:"varint,10,opt,name=auth_err_cfg,json=authErrCfg,proto3" json:"auth_err_cfg,omitempty"`
	MaxPacketNum              uint64   `protobuf:"varint,11,opt,name=max_packet_num,json=maxPacketNum,proto3" json:"max_packet_num,omitempty"`
	NumAnInUse                uint32   `protobuf:"varint,12,opt,name=num_an_in_use,json=numAnInUse,proto3" json:"num_an_in_use,omitempty"`
	An                        []uint32 `protobuf:"varint,13,rep,packed,name=an,proto3" json:"an,omitempty"`
	RecentAn                  uint32   `protobuf:"varint,14,opt,name=recent_an,json=recentAn,proto3" json:"recent_an,omitempty"`
	Ssci                      []uint32 `protobuf:"varint,15,rep,packed,name=ssci,proto3" json:"ssci,omitempty"`
	PktUntaggedDetected       bool     `protobuf:"varint,16,opt,name=pkt_untagged_detected,json=pktUntaggedDetected,proto3" json:"pkt_untagged_detected,omitempty"`
	PktTaggedDetected         bool     `protobuf:"varint,17,opt,name=pkt_tagged_detected,json=pktTaggedDetected,proto3" json:"pkt_tagged_detected,omitempty"`
	PktTaggedValidated        bool     `protobuf:"varint,18,opt,name=pkt_tagged_validated,json=pktTaggedValidated,proto3" json:"pkt_tagged_validated,omitempty"`
	CurrentPacketNum          uint64   `protobuf:"varint,19,opt,name=current_packet_num,json=currentPacketNum,proto3" json:"current_packet_num,omitempty"`
	LowestAcceptablePacketNum []uint64 `protobuf:"varint,20,rep,packed,name=lowest_acceptable_packet_num,json=lowestAcceptablePacketNum,proto3" json:"lowest_acceptable_packet_num,omitempty"`
	NextExpectedPacketNum     []uint64 `protobuf:"varint,21,rep,packed,name=next_expected_packet_num,json=nextExpectedPacketNum,proto3" json:"next_expected_packet_num,omitempty"`
	CrcValue                  []uint32 `protobuf:"varint,22,rep,packed,name=crc_value,json=crcValue,proto3" json:"crc_value,omitempty"`
	XXX_NoUnkeyedLiteral      struct{} `json:"-"`
	XXX_unrecognized          []byte   `json:"-"`
	XXX_sizecache             int32    `json:"-"`
}

func (m *PlXlfpgaRxSaInfoT) Reset()         { *m = PlXlfpgaRxSaInfoT{} }
func (m *PlXlfpgaRxSaInfoT) String() string { return proto.CompactTextString(m) }
func (*PlXlfpgaRxSaInfoT) ProtoMessage()    {}
func (*PlXlfpgaRxSaInfoT) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb091d20d81fe12e, []int{4}
}

func (m *PlXlfpgaRxSaInfoT) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PlXlfpgaRxSaInfoT.Unmarshal(m, b)
}
func (m *PlXlfpgaRxSaInfoT) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PlXlfpgaRxSaInfoT.Marshal(b, m, deterministic)
}
func (m *PlXlfpgaRxSaInfoT) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlXlfpgaRxSaInfoT.Merge(m, src)
}
func (m *PlXlfpgaRxSaInfoT) XXX_Size() int {
	return xxx_messageInfo_PlXlfpgaRxSaInfoT.Size(m)
}
func (m *PlXlfpgaRxSaInfoT) XXX_DiscardUnknown() {
	xxx_messageInfo_PlXlfpgaRxSaInfoT.DiscardUnknown(m)
}

var xxx_messageInfo_PlXlfpgaRxSaInfoT proto.InternalMessageInfo

func (m *PlXlfpgaRxSaInfoT) GetProtectionEnable() bool {
	if m != nil {
		return m.ProtectionEnable
	}
	return false
}

func (m *PlXlfpgaRxSaInfoT) GetSecureMode() uint32 {
	if m != nil {
		return m.SecureMode
	}
	return 0
}

func (m *PlXlfpgaRxSaInfoT) GetReplayProtectMode() bool {
	if m != nil {
		return m.ReplayProtectMode
	}
	return false
}

func (m *PlXlfpgaRxSaInfoT) GetValidationMode() uint32 {
	if m != nil {
		return m.ValidationMode
	}
	return 0
}

func (m *PlXlfpgaRxSaInfoT) GetReplayWindow() uint32 {
	if m != nil {
		return m.ReplayWindow
	}
	return 0
}

func (m *PlXlfpgaRxSaInfoT) GetSecureChannelId() uint64 {
	if m != nil {
		return m.SecureChannelId
	}
	return 0
}

func (m *PlXlfpgaRxSaInfoT) GetCipherSuite() uint32 {
	if m != nil {
		return m.CipherSuite
	}
	return 0
}

func (m *PlXlfpgaRxSaInfoT) GetConfidentialityOffset() uint32 {
	if m != nil {
		return m.ConfidentialityOffset
	}
	return 0
}

func (m *PlXlfpgaRxSaInfoT) GetFcsErrCfg() uint32 {
	if m != nil {
		return m.FcsErrCfg
	}
	return 0
}

func (m *PlXlfpgaRxSaInfoT) GetAuthErrCfg() uint32 {
	if m != nil {
		return m.AuthErrCfg
	}
	return 0
}

func (m *PlXlfpgaRxSaInfoT) GetMaxPacketNum() uint64 {
	if m != nil {
		return m.MaxPacketNum
	}
	return 0
}

func (m *PlXlfpgaRxSaInfoT) GetNumAnInUse() uint32 {
	if m != nil {
		return m.NumAnInUse
	}
	return 0
}

func (m *PlXlfpgaRxSaInfoT) GetAn() []uint32 {
	if m != nil {
		return m.An
	}
	return nil
}

func (m *PlXlfpgaRxSaInfoT) GetRecentAn() uint32 {
	if m != nil {
		return m.RecentAn
	}
	return 0
}

func (m *PlXlfpgaRxSaInfoT) GetSsci() []uint32 {
	if m != nil {
		return m.Ssci
	}
	return nil
}

func (m *PlXlfpgaRxSaInfoT) GetPktUntaggedDetected() bool {
	if m != nil {
		return m.PktUntaggedDetected
	}
	return false
}

func (m *PlXlfpgaRxSaInfoT) GetPktTaggedDetected() bool {
	if m != nil {
		return m.PktTaggedDetected
	}
	return false
}

func (m *PlXlfpgaRxSaInfoT) GetPktTaggedValidated() bool {
	if m != nil {
		return m.PktTaggedValidated
	}
	return false
}

func (m *PlXlfpgaRxSaInfoT) GetCurrentPacketNum() uint64 {
	if m != nil {
		return m.CurrentPacketNum
	}
	return 0
}

func (m *PlXlfpgaRxSaInfoT) GetLowestAcceptablePacketNum() []uint64 {
	if m != nil {
		return m.LowestAcceptablePacketNum
	}
	return nil
}

func (m *PlXlfpgaRxSaInfoT) GetNextExpectedPacketNum() []uint64 {
	if m != nil {
		return m.NextExpectedPacketNum
	}
	return nil
}

func (m *PlXlfpgaRxSaInfoT) GetCrcValue() []uint32 {
	if m != nil {
		return m.CrcValue
	}
	return nil
}

type PlXlfpgaSaT struct {
	TxSa                 *PlXlfpgaTxSaInfoT `protobuf:"bytes,1,opt,name=tx_sa,json=txSa,proto3" json:"tx_sa,omitempty"`
	RxSa                 *PlXlfpgaRxSaInfoT `protobuf:"bytes,2,opt,name=rx_sa,json=rxSa,proto3" json:"rx_sa,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *PlXlfpgaSaT) Reset()         { *m = PlXlfpgaSaT{} }
func (m *PlXlfpgaSaT) String() string { return proto.CompactTextString(m) }
func (*PlXlfpgaSaT) ProtoMessage()    {}
func (*PlXlfpgaSaT) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb091d20d81fe12e, []int{5}
}

func (m *PlXlfpgaSaT) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PlXlfpgaSaT.Unmarshal(m, b)
}
func (m *PlXlfpgaSaT) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PlXlfpgaSaT.Marshal(b, m, deterministic)
}
func (m *PlXlfpgaSaT) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlXlfpgaSaT.Merge(m, src)
}
func (m *PlXlfpgaSaT) XXX_Size() int {
	return xxx_messageInfo_PlXlfpgaSaT.Size(m)
}
func (m *PlXlfpgaSaT) XXX_DiscardUnknown() {
	xxx_messageInfo_PlXlfpgaSaT.DiscardUnknown(m)
}

var xxx_messageInfo_PlXlfpgaSaT proto.InternalMessageInfo

func (m *PlXlfpgaSaT) GetTxSa() *PlXlfpgaTxSaInfoT {
	if m != nil {
		return m.TxSa
	}
	return nil
}

func (m *PlXlfpgaSaT) GetRxSa() *PlXlfpgaRxSaInfoT {
	if m != nil {
		return m.RxSa
	}
	return nil
}

type PlEs200XformParamsT struct {
	ReplayWinSize        uint32   `protobuf:"varint,1,opt,name=replay_win_size,json=replayWinSize,proto3" json:"replay_win_size,omitempty"`
	CryptAlgo            string   `protobuf:"bytes,2,opt,name=crypt_algo,json=cryptAlgo,proto3" json:"crypt_algo,omitempty"`
	IsEgressTr           bool     `protobuf:"varint,3,opt,name=is_egress_tr,json=isEgressTr,proto3" json:"is_egress_tr,omitempty"`
	AesKeyLen            string   `protobuf:"bytes,4,opt,name=aes_key_len,json=aesKeyLen,proto3" json:"aes_key_len,omitempty"`
	AssocNum             uint32   `protobuf:"varint,5,opt,name=assoc_num,json=assocNum,proto3" json:"assoc_num,omitempty"`
	IsSeqNum64Bit        bool     `protobuf:"varint,6,opt,name=is_seq_num64_bit,json=isSeqNum64Bit,proto3" json:"is_seq_num64_bit,omitempty"`
	BgenAuthKey          bool     `protobuf:"varint,7,opt,name=bgen_auth_key,json=bgenAuthKey,proto3" json:"bgen_auth_key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PlEs200XformParamsT) Reset()         { *m = PlEs200XformParamsT{} }
func (m *PlEs200XformParamsT) String() string { return proto.CompactTextString(m) }
func (*PlEs200XformParamsT) ProtoMessage()    {}
func (*PlEs200XformParamsT) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb091d20d81fe12e, []int{6}
}

func (m *PlEs200XformParamsT) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PlEs200XformParamsT.Unmarshal(m, b)
}
func (m *PlEs200XformParamsT) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PlEs200XformParamsT.Marshal(b, m, deterministic)
}
func (m *PlEs200XformParamsT) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlEs200XformParamsT.Merge(m, src)
}
func (m *PlEs200XformParamsT) XXX_Size() int {
	return xxx_messageInfo_PlEs200XformParamsT.Size(m)
}
func (m *PlEs200XformParamsT) XXX_DiscardUnknown() {
	xxx_messageInfo_PlEs200XformParamsT.DiscardUnknown(m)
}

var xxx_messageInfo_PlEs200XformParamsT proto.InternalMessageInfo

func (m *PlEs200XformParamsT) GetReplayWinSize() uint32 {
	if m != nil {
		return m.ReplayWinSize
	}
	return 0
}

func (m *PlEs200XformParamsT) GetCryptAlgo() string {
	if m != nil {
		return m.CryptAlgo
	}
	return ""
}

func (m *PlEs200XformParamsT) GetIsEgressTr() bool {
	if m != nil {
		return m.IsEgressTr
	}
	return false
}

func (m *PlEs200XformParamsT) GetAesKeyLen() string {
	if m != nil {
		return m.AesKeyLen
	}
	return ""
}

func (m *PlEs200XformParamsT) GetAssocNum() uint32 {
	if m != nil {
		return m.AssocNum
	}
	return 0
}

func (m *PlEs200XformParamsT) GetIsSeqNum64Bit() bool {
	if m != nil {
		return m.IsSeqNum64Bit
	}
	return false
}

func (m *PlEs200XformParamsT) GetBgenAuthKey() bool {
	if m != nil {
		return m.BgenAuthKey
	}
	return false
}

type PlEs200TxSaInfoT struct {
	IsValid                      bool                 `protobuf:"varint,1,opt,name=is_valid,json=isValid,proto3" json:"is_valid,omitempty"`
	SaId                         uint32               `protobuf:"varint,2,opt,name=sa_id,json=saId,proto3" json:"sa_id,omitempty"`
	ScNo                         uint32               `protobuf:"varint,3,opt,name=sc_no,json=scNo,proto3" json:"sc_no,omitempty"`
	XformParams                  *PlEs200XformParamsT `protobuf:"bytes,4,opt,name=xform_params,json=xformParams,proto3" json:"xform_params,omitempty"`
	OutPktsTooLong               uint32               `protobuf:"varint,5,opt,name=out_pkts_too_long,json=outPktsTooLong,proto3" json:"out_pkts_too_long,omitempty"`
	OutPktsEncryptedProtected    uint32               `protobuf:"varint,6,opt,name=out_pkts_encrypted_protected,json=outPktsEncryptedProtected,proto3" json:"out_pkts_encrypted_protected,omitempty"`
	OutOctetsEncryptedProtected1 uint32               `protobuf:"varint,7,opt,name=out_octets_encrypted_protected1,json=outOctetsEncryptedProtected1,proto3" json:"out_octets_encrypted_protected1,omitempty"`
	InitialPktNumber             uint32               `protobuf:"varint,8,opt,name=initial_pkt_number,json=initialPktNumber,proto3" json:"initial_pkt_number,omitempty"`
	CurrentPktNumber             uint64               `protobuf:"varint,9,opt,name=current_pkt_number,json=currentPktNumber,proto3" json:"current_pkt_number,omitempty"`
	MaxPktNumber                 uint64               `protobuf:"varint,10,opt,name=max_pkt_number,json=maxPktNumber,proto3" json:"max_pkt_number,omitempty"`
	XXX_NoUnkeyedLiteral         struct{}             `json:"-"`
	XXX_unrecognized             []byte               `json:"-"`
	XXX_sizecache                int32                `json:"-"`
}

func (m *PlEs200TxSaInfoT) Reset()         { *m = PlEs200TxSaInfoT{} }
func (m *PlEs200TxSaInfoT) String() string { return proto.CompactTextString(m) }
func (*PlEs200TxSaInfoT) ProtoMessage()    {}
func (*PlEs200TxSaInfoT) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb091d20d81fe12e, []int{7}
}

func (m *PlEs200TxSaInfoT) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PlEs200TxSaInfoT.Unmarshal(m, b)
}
func (m *PlEs200TxSaInfoT) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PlEs200TxSaInfoT.Marshal(b, m, deterministic)
}
func (m *PlEs200TxSaInfoT) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlEs200TxSaInfoT.Merge(m, src)
}
func (m *PlEs200TxSaInfoT) XXX_Size() int {
	return xxx_messageInfo_PlEs200TxSaInfoT.Size(m)
}
func (m *PlEs200TxSaInfoT) XXX_DiscardUnknown() {
	xxx_messageInfo_PlEs200TxSaInfoT.DiscardUnknown(m)
}

var xxx_messageInfo_PlEs200TxSaInfoT proto.InternalMessageInfo

func (m *PlEs200TxSaInfoT) GetIsValid() bool {
	if m != nil {
		return m.IsValid
	}
	return false
}

func (m *PlEs200TxSaInfoT) GetSaId() uint32 {
	if m != nil {
		return m.SaId
	}
	return 0
}

func (m *PlEs200TxSaInfoT) GetScNo() uint32 {
	if m != nil {
		return m.ScNo
	}
	return 0
}

func (m *PlEs200TxSaInfoT) GetXformParams() *PlEs200XformParamsT {
	if m != nil {
		return m.XformParams
	}
	return nil
}

func (m *PlEs200TxSaInfoT) GetOutPktsTooLong() uint32 {
	if m != nil {
		return m.OutPktsTooLong
	}
	return 0
}

func (m *PlEs200TxSaInfoT) GetOutPktsEncryptedProtected() uint32 {
	if m != nil {
		return m.OutPktsEncryptedProtected
	}
	return 0
}

func (m *PlEs200TxSaInfoT) GetOutOctetsEncryptedProtected1() uint32 {
	if m != nil {
		return m.OutOctetsEncryptedProtected1
	}
	return 0
}

func (m *PlEs200TxSaInfoT) GetInitialPktNumber() uint32 {
	if m != nil {
		return m.InitialPktNumber
	}
	return 0
}

func (m *PlEs200TxSaInfoT) GetCurrentPktNumber() uint64 {
	if m != nil {
		return m.CurrentPktNumber
	}
	return 0
}

func (m *PlEs200TxSaInfoT) GetMaxPktNumber() uint64 {
	if m != nil {
		return m.MaxPktNumber
	}
	return 0
}

type PlEs200RxSaInfoT struct {
	IsValid                     bool                 `protobuf:"varint,1,opt,name=is_valid,json=isValid,proto3" json:"is_valid,omitempty"`
	SaId                        uint32               `protobuf:"varint,2,opt,name=sa_id,json=saId,proto3" json:"sa_id,omitempty"`
	ScNo                        uint32               `protobuf:"varint,3,opt,name=sc_no,json=scNo,proto3" json:"sc_no,omitempty"`
	XformParams                 *PlEs200XformParamsT `protobuf:"bytes,4,opt,name=xform_params,json=xformParams,proto3" json:"xform_params,omitempty"`
	InPktsUnchecked             uint32               `protobuf:"varint,5,opt,name=in_pkts_unchecked,json=inPktsUnchecked,proto3" json:"in_pkts_unchecked,omitempty"`
	InPktsDelayed               uint32               `protobuf:"varint,6,opt,name=in_pkts_delayed,json=inPktsDelayed,proto3" json:"in_pkts_delayed,omitempty"`
	InPktsLate                  uint32               `protobuf:"varint,7,opt,name=in_pkts_late,json=inPktsLate,proto3" json:"in_pkts_late,omitempty"`
	InPktsOk                    uint32               `protobuf:"varint,8,opt,name=in_pkts_ok,json=inPktsOk,proto3" json:"in_pkts_ok,omitempty"`
	InPktsInvalid               uint32               `protobuf:"varint,9,opt,name=in_pkts_invalid,json=inPktsInvalid,proto3" json:"in_pkts_invalid,omitempty"`
	InPktsNotValid              uint32               `protobuf:"varint,10,opt,name=in_pkts_not_valid,json=inPktsNotValid,proto3" json:"in_pkts_not_valid,omitempty"`
	InPktsNotUsingSa            uint32               `protobuf:"varint,11,opt,name=in_pkts_not_using_sa,json=inPktsNotUsingSa,proto3" json:"in_pkts_not_using_sa,omitempty"`
	InPktsUnusedSa              uint32               `protobuf:"varint,12,opt,name=in_pkts_unused_sa,json=inPktsUnusedSa,proto3" json:"in_pkts_unused_sa,omitempty"`
	InOctetsDecryptedValidated1 uint32               `protobuf:"varint,13,opt,name=in_octets_decrypted_validated1,json=inOctetsDecryptedValidated1,proto3" json:"in_octets_decrypted_validated1,omitempty"`
	InOctetsValidated           uint32               `protobuf:"varint,14,opt,name=in_octets_validated,json=inOctetsValidated,proto3" json:"in_octets_validated,omitempty"`
	XXX_NoUnkeyedLiteral        struct{}             `json:"-"`
	XXX_unrecognized            []byte               `json:"-"`
	XXX_sizecache               int32                `json:"-"`
}

func (m *PlEs200RxSaInfoT) Reset()         { *m = PlEs200RxSaInfoT{} }
func (m *PlEs200RxSaInfoT) String() string { return proto.CompactTextString(m) }
func (*PlEs200RxSaInfoT) ProtoMessage()    {}
func (*PlEs200RxSaInfoT) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb091d20d81fe12e, []int{8}
}

func (m *PlEs200RxSaInfoT) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PlEs200RxSaInfoT.Unmarshal(m, b)
}
func (m *PlEs200RxSaInfoT) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PlEs200RxSaInfoT.Marshal(b, m, deterministic)
}
func (m *PlEs200RxSaInfoT) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlEs200RxSaInfoT.Merge(m, src)
}
func (m *PlEs200RxSaInfoT) XXX_Size() int {
	return xxx_messageInfo_PlEs200RxSaInfoT.Size(m)
}
func (m *PlEs200RxSaInfoT) XXX_DiscardUnknown() {
	xxx_messageInfo_PlEs200RxSaInfoT.DiscardUnknown(m)
}

var xxx_messageInfo_PlEs200RxSaInfoT proto.InternalMessageInfo

func (m *PlEs200RxSaInfoT) GetIsValid() bool {
	if m != nil {
		return m.IsValid
	}
	return false
}

func (m *PlEs200RxSaInfoT) GetSaId() uint32 {
	if m != nil {
		return m.SaId
	}
	return 0
}

func (m *PlEs200RxSaInfoT) GetScNo() uint32 {
	if m != nil {
		return m.ScNo
	}
	return 0
}

func (m *PlEs200RxSaInfoT) GetXformParams() *PlEs200XformParamsT {
	if m != nil {
		return m.XformParams
	}
	return nil
}

func (m *PlEs200RxSaInfoT) GetInPktsUnchecked() uint32 {
	if m != nil {
		return m.InPktsUnchecked
	}
	return 0
}

func (m *PlEs200RxSaInfoT) GetInPktsDelayed() uint32 {
	if m != nil {
		return m.InPktsDelayed
	}
	return 0
}

func (m *PlEs200RxSaInfoT) GetInPktsLate() uint32 {
	if m != nil {
		return m.InPktsLate
	}
	return 0
}

func (m *PlEs200RxSaInfoT) GetInPktsOk() uint32 {
	if m != nil {
		return m.InPktsOk
	}
	return 0
}

func (m *PlEs200RxSaInfoT) GetInPktsInvalid() uint32 {
	if m != nil {
		return m.InPktsInvalid
	}
	return 0
}

func (m *PlEs200RxSaInfoT) GetInPktsNotValid() uint32 {
	if m != nil {
		return m.InPktsNotValid
	}
	return 0
}

func (m *PlEs200RxSaInfoT) GetInPktsNotUsingSa() uint32 {
	if m != nil {
		return m.InPktsNotUsingSa
	}
	return 0
}

func (m *PlEs200RxSaInfoT) GetInPktsUnusedSa() uint32 {
	if m != nil {
		return m.InPktsUnusedSa
	}
	return 0
}

func (m *PlEs200RxSaInfoT) GetInOctetsDecryptedValidated1() uint32 {
	if m != nil {
		return m.InOctetsDecryptedValidated1
	}
	return 0
}

func (m *PlEs200RxSaInfoT) GetInOctetsValidated() uint32 {
	if m != nil {
		return m.InOctetsValidated
	}
	return 0
}

type PlEs200SaT struct {
	TxSa                 *PlEs200TxSaInfoT   `protobuf:"bytes,1,opt,name=tx_sa,json=txSa,proto3" json:"tx_sa,omitempty"`
	RxSa                 []*PlEs200RxSaInfoT `protobuf:"bytes,2,rep,name=rx_sa,json=rxSa,proto3" json:"rx_sa,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *PlEs200SaT) Reset()         { *m = PlEs200SaT{} }
func (m *PlEs200SaT) String() string { return proto.CompactTextString(m) }
func (*PlEs200SaT) ProtoMessage()    {}
func (*PlEs200SaT) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb091d20d81fe12e, []int{9}
}

func (m *PlEs200SaT) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PlEs200SaT.Unmarshal(m, b)
}
func (m *PlEs200SaT) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PlEs200SaT.Marshal(b, m, deterministic)
}
func (m *PlEs200SaT) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlEs200SaT.Merge(m, src)
}
func (m *PlEs200SaT) XXX_Size() int {
	return xxx_messageInfo_PlEs200SaT.Size(m)
}
func (m *PlEs200SaT) XXX_DiscardUnknown() {
	xxx_messageInfo_PlEs200SaT.DiscardUnknown(m)
}

var xxx_messageInfo_PlEs200SaT proto.InternalMessageInfo

func (m *PlEs200SaT) GetTxSa() *PlEs200TxSaInfoT {
	if m != nil {
		return m.TxSa
	}
	return nil
}

func (m *PlEs200SaT) GetRxSa() []*PlEs200RxSaInfoT {
	if m != nil {
		return m.RxSa
	}
	return nil
}

type PlMacsecSaExt struct {
	Type                 string       `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	MsfpgaSa             *PlMsfpgaSaT `protobuf:"bytes,2,opt,name=msfpga_sa,json=msfpgaSa,proto3" json:"msfpga_sa,omitempty"`
	XlfpgaSa             *PlXlfpgaSaT `protobuf:"bytes,3,opt,name=xlfpga_sa,json=xlfpgaSa,proto3" json:"xlfpga_sa,omitempty"`
	Es200Sa              *PlEs200SaT  `protobuf:"bytes,4,opt,name=es200_sa,json=es200Sa,proto3" json:"es200_sa,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *PlMacsecSaExt) Reset()         { *m = PlMacsecSaExt{} }
func (m *PlMacsecSaExt) String() string { return proto.CompactTextString(m) }
func (*PlMacsecSaExt) ProtoMessage()    {}
func (*PlMacsecSaExt) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb091d20d81fe12e, []int{10}
}

func (m *PlMacsecSaExt) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PlMacsecSaExt.Unmarshal(m, b)
}
func (m *PlMacsecSaExt) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PlMacsecSaExt.Marshal(b, m, deterministic)
}
func (m *PlMacsecSaExt) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlMacsecSaExt.Merge(m, src)
}
func (m *PlMacsecSaExt) XXX_Size() int {
	return xxx_messageInfo_PlMacsecSaExt.Size(m)
}
func (m *PlMacsecSaExt) XXX_DiscardUnknown() {
	xxx_messageInfo_PlMacsecSaExt.DiscardUnknown(m)
}

var xxx_messageInfo_PlMacsecSaExt proto.InternalMessageInfo

func (m *PlMacsecSaExt) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *PlMacsecSaExt) GetMsfpgaSa() *PlMsfpgaSaT {
	if m != nil {
		return m.MsfpgaSa
	}
	return nil
}

func (m *PlMacsecSaExt) GetXlfpgaSa() *PlXlfpgaSaT {
	if m != nil {
		return m.XlfpgaSa
	}
	return nil
}

func (m *PlMacsecSaExt) GetEs200Sa() *PlEs200SaT {
	if m != nil {
		return m.Es200Sa
	}
	return nil
}

type PlMacsecSaT struct {
	Ext                  *PlMacsecSaExt `protobuf:"bytes,50,opt,name=ext,proto3" json:"ext,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *PlMacsecSaT) Reset()         { *m = PlMacsecSaT{} }
func (m *PlMacsecSaT) String() string { return proto.CompactTextString(m) }
func (*PlMacsecSaT) ProtoMessage()    {}
func (*PlMacsecSaT) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb091d20d81fe12e, []int{11}
}

func (m *PlMacsecSaT) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PlMacsecSaT.Unmarshal(m, b)
}
func (m *PlMacsecSaT) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PlMacsecSaT.Marshal(b, m, deterministic)
}
func (m *PlMacsecSaT) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlMacsecSaT.Merge(m, src)
}
func (m *PlMacsecSaT) XXX_Size() int {
	return xxx_messageInfo_PlMacsecSaT.Size(m)
}
func (m *PlMacsecSaT) XXX_DiscardUnknown() {
	xxx_messageInfo_PlMacsecSaT.DiscardUnknown(m)
}

var xxx_messageInfo_PlMacsecSaT proto.InternalMessageInfo

func (m *PlMacsecSaT) GetExt() *PlMacsecSaExt {
	if m != nil {
		return m.Ext
	}
	return nil
}

func init() {
	proto.RegisterType((*PlMacsecSaT_KEYS)(nil), "cisco_ios_xr_crypto_macsec_pl_oper.macsec_platform.nodes.node.interfaces.interface.hw_sas.hw_sa.pl_macsec_sa_t_KEYS")
	proto.RegisterType((*PlMsfpgaSaInfoT)(nil), "cisco_ios_xr_crypto_macsec_pl_oper.macsec_platform.nodes.node.interfaces.interface.hw_sas.hw_sa.pl_msfpga_sa_info_t")
	proto.RegisterType((*PlMsfpgaSaT)(nil), "cisco_ios_xr_crypto_macsec_pl_oper.macsec_platform.nodes.node.interfaces.interface.hw_sas.hw_sa.pl_msfpga_sa_t")
	proto.RegisterType((*PlXlfpgaTxSaInfoT)(nil), "cisco_ios_xr_crypto_macsec_pl_oper.macsec_platform.nodes.node.interfaces.interface.hw_sas.hw_sa.pl_xlfpga_tx_sa_info_t")
	proto.RegisterType((*PlXlfpgaRxSaInfoT)(nil), "cisco_ios_xr_crypto_macsec_pl_oper.macsec_platform.nodes.node.interfaces.interface.hw_sas.hw_sa.pl_xlfpga_rx_sa_info_t")
	proto.RegisterType((*PlXlfpgaSaT)(nil), "cisco_ios_xr_crypto_macsec_pl_oper.macsec_platform.nodes.node.interfaces.interface.hw_sas.hw_sa.pl_xlfpga_sa_t")
	proto.RegisterType((*PlEs200XformParamsT)(nil), "cisco_ios_xr_crypto_macsec_pl_oper.macsec_platform.nodes.node.interfaces.interface.hw_sas.hw_sa.pl_es200_xform_params_t")
	proto.RegisterType((*PlEs200TxSaInfoT)(nil), "cisco_ios_xr_crypto_macsec_pl_oper.macsec_platform.nodes.node.interfaces.interface.hw_sas.hw_sa.pl_es200_tx_sa_info_t")
	proto.RegisterType((*PlEs200RxSaInfoT)(nil), "cisco_ios_xr_crypto_macsec_pl_oper.macsec_platform.nodes.node.interfaces.interface.hw_sas.hw_sa.pl_es200_rx_sa_info_t")
	proto.RegisterType((*PlEs200SaT)(nil), "cisco_ios_xr_crypto_macsec_pl_oper.macsec_platform.nodes.node.interfaces.interface.hw_sas.hw_sa.pl_es200_sa_t")
	proto.RegisterType((*PlMacsecSaExt)(nil), "cisco_ios_xr_crypto_macsec_pl_oper.macsec_platform.nodes.node.interfaces.interface.hw_sas.hw_sa.pl_macsec_sa_ext")
	proto.RegisterType((*PlMacsecSaT)(nil), "cisco_ios_xr_crypto_macsec_pl_oper.macsec_platform.nodes.node.interfaces.interface.hw_sas.hw_sa.pl_macsec_sa_t")
}

func init() { proto.RegisterFile("pl_macsec_sa_t.proto", fileDescriptor_cb091d20d81fe12e) }

var fileDescriptor_cb091d20d81fe12e = []byte{
	// 1629 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe4, 0x58, 0xcb, 0x6e, 0x1b, 0xbd,
	0x15, 0x86, 0x2e, 0x96, 0x47, 0x94, 0xe4, 0xcb, 0xf8, 0xf2, 0x8f, 0xe1, 0x34, 0x71, 0x94, 0xa2,
	0x71, 0xd3, 0x42, 0x88, 0xdd, 0xdb, 0xb2, 0x70, 0x13, 0x2f, 0x8c, 0xb8, 0x8e, 0x31, 0x8a, 0x53,
	0x14, 0x5d, 0x10, 0x34, 0x87, 0x92, 0x09, 0x8d, 0xc8, 0xf1, 0x90, 0x13, 0x4b, 0xd9, 0x76, 0x55,
	0x24, 0x9b, 0x6e, 0xba, 0xe9, 0x0b, 0x14, 0x28, 0xd0, 0xa2, 0x6f, 0xd2, 0x75, 0x1f, 0xa5, 0xab,
	0x82, 0x87, 0x9c, 0xd1, 0x58, 0x91, 0x17, 0x59, 0x44, 0x5d, 0xfc, 0x9b, 0x84, 0xfc, 0xce, 0xc7,
	0x43, 0x9a, 0xfc, 0xce, 0x45, 0x83, 0xb6, 0x93, 0x18, 0x8f, 0x09, 0x55, 0x8c, 0x62, 0x45, 0xb0,
	0xee, 0x25, 0xa9, 0xd4, 0xd2, 0xc7, 0x94, 0x2b, 0x2a, 0x31, 0x97, 0x0a, 0x4f, 0x52, 0x4c, 0xd3,
	0x69, 0xa2, 0x65, 0x4e, 0x4b, 0x62, 0x2c, 0x13, 0x96, 0xf6, 0x8a, 0x29, 0xd1, 0x03, 0x99, 0x8e,
	0x7b, 0x42, 0x46, 0x4c, 0xc1, 0xbf, 0x3d, 0x2e, 0x34, 0x4b, 0x07, 0x84, 0x32, 0x35, 0x1b, 0xf6,
	0x6e, 0xee, 0xb0, 0x22, 0xca, 0xfe, 0xd7, 0xfd, 0x03, 0xda, 0xba, 0xbf, 0x31, 0x7e, 0x73, 0xfa,
	0xfb, 0xbe, 0xbf, 0x8f, 0x9a, 0xc6, 0x01, 0x16, 0x64, 0xcc, 0x82, 0xca, 0x41, 0xe5, 0xb0, 0x19,
	0x7a, 0x06, 0xb8, 0x20, 0x63, 0xe6, 0xfb, 0xa8, 0x0e, 0x78, 0x15, 0x70, 0x18, 0xfb, 0x5b, 0x68,
	0x45, 0x11, 0xcc, 0xa3, 0xa0, 0x76, 0x50, 0x39, 0xec, 0x84, 0x75, 0x45, 0xce, 0xa2, 0xee, 0x7f,
	0xaa, 0xd6, 0xbb, 0x1a, 0x24, 0x43, 0x62, 0xbc, 0x73, 0x31, 0x90, 0x58, 0xcf, 0xc8, 0x95, 0x19,
	0xd9, 0xdf, 0x46, 0x2b, 0x1f, 0x48, 0xcc, 0x23, 0x70, 0xeb, 0x85, 0x76, 0x62, 0x0e, 0xc2, 0x15,
	0x66, 0xc3, 0x94, 0x29, 0x05, 0xbe, 0xbd, 0xd0, 0xe3, 0xea, 0x14, 0xe6, 0xfe, 0x13, 0xd4, 0x72,
	0x57, 0x42, 0xe2, 0xa1, 0x0c, 0xea, 0xe0, 0x0d, 0x59, 0xe8, 0x24, 0x1e, 0x4a, 0xff, 0x3b, 0xb4,
	0x3a, 0x62, 0x53, 0x1c, 0x33, 0x11, 0xac, 0x80, 0xb1, 0x31, 0x62, 0xd3, 0x73, 0x26, 0xfc, 0x35,
	0x54, 0x25, 0x22, 0x68, 0x00, 0x56, 0x25, 0xc2, 0xdf, 0x40, 0xb5, 0x49, 0x22, 0x82, 0x55, 0x00,
	0xcc, 0xd0, 0x20, 0x8a, 0xf2, 0xc0, 0x3b, 0xa8, 0x1c, 0xd6, 0x43, 0x33, 0xf4, 0x77, 0x50, 0x83,
	0x0b, 0x9c, 0x29, 0x16, 0x34, 0xed, 0x09, 0xb9, 0xb8, 0x52, 0xcc, 0xec, 0x21, 0xd8, 0x44, 0xe3,
	0x44, 0x04, 0x08, 0xc8, 0x0d, 0x33, 0xbd, 0x14, 0xfe, 0x1e, 0xf2, 0x28, 0x96, 0x83, 0x81, 0x62,
	0x3a, 0x68, 0x81, 0xe3, 0x55, 0xfa, 0x16, 0xa6, 0xfe, 0x2e, 0x6a, 0x10, 0xaa, 0xb9, 0x14, 0x41,
	0xdb, 0x1e, 0xcb, 0xce, 0xcc, 0xc5, 0xdc, 0xe2, 0x6b, 0xae, 0x83, 0x0e, 0xec, 0x50, 0xbf, 0xfd,
	0x0d, 0xd7, 0x66, 0xdf, 0x5b, 0x8b, 0xae, 0xd9, 0x7d, 0x6f, 0x0d, 0xdc, 0xfd, 0x5b, 0x15, 0xad,
	0xdd, 0xbb, 0x5c, 0xed, 0xff, 0xa9, 0x82, 0x56, 0xf4, 0x04, 0x2b, 0x02, 0x17, 0xdb, 0x3a, 0xd6,
	0xbd, 0x6f, 0x2c, 0x9f, 0xde, 0x82, 0xd7, 0x0d, 0xeb, 0x7a, 0xd2, 0x27, 0x70, 0x96, 0x14, 0xce,
	0x52, 0xfd, 0x7f, 0x9e, 0x25, 0x9d, 0xf4, 0x49, 0xf7, 0xbf, 0x35, 0xb4, 0x9b, 0xc4, 0x78, 0x12,
	0x83, 0x15, 0x6e, 0x28, 0x97, 0xe2, 0x4f, 0xd0, 0xa6, 0x89, 0x34, 0x06, 0xf7, 0x8f, 0x99, 0x20,
	0xd7, 0xb1, 0x15, 0xbc, 0x17, 0x6e, 0xcc, 0x0c, 0xa7, 0x80, 0x1b, 0xbd, 0x29, 0x46, 0xb3, 0x94,
	0xe1, 0xb1, 0x8c, 0xac, 0xfe, 0x3b, 0x21, 0xb2, 0xd0, 0x6f, 0x65, 0xc4, 0xfc, 0x17, 0x68, 0xd3,
	0x11, 0xe8, 0x0d, 0x11, 0x82, 0xc5, 0x79, 0x44, 0xd4, 0xc3, 0x75, 0x6b, 0x78, 0x65, 0xf1, 0xb3,
	0xc8, 0x7f, 0x86, 0x3a, 0x8a, 0x51, 0x4d, 0x86, 0x46, 0x9e, 0x43, 0x7d, 0xe3, 0xe4, 0xdb, 0xb6,
	0xe0, 0x39, 0x60, 0xfe, 0x53, 0xd4, 0xa6, 0x3c, 0xb9, 0x61, 0x29, 0x56, 0x19, 0xd7, 0xcc, 0xa9,
	0xb8, 0x65, 0xb1, 0xbe, 0x81, 0xfc, 0x5f, 0xa0, 0x5d, 0x2a, 0xc5, 0x80, 0x47, 0x4c, 0x68, 0x4e,
	0x62, 0xae, 0xa7, 0xb9, 0xe8, 0xac, 0xbc, 0x77, 0xe6, 0xac, 0x4e, 0x82, 0x8f, 0x51, 0x6b, 0x40,
	0x15, 0x66, 0x69, 0x8a, 0xe9, 0x60, 0xe8, 0x94, 0xdf, 0x1c, 0x50, 0x75, 0x9a, 0xa6, 0xaf, 0x06,
	0x43, 0xff, 0x87, 0x68, 0x6d, 0x4c, 0x26, 0x38, 0x21, 0x74, 0xc4, 0x34, 0x16, 0xd9, 0xd8, 0x85,
	0x42, 0x7b, 0x4c, 0x26, 0x97, 0x00, 0x5e, 0x64, 0x63, 0x17, 0x47, 0xcd, 0x22, 0x8e, 0x8e, 0xd1,
	0x0e, 0x17, 0xdc, 0xec, 0x54, 0x5a, 0x79, 0xcd, 0x52, 0x17, 0x1a, 0x5b, 0xce, 0x58, 0x38, 0xb8,
	0x66, 0xa9, 0x49, 0x27, 0xca, 0x84, 0x5a, 0xcb, 0x25, 0x03, 0x13, 0x6b, 0x3f, 0x45, 0x3e, 0xcd,
	0xd2, 0x94, 0x09, 0x5d, 0x3e, 0x41, 0x1b, 0x9c, 0x6c, 0x38, 0xcb, 0xec, 0x14, 0xfb, 0xa8, 0x49,
	0x53, 0x8a, 0x3f, 0x90, 0x38, 0x63, 0x10, 0x3a, 0x9d, 0xd0, 0xa3, 0x29, 0x7d, 0x6f, 0xe6, 0xdd,
	0x3f, 0xaf, 0x96, 0x1f, 0x3f, 0xfd, 0x76, 0x8f, 0xdf, 0x43, 0x5b, 0x29, 0x4b, 0x62, 0x32, 0xc5,
	0x6e, 0xad, 0x25, 0xda, 0xa4, 0xb5, 0x69, 0x4d, 0x97, 0xd6, 0x02, 0xfc, 0xe7, 0x68, 0x1d, 0x72,
	0x1c, 0x81, 0xdd, 0x81, 0x6b, 0x25, 0xb0, 0x36, 0x83, 0x81, 0xf8, 0x0c, 0x75, 0x9c, 0xe3, 0x3b,
	0x2e, 0x22, 0x79, 0xe7, 0x54, 0xd0, 0xb6, 0xe0, 0xef, 0x00, 0x5b, 0x2c, 0xbd, 0xc6, 0x62, 0xe9,
	0xcd, 0xab, 0x6a, 0xf5, 0x6b, 0x54, 0xe5, 0x7d, 0x85, 0xaa, 0x9a, 0xf3, 0xaa, 0x3a, 0x40, 0x6d,
	0x92, 0xe9, 0x9b, 0x82, 0x80, 0xec, 0x2d, 0x1a, 0xec, 0x41, 0xdd, 0xb5, 0x16, 0xe8, 0xee, 0x29,
	0xea, 0x88, 0x6c, 0x8c, 0x89, 0xc0, 0x2e, 0x25, 0xdb, 0x3c, 0x8a, 0x44, 0x36, 0x3e, 0x11, 0x67,
	0x90, 0x97, 0xad, 0x34, 0x3b, 0x07, 0x35, 0x27, 0xcd, 0x7d, 0xd4, 0x4c, 0x19, 0x35, 0x8a, 0x22,
	0x02, 0x32, 0x69, 0x27, 0xf4, 0x2c, 0x70, 0x22, 0x0a, 0x0d, 0xae, 0x03, 0xdd, 0x6a, 0xf0, 0x18,
	0xed, 0x24, 0x23, 0x8d, 0x33, 0xa1, 0xc9, 0x70, 0xc8, 0x22, 0x1c, 0x31, 0xf3, 0x74, 0x2c, 0x0a,
	0x36, 0xe0, 0x45, 0xb7, 0x92, 0x91, 0xbe, 0x72, 0xb6, 0xd7, 0xce, 0x64, 0x34, 0x60, 0xd6, 0xcc,
	0xaf, 0xd8, 0xb4, 0x1a, 0x48, 0x46, 0xfa, 0xdd, 0x7d, 0xfe, 0x4b, 0xb4, 0x5d, 0xe2, 0xbb, 0x77,
	0x67, 0x51, 0xe0, 0xc3, 0x02, 0xbf, 0x58, 0xf0, 0x3e, 0xb7, 0x3c, 0x10, 0x19, 0x5b, 0x0f, 0x44,
	0xc6, 0xaf, 0xd1, 0xa3, 0x58, 0xde, 0x31, 0xa5, 0x31, 0xa1, 0x94, 0x25, 0xda, 0x28, 0xb9, 0xbc,
	0x6e, 0xfb, 0xa0, 0x76, 0x58, 0x0f, 0xf7, 0x2c, 0xe7, 0xa4, 0xa0, 0xcc, 0x1c, 0xfc, 0x0a, 0x05,
	0x50, 0xdd, 0xd8, 0x24, 0x81, 0x13, 0x97, 0x17, 0xef, 0xc0, 0xe2, 0x1d, 0x63, 0x3f, 0x75, 0xe6,
	0x07, 0x62, 0x72, 0x17, 0xae, 0x75, 0x16, 0x93, 0xff, 0xb0, 0xb5, 0xcb, 0xc5, 0x24, 0xd4, 0xae,
	0xcf, 0x73, 0xb5, 0xeb, 0x6e, 0x19, 0xf5, 0x62, 0x41, 0x45, 0x70, 0xe5, 0xeb, 0xf3, 0x5c, 0xf9,
	0x5a, 0xe6, 0x71, 0xd2, 0xc9, 0x17, 0x15, 0xec, 0x73, 0x15, 0x7d, 0x97, 0xc4, 0x98, 0xa9, 0xe3,
	0x97, 0x2f, 0xf1, 0xc4, 0x38, 0xc7, 0x09, 0x49, 0xc9, 0x58, 0x61, 0xed, 0xff, 0x08, 0xad, 0xcf,
	0xd2, 0x03, 0x56, 0xfc, 0x23, 0x73, 0x7d, 0x55, 0xa7, 0x48, 0x10, 0x7d, 0xfe, 0x91, 0xf9, 0x3f,
	0x40, 0xb6, 0x35, 0xb2, 0xcd, 0x92, 0x6d, 0xde, 0x9a, 0x80, 0x40, 0xaf, 0x74, 0x80, 0xda, 0x45,
	0xa7, 0x85, 0x75, 0xea, 0xf2, 0x16, 0xca, 0x9b, 0xad, 0x77, 0xa9, 0x09, 0x6e, 0xc2, 0x14, 0xce,
	0x3b, 0xaa, 0xba, 0xf5, 0x40, 0x98, 0x7a, 0x63, 0x9b, 0xaa, 0x7d, 0xd4, 0x24, 0x4a, 0x49, 0x0a,
	0xe2, 0xb0, 0x39, 0xca, 0x03, 0xc0, 0xe8, 0xe1, 0x39, 0xda, 0xe0, 0x0a, 0x2b, 0x76, 0x6b, 0xac,
	0xbf, 0xfc, 0x39, 0xf4, 0x33, 0x0d, 0xd8, 0xa2, 0xc3, 0x55, 0x9f, 0xdd, 0x5e, 0x18, 0xd4, 0xb4,
	0x3b, 0x5d, 0xd4, 0xb9, 0x1e, 0x32, 0x81, 0x21, 0x4f, 0x8c, 0xd8, 0x14, 0xb2, 0x93, 0x17, 0xb6,
	0x0c, 0x78, 0x92, 0xe9, 0x9b, 0x37, 0x6c, 0xda, 0xfd, 0x67, 0x1d, 0xed, 0x14, 0xd7, 0x71, 0xaf,
	0x9e, 0xef, 0x21, 0x8f, 0x2b, 0x1b, 0x48, 0x2e, 0x93, 0xaf, 0x72, 0x05, 0xd1, 0x33, 0xeb, 0x3a,
	0xab, 0xa5, 0xae, 0xd3, 0x80, 0x14, 0x0b, 0x59, 0xf4, 0xad, 0xf4, 0x42, 0xfa, 0x7f, 0xad, 0xa0,
	0x76, 0xf9, 0x92, 0xe1, 0x4f, 0x6d, 0x1d, 0x4f, 0x96, 0xa1, 0x81, 0x45, 0x4f, 0x1c, 0xb6, 0x60,
	0x7e, 0x09, 0x53, 0xff, 0xc7, 0x68, 0x53, 0x66, 0x1a, 0x27, 0x23, 0xad, 0xb0, 0x96, 0x12, 0xc7,
	0x52, 0x0c, 0xdd, 0x75, 0xaf, 0xc9, 0x4c, 0x5f, 0x8e, 0xb4, 0x7a, 0x27, 0xe5, 0xb9, 0x14, 0x43,
	0x13, 0xfe, 0x05, 0x95, 0x09, 0x38, 0xb0, 0x09, 0x61, 0x5b, 0x84, 0x58, 0xe4, 0x3a, 0x84, 0x3d,
	0xb7, 0xea, 0x34, 0x67, 0x5c, 0xe6, 0x04, 0xff, 0x14, 0x3d, 0x31, 0x0e, 0x24, 0xd5, 0x6c, 0xb1,
	0x8b, 0x23, 0x57, 0x3c, 0xcc, 0x3e, 0x6f, 0x81, 0xf5, 0xa5, 0x97, 0x23, 0x93, 0xb4, 0x8a, 0xb6,
	0x60, 0x54, 0xf4, 0x04, 0xb6, 0x92, 0x6c, 0xe4, 0x3d, 0xc1, 0x28, 0x6f, 0x08, 0xca, 0x29, 0x6e,
	0xc6, 0x6e, 0xde, 0x4f, 0x71, 0x05, 0x3b, 0x2f, 0x18, 0xa3, 0xb9, 0x5e, 0x03, 0x0a, 0x46, 0xce,
	0xea, 0xfe, 0x6b, 0xa5, 0xa4, 0x98, 0xf4, 0x7b, 0xa6, 0x98, 0x17, 0x68, 0x93, 0x0b, 0xab, 0x82,
	0x4c, 0xd0, 0x1b, 0x46, 0x47, 0x2c, 0x72, 0x8a, 0x59, 0xe7, 0xc2, 0x3c, 0xfd, 0x55, 0x0e, 0x9b,
	0x6c, 0x92, 0x73, 0x23, 0x16, 0x93, 0x69, 0xa1, 0x92, 0x8e, 0x65, 0xbe, 0xb6, 0x20, 0xa4, 0x0b,
	0xc7, 0x8b, 0x49, 0xd1, 0x43, 0x20, 0x4b, 0x3a, 0x27, 0x9a, 0xf9, 0x8f, 0x10, 0xca, 0x19, 0x72,
	0xe4, 0x1e, 0xdb, 0xb3, 0xf6, 0xb7, 0xa3, 0xf2, 0x3e, 0x5c, 0xd8, 0xdb, 0x6f, 0x96, 0xf7, 0x39,
	0xb3, 0xa0, 0x51, 0x7b, 0xce, 0x13, 0x52, 0xbb, 0x77, 0xb2, 0x6d, 0xc3, 0x9a, 0x65, 0x5e, 0x48,
	0x6d, 0x9f, 0xab, 0x87, 0xb6, 0xcb, 0xd4, 0x4c, 0x71, 0x31, 0x34, 0x19, 0xbc, 0x95, 0xeb, 0xcc,
	0xb1, 0xaf, 0x8c, 0xa1, 0x4f, 0xca, 0xae, 0x33, 0x91, 0x29, 0x16, 0x19, 0x72, 0xbb, 0xec, 0xfa,
	0x0a, 0xe0, 0x3e, 0xf1, 0x5f, 0xa1, 0xc7, 0x5c, 0xe4, 0x61, 0x10, 0xb1, 0x3c, 0x0c, 0x8a, 0x82,
	0x7d, 0xe4, 0xda, 0xce, 0x7d, 0x2e, 0x6c, 0x14, 0xbc, 0xce, 0x39, 0x45, 0xe5, 0x3e, 0x32, 0xcd,
	0xc1, 0xcc, 0xc9, 0xac, 0xd6, 0xdb, 0x5e, 0x64, 0x33, 0x5f, 0x59, 0x2c, 0xe8, 0xfe, 0xbd, 0x8a,
	0x3a, 0xc5, 0xfb, 0x42, 0x91, 0xfc, 0x34, 0x57, 0x24, 0x3f, 0x2c, 0x4f, 0x5f, 0x0b, 0x6a, 0xe4,
	0xa7, 0x52, 0x8d, 0xac, 0x2d, 0xf7, 0x34, 0x0b, 0x4a, 0xe4, 0xbf, 0x6b, 0x68, 0xe3, 0xde, 0xa7,
	0x0c, 0x36, 0xd1, 0xa6, 0xaf, 0xd3, 0xd3, 0x24, 0xff, 0x84, 0x01, 0x63, 0x53, 0xda, 0x9b, 0xc5,
	0x0f, 0x45, 0x57, 0xde, 0xe5, 0x72, 0x7f, 0x9d, 0xea, 0xd0, 0xb3, 0x13, 0xdb, 0x69, 0x34, 0x8b,
	0x46, 0x08, 0x92, 0xca, 0x92, 0x8e, 0x53, 0xea, 0xbe, 0x42, 0xcf, 0x4e, 0xec, 0xef, 0x76, 0x2f,
	0x57, 0x9c, 0xcb, 0x62, 0x62, 0x79, 0xef, 0x0a, 0x87, 0x59, 0x85, 0x71, 0x9f, 0x74, 0xff, 0x52,
	0xb1, 0x9f, 0x38, 0x66, 0x5f, 0xa7, 0xfc, 0x3f, 0x56, 0x50, 0x8d, 0x4d, 0x74, 0x70, 0x0c, 0x27,
	0xbb, 0x5d, 0xca, 0xb3, 0x95, 0x15, 0x15, 0x9a, 0xdd, 0xaf, 0x1b, 0xf0, 0x75, 0xee, 0x67, 0xff,
	0x0b, 0x00, 0x00, 0xff, 0xff, 0xc1, 0x68, 0x8d, 0x57, 0xb5, 0x13, 0x00, 0x00,
}
