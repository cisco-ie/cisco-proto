/*
Copyright 2019 Cisco Systems

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rcmd_show_node.proto

package cisco_ios_xr_infra_rcmd_oper_rcmd_node

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type RcmdShowNode_KEYS struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RcmdShowNode_KEYS) Reset()         { *m = RcmdShowNode_KEYS{} }
func (m *RcmdShowNode_KEYS) String() string { return proto.CompactTextString(m) }
func (*RcmdShowNode_KEYS) ProtoMessage()    {}
func (*RcmdShowNode_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe96abab628db246, []int{0}
}

func (m *RcmdShowNode_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RcmdShowNode_KEYS.Unmarshal(m, b)
}
func (m *RcmdShowNode_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RcmdShowNode_KEYS.Marshal(b, m, deterministic)
}
func (m *RcmdShowNode_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RcmdShowNode_KEYS.Merge(m, src)
}
func (m *RcmdShowNode_KEYS) XXX_Size() int {
	return xxx_messageInfo_RcmdShowNode_KEYS.Size(m)
}
func (m *RcmdShowNode_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_RcmdShowNode_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_RcmdShowNode_KEYS proto.InternalMessageInfo

type RcmdShowNodeInfo struct {
	NodeId               uint32   `protobuf:"varint,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	NodeName             string   `protobuf:"bytes,2,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	RackId               uint32   `protobuf:"varint,3,opt,name=rack_id,json=rackId,proto3" json:"rack_id,omitempty"`
	LastUpdateTime       string   `protobuf:"bytes,4,opt,name=last_update_time,json=lastUpdateTime,proto3" json:"last_update_time,omitempty"`
	FwdReferenced        string   `protobuf:"bytes,5,opt,name=fwd_referenced,json=fwdReferenced,proto3" json:"fwd_referenced,omitempty"`
	NodeType             string   `protobuf:"bytes,6,opt,name=node_type,json=nodeType,proto3" json:"node_type,omitempty"`
	SoftwareState        uint32   `protobuf:"varint,7,opt,name=software_state,json=softwareState,proto3" json:"software_state,omitempty"`
	CardState            uint32   `protobuf:"varint,8,opt,name=card_state,json=cardState,proto3" json:"card_state,omitempty"`
	NodeState            string   `protobuf:"bytes,9,opt,name=node_state,json=nodeState,proto3" json:"node_state,omitempty"`
	Status               string   `protobuf:"bytes,10,opt,name=status,proto3" json:"status,omitempty"`
	DiagMode             uint32   `protobuf:"varint,11,opt,name=diag_mode,json=diagMode,proto3" json:"diag_mode,omitempty"`
	RedundancyState      uint32   `protobuf:"varint,12,opt,name=redundancy_state,json=redundancyState,proto3" json:"redundancy_state,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RcmdShowNodeInfo) Reset()         { *m = RcmdShowNodeInfo{} }
func (m *RcmdShowNodeInfo) String() string { return proto.CompactTextString(m) }
func (*RcmdShowNodeInfo) ProtoMessage()    {}
func (*RcmdShowNodeInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe96abab628db246, []int{1}
}

func (m *RcmdShowNodeInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RcmdShowNodeInfo.Unmarshal(m, b)
}
func (m *RcmdShowNodeInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RcmdShowNodeInfo.Marshal(b, m, deterministic)
}
func (m *RcmdShowNodeInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RcmdShowNodeInfo.Merge(m, src)
}
func (m *RcmdShowNodeInfo) XXX_Size() int {
	return xxx_messageInfo_RcmdShowNodeInfo.Size(m)
}
func (m *RcmdShowNodeInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_RcmdShowNodeInfo.DiscardUnknown(m)
}

var xxx_messageInfo_RcmdShowNodeInfo proto.InternalMessageInfo

func (m *RcmdShowNodeInfo) GetNodeId() uint32 {
	if m != nil {
		return m.NodeId
	}
	return 0
}

func (m *RcmdShowNodeInfo) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

func (m *RcmdShowNodeInfo) GetRackId() uint32 {
	if m != nil {
		return m.RackId
	}
	return 0
}

func (m *RcmdShowNodeInfo) GetLastUpdateTime() string {
	if m != nil {
		return m.LastUpdateTime
	}
	return ""
}

func (m *RcmdShowNodeInfo) GetFwdReferenced() string {
	if m != nil {
		return m.FwdReferenced
	}
	return ""
}

func (m *RcmdShowNodeInfo) GetNodeType() string {
	if m != nil {
		return m.NodeType
	}
	return ""
}

func (m *RcmdShowNodeInfo) GetSoftwareState() uint32 {
	if m != nil {
		return m.SoftwareState
	}
	return 0
}

func (m *RcmdShowNodeInfo) GetCardState() uint32 {
	if m != nil {
		return m.CardState
	}
	return 0
}

func (m *RcmdShowNodeInfo) GetNodeState() string {
	if m != nil {
		return m.NodeState
	}
	return ""
}

func (m *RcmdShowNodeInfo) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *RcmdShowNodeInfo) GetDiagMode() uint32 {
	if m != nil {
		return m.DiagMode
	}
	return 0
}

func (m *RcmdShowNodeInfo) GetRedundancyState() uint32 {
	if m != nil {
		return m.RedundancyState
	}
	return 0
}

type RcmdShowNode struct {
	NodeInformation      []*RcmdShowNodeInfo `protobuf:"bytes,50,rep,name=node_information,json=nodeInformation,proto3" json:"node_information,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *RcmdShowNode) Reset()         { *m = RcmdShowNode{} }
func (m *RcmdShowNode) String() string { return proto.CompactTextString(m) }
func (*RcmdShowNode) ProtoMessage()    {}
func (*RcmdShowNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe96abab628db246, []int{2}
}

func (m *RcmdShowNode) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RcmdShowNode.Unmarshal(m, b)
}
func (m *RcmdShowNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RcmdShowNode.Marshal(b, m, deterministic)
}
func (m *RcmdShowNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RcmdShowNode.Merge(m, src)
}
func (m *RcmdShowNode) XXX_Size() int {
	return xxx_messageInfo_RcmdShowNode.Size(m)
}
func (m *RcmdShowNode) XXX_DiscardUnknown() {
	xxx_messageInfo_RcmdShowNode.DiscardUnknown(m)
}

var xxx_messageInfo_RcmdShowNode proto.InternalMessageInfo

func (m *RcmdShowNode) GetNodeInformation() []*RcmdShowNodeInfo {
	if m != nil {
		return m.NodeInformation
	}
	return nil
}

func init() {
	proto.RegisterType((*RcmdShowNode_KEYS)(nil), "cisco_ios_xr_infra_rcmd_oper.rcmd.node.rcmd_show_node_KEYS")
	proto.RegisterType((*RcmdShowNodeInfo)(nil), "cisco_ios_xr_infra_rcmd_oper.rcmd.node.rcmd_show_node_info")
	proto.RegisterType((*RcmdShowNode)(nil), "cisco_ios_xr_infra_rcmd_oper.rcmd.node.rcmd_show_node")
}

func init() { proto.RegisterFile("rcmd_show_node.proto", fileDescriptor_fe96abab628db246) }

var fileDescriptor_fe96abab628db246 = []byte{
	// 363 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0x4f, 0x6b, 0xe3, 0x30,
	0x10, 0xc5, 0xc9, 0x66, 0xd7, 0x89, 0x95, 0xcd, 0x1f, 0xb4, 0xff, 0x04, 0xcb, 0x42, 0x08, 0xec,
	0xe2, 0xbd, 0xf8, 0x90, 0x1e, 0x7b, 0xee, 0x21, 0x94, 0xf6, 0xe0, 0xa4, 0x87, 0x9e, 0x84, 0xea,
	0x19, 0xb7, 0xa2, 0xb5, 0x64, 0x64, 0x05, 0x27, 0x9f, 0xa4, 0x5f, 0xb7, 0x68, 0x9c, 0x3a, 0x84,
	0xf6, 0xd0, 0x9b, 0xe6, 0xf7, 0xde, 0xbc, 0x19, 0x18, 0xb1, 0xef, 0x2e, 0x2f, 0x41, 0xd6, 0x0f,
	0xb6, 0x91, 0xc6, 0x02, 0xa6, 0x95, 0xb3, 0xde, 0xf2, 0x7f, 0xb9, 0xae, 0x73, 0x2b, 0xb5, 0xad,
	0xe5, 0xce, 0x49, 0x6d, 0x0a, 0xa7, 0x24, 0x19, 0x6d, 0x85, 0x2e, 0x0d, 0xaf, 0x34, 0xb8, 0x17,
	0x3f, 0xd8, 0xb7, 0xd3, 0x7e, 0x79, 0x79, 0x71, 0xbb, 0x5e, 0x3c, 0xf7, 0xdf, 0x70, 0x6d, 0x0a,
	0xcb, 0x7f, 0xb1, 0x41, 0x5b, 0x80, 0xe8, 0xcd, 0x7b, 0xc9, 0x38, 0x8b, 0x42, 0xb9, 0x02, 0xfe,
	0x9b, 0xc5, 0x24, 0x18, 0x55, 0xa2, 0xf8, 0x34, 0xef, 0x25, 0x71, 0x36, 0x0c, 0xe0, 0x5a, 0x95,
	0x18, 0xba, 0x9c, 0xca, 0x1f, 0x43, 0x57, 0xbf, 0xed, 0x0a, 0xe5, 0x0a, 0x78, 0xc2, 0x66, 0x4f,
	0xaa, 0xf6, 0x72, 0x5b, 0x81, 0xf2, 0x28, 0xbd, 0x2e, 0x51, 0x7c, 0xa6, 0xe6, 0x49, 0xe0, 0x37,
	0x84, 0x37, 0xba, 0x44, 0xfe, 0x97, 0x4d, 0x8a, 0x06, 0xa4, 0xc3, 0x02, 0x1d, 0x9a, 0x1c, 0x41,
	0x7c, 0x21, 0xdf, 0xb8, 0x68, 0x20, 0xeb, 0x60, 0xb7, 0x86, 0xdf, 0x57, 0x28, 0xa2, 0xe3, 0x1a,
	0x9b, 0x7d, 0x45, 0x19, 0xb5, 0x2d, 0x7c, 0xa3, 0x1c, 0xca, 0xda, 0x2b, 0x8f, 0x62, 0x40, 0xdb,
	0x8c, 0x5f, 0xe9, 0x3a, 0x40, 0xfe, 0x87, 0xb1, 0x5c, 0x39, 0x38, 0x58, 0x86, 0x64, 0x89, 0x03,
	0xe9, 0x64, 0x1a, 0xd1, 0xca, 0x31, 0xcd, 0xa0, 0xa1, 0xad, 0xfc, 0x93, 0x45, 0x41, 0xd9, 0xd6,
	0x82, 0x91, 0x74, 0xa8, 0xc2, 0x66, 0xa0, 0xd5, 0xbd, 0x2c, 0x2d, 0xa0, 0x18, 0x51, 0xe8, 0x30,
	0x80, 0x2b, 0x0b, 0xc8, 0xff, 0xb3, 0x99, 0x43, 0xd8, 0x1a, 0x50, 0x26, 0xdf, 0x1f, 0x92, 0xbf,
	0x92, 0x67, 0x7a, 0xe4, 0x94, 0xbf, 0xd8, 0xb1, 0xc9, 0xe9, 0x61, 0x78, 0xc1, 0x66, 0xdd, 0x81,
	0x5c, 0xa9, 0xbc, 0xb6, 0x46, 0x2c, 0xe7, 0xfd, 0x64, 0xb4, 0x3c, 0x4f, 0x3f, 0xf6, 0x0b, 0xd2,
	0x77, 0x4e, 0x9d, 0x4d, 0xe9, 0xb2, 0xc7, 0xcc, 0xbb, 0x88, 0x7e, 0xd6, 0xd9, 0x4b, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x30, 0x59, 0xfe, 0xbe, 0x71, 0x02, 0x00, 0x00,
}
