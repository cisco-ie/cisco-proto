/*
Copyright 2019 Cisco Systems

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rcmd_show_ldp_session_event.proto

package cisco_ios_xr_infra_rcmd_oper_rcmd_ldp_sessions_session

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type RcmdShowLdpSessionEvent_KEYS struct {
	EventId              uint32   `protobuf:"varint,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RcmdShowLdpSessionEvent_KEYS) Reset()         { *m = RcmdShowLdpSessionEvent_KEYS{} }
func (m *RcmdShowLdpSessionEvent_KEYS) String() string { return proto.CompactTextString(m) }
func (*RcmdShowLdpSessionEvent_KEYS) ProtoMessage()    {}
func (*RcmdShowLdpSessionEvent_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a0e5b89e7133f66, []int{0}
}

func (m *RcmdShowLdpSessionEvent_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RcmdShowLdpSessionEvent_KEYS.Unmarshal(m, b)
}
func (m *RcmdShowLdpSessionEvent_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RcmdShowLdpSessionEvent_KEYS.Marshal(b, m, deterministic)
}
func (m *RcmdShowLdpSessionEvent_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RcmdShowLdpSessionEvent_KEYS.Merge(m, src)
}
func (m *RcmdShowLdpSessionEvent_KEYS) XXX_Size() int {
	return xxx_messageInfo_RcmdShowLdpSessionEvent_KEYS.Size(m)
}
func (m *RcmdShowLdpSessionEvent_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_RcmdShowLdpSessionEvent_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_RcmdShowLdpSessionEvent_KEYS proto.InternalMessageInfo

func (m *RcmdShowLdpSessionEvent_KEYS) GetEventId() uint32 {
	if m != nil {
		return m.EventId
	}
	return 0
}

type RcmdShowLdpSessionEvent struct {
	EventIdXr            uint32   `protobuf:"varint,50,opt,name=event_id_xr,json=eventIdXr,proto3" json:"event_id_xr,omitempty"`
	EventType            string   `protobuf:"bytes,51,opt,name=event_type,json=eventType,proto3" json:"event_type,omitempty"`
	EventTime            string   `protobuf:"bytes,52,opt,name=event_time,json=eventTime,proto3" json:"event_time,omitempty"`
	LsrId                string   `protobuf:"bytes,53,opt,name=lsr_id,json=lsrId,proto3" json:"lsr_id,omitempty"`
	InterfaceName        string   `protobuf:"bytes,54,opt,name=interface_name,json=interfaceName,proto3" json:"interface_name,omitempty"`
	Address              string   `protobuf:"bytes,55,opt,name=address,proto3" json:"address,omitempty"`
	State                string   `protobuf:"bytes,56,opt,name=state,proto3" json:"state,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RcmdShowLdpSessionEvent) Reset()         { *m = RcmdShowLdpSessionEvent{} }
func (m *RcmdShowLdpSessionEvent) String() string { return proto.CompactTextString(m) }
func (*RcmdShowLdpSessionEvent) ProtoMessage()    {}
func (*RcmdShowLdpSessionEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a0e5b89e7133f66, []int{1}
}

func (m *RcmdShowLdpSessionEvent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RcmdShowLdpSessionEvent.Unmarshal(m, b)
}
func (m *RcmdShowLdpSessionEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RcmdShowLdpSessionEvent.Marshal(b, m, deterministic)
}
func (m *RcmdShowLdpSessionEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RcmdShowLdpSessionEvent.Merge(m, src)
}
func (m *RcmdShowLdpSessionEvent) XXX_Size() int {
	return xxx_messageInfo_RcmdShowLdpSessionEvent.Size(m)
}
func (m *RcmdShowLdpSessionEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_RcmdShowLdpSessionEvent.DiscardUnknown(m)
}

var xxx_messageInfo_RcmdShowLdpSessionEvent proto.InternalMessageInfo

func (m *RcmdShowLdpSessionEvent) GetEventIdXr() uint32 {
	if m != nil {
		return m.EventIdXr
	}
	return 0
}

func (m *RcmdShowLdpSessionEvent) GetEventType() string {
	if m != nil {
		return m.EventType
	}
	return ""
}

func (m *RcmdShowLdpSessionEvent) GetEventTime() string {
	if m != nil {
		return m.EventTime
	}
	return ""
}

func (m *RcmdShowLdpSessionEvent) GetLsrId() string {
	if m != nil {
		return m.LsrId
	}
	return ""
}

func (m *RcmdShowLdpSessionEvent) GetInterfaceName() string {
	if m != nil {
		return m.InterfaceName
	}
	return ""
}

func (m *RcmdShowLdpSessionEvent) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *RcmdShowLdpSessionEvent) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func init() {
	proto.RegisterType((*RcmdShowLdpSessionEvent_KEYS)(nil), "cisco_ios_xr_infra_rcmd_oper.rcmd.ldp.sessions.session.rcmd_show_ldp_session_event_KEYS")
	proto.RegisterType((*RcmdShowLdpSessionEvent)(nil), "cisco_ios_xr_infra_rcmd_oper.rcmd.ldp.sessions.session.rcmd_show_ldp_session_event")
}

func init() { proto.RegisterFile("rcmd_show_ldp_session_event.proto", fileDescriptor_0a0e5b89e7133f66) }

var fileDescriptor_0a0e5b89e7133f66 = []byte{
	// 258 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x90, 0xb1, 0x4a, 0x03, 0x41,
	0x10, 0x40, 0xb9, 0x22, 0x89, 0x19, 0x89, 0xc5, 0xa2, 0xb0, 0x22, 0xca, 0x19, 0x10, 0x52, 0x5d,
	0x61, 0x34, 0xda, 0x58, 0x5a, 0x04, 0xc1, 0x42, 0x2d, 0xb4, 0x1a, 0xd6, 0xdb, 0x09, 0x2e, 0xdc,
	0xdd, 0x2e, 0x33, 0x8b, 0x26, 0x9f, 0xec, 0x5f, 0x48, 0xf6, 0xee, 0x24, 0x55, 0xba, 0x79, 0xfb,
	0x78, 0xc3, 0x32, 0x70, 0xc9, 0x65, 0x6d, 0x51, 0xbe, 0xfc, 0x0f, 0x56, 0x36, 0xa0, 0x90, 0x88,
	0xf3, 0x0d, 0xd2, 0x37, 0x35, 0xb1, 0x08, 0xec, 0xa3, 0x57, 0x8b, 0xd2, 0x49, 0xe9, 0xd1, 0x79,
	0xc1, 0x35, 0xa3, 0x6b, 0x56, 0x6c, 0x30, 0x55, 0x3e, 0x10, 0x17, 0xdb, 0xa9, 0xa8, 0x6c, 0x28,
	0xba, 0x54, 0xfa, 0x61, 0xfa, 0x00, 0xf9, 0x9e, 0xe5, 0xf8, 0xf4, 0xf8, 0xf1, 0xaa, 0x4e, 0xe1,
	0xa0, 0x25, 0x67, 0x75, 0x96, 0x67, 0xb3, 0xc9, 0xcb, 0x28, 0xf1, 0xd2, 0x4e, 0x7f, 0x33, 0x38,
	0xdb, 0xd3, 0xab, 0x0b, 0x38, 0xec, 0x53, 0x5c, 0xb3, 0xbe, 0x4e, 0xf5, 0xb8, 0xab, 0xdf, 0x59,
	0x9d, 0x03, 0xb4, 0x3e, 0x6e, 0x02, 0xe9, 0x79, 0x9e, 0xcd, 0xc6, 0x9d, 0x7e, 0xdb, 0x04, 0xda,
	0xd1, 0xae, 0x26, 0x7d, 0xb3, 0xab, 0x5d, 0x4d, 0xea, 0x04, 0x86, 0x95, 0xf0, 0xf6, 0x5b, 0xb7,
	0x49, 0x0d, 0x2a, 0xe1, 0xa5, 0x55, 0x57, 0x70, 0xe4, 0x9a, 0x48, 0xbc, 0x32, 0x25, 0x61, 0x63,
	0x6a, 0xd2, 0x8b, 0xa4, 0x27, 0xff, 0xaf, 0xcf, 0xa6, 0x26, 0xa5, 0x61, 0x64, 0xac, 0x65, 0x12,
	0xd1, 0x77, 0xc9, 0xf7, 0xa8, 0x8e, 0x61, 0x20, 0xd1, 0x44, 0xd2, 0xf7, 0xed, 0xda, 0x04, 0x9f,
	0xc3, 0x74, 0xe9, 0xf9, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x06, 0xb5, 0xb6, 0x14, 0x8e, 0x01,
	0x00, 0x00,
}
