/*
Copyright 2019 Cisco Systems

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: bcm_edm_cosq_info.proto

package cisco_ios_xr_prm_server_oper_hardware_module_nodes_node_np_cpu_indexes_index

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type BcmEdmCosqInfo_KEYS struct {
	NodeName             string   `protobuf:"bytes,1,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	Index                uint32   `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BcmEdmCosqInfo_KEYS) Reset()         { *m = BcmEdmCosqInfo_KEYS{} }
func (m *BcmEdmCosqInfo_KEYS) String() string { return proto.CompactTextString(m) }
func (*BcmEdmCosqInfo_KEYS) ProtoMessage()    {}
func (*BcmEdmCosqInfo_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5880f7be2dd59cc, []int{0}
}

func (m *BcmEdmCosqInfo_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BcmEdmCosqInfo_KEYS.Unmarshal(m, b)
}
func (m *BcmEdmCosqInfo_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BcmEdmCosqInfo_KEYS.Marshal(b, m, deterministic)
}
func (m *BcmEdmCosqInfo_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BcmEdmCosqInfo_KEYS.Merge(m, src)
}
func (m *BcmEdmCosqInfo_KEYS) XXX_Size() int {
	return xxx_messageInfo_BcmEdmCosqInfo_KEYS.Size(m)
}
func (m *BcmEdmCosqInfo_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_BcmEdmCosqInfo_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_BcmEdmCosqInfo_KEYS proto.InternalMessageInfo

func (m *BcmEdmCosqInfo_KEYS) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

func (m *BcmEdmCosqInfo_KEYS) GetIndex() uint32 {
	if m != nil {
		return m.Index
	}
	return 0
}

type BcmEdmCosqInfo struct {
	CosQName             string   `protobuf:"bytes,50,opt,name=cos_q_name,json=cosQName,proto3" json:"cos_q_name,omitempty"`
	CosQ                 uint32   `protobuf:"varint,51,opt,name=cos_q,json=cosQ,proto3" json:"cos_q,omitempty"`
	RxChannel            uint32   `protobuf:"varint,52,opt,name=rx_channel,json=rxChannel,proto3" json:"rx_channel,omitempty"`
	FlowRate             uint32   `protobuf:"varint,53,opt,name=flow_rate,json=flowRate,proto3" json:"flow_rate,omitempty"`
	Burst                uint32   `protobuf:"varint,54,opt,name=burst,proto3" json:"burst,omitempty"`
	Accepted             uint64   `protobuf:"varint,55,opt,name=accepted,proto3" json:"accepted,omitempty"`
	Dropped              uint64   `protobuf:"varint,56,opt,name=dropped,proto3" json:"dropped,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BcmEdmCosqInfo) Reset()         { *m = BcmEdmCosqInfo{} }
func (m *BcmEdmCosqInfo) String() string { return proto.CompactTextString(m) }
func (*BcmEdmCosqInfo) ProtoMessage()    {}
func (*BcmEdmCosqInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5880f7be2dd59cc, []int{1}
}

func (m *BcmEdmCosqInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BcmEdmCosqInfo.Unmarshal(m, b)
}
func (m *BcmEdmCosqInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BcmEdmCosqInfo.Marshal(b, m, deterministic)
}
func (m *BcmEdmCosqInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BcmEdmCosqInfo.Merge(m, src)
}
func (m *BcmEdmCosqInfo) XXX_Size() int {
	return xxx_messageInfo_BcmEdmCosqInfo.Size(m)
}
func (m *BcmEdmCosqInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_BcmEdmCosqInfo.DiscardUnknown(m)
}

var xxx_messageInfo_BcmEdmCosqInfo proto.InternalMessageInfo

func (m *BcmEdmCosqInfo) GetCosQName() string {
	if m != nil {
		return m.CosQName
	}
	return ""
}

func (m *BcmEdmCosqInfo) GetCosQ() uint32 {
	if m != nil {
		return m.CosQ
	}
	return 0
}

func (m *BcmEdmCosqInfo) GetRxChannel() uint32 {
	if m != nil {
		return m.RxChannel
	}
	return 0
}

func (m *BcmEdmCosqInfo) GetFlowRate() uint32 {
	if m != nil {
		return m.FlowRate
	}
	return 0
}

func (m *BcmEdmCosqInfo) GetBurst() uint32 {
	if m != nil {
		return m.Burst
	}
	return 0
}

func (m *BcmEdmCosqInfo) GetAccepted() uint64 {
	if m != nil {
		return m.Accepted
	}
	return 0
}

func (m *BcmEdmCosqInfo) GetDropped() uint64 {
	if m != nil {
		return m.Dropped
	}
	return 0
}

func init() {
	proto.RegisterType((*BcmEdmCosqInfo_KEYS)(nil), "cisco_ios_xr_prm_server_oper.hardware_module.nodes.node.np.cpu.indexes.index.bcm_edm_cosq_info_KEYS")
	proto.RegisterType((*BcmEdmCosqInfo)(nil), "cisco_ios_xr_prm_server_oper.hardware_module.nodes.node.np.cpu.indexes.index.bcm_edm_cosq_info")
}

func init() { proto.RegisterFile("bcm_edm_cosq_info.proto", fileDescriptor_b5880f7be2dd59cc) }

var fileDescriptor_b5880f7be2dd59cc = []byte{
	// 285 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x90, 0x4d, 0x4b, 0x33, 0x31,
	0x10, 0xc7, 0xd9, 0x87, 0xf6, 0xb1, 0x1d, 0xf0, 0x60, 0x14, 0x0d, 0xbe, 0x40, 0xe9, 0xa9, 0xa7,
	0x3d, 0x58, 0xdf, 0xee, 0xe2, 0xa9, 0x22, 0xb8, 0x9e, 0x3c, 0x0d, 0x69, 0x32, 0xa5, 0x0b, 0xdd,
	0x4c, 0x3a, 0xd9, 0xda, 0xfd, 0x94, 0x7e, 0x26, 0xd9, 0x04, 0xbd, 0xf4, 0x92, 0xf0, 0x9f, 0x1f,
	0xf3, 0xcb, 0x9f, 0xc0, 0xc5, 0xd2, 0x36, 0x48, 0xae, 0x41, 0xcb, 0x71, 0x8b, 0xb5, 0x5f, 0x71,
	0x19, 0x84, 0x5b, 0x56, 0xaf, 0xb6, 0x8e, 0x96, 0xb1, 0xe6, 0x88, 0x9d, 0x60, 0x90, 0x06, 0x23,
	0xc9, 0x17, 0x09, 0x72, 0x20, 0x29, 0xd7, 0x46, 0xdc, 0xde, 0x08, 0x61, 0xc3, 0x6e, 0xb7, 0xa1,
	0xd2, 0xb3, 0xa3, 0x98, 0xce, 0xd2, 0x87, 0xd2, 0x86, 0x5d, 0x59, 0x7b, 0x47, 0x1d, 0xc5, 0x7c,
	0x4f, 0x17, 0x70, 0x7e, 0xf0, 0x10, 0x2e, 0x5e, 0x3e, 0x3f, 0xd4, 0x15, 0x8c, 0xfb, 0x35, 0xf4,
	0xa6, 0x21, 0x5d, 0x4c, 0x8a, 0xd9, 0xb8, 0x1a, 0xf5, 0x83, 0x37, 0xd3, 0x90, 0x3a, 0x83, 0x61,
	0xda, 0xd7, 0xff, 0x26, 0xc5, 0xec, 0xb8, 0xca, 0x61, 0xfa, 0x5d, 0xc0, 0xc9, 0x81, 0x4d, 0x5d,
	0x03, 0x58, 0x8e, 0xb8, 0xcd, 0xa6, 0xdb, 0x6c, 0xb2, 0x1c, 0xdf, 0x93, 0xe9, 0x14, 0x86, 0x89,
	0xea, 0x79, 0x32, 0x0d, 0x7a, 0xa0, 0x6e, 0x00, 0xa4, 0x43, 0xbb, 0x36, 0xde, 0xd3, 0x46, 0xdf,
	0x25, 0x32, 0x96, 0xee, 0x39, 0x0f, 0xfa, 0x6a, 0xab, 0x0d, 0xef, 0x51, 0x4c, 0x4b, 0xfa, 0x3e,
	0xd1, 0x51, 0x3f, 0xa8, 0x4c, 0x9b, 0xaa, 0x2d, 0x77, 0x12, 0x5b, 0xfd, 0x90, 0xab, 0xa5, 0xa0,
	0x2e, 0x61, 0x64, 0xac, 0xa5, 0xd0, 0x92, 0xd3, 0x8f, 0x93, 0x62, 0x36, 0xa8, 0xfe, 0xb2, 0xd2,
	0x70, 0xe4, 0x84, 0x43, 0x20, 0xa7, 0x9f, 0x12, 0xfa, 0x8d, 0xcb, 0xff, 0xe9, 0xcb, 0xe7, 0x3f,
	0x01, 0x00, 0x00, 0xff, 0xff, 0x22, 0xe0, 0xb5, 0x45, 0x8d, 0x01, 0x00, 0x00,
}
