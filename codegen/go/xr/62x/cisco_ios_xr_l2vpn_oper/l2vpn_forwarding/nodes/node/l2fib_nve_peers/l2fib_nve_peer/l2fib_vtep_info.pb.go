/*
Copyright 2019 Cisco Systems

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: l2fib_vtep_info.proto

package cisco_ios_xr_l2vpn_oper_l2vpn_forwarding_nodes_node_l2fib_nve_peers_l2fib_nve_peer

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type L2FibVtepInfo_KEYS struct {
	NodeId               string   `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	XcUintId             string   `protobuf:"bytes,2,opt,name=xc_uint_id,json=xcUintId,proto3" json:"xc_uint_id,omitempty"`
	Vniid                string   `protobuf:"bytes,3,opt,name=vniid,proto3" json:"vniid,omitempty"`
	VtepAddress          string   `protobuf:"bytes,4,opt,name=vtep_address,json=vtepAddress,proto3" json:"vtep_address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *L2FibVtepInfo_KEYS) Reset()         { *m = L2FibVtepInfo_KEYS{} }
func (m *L2FibVtepInfo_KEYS) String() string { return proto.CompactTextString(m) }
func (*L2FibVtepInfo_KEYS) ProtoMessage()    {}
func (*L2FibVtepInfo_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_4db8ea00ced5943c, []int{0}
}

func (m *L2FibVtepInfo_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2FibVtepInfo_KEYS.Unmarshal(m, b)
}
func (m *L2FibVtepInfo_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2FibVtepInfo_KEYS.Marshal(b, m, deterministic)
}
func (m *L2FibVtepInfo_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2FibVtepInfo_KEYS.Merge(m, src)
}
func (m *L2FibVtepInfo_KEYS) XXX_Size() int {
	return xxx_messageInfo_L2FibVtepInfo_KEYS.Size(m)
}
func (m *L2FibVtepInfo_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_L2FibVtepInfo_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_L2FibVtepInfo_KEYS proto.InternalMessageInfo

func (m *L2FibVtepInfo_KEYS) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

func (m *L2FibVtepInfo_KEYS) GetXcUintId() string {
	if m != nil {
		return m.XcUintId
	}
	return ""
}

func (m *L2FibVtepInfo_KEYS) GetVniid() string {
	if m != nil {
		return m.Vniid
	}
	return ""
}

func (m *L2FibVtepInfo_KEYS) GetVtepAddress() string {
	if m != nil {
		return m.VtepAddress
	}
	return ""
}

type L2FibVtepInfo struct {
	NveIf                string   `protobuf:"bytes,50,opt,name=nve_if,json=nveIf,proto3" json:"nve_if,omitempty"`
	VnIid                uint32   `protobuf:"varint,51,opt,name=vn_iid,json=vnIid,proto3" json:"vn_iid,omitempty"`
	VtePip               string   `protobuf:"bytes,52,opt,name=vte_pip,json=vtePip,proto3" json:"vte_pip,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *L2FibVtepInfo) Reset()         { *m = L2FibVtepInfo{} }
func (m *L2FibVtepInfo) String() string { return proto.CompactTextString(m) }
func (*L2FibVtepInfo) ProtoMessage()    {}
func (*L2FibVtepInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_4db8ea00ced5943c, []int{1}
}

func (m *L2FibVtepInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2FibVtepInfo.Unmarshal(m, b)
}
func (m *L2FibVtepInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2FibVtepInfo.Marshal(b, m, deterministic)
}
func (m *L2FibVtepInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2FibVtepInfo.Merge(m, src)
}
func (m *L2FibVtepInfo) XXX_Size() int {
	return xxx_messageInfo_L2FibVtepInfo.Size(m)
}
func (m *L2FibVtepInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_L2FibVtepInfo.DiscardUnknown(m)
}

var xxx_messageInfo_L2FibVtepInfo proto.InternalMessageInfo

func (m *L2FibVtepInfo) GetNveIf() string {
	if m != nil {
		return m.NveIf
	}
	return ""
}

func (m *L2FibVtepInfo) GetVnIid() uint32 {
	if m != nil {
		return m.VnIid
	}
	return 0
}

func (m *L2FibVtepInfo) GetVtePip() string {
	if m != nil {
		return m.VtePip
	}
	return ""
}

func init() {
	proto.RegisterType((*L2FibVtepInfo_KEYS)(nil), "cisco_ios_xr_l2vpn_oper.l2vpn_forwarding.nodes.node.l2fib_nve_peers.l2fib_nve_peer.l2fib_vtep_info_KEYS")
	proto.RegisterType((*L2FibVtepInfo)(nil), "cisco_ios_xr_l2vpn_oper.l2vpn_forwarding.nodes.node.l2fib_nve_peers.l2fib_nve_peer.l2fib_vtep_info")
}

func init() { proto.RegisterFile("l2fib_vtep_info.proto", fileDescriptor_4db8ea00ced5943c) }

var fileDescriptor_4db8ea00ced5943c = []byte{
	// 251 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x90, 0x3f, 0x4b, 0x04, 0x31,
	0x14, 0xc4, 0x59, 0xff, 0xac, 0x1a, 0x15, 0x21, 0xdc, 0x61, 0x0a, 0x8b, 0xf3, 0xaa, 0xab, 0xb6,
	0xd8, 0xf3, 0x0b, 0x58, 0x58, 0x2c, 0x36, 0x72, 0x22, 0x68, 0xf5, 0xb8, 0xdb, 0xbc, 0xc8, 0x83,
	0xe3, 0x25, 0x24, 0x31, 0xee, 0x27, 0xf0, 0x73, 0x4b, 0x92, 0x6e, 0x9b, 0x90, 0x99, 0x21, 0x33,
	0x3f, 0x22, 0x96, 0xc7, 0xde, 0xd0, 0x01, 0x52, 0x44, 0x07, 0xc4, 0xc6, 0x76, 0xce, 0xdb, 0x68,
	0xe5, 0x6e, 0xa4, 0x30, 0x5a, 0x20, 0x1b, 0x60, 0xf2, 0x70, 0xec, 0x93, 0x63, 0xb0, 0x0e, 0x7d,
	0x57, 0xaf, 0xc6, 0xfa, 0xdf, 0xbd, 0xd7, 0xc4, 0xdf, 0x1d, 0x5b, 0x8d, 0xa1, 0x9c, 0x5d, 0xad,
	0xe2, 0x84, 0xe0, 0x10, 0x7d, 0x98, 0xe9, 0xf5, 0x5f, 0x23, 0x16, 0xb3, 0x35, 0x78, 0x7d, 0xf9,
	0x7a, 0x97, 0xf7, 0xe2, 0x22, 0xbf, 0x07, 0xd2, 0xaa, 0x59, 0x35, 0x9b, 0xab, 0x5d, 0x9b, 0xe5,
	0xa0, 0xe5, 0x83, 0x10, 0xd3, 0x08, 0x3f, 0xc4, 0x31, 0x67, 0x27, 0x25, 0xbb, 0x9c, 0xc6, 0x0f,
	0xe2, 0x38, 0x68, 0xb9, 0x10, 0xe7, 0x89, 0x89, 0xb4, 0x3a, 0x2d, 0x41, 0x15, 0xf2, 0x51, 0xdc,
	0x94, 0xfa, 0xbd, 0xd6, 0x1e, 0x43, 0x50, 0x67, 0x25, 0xbc, 0xce, 0xde, 0x73, 0xb5, 0xd6, 0x9f,
	0xe2, 0x6e, 0xc6, 0x21, 0x97, 0xa2, 0xcd, 0x9c, 0x64, 0x54, 0x5f, 0xcb, 0x38, 0xe1, 0x60, 0xb2,
	0x9d, 0x18, 0xf2, 0xc6, 0x76, 0xd5, 0x6c, 0x6e, 0xf3, 0xc6, 0x40, 0x3a, 0x03, 0xa7, 0x88, 0xe0,
	0xc8, 0xa9, 0xa7, 0x0a, 0x9c, 0x22, 0xbe, 0x91, 0x3b, 0xb4, 0xe5, 0xf7, 0xb6, 0xff, 0x01, 0x00,
	0x00, 0xff, 0xff, 0x8c, 0xb8, 0x58, 0x01, 0x56, 0x01, 0x00, 0x00,
}
