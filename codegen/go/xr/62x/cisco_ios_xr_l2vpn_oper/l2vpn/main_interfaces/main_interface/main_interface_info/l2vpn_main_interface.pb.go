/*
Copyright 2019 Cisco Systems

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: l2vpn_main_interface.proto

package cisco_ios_xr_l2vpn_oper_l2vpn_main_interfaces_main_interface_main_interface_info

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type L2VpnMainInterface_KEYS struct {
	InterfaceName        string   `protobuf:"bytes,1,opt,name=interface_name,json=interfaceName,proto3" json:"interface_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *L2VpnMainInterface_KEYS) Reset()         { *m = L2VpnMainInterface_KEYS{} }
func (m *L2VpnMainInterface_KEYS) String() string { return proto.CompactTextString(m) }
func (*L2VpnMainInterface_KEYS) ProtoMessage()    {}
func (*L2VpnMainInterface_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_bcfb1cf515de8113, []int{0}
}

func (m *L2VpnMainInterface_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2VpnMainInterface_KEYS.Unmarshal(m, b)
}
func (m *L2VpnMainInterface_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2VpnMainInterface_KEYS.Marshal(b, m, deterministic)
}
func (m *L2VpnMainInterface_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2VpnMainInterface_KEYS.Merge(m, src)
}
func (m *L2VpnMainInterface_KEYS) XXX_Size() int {
	return xxx_messageInfo_L2VpnMainInterface_KEYS.Size(m)
}
func (m *L2VpnMainInterface_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_L2VpnMainInterface_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_L2VpnMainInterface_KEYS proto.InternalMessageInfo

func (m *L2VpnMainInterface_KEYS) GetInterfaceName() string {
	if m != nil {
		return m.InterfaceName
	}
	return ""
}

type L2VpnMainInterface struct {
	MainInterfaceHandle  string   `protobuf:"bytes,50,opt,name=main_interface_handle,json=mainInterfaceHandle,proto3" json:"main_interface_handle,omitempty"`
	Protected            string   `protobuf:"bytes,51,opt,name=protected,proto3" json:"protected,omitempty"`
	InterfaceCount       uint32   `protobuf:"varint,52,opt,name=interface_count,json=interfaceCount,proto3" json:"interface_count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *L2VpnMainInterface) Reset()         { *m = L2VpnMainInterface{} }
func (m *L2VpnMainInterface) String() string { return proto.CompactTextString(m) }
func (*L2VpnMainInterface) ProtoMessage()    {}
func (*L2VpnMainInterface) Descriptor() ([]byte, []int) {
	return fileDescriptor_bcfb1cf515de8113, []int{1}
}

func (m *L2VpnMainInterface) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2VpnMainInterface.Unmarshal(m, b)
}
func (m *L2VpnMainInterface) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2VpnMainInterface.Marshal(b, m, deterministic)
}
func (m *L2VpnMainInterface) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2VpnMainInterface.Merge(m, src)
}
func (m *L2VpnMainInterface) XXX_Size() int {
	return xxx_messageInfo_L2VpnMainInterface.Size(m)
}
func (m *L2VpnMainInterface) XXX_DiscardUnknown() {
	xxx_messageInfo_L2VpnMainInterface.DiscardUnknown(m)
}

var xxx_messageInfo_L2VpnMainInterface proto.InternalMessageInfo

func (m *L2VpnMainInterface) GetMainInterfaceHandle() string {
	if m != nil {
		return m.MainInterfaceHandle
	}
	return ""
}

func (m *L2VpnMainInterface) GetProtected() string {
	if m != nil {
		return m.Protected
	}
	return ""
}

func (m *L2VpnMainInterface) GetInterfaceCount() uint32 {
	if m != nil {
		return m.InterfaceCount
	}
	return 0
}

func init() {
	proto.RegisterType((*L2VpnMainInterface_KEYS)(nil), "cisco_ios_xr_l2vpn_oper.l2vpn.main_interfaces.main_interface.main_interface_info.l2vpn_main_interface_KEYS")
	proto.RegisterType((*L2VpnMainInterface)(nil), "cisco_ios_xr_l2vpn_oper.l2vpn.main_interfaces.main_interface.main_interface_info.l2vpn_main_interface")
}

func init() { proto.RegisterFile("l2vpn_main_interface.proto", fileDescriptor_bcfb1cf515de8113) }

var fileDescriptor_bcfb1cf515de8113 = []byte{
	// 202 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0xca, 0x31, 0x2a, 0x2b,
	0xc8, 0x8b, 0xcf, 0x4d, 0xcc, 0xcc, 0x8b, 0xcf, 0xcc, 0x2b, 0x49, 0x2d, 0x4a, 0x4b, 0x4c, 0x4e,
	0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x0a, 0x48, 0xce, 0x2c, 0x4e, 0xce, 0x8f, 0xcf, 0xcc,
	0x2f, 0x8e, 0xaf, 0x28, 0x8a, 0x87, 0x28, 0xcc, 0x2f, 0x48, 0x2d, 0xd2, 0x03, 0x33, 0xf5, 0x50,
	0xf5, 0x14, 0xa3, 0xf1, 0xd1, 0xb8, 0xf1, 0x99, 0x79, 0x69, 0xf9, 0x4a, 0x4e, 0x5c, 0x92, 0xd8,
	0xec, 0x8b, 0xf7, 0x76, 0x8d, 0x0c, 0x16, 0x52, 0xe5, 0xe2, 0x43, 0x88, 0xe4, 0x25, 0xe6, 0xa6,
	0x4a, 0x30, 0x2a, 0x30, 0x6a, 0x70, 0x06, 0xf1, 0xc2, 0x45, 0xfd, 0x12, 0x73, 0x53, 0x95, 0x26,
	0x32, 0x72, 0x89, 0x60, 0x33, 0x44, 0xc8, 0x88, 0x4b, 0x14, 0xcd, 0xd8, 0x8c, 0xc4, 0xbc, 0x94,
	0x9c, 0x54, 0x09, 0x23, 0xb0, 0x31, 0xc2, 0x20, 0x49, 0x4f, 0x98, 0x9c, 0x07, 0x58, 0x4a, 0x48,
	0x86, 0x8b, 0x13, 0xe4, 0xd7, 0xd4, 0xe4, 0x92, 0xd4, 0x14, 0x09, 0x63, 0xb0, 0x3a, 0x84, 0x80,
	0x90, 0x3a, 0x17, 0x3f, 0xc2, 0xb0, 0xe4, 0xfc, 0xd2, 0xbc, 0x12, 0x09, 0x13, 0x05, 0x46, 0x0d,
	0xde, 0x20, 0x84, 0x43, 0x9d, 0x41, 0xa2, 0x49, 0x6c, 0xe0, 0x00, 0x33, 0x06, 0x04, 0x00, 0x00,
	0xff, 0xff, 0x70, 0xec, 0x28, 0xc9, 0x4e, 0x01, 0x00, 0x00,
}
