/*
Copyright 2019 Cisco Systems

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: l2vpn_bridge_summary.proto

package cisco_ios_xr_l2vpn_oper_l2vpnv2_active_bridge_summary

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type L2VpnBridgeSummary_KEYS struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *L2VpnBridgeSummary_KEYS) Reset()         { *m = L2VpnBridgeSummary_KEYS{} }
func (m *L2VpnBridgeSummary_KEYS) String() string { return proto.CompactTextString(m) }
func (*L2VpnBridgeSummary_KEYS) ProtoMessage()    {}
func (*L2VpnBridgeSummary_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_f6a46bf461c23d3a, []int{0}
}

func (m *L2VpnBridgeSummary_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2VpnBridgeSummary_KEYS.Unmarshal(m, b)
}
func (m *L2VpnBridgeSummary_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2VpnBridgeSummary_KEYS.Marshal(b, m, deterministic)
}
func (m *L2VpnBridgeSummary_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2VpnBridgeSummary_KEYS.Merge(m, src)
}
func (m *L2VpnBridgeSummary_KEYS) XXX_Size() int {
	return xxx_messageInfo_L2VpnBridgeSummary_KEYS.Size(m)
}
func (m *L2VpnBridgeSummary_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_L2VpnBridgeSummary_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_L2VpnBridgeSummary_KEYS proto.InternalMessageInfo

type L2VpnBridgeSummary struct {
	NumberGroups                   uint32   `protobuf:"varint,50,opt,name=number_groups,json=numberGroups,proto3" json:"number_groups,omitempty"`
	NumberBridgeDomains            uint32   `protobuf:"varint,51,opt,name=number_bridge_domains,json=numberBridgeDomains,proto3" json:"number_bridge_domains,omitempty"`
	NumberBridgeDomainsUp          uint32   `protobuf:"varint,52,opt,name=number_bridge_domains_up,json=numberBridgeDomainsUp,proto3" json:"number_bridge_domains_up,omitempty"`
	NumberBridgeDomainsShut        uint32   `protobuf:"varint,53,opt,name=number_bridge_domains_shut,json=numberBridgeDomainsShut,proto3" json:"number_bridge_domains_shut,omitempty"`
	NumberDefaultBridgeDoamins     uint32   `protobuf:"varint,54,opt,name=number_default_bridge_doamins,json=numberDefaultBridgeDoamins,proto3" json:"number_default_bridge_doamins,omitempty"`
	NumberPbbEdge                  uint32   `protobuf:"varint,55,opt,name=number_pbb_edge,json=numberPbbEdge,proto3" json:"number_pbb_edge,omitempty"`
	NumberPbbCore                  uint32   `protobuf:"varint,56,opt,name=number_pbb_core,json=numberPbbCore,proto3" json:"number_pbb_core,omitempty"`
	NumberP2Mp                     uint32   `protobuf:"varint,57,opt,name=number_p2mp,json=numberP2mp,proto3" json:"number_p2mp,omitempty"`
	NumberP2MpUp                   uint32   `protobuf:"varint,58,opt,name=number_p2mp_up,json=numberP2mpUp,proto3" json:"number_p2mp_up,omitempty"`
	NumberP2MpDown                 uint32   `protobuf:"varint,59,opt,name=number_p2mp_down,json=numberP2mpDown,proto3" json:"number_p2mp_down,omitempty"`
	NumberACs                      uint32   `protobuf:"varint,60,opt,name=number_a_cs,json=numberACs,proto3" json:"number_a_cs,omitempty"`
	NumberACsUp                    uint32   `protobuf:"varint,61,opt,name=number_a_cs_up,json=numberACsUp,proto3" json:"number_a_cs_up,omitempty"`
	NumberPseudowires              uint32   `protobuf:"varint,62,opt,name=number_pseudowires,json=numberPseudowires,proto3" json:"number_pseudowires,omitempty"`
	NumberPWsUp                    uint32   `protobuf:"varint,63,opt,name=number_p_ws_up,json=numberPWsUp,proto3" json:"number_p_ws_up,omitempty"`
	StandbyPseudowires             uint32   `protobuf:"varint,64,opt,name=standby_pseudowires,json=standbyPseudowires,proto3" json:"standby_pseudowires,omitempty"`
	NumVnIs                        uint32   `protobuf:"varint,65,opt,name=num_vn_is,json=numVnIs,proto3" json:"num_vn_is,omitempty"`
	NumVnIsUp                      uint32   `protobuf:"varint,66,opt,name=num_vn_is_up,json=numVnIsUp,proto3" json:"num_vn_is_up,omitempty"`
	NumVnIsDown                    uint32   `protobuf:"varint,67,opt,name=num_vn_is_down,json=numVnIsDown,proto3" json:"num_vn_is_down,omitempty"`
	NumVnIsUnresolved              uint32   `protobuf:"varint,68,opt,name=num_vn_is_unresolved,json=numVnIsUnresolved,proto3" json:"num_vn_is_unresolved,omitempty"`
	OutOfMemoryState               uint32   `protobuf:"varint,69,opt,name=out_of_memory_state,json=outOfMemoryState,proto3" json:"out_of_memory_state,omitempty"`
	PartiallyProgrammedBridges     uint32   `protobuf:"varint,70,opt,name=partially_programmed_bridges,json=partiallyProgrammedBridges,proto3" json:"partially_programmed_bridges,omitempty"`
	PartiallyProgrammedPseudowires uint32   `protobuf:"varint,71,opt,name=partially_programmed_pseudowires,json=partiallyProgrammedPseudowires,proto3" json:"partially_programmed_pseudowires,omitempty"`
	PartiallyProgrammedACs         uint32   `protobuf:"varint,72,opt,name=partially_programmed_a_cs,json=partiallyProgrammedACs,proto3" json:"partially_programmed_a_cs,omitempty"`
	XXX_NoUnkeyedLiteral           struct{} `json:"-"`
	XXX_unrecognized               []byte   `json:"-"`
	XXX_sizecache                  int32    `json:"-"`
}

func (m *L2VpnBridgeSummary) Reset()         { *m = L2VpnBridgeSummary{} }
func (m *L2VpnBridgeSummary) String() string { return proto.CompactTextString(m) }
func (*L2VpnBridgeSummary) ProtoMessage()    {}
func (*L2VpnBridgeSummary) Descriptor() ([]byte, []int) {
	return fileDescriptor_f6a46bf461c23d3a, []int{1}
}

func (m *L2VpnBridgeSummary) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2VpnBridgeSummary.Unmarshal(m, b)
}
func (m *L2VpnBridgeSummary) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2VpnBridgeSummary.Marshal(b, m, deterministic)
}
func (m *L2VpnBridgeSummary) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2VpnBridgeSummary.Merge(m, src)
}
func (m *L2VpnBridgeSummary) XXX_Size() int {
	return xxx_messageInfo_L2VpnBridgeSummary.Size(m)
}
func (m *L2VpnBridgeSummary) XXX_DiscardUnknown() {
	xxx_messageInfo_L2VpnBridgeSummary.DiscardUnknown(m)
}

var xxx_messageInfo_L2VpnBridgeSummary proto.InternalMessageInfo

func (m *L2VpnBridgeSummary) GetNumberGroups() uint32 {
	if m != nil {
		return m.NumberGroups
	}
	return 0
}

func (m *L2VpnBridgeSummary) GetNumberBridgeDomains() uint32 {
	if m != nil {
		return m.NumberBridgeDomains
	}
	return 0
}

func (m *L2VpnBridgeSummary) GetNumberBridgeDomainsUp() uint32 {
	if m != nil {
		return m.NumberBridgeDomainsUp
	}
	return 0
}

func (m *L2VpnBridgeSummary) GetNumberBridgeDomainsShut() uint32 {
	if m != nil {
		return m.NumberBridgeDomainsShut
	}
	return 0
}

func (m *L2VpnBridgeSummary) GetNumberDefaultBridgeDoamins() uint32 {
	if m != nil {
		return m.NumberDefaultBridgeDoamins
	}
	return 0
}

func (m *L2VpnBridgeSummary) GetNumberPbbEdge() uint32 {
	if m != nil {
		return m.NumberPbbEdge
	}
	return 0
}

func (m *L2VpnBridgeSummary) GetNumberPbbCore() uint32 {
	if m != nil {
		return m.NumberPbbCore
	}
	return 0
}

func (m *L2VpnBridgeSummary) GetNumberP2Mp() uint32 {
	if m != nil {
		return m.NumberP2Mp
	}
	return 0
}

func (m *L2VpnBridgeSummary) GetNumberP2MpUp() uint32 {
	if m != nil {
		return m.NumberP2MpUp
	}
	return 0
}

func (m *L2VpnBridgeSummary) GetNumberP2MpDown() uint32 {
	if m != nil {
		return m.NumberP2MpDown
	}
	return 0
}

func (m *L2VpnBridgeSummary) GetNumberACs() uint32 {
	if m != nil {
		return m.NumberACs
	}
	return 0
}

func (m *L2VpnBridgeSummary) GetNumberACsUp() uint32 {
	if m != nil {
		return m.NumberACsUp
	}
	return 0
}

func (m *L2VpnBridgeSummary) GetNumberPseudowires() uint32 {
	if m != nil {
		return m.NumberPseudowires
	}
	return 0
}

func (m *L2VpnBridgeSummary) GetNumberPWsUp() uint32 {
	if m != nil {
		return m.NumberPWsUp
	}
	return 0
}

func (m *L2VpnBridgeSummary) GetStandbyPseudowires() uint32 {
	if m != nil {
		return m.StandbyPseudowires
	}
	return 0
}

func (m *L2VpnBridgeSummary) GetNumVnIs() uint32 {
	if m != nil {
		return m.NumVnIs
	}
	return 0
}

func (m *L2VpnBridgeSummary) GetNumVnIsUp() uint32 {
	if m != nil {
		return m.NumVnIsUp
	}
	return 0
}

func (m *L2VpnBridgeSummary) GetNumVnIsDown() uint32 {
	if m != nil {
		return m.NumVnIsDown
	}
	return 0
}

func (m *L2VpnBridgeSummary) GetNumVnIsUnresolved() uint32 {
	if m != nil {
		return m.NumVnIsUnresolved
	}
	return 0
}

func (m *L2VpnBridgeSummary) GetOutOfMemoryState() uint32 {
	if m != nil {
		return m.OutOfMemoryState
	}
	return 0
}

func (m *L2VpnBridgeSummary) GetPartiallyProgrammedBridges() uint32 {
	if m != nil {
		return m.PartiallyProgrammedBridges
	}
	return 0
}

func (m *L2VpnBridgeSummary) GetPartiallyProgrammedPseudowires() uint32 {
	if m != nil {
		return m.PartiallyProgrammedPseudowires
	}
	return 0
}

func (m *L2VpnBridgeSummary) GetPartiallyProgrammedACs() uint32 {
	if m != nil {
		return m.PartiallyProgrammedACs
	}
	return 0
}

func init() {
	proto.RegisterType((*L2VpnBridgeSummary_KEYS)(nil), "cisco_ios_xr_l2vpn_oper.l2vpnv2.active.bridge_summary.l2vpn_bridge_summary_KEYS")
	proto.RegisterType((*L2VpnBridgeSummary)(nil), "cisco_ios_xr_l2vpn_oper.l2vpnv2.active.bridge_summary.l2vpn_bridge_summary")
}

func init() { proto.RegisterFile("l2vpn_bridge_summary.proto", fileDescriptor_f6a46bf461c23d3a) }

var fileDescriptor_f6a46bf461c23d3a = []byte{
	// 555 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x94, 0x5b, 0x4f, 0x13, 0x41,
	0x14, 0xc7, 0xe3, 0x8b, 0x97, 0xc3, 0x45, 0x1c, 0x40, 0x07, 0x54, 0x20, 0x60, 0x0c, 0x2f, 0x94,
	0x64, 0x11, 0x11, 0xf1, 0x42, 0x69, 0x11, 0x8c, 0x31, 0x36, 0x36, 0xd5, 0xf8, 0x34, 0xd9, 0xed,
	0x4e, 0xcb, 0x26, 0x9d, 0x9d, 0xc9, 0x5c, 0x5a, 0xfb, 0xdd, 0xfc, 0x70, 0x66, 0xce, 0x4e, 0xb7,
	0x0b, 0xd9, 0x37, 0x32, 0xff, 0xdf, 0xff, 0x77, 0x66, 0x0f, 0x93, 0xc2, 0xe6, 0x28, 0x1a, 0xab,
	0x9c, 0x25, 0x3a, 0x4b, 0x87, 0x9c, 0x19, 0x27, 0x44, 0xac, 0xa7, 0x0d, 0xa5, 0xa5, 0x95, 0xe4,
	0xb8, 0x9f, 0x99, 0xbe, 0x64, 0x99, 0x34, 0xec, 0xaf, 0x66, 0x05, 0x28, 0x15, 0xd7, 0x0d, 0xfc,
	0x73, 0x1c, 0x35, 0xe2, 0xbe, 0xcd, 0xc6, 0xbc, 0x71, 0xbb, 0xbc, 0xfb, 0x1c, 0x36, 0xea, 0xa4,
	0xec, 0xdb, 0xe5, 0x9f, 0xee, 0xee, 0xbf, 0x87, 0xb0, 0x56, 0x97, 0x92, 0x3d, 0x58, 0xca, 0x9d,
	0x48, 0xb8, 0x66, 0x43, 0x2d, 0x9d, 0x32, 0x34, 0xda, 0xb9, 0xb7, 0xbf, 0xf4, 0x73, 0xb1, 0x38,
	0xbc, 0xc2, 0x33, 0x12, 0xc1, 0x7a, 0x80, 0x42, 0x3b, 0x95, 0x22, 0xce, 0x72, 0x43, 0x8f, 0x10,
	0x5e, 0x2d, 0xc2, 0x0b, 0xcc, 0xda, 0x45, 0x44, 0x4e, 0x80, 0xd6, 0x76, 0x98, 0x53, 0xf4, 0x0d,
	0xd6, 0xd6, 0x6b, 0x6a, 0x3d, 0x45, 0xce, 0x60, 0xb3, 0xbe, 0x68, 0x6e, 0x9c, 0xa5, 0xc7, 0x58,
	0x7d, 0x56, 0x53, 0xed, 0xde, 0x38, 0x4b, 0x9a, 0xf0, 0x32, 0x94, 0x53, 0x3e, 0x88, 0xdd, 0xc8,
	0xce, 0x25, 0xb1, 0xf0, 0x37, 0x7e, 0x8b, 0xfd, 0x30, 0xa1, 0x5d, 0x30, 0x33, 0x0d, 0x12, 0xe4,
	0x35, 0x3c, 0x0e, 0x0a, 0x95, 0x24, 0x8c, 0xa7, 0x43, 0x4e, 0x4f, 0xb0, 0x14, 0x16, 0xd5, 0x49,
	0x92, 0xcb, 0x74, 0xc8, 0xef, 0x70, 0x7d, 0xa9, 0x39, 0x7d, 0x77, 0x87, 0x6b, 0x49, 0xcd, 0xc9,
	0x36, 0x2c, 0xcc, 0xb8, 0x48, 0x28, 0x7a, 0x8a, 0x0c, 0x04, 0x26, 0x12, 0x8a, 0xbc, 0x82, 0xe5,
	0x0a, 0xe0, 0xf7, 0xf3, 0xbe, 0xfa, 0x3f, 0xf0, 0x4c, 0x4f, 0x91, 0x7d, 0x58, 0xa9, 0x52, 0xa9,
	0x9c, 0xe4, 0xf4, 0x0c, 0xb9, 0xe5, 0x39, 0xd7, 0x96, 0x93, 0x9c, 0x6c, 0x95, 0x03, 0x63, 0xd6,
	0x37, 0xf4, 0x03, 0x42, 0x8f, 0x8a, 0xa3, 0x66, 0xcb, 0x90, 0xbd, 0x72, 0x9e, 0xcf, 0xfd, 0xbc,
	0x8f, 0x88, 0x2c, 0x94, 0x48, 0x4f, 0x91, 0x03, 0x20, 0xb3, 0x71, 0x86, 0xbb, 0x54, 0x4e, 0x32,
	0xcd, 0x0d, 0xfd, 0x84, 0xe0, 0x93, 0x30, 0x70, 0x1e, 0x54, 0x9c, 0x8a, 0x4d, 0xd0, 0xf9, 0xb9,
	0xea, 0xec, 0xfc, 0xf6, 0xce, 0x43, 0x58, 0x35, 0x36, 0xce, 0xd3, 0x64, 0x7a, 0x4b, 0x7a, 0x8e,
	0x24, 0x09, 0x51, 0xd5, 0xba, 0x09, 0xfe, 0xda, 0x6c, 0x9c, 0xb3, 0xcc, 0xd0, 0x26, 0x62, 0x0f,
	0x72, 0x27, 0x7e, 0xe5, 0x5f, 0x0d, 0xd9, 0x86, 0xc5, 0x32, 0xf3, 0xf3, 0x2e, 0xca, 0xcf, 0xf4,
	0x71, 0x4f, 0x85, 0x2b, 0x05, 0x00, 0xd7, 0xd5, 0x2a, 0xaf, 0xe4, 0x11, 0xdc, 0xd5, 0x21, 0xac,
	0x55, 0x2c, 0xb9, 0xe6, 0x46, 0x8e, 0xc6, 0x3c, 0xa5, 0xed, 0xf2, 0x43, 0xd1, 0x56, 0x06, 0xe4,
	0x00, 0x56, 0xa5, 0xb3, 0x4c, 0x0e, 0x98, 0xe0, 0x42, 0xea, 0x29, 0x33, 0x36, 0xb6, 0x9c, 0x5e,
	0x22, 0xbf, 0x22, 0x9d, 0xfd, 0x31, 0xf8, 0x8e, 0x41, 0xd7, 0x9f, 0x93, 0x73, 0x78, 0xa1, 0x62,
	0x6d, 0xb3, 0x78, 0x34, 0x9a, 0x32, 0xa5, 0xe5, 0x50, 0xc7, 0x42, 0xf0, 0x34, 0xbc, 0x4a, 0x43,
	0xbf, 0x14, 0xcf, 0xb1, 0x64, 0x3a, 0x25, 0x52, 0x3c, 0x4a, 0x43, 0xae, 0x61, 0xa7, 0xd6, 0x50,
	0xdd, 0xe0, 0x15, 0x5a, 0xb6, 0x6a, 0x2c, 0xd5, 0x6d, 0x9e, 0xc2, 0x46, 0xad, 0x09, 0x5f, 0xc9,
	0x35, 0x2a, 0x9e, 0xd6, 0x28, 0x9a, 0x2d, 0x93, 0xdc, 0xc7, 0x5f, 0xa6, 0xa3, 0xff, 0x01, 0x00,
	0x00, 0xff, 0xff, 0x7e, 0xce, 0xa1, 0x40, 0xb7, 0x04, 0x00, 0x00,
}
