/*
Copyright 2019 Cisco Systems

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: l2vpn_fxc.proto

package cisco_ios_xr_l2vpn_oper_l2vpnv2_standby_flexible_xconnect_services_flexible_xconnect_service_flexible_xconnect_service_info

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type L2VpnFxc_KEYS struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *L2VpnFxc_KEYS) Reset()         { *m = L2VpnFxc_KEYS{} }
func (m *L2VpnFxc_KEYS) String() string { return proto.CompactTextString(m) }
func (*L2VpnFxc_KEYS) ProtoMessage()    {}
func (*L2VpnFxc_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_527d8d161c6f92ac, []int{0}
}

func (m *L2VpnFxc_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2VpnFxc_KEYS.Unmarshal(m, b)
}
func (m *L2VpnFxc_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2VpnFxc_KEYS.Marshal(b, m, deterministic)
}
func (m *L2VpnFxc_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2VpnFxc_KEYS.Merge(m, src)
}
func (m *L2VpnFxc_KEYS) XXX_Size() int {
	return xxx_messageInfo_L2VpnFxc_KEYS.Size(m)
}
func (m *L2VpnFxc_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_L2VpnFxc_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_L2VpnFxc_KEYS proto.InternalMessageInfo

func (m *L2VpnFxc_KEYS) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type L2VpnPeer struct {
	Type                 string   `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Ipv4PeerId           string   `protobuf:"bytes,2,opt,name=ipv4_peer_id,json=ipv4PeerId,proto3" json:"ipv4_peer_id,omitempty"`
	Ipv6PeerId           string   `protobuf:"bytes,3,opt,name=ipv6_peer_id,json=ipv6PeerId,proto3" json:"ipv6_peer_id,omitempty"`
	InternalLabel        uint32   `protobuf:"varint,4,opt,name=internal_label,json=internalLabel,proto3" json:"internal_label,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *L2VpnPeer) Reset()         { *m = L2VpnPeer{} }
func (m *L2VpnPeer) String() string { return proto.CompactTextString(m) }
func (*L2VpnPeer) ProtoMessage()    {}
func (*L2VpnPeer) Descriptor() ([]byte, []int) {
	return fileDescriptor_527d8d161c6f92ac, []int{1}
}

func (m *L2VpnPeer) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2VpnPeer.Unmarshal(m, b)
}
func (m *L2VpnPeer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2VpnPeer.Marshal(b, m, deterministic)
}
func (m *L2VpnPeer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2VpnPeer.Merge(m, src)
}
func (m *L2VpnPeer) XXX_Size() int {
	return xxx_messageInfo_L2VpnPeer.Size(m)
}
func (m *L2VpnPeer) XXX_DiscardUnknown() {
	xxx_messageInfo_L2VpnPeer.DiscardUnknown(m)
}

var xxx_messageInfo_L2VpnPeer proto.InternalMessageInfo

func (m *L2VpnPeer) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *L2VpnPeer) GetIpv4PeerId() string {
	if m != nil {
		return m.Ipv4PeerId
	}
	return ""
}

func (m *L2VpnPeer) GetIpv6PeerId() string {
	if m != nil {
		return m.Ipv6PeerId
	}
	return ""
}

func (m *L2VpnPeer) GetInternalLabel() uint32 {
	if m != nil {
		return m.InternalLabel
	}
	return 0
}

type L2VpnVplsIdAuto struct {
	Asn                  uint32   `protobuf:"varint,1,opt,name=asn,proto3" json:"asn,omitempty"`
	VpnId                uint32   `protobuf:"varint,2,opt,name=vpn_id,json=vpnId,proto3" json:"vpn_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *L2VpnVplsIdAuto) Reset()         { *m = L2VpnVplsIdAuto{} }
func (m *L2VpnVplsIdAuto) String() string { return proto.CompactTextString(m) }
func (*L2VpnVplsIdAuto) ProtoMessage()    {}
func (*L2VpnVplsIdAuto) Descriptor() ([]byte, []int) {
	return fileDescriptor_527d8d161c6f92ac, []int{2}
}

func (m *L2VpnVplsIdAuto) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2VpnVplsIdAuto.Unmarshal(m, b)
}
func (m *L2VpnVplsIdAuto) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2VpnVplsIdAuto.Marshal(b, m, deterministic)
}
func (m *L2VpnVplsIdAuto) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2VpnVplsIdAuto.Merge(m, src)
}
func (m *L2VpnVplsIdAuto) XXX_Size() int {
	return xxx_messageInfo_L2VpnVplsIdAuto.Size(m)
}
func (m *L2VpnVplsIdAuto) XXX_DiscardUnknown() {
	xxx_messageInfo_L2VpnVplsIdAuto.DiscardUnknown(m)
}

var xxx_messageInfo_L2VpnVplsIdAuto proto.InternalMessageInfo

func (m *L2VpnVplsIdAuto) GetAsn() uint32 {
	if m != nil {
		return m.Asn
	}
	return 0
}

func (m *L2VpnVplsIdAuto) GetVpnId() uint32 {
	if m != nil {
		return m.VpnId
	}
	return 0
}

type L2VpnVplsId_2ByteAs struct {
	TwoByteAs            uint32   `protobuf:"varint,1,opt,name=two_byte_as,json=twoByteAs,proto3" json:"two_byte_as,omitempty"`
	FourByteIndex        uint32   `protobuf:"varint,2,opt,name=four_byte_index,json=fourByteIndex,proto3" json:"four_byte_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *L2VpnVplsId_2ByteAs) Reset()         { *m = L2VpnVplsId_2ByteAs{} }
func (m *L2VpnVplsId_2ByteAs) String() string { return proto.CompactTextString(m) }
func (*L2VpnVplsId_2ByteAs) ProtoMessage()    {}
func (*L2VpnVplsId_2ByteAs) Descriptor() ([]byte, []int) {
	return fileDescriptor_527d8d161c6f92ac, []int{3}
}

func (m *L2VpnVplsId_2ByteAs) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2VpnVplsId_2ByteAs.Unmarshal(m, b)
}
func (m *L2VpnVplsId_2ByteAs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2VpnVplsId_2ByteAs.Marshal(b, m, deterministic)
}
func (m *L2VpnVplsId_2ByteAs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2VpnVplsId_2ByteAs.Merge(m, src)
}
func (m *L2VpnVplsId_2ByteAs) XXX_Size() int {
	return xxx_messageInfo_L2VpnVplsId_2ByteAs.Size(m)
}
func (m *L2VpnVplsId_2ByteAs) XXX_DiscardUnknown() {
	xxx_messageInfo_L2VpnVplsId_2ByteAs.DiscardUnknown(m)
}

var xxx_messageInfo_L2VpnVplsId_2ByteAs proto.InternalMessageInfo

func (m *L2VpnVplsId_2ByteAs) GetTwoByteAs() uint32 {
	if m != nil {
		return m.TwoByteAs
	}
	return 0
}

func (m *L2VpnVplsId_2ByteAs) GetFourByteIndex() uint32 {
	if m != nil {
		return m.FourByteIndex
	}
	return 0
}

type L2VpnVplsIdV4Addr struct {
	Ipv4Address          string   `protobuf:"bytes,1,opt,name=ipv4_address,json=ipv4Address,proto3" json:"ipv4_address,omitempty"`
	TwoByteIndex         uint32   `protobuf:"varint,2,opt,name=two_byte_index,json=twoByteIndex,proto3" json:"two_byte_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *L2VpnVplsIdV4Addr) Reset()         { *m = L2VpnVplsIdV4Addr{} }
func (m *L2VpnVplsIdV4Addr) String() string { return proto.CompactTextString(m) }
func (*L2VpnVplsIdV4Addr) ProtoMessage()    {}
func (*L2VpnVplsIdV4Addr) Descriptor() ([]byte, []int) {
	return fileDescriptor_527d8d161c6f92ac, []int{4}
}

func (m *L2VpnVplsIdV4Addr) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2VpnVplsIdV4Addr.Unmarshal(m, b)
}
func (m *L2VpnVplsIdV4Addr) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2VpnVplsIdV4Addr.Marshal(b, m, deterministic)
}
func (m *L2VpnVplsIdV4Addr) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2VpnVplsIdV4Addr.Merge(m, src)
}
func (m *L2VpnVplsIdV4Addr) XXX_Size() int {
	return xxx_messageInfo_L2VpnVplsIdV4Addr.Size(m)
}
func (m *L2VpnVplsIdV4Addr) XXX_DiscardUnknown() {
	xxx_messageInfo_L2VpnVplsIdV4Addr.DiscardUnknown(m)
}

var xxx_messageInfo_L2VpnVplsIdV4Addr proto.InternalMessageInfo

func (m *L2VpnVplsIdV4Addr) GetIpv4Address() string {
	if m != nil {
		return m.Ipv4Address
	}
	return ""
}

func (m *L2VpnVplsIdV4Addr) GetTwoByteIndex() uint32 {
	if m != nil {
		return m.TwoByteIndex
	}
	return 0
}

type L2VpnVplsId struct {
	VplsIdType           string               `protobuf:"bytes,1,opt,name=vpls_id_type,json=vplsIdType,proto3" json:"vpls_id_type,omitempty"`
	Auto                 *L2VpnVplsIdAuto     `protobuf:"bytes,2,opt,name=auto,proto3" json:"auto,omitempty"`
	TwoByteAs            *L2VpnVplsId_2ByteAs `protobuf:"bytes,3,opt,name=two_byte_as,json=twoByteAs,proto3" json:"two_byte_as,omitempty"`
	V4Addr               *L2VpnVplsIdV4Addr   `protobuf:"bytes,4,opt,name=v4_addr,json=v4Addr,proto3" json:"v4_addr,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *L2VpnVplsId) Reset()         { *m = L2VpnVplsId{} }
func (m *L2VpnVplsId) String() string { return proto.CompactTextString(m) }
func (*L2VpnVplsId) ProtoMessage()    {}
func (*L2VpnVplsId) Descriptor() ([]byte, []int) {
	return fileDescriptor_527d8d161c6f92ac, []int{5}
}

func (m *L2VpnVplsId) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2VpnVplsId.Unmarshal(m, b)
}
func (m *L2VpnVplsId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2VpnVplsId.Marshal(b, m, deterministic)
}
func (m *L2VpnVplsId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2VpnVplsId.Merge(m, src)
}
func (m *L2VpnVplsId) XXX_Size() int {
	return xxx_messageInfo_L2VpnVplsId.Size(m)
}
func (m *L2VpnVplsId) XXX_DiscardUnknown() {
	xxx_messageInfo_L2VpnVplsId.DiscardUnknown(m)
}

var xxx_messageInfo_L2VpnVplsId proto.InternalMessageInfo

func (m *L2VpnVplsId) GetVplsIdType() string {
	if m != nil {
		return m.VplsIdType
	}
	return ""
}

func (m *L2VpnVplsId) GetAuto() *L2VpnVplsIdAuto {
	if m != nil {
		return m.Auto
	}
	return nil
}

func (m *L2VpnVplsId) GetTwoByteAs() *L2VpnVplsId_2ByteAs {
	if m != nil {
		return m.TwoByteAs
	}
	return nil
}

func (m *L2VpnVplsId) GetV4Addr() *L2VpnVplsIdV4Addr {
	if m != nil {
		return m.V4Addr
	}
	return nil
}

type L2FibStatsBagMspw struct {
	ReceivedPackets      uint64   `protobuf:"varint,1,opt,name=received_packets,json=receivedPackets,proto3" json:"received_packets,omitempty"`
	ReceivedBytes        uint64   `protobuf:"varint,2,opt,name=received_bytes,json=receivedBytes,proto3" json:"received_bytes,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *L2FibStatsBagMspw) Reset()         { *m = L2FibStatsBagMspw{} }
func (m *L2FibStatsBagMspw) String() string { return proto.CompactTextString(m) }
func (*L2FibStatsBagMspw) ProtoMessage()    {}
func (*L2FibStatsBagMspw) Descriptor() ([]byte, []int) {
	return fileDescriptor_527d8d161c6f92ac, []int{6}
}

func (m *L2FibStatsBagMspw) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2FibStatsBagMspw.Unmarshal(m, b)
}
func (m *L2FibStatsBagMspw) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2FibStatsBagMspw.Marshal(b, m, deterministic)
}
func (m *L2FibStatsBagMspw) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2FibStatsBagMspw.Merge(m, src)
}
func (m *L2FibStatsBagMspw) XXX_Size() int {
	return xxx_messageInfo_L2FibStatsBagMspw.Size(m)
}
func (m *L2FibStatsBagMspw) XXX_DiscardUnknown() {
	xxx_messageInfo_L2FibStatsBagMspw.DiscardUnknown(m)
}

var xxx_messageInfo_L2FibStatsBagMspw proto.InternalMessageInfo

func (m *L2FibStatsBagMspw) GetReceivedPackets() uint64 {
	if m != nil {
		return m.ReceivedPackets
	}
	return 0
}

func (m *L2FibStatsBagMspw) GetReceivedBytes() uint64 {
	if m != nil {
		return m.ReceivedBytes
	}
	return 0
}

type L2VpnAtom struct {
	IsPseudowireHeadend         bool               `protobuf:"varint,1,opt,name=is_pseudowire_headend,json=isPseudowireHeadend,proto3" json:"is_pseudowire_headend,omitempty"`
	LocalLabel                  uint32             `protobuf:"varint,2,opt,name=local_label,json=localLabel,proto3" json:"local_label,omitempty"`
	RemoteLabel                 uint32             `protobuf:"varint,3,opt,name=remote_label,json=remoteLabel,proto3" json:"remote_label,omitempty"`
	LocalGroupId                uint32             `protobuf:"varint,4,opt,name=local_group_id,json=localGroupId,proto3" json:"local_group_id,omitempty"`
	RemoteGroupId               uint32             `protobuf:"varint,5,opt,name=remote_group_id,json=remoteGroupId,proto3" json:"remote_group_id,omitempty"`
	LocalCvType                 uint32             `protobuf:"varint,6,opt,name=local_cv_type,json=localCvType,proto3" json:"local_cv_type,omitempty"`
	LocalCCtype                 uint32             `protobuf:"varint,7,opt,name=local_c_ctype,json=localCCtype,proto3" json:"local_c_ctype,omitempty"`
	RemoteCvType                uint32             `protobuf:"varint,8,opt,name=remote_cv_type,json=remoteCvType,proto3" json:"remote_cv_type,omitempty"`
	RemoteCCtype                uint32             `protobuf:"varint,9,opt,name=remote_c_ctype,json=remoteCCtype,proto3" json:"remote_c_ctype,omitempty"`
	LocalVeid                   uint32             `protobuf:"varint,10,opt,name=local_veid,json=localVeid,proto3" json:"local_veid,omitempty"`
	RemoteVeid                  uint32             `protobuf:"varint,11,opt,name=remote_veid,json=remoteVeid,proto3" json:"remote_veid,omitempty"`
	LocalCeid                   uint32             `protobuf:"varint,12,opt,name=local_ceid,json=localCeid,proto3" json:"local_ceid,omitempty"`
	RemoteCeid                  uint32             `protobuf:"varint,13,opt,name=remote_ceid,json=remoteCeid,proto3" json:"remote_ceid,omitempty"`
	SourceAddress               string             `protobuf:"bytes,14,opt,name=source_address,json=sourceAddress,proto3" json:"source_address,omitempty"`
	RemoteSourceAddress         string             `protobuf:"bytes,15,opt,name=remote_source_address,json=remoteSourceAddress,proto3" json:"remote_source_address,omitempty"`
	LocalLdpId                  string             `protobuf:"bytes,16,opt,name=local_ldp_id,json=localLdpId,proto3" json:"local_ldp_id,omitempty"`
	RemoteLdpId                 string             `protobuf:"bytes,17,opt,name=remote_ldp_id,json=remoteLdpId,proto3" json:"remote_ldp_id,omitempty"`
	Saii                        string             `protobuf:"bytes,18,opt,name=saii,proto3" json:"saii,omitempty"`
	Taii                        string             `protobuf:"bytes,19,opt,name=taii,proto3" json:"taii,omitempty"`
	LocalAgi                    *L2VpnVplsId       `protobuf:"bytes,20,opt,name=local_agi,json=localAgi,proto3" json:"local_agi,omitempty"`
	RemoteAgi                   *L2VpnVplsId       `protobuf:"bytes,21,opt,name=remote_agi,json=remoteAgi,proto3" json:"remote_agi,omitempty"`
	IsSaiItype2                 bool               `protobuf:"varint,22,opt,name=is_sai_itype2,json=isSaiItype2,proto3" json:"is_sai_itype2,omitempty"`
	LocalSaiiGblId              uint32             `protobuf:"varint,23,opt,name=local_saii_gbl_id,json=localSaiiGblId,proto3" json:"local_saii_gbl_id,omitempty"`
	LocalSaiiacId               uint32             `protobuf:"varint,24,opt,name=local_saiiac_id,json=localSaiiacId,proto3" json:"local_saiiac_id,omitempty"`
	IsTaiItype2                 bool               `protobuf:"varint,25,opt,name=is_tai_itype2,json=isTaiItype2,proto3" json:"is_tai_itype2,omitempty"`
	LocalTaiiGblId              uint32             `protobuf:"varint,26,opt,name=local_taii_gbl_id,json=localTaiiGblId,proto3" json:"local_taii_gbl_id,omitempty"`
	LocalTaiiacId               uint32             `protobuf:"varint,27,opt,name=local_taiiac_id,json=localTaiiacId,proto3" json:"local_taiiac_id,omitempty"`
	RemSaiiGblId                uint32             `protobuf:"varint,28,opt,name=rem_saii_gbl_id,json=remSaiiGblId,proto3" json:"rem_saii_gbl_id,omitempty"`
	RemSaiiacId                 uint32             `protobuf:"varint,29,opt,name=rem_saiiac_id,json=remSaiiacId,proto3" json:"rem_saiiac_id,omitempty"`
	RemTaiiGblId                uint32             `protobuf:"varint,30,opt,name=rem_taii_gbl_id,json=remTaiiGblId,proto3" json:"rem_taii_gbl_id,omitempty"`
	RemTaiiacId                 uint32             `protobuf:"varint,31,opt,name=rem_taiiac_id,json=remTaiiacId,proto3" json:"rem_taiiac_id,omitempty"`
	RemSaii                     string             `protobuf:"bytes,32,opt,name=rem_saii,json=remSaii,proto3" json:"rem_saii,omitempty"`
	RemTaii                     string             `protobuf:"bytes,33,opt,name=rem_taii,json=remTaii,proto3" json:"rem_taii,omitempty"`
	LsdRewriteFailed            bool               `protobuf:"varint,34,opt,name=lsd_rewrite_failed,json=lsdRewriteFailed,proto3" json:"lsd_rewrite_failed,omitempty"`
	LdpLabelAdvertismentFailed  bool               `protobuf:"varint,35,opt,name=ldp_label_advertisment_failed,json=ldpLabelAdvertismentFailed,proto3" json:"ldp_label_advertisment_failed,omitempty"`
	MultiSegmentPseudowireStats *L2FibStatsBagMspw `protobuf:"bytes,36,opt,name=multi_segment_pseudowire_stats,json=multiSegmentPseudowireStats,proto3" json:"multi_segment_pseudowire_stats,omitempty"`
	XXX_NoUnkeyedLiteral        struct{}           `json:"-"`
	XXX_unrecognized            []byte             `json:"-"`
	XXX_sizecache               int32              `json:"-"`
}

func (m *L2VpnAtom) Reset()         { *m = L2VpnAtom{} }
func (m *L2VpnAtom) String() string { return proto.CompactTextString(m) }
func (*L2VpnAtom) ProtoMessage()    {}
func (*L2VpnAtom) Descriptor() ([]byte, []int) {
	return fileDescriptor_527d8d161c6f92ac, []int{7}
}

func (m *L2VpnAtom) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2VpnAtom.Unmarshal(m, b)
}
func (m *L2VpnAtom) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2VpnAtom.Marshal(b, m, deterministic)
}
func (m *L2VpnAtom) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2VpnAtom.Merge(m, src)
}
func (m *L2VpnAtom) XXX_Size() int {
	return xxx_messageInfo_L2VpnAtom.Size(m)
}
func (m *L2VpnAtom) XXX_DiscardUnknown() {
	xxx_messageInfo_L2VpnAtom.DiscardUnknown(m)
}

var xxx_messageInfo_L2VpnAtom proto.InternalMessageInfo

func (m *L2VpnAtom) GetIsPseudowireHeadend() bool {
	if m != nil {
		return m.IsPseudowireHeadend
	}
	return false
}

func (m *L2VpnAtom) GetLocalLabel() uint32 {
	if m != nil {
		return m.LocalLabel
	}
	return 0
}

func (m *L2VpnAtom) GetRemoteLabel() uint32 {
	if m != nil {
		return m.RemoteLabel
	}
	return 0
}

func (m *L2VpnAtom) GetLocalGroupId() uint32 {
	if m != nil {
		return m.LocalGroupId
	}
	return 0
}

func (m *L2VpnAtom) GetRemoteGroupId() uint32 {
	if m != nil {
		return m.RemoteGroupId
	}
	return 0
}

func (m *L2VpnAtom) GetLocalCvType() uint32 {
	if m != nil {
		return m.LocalCvType
	}
	return 0
}

func (m *L2VpnAtom) GetLocalCCtype() uint32 {
	if m != nil {
		return m.LocalCCtype
	}
	return 0
}

func (m *L2VpnAtom) GetRemoteCvType() uint32 {
	if m != nil {
		return m.RemoteCvType
	}
	return 0
}

func (m *L2VpnAtom) GetRemoteCCtype() uint32 {
	if m != nil {
		return m.RemoteCCtype
	}
	return 0
}

func (m *L2VpnAtom) GetLocalVeid() uint32 {
	if m != nil {
		return m.LocalVeid
	}
	return 0
}

func (m *L2VpnAtom) GetRemoteVeid() uint32 {
	if m != nil {
		return m.RemoteVeid
	}
	return 0
}

func (m *L2VpnAtom) GetLocalCeid() uint32 {
	if m != nil {
		return m.LocalCeid
	}
	return 0
}

func (m *L2VpnAtom) GetRemoteCeid() uint32 {
	if m != nil {
		return m.RemoteCeid
	}
	return 0
}

func (m *L2VpnAtom) GetSourceAddress() string {
	if m != nil {
		return m.SourceAddress
	}
	return ""
}

func (m *L2VpnAtom) GetRemoteSourceAddress() string {
	if m != nil {
		return m.RemoteSourceAddress
	}
	return ""
}

func (m *L2VpnAtom) GetLocalLdpId() string {
	if m != nil {
		return m.LocalLdpId
	}
	return ""
}

func (m *L2VpnAtom) GetRemoteLdpId() string {
	if m != nil {
		return m.RemoteLdpId
	}
	return ""
}

func (m *L2VpnAtom) GetSaii() string {
	if m != nil {
		return m.Saii
	}
	return ""
}

func (m *L2VpnAtom) GetTaii() string {
	if m != nil {
		return m.Taii
	}
	return ""
}

func (m *L2VpnAtom) GetLocalAgi() *L2VpnVplsId {
	if m != nil {
		return m.LocalAgi
	}
	return nil
}

func (m *L2VpnAtom) GetRemoteAgi() *L2VpnVplsId {
	if m != nil {
		return m.RemoteAgi
	}
	return nil
}

func (m *L2VpnAtom) GetIsSaiItype2() bool {
	if m != nil {
		return m.IsSaiItype2
	}
	return false
}

func (m *L2VpnAtom) GetLocalSaiiGblId() uint32 {
	if m != nil {
		return m.LocalSaiiGblId
	}
	return 0
}

func (m *L2VpnAtom) GetLocalSaiiacId() uint32 {
	if m != nil {
		return m.LocalSaiiacId
	}
	return 0
}

func (m *L2VpnAtom) GetIsTaiItype2() bool {
	if m != nil {
		return m.IsTaiItype2
	}
	return false
}

func (m *L2VpnAtom) GetLocalTaiiGblId() uint32 {
	if m != nil {
		return m.LocalTaiiGblId
	}
	return 0
}

func (m *L2VpnAtom) GetLocalTaiiacId() uint32 {
	if m != nil {
		return m.LocalTaiiacId
	}
	return 0
}

func (m *L2VpnAtom) GetRemSaiiGblId() uint32 {
	if m != nil {
		return m.RemSaiiGblId
	}
	return 0
}

func (m *L2VpnAtom) GetRemSaiiacId() uint32 {
	if m != nil {
		return m.RemSaiiacId
	}
	return 0
}

func (m *L2VpnAtom) GetRemTaiiGblId() uint32 {
	if m != nil {
		return m.RemTaiiGblId
	}
	return 0
}

func (m *L2VpnAtom) GetRemTaiiacId() uint32 {
	if m != nil {
		return m.RemTaiiacId
	}
	return 0
}

func (m *L2VpnAtom) GetRemSaii() string {
	if m != nil {
		return m.RemSaii
	}
	return ""
}

func (m *L2VpnAtom) GetRemTaii() string {
	if m != nil {
		return m.RemTaii
	}
	return ""
}

func (m *L2VpnAtom) GetLsdRewriteFailed() bool {
	if m != nil {
		return m.LsdRewriteFailed
	}
	return false
}

func (m *L2VpnAtom) GetLdpLabelAdvertismentFailed() bool {
	if m != nil {
		return m.LdpLabelAdvertismentFailed
	}
	return false
}

func (m *L2VpnAtom) GetMultiSegmentPseudowireStats() *L2FibStatsBagMspw {
	if m != nil {
		return m.MultiSegmentPseudowireStats
	}
	return nil
}

type L2VpnL2Tpv3 struct {
	L2TpClassName                 string   `protobuf:"bytes,1,opt,name=l2tp_class_name,json=l2tpClassName,proto3" json:"l2tp_class_name,omitempty"`
	Ipv4SourceAddress             string   `protobuf:"bytes,2,opt,name=ipv4_source_address,json=ipv4SourceAddress,proto3" json:"ipv4_source_address,omitempty"`
	Ipv6SourceAddress             string   `protobuf:"bytes,3,opt,name=ipv6_source_address,json=ipv6SourceAddress,proto3" json:"ipv6_source_address,omitempty"`
	PathMtuEnabled                bool     `protobuf:"varint,4,opt,name=path_mtu_enabled,json=pathMtuEnabled,proto3" json:"path_mtu_enabled,omitempty"`
	PathMtuMaxValue               uint32   `protobuf:"varint,5,opt,name=path_mtu_max_value,json=pathMtuMaxValue,proto3" json:"path_mtu_max_value,omitempty"`
	DontFragmentBit               bool     `protobuf:"varint,6,opt,name=dont_fragment_bit,json=dontFragmentBit,proto3" json:"dont_fragment_bit,omitempty"`
	TosMode                       string   `protobuf:"bytes,7,opt,name=tos_mode,json=tosMode,proto3" json:"tos_mode,omitempty"`
	Tos                           uint32   `protobuf:"varint,8,opt,name=tos,proto3" json:"tos,omitempty"`
	Ttl                           uint32   `protobuf:"varint,9,opt,name=ttl,proto3" json:"ttl,omitempty"`
	LocalSessionId                uint32   `protobuf:"varint,10,opt,name=local_session_id,json=localSessionId,proto3" json:"local_session_id,omitempty"`
	RemoteSessionId               uint32   `protobuf:"varint,11,opt,name=remote_session_id,json=remoteSessionId,proto3" json:"remote_session_id,omitempty"`
	LocalCookieSize               uint32   `protobuf:"varint,12,opt,name=local_cookie_size,json=localCookieSize,proto3" json:"local_cookie_size,omitempty"`
	RemoteCookieSize              uint32   `protobuf:"varint,13,opt,name=remote_cookie_size,json=remoteCookieSize,proto3" json:"remote_cookie_size,omitempty"`
	LocalCookieLowValue           uint32   `protobuf:"varint,14,opt,name=local_cookie_low_value,json=localCookieLowValue,proto3" json:"local_cookie_low_value,omitempty"`
	RemoteCookieLowValue          uint32   `protobuf:"varint,15,opt,name=remote_cookie_low_value,json=remoteCookieLowValue,proto3" json:"remote_cookie_low_value,omitempty"`
	LocalCookieHighValue          uint32   `protobuf:"varint,16,opt,name=local_cookie_high_value,json=localCookieHighValue,proto3" json:"local_cookie_high_value,omitempty"`
	RemoteCookieHighValue         uint32   `protobuf:"varint,17,opt,name=remote_cookie_high_value,json=remoteCookieHighValue,proto3" json:"remote_cookie_high_value,omitempty"`
	RemoteCircuitStatusUp         bool     `protobuf:"varint,18,opt,name=remote_circuit_status_up,json=remoteCircuitStatusUp,proto3" json:"remote_circuit_status_up,omitempty"`
	TunnelState                   string   `protobuf:"bytes,19,opt,name=tunnel_state,json=tunnelState,proto3" json:"tunnel_state,omitempty"`
	LocalSecondaryCookieSize      uint32   `protobuf:"varint,20,opt,name=local_secondary_cookie_size,json=localSecondaryCookieSize,proto3" json:"local_secondary_cookie_size,omitempty"`
	LocalSecondaryCookieLowValue  uint32   `protobuf:"varint,21,opt,name=local_secondary_cookie_low_value,json=localSecondaryCookieLowValue,proto3" json:"local_secondary_cookie_low_value,omitempty"`
	LocalSecondaryCookieHighValue uint32   `protobuf:"varint,22,opt,name=local_secondary_cookie_high_value,json=localSecondaryCookieHighValue,proto3" json:"local_secondary_cookie_high_value,omitempty"`
	XXX_NoUnkeyedLiteral          struct{} `json:"-"`
	XXX_unrecognized              []byte   `json:"-"`
	XXX_sizecache                 int32    `json:"-"`
}

func (m *L2VpnL2Tpv3) Reset()         { *m = L2VpnL2Tpv3{} }
func (m *L2VpnL2Tpv3) String() string { return proto.CompactTextString(m) }
func (*L2VpnL2Tpv3) ProtoMessage()    {}
func (*L2VpnL2Tpv3) Descriptor() ([]byte, []int) {
	return fileDescriptor_527d8d161c6f92ac, []int{8}
}

func (m *L2VpnL2Tpv3) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2VpnL2Tpv3.Unmarshal(m, b)
}
func (m *L2VpnL2Tpv3) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2VpnL2Tpv3.Marshal(b, m, deterministic)
}
func (m *L2VpnL2Tpv3) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2VpnL2Tpv3.Merge(m, src)
}
func (m *L2VpnL2Tpv3) XXX_Size() int {
	return xxx_messageInfo_L2VpnL2Tpv3.Size(m)
}
func (m *L2VpnL2Tpv3) XXX_DiscardUnknown() {
	xxx_messageInfo_L2VpnL2Tpv3.DiscardUnknown(m)
}

var xxx_messageInfo_L2VpnL2Tpv3 proto.InternalMessageInfo

func (m *L2VpnL2Tpv3) GetL2TpClassName() string {
	if m != nil {
		return m.L2TpClassName
	}
	return ""
}

func (m *L2VpnL2Tpv3) GetIpv4SourceAddress() string {
	if m != nil {
		return m.Ipv4SourceAddress
	}
	return ""
}

func (m *L2VpnL2Tpv3) GetIpv6SourceAddress() string {
	if m != nil {
		return m.Ipv6SourceAddress
	}
	return ""
}

func (m *L2VpnL2Tpv3) GetPathMtuEnabled() bool {
	if m != nil {
		return m.PathMtuEnabled
	}
	return false
}

func (m *L2VpnL2Tpv3) GetPathMtuMaxValue() uint32 {
	if m != nil {
		return m.PathMtuMaxValue
	}
	return 0
}

func (m *L2VpnL2Tpv3) GetDontFragmentBit() bool {
	if m != nil {
		return m.DontFragmentBit
	}
	return false
}

func (m *L2VpnL2Tpv3) GetTosMode() string {
	if m != nil {
		return m.TosMode
	}
	return ""
}

func (m *L2VpnL2Tpv3) GetTos() uint32 {
	if m != nil {
		return m.Tos
	}
	return 0
}

func (m *L2VpnL2Tpv3) GetTtl() uint32 {
	if m != nil {
		return m.Ttl
	}
	return 0
}

func (m *L2VpnL2Tpv3) GetLocalSessionId() uint32 {
	if m != nil {
		return m.LocalSessionId
	}
	return 0
}

func (m *L2VpnL2Tpv3) GetRemoteSessionId() uint32 {
	if m != nil {
		return m.RemoteSessionId
	}
	return 0
}

func (m *L2VpnL2Tpv3) GetLocalCookieSize() uint32 {
	if m != nil {
		return m.LocalCookieSize
	}
	return 0
}

func (m *L2VpnL2Tpv3) GetRemoteCookieSize() uint32 {
	if m != nil {
		return m.RemoteCookieSize
	}
	return 0
}

func (m *L2VpnL2Tpv3) GetLocalCookieLowValue() uint32 {
	if m != nil {
		return m.LocalCookieLowValue
	}
	return 0
}

func (m *L2VpnL2Tpv3) GetRemoteCookieLowValue() uint32 {
	if m != nil {
		return m.RemoteCookieLowValue
	}
	return 0
}

func (m *L2VpnL2Tpv3) GetLocalCookieHighValue() uint32 {
	if m != nil {
		return m.LocalCookieHighValue
	}
	return 0
}

func (m *L2VpnL2Tpv3) GetRemoteCookieHighValue() uint32 {
	if m != nil {
		return m.RemoteCookieHighValue
	}
	return 0
}

func (m *L2VpnL2Tpv3) GetRemoteCircuitStatusUp() bool {
	if m != nil {
		return m.RemoteCircuitStatusUp
	}
	return false
}

func (m *L2VpnL2Tpv3) GetTunnelState() string {
	if m != nil {
		return m.TunnelState
	}
	return ""
}

func (m *L2VpnL2Tpv3) GetLocalSecondaryCookieSize() uint32 {
	if m != nil {
		return m.LocalSecondaryCookieSize
	}
	return 0
}

func (m *L2VpnL2Tpv3) GetLocalSecondaryCookieLowValue() uint32 {
	if m != nil {
		return m.LocalSecondaryCookieLowValue
	}
	return 0
}

func (m *L2VpnL2Tpv3) GetLocalSecondaryCookieHighValue() uint32 {
	if m != nil {
		return m.LocalSecondaryCookieHighValue
	}
	return 0
}

type L2VpnEncapPw struct {
	Encapsulation        string       `protobuf:"bytes,1,opt,name=encapsulation,proto3" json:"encapsulation,omitempty"`
	Atom                 *L2VpnAtom   `protobuf:"bytes,2,opt,name=atom,proto3" json:"atom,omitempty"`
	L2Tpv3               *L2VpnL2Tpv3 `protobuf:"bytes,3,opt,name=l2tpv3,proto3" json:"l2tpv3,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *L2VpnEncapPw) Reset()         { *m = L2VpnEncapPw{} }
func (m *L2VpnEncapPw) String() string { return proto.CompactTextString(m) }
func (*L2VpnEncapPw) ProtoMessage()    {}
func (*L2VpnEncapPw) Descriptor() ([]byte, []int) {
	return fileDescriptor_527d8d161c6f92ac, []int{9}
}

func (m *L2VpnEncapPw) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2VpnEncapPw.Unmarshal(m, b)
}
func (m *L2VpnEncapPw) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2VpnEncapPw.Marshal(b, m, deterministic)
}
func (m *L2VpnEncapPw) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2VpnEncapPw.Merge(m, src)
}
func (m *L2VpnEncapPw) XXX_Size() int {
	return xxx_messageInfo_L2VpnEncapPw.Size(m)
}
func (m *L2VpnEncapPw) XXX_DiscardUnknown() {
	xxx_messageInfo_L2VpnEncapPw.DiscardUnknown(m)
}

var xxx_messageInfo_L2VpnEncapPw proto.InternalMessageInfo

func (m *L2VpnEncapPw) GetEncapsulation() string {
	if m != nil {
		return m.Encapsulation
	}
	return ""
}

func (m *L2VpnEncapPw) GetAtom() *L2VpnAtom {
	if m != nil {
		return m.Atom
	}
	return nil
}

func (m *L2VpnEncapPw) GetL2Tpv3() *L2VpnL2Tpv3 {
	if m != nil {
		return m.L2Tpv3
	}
	return nil
}

type L2VpnEthernet struct {
	XconnectTags         uint32   `protobuf:"varint,1,opt,name=xconnect_tags,json=xconnectTags,proto3" json:"xconnect_tags,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *L2VpnEthernet) Reset()         { *m = L2VpnEthernet{} }
func (m *L2VpnEthernet) String() string { return proto.CompactTextString(m) }
func (*L2VpnEthernet) ProtoMessage()    {}
func (*L2VpnEthernet) Descriptor() ([]byte, []int) {
	return fileDescriptor_527d8d161c6f92ac, []int{10}
}

func (m *L2VpnEthernet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2VpnEthernet.Unmarshal(m, b)
}
func (m *L2VpnEthernet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2VpnEthernet.Marshal(b, m, deterministic)
}
func (m *L2VpnEthernet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2VpnEthernet.Merge(m, src)
}
func (m *L2VpnEthernet) XXX_Size() int {
	return xxx_messageInfo_L2VpnEthernet.Size(m)
}
func (m *L2VpnEthernet) XXX_DiscardUnknown() {
	xxx_messageInfo_L2VpnEthernet.DiscardUnknown(m)
}

var xxx_messageInfo_L2VpnEthernet proto.InternalMessageInfo

func (m *L2VpnEthernet) GetXconnectTags() uint32 {
	if m != nil {
		return m.XconnectTags
	}
	return 0
}

type L2VpnEfpRange struct {
	Lower                uint32   `protobuf:"varint,1,opt,name=lower,proto3" json:"lower,omitempty"`
	Upper                uint32   `protobuf:"varint,2,opt,name=upper,proto3" json:"upper,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *L2VpnEfpRange) Reset()         { *m = L2VpnEfpRange{} }
func (m *L2VpnEfpRange) String() string { return proto.CompactTextString(m) }
func (*L2VpnEfpRange) ProtoMessage()    {}
func (*L2VpnEfpRange) Descriptor() ([]byte, []int) {
	return fileDescriptor_527d8d161c6f92ac, []int{11}
}

func (m *L2VpnEfpRange) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2VpnEfpRange.Unmarshal(m, b)
}
func (m *L2VpnEfpRange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2VpnEfpRange.Marshal(b, m, deterministic)
}
func (m *L2VpnEfpRange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2VpnEfpRange.Merge(m, src)
}
func (m *L2VpnEfpRange) XXX_Size() int {
	return xxx_messageInfo_L2VpnEfpRange.Size(m)
}
func (m *L2VpnEfpRange) XXX_DiscardUnknown() {
	xxx_messageInfo_L2VpnEfpRange.DiscardUnknown(m)
}

var xxx_messageInfo_L2VpnEfpRange proto.InternalMessageInfo

func (m *L2VpnEfpRange) GetLower() uint32 {
	if m != nil {
		return m.Lower
	}
	return 0
}

func (m *L2VpnEfpRange) GetUpper() uint32 {
	if m != nil {
		return m.Upper
	}
	return 0
}

type L2VpnVlan struct {
	XconnectTags         uint32           `protobuf:"varint,1,opt,name=xconnect_tags,json=xconnectTags,proto3" json:"xconnect_tags,omitempty"`
	VlanRewriteTag       uint32           `protobuf:"varint,2,opt,name=vlan_rewrite_tag,json=vlanRewriteTag,proto3" json:"vlan_rewrite_tag,omitempty"`
	SimpleEfp            uint32           `protobuf:"varint,3,opt,name=simple_efp,json=simpleEfp,proto3" json:"simple_efp,omitempty"`
	EncapsulationType    uint32           `protobuf:"varint,4,opt,name=encapsulation_type,json=encapsulationType,proto3" json:"encapsulation_type,omitempty"`
	OuterTag             uint32           `protobuf:"varint,5,opt,name=outer_tag,json=outerTag,proto3" json:"outer_tag,omitempty"`
	VlanRange            []*L2VpnEfpRange `protobuf:"bytes,6,rep,name=vlan_range,json=vlanRange,proto3" json:"vlan_range,omitempty"`
	RewriteTag           []uint32         `protobuf:"varint,7,rep,packed,name=rewrite_tag,json=rewriteTag,proto3" json:"rewrite_tag,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *L2VpnVlan) Reset()         { *m = L2VpnVlan{} }
func (m *L2VpnVlan) String() string { return proto.CompactTextString(m) }
func (*L2VpnVlan) ProtoMessage()    {}
func (*L2VpnVlan) Descriptor() ([]byte, []int) {
	return fileDescriptor_527d8d161c6f92ac, []int{12}
}

func (m *L2VpnVlan) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2VpnVlan.Unmarshal(m, b)
}
func (m *L2VpnVlan) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2VpnVlan.Marshal(b, m, deterministic)
}
func (m *L2VpnVlan) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2VpnVlan.Merge(m, src)
}
func (m *L2VpnVlan) XXX_Size() int {
	return xxx_messageInfo_L2VpnVlan.Size(m)
}
func (m *L2VpnVlan) XXX_DiscardUnknown() {
	xxx_messageInfo_L2VpnVlan.DiscardUnknown(m)
}

var xxx_messageInfo_L2VpnVlan proto.InternalMessageInfo

func (m *L2VpnVlan) GetXconnectTags() uint32 {
	if m != nil {
		return m.XconnectTags
	}
	return 0
}

func (m *L2VpnVlan) GetVlanRewriteTag() uint32 {
	if m != nil {
		return m.VlanRewriteTag
	}
	return 0
}

func (m *L2VpnVlan) GetSimpleEfp() uint32 {
	if m != nil {
		return m.SimpleEfp
	}
	return 0
}

func (m *L2VpnVlan) GetEncapsulationType() uint32 {
	if m != nil {
		return m.EncapsulationType
	}
	return 0
}

func (m *L2VpnVlan) GetOuterTag() uint32 {
	if m != nil {
		return m.OuterTag
	}
	return 0
}

func (m *L2VpnVlan) GetVlanRange() []*L2VpnEfpRange {
	if m != nil {
		return m.VlanRange
	}
	return nil
}

func (m *L2VpnVlan) GetRewriteTag() []uint32 {
	if m != nil {
		return m.RewriteTag
	}
	return nil
}

type L2VpnTdmOption struct {
	PayloadBytes         uint32   `protobuf:"varint,1,opt,name=payload_bytes,json=payloadBytes,proto3" json:"payload_bytes,omitempty"`
	BitRate              uint32   `protobuf:"varint,2,opt,name=bit_rate,json=bitRate,proto3" json:"bit_rate,omitempty"`
	Rtp                  string   `protobuf:"bytes,3,opt,name=rtp,proto3" json:"rtp,omitempty"`
	TimestampMode        string   `protobuf:"bytes,4,opt,name=timestamp_mode,json=timestampMode,proto3" json:"timestamp_mode,omitempty"`
	SignallingPackets    uint32   `protobuf:"varint,5,opt,name=signalling_packets,json=signallingPackets,proto3" json:"signalling_packets,omitempty"`
	Cas                  uint32   `protobuf:"varint,6,opt,name=cas,proto3" json:"cas,omitempty"`
	RtpHeaderPayloadType uint32   `protobuf:"varint,7,opt,name=rtp_header_payload_type,json=rtpHeaderPayloadType,proto3" json:"rtp_header_payload_type,omitempty"`
	TimestampClockFreq   uint32   `protobuf:"varint,8,opt,name=timestamp_clock_freq,json=timestampClockFreq,proto3" json:"timestamp_clock_freq,omitempty"`
	Ssrc                 uint32   `protobuf:"varint,9,opt,name=ssrc,proto3" json:"ssrc,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *L2VpnTdmOption) Reset()         { *m = L2VpnTdmOption{} }
func (m *L2VpnTdmOption) String() string { return proto.CompactTextString(m) }
func (*L2VpnTdmOption) ProtoMessage()    {}
func (*L2VpnTdmOption) Descriptor() ([]byte, []int) {
	return fileDescriptor_527d8d161c6f92ac, []int{13}
}

func (m *L2VpnTdmOption) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2VpnTdmOption.Unmarshal(m, b)
}
func (m *L2VpnTdmOption) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2VpnTdmOption.Marshal(b, m, deterministic)
}
func (m *L2VpnTdmOption) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2VpnTdmOption.Merge(m, src)
}
func (m *L2VpnTdmOption) XXX_Size() int {
	return xxx_messageInfo_L2VpnTdmOption.Size(m)
}
func (m *L2VpnTdmOption) XXX_DiscardUnknown() {
	xxx_messageInfo_L2VpnTdmOption.DiscardUnknown(m)
}

var xxx_messageInfo_L2VpnTdmOption proto.InternalMessageInfo

func (m *L2VpnTdmOption) GetPayloadBytes() uint32 {
	if m != nil {
		return m.PayloadBytes
	}
	return 0
}

func (m *L2VpnTdmOption) GetBitRate() uint32 {
	if m != nil {
		return m.BitRate
	}
	return 0
}

func (m *L2VpnTdmOption) GetRtp() string {
	if m != nil {
		return m.Rtp
	}
	return ""
}

func (m *L2VpnTdmOption) GetTimestampMode() string {
	if m != nil {
		return m.TimestampMode
	}
	return ""
}

func (m *L2VpnTdmOption) GetSignallingPackets() uint32 {
	if m != nil {
		return m.SignallingPackets
	}
	return 0
}

func (m *L2VpnTdmOption) GetCas() uint32 {
	if m != nil {
		return m.Cas
	}
	return 0
}

func (m *L2VpnTdmOption) GetRtpHeaderPayloadType() uint32 {
	if m != nil {
		return m.RtpHeaderPayloadType
	}
	return 0
}

func (m *L2VpnTdmOption) GetTimestampClockFreq() uint32 {
	if m != nil {
		return m.TimestampClockFreq
	}
	return 0
}

func (m *L2VpnTdmOption) GetSsrc() uint32 {
	if m != nil {
		return m.Ssrc
	}
	return 0
}

type L2VpnTdm struct {
	TimeslotGroup        string          `protobuf:"bytes,1,opt,name=timeslot_group,json=timeslotGroup,proto3" json:"timeslot_group,omitempty"`
	TimeslotRate         uint32          `protobuf:"varint,2,opt,name=timeslot_rate,json=timeslotRate,proto3" json:"timeslot_rate,omitempty"`
	TdmMode              string          `protobuf:"bytes,3,opt,name=tdm_mode,json=tdmMode,proto3" json:"tdm_mode,omitempty"`
	TdmOptions           *L2VpnTdmOption `protobuf:"bytes,4,opt,name=tdm_options,json=tdmOptions,proto3" json:"tdm_options,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *L2VpnTdm) Reset()         { *m = L2VpnTdm{} }
func (m *L2VpnTdm) String() string { return proto.CompactTextString(m) }
func (*L2VpnTdm) ProtoMessage()    {}
func (*L2VpnTdm) Descriptor() ([]byte, []int) {
	return fileDescriptor_527d8d161c6f92ac, []int{14}
}

func (m *L2VpnTdm) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2VpnTdm.Unmarshal(m, b)
}
func (m *L2VpnTdm) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2VpnTdm.Marshal(b, m, deterministic)
}
func (m *L2VpnTdm) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2VpnTdm.Merge(m, src)
}
func (m *L2VpnTdm) XXX_Size() int {
	return xxx_messageInfo_L2VpnTdm.Size(m)
}
func (m *L2VpnTdm) XXX_DiscardUnknown() {
	xxx_messageInfo_L2VpnTdm.DiscardUnknown(m)
}

var xxx_messageInfo_L2VpnTdm proto.InternalMessageInfo

func (m *L2VpnTdm) GetTimeslotGroup() string {
	if m != nil {
		return m.TimeslotGroup
	}
	return ""
}

func (m *L2VpnTdm) GetTimeslotRate() uint32 {
	if m != nil {
		return m.TimeslotRate
	}
	return 0
}

func (m *L2VpnTdm) GetTdmMode() string {
	if m != nil {
		return m.TdmMode
	}
	return ""
}

func (m *L2VpnTdm) GetTdmOptions() *L2VpnTdmOption {
	if m != nil {
		return m.TdmOptions
	}
	return nil
}

type L2VpnAtm struct {
	MaximumNumberCellsPacked   uint32   `protobuf:"varint,1,opt,name=maximum_number_cells_packed,json=maximumNumberCellsPacked,proto3" json:"maximum_number_cells_packed,omitempty"`
	MaximumNumberCellsUnPacked uint32   `protobuf:"varint,2,opt,name=maximum_number_cells_un_packed,json=maximumNumberCellsUnPacked,proto3" json:"maximum_number_cells_un_packed,omitempty"`
	AtmMode                    string   `protobuf:"bytes,3,opt,name=atm_mode,json=atmMode,proto3" json:"atm_mode,omitempty"`
	Vpi                        uint32   `protobuf:"varint,4,opt,name=vpi,proto3" json:"vpi,omitempty"`
	Vci                        uint32   `protobuf:"varint,5,opt,name=vci,proto3" json:"vci,omitempty"`
	XXX_NoUnkeyedLiteral       struct{} `json:"-"`
	XXX_unrecognized           []byte   `json:"-"`
	XXX_sizecache              int32    `json:"-"`
}

func (m *L2VpnAtm) Reset()         { *m = L2VpnAtm{} }
func (m *L2VpnAtm) String() string { return proto.CompactTextString(m) }
func (*L2VpnAtm) ProtoMessage()    {}
func (*L2VpnAtm) Descriptor() ([]byte, []int) {
	return fileDescriptor_527d8d161c6f92ac, []int{15}
}

func (m *L2VpnAtm) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2VpnAtm.Unmarshal(m, b)
}
func (m *L2VpnAtm) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2VpnAtm.Marshal(b, m, deterministic)
}
func (m *L2VpnAtm) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2VpnAtm.Merge(m, src)
}
func (m *L2VpnAtm) XXX_Size() int {
	return xxx_messageInfo_L2VpnAtm.Size(m)
}
func (m *L2VpnAtm) XXX_DiscardUnknown() {
	xxx_messageInfo_L2VpnAtm.DiscardUnknown(m)
}

var xxx_messageInfo_L2VpnAtm proto.InternalMessageInfo

func (m *L2VpnAtm) GetMaximumNumberCellsPacked() uint32 {
	if m != nil {
		return m.MaximumNumberCellsPacked
	}
	return 0
}

func (m *L2VpnAtm) GetMaximumNumberCellsUnPacked() uint32 {
	if m != nil {
		return m.MaximumNumberCellsUnPacked
	}
	return 0
}

func (m *L2VpnAtm) GetAtmMode() string {
	if m != nil {
		return m.AtmMode
	}
	return ""
}

func (m *L2VpnAtm) GetVpi() uint32 {
	if m != nil {
		return m.Vpi
	}
	return 0
}

func (m *L2VpnAtm) GetVci() uint32 {
	if m != nil {
		return m.Vci
	}
	return 0
}

type L2VpnFr struct {
	FrMode               string   `protobuf:"bytes,1,opt,name=fr_mode,json=frMode,proto3" json:"fr_mode,omitempty"`
	Dlci                 uint32   `protobuf:"varint,2,opt,name=dlci,proto3" json:"dlci,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *L2VpnFr) Reset()         { *m = L2VpnFr{} }
func (m *L2VpnFr) String() string { return proto.CompactTextString(m) }
func (*L2VpnFr) ProtoMessage()    {}
func (*L2VpnFr) Descriptor() ([]byte, []int) {
	return fileDescriptor_527d8d161c6f92ac, []int{16}
}

func (m *L2VpnFr) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2VpnFr.Unmarshal(m, b)
}
func (m *L2VpnFr) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2VpnFr.Marshal(b, m, deterministic)
}
func (m *L2VpnFr) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2VpnFr.Merge(m, src)
}
func (m *L2VpnFr) XXX_Size() int {
	return xxx_messageInfo_L2VpnFr.Size(m)
}
func (m *L2VpnFr) XXX_DiscardUnknown() {
	xxx_messageInfo_L2VpnFr.DiscardUnknown(m)
}

var xxx_messageInfo_L2VpnFr proto.InternalMessageInfo

func (m *L2VpnFr) GetFrMode() string {
	if m != nil {
		return m.FrMode
	}
	return ""
}

func (m *L2VpnFr) GetDlci() uint32 {
	if m != nil {
		return m.Dlci
	}
	return 0
}

type InterfacesItem struct {
	Value                string   `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InterfacesItem) Reset()         { *m = InterfacesItem{} }
func (m *InterfacesItem) String() string { return proto.CompactTextString(m) }
func (*InterfacesItem) ProtoMessage()    {}
func (*InterfacesItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_527d8d161c6f92ac, []int{17}
}

func (m *InterfacesItem) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InterfacesItem.Unmarshal(m, b)
}
func (m *InterfacesItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InterfacesItem.Marshal(b, m, deterministic)
}
func (m *InterfacesItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InterfacesItem.Merge(m, src)
}
func (m *InterfacesItem) XXX_Size() int {
	return xxx_messageInfo_InterfacesItem.Size(m)
}
func (m *InterfacesItem) XXX_DiscardUnknown() {
	xxx_messageInfo_InterfacesItem.DiscardUnknown(m)
}

var xxx_messageInfo_InterfacesItem proto.InternalMessageInfo

func (m *InterfacesItem) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type ItemIflistIfl struct {
	InterfaceListName    string            `protobuf:"bytes,1,opt,name=interface_list_name,json=interfaceListName,proto3" json:"interface_list_name,omitempty"`
	InterfaceListId      uint32            `protobuf:"varint,2,opt,name=interface_list_id,json=interfaceListId,proto3" json:"interface_list_id,omitempty"`
	Interface            []*InterfacesItem `protobuf:"bytes,3,rep,name=interface,proto3" json:"interface,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ItemIflistIfl) Reset()         { *m = ItemIflistIfl{} }
func (m *ItemIflistIfl) String() string { return proto.CompactTextString(m) }
func (*ItemIflistIfl) ProtoMessage()    {}
func (*ItemIflistIfl) Descriptor() ([]byte, []int) {
	return fileDescriptor_527d8d161c6f92ac, []int{18}
}

func (m *ItemIflistIfl) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ItemIflistIfl.Unmarshal(m, b)
}
func (m *ItemIflistIfl) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ItemIflistIfl.Marshal(b, m, deterministic)
}
func (m *ItemIflistIfl) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ItemIflistIfl.Merge(m, src)
}
func (m *ItemIflistIfl) XXX_Size() int {
	return xxx_messageInfo_ItemIflistIfl.Size(m)
}
func (m *ItemIflistIfl) XXX_DiscardUnknown() {
	xxx_messageInfo_ItemIflistIfl.DiscardUnknown(m)
}

var xxx_messageInfo_ItemIflistIfl proto.InternalMessageInfo

func (m *ItemIflistIfl) GetInterfaceListName() string {
	if m != nil {
		return m.InterfaceListName
	}
	return ""
}

func (m *ItemIflistIfl) GetInterfaceListId() uint32 {
	if m != nil {
		return m.InterfaceListId
	}
	return 0
}

func (m *ItemIflistIfl) GetInterface() []*InterfacesItem {
	if m != nil {
		return m.Interface
	}
	return nil
}

type L2VpnPwhe struct {
	IsValid              bool           `protobuf:"varint,1,opt,name=is_valid,json=isValid,proto3" json:"is_valid,omitempty"`
	InterfaceList        *ItemIflistIfl `protobuf:"bytes,2,opt,name=interface_list,json=interfaceList,proto3" json:"interface_list,omitempty"`
	InternalLabel        uint32         `protobuf:"varint,3,opt,name=internal_label,json=internalLabel,proto3" json:"internal_label,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *L2VpnPwhe) Reset()         { *m = L2VpnPwhe{} }
func (m *L2VpnPwhe) String() string { return proto.CompactTextString(m) }
func (*L2VpnPwhe) ProtoMessage()    {}
func (*L2VpnPwhe) Descriptor() ([]byte, []int) {
	return fileDescriptor_527d8d161c6f92ac, []int{19}
}

func (m *L2VpnPwhe) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2VpnPwhe.Unmarshal(m, b)
}
func (m *L2VpnPwhe) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2VpnPwhe.Marshal(b, m, deterministic)
}
func (m *L2VpnPwhe) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2VpnPwhe.Merge(m, src)
}
func (m *L2VpnPwhe) XXX_Size() int {
	return xxx_messageInfo_L2VpnPwhe.Size(m)
}
func (m *L2VpnPwhe) XXX_DiscardUnknown() {
	xxx_messageInfo_L2VpnPwhe.DiscardUnknown(m)
}

var xxx_messageInfo_L2VpnPwhe proto.InternalMessageInfo

func (m *L2VpnPwhe) GetIsValid() bool {
	if m != nil {
		return m.IsValid
	}
	return false
}

func (m *L2VpnPwhe) GetInterfaceList() *ItemIflistIfl {
	if m != nil {
		return m.InterfaceList
	}
	return nil
}

func (m *L2VpnPwhe) GetInternalLabel() uint32 {
	if m != nil {
		return m.InternalLabel
	}
	return 0
}

type L2VpnInterfaceParams struct {
	Type                 string         `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Ethernet             *L2VpnEthernet `protobuf:"bytes,2,opt,name=ethernet,proto3" json:"ethernet,omitempty"`
	Vlan                 *L2VpnVlan     `protobuf:"bytes,3,opt,name=vlan,proto3" json:"vlan,omitempty"`
	Tdm                  *L2VpnTdm      `protobuf:"bytes,4,opt,name=tdm,proto3" json:"tdm,omitempty"`
	Atm                  *L2VpnAtm      `protobuf:"bytes,5,opt,name=atm,proto3" json:"atm,omitempty"`
	Fr                   *L2VpnFr       `protobuf:"bytes,6,opt,name=fr,proto3" json:"fr,omitempty"`
	PseudowireEther      *L2VpnPwhe     `protobuf:"bytes,7,opt,name=pseudowire_ether,json=pseudowireEther,proto3" json:"pseudowire_ether,omitempty"`
	PseudowireIw         *L2VpnPwhe     `protobuf:"bytes,8,opt,name=pseudowire_iw,json=pseudowireIw,proto3" json:"pseudowire_iw,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *L2VpnInterfaceParams) Reset()         { *m = L2VpnInterfaceParams{} }
func (m *L2VpnInterfaceParams) String() string { return proto.CompactTextString(m) }
func (*L2VpnInterfaceParams) ProtoMessage()    {}
func (*L2VpnInterfaceParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_527d8d161c6f92ac, []int{20}
}

func (m *L2VpnInterfaceParams) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2VpnInterfaceParams.Unmarshal(m, b)
}
func (m *L2VpnInterfaceParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2VpnInterfaceParams.Marshal(b, m, deterministic)
}
func (m *L2VpnInterfaceParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2VpnInterfaceParams.Merge(m, src)
}
func (m *L2VpnInterfaceParams) XXX_Size() int {
	return xxx_messageInfo_L2VpnInterfaceParams.Size(m)
}
func (m *L2VpnInterfaceParams) XXX_DiscardUnknown() {
	xxx_messageInfo_L2VpnInterfaceParams.DiscardUnknown(m)
}

var xxx_messageInfo_L2VpnInterfaceParams proto.InternalMessageInfo

func (m *L2VpnInterfaceParams) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *L2VpnInterfaceParams) GetEthernet() *L2VpnEthernet {
	if m != nil {
		return m.Ethernet
	}
	return nil
}

func (m *L2VpnInterfaceParams) GetVlan() *L2VpnVlan {
	if m != nil {
		return m.Vlan
	}
	return nil
}

func (m *L2VpnInterfaceParams) GetTdm() *L2VpnTdm {
	if m != nil {
		return m.Tdm
	}
	return nil
}

func (m *L2VpnInterfaceParams) GetAtm() *L2VpnAtm {
	if m != nil {
		return m.Atm
	}
	return nil
}

func (m *L2VpnInterfaceParams) GetFr() *L2VpnFr {
	if m != nil {
		return m.Fr
	}
	return nil
}

func (m *L2VpnInterfaceParams) GetPseudowireEther() *L2VpnPwhe {
	if m != nil {
		return m.PseudowireEther
	}
	return nil
}

func (m *L2VpnInterfaceParams) GetPseudowireIw() *L2VpnPwhe {
	if m != nil {
		return m.PseudowireIw
	}
	return nil
}

type L2VpnInterface struct {
	Name                 string                `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Mtu                  uint32                `protobuf:"varint,2,opt,name=mtu,proto3" json:"mtu,omitempty"`
	PayloadBytes         uint32                `protobuf:"varint,3,opt,name=payload_bytes,json=payloadBytes,proto3" json:"payload_bytes,omitempty"`
	Parameters           *L2VpnInterfaceParams `protobuf:"bytes,4,opt,name=parameters,proto3" json:"parameters,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *L2VpnInterface) Reset()         { *m = L2VpnInterface{} }
func (m *L2VpnInterface) String() string { return proto.CompactTextString(m) }
func (*L2VpnInterface) ProtoMessage()    {}
func (*L2VpnInterface) Descriptor() ([]byte, []int) {
	return fileDescriptor_527d8d161c6f92ac, []int{21}
}

func (m *L2VpnInterface) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2VpnInterface.Unmarshal(m, b)
}
func (m *L2VpnInterface) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2VpnInterface.Marshal(b, m, deterministic)
}
func (m *L2VpnInterface) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2VpnInterface.Merge(m, src)
}
func (m *L2VpnInterface) XXX_Size() int {
	return xxx_messageInfo_L2VpnInterface.Size(m)
}
func (m *L2VpnInterface) XXX_DiscardUnknown() {
	xxx_messageInfo_L2VpnInterface.DiscardUnknown(m)
}

var xxx_messageInfo_L2VpnInterface proto.InternalMessageInfo

func (m *L2VpnInterface) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *L2VpnInterface) GetMtu() uint32 {
	if m != nil {
		return m.Mtu
	}
	return 0
}

func (m *L2VpnInterface) GetPayloadBytes() uint32 {
	if m != nil {
		return m.PayloadBytes
	}
	return 0
}

func (m *L2VpnInterface) GetParameters() *L2VpnInterfaceParams {
	if m != nil {
		return m.Parameters
	}
	return nil
}

type L2VpnPwMplsPrefpath struct {
	Option                  string   `protobuf:"bytes,1,opt,name=option,proto3" json:"option,omitempty"`
	NextHopIp               uint32   `protobuf:"varint,2,opt,name=next_hop_ip,json=nextHopIp,proto3" json:"next_hop_ip,omitempty"`
	TeTunnelInterfaceNumber uint32   `protobuf:"varint,3,opt,name=te_tunnel_interface_number,json=teTunnelInterfaceNumber,proto3" json:"te_tunnel_interface_number,omitempty"`
	IpTunnelInterfaceNumber uint32   `protobuf:"varint,4,opt,name=ip_tunnel_interface_number,json=ipTunnelInterfaceNumber,proto3" json:"ip_tunnel_interface_number,omitempty"`
	TpTunnelInterfaceNumber uint32   `protobuf:"varint,5,opt,name=tp_tunnel_interface_number,json=tpTunnelInterfaceNumber,proto3" json:"tp_tunnel_interface_number,omitempty"`
	XXX_NoUnkeyedLiteral    struct{} `json:"-"`
	XXX_unrecognized        []byte   `json:"-"`
	XXX_sizecache           int32    `json:"-"`
}

func (m *L2VpnPwMplsPrefpath) Reset()         { *m = L2VpnPwMplsPrefpath{} }
func (m *L2VpnPwMplsPrefpath) String() string { return proto.CompactTextString(m) }
func (*L2VpnPwMplsPrefpath) ProtoMessage()    {}
func (*L2VpnPwMplsPrefpath) Descriptor() ([]byte, []int) {
	return fileDescriptor_527d8d161c6f92ac, []int{22}
}

func (m *L2VpnPwMplsPrefpath) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2VpnPwMplsPrefpath.Unmarshal(m, b)
}
func (m *L2VpnPwMplsPrefpath) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2VpnPwMplsPrefpath.Marshal(b, m, deterministic)
}
func (m *L2VpnPwMplsPrefpath) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2VpnPwMplsPrefpath.Merge(m, src)
}
func (m *L2VpnPwMplsPrefpath) XXX_Size() int {
	return xxx_messageInfo_L2VpnPwMplsPrefpath.Size(m)
}
func (m *L2VpnPwMplsPrefpath) XXX_DiscardUnknown() {
	xxx_messageInfo_L2VpnPwMplsPrefpath.DiscardUnknown(m)
}

var xxx_messageInfo_L2VpnPwMplsPrefpath proto.InternalMessageInfo

func (m *L2VpnPwMplsPrefpath) GetOption() string {
	if m != nil {
		return m.Option
	}
	return ""
}

func (m *L2VpnPwMplsPrefpath) GetNextHopIp() uint32 {
	if m != nil {
		return m.NextHopIp
	}
	return 0
}

func (m *L2VpnPwMplsPrefpath) GetTeTunnelInterfaceNumber() uint32 {
	if m != nil {
		return m.TeTunnelInterfaceNumber
	}
	return 0
}

func (m *L2VpnPwMplsPrefpath) GetIpTunnelInterfaceNumber() uint32 {
	if m != nil {
		return m.IpTunnelInterfaceNumber
	}
	return 0
}

func (m *L2VpnPwMplsPrefpath) GetTpTunnelInterfaceNumber() uint32 {
	if m != nil {
		return m.TpTunnelInterfaceNumber
	}
	return 0
}

type L2VpnMsPwTlvInfo struct {
	PwId                 uint32   `protobuf:"varint,1,opt,name=pw_id,json=pwId,proto3" json:"pw_id,omitempty"`
	LocalAddress         string   `protobuf:"bytes,2,opt,name=local_address,json=localAddress,proto3" json:"local_address,omitempty"`
	RemoteAddress        string   `protobuf:"bytes,3,opt,name=remote_address,json=remoteAddress,proto3" json:"remote_address,omitempty"`
	Description          string   `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *L2VpnMsPwTlvInfo) Reset()         { *m = L2VpnMsPwTlvInfo{} }
func (m *L2VpnMsPwTlvInfo) String() string { return proto.CompactTextString(m) }
func (*L2VpnMsPwTlvInfo) ProtoMessage()    {}
func (*L2VpnMsPwTlvInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_527d8d161c6f92ac, []int{23}
}

func (m *L2VpnMsPwTlvInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2VpnMsPwTlvInfo.Unmarshal(m, b)
}
func (m *L2VpnMsPwTlvInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2VpnMsPwTlvInfo.Marshal(b, m, deterministic)
}
func (m *L2VpnMsPwTlvInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2VpnMsPwTlvInfo.Merge(m, src)
}
func (m *L2VpnMsPwTlvInfo) XXX_Size() int {
	return xxx_messageInfo_L2VpnMsPwTlvInfo.Size(m)
}
func (m *L2VpnMsPwTlvInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_L2VpnMsPwTlvInfo.DiscardUnknown(m)
}

var xxx_messageInfo_L2VpnMsPwTlvInfo proto.InternalMessageInfo

func (m *L2VpnMsPwTlvInfo) GetPwId() uint32 {
	if m != nil {
		return m.PwId
	}
	return 0
}

func (m *L2VpnMsPwTlvInfo) GetLocalAddress() string {
	if m != nil {
		return m.LocalAddress
	}
	return ""
}

func (m *L2VpnMsPwTlvInfo) GetRemoteAddress() string {
	if m != nil {
		return m.RemoteAddress
	}
	return ""
}

func (m *L2VpnMsPwTlvInfo) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type L2VpnMsPw struct {
	PwStatus             uint32              `protobuf:"varint,1,opt,name=pw_status,json=pwStatus,proto3" json:"pw_status,omitempty"`
	Tlv                  []*L2VpnMsPwTlvInfo `protobuf:"bytes,2,rep,name=tlv,proto3" json:"tlv,omitempty"`
	StatusTlv            *L2VpnMsPwTlvInfo   `protobuf:"bytes,3,opt,name=status_tlv,json=statusTlv,proto3" json:"status_tlv,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *L2VpnMsPw) Reset()         { *m = L2VpnMsPw{} }
func (m *L2VpnMsPw) String() string { return proto.CompactTextString(m) }
func (*L2VpnMsPw) ProtoMessage()    {}
func (*L2VpnMsPw) Descriptor() ([]byte, []int) {
	return fileDescriptor_527d8d161c6f92ac, []int{24}
}

func (m *L2VpnMsPw) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2VpnMsPw.Unmarshal(m, b)
}
func (m *L2VpnMsPw) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2VpnMsPw.Marshal(b, m, deterministic)
}
func (m *L2VpnMsPw) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2VpnMsPw.Merge(m, src)
}
func (m *L2VpnMsPw) XXX_Size() int {
	return xxx_messageInfo_L2VpnMsPw.Size(m)
}
func (m *L2VpnMsPw) XXX_DiscardUnknown() {
	xxx_messageInfo_L2VpnMsPw.DiscardUnknown(m)
}

var xxx_messageInfo_L2VpnMsPw proto.InternalMessageInfo

func (m *L2VpnMsPw) GetPwStatus() uint32 {
	if m != nil {
		return m.PwStatus
	}
	return 0
}

func (m *L2VpnMsPw) GetTlv() []*L2VpnMsPwTlvInfo {
	if m != nil {
		return m.Tlv
	}
	return nil
}

func (m *L2VpnMsPw) GetStatusTlv() *L2VpnMsPwTlvInfo {
	if m != nil {
		return m.StatusTlv
	}
	return nil
}

type L2FibStatsBagCounters struct {
	PacketCounts         uint64   `protobuf:"varint,1,opt,name=packet_counts,json=packetCounts,proto3" json:"packet_counts,omitempty"`
	ByteCounts           uint64   `protobuf:"varint,2,opt,name=byte_counts,json=byteCounts,proto3" json:"byte_counts,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *L2FibStatsBagCounters) Reset()         { *m = L2FibStatsBagCounters{} }
func (m *L2FibStatsBagCounters) String() string { return proto.CompactTextString(m) }
func (*L2FibStatsBagCounters) ProtoMessage()    {}
func (*L2FibStatsBagCounters) Descriptor() ([]byte, []int) {
	return fileDescriptor_527d8d161c6f92ac, []int{25}
}

func (m *L2FibStatsBagCounters) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2FibStatsBagCounters.Unmarshal(m, b)
}
func (m *L2FibStatsBagCounters) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2FibStatsBagCounters.Marshal(b, m, deterministic)
}
func (m *L2FibStatsBagCounters) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2FibStatsBagCounters.Merge(m, src)
}
func (m *L2FibStatsBagCounters) XXX_Size() int {
	return xxx_messageInfo_L2FibStatsBagCounters.Size(m)
}
func (m *L2FibStatsBagCounters) XXX_DiscardUnknown() {
	xxx_messageInfo_L2FibStatsBagCounters.DiscardUnknown(m)
}

var xxx_messageInfo_L2FibStatsBagCounters proto.InternalMessageInfo

func (m *L2FibStatsBagCounters) GetPacketCounts() uint64 {
	if m != nil {
		return m.PacketCounts
	}
	return 0
}

func (m *L2FibStatsBagCounters) GetByteCounts() uint64 {
	if m != nil {
		return m.ByteCounts
	}
	return 0
}

type L2FibStatsBagImp struct {
	ImpositionStat       *L2FibStatsBagCounters `protobuf:"bytes,1,opt,name=imposition_stat,json=impositionStat,proto3" json:"imposition_stat,omitempty"`
	ImpositionMtuDrop    *L2FibStatsBagCounters `protobuf:"bytes,2,opt,name=imposition_mtu_drop,json=impositionMtuDrop,proto3" json:"imposition_mtu_drop,omitempty"`
	ImpostionTailDrop    *L2FibStatsBagCounters `protobuf:"bytes,3,opt,name=impostion_tail_drop,json=impostionTailDrop,proto3" json:"impostion_tail_drop,omitempty"`
	L2FsbiDrop           *L2FibStatsBagCounters `protobuf:"bytes,4,opt,name=l2fsbi_drop,json=l2fsbiDrop,proto3" json:"l2fsbi_drop,omitempty"`
	Multicast            *L2FibStatsBagCounters `protobuf:"bytes,5,opt,name=multicast,proto3" json:"multicast,omitempty"`
	Broadcast            *L2FibStatsBagCounters `protobuf:"bytes,6,opt,name=broadcast,proto3" json:"broadcast,omitempty"`
	KnownUnicast         *L2FibStatsBagCounters `protobuf:"bytes,7,opt,name=known_unicast,json=knownUnicast,proto3" json:"known_unicast,omitempty"`
	UnknownUnicast       *L2FibStatsBagCounters `protobuf:"bytes,8,opt,name=unknown_unicast,json=unknownUnicast,proto3" json:"unknown_unicast,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *L2FibStatsBagImp) Reset()         { *m = L2FibStatsBagImp{} }
func (m *L2FibStatsBagImp) String() string { return proto.CompactTextString(m) }
func (*L2FibStatsBagImp) ProtoMessage()    {}
func (*L2FibStatsBagImp) Descriptor() ([]byte, []int) {
	return fileDescriptor_527d8d161c6f92ac, []int{26}
}

func (m *L2FibStatsBagImp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2FibStatsBagImp.Unmarshal(m, b)
}
func (m *L2FibStatsBagImp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2FibStatsBagImp.Marshal(b, m, deterministic)
}
func (m *L2FibStatsBagImp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2FibStatsBagImp.Merge(m, src)
}
func (m *L2FibStatsBagImp) XXX_Size() int {
	return xxx_messageInfo_L2FibStatsBagImp.Size(m)
}
func (m *L2FibStatsBagImp) XXX_DiscardUnknown() {
	xxx_messageInfo_L2FibStatsBagImp.DiscardUnknown(m)
}

var xxx_messageInfo_L2FibStatsBagImp proto.InternalMessageInfo

func (m *L2FibStatsBagImp) GetImpositionStat() *L2FibStatsBagCounters {
	if m != nil {
		return m.ImpositionStat
	}
	return nil
}

func (m *L2FibStatsBagImp) GetImpositionMtuDrop() *L2FibStatsBagCounters {
	if m != nil {
		return m.ImpositionMtuDrop
	}
	return nil
}

func (m *L2FibStatsBagImp) GetImpostionTailDrop() *L2FibStatsBagCounters {
	if m != nil {
		return m.ImpostionTailDrop
	}
	return nil
}

func (m *L2FibStatsBagImp) GetL2FsbiDrop() *L2FibStatsBagCounters {
	if m != nil {
		return m.L2FsbiDrop
	}
	return nil
}

func (m *L2FibStatsBagImp) GetMulticast() *L2FibStatsBagCounters {
	if m != nil {
		return m.Multicast
	}
	return nil
}

func (m *L2FibStatsBagImp) GetBroadcast() *L2FibStatsBagCounters {
	if m != nil {
		return m.Broadcast
	}
	return nil
}

func (m *L2FibStatsBagImp) GetKnownUnicast() *L2FibStatsBagCounters {
	if m != nil {
		return m.KnownUnicast
	}
	return nil
}

func (m *L2FibStatsBagImp) GetUnknownUnicast() *L2FibStatsBagCounters {
	if m != nil {
		return m.UnknownUnicast
	}
	return nil
}

type L2FibStatsBagDisp struct {
	DispositionStat      *L2FibStatsBagCounters `protobuf:"bytes,1,opt,name=disposition_stat,json=dispositionStat,proto3" json:"disposition_stat,omitempty"`
	DispositionMtuDrop   *L2FibStatsBagCounters `protobuf:"bytes,2,opt,name=disposition_mtu_drop,json=dispositionMtuDrop,proto3" json:"disposition_mtu_drop,omitempty"`
	DispositionTailDrop  *L2FibStatsBagCounters `protobuf:"bytes,3,opt,name=disposition_tail_drop,json=dispositionTailDrop,proto3" json:"disposition_tail_drop,omitempty"`
	MulticastDrop        *L2FibStatsBagCounters `protobuf:"bytes,4,opt,name=multicast_drop,json=multicastDrop,proto3" json:"multicast_drop,omitempty"`
	UnicastDrop          *L2FibStatsBagCounters `protobuf:"bytes,5,opt,name=unicast_drop,json=unicastDrop,proto3" json:"unicast_drop,omitempty"`
	BroadcastDrop        *L2FibStatsBagCounters `protobuf:"bytes,6,opt,name=broadcast_drop,json=broadcastDrop,proto3" json:"broadcast_drop,omitempty"`
	ReceivedDrops        *L2FibStatsBagCounters `protobuf:"bytes,7,opt,name=received_drops,json=receivedDrops,proto3" json:"received_drops,omitempty"`
	DaiDrop              *L2FibStatsBagCounters `protobuf:"bytes,8,opt,name=dai_drop,json=daiDrop,proto3" json:"dai_drop,omitempty"`
	IpsgDrop             *L2FibStatsBagCounters `protobuf:"bytes,9,opt,name=ipsg_drop,json=ipsgDrop,proto3" json:"ipsg_drop,omitempty"`
	DispositionOoODrops  *L2FibStatsBagCounters `protobuf:"bytes,10,opt,name=disposition_oo_o_drops,json=dispositionOoODrops,proto3" json:"disposition_oo_o_drops,omitempty"`
	DispositionP2MpStats *L2FibStatsBagCounters `protobuf:"bytes,11,opt,name=disposition_p2mp_stats,json=dispositionP2mpStats,proto3" json:"disposition_p2mp_stats,omitempty"`
	KnownUnicast         *L2FibStatsBagCounters `protobuf:"bytes,12,opt,name=known_unicast,json=knownUnicast,proto3" json:"known_unicast,omitempty"`
	MacMove              *L2FibStatsBagCounters `protobuf:"bytes,13,opt,name=mac_move,json=macMove,proto3" json:"mac_move,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *L2FibStatsBagDisp) Reset()         { *m = L2FibStatsBagDisp{} }
func (m *L2FibStatsBagDisp) String() string { return proto.CompactTextString(m) }
func (*L2FibStatsBagDisp) ProtoMessage()    {}
func (*L2FibStatsBagDisp) Descriptor() ([]byte, []int) {
	return fileDescriptor_527d8d161c6f92ac, []int{27}
}

func (m *L2FibStatsBagDisp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2FibStatsBagDisp.Unmarshal(m, b)
}
func (m *L2FibStatsBagDisp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2FibStatsBagDisp.Marshal(b, m, deterministic)
}
func (m *L2FibStatsBagDisp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2FibStatsBagDisp.Merge(m, src)
}
func (m *L2FibStatsBagDisp) XXX_Size() int {
	return xxx_messageInfo_L2FibStatsBagDisp.Size(m)
}
func (m *L2FibStatsBagDisp) XXX_DiscardUnknown() {
	xxx_messageInfo_L2FibStatsBagDisp.DiscardUnknown(m)
}

var xxx_messageInfo_L2FibStatsBagDisp proto.InternalMessageInfo

func (m *L2FibStatsBagDisp) GetDispositionStat() *L2FibStatsBagCounters {
	if m != nil {
		return m.DispositionStat
	}
	return nil
}

func (m *L2FibStatsBagDisp) GetDispositionMtuDrop() *L2FibStatsBagCounters {
	if m != nil {
		return m.DispositionMtuDrop
	}
	return nil
}

func (m *L2FibStatsBagDisp) GetDispositionTailDrop() *L2FibStatsBagCounters {
	if m != nil {
		return m.DispositionTailDrop
	}
	return nil
}

func (m *L2FibStatsBagDisp) GetMulticastDrop() *L2FibStatsBagCounters {
	if m != nil {
		return m.MulticastDrop
	}
	return nil
}

func (m *L2FibStatsBagDisp) GetUnicastDrop() *L2FibStatsBagCounters {
	if m != nil {
		return m.UnicastDrop
	}
	return nil
}

func (m *L2FibStatsBagDisp) GetBroadcastDrop() *L2FibStatsBagCounters {
	if m != nil {
		return m.BroadcastDrop
	}
	return nil
}

func (m *L2FibStatsBagDisp) GetReceivedDrops() *L2FibStatsBagCounters {
	if m != nil {
		return m.ReceivedDrops
	}
	return nil
}

func (m *L2FibStatsBagDisp) GetDaiDrop() *L2FibStatsBagCounters {
	if m != nil {
		return m.DaiDrop
	}
	return nil
}

func (m *L2FibStatsBagDisp) GetIpsgDrop() *L2FibStatsBagCounters {
	if m != nil {
		return m.IpsgDrop
	}
	return nil
}

func (m *L2FibStatsBagDisp) GetDispositionOoODrops() *L2FibStatsBagCounters {
	if m != nil {
		return m.DispositionOoODrops
	}
	return nil
}

func (m *L2FibStatsBagDisp) GetDispositionP2MpStats() *L2FibStatsBagCounters {
	if m != nil {
		return m.DispositionP2MpStats
	}
	return nil
}

func (m *L2FibStatsBagDisp) GetKnownUnicast() *L2FibStatsBagCounters {
	if m != nil {
		return m.KnownUnicast
	}
	return nil
}

func (m *L2FibStatsBagDisp) GetMacMove() *L2FibStatsBagCounters {
	if m != nil {
		return m.MacMove
	}
	return nil
}

type L2FibStatsBagSeqNum struct {
	SequenceNumberSent            uint32   `protobuf:"varint,1,opt,name=sequence_number_sent,json=sequenceNumberSent,proto3" json:"sequence_number_sent,omitempty"`
	SequenceNumberExpected        uint32   `protobuf:"varint,2,opt,name=sequence_number_expected,json=sequenceNumberExpected,proto3" json:"sequence_number_expected,omitempty"`
	BypassedInboundSequencePacket uint64   `protobuf:"varint,3,opt,name=bypassed_inbound_sequence_packet,json=bypassedInboundSequencePacket,proto3" json:"bypassed_inbound_sequence_packet,omitempty"`
	BypassedOutSequencePacket     uint64   `protobuf:"varint,4,opt,name=bypassed_out_sequence_packet,json=bypassedOutSequencePacket,proto3" json:"bypassed_out_sequence_packet,omitempty"`
	XXX_NoUnkeyedLiteral          struct{} `json:"-"`
	XXX_unrecognized              []byte   `json:"-"`
	XXX_sizecache                 int32    `json:"-"`
}

func (m *L2FibStatsBagSeqNum) Reset()         { *m = L2FibStatsBagSeqNum{} }
func (m *L2FibStatsBagSeqNum) String() string { return proto.CompactTextString(m) }
func (*L2FibStatsBagSeqNum) ProtoMessage()    {}
func (*L2FibStatsBagSeqNum) Descriptor() ([]byte, []int) {
	return fileDescriptor_527d8d161c6f92ac, []int{28}
}

func (m *L2FibStatsBagSeqNum) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2FibStatsBagSeqNum.Unmarshal(m, b)
}
func (m *L2FibStatsBagSeqNum) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2FibStatsBagSeqNum.Marshal(b, m, deterministic)
}
func (m *L2FibStatsBagSeqNum) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2FibStatsBagSeqNum.Merge(m, src)
}
func (m *L2FibStatsBagSeqNum) XXX_Size() int {
	return xxx_messageInfo_L2FibStatsBagSeqNum.Size(m)
}
func (m *L2FibStatsBagSeqNum) XXX_DiscardUnknown() {
	xxx_messageInfo_L2FibStatsBagSeqNum.DiscardUnknown(m)
}

var xxx_messageInfo_L2FibStatsBagSeqNum proto.InternalMessageInfo

func (m *L2FibStatsBagSeqNum) GetSequenceNumberSent() uint32 {
	if m != nil {
		return m.SequenceNumberSent
	}
	return 0
}

func (m *L2FibStatsBagSeqNum) GetSequenceNumberExpected() uint32 {
	if m != nil {
		return m.SequenceNumberExpected
	}
	return 0
}

func (m *L2FibStatsBagSeqNum) GetBypassedInboundSequencePacket() uint64 {
	if m != nil {
		return m.BypassedInboundSequencePacket
	}
	return 0
}

func (m *L2FibStatsBagSeqNum) GetBypassedOutSequencePacket() uint64 {
	if m != nil {
		return m.BypassedOutSequencePacket
	}
	return 0
}

type L2FibStatsBagForwarding struct {
	ImpostionStats       *L2FibStatsBagImp    `protobuf:"bytes,1,opt,name=impostion_stats,json=impostionStats,proto3" json:"impostion_stats,omitempty"`
	DispostionStats      *L2FibStatsBagDisp   `protobuf:"bytes,2,opt,name=dispostion_stats,json=dispostionStats,proto3" json:"dispostion_stats,omitempty"`
	SequenceNumber       *L2FibStatsBagSeqNum `protobuf:"bytes,3,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *L2FibStatsBagForwarding) Reset()         { *m = L2FibStatsBagForwarding{} }
func (m *L2FibStatsBagForwarding) String() string { return proto.CompactTextString(m) }
func (*L2FibStatsBagForwarding) ProtoMessage()    {}
func (*L2FibStatsBagForwarding) Descriptor() ([]byte, []int) {
	return fileDescriptor_527d8d161c6f92ac, []int{29}
}

func (m *L2FibStatsBagForwarding) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2FibStatsBagForwarding.Unmarshal(m, b)
}
func (m *L2FibStatsBagForwarding) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2FibStatsBagForwarding.Marshal(b, m, deterministic)
}
func (m *L2FibStatsBagForwarding) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2FibStatsBagForwarding.Merge(m, src)
}
func (m *L2FibStatsBagForwarding) XXX_Size() int {
	return xxx_messageInfo_L2FibStatsBagForwarding.Size(m)
}
func (m *L2FibStatsBagForwarding) XXX_DiscardUnknown() {
	xxx_messageInfo_L2FibStatsBagForwarding.DiscardUnknown(m)
}

var xxx_messageInfo_L2FibStatsBagForwarding proto.InternalMessageInfo

func (m *L2FibStatsBagForwarding) GetImpostionStats() *L2FibStatsBagImp {
	if m != nil {
		return m.ImpostionStats
	}
	return nil
}

func (m *L2FibStatsBagForwarding) GetDispostionStats() *L2FibStatsBagDisp {
	if m != nil {
		return m.DispostionStats
	}
	return nil
}

func (m *L2FibStatsBagForwarding) GetSequenceNumber() *L2FibStatsBagSeqNum {
	if m != nil {
		return m.SequenceNumber
	}
	return nil
}

type L2VpnP2MpPw struct {
	LocalAvailable         bool     `protobuf:"varint,1,opt,name=local_available,json=localAvailable,proto3" json:"local_available,omitempty"`
	LocalLabel             uint32   `protobuf:"varint,2,opt,name=local_label,json=localLabel,proto3" json:"local_label,omitempty"`
	LocalPtreeType         string   `protobuf:"bytes,3,opt,name=local_ptree_type,json=localPtreeType,proto3" json:"local_ptree_type,omitempty"`
	LocalTunnelId          uint32   `protobuf:"varint,4,opt,name=local_tunnel_id,json=localTunnelId,proto3" json:"local_tunnel_id,omitempty"`
	LocalExtendedTunnelId  string   `protobuf:"bytes,5,opt,name=local_extended_tunnel_id,json=localExtendedTunnelId,proto3" json:"local_extended_tunnel_id,omitempty"`
	LocalP2MpId            uint32   `protobuf:"varint,6,opt,name=local_p2mp_id,json=localP2mpId,proto3" json:"local_p2mp_id,omitempty"`
	LocalFlags             uint32   `protobuf:"varint,7,opt,name=local_flags,json=localFlags,proto3" json:"local_flags,omitempty"`
	RemoteAvailable        bool     `protobuf:"varint,8,opt,name=remote_available,json=remoteAvailable,proto3" json:"remote_available,omitempty"`
	RemoteLabel            uint32   `protobuf:"varint,9,opt,name=remote_label,json=remoteLabel,proto3" json:"remote_label,omitempty"`
	RemotePtreeType        string   `protobuf:"bytes,10,opt,name=remote_ptree_type,json=remotePtreeType,proto3" json:"remote_ptree_type,omitempty"`
	RemoteTunnelId         uint32   `protobuf:"varint,11,opt,name=remote_tunnel_id,json=remoteTunnelId,proto3" json:"remote_tunnel_id,omitempty"`
	RemoteExtendedTunnelId string   `protobuf:"bytes,12,opt,name=remote_extended_tunnel_id,json=remoteExtendedTunnelId,proto3" json:"remote_extended_tunnel_id,omitempty"`
	RemoteP2MpId           uint32   `protobuf:"varint,13,opt,name=remote_p2mp_id,json=remoteP2mpId,proto3" json:"remote_p2mp_id,omitempty"`
	RemoteFlags            uint32   `protobuf:"varint,14,opt,name=remote_flags,json=remoteFlags,proto3" json:"remote_flags,omitempty"`
	XXX_NoUnkeyedLiteral   struct{} `json:"-"`
	XXX_unrecognized       []byte   `json:"-"`
	XXX_sizecache          int32    `json:"-"`
}

func (m *L2VpnP2MpPw) Reset()         { *m = L2VpnP2MpPw{} }
func (m *L2VpnP2MpPw) String() string { return proto.CompactTextString(m) }
func (*L2VpnP2MpPw) ProtoMessage()    {}
func (*L2VpnP2MpPw) Descriptor() ([]byte, []int) {
	return fileDescriptor_527d8d161c6f92ac, []int{30}
}

func (m *L2VpnP2MpPw) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2VpnP2MpPw.Unmarshal(m, b)
}
func (m *L2VpnP2MpPw) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2VpnP2MpPw.Marshal(b, m, deterministic)
}
func (m *L2VpnP2MpPw) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2VpnP2MpPw.Merge(m, src)
}
func (m *L2VpnP2MpPw) XXX_Size() int {
	return xxx_messageInfo_L2VpnP2MpPw.Size(m)
}
func (m *L2VpnP2MpPw) XXX_DiscardUnknown() {
	xxx_messageInfo_L2VpnP2MpPw.DiscardUnknown(m)
}

var xxx_messageInfo_L2VpnP2MpPw proto.InternalMessageInfo

func (m *L2VpnP2MpPw) GetLocalAvailable() bool {
	if m != nil {
		return m.LocalAvailable
	}
	return false
}

func (m *L2VpnP2MpPw) GetLocalLabel() uint32 {
	if m != nil {
		return m.LocalLabel
	}
	return 0
}

func (m *L2VpnP2MpPw) GetLocalPtreeType() string {
	if m != nil {
		return m.LocalPtreeType
	}
	return ""
}

func (m *L2VpnP2MpPw) GetLocalTunnelId() uint32 {
	if m != nil {
		return m.LocalTunnelId
	}
	return 0
}

func (m *L2VpnP2MpPw) GetLocalExtendedTunnelId() string {
	if m != nil {
		return m.LocalExtendedTunnelId
	}
	return ""
}

func (m *L2VpnP2MpPw) GetLocalP2MpId() uint32 {
	if m != nil {
		return m.LocalP2MpId
	}
	return 0
}

func (m *L2VpnP2MpPw) GetLocalFlags() uint32 {
	if m != nil {
		return m.LocalFlags
	}
	return 0
}

func (m *L2VpnP2MpPw) GetRemoteAvailable() bool {
	if m != nil {
		return m.RemoteAvailable
	}
	return false
}

func (m *L2VpnP2MpPw) GetRemoteLabel() uint32 {
	if m != nil {
		return m.RemoteLabel
	}
	return 0
}

func (m *L2VpnP2MpPw) GetRemotePtreeType() string {
	if m != nil {
		return m.RemotePtreeType
	}
	return ""
}

func (m *L2VpnP2MpPw) GetRemoteTunnelId() uint32 {
	if m != nil {
		return m.RemoteTunnelId
	}
	return 0
}

func (m *L2VpnP2MpPw) GetRemoteExtendedTunnelId() string {
	if m != nil {
		return m.RemoteExtendedTunnelId
	}
	return ""
}

func (m *L2VpnP2MpPw) GetRemoteP2MpId() uint32 {
	if m != nil {
		return m.RemoteP2MpId
	}
	return 0
}

func (m *L2VpnP2MpPw) GetRemoteFlags() uint32 {
	if m != nil {
		return m.RemoteFlags
	}
	return 0
}

type L2VpnPw struct {
	PeerId                       *L2VpnPeer               `protobuf:"bytes,1,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
	LocalSourceAddress           string                   `protobuf:"bytes,2,opt,name=local_source_address,json=localSourceAddress,proto3" json:"local_source_address,omitempty"`
	Ipv6LocalSourceAddress       string                   `protobuf:"bytes,3,opt,name=ipv6_local_source_address,json=ipv6LocalSourceAddress,proto3" json:"ipv6_local_source_address,omitempty"`
	PseudoWireId                 uint64                   `protobuf:"varint,4,opt,name=pseudo_wire_id,json=pseudoWireId,proto3" json:"pseudo_wire_id,omitempty"`
	IsPwrType                    bool                     `protobuf:"varint,5,opt,name=is_pwr_type,json=isPwrType,proto3" json:"is_pwr_type,omitempty"`
	IsEvpnvpwsType               bool                     `protobuf:"varint,6,opt,name=is_evpnvpws_type,json=isEvpnvpwsType,proto3" json:"is_evpnvpws_type,omitempty"`
	XconnectId                   uint32                   `protobuf:"varint,7,opt,name=xconnect_id,json=xconnectId,proto3" json:"xconnect_id,omitempty"`
	State                        string                   `protobuf:"bytes,8,opt,name=state,proto3" json:"state,omitempty"`
	PseudoWireState              string                   `protobuf:"bytes,9,opt,name=pseudo_wire_state,json=pseudoWireState,proto3" json:"pseudo_wire_state,omitempty"`
	Protocol                     string                   `protobuf:"bytes,10,opt,name=protocol,proto3" json:"protocol,omitempty"`
	PwClassName                  string                   `protobuf:"bytes,11,opt,name=pw_class_name,json=pwClassName,proto3" json:"pw_class_name,omitempty"`
	TagRewrite                   uint32                   `protobuf:"varint,12,opt,name=tag_rewrite,json=tagRewrite,proto3" json:"tag_rewrite,omitempty"`
	Interworking                 string                   `protobuf:"bytes,13,opt,name=interworking,proto3" json:"interworking,omitempty"`
	FeCtype                      string                   `protobuf:"bytes,14,opt,name=fe_ctype,json=feCtype,proto3" json:"fe_ctype,omitempty"`
	EvpnSrcAcid                  uint32                   `protobuf:"varint,15,opt,name=evpn_src_acid,json=evpnSrcAcid,proto3" json:"evpn_src_acid,omitempty"`
	SequencingType               string                   `protobuf:"bytes,16,opt,name=sequencing_type,json=sequencingType,proto3" json:"sequencing_type,omitempty"`
	ResyncEnabled                bool                     `protobuf:"varint,17,opt,name=resync_enabled,json=resyncEnabled,proto3" json:"resync_enabled,omitempty"`
	ResyncThreshold              uint32                   `protobuf:"varint,18,opt,name=resync_threshold,json=resyncThreshold,proto3" json:"resync_threshold,omitempty"`
	EncapsulationInfo            *L2VpnEncapPw            `protobuf:"bytes,19,opt,name=encapsulation_info,json=encapsulationInfo,proto3" json:"encapsulation_info,omitempty"`
	LocalControlWord             string                   `protobuf:"bytes,20,opt,name=local_control_word,json=localControlWord,proto3" json:"local_control_word,omitempty"`
	RemoteControlWord            string                   `protobuf:"bytes,21,opt,name=remote_control_word,json=remoteControlWord,proto3" json:"remote_control_word,omitempty"`
	LocalPseudoWireType          string                   `protobuf:"bytes,22,opt,name=local_pseudo_wire_type,json=localPseudoWireType,proto3" json:"local_pseudo_wire_type,omitempty"`
	RemotePseudoWireType         string                   `protobuf:"bytes,23,opt,name=remote_pseudo_wire_type,json=remotePseudoWireType,proto3" json:"remote_pseudo_wire_type,omitempty"`
	LocalInterface               *L2VpnInterface          `protobuf:"bytes,24,opt,name=local_interface,json=localInterface,proto3" json:"local_interface,omitempty"`
	RemoteInterface              *L2VpnInterface          `protobuf:"bytes,25,opt,name=remote_interface,json=remoteInterface,proto3" json:"remote_interface,omitempty"`
	ImposedVlanId                uint32                   `protobuf:"varint,26,opt,name=imposed_vlan_id,json=imposedVlanId,proto3" json:"imposed_vlan_id,omitempty"`
	TimeCreated                  string                   `protobuf:"bytes,27,opt,name=time_created,json=timeCreated,proto3" json:"time_created,omitempty"`
	TimeElapsedCreation          string                   `protobuf:"bytes,28,opt,name=time_elapsed_creation,json=timeElapsedCreation,proto3" json:"time_elapsed_creation,omitempty"`
	LastTimeStatusChanged        string                   `protobuf:"bytes,29,opt,name=last_time_status_changed,json=lastTimeStatusChanged,proto3" json:"last_time_status_changed,omitempty"`
	TimeElapsedStatusChanged     string                   `protobuf:"bytes,30,opt,name=time_elapsed_status_changed,json=timeElapsedStatusChanged,proto3" json:"time_elapsed_status_changed,omitempty"`
	LastTimeStatusDown           string                   `protobuf:"bytes,31,opt,name=last_time_status_down,json=lastTimeStatusDown,proto3" json:"last_time_status_down,omitempty"`
	TimeElapsedStatusDown        uint32                   `protobuf:"varint,32,opt,name=time_elapsed_status_down,json=timeElapsedStatusDown,proto3" json:"time_elapsed_status_down,omitempty"`
	Shutdown                     bool                     `protobuf:"varint,33,opt,name=shutdown,proto3" json:"shutdown,omitempty"`
	PseudoWireTypeMismatched     bool                     `protobuf:"varint,34,opt,name=pseudo_wire_type_mismatched,json=pseudoWireTypeMismatched,proto3" json:"pseudo_wire_type_mismatched,omitempty"`
	PayloadBytesMismatched       bool                     `protobuf:"varint,35,opt,name=payload_bytes_mismatched,json=payloadBytesMismatched,proto3" json:"payload_bytes_mismatched,omitempty"`
	BitrateMismatched            bool                     `protobuf:"varint,36,opt,name=bitrate_mismatched,json=bitrateMismatched,proto3" json:"bitrate_mismatched,omitempty"`
	RtpMismatched                bool                     `protobuf:"varint,37,opt,name=rtp_mismatched,json=rtpMismatched,proto3" json:"rtp_mismatched,omitempty"`
	DiffTsMismatched             bool                     `protobuf:"varint,38,opt,name=diff_ts_mismatched,json=diffTsMismatched,proto3" json:"diff_ts_mismatched,omitempty"`
	SigPktsMismatched            bool                     `protobuf:"varint,39,opt,name=sig_pkts_mismatched,json=sigPktsMismatched,proto3" json:"sig_pkts_mismatched,omitempty"`
	CasMismatched                bool                     `protobuf:"varint,40,opt,name=cas_mismatched,json=casMismatched,proto3" json:"cas_mismatched,omitempty"`
	PayloadTypeMismatched        bool                     `protobuf:"varint,41,opt,name=payload_type_mismatched,json=payloadTypeMismatched,proto3" json:"payload_type_mismatched,omitempty"`
	FreqMismatched               bool                     `protobuf:"varint,42,opt,name=freq_mismatched,json=freqMismatched,proto3" json:"freq_mismatched,omitempty"`
	SsrcMismatched               bool                     `protobuf:"varint,43,opt,name=ssrc_mismatched,json=ssrcMismatched,proto3" json:"ssrc_mismatched,omitempty"`
	MtuMismatched                bool                     `protobuf:"varint,44,opt,name=mtu_mismatched,json=mtuMismatched,proto3" json:"mtu_mismatched,omitempty"`
	IllegalControlWord           bool                     `protobuf:"varint,45,opt,name=illegal_control_word,json=illegalControlWord,proto3" json:"illegal_control_word,omitempty"`
	AdRemoteDown                 bool                     `protobuf:"varint,46,opt,name=ad_remote_down,json=adRemoteDown,proto3" json:"ad_remote_down,omitempty"`
	NotSupportedQinq             bool                     `protobuf:"varint,47,opt,name=not_supported_qinq,json=notSupportedQinq,proto3" json:"not_supported_qinq,omitempty"`
	LocalLabelFailed             bool                     `protobuf:"varint,48,opt,name=local_label_failed,json=localLabelFailed,proto3" json:"local_label_failed,omitempty"`
	RemoteLabelFailed            bool                     `protobuf:"varint,49,opt,name=remote_label_failed,json=remoteLabelFailed,proto3" json:"remote_label_failed,omitempty"`
	PreferredPath                *L2VpnPwMplsPrefpath     `protobuf:"bytes,50,opt,name=preferred_path,json=preferredPath,proto3" json:"preferred_path,omitempty"`
	PreferredPathDisableFallback bool                     `protobuf:"varint,51,opt,name=preferred_path_disable_fallback,json=preferredPathDisableFallback,proto3" json:"preferred_path_disable_fallback,omitempty"`
	BackupPw                     bool                     `protobuf:"varint,52,opt,name=backup_pw,json=backupPw,proto3" json:"backup_pw,omitempty"`
	PrimaryPw                    bool                     `protobuf:"varint,53,opt,name=primary_pw,json=primaryPw,proto3" json:"primary_pw,omitempty"`
	BackupActive                 bool                     `protobuf:"varint,54,opt,name=backup_active,json=backupActive,proto3" json:"backup_active,omitempty"`
	BackupForceActive            bool                     `protobuf:"varint,55,opt,name=backup_force_active,json=backupForceActive,proto3" json:"backup_force_active,omitempty"`
	DisableNever                 bool                     `protobuf:"varint,56,opt,name=disable_never,json=disableNever,proto3" json:"disable_never,omitempty"`
	DisableDelay                 uint32                   `protobuf:"varint,57,opt,name=disable_delay,json=disableDelay,proto3" json:"disable_delay,omitempty"`
	PrimaryPeerId                string                   `protobuf:"bytes,58,opt,name=primary_peer_id,json=primaryPeerId,proto3" json:"primary_peer_id,omitempty"`
	PrimaryPseudoWireId          uint64                   `protobuf:"varint,59,opt,name=primary_pseudo_wire_id,json=primaryPseudoWireId,proto3" json:"primary_pseudo_wire_id,omitempty"`
	NumberMaCwithdrawMessageSent uint32                   `protobuf:"varint,60,opt,name=number_ma_cwithdraw_message_sent,json=numberMaCwithdrawMessageSent,proto3" json:"number_ma_cwithdraw_message_sent,omitempty"`
	NumMaCwithdrawMsgReceived    uint32                   `protobuf:"varint,61,opt,name=num_ma_cwithdraw_msg_received,json=numMaCwithdrawMsgReceived,proto3" json:"num_ma_cwithdraw_msg_received,omitempty"`
	OutOfMemoryState             uint32                   `protobuf:"varint,62,opt,name=out_of_memory_state,json=outOfMemoryState,proto3" json:"out_of_memory_state,omitempty"`
	TransportLspDown             bool                     `protobuf:"varint,63,opt,name=transport_lsp_down,json=transportLspDown,proto3" json:"transport_lsp_down,omitempty"`
	MacLimitOperDown             bool                     `protobuf:"varint,64,opt,name=mac_limit_oper_down,json=macLimitOperDown,proto3" json:"mac_limit_oper_down,omitempty"`
	PwStatusUse                  bool                     `protobuf:"varint,65,opt,name=pw_status_use,json=pwStatusUse,proto3" json:"pw_status_use,omitempty"`
	LocalSignalling              *L2VpnMsPw               `protobuf:"bytes,66,opt,name=local_signalling,json=localSignalling,proto3" json:"local_signalling,omitempty"`
	RemoteSignalling             *L2VpnMsPw               `protobuf:"bytes,67,opt,name=remote_signalling,json=remoteSignalling,proto3" json:"remote_signalling,omitempty"`
	AutoDiscovery                bool                     `protobuf:"varint,68,opt,name=auto_discovery,json=autoDiscovery,proto3" json:"auto_discovery,omitempty"`
	AdMethod                     uint32                   `protobuf:"varint,69,opt,name=ad_method,json=adMethod,proto3" json:"ad_method,omitempty"`
	PwlsdRewriteFailed           bool                     `protobuf:"varint,70,opt,name=pwlsd_rewrite_failed,json=pwlsdRewriteFailed,proto3" json:"pwlsd_rewrite_failed,omitempty"`
	LdpLabelAdvertiseFailed      bool                     `protobuf:"varint,71,opt,name=ldp_label_advertise_failed,json=ldpLabelAdvertiseFailed,proto3" json:"ldp_label_advertise_failed,omitempty"`
	IsVfi                        bool                     `protobuf:"varint,72,opt,name=is_vfi,json=isVfi,proto3" json:"is_vfi,omitempty"`
	IsMultiSegmentPseudowire     bool                     `protobuf:"varint,73,opt,name=is_multi_segment_pseudowire,json=isMultiSegmentPseudowire,proto3" json:"is_multi_segment_pseudowire,omitempty"`
	PwRedundancyOneWay           bool                     `protobuf:"varint,74,opt,name=pw_redundancy_one_way,json=pwRedundancyOneWay,proto3" json:"pw_redundancy_one_way,omitempty"`
	Statistics                   *L2FibStatsBagForwarding `protobuf:"bytes,75,opt,name=statistics,proto3" json:"statistics,omitempty"`
	LoadBalance                  string                   `protobuf:"bytes,76,opt,name=load_balance,json=loadBalance,proto3" json:"load_balance,omitempty"`
	PwFlowLabelType              string                   `protobuf:"bytes,77,opt,name=pw_flow_label_type,json=pwFlowLabelType,proto3" json:"pw_flow_label_type,omitempty"`
	PwFlowLabelTypeCfg           string                   `protobuf:"bytes,78,opt,name=pw_flow_label_type_cfg,json=pwFlowLabelTypeCfg,proto3" json:"pw_flow_label_type_cfg,omitempty"`
	PwFlowLabelCode17Disabled    bool                     `protobuf:"varint,79,opt,name=pw_flow_label_code17_disabled,json=pwFlowLabelCode17Disabled,proto3" json:"pw_flow_label_code17_disabled,omitempty"`
	IsFlowLabelStatic            bool                     `protobuf:"varint,80,opt,name=is_flow_label_static,json=isFlowLabelStatic,proto3" json:"is_flow_label_static,omitempty"`
	IsPartiallyProgrammed        bool                     `protobuf:"varint,81,opt,name=is_partially_programmed,json=isPartiallyProgrammed,proto3" json:"is_partially_programmed,omitempty"`
	PwRedundancyInitialDelay     uint32                   `protobuf:"varint,82,opt,name=pw_redundancy_initial_delay,json=pwRedundancyInitialDelay,proto3" json:"pw_redundancy_initial_delay,omitempty"`
	BridgePwTypeMismatch         bool                     `protobuf:"varint,83,opt,name=bridge_pw_type_mismatch,json=bridgePwTypeMismatch,proto3" json:"bridge_pw_type_mismatch,omitempty"`
	P2MpPw                       *L2VpnP2MpPw             `protobuf:"bytes,84,opt,name=p2mp_pw,json=p2mpPw,proto3" json:"p2mp_pw,omitempty"`
	RequiredBw                   uint32                   `protobuf:"varint,85,opt,name=required_bw,json=requiredBw,proto3" json:"required_bw,omitempty"`
	AdmitedBw                    uint32                   `protobuf:"varint,86,opt,name=admited_bw,json=admitedBw,proto3" json:"admited_bw,omitempty"`
	ForwardClass                 uint32                   `protobuf:"varint,87,opt,name=forward_class,json=forwardClass,proto3" json:"forward_class,omitempty"`
	TablePolicyName              string                   `protobuf:"bytes,88,opt,name=table_policy_name,json=tablePolicyName,proto3" json:"table_policy_name,omitempty"`
	XXX_NoUnkeyedLiteral         struct{}                 `json:"-"`
	XXX_unrecognized             []byte                   `json:"-"`
	XXX_sizecache                int32                    `json:"-"`
}

func (m *L2VpnPw) Reset()         { *m = L2VpnPw{} }
func (m *L2VpnPw) String() string { return proto.CompactTextString(m) }
func (*L2VpnPw) ProtoMessage()    {}
func (*L2VpnPw) Descriptor() ([]byte, []int) {
	return fileDescriptor_527d8d161c6f92ac, []int{31}
}

func (m *L2VpnPw) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2VpnPw.Unmarshal(m, b)
}
func (m *L2VpnPw) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2VpnPw.Marshal(b, m, deterministic)
}
func (m *L2VpnPw) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2VpnPw.Merge(m, src)
}
func (m *L2VpnPw) XXX_Size() int {
	return xxx_messageInfo_L2VpnPw.Size(m)
}
func (m *L2VpnPw) XXX_DiscardUnknown() {
	xxx_messageInfo_L2VpnPw.DiscardUnknown(m)
}

var xxx_messageInfo_L2VpnPw proto.InternalMessageInfo

func (m *L2VpnPw) GetPeerId() *L2VpnPeer {
	if m != nil {
		return m.PeerId
	}
	return nil
}

func (m *L2VpnPw) GetLocalSourceAddress() string {
	if m != nil {
		return m.LocalSourceAddress
	}
	return ""
}

func (m *L2VpnPw) GetIpv6LocalSourceAddress() string {
	if m != nil {
		return m.Ipv6LocalSourceAddress
	}
	return ""
}

func (m *L2VpnPw) GetPseudoWireId() uint64 {
	if m != nil {
		return m.PseudoWireId
	}
	return 0
}

func (m *L2VpnPw) GetIsPwrType() bool {
	if m != nil {
		return m.IsPwrType
	}
	return false
}

func (m *L2VpnPw) GetIsEvpnvpwsType() bool {
	if m != nil {
		return m.IsEvpnvpwsType
	}
	return false
}

func (m *L2VpnPw) GetXconnectId() uint32 {
	if m != nil {
		return m.XconnectId
	}
	return 0
}

func (m *L2VpnPw) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *L2VpnPw) GetPseudoWireState() string {
	if m != nil {
		return m.PseudoWireState
	}
	return ""
}

func (m *L2VpnPw) GetProtocol() string {
	if m != nil {
		return m.Protocol
	}
	return ""
}

func (m *L2VpnPw) GetPwClassName() string {
	if m != nil {
		return m.PwClassName
	}
	return ""
}

func (m *L2VpnPw) GetTagRewrite() uint32 {
	if m != nil {
		return m.TagRewrite
	}
	return 0
}

func (m *L2VpnPw) GetInterworking() string {
	if m != nil {
		return m.Interworking
	}
	return ""
}

func (m *L2VpnPw) GetFeCtype() string {
	if m != nil {
		return m.FeCtype
	}
	return ""
}

func (m *L2VpnPw) GetEvpnSrcAcid() uint32 {
	if m != nil {
		return m.EvpnSrcAcid
	}
	return 0
}

func (m *L2VpnPw) GetSequencingType() string {
	if m != nil {
		return m.SequencingType
	}
	return ""
}

func (m *L2VpnPw) GetResyncEnabled() bool {
	if m != nil {
		return m.ResyncEnabled
	}
	return false
}

func (m *L2VpnPw) GetResyncThreshold() uint32 {
	if m != nil {
		return m.ResyncThreshold
	}
	return 0
}

func (m *L2VpnPw) GetEncapsulationInfo() *L2VpnEncapPw {
	if m != nil {
		return m.EncapsulationInfo
	}
	return nil
}

func (m *L2VpnPw) GetLocalControlWord() string {
	if m != nil {
		return m.LocalControlWord
	}
	return ""
}

func (m *L2VpnPw) GetRemoteControlWord() string {
	if m != nil {
		return m.RemoteControlWord
	}
	return ""
}

func (m *L2VpnPw) GetLocalPseudoWireType() string {
	if m != nil {
		return m.LocalPseudoWireType
	}
	return ""
}

func (m *L2VpnPw) GetRemotePseudoWireType() string {
	if m != nil {
		return m.RemotePseudoWireType
	}
	return ""
}

func (m *L2VpnPw) GetLocalInterface() *L2VpnInterface {
	if m != nil {
		return m.LocalInterface
	}
	return nil
}

func (m *L2VpnPw) GetRemoteInterface() *L2VpnInterface {
	if m != nil {
		return m.RemoteInterface
	}
	return nil
}

func (m *L2VpnPw) GetImposedVlanId() uint32 {
	if m != nil {
		return m.ImposedVlanId
	}
	return 0
}

func (m *L2VpnPw) GetTimeCreated() string {
	if m != nil {
		return m.TimeCreated
	}
	return ""
}

func (m *L2VpnPw) GetTimeElapsedCreation() string {
	if m != nil {
		return m.TimeElapsedCreation
	}
	return ""
}

func (m *L2VpnPw) GetLastTimeStatusChanged() string {
	if m != nil {
		return m.LastTimeStatusChanged
	}
	return ""
}

func (m *L2VpnPw) GetTimeElapsedStatusChanged() string {
	if m != nil {
		return m.TimeElapsedStatusChanged
	}
	return ""
}

func (m *L2VpnPw) GetLastTimeStatusDown() string {
	if m != nil {
		return m.LastTimeStatusDown
	}
	return ""
}

func (m *L2VpnPw) GetTimeElapsedStatusDown() uint32 {
	if m != nil {
		return m.TimeElapsedStatusDown
	}
	return 0
}

func (m *L2VpnPw) GetShutdown() bool {
	if m != nil {
		return m.Shutdown
	}
	return false
}

func (m *L2VpnPw) GetPseudoWireTypeMismatched() bool {
	if m != nil {
		return m.PseudoWireTypeMismatched
	}
	return false
}

func (m *L2VpnPw) GetPayloadBytesMismatched() bool {
	if m != nil {
		return m.PayloadBytesMismatched
	}
	return false
}

func (m *L2VpnPw) GetBitrateMismatched() bool {
	if m != nil {
		return m.BitrateMismatched
	}
	return false
}

func (m *L2VpnPw) GetRtpMismatched() bool {
	if m != nil {
		return m.RtpMismatched
	}
	return false
}

func (m *L2VpnPw) GetDiffTsMismatched() bool {
	if m != nil {
		return m.DiffTsMismatched
	}
	return false
}

func (m *L2VpnPw) GetSigPktsMismatched() bool {
	if m != nil {
		return m.SigPktsMismatched
	}
	return false
}

func (m *L2VpnPw) GetCasMismatched() bool {
	if m != nil {
		return m.CasMismatched
	}
	return false
}

func (m *L2VpnPw) GetPayloadTypeMismatched() bool {
	if m != nil {
		return m.PayloadTypeMismatched
	}
	return false
}

func (m *L2VpnPw) GetFreqMismatched() bool {
	if m != nil {
		return m.FreqMismatched
	}
	return false
}

func (m *L2VpnPw) GetSsrcMismatched() bool {
	if m != nil {
		return m.SsrcMismatched
	}
	return false
}

func (m *L2VpnPw) GetMtuMismatched() bool {
	if m != nil {
		return m.MtuMismatched
	}
	return false
}

func (m *L2VpnPw) GetIllegalControlWord() bool {
	if m != nil {
		return m.IllegalControlWord
	}
	return false
}

func (m *L2VpnPw) GetAdRemoteDown() bool {
	if m != nil {
		return m.AdRemoteDown
	}
	return false
}

func (m *L2VpnPw) GetNotSupportedQinq() bool {
	if m != nil {
		return m.NotSupportedQinq
	}
	return false
}

func (m *L2VpnPw) GetLocalLabelFailed() bool {
	if m != nil {
		return m.LocalLabelFailed
	}
	return false
}

func (m *L2VpnPw) GetRemoteLabelFailed() bool {
	if m != nil {
		return m.RemoteLabelFailed
	}
	return false
}

func (m *L2VpnPw) GetPreferredPath() *L2VpnPwMplsPrefpath {
	if m != nil {
		return m.PreferredPath
	}
	return nil
}

func (m *L2VpnPw) GetPreferredPathDisableFallback() bool {
	if m != nil {
		return m.PreferredPathDisableFallback
	}
	return false
}

func (m *L2VpnPw) GetBackupPw() bool {
	if m != nil {
		return m.BackupPw
	}
	return false
}

func (m *L2VpnPw) GetPrimaryPw() bool {
	if m != nil {
		return m.PrimaryPw
	}
	return false
}

func (m *L2VpnPw) GetBackupActive() bool {
	if m != nil {
		return m.BackupActive
	}
	return false
}

func (m *L2VpnPw) GetBackupForceActive() bool {
	if m != nil {
		return m.BackupForceActive
	}
	return false
}

func (m *L2VpnPw) GetDisableNever() bool {
	if m != nil {
		return m.DisableNever
	}
	return false
}

func (m *L2VpnPw) GetDisableDelay() uint32 {
	if m != nil {
		return m.DisableDelay
	}
	return 0
}

func (m *L2VpnPw) GetPrimaryPeerId() string {
	if m != nil {
		return m.PrimaryPeerId
	}
	return ""
}

func (m *L2VpnPw) GetPrimaryPseudoWireId() uint64 {
	if m != nil {
		return m.PrimaryPseudoWireId
	}
	return 0
}

func (m *L2VpnPw) GetNumberMaCwithdrawMessageSent() uint32 {
	if m != nil {
		return m.NumberMaCwithdrawMessageSent
	}
	return 0
}

func (m *L2VpnPw) GetNumMaCwithdrawMsgReceived() uint32 {
	if m != nil {
		return m.NumMaCwithdrawMsgReceived
	}
	return 0
}

func (m *L2VpnPw) GetOutOfMemoryState() uint32 {
	if m != nil {
		return m.OutOfMemoryState
	}
	return 0
}

func (m *L2VpnPw) GetTransportLspDown() bool {
	if m != nil {
		return m.TransportLspDown
	}
	return false
}

func (m *L2VpnPw) GetMacLimitOperDown() bool {
	if m != nil {
		return m.MacLimitOperDown
	}
	return false
}

func (m *L2VpnPw) GetPwStatusUse() bool {
	if m != nil {
		return m.PwStatusUse
	}
	return false
}

func (m *L2VpnPw) GetLocalSignalling() *L2VpnMsPw {
	if m != nil {
		return m.LocalSignalling
	}
	return nil
}

func (m *L2VpnPw) GetRemoteSignalling() *L2VpnMsPw {
	if m != nil {
		return m.RemoteSignalling
	}
	return nil
}

func (m *L2VpnPw) GetAutoDiscovery() bool {
	if m != nil {
		return m.AutoDiscovery
	}
	return false
}

func (m *L2VpnPw) GetAdMethod() uint32 {
	if m != nil {
		return m.AdMethod
	}
	return 0
}

func (m *L2VpnPw) GetPwlsdRewriteFailed() bool {
	if m != nil {
		return m.PwlsdRewriteFailed
	}
	return false
}

func (m *L2VpnPw) GetLdpLabelAdvertiseFailed() bool {
	if m != nil {
		return m.LdpLabelAdvertiseFailed
	}
	return false
}

func (m *L2VpnPw) GetIsVfi() bool {
	if m != nil {
		return m.IsVfi
	}
	return false
}

func (m *L2VpnPw) GetIsMultiSegmentPseudowire() bool {
	if m != nil {
		return m.IsMultiSegmentPseudowire
	}
	return false
}

func (m *L2VpnPw) GetPwRedundancyOneWay() bool {
	if m != nil {
		return m.PwRedundancyOneWay
	}
	return false
}

func (m *L2VpnPw) GetStatistics() *L2FibStatsBagForwarding {
	if m != nil {
		return m.Statistics
	}
	return nil
}

func (m *L2VpnPw) GetLoadBalance() string {
	if m != nil {
		return m.LoadBalance
	}
	return ""
}

func (m *L2VpnPw) GetPwFlowLabelType() string {
	if m != nil {
		return m.PwFlowLabelType
	}
	return ""
}

func (m *L2VpnPw) GetPwFlowLabelTypeCfg() string {
	if m != nil {
		return m.PwFlowLabelTypeCfg
	}
	return ""
}

func (m *L2VpnPw) GetPwFlowLabelCode17Disabled() bool {
	if m != nil {
		return m.PwFlowLabelCode17Disabled
	}
	return false
}

func (m *L2VpnPw) GetIsFlowLabelStatic() bool {
	if m != nil {
		return m.IsFlowLabelStatic
	}
	return false
}

func (m *L2VpnPw) GetIsPartiallyProgrammed() bool {
	if m != nil {
		return m.IsPartiallyProgrammed
	}
	return false
}

func (m *L2VpnPw) GetPwRedundancyInitialDelay() uint32 {
	if m != nil {
		return m.PwRedundancyInitialDelay
	}
	return 0
}

func (m *L2VpnPw) GetBridgePwTypeMismatch() bool {
	if m != nil {
		return m.BridgePwTypeMismatch
	}
	return false
}

func (m *L2VpnPw) GetP2MpPw() *L2VpnP2MpPw {
	if m != nil {
		return m.P2MpPw
	}
	return nil
}

func (m *L2VpnPw) GetRequiredBw() uint32 {
	if m != nil {
		return m.RequiredBw
	}
	return 0
}

func (m *L2VpnPw) GetAdmitedBw() uint32 {
	if m != nil {
		return m.AdmitedBw
	}
	return 0
}

func (m *L2VpnPw) GetForwardClass() uint32 {
	if m != nil {
		return m.ForwardClass
	}
	return 0
}

func (m *L2VpnPw) GetTablePolicyName() string {
	if m != nil {
		return m.TablePolicyName
	}
	return ""
}

type L2VpnFxc struct {
	FxcId                uint32     `protobuf:"varint,50,opt,name=fxc_id,json=fxcId,proto3" json:"fxc_id,omitempty"`
	Name                 string     `protobuf:"bytes,51,opt,name=name,proto3" json:"name,omitempty"`
	State                string     `protobuf:"bytes,52,opt,name=state,proto3" json:"state,omitempty"`
	NumPWs               uint32     `protobuf:"varint,53,opt,name=num_p_ws,json=numPWs,proto3" json:"num_p_ws,omitempty"`
	Pseudowire           []*L2VpnPw `protobuf:"bytes,54,rep,name=pseudowire,proto3" json:"pseudowire,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *L2VpnFxc) Reset()         { *m = L2VpnFxc{} }
func (m *L2VpnFxc) String() string { return proto.CompactTextString(m) }
func (*L2VpnFxc) ProtoMessage()    {}
func (*L2VpnFxc) Descriptor() ([]byte, []int) {
	return fileDescriptor_527d8d161c6f92ac, []int{32}
}

func (m *L2VpnFxc) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2VpnFxc.Unmarshal(m, b)
}
func (m *L2VpnFxc) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2VpnFxc.Marshal(b, m, deterministic)
}
func (m *L2VpnFxc) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2VpnFxc.Merge(m, src)
}
func (m *L2VpnFxc) XXX_Size() int {
	return xxx_messageInfo_L2VpnFxc.Size(m)
}
func (m *L2VpnFxc) XXX_DiscardUnknown() {
	xxx_messageInfo_L2VpnFxc.DiscardUnknown(m)
}

var xxx_messageInfo_L2VpnFxc proto.InternalMessageInfo

func (m *L2VpnFxc) GetFxcId() uint32 {
	if m != nil {
		return m.FxcId
	}
	return 0
}

func (m *L2VpnFxc) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *L2VpnFxc) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *L2VpnFxc) GetNumPWs() uint32 {
	if m != nil {
		return m.NumPWs
	}
	return 0
}

func (m *L2VpnFxc) GetPseudowire() []*L2VpnPw {
	if m != nil {
		return m.Pseudowire
	}
	return nil
}

func init() {
	proto.RegisterType((*L2VpnFxc_KEYS)(nil), "cisco_ios_xr_l2vpn_oper.l2vpnv2.standby.flexible_xconnect_services.flexible_xconnect_service.flexible_xconnect_service_info.l2vpn_fxc_KEYS")
	proto.RegisterType((*L2VpnPeer)(nil), "cisco_ios_xr_l2vpn_oper.l2vpnv2.standby.flexible_xconnect_services.flexible_xconnect_service.flexible_xconnect_service_info.l2vpn_peer")
	proto.RegisterType((*L2VpnVplsIdAuto)(nil), "cisco_ios_xr_l2vpn_oper.l2vpnv2.standby.flexible_xconnect_services.flexible_xconnect_service.flexible_xconnect_service_info.l2vpn_vpls_id_auto")
	proto.RegisterType((*L2VpnVplsId_2ByteAs)(nil), "cisco_ios_xr_l2vpn_oper.l2vpnv2.standby.flexible_xconnect_services.flexible_xconnect_service.flexible_xconnect_service_info.l2vpn_vpls_id_2byte_as")
	proto.RegisterType((*L2VpnVplsIdV4Addr)(nil), "cisco_ios_xr_l2vpn_oper.l2vpnv2.standby.flexible_xconnect_services.flexible_xconnect_service.flexible_xconnect_service_info.l2vpn_vpls_id_v4addr")
	proto.RegisterType((*L2VpnVplsId)(nil), "cisco_ios_xr_l2vpn_oper.l2vpnv2.standby.flexible_xconnect_services.flexible_xconnect_service.flexible_xconnect_service_info.l2vpn_vpls_id")
	proto.RegisterType((*L2FibStatsBagMspw)(nil), "cisco_ios_xr_l2vpn_oper.l2vpnv2.standby.flexible_xconnect_services.flexible_xconnect_service.flexible_xconnect_service_info.l2fib_stats_bag_mspw")
	proto.RegisterType((*L2VpnAtom)(nil), "cisco_ios_xr_l2vpn_oper.l2vpnv2.standby.flexible_xconnect_services.flexible_xconnect_service.flexible_xconnect_service_info.l2vpn_atom")
	proto.RegisterType((*L2VpnL2Tpv3)(nil), "cisco_ios_xr_l2vpn_oper.l2vpnv2.standby.flexible_xconnect_services.flexible_xconnect_service.flexible_xconnect_service_info.l2vpn_l2tpv3")
	proto.RegisterType((*L2VpnEncapPw)(nil), "cisco_ios_xr_l2vpn_oper.l2vpnv2.standby.flexible_xconnect_services.flexible_xconnect_service.flexible_xconnect_service_info.l2vpn_encap_pw")
	proto.RegisterType((*L2VpnEthernet)(nil), "cisco_ios_xr_l2vpn_oper.l2vpnv2.standby.flexible_xconnect_services.flexible_xconnect_service.flexible_xconnect_service_info.l2vpn_ethernet")
	proto.RegisterType((*L2VpnEfpRange)(nil), "cisco_ios_xr_l2vpn_oper.l2vpnv2.standby.flexible_xconnect_services.flexible_xconnect_service.flexible_xconnect_service_info.l2vpn_efp_range")
	proto.RegisterType((*L2VpnVlan)(nil), "cisco_ios_xr_l2vpn_oper.l2vpnv2.standby.flexible_xconnect_services.flexible_xconnect_service.flexible_xconnect_service_info.l2vpn_vlan")
	proto.RegisterType((*L2VpnTdmOption)(nil), "cisco_ios_xr_l2vpn_oper.l2vpnv2.standby.flexible_xconnect_services.flexible_xconnect_service.flexible_xconnect_service_info.l2vpn_tdm_option")
	proto.RegisterType((*L2VpnTdm)(nil), "cisco_ios_xr_l2vpn_oper.l2vpnv2.standby.flexible_xconnect_services.flexible_xconnect_service.flexible_xconnect_service_info.l2vpn_tdm")
	proto.RegisterType((*L2VpnAtm)(nil), "cisco_ios_xr_l2vpn_oper.l2vpnv2.standby.flexible_xconnect_services.flexible_xconnect_service.flexible_xconnect_service_info.l2vpn_atm")
	proto.RegisterType((*L2VpnFr)(nil), "cisco_ios_xr_l2vpn_oper.l2vpnv2.standby.flexible_xconnect_services.flexible_xconnect_service.flexible_xconnect_service_info.l2vpn_fr")
	proto.RegisterType((*InterfacesItem)(nil), "cisco_ios_xr_l2vpn_oper.l2vpnv2.standby.flexible_xconnect_services.flexible_xconnect_service.flexible_xconnect_service_info.interfaces_item")
	proto.RegisterType((*ItemIflistIfl)(nil), "cisco_ios_xr_l2vpn_oper.l2vpnv2.standby.flexible_xconnect_services.flexible_xconnect_service.flexible_xconnect_service_info.item_iflist_ifl")
	proto.RegisterType((*L2VpnPwhe)(nil), "cisco_ios_xr_l2vpn_oper.l2vpnv2.standby.flexible_xconnect_services.flexible_xconnect_service.flexible_xconnect_service_info.l2vpn_pwhe")
	proto.RegisterType((*L2VpnInterfaceParams)(nil), "cisco_ios_xr_l2vpn_oper.l2vpnv2.standby.flexible_xconnect_services.flexible_xconnect_service.flexible_xconnect_service_info.l2vpn_interface_params")
	proto.RegisterType((*L2VpnInterface)(nil), "cisco_ios_xr_l2vpn_oper.l2vpnv2.standby.flexible_xconnect_services.flexible_xconnect_service.flexible_xconnect_service_info.l2vpn_interface")
	proto.RegisterType((*L2VpnPwMplsPrefpath)(nil), "cisco_ios_xr_l2vpn_oper.l2vpnv2.standby.flexible_xconnect_services.flexible_xconnect_service.flexible_xconnect_service_info.l2vpn_pw_mpls_prefpath")
	proto.RegisterType((*L2VpnMsPwTlvInfo)(nil), "cisco_ios_xr_l2vpn_oper.l2vpnv2.standby.flexible_xconnect_services.flexible_xconnect_service.flexible_xconnect_service_info.l2vpn_ms_pw_tlv_info")
	proto.RegisterType((*L2VpnMsPw)(nil), "cisco_ios_xr_l2vpn_oper.l2vpnv2.standby.flexible_xconnect_services.flexible_xconnect_service.flexible_xconnect_service_info.l2vpn_ms_pw")
	proto.RegisterType((*L2FibStatsBagCounters)(nil), "cisco_ios_xr_l2vpn_oper.l2vpnv2.standby.flexible_xconnect_services.flexible_xconnect_service.flexible_xconnect_service_info.l2fib_stats_bag_counters")
	proto.RegisterType((*L2FibStatsBagImp)(nil), "cisco_ios_xr_l2vpn_oper.l2vpnv2.standby.flexible_xconnect_services.flexible_xconnect_service.flexible_xconnect_service_info.l2fib_stats_bag_imp")
	proto.RegisterType((*L2FibStatsBagDisp)(nil), "cisco_ios_xr_l2vpn_oper.l2vpnv2.standby.flexible_xconnect_services.flexible_xconnect_service.flexible_xconnect_service_info.l2fib_stats_bag_disp")
	proto.RegisterType((*L2FibStatsBagSeqNum)(nil), "cisco_ios_xr_l2vpn_oper.l2vpnv2.standby.flexible_xconnect_services.flexible_xconnect_service.flexible_xconnect_service_info.l2fib_stats_bag_seq_num")
	proto.RegisterType((*L2FibStatsBagForwarding)(nil), "cisco_ios_xr_l2vpn_oper.l2vpnv2.standby.flexible_xconnect_services.flexible_xconnect_service.flexible_xconnect_service_info.l2fib_stats_bag_forwarding")
	proto.RegisterType((*L2VpnP2MpPw)(nil), "cisco_ios_xr_l2vpn_oper.l2vpnv2.standby.flexible_xconnect_services.flexible_xconnect_service.flexible_xconnect_service_info.l2vpn_p2mp_pw")
	proto.RegisterType((*L2VpnPw)(nil), "cisco_ios_xr_l2vpn_oper.l2vpnv2.standby.flexible_xconnect_services.flexible_xconnect_service.flexible_xconnect_service_info.l2vpn_pw")
	proto.RegisterType((*L2VpnFxc)(nil), "cisco_ios_xr_l2vpn_oper.l2vpnv2.standby.flexible_xconnect_services.flexible_xconnect_service.flexible_xconnect_service_info.l2vpn_fxc")
}

func init() { proto.RegisterFile("l2vpn_fxc.proto", fileDescriptor_527d8d161c6f92ac) }

var fileDescriptor_527d8d161c6f92ac = []byte{
	// 5055 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x5c, 0xdd, 0x73, 0x1c, 0xc7,
	0x71, 0xaf, 0x05, 0x40, 0xe0, 0x6e, 0x0e, 0x87, 0x8f, 0xc5, 0x07, 0x97, 0xa4, 0x48, 0x51, 0x27,
	0x52, 0xa2, 0x64, 0x91, 0x96, 0x40, 0x89, 0xb2, 0xa2, 0x28, 0x36, 0x09, 0x92, 0x12, 0x62, 0x42,
	0x84, 0x0f, 0x10, 0x95, 0x3c, 0x8d, 0xe7, 0x76, 0xe7, 0x0e, 0x53, 0xdc, 0x2f, 0xee, 0xcc, 0xdd,
	0x02, 0xce, 0xb3, 0xe2, 0x24, 0x76, 0xca, 0x51, 0x39, 0x71, 0xca, 0x95, 0xbc, 0x24, 0xa5, 0x4a,
	0xb9, 0xe2, 0xb8, 0x52, 0x29, 0xab, 0xf2, 0xe5, 0x72, 0x52, 0x79, 0x49, 0xe5, 0xc3, 0x79, 0xc8,
	0x53, 0xaa, 0xf2, 0x0f, 0xe4, 0x7f, 0xc8, 0x53, 0x6a, 0xba, 0x67, 0x67, 0x77, 0x0f, 0x60, 0xc5,
	0x6f, 0x5e, 0x3e, 0x61, 0xaf, 0xa7, 0x7b, 0xe6, 0x37, 0x3d, 0x33, 0xdd, 0x3d, 0x33, 0x3d, 0x20,
	0xcb, 0xe1, 0xd6, 0x24, 0x8d, 0xe9, 0xf0, 0xc8, 0xbf, 0x91, 0x66, 0x89, 0x4a, 0xdc, 0xdf, 0xf0,
	0x85, 0xf4, 0x13, 0x2a, 0x12, 0x49, 0x8f, 0x32, 0x8a, 0xa5, 0x49, 0xca, 0xb3, 0x1b, 0xf0, 0x39,
	0xd9, 0xba, 0x21, 0x15, 0x8b, 0x83, 0xc1, 0xf1, 0x8d, 0x61, 0xc8, 0x8f, 0xc4, 0x20, 0xe4, 0xf4,
	0xc8, 0x4f, 0xe2, 0x98, 0xfb, 0x8a, 0x4a, 0x9e, 0x4d, 0x84, 0xcf, 0xe5, 0xd3, 0x8b, 0x9e, 0x5e,
	0x42, 0x45, 0x3c, 0x4c, 0x7a, 0x57, 0xc8, 0x92, 0xc5, 0x43, 0xbf, 0x7a, 0xef, 0xd7, 0xf7, 0x5d,
	0x97, 0xcc, 0xc5, 0x2c, 0xe2, 0x9e, 0x73, 0xd9, 0xb9, 0xd6, 0xee, 0xc3, 0x77, 0xef, 0x5b, 0x0e,
	0x21, 0xc8, 0x96, 0x72, 0x9e, 0x69, 0x16, 0x75, 0x9c, 0x5a, 0x16, 0xfd, 0xed, 0x5e, 0x26, 0x8b,
	0x22, 0x9d, 0xbc, 0x09, 0x0c, 0x54, 0x04, 0xde, 0x0c, 0x94, 0x11, 0x4d, 0xdb, 0xe3, 0x3c, 0xdb,
	0x09, 0x0c, 0xc7, 0x2d, 0xcb, 0x31, 0x6b, 0x39, 0x6e, 0x19, 0x8e, 0xab, 0x64, 0x49, 0xc4, 0x8a,
	0x67, 0x31, 0x0b, 0x69, 0xc8, 0x06, 0x3c, 0xf4, 0xe6, 0x2e, 0x3b, 0xd7, 0xba, 0xfd, 0x6e, 0x41,
	0x7d, 0xa0, 0x89, 0xbd, 0xf7, 0x88, 0x8b, 0x60, 0x26, 0x69, 0x28, 0xa9, 0x08, 0x28, 0x1b, 0xab,
	0xc4, 0x5d, 0x21, 0xb3, 0x4c, 0xc6, 0x80, 0xa9, 0xdb, 0xd7, 0x9f, 0xee, 0x06, 0x99, 0xd7, 0x5c,
	0x06, 0x4c, 0xb7, 0x7f, 0x66, 0x92, 0xc6, 0x3b, 0x41, 0xef, 0xeb, 0x64, 0xb3, 0x2e, 0xbe, 0x35,
	0x38, 0x56, 0x9c, 0x32, 0xe9, 0x5e, 0x22, 0x1d, 0x95, 0x27, 0xd4, 0xfc, 0x34, 0x55, 0xb5, 0x55,
	0x9e, 0xdc, 0x39, 0x56, 0xfc, 0xb6, 0x74, 0x5f, 0x22, 0xcb, 0xc3, 0x64, 0x9c, 0x21, 0x83, 0x88,
	0x03, 0x7e, 0x64, 0x6a, 0xee, 0x6a, 0xb2, 0x66, 0xda, 0xd1, 0xc4, 0x1e, 0x25, 0xeb, 0xf5, 0x16,
	0x26, 0x6f, 0xb2, 0x20, 0xc8, 0xdc, 0x17, 0x8c, 0x8e, 0xf4, 0x0f, 0x2e, 0xa5, 0xd1, 0x5f, 0x47,
	0xd3, 0x6e, 0x23, 0xc9, 0xbd, 0x42, 0x96, 0x2c, 0x84, 0x6a, 0x0b, 0x8b, 0x06, 0x05, 0x36, 0xf0,
	0xd3, 0x39, 0xd2, 0xad, 0xb5, 0xa0, 0x95, 0x5b, 0x34, 0x56, 0x19, 0x1a, 0xa2, 0x69, 0x3b, 0xc1,
	0x81, 0x1e, 0xa0, 0xcf, 0x1c, 0x32, 0xa7, 0x15, 0x05, 0x15, 0x76, 0xb6, 0xbe, 0xe3, 0xdc, 0xf8,
	0x05, 0xce, 0xbb, 0x1b, 0x27, 0x07, 0xb0, 0x0f, 0xe8, 0xdc, 0xcf, 0x9d, 0xfa, 0x20, 0xcc, 0x02,
	0xda, 0xef, 0x36, 0x09, 0x6d, 0x31, 0x5f, 0xaa, 0x53, 0xe3, 0x87, 0x0e, 0x59, 0x30, 0x23, 0x0b,
	0x93, 0xb6, 0xb3, 0xf5, 0x69, 0x93, 0x20, 0xe3, 0x04, 0xec, 0xcf, 0xe3, 0x44, 0xeb, 0x1d, 0xea,
	0x09, 0x3a, 0x14, 0x03, 0x2a, 0x15, 0x53, 0x92, 0x0e, 0xd8, 0x88, 0x46, 0x32, 0xcd, 0xdd, 0x57,
	0xc8, 0x4a, 0xc6, 0x7d, 0x2e, 0x26, 0x3c, 0xa0, 0x29, 0xf3, 0x1f, 0x73, 0x85, 0x93, 0x74, 0xae,
	0xbf, 0x5c, 0xd0, 0xf7, 0x90, 0xac, 0xd7, 0xaa, 0x65, 0xd5, 0xfa, 0x90, 0x30, 0xaf, 0xe6, 0xfa,
	0xdd, 0x82, 0xaa, 0x15, 0x23, 0x7b, 0xdf, 0x5e, 0x2a, 0x2c, 0x07, 0x53, 0x49, 0xe4, 0x6e, 0x91,
	0x0d, 0x21, 0x69, 0x2a, 0xf9, 0x38, 0x48, 0x72, 0x91, 0x71, 0x7a, 0xc8, 0x59, 0xc0, 0xe3, 0x00,
	0x5a, 0x69, 0xf5, 0xd7, 0x84, 0xdc, 0xb3, 0x65, 0x1f, 0x60, 0x91, 0xfb, 0x3c, 0xe9, 0x84, 0x89,
	0x6f, 0x4d, 0x02, 0xae, 0x07, 0x02, 0x24, 0xb0, 0x07, 0x7a, 0x59, 0x65, 0x3c, 0x4a, 0x14, 0x37,
	0x1c, 0xb3, 0xc0, 0xd1, 0x41, 0x1a, 0xb2, 0x68, 0x33, 0x07, 0x75, 0x8c, 0xb2, 0x64, 0x9c, 0x6a,
	0x93, 0x80, 0x96, 0x65, 0x11, 0xa8, 0xef, 0x6b, 0xe2, 0x4e, 0xa0, 0xd7, 0xb7, 0xa9, 0xc8, 0xb2,
	0x9d, 0xc1, 0xf5, 0x8d, 0xe4, 0x82, 0xaf, 0x47, 0xba, 0x58, 0x9b, 0x3f, 0xc1, 0xd5, 0x36, 0x8f,
	0x2d, 0x02, 0x71, 0x7b, 0x02, 0xcb, 0xad, 0xe4, 0xa1, 0x3e, 0xf0, 0x2c, 0x54, 0x79, 0xb6, 0xc1,
	0x66, 0x5e, 0xd1, 0x3a, 0x84, 0xf6, 0x8a, 0x8a, 0x5a, 0x88, 0x0a, 0xa9, 0xa6, 0xa6, 0x0a, 0x97,
	0xa9, 0xaa, 0x5d, 0xe3, 0xc2, 0xba, 0x2e, 0x12, 0x54, 0x09, 0x9d, 0x70, 0x11, 0x78, 0x04, 0x4d,
	0x17, 0x50, 0x1e, 0x71, 0x01, 0x4a, 0x34, 0x95, 0x40, 0x79, 0x07, 0x95, 0x88, 0x24, 0x60, 0xb0,
	0xf2, 0xbe, 0x2e, 0x5f, 0xac, 0xc8, 0x6f, 0xd7, 0xe5, 0xa1, 0xbc, 0x5b, 0x95, 0x07, 0x86, 0xab,
	0x64, 0x49, 0x26, 0xe3, 0xcc, 0xe7, 0xd6, 0xba, 0x2d, 0x81, 0x09, 0xea, 0x22, 0xb5, 0xb0, 0x6f,
	0x5b, 0x64, 0xc3, 0xd4, 0x33, 0xc5, 0xbd, 0x0c, 0xdc, 0x6b, 0x58, 0xb8, 0x5f, 0x93, 0xb9, 0x4c,
	0x16, 0xcd, 0x04, 0x08, 0x60, 0x4c, 0x56, 0xd0, 0xb6, 0xe1, 0x0c, 0x08, 0xcc, 0x80, 0x14, 0x33,
	0x00, 0x59, 0x56, 0xd1, 0xb2, 0x9a, 0x29, 0x00, 0x3c, 0x2e, 0x99, 0x93, 0x4c, 0x08, 0xcf, 0x45,
	0xa7, 0xa5, 0xbf, 0xc1, 0x91, 0x69, 0xda, 0x9a, 0x71, 0x64, 0x9a, 0xf6, 0x03, 0x87, 0x60, 0xbf,
	0x29, 0x1b, 0x09, 0x6f, 0x1d, 0xd6, 0xf2, 0xef, 0x34, 0x68, 0x2d, 0xf7, 0x5b, 0x80, 0xee, 0xf6,
	0x48, 0xb8, 0x7f, 0xee, 0x10, 0x33, 0x04, 0x80, 0x75, 0xa3, 0x79, 0x58, 0xdb, 0x08, 0x4f, 0x83,
	0xed, 0x91, 0xae, 0x90, 0x54, 0x32, 0x41, 0x85, 0x9e, 0xb0, 0x5b, 0xde, 0x26, 0x2c, 0xf9, 0x8e,
	0x90, 0xfb, 0x4c, 0xec, 0x00, 0xc9, 0x7d, 0x85, 0xac, 0xa2, 0xea, 0xf5, 0xe8, 0xd0, 0xd1, 0x20,
	0xd4, 0x63, 0x79, 0x16, 0xe6, 0x1a, 0xae, 0xdf, 0x7d, 0x26, 0xc4, 0xfb, 0x83, 0x10, 0xd7, 0x6a,
	0xc9, 0xca, 0x7c, 0xcd, 0xe8, 0xe1, 0x5a, 0xb5, 0x8c, 0xcc, 0xc7, 0xa9, 0x21, 0x24, 0x55, 0x65,
	0xb3, 0xe7, 0x8a, 0x66, 0x0f, 0x4e, 0x36, 0xab, 0x2a, 0xcd, 0x9e, 0xaf, 0x34, 0x7b, 0x70, 0xb2,
	0x59, 0x65, 0x9b, 0xbd, 0x50, 0x69, 0xf6, 0xa0, 0x68, 0xf6, 0x2a, 0x98, 0x92, 0x5a, 0x3f, 0x9e,
	0xb3, 0xab, 0xb6, 0xec, 0x05, 0x4e, 0xdc, 0x4a, 0x1f, 0x2e, 0x5a, 0xdb, 0xb5, 0x3f, 0x55, 0x55,
	0x15, 0xdb, 0x25, 0x5b, 0xd5, 0xc1, 0x74, 0x55, 0x25, 0xae, 0xe7, 0x6d, 0x55, 0x16, 0xd5, 0x39,
	0xd2, 0x2a, 0x9a, 0xf3, 0x2e, 0xc3, 0x9c, 0x5f, 0x30, 0x2d, 0x15, 0x45, 0xb0, 0x1c, 0x5e, 0xb0,
	0x45, 0x5a, 0xd2, 0x7d, 0x8d, 0xb8, 0xa1, 0x0c, 0x68, 0xc6, 0xf3, 0x4c, 0x28, 0x4e, 0x87, 0x4c,
	0x84, 0x3c, 0xf0, 0x7a, 0xa0, 0xc7, 0x95, 0x50, 0x06, 0x7d, 0x2c, 0xb8, 0x0f, 0x74, 0xf7, 0x36,
	0xb9, 0xa8, 0x17, 0x21, 0x98, 0x62, 0xca, 0x82, 0x09, 0xcf, 0x94, 0x90, 0x11, 0x8f, 0x55, 0x21,
	0xf8, 0x22, 0x08, 0x9e, 0x0f, 0x83, 0x14, 0x6c, 0xf3, 0xed, 0x0a, 0x8b, 0xa9, 0xe2, 0xbf, 0x1c,
	0x72, 0x29, 0x1a, 0x87, 0x4a, 0x50, 0xc9, 0x47, 0x20, 0x5a, 0xf1, 0x18, 0xe0, 0xb2, 0xbc, 0x2b,
	0xcd, 0xf0, 0xb1, 0x27, 0x7d, 0x68, 0xff, 0x02, 0x20, 0xdf, 0x47, 0xe0, 0xa5, 0x37, 0xdb, 0xd7,
	0x5c, 0xbd, 0x4f, 0x5b, 0x64, 0x11, 0x41, 0x86, 0x5b, 0x2a, 0x9d, 0xdc, 0x84, 0xf9, 0xb4, 0xa5,
	0x52, 0xea, 0x87, 0x4c, 0x4a, 0x5a, 0x09, 0xbc, 0xbb, 0x9a, 0xbc, 0xad, 0xa9, 0x1f, 0xb2, 0x88,
	0xbb, 0x37, 0xc8, 0x1a, 0x84, 0x8e, 0x53, 0x56, 0x13, 0xa3, 0xec, 0x55, 0x5d, 0x54, 0xb7, 0x99,
	0xc8, 0x7f, 0x6b, 0x9a, 0x7f, 0xd6, 0xf2, 0xdf, 0xaa, 0xf3, 0x5f, 0x23, 0x2b, 0x29, 0x53, 0x87,
	0x34, 0x52, 0x63, 0xca, 0x63, 0x36, 0xd0, 0x03, 0x35, 0x07, 0x03, 0xb5, 0xa4, 0xe9, 0xbb, 0x6a,
	0x7c, 0x0f, 0xa9, 0xee, 0x17, 0x88, 0x6b, 0x39, 0x23, 0x76, 0x44, 0x27, 0x2c, 0x1c, 0x73, 0xe3,
	0x27, 0x97, 0x0d, 0xef, 0x2e, 0x3b, 0x7a, 0xa4, 0xc9, 0xee, 0xab, 0x64, 0x35, 0x48, 0xf4, 0xd0,
	0x67, 0x0c, 0x07, 0x72, 0x20, 0x14, 0x78, 0xcb, 0x56, 0x7f, 0x59, 0x17, 0xdc, 0x37, 0xf4, 0x3b,
	0x42, 0xe9, 0x19, 0xa8, 0x12, 0x49, 0xa3, 0x24, 0x40, 0x67, 0xd9, 0xee, 0x2f, 0xa8, 0x44, 0xee,
	0x26, 0x01, 0xd7, 0xb1, 0xbd, 0x4a, 0xa4, 0xf1, 0x8e, 0xfa, 0x13, 0x28, 0x2a, 0x34, 0x9e, 0x50,
	0x7f, 0xea, 0x1e, 0x18, 0x83, 0xc0, 0xa5, 0x14, 0x09, 0xc4, 0xfd, 0xa4, 0x6a, 0x3a, 0x90, 0xbc,
	0x13, 0x68, 0x50, 0x85, 0x0f, 0x2a, 0x59, 0xd1, 0x23, 0x1a, 0xff, 0x5f, 0xe3, 0x35, 0x6e, 0x31,
	0x49, 0x1e, 0x0b, 0x4e, 0xa5, 0xf8, 0x06, 0x37, 0xde, 0x11, 0x0d, 0xc1, 0x36, 0xd0, 0xf7, 0xc5,
	0x37, 0xb8, 0x5e, 0x27, 0x85, 0x8f, 0xac, 0x30, 0xa3, 0xab, 0x5c, 0x31, 0xae, 0xb2, 0xe4, 0xbe,
	0x49, 0x36, 0x6b, 0x35, 0x87, 0x49, 0x6e, 0x74, 0xb9, 0x04, 0x12, 0x6b, 0x95, 0xea, 0x1f, 0x24,
	0x39, 0xea, 0xf3, 0x2d, 0x72, 0xb6, 0xde, 0x44, 0x29, 0xb5, 0x0c, 0x52, 0xeb, 0xd5, 0x76, 0xaa,
	0x62, 0xb5, 0xb6, 0x0e, 0xc5, 0xe8, 0xd0, 0x88, 0xad, 0xa0, 0x58, 0xa5, 0xb1, 0x0f, 0xc4, 0xe8,
	0x10, 0xc5, 0xde, 0x26, 0x5e, 0xbd, 0xb5, 0x8a, 0xdc, 0x2a, 0xc8, 0x6d, 0x54, 0x9b, 0x3b, 0x55,
	0x50, 0x64, 0xfe, 0x58, 0x28, 0x58, 0x24, 0x63, 0x49, 0xc7, 0x29, 0xf8, 0xdf, 0x96, 0x15, 0xc4,
	0xe2, 0x7d, 0x28, 0xfd, 0x28, 0xd5, 0xa1, 0x9c, 0x1a, 0xc7, 0x31, 0x0f, 0x41, 0x80, 0x1b, 0xc7,
	0xdc, 0x41, 0x9a, 0xe6, 0xe2, 0xee, 0x7b, 0xe4, 0x42, 0x31, 0xce, 0x7e, 0x12, 0x07, 0x2c, 0x3b,
	0xae, 0xa9, 0x7b, 0x1d, 0x70, 0x79, 0x66, 0xc8, 0x0d, 0x47, 0x45, 0xed, 0xf7, 0xc9, 0xe5, 0xa7,
	0x88, 0x97, 0xaa, 0xdc, 0x80, 0x3a, 0x9e, 0x3b, 0xad, 0x0e, 0xab, 0xd2, 0x0f, 0xc8, 0x0b, 0x4f,
	0xa9, 0xa7, 0xa2, 0xa4, 0x4d, 0xa8, 0xe8, 0xe2, 0x69, 0x15, 0x59, 0x65, 0xf5, 0xfe, 0x77, 0xa6,
	0xd8, 0x83, 0xf3, 0xd8, 0x67, 0x29, 0x4d, 0x73, 0xf7, 0x0a, 0xe9, 0xc2, 0xb7, 0x1c, 0x87, 0x4c,
	0x89, 0x24, 0x2e, 0x6c, 0x42, 0x8d, 0xe8, 0xfe, 0xb1, 0xde, 0xd1, 0xa9, 0x24, 0x32, 0x3b, 0xba,
	0x6f, 0x36, 0xc1, 0xf1, 0x6b, 0x3c, 0x7d, 0x40, 0xe5, 0xfe, 0xa9, 0x43, 0xe6, 0xd1, 0xca, 0x99,
	0x4d, 0xdc, 0x6f, 0x37, 0x01, 0x20, 0x22, 0xea, 0x1b, 0x64, 0xbd, 0xb7, 0xac, 0xee, 0xd5, 0x21,
	0xcf, 0x62, 0xae, 0xdc, 0x17, 0x49, 0xd7, 0xca, 0x2b, 0x36, 0x2a, 0x8e, 0x01, 0x16, 0x0b, 0xe2,
	0x01, 0x1b, 0xc9, 0xde, 0x7b, 0xc5, 0x31, 0x0e, 0x1f, 0xa6, 0x34, 0x63, 0xf1, 0x88, 0xbb, 0xeb,
	0xe4, 0x4c, 0x98, 0xe4, 0x3c, 0x33, 0xfc, 0xf8, 0x43, 0x53, 0xc7, 0x69, 0xca, 0xb3, 0xe2, 0x08,
	0x02, 0x7e, 0xf4, 0xbe, 0x37, 0x5b, 0xec, 0x8a, 0x26, 0x21, 0x8b, 0x7f, 0xae, 0x26, 0xb5, 0x7d,
	0xd3, 0xcc, 0xd6, 0x0d, 0x2b, 0x36, 0x32, 0x95, 0x2e, 0x69, 0xba, 0x71, 0xc2, 0x07, 0x6c, 0xa4,
	0x43, 0x79, 0x29, 0xa2, 0x34, 0xe4, 0x1a, 0x9d, 0xd9, 0x0d, 0xb5, 0x91, 0x72, 0x6f, 0x98, 0xba,
	0xd7, 0x89, 0x5b, 0x9b, 0x47, 0xb8, 0xf3, 0xc0, 0xfd, 0xd0, 0x6a, 0xad, 0x04, 0xb6, 0x1f, 0x17,
	0x48, 0x3b, 0x19, 0x2b, 0x9e, 0x41, 0x83, 0x68, 0xe6, 0x5b, 0x40, 0xd0, 0x4d, 0xfd, 0x85, 0x43,
	0x08, 0xa2, 0xd2, 0x3a, 0xf0, 0xe6, 0x2f, 0xcf, 0x5e, 0xeb, 0x6c, 0x7d, 0xbb, 0x09, 0xe3, 0x6c,
	0x07, 0xa6, 0xdf, 0x06, 0xf5, 0xc0, 0x18, 0xc1, 0x2e, 0xa6, 0x54, 0xdf, 0xc2, 0xe5, 0x59, 0xdc,
	0xc5, 0x14, 0xaa, 0xeb, 0xfd, 0xeb, 0x0c, 0x59, 0x41, 0x79, 0x15, 0x44, 0x34, 0x49, 0x61, 0x9d,
	0xbd, 0x48, 0xba, 0x29, 0x3b, 0x0e, 0x13, 0x56, 0xec, 0x74, 0xcd, 0xf0, 0x18, 0x22, 0x6c, 0x74,
	0xb5, 0xf7, 0x1a, 0x08, 0x45, 0x33, 0x6d, 0xb5, 0x70, 0x58, 0x16, 0x06, 0x42, 0xf5, 0xb5, 0xc5,
	0x5a, 0x21, 0xb3, 0x99, 0x4a, 0x8d, 0xef, 0xd5, 0x9f, 0x7a, 0xb3, 0xa4, 0x44, 0xc4, 0xa5, 0x62,
	0x51, 0x8a, 0x0e, 0x6f, 0x0e, 0x17, 0xb8, 0xa5, 0x82, 0xdb, 0xbb, 0x4e, 0x5c, 0x29, 0x46, 0x31,
	0x0b, 0x43, 0x11, 0x8f, 0xec, 0x86, 0x1c, 0xc7, 0x60, 0xb5, 0x2c, 0x29, 0xb6, 0xe4, 0x2b, 0x64,
	0xd6, 0x67, 0xd2, 0x6c, 0x46, 0xf5, 0x27, 0xb8, 0x0b, 0x95, 0xe2, 0x26, 0x3b, 0xa3, 0x45, 0x27,
	0x2a, 0xdb, 0xd1, 0xf5, 0x4c, 0xa5, 0xb0, 0xcf, 0xce, 0xf6, 0xb0, 0x10, 0x86, 0xfc, 0x75, 0xb2,
	0x5e, 0xc2, 0xf3, 0xc3, 0xc4, 0x7f, 0x4c, 0x87, 0x19, 0x7f, 0x62, 0xfc, 0xaf, 0x6b, 0xcb, 0xb6,
	0x75, 0xd1, 0xfd, 0x8c, 0x3f, 0x81, 0xcd, 0x95, 0xcc, 0x7c, 0xe3, 0x8f, 0xe1, 0xbb, 0xf7, 0xd9,
	0x0c, 0x69, 0x5b, 0x5d, 0xda, 0x2e, 0x87, 0x89, 0xc2, 0xdd, 0x75, 0x61, 0xd3, 0x0a, 0x2a, 0x6c,
	0xae, 0xb5, 0xae, 0x2d, 0x5b, 0x45, 0x97, 0x8b, 0x05, 0x11, 0x14, 0xaa, 0x23, 0x85, 0x20, 0x42,
	0xc5, 0xcd, 0x9a, 0x48, 0x21, 0x88, 0x40, 0x65, 0x7f, 0xe9, 0x90, 0x4e, 0x39, 0x74, 0xd2, 0x9c,
	0xc5, 0xfc, 0x6e, 0x13, 0x66, 0x64, 0x09, 0xab, 0x4f, 0x54, 0x10, 0x3d, 0x44, 0x84, 0xbd, 0xff,
	0x70, 0x0a, 0x35, 0x31, 0x15, 0x69, 0xef, 0x16, 0xb1, 0x23, 0x11, 0x8d, 0x23, 0x1a, 0x8f, 0xa3,
	0x01, 0xcf, 0xa8, 0xcf, 0xc3, 0x50, 0xe2, 0xe0, 0x07, 0x66, 0xe6, 0x79, 0x86, 0xe5, 0x43, 0xe0,
	0xd8, 0xd6, 0x0c, 0x30, 0x07, 0x02, 0xf7, 0x0e, 0xb9, 0x74, 0xaa, 0xf8, 0x38, 0x2e, 0x6a, 0x40,
	0x7d, 0x9e, 0x3f, 0x59, 0xc3, 0x47, 0xb1, 0xa9, 0xe3, 0x1c, 0x69, 0x31, 0x55, 0xd7, 0x2e, 0x53,
	0x51, 0x11, 0x87, 0x4d, 0x52, 0x61, 0x6c, 0x85, 0xfe, 0x04, 0x8a, 0x2f, 0xcc, 0x9c, 0xd4, 0x9f,
	0xbd, 0xb7, 0x49, 0xcb, 0x9c, 0x28, 0x67, 0xee, 0x59, 0xb2, 0x30, 0xcc, 0xb0, 0x26, 0x1c, 0xed,
	0xf9, 0x61, 0x06, 0x15, 0xb9, 0x64, 0x2e, 0x08, 0x7d, 0x61, 0xd0, 0xc0, 0x77, 0xef, 0x65, 0xb2,
	0x0c, 0xe7, 0xbc, 0x43, 0xe6, 0x73, 0x49, 0x85, 0xe2, 0x91, 0xb6, 0x9e, 0xe8, 0x48, 0x51, 0x1a,
	0x7f, 0xf4, 0xfe, 0x68, 0x86, 0x2c, 0xeb, 0x62, 0x2a, 0x86, 0xa1, 0x90, 0x4a, 0xff, 0x81, 0x78,
	0xb7, 0x10, 0xa6, 0x40, 0xad, 0xc4, 0xd2, 0xab, 0xb6, 0xe8, 0x81, 0x90, 0x0a, 0xe2, 0xe9, 0x57,
	0xc9, 0xea, 0x14, 0xbf, 0x3d, 0x26, 0x5e, 0xae, 0x71, 0xef, 0x04, 0xee, 0x0f, 0x1d, 0xd2, 0xb6,
	0x34, 0x6f, 0xb6, 0x09, 0x36, 0x6e, 0x4a, 0x51, 0xfd, 0x12, 0x5f, 0xef, 0x93, 0x19, 0x7b, 0x56,
	0x9f, 0x1f, 0xc2, 0x5a, 0x11, 0x52, 0x87, 0x23, 0xa2, 0x38, 0x64, 0x5b, 0x10, 0xf2, 0x91, 0xfe,
	0xe9, 0x7e, 0xee, 0x98, 0xf3, 0x76, 0xab, 0x04, 0x13, 0x49, 0xfc, 0xa2, 0x3b, 0x57, 0x1f, 0x5b,
	0x73, 0xfc, 0x5f, 0x0c, 0xc8, 0x29, 0xb7, 0x04, 0xb3, 0xa7, 0xdd, 0x12, 0xfc, 0xa8, 0x5d, 0x9c,
	0xf3, 0x97, 0x7d, 0x4c, 0x59, 0xc6, 0x22, 0x79, 0xea, 0xfd, 0xc5, 0x0f, 0x1c, 0xd2, 0x2a, 0x62,
	0x00, 0xa3, 0x86, 0x6f, 0x35, 0xc2, 0x8f, 0x19, 0x4c, 0x7d, 0x8b, 0x0e, 0xe2, 0x3e, 0xed, 0xd3,
	0x4c, 0x58, 0xd5, 0x88, 0xb8, 0x0f, 0x7c, 0x2c, 0xa0, 0x72, 0xbf, 0xef, 0x90, 0x59, 0x15, 0x44,
	0xc6, 0xf4, 0xfe, 0x66, 0x43, 0x4c, 0x6f, 0x5f, 0x63, 0x02, 0x6c, 0x4c, 0x45, 0x60, 0xaf, 0x1a,
	0x82, 0x8d, 0xa9, 0xa8, 0xaf, 0x31, 0xb9, 0xdf, 0x73, 0xc8, 0xcc, 0x30, 0x03, 0xf7, 0xdd, 0xd9,
	0xfa, 0xa4, 0x09, 0xd0, 0x86, 0x59, 0x7f, 0x66, 0x98, 0xb9, 0x3f, 0x76, 0xc8, 0x4a, 0xe5, 0x00,
	0x06, 0xe6, 0x21, 0xc4, 0x0f, 0x0d, 0x99, 0x7b, 0xda, 0xce, 0xf5, 0x97, 0x4b, 0x84, 0xf7, 0x34,
	0x40, 0xf7, 0x47, 0x0e, 0xe9, 0x56, 0x50, 0x8b, 0x1c, 0xc2, 0x97, 0x26, 0x41, 0x5e, 0x2c, 0xe1,
	0xed, 0xe4, 0xbd, 0xef, 0xce, 0x14, 0x7b, 0x0a, 0x6b, 0xaf, 0x4e, 0xbb, 0x8b, 0xd5, 0x1e, 0x37,
	0x52, 0x63, 0xe3, 0xab, 0xf4, 0xe7, 0xc9, 0xf8, 0x74, 0xf6, 0x94, 0xf8, 0xf4, 0x73, 0x87, 0x10,
	0x30, 0x7f, 0x5c, 0xf1, 0xac, 0x88, 0x8b, 0x1a, 0x71, 0xad, 0x36, 0x6d, 0x9e, 0xfb, 0x15, 0x9c,
	0xbd, 0x6f, 0xce, 0x14, 0x56, 0x3c, 0xcd, 0x69, 0x94, 0xea, 0x48, 0x28, 0xe3, 0xc3, 0x94, 0xa9,
	0x43, 0x77, 0x93, 0xcc, 0x63, 0x38, 0x55, 0xc4, 0x16, 0x26, 0x5c, 0xbf, 0x44, 0x3a, 0x31, 0x3f,
	0x52, 0xf4, 0x30, 0x49, 0xa9, 0x48, 0x8d, 0xa2, 0xda, 0x9a, 0xf4, 0x41, 0x92, 0xee, 0xa4, 0xee,
	0xbb, 0xe4, 0xbc, 0x8e, 0xff, 0xf1, 0x98, 0xa1, 0x6c, 0x1c, 0xe3, 0x25, 0xa3, 0xbb, 0xb3, 0x8a,
	0x1f, 0x00, 0xc3, 0x4e, 0x51, 0x8e, 0x91, 0x92, 0x16, 0x16, 0xe9, 0x53, 0x85, 0x31, 0x30, 0x3a,
	0x2b, 0xd2, 0xa7, 0x0a, 0xab, 0xa7, 0x0b, 0x9f, 0x31, 0x2d, 0x9f, 0x2e, 0xdc, 0xfb, 0xbe, 0x53,
	0xdc, 0x2a, 0x47, 0x52, 0x2b, 0x43, 0x85, 0x13, 0xd0, 0xa2, 0xbb, 0x46, 0xce, 0xa4, 0x39, 0x15,
	0x45, 0x70, 0x38, 0x97, 0xe6, 0x3b, 0x81, 0x9e, 0x13, 0xe6, 0x12, 0xa3, 0x76, 0x52, 0x88, 0x17,
	0x29, 0xc5, 0xa1, 0xdf, 0x55, 0x7b, 0xb3, 0x54, 0x3f, 0x1f, 0x34, 0x97, 0x29, 0xe5, 0xfd, 0x4b,
	0x27, 0xe0, 0xd2, 0xcf, 0x04, 0x6a, 0x1b, 0xb7, 0x2a, 0x55, 0x52, 0xef, 0x93, 0x59, 0xd2, 0xa9,
	0x60, 0xd3, 0x7b, 0xc6, 0x34, 0x37, 0x67, 0x3e, 0x06, 0x56, 0x2b, 0xcd, 0xf1, 0x94, 0xc7, 0xfd,
	0x4c, 0xfb, 0x87, 0x70, 0xe2, 0xcd, 0x40, 0x20, 0xd5, 0x88, 0x6b, 0xd2, 0xba, 0x46, 0xfb, 0x1a,
	0x9e, 0xfb, 0x57, 0x0e, 0x21, 0xe6, 0xd4, 0x4a, 0xa3, 0x9d, 0x6d, 0xce, 0xa5, 0xee, 0x14, 0xda,
	0x36, 0xa2, 0x3c, 0x08, 0x27, 0xbd, 0xaf, 0x13, 0x6f, 0xfa, 0x4c, 0xda, 0x4f, 0xc6, 0x7a, 0x22,
	0x49, 0xb4, 0x12, 0x7a, 0xa3, 0x88, 0xa4, 0xe2, 0x62, 0x77, 0x11, 0x89, 0xdb, 0x40, 0xd3, 0x1b,
	0x64, 0xb8, 0xdc, 0x36, 0x2c, 0x78, 0xa5, 0x4b, 0x34, 0x09, 0x19, 0x7a, 0x9f, 0x2e, 0x92, 0xb5,
	0xe9, 0x26, 0x44, 0x94, 0xba, 0xff, 0xe8, 0x90, 0x65, 0x11, 0xa5, 0x89, 0x14, 0x70, 0xa4, 0xa0,
	0x0b, 0xa1, 0x81, 0xce, 0xd6, 0x1f, 0x34, 0xeb, 0x8c, 0xbe, 0xd0, 0x47, 0x7f, 0xa9, 0x84, 0xab,
	0x27, 0xa6, 0xfb, 0xcf, 0x0e, 0x59, 0xab, 0xf4, 0x20, 0x52, 0x63, 0x1a, 0x64, 0x49, 0x6a, 0x62,
	0xc1, 0xa6, 0xf6, 0x62, 0xb5, 0x84, 0xbc, 0xab, 0xc6, 0x77, 0xb3, 0x24, 0x2d, 0x3b, 0x82, 0x87,
	0x3b, 0x4c, 0x84, 0xd8, 0x91, 0xd9, 0x67, 0xa0, 0x23, 0x70, 0xea, 0xc4, 0x44, 0x08, 0x1d, 0xf9,
	0x1b, 0x47, 0x5b, 0x95, 0xa1, 0x1c, 0x08, 0xec, 0xc0, 0x5c, 0xa3, 0x3b, 0x40, 0x10, 0x2a, 0x20,
	0xff, 0xdc, 0x21, 0x6d, 0xb8, 0x06, 0xf2, 0x99, 0x54, 0x26, 0xd8, 0x6c, 0x2a, 0xee, 0x12, 0x28,
	0xc0, 0x1e, 0x64, 0x09, 0x0b, 0x00, 0xf6, 0x7c, 0xb3, 0x61, 0x5b, 0xa0, 0xee, 0x4f, 0x1c, 0xd2,
	0x7d, 0x1c, 0x27, 0x79, 0x4c, 0xc7, 0x31, 0x6a, 0x7c, 0xa1, 0xd1, 0xd0, 0x17, 0x01, 0xec, 0x47,
	0x88, 0x15, 0x2c, 0xe7, 0x38, 0xae, 0xe3, 0x6f, 0x35, 0xdb, 0x72, 0x1a, 0xb8, 0xa6, 0x07, 0xbd,
	0xff, 0x59, 0x3b, 0x99, 0x4e, 0x14, 0x08, 0x99, 0xba, 0xff, 0xe4, 0x90, 0x15, 0xfd, 0xf1, 0x0c,
	0x79, 0x85, 0xe5, 0x0a, 0x5e, 0x70, 0x0b, 0xff, 0xe2, 0x90, 0xf5, 0x6a, 0x1f, 0x9e, 0x11, 0xbf,
	0xe0, 0x56, 0x30, 0x17, 0x8e, 0xe1, 0xdf, 0x1c, 0xb2, 0x51, 0xed, 0xca, 0xb3, 0xe2, 0x1a, 0xd6,
	0x2a, 0xa0, 0xad, 0x73, 0xf8, 0xa9, 0x43, 0x96, 0xac, 0xe5, 0x7a, 0x16, 0xfc, 0x43, 0xd7, 0xa2,
	0x05, 0xfc, 0x7f, 0xe7, 0x90, 0x45, 0xb3, 0xdc, 0x11, 0x7d, 0xb3, 0xbd, 0x44, 0xc7, 0x60, 0xb5,
	0xba, 0xb7, 0xe6, 0x17, 0xd1, 0x37, 0xdb, 0x59, 0x74, 0x2d, 0x5a, 0x8b, 0xdf, 0x26, 0x2f, 0x6a,
	0xf8, 0xb2, 0xe1, 0x1e, 0xc3, 0x26, 0x55, 0x6a, 0xf8, 0x52, 0x6f, 0x4d, 0x5a, 0x01, 0x33, 0x51,
	0x51, 0xb3, 0x7d, 0xc5, 0x42, 0xc0, 0x30, 0x24, 0xfa, 0xb1, 0x43, 0xda, 0x22, 0x95, 0x23, 0x04,
	0xdd, 0x6e, 0x34, 0xe8, 0x96, 0x06, 0x0a, 0xa8, 0xff, 0xdd, 0x21, 0x9b, 0x55, 0x93, 0x99, 0x24,
	0x34, 0x31, 0x33, 0x86, 0x3c, 0x33, 0x36, 0xf3, 0x61, 0xf2, 0x10, 0xe7, 0xcd, 0xcf, 0xa6, 0x7a,
	0x93, 0x6e, 0x45, 0xa9, 0xc9, 0xa7, 0xea, 0x34, 0xba, 0x37, 0x55, 0x0f, 0xbc, 0xb7, 0x15, 0xa5,
	0x90, 0x4c, 0x75, 0x4a, 0xdc, 0xb7, 0xf8, 0x0c, 0xc5, 0x7d, 0x7a, 0x11, 0x47, 0xcc, 0xa7, 0x51,
	0x32, 0xc1, 0x24, 0xa1, 0x06, 0x2f, 0xe2, 0x88, 0xf9, 0xbb, 0xc9, 0x84, 0xf7, 0xbe, 0x33, 0x43,
	0xce, 0x4e, 0x73, 0x49, 0xfe, 0x84, 0xc6, 0xe3, 0xc8, 0x7d, 0x9d, 0xac, 0x4b, 0xfe, 0x64, 0xcc,
	0x63, 0x7b, 0xa2, 0x45, 0x25, 0x8f, 0x95, 0x39, 0xfe, 0x71, 0x8b, 0x32, 0x3c, 0xcd, 0xda, 0xe7,
	0xb1, 0x72, 0xbf, 0x44, 0xbc, 0x69, 0x09, 0x7e, 0x94, 0x72, 0x5f, 0xd9, 0x6b, 0xca, 0xcd, 0xba,
	0xd4, 0x3d, 0x53, 0xea, 0xbe, 0x4f, 0x2e, 0x0f, 0x8e, 0x53, 0x26, 0x25, 0x0f, 0xa8, 0x88, 0x07,
	0xc9, 0x38, 0x0e, 0xa8, 0xad, 0x0a, 0x0f, 0x34, 0x20, 0xa6, 0x99, 0xeb, 0x5f, 0x2c, 0xf8, 0x76,
	0x90, 0x6d, 0xdf, 0x70, 0xe1, 0x9d, 0xb9, 0xfb, 0x65, 0xf2, 0x9c, 0xad, 0x28, 0x19, 0xab, 0x13,
	0x95, 0xcc, 0x41, 0x25, 0xe7, 0x0a, 0x9e, 0x87, 0x63, 0x55, 0xaf, 0xa0, 0xf7, 0xdf, 0x73, 0xe4,
	0xfc, 0xb4, 0x46, 0x86, 0x49, 0x96, 0xb3, 0x2c, 0x10, 0xf1, 0xc8, 0xfd, 0xfb, 0xe2, 0x58, 0xc4,
	0xc6, 0xbf, 0xd2, 0x04, 0xc0, 0xbf, 0xd7, 0xac, 0xb1, 0x16, 0x51, 0x6a, 0x4e, 0x44, 0x8a, 0xc8,
	0x57, 0x6a, 0x37, 0x69, 0xc2, 0xf7, 0x0a, 0xfa, 0x99, 0x26, 0x26, 0x5e, 0x6a, 0x94, 0x45, 0xe8,
	0x5e, 0xe2, 0xff, 0x07, 0x87, 0x2c, 0x4f, 0x4d, 0x30, 0x13, 0xe9, 0xfe, 0x7e, 0xb3, 0xe0, 0x9b,
	0x25, 0xd4, 0x5f, 0xaa, 0x4f, 0xf7, 0xde, 0x7f, 0xda, 0x67, 0x3e, 0x60, 0xa9, 0xd3, 0xdc, 0x7d,
	0xb9, 0x48, 0x3f, 0x66, 0x13, 0x26, 0x42, 0x36, 0x08, 0xb9, 0xb9, 0xd4, 0xc5, 0x1c, 0xc7, 0xdb,
	0x05, 0xf5, 0xff, 0x7f, 0x34, 0x61, 0xd3, 0x25, 0x53, 0x95, 0x71, 0x8e, 0x39, 0x21, 0x78, 0xfa,
	0x8b, 0x55, 0xed, 0x69, 0x32, 0x64, 0x83, 0x94, 0x29, 0xcf, 0xe6, 0xe0, 0xba, 0x78, 0x3c, 0x61,
	0x52, 0x9e, 0xf1, 0xb4, 0x3a, 0x70, 0xdf, 0x26, 0x98, 0x75, 0x47, 0xf9, 0x91, 0xe2, 0x71, 0xc0,
	0x83, 0x8a, 0xc0, 0x19, 0xa8, 0x79, 0x03, 0xca, 0xef, 0x99, 0x62, 0x2b, 0x68, 0x9f, 0x4a, 0x40,
	0x2f, 0x45, 0x50, 0x7b, 0x4e, 0xa1, 0xcd, 0xfd, 0x4e, 0xe5, 0x11, 0xc8, 0x30, 0x64, 0x23, 0x69,
	0xb2, 0x57, 0xb0, 0x3f, 0xf7, 0x35, 0x05, 0x9f, 0xae, 0xe0, 0x59, 0xb6, 0x55, 0x4d, 0x0b, 0x13,
	0x4d, 0xcd, 0x69, 0xb6, 0xd5, 0xcd, 0xf4, 0x7b, 0x91, 0xf6, 0xc9, 0xf7, 0x22, 0x65, 0x8a, 0x68,
	0x45, 0x3d, 0x04, 0x3a, 0x61, 0xaa, 0x2b, 0xf5, 0x73, 0xcd, 0xb6, 0x5c, 0xf6, 0x17, 0xb3, 0x49,
	0xcd, 0xe9, 0xba, 0xed, 0xe8, 0x3b, 0xe4, 0x9c, 0xe1, 0x3c, 0x45, 0x45, 0x8b, 0x50, 0xfb, 0x26,
	0x32, 0x9c, 0xd0, 0x51, 0xf9, 0x08, 0xa4, 0x50, 0x52, 0xb7, 0xfa, 0x08, 0xc4, 0x68, 0xa9, 0xec,
	0x19, 0xaa, 0x69, 0xa9, 0xda, 0x33, 0xd0, 0x53, 0xef, 0x67, 0xd7, 0x8a, 0xfc, 0x8c, 0x34, 0x77,
	0xff, 0xc4, 0x21, 0x0b, 0xc5, 0x73, 0x3c, 0xa7, 0x41, 0xb7, 0x63, 0x9c, 0x67, 0xfd, 0xf9, 0x14,
	0x1f, 0x05, 0xbe, 0x4e, 0xd6, 0x4d, 0xa2, 0xe5, 0x69, 0xa9, 0xcf, 0x2e, 0xe6, 0x56, 0xd6, 0x72,
	0x99, 0xdf, 0x21, 0xe7, 0x20, 0xf7, 0xf9, 0x54, 0x31, 0x9c, 0xe3, 0x9b, 0x9a, 0xe1, 0xc1, 0x49,
	0xd1, 0x2b, 0x64, 0x09, 0x2f, 0xe5, 0x28, 0x5e, 0x1a, 0x06, 0xc6, 0x03, 0x98, 0xab, 0xba, 0x8f,
	0x45, 0xc6, 0x77, 0x02, 0xf7, 0x12, 0xe9, 0x08, 0x49, 0xd3, 0x3c, 0xc3, 0x79, 0x71, 0x06, 0xa6,
	0x59, 0x5b, 0xc8, 0xbd, 0x3c, 0x2b, 0x66, 0x84, 0x90, 0x94, 0x6b, 0x75, 0xa5, 0xb9, 0x2c, 0x9f,
	0x08, 0xb5, 0xfa, 0x4b, 0x42, 0xde, 0x33, 0x64, 0xe0, 0x7c, 0x9e, 0x74, 0xac, 0x22, 0x44, 0x50,
	0x4c, 0xeb, 0x82, 0xb4, 0x13, 0xb8, 0xeb, 0xe4, 0x0c, 0x66, 0xc2, 0xb6, 0x30, 0x03, 0x06, 0x7e,
	0xe8, 0xe9, 0x59, 0x85, 0x89, 0x1c, 0x6d, 0x9c, 0x9e, 0x25, 0x52, 0xcc, 0x97, 0x3d, 0x4f, 0x5a,
	0xf0, 0xce, 0xd4, 0x4f, 0x42, 0x33, 0x83, 0xed, 0x6f, 0xbd, 0xf2, 0xd2, 0xbc, 0x9a, 0x7b, 0xde,
	0xc1, 0xbb, 0x9d, 0x34, 0x2f, 0x33, 0xcf, 0x9f, 0x27, 0x1d, 0xc5, 0x46, 0x45, 0xda, 0xa1, 0xc9,
	0x7d, 0x26, 0x8a, 0x8d, 0x4c, 0xc6, 0xa1, 0xdb, 0x23, 0x8b, 0x70, 0x97, 0x95, 0x27, 0xd9, 0x63,
	0x11, 0x8f, 0x60, 0x62, 0xb6, 0xfb, 0x35, 0x9a, 0x7b, 0x8e, 0xb4, 0x86, 0xdc, 0xbc, 0x5e, 0xc2,
	0x77, 0x41, 0x0b, 0x43, 0x8e, 0x0f, 0x97, 0x7a, 0xa4, 0xab, 0x35, 0x45, 0x65, 0xe6, 0x53, 0xe6,
	0x8b, 0xc0, 0x24, 0x32, 0x77, 0x34, 0x71, 0x3f, 0xf3, 0x6f, 0xfb, 0x22, 0xd0, 0x66, 0xcf, 0x98,
	0x46, 0x11, 0x8f, 0x50, 0x9f, 0xf8, 0x08, 0x68, 0xa9, 0x24, 0x83, 0x3e, 0xe1, 0x46, 0x4b, 0x1e,
	0xc7, 0xbe, 0x4d, 0x62, 0x5f, 0x05, 0xbd, 0x77, 0x91, 0x5a, 0xe4, 0xb0, 0x83, 0xb1, 0x00, 0x36,
	0x75, 0x98, 0x71, 0x79, 0x98, 0x84, 0x01, 0xe4, 0x25, 0x43, 0x02, 0xb8, 0xa6, 0x1f, 0x14, 0x64,
	0x1d, 0x64, 0x4e, 0xa5, 0x4b, 0xea, 0x89, 0x0a, 0x89, 0xc9, 0x4d, 0xc9, 0x10, 0x31, 0x59, 0xc3,
	0x53, 0xc9, 0x9b, 0x3b, 0xf1, 0x30, 0x81, 0xa7, 0x1b, 0x26, 0xf1, 0x3b, 0x56, 0x59, 0x12, 0xd2,
	0x3c, 0xc9, 0x02, 0xc8, 0x91, 0x6e, 0xf7, 0x57, 0x4c, 0xce, 0x37, 0x14, 0x7c, 0x9c, 0x64, 0x81,
	0x7b, 0x83, 0xac, 0xd9, 0x7c, 0xef, 0x0a, 0xfb, 0x06, 0x26, 0x51, 0x15, 0xa9, 0xde, 0x25, 0xbf,
	0x4d, 0x61, 0xaf, 0x4e, 0x46, 0x18, 0x9d, 0x4d, 0x7c, 0xcd, 0x85, 0x16, 0xdc, 0x4e, 0x48, 0x18,
	0xa2, 0x32, 0x85, 0xfd, 0x84, 0xd4, 0x59, 0x90, 0x32, 0x29, 0xec, 0x53, 0x62, 0x7f, 0xed, 0x14,
	0x6e, 0xa8, 0x4c, 0xc5, 0xf2, 0x9a, 0x90, 0xad, 0x34, 0x75, 0x89, 0x6d, 0xdc, 0xa7, 0xbd, 0xbd,
	0x75, 0xff, 0xd6, 0xb1, 0xfe, 0xa1, 0x44, 0x7e, 0xae, 0x89, 0xc8, 0x8d, 0x67, 0x2b, 0xa1, 0xbf,
	0x64, 0x82, 0x57, 0x1e, 0x40, 0x7e, 0x4f, 0xf9, 0x2a, 0xaa, 0x6b, 0xc8, 0x8f, 0x42, 0x16, 0xa3,
	0xdb, 0x51, 0x22, 0xe2, 0xd4, 0xcf, 0x38, 0xd3, 0xc1, 0xfb, 0x05, 0x93, 0xb5, 0x2f, 0x22, 0xbe,
	0x8d, 0x24, 0x77, 0x8b, 0x6c, 0x00, 0x0b, 0x0f, 0x59, 0xaa, 0xeb, 0x03, 0x56, 0x91, 0xc4, 0xf0,
	0x2a, 0xaa, 0xdd, 0x5f, 0xd3, 0x85, 0xf7, 0xb0, 0x6c, 0xdb, 0x14, 0x41, 0x40, 0xc1, 0xa4, 0xa2,
	0x20, 0x68, 0xae, 0x62, 0xfd, 0x43, 0x16, 0x8f, 0x38, 0xbe, 0x93, 0xd2, 0x01, 0x05, 0x93, 0xea,
	0x40, 0x44, 0x1c, 0xaf, 0x96, 0xb7, 0xb1, 0xd0, 0x7d, 0x8f, 0x5c, 0xa8, 0x35, 0x36, 0x25, 0x7b,
	0x09, 0x64, 0xbd, 0x4a, 0x93, 0x75, 0xf1, 0x37, 0xc8, 0xc6, 0x89, 0x76, 0x83, 0x24, 0x8f, 0xe1,
	0x45, 0x95, 0x76, 0x39, 0xb5, 0x46, 0xef, 0x26, 0x39, 0x40, 0x3d, 0xad, 0x45, 0x90, 0xba, 0x8c,
	0x2f, 0x25, 0x4e, 0x34, 0x07, 0x82, 0xe7, 0x49, 0x4b, 0x1e, 0x8e, 0x15, 0x30, 0xbe, 0x00, 0xa6,
	0xca, 0xfe, 0xd6, 0xdd, 0x98, 0x5e, 0x22, 0x34, 0x12, 0x32, 0x62, 0xca, 0x3f, 0xb4, 0x0f, 0xb0,
	0xbc, 0xb4, 0xb6, 0x4e, 0x76, 0x6d, 0xb9, 0xde, 0x5e, 0xd5, 0xd2, 0x42, 0xaa, 0xb2, 0xf8, 0x06,
	0x6b, 0xb3, 0x9a, 0x21, 0x52, 0x91, 0xbc, 0x4e, 0xdc, 0x81, 0x50, 0x19, 0x53, 0xb5, 0xf6, 0xae,
	0x80, 0xcc, 0xaa, 0x29, 0xa9, 0xb0, 0x6b, 0xa3, 0xab, 0xd2, 0x2a, 0xeb, 0x55, 0x63, 0x74, 0x55,
	0x5a, 0x61, 0x7b, 0x8d, 0xb8, 0x81, 0x18, 0x0e, 0xa9, 0xaa, 0x21, 0x79, 0x09, 0x9f, 0x91, 0xe9,
	0x92, 0x83, 0x2a, 0x86, 0x1b, 0x64, 0x4d, 0x8a, 0x11, 0x4d, 0x1f, 0xd7, 0xd9, 0x5f, 0x46, 0x10,
	0x52, 0x8c, 0xf6, 0x1e, 0x2b, 0x59, 0x07, 0xe1, 0xb3, 0x1a, 0xeb, 0x35, 0x04, 0xe1, 0xb3, 0x2a,
	0xdb, 0x2d, 0x72, 0xb6, 0x9a, 0x06, 0x5d, 0xe5, 0x7f, 0x05, 0x1f, 0xa6, 0xa4, 0x65, 0x22, 0x74,
	0x45, 0xee, 0x65, 0xb2, 0x3c, 0xcc, 0xf8, 0x93, 0x2a, 0xff, 0xab, 0xe8, 0xd1, 0x35, 0xb9, 0xce,
	0x28, 0xb5, 0x2b, 0xab, 0x30, 0x7e, 0x01, 0x19, 0x35, 0xb9, 0x0e, 0x18, 0x9e, 0x50, 0x95, 0x7c,
	0xaf, 0x21, 0xe0, 0x48, 0x8d, 0x2b, 0x6c, 0xaf, 0x93, 0x75, 0x11, 0x86, 0x7c, 0x34, 0x6d, 0xc3,
	0xaf, 0x03, 0xb3, 0x6b, 0xca, 0xaa, 0x56, 0xf9, 0x0a, 0x59, 0x62, 0x01, 0x35, 0x26, 0x07, 0x26,
	0xd6, 0x0d, 0xe0, 0x5d, 0x64, 0x41, 0x1f, 0x88, 0x30, 0xf1, 0x5e, 0x23, 0x6e, 0x9c, 0x28, 0x2a,
	0xc7, 0x69, 0x9a, 0x64, 0x8a, 0x07, 0xf4, 0x89, 0x88, 0x9f, 0x78, 0x5f, 0xc4, 0xd1, 0x88, 0x13,
	0xb5, 0x5f, 0x14, 0x7c, 0x4d, 0xc4, 0x4f, 0x4a, 0x3f, 0x82, 0xcf, 0xfa, 0xcc, 0x4b, 0xbe, 0xd7,
	0xcd, 0x13, 0x40, 0xbb, 0xab, 0x30, 0xef, 0xf7, 0x4a, 0x3f, 0x52, 0x63, 0x7f, 0x03, 0xc7, 0xae,
	0x12, 0x67, 0x1b, 0xfe, 0x9f, 0x38, 0x64, 0x29, 0xcd, 0xf8, 0x90, 0x67, 0x19, 0x3c, 0x3c, 0x57,
	0x87, 0xde, 0x56, 0x73, 0xf2, 0x93, 0xa6, 0x13, 0x8f, 0xfa, 0x5d, 0x8b, 0x75, 0x8f, 0xa9, 0x43,
	0xf7, 0x1e, 0x79, 0xbe, 0x0e, 0x5e, 0x6f, 0x47, 0x75, 0x9c, 0x41, 0x87, 0x2c, 0x0c, 0x07, 0xcc,
	0x7f, 0xec, 0xdd, 0x84, 0x9e, 0x3f, 0x57, 0x93, 0xbb, 0x8b, 0x4c, 0xf7, 0x0d, 0x8f, 0x7b, 0x81,
	0xb4, 0xf5, 0xdf, 0xb1, 0x76, 0xe5, 0xde, 0x9b, 0x68, 0x0a, 0x90, 0xb0, 0x97, 0xbb, 0x17, 0x09,
	0x49, 0x33, 0x11, 0xb1, 0xec, 0x58, 0x97, 0xbe, 0x85, 0x01, 0xa7, 0xa1, 0xec, 0xe5, 0xee, 0x8b,
	0xa4, 0x6b, 0x64, 0x99, 0xaf, 0xc4, 0x84, 0x7b, 0xb7, 0x70, 0xc4, 0x91, 0x78, 0x1b, 0x68, 0x7a,
	0x54, 0x0c, 0xd3, 0x30, 0x81, 0x88, 0x18, 0x59, 0xdf, 0x36, 0xcb, 0x1a, 0x8a, 0xee, 0xeb, 0x12,
	0xc3, 0xff, 0x22, 0xe9, 0x16, 0x1d, 0x89, 0xf9, 0x84, 0x67, 0xde, 0x97, 0xb0, 0x52, 0x43, 0xfc,
	0x50, 0xd3, 0xaa, 0x4c, 0x01, 0x0f, 0xd9, 0xb1, 0xf7, 0x0e, 0x6e, 0x4b, 0x0c, 0xf1, 0xae, 0xa6,
	0x69, 0x3f, 0x62, 0xd1, 0x9b, 0xdd, 0xc6, 0x2f, 0x61, 0xa2, 0x51, 0xd1, 0x05, 0x0c, 0xf5, 0x6f,
	0x92, 0x4d, 0xcb, 0x57, 0x8f, 0xc2, 0xdf, 0x85, 0x28, 0x7c, 0xad, 0x60, 0xaf, 0x06, 0xe3, 0xf7,
	0xc9, 0x65, 0x73, 0x78, 0x14, 0x31, 0xea, 0xe7, 0x42, 0x1d, 0x06, 0x19, 0xcb, 0x69, 0xc4, 0xa5,
	0x64, 0x23, 0x8e, 0x67, 0x50, 0xbf, 0x8c, 0x0f, 0xba, 0x90, 0x6f, 0x97, 0x6d, 0x17, 0x5c, 0xbb,
	0xc8, 0x04, 0xa7, 0x51, 0x5f, 0x21, 0x17, 0xe3, 0x71, 0x34, 0x55, 0x89, 0xd4, 0x81, 0x2f, 0x1e,
	0xbd, 0x7b, 0xef, 0x41, 0x25, 0xe7, 0xe2, 0x71, 0x54, 0xad, 0x41, 0x8e, 0xfa, 0x86, 0xc1, 0xbd,
	0x4e, 0xd6, 0x92, 0xb1, 0xa2, 0xc9, 0x90, 0x46, 0x3c, 0x4a, 0xb2, 0x63, 0x13, 0x97, 0xff, 0x0a,
	0x3e, 0x00, 0x4c, 0xc6, 0xea, 0xe1, 0x70, 0x17, 0x0a, 0x30, 0x30, 0x7f, 0x8d, 0xb8, 0x2a, 0x63,
	0xb1, 0xd4, 0xcb, 0x8c, 0x86, 0x32, 0xc5, 0xb5, 0xfa, 0x65, 0x5c, 0x53, 0xb6, 0xe4, 0x81, 0x4c,
	0x61, 0xbd, 0x5e, 0x27, 0x6b, 0x11, 0xf3, 0x69, 0x28, 0x22, 0xa1, 0x60, 0x05, 0x20, 0xfb, 0x57,
	0x90, 0x3d, 0x62, 0xfe, 0x03, 0x5d, 0xf2, 0x30, 0xe5, 0x19, 0xb0, 0x63, 0x64, 0x5f, 0xbc, 0xba,
	0x93, 0xdc, 0xbb, 0x8d, 0xcf, 0x9e, 0x8b, 0x2c, 0xac, 0x8f, 0x24, 0x77, 0x3f, 0x77, 0xec, 0x93,
	0x49, 0xfb, 0x96, 0xc4, 0xbb, 0x03, 0x0b, 0xef, 0xb7, 0x1a, 0x93, 0xe7, 0x64, 0x9e, 0x59, 0xee,
	0x5b, 0x84, 0x3a, 0x12, 0xb4, 0xef, 0x37, 0x4b, 0xdc, 0xdb, 0x4d, 0xc3, 0x6d, 0x82, 0xbe, 0x0a,
	0xf0, 0xab, 0x64, 0x89, 0x8d, 0x55, 0xa2, 0xcd, 0x83, 0x9f, 0x4c, 0x78, 0x76, 0xec, 0xdd, 0x45,
	0x8b, 0xaf, 0xa9, 0x77, 0x0b, 0xa2, 0x36, 0x04, 0x2c, 0xa0, 0x11, 0x57, 0x87, 0x49, 0xe0, 0xdd,
	0xc3, 0xe4, 0x39, 0x16, 0xec, 0xc2, 0x6f, 0xed, 0x0e, 0xd2, 0xfc, 0x94, 0xd7, 0xd8, 0xf7, 0xd1,
	0x1d, 0x40, 0x59, 0xfd, 0x3d, 0xf6, 0xbb, 0xe4, 0xfc, 0xc9, 0xf7, 0xd8, 0x56, 0xee, 0x7d, 0x90,
	0x3b, 0x3b, 0xfd, 0x18, 0xbb, 0x10, 0xde, 0x20, 0xf3, 0x42, 0xd2, 0xc9, 0x50, 0x78, 0x1f, 0x00,
	0xe3, 0x19, 0x21, 0x1f, 0x0d, 0x85, 0x8e, 0x4c, 0x84, 0xa4, 0x4f, 0x7b, 0xa2, 0xed, 0xed, 0x60,
	0x64, 0x22, 0xe4, 0xee, 0xa9, 0x4f, 0xa1, 0x75, 0x80, 0x95, 0xe6, 0x34, 0xe3, 0xc1, 0x38, 0x0e,
	0x58, 0xec, 0x1f, 0xd3, 0x24, 0xe6, 0x34, 0x67, 0xc7, 0xde, 0xaf, 0x16, 0xbd, 0xe8, 0xdb, 0xb2,
	0x87, 0x31, 0xff, 0x98, 0x1d, 0xeb, 0x28, 0x1a, 0xb2, 0xf1, 0x84, 0x54, 0xc2, 0x97, 0xde, 0x57,
	0x61, 0xb4, 0xff, 0xb0, 0x59, 0xc7, 0x78, 0xe5, 0xb9, 0x6f, 0xbf, 0x82, 0x55, 0x47, 0xc7, 0x18,
	0x84, 0xb1, 0x90, 0xc5, 0x3e, 0xf7, 0x1e, 0x60, 0x74, 0x0c, 0x81, 0x17, 0x92, 0xe0, 0x4d, 0x75,
	0x4e, 0x87, 0x61, 0x92, 0x9b, 0x71, 0x82, 0xed, 0xd0, 0xae, 0xd9, 0xd0, 0xe7, 0xf7, 0xc3, 0x24,
	0x87, 0xe1, 0x81, 0x9d, 0xd0, 0x16, 0xd9, 0x3c, 0xc9, 0x4c, 0xfd, 0xe1, 0xc8, 0xfb, 0x10, 0xe3,
	0xd3, 0x29, 0x81, 0xed, 0xe1, 0x48, 0x1b, 0xb7, 0xba, 0x8c, 0x9f, 0x04, 0xfc, 0x8d, 0xb7, 0x0b,
	0x4f, 0x15, 0x78, 0x0f, 0x41, 0xf3, 0xe7, 0x2a, 0xa2, 0xdb, 0xc0, 0x61, 0xbc, 0x54, 0xe0, 0x7e,
	0x91, 0xac, 0x0b, 0x59, 0xad, 0x01, 0x7a, 0xe8, 0x7b, 0x7b, 0xe8, 0x3e, 0x84, 0xb4, 0x82, 0xfb,
	0x50, 0xa0, 0x23, 0x2d, 0x21, 0x69, 0xca, 0x32, 0x25, 0x58, 0x18, 0x1e, 0xd3, 0x34, 0x4b, 0x46,
	0x19, 0x8b, 0x22, 0x1e, 0x78, 0x5f, 0xc3, 0x48, 0x4b, 0xc8, 0xbd, 0xa2, 0x74, 0xcf, 0x16, 0x42,
	0xd4, 0x5b, 0x9b, 0x1c, 0x22, 0x16, 0x9a, 0xc9, 0xf8, 0x97, 0x3e, 0xbe, 0x80, 0xaa, 0x4e, 0x91,
	0x1d, 0x64, 0x40, 0x5f, 0xf3, 0x16, 0x39, 0x3b, 0xc8, 0x44, 0x30, 0xe2, 0x90, 0x23, 0x59, 0x0d,
	0xf1, 0xbc, 0x7d, 0x68, 0x76, 0x1d, 0x8b, 0xf7, 0xf2, 0x6a, 0x84, 0xe7, 0x7e, 0xe6, 0x90, 0x05,
	0x73, 0xc8, 0xea, 0x1d, 0x34, 0xe7, 0xff, 0x68, 0x18, 0x48, 0xfd, 0x79, 0xfd, 0xb1, 0x97, 0xe3,
	0x03, 0xc6, 0x27, 0x63, 0xa1, 0x43, 0x8d, 0x41, 0xee, 0x7d, 0x54, 0xfc, 0x1b, 0x16, 0x24, 0xdd,
	0x81, 0x40, 0x81, 0x05, 0x91, 0x50, 0x58, 0xfe, 0x08, 0x73, 0x9f, 0x0d, 0xe5, 0x0e, 0x04, 0x0a,
	0x66, 0x96, 0xe2, 0xa9, 0x8f, 0xf7, 0x31, 0xba, 0x6b, 0x43, 0x84, 0x53, 0x1f, 0xf7, 0x55, 0xb2,
	0xaa, 0xc0, 0xa3, 0xa7, 0x49, 0x28, 0xfc, 0x63, 0x3c, 0x19, 0xfa, 0x35, 0x9c, 0x8c, 0x50, 0xb0,
	0x07, 0xf4, 0x0f, 0x59, 0x04, 0x37, 0x42, 0x6d, 0xfb, 0x0f, 0xc4, 0xb4, 0xb9, 0x18, 0x1e, 0xc1,
	0x3f, 0x9f, 0xd8, 0xc2, 0xe7, 0xae, 0xc3, 0x23, 0x1f, 0xff, 0xf5, 0x0a, 0xd4, 0x71, 0xb3, 0x92,
	0xc6, 0x6e, 0x0f, 0xb6, 0xde, 0xac, 0x1e, 0x6c, 0x79, 0xa4, 0xa5, 0x9d, 0x70, 0x4a, 0x73, 0x09,
	0x51, 0x4e, 0xb7, 0x3f, 0x1f, 0x8f, 0xa3, 0xbd, 0x8f, 0xa5, 0xfb, 0x67, 0x0e, 0x21, 0x15, 0x13,
	0x73, 0x0b, 0x92, 0x87, 0x3f, 0x69, 0x46, 0x7c, 0xd8, 0xaf, 0x20, 0x1b, 0xcc, 0xc3, 0xe9, 0xda,
	0xcd, 0xff, 0x0b, 0x00, 0x00, 0xff, 0xff, 0xb5, 0x89, 0x9e, 0x50, 0xe8, 0x4d, 0x00, 0x00,
}
