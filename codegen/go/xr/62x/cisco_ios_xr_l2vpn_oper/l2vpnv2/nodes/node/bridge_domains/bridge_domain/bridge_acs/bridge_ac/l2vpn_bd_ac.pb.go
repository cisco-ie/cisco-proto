/*
Copyright 2019 Cisco Systems

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: l2vpn_bd_ac.proto

package cisco_ios_xr_l2vpn_oper_l2vpnv2_nodes_node_bridge_domains_bridge_domain_bridge_acs_bridge_ac

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type L2VpnBdAc_KEYS struct {
	NodeId                string   `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	BridgeDomainGroupName string   `protobuf:"bytes,2,opt,name=bridge_domain_group_name,json=bridgeDomainGroupName,proto3" json:"bridge_domain_group_name,omitempty"`
	BridgeDomainName      string   `protobuf:"bytes,3,opt,name=bridge_domain_name,json=bridgeDomainName,proto3" json:"bridge_domain_name,omitempty"`
	InterfaceName         string   `protobuf:"bytes,4,opt,name=interface_name,json=interfaceName,proto3" json:"interface_name,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *L2VpnBdAc_KEYS) Reset()         { *m = L2VpnBdAc_KEYS{} }
func (m *L2VpnBdAc_KEYS) String() string { return proto.CompactTextString(m) }
func (*L2VpnBdAc_KEYS) ProtoMessage()    {}
func (*L2VpnBdAc_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_a6139fbb62c47e96, []int{0}
}

func (m *L2VpnBdAc_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2VpnBdAc_KEYS.Unmarshal(m, b)
}
func (m *L2VpnBdAc_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2VpnBdAc_KEYS.Marshal(b, m, deterministic)
}
func (m *L2VpnBdAc_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2VpnBdAc_KEYS.Merge(m, src)
}
func (m *L2VpnBdAc_KEYS) XXX_Size() int {
	return xxx_messageInfo_L2VpnBdAc_KEYS.Size(m)
}
func (m *L2VpnBdAc_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_L2VpnBdAc_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_L2VpnBdAc_KEYS proto.InternalMessageInfo

func (m *L2VpnBdAc_KEYS) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

func (m *L2VpnBdAc_KEYS) GetBridgeDomainGroupName() string {
	if m != nil {
		return m.BridgeDomainGroupName
	}
	return ""
}

func (m *L2VpnBdAc_KEYS) GetBridgeDomainName() string {
	if m != nil {
		return m.BridgeDomainName
	}
	return ""
}

func (m *L2VpnBdAc_KEYS) GetInterfaceName() string {
	if m != nil {
		return m.InterfaceName
	}
	return ""
}

type L2VpnEthernet struct {
	XconnectTags         uint32   `protobuf:"varint,1,opt,name=xconnect_tags,json=xconnectTags,proto3" json:"xconnect_tags,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *L2VpnEthernet) Reset()         { *m = L2VpnEthernet{} }
func (m *L2VpnEthernet) String() string { return proto.CompactTextString(m) }
func (*L2VpnEthernet) ProtoMessage()    {}
func (*L2VpnEthernet) Descriptor() ([]byte, []int) {
	return fileDescriptor_a6139fbb62c47e96, []int{1}
}

func (m *L2VpnEthernet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2VpnEthernet.Unmarshal(m, b)
}
func (m *L2VpnEthernet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2VpnEthernet.Marshal(b, m, deterministic)
}
func (m *L2VpnEthernet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2VpnEthernet.Merge(m, src)
}
func (m *L2VpnEthernet) XXX_Size() int {
	return xxx_messageInfo_L2VpnEthernet.Size(m)
}
func (m *L2VpnEthernet) XXX_DiscardUnknown() {
	xxx_messageInfo_L2VpnEthernet.DiscardUnknown(m)
}

var xxx_messageInfo_L2VpnEthernet proto.InternalMessageInfo

func (m *L2VpnEthernet) GetXconnectTags() uint32 {
	if m != nil {
		return m.XconnectTags
	}
	return 0
}

type L2VpnEfpRange struct {
	Lower                uint32   `protobuf:"varint,1,opt,name=lower,proto3" json:"lower,omitempty"`
	Upper                uint32   `protobuf:"varint,2,opt,name=upper,proto3" json:"upper,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *L2VpnEfpRange) Reset()         { *m = L2VpnEfpRange{} }
func (m *L2VpnEfpRange) String() string { return proto.CompactTextString(m) }
func (*L2VpnEfpRange) ProtoMessage()    {}
func (*L2VpnEfpRange) Descriptor() ([]byte, []int) {
	return fileDescriptor_a6139fbb62c47e96, []int{2}
}

func (m *L2VpnEfpRange) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2VpnEfpRange.Unmarshal(m, b)
}
func (m *L2VpnEfpRange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2VpnEfpRange.Marshal(b, m, deterministic)
}
func (m *L2VpnEfpRange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2VpnEfpRange.Merge(m, src)
}
func (m *L2VpnEfpRange) XXX_Size() int {
	return xxx_messageInfo_L2VpnEfpRange.Size(m)
}
func (m *L2VpnEfpRange) XXX_DiscardUnknown() {
	xxx_messageInfo_L2VpnEfpRange.DiscardUnknown(m)
}

var xxx_messageInfo_L2VpnEfpRange proto.InternalMessageInfo

func (m *L2VpnEfpRange) GetLower() uint32 {
	if m != nil {
		return m.Lower
	}
	return 0
}

func (m *L2VpnEfpRange) GetUpper() uint32 {
	if m != nil {
		return m.Upper
	}
	return 0
}

type L2VpnVlan struct {
	XconnectTags         uint32           `protobuf:"varint,1,opt,name=xconnect_tags,json=xconnectTags,proto3" json:"xconnect_tags,omitempty"`
	VlanRewriteTag       uint32           `protobuf:"varint,2,opt,name=vlan_rewrite_tag,json=vlanRewriteTag,proto3" json:"vlan_rewrite_tag,omitempty"`
	SimpleEfp            uint32           `protobuf:"varint,3,opt,name=simple_efp,json=simpleEfp,proto3" json:"simple_efp,omitempty"`
	EncapsulationType    uint32           `protobuf:"varint,4,opt,name=encapsulation_type,json=encapsulationType,proto3" json:"encapsulation_type,omitempty"`
	OuterTag             uint32           `protobuf:"varint,5,opt,name=outer_tag,json=outerTag,proto3" json:"outer_tag,omitempty"`
	VlanRange            []*L2VpnEfpRange `protobuf:"bytes,6,rep,name=vlan_range,json=vlanRange,proto3" json:"vlan_range,omitempty"`
	RewriteTag           []uint32         `protobuf:"varint,7,rep,packed,name=rewrite_tag,json=rewriteTag,proto3" json:"rewrite_tag,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *L2VpnVlan) Reset()         { *m = L2VpnVlan{} }
func (m *L2VpnVlan) String() string { return proto.CompactTextString(m) }
func (*L2VpnVlan) ProtoMessage()    {}
func (*L2VpnVlan) Descriptor() ([]byte, []int) {
	return fileDescriptor_a6139fbb62c47e96, []int{3}
}

func (m *L2VpnVlan) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2VpnVlan.Unmarshal(m, b)
}
func (m *L2VpnVlan) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2VpnVlan.Marshal(b, m, deterministic)
}
func (m *L2VpnVlan) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2VpnVlan.Merge(m, src)
}
func (m *L2VpnVlan) XXX_Size() int {
	return xxx_messageInfo_L2VpnVlan.Size(m)
}
func (m *L2VpnVlan) XXX_DiscardUnknown() {
	xxx_messageInfo_L2VpnVlan.DiscardUnknown(m)
}

var xxx_messageInfo_L2VpnVlan proto.InternalMessageInfo

func (m *L2VpnVlan) GetXconnectTags() uint32 {
	if m != nil {
		return m.XconnectTags
	}
	return 0
}

func (m *L2VpnVlan) GetVlanRewriteTag() uint32 {
	if m != nil {
		return m.VlanRewriteTag
	}
	return 0
}

func (m *L2VpnVlan) GetSimpleEfp() uint32 {
	if m != nil {
		return m.SimpleEfp
	}
	return 0
}

func (m *L2VpnVlan) GetEncapsulationType() uint32 {
	if m != nil {
		return m.EncapsulationType
	}
	return 0
}

func (m *L2VpnVlan) GetOuterTag() uint32 {
	if m != nil {
		return m.OuterTag
	}
	return 0
}

func (m *L2VpnVlan) GetVlanRange() []*L2VpnEfpRange {
	if m != nil {
		return m.VlanRange
	}
	return nil
}

func (m *L2VpnVlan) GetRewriteTag() []uint32 {
	if m != nil {
		return m.RewriteTag
	}
	return nil
}

type L2VpnTdmOption struct {
	PayloadBytes         uint32   `protobuf:"varint,1,opt,name=payload_bytes,json=payloadBytes,proto3" json:"payload_bytes,omitempty"`
	BitRate              uint32   `protobuf:"varint,2,opt,name=bit_rate,json=bitRate,proto3" json:"bit_rate,omitempty"`
	Rtp                  string   `protobuf:"bytes,3,opt,name=rtp,proto3" json:"rtp,omitempty"`
	TimestampMode        string   `protobuf:"bytes,4,opt,name=timestamp_mode,json=timestampMode,proto3" json:"timestamp_mode,omitempty"`
	SignallingPackets    uint32   `protobuf:"varint,5,opt,name=signalling_packets,json=signallingPackets,proto3" json:"signalling_packets,omitempty"`
	Cas                  uint32   `protobuf:"varint,6,opt,name=cas,proto3" json:"cas,omitempty"`
	RtpHeaderPayloadType uint32   `protobuf:"varint,7,opt,name=rtp_header_payload_type,json=rtpHeaderPayloadType,proto3" json:"rtp_header_payload_type,omitempty"`
	TimestampClockFreq   uint32   `protobuf:"varint,8,opt,name=timestamp_clock_freq,json=timestampClockFreq,proto3" json:"timestamp_clock_freq,omitempty"`
	Ssrc                 uint32   `protobuf:"varint,9,opt,name=ssrc,proto3" json:"ssrc,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *L2VpnTdmOption) Reset()         { *m = L2VpnTdmOption{} }
func (m *L2VpnTdmOption) String() string { return proto.CompactTextString(m) }
func (*L2VpnTdmOption) ProtoMessage()    {}
func (*L2VpnTdmOption) Descriptor() ([]byte, []int) {
	return fileDescriptor_a6139fbb62c47e96, []int{4}
}

func (m *L2VpnTdmOption) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2VpnTdmOption.Unmarshal(m, b)
}
func (m *L2VpnTdmOption) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2VpnTdmOption.Marshal(b, m, deterministic)
}
func (m *L2VpnTdmOption) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2VpnTdmOption.Merge(m, src)
}
func (m *L2VpnTdmOption) XXX_Size() int {
	return xxx_messageInfo_L2VpnTdmOption.Size(m)
}
func (m *L2VpnTdmOption) XXX_DiscardUnknown() {
	xxx_messageInfo_L2VpnTdmOption.DiscardUnknown(m)
}

var xxx_messageInfo_L2VpnTdmOption proto.InternalMessageInfo

func (m *L2VpnTdmOption) GetPayloadBytes() uint32 {
	if m != nil {
		return m.PayloadBytes
	}
	return 0
}

func (m *L2VpnTdmOption) GetBitRate() uint32 {
	if m != nil {
		return m.BitRate
	}
	return 0
}

func (m *L2VpnTdmOption) GetRtp() string {
	if m != nil {
		return m.Rtp
	}
	return ""
}

func (m *L2VpnTdmOption) GetTimestampMode() string {
	if m != nil {
		return m.TimestampMode
	}
	return ""
}

func (m *L2VpnTdmOption) GetSignallingPackets() uint32 {
	if m != nil {
		return m.SignallingPackets
	}
	return 0
}

func (m *L2VpnTdmOption) GetCas() uint32 {
	if m != nil {
		return m.Cas
	}
	return 0
}

func (m *L2VpnTdmOption) GetRtpHeaderPayloadType() uint32 {
	if m != nil {
		return m.RtpHeaderPayloadType
	}
	return 0
}

func (m *L2VpnTdmOption) GetTimestampClockFreq() uint32 {
	if m != nil {
		return m.TimestampClockFreq
	}
	return 0
}

func (m *L2VpnTdmOption) GetSsrc() uint32 {
	if m != nil {
		return m.Ssrc
	}
	return 0
}

type L2VpnTdm struct {
	TimeslotGroup        string          `protobuf:"bytes,1,opt,name=timeslot_group,json=timeslotGroup,proto3" json:"timeslot_group,omitempty"`
	TimeslotRate         uint32          `protobuf:"varint,2,opt,name=timeslot_rate,json=timeslotRate,proto3" json:"timeslot_rate,omitempty"`
	TdmMode              string          `protobuf:"bytes,3,opt,name=tdm_mode,json=tdmMode,proto3" json:"tdm_mode,omitempty"`
	TdmOptions           *L2VpnTdmOption `protobuf:"bytes,4,opt,name=tdm_options,json=tdmOptions,proto3" json:"tdm_options,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *L2VpnTdm) Reset()         { *m = L2VpnTdm{} }
func (m *L2VpnTdm) String() string { return proto.CompactTextString(m) }
func (*L2VpnTdm) ProtoMessage()    {}
func (*L2VpnTdm) Descriptor() ([]byte, []int) {
	return fileDescriptor_a6139fbb62c47e96, []int{5}
}

func (m *L2VpnTdm) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2VpnTdm.Unmarshal(m, b)
}
func (m *L2VpnTdm) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2VpnTdm.Marshal(b, m, deterministic)
}
func (m *L2VpnTdm) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2VpnTdm.Merge(m, src)
}
func (m *L2VpnTdm) XXX_Size() int {
	return xxx_messageInfo_L2VpnTdm.Size(m)
}
func (m *L2VpnTdm) XXX_DiscardUnknown() {
	xxx_messageInfo_L2VpnTdm.DiscardUnknown(m)
}

var xxx_messageInfo_L2VpnTdm proto.InternalMessageInfo

func (m *L2VpnTdm) GetTimeslotGroup() string {
	if m != nil {
		return m.TimeslotGroup
	}
	return ""
}

func (m *L2VpnTdm) GetTimeslotRate() uint32 {
	if m != nil {
		return m.TimeslotRate
	}
	return 0
}

func (m *L2VpnTdm) GetTdmMode() string {
	if m != nil {
		return m.TdmMode
	}
	return ""
}

func (m *L2VpnTdm) GetTdmOptions() *L2VpnTdmOption {
	if m != nil {
		return m.TdmOptions
	}
	return nil
}

type L2VpnAtm struct {
	MaximumNumberCellsPacked   uint32   `protobuf:"varint,1,opt,name=maximum_number_cells_packed,json=maximumNumberCellsPacked,proto3" json:"maximum_number_cells_packed,omitempty"`
	MaximumNumberCellsUnPacked uint32   `protobuf:"varint,2,opt,name=maximum_number_cells_un_packed,json=maximumNumberCellsUnPacked,proto3" json:"maximum_number_cells_un_packed,omitempty"`
	AtmMode                    string   `protobuf:"bytes,3,opt,name=atm_mode,json=atmMode,proto3" json:"atm_mode,omitempty"`
	Vpi                        uint32   `protobuf:"varint,4,opt,name=vpi,proto3" json:"vpi,omitempty"`
	Vci                        uint32   `protobuf:"varint,5,opt,name=vci,proto3" json:"vci,omitempty"`
	XXX_NoUnkeyedLiteral       struct{} `json:"-"`
	XXX_unrecognized           []byte   `json:"-"`
	XXX_sizecache              int32    `json:"-"`
}

func (m *L2VpnAtm) Reset()         { *m = L2VpnAtm{} }
func (m *L2VpnAtm) String() string { return proto.CompactTextString(m) }
func (*L2VpnAtm) ProtoMessage()    {}
func (*L2VpnAtm) Descriptor() ([]byte, []int) {
	return fileDescriptor_a6139fbb62c47e96, []int{6}
}

func (m *L2VpnAtm) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2VpnAtm.Unmarshal(m, b)
}
func (m *L2VpnAtm) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2VpnAtm.Marshal(b, m, deterministic)
}
func (m *L2VpnAtm) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2VpnAtm.Merge(m, src)
}
func (m *L2VpnAtm) XXX_Size() int {
	return xxx_messageInfo_L2VpnAtm.Size(m)
}
func (m *L2VpnAtm) XXX_DiscardUnknown() {
	xxx_messageInfo_L2VpnAtm.DiscardUnknown(m)
}

var xxx_messageInfo_L2VpnAtm proto.InternalMessageInfo

func (m *L2VpnAtm) GetMaximumNumberCellsPacked() uint32 {
	if m != nil {
		return m.MaximumNumberCellsPacked
	}
	return 0
}

func (m *L2VpnAtm) GetMaximumNumberCellsUnPacked() uint32 {
	if m != nil {
		return m.MaximumNumberCellsUnPacked
	}
	return 0
}

func (m *L2VpnAtm) GetAtmMode() string {
	if m != nil {
		return m.AtmMode
	}
	return ""
}

func (m *L2VpnAtm) GetVpi() uint32 {
	if m != nil {
		return m.Vpi
	}
	return 0
}

func (m *L2VpnAtm) GetVci() uint32 {
	if m != nil {
		return m.Vci
	}
	return 0
}

type L2VpnFr struct {
	FrMode               string   `protobuf:"bytes,1,opt,name=fr_mode,json=frMode,proto3" json:"fr_mode,omitempty"`
	Dlci                 uint32   `protobuf:"varint,2,opt,name=dlci,proto3" json:"dlci,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *L2VpnFr) Reset()         { *m = L2VpnFr{} }
func (m *L2VpnFr) String() string { return proto.CompactTextString(m) }
func (*L2VpnFr) ProtoMessage()    {}
func (*L2VpnFr) Descriptor() ([]byte, []int) {
	return fileDescriptor_a6139fbb62c47e96, []int{7}
}

func (m *L2VpnFr) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2VpnFr.Unmarshal(m, b)
}
func (m *L2VpnFr) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2VpnFr.Marshal(b, m, deterministic)
}
func (m *L2VpnFr) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2VpnFr.Merge(m, src)
}
func (m *L2VpnFr) XXX_Size() int {
	return xxx_messageInfo_L2VpnFr.Size(m)
}
func (m *L2VpnFr) XXX_DiscardUnknown() {
	xxx_messageInfo_L2VpnFr.DiscardUnknown(m)
}

var xxx_messageInfo_L2VpnFr proto.InternalMessageInfo

func (m *L2VpnFr) GetFrMode() string {
	if m != nil {
		return m.FrMode
	}
	return ""
}

func (m *L2VpnFr) GetDlci() uint32 {
	if m != nil {
		return m.Dlci
	}
	return 0
}

type InterfacesItem struct {
	Value                string   `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InterfacesItem) Reset()         { *m = InterfacesItem{} }
func (m *InterfacesItem) String() string { return proto.CompactTextString(m) }
func (*InterfacesItem) ProtoMessage()    {}
func (*InterfacesItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_a6139fbb62c47e96, []int{8}
}

func (m *InterfacesItem) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InterfacesItem.Unmarshal(m, b)
}
func (m *InterfacesItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InterfacesItem.Marshal(b, m, deterministic)
}
func (m *InterfacesItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InterfacesItem.Merge(m, src)
}
func (m *InterfacesItem) XXX_Size() int {
	return xxx_messageInfo_InterfacesItem.Size(m)
}
func (m *InterfacesItem) XXX_DiscardUnknown() {
	xxx_messageInfo_InterfacesItem.DiscardUnknown(m)
}

var xxx_messageInfo_InterfacesItem proto.InternalMessageInfo

func (m *InterfacesItem) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type ItemIflistIfl struct {
	InterfaceListName    string            `protobuf:"bytes,1,opt,name=interface_list_name,json=interfaceListName,proto3" json:"interface_list_name,omitempty"`
	InterfaceListId      uint32            `protobuf:"varint,2,opt,name=interface_list_id,json=interfaceListId,proto3" json:"interface_list_id,omitempty"`
	Interface            []*InterfacesItem `protobuf:"bytes,3,rep,name=interface,proto3" json:"interface,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ItemIflistIfl) Reset()         { *m = ItemIflistIfl{} }
func (m *ItemIflistIfl) String() string { return proto.CompactTextString(m) }
func (*ItemIflistIfl) ProtoMessage()    {}
func (*ItemIflistIfl) Descriptor() ([]byte, []int) {
	return fileDescriptor_a6139fbb62c47e96, []int{9}
}

func (m *ItemIflistIfl) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ItemIflistIfl.Unmarshal(m, b)
}
func (m *ItemIflistIfl) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ItemIflistIfl.Marshal(b, m, deterministic)
}
func (m *ItemIflistIfl) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ItemIflistIfl.Merge(m, src)
}
func (m *ItemIflistIfl) XXX_Size() int {
	return xxx_messageInfo_ItemIflistIfl.Size(m)
}
func (m *ItemIflistIfl) XXX_DiscardUnknown() {
	xxx_messageInfo_ItemIflistIfl.DiscardUnknown(m)
}

var xxx_messageInfo_ItemIflistIfl proto.InternalMessageInfo

func (m *ItemIflistIfl) GetInterfaceListName() string {
	if m != nil {
		return m.InterfaceListName
	}
	return ""
}

func (m *ItemIflistIfl) GetInterfaceListId() uint32 {
	if m != nil {
		return m.InterfaceListId
	}
	return 0
}

func (m *ItemIflistIfl) GetInterface() []*InterfacesItem {
	if m != nil {
		return m.Interface
	}
	return nil
}

type L2VpnPwhe struct {
	IsValid              bool           `protobuf:"varint,1,opt,name=is_valid,json=isValid,proto3" json:"is_valid,omitempty"`
	InterfaceList        *ItemIflistIfl `protobuf:"bytes,2,opt,name=interface_list,json=interfaceList,proto3" json:"interface_list,omitempty"`
	InternalLabel        uint32         `protobuf:"varint,3,opt,name=internal_label,json=internalLabel,proto3" json:"internal_label,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *L2VpnPwhe) Reset()         { *m = L2VpnPwhe{} }
func (m *L2VpnPwhe) String() string { return proto.CompactTextString(m) }
func (*L2VpnPwhe) ProtoMessage()    {}
func (*L2VpnPwhe) Descriptor() ([]byte, []int) {
	return fileDescriptor_a6139fbb62c47e96, []int{10}
}

func (m *L2VpnPwhe) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2VpnPwhe.Unmarshal(m, b)
}
func (m *L2VpnPwhe) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2VpnPwhe.Marshal(b, m, deterministic)
}
func (m *L2VpnPwhe) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2VpnPwhe.Merge(m, src)
}
func (m *L2VpnPwhe) XXX_Size() int {
	return xxx_messageInfo_L2VpnPwhe.Size(m)
}
func (m *L2VpnPwhe) XXX_DiscardUnknown() {
	xxx_messageInfo_L2VpnPwhe.DiscardUnknown(m)
}

var xxx_messageInfo_L2VpnPwhe proto.InternalMessageInfo

func (m *L2VpnPwhe) GetIsValid() bool {
	if m != nil {
		return m.IsValid
	}
	return false
}

func (m *L2VpnPwhe) GetInterfaceList() *ItemIflistIfl {
	if m != nil {
		return m.InterfaceList
	}
	return nil
}

func (m *L2VpnPwhe) GetInternalLabel() uint32 {
	if m != nil {
		return m.InternalLabel
	}
	return 0
}

type L2VpnInterfaceParams struct {
	Type                 string         `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Ethernet             *L2VpnEthernet `protobuf:"bytes,2,opt,name=ethernet,proto3" json:"ethernet,omitempty"`
	Vlan                 *L2VpnVlan     `protobuf:"bytes,3,opt,name=vlan,proto3" json:"vlan,omitempty"`
	Tdm                  *L2VpnTdm      `protobuf:"bytes,4,opt,name=tdm,proto3" json:"tdm,omitempty"`
	Atm                  *L2VpnAtm      `protobuf:"bytes,5,opt,name=atm,proto3" json:"atm,omitempty"`
	Fr                   *L2VpnFr       `protobuf:"bytes,6,opt,name=fr,proto3" json:"fr,omitempty"`
	PseudowireEther      *L2VpnPwhe     `protobuf:"bytes,7,opt,name=pseudowire_ether,json=pseudowireEther,proto3" json:"pseudowire_ether,omitempty"`
	PseudowireIw         *L2VpnPwhe     `protobuf:"bytes,8,opt,name=pseudowire_iw,json=pseudowireIw,proto3" json:"pseudowire_iw,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *L2VpnInterfaceParams) Reset()         { *m = L2VpnInterfaceParams{} }
func (m *L2VpnInterfaceParams) String() string { return proto.CompactTextString(m) }
func (*L2VpnInterfaceParams) ProtoMessage()    {}
func (*L2VpnInterfaceParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_a6139fbb62c47e96, []int{11}
}

func (m *L2VpnInterfaceParams) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2VpnInterfaceParams.Unmarshal(m, b)
}
func (m *L2VpnInterfaceParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2VpnInterfaceParams.Marshal(b, m, deterministic)
}
func (m *L2VpnInterfaceParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2VpnInterfaceParams.Merge(m, src)
}
func (m *L2VpnInterfaceParams) XXX_Size() int {
	return xxx_messageInfo_L2VpnInterfaceParams.Size(m)
}
func (m *L2VpnInterfaceParams) XXX_DiscardUnknown() {
	xxx_messageInfo_L2VpnInterfaceParams.DiscardUnknown(m)
}

var xxx_messageInfo_L2VpnInterfaceParams proto.InternalMessageInfo

func (m *L2VpnInterfaceParams) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *L2VpnInterfaceParams) GetEthernet() *L2VpnEthernet {
	if m != nil {
		return m.Ethernet
	}
	return nil
}

func (m *L2VpnInterfaceParams) GetVlan() *L2VpnVlan {
	if m != nil {
		return m.Vlan
	}
	return nil
}

func (m *L2VpnInterfaceParams) GetTdm() *L2VpnTdm {
	if m != nil {
		return m.Tdm
	}
	return nil
}

func (m *L2VpnInterfaceParams) GetAtm() *L2VpnAtm {
	if m != nil {
		return m.Atm
	}
	return nil
}

func (m *L2VpnInterfaceParams) GetFr() *L2VpnFr {
	if m != nil {
		return m.Fr
	}
	return nil
}

func (m *L2VpnInterfaceParams) GetPseudowireEther() *L2VpnPwhe {
	if m != nil {
		return m.PseudowireEther
	}
	return nil
}

func (m *L2VpnInterfaceParams) GetPseudowireIw() *L2VpnPwhe {
	if m != nil {
		return m.PseudowireIw
	}
	return nil
}

type L2VpnInterface struct {
	Name                 string                `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Mtu                  uint32                `protobuf:"varint,2,opt,name=mtu,proto3" json:"mtu,omitempty"`
	PayloadBytes         uint32                `protobuf:"varint,3,opt,name=payload_bytes,json=payloadBytes,proto3" json:"payload_bytes,omitempty"`
	Parameters           *L2VpnInterfaceParams `protobuf:"bytes,4,opt,name=parameters,proto3" json:"parameters,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *L2VpnInterface) Reset()         { *m = L2VpnInterface{} }
func (m *L2VpnInterface) String() string { return proto.CompactTextString(m) }
func (*L2VpnInterface) ProtoMessage()    {}
func (*L2VpnInterface) Descriptor() ([]byte, []int) {
	return fileDescriptor_a6139fbb62c47e96, []int{12}
}

func (m *L2VpnInterface) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2VpnInterface.Unmarshal(m, b)
}
func (m *L2VpnInterface) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2VpnInterface.Marshal(b, m, deterministic)
}
func (m *L2VpnInterface) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2VpnInterface.Merge(m, src)
}
func (m *L2VpnInterface) XXX_Size() int {
	return xxx_messageInfo_L2VpnInterface.Size(m)
}
func (m *L2VpnInterface) XXX_DiscardUnknown() {
	xxx_messageInfo_L2VpnInterface.DiscardUnknown(m)
}

var xxx_messageInfo_L2VpnInterface proto.InternalMessageInfo

func (m *L2VpnInterface) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *L2VpnInterface) GetMtu() uint32 {
	if m != nil {
		return m.Mtu
	}
	return 0
}

func (m *L2VpnInterface) GetPayloadBytes() uint32 {
	if m != nil {
		return m.PayloadBytes
	}
	return 0
}

func (m *L2VpnInterface) GetParameters() *L2VpnInterfaceParams {
	if m != nil {
		return m.Parameters
	}
	return nil
}

type L2FibStatsBagCounters struct {
	PacketCounts         uint64   `protobuf:"varint,1,opt,name=packet_counts,json=packetCounts,proto3" json:"packet_counts,omitempty"`
	ByteCounts           uint64   `protobuf:"varint,2,opt,name=byte_counts,json=byteCounts,proto3" json:"byte_counts,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *L2FibStatsBagCounters) Reset()         { *m = L2FibStatsBagCounters{} }
func (m *L2FibStatsBagCounters) String() string { return proto.CompactTextString(m) }
func (*L2FibStatsBagCounters) ProtoMessage()    {}
func (*L2FibStatsBagCounters) Descriptor() ([]byte, []int) {
	return fileDescriptor_a6139fbb62c47e96, []int{13}
}

func (m *L2FibStatsBagCounters) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2FibStatsBagCounters.Unmarshal(m, b)
}
func (m *L2FibStatsBagCounters) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2FibStatsBagCounters.Marshal(b, m, deterministic)
}
func (m *L2FibStatsBagCounters) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2FibStatsBagCounters.Merge(m, src)
}
func (m *L2FibStatsBagCounters) XXX_Size() int {
	return xxx_messageInfo_L2FibStatsBagCounters.Size(m)
}
func (m *L2FibStatsBagCounters) XXX_DiscardUnknown() {
	xxx_messageInfo_L2FibStatsBagCounters.DiscardUnknown(m)
}

var xxx_messageInfo_L2FibStatsBagCounters proto.InternalMessageInfo

func (m *L2FibStatsBagCounters) GetPacketCounts() uint64 {
	if m != nil {
		return m.PacketCounts
	}
	return 0
}

func (m *L2FibStatsBagCounters) GetByteCounts() uint64 {
	if m != nil {
		return m.ByteCounts
	}
	return 0
}

type L2FibStatsBagImp struct {
	ImpositionStat       *L2FibStatsBagCounters `protobuf:"bytes,1,opt,name=imposition_stat,json=impositionStat,proto3" json:"imposition_stat,omitempty"`
	ImpositionMtuDrop    *L2FibStatsBagCounters `protobuf:"bytes,2,opt,name=imposition_mtu_drop,json=impositionMtuDrop,proto3" json:"imposition_mtu_drop,omitempty"`
	ImpostionTailDrop    *L2FibStatsBagCounters `protobuf:"bytes,3,opt,name=impostion_tail_drop,json=impostionTailDrop,proto3" json:"impostion_tail_drop,omitempty"`
	L2FsbiDrop           *L2FibStatsBagCounters `protobuf:"bytes,4,opt,name=l2fsbi_drop,json=l2fsbiDrop,proto3" json:"l2fsbi_drop,omitempty"`
	Multicast            *L2FibStatsBagCounters `protobuf:"bytes,5,opt,name=multicast,proto3" json:"multicast,omitempty"`
	Broadcast            *L2FibStatsBagCounters `protobuf:"bytes,6,opt,name=broadcast,proto3" json:"broadcast,omitempty"`
	KnownUnicast         *L2FibStatsBagCounters `protobuf:"bytes,7,opt,name=known_unicast,json=knownUnicast,proto3" json:"known_unicast,omitempty"`
	UnknownUnicast       *L2FibStatsBagCounters `protobuf:"bytes,8,opt,name=unknown_unicast,json=unknownUnicast,proto3" json:"unknown_unicast,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *L2FibStatsBagImp) Reset()         { *m = L2FibStatsBagImp{} }
func (m *L2FibStatsBagImp) String() string { return proto.CompactTextString(m) }
func (*L2FibStatsBagImp) ProtoMessage()    {}
func (*L2FibStatsBagImp) Descriptor() ([]byte, []int) {
	return fileDescriptor_a6139fbb62c47e96, []int{14}
}

func (m *L2FibStatsBagImp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2FibStatsBagImp.Unmarshal(m, b)
}
func (m *L2FibStatsBagImp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2FibStatsBagImp.Marshal(b, m, deterministic)
}
func (m *L2FibStatsBagImp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2FibStatsBagImp.Merge(m, src)
}
func (m *L2FibStatsBagImp) XXX_Size() int {
	return xxx_messageInfo_L2FibStatsBagImp.Size(m)
}
func (m *L2FibStatsBagImp) XXX_DiscardUnknown() {
	xxx_messageInfo_L2FibStatsBagImp.DiscardUnknown(m)
}

var xxx_messageInfo_L2FibStatsBagImp proto.InternalMessageInfo

func (m *L2FibStatsBagImp) GetImpositionStat() *L2FibStatsBagCounters {
	if m != nil {
		return m.ImpositionStat
	}
	return nil
}

func (m *L2FibStatsBagImp) GetImpositionMtuDrop() *L2FibStatsBagCounters {
	if m != nil {
		return m.ImpositionMtuDrop
	}
	return nil
}

func (m *L2FibStatsBagImp) GetImpostionTailDrop() *L2FibStatsBagCounters {
	if m != nil {
		return m.ImpostionTailDrop
	}
	return nil
}

func (m *L2FibStatsBagImp) GetL2FsbiDrop() *L2FibStatsBagCounters {
	if m != nil {
		return m.L2FsbiDrop
	}
	return nil
}

func (m *L2FibStatsBagImp) GetMulticast() *L2FibStatsBagCounters {
	if m != nil {
		return m.Multicast
	}
	return nil
}

func (m *L2FibStatsBagImp) GetBroadcast() *L2FibStatsBagCounters {
	if m != nil {
		return m.Broadcast
	}
	return nil
}

func (m *L2FibStatsBagImp) GetKnownUnicast() *L2FibStatsBagCounters {
	if m != nil {
		return m.KnownUnicast
	}
	return nil
}

func (m *L2FibStatsBagImp) GetUnknownUnicast() *L2FibStatsBagCounters {
	if m != nil {
		return m.UnknownUnicast
	}
	return nil
}

type L2FibStatsBagDisp struct {
	DispositionStat      *L2FibStatsBagCounters `protobuf:"bytes,1,opt,name=disposition_stat,json=dispositionStat,proto3" json:"disposition_stat,omitempty"`
	DispositionMtuDrop   *L2FibStatsBagCounters `protobuf:"bytes,2,opt,name=disposition_mtu_drop,json=dispositionMtuDrop,proto3" json:"disposition_mtu_drop,omitempty"`
	DispositionTailDrop  *L2FibStatsBagCounters `protobuf:"bytes,3,opt,name=disposition_tail_drop,json=dispositionTailDrop,proto3" json:"disposition_tail_drop,omitempty"`
	MulticastDrop        *L2FibStatsBagCounters `protobuf:"bytes,4,opt,name=multicast_drop,json=multicastDrop,proto3" json:"multicast_drop,omitempty"`
	UnicastDrop          *L2FibStatsBagCounters `protobuf:"bytes,5,opt,name=unicast_drop,json=unicastDrop,proto3" json:"unicast_drop,omitempty"`
	BroadcastDrop        *L2FibStatsBagCounters `protobuf:"bytes,6,opt,name=broadcast_drop,json=broadcastDrop,proto3" json:"broadcast_drop,omitempty"`
	ReceivedDrops        *L2FibStatsBagCounters `protobuf:"bytes,7,opt,name=received_drops,json=receivedDrops,proto3" json:"received_drops,omitempty"`
	DaiDrop              *L2FibStatsBagCounters `protobuf:"bytes,8,opt,name=dai_drop,json=daiDrop,proto3" json:"dai_drop,omitempty"`
	IpsgDrop             *L2FibStatsBagCounters `protobuf:"bytes,9,opt,name=ipsg_drop,json=ipsgDrop,proto3" json:"ipsg_drop,omitempty"`
	DispositionOoODrops  *L2FibStatsBagCounters `protobuf:"bytes,10,opt,name=disposition_oo_o_drops,json=dispositionOoODrops,proto3" json:"disposition_oo_o_drops,omitempty"`
	DispositionP2MpStats *L2FibStatsBagCounters `protobuf:"bytes,11,opt,name=disposition_p2mp_stats,json=dispositionP2mpStats,proto3" json:"disposition_p2mp_stats,omitempty"`
	KnownUnicast         *L2FibStatsBagCounters `protobuf:"bytes,12,opt,name=known_unicast,json=knownUnicast,proto3" json:"known_unicast,omitempty"`
	MacMove              *L2FibStatsBagCounters `protobuf:"bytes,13,opt,name=mac_move,json=macMove,proto3" json:"mac_move,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *L2FibStatsBagDisp) Reset()         { *m = L2FibStatsBagDisp{} }
func (m *L2FibStatsBagDisp) String() string { return proto.CompactTextString(m) }
func (*L2FibStatsBagDisp) ProtoMessage()    {}
func (*L2FibStatsBagDisp) Descriptor() ([]byte, []int) {
	return fileDescriptor_a6139fbb62c47e96, []int{15}
}

func (m *L2FibStatsBagDisp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2FibStatsBagDisp.Unmarshal(m, b)
}
func (m *L2FibStatsBagDisp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2FibStatsBagDisp.Marshal(b, m, deterministic)
}
func (m *L2FibStatsBagDisp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2FibStatsBagDisp.Merge(m, src)
}
func (m *L2FibStatsBagDisp) XXX_Size() int {
	return xxx_messageInfo_L2FibStatsBagDisp.Size(m)
}
func (m *L2FibStatsBagDisp) XXX_DiscardUnknown() {
	xxx_messageInfo_L2FibStatsBagDisp.DiscardUnknown(m)
}

var xxx_messageInfo_L2FibStatsBagDisp proto.InternalMessageInfo

func (m *L2FibStatsBagDisp) GetDispositionStat() *L2FibStatsBagCounters {
	if m != nil {
		return m.DispositionStat
	}
	return nil
}

func (m *L2FibStatsBagDisp) GetDispositionMtuDrop() *L2FibStatsBagCounters {
	if m != nil {
		return m.DispositionMtuDrop
	}
	return nil
}

func (m *L2FibStatsBagDisp) GetDispositionTailDrop() *L2FibStatsBagCounters {
	if m != nil {
		return m.DispositionTailDrop
	}
	return nil
}

func (m *L2FibStatsBagDisp) GetMulticastDrop() *L2FibStatsBagCounters {
	if m != nil {
		return m.MulticastDrop
	}
	return nil
}

func (m *L2FibStatsBagDisp) GetUnicastDrop() *L2FibStatsBagCounters {
	if m != nil {
		return m.UnicastDrop
	}
	return nil
}

func (m *L2FibStatsBagDisp) GetBroadcastDrop() *L2FibStatsBagCounters {
	if m != nil {
		return m.BroadcastDrop
	}
	return nil
}

func (m *L2FibStatsBagDisp) GetReceivedDrops() *L2FibStatsBagCounters {
	if m != nil {
		return m.ReceivedDrops
	}
	return nil
}

func (m *L2FibStatsBagDisp) GetDaiDrop() *L2FibStatsBagCounters {
	if m != nil {
		return m.DaiDrop
	}
	return nil
}

func (m *L2FibStatsBagDisp) GetIpsgDrop() *L2FibStatsBagCounters {
	if m != nil {
		return m.IpsgDrop
	}
	return nil
}

func (m *L2FibStatsBagDisp) GetDispositionOoODrops() *L2FibStatsBagCounters {
	if m != nil {
		return m.DispositionOoODrops
	}
	return nil
}

func (m *L2FibStatsBagDisp) GetDispositionP2MpStats() *L2FibStatsBagCounters {
	if m != nil {
		return m.DispositionP2MpStats
	}
	return nil
}

func (m *L2FibStatsBagDisp) GetKnownUnicast() *L2FibStatsBagCounters {
	if m != nil {
		return m.KnownUnicast
	}
	return nil
}

func (m *L2FibStatsBagDisp) GetMacMove() *L2FibStatsBagCounters {
	if m != nil {
		return m.MacMove
	}
	return nil
}

type L2FibStatsBagSeqNum struct {
	SequenceNumberSent            uint32   `protobuf:"varint,1,opt,name=sequence_number_sent,json=sequenceNumberSent,proto3" json:"sequence_number_sent,omitempty"`
	SequenceNumberExpected        uint32   `protobuf:"varint,2,opt,name=sequence_number_expected,json=sequenceNumberExpected,proto3" json:"sequence_number_expected,omitempty"`
	BypassedInboundSequencePacket uint64   `protobuf:"varint,3,opt,name=bypassed_inbound_sequence_packet,json=bypassedInboundSequencePacket,proto3" json:"bypassed_inbound_sequence_packet,omitempty"`
	BypassedOutSequencePacket     uint64   `protobuf:"varint,4,opt,name=bypassed_out_sequence_packet,json=bypassedOutSequencePacket,proto3" json:"bypassed_out_sequence_packet,omitempty"`
	XXX_NoUnkeyedLiteral          struct{} `json:"-"`
	XXX_unrecognized              []byte   `json:"-"`
	XXX_sizecache                 int32    `json:"-"`
}

func (m *L2FibStatsBagSeqNum) Reset()         { *m = L2FibStatsBagSeqNum{} }
func (m *L2FibStatsBagSeqNum) String() string { return proto.CompactTextString(m) }
func (*L2FibStatsBagSeqNum) ProtoMessage()    {}
func (*L2FibStatsBagSeqNum) Descriptor() ([]byte, []int) {
	return fileDescriptor_a6139fbb62c47e96, []int{16}
}

func (m *L2FibStatsBagSeqNum) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2FibStatsBagSeqNum.Unmarshal(m, b)
}
func (m *L2FibStatsBagSeqNum) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2FibStatsBagSeqNum.Marshal(b, m, deterministic)
}
func (m *L2FibStatsBagSeqNum) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2FibStatsBagSeqNum.Merge(m, src)
}
func (m *L2FibStatsBagSeqNum) XXX_Size() int {
	return xxx_messageInfo_L2FibStatsBagSeqNum.Size(m)
}
func (m *L2FibStatsBagSeqNum) XXX_DiscardUnknown() {
	xxx_messageInfo_L2FibStatsBagSeqNum.DiscardUnknown(m)
}

var xxx_messageInfo_L2FibStatsBagSeqNum proto.InternalMessageInfo

func (m *L2FibStatsBagSeqNum) GetSequenceNumberSent() uint32 {
	if m != nil {
		return m.SequenceNumberSent
	}
	return 0
}

func (m *L2FibStatsBagSeqNum) GetSequenceNumberExpected() uint32 {
	if m != nil {
		return m.SequenceNumberExpected
	}
	return 0
}

func (m *L2FibStatsBagSeqNum) GetBypassedInboundSequencePacket() uint64 {
	if m != nil {
		return m.BypassedInboundSequencePacket
	}
	return 0
}

func (m *L2FibStatsBagSeqNum) GetBypassedOutSequencePacket() uint64 {
	if m != nil {
		return m.BypassedOutSequencePacket
	}
	return 0
}

type L2FibStatsBagForwarding struct {
	ImpostionStats       *L2FibStatsBagImp    `protobuf:"bytes,1,opt,name=impostion_stats,json=impostionStats,proto3" json:"impostion_stats,omitempty"`
	DispostionStats      *L2FibStatsBagDisp   `protobuf:"bytes,2,opt,name=dispostion_stats,json=dispostionStats,proto3" json:"dispostion_stats,omitempty"`
	SequenceNumber       *L2FibStatsBagSeqNum `protobuf:"bytes,3,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *L2FibStatsBagForwarding) Reset()         { *m = L2FibStatsBagForwarding{} }
func (m *L2FibStatsBagForwarding) String() string { return proto.CompactTextString(m) }
func (*L2FibStatsBagForwarding) ProtoMessage()    {}
func (*L2FibStatsBagForwarding) Descriptor() ([]byte, []int) {
	return fileDescriptor_a6139fbb62c47e96, []int{17}
}

func (m *L2FibStatsBagForwarding) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2FibStatsBagForwarding.Unmarshal(m, b)
}
func (m *L2FibStatsBagForwarding) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2FibStatsBagForwarding.Marshal(b, m, deterministic)
}
func (m *L2FibStatsBagForwarding) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2FibStatsBagForwarding.Merge(m, src)
}
func (m *L2FibStatsBagForwarding) XXX_Size() int {
	return xxx_messageInfo_L2FibStatsBagForwarding.Size(m)
}
func (m *L2FibStatsBagForwarding) XXX_DiscardUnknown() {
	xxx_messageInfo_L2FibStatsBagForwarding.DiscardUnknown(m)
}

var xxx_messageInfo_L2FibStatsBagForwarding proto.InternalMessageInfo

func (m *L2FibStatsBagForwarding) GetImpostionStats() *L2FibStatsBagImp {
	if m != nil {
		return m.ImpostionStats
	}
	return nil
}

func (m *L2FibStatsBagForwarding) GetDispostionStats() *L2FibStatsBagDisp {
	if m != nil {
		return m.DispostionStats
	}
	return nil
}

func (m *L2FibStatsBagForwarding) GetSequenceNumber() *L2FibStatsBagSeqNum {
	if m != nil {
		return m.SequenceNumber
	}
	return nil
}

type L2VpnProtection struct {
	ProtectionType       string   `protobuf:"bytes,1,opt,name=protection_type,json=protectionType,proto3" json:"protection_type,omitempty"`
	ProtectionConfigured string   `protobuf:"bytes,2,opt,name=protection_configured,json=protectionConfigured,proto3" json:"protection_configured,omitempty"`
	ProtectionName       string   `protobuf:"bytes,3,opt,name=protection_name,json=protectionName,proto3" json:"protection_name,omitempty"`
	ProtectedName        string   `protobuf:"bytes,4,opt,name=protected_name,json=protectedName,proto3" json:"protected_name,omitempty"`
	Active               bool     `protobuf:"varint,5,opt,name=active,proto3" json:"active,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *L2VpnProtection) Reset()         { *m = L2VpnProtection{} }
func (m *L2VpnProtection) String() string { return proto.CompactTextString(m) }
func (*L2VpnProtection) ProtoMessage()    {}
func (*L2VpnProtection) Descriptor() ([]byte, []int) {
	return fileDescriptor_a6139fbb62c47e96, []int{18}
}

func (m *L2VpnProtection) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2VpnProtection.Unmarshal(m, b)
}
func (m *L2VpnProtection) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2VpnProtection.Marshal(b, m, deterministic)
}
func (m *L2VpnProtection) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2VpnProtection.Merge(m, src)
}
func (m *L2VpnProtection) XXX_Size() int {
	return xxx_messageInfo_L2VpnProtection.Size(m)
}
func (m *L2VpnProtection) XXX_DiscardUnknown() {
	xxx_messageInfo_L2VpnProtection.DiscardUnknown(m)
}

var xxx_messageInfo_L2VpnProtection proto.InternalMessageInfo

func (m *L2VpnProtection) GetProtectionType() string {
	if m != nil {
		return m.ProtectionType
	}
	return ""
}

func (m *L2VpnProtection) GetProtectionConfigured() string {
	if m != nil {
		return m.ProtectionConfigured
	}
	return ""
}

func (m *L2VpnProtection) GetProtectionName() string {
	if m != nil {
		return m.ProtectionName
	}
	return ""
}

func (m *L2VpnProtection) GetProtectedName() string {
	if m != nil {
		return m.ProtectedName
	}
	return ""
}

func (m *L2VpnProtection) GetActive() bool {
	if m != nil {
		return m.Active
	}
	return false
}

type L2VpnAc struct {
	Interface               *L2VpnInterface          `protobuf:"bytes,1,opt,name=interface,proto3" json:"interface,omitempty"`
	State                   string                   `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
	Msti                    string                   `protobuf:"bytes,3,opt,name=msti,proto3" json:"msti,omitempty"`
	InternalMsTi            string                   `protobuf:"bytes,4,opt,name=internal_ms_ti,json=internalMsTi,proto3" json:"internal_ms_ti,omitempty"`
	InterfaceHandle         string                   `protobuf:"bytes,5,opt,name=interface_handle,json=interfaceHandle,proto3" json:"interface_handle,omitempty"`
	NodeId                  string                   `protobuf:"bytes,6,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	XconnectId              uint32                   `protobuf:"varint,7,opt,name=xconnect_id,json=xconnectId,proto3" json:"xconnect_id,omitempty"`
	MsTiMismatch            bool                     `protobuf:"varint,8,opt,name=ms_ti_mismatch,json=msTiMismatch,proto3" json:"ms_ti_mismatch,omitempty"`
	MtuMismatched           bool                     `protobuf:"varint,9,opt,name=mtu_mismatched,json=mtuMismatched,proto3" json:"mtu_mismatched,omitempty"`
	TdmMediaMismatched      bool                     `protobuf:"varint,10,opt,name=tdm_media_mismatched,json=tdmMediaMismatched,proto3" json:"tdm_media_mismatched,omitempty"`
	BviMacConflict          bool                     `protobuf:"varint,11,opt,name=bvi_mac_conflict,json=bviMacConflict,proto3" json:"bvi_mac_conflict,omitempty"`
	BviNoPortUp             bool                     `protobuf:"varint,12,opt,name=bvi_no_port_up,json=bviNoPortUp,proto3" json:"bvi_no_port_up,omitempty"`
	ControlWordMismatched   bool                     `protobuf:"varint,13,opt,name=control_word_mismatched,json=controlWordMismatched,proto3" json:"control_word_mismatched,omitempty"`
	EncapsulationMismatched bool                     `protobuf:"varint,14,opt,name=encapsulation_mismatched,json=encapsulationMismatched,proto3" json:"encapsulation_mismatched,omitempty"`
	EncapsulationError      string                   `protobuf:"bytes,15,opt,name=encapsulation_error,json=encapsulationError,proto3" json:"encapsulation_error,omitempty"`
	Interworking            string                   `protobuf:"bytes,16,opt,name=interworking,proto3" json:"interworking,omitempty"`
	OutOfMemoryState        uint32                   `protobuf:"varint,17,opt,name=out_of_memory_state,json=outOfMemoryState,proto3" json:"out_of_memory_state,omitempty"`
	Statistics              *L2FibStatsBagForwarding `protobuf:"bytes,18,opt,name=statistics,proto3" json:"statistics,omitempty"`
	MstiMismatchDown        bool                     `protobuf:"varint,19,opt,name=msti_mismatch_down,json=mstiMismatchDown,proto3" json:"msti_mismatch_down,omitempty"`
	MacLimitOperDown        bool                     `protobuf:"varint,20,opt,name=mac_limit_oper_down,json=macLimitOperDown,proto3" json:"mac_limit_oper_down,omitempty"`
	RedundancyGroupId       uint32                   `protobuf:"varint,21,opt,name=redundancy_group_id,json=redundancyGroupId,proto3" json:"redundancy_group_id,omitempty"`
	RedundancyGroupState    string                   `protobuf:"bytes,22,opt,name=redundancy_group_state,json=redundancyGroupState,proto3" json:"redundancy_group_state,omitempty"`
	RedundancyObjectId      uint64                   `protobuf:"varint,23,opt,name=redundancy_object_id,json=redundancyObjectId,proto3" json:"redundancy_object_id,omitempty"`
	L2VpnProtection         *L2VpnProtection         `protobuf:"bytes,24,opt,name=l2vpn_protection,json=l2vpnProtection,proto3" json:"l2vpn_protection,omitempty"`
	IsAcPartiallyProgrammed bool                     `protobuf:"varint,25,opt,name=is_ac_partially_programmed,json=isAcPartiallyProgrammed,proto3" json:"is_ac_partially_programmed,omitempty"`
	EvpnInternalLabel       uint32                   `protobuf:"varint,26,opt,name=evpn_internal_label,json=evpnInternalLabel,proto3" json:"evpn_internal_label,omitempty"`
	XXX_NoUnkeyedLiteral    struct{}                 `json:"-"`
	XXX_unrecognized        []byte                   `json:"-"`
	XXX_sizecache           int32                    `json:"-"`
}

func (m *L2VpnAc) Reset()         { *m = L2VpnAc{} }
func (m *L2VpnAc) String() string { return proto.CompactTextString(m) }
func (*L2VpnAc) ProtoMessage()    {}
func (*L2VpnAc) Descriptor() ([]byte, []int) {
	return fileDescriptor_a6139fbb62c47e96, []int{19}
}

func (m *L2VpnAc) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2VpnAc.Unmarshal(m, b)
}
func (m *L2VpnAc) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2VpnAc.Marshal(b, m, deterministic)
}
func (m *L2VpnAc) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2VpnAc.Merge(m, src)
}
func (m *L2VpnAc) XXX_Size() int {
	return xxx_messageInfo_L2VpnAc.Size(m)
}
func (m *L2VpnAc) XXX_DiscardUnknown() {
	xxx_messageInfo_L2VpnAc.DiscardUnknown(m)
}

var xxx_messageInfo_L2VpnAc proto.InternalMessageInfo

func (m *L2VpnAc) GetInterface() *L2VpnInterface {
	if m != nil {
		return m.Interface
	}
	return nil
}

func (m *L2VpnAc) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *L2VpnAc) GetMsti() string {
	if m != nil {
		return m.Msti
	}
	return ""
}

func (m *L2VpnAc) GetInternalMsTi() string {
	if m != nil {
		return m.InternalMsTi
	}
	return ""
}

func (m *L2VpnAc) GetInterfaceHandle() string {
	if m != nil {
		return m.InterfaceHandle
	}
	return ""
}

func (m *L2VpnAc) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

func (m *L2VpnAc) GetXconnectId() uint32 {
	if m != nil {
		return m.XconnectId
	}
	return 0
}

func (m *L2VpnAc) GetMsTiMismatch() bool {
	if m != nil {
		return m.MsTiMismatch
	}
	return false
}

func (m *L2VpnAc) GetMtuMismatched() bool {
	if m != nil {
		return m.MtuMismatched
	}
	return false
}

func (m *L2VpnAc) GetTdmMediaMismatched() bool {
	if m != nil {
		return m.TdmMediaMismatched
	}
	return false
}

func (m *L2VpnAc) GetBviMacConflict() bool {
	if m != nil {
		return m.BviMacConflict
	}
	return false
}

func (m *L2VpnAc) GetBviNoPortUp() bool {
	if m != nil {
		return m.BviNoPortUp
	}
	return false
}

func (m *L2VpnAc) GetControlWordMismatched() bool {
	if m != nil {
		return m.ControlWordMismatched
	}
	return false
}

func (m *L2VpnAc) GetEncapsulationMismatched() bool {
	if m != nil {
		return m.EncapsulationMismatched
	}
	return false
}

func (m *L2VpnAc) GetEncapsulationError() string {
	if m != nil {
		return m.EncapsulationError
	}
	return ""
}

func (m *L2VpnAc) GetInterworking() string {
	if m != nil {
		return m.Interworking
	}
	return ""
}

func (m *L2VpnAc) GetOutOfMemoryState() uint32 {
	if m != nil {
		return m.OutOfMemoryState
	}
	return 0
}

func (m *L2VpnAc) GetStatistics() *L2FibStatsBagForwarding {
	if m != nil {
		return m.Statistics
	}
	return nil
}

func (m *L2VpnAc) GetMstiMismatchDown() bool {
	if m != nil {
		return m.MstiMismatchDown
	}
	return false
}

func (m *L2VpnAc) GetMacLimitOperDown() bool {
	if m != nil {
		return m.MacLimitOperDown
	}
	return false
}

func (m *L2VpnAc) GetRedundancyGroupId() uint32 {
	if m != nil {
		return m.RedundancyGroupId
	}
	return 0
}

func (m *L2VpnAc) GetRedundancyGroupState() string {
	if m != nil {
		return m.RedundancyGroupState
	}
	return ""
}

func (m *L2VpnAc) GetRedundancyObjectId() uint64 {
	if m != nil {
		return m.RedundancyObjectId
	}
	return 0
}

func (m *L2VpnAc) GetL2VpnProtection() *L2VpnProtection {
	if m != nil {
		return m.L2VpnProtection
	}
	return nil
}

func (m *L2VpnAc) GetIsAcPartiallyProgrammed() bool {
	if m != nil {
		return m.IsAcPartiallyProgrammed
	}
	return false
}

func (m *L2VpnAc) GetEvpnInternalLabel() uint32 {
	if m != nil {
		return m.EvpnInternalLabel
	}
	return 0
}

type L2VpnBagStormControlType struct {
	BdPolicer            bool     `protobuf:"varint,1,opt,name=bd_policer,json=bdPolicer,proto3" json:"bd_policer,omitempty"`
	Unicast              bool     `protobuf:"varint,2,opt,name=unicast,proto3" json:"unicast,omitempty"`
	Multicast            bool     `protobuf:"varint,3,opt,name=multicast,proto3" json:"multicast,omitempty"`
	Broadcast            bool     `protobuf:"varint,4,opt,name=broadcast,proto3" json:"broadcast,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *L2VpnBagStormControlType) Reset()         { *m = L2VpnBagStormControlType{} }
func (m *L2VpnBagStormControlType) String() string { return proto.CompactTextString(m) }
func (*L2VpnBagStormControlType) ProtoMessage()    {}
func (*L2VpnBagStormControlType) Descriptor() ([]byte, []int) {
	return fileDescriptor_a6139fbb62c47e96, []int{20}
}

func (m *L2VpnBagStormControlType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2VpnBagStormControlType.Unmarshal(m, b)
}
func (m *L2VpnBagStormControlType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2VpnBagStormControlType.Marshal(b, m, deterministic)
}
func (m *L2VpnBagStormControlType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2VpnBagStormControlType.Merge(m, src)
}
func (m *L2VpnBagStormControlType) XXX_Size() int {
	return xxx_messageInfo_L2VpnBagStormControlType.Size(m)
}
func (m *L2VpnBagStormControlType) XXX_DiscardUnknown() {
	xxx_messageInfo_L2VpnBagStormControlType.DiscardUnknown(m)
}

var xxx_messageInfo_L2VpnBagStormControlType proto.InternalMessageInfo

func (m *L2VpnBagStormControlType) GetBdPolicer() bool {
	if m != nil {
		return m.BdPolicer
	}
	return false
}

func (m *L2VpnBagStormControlType) GetUnicast() bool {
	if m != nil {
		return m.Unicast
	}
	return false
}

func (m *L2VpnBagStormControlType) GetMulticast() bool {
	if m != nil {
		return m.Multicast
	}
	return false
}

func (m *L2VpnBagStormControlType) GetBroadcast() bool {
	if m != nil {
		return m.Broadcast
	}
	return false
}

type L2VpnBridgeSecParam struct {
	MacLimit                               uint32                    `protobuf:"varint,1,opt,name=mac_limit,json=macLimit,proto3" json:"mac_limit,omitempty"`
	MacLimitAction                         string                    `protobuf:"bytes,2,opt,name=mac_limit_action,json=macLimitAction,proto3" json:"mac_limit_action,omitempty"`
	MacLimitNotification                   string                    `protobuf:"bytes,3,opt,name=mac_limit_notification,json=macLimitNotification,proto3" json:"mac_limit_notification,omitempty"`
	MacAgingTime                           uint32                    `protobuf:"varint,4,opt,name=mac_aging_time,json=macAgingTime,proto3" json:"mac_aging_time,omitempty"`
	MacAgingMode                           string                    `protobuf:"bytes,5,opt,name=mac_aging_mode,json=macAgingMode,proto3" json:"mac_aging_mode,omitempty"`
	MacFlooding                            bool                      `protobuf:"varint,6,opt,name=mac_flooding,json=macFlooding,proto3" json:"mac_flooding,omitempty"`
	MacLearning                            bool                      `protobuf:"varint,7,opt,name=mac_learning,json=macLearning,proto3" json:"mac_learning,omitempty"`
	LearnDisabledMacLimitAction            bool                      `protobuf:"varint,8,opt,name=learn_disabled_mac_limit_action,json=learnDisabledMacLimitAction,proto3" json:"learn_disabled_mac_limit_action,omitempty"`
	FloodUuDisabledMacLimitAction          bool                      `protobuf:"varint,9,opt,name=flood_uu_disabled_mac_limit_action,json=floodUuDisabledMacLimitAction,proto3" json:"flood_uu_disabled_mac_limit_action,omitempty"`
	MacLimitReached                        bool                      `protobuf:"varint,10,opt,name=mac_limit_reached,json=macLimitReached,proto3" json:"mac_limit_reached,omitempty"`
	FloodUnknownUnicastEnabled             bool                      `protobuf:"varint,11,opt,name=flood_unknown_unicast_enabled,json=floodUnknownUnicastEnabled,proto3" json:"flood_unknown_unicast_enabled,omitempty"`
	MacPortDownFlushEnabled                bool                      `protobuf:"varint,12,opt,name=mac_port_down_flush_enabled,json=macPortDownFlushEnabled,proto3" json:"mac_port_down_flush_enabled,omitempty"`
	SplitHorizonGroupId                    uint32                    `protobuf:"varint,13,opt,name=split_horizon_group_id,json=splitHorizonGroupId,proto3" json:"split_horizon_group_id,omitempty"`
	IsIpSourceGuardEnabled                 bool                      `protobuf:"varint,14,opt,name=is_ip_source_guard_enabled,json=isIpSourceGuardEnabled,proto3" json:"is_ip_source_guard_enabled,omitempty"`
	IsIpsgLoggingEnabled                   bool                      `protobuf:"varint,15,opt,name=is_ipsg_logging_enabled,json=isIpsgLoggingEnabled,proto3" json:"is_ipsg_logging_enabled,omitempty"`
	IsDaiEnabled                           bool                      `protobuf:"varint,16,opt,name=is_dai_enabled,json=isDaiEnabled,proto3" json:"is_dai_enabled,omitempty"`
	IsDaiLoggingEnabled                    bool                      `protobuf:"varint,17,opt,name=is_dai_logging_enabled,json=isDaiLoggingEnabled,proto3" json:"is_dai_logging_enabled,omitempty"`
	IsDaiAddrValidateSourceMacEnabled      bool                      `protobuf:"varint,18,opt,name=is_dai_addr_validate_source_mac_enabled,json=isDaiAddrValidateSourceMacEnabled,proto3" json:"is_dai_addr_validate_source_mac_enabled,omitempty"`
	IsDaiAddrValidateDestinationMacEnabled bool                      `protobuf:"varint,19,opt,name=is_dai_addr_validate_destination_mac_enabled,json=isDaiAddrValidateDestinationMacEnabled,proto3" json:"is_dai_addr_validate_destination_mac_enabled,omitempty"`
	IsDaiAddrValidateIpv4Enabled           bool                      `protobuf:"varint,20,opt,name=is_dai_addr_validate_ipv4_enabled,json=isDaiAddrValidateIpv4Enabled,proto3" json:"is_dai_addr_validate_ipv4_enabled,omitempty"`
	IsMacSecureEnabled                     bool                      `protobuf:"varint,21,opt,name=is_mac_secure_enabled,json=isMacSecureEnabled,proto3" json:"is_mac_secure_enabled,omitempty"`
	MacSecureAction                        string                    `protobuf:"bytes,22,opt,name=mac_secure_action,json=macSecureAction,proto3" json:"mac_secure_action,omitempty"`
	IsMacSecureLoggingEnabled              bool                      `protobuf:"varint,23,opt,name=is_mac_secure_logging_enabled,json=isMacSecureLoggingEnabled,proto3" json:"is_mac_secure_logging_enabled,omitempty"`
	IsMacSecureAcceptShutdownEnabled       bool                      `protobuf:"varint,24,opt,name=is_mac_secure_accept_shutdown_enabled,json=isMacSecureAcceptShutdownEnabled,proto3" json:"is_mac_secure_accept_shutdown_enabled,omitempty"`
	DaiAddressValidationMask               uint32                    `protobuf:"varint,25,opt,name=dai_address_validation_mask,json=daiAddressValidationMask,proto3" json:"dai_address_validation_mask,omitempty"`
	Dhcpv4Snoop                            bool                      `protobuf:"varint,26,opt,name=dhcpv4_snoop,json=dhcpv4Snoop,proto3" json:"dhcpv4_snoop,omitempty"`
	Dhcpv4ProfileName                      string                    `protobuf:"bytes,27,opt,name=dhcpv4_profile_name,json=dhcpv4ProfileName,proto3" json:"dhcpv4_profile_name,omitempty"`
	IgmPv4Disabled                         bool                      `protobuf:"varint,28,opt,name=igm_pv4_disabled,json=igmPv4Disabled,proto3" json:"igm_pv4_disabled,omitempty"`
	IgmPv4ProfileName                      string                    `protobuf:"bytes,29,opt,name=igm_pv4_profile_name,json=igmPv4ProfileName,proto3" json:"igm_pv4_profile_name,omitempty"`
	MldProfileName                         string                    `protobuf:"bytes,30,opt,name=mld_profile_name,json=mldProfileName,proto3" json:"mld_profile_name,omitempty"`
	MmrpFloodOptimization                  bool                      `protobuf:"varint,31,opt,name=mmrp_flood_optimization,json=mmrpFloodOptimization,proto3" json:"mmrp_flood_optimization,omitempty"`
	StormControl                           *L2VpnBagStormControlType `protobuf:"bytes,32,opt,name=storm_control,json=stormControl,proto3" json:"storm_control,omitempty"`
	UnicastStormControlRateUnit            string                    `protobuf:"bytes,33,opt,name=unicast_storm_control_rate_unit,json=unicastStormControlRateUnit,proto3" json:"unicast_storm_control_rate_unit,omitempty"`
	UnicastStormControlPps                 uint64                    `protobuf:"varint,34,opt,name=unicast_storm_control_pps,json=unicastStormControlPps,proto3" json:"unicast_storm_control_pps,omitempty"`
	UnicastStormControlKbPs                uint64                    `protobuf:"varint,35,opt,name=unicast_storm_control_kb_ps,json=unicastStormControlKbPs,proto3" json:"unicast_storm_control_kb_ps,omitempty"`
	MulticastStormControlRateUnit          string                    `protobuf:"bytes,36,opt,name=multicast_storm_control_rate_unit,json=multicastStormControlRateUnit,proto3" json:"multicast_storm_control_rate_unit,omitempty"`
	MulticastStormControlPps               uint64                    `protobuf:"varint,37,opt,name=multicast_storm_control_pps,json=multicastStormControlPps,proto3" json:"multicast_storm_control_pps,omitempty"`
	MulticastStormControlKbPs              uint64                    `protobuf:"varint,38,opt,name=multicast_storm_control_kb_ps,json=multicastStormControlKbPs,proto3" json:"multicast_storm_control_kb_ps,omitempty"`
	BroadcastStormControlRateUnit          string                    `protobuf:"bytes,39,opt,name=broadcast_storm_control_rate_unit,json=broadcastStormControlRateUnit,proto3" json:"broadcast_storm_control_rate_unit,omitempty"`
	BroadcastStormControlPps               uint64                    `protobuf:"varint,40,opt,name=broadcast_storm_control_pps,json=broadcastStormControlPps,proto3" json:"broadcast_storm_control_pps,omitempty"`
	BroadcastStormControlKbPs              uint64                    `protobuf:"varint,41,opt,name=broadcast_storm_control_kb_ps,json=broadcastStormControlKbPs,proto3" json:"broadcast_storm_control_kb_ps,omitempty"`
	XXX_NoUnkeyedLiteral                   struct{}                  `json:"-"`
	XXX_unrecognized                       []byte                    `json:"-"`
	XXX_sizecache                          int32                     `json:"-"`
}

func (m *L2VpnBridgeSecParam) Reset()         { *m = L2VpnBridgeSecParam{} }
func (m *L2VpnBridgeSecParam) String() string { return proto.CompactTextString(m) }
func (*L2VpnBridgeSecParam) ProtoMessage()    {}
func (*L2VpnBridgeSecParam) Descriptor() ([]byte, []int) {
	return fileDescriptor_a6139fbb62c47e96, []int{21}
}

func (m *L2VpnBridgeSecParam) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2VpnBridgeSecParam.Unmarshal(m, b)
}
func (m *L2VpnBridgeSecParam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2VpnBridgeSecParam.Marshal(b, m, deterministic)
}
func (m *L2VpnBridgeSecParam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2VpnBridgeSecParam.Merge(m, src)
}
func (m *L2VpnBridgeSecParam) XXX_Size() int {
	return xxx_messageInfo_L2VpnBridgeSecParam.Size(m)
}
func (m *L2VpnBridgeSecParam) XXX_DiscardUnknown() {
	xxx_messageInfo_L2VpnBridgeSecParam.DiscardUnknown(m)
}

var xxx_messageInfo_L2VpnBridgeSecParam proto.InternalMessageInfo

func (m *L2VpnBridgeSecParam) GetMacLimit() uint32 {
	if m != nil {
		return m.MacLimit
	}
	return 0
}

func (m *L2VpnBridgeSecParam) GetMacLimitAction() string {
	if m != nil {
		return m.MacLimitAction
	}
	return ""
}

func (m *L2VpnBridgeSecParam) GetMacLimitNotification() string {
	if m != nil {
		return m.MacLimitNotification
	}
	return ""
}

func (m *L2VpnBridgeSecParam) GetMacAgingTime() uint32 {
	if m != nil {
		return m.MacAgingTime
	}
	return 0
}

func (m *L2VpnBridgeSecParam) GetMacAgingMode() string {
	if m != nil {
		return m.MacAgingMode
	}
	return ""
}

func (m *L2VpnBridgeSecParam) GetMacFlooding() bool {
	if m != nil {
		return m.MacFlooding
	}
	return false
}

func (m *L2VpnBridgeSecParam) GetMacLearning() bool {
	if m != nil {
		return m.MacLearning
	}
	return false
}

func (m *L2VpnBridgeSecParam) GetLearnDisabledMacLimitAction() bool {
	if m != nil {
		return m.LearnDisabledMacLimitAction
	}
	return false
}

func (m *L2VpnBridgeSecParam) GetFloodUuDisabledMacLimitAction() bool {
	if m != nil {
		return m.FloodUuDisabledMacLimitAction
	}
	return false
}

func (m *L2VpnBridgeSecParam) GetMacLimitReached() bool {
	if m != nil {
		return m.MacLimitReached
	}
	return false
}

func (m *L2VpnBridgeSecParam) GetFloodUnknownUnicastEnabled() bool {
	if m != nil {
		return m.FloodUnknownUnicastEnabled
	}
	return false
}

func (m *L2VpnBridgeSecParam) GetMacPortDownFlushEnabled() bool {
	if m != nil {
		return m.MacPortDownFlushEnabled
	}
	return false
}

func (m *L2VpnBridgeSecParam) GetSplitHorizonGroupId() uint32 {
	if m != nil {
		return m.SplitHorizonGroupId
	}
	return 0
}

func (m *L2VpnBridgeSecParam) GetIsIpSourceGuardEnabled() bool {
	if m != nil {
		return m.IsIpSourceGuardEnabled
	}
	return false
}

func (m *L2VpnBridgeSecParam) GetIsIpsgLoggingEnabled() bool {
	if m != nil {
		return m.IsIpsgLoggingEnabled
	}
	return false
}

func (m *L2VpnBridgeSecParam) GetIsDaiEnabled() bool {
	if m != nil {
		return m.IsDaiEnabled
	}
	return false
}

func (m *L2VpnBridgeSecParam) GetIsDaiLoggingEnabled() bool {
	if m != nil {
		return m.IsDaiLoggingEnabled
	}
	return false
}

func (m *L2VpnBridgeSecParam) GetIsDaiAddrValidateSourceMacEnabled() bool {
	if m != nil {
		return m.IsDaiAddrValidateSourceMacEnabled
	}
	return false
}

func (m *L2VpnBridgeSecParam) GetIsDaiAddrValidateDestinationMacEnabled() bool {
	if m != nil {
		return m.IsDaiAddrValidateDestinationMacEnabled
	}
	return false
}

func (m *L2VpnBridgeSecParam) GetIsDaiAddrValidateIpv4Enabled() bool {
	if m != nil {
		return m.IsDaiAddrValidateIpv4Enabled
	}
	return false
}

func (m *L2VpnBridgeSecParam) GetIsMacSecureEnabled() bool {
	if m != nil {
		return m.IsMacSecureEnabled
	}
	return false
}

func (m *L2VpnBridgeSecParam) GetMacSecureAction() string {
	if m != nil {
		return m.MacSecureAction
	}
	return ""
}

func (m *L2VpnBridgeSecParam) GetIsMacSecureLoggingEnabled() bool {
	if m != nil {
		return m.IsMacSecureLoggingEnabled
	}
	return false
}

func (m *L2VpnBridgeSecParam) GetIsMacSecureAcceptShutdownEnabled() bool {
	if m != nil {
		return m.IsMacSecureAcceptShutdownEnabled
	}
	return false
}

func (m *L2VpnBridgeSecParam) GetDaiAddressValidationMask() uint32 {
	if m != nil {
		return m.DaiAddressValidationMask
	}
	return 0
}

func (m *L2VpnBridgeSecParam) GetDhcpv4Snoop() bool {
	if m != nil {
		return m.Dhcpv4Snoop
	}
	return false
}

func (m *L2VpnBridgeSecParam) GetDhcpv4ProfileName() string {
	if m != nil {
		return m.Dhcpv4ProfileName
	}
	return ""
}

func (m *L2VpnBridgeSecParam) GetIgmPv4Disabled() bool {
	if m != nil {
		return m.IgmPv4Disabled
	}
	return false
}

func (m *L2VpnBridgeSecParam) GetIgmPv4ProfileName() string {
	if m != nil {
		return m.IgmPv4ProfileName
	}
	return ""
}

func (m *L2VpnBridgeSecParam) GetMldProfileName() string {
	if m != nil {
		return m.MldProfileName
	}
	return ""
}

func (m *L2VpnBridgeSecParam) GetMmrpFloodOptimization() bool {
	if m != nil {
		return m.MmrpFloodOptimization
	}
	return false
}

func (m *L2VpnBridgeSecParam) GetStormControl() *L2VpnBagStormControlType {
	if m != nil {
		return m.StormControl
	}
	return nil
}

func (m *L2VpnBridgeSecParam) GetUnicastStormControlRateUnit() string {
	if m != nil {
		return m.UnicastStormControlRateUnit
	}
	return ""
}

func (m *L2VpnBridgeSecParam) GetUnicastStormControlPps() uint64 {
	if m != nil {
		return m.UnicastStormControlPps
	}
	return 0
}

func (m *L2VpnBridgeSecParam) GetUnicastStormControlKbPs() uint64 {
	if m != nil {
		return m.UnicastStormControlKbPs
	}
	return 0
}

func (m *L2VpnBridgeSecParam) GetMulticastStormControlRateUnit() string {
	if m != nil {
		return m.MulticastStormControlRateUnit
	}
	return ""
}

func (m *L2VpnBridgeSecParam) GetMulticastStormControlPps() uint64 {
	if m != nil {
		return m.MulticastStormControlPps
	}
	return 0
}

func (m *L2VpnBridgeSecParam) GetMulticastStormControlKbPs() uint64 {
	if m != nil {
		return m.MulticastStormControlKbPs
	}
	return 0
}

func (m *L2VpnBridgeSecParam) GetBroadcastStormControlRateUnit() string {
	if m != nil {
		return m.BroadcastStormControlRateUnit
	}
	return ""
}

func (m *L2VpnBridgeSecParam) GetBroadcastStormControlPps() uint64 {
	if m != nil {
		return m.BroadcastStormControlPps
	}
	return 0
}

func (m *L2VpnBridgeSecParam) GetBroadcastStormControlKbPs() uint64 {
	if m != nil {
		return m.BroadcastStormControlKbPs
	}
	return 0
}

type L2VpnBridgePortSecParam struct {
	Base                          *L2VpnBridgeSecParam      `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	StormControl                  *L2VpnBagStormControlType `protobuf:"bytes,2,opt,name=storm_control,json=stormControl,proto3" json:"storm_control,omitempty"`
	UnicastStormControlRateUnit   string                    `protobuf:"bytes,3,opt,name=unicast_storm_control_rate_unit,json=unicastStormControlRateUnit,proto3" json:"unicast_storm_control_rate_unit,omitempty"`
	UnicastStormControlPps        uint64                    `protobuf:"varint,4,opt,name=unicast_storm_control_pps,json=unicastStormControlPps,proto3" json:"unicast_storm_control_pps,omitempty"`
	UnicastStormControlKbPs       uint64                    `protobuf:"varint,5,opt,name=unicast_storm_control_kb_ps,json=unicastStormControlKbPs,proto3" json:"unicast_storm_control_kb_ps,omitempty"`
	MulticastStormControlRateUnit string                    `protobuf:"bytes,6,opt,name=multicast_storm_control_rate_unit,json=multicastStormControlRateUnit,proto3" json:"multicast_storm_control_rate_unit,omitempty"`
	MulticastStormControlPps      uint64                    `protobuf:"varint,7,opt,name=multicast_storm_control_pps,json=multicastStormControlPps,proto3" json:"multicast_storm_control_pps,omitempty"`
	MulticastStormControlKbPs     uint64                    `protobuf:"varint,8,opt,name=multicast_storm_control_kb_ps,json=multicastStormControlKbPs,proto3" json:"multicast_storm_control_kb_ps,omitempty"`
	BroadcastStormControlRateUnit string                    `protobuf:"bytes,9,opt,name=broadcast_storm_control_rate_unit,json=broadcastStormControlRateUnit,proto3" json:"broadcast_storm_control_rate_unit,omitempty"`
	BroadcastStormControlPps      uint64                    `protobuf:"varint,10,opt,name=broadcast_storm_control_pps,json=broadcastStormControlPps,proto3" json:"broadcast_storm_control_pps,omitempty"`
	BroadcastStormControlKbPs     uint64                    `protobuf:"varint,11,opt,name=broadcast_storm_control_kb_ps,json=broadcastStormControlKbPs,proto3" json:"broadcast_storm_control_kb_ps,omitempty"`
	Dhcpv4Trust                   bool                      `protobuf:"varint,12,opt,name=dhcpv4_trust,json=dhcpv4Trust,proto3" json:"dhcpv4_trust,omitempty"`
	XXX_NoUnkeyedLiteral          struct{}                  `json:"-"`
	XXX_unrecognized              []byte                    `json:"-"`
	XXX_sizecache                 int32                     `json:"-"`
}

func (m *L2VpnBridgePortSecParam) Reset()         { *m = L2VpnBridgePortSecParam{} }
func (m *L2VpnBridgePortSecParam) String() string { return proto.CompactTextString(m) }
func (*L2VpnBridgePortSecParam) ProtoMessage()    {}
func (*L2VpnBridgePortSecParam) Descriptor() ([]byte, []int) {
	return fileDescriptor_a6139fbb62c47e96, []int{22}
}

func (m *L2VpnBridgePortSecParam) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2VpnBridgePortSecParam.Unmarshal(m, b)
}
func (m *L2VpnBridgePortSecParam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2VpnBridgePortSecParam.Marshal(b, m, deterministic)
}
func (m *L2VpnBridgePortSecParam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2VpnBridgePortSecParam.Merge(m, src)
}
func (m *L2VpnBridgePortSecParam) XXX_Size() int {
	return xxx_messageInfo_L2VpnBridgePortSecParam.Size(m)
}
func (m *L2VpnBridgePortSecParam) XXX_DiscardUnknown() {
	xxx_messageInfo_L2VpnBridgePortSecParam.DiscardUnknown(m)
}

var xxx_messageInfo_L2VpnBridgePortSecParam proto.InternalMessageInfo

func (m *L2VpnBridgePortSecParam) GetBase() *L2VpnBridgeSecParam {
	if m != nil {
		return m.Base
	}
	return nil
}

func (m *L2VpnBridgePortSecParam) GetStormControl() *L2VpnBagStormControlType {
	if m != nil {
		return m.StormControl
	}
	return nil
}

func (m *L2VpnBridgePortSecParam) GetUnicastStormControlRateUnit() string {
	if m != nil {
		return m.UnicastStormControlRateUnit
	}
	return ""
}

func (m *L2VpnBridgePortSecParam) GetUnicastStormControlPps() uint64 {
	if m != nil {
		return m.UnicastStormControlPps
	}
	return 0
}

func (m *L2VpnBridgePortSecParam) GetUnicastStormControlKbPs() uint64 {
	if m != nil {
		return m.UnicastStormControlKbPs
	}
	return 0
}

func (m *L2VpnBridgePortSecParam) GetMulticastStormControlRateUnit() string {
	if m != nil {
		return m.MulticastStormControlRateUnit
	}
	return ""
}

func (m *L2VpnBridgePortSecParam) GetMulticastStormControlPps() uint64 {
	if m != nil {
		return m.MulticastStormControlPps
	}
	return 0
}

func (m *L2VpnBridgePortSecParam) GetMulticastStormControlKbPs() uint64 {
	if m != nil {
		return m.MulticastStormControlKbPs
	}
	return 0
}

func (m *L2VpnBridgePortSecParam) GetBroadcastStormControlRateUnit() string {
	if m != nil {
		return m.BroadcastStormControlRateUnit
	}
	return ""
}

func (m *L2VpnBridgePortSecParam) GetBroadcastStormControlPps() uint64 {
	if m != nil {
		return m.BroadcastStormControlPps
	}
	return 0
}

func (m *L2VpnBridgePortSecParam) GetBroadcastStormControlKbPs() uint64 {
	if m != nil {
		return m.BroadcastStormControlKbPs
	}
	return 0
}

func (m *L2VpnBridgePortSecParam) GetDhcpv4Trust() bool {
	if m != nil {
		return m.Dhcpv4Trust
	}
	return false
}

type L2VpnBdMac struct {
	Address              string   `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Bmac                 string   `protobuf:"bytes,2,opt,name=bmac,proto3" json:"bmac,omitempty"`
	NextHopIp            string   `protobuf:"bytes,3,opt,name=next_hop_ip,json=nextHopIp,proto3" json:"next_hop_ip,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *L2VpnBdMac) Reset()         { *m = L2VpnBdMac{} }
func (m *L2VpnBdMac) String() string { return proto.CompactTextString(m) }
func (*L2VpnBdMac) ProtoMessage()    {}
func (*L2VpnBdMac) Descriptor() ([]byte, []int) {
	return fileDescriptor_a6139fbb62c47e96, []int{23}
}

func (m *L2VpnBdMac) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2VpnBdMac.Unmarshal(m, b)
}
func (m *L2VpnBdMac) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2VpnBdMac.Marshal(b, m, deterministic)
}
func (m *L2VpnBdMac) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2VpnBdMac.Merge(m, src)
}
func (m *L2VpnBdMac) XXX_Size() int {
	return xxx_messageInfo_L2VpnBdMac.Size(m)
}
func (m *L2VpnBdMac) XXX_DiscardUnknown() {
	xxx_messageInfo_L2VpnBdMac.DiscardUnknown(m)
}

var xxx_messageInfo_L2VpnBdMac proto.InternalMessageInfo

func (m *L2VpnBdMac) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *L2VpnBdMac) GetBmac() string {
	if m != nil {
		return m.Bmac
	}
	return ""
}

func (m *L2VpnBdMac) GetNextHopIp() string {
	if m != nil {
		return m.NextHopIp
	}
	return ""
}

type L2VpnBdAc struct {
	AttachmentCircuit    *L2VpnAc                 `protobuf:"bytes,50,opt,name=attachment_circuit,json=attachmentCircuit,proto3" json:"attachment_circuit,omitempty"`
	SecurityParameters   *L2VpnBridgePortSecParam `protobuf:"bytes,51,opt,name=security_parameters,json=securityParameters,proto3" json:"security_parameters,omitempty"`
	BviMacIndex          uint32                   `protobuf:"varint,52,opt,name=bvi_mac_index,json=bviMacIndex,proto3" json:"bvi_mac_index,omitempty"`
	StaticMac            []*L2VpnBdMac            `protobuf:"bytes,53,rep,name=static_mac,json=staticMac,proto3" json:"static_mac,omitempty"`
	Bvimac               []*L2VpnBdMac            `protobuf:"bytes,54,rep,name=bvimac,proto3" json:"bvimac,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *L2VpnBdAc) Reset()         { *m = L2VpnBdAc{} }
func (m *L2VpnBdAc) String() string { return proto.CompactTextString(m) }
func (*L2VpnBdAc) ProtoMessage()    {}
func (*L2VpnBdAc) Descriptor() ([]byte, []int) {
	return fileDescriptor_a6139fbb62c47e96, []int{24}
}

func (m *L2VpnBdAc) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2VpnBdAc.Unmarshal(m, b)
}
func (m *L2VpnBdAc) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2VpnBdAc.Marshal(b, m, deterministic)
}
func (m *L2VpnBdAc) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2VpnBdAc.Merge(m, src)
}
func (m *L2VpnBdAc) XXX_Size() int {
	return xxx_messageInfo_L2VpnBdAc.Size(m)
}
func (m *L2VpnBdAc) XXX_DiscardUnknown() {
	xxx_messageInfo_L2VpnBdAc.DiscardUnknown(m)
}

var xxx_messageInfo_L2VpnBdAc proto.InternalMessageInfo

func (m *L2VpnBdAc) GetAttachmentCircuit() *L2VpnAc {
	if m != nil {
		return m.AttachmentCircuit
	}
	return nil
}

func (m *L2VpnBdAc) GetSecurityParameters() *L2VpnBridgePortSecParam {
	if m != nil {
		return m.SecurityParameters
	}
	return nil
}

func (m *L2VpnBdAc) GetBviMacIndex() uint32 {
	if m != nil {
		return m.BviMacIndex
	}
	return 0
}

func (m *L2VpnBdAc) GetStaticMac() []*L2VpnBdMac {
	if m != nil {
		return m.StaticMac
	}
	return nil
}

func (m *L2VpnBdAc) GetBvimac() []*L2VpnBdMac {
	if m != nil {
		return m.Bvimac
	}
	return nil
}

func init() {
	proto.RegisterType((*L2VpnBdAc_KEYS)(nil), "cisco_ios_xr_l2vpn_oper.l2vpnv2.nodes.node.bridge_domains.bridge_domain.bridge_acs.bridge_ac.l2vpn_bd_ac_KEYS")
	proto.RegisterType((*L2VpnEthernet)(nil), "cisco_ios_xr_l2vpn_oper.l2vpnv2.nodes.node.bridge_domains.bridge_domain.bridge_acs.bridge_ac.l2vpn_ethernet")
	proto.RegisterType((*L2VpnEfpRange)(nil), "cisco_ios_xr_l2vpn_oper.l2vpnv2.nodes.node.bridge_domains.bridge_domain.bridge_acs.bridge_ac.l2vpn_efp_range")
	proto.RegisterType((*L2VpnVlan)(nil), "cisco_ios_xr_l2vpn_oper.l2vpnv2.nodes.node.bridge_domains.bridge_domain.bridge_acs.bridge_ac.l2vpn_vlan")
	proto.RegisterType((*L2VpnTdmOption)(nil), "cisco_ios_xr_l2vpn_oper.l2vpnv2.nodes.node.bridge_domains.bridge_domain.bridge_acs.bridge_ac.l2vpn_tdm_option")
	proto.RegisterType((*L2VpnTdm)(nil), "cisco_ios_xr_l2vpn_oper.l2vpnv2.nodes.node.bridge_domains.bridge_domain.bridge_acs.bridge_ac.l2vpn_tdm")
	proto.RegisterType((*L2VpnAtm)(nil), "cisco_ios_xr_l2vpn_oper.l2vpnv2.nodes.node.bridge_domains.bridge_domain.bridge_acs.bridge_ac.l2vpn_atm")
	proto.RegisterType((*L2VpnFr)(nil), "cisco_ios_xr_l2vpn_oper.l2vpnv2.nodes.node.bridge_domains.bridge_domain.bridge_acs.bridge_ac.l2vpn_fr")
	proto.RegisterType((*InterfacesItem)(nil), "cisco_ios_xr_l2vpn_oper.l2vpnv2.nodes.node.bridge_domains.bridge_domain.bridge_acs.bridge_ac.interfaces_item")
	proto.RegisterType((*ItemIflistIfl)(nil), "cisco_ios_xr_l2vpn_oper.l2vpnv2.nodes.node.bridge_domains.bridge_domain.bridge_acs.bridge_ac.item_iflist_ifl")
	proto.RegisterType((*L2VpnPwhe)(nil), "cisco_ios_xr_l2vpn_oper.l2vpnv2.nodes.node.bridge_domains.bridge_domain.bridge_acs.bridge_ac.l2vpn_pwhe")
	proto.RegisterType((*L2VpnInterfaceParams)(nil), "cisco_ios_xr_l2vpn_oper.l2vpnv2.nodes.node.bridge_domains.bridge_domain.bridge_acs.bridge_ac.l2vpn_interface_params")
	proto.RegisterType((*L2VpnInterface)(nil), "cisco_ios_xr_l2vpn_oper.l2vpnv2.nodes.node.bridge_domains.bridge_domain.bridge_acs.bridge_ac.l2vpn_interface")
	proto.RegisterType((*L2FibStatsBagCounters)(nil), "cisco_ios_xr_l2vpn_oper.l2vpnv2.nodes.node.bridge_domains.bridge_domain.bridge_acs.bridge_ac.l2fib_stats_bag_counters")
	proto.RegisterType((*L2FibStatsBagImp)(nil), "cisco_ios_xr_l2vpn_oper.l2vpnv2.nodes.node.bridge_domains.bridge_domain.bridge_acs.bridge_ac.l2fib_stats_bag_imp")
	proto.RegisterType((*L2FibStatsBagDisp)(nil), "cisco_ios_xr_l2vpn_oper.l2vpnv2.nodes.node.bridge_domains.bridge_domain.bridge_acs.bridge_ac.l2fib_stats_bag_disp")
	proto.RegisterType((*L2FibStatsBagSeqNum)(nil), "cisco_ios_xr_l2vpn_oper.l2vpnv2.nodes.node.bridge_domains.bridge_domain.bridge_acs.bridge_ac.l2fib_stats_bag_seq_num")
	proto.RegisterType((*L2FibStatsBagForwarding)(nil), "cisco_ios_xr_l2vpn_oper.l2vpnv2.nodes.node.bridge_domains.bridge_domain.bridge_acs.bridge_ac.l2fib_stats_bag_forwarding")
	proto.RegisterType((*L2VpnProtection)(nil), "cisco_ios_xr_l2vpn_oper.l2vpnv2.nodes.node.bridge_domains.bridge_domain.bridge_acs.bridge_ac.l2vpn_protection")
	proto.RegisterType((*L2VpnAc)(nil), "cisco_ios_xr_l2vpn_oper.l2vpnv2.nodes.node.bridge_domains.bridge_domain.bridge_acs.bridge_ac.l2vpn_ac")
	proto.RegisterType((*L2VpnBagStormControlType)(nil), "cisco_ios_xr_l2vpn_oper.l2vpnv2.nodes.node.bridge_domains.bridge_domain.bridge_acs.bridge_ac.l2vpn_bag_storm_control_type")
	proto.RegisterType((*L2VpnBridgeSecParam)(nil), "cisco_ios_xr_l2vpn_oper.l2vpnv2.nodes.node.bridge_domains.bridge_domain.bridge_acs.bridge_ac.l2vpn_bridge_sec_param")
	proto.RegisterType((*L2VpnBridgePortSecParam)(nil), "cisco_ios_xr_l2vpn_oper.l2vpnv2.nodes.node.bridge_domains.bridge_domain.bridge_acs.bridge_ac.l2vpn_bridge_port_sec_param")
	proto.RegisterType((*L2VpnBdMac)(nil), "cisco_ios_xr_l2vpn_oper.l2vpnv2.nodes.node.bridge_domains.bridge_domain.bridge_acs.bridge_ac.l2vpn_bd_mac")
	proto.RegisterType((*L2VpnBdAc)(nil), "cisco_ios_xr_l2vpn_oper.l2vpnv2.nodes.node.bridge_domains.bridge_domain.bridge_acs.bridge_ac.l2vpn_bd_ac")
}

func init() { proto.RegisterFile("l2vpn_bd_ac.proto", fileDescriptor_a6139fbb62c47e96) }

var fileDescriptor_a6139fbb62c47e96 = []byte{
	// 3468 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x5b, 0xdd, 0x6f, 0x5c, 0xc7,
	0x75, 0xc7, 0x25, 0x29, 0x72, 0x79, 0x96, 0xcb, 0x8f, 0x21, 0x45, 0xae, 0x44, 0xd1, 0x96, 0xd6,
	0x71, 0xac, 0x04, 0x8e, 0xe2, 0xd2, 0xb2, 0xd3, 0xb4, 0x35, 0x1a, 0x45, 0x92, 0x2d, 0x22, 0xa2,
	0x49, 0x5c, 0x4a, 0x2e, 0x0a, 0x18, 0x98, 0xce, 0xde, 0x3b, 0xbb, 0x9c, 0xe8, 0x7e, 0x69, 0x66,
	0xee, 0x52, 0x34, 0xfa, 0x54, 0x14, 0x68, 0x8a, 0xb6, 0x08, 0x02, 0xbb, 0xe8, 0x47, 0xd0, 0x06,
	0x7d, 0x29, 0x8a, 0xa4, 0xff, 0x40, 0x5f, 0xfb, 0x52, 0xe4, 0xa1, 0xef, 0xfd, 0x07, 0xfa, 0x17,
	0x14, 0xe8, 0x43, 0xfb, 0x52, 0xcc, 0x99, 0x99, 0x7b, 0xef, 0xae, 0x56, 0x6d, 0x01, 0xcb, 0x4b,
	0xe5, 0x45, 0xba, 0xf7, 0x7c, 0xcd, 0xef, 0x9c, 0x99, 0x39, 0xe7, 0xec, 0xcc, 0x25, 0x6c, 0x24,
	0xfb, 0xa3, 0x22, 0xa3, 0xfd, 0x98, 0xb2, 0xe8, 0x56, 0x21, 0x73, 0x9d, 0x93, 0x4f, 0x23, 0xa1,
	0xa2, 0x9c, 0x8a, 0x5c, 0xd1, 0x67, 0x92, 0x5a, 0x7e, 0x5e, 0x70, 0x79, 0x0b, 0x1f, 0x47, 0xfb,
	0xb7, 0xb2, 0x3c, 0xe6, 0x0a, 0xff, 0xbd, 0xd5, 0x97, 0x22, 0x1e, 0x72, 0x1a, 0xe7, 0x29, 0x13,
	0x99, 0x1a, 0x7f, 0xf5, 0x6f, 0x2c, 0x52, 0xf5, 0x63, 0xef, 0x9f, 0x02, 0x58, 0x6f, 0x8c, 0x49,
	0x7f, 0x70, 0xff, 0x77, 0x4f, 0xc8, 0x0e, 0x2c, 0x19, 0x73, 0x54, 0xc4, 0xdd, 0xe0, 0x7a, 0x70,
	0x73, 0x39, 0x5c, 0x34, 0xaf, 0x07, 0x31, 0xf9, 0x0e, 0x74, 0xc7, 0x6c, 0xd2, 0xa1, 0xcc, 0xcb,
	0x82, 0x66, 0x2c, 0xe5, 0xdd, 0x39, 0x94, 0xbc, 0x6c, 0xf9, 0xf7, 0x90, 0xfd, 0x91, 0xe1, 0x7e,
	0xcc, 0x52, 0x4e, 0xde, 0x06, 0x32, 0xae, 0x88, 0x2a, 0xf3, 0xa8, 0xb2, 0xde, 0x54, 0x41, 0xe9,
	0x37, 0x61, 0x55, 0x64, 0x9a, 0xcb, 0x01, 0x8b, 0xb8, 0x95, 0x5c, 0x40, 0xc9, 0x4e, 0x45, 0x35,
	0x62, 0xbd, 0xf7, 0x60, 0xd5, 0x42, 0xe7, 0xfa, 0x94, 0xcb, 0x8c, 0x6b, 0xf2, 0x06, 0x74, 0x9e,
	0x45, 0x79, 0x96, 0xf1, 0x48, 0x53, 0xcd, 0x86, 0x0a, 0xe1, 0x77, 0xc2, 0x15, 0x4f, 0x7c, 0xc4,
	0x86, 0xaa, 0xf7, 0x01, 0xac, 0x39, 0xb5, 0x41, 0x41, 0x25, 0xcb, 0x86, 0x9c, 0x6c, 0xc1, 0xa5,
	0x24, 0x3f, 0xe3, 0xd2, 0xc9, 0xdb, 0x17, 0x43, 0x2d, 0x8b, 0x82, 0x4b, 0x74, 0xad, 0x13, 0xda,
	0x97, 0xde, 0x7f, 0xce, 0x01, 0x58, 0xfd, 0x51, 0xc2, 0xb2, 0xff, 0xd7, 0x90, 0xe4, 0x26, 0xac,
	0x1b, 0x61, 0x2a, 0xf9, 0x99, 0x14, 0x9a, 0x1b, 0x41, 0x67, 0x74, 0xd5, 0xd0, 0x43, 0x4b, 0x7e,
	0xc4, 0x86, 0x64, 0x0f, 0x40, 0x89, 0xb4, 0x48, 0xb8, 0x41, 0x87, 0x01, 0xea, 0x84, 0xcb, 0x96,
	0x72, 0x7f, 0x50, 0x90, 0x6f, 0x01, 0xe1, 0x59, 0xc4, 0x0a, 0x55, 0x26, 0x4c, 0x8b, 0x3c, 0xa3,
	0xfa, 0xbc, 0xb0, 0xd1, 0xe9, 0x84, 0x1b, 0x63, 0x9c, 0x47, 0xe7, 0x05, 0x27, 0xbb, 0xb0, 0x9c,
	0x97, 0x9a, 0x4b, 0x1c, 0xf0, 0x12, 0x4a, 0xb5, 0x90, 0x60, 0x86, 0xfa, 0xd3, 0x00, 0xc0, 0xa2,
	0x32, 0x31, 0xe8, 0x2e, 0x5e, 0x9f, 0xbf, 0xd9, 0xde, 0x4f, 0x6f, 0x7d, 0x95, 0xcb, 0xed, 0xd6,
	0x44, 0xe0, 0xc3, 0x65, 0x74, 0x1f, 0xe7, 0xe0, 0x75, 0x68, 0x37, 0xc3, 0xb3, 0x74, 0x7d, 0xfe,
	0x66, 0x27, 0x04, 0x59, 0x85, 0xa6, 0xf7, 0xcb, 0x39, 0xbf, 0x54, 0x75, 0x9c, 0xd2, 0xbc, 0x30,
	0x5e, 0x9a, 0xf0, 0x17, 0xec, 0x3c, 0xc9, 0x59, 0x4c, 0xfb, 0xe7, 0x9a, 0x57, 0xe1, 0x77, 0xc4,
	0xef, 0x1b, 0x1a, 0xb9, 0x02, 0xad, 0xbe, 0xd0, 0x54, 0x32, 0xcd, 0x5d, 0xd8, 0x97, 0xfa, 0x42,
	0x87, 0x4c, 0x73, 0xb2, 0x0e, 0xf3, 0x52, 0x17, 0x6e, 0x25, 0x9a, 0x47, 0xb3, 0xf8, 0xb4, 0x48,
	0xb9, 0xd2, 0x2c, 0x2d, 0x68, 0x9a, 0xc7, 0xd5, 0xe2, 0xab, 0xa8, 0x87, 0x79, 0xcc, 0xcd, 0x4c,
	0x28, 0x31, 0xcc, 0x58, 0x92, 0x88, 0x6c, 0x48, 0x0b, 0x16, 0x3d, 0xe1, 0x5a, 0xb9, 0x18, 0x6f,
	0xd4, 0x9c, 0x63, 0xcb, 0x30, 0xe3, 0x44, 0x4c, 0x75, 0x17, 0x91, 0x6f, 0x1e, 0xc9, 0x7b, 0xb0,
	0x23, 0x75, 0x41, 0x4f, 0x39, 0x8b, 0xb9, 0xa4, 0xde, 0x09, 0x9c, 0xcf, 0x25, 0x94, 0xda, 0x92,
	0xba, 0x78, 0x80, 0xdc, 0x63, 0xcb, 0xc4, 0x29, 0x7d, 0x07, 0xb6, 0x6a, 0x78, 0x51, 0x92, 0x47,
	0x4f, 0xe8, 0x40, 0xf2, 0xa7, 0xdd, 0x16, 0xea, 0x90, 0x8a, 0x77, 0xd7, 0xb0, 0x3e, 0x94, 0xfc,
	0x29, 0x21, 0xb0, 0xa0, 0x94, 0x8c, 0xba, 0xcb, 0x28, 0x81, 0xcf, 0xbd, 0x3f, 0x9c, 0x83, 0xe5,
	0x2a, 0x96, 0x95, 0xcb, 0x49, 0xae, 0xed, 0x8e, 0x76, 0xdb, 0xbe, 0xe3, 0xa9, 0xb8, 0x91, 0x4d,
	0xac, 0x2b, 0xb1, 0x46, 0x2c, 0x57, 0x3c, 0x11, 0x03, 0x7a, 0x05, 0x5a, 0x66, 0x7a, 0x30, 0x70,
	0x36, 0xaa, 0x4b, 0x3a, 0x4e, 0x31, 0x64, 0x3f, 0x0e, 0xa0, 0x5d, 0x4f, 0x9d, 0xc2, 0xb8, 0xb6,
	0xf7, 0xb3, 0x59, 0xac, 0xb8, 0x7a, 0xd8, 0x10, 0x74, 0x9c, 0x1e, 0x59, 0x04, 0xbd, 0x7f, 0x0d,
	0x7c, 0x18, 0x98, 0x4e, 0xc9, 0x07, 0xb0, 0x9b, 0xb2, 0x67, 0x22, 0x2d, 0x53, 0x9a, 0x95, 0x69,
	0x9f, 0x4b, 0x1a, 0xf1, 0x24, 0x51, 0x76, 0x72, 0x63, 0xb7, 0xb2, 0xba, 0x4e, 0xe4, 0x63, 0x94,
	0xb8, 0x6b, 0x04, 0x70, 0x8e, 0x63, 0xf2, 0x7d, 0x78, 0x6d, 0xaa, 0x7a, 0x99, 0x79, 0x0b, 0x36,
	0x5e, 0x57, 0x9f, 0xb7, 0xf0, 0x38, 0x73, 0x36, 0xae, 0x40, 0x8b, 0xe9, 0xf1, 0xe8, 0x31, 0x6d,
	0xa3, 0xb7, 0x0e, 0xf3, 0xa3, 0x42, 0xb8, 0xbd, 0x6e, 0x1e, 0x91, 0x12, 0x09, 0xb7, 0xe6, 0xcc,
	0x63, 0xef, 0x3b, 0xd0, 0xb2, 0xee, 0x0c, 0xa4, 0x49, 0xe2, 0x03, 0x69, 0x2d, 0xb9, 0x24, 0x3e,
	0x90, 0x68, 0x88, 0xc0, 0x42, 0x9c, 0x44, 0xc2, 0xa1, 0xc1, 0xe7, 0xde, 0x5b, 0xb0, 0x56, 0xe5,
	0x56, 0x45, 0x85, 0xe6, 0xa9, 0xc9, 0x7e, 0x23, 0x96, 0x94, 0x5e, 0xdb, 0xbe, 0xf4, 0xfe, 0x3b,
	0x80, 0x35, 0xc3, 0xa6, 0x62, 0x90, 0x08, 0xa5, 0xcd, 0x7f, 0xe4, 0x16, 0x6c, 0xd6, 0xe9, 0x1a,
	0xa9, 0x98, 0xb3, 0xad, 0xde, 0x46, 0xc5, 0x7a, 0x28, 0x94, 0xc6, 0xf4, 0xfe, 0x4d, 0xd8, 0x98,
	0x90, 0x17, 0x3e, 0x36, 0x6b, 0x63, 0xd2, 0x07, 0x31, 0xf9, 0x93, 0x00, 0x96, 0x2b, 0x5a, 0x77,
	0x7e, 0x16, 0x39, 0x6a, 0x22, 0x10, 0x61, 0x3d, 0x7e, 0xef, 0xdf, 0x03, 0x9f, 0xfb, 0x8b, 0xb3,
	0x53, 0x5c, 0xeb, 0x42, 0xd1, 0x11, 0x4b, 0x5c, 0xa1, 0x6c, 0x85, 0x4b, 0x42, 0x7d, 0x62, 0x5e,
	0xc9, 0x17, 0x41, 0xb3, 0x86, 0x19, 0x27, 0xd1, 0xc3, 0xaf, 0x1e, 0xfc, 0xf8, 0xdc, 0x34, 0x4a,
	0xa6, 0x09, 0x68, 0x55, 0x59, 0x33, 0x96, 0xd0, 0x84, 0xf5, 0x79, 0xe2, 0x4a, 0x4c, 0xc7, 0x53,
	0x1f, 0x1a, 0x62, 0xef, 0x97, 0x4b, 0xb0, 0x6d, 0x91, 0xd5, 0x3e, 0x14, 0x4c, 0xb2, 0x54, 0x99,
	0xd5, 0x83, 0x39, 0xca, 0xce, 0x2e, 0x3e, 0x93, 0x1f, 0x05, 0xd0, 0xf2, 0x35, 0xd8, 0xb9, 0x99,
	0xcc, 0xa4, 0x8e, 0xb8, 0x31, 0xc3, 0x6a, 0x74, 0xf2, 0xfb, 0xb0, 0x60, 0x4a, 0x0a, 0xba, 0xd5,
	0xde, 0x3f, 0x9d, 0x05, 0x0a, 0x2c, 0x61, 0x38, 0x2a, 0x39, 0x87, 0x79, 0x1d, 0xa7, 0x2e, 0xb1,
	0x0d, 0x67, 0x94, 0xd8, 0x42, 0x33, 0xa6, 0x19, 0x9a, 0xe9, 0x14, 0x93, 0xc1, 0x8c, 0x86, 0x66,
	0x3a, 0x0d, 0xcd, 0x98, 0x64, 0x04, 0x73, 0x03, 0x89, 0xa5, 0xad, 0xbd, 0x3f, 0x98, 0xc5, 0xc8,
	0x03, 0x19, 0xce, 0x0d, 0x24, 0xf9, 0x3c, 0x80, 0xf5, 0x42, 0xf1, 0x32, 0xce, 0xcf, 0x84, 0xe4,
	0x76, 0x35, 0x60, 0xed, 0x9c, 0xd1, 0xc4, 0x9b, 0x1c, 0x10, 0xae, 0xd5, 0x08, 0xee, 0x1b, 0x00,
	0xe4, 0xcf, 0x02, 0xe8, 0x34, 0x50, 0x89, 0x33, 0x2c, 0xcd, 0xb3, 0x84, 0xb4, 0x52, 0x0f, 0x7f,
	0x70, 0xd6, 0xfb, 0x8f, 0xc0, 0xf7, 0xbb, 0xd5, 0x5e, 0x36, 0x9b, 0xb8, 0x91, 0xa2, 0xf1, 0xd9,
	0x54, 0x93, 0x54, 0x97, 0x2e, 0x0f, 0x9b, 0xc7, 0xe7, 0x7b, 0xab, 0xf9, 0x29, 0xbd, 0xd5, 0x17,
	0x01, 0x00, 0xa6, 0x06, 0xae, 0xb9, 0xf4, 0x35, 0x5d, 0xcf, 0xc2, 0xd7, 0xc9, 0xd4, 0x14, 0x36,
	0x70, 0xf4, 0x7e, 0x0f, 0xba, 0xc9, 0xfe, 0x40, 0xf4, 0xa9, 0xd2, 0x4c, 0x2b, 0xda, 0x67, 0x43,
	0x1a, 0xe5, 0xa5, 0xd1, 0x50, 0xd6, 0x2f, 0xd3, 0x96, 0x59, 0x92, 0xed, 0x19, 0x17, 0x8c, 0x5f,
	0x86, 0x78, 0x17, 0x69, 0xa6, 0x1d, 0x35, 0x4e, 0x7b, 0x91, 0x39, 0x14, 0x01, 0x43, 0xb2, 0x02,
	0xbd, 0x9f, 0x00, 0x6c, 0x4e, 0x0e, 0x21, 0xd2, 0x82, 0xfc, 0xcc, 0x54, 0xc8, 0xb4, 0xc8, 0x95,
	0xc0, 0x06, 0xdd, 0x30, 0x71, 0x80, 0xf6, 0xfe, 0xe8, 0xab, 0x8e, 0xca, 0x74, 0x7f, 0xc3, 0xd5,
	0x1a, 0xce, 0x89, 0x66, 0x9a, 0xfc, 0x7d, 0x00, 0x9b, 0x0d, 0x84, 0xa9, 0x2e, 0x69, 0x2c, 0xf3,
	0xc2, 0x65, 0xee, 0x8b, 0x42, 0xb9, 0x51, 0x43, 0x3a, 0xd4, 0xe5, 0x3d, 0x99, 0x17, 0x35, 0x50,
	0xfb, 0x53, 0x87, 0x89, 0xc4, 0x02, 0x9d, 0x7f, 0x05, 0x80, 0xe2, 0x6f, 0x2c, 0x26, 0x12, 0x04,
	0xfa, 0x17, 0x01, 0xb4, 0x93, 0xfd, 0x81, 0xea, 0x0b, 0x0b, 0x70, 0xe1, 0x42, 0x01, 0x82, 0x85,
	0x82, 0xc8, 0xbe, 0x08, 0x60, 0x39, 0x2d, 0x13, 0x2d, 0x22, 0xa6, 0xb4, 0xab, 0x0e, 0x17, 0x85,
	0xab, 0x06, 0x82, 0xb0, 0xfa, 0x32, 0x67, 0x31, 0xc2, 0x5a, 0xbc, 0x58, 0x58, 0x15, 0x10, 0xf2,
	0xd3, 0x00, 0x3a, 0x4f, 0xb2, 0xfc, 0x2c, 0xa3, 0x65, 0x66, 0x23, 0xb6, 0x74, 0xa1, 0xd0, 0x56,
	0x10, 0xcc, 0x63, 0x8b, 0x05, 0x33, 0x4b, 0x99, 0x8d, 0xe3, 0x6b, 0x5d, 0x6c, 0x66, 0x71, 0x70,
	0x1c, 0xc2, 0xde, 0xbf, 0xac, 0xc3, 0xd6, 0xa4, 0x70, 0x2c, 0x54, 0x41, 0xfe, 0x2e, 0x80, 0x75,
	0xf3, 0xf0, 0x0a, 0x65, 0xc5, 0xb5, 0x06, 0x1e, 0x4c, 0x8b, 0xff, 0x10, 0xc0, 0x56, 0x13, 0xe3,
	0x2b, 0x92, 0x17, 0x49, 0x03, 0x93, 0x4f, 0x8c, 0x3f, 0x0f, 0xe0, 0x72, 0x13, 0xea, 0xab, 0x92,
	0x1a, 0x37, 0x1b, 0xa0, 0xaa, 0xe4, 0xf8, 0x37, 0x01, 0xac, 0x56, 0x3b, 0xff, 0x55, 0xc8, 0x8f,
	0x9d, 0x0a, 0x0d, 0xe2, 0xfb, 0xab, 0x00, 0x56, 0xdc, 0x76, 0xb2, 0xe8, 0x2e, 0x36, 0x4b, 0xb6,
	0x1d, 0x96, 0x2a, 0x76, 0x55, 0x7a, 0xb2, 0xe8, 0x2e, 0x36, 0x59, 0x76, 0x2a, 0x34, 0x15, 0x3e,
	0xc9, 0x23, 0x2e, 0x46, 0x3c, 0x46, 0x78, 0xea, 0x82, 0x33, 0x66, 0xc7, 0xa3, 0x31, 0xf0, 0x14,
	0xf9, 0x49, 0x00, 0xad, 0x98, 0xb9, 0xaa, 0x7c, 0xb1, 0xb9, 0x72, 0x29, 0x66, 0xb6, 0x24, 0x7f,
	0x1e, 0xc0, 0xb2, 0x28, 0xd4, 0xd0, 0x82, 0x5a, 0xbe, 0x50, 0x50, 0x2d, 0x03, 0x04, 0x51, 0xfd,
	0x22, 0x80, 0xed, 0x66, 0x4a, 0xc9, 0x73, 0x9a, 0xbb, 0x19, 0x85, 0x57, 0x26, 0xa7, 0x1c, 0xe5,
	0x47, 0x76, 0x5e, 0xff, 0x71, 0x02, 0x6d, 0xb1, 0x9f, 0x16, 0x56, 0xb9, 0xdb, 0xbe, 0x50, 0xb4,
	0xcd, 0x0a, 0x72, 0xbc, 0x9f, 0x16, 0xa6, 0xb2, 0xa8, 0x29, 0x7d, 0xc5, 0xca, 0x2b, 0xd4, 0x57,
	0x98, 0x4d, 0x92, 0xb2, 0x88, 0xa6, 0xf9, 0x88, 0x77, 0x3b, 0x17, 0xbb, 0x49, 0x52, 0x16, 0x1d,
	0xe6, 0x23, 0xde, 0xfb, 0xf1, 0x1c, 0xec, 0x4c, 0x4a, 0x29, 0xfe, 0x94, 0x66, 0x65, 0x4a, 0xde,
	0x81, 0x2d, 0xc5, 0x9f, 0x96, 0x3c, 0x8b, 0xb8, 0x3f, 0x69, 0x55, 0x3c, 0xd3, 0xee, 0x80, 0x96,
	0x78, 0x9e, 0x3d, 0x5f, 0x3d, 0xe1, 0x99, 0x26, 0xbf, 0x0e, 0xdd, 0x49, 0x0d, 0xfe, 0xac, 0xe0,
	0x91, 0xae, 0x0e, 0x65, 0xb7, 0xc7, 0xb5, 0xee, 0x3b, 0x2e, 0xf9, 0x08, 0xae, 0xf7, 0xcf, 0x0b,
	0xa6, 0x14, 0x8f, 0xa9, 0xc8, 0xfa, 0x79, 0x99, 0xc5, 0xb4, 0x32, 0x65, 0x7f, 0x30, 0x62, 0xcd,
	0x5d, 0x08, 0xf7, 0xbc, 0xdc, 0x81, 0x15, 0x3b, 0x71, 0x52, 0xf6, 0x06, 0x80, 0xfc, 0x36, 0x5c,
	0xab, 0x0c, 0xe5, 0xa5, 0x7e, 0xce, 0xc8, 0x02, 0x1a, 0xb9, 0xe2, 0x65, 0x8e, 0x4a, 0x3d, 0x6e,
	0xa0, 0xf7, 0x5f, 0xf3, 0x70, 0x75, 0x32, 0x22, 0x83, 0x5c, 0x9e, 0x31, 0x19, 0x8b, 0x6c, 0x48,
	0xfe, 0xda, 0xff, 0xec, 0xac, 0xfa, 0x2b, 0xe5, 0x1a, 0xac, 0xa7, 0xb3, 0x9d, 0x4b, 0x91, 0x16,
	0xee, 0x17, 0xa7, 0xef, 0xac, 0x94, 0x29, 0x13, 0xae, 0xfd, 0x6b, 0xa0, 0xb3, 0x6d, 0x95, 0x9c,
	0x2d, 0x3a, 0x83, 0xc2, 0xb7, 0x7e, 0x35, 0xbe, 0xbf, 0x0d, 0x60, 0x6d, 0x62, 0x81, 0xb8, 0x4e,
	0xaa, 0x9c, 0x2d, 0x3c, 0xb7, 0xc4, 0xc3, 0xd5, 0xf1, 0xe5, 0xd8, 0xfb, 0xb7, 0xea, 0x9a, 0xb6,
	0x90, 0xb9, 0xe6, 0x11, 0xde, 0x7d, 0xbd, 0x05, 0x6b, 0xf5, 0x1b, 0x6d, 0x9c, 0xca, 0xae, 0xd6,
	0x64, 0xbc, 0x33, 0x7a, 0x17, 0x2e, 0x37, 0x04, 0xa3, 0x3c, 0x1b, 0x88, 0x61, 0x29, 0xdd, 0xda,
	0x5f, 0x0e, 0xb7, 0x6a, 0xe6, 0xdd, 0x8a, 0x37, 0x61, 0xbd, 0x71, 0x5f, 0xdb, 0xb0, 0xee, 0x6f,
	0x6b, 0x1d, 0x85, 0xc7, 0x63, 0xb7, 0xb5, 0x15, 0x15, 0xc5, 0xb6, 0x61, 0x91, 0x45, 0x5a, 0x8c,
	0x38, 0xf6, 0x57, 0xad, 0xd0, 0xbd, 0xf5, 0x7e, 0xd1, 0xf6, 0x97, 0x16, 0x2c, 0x9a, 0x38, 0xee,
	0x0f, 0x66, 0x71, 0x62, 0x3e, 0x71, 0x98, 0xd4, 0x38, 0xee, 0x27, 0x5b, 0x70, 0xc9, 0x4c, 0x8d,
	0xbf, 0xdb, 0xb6, 0x2f, 0x84, 0xc0, 0x42, 0xaa, 0xb4, 0x70, 0xd1, 0xc0, 0x67, 0xf2, 0xb5, 0xc6,
	0xb9, 0x7a, 0xaa, 0xa8, 0x16, 0x2e, 0x06, 0x2b, 0x9e, 0x7a, 0xa8, 0x1e, 0x09, 0xf2, 0x0d, 0x58,
	0xaf, 0x0f, 0xad, 0x4e, 0x59, 0x16, 0x27, 0x36, 0x18, 0xcb, 0x8d, 0x7b, 0x8f, 0x07, 0x48, 0x6e,
	0x5e, 0xc1, 0x2f, 0x8e, 0x5d, 0xc1, 0xbf, 0x0e, 0xed, 0xea, 0xbe, 0x59, 0xc4, 0xee, 0xaa, 0x10,
	0x3c, 0xe9, 0x20, 0x36, 0x50, 0x10, 0x01, 0x4d, 0x85, 0x4a, 0x99, 0x8e, 0x4e, 0xb1, 0xef, 0x69,
	0x85, 0x2b, 0xa9, 0x7a, 0x24, 0x0e, 0x1d, 0xcd, 0x4c, 0x9a, 0xf9, 0x7d, 0xe3, 0x65, 0x78, 0x8c,
	0x8d, 0x48, 0x2b, 0xec, 0xa4, 0xba, 0x3c, 0xac, 0x88, 0x78, 0xdb, 0x18, 0xa7, 0x34, 0xe5, 0xb1,
	0x60, 0x4d, 0x61, 0x40, 0x61, 0xa2, 0xe3, 0xf4, 0xd0, 0xb0, 0x1a, 0x1a, 0x37, 0x61, 0xbd, 0x3f,
	0x12, 0xd4, 0xd4, 0x13, 0xb3, 0xd0, 0x12, 0x11, 0x69, 0x2c, 0xc9, 0xad, 0x70, 0xb5, 0x3f, 0x12,
	0x87, 0x2c, 0xba, 0xeb, 0xa8, 0xe4, 0x0d, 0x30, 0x14, 0x9a, 0xe5, 0xb4, 0xc8, 0xa5, 0xa6, 0x65,
	0x81, 0x45, 0xb1, 0x15, 0xb6, 0xfb, 0x23, 0xf1, 0x71, 0x7e, 0x9c, 0x4b, 0xfd, 0xb8, 0x20, 0xef,
	0xc3, 0x4e, 0x94, 0x67, 0x5a, 0xe6, 0x09, 0x3d, 0xcb, 0x65, 0xdc, 0xc4, 0xd0, 0x41, 0xe9, 0xcb,
	0x8e, 0xfd, 0x3b, 0xb9, 0x8c, 0x1b, 0x30, 0xbe, 0x0b, 0xdd, 0xf1, 0x8b, 0xf2, 0x86, 0xe2, 0x2a,
	0x2a, 0xee, 0x8c, 0xf1, 0x1b, 0xaa, 0xdf, 0x86, 0xcd, 0x71, 0x55, 0x2e, 0x65, 0x2e, 0xbb, 0x6b,
	0x38, 0x0d, 0xe3, 0xd7, 0xef, 0xf7, 0x0d, 0x87, 0xf4, 0xc0, 0x4e, 0xf3, 0x59, 0x2e, 0x9f, 0x88,
	0x6c, 0xd8, 0x5d, 0x6f, 0x4c, 0xbd, 0xa3, 0x91, 0x6f, 0xc1, 0xa6, 0xc9, 0xfa, 0xf9, 0x80, 0xa6,
	0x3c, 0xcd, 0xe5, 0x39, 0xb5, 0x0b, 0x6b, 0x03, 0xa7, 0x6f, 0x3d, 0x2f, 0xf5, 0xd1, 0xe0, 0x10,
	0x19, 0x27, 0xb8, 0xc6, 0xfe, 0x32, 0x00, 0x30, 0x12, 0x42, 0x69, 0x11, 0xa9, 0x2e, 0xc1, 0x8d,
	0xf0, 0x6c, 0xb6, 0xb9, 0xa8, 0x2e, 0x2e, 0x61, 0x03, 0x0b, 0x79, 0x1b, 0x88, 0x59, 0xf2, 0x55,
	0x40, 0x69, 0x9c, 0x9f, 0x65, 0xdd, 0x4d, 0x8c, 0xe9, 0xba, 0xe1, 0xf8, 0x50, 0xde, 0xcb, 0xcf,
	0x32, 0xe3, 0xb7, 0x59, 0x0a, 0x89, 0x48, 0x85, 0x46, 0xac, 0x56, 0x7c, 0xcb, 0x89, 0xb3, 0xe8,
	0xa1, 0xe1, 0x1c, 0x15, 0x5c, 0xa2, 0xf8, 0x2d, 0xd8, 0x94, 0x3c, 0x2e, 0xb3, 0x98, 0x65, 0xd1,
	0xb9, 0xfb, 0xba, 0x44, 0xc4, 0xdd, 0xcb, 0xf6, 0x5a, 0xbd, 0x66, 0xe1, 0x85, 0xf4, 0x41, 0x4c,
	0x6e, 0xc3, 0xf6, 0x73, 0xf2, 0x36, 0xb2, 0xdb, 0x36, 0xb5, 0x4d, 0xa8, 0xd8, 0xe8, 0xbe, 0x03,
	0x0d, 0x3a, 0xcd, 0xfb, 0x3f, 0x74, 0x9b, 0x69, 0x07, 0x6b, 0x30, 0xa9, 0x79, 0x47, 0xc8, 0x3a,
	0x88, 0xcd, 0x6f, 0xc4, 0xe7, 0xf2, 0x6f, 0xb7, 0x3b, 0xbb, 0xfb, 0xeb, 0x7a, 0xd4, 0xd0, 0x1e,
	0xe6, 0x1f, 0xd7, 0x65, 0xe0, 0x37, 0xe1, 0xaa, 0x50, 0x94, 0x45, 0xb4, 0x60, 0x52, 0x0b, 0x96,
	0x24, 0xe7, 0x46, 0x7c, 0x28, 0x59, 0x9a, 0xf2, 0xb8, 0x7b, 0xc5, 0x2e, 0x76, 0xa1, 0xee, 0x44,
	0xc7, 0x9e, 0x7f, 0x5c, 0xb1, 0x4d, 0xc0, 0x79, 0x95, 0xff, 0xea, 0x5b, 0xc1, 0xab, 0xee, 0x8b,
	0x92, 0x51, 0x91, 0x1d, 0x8c, 0xdd, 0x0c, 0x7e, 0x1e, 0xc0, 0x35, 0xf7, 0xbd, 0x90, 0x29, 0x57,
	0x3a, 0x97, 0x29, 0xf5, 0x1b, 0x14, 0xef, 0x02, 0xf7, 0x00, 0xfa, 0x31, 0x2d, 0xf2, 0x44, 0x44,
	0xee, 0x7b, 0x9a, 0x56, 0xb8, 0xdc, 0x8f, 0x8f, 0x2d, 0x81, 0x74, 0x61, 0xc9, 0xb7, 0xc0, 0x73,
	0xf6, 0xc6, 0xd4, 0xbd, 0x92, 0x6b, 0xcd, 0x83, 0xca, 0x79, 0xab, 0x57, 0x1f, 0x18, 0x5e, 0x6b,
	0x9e, 0x17, 0x2e, 0x38, 0xab, 0x9e, 0xd0, 0xfb, 0xe9, 0xa6, 0xbf, 0xaf, 0x74, 0x81, 0x53, 0x3c,
	0xb2, 0xb7, 0x02, 0x64, 0x17, 0x96, 0xab, 0x05, 0xe8, 0x3a, 0xc4, 0x96, 0x5f, 0x76, 0x26, 0x59,
	0xd5, 0xab, 0x93, 0xd9, 0x59, 0xb5, 0xb9, 0x7e, 0xd5, 0xcb, 0xdc, 0xb1, 0x41, 0xbe, 0x0d, 0xdb,
	0xb5, 0x64, 0x96, 0x6b, 0x31, 0x10, 0x11, 0xa6, 0x00, 0x57, 0x06, 0xb6, 0xbc, 0xfc, 0xc7, 0x0d,
	0x1e, 0xe6, 0x62, 0x16, 0x51, 0x36, 0x14, 0xd9, 0x90, 0x6a, 0x91, 0xfa, 0x4f, 0x75, 0x56, 0x52,
	0x16, 0xdd, 0x31, 0xc4, 0x47, 0x22, 0xe5, 0xe3, 0x52, 0x78, 0x61, 0x6f, 0x8b, 0x42, 0x25, 0x85,
	0xd7, 0xf6, 0x37, 0xc0, 0xbc, 0xd3, 0x41, 0x92, 0xe7, 0x66, 0x4f, 0x62, 0x59, 0x68, 0x85, 0xed,
	0x94, 0x45, 0x1f, 0x3a, 0x92, 0x17, 0x49, 0x38, 0x93, 0x99, 0x11, 0x59, 0xaa, 0x44, 0x1e, 0x3a,
	0x12, 0xb9, 0x07, 0xaf, 0x23, 0xdb, 0x34, 0x42, 0xac, 0x9f, 0xf0, 0x98, 0x3e, 0x17, 0x00, 0x5b,
	0x2e, 0x76, 0x51, 0xec, 0x9e, 0x93, 0x3a, 0x1c, 0x8f, 0xc6, 0x01, 0xf4, 0x10, 0x07, 0x2d, 0xcb,
	0xff, 0xc5, 0x90, 0xad, 0x28, 0x7b, 0x28, 0xf9, 0xb8, 0x7c, 0x81, 0xa9, 0x6f, 0xc2, 0x46, 0xad,
	0x28, 0x39, 0x6b, 0x94, 0x97, 0x35, 0x1f, 0xd3, 0xd0, 0x92, 0xc9, 0x1d, 0xd8, 0x73, 0xc3, 0x8e,
	0x9f, 0x82, 0x52, 0x9e, 0xa1, 0x69, 0x57, 0x68, 0xae, 0xda, 0x11, 0xc7, 0x8e, 0x26, 0xef, 0x5b,
	0x09, 0xf2, 0x5b, 0xb0, 0x6b, 0x86, 0xc3, 0x8a, 0x63, 0x32, 0x11, 0x1d, 0x24, 0xa5, 0x3a, 0xad,
	0x0c, 0xd8, 0x0a, 0xb4, 0x93, 0xb2, 0xc8, 0xd4, 0x1f, 0x93, 0x92, 0x3e, 0x34, 0x7c, 0xaf, 0xfd,
	0x2e, 0x6c, 0xab, 0x22, 0x11, 0x9a, 0x9e, 0xe6, 0x52, 0x7c, 0x96, 0x67, 0x75, 0x86, 0xea, 0xe0,
	0xbc, 0x6e, 0x22, 0xf7, 0x81, 0x65, 0xfa, 0x1c, 0xf5, 0x1b, 0xb8, 0x3f, 0x45, 0x41, 0x55, 0x5e,
	0xca, 0x88, 0xd3, 0x61, 0xc9, 0x64, 0x5c, 0x8d, 0x68, 0x8b, 0xd1, 0xb6, 0x50, 0x07, 0xc5, 0x09,
	0xf2, 0x3f, 0x32, 0x6c, 0x3f, 0xe0, 0x7b, 0xb0, 0x83, 0xba, 0x6a, 0x48, 0x93, 0x7c, 0x88, 0x0b,
	0xc4, 0x2b, 0xae, 0xa1, 0xe2, 0x96, 0x51, 0x54, 0xc3, 0x87, 0x96, 0xe9, 0xd5, 0x4c, 0x3b, 0xa2,
	0x68, 0xcc, 0x44, 0x25, 0xbd, 0x6e, 0x7b, 0x00, 0xa1, 0xee, 0x31, 0xd1, 0xf0, 0xc6, 0x49, 0x4d,
	0xda, 0xde, 0x40, 0xe9, 0x4d, 0x94, 0x9e, 0x30, 0x1d, 0xc2, 0x5b, 0x4e, 0x89, 0xc5, 0xb1, 0xb4,
	0x1f, 0x3f, 0x30, 0xcd, 0xbd, 0x73, 0x26, 0xb8, 0xde, 0x0a, 0x41, 0x2b, 0x37, 0xd0, 0xca, 0x9d,
	0x38, 0x96, 0x9f, 0x38, 0x59, 0xeb, 0xe7, 0x21, 0x8b, 0xbc, 0xcd, 0x4f, 0xe1, 0xed, 0xa9, 0x36,
	0x63, 0xae, 0xb4, 0xc8, 0x5c, 0xfd, 0x6e, 0x18, 0xb6, 0xc5, 0xe6, 0xeb, 0xcf, 0x19, 0xbe, 0x57,
	0xcb, 0x37, 0xac, 0x7f, 0x04, 0x37, 0xa6, 0x5a, 0x17, 0xc5, 0xe8, 0x76, 0x65, 0xd2, 0x16, 0xa4,
	0x6b, 0xcf, 0x99, 0x3c, 0x28, 0x46, 0xb7, 0xbd, 0xa1, 0x5f, 0x83, 0xcb, 0x42, 0x21, 0x10, 0xc5,
	0xa3, 0x52, 0xf2, 0x4a, 0xf9, 0xb2, 0xed, 0x86, 0x84, 0x3a, 0x64, 0xd1, 0x09, 0xb2, 0xbc, 0x8a,
	0x5b, 0xdd, 0x4e, 0xde, 0xed, 0x0b, 0x5b, 0x9a, 0xcc, 0xea, 0xb6, 0xc2, 0x6e, 0x27, 0x7c, 0x0f,
	0xf6, 0xc6, 0xcd, 0x4f, 0xce, 0xca, 0x0e, 0x0e, 0x73, 0xa5, 0x31, 0xcc, 0xc4, 0xdc, 0x1c, 0xc1,
	0x9b, 0xe3, 0x16, 0x58, 0x14, 0xf1, 0x42, 0x53, 0x75, 0x5a, 0x6a, 0x5c, 0xec, 0xde, 0x52, 0x17,
	0x2d, 0x5d, 0x6f, 0x58, 0xba, 0x83, 0x92, 0x27, 0x4e, 0xd0, 0x1b, 0xfc, 0x00, 0x76, 0x7d, 0xdc,
	0xb8, 0x52, 0x3e, 0x74, 0x76, 0x3a, 0xd4, 0x13, 0xac, 0x2d, 0x9d, 0xb0, 0x1b, 0xdb, 0x90, 0x71,
	0xa5, 0x3e, 0xa9, 0x04, 0x0e, 0x99, 0x7a, 0x62, 0xf2, 0x51, 0x7c, 0x1a, 0x99, 0x30, 0xab, 0x2c,
	0xcf, 0x0b, 0xac, 0x2a, 0xad, 0xb0, 0x6d, 0x69, 0x27, 0x86, 0x64, 0xea, 0x8f, 0x13, 0x29, 0x64,
	0x3e, 0x10, 0x89, 0xfb, 0xde, 0x73, 0xd7, 0x7e, 0x3b, 0x64, 0x59, 0xc7, 0x96, 0x83, 0xbf, 0x22,
	0x6e, 0xc2, 0xba, 0x18, 0xa6, 0xd4, 0x28, 0xf8, 0xc4, 0xd3, 0xbd, 0x66, 0xdb, 0x4b, 0x31, 0x4c,
	0x8f, 0x47, 0xb7, 0x7d, 0x9a, 0x21, 0xdf, 0x86, 0x2d, 0x2f, 0x39, 0x66, 0x7a, 0xcf, 0x7d, 0x96,
	0x84, 0xd2, 0x13, 0xa6, 0xd3, 0x24, 0x1e, 0x17, 0x7e, 0xcd, 0x15, 0x83, 0x24, 0x6e, 0x4a, 0xbe,
	0x0f, 0x3b, 0x69, 0x2a, 0x0b, 0x9b, 0x8b, 0xf1, 0xbb, 0xb2, 0x54, 0x7c, 0x66, 0xab, 0xc1, 0xeb,
	0xb6, 0x29, 0x35, 0x6c, 0x4c, 0xcb, 0x47, 0x0d, 0x26, 0xf9, 0x59, 0x00, 0x9d, 0xb1, 0x92, 0xd9,
	0xbd, 0x8e, 0x2d, 0xc4, 0x67, 0xb3, 0x68, 0x21, 0xa6, 0xd7, 0xeb, 0x70, 0x05, 0x69, 0x77, 0x2d,
	0xc9, 0x94, 0x07, 0x9f, 0x53, 0xc7, 0x65, 0xa5, 0xd9, 0x31, 0x65, 0x26, 0x74, 0xf7, 0x06, 0x86,
	0x64, 0xd7, 0x89, 0x9d, 0x34, 0xb4, 0x43, 0xa6, 0xf9, 0xe3, 0x4c, 0x68, 0xf2, 0x5d, 0xb8, 0x32,
	0xdd, 0x4a, 0x51, 0xa8, 0x6e, 0x0f, 0x9b, 0xac, 0xed, 0x29, 0xfa, 0xc7, 0x85, 0x32, 0xf9, 0x79,
	0xba, 0xea, 0x93, 0x3e, 0x2d, 0x54, 0xf7, 0x0d, 0x54, 0xde, 0x99, 0xa2, 0xfc, 0x83, 0xfe, 0xb1,
	0x22, 0x0f, 0xe0, 0x46, 0x7d, 0xd3, 0xf0, 0x22, 0x07, 0xbe, 0x86, 0x0e, 0xec, 0x55, 0x82, 0x53,
	0x5d, 0xf8, 0x00, 0x76, 0x5f, 0x64, 0xc9, 0x38, 0xf1, 0x26, 0xe2, 0xe8, 0x4e, 0xb5, 0x61, 0xdc,
	0xf8, 0x1e, 0xec, 0xbd, 0x48, 0xdd, 0x3a, 0xf2, 0x75, 0x7b, 0xdc, 0x33, 0xd5, 0x80, 0x77, 0xa5,
	0x3e, 0xf8, 0x7f, 0x91, 0x2b, 0x6f, 0x59, 0x57, 0x2a, 0xc1, 0x17, 0xb9, 0xf2, 0x22, 0x4b, 0xc6,
	0x95, 0x9b, 0xd6, 0x95, 0xa9, 0x36, 0x9c, 0x2b, 0x2f, 0x52, 0xb7, 0xae, 0x7c, 0xc3, 0x9d, 0x5c,
	0x4d, 0x33, 0x60, 0x5c, 0xe9, 0xfd, 0xf3, 0x12, 0xec, 0x8e, 0x75, 0x67, 0x58, 0x7d, 0xeb, 0x16,
	0xed, 0x47, 0x01, 0x2c, 0xf4, 0x99, 0xf2, 0xbf, 0xf7, 0x67, 0xf2, 0xf1, 0xc8, 0x64, 0x9f, 0x18,
	0x22, 0x82, 0x29, 0x3b, 0x74, 0xee, 0x57, 0x6f, 0x87, 0xce, 0x7f, 0xc9, 0x1d, 0xba, 0xf0, 0x65,
	0x76, 0xe8, 0xa5, 0x97, 0xb0, 0x43, 0x17, 0x5f, 0xc2, 0x0e, 0x5d, 0xfa, 0xb2, 0x3b, 0xb4, 0xf5,
	0x52, 0x76, 0xe8, 0xf2, 0x4b, 0xd8, 0xa1, 0xf0, 0x65, 0x77, 0x68, 0xfb, 0xff, 0xd8, 0xa1, 0x8d,
	0x42, 0xad, 0x65, 0xe9, 0x6e, 0x27, 0xaa, 0x42, 0xfd, 0xc8, 0x90, 0x7a, 0x9f, 0xc2, 0x4a, 0xf5,
	0x77, 0x22, 0x29, 0x8b, 0xcc, 0x0f, 0x39, 0xd7, 0x16, 0xb8, 0x43, 0x47, 0xff, 0x4a, 0x08, 0x2c,
	0xf4, 0x53, 0x16, 0xb9, 0x1f, 0x52, 0xf8, 0x4c, 0x5e, 0x83, 0x76, 0xc6, 0x9f, 0x99, 0xbe, 0xb9,
	0xa0, 0xc2, 0x7f, 0x6e, 0xbf, 0x6c, 0x48, 0x0f, 0xf2, 0xe2, 0xa0, 0xe8, 0xfd, 0xd1, 0x25, 0x68,
	0x37, 0xfe, 0x0c, 0x85, 0xfc, 0x79, 0x00, 0x84, 0x69, 0xcd, 0xa2, 0xd3, 0x94, 0x67, 0x9a, 0x46,
	0x42, 0x46, 0xa5, 0xd0, 0xdd, 0xfd, 0xd9, 0x7d, 0x63, 0xc8, 0xa2, 0x70, 0xa3, 0x46, 0x70, 0xd7,
	0x02, 0x20, 0x3f, 0x0f, 0x60, 0x13, 0x7b, 0x2b, 0xa1, 0xcf, 0x69, 0xe3, 0xb3, 0xb7, 0x77, 0x11,
	0xd8, 0xf9, 0x0c, 0x33, 0xd7, 0x78, 0x0e, 0x0d, 0x89, 0x47, 0x75, 0x5c, 0x81, 0x22, 0x3d, 0xe8,
	0xf8, 0xa3, 0x38, 0x91, 0xc5, 0xfc, 0x59, 0xf7, 0x36, 0xf6, 0x6b, 0x6d, 0x7b, 0x0e, 0x77, 0x60,
	0x48, 0xe4, 0x8f, 0xfd, 0x41, 0x53, 0x64, 0xe4, 0xba, 0xef, 0xe1, 0x07, 0xd6, 0x3f, 0x9c, 0x89,
	0x1f, 0xb8, 0x8e, 0xc2, 0x65, 0x3b, 0xfa, 0x21, 0x8b, 0xc8, 0x1f, 0x04, 0xb0, 0xd8, 0x1f, 0x09,
	0x83, 0xe3, 0xfd, 0x99, 0xe3, 0x70, 0x23, 0xf7, 0x17, 0xf1, 0xaf, 0xae, 0xde, 0xfd, 0x9f, 0x00,
	0x00, 0x00, 0xff, 0xff, 0xc9, 0xb9, 0xba, 0xb1, 0x8a, 0x35, 0x00, 0x00,
}
